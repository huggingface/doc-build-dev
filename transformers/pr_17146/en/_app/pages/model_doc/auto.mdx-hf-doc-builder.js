import{S as iBt,i as dBt,s as cBt,e as a,k as l,w as F,t as o,M as fBt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as mBt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as IQr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function gBt(x){let g,v,p,m,_,d,h,Mo,gi,uf,rt,hi,pi,QA,bf,Ge,We,_i,Ln,HA,yn,xn,UA,ui,$n,JA,bi,vf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),gi=a("code"),uf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),hi=a("code"),pi=o('"new-model"'),QA=o(")."),bf=l(),Ge=a("p"),We=o("Likewise, if your "),_i=a("code"),Ln=o("NewModel"),HA=o(" is a subclass of "),yn=a("a"),xn=o("PreTrainedModel"),UA=o(`, make sure its
`),ui=a("code"),$n=o("config_class"),JA=o(` attribute is set to the same class you use when registering the model (here
`),bi=a("code"),vf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var uk=s(p);m=r(uk,"NewModelConfig"),uk.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var vi=s(d);h=r(vi,"PretrainedConfig"),vi.forEach(t),Mo=r(Ae,`, make sure its
`),gi=n(Ae,"CODE",{});var bk=s(gi);uf=r(bk,"model_type"),bk.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),hi=n(Ae,"CODE",{});var vk=s(hi);pi=r(vk,'"new-model"'),vk.forEach(t),QA=r(Ae,")."),Ae.forEach(t),bf=i(Qe),Ge=n(Qe,"P",{});var Eo=s(Ge);We=r(Eo,"Likewise, if your "),_i=n(Eo,"CODE",{});var wa=s(_i);Ln=r(wa,"NewModel"),wa.forEach(t),HA=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var Fk=s(yn);xn=r(Fk,"PreTrainedModel"),Fk.forEach(t),UA=r(Eo,`, make sure its
`),ui=n(Eo,"CODE",{});var Ff=s(ui);$n=r(Ff,"config_class"),Ff.forEach(t),JA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),bi=n(Eo,"CODE",{});var Tk=s(bi);vf=r(Tk,"NewModelConfig"),Tk.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,gi),e(gi,uf),e(g,rt),e(g,hi),e(hi,pi),e(g,QA),b(Qe,bf,Ae),b(Qe,Ge,Ae),e(Ge,We),e(Ge,_i),e(_i,Ln),e(Ge,HA),e(Ge,yn),e(yn,xn),e(Ge,UA),e(Ge,ui),e(ui,$n),e(Ge,JA),e(Ge,bi),e(bi,vf),e(Ge,Ca)},d(Qe){Qe&&t(g),Qe&&t(bf),Qe&&t(Ge)}}}function hBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Bt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function uBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bBt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function vBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ABt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Bt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _It(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $It(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dNt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cNt(x){let g,v,p,m,_,d,h,Mo,gi,uf,rt,hi,pi,QA,bf,Ge,We,_i,Ln,HA,yn,xn,UA,ui,$n,JA,bi,vf,Ca,Qe,Ae,uk,vi,bk,vk,Eo,wa,Fk,Ff,Tk,ZVe,Oje,Fi,Tf,are,YA,eXe,nre,oXe,Vje,kn,rXe,sre,tXe,aXe,lre,nXe,sXe,Xje,KA,zje,Mk,lXe,Wje,Mf,Qje,Ti,Ef,ire,ZA,iXe,dre,dXe,Hje,Co,eL,cXe,oL,fXe,Ek,mXe,gXe,hXe,rL,pXe,cre,_Xe,uXe,bXe,Er,tL,vXe,fre,FXe,TXe,Mi,MXe,mre,EXe,CXe,gre,wXe,AXe,LXe,A,Cf,hre,yXe,xXe,Ck,$Xe,kXe,SXe,wf,pre,RXe,PXe,wk,BXe,IXe,NXe,Af,_re,qXe,jXe,Ak,DXe,GXe,OXe,Lf,ure,VXe,XXe,Lk,zXe,WXe,QXe,yf,bre,HXe,UXe,yk,JXe,YXe,KXe,xf,vre,ZXe,eze,xk,oze,rze,tze,$f,Fre,aze,nze,$k,sze,lze,ize,kf,Tre,dze,cze,kk,fze,mze,gze,Sf,Mre,hze,pze,Sk,_ze,uze,bze,Rf,Ere,vze,Fze,Rk,Tze,Mze,Eze,Pf,Cre,Cze,wze,Pk,Aze,Lze,yze,Bf,wre,xze,$ze,Bk,kze,Sze,Rze,If,Are,Pze,Bze,Ik,Ize,Nze,qze,Nf,Lre,jze,Dze,Nk,Gze,Oze,Vze,qf,yre,Xze,zze,qk,Wze,Qze,Hze,jf,xre,Uze,Jze,jk,Yze,Kze,Zze,Df,$re,eWe,oWe,Dk,rWe,tWe,aWe,Gf,kre,nWe,sWe,Gk,lWe,iWe,dWe,Of,Sre,cWe,fWe,Ok,mWe,gWe,hWe,Vf,Rre,pWe,_We,Vk,uWe,bWe,vWe,Xf,Pre,FWe,TWe,Xk,MWe,EWe,CWe,zf,Bre,wWe,AWe,zk,LWe,yWe,xWe,Wf,Ire,$We,kWe,Wk,SWe,RWe,PWe,Qf,Nre,BWe,IWe,Qk,NWe,qWe,jWe,Hf,qre,DWe,GWe,Hk,OWe,VWe,XWe,Uf,jre,zWe,WWe,Uk,QWe,HWe,UWe,Jf,Dre,JWe,YWe,Jk,KWe,ZWe,eQe,Yf,Gre,oQe,rQe,Yk,tQe,aQe,nQe,Kf,Ore,sQe,lQe,Kk,iQe,dQe,cQe,Zf,Vre,fQe,mQe,Zk,gQe,hQe,pQe,em,Xre,_Qe,uQe,eS,bQe,vQe,FQe,om,zre,TQe,MQe,oS,EQe,CQe,wQe,rm,Wre,AQe,LQe,rS,yQe,xQe,$Qe,tm,Qre,kQe,SQe,tS,RQe,PQe,BQe,am,Hre,IQe,NQe,aS,qQe,jQe,DQe,nm,Ure,GQe,OQe,nS,VQe,XQe,zQe,sm,Jre,WQe,QQe,sS,HQe,UQe,JQe,lm,Yre,YQe,KQe,lS,ZQe,eHe,oHe,im,Kre,rHe,tHe,iS,aHe,nHe,sHe,dm,Zre,lHe,iHe,dS,dHe,cHe,fHe,cm,ete,mHe,gHe,cS,hHe,pHe,_He,fm,ote,uHe,bHe,fS,vHe,FHe,THe,mm,rte,MHe,EHe,mS,CHe,wHe,AHe,gm,tte,LHe,yHe,gS,xHe,$He,kHe,hm,ate,SHe,RHe,hS,PHe,BHe,IHe,pm,nte,NHe,qHe,pS,jHe,DHe,GHe,_m,ste,OHe,VHe,_S,XHe,zHe,WHe,um,lte,QHe,HHe,uS,UHe,JHe,YHe,bm,ite,KHe,ZHe,bS,eUe,oUe,rUe,vm,dte,tUe,aUe,vS,nUe,sUe,lUe,Fm,cte,iUe,dUe,FS,cUe,fUe,mUe,Tm,fte,gUe,hUe,TS,pUe,_Ue,uUe,Mm,mte,bUe,vUe,MS,FUe,TUe,MUe,Em,gte,EUe,CUe,ES,wUe,AUe,LUe,Cm,hte,yUe,xUe,CS,$Ue,kUe,SUe,wm,pte,RUe,PUe,wS,BUe,IUe,NUe,Am,_te,qUe,jUe,AS,DUe,GUe,OUe,Lm,ute,VUe,XUe,LS,zUe,WUe,QUe,ym,bte,HUe,UUe,yS,JUe,YUe,KUe,xm,vte,ZUe,eJe,xS,oJe,rJe,tJe,$m,Fte,aJe,nJe,$S,sJe,lJe,iJe,km,Tte,dJe,cJe,kS,fJe,mJe,gJe,Sm,Mte,hJe,pJe,SS,_Je,uJe,bJe,Rm,Ete,vJe,FJe,RS,TJe,MJe,EJe,Pm,Cte,CJe,wJe,PS,AJe,LJe,yJe,Bm,wte,xJe,$Je,BS,kJe,SJe,RJe,Im,Ate,PJe,BJe,IS,IJe,NJe,qJe,Nm,Lte,jJe,DJe,NS,GJe,OJe,VJe,qm,yte,XJe,zJe,qS,WJe,QJe,HJe,jm,xte,UJe,JJe,jS,YJe,KJe,ZJe,Dm,$te,eYe,oYe,DS,rYe,tYe,aYe,Gm,kte,nYe,sYe,GS,lYe,iYe,dYe,Om,Ste,cYe,fYe,OS,mYe,gYe,hYe,Vm,Rte,pYe,_Ye,VS,uYe,bYe,vYe,Xm,Pte,FYe,TYe,XS,MYe,EYe,CYe,zm,Bte,wYe,AYe,zS,LYe,yYe,xYe,Wm,Ite,$Ye,kYe,WS,SYe,RYe,PYe,Qm,Nte,BYe,IYe,QS,NYe,qYe,jYe,Hm,qte,DYe,GYe,HS,OYe,VYe,XYe,Um,jte,zYe,WYe,US,QYe,HYe,UYe,Jm,Dte,JYe,YYe,JS,KYe,ZYe,eKe,Ym,Gte,oKe,rKe,YS,tKe,aKe,nKe,Km,Ote,sKe,lKe,KS,iKe,dKe,cKe,Zm,Vte,fKe,mKe,ZS,gKe,hKe,pKe,eg,Xte,_Ke,uKe,eR,bKe,vKe,FKe,og,zte,TKe,MKe,oR,EKe,CKe,wKe,rg,Wte,AKe,LKe,rR,yKe,xKe,$Ke,tg,Qte,kKe,SKe,tR,RKe,PKe,BKe,ag,Hte,IKe,NKe,aR,qKe,jKe,DKe,ng,Ute,GKe,OKe,nR,VKe,XKe,zKe,sg,Jte,WKe,QKe,sR,HKe,UKe,JKe,lg,Yte,YKe,KKe,lR,ZKe,eZe,oZe,ig,Kte,rZe,tZe,iR,aZe,nZe,sZe,dg,Zte,lZe,iZe,dR,dZe,cZe,fZe,cg,eae,mZe,gZe,cR,hZe,pZe,_Ze,fg,oae,uZe,bZe,fR,vZe,FZe,TZe,mg,rae,MZe,EZe,mR,CZe,wZe,AZe,gg,tae,LZe,yZe,gR,xZe,$Ze,kZe,hg,aae,SZe,RZe,hR,PZe,BZe,IZe,pg,nae,NZe,qZe,pR,jZe,DZe,GZe,_g,sae,OZe,VZe,_R,XZe,zZe,WZe,ug,lae,QZe,HZe,uR,UZe,JZe,YZe,bg,iae,KZe,ZZe,bR,eeo,oeo,reo,vg,dae,teo,aeo,vR,neo,seo,leo,Fg,cae,ieo,deo,FR,ceo,feo,meo,Tg,fae,geo,heo,TR,peo,_eo,ueo,Mg,mae,beo,veo,MR,Feo,Teo,Meo,Eg,gae,Eeo,Ceo,ER,weo,Aeo,Leo,Cg,hae,yeo,xeo,CR,$eo,keo,Seo,wg,pae,Reo,Peo,wR,Beo,Ieo,Neo,Ag,_ae,qeo,jeo,AR,Deo,Geo,Oeo,Lg,uae,Veo,Xeo,LR,zeo,Weo,Qeo,yg,bae,Heo,Ueo,yR,Jeo,Yeo,Keo,xg,Zeo,$g,aL,eoo,vae,ooo,Uje,Ei,kg,Fae,nL,roo,Tae,too,Jje,wo,sL,aoo,lL,noo,xR,soo,loo,ioo,iL,doo,Mae,coo,foo,moo,Cr,dL,goo,Eae,hoo,poo,Aa,_oo,Cae,uoo,boo,wae,voo,Foo,Aae,Too,Moo,Eoo,k,Sn,Lae,Coo,woo,$R,Aoo,Loo,kR,yoo,xoo,$oo,Rn,yae,koo,Soo,SR,Roo,Poo,RR,Boo,Ioo,Noo,Pn,xae,qoo,joo,PR,Doo,Goo,BR,Ooo,Voo,Xoo,Sg,$ae,zoo,Woo,IR,Qoo,Hoo,Uoo,Bn,kae,Joo,Yoo,NR,Koo,Zoo,qR,ero,oro,rro,Rg,Sae,tro,aro,jR,nro,sro,lro,Pg,Rae,iro,dro,DR,cro,fro,mro,Bg,Pae,gro,hro,GR,pro,_ro,uro,In,Bae,bro,vro,OR,Fro,Tro,VR,Mro,Ero,Cro,Nn,Iae,wro,Aro,XR,Lro,yro,zR,xro,$ro,kro,qn,Nae,Sro,Rro,WR,Pro,Bro,QR,Iro,Nro,qro,Ig,qae,jro,Dro,HR,Gro,Oro,Vro,Ng,jae,Xro,zro,UR,Wro,Qro,Hro,qg,Dae,Uro,Jro,JR,Yro,Kro,Zro,jn,Gae,eto,oto,YR,rto,tto,KR,ato,nto,sto,jg,Oae,lto,ito,ZR,dto,cto,fto,Dn,Vae,mto,gto,eP,hto,pto,oP,_to,uto,bto,Gn,Xae,vto,Fto,rP,Tto,Mto,tP,Eto,Cto,wto,On,zae,Ato,Lto,aP,yto,xto,nP,$to,kto,Sto,Dg,Wae,Rto,Pto,sP,Bto,Ito,Nto,Vn,Qae,qto,jto,lP,Dto,Gto,iP,Oto,Vto,Xto,Xn,Hae,zto,Wto,dP,Qto,Hto,cP,Uto,Jto,Yto,zn,Uae,Kto,Zto,fP,eao,oao,mP,rao,tao,aao,Wn,Jae,nao,sao,gP,lao,iao,hP,dao,cao,fao,Qn,Yae,mao,gao,pP,hao,pao,_P,_ao,uao,bao,Hn,Kae,vao,Fao,uP,Tao,Mao,bP,Eao,Cao,wao,Gg,Zae,Aao,Lao,vP,yao,xao,$ao,Un,ene,kao,Sao,FP,Rao,Pao,TP,Bao,Iao,Nao,Og,one,qao,jao,MP,Dao,Gao,Oao,Jn,rne,Vao,Xao,EP,zao,Wao,CP,Qao,Hao,Uao,Yn,tne,Jao,Yao,wP,Kao,Zao,AP,eno,ono,rno,Kn,ane,tno,ano,LP,nno,sno,yP,lno,ino,dno,Vg,nne,cno,fno,xP,mno,gno,hno,Zn,sne,pno,_no,$P,uno,bno,kP,vno,Fno,Tno,es,lne,Mno,Eno,SP,Cno,wno,RP,Ano,Lno,yno,os,ine,xno,$no,PP,kno,Sno,BP,Rno,Pno,Bno,Xg,dne,Ino,Nno,IP,qno,jno,Dno,rs,cne,Gno,Ono,NP,Vno,Xno,qP,zno,Wno,Qno,ts,fne,Hno,Uno,jP,Jno,Yno,DP,Kno,Zno,eso,as,mne,oso,rso,GP,tso,aso,OP,nso,sso,lso,ns,gne,iso,dso,VP,cso,fso,XP,mso,gso,hso,ss,hne,pso,_so,zP,uso,bso,WP,vso,Fso,Tso,ls,pne,Mso,Eso,QP,Cso,wso,HP,Aso,Lso,yso,is,_ne,xso,$so,UP,kso,Sso,JP,Rso,Pso,Bso,zg,une,Iso,Nso,YP,qso,jso,Dso,ds,bne,Gso,Oso,KP,Vso,Xso,ZP,zso,Wso,Qso,Wg,vne,Hso,Uso,eB,Jso,Yso,Kso,Qg,Fne,Zso,elo,oB,olo,rlo,tlo,cs,Tne,alo,nlo,rB,slo,llo,tB,ilo,dlo,clo,fs,Mne,flo,mlo,aB,glo,hlo,nB,plo,_lo,ulo,ms,Ene,blo,vlo,sB,Flo,Tlo,lB,Mlo,Elo,Clo,Hg,Cne,wlo,Alo,iB,Llo,ylo,xlo,gs,wne,$lo,klo,dB,Slo,Rlo,cB,Plo,Blo,Ilo,hs,Ane,Nlo,qlo,fB,jlo,Dlo,mB,Glo,Olo,Vlo,ps,Lne,Xlo,zlo,gB,Wlo,Qlo,hB,Hlo,Ulo,Jlo,_s,yne,Ylo,Klo,pB,Zlo,eio,_B,oio,rio,tio,us,xne,aio,nio,uB,sio,lio,bB,iio,dio,cio,Ug,$ne,fio,mio,vB,gio,hio,pio,bs,kne,_io,uio,FB,bio,vio,TB,Fio,Tio,Mio,Jg,Sne,Eio,Cio,MB,wio,Aio,Lio,Yg,Rne,yio,xio,EB,$io,kio,Sio,Kg,Pne,Rio,Pio,CB,Bio,Iio,Nio,Zg,Bne,qio,jio,wB,Dio,Gio,Oio,vs,Ine,Vio,Xio,AB,zio,Wio,LB,Qio,Hio,Uio,eh,Nne,Jio,Yio,yB,Kio,Zio,edo,Fs,qne,odo,rdo,xB,tdo,ado,$B,ndo,sdo,ldo,Ts,jne,ido,ddo,kB,cdo,fdo,SB,mdo,gdo,hdo,Ms,Dne,pdo,_do,RB,udo,bdo,PB,vdo,Fdo,Tdo,Es,Gne,Mdo,Edo,BB,Cdo,wdo,IB,Ado,Ldo,ydo,Cs,One,xdo,$do,NB,kdo,Sdo,qB,Rdo,Pdo,Bdo,ws,Vne,Ido,Ndo,jB,qdo,jdo,DB,Ddo,Gdo,Odo,oh,Xne,Vdo,Xdo,GB,zdo,Wdo,Qdo,rh,zne,Hdo,Udo,OB,Jdo,Ydo,Kdo,As,Wne,Zdo,eco,VB,oco,rco,XB,tco,aco,nco,Ls,Qne,sco,lco,zB,ico,dco,WB,cco,fco,mco,ys,Hne,gco,hco,QB,pco,_co,HB,uco,bco,vco,th,Une,Fco,Tco,UB,Mco,Eco,Cco,ah,Jne,wco,Aco,JB,Lco,yco,xco,nh,Yne,$co,kco,YB,Sco,Rco,Pco,xs,Kne,Bco,Ico,KB,Nco,qco,ZB,jco,Dco,Gco,sh,Zne,Oco,Vco,eI,Xco,zco,Wco,lh,ese,Qco,Hco,oI,Uco,Jco,Yco,ih,ose,Kco,Zco,rI,efo,ofo,rfo,$s,rse,tfo,afo,tI,nfo,sfo,aI,lfo,ifo,dfo,dh,tse,cfo,ffo,nI,mfo,gfo,hfo,ch,ase,pfo,_fo,sI,ufo,bfo,vfo,ks,nse,Ffo,Tfo,lI,Mfo,Efo,iI,Cfo,wfo,Afo,Ss,sse,Lfo,yfo,dI,xfo,$fo,cI,kfo,Sfo,Rfo,Rs,lse,Pfo,Bfo,fI,Ifo,Nfo,mI,qfo,jfo,Dfo,Ps,ise,Gfo,Ofo,gI,Vfo,Xfo,hI,zfo,Wfo,Qfo,fh,Hfo,mh,cL,Ufo,dse,Jfo,Yje,Ci,gh,cse,fL,Yfo,fse,Kfo,Kje,Ao,mL,Zfo,gL,emo,pI,omo,rmo,tmo,hL,amo,mse,nmo,smo,lmo,He,pL,imo,gse,dmo,cmo,La,fmo,hse,mmo,gmo,pse,hmo,pmo,_se,_mo,umo,bmo,Y,hh,use,vmo,Fmo,_I,Tmo,Mmo,Emo,ph,bse,Cmo,wmo,uI,Amo,Lmo,ymo,_h,vse,xmo,$mo,bI,kmo,Smo,Rmo,uh,Fse,Pmo,Bmo,vI,Imo,Nmo,qmo,bh,Tse,jmo,Dmo,FI,Gmo,Omo,Vmo,vh,Mse,Xmo,zmo,TI,Wmo,Qmo,Hmo,Fh,Ese,Umo,Jmo,MI,Ymo,Kmo,Zmo,Th,Cse,ego,ogo,EI,rgo,tgo,ago,Mh,wse,ngo,sgo,CI,lgo,igo,dgo,Eh,Ase,cgo,fgo,wI,mgo,ggo,hgo,Ch,Lse,pgo,_go,AI,ugo,bgo,vgo,wh,yse,Fgo,Tgo,LI,Mgo,Ego,Cgo,Ah,xse,wgo,Ago,yI,Lgo,ygo,xgo,Lh,$se,$go,kgo,xI,Sgo,Rgo,Pgo,yh,kse,Bgo,Igo,$I,Ngo,qgo,jgo,xh,Sse,Dgo,Ggo,kI,Ogo,Vgo,Xgo,$h,Rse,zgo,Wgo,SI,Qgo,Hgo,Ugo,kh,Pse,Jgo,Ygo,RI,Kgo,Zgo,eho,Sh,Bse,oho,rho,PI,tho,aho,nho,Rh,Ise,sho,lho,BI,iho,dho,cho,Ph,Nse,fho,mho,II,gho,hho,pho,Bh,qse,_ho,uho,NI,bho,vho,Fho,Ih,jse,Tho,Mho,qI,Eho,Cho,who,Nh,Dse,Aho,Lho,jI,yho,xho,$ho,qh,Gse,kho,Sho,DI,Rho,Pho,Bho,jh,Ose,Iho,Nho,GI,qho,jho,Dho,Dh,Vse,Gho,Oho,OI,Vho,Xho,zho,Gh,Xse,Who,Qho,VI,Hho,Uho,Jho,Oh,zse,Yho,Kho,XI,Zho,epo,opo,Vh,Wse,rpo,tpo,zI,apo,npo,spo,Xh,Qse,lpo,ipo,WI,dpo,cpo,fpo,zh,Hse,mpo,gpo,QI,hpo,ppo,_po,Wh,upo,Qh,bpo,Hh,_L,vpo,Use,Fpo,Zje,wi,Uh,Jse,uL,Tpo,Yse,Mpo,eDe,Lo,bL,Epo,vL,Cpo,HI,wpo,Apo,Lpo,FL,ypo,Kse,xpo,$po,kpo,Ue,TL,Spo,Zse,Rpo,Ppo,Ai,Bpo,ele,Ipo,Npo,ole,qpo,jpo,Dpo,he,Jh,rle,Gpo,Opo,UI,Vpo,Xpo,zpo,Yh,tle,Wpo,Qpo,ale,Hpo,Upo,Jpo,Kh,nle,Ypo,Kpo,JI,Zpo,e_o,o_o,Zh,sle,r_o,t_o,YI,a_o,n_o,s_o,ep,lle,l_o,i_o,KI,d_o,c_o,f_o,op,ile,m_o,g_o,ZI,h_o,p_o,__o,rp,dle,u_o,b_o,eN,v_o,F_o,T_o,tp,cle,M_o,E_o,oN,C_o,w_o,A_o,ap,fle,L_o,y_o,rN,x_o,$_o,k_o,np,mle,S_o,R_o,tN,P_o,B_o,I_o,sp,gle,N_o,q_o,aN,j_o,D_o,G_o,lp,hle,O_o,V_o,nN,X_o,z_o,W_o,ip,ple,Q_o,H_o,sN,U_o,J_o,Y_o,dp,_le,K_o,Z_o,lN,euo,ouo,ruo,cp,ule,tuo,auo,iN,nuo,suo,luo,fp,ble,iuo,duo,dN,cuo,fuo,muo,mp,vle,guo,huo,cN,puo,_uo,uuo,gp,Fle,buo,vuo,fN,Fuo,Tuo,Muo,hp,Euo,pp,Cuo,_p,ML,wuo,Tle,Auo,oDe,Li,up,Mle,EL,Luo,Ele,yuo,rDe,yo,CL,xuo,yi,$uo,mN,kuo,Suo,gN,Ruo,Puo,Buo,wL,Iuo,Cle,Nuo,quo,juo,tt,AL,Duo,wle,Guo,Ouo,xi,Vuo,Ale,Xuo,zuo,hN,Wuo,Quo,Huo,bp,Uuo,Je,LL,Juo,Lle,Yuo,Kuo,ya,Zuo,yle,e1o,o1o,xle,r1o,t1o,$le,a1o,n1o,s1o,y,vp,kle,l1o,i1o,pN,d1o,c1o,f1o,Fp,Sle,m1o,g1o,_N,h1o,p1o,_1o,Tp,Rle,u1o,b1o,uN,v1o,F1o,T1o,Mp,Ple,M1o,E1o,bN,C1o,w1o,A1o,Ep,Ble,L1o,y1o,vN,x1o,$1o,k1o,Cp,Ile,S1o,R1o,FN,P1o,B1o,I1o,wp,Nle,N1o,q1o,TN,j1o,D1o,G1o,Ap,qle,O1o,V1o,MN,X1o,z1o,W1o,Lp,jle,Q1o,H1o,EN,U1o,J1o,Y1o,yp,Dle,K1o,Z1o,CN,ebo,obo,rbo,xp,Gle,tbo,abo,wN,nbo,sbo,lbo,$p,Ole,ibo,dbo,AN,cbo,fbo,mbo,kp,Vle,gbo,hbo,LN,pbo,_bo,ubo,Sp,Xle,bbo,vbo,yN,Fbo,Tbo,Mbo,Rp,zle,Ebo,Cbo,xN,wbo,Abo,Lbo,Pp,Wle,ybo,xbo,$N,$bo,kbo,Sbo,Bp,Qle,Rbo,Pbo,kN,Bbo,Ibo,Nbo,Ip,Hle,qbo,jbo,SN,Dbo,Gbo,Obo,Np,Ule,Vbo,Xbo,RN,zbo,Wbo,Qbo,qp,Jle,Hbo,Ubo,PN,Jbo,Ybo,Kbo,jp,Yle,Zbo,e2o,BN,o2o,r2o,t2o,Dp,Kle,a2o,n2o,IN,s2o,l2o,i2o,Gp,Zle,d2o,c2o,NN,f2o,m2o,g2o,Op,eie,h2o,p2o,qN,_2o,u2o,b2o,Vp,oie,v2o,F2o,jN,T2o,M2o,E2o,Xp,rie,C2o,w2o,DN,A2o,L2o,y2o,zp,tie,x2o,$2o,GN,k2o,S2o,R2o,Wp,aie,P2o,B2o,ON,I2o,N2o,q2o,Qp,nie,j2o,D2o,VN,G2o,O2o,V2o,Hp,sie,X2o,z2o,XN,W2o,Q2o,H2o,Up,lie,U2o,J2o,zN,Y2o,K2o,Z2o,Jp,iie,e4o,o4o,WN,r4o,t4o,a4o,Yp,die,n4o,s4o,QN,l4o,i4o,d4o,Bs,cie,c4o,f4o,HN,m4o,g4o,UN,h4o,p4o,_4o,Kp,fie,u4o,b4o,JN,v4o,F4o,T4o,Zp,mie,M4o,E4o,YN,C4o,w4o,A4o,e_,gie,L4o,y4o,KN,x4o,$4o,k4o,o_,hie,S4o,R4o,ZN,P4o,B4o,I4o,r_,pie,N4o,q4o,eq,j4o,D4o,G4o,t_,_ie,O4o,V4o,oq,X4o,z4o,W4o,a_,uie,Q4o,H4o,rq,U4o,J4o,Y4o,n_,bie,K4o,Z4o,tq,evo,ovo,rvo,s_,vie,tvo,avo,aq,nvo,svo,lvo,l_,Fie,ivo,dvo,nq,cvo,fvo,mvo,i_,Tie,gvo,hvo,sq,pvo,_vo,uvo,d_,Mie,bvo,vvo,lq,Fvo,Tvo,Mvo,c_,Eie,Evo,Cvo,iq,wvo,Avo,Lvo,f_,Cie,yvo,xvo,dq,$vo,kvo,Svo,m_,wie,Rvo,Pvo,cq,Bvo,Ivo,Nvo,g_,Aie,qvo,jvo,fq,Dvo,Gvo,Ovo,h_,Lie,Vvo,Xvo,mq,zvo,Wvo,Qvo,p_,yie,Hvo,Uvo,gq,Jvo,Yvo,Kvo,__,xie,Zvo,eFo,hq,oFo,rFo,tFo,u_,$ie,aFo,nFo,pq,sFo,lFo,iFo,b_,kie,dFo,cFo,_q,fFo,mFo,gFo,v_,Sie,hFo,pFo,uq,_Fo,uFo,bFo,F_,Rie,vFo,FFo,bq,TFo,MFo,EFo,T_,Pie,CFo,wFo,vq,AFo,LFo,yFo,M_,Bie,xFo,$Fo,Fq,kFo,SFo,RFo,E_,Iie,PFo,BFo,Tq,IFo,NFo,qFo,C_,Nie,jFo,DFo,Mq,GFo,OFo,VFo,w_,qie,XFo,zFo,Eq,WFo,QFo,HFo,A_,jie,UFo,JFo,Cq,YFo,KFo,ZFo,L_,Die,e6o,o6o,wq,r6o,t6o,a6o,y_,Gie,n6o,s6o,Aq,l6o,i6o,d6o,x_,Oie,c6o,f6o,Lq,m6o,g6o,h6o,$_,Vie,p6o,_6o,yq,u6o,b6o,v6o,k_,Xie,F6o,T6o,xq,M6o,E6o,C6o,S_,zie,w6o,A6o,$q,L6o,y6o,x6o,R_,Wie,$6o,k6o,kq,S6o,R6o,P6o,P_,Qie,B6o,I6o,Sq,N6o,q6o,j6o,B_,Hie,D6o,G6o,Rq,O6o,V6o,X6o,I_,Uie,z6o,W6o,Pq,Q6o,H6o,U6o,N_,Jie,J6o,Y6o,Bq,K6o,Z6o,eTo,q_,Yie,oTo,rTo,Iq,tTo,aTo,nTo,j_,Kie,sTo,lTo,Nq,iTo,dTo,cTo,D_,Zie,fTo,mTo,qq,gTo,hTo,pTo,G_,ede,_To,uTo,jq,bTo,vTo,FTo,O_,ode,TTo,MTo,Dq,ETo,CTo,wTo,V_,rde,ATo,LTo,Gq,yTo,xTo,$To,X_,tde,kTo,STo,Oq,RTo,PTo,BTo,z_,ade,ITo,NTo,Vq,qTo,jTo,DTo,W_,nde,GTo,OTo,Xq,VTo,XTo,zTo,Q_,sde,WTo,QTo,zq,HTo,UTo,JTo,H_,lde,YTo,KTo,Wq,ZTo,e7o,o7o,U_,ide,r7o,t7o,Qq,a7o,n7o,s7o,J_,dde,l7o,i7o,Hq,d7o,c7o,f7o,Y_,cde,m7o,g7o,Uq,h7o,p7o,_7o,K_,fde,u7o,b7o,Jq,v7o,F7o,T7o,Z_,mde,M7o,E7o,Yq,C7o,w7o,A7o,eu,gde,L7o,y7o,Kq,x7o,$7o,k7o,ou,hde,S7o,R7o,Zq,P7o,B7o,I7o,ru,pde,N7o,q7o,ej,j7o,D7o,G7o,tu,_de,O7o,V7o,oj,X7o,z7o,W7o,au,ude,Q7o,H7o,rj,U7o,J7o,Y7o,nu,bde,K7o,Z7o,tj,eMo,oMo,rMo,su,vde,tMo,aMo,aj,nMo,sMo,lMo,lu,Fde,iMo,dMo,nj,cMo,fMo,mMo,iu,Tde,gMo,hMo,sj,pMo,_Mo,uMo,du,Mde,bMo,vMo,lj,FMo,TMo,MMo,cu,Ede,EMo,CMo,ij,wMo,AMo,LMo,fu,Cde,yMo,xMo,dj,$Mo,kMo,SMo,mu,wde,RMo,PMo,cj,BMo,IMo,NMo,gu,Ade,qMo,jMo,fj,DMo,GMo,OMo,hu,Lde,VMo,XMo,mj,zMo,WMo,QMo,pu,yde,HMo,UMo,gj,JMo,YMo,KMo,_u,ZMo,xde,eEo,oEo,$de,rEo,tEo,uu,tDe,$i,bu,kde,yL,aEo,Sde,nEo,aDe,xo,xL,sEo,ki,lEo,hj,iEo,dEo,pj,cEo,fEo,mEo,$L,gEo,Rde,hEo,pEo,_Eo,at,kL,uEo,Pde,bEo,vEo,Si,FEo,Bde,TEo,MEo,_j,EEo,CEo,wEo,vu,AEo,Ye,SL,LEo,Ide,yEo,xEo,xa,$Eo,Nde,kEo,SEo,qde,REo,PEo,jde,BEo,IEo,NEo,G,Fu,Dde,qEo,jEo,uj,DEo,GEo,OEo,Tu,Gde,VEo,XEo,bj,zEo,WEo,QEo,Mu,Ode,HEo,UEo,vj,JEo,YEo,KEo,Eu,Vde,ZEo,eCo,Fj,oCo,rCo,tCo,Cu,Xde,aCo,nCo,Tj,sCo,lCo,iCo,wu,zde,dCo,cCo,Mj,fCo,mCo,gCo,Au,Wde,hCo,pCo,Ej,_Co,uCo,bCo,Lu,Qde,vCo,FCo,Cj,TCo,MCo,ECo,yu,Hde,CCo,wCo,wj,ACo,LCo,yCo,xu,Ude,xCo,$Co,Aj,kCo,SCo,RCo,$u,Jde,PCo,BCo,Lj,ICo,NCo,qCo,ku,Yde,jCo,DCo,yj,GCo,OCo,VCo,Su,Kde,XCo,zCo,xj,WCo,QCo,HCo,Ru,Zde,UCo,JCo,$j,YCo,KCo,ZCo,Pu,ece,e5o,o5o,kj,r5o,t5o,a5o,Bu,oce,n5o,s5o,Sj,l5o,i5o,d5o,Iu,rce,c5o,f5o,Rj,m5o,g5o,h5o,Nu,tce,p5o,_5o,Pj,u5o,b5o,v5o,qu,ace,F5o,T5o,Bj,M5o,E5o,C5o,ju,nce,w5o,A5o,Ij,L5o,y5o,x5o,Du,sce,$5o,k5o,Nj,S5o,R5o,P5o,Gu,lce,B5o,I5o,qj,N5o,q5o,j5o,Ou,ice,D5o,G5o,jj,O5o,V5o,X5o,Vu,dce,z5o,W5o,Dj,Q5o,H5o,U5o,Xu,cce,J5o,Y5o,Gj,K5o,Z5o,e3o,zu,fce,o3o,r3o,Oj,t3o,a3o,n3o,Wu,mce,s3o,l3o,Vj,i3o,d3o,c3o,Qu,gce,f3o,m3o,Xj,g3o,h3o,p3o,Hu,hce,_3o,u3o,zj,b3o,v3o,F3o,Uu,pce,T3o,M3o,Wj,E3o,C3o,w3o,Ju,_ce,A3o,L3o,Qj,y3o,x3o,$3o,Yu,uce,k3o,S3o,Hj,R3o,P3o,B3o,Ku,bce,I3o,N3o,Uj,q3o,j3o,D3o,Zu,vce,G3o,O3o,Jj,V3o,X3o,z3o,e1,Fce,W3o,Q3o,Yj,H3o,U3o,J3o,o1,Tce,Y3o,K3o,Kj,Z3o,e0o,o0o,r1,Mce,r0o,t0o,Zj,a0o,n0o,s0o,t1,Ece,l0o,i0o,eD,d0o,c0o,f0o,a1,Cce,m0o,g0o,oD,h0o,p0o,_0o,n1,wce,u0o,b0o,rD,v0o,F0o,T0o,s1,Ace,M0o,E0o,tD,C0o,w0o,A0o,l1,Lce,L0o,y0o,aD,x0o,$0o,k0o,i1,yce,S0o,R0o,nD,P0o,B0o,I0o,d1,N0o,xce,q0o,j0o,$ce,D0o,G0o,c1,nDe,Ri,f1,kce,RL,O0o,Sce,V0o,sDe,$o,PL,X0o,Pi,z0o,sD,W0o,Q0o,lD,H0o,U0o,J0o,BL,Y0o,Rce,K0o,Z0o,ewo,nt,IL,owo,Pce,rwo,two,Bi,awo,Bce,nwo,swo,iD,lwo,iwo,dwo,m1,cwo,Ke,NL,fwo,Ice,mwo,gwo,$a,hwo,Nce,pwo,_wo,qce,uwo,bwo,jce,vwo,Fwo,Two,z,g1,Dce,Mwo,Ewo,dD,Cwo,wwo,Awo,h1,Gce,Lwo,ywo,cD,xwo,$wo,kwo,p1,Oce,Swo,Rwo,fD,Pwo,Bwo,Iwo,_1,Vce,Nwo,qwo,mD,jwo,Dwo,Gwo,u1,Xce,Owo,Vwo,gD,Xwo,zwo,Wwo,b1,zce,Qwo,Hwo,hD,Uwo,Jwo,Ywo,v1,Wce,Kwo,Zwo,pD,eAo,oAo,rAo,F1,Qce,tAo,aAo,_D,nAo,sAo,lAo,T1,Hce,iAo,dAo,uD,cAo,fAo,mAo,M1,Uce,gAo,hAo,bD,pAo,_Ao,uAo,E1,Jce,bAo,vAo,vD,FAo,TAo,MAo,C1,Yce,EAo,CAo,FD,wAo,AAo,LAo,w1,Kce,yAo,xAo,TD,$Ao,kAo,SAo,A1,Zce,RAo,PAo,MD,BAo,IAo,NAo,L1,efe,qAo,jAo,ED,DAo,GAo,OAo,y1,ofe,VAo,XAo,CD,zAo,WAo,QAo,x1,rfe,HAo,UAo,wD,JAo,YAo,KAo,$1,tfe,ZAo,eLo,AD,oLo,rLo,tLo,k1,afe,aLo,nLo,LD,sLo,lLo,iLo,S1,nfe,dLo,cLo,yD,fLo,mLo,gLo,R1,sfe,hLo,pLo,xD,_Lo,uLo,bLo,P1,lfe,vLo,FLo,$D,TLo,MLo,ELo,B1,ife,CLo,wLo,kD,ALo,LLo,yLo,I1,dfe,xLo,$Lo,SD,kLo,SLo,RLo,N1,cfe,PLo,BLo,RD,ILo,NLo,qLo,q1,ffe,jLo,DLo,PD,GLo,OLo,VLo,j1,mfe,XLo,zLo,BD,WLo,QLo,HLo,D1,gfe,ULo,JLo,ID,YLo,KLo,ZLo,G1,hfe,eyo,oyo,ND,ryo,tyo,ayo,O1,pfe,nyo,syo,qD,lyo,iyo,dyo,V1,_fe,cyo,fyo,jD,myo,gyo,hyo,X1,ufe,pyo,_yo,DD,uyo,byo,vyo,z1,bfe,Fyo,Tyo,GD,Myo,Eyo,Cyo,W1,vfe,wyo,Ayo,OD,Lyo,yyo,xyo,Q1,Ffe,$yo,kyo,VD,Syo,Ryo,Pyo,H1,Tfe,Byo,Iyo,XD,Nyo,qyo,jyo,U1,Mfe,Dyo,Gyo,zD,Oyo,Vyo,Xyo,J1,Efe,zyo,Wyo,WD,Qyo,Hyo,Uyo,Y1,Jyo,Cfe,Yyo,Kyo,wfe,Zyo,e8o,K1,lDe,Ii,Z1,Afe,qL,o8o,Lfe,r8o,iDe,ko,jL,t8o,Ni,a8o,QD,n8o,s8o,HD,l8o,i8o,d8o,DL,c8o,yfe,f8o,m8o,g8o,st,GL,h8o,xfe,p8o,_8o,qi,u8o,$fe,b8o,v8o,UD,F8o,T8o,M8o,eb,E8o,Ze,OL,C8o,kfe,w8o,A8o,ka,L8o,Sfe,y8o,x8o,Rfe,$8o,k8o,Pfe,S8o,R8o,P8o,Q,ob,Bfe,B8o,I8o,JD,N8o,q8o,j8o,rb,Ife,D8o,G8o,YD,O8o,V8o,X8o,tb,Nfe,z8o,W8o,KD,Q8o,H8o,U8o,ab,qfe,J8o,Y8o,ZD,K8o,Z8o,e9o,nb,jfe,o9o,r9o,eG,t9o,a9o,n9o,sb,Dfe,s9o,l9o,oG,i9o,d9o,c9o,lb,Gfe,f9o,m9o,rG,g9o,h9o,p9o,ib,Ofe,_9o,u9o,tG,b9o,v9o,F9o,db,Vfe,T9o,M9o,aG,E9o,C9o,w9o,cb,Xfe,A9o,L9o,nG,y9o,x9o,$9o,fb,zfe,k9o,S9o,sG,R9o,P9o,B9o,mb,Wfe,I9o,N9o,lG,q9o,j9o,D9o,gb,Qfe,G9o,O9o,iG,V9o,X9o,z9o,hb,Hfe,W9o,Q9o,dG,H9o,U9o,J9o,pb,Ufe,Y9o,K9o,cG,Z9o,exo,oxo,_b,Jfe,rxo,txo,fG,axo,nxo,sxo,ub,Yfe,lxo,ixo,mG,dxo,cxo,fxo,bb,Kfe,mxo,gxo,gG,hxo,pxo,_xo,vb,Zfe,uxo,bxo,hG,vxo,Fxo,Txo,Fb,eme,Mxo,Exo,pG,Cxo,wxo,Axo,Tb,ome,Lxo,yxo,_G,xxo,$xo,kxo,Mb,rme,Sxo,Rxo,uG,Pxo,Bxo,Ixo,Eb,tme,Nxo,qxo,bG,jxo,Dxo,Gxo,Cb,ame,Oxo,Vxo,vG,Xxo,zxo,Wxo,wb,nme,Qxo,Hxo,FG,Uxo,Jxo,Yxo,Ab,sme,Kxo,Zxo,TG,e$o,o$o,r$o,Lb,lme,t$o,a$o,MG,n$o,s$o,l$o,yb,ime,i$o,d$o,EG,c$o,f$o,m$o,xb,dme,g$o,h$o,CG,p$o,_$o,u$o,$b,cme,b$o,v$o,wG,F$o,T$o,M$o,kb,fme,E$o,C$o,AG,w$o,A$o,L$o,Sb,mme,y$o,x$o,gme,$$o,k$o,S$o,Rb,hme,R$o,P$o,LG,B$o,I$o,N$o,Pb,pme,q$o,j$o,yG,D$o,G$o,O$o,Bb,_me,V$o,X$o,xG,z$o,W$o,Q$o,Ib,ume,H$o,U$o,$G,J$o,Y$o,K$o,Nb,Z$o,bme,eko,oko,vme,rko,tko,qb,dDe,ji,jb,Fme,VL,ako,Tme,nko,cDe,So,XL,sko,Di,lko,kG,iko,dko,SG,cko,fko,mko,zL,gko,Mme,hko,pko,_ko,lt,WL,uko,Eme,bko,vko,Gi,Fko,Cme,Tko,Mko,RG,Eko,Cko,wko,Db,Ako,eo,QL,Lko,wme,yko,xko,Sa,$ko,Ame,kko,Sko,Lme,Rko,Pko,yme,Bko,Iko,Nko,ue,Gb,xme,qko,jko,PG,Dko,Gko,Oko,Ob,$me,Vko,Xko,BG,zko,Wko,Qko,Vb,kme,Hko,Uko,IG,Jko,Yko,Kko,Xb,Sme,Zko,eSo,NG,oSo,rSo,tSo,zb,Rme,aSo,nSo,qG,sSo,lSo,iSo,Wb,Pme,dSo,cSo,jG,fSo,mSo,gSo,Qb,Bme,hSo,pSo,DG,_So,uSo,bSo,Hb,Ime,vSo,FSo,GG,TSo,MSo,ESo,Ub,Nme,CSo,wSo,OG,ASo,LSo,ySo,Jb,qme,xSo,$So,VG,kSo,SSo,RSo,Yb,jme,PSo,BSo,XG,ISo,NSo,qSo,Kb,Dme,jSo,DSo,zG,GSo,OSo,VSo,Zb,Gme,XSo,zSo,WG,WSo,QSo,HSo,e2,Ome,USo,JSo,QG,YSo,KSo,ZSo,o2,Vme,eRo,oRo,HG,rRo,tRo,aRo,r2,Xme,nRo,sRo,UG,lRo,iRo,dRo,t2,cRo,zme,fRo,mRo,Wme,gRo,hRo,a2,fDe,Oi,n2,Qme,HL,pRo,Hme,_Ro,mDe,Ro,UL,uRo,Vi,bRo,JG,vRo,FRo,YG,TRo,MRo,ERo,JL,CRo,Ume,wRo,ARo,LRo,it,YL,yRo,Jme,xRo,$Ro,Xi,kRo,Yme,SRo,RRo,KG,PRo,BRo,IRo,s2,NRo,oo,KL,qRo,Kme,jRo,DRo,Ra,GRo,Zme,ORo,VRo,ege,XRo,zRo,oge,WRo,QRo,HRo,N,l2,rge,URo,JRo,ZG,YRo,KRo,ZRo,i2,tge,ePo,oPo,eO,rPo,tPo,aPo,d2,age,nPo,sPo,oO,lPo,iPo,dPo,c2,nge,cPo,fPo,rO,mPo,gPo,hPo,f2,sge,pPo,_Po,tO,uPo,bPo,vPo,m2,lge,FPo,TPo,aO,MPo,EPo,CPo,g2,ige,wPo,APo,nO,LPo,yPo,xPo,h2,dge,$Po,kPo,sO,SPo,RPo,PPo,p2,cge,BPo,IPo,lO,NPo,qPo,jPo,_2,fge,DPo,GPo,iO,OPo,VPo,XPo,u2,mge,zPo,WPo,dO,QPo,HPo,UPo,b2,gge,JPo,YPo,cO,KPo,ZPo,eBo,v2,hge,oBo,rBo,fO,tBo,aBo,nBo,F2,pge,sBo,lBo,mO,iBo,dBo,cBo,T2,_ge,fBo,mBo,gO,gBo,hBo,pBo,M2,uge,_Bo,uBo,hO,bBo,vBo,FBo,E2,bge,TBo,MBo,pO,EBo,CBo,wBo,C2,vge,ABo,LBo,_O,yBo,xBo,$Bo,w2,Fge,kBo,SBo,uO,RBo,PBo,BBo,A2,Tge,IBo,NBo,bO,qBo,jBo,DBo,L2,Mge,GBo,OBo,vO,VBo,XBo,zBo,y2,Ege,WBo,QBo,FO,HBo,UBo,JBo,x2,Cge,YBo,KBo,TO,ZBo,eIo,oIo,$2,wge,rIo,tIo,MO,aIo,nIo,sIo,k2,Age,lIo,iIo,EO,dIo,cIo,fIo,S2,Lge,mIo,gIo,CO,hIo,pIo,_Io,R2,yge,uIo,bIo,wO,vIo,FIo,TIo,P2,xge,MIo,EIo,AO,CIo,wIo,AIo,B2,$ge,LIo,yIo,LO,xIo,$Io,kIo,I2,kge,SIo,RIo,yO,PIo,BIo,IIo,N2,Sge,NIo,qIo,xO,jIo,DIo,GIo,q2,Rge,OIo,VIo,$O,XIo,zIo,WIo,j2,Pge,QIo,HIo,kO,UIo,JIo,YIo,D2,Bge,KIo,ZIo,SO,eNo,oNo,rNo,G2,Ige,tNo,aNo,RO,nNo,sNo,lNo,O2,Nge,iNo,dNo,PO,cNo,fNo,mNo,V2,qge,gNo,hNo,BO,pNo,_No,uNo,X2,jge,bNo,vNo,IO,FNo,TNo,MNo,z2,Dge,ENo,CNo,NO,wNo,ANo,LNo,W2,Gge,yNo,xNo,qO,$No,kNo,SNo,Q2,Oge,RNo,PNo,jO,BNo,INo,NNo,H2,Vge,qNo,jNo,DO,DNo,GNo,ONo,U2,Xge,VNo,XNo,GO,zNo,WNo,QNo,J2,zge,HNo,UNo,OO,JNo,YNo,KNo,Y2,Wge,ZNo,eqo,VO,oqo,rqo,tqo,K2,Qge,aqo,nqo,XO,sqo,lqo,iqo,Z2,Hge,dqo,cqo,zO,fqo,mqo,gqo,e4,hqo,Uge,pqo,_qo,Jge,uqo,bqo,o4,gDe,zi,r4,Yge,ZL,vqo,Kge,Fqo,hDe,Po,ey,Tqo,Wi,Mqo,WO,Eqo,Cqo,QO,wqo,Aqo,Lqo,oy,yqo,Zge,xqo,$qo,kqo,dt,ry,Sqo,ehe,Rqo,Pqo,Qi,Bqo,ohe,Iqo,Nqo,HO,qqo,jqo,Dqo,t4,Gqo,ro,ty,Oqo,rhe,Vqo,Xqo,Pa,zqo,the,Wqo,Qqo,ahe,Hqo,Uqo,nhe,Jqo,Yqo,Kqo,Z,a4,she,Zqo,ejo,UO,ojo,rjo,tjo,n4,lhe,ajo,njo,JO,sjo,ljo,ijo,s4,ihe,djo,cjo,YO,fjo,mjo,gjo,l4,dhe,hjo,pjo,KO,_jo,ujo,bjo,i4,che,vjo,Fjo,ZO,Tjo,Mjo,Ejo,d4,fhe,Cjo,wjo,eV,Ajo,Ljo,yjo,c4,mhe,xjo,$jo,oV,kjo,Sjo,Rjo,f4,ghe,Pjo,Bjo,rV,Ijo,Njo,qjo,m4,hhe,jjo,Djo,tV,Gjo,Ojo,Vjo,g4,phe,Xjo,zjo,aV,Wjo,Qjo,Hjo,h4,_he,Ujo,Jjo,nV,Yjo,Kjo,Zjo,p4,uhe,eDo,oDo,sV,rDo,tDo,aDo,_4,bhe,nDo,sDo,lV,lDo,iDo,dDo,u4,vhe,cDo,fDo,iV,mDo,gDo,hDo,b4,Fhe,pDo,_Do,dV,uDo,bDo,vDo,v4,The,FDo,TDo,cV,MDo,EDo,CDo,F4,Mhe,wDo,ADo,fV,LDo,yDo,xDo,T4,Ehe,$Do,kDo,mV,SDo,RDo,PDo,M4,Che,BDo,IDo,gV,NDo,qDo,jDo,E4,whe,DDo,GDo,hV,ODo,VDo,XDo,C4,Ahe,zDo,WDo,pV,QDo,HDo,UDo,w4,Lhe,JDo,YDo,_V,KDo,ZDo,eGo,A4,yhe,oGo,rGo,uV,tGo,aGo,nGo,L4,xhe,sGo,lGo,bV,iGo,dGo,cGo,y4,$he,fGo,mGo,vV,gGo,hGo,pGo,x4,khe,_Go,uGo,FV,bGo,vGo,FGo,$4,She,TGo,MGo,TV,EGo,CGo,wGo,k4,Rhe,AGo,LGo,MV,yGo,xGo,$Go,S4,Phe,kGo,SGo,EV,RGo,PGo,BGo,R4,Bhe,IGo,NGo,CV,qGo,jGo,DGo,P4,GGo,Ihe,OGo,VGo,Nhe,XGo,zGo,B4,pDe,Hi,I4,qhe,ay,WGo,jhe,QGo,_De,Bo,ny,HGo,Ui,UGo,wV,JGo,YGo,AV,KGo,ZGo,eOo,sy,oOo,Dhe,rOo,tOo,aOo,ct,ly,nOo,Ghe,sOo,lOo,Ji,iOo,Ohe,dOo,cOo,LV,fOo,mOo,gOo,N4,hOo,to,iy,pOo,Vhe,_Oo,uOo,Ba,bOo,Xhe,vOo,FOo,zhe,TOo,MOo,Whe,EOo,COo,wOo,Yr,q4,Qhe,AOo,LOo,yV,yOo,xOo,$Oo,j4,Hhe,kOo,SOo,xV,ROo,POo,BOo,D4,Uhe,IOo,NOo,$V,qOo,jOo,DOo,G4,Jhe,GOo,OOo,kV,VOo,XOo,zOo,O4,Yhe,WOo,QOo,SV,HOo,UOo,JOo,V4,YOo,Khe,KOo,ZOo,Zhe,eVo,oVo,X4,uDe,Yi,z4,epe,dy,rVo,ope,tVo,bDe,Io,cy,aVo,Ki,nVo,RV,sVo,lVo,PV,iVo,dVo,cVo,fy,fVo,rpe,mVo,gVo,hVo,ft,my,pVo,tpe,_Vo,uVo,Zi,bVo,ape,vVo,FVo,BV,TVo,MVo,EVo,W4,CVo,ao,gy,wVo,npe,AVo,LVo,Ia,yVo,spe,xVo,$Vo,lpe,kVo,SVo,ipe,RVo,PVo,BVo,U,Q4,dpe,IVo,NVo,IV,qVo,jVo,DVo,H4,cpe,GVo,OVo,NV,VVo,XVo,zVo,U4,fpe,WVo,QVo,qV,HVo,UVo,JVo,J4,mpe,YVo,KVo,jV,ZVo,eXo,oXo,Y4,gpe,rXo,tXo,DV,aXo,nXo,sXo,K4,hpe,lXo,iXo,GV,dXo,cXo,fXo,Z4,ppe,mXo,gXo,OV,hXo,pXo,_Xo,ev,_pe,uXo,bXo,VV,vXo,FXo,TXo,ov,upe,MXo,EXo,XV,CXo,wXo,AXo,rv,bpe,LXo,yXo,zV,xXo,$Xo,kXo,tv,vpe,SXo,RXo,WV,PXo,BXo,IXo,av,Fpe,NXo,qXo,QV,jXo,DXo,GXo,nv,Tpe,OXo,VXo,HV,XXo,zXo,WXo,sv,Mpe,QXo,HXo,UV,UXo,JXo,YXo,lv,Epe,KXo,ZXo,JV,ezo,ozo,rzo,iv,Cpe,tzo,azo,YV,nzo,szo,lzo,dv,wpe,izo,dzo,KV,czo,fzo,mzo,cv,Ape,gzo,hzo,ZV,pzo,_zo,uzo,fv,Lpe,bzo,vzo,eX,Fzo,Tzo,Mzo,mv,ype,Ezo,Czo,oX,wzo,Azo,Lzo,gv,xpe,yzo,xzo,rX,$zo,kzo,Szo,hv,$pe,Rzo,Pzo,tX,Bzo,Izo,Nzo,pv,kpe,qzo,jzo,aX,Dzo,Gzo,Ozo,_v,Spe,Vzo,Xzo,nX,zzo,Wzo,Qzo,uv,Rpe,Hzo,Uzo,sX,Jzo,Yzo,Kzo,bv,Ppe,Zzo,eWo,lX,oWo,rWo,tWo,vv,Bpe,aWo,nWo,iX,sWo,lWo,iWo,Fv,Ipe,dWo,cWo,dX,fWo,mWo,gWo,Tv,Npe,hWo,pWo,cX,_Wo,uWo,bWo,Mv,qpe,vWo,FWo,fX,TWo,MWo,EWo,Ev,jpe,CWo,wWo,mX,AWo,LWo,yWo,Cv,Dpe,xWo,$Wo,gX,kWo,SWo,RWo,wv,Gpe,PWo,BWo,hX,IWo,NWo,qWo,Av,Ope,jWo,DWo,pX,GWo,OWo,VWo,Lv,XWo,Vpe,zWo,WWo,Xpe,QWo,HWo,yv,vDe,ed,xv,zpe,hy,UWo,Wpe,JWo,FDe,No,py,YWo,od,KWo,_X,ZWo,eQo,uX,oQo,rQo,tQo,_y,aQo,Qpe,nQo,sQo,lQo,mt,uy,iQo,Hpe,dQo,cQo,rd,fQo,Upe,mQo,gQo,bX,hQo,pQo,_Qo,$v,uQo,no,by,bQo,Jpe,vQo,FQo,Na,TQo,Ype,MQo,EQo,Kpe,CQo,wQo,Zpe,AQo,LQo,yQo,V,kv,e_e,xQo,$Qo,vX,kQo,SQo,RQo,Sv,o_e,PQo,BQo,FX,IQo,NQo,qQo,Rv,r_e,jQo,DQo,TX,GQo,OQo,VQo,Pv,t_e,XQo,zQo,MX,WQo,QQo,HQo,Bv,a_e,UQo,JQo,EX,YQo,KQo,ZQo,Iv,n_e,eHo,oHo,CX,rHo,tHo,aHo,Nv,s_e,nHo,sHo,wX,lHo,iHo,dHo,qv,l_e,cHo,fHo,AX,mHo,gHo,hHo,jv,i_e,pHo,_Ho,LX,uHo,bHo,vHo,Dv,d_e,FHo,THo,yX,MHo,EHo,CHo,Gv,c_e,wHo,AHo,xX,LHo,yHo,xHo,Ov,f_e,$Ho,kHo,$X,SHo,RHo,PHo,Vv,m_e,BHo,IHo,kX,NHo,qHo,jHo,Xv,g_e,DHo,GHo,SX,OHo,VHo,XHo,zv,h_e,zHo,WHo,RX,QHo,HHo,UHo,Wv,p_e,JHo,YHo,PX,KHo,ZHo,eUo,Qv,__e,oUo,rUo,BX,tUo,aUo,nUo,Hv,u_e,sUo,lUo,IX,iUo,dUo,cUo,Uv,b_e,fUo,mUo,NX,gUo,hUo,pUo,Jv,v_e,_Uo,uUo,qX,bUo,vUo,FUo,Yv,F_e,TUo,MUo,jX,EUo,CUo,wUo,Kv,T_e,AUo,LUo,DX,yUo,xUo,$Uo,Zv,M_e,kUo,SUo,GX,RUo,PUo,BUo,eF,E_e,IUo,NUo,OX,qUo,jUo,DUo,oF,C_e,GUo,OUo,VX,VUo,XUo,zUo,rF,w_e,WUo,QUo,XX,HUo,UUo,JUo,tF,A_e,YUo,KUo,zX,ZUo,eJo,oJo,aF,L_e,rJo,tJo,WX,aJo,nJo,sJo,nF,y_e,lJo,iJo,QX,dJo,cJo,fJo,sF,x_e,mJo,gJo,HX,hJo,pJo,_Jo,lF,$_e,uJo,bJo,UX,vJo,FJo,TJo,iF,k_e,MJo,EJo,JX,CJo,wJo,AJo,dF,S_e,LJo,yJo,YX,xJo,$Jo,kJo,cF,R_e,SJo,RJo,KX,PJo,BJo,IJo,fF,P_e,NJo,qJo,ZX,jJo,DJo,GJo,mF,B_e,OJo,VJo,ez,XJo,zJo,WJo,gF,I_e,QJo,HJo,oz,UJo,JJo,YJo,hF,N_e,KJo,ZJo,rz,eYo,oYo,rYo,pF,q_e,tYo,aYo,tz,nYo,sYo,lYo,_F,j_e,iYo,dYo,az,cYo,fYo,mYo,uF,gYo,D_e,hYo,pYo,G_e,_Yo,uYo,bF,TDe,td,vF,O_e,vy,bYo,V_e,vYo,MDe,qo,Fy,FYo,ad,TYo,nz,MYo,EYo,sz,CYo,wYo,AYo,Ty,LYo,X_e,yYo,xYo,$Yo,gt,My,kYo,z_e,SYo,RYo,nd,PYo,W_e,BYo,IYo,lz,NYo,qYo,jYo,FF,DYo,so,Ey,GYo,Q_e,OYo,VYo,qa,XYo,H_e,zYo,WYo,U_e,QYo,HYo,J_e,UYo,JYo,YYo,Y_e,TF,K_e,KYo,ZYo,iz,eKo,oKo,rKo,MF,tKo,Z_e,aKo,nKo,eue,sKo,lKo,EF,EDe,sd,CF,oue,Cy,iKo,rue,dKo,CDe,jo,wy,cKo,ld,fKo,dz,mKo,gKo,cz,hKo,pKo,_Ko,Ay,uKo,tue,bKo,vKo,FKo,ht,Ly,TKo,aue,MKo,EKo,id,CKo,nue,wKo,AKo,fz,LKo,yKo,xKo,wF,$Ko,lo,yy,kKo,sue,SKo,RKo,ja,PKo,lue,BKo,IKo,iue,NKo,qKo,due,jKo,DKo,GKo,ve,AF,cue,OKo,VKo,mz,XKo,zKo,WKo,LF,fue,QKo,HKo,gz,UKo,JKo,YKo,yF,mue,KKo,ZKo,hz,eZo,oZo,rZo,xF,gue,tZo,aZo,pz,nZo,sZo,lZo,Is,hue,iZo,dZo,_z,cZo,fZo,uz,mZo,gZo,hZo,$F,pue,pZo,_Zo,bz,uZo,bZo,vZo,Ns,_ue,FZo,TZo,vz,MZo,EZo,Fz,CZo,wZo,AZo,pt,uue,LZo,yZo,Tz,xZo,$Zo,Mz,kZo,SZo,Ez,RZo,PZo,BZo,kF,bue,IZo,NZo,Cz,qZo,jZo,DZo,SF,vue,GZo,OZo,wz,VZo,XZo,zZo,RF,Fue,WZo,QZo,Az,HZo,UZo,JZo,PF,Tue,YZo,KZo,Lz,ZZo,eer,oer,BF,Mue,rer,ter,yz,aer,ner,ser,IF,Eue,ler,ier,xz,der,cer,fer,NF,Cue,mer,ger,$z,her,per,_er,qF,uer,wue,ber,ver,Aue,Fer,Ter,jF,wDe,dd,DF,Lue,xy,Mer,yue,Eer,ADe,Do,$y,Cer,cd,wer,kz,Aer,Ler,Sz,yer,xer,$er,ky,ker,xue,Ser,Rer,Per,_t,Sy,Ber,$ue,Ier,Ner,fd,qer,kue,jer,Der,Rz,Ger,Oer,Ver,GF,Xer,io,Ry,zer,Sue,Wer,Qer,Da,Her,Rue,Uer,Jer,Pue,Yer,Ker,Bue,Zer,eor,oor,Iue,OF,Nue,ror,tor,Pz,aor,nor,sor,VF,lor,que,ior,dor,jue,cor,mor,XF,LDe,md,zF,Due,Py,gor,Gue,hor,yDe,Go,By,por,gd,_or,Bz,uor,bor,Iz,vor,For,Tor,Iy,Mor,Oue,Eor,Cor,wor,ut,Ny,Aor,Vue,Lor,yor,hd,xor,Xue,$or,kor,Nz,Sor,Ror,Por,WF,Bor,co,qy,Ior,zue,Nor,qor,Ga,jor,Wue,Dor,Gor,Que,Oor,Vor,Hue,Xor,zor,Wor,Re,QF,Uue,Qor,Hor,qz,Uor,Jor,Yor,HF,Jue,Kor,Zor,jz,err,orr,rrr,UF,Yue,trr,arr,Dz,nrr,srr,lrr,JF,Kue,irr,drr,Gz,crr,frr,mrr,YF,Zue,grr,hrr,Oz,prr,_rr,urr,KF,e1e,brr,vrr,Vz,Frr,Trr,Mrr,ZF,o1e,Err,Crr,Xz,wrr,Arr,Lrr,e6,r1e,yrr,xrr,zz,$rr,krr,Srr,o6,t1e,Rrr,Prr,Wz,Brr,Irr,Nrr,r6,qrr,a1e,jrr,Drr,n1e,Grr,Orr,t6,xDe,pd,a6,s1e,jy,Vrr,l1e,Xrr,$De,Oo,Dy,zrr,_d,Wrr,Qz,Qrr,Hrr,Hz,Urr,Jrr,Yrr,Gy,Krr,i1e,Zrr,etr,otr,bt,Oy,rtr,d1e,ttr,atr,ud,ntr,c1e,str,ltr,Uz,itr,dtr,ctr,n6,ftr,fo,Vy,mtr,f1e,gtr,htr,Oa,ptr,m1e,_tr,utr,g1e,btr,vtr,h1e,Ftr,Ttr,Mtr,Kr,s6,p1e,Etr,Ctr,Jz,wtr,Atr,Ltr,l6,_1e,ytr,xtr,Yz,$tr,ktr,Str,i6,u1e,Rtr,Ptr,Kz,Btr,Itr,Ntr,d6,b1e,qtr,jtr,Zz,Dtr,Gtr,Otr,c6,v1e,Vtr,Xtr,eW,ztr,Wtr,Qtr,f6,Htr,F1e,Utr,Jtr,T1e,Ytr,Ktr,m6,kDe,bd,g6,M1e,Xy,Ztr,E1e,ear,SDe,Vo,zy,oar,vd,rar,oW,tar,aar,rW,nar,sar,lar,Wy,iar,C1e,dar,car,far,vt,Qy,mar,w1e,gar,har,Fd,par,A1e,_ar,uar,tW,bar,Far,Tar,h6,Mar,mo,Hy,Ear,L1e,Car,war,Va,Aar,y1e,Lar,yar,x1e,xar,$ar,$1e,kar,Sar,Rar,Le,p6,k1e,Par,Bar,aW,Iar,Nar,qar,_6,S1e,jar,Dar,nW,Gar,Oar,Var,u6,R1e,Xar,zar,sW,War,Qar,Har,b6,P1e,Uar,Jar,lW,Yar,Kar,Zar,v6,B1e,enr,onr,iW,rnr,tnr,anr,F6,I1e,nnr,snr,dW,lnr,inr,dnr,T6,N1e,cnr,fnr,cW,mnr,gnr,hnr,M6,q1e,pnr,_nr,fW,unr,bnr,vnr,E6,j1e,Fnr,Tnr,mW,Mnr,Enr,Cnr,C6,D1e,wnr,Anr,gW,Lnr,ynr,xnr,w6,$nr,G1e,knr,Snr,O1e,Rnr,Pnr,A6,RDe,Td,L6,V1e,Uy,Bnr,X1e,Inr,PDe,Xo,Jy,Nnr,Md,qnr,hW,jnr,Dnr,pW,Gnr,Onr,Vnr,Yy,Xnr,z1e,znr,Wnr,Qnr,Ft,Ky,Hnr,W1e,Unr,Jnr,Ed,Ynr,Q1e,Knr,Znr,_W,esr,osr,rsr,y6,tsr,go,Zy,asr,H1e,nsr,ssr,Xa,lsr,U1e,isr,dsr,J1e,csr,fsr,Y1e,msr,gsr,hsr,e8,x6,K1e,psr,_sr,uW,usr,bsr,vsr,$6,Z1e,Fsr,Tsr,bW,Msr,Esr,Csr,k6,wsr,ebe,Asr,Lsr,obe,ysr,xsr,S6,BDe,Cd,R6,rbe,o8,$sr,tbe,ksr,IDe,zo,r8,Ssr,wd,Rsr,vW,Psr,Bsr,FW,Isr,Nsr,qsr,t8,jsr,abe,Dsr,Gsr,Osr,Tt,a8,Vsr,nbe,Xsr,zsr,Ad,Wsr,sbe,Qsr,Hsr,TW,Usr,Jsr,Ysr,P6,Ksr,ho,n8,Zsr,lbe,elr,olr,za,rlr,ibe,tlr,alr,dbe,nlr,slr,cbe,llr,ilr,dlr,Zr,B6,fbe,clr,flr,MW,mlr,glr,hlr,I6,mbe,plr,_lr,EW,ulr,blr,vlr,N6,gbe,Flr,Tlr,CW,Mlr,Elr,Clr,q6,hbe,wlr,Alr,wW,Llr,ylr,xlr,j6,pbe,$lr,klr,AW,Slr,Rlr,Plr,D6,Blr,_be,Ilr,Nlr,ube,qlr,jlr,G6,NDe,Ld,O6,bbe,s8,Dlr,vbe,Glr,qDe,Wo,l8,Olr,yd,Vlr,LW,Xlr,zlr,yW,Wlr,Qlr,Hlr,i8,Ulr,Fbe,Jlr,Ylr,Klr,Mt,d8,Zlr,Tbe,eir,oir,xd,rir,Mbe,tir,air,xW,nir,sir,lir,V6,iir,po,c8,dir,Ebe,cir,fir,Wa,mir,Cbe,gir,hir,wbe,pir,_ir,Abe,uir,bir,vir,$d,X6,Lbe,Fir,Tir,$W,Mir,Eir,Cir,z6,ybe,wir,Air,kW,Lir,yir,xir,W6,xbe,$ir,kir,SW,Sir,Rir,Pir,Q6,Bir,$be,Iir,Nir,kbe,qir,jir,H6,jDe,kd,U6,Sbe,f8,Dir,Rbe,Gir,DDe,Qo,m8,Oir,Sd,Vir,RW,Xir,zir,PW,Wir,Qir,Hir,g8,Uir,Pbe,Jir,Yir,Kir,Et,h8,Zir,Bbe,edr,odr,Rd,rdr,Ibe,tdr,adr,BW,ndr,sdr,ldr,J6,idr,_o,p8,ddr,Nbe,cdr,fdr,Qa,mdr,qbe,gdr,hdr,jbe,pdr,_dr,Dbe,udr,bdr,vdr,_8,Y6,Gbe,Fdr,Tdr,IW,Mdr,Edr,Cdr,K6,Obe,wdr,Adr,NW,Ldr,ydr,xdr,Z6,$dr,Vbe,kdr,Sdr,Xbe,Rdr,Pdr,eT,GDe,Pd,oT,zbe,u8,Bdr,Wbe,Idr,ODe,Ho,b8,Ndr,Bd,qdr,qW,jdr,Ddr,jW,Gdr,Odr,Vdr,v8,Xdr,Qbe,zdr,Wdr,Qdr,Ct,F8,Hdr,Hbe,Udr,Jdr,Id,Ydr,Ube,Kdr,Zdr,DW,ecr,ocr,rcr,rT,tcr,uo,T8,acr,Jbe,ncr,scr,Ha,lcr,Ybe,icr,dcr,Kbe,ccr,fcr,Zbe,mcr,gcr,hcr,e2e,tT,o2e,pcr,_cr,GW,ucr,bcr,vcr,aT,Fcr,r2e,Tcr,Mcr,t2e,Ecr,Ccr,nT,VDe,Nd,sT,a2e,M8,wcr,n2e,Acr,XDe,Uo,E8,Lcr,qd,ycr,OW,xcr,$cr,VW,kcr,Scr,Rcr,C8,Pcr,s2e,Bcr,Icr,Ncr,wt,w8,qcr,l2e,jcr,Dcr,jd,Gcr,i2e,Ocr,Vcr,XW,Xcr,zcr,Wcr,lT,Qcr,bo,A8,Hcr,d2e,Ucr,Jcr,Ua,Ycr,c2e,Kcr,Zcr,f2e,efr,ofr,m2e,rfr,tfr,afr,Ja,iT,g2e,nfr,sfr,zW,lfr,ifr,dfr,dT,h2e,cfr,ffr,WW,mfr,gfr,hfr,cT,p2e,pfr,_fr,QW,ufr,bfr,vfr,fT,_2e,Ffr,Tfr,HW,Mfr,Efr,Cfr,mT,wfr,u2e,Afr,Lfr,b2e,yfr,xfr,gT,zDe,Dd,hT,v2e,L8,$fr,F2e,kfr,WDe,Jo,y8,Sfr,Gd,Rfr,UW,Pfr,Bfr,JW,Ifr,Nfr,qfr,x8,jfr,T2e,Dfr,Gfr,Ofr,At,$8,Vfr,M2e,Xfr,zfr,Od,Wfr,E2e,Qfr,Hfr,YW,Ufr,Jfr,Yfr,pT,Kfr,vo,k8,Zfr,C2e,emr,omr,Ya,rmr,w2e,tmr,amr,A2e,nmr,smr,L2e,lmr,imr,dmr,y2e,_T,x2e,cmr,fmr,KW,mmr,gmr,hmr,uT,pmr,$2e,_mr,umr,k2e,bmr,vmr,bT,QDe,Vd,vT,S2e,S8,Fmr,R2e,Tmr,HDe,Yo,R8,Mmr,Xd,Emr,ZW,Cmr,wmr,eQ,Amr,Lmr,ymr,P8,xmr,P2e,$mr,kmr,Smr,Lt,B8,Rmr,B2e,Pmr,Bmr,zd,Imr,I2e,Nmr,qmr,oQ,jmr,Dmr,Gmr,FT,Omr,wr,I8,Vmr,N2e,Xmr,zmr,Ka,Wmr,q2e,Qmr,Hmr,j2e,Umr,Jmr,D2e,Ymr,Kmr,Zmr,q,TT,G2e,egr,ogr,rQ,rgr,tgr,agr,MT,O2e,ngr,sgr,tQ,lgr,igr,dgr,ET,V2e,cgr,fgr,aQ,mgr,ggr,hgr,CT,X2e,pgr,_gr,nQ,ugr,bgr,vgr,wT,z2e,Fgr,Tgr,sQ,Mgr,Egr,Cgr,AT,W2e,wgr,Agr,lQ,Lgr,ygr,xgr,LT,Q2e,$gr,kgr,iQ,Sgr,Rgr,Pgr,yT,H2e,Bgr,Igr,dQ,Ngr,qgr,jgr,xT,U2e,Dgr,Ggr,cQ,Ogr,Vgr,Xgr,$T,J2e,zgr,Wgr,fQ,Qgr,Hgr,Ugr,kT,Y2e,Jgr,Ygr,mQ,Kgr,Zgr,ehr,ST,K2e,ohr,rhr,gQ,thr,ahr,nhr,RT,Z2e,shr,lhr,hQ,ihr,dhr,chr,PT,e4e,fhr,mhr,pQ,ghr,hhr,phr,BT,o4e,_hr,uhr,_Q,bhr,vhr,Fhr,IT,r4e,Thr,Mhr,uQ,Ehr,Chr,whr,NT,t4e,Ahr,Lhr,bQ,yhr,xhr,$hr,qs,a4e,khr,Shr,vQ,Rhr,Phr,FQ,Bhr,Ihr,Nhr,qT,n4e,qhr,jhr,TQ,Dhr,Ghr,Ohr,jT,s4e,Vhr,Xhr,MQ,zhr,Whr,Qhr,DT,l4e,Hhr,Uhr,EQ,Jhr,Yhr,Khr,GT,i4e,Zhr,epr,CQ,opr,rpr,tpr,OT,d4e,apr,npr,wQ,spr,lpr,ipr,VT,c4e,dpr,cpr,AQ,fpr,mpr,gpr,XT,f4e,hpr,ppr,LQ,_pr,upr,bpr,zT,m4e,vpr,Fpr,yQ,Tpr,Mpr,Epr,WT,g4e,Cpr,wpr,xQ,Apr,Lpr,ypr,QT,h4e,xpr,$pr,$Q,kpr,Spr,Rpr,HT,p4e,Ppr,Bpr,kQ,Ipr,Npr,qpr,UT,_4e,jpr,Dpr,SQ,Gpr,Opr,Vpr,JT,u4e,Xpr,zpr,RQ,Wpr,Qpr,Hpr,YT,b4e,Upr,Jpr,PQ,Ypr,Kpr,Zpr,KT,v4e,e_r,o_r,BQ,r_r,t_r,a_r,ZT,F4e,n_r,s_r,IQ,l_r,i_r,d_r,e7,T4e,c_r,f_r,NQ,m_r,g_r,h_r,o7,M4e,p_r,__r,qQ,u_r,b_r,v_r,r7,E4e,F_r,T_r,jQ,M_r,E_r,C_r,t7,C4e,w_r,A_r,DQ,L_r,y_r,x_r,a7,w4e,$_r,k_r,GQ,S_r,R_r,P_r,n7,A4e,B_r,I_r,OQ,N_r,q_r,j_r,s7,L4e,D_r,G_r,VQ,O_r,V_r,X_r,l7,y4e,z_r,W_r,XQ,Q_r,H_r,U_r,i7,x4e,J_r,Y_r,zQ,K_r,Z_r,eur,d7,$4e,our,rur,WQ,tur,aur,nur,c7,k4e,sur,lur,QQ,iur,dur,cur,f7,S4e,fur,mur,HQ,gur,hur,pur,m7,R4e,_ur,uur,UQ,bur,vur,Fur,g7,UDe,Wd,h7,P4e,N8,Tur,B4e,Mur,JDe,Ko,q8,Eur,Qd,Cur,JQ,wur,Aur,YQ,Lur,yur,xur,j8,$ur,I4e,kur,Sur,Rur,yt,D8,Pur,N4e,Bur,Iur,Hd,Nur,q4e,qur,jur,KQ,Dur,Gur,Our,p7,Vur,Ar,G8,Xur,j4e,zur,Wur,Za,Qur,D4e,Hur,Uur,G4e,Jur,Yur,O4e,Kur,Zur,e1r,se,_7,V4e,o1r,r1r,ZQ,t1r,a1r,n1r,u7,X4e,s1r,l1r,eH,i1r,d1r,c1r,b7,z4e,f1r,m1r,oH,g1r,h1r,p1r,v7,W4e,_1r,u1r,rH,b1r,v1r,F1r,F7,Q4e,T1r,M1r,tH,E1r,C1r,w1r,T7,H4e,A1r,L1r,aH,y1r,x1r,$1r,M7,U4e,k1r,S1r,nH,R1r,P1r,B1r,E7,J4e,I1r,N1r,sH,q1r,j1r,D1r,C7,Y4e,G1r,O1r,lH,V1r,X1r,z1r,w7,K4e,W1r,Q1r,iH,H1r,U1r,J1r,A7,Z4e,Y1r,K1r,dH,Z1r,ebr,obr,L7,eve,rbr,tbr,cH,abr,nbr,sbr,y7,ove,lbr,ibr,fH,dbr,cbr,fbr,x7,rve,mbr,gbr,mH,hbr,pbr,_br,$7,tve,ubr,bbr,gH,vbr,Fbr,Tbr,k7,ave,Mbr,Ebr,hH,Cbr,wbr,Abr,S7,nve,Lbr,ybr,pH,xbr,$br,kbr,R7,sve,Sbr,Rbr,_H,Pbr,Bbr,Ibr,P7,lve,Nbr,qbr,uH,jbr,Dbr,Gbr,B7,ive,Obr,Vbr,bH,Xbr,zbr,Wbr,I7,dve,Qbr,Hbr,vH,Ubr,Jbr,Ybr,N7,cve,Kbr,Zbr,FH,e2r,o2r,r2r,q7,fve,t2r,a2r,TH,n2r,s2r,l2r,j7,YDe,Ud,D7,mve,O8,i2r,gve,d2r,KDe,Zo,V8,c2r,Jd,f2r,MH,m2r,g2r,EH,h2r,p2r,_2r,X8,u2r,hve,b2r,v2r,F2r,xt,z8,T2r,pve,M2r,E2r,Yd,C2r,_ve,w2r,A2r,CH,L2r,y2r,x2r,G7,$2r,Lr,W8,k2r,uve,S2r,R2r,en,P2r,bve,B2r,I2r,vve,N2r,q2r,Fve,j2r,D2r,G2r,Me,O7,Tve,O2r,V2r,wH,X2r,z2r,W2r,V7,Mve,Q2r,H2r,AH,U2r,J2r,Y2r,X7,Eve,K2r,Z2r,LH,e4r,o4r,r4r,z7,Cve,t4r,a4r,yH,n4r,s4r,l4r,W7,wve,i4r,d4r,xH,c4r,f4r,m4r,Q7,Ave,g4r,h4r,$H,p4r,_4r,u4r,H7,Lve,b4r,v4r,kH,F4r,T4r,M4r,U7,yve,E4r,C4r,SH,w4r,A4r,L4r,J7,xve,y4r,x4r,RH,$4r,k4r,S4r,Y7,$ve,R4r,P4r,PH,B4r,I4r,N4r,K7,kve,q4r,j4r,BH,D4r,G4r,O4r,Z7,Sve,V4r,X4r,IH,z4r,W4r,Q4r,eM,Rve,H4r,U4r,NH,J4r,Y4r,K4r,oM,ZDe,Kd,rM,Pve,Q8,Z4r,Bve,evr,eGe,er,H8,ovr,Zd,rvr,qH,tvr,avr,jH,nvr,svr,lvr,U8,ivr,Ive,dvr,cvr,fvr,$t,J8,mvr,Nve,gvr,hvr,ec,pvr,qve,_vr,uvr,DH,bvr,vvr,Fvr,tM,Tvr,yr,Y8,Mvr,jve,Evr,Cvr,on,wvr,Dve,Avr,Lvr,Gve,yvr,xvr,Ove,$vr,kvr,Svr,rn,aM,Vve,Rvr,Pvr,GH,Bvr,Ivr,Nvr,nM,Xve,qvr,jvr,OH,Dvr,Gvr,Ovr,sM,zve,Vvr,Xvr,VH,zvr,Wvr,Qvr,lM,Wve,Hvr,Uvr,XH,Jvr,Yvr,Kvr,iM,oGe,oc,dM,Qve,K8,Zvr,Hve,eFr,rGe,or,Z8,oFr,rc,rFr,zH,tFr,aFr,WH,nFr,sFr,lFr,e9,iFr,Uve,dFr,cFr,fFr,kt,o9,mFr,Jve,gFr,hFr,tc,pFr,Yve,_Fr,uFr,QH,bFr,vFr,FFr,cM,TFr,xr,r9,MFr,Kve,EFr,CFr,tn,wFr,Zve,AFr,LFr,eFe,yFr,xFr,oFe,$Fr,kFr,SFr,ie,fM,rFe,RFr,PFr,HH,BFr,IFr,NFr,mM,tFe,qFr,jFr,UH,DFr,GFr,OFr,gM,aFe,VFr,XFr,JH,zFr,WFr,QFr,hM,nFe,HFr,UFr,YH,JFr,YFr,KFr,pM,sFe,ZFr,e6r,KH,o6r,r6r,t6r,_M,lFe,a6r,n6r,ZH,s6r,l6r,i6r,uM,iFe,d6r,c6r,eU,f6r,m6r,g6r,bM,dFe,h6r,p6r,oU,_6r,u6r,b6r,vM,cFe,v6r,F6r,rU,T6r,M6r,E6r,FM,fFe,C6r,w6r,tU,A6r,L6r,y6r,TM,mFe,x6r,$6r,aU,k6r,S6r,R6r,MM,gFe,P6r,B6r,nU,I6r,N6r,q6r,EM,hFe,j6r,D6r,sU,G6r,O6r,V6r,CM,pFe,X6r,z6r,lU,W6r,Q6r,H6r,wM,_Fe,U6r,J6r,iU,Y6r,K6r,Z6r,AM,uFe,eTr,oTr,dU,rTr,tTr,aTr,LM,bFe,nTr,sTr,cU,lTr,iTr,dTr,yM,vFe,cTr,fTr,fU,mTr,gTr,hTr,xM,FFe,pTr,_Tr,mU,uTr,bTr,vTr,$M,TFe,FTr,TTr,gU,MTr,ETr,CTr,kM,tGe,ac,SM,MFe,t9,wTr,EFe,ATr,aGe,rr,a9,LTr,nc,yTr,hU,xTr,$Tr,pU,kTr,STr,RTr,n9,PTr,CFe,BTr,ITr,NTr,St,s9,qTr,wFe,jTr,DTr,sc,GTr,AFe,OTr,VTr,_U,XTr,zTr,WTr,RM,QTr,$r,l9,HTr,LFe,UTr,JTr,an,YTr,yFe,KTr,ZTr,xFe,e7r,o7r,$Fe,r7r,t7r,a7r,ye,PM,kFe,n7r,s7r,uU,l7r,i7r,d7r,BM,SFe,c7r,f7r,bU,m7r,g7r,h7r,IM,RFe,p7r,_7r,vU,u7r,b7r,v7r,NM,PFe,F7r,T7r,FU,M7r,E7r,C7r,qM,BFe,w7r,A7r,TU,L7r,y7r,x7r,jM,IFe,$7r,k7r,MU,S7r,R7r,P7r,DM,NFe,B7r,I7r,EU,N7r,q7r,j7r,GM,qFe,D7r,G7r,CU,O7r,V7r,X7r,OM,jFe,z7r,W7r,wU,Q7r,H7r,U7r,VM,DFe,J7r,Y7r,AU,K7r,Z7r,eMr,XM,nGe,lc,zM,GFe,i9,oMr,OFe,rMr,sGe,tr,d9,tMr,ic,aMr,LU,nMr,sMr,yU,lMr,iMr,dMr,c9,cMr,VFe,fMr,mMr,gMr,Rt,f9,hMr,XFe,pMr,_Mr,dc,uMr,zFe,bMr,vMr,xU,FMr,TMr,MMr,WM,EMr,kr,m9,CMr,WFe,wMr,AMr,nn,LMr,QFe,yMr,xMr,HFe,$Mr,kMr,UFe,SMr,RMr,PMr,oe,QM,JFe,BMr,IMr,$U,NMr,qMr,jMr,HM,YFe,DMr,GMr,kU,OMr,VMr,XMr,UM,KFe,zMr,WMr,SU,QMr,HMr,UMr,JM,ZFe,JMr,YMr,RU,KMr,ZMr,eEr,YM,e6e,oEr,rEr,PU,tEr,aEr,nEr,KM,o6e,sEr,lEr,BU,iEr,dEr,cEr,ZM,r6e,fEr,mEr,IU,gEr,hEr,pEr,eE,t6e,_Er,uEr,NU,bEr,vEr,FEr,oE,a6e,TEr,MEr,qU,EEr,CEr,wEr,rE,n6e,AEr,LEr,jU,yEr,xEr,$Er,tE,s6e,kEr,SEr,DU,REr,PEr,BEr,aE,l6e,IEr,NEr,GU,qEr,jEr,DEr,nE,i6e,GEr,OEr,OU,VEr,XEr,zEr,sE,d6e,WEr,QEr,VU,HEr,UEr,JEr,lE,c6e,YEr,KEr,XU,ZEr,eCr,oCr,iE,f6e,rCr,tCr,zU,aCr,nCr,sCr,dE,m6e,lCr,iCr,WU,dCr,cCr,fCr,cE,g6e,mCr,gCr,QU,hCr,pCr,_Cr,fE,h6e,uCr,bCr,HU,vCr,FCr,TCr,mE,p6e,MCr,ECr,UU,CCr,wCr,ACr,gE,_6e,LCr,yCr,JU,xCr,$Cr,kCr,hE,u6e,SCr,RCr,YU,PCr,BCr,ICr,pE,b6e,NCr,qCr,KU,jCr,DCr,GCr,_E,v6e,OCr,VCr,ZU,XCr,zCr,WCr,uE,F6e,QCr,HCr,eJ,UCr,JCr,YCr,bE,T6e,KCr,ZCr,oJ,e5r,o5r,r5r,vE,lGe,cc,FE,M6e,g9,t5r,E6e,a5r,iGe,ar,h9,n5r,fc,s5r,rJ,l5r,i5r,tJ,d5r,c5r,f5r,p9,m5r,C6e,g5r,h5r,p5r,Pt,_9,_5r,w6e,u5r,b5r,mc,v5r,A6e,F5r,T5r,aJ,M5r,E5r,C5r,TE,w5r,Sr,u9,A5r,L6e,L5r,y5r,sn,x5r,y6e,$5r,k5r,x6e,S5r,R5r,$6e,P5r,B5r,I5r,pe,ME,k6e,N5r,q5r,nJ,j5r,D5r,G5r,EE,S6e,O5r,V5r,sJ,X5r,z5r,W5r,CE,R6e,Q5r,H5r,lJ,U5r,J5r,Y5r,wE,P6e,K5r,Z5r,iJ,e3r,o3r,r3r,AE,B6e,t3r,a3r,dJ,n3r,s3r,l3r,LE,I6e,i3r,d3r,cJ,c3r,f3r,m3r,yE,N6e,g3r,h3r,fJ,p3r,_3r,u3r,xE,q6e,b3r,v3r,mJ,F3r,T3r,M3r,$E,j6e,E3r,C3r,gJ,w3r,A3r,L3r,kE,D6e,y3r,x3r,hJ,$3r,k3r,S3r,SE,G6e,R3r,P3r,pJ,B3r,I3r,N3r,RE,O6e,q3r,j3r,_J,D3r,G3r,O3r,PE,V6e,V3r,X3r,uJ,z3r,W3r,Q3r,BE,X6e,H3r,U3r,bJ,J3r,Y3r,K3r,IE,z6e,Z3r,e0r,vJ,o0r,r0r,t0r,NE,W6e,a0r,n0r,FJ,s0r,l0r,i0r,qE,Q6e,d0r,c0r,TJ,f0r,m0r,g0r,jE,dGe,gc,DE,H6e,b9,h0r,U6e,p0r,cGe,nr,v9,_0r,hc,u0r,MJ,b0r,v0r,EJ,F0r,T0r,M0r,F9,E0r,J6e,C0r,w0r,A0r,Bt,T9,L0r,Y6e,y0r,x0r,pc,$0r,K6e,k0r,S0r,CJ,R0r,P0r,B0r,GE,I0r,Rr,M9,N0r,Z6e,q0r,j0r,ln,D0r,eTe,G0r,O0r,oTe,V0r,X0r,rTe,z0r,W0r,Q0r,E9,OE,tTe,H0r,U0r,wJ,J0r,Y0r,K0r,VE,aTe,Z0r,ewr,AJ,owr,rwr,twr,XE,fGe,_c,zE,nTe,C9,awr,sTe,nwr,mGe,sr,w9,swr,uc,lwr,LJ,iwr,dwr,yJ,cwr,fwr,mwr,A9,gwr,lTe,hwr,pwr,_wr,It,L9,uwr,iTe,bwr,vwr,bc,Fwr,dTe,Twr,Mwr,xJ,Ewr,Cwr,wwr,WE,Awr,Pr,y9,Lwr,cTe,ywr,xwr,dn,$wr,fTe,kwr,Swr,mTe,Rwr,Pwr,gTe,Bwr,Iwr,Nwr,hTe,QE,pTe,qwr,jwr,$J,Dwr,Gwr,Owr,HE,gGe,vc,UE,_Te,x9,Vwr,uTe,Xwr,hGe,lr,$9,zwr,Fc,Wwr,kJ,Qwr,Hwr,SJ,Uwr,Jwr,Ywr,k9,Kwr,bTe,Zwr,eAr,oAr,Nt,S9,rAr,vTe,tAr,aAr,Tc,nAr,FTe,sAr,lAr,RJ,iAr,dAr,cAr,JE,fAr,Br,R9,mAr,TTe,gAr,hAr,cn,pAr,MTe,_Ar,uAr,ETe,bAr,vAr,CTe,FAr,TAr,MAr,de,YE,wTe,EAr,CAr,PJ,wAr,AAr,LAr,KE,ATe,yAr,xAr,BJ,$Ar,kAr,SAr,ZE,LTe,RAr,PAr,IJ,BAr,IAr,NAr,eC,yTe,qAr,jAr,NJ,DAr,GAr,OAr,oC,xTe,VAr,XAr,qJ,zAr,WAr,QAr,rC,$Te,HAr,UAr,jJ,JAr,YAr,KAr,tC,kTe,ZAr,eLr,DJ,oLr,rLr,tLr,aC,STe,aLr,nLr,GJ,sLr,lLr,iLr,nC,RTe,dLr,cLr,OJ,fLr,mLr,gLr,sC,PTe,hLr,pLr,VJ,_Lr,uLr,bLr,lC,BTe,vLr,FLr,XJ,TLr,MLr,ELr,iC,ITe,CLr,wLr,zJ,ALr,LLr,yLr,dC,NTe,xLr,$Lr,WJ,kLr,SLr,RLr,cC,qTe,PLr,BLr,QJ,ILr,NLr,qLr,fC,jTe,jLr,DLr,HJ,GLr,OLr,VLr,mC,DTe,XLr,zLr,UJ,WLr,QLr,HLr,gC,GTe,ULr,JLr,JJ,YLr,KLr,ZLr,hC,OTe,eyr,oyr,YJ,ryr,tyr,ayr,pC,VTe,nyr,syr,KJ,lyr,iyr,dyr,_C,XTe,cyr,fyr,ZJ,myr,gyr,hyr,uC,pGe,Mc,bC,zTe,P9,pyr,WTe,_yr,_Ge,ir,B9,uyr,Ec,byr,eY,vyr,Fyr,oY,Tyr,Myr,Eyr,I9,Cyr,QTe,wyr,Ayr,Lyr,qt,N9,yyr,HTe,xyr,$yr,Cc,kyr,UTe,Syr,Ryr,rY,Pyr,Byr,Iyr,vC,Nyr,Ir,q9,qyr,JTe,jyr,Dyr,fn,Gyr,YTe,Oyr,Vyr,KTe,Xyr,zyr,ZTe,Wyr,Qyr,Hyr,ce,FC,e7e,Uyr,Jyr,tY,Yyr,Kyr,Zyr,TC,o7e,e8r,o8r,aY,r8r,t8r,a8r,MC,r7e,n8r,s8r,nY,l8r,i8r,d8r,EC,t7e,c8r,f8r,sY,m8r,g8r,h8r,CC,a7e,p8r,_8r,lY,u8r,b8r,v8r,wC,n7e,F8r,T8r,iY,M8r,E8r,C8r,AC,s7e,w8r,A8r,dY,L8r,y8r,x8r,LC,l7e,$8r,k8r,cY,S8r,R8r,P8r,yC,i7e,B8r,I8r,fY,N8r,q8r,j8r,xC,d7e,D8r,G8r,mY,O8r,V8r,X8r,$C,c7e,z8r,W8r,gY,Q8r,H8r,U8r,kC,f7e,J8r,Y8r,hY,K8r,Z8r,e9r,SC,m7e,o9r,r9r,pY,t9r,a9r,n9r,RC,g7e,s9r,l9r,_Y,i9r,d9r,c9r,PC,h7e,f9r,m9r,uY,g9r,h9r,p9r,BC,p7e,_9r,u9r,bY,b9r,v9r,F9r,IC,_7e,T9r,M9r,vY,E9r,C9r,w9r,NC,u7e,A9r,L9r,FY,y9r,x9r,$9r,qC,b7e,k9r,S9r,TY,R9r,P9r,B9r,jC,v7e,I9r,N9r,MY,q9r,j9r,D9r,DC,uGe,wc,GC,F7e,j9,G9r,T7e,O9r,bGe,dr,D9,V9r,Ac,X9r,EY,z9r,W9r,CY,Q9r,H9r,U9r,G9,J9r,M7e,Y9r,K9r,Z9r,jt,O9,exr,E7e,oxr,rxr,Lc,txr,C7e,axr,nxr,wY,sxr,lxr,ixr,OC,dxr,Nr,V9,cxr,w7e,fxr,mxr,mn,gxr,A7e,hxr,pxr,L7e,_xr,uxr,y7e,bxr,vxr,Fxr,x7e,VC,$7e,Txr,Mxr,AY,Exr,Cxr,wxr,XC,vGe,yc,zC,k7e,X9,Axr,S7e,Lxr,FGe,cr,z9,yxr,xc,xxr,LY,$xr,kxr,yY,Sxr,Rxr,Pxr,W9,Bxr,R7e,Ixr,Nxr,qxr,Dt,Q9,jxr,P7e,Dxr,Gxr,$c,Oxr,B7e,Vxr,Xxr,xY,zxr,Wxr,Qxr,WC,Hxr,qr,H9,Uxr,I7e,Jxr,Yxr,gn,Kxr,N7e,Zxr,e$r,q7e,o$r,r$r,j7e,t$r,a$r,n$r,D7e,QC,G7e,s$r,l$r,$Y,i$r,d$r,c$r,HC,TGe,kc,UC,O7e,U9,f$r,V7e,m$r,MGe,fr,J9,g$r,Sc,h$r,kY,p$r,_$r,SY,u$r,b$r,v$r,Y9,F$r,X7e,T$r,M$r,E$r,Gt,K9,C$r,z7e,w$r,A$r,Rc,L$r,W7e,y$r,x$r,RY,$$r,k$r,S$r,JC,R$r,jr,Z9,P$r,Q7e,B$r,I$r,hn,N$r,H7e,q$r,j$r,U7e,D$r,G$r,J7e,O$r,V$r,X$r,re,YC,Y7e,z$r,W$r,PY,Q$r,H$r,U$r,KC,K7e,J$r,Y$r,BY,K$r,Z$r,ekr,ZC,Z7e,okr,rkr,IY,tkr,akr,nkr,e5,eMe,skr,lkr,NY,ikr,dkr,ckr,o5,oMe,fkr,mkr,qY,gkr,hkr,pkr,r5,rMe,_kr,ukr,jY,bkr,vkr,Fkr,t5,tMe,Tkr,Mkr,DY,Ekr,Ckr,wkr,a5,aMe,Akr,Lkr,GY,ykr,xkr,$kr,n5,nMe,kkr,Skr,OY,Rkr,Pkr,Bkr,s5,sMe,Ikr,Nkr,VY,qkr,jkr,Dkr,l5,lMe,Gkr,Okr,XY,Vkr,Xkr,zkr,i5,iMe,Wkr,Qkr,zY,Hkr,Ukr,Jkr,d5,dMe,Ykr,Kkr,WY,Zkr,eSr,oSr,c5,cMe,rSr,tSr,QY,aSr,nSr,sSr,f5,fMe,lSr,iSr,HY,dSr,cSr,fSr,m5,mMe,mSr,gSr,UY,hSr,pSr,_Sr,g5,gMe,uSr,bSr,JY,vSr,FSr,TSr,h5,hMe,MSr,ESr,YY,CSr,wSr,ASr,p5,pMe,LSr,ySr,KY,xSr,$Sr,kSr,_5,_Me,SSr,RSr,ZY,PSr,BSr,ISr,u5,uMe,NSr,qSr,eK,jSr,DSr,GSr,b5,bMe,OSr,VSr,oK,XSr,zSr,WSr,v5,vMe,QSr,HSr,rK,USr,JSr,YSr,F5,FMe,KSr,ZSr,tK,eRr,oRr,rRr,T5,TMe,tRr,aRr,aK,nRr,sRr,lRr,M5,MMe,iRr,dRr,nK,cRr,fRr,mRr,E5,EGe,Pc,C5,EMe,ex,gRr,CMe,hRr,CGe,mr,ox,pRr,Bc,_Rr,sK,uRr,bRr,lK,vRr,FRr,TRr,rx,MRr,wMe,ERr,CRr,wRr,Ot,tx,ARr,AMe,LRr,yRr,Ic,xRr,LMe,$Rr,kRr,iK,SRr,RRr,PRr,w5,BRr,Dr,ax,IRr,yMe,NRr,qRr,pn,jRr,xMe,DRr,GRr,$Me,ORr,VRr,kMe,XRr,zRr,WRr,xe,A5,SMe,QRr,HRr,dK,URr,JRr,YRr,L5,RMe,KRr,ZRr,cK,ePr,oPr,rPr,y5,PMe,tPr,aPr,fK,nPr,sPr,lPr,x5,BMe,iPr,dPr,mK,cPr,fPr,mPr,$5,IMe,gPr,hPr,gK,pPr,_Pr,uPr,k5,NMe,bPr,vPr,hK,FPr,TPr,MPr,S5,qMe,EPr,CPr,pK,wPr,APr,LPr,R5,jMe,yPr,xPr,_K,$Pr,kPr,SPr,P5,DMe,RPr,PPr,uK,BPr,IPr,NPr,B5,GMe,qPr,jPr,bK,DPr,GPr,OPr,I5,wGe,Nc,N5,OMe,nx,VPr,VMe,XPr,AGe,gr,sx,zPr,qc,WPr,vK,QPr,HPr,FK,UPr,JPr,YPr,lx,KPr,XMe,ZPr,eBr,oBr,Vt,ix,rBr,zMe,tBr,aBr,jc,nBr,WMe,sBr,lBr,TK,iBr,dBr,cBr,q5,fBr,Gr,dx,mBr,QMe,gBr,hBr,_n,pBr,HMe,_Br,uBr,UMe,bBr,vBr,JMe,FBr,TBr,MBr,Ee,j5,YMe,EBr,CBr,MK,wBr,ABr,LBr,D5,KMe,yBr,xBr,EK,$Br,kBr,SBr,G5,ZMe,RBr,PBr,CK,BBr,IBr,NBr,O5,eEe,qBr,jBr,wK,DBr,GBr,OBr,V5,oEe,VBr,XBr,AK,zBr,WBr,QBr,X5,rEe,HBr,UBr,LK,JBr,YBr,KBr,z5,tEe,ZBr,eIr,yK,oIr,rIr,tIr,W5,aEe,aIr,nIr,xK,sIr,lIr,iIr,Q5,nEe,dIr,cIr,$K,fIr,mIr,gIr,H5,sEe,hIr,pIr,kK,_Ir,uIr,bIr,U5,lEe,vIr,FIr,SK,TIr,MIr,EIr,J5,iEe,CIr,wIr,RK,AIr,LIr,yIr,Y5,LGe,Dc,K5,dEe,cx,xIr,cEe,$Ir,yGe,hr,fx,kIr,Gc,SIr,PK,RIr,PIr,BK,BIr,IIr,NIr,mx,qIr,fEe,jIr,DIr,GIr,Xt,gx,OIr,mEe,VIr,XIr,Oc,zIr,gEe,WIr,QIr,IK,HIr,UIr,JIr,Z5,YIr,Or,hx,KIr,hEe,ZIr,eNr,un,oNr,pEe,rNr,tNr,_Ee,aNr,nNr,uEe,sNr,lNr,iNr,$e,e3,bEe,dNr,cNr,NK,fNr,mNr,gNr,o3,vEe,hNr,pNr,qK,_Nr,uNr,bNr,r3,FEe,vNr,FNr,jK,TNr,MNr,ENr,t3,TEe,CNr,wNr,DK,ANr,LNr,yNr,a3,MEe,xNr,$Nr,GK,kNr,SNr,RNr,n3,EEe,PNr,BNr,OK,INr,NNr,qNr,s3,CEe,jNr,DNr,VK,GNr,ONr,VNr,l3,wEe,XNr,zNr,XK,WNr,QNr,HNr,i3,AEe,UNr,JNr,zK,YNr,KNr,ZNr,d3,LEe,eqr,oqr,WK,rqr,tqr,aqr,c3,xGe,Vc,f3,yEe,px,nqr,xEe,sqr,$Ge,pr,_x,lqr,Xc,iqr,QK,dqr,cqr,HK,fqr,mqr,gqr,ux,hqr,$Ee,pqr,_qr,uqr,zt,bx,bqr,kEe,vqr,Fqr,zc,Tqr,SEe,Mqr,Eqr,UK,Cqr,wqr,Aqr,m3,Lqr,Vr,vx,yqr,REe,xqr,$qr,bn,kqr,PEe,Sqr,Rqr,BEe,Pqr,Bqr,IEe,Iqr,Nqr,qqr,Pe,g3,NEe,jqr,Dqr,JK,Gqr,Oqr,Vqr,h3,qEe,Xqr,zqr,YK,Wqr,Qqr,Hqr,p3,jEe,Uqr,Jqr,KK,Yqr,Kqr,Zqr,_3,DEe,ejr,ojr,ZK,rjr,tjr,ajr,u3,GEe,njr,sjr,eZ,ljr,ijr,djr,b3,OEe,cjr,fjr,oZ,mjr,gjr,hjr,v3,VEe,pjr,_jr,rZ,ujr,bjr,vjr,F3,XEe,Fjr,Tjr,tZ,Mjr,Ejr,Cjr,T3,zEe,wjr,Ajr,aZ,Ljr,yjr,xjr,M3,kGe,Wc,E3,WEe,Fx,$jr,QEe,kjr,SGe,_r,Tx,Sjr,Qc,Rjr,nZ,Pjr,Bjr,sZ,Ijr,Njr,qjr,Mx,jjr,HEe,Djr,Gjr,Ojr,Wt,Ex,Vjr,UEe,Xjr,zjr,Hc,Wjr,JEe,Qjr,Hjr,lZ,Ujr,Jjr,Yjr,C3,Kjr,Xr,Cx,Zjr,YEe,eDr,oDr,vn,rDr,KEe,tDr,aDr,ZEe,nDr,sDr,eCe,lDr,iDr,dDr,ke,w3,oCe,cDr,fDr,iZ,mDr,gDr,hDr,A3,rCe,pDr,_Dr,dZ,uDr,bDr,vDr,L3,tCe,FDr,TDr,cZ,MDr,EDr,CDr,y3,aCe,wDr,ADr,fZ,LDr,yDr,xDr,x3,nCe,$Dr,kDr,mZ,SDr,RDr,PDr,$3,sCe,BDr,IDr,gZ,NDr,qDr,jDr,k3,lCe,DDr,GDr,hZ,ODr,VDr,XDr,S3,iCe,zDr,WDr,pZ,QDr,HDr,UDr,R3,dCe,JDr,YDr,_Z,KDr,ZDr,eGr,P3,cCe,oGr,rGr,uZ,tGr,aGr,nGr,B3,RGe,Uc,I3,fCe,wx,sGr,mCe,lGr,PGe,ur,Ax,iGr,Jc,dGr,bZ,cGr,fGr,vZ,mGr,gGr,hGr,Lx,pGr,gCe,_Gr,uGr,bGr,Qt,yx,vGr,hCe,FGr,TGr,Yc,MGr,pCe,EGr,CGr,FZ,wGr,AGr,LGr,N3,yGr,zr,xx,xGr,_Ce,$Gr,kGr,Fn,SGr,uCe,RGr,PGr,bCe,BGr,IGr,vCe,NGr,qGr,jGr,Se,q3,FCe,DGr,GGr,TZ,OGr,VGr,XGr,j3,TCe,zGr,WGr,MZ,QGr,HGr,UGr,D3,MCe,JGr,YGr,EZ,KGr,ZGr,eOr,G3,ECe,oOr,rOr,CZ,tOr,aOr,nOr,O3,CCe,sOr,lOr,wZ,iOr,dOr,cOr,V3,wCe,fOr,mOr,AZ,gOr,hOr,pOr,X3,ACe,_Or,uOr,LZ,bOr,vOr,FOr,z3,LCe,TOr,MOr,yZ,EOr,COr,wOr,W3,yCe,AOr,LOr,xZ,yOr,xOr,$Or,Q3,xCe,kOr,SOr,$Z,ROr,POr,BOr,H3,BGe,Kc,U3,$Ce,$x,IOr,kCe,NOr,IGe,br,kx,qOr,Zc,jOr,kZ,DOr,GOr,SZ,OOr,VOr,XOr,Sx,zOr,SCe,WOr,QOr,HOr,Ht,Rx,UOr,RCe,JOr,YOr,ef,KOr,PCe,ZOr,eVr,RZ,oVr,rVr,tVr,J3,aVr,Wr,Px,nVr,BCe,sVr,lVr,Tn,iVr,ICe,dVr,cVr,NCe,fVr,mVr,qCe,gVr,hVr,pVr,Oe,Y3,jCe,_Vr,uVr,PZ,bVr,vVr,FVr,K3,DCe,TVr,MVr,BZ,EVr,CVr,wVr,Z3,GCe,AVr,LVr,IZ,yVr,xVr,$Vr,e0,OCe,kVr,SVr,NZ,RVr,PVr,BVr,o0,VCe,IVr,NVr,qZ,qVr,jVr,DVr,r0,XCe,GVr,OVr,jZ,VVr,XVr,zVr,t0,zCe,WVr,QVr,DZ,HVr,UVr,JVr,a0,WCe,YVr,KVr,GZ,ZVr,eXr,oXr,n0,NGe,of,s0,QCe,Bx,rXr,HCe,tXr,qGe,vr,Ix,aXr,rf,nXr,OZ,sXr,lXr,VZ,iXr,dXr,cXr,Nx,fXr,UCe,mXr,gXr,hXr,Ut,qx,pXr,JCe,_Xr,uXr,tf,bXr,YCe,vXr,FXr,XZ,TXr,MXr,EXr,l0,CXr,Qr,jx,wXr,KCe,AXr,LXr,Mn,yXr,ZCe,xXr,$Xr,e5e,kXr,SXr,o5e,RXr,PXr,BXr,Ve,i0,r5e,IXr,NXr,zZ,qXr,jXr,DXr,d0,t5e,GXr,OXr,WZ,VXr,XXr,zXr,c0,a5e,WXr,QXr,QZ,HXr,UXr,JXr,f0,n5e,YXr,KXr,HZ,ZXr,ezr,ozr,m0,s5e,rzr,tzr,UZ,azr,nzr,szr,g0,l5e,lzr,izr,JZ,dzr,czr,fzr,h0,i5e,mzr,gzr,YZ,hzr,pzr,_zr,p0,d5e,uzr,bzr,KZ,vzr,Fzr,Tzr,_0,jGe,af,u0,c5e,Dx,Mzr,f5e,Ezr,DGe,Fr,Gx,Czr,nf,wzr,ZZ,Azr,Lzr,eee,yzr,xzr,$zr,Ox,kzr,m5e,Szr,Rzr,Pzr,Jt,Vx,Bzr,g5e,Izr,Nzr,sf,qzr,h5e,jzr,Dzr,oee,Gzr,Ozr,Vzr,b0,Xzr,Hr,Xx,zzr,p5e,Wzr,Qzr,En,Hzr,_5e,Uzr,Jzr,u5e,Yzr,Kzr,b5e,Zzr,eWr,oWr,v5e,v0,F5e,rWr,tWr,ree,aWr,nWr,sWr,F0,GGe,lf,T0,T5e,zx,lWr,M5e,iWr,OGe,Tr,Wx,dWr,df,cWr,tee,fWr,mWr,aee,gWr,hWr,pWr,Qx,_Wr,E5e,uWr,bWr,vWr,Yt,Hx,FWr,C5e,TWr,MWr,cf,EWr,w5e,CWr,wWr,nee,AWr,LWr,yWr,M0,xWr,Ur,Ux,$Wr,A5e,kWr,SWr,Cn,RWr,L5e,PWr,BWr,y5e,IWr,NWr,x5e,qWr,jWr,DWr,Jx,E0,$5e,GWr,OWr,see,VWr,XWr,zWr,C0,k5e,WWr,QWr,lee,HWr,UWr,JWr,w0,VGe,ff,A0,S5e,Yx,YWr,R5e,KWr,XGe,Mr,Kx,ZWr,mf,eQr,iee,oQr,rQr,dee,tQr,aQr,nQr,Zx,sQr,P5e,lQr,iQr,dQr,Kt,e$,cQr,B5e,fQr,mQr,gf,gQr,I5e,hQr,pQr,cee,_Qr,uQr,bQr,L0,vQr,Jr,o$,FQr,N5e,TQr,MQr,wn,EQr,q5e,CQr,wQr,j5e,AQr,LQr,D5e,yQr,xQr,$Qr,G5e,y0,O5e,kQr,SQr,fee,RQr,PQr,BQr,x0,zGe;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),YA=new te({}),KA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Mf=new IQr({props:{warning:!0,$$slots:{default:[gBt]},$$scope:{ctx:x}}}),ZA=new te({}),eL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/configuration_auto.py#L594"}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/configuration_auto.py#L617"}}),xg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[hBt]},$$scope:{ctx:x}}}),aL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/configuration_auto.py#L740"}}),nL=new te({}),sL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/tokenization_auto.py#L392"}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17146/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/tokenization_auto.py#L406"}}),fh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[pBt]},$$scope:{ctx:x}}}),cL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/tokenization_auto.py#L605"}}),fL=new te({}),mL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17146/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),Wh=new IQr({props:{$$slots:{default:[_Bt]},$$scope:{ctx:x}}}),Qh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[uBt]},$$scope:{ctx:x}}}),_L=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),uL=new te({}),bL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/processing_auto.py#L89"}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/processing_auto.py#L103"}}),hp=new IQr({props:{$$slots:{default:[bBt]},$$scope:{ctx:x}}}),pp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[vBt]},$$scope:{ctx:x}}}),ML=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/processing_auto.py#L256"}}),EL=new te({}),CL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L746"}}),AL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/greaselm#transformers.GreaseLMConfig">GreaseLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/greaselm#transformers.GreaseLMModel">GreaseLMModel</a> (GreaseLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),bp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[FBt]},$$scope:{ctx:x}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),uu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[TBt]},$$scope:{ctx:x}}}),yL=new te({}),xL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L753"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),vu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[MBt]},$$scope:{ctx:x}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),c1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[EBt]},$$scope:{ctx:x}}}),RL=new te({}),PL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L768"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),m1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[CBt]},$$scope:{ctx:x}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),K1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[wBt]},$$scope:{ctx:x}}}),qL=new te({}),jL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L775"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),eb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[ABt]},$$scope:{ctx:x}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),qb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[LBt]},$$scope:{ctx:x}}}),VL=new te({}),XL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L782"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),Db=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[yBt]},$$scope:{ctx:x}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),a2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[xBt]},$$scope:{ctx:x}}}),HL=new te({}),UL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L791"}}),YL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),s2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[$Bt]},$$scope:{ctx:x}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),o4=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[kBt]},$$scope:{ctx:x}}}),ZL=new te({}),ey=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L825"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/greaselm#transformers.GreaseLMConfig">GreaseLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/greaselm#transformers.GreaseLMForMultipleChoice">GreaseLMForMultipleChoice</a> (GreaseLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),t4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[SBt]},$$scope:{ctx:x}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),B4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[RBt]},$$scope:{ctx:x}}}),ay=new te({}),ny=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L832"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),N4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[PBt]},$$scope:{ctx:x}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),X4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[BBt]},$$scope:{ctx:x}}}),dy=new te({}),cy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L818"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),W4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[IBt]},$$scope:{ctx:x}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),yv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[NBt]},$$scope:{ctx:x}}}),hy=new te({}),py=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L800"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),$v=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[qBt]},$$scope:{ctx:x}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[jBt]},$$scope:{ctx:x}}}),vy=new te({}),Fy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L807"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),FF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[DBt]},$$scope:{ctx:x}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),EF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[GBt]},$$scope:{ctx:x}}}),Cy=new te({}),wy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L841"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17146/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),wF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[OBt]},$$scope:{ctx:x}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[VBt]},$$scope:{ctx:x}}}),xy=new te({}),$y=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L880"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[XBt]},$$scope:{ctx:x}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),XF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[zBt]},$$scope:{ctx:x}}}),Py=new te({}),By=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L887"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[WBt]},$$scope:{ctx:x}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),t6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[QBt]},$$scope:{ctx:x}}}),jy=new te({}),Dy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L910"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),n6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[HBt]},$$scope:{ctx:x}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),m6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[UBt]},$$scope:{ctx:x}}}),Xy=new te({}),zy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L894"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),h6=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[JBt]},$$scope:{ctx:x}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),A6=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[YBt]},$$scope:{ctx:x}}}),Uy=new te({}),Jy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L901"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),y6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[KBt]},$$scope:{ctx:x}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),S6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[ZBt]},$$scope:{ctx:x}}}),o8=new te({}),r8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L919"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),P6=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[eIt]},$$scope:{ctx:x}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),G6=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[oIt]},$$scope:{ctx:x}}}),s8=new te({}),l8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L926"}}),d8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),V6=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[rIt]},$$scope:{ctx:x}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),H6=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[tIt]},$$scope:{ctx:x}}}),f8=new te({}),m8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L873"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),J6=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[aIt]},$$scope:{ctx:x}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),eT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[nIt]},$$scope:{ctx:x}}}),u8=new te({}),b8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L848"}}),F8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),rT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[sIt]},$$scope:{ctx:x}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),nT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[lIt]},$$scope:{ctx:x}}}),M8=new te({}),E8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L855"}}),w8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),lT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[iIt]},$$scope:{ctx:x}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),gT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[dIt]},$$scope:{ctx:x}}}),L8=new te({}),y8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_auto.py#L864"}}),$8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[cIt]},$$scope:{ctx:x}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),bT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[fIt]},$$scope:{ctx:x}}}),S8=new te({}),R8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),B8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),FT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[mIt]},$$scope:{ctx:x}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),g7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[gIt]},$$scope:{ctx:x}}}),N8=new te({}),q8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),D8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),p7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[hIt]},$$scope:{ctx:x}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),j7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[pIt]},$$scope:{ctx:x}}}),O8=new te({}),V8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),G7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[_It]},$$scope:{ctx:x}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),oM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[uIt]},$$scope:{ctx:x}}}),Q8=new te({}),H8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),J8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),tM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[bIt]},$$scope:{ctx:x}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),iM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[vIt]},$$scope:{ctx:x}}}),K8=new te({}),Z8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),o9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),cM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[FIt]},$$scope:{ctx:x}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),kM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[TIt]},$$scope:{ctx:x}}}),t9=new te({}),a9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),s9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),RM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[MIt]},$$scope:{ctx:x}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[EIt]},$$scope:{ctx:x}}}),i9=new te({}),d9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),f9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),WM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[CIt]},$$scope:{ctx:x}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),vE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[wIt]},$$scope:{ctx:x}}}),g9=new te({}),h9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),_9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),TE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[AIt]},$$scope:{ctx:x}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),jE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[LIt]},$$scope:{ctx:x}}}),b9=new te({}),v9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),T9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),GE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[yIt]},$$scope:{ctx:x}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),XE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[xIt]},$$scope:{ctx:x}}}),C9=new te({}),w9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),L9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),WE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[$It]},$$scope:{ctx:x}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),HE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[kIt]},$$scope:{ctx:x}}}),x9=new te({}),$9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),S9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),JE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[SIt]},$$scope:{ctx:x}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[RIt]},$$scope:{ctx:x}}}),P9=new te({}),B9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),N9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),vC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[PIt]},$$scope:{ctx:x}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),DC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[BIt]},$$scope:{ctx:x}}}),j9=new te({}),D9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),O9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),OC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[IIt]},$$scope:{ctx:x}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),XC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[NIt]},$$scope:{ctx:x}}}),X9=new te({}),z9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),WC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[qIt]},$$scope:{ctx:x}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),HC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[jIt]},$$scope:{ctx:x}}}),U9=new te({}),J9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),K9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[DIt]},$$scope:{ctx:x}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),E5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[GIt]},$$scope:{ctx:x}}}),ex=new te({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),w5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[OIt]},$$scope:{ctx:x}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),I5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[VIt]},$$scope:{ctx:x}}}),nx=new te({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),q5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[XIt]},$$scope:{ctx:x}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[zIt]},$$scope:{ctx:x}}}),cx=new te({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),Z5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[WIt]},$$scope:{ctx:x}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),c3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[QIt]},$$scope:{ctx:x}}}),px=new te({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),m3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[HIt]},$$scope:{ctx:x}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),M3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[UIt]},$$scope:{ctx:x}}}),Fx=new te({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),C3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[JIt]},$$scope:{ctx:x}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),B3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[YIt]},$$scope:{ctx:x}}}),wx=new te({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),N3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[KIt]},$$scope:{ctx:x}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),H3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ZIt]},$$scope:{ctx:x}}}),$x=new te({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),J3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[eNt]},$$scope:{ctx:x}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[oNt]},$$scope:{ctx:x}}}),Bx=new te({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[rNt]},$$scope:{ctx:x}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),_0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[tNt]},$$scope:{ctx:x}}}),Dx=new te({}),Gx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),b0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[aNt]},$$scope:{ctx:x}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),F0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[nNt]},$$scope:{ctx:x}}}),zx=new te({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),M0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[sNt]},$$scope:{ctx:x}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),w0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[lNt]},$$scope:{ctx:x}}}),Yx=new te({}),Kx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),e$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17146/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17146/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L389"}}),L0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[iNt]},$$scope:{ctx:x}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17146/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17146/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17146/src/transformers/models/auto/auto_factory.py#L417"}}),x0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[dNt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),gi=o("Auto Classes"),uf=l(),rt=a("p"),hi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=a("code"),QA=o("from_pretrained()"),bf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ge=l(),We=a("p"),_i=o("Instantiating one of "),Ln=a("a"),HA=o("AutoConfig"),yn=o(", "),xn=a("a"),UA=o("AutoModel"),ui=o(`, and
`),$n=a("a"),JA=o("AutoTokenizer"),bi=o(" will directly create a class of the relevant architecture. For instance"),vf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),uk=o("will create a model that is an instance of "),vi=a("a"),bk=o("BertModel"),vk=o("."),Eo=l(),wa=a("p"),Fk=o("There is one class of "),Ff=a("code"),Tk=o("AutoModel"),ZVe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Oje=l(),Fi=a("h2"),Tf=a("a"),are=a("span"),F(YA.$$.fragment),eXe=l(),nre=a("span"),oXe=o("Extending the Auto Classes"),Vje=l(),kn=a("p"),rXe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),sre=a("code"),tXe=o("NewModel"),aXe=o(", make sure you have a "),lre=a("code"),nXe=o("NewModelConfig"),sXe=o(` then you can add those to the auto
classes like this:`),Xje=l(),F(KA.$$.fragment),zje=l(),Mk=a("p"),lXe=o("You will then be able to use the auto classes like you would usually do!"),Wje=l(),F(Mf.$$.fragment),Qje=l(),Ti=a("h2"),Ef=a("a"),ire=a("span"),F(ZA.$$.fragment),iXe=l(),dre=a("span"),dXe=o("AutoConfig"),Hje=l(),Co=a("div"),F(eL.$$.fragment),cXe=l(),oL=a("p"),fXe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Ek=a("a"),mXe=o("from_pretrained()"),gXe=o(" class method."),hXe=l(),rL=a("p"),pXe=o("This class cannot be instantiated directly using "),cre=a("code"),_Xe=o("__init__()"),uXe=o(" (throws an error)."),bXe=l(),Er=a("div"),F(tL.$$.fragment),vXe=l(),fre=a("p"),FXe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),TXe=l(),Mi=a("p"),MXe=o("The configuration class to instantiate is selected based on the "),mre=a("code"),EXe=o("model_type"),CXe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),gre=a("code"),wXe=o("pretrained_model_name_or_path"),AXe=o(":"),LXe=l(),A=a("ul"),Cf=a("li"),hre=a("strong"),yXe=o("albert"),xXe=o(" \u2014 "),Ck=a("a"),$Xe=o("AlbertConfig"),kXe=o(" (ALBERT model)"),SXe=l(),wf=a("li"),pre=a("strong"),RXe=o("bart"),PXe=o(" \u2014 "),wk=a("a"),BXe=o("BartConfig"),IXe=o(" (BART model)"),NXe=l(),Af=a("li"),_re=a("strong"),qXe=o("beit"),jXe=o(" \u2014 "),Ak=a("a"),DXe=o("BeitConfig"),GXe=o(" (BEiT model)"),OXe=l(),Lf=a("li"),ure=a("strong"),VXe=o("bert"),XXe=o(" \u2014 "),Lk=a("a"),zXe=o("BertConfig"),WXe=o(" (BERT model)"),QXe=l(),yf=a("li"),bre=a("strong"),HXe=o("bert-generation"),UXe=o(" \u2014 "),yk=a("a"),JXe=o("BertGenerationConfig"),YXe=o(" (Bert Generation model)"),KXe=l(),xf=a("li"),vre=a("strong"),ZXe=o("big_bird"),eze=o(" \u2014 "),xk=a("a"),oze=o("BigBirdConfig"),rze=o(" (BigBird model)"),tze=l(),$f=a("li"),Fre=a("strong"),aze=o("bigbird_pegasus"),nze=o(" \u2014 "),$k=a("a"),sze=o("BigBirdPegasusConfig"),lze=o(" (BigBird-Pegasus model)"),ize=l(),kf=a("li"),Tre=a("strong"),dze=o("blenderbot"),cze=o(" \u2014 "),kk=a("a"),fze=o("BlenderbotConfig"),mze=o(" (Blenderbot model)"),gze=l(),Sf=a("li"),Mre=a("strong"),hze=o("blenderbot-small"),pze=o(" \u2014 "),Sk=a("a"),_ze=o("BlenderbotSmallConfig"),uze=o(" (BlenderbotSmall model)"),bze=l(),Rf=a("li"),Ere=a("strong"),vze=o("bloom"),Fze=o(" \u2014 "),Rk=a("a"),Tze=o("BloomConfig"),Mze=o(" (BLOOM model)"),Eze=l(),Pf=a("li"),Cre=a("strong"),Cze=o("camembert"),wze=o(" \u2014 "),Pk=a("a"),Aze=o("CamembertConfig"),Lze=o(" (CamemBERT model)"),yze=l(),Bf=a("li"),wre=a("strong"),xze=o("canine"),$ze=o(" \u2014 "),Bk=a("a"),kze=o("CanineConfig"),Sze=o(" (CANINE model)"),Rze=l(),If=a("li"),Are=a("strong"),Pze=o("clip"),Bze=o(" \u2014 "),Ik=a("a"),Ize=o("CLIPConfig"),Nze=o(" (CLIP model)"),qze=l(),Nf=a("li"),Lre=a("strong"),jze=o("convbert"),Dze=o(" \u2014 "),Nk=a("a"),Gze=o("ConvBertConfig"),Oze=o(" (ConvBERT model)"),Vze=l(),qf=a("li"),yre=a("strong"),Xze=o("convnext"),zze=o(" \u2014 "),qk=a("a"),Wze=o("ConvNextConfig"),Qze=o(" (ConvNeXT model)"),Hze=l(),jf=a("li"),xre=a("strong"),Uze=o("ctrl"),Jze=o(" \u2014 "),jk=a("a"),Yze=o("CTRLConfig"),Kze=o(" (CTRL model)"),Zze=l(),Df=a("li"),$re=a("strong"),eWe=o("cvt"),oWe=o(" \u2014 "),Dk=a("a"),rWe=o("CvtConfig"),tWe=o(" (CvT model)"),aWe=l(),Gf=a("li"),kre=a("strong"),nWe=o("data2vec-audio"),sWe=o(" \u2014 "),Gk=a("a"),lWe=o("Data2VecAudioConfig"),iWe=o(" (Data2VecAudio model)"),dWe=l(),Of=a("li"),Sre=a("strong"),cWe=o("data2vec-text"),fWe=o(" \u2014 "),Ok=a("a"),mWe=o("Data2VecTextConfig"),gWe=o(" (Data2VecText model)"),hWe=l(),Vf=a("li"),Rre=a("strong"),pWe=o("data2vec-vision"),_We=o(" \u2014 "),Vk=a("a"),uWe=o("Data2VecVisionConfig"),bWe=o(" (Data2VecVision model)"),vWe=l(),Xf=a("li"),Pre=a("strong"),FWe=o("deberta"),TWe=o(" \u2014 "),Xk=a("a"),MWe=o("DebertaConfig"),EWe=o(" (DeBERTa model)"),CWe=l(),zf=a("li"),Bre=a("strong"),wWe=o("deberta-v2"),AWe=o(" \u2014 "),zk=a("a"),LWe=o("DebertaV2Config"),yWe=o(" (DeBERTa-v2 model)"),xWe=l(),Wf=a("li"),Ire=a("strong"),$We=o("decision_transformer"),kWe=o(" \u2014 "),Wk=a("a"),SWe=o("DecisionTransformerConfig"),RWe=o(" (Decision Transformer model)"),PWe=l(),Qf=a("li"),Nre=a("strong"),BWe=o("deit"),IWe=o(" \u2014 "),Qk=a("a"),NWe=o("DeiTConfig"),qWe=o(" (DeiT model)"),jWe=l(),Hf=a("li"),qre=a("strong"),DWe=o("detr"),GWe=o(" \u2014 "),Hk=a("a"),OWe=o("DetrConfig"),VWe=o(" (DETR model)"),XWe=l(),Uf=a("li"),jre=a("strong"),zWe=o("distilbert"),WWe=o(" \u2014 "),Uk=a("a"),QWe=o("DistilBertConfig"),HWe=o(" (DistilBERT model)"),UWe=l(),Jf=a("li"),Dre=a("strong"),JWe=o("dpr"),YWe=o(" \u2014 "),Jk=a("a"),KWe=o("DPRConfig"),ZWe=o(" (DPR model)"),eQe=l(),Yf=a("li"),Gre=a("strong"),oQe=o("dpt"),rQe=o(" \u2014 "),Yk=a("a"),tQe=o("DPTConfig"),aQe=o(" (DPT model)"),nQe=l(),Kf=a("li"),Ore=a("strong"),sQe=o("electra"),lQe=o(" \u2014 "),Kk=a("a"),iQe=o("ElectraConfig"),dQe=o(" (ELECTRA model)"),cQe=l(),Zf=a("li"),Vre=a("strong"),fQe=o("encoder-decoder"),mQe=o(" \u2014 "),Zk=a("a"),gQe=o("EncoderDecoderConfig"),hQe=o(" (Encoder decoder model)"),pQe=l(),em=a("li"),Xre=a("strong"),_Qe=o("flaubert"),uQe=o(" \u2014 "),eS=a("a"),bQe=o("FlaubertConfig"),vQe=o(" (FlauBERT model)"),FQe=l(),om=a("li"),zre=a("strong"),TQe=o("flava"),MQe=o(" \u2014 "),oS=a("a"),EQe=o("FlavaConfig"),CQe=o(" (FLAVA model)"),wQe=l(),rm=a("li"),Wre=a("strong"),AQe=o("fnet"),LQe=o(" \u2014 "),rS=a("a"),yQe=o("FNetConfig"),xQe=o(" (FNet model)"),$Qe=l(),tm=a("li"),Qre=a("strong"),kQe=o("fsmt"),SQe=o(" \u2014 "),tS=a("a"),RQe=o("FSMTConfig"),PQe=o(" (FairSeq Machine-Translation model)"),BQe=l(),am=a("li"),Hre=a("strong"),IQe=o("funnel"),NQe=o(" \u2014 "),aS=a("a"),qQe=o("FunnelConfig"),jQe=o(" (Funnel Transformer model)"),DQe=l(),nm=a("li"),Ure=a("strong"),GQe=o("glpn"),OQe=o(" \u2014 "),nS=a("a"),VQe=o("GLPNConfig"),XQe=o(" (GLPN model)"),zQe=l(),sm=a("li"),Jre=a("strong"),WQe=o("gpt2"),QQe=o(" \u2014 "),sS=a("a"),HQe=o("GPT2Config"),UQe=o(" (OpenAI GPT-2 model)"),JQe=l(),lm=a("li"),Yre=a("strong"),YQe=o("gpt_neo"),KQe=o(" \u2014 "),lS=a("a"),ZQe=o("GPTNeoConfig"),eHe=o(" (GPT Neo model)"),oHe=l(),im=a("li"),Kre=a("strong"),rHe=o("gpt_neox"),tHe=o(" \u2014 "),iS=a("a"),aHe=o("GPTNeoXConfig"),nHe=o(" (GPT NeoX model)"),sHe=l(),dm=a("li"),Zre=a("strong"),lHe=o("gptj"),iHe=o(" \u2014 "),dS=a("a"),dHe=o("GPTJConfig"),cHe=o(" (GPT-J model)"),fHe=l(),cm=a("li"),ete=a("strong"),mHe=o("greaselm"),gHe=o(" \u2014 "),cS=a("a"),hHe=o("GreaseLMConfig"),pHe=o(" (GreaseLM model)"),_He=l(),fm=a("li"),ote=a("strong"),uHe=o("hubert"),bHe=o(" \u2014 "),fS=a("a"),vHe=o("HubertConfig"),FHe=o(" (Hubert model)"),THe=l(),mm=a("li"),rte=a("strong"),MHe=o("ibert"),EHe=o(" \u2014 "),mS=a("a"),CHe=o("IBertConfig"),wHe=o(" (I-BERT model)"),AHe=l(),gm=a("li"),tte=a("strong"),LHe=o("imagegpt"),yHe=o(" \u2014 "),gS=a("a"),xHe=o("ImageGPTConfig"),$He=o(" (ImageGPT model)"),kHe=l(),hm=a("li"),ate=a("strong"),SHe=o("layoutlm"),RHe=o(" \u2014 "),hS=a("a"),PHe=o("LayoutLMConfig"),BHe=o(" (LayoutLM model)"),IHe=l(),pm=a("li"),nte=a("strong"),NHe=o("layoutlmv2"),qHe=o(" \u2014 "),pS=a("a"),jHe=o("LayoutLMv2Config"),DHe=o(" (LayoutLMv2 model)"),GHe=l(),_m=a("li"),ste=a("strong"),OHe=o("layoutlmv3"),VHe=o(" \u2014 "),_S=a("a"),XHe=o("LayoutLMv3Config"),zHe=o(" (LayoutLMv3 model)"),WHe=l(),um=a("li"),lte=a("strong"),QHe=o("led"),HHe=o(" \u2014 "),uS=a("a"),UHe=o("LEDConfig"),JHe=o(" (LED model)"),YHe=l(),bm=a("li"),ite=a("strong"),KHe=o("levit"),ZHe=o(" \u2014 "),bS=a("a"),eUe=o("LevitConfig"),oUe=o(" (LeViT model)"),rUe=l(),vm=a("li"),dte=a("strong"),tUe=o("longformer"),aUe=o(" \u2014 "),vS=a("a"),nUe=o("LongformerConfig"),sUe=o(" (Longformer model)"),lUe=l(),Fm=a("li"),cte=a("strong"),iUe=o("luke"),dUe=o(" \u2014 "),FS=a("a"),cUe=o("LukeConfig"),fUe=o(" (LUKE model)"),mUe=l(),Tm=a("li"),fte=a("strong"),gUe=o("lxmert"),hUe=o(" \u2014 "),TS=a("a"),pUe=o("LxmertConfig"),_Ue=o(" (LXMERT model)"),uUe=l(),Mm=a("li"),mte=a("strong"),bUe=o("m2m_100"),vUe=o(" \u2014 "),MS=a("a"),FUe=o("M2M100Config"),TUe=o(" (M2M100 model)"),MUe=l(),Em=a("li"),gte=a("strong"),EUe=o("marian"),CUe=o(" \u2014 "),ES=a("a"),wUe=o("MarianConfig"),AUe=o(" (Marian model)"),LUe=l(),Cm=a("li"),hte=a("strong"),yUe=o("maskformer"),xUe=o(" \u2014 "),CS=a("a"),$Ue=o("MaskFormerConfig"),kUe=o(" (MaskFormer model)"),SUe=l(),wm=a("li"),pte=a("strong"),RUe=o("mbart"),PUe=o(" \u2014 "),wS=a("a"),BUe=o("MBartConfig"),IUe=o(" (mBART model)"),NUe=l(),Am=a("li"),_te=a("strong"),qUe=o("mctct"),jUe=o(" \u2014 "),AS=a("a"),DUe=o("MCTCTConfig"),GUe=o(" (M-CTC-T model)"),OUe=l(),Lm=a("li"),ute=a("strong"),VUe=o("megatron-bert"),XUe=o(" \u2014 "),LS=a("a"),zUe=o("MegatronBertConfig"),WUe=o(" (Megatron-BERT model)"),QUe=l(),ym=a("li"),bte=a("strong"),HUe=o("mobilebert"),UUe=o(" \u2014 "),yS=a("a"),JUe=o("MobileBertConfig"),YUe=o(" (MobileBERT model)"),KUe=l(),xm=a("li"),vte=a("strong"),ZUe=o("mpnet"),eJe=o(" \u2014 "),xS=a("a"),oJe=o("MPNetConfig"),rJe=o(" (MPNet model)"),tJe=l(),$m=a("li"),Fte=a("strong"),aJe=o("mt5"),nJe=o(" \u2014 "),$S=a("a"),sJe=o("MT5Config"),lJe=o(" (MT5 model)"),iJe=l(),km=a("li"),Tte=a("strong"),dJe=o("nystromformer"),cJe=o(" \u2014 "),kS=a("a"),fJe=o("NystromformerConfig"),mJe=o(" (Nystr\xF6mformer model)"),gJe=l(),Sm=a("li"),Mte=a("strong"),hJe=o("openai-gpt"),pJe=o(" \u2014 "),SS=a("a"),_Je=o("OpenAIGPTConfig"),uJe=o(" (OpenAI GPT model)"),bJe=l(),Rm=a("li"),Ete=a("strong"),vJe=o("opt"),FJe=o(" \u2014 "),RS=a("a"),TJe=o("OPTConfig"),MJe=o(" (OPT model)"),EJe=l(),Pm=a("li"),Cte=a("strong"),CJe=o("pegasus"),wJe=o(" \u2014 "),PS=a("a"),AJe=o("PegasusConfig"),LJe=o(" (Pegasus model)"),yJe=l(),Bm=a("li"),wte=a("strong"),xJe=o("perceiver"),$Je=o(" \u2014 "),BS=a("a"),kJe=o("PerceiverConfig"),SJe=o(" (Perceiver model)"),RJe=l(),Im=a("li"),Ate=a("strong"),PJe=o("plbart"),BJe=o(" \u2014 "),IS=a("a"),IJe=o("PLBartConfig"),NJe=o(" (PLBart model)"),qJe=l(),Nm=a("li"),Lte=a("strong"),jJe=o("poolformer"),DJe=o(" \u2014 "),NS=a("a"),GJe=o("PoolFormerConfig"),OJe=o(" (PoolFormer model)"),VJe=l(),qm=a("li"),yte=a("strong"),XJe=o("prophetnet"),zJe=o(" \u2014 "),qS=a("a"),WJe=o("ProphetNetConfig"),QJe=o(" (ProphetNet model)"),HJe=l(),jm=a("li"),xte=a("strong"),UJe=o("qdqbert"),JJe=o(" \u2014 "),jS=a("a"),YJe=o("QDQBertConfig"),KJe=o(" (QDQBert model)"),ZJe=l(),Dm=a("li"),$te=a("strong"),eYe=o("rag"),oYe=o(" \u2014 "),DS=a("a"),rYe=o("RagConfig"),tYe=o(" (RAG model)"),aYe=l(),Gm=a("li"),kte=a("strong"),nYe=o("realm"),sYe=o(" \u2014 "),GS=a("a"),lYe=o("RealmConfig"),iYe=o(" (REALM model)"),dYe=l(),Om=a("li"),Ste=a("strong"),cYe=o("reformer"),fYe=o(" \u2014 "),OS=a("a"),mYe=o("ReformerConfig"),gYe=o(" (Reformer model)"),hYe=l(),Vm=a("li"),Rte=a("strong"),pYe=o("regnet"),_Ye=o(" \u2014 "),VS=a("a"),uYe=o("RegNetConfig"),bYe=o(" (RegNet model)"),vYe=l(),Xm=a("li"),Pte=a("strong"),FYe=o("rembert"),TYe=o(" \u2014 "),XS=a("a"),MYe=o("RemBertConfig"),EYe=o(" (RemBERT model)"),CYe=l(),zm=a("li"),Bte=a("strong"),wYe=o("resnet"),AYe=o(" \u2014 "),zS=a("a"),LYe=o("ResNetConfig"),yYe=o(" (ResNet model)"),xYe=l(),Wm=a("li"),Ite=a("strong"),$Ye=o("retribert"),kYe=o(" \u2014 "),WS=a("a"),SYe=o("RetriBertConfig"),RYe=o(" (RetriBERT model)"),PYe=l(),Qm=a("li"),Nte=a("strong"),BYe=o("roberta"),IYe=o(" \u2014 "),QS=a("a"),NYe=o("RobertaConfig"),qYe=o(" (RoBERTa model)"),jYe=l(),Hm=a("li"),qte=a("strong"),DYe=o("roformer"),GYe=o(" \u2014 "),HS=a("a"),OYe=o("RoFormerConfig"),VYe=o(" (RoFormer model)"),XYe=l(),Um=a("li"),jte=a("strong"),zYe=o("segformer"),WYe=o(" \u2014 "),US=a("a"),QYe=o("SegformerConfig"),HYe=o(" (SegFormer model)"),UYe=l(),Jm=a("li"),Dte=a("strong"),JYe=o("sew"),YYe=o(" \u2014 "),JS=a("a"),KYe=o("SEWConfig"),ZYe=o(" (SEW model)"),eKe=l(),Ym=a("li"),Gte=a("strong"),oKe=o("sew-d"),rKe=o(" \u2014 "),YS=a("a"),tKe=o("SEWDConfig"),aKe=o(" (SEW-D model)"),nKe=l(),Km=a("li"),Ote=a("strong"),sKe=o("speech-encoder-decoder"),lKe=o(" \u2014 "),KS=a("a"),iKe=o("SpeechEncoderDecoderConfig"),dKe=o(" (Speech Encoder decoder model)"),cKe=l(),Zm=a("li"),Vte=a("strong"),fKe=o("speech_to_text"),mKe=o(" \u2014 "),ZS=a("a"),gKe=o("Speech2TextConfig"),hKe=o(" (Speech2Text model)"),pKe=l(),eg=a("li"),Xte=a("strong"),_Ke=o("speech_to_text_2"),uKe=o(" \u2014 "),eR=a("a"),bKe=o("Speech2Text2Config"),vKe=o(" (Speech2Text2 model)"),FKe=l(),og=a("li"),zte=a("strong"),TKe=o("splinter"),MKe=o(" \u2014 "),oR=a("a"),EKe=o("SplinterConfig"),CKe=o(" (Splinter model)"),wKe=l(),rg=a("li"),Wte=a("strong"),AKe=o("squeezebert"),LKe=o(" \u2014 "),rR=a("a"),yKe=o("SqueezeBertConfig"),xKe=o(" (SqueezeBERT model)"),$Ke=l(),tg=a("li"),Qte=a("strong"),kKe=o("swin"),SKe=o(" \u2014 "),tR=a("a"),RKe=o("SwinConfig"),PKe=o(" (Swin Transformer model)"),BKe=l(),ag=a("li"),Hte=a("strong"),IKe=o("t5"),NKe=o(" \u2014 "),aR=a("a"),qKe=o("T5Config"),jKe=o(" (T5 model)"),DKe=l(),ng=a("li"),Ute=a("strong"),GKe=o("tapas"),OKe=o(" \u2014 "),nR=a("a"),VKe=o("TapasConfig"),XKe=o(" (TAPAS model)"),zKe=l(),sg=a("li"),Jte=a("strong"),WKe=o("trajectory_transformer"),QKe=o(" \u2014 "),sR=a("a"),HKe=o("TrajectoryTransformerConfig"),UKe=o(" (Trajectory Transformer model)"),JKe=l(),lg=a("li"),Yte=a("strong"),YKe=o("transfo-xl"),KKe=o(" \u2014 "),lR=a("a"),ZKe=o("TransfoXLConfig"),eZe=o(" (Transformer-XL model)"),oZe=l(),ig=a("li"),Kte=a("strong"),rZe=o("trocr"),tZe=o(" \u2014 "),iR=a("a"),aZe=o("TrOCRConfig"),nZe=o(" (TrOCR model)"),sZe=l(),dg=a("li"),Zte=a("strong"),lZe=o("unispeech"),iZe=o(" \u2014 "),dR=a("a"),dZe=o("UniSpeechConfig"),cZe=o(" (UniSpeech model)"),fZe=l(),cg=a("li"),eae=a("strong"),mZe=o("unispeech-sat"),gZe=o(" \u2014 "),cR=a("a"),hZe=o("UniSpeechSatConfig"),pZe=o(" (UniSpeechSat model)"),_Ze=l(),fg=a("li"),oae=a("strong"),uZe=o("van"),bZe=o(" \u2014 "),fR=a("a"),vZe=o("VanConfig"),FZe=o(" (VAN model)"),TZe=l(),mg=a("li"),rae=a("strong"),MZe=o("vilt"),EZe=o(" \u2014 "),mR=a("a"),CZe=o("ViltConfig"),wZe=o(" (ViLT model)"),AZe=l(),gg=a("li"),tae=a("strong"),LZe=o("vision-encoder-decoder"),yZe=o(" \u2014 "),gR=a("a"),xZe=o("VisionEncoderDecoderConfig"),$Ze=o(" (Vision Encoder decoder model)"),kZe=l(),hg=a("li"),aae=a("strong"),SZe=o("vision-text-dual-encoder"),RZe=o(" \u2014 "),hR=a("a"),PZe=o("VisionTextDualEncoderConfig"),BZe=o(" (VisionTextDualEncoder model)"),IZe=l(),pg=a("li"),nae=a("strong"),NZe=o("visual_bert"),qZe=o(" \u2014 "),pR=a("a"),jZe=o("VisualBertConfig"),DZe=o(" (VisualBERT model)"),GZe=l(),_g=a("li"),sae=a("strong"),OZe=o("vit"),VZe=o(" \u2014 "),_R=a("a"),XZe=o("ViTConfig"),zZe=o(" (ViT model)"),WZe=l(),ug=a("li"),lae=a("strong"),QZe=o("vit_mae"),HZe=o(" \u2014 "),uR=a("a"),UZe=o("ViTMAEConfig"),JZe=o(" (ViTMAE model)"),YZe=l(),bg=a("li"),iae=a("strong"),KZe=o("wav2vec2"),ZZe=o(" \u2014 "),bR=a("a"),eeo=o("Wav2Vec2Config"),oeo=o(" (Wav2Vec2 model)"),reo=l(),vg=a("li"),dae=a("strong"),teo=o("wav2vec2-conformer"),aeo=o(" \u2014 "),vR=a("a"),neo=o("Wav2Vec2ConformerConfig"),seo=o(" (Wav2Vec2-Conformer model)"),leo=l(),Fg=a("li"),cae=a("strong"),ieo=o("wavlm"),deo=o(" \u2014 "),FR=a("a"),ceo=o("WavLMConfig"),feo=o(" (WavLM model)"),meo=l(),Tg=a("li"),fae=a("strong"),geo=o("xglm"),heo=o(" \u2014 "),TR=a("a"),peo=o("XGLMConfig"),_eo=o(" (XGLM model)"),ueo=l(),Mg=a("li"),mae=a("strong"),beo=o("xlm"),veo=o(" \u2014 "),MR=a("a"),Feo=o("XLMConfig"),Teo=o(" (XLM model)"),Meo=l(),Eg=a("li"),gae=a("strong"),Eeo=o("xlm-prophetnet"),Ceo=o(" \u2014 "),ER=a("a"),weo=o("XLMProphetNetConfig"),Aeo=o(" (XLM-ProphetNet model)"),Leo=l(),Cg=a("li"),hae=a("strong"),yeo=o("xlm-roberta"),xeo=o(" \u2014 "),CR=a("a"),$eo=o("XLMRobertaConfig"),keo=o(" (XLM-RoBERTa model)"),Seo=l(),wg=a("li"),pae=a("strong"),Reo=o("xlm-roberta-xl"),Peo=o(" \u2014 "),wR=a("a"),Beo=o("XLMRobertaXLConfig"),Ieo=o(" (XLM-RoBERTa-XL model)"),Neo=l(),Ag=a("li"),_ae=a("strong"),qeo=o("xlnet"),jeo=o(" \u2014 "),AR=a("a"),Deo=o("XLNetConfig"),Geo=o(" (XLNet model)"),Oeo=l(),Lg=a("li"),uae=a("strong"),Veo=o("yolos"),Xeo=o(" \u2014 "),LR=a("a"),zeo=o("YolosConfig"),Weo=o(" (YOLOS model)"),Qeo=l(),yg=a("li"),bae=a("strong"),Heo=o("yoso"),Ueo=o(" \u2014 "),yR=a("a"),Jeo=o("YosoConfig"),Yeo=o(" (YOSO model)"),Keo=l(),F(xg.$$.fragment),Zeo=l(),$g=a("div"),F(aL.$$.fragment),eoo=l(),vae=a("p"),ooo=o("Register a new configuration for this class."),Uje=l(),Ei=a("h2"),kg=a("a"),Fae=a("span"),F(nL.$$.fragment),roo=l(),Tae=a("span"),too=o("AutoTokenizer"),Jje=l(),wo=a("div"),F(sL.$$.fragment),aoo=l(),lL=a("p"),noo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),xR=a("a"),soo=o("AutoTokenizer.from_pretrained()"),loo=o(" class method."),ioo=l(),iL=a("p"),doo=o("This class cannot be instantiated directly using "),Mae=a("code"),coo=o("__init__()"),foo=o(" (throws an error)."),moo=l(),Cr=a("div"),F(dL.$$.fragment),goo=l(),Eae=a("p"),hoo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),poo=l(),Aa=a("p"),_oo=o("The tokenizer class to instantiate is selected based on the "),Cae=a("code"),uoo=o("model_type"),boo=o(` property of the config object (either
passed as an argument or loaded from `),wae=a("code"),voo=o("pretrained_model_name_or_path"),Foo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aae=a("code"),Too=o("pretrained_model_name_or_path"),Moo=o(":"),Eoo=l(),k=a("ul"),Sn=a("li"),Lae=a("strong"),Coo=o("albert"),woo=o(" \u2014 "),$R=a("a"),Aoo=o("AlbertTokenizer"),Loo=o(" or "),kR=a("a"),yoo=o("AlbertTokenizerFast"),xoo=o(" (ALBERT model)"),$oo=l(),Rn=a("li"),yae=a("strong"),koo=o("bart"),Soo=o(" \u2014 "),SR=a("a"),Roo=o("BartTokenizer"),Poo=o(" or "),RR=a("a"),Boo=o("BartTokenizerFast"),Ioo=o(" (BART model)"),Noo=l(),Pn=a("li"),xae=a("strong"),qoo=o("barthez"),joo=o(" \u2014 "),PR=a("a"),Doo=o("BarthezTokenizer"),Goo=o(" or "),BR=a("a"),Ooo=o("BarthezTokenizerFast"),Voo=o(" (BARThez model)"),Xoo=l(),Sg=a("li"),$ae=a("strong"),zoo=o("bartpho"),Woo=o(" \u2014 "),IR=a("a"),Qoo=o("BartphoTokenizer"),Hoo=o(" (BARTpho model)"),Uoo=l(),Bn=a("li"),kae=a("strong"),Joo=o("bert"),Yoo=o(" \u2014 "),NR=a("a"),Koo=o("BertTokenizer"),Zoo=o(" or "),qR=a("a"),ero=o("BertTokenizerFast"),oro=o(" (BERT model)"),rro=l(),Rg=a("li"),Sae=a("strong"),tro=o("bert-generation"),aro=o(" \u2014 "),jR=a("a"),nro=o("BertGenerationTokenizer"),sro=o(" (Bert Generation model)"),lro=l(),Pg=a("li"),Rae=a("strong"),iro=o("bert-japanese"),dro=o(" \u2014 "),DR=a("a"),cro=o("BertJapaneseTokenizer"),fro=o(" (BertJapanese model)"),mro=l(),Bg=a("li"),Pae=a("strong"),gro=o("bertweet"),hro=o(" \u2014 "),GR=a("a"),pro=o("BertweetTokenizer"),_ro=o(" (BERTweet model)"),uro=l(),In=a("li"),Bae=a("strong"),bro=o("big_bird"),vro=o(" \u2014 "),OR=a("a"),Fro=o("BigBirdTokenizer"),Tro=o(" or "),VR=a("a"),Mro=o("BigBirdTokenizerFast"),Ero=o(" (BigBird model)"),Cro=l(),Nn=a("li"),Iae=a("strong"),wro=o("bigbird_pegasus"),Aro=o(" \u2014 "),XR=a("a"),Lro=o("PegasusTokenizer"),yro=o(" or "),zR=a("a"),xro=o("PegasusTokenizerFast"),$ro=o(" (BigBird-Pegasus model)"),kro=l(),qn=a("li"),Nae=a("strong"),Sro=o("blenderbot"),Rro=o(" \u2014 "),WR=a("a"),Pro=o("BlenderbotTokenizer"),Bro=o(" or "),QR=a("a"),Iro=o("BlenderbotTokenizerFast"),Nro=o(" (Blenderbot model)"),qro=l(),Ig=a("li"),qae=a("strong"),jro=o("blenderbot-small"),Dro=o(" \u2014 "),HR=a("a"),Gro=o("BlenderbotSmallTokenizer"),Oro=o(" (BlenderbotSmall model)"),Vro=l(),Ng=a("li"),jae=a("strong"),Xro=o("bloom"),zro=o(" \u2014 "),UR=a("a"),Wro=o("BloomTokenizerFast"),Qro=o(" (BLOOM model)"),Hro=l(),qg=a("li"),Dae=a("strong"),Uro=o("byt5"),Jro=o(" \u2014 "),JR=a("a"),Yro=o("ByT5Tokenizer"),Kro=o(" (ByT5 model)"),Zro=l(),jn=a("li"),Gae=a("strong"),eto=o("camembert"),oto=o(" \u2014 "),YR=a("a"),rto=o("CamembertTokenizer"),tto=o(" or "),KR=a("a"),ato=o("CamembertTokenizerFast"),nto=o(" (CamemBERT model)"),sto=l(),jg=a("li"),Oae=a("strong"),lto=o("canine"),ito=o(" \u2014 "),ZR=a("a"),dto=o("CanineTokenizer"),cto=o(" (CANINE model)"),fto=l(),Dn=a("li"),Vae=a("strong"),mto=o("clip"),gto=o(" \u2014 "),eP=a("a"),hto=o("CLIPTokenizer"),pto=o(" or "),oP=a("a"),_to=o("CLIPTokenizerFast"),uto=o(" (CLIP model)"),bto=l(),Gn=a("li"),Xae=a("strong"),vto=o("convbert"),Fto=o(" \u2014 "),rP=a("a"),Tto=o("ConvBertTokenizer"),Mto=o(" or "),tP=a("a"),Eto=o("ConvBertTokenizerFast"),Cto=o(" (ConvBERT model)"),wto=l(),On=a("li"),zae=a("strong"),Ato=o("cpm"),Lto=o(" \u2014 "),aP=a("a"),yto=o("CpmTokenizer"),xto=o(" or "),nP=a("a"),$to=o("CpmTokenizerFast"),kto=o(" (CPM model)"),Sto=l(),Dg=a("li"),Wae=a("strong"),Rto=o("ctrl"),Pto=o(" \u2014 "),sP=a("a"),Bto=o("CTRLTokenizer"),Ito=o(" (CTRL model)"),Nto=l(),Vn=a("li"),Qae=a("strong"),qto=o("data2vec-text"),jto=o(" \u2014 "),lP=a("a"),Dto=o("RobertaTokenizer"),Gto=o(" or "),iP=a("a"),Oto=o("RobertaTokenizerFast"),Vto=o(" (Data2VecText model)"),Xto=l(),Xn=a("li"),Hae=a("strong"),zto=o("deberta"),Wto=o(" \u2014 "),dP=a("a"),Qto=o("DebertaTokenizer"),Hto=o(" or "),cP=a("a"),Uto=o("DebertaTokenizerFast"),Jto=o(" (DeBERTa model)"),Yto=l(),zn=a("li"),Uae=a("strong"),Kto=o("deberta-v2"),Zto=o(" \u2014 "),fP=a("a"),eao=o("DebertaV2Tokenizer"),oao=o(" or "),mP=a("a"),rao=o("DebertaV2TokenizerFast"),tao=o(" (DeBERTa-v2 model)"),aao=l(),Wn=a("li"),Jae=a("strong"),nao=o("distilbert"),sao=o(" \u2014 "),gP=a("a"),lao=o("DistilBertTokenizer"),iao=o(" or "),hP=a("a"),dao=o("DistilBertTokenizerFast"),cao=o(" (DistilBERT model)"),fao=l(),Qn=a("li"),Yae=a("strong"),mao=o("dpr"),gao=o(" \u2014 "),pP=a("a"),hao=o("DPRQuestionEncoderTokenizer"),pao=o(" or "),_P=a("a"),_ao=o("DPRQuestionEncoderTokenizerFast"),uao=o(" (DPR model)"),bao=l(),Hn=a("li"),Kae=a("strong"),vao=o("electra"),Fao=o(" \u2014 "),uP=a("a"),Tao=o("ElectraTokenizer"),Mao=o(" or "),bP=a("a"),Eao=o("ElectraTokenizerFast"),Cao=o(" (ELECTRA model)"),wao=l(),Gg=a("li"),Zae=a("strong"),Aao=o("flaubert"),Lao=o(" \u2014 "),vP=a("a"),yao=o("FlaubertTokenizer"),xao=o(" (FlauBERT model)"),$ao=l(),Un=a("li"),ene=a("strong"),kao=o("fnet"),Sao=o(" \u2014 "),FP=a("a"),Rao=o("FNetTokenizer"),Pao=o(" or "),TP=a("a"),Bao=o("FNetTokenizerFast"),Iao=o(" (FNet model)"),Nao=l(),Og=a("li"),one=a("strong"),qao=o("fsmt"),jao=o(" \u2014 "),MP=a("a"),Dao=o("FSMTTokenizer"),Gao=o(" (FairSeq Machine-Translation model)"),Oao=l(),Jn=a("li"),rne=a("strong"),Vao=o("funnel"),Xao=o(" \u2014 "),EP=a("a"),zao=o("FunnelTokenizer"),Wao=o(" or "),CP=a("a"),Qao=o("FunnelTokenizerFast"),Hao=o(" (Funnel Transformer model)"),Uao=l(),Yn=a("li"),tne=a("strong"),Jao=o("gpt2"),Yao=o(" \u2014 "),wP=a("a"),Kao=o("GPT2Tokenizer"),Zao=o(" or "),AP=a("a"),eno=o("GPT2TokenizerFast"),ono=o(" (OpenAI GPT-2 model)"),rno=l(),Kn=a("li"),ane=a("strong"),tno=o("gpt_neo"),ano=o(" \u2014 "),LP=a("a"),nno=o("GPT2Tokenizer"),sno=o(" or "),yP=a("a"),lno=o("GPT2TokenizerFast"),ino=o(" (GPT Neo model)"),dno=l(),Vg=a("li"),nne=a("strong"),cno=o("gpt_neox"),fno=o(" \u2014 "),xP=a("a"),mno=o("GPTNeoXTokenizerFast"),gno=o(" (GPT NeoX model)"),hno=l(),Zn=a("li"),sne=a("strong"),pno=o("gptj"),_no=o(" \u2014 "),$P=a("a"),uno=o("GPT2Tokenizer"),bno=o(" or "),kP=a("a"),vno=o("GPT2TokenizerFast"),Fno=o(" (GPT-J model)"),Tno=l(),es=a("li"),lne=a("strong"),Mno=o("greaselm"),Eno=o(" \u2014 "),SP=a("a"),Cno=o("RobertaTokenizer"),wno=o(" or "),RP=a("a"),Ano=o("RobertaTokenizerFast"),Lno=o(" (GreaseLM model)"),yno=l(),os=a("li"),ine=a("strong"),xno=o("herbert"),$no=o(" \u2014 "),PP=a("a"),kno=o("HerbertTokenizer"),Sno=o(" or "),BP=a("a"),Rno=o("HerbertTokenizerFast"),Pno=o(" (HerBERT model)"),Bno=l(),Xg=a("li"),dne=a("strong"),Ino=o("hubert"),Nno=o(" \u2014 "),IP=a("a"),qno=o("Wav2Vec2CTCTokenizer"),jno=o(" (Hubert model)"),Dno=l(),rs=a("li"),cne=a("strong"),Gno=o("ibert"),Ono=o(" \u2014 "),NP=a("a"),Vno=o("RobertaTokenizer"),Xno=o(" or "),qP=a("a"),zno=o("RobertaTokenizerFast"),Wno=o(" (I-BERT model)"),Qno=l(),ts=a("li"),fne=a("strong"),Hno=o("layoutlm"),Uno=o(" \u2014 "),jP=a("a"),Jno=o("LayoutLMTokenizer"),Yno=o(" or "),DP=a("a"),Kno=o("LayoutLMTokenizerFast"),Zno=o(" (LayoutLM model)"),eso=l(),as=a("li"),mne=a("strong"),oso=o("layoutlmv2"),rso=o(" \u2014 "),GP=a("a"),tso=o("LayoutLMv2Tokenizer"),aso=o(" or "),OP=a("a"),nso=o("LayoutLMv2TokenizerFast"),sso=o(" (LayoutLMv2 model)"),lso=l(),ns=a("li"),gne=a("strong"),iso=o("layoutlmv3"),dso=o(" \u2014 "),VP=a("a"),cso=o("LayoutLMv3Tokenizer"),fso=o(" or "),XP=a("a"),mso=o("LayoutLMv3TokenizerFast"),gso=o(" (LayoutLMv3 model)"),hso=l(),ss=a("li"),hne=a("strong"),pso=o("layoutxlm"),_so=o(" \u2014 "),zP=a("a"),uso=o("LayoutXLMTokenizer"),bso=o(" or "),WP=a("a"),vso=o("LayoutXLMTokenizerFast"),Fso=o(" (LayoutXLM model)"),Tso=l(),ls=a("li"),pne=a("strong"),Mso=o("led"),Eso=o(" \u2014 "),QP=a("a"),Cso=o("LEDTokenizer"),wso=o(" or "),HP=a("a"),Aso=o("LEDTokenizerFast"),Lso=o(" (LED model)"),yso=l(),is=a("li"),_ne=a("strong"),xso=o("longformer"),$so=o(" \u2014 "),UP=a("a"),kso=o("LongformerTokenizer"),Sso=o(" or "),JP=a("a"),Rso=o("LongformerTokenizerFast"),Pso=o(" (Longformer model)"),Bso=l(),zg=a("li"),une=a("strong"),Iso=o("luke"),Nso=o(" \u2014 "),YP=a("a"),qso=o("LukeTokenizer"),jso=o(" (LUKE model)"),Dso=l(),ds=a("li"),bne=a("strong"),Gso=o("lxmert"),Oso=o(" \u2014 "),KP=a("a"),Vso=o("LxmertTokenizer"),Xso=o(" or "),ZP=a("a"),zso=o("LxmertTokenizerFast"),Wso=o(" (LXMERT model)"),Qso=l(),Wg=a("li"),vne=a("strong"),Hso=o("m2m_100"),Uso=o(" \u2014 "),eB=a("a"),Jso=o("M2M100Tokenizer"),Yso=o(" (M2M100 model)"),Kso=l(),Qg=a("li"),Fne=a("strong"),Zso=o("marian"),elo=o(" \u2014 "),oB=a("a"),olo=o("MarianTokenizer"),rlo=o(" (Marian model)"),tlo=l(),cs=a("li"),Tne=a("strong"),alo=o("mbart"),nlo=o(" \u2014 "),rB=a("a"),slo=o("MBartTokenizer"),llo=o(" or "),tB=a("a"),ilo=o("MBartTokenizerFast"),dlo=o(" (mBART model)"),clo=l(),fs=a("li"),Mne=a("strong"),flo=o("mbart50"),mlo=o(" \u2014 "),aB=a("a"),glo=o("MBart50Tokenizer"),hlo=o(" or "),nB=a("a"),plo=o("MBart50TokenizerFast"),_lo=o(" (mBART-50 model)"),ulo=l(),ms=a("li"),Ene=a("strong"),blo=o("megatron-bert"),vlo=o(" \u2014 "),sB=a("a"),Flo=o("BertTokenizer"),Tlo=o(" or "),lB=a("a"),Mlo=o("BertTokenizerFast"),Elo=o(" (Megatron-BERT model)"),Clo=l(),Hg=a("li"),Cne=a("strong"),wlo=o("mluke"),Alo=o(" \u2014 "),iB=a("a"),Llo=o("MLukeTokenizer"),ylo=o(" (mLUKE model)"),xlo=l(),gs=a("li"),wne=a("strong"),$lo=o("mobilebert"),klo=o(" \u2014 "),dB=a("a"),Slo=o("MobileBertTokenizer"),Rlo=o(" or "),cB=a("a"),Plo=o("MobileBertTokenizerFast"),Blo=o(" (MobileBERT model)"),Ilo=l(),hs=a("li"),Ane=a("strong"),Nlo=o("mpnet"),qlo=o(" \u2014 "),fB=a("a"),jlo=o("MPNetTokenizer"),Dlo=o(" or "),mB=a("a"),Glo=o("MPNetTokenizerFast"),Olo=o(" (MPNet model)"),Vlo=l(),ps=a("li"),Lne=a("strong"),Xlo=o("mt5"),zlo=o(" \u2014 "),gB=a("a"),Wlo=o("MT5Tokenizer"),Qlo=o(" or "),hB=a("a"),Hlo=o("MT5TokenizerFast"),Ulo=o(" (MT5 model)"),Jlo=l(),_s=a("li"),yne=a("strong"),Ylo=o("nystromformer"),Klo=o(" \u2014 "),pB=a("a"),Zlo=o("AlbertTokenizer"),eio=o(" or "),_B=a("a"),oio=o("AlbertTokenizerFast"),rio=o(" (Nystr\xF6mformer model)"),tio=l(),us=a("li"),xne=a("strong"),aio=o("openai-gpt"),nio=o(" \u2014 "),uB=a("a"),sio=o("OpenAIGPTTokenizer"),lio=o(" or "),bB=a("a"),iio=o("OpenAIGPTTokenizerFast"),dio=o(" (OpenAI GPT model)"),cio=l(),Ug=a("li"),$ne=a("strong"),fio=o("opt"),mio=o(" \u2014 "),vB=a("a"),gio=o("GPT2Tokenizer"),hio=o(" (OPT model)"),pio=l(),bs=a("li"),kne=a("strong"),_io=o("pegasus"),uio=o(" \u2014 "),FB=a("a"),bio=o("PegasusTokenizer"),vio=o(" or "),TB=a("a"),Fio=o("PegasusTokenizerFast"),Tio=o(" (Pegasus model)"),Mio=l(),Jg=a("li"),Sne=a("strong"),Eio=o("perceiver"),Cio=o(" \u2014 "),MB=a("a"),wio=o("PerceiverTokenizer"),Aio=o(" (Perceiver model)"),Lio=l(),Yg=a("li"),Rne=a("strong"),yio=o("phobert"),xio=o(" \u2014 "),EB=a("a"),$io=o("PhobertTokenizer"),kio=o(" (PhoBERT model)"),Sio=l(),Kg=a("li"),Pne=a("strong"),Rio=o("plbart"),Pio=o(" \u2014 "),CB=a("a"),Bio=o("PLBartTokenizer"),Iio=o(" (PLBart model)"),Nio=l(),Zg=a("li"),Bne=a("strong"),qio=o("prophetnet"),jio=o(" \u2014 "),wB=a("a"),Dio=o("ProphetNetTokenizer"),Gio=o(" (ProphetNet model)"),Oio=l(),vs=a("li"),Ine=a("strong"),Vio=o("qdqbert"),Xio=o(" \u2014 "),AB=a("a"),zio=o("BertTokenizer"),Wio=o(" or "),LB=a("a"),Qio=o("BertTokenizerFast"),Hio=o(" (QDQBert model)"),Uio=l(),eh=a("li"),Nne=a("strong"),Jio=o("rag"),Yio=o(" \u2014 "),yB=a("a"),Kio=o("RagTokenizer"),Zio=o(" (RAG model)"),edo=l(),Fs=a("li"),qne=a("strong"),odo=o("realm"),rdo=o(" \u2014 "),xB=a("a"),tdo=o("RealmTokenizer"),ado=o(" or "),$B=a("a"),ndo=o("RealmTokenizerFast"),sdo=o(" (REALM model)"),ldo=l(),Ts=a("li"),jne=a("strong"),ido=o("reformer"),ddo=o(" \u2014 "),kB=a("a"),cdo=o("ReformerTokenizer"),fdo=o(" or "),SB=a("a"),mdo=o("ReformerTokenizerFast"),gdo=o(" (Reformer model)"),hdo=l(),Ms=a("li"),Dne=a("strong"),pdo=o("rembert"),_do=o(" \u2014 "),RB=a("a"),udo=o("RemBertTokenizer"),bdo=o(" or "),PB=a("a"),vdo=o("RemBertTokenizerFast"),Fdo=o(" (RemBERT model)"),Tdo=l(),Es=a("li"),Gne=a("strong"),Mdo=o("retribert"),Edo=o(" \u2014 "),BB=a("a"),Cdo=o("RetriBertTokenizer"),wdo=o(" or "),IB=a("a"),Ado=o("RetriBertTokenizerFast"),Ldo=o(" (RetriBERT model)"),ydo=l(),Cs=a("li"),One=a("strong"),xdo=o("roberta"),$do=o(" \u2014 "),NB=a("a"),kdo=o("RobertaTokenizer"),Sdo=o(" or "),qB=a("a"),Rdo=o("RobertaTokenizerFast"),Pdo=o(" (RoBERTa model)"),Bdo=l(),ws=a("li"),Vne=a("strong"),Ido=o("roformer"),Ndo=o(" \u2014 "),jB=a("a"),qdo=o("RoFormerTokenizer"),jdo=o(" or "),DB=a("a"),Ddo=o("RoFormerTokenizerFast"),Gdo=o(" (RoFormer model)"),Odo=l(),oh=a("li"),Xne=a("strong"),Vdo=o("speech_to_text"),Xdo=o(" \u2014 "),GB=a("a"),zdo=o("Speech2TextTokenizer"),Wdo=o(" (Speech2Text model)"),Qdo=l(),rh=a("li"),zne=a("strong"),Hdo=o("speech_to_text_2"),Udo=o(" \u2014 "),OB=a("a"),Jdo=o("Speech2Text2Tokenizer"),Ydo=o(" (Speech2Text2 model)"),Kdo=l(),As=a("li"),Wne=a("strong"),Zdo=o("splinter"),eco=o(" \u2014 "),VB=a("a"),oco=o("SplinterTokenizer"),rco=o(" or "),XB=a("a"),tco=o("SplinterTokenizerFast"),aco=o(" (Splinter model)"),nco=l(),Ls=a("li"),Qne=a("strong"),sco=o("squeezebert"),lco=o(" \u2014 "),zB=a("a"),ico=o("SqueezeBertTokenizer"),dco=o(" or "),WB=a("a"),cco=o("SqueezeBertTokenizerFast"),fco=o(" (SqueezeBERT model)"),mco=l(),ys=a("li"),Hne=a("strong"),gco=o("t5"),hco=o(" \u2014 "),QB=a("a"),pco=o("T5Tokenizer"),_co=o(" or "),HB=a("a"),uco=o("T5TokenizerFast"),bco=o(" (T5 model)"),vco=l(),th=a("li"),Une=a("strong"),Fco=o("tapas"),Tco=o(" \u2014 "),UB=a("a"),Mco=o("TapasTokenizer"),Eco=o(" (TAPAS model)"),Cco=l(),ah=a("li"),Jne=a("strong"),wco=o("tapex"),Aco=o(" \u2014 "),JB=a("a"),Lco=o("TapexTokenizer"),yco=o(" (TAPEX model)"),xco=l(),nh=a("li"),Yne=a("strong"),$co=o("transfo-xl"),kco=o(" \u2014 "),YB=a("a"),Sco=o("TransfoXLTokenizer"),Rco=o(" (Transformer-XL model)"),Pco=l(),xs=a("li"),Kne=a("strong"),Bco=o("visual_bert"),Ico=o(" \u2014 "),KB=a("a"),Nco=o("BertTokenizer"),qco=o(" or "),ZB=a("a"),jco=o("BertTokenizerFast"),Dco=o(" (VisualBERT model)"),Gco=l(),sh=a("li"),Zne=a("strong"),Oco=o("wav2vec2"),Vco=o(" \u2014 "),eI=a("a"),Xco=o("Wav2Vec2CTCTokenizer"),zco=o(" (Wav2Vec2 model)"),Wco=l(),lh=a("li"),ese=a("strong"),Qco=o("wav2vec2-conformer"),Hco=o(" \u2014 "),oI=a("a"),Uco=o("Wav2Vec2CTCTokenizer"),Jco=o(" (Wav2Vec2-Conformer model)"),Yco=l(),ih=a("li"),ose=a("strong"),Kco=o("wav2vec2_phoneme"),Zco=o(" \u2014 "),rI=a("a"),efo=o("Wav2Vec2PhonemeCTCTokenizer"),ofo=o(" (Wav2Vec2Phoneme model)"),rfo=l(),$s=a("li"),rse=a("strong"),tfo=o("xglm"),afo=o(" \u2014 "),tI=a("a"),nfo=o("XGLMTokenizer"),sfo=o(" or "),aI=a("a"),lfo=o("XGLMTokenizerFast"),ifo=o(" (XGLM model)"),dfo=l(),dh=a("li"),tse=a("strong"),cfo=o("xlm"),ffo=o(" \u2014 "),nI=a("a"),mfo=o("XLMTokenizer"),gfo=o(" (XLM model)"),hfo=l(),ch=a("li"),ase=a("strong"),pfo=o("xlm-prophetnet"),_fo=o(" \u2014 "),sI=a("a"),ufo=o("XLMProphetNetTokenizer"),bfo=o(" (XLM-ProphetNet model)"),vfo=l(),ks=a("li"),nse=a("strong"),Ffo=o("xlm-roberta"),Tfo=o(" \u2014 "),lI=a("a"),Mfo=o("XLMRobertaTokenizer"),Efo=o(" or "),iI=a("a"),Cfo=o("XLMRobertaTokenizerFast"),wfo=o(" (XLM-RoBERTa model)"),Afo=l(),Ss=a("li"),sse=a("strong"),Lfo=o("xlm-roberta-xl"),yfo=o(" \u2014 "),dI=a("a"),xfo=o("RobertaTokenizer"),$fo=o(" or "),cI=a("a"),kfo=o("RobertaTokenizerFast"),Sfo=o(" (XLM-RoBERTa-XL model)"),Rfo=l(),Rs=a("li"),lse=a("strong"),Pfo=o("xlnet"),Bfo=o(" \u2014 "),fI=a("a"),Ifo=o("XLNetTokenizer"),Nfo=o(" or "),mI=a("a"),qfo=o("XLNetTokenizerFast"),jfo=o(" (XLNet model)"),Dfo=l(),Ps=a("li"),ise=a("strong"),Gfo=o("yoso"),Ofo=o(" \u2014 "),gI=a("a"),Vfo=o("AlbertTokenizer"),Xfo=o(" or "),hI=a("a"),zfo=o("AlbertTokenizerFast"),Wfo=o(" (YOSO model)"),Qfo=l(),F(fh.$$.fragment),Hfo=l(),mh=a("div"),F(cL.$$.fragment),Ufo=l(),dse=a("p"),Jfo=o("Register a new tokenizer in this mapping."),Yje=l(),Ci=a("h2"),gh=a("a"),cse=a("span"),F(fL.$$.fragment),Yfo=l(),fse=a("span"),Kfo=o("AutoFeatureExtractor"),Kje=l(),Ao=a("div"),F(mL.$$.fragment),Zfo=l(),gL=a("p"),emo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),pI=a("a"),omo=o("AutoFeatureExtractor.from_pretrained()"),rmo=o(" class method."),tmo=l(),hL=a("p"),amo=o("This class cannot be instantiated directly using "),mse=a("code"),nmo=o("__init__()"),smo=o(" (throws an error)."),lmo=l(),He=a("div"),F(pL.$$.fragment),imo=l(),gse=a("p"),dmo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),cmo=l(),La=a("p"),fmo=o("The feature extractor class to instantiate is selected based on the "),hse=a("code"),mmo=o("model_type"),gmo=o(` property of the config object
(either passed as an argument or loaded from `),pse=a("code"),hmo=o("pretrained_model_name_or_path"),pmo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),_se=a("code"),_mo=o("pretrained_model_name_or_path"),umo=o(":"),bmo=l(),Y=a("ul"),hh=a("li"),use=a("strong"),vmo=o("beit"),Fmo=o(" \u2014 "),_I=a("a"),Tmo=o("BeitFeatureExtractor"),Mmo=o(" (BEiT model)"),Emo=l(),ph=a("li"),bse=a("strong"),Cmo=o("clip"),wmo=o(" \u2014 "),uI=a("a"),Amo=o("CLIPFeatureExtractor"),Lmo=o(" (CLIP model)"),ymo=l(),_h=a("li"),vse=a("strong"),xmo=o("convnext"),$mo=o(" \u2014 "),bI=a("a"),kmo=o("ConvNextFeatureExtractor"),Smo=o(" (ConvNeXT model)"),Rmo=l(),uh=a("li"),Fse=a("strong"),Pmo=o("cvt"),Bmo=o(" \u2014 "),vI=a("a"),Imo=o("ConvNextFeatureExtractor"),Nmo=o(" (CvT model)"),qmo=l(),bh=a("li"),Tse=a("strong"),jmo=o("data2vec-audio"),Dmo=o(" \u2014 "),FI=a("a"),Gmo=o("Wav2Vec2FeatureExtractor"),Omo=o(" (Data2VecAudio model)"),Vmo=l(),vh=a("li"),Mse=a("strong"),Xmo=o("data2vec-vision"),zmo=o(" \u2014 "),TI=a("a"),Wmo=o("BeitFeatureExtractor"),Qmo=o(" (Data2VecVision model)"),Hmo=l(),Fh=a("li"),Ese=a("strong"),Umo=o("deit"),Jmo=o(" \u2014 "),MI=a("a"),Ymo=o("DeiTFeatureExtractor"),Kmo=o(" (DeiT model)"),Zmo=l(),Th=a("li"),Cse=a("strong"),ego=o("detr"),ogo=o(" \u2014 "),EI=a("a"),rgo=o("DetrFeatureExtractor"),tgo=o(" (DETR model)"),ago=l(),Mh=a("li"),wse=a("strong"),ngo=o("dpt"),sgo=o(" \u2014 "),CI=a("a"),lgo=o("DPTFeatureExtractor"),igo=o(" (DPT model)"),dgo=l(),Eh=a("li"),Ase=a("strong"),cgo=o("flava"),fgo=o(" \u2014 "),wI=a("a"),mgo=o("FlavaFeatureExtractor"),ggo=o(" (FLAVA model)"),hgo=l(),Ch=a("li"),Lse=a("strong"),pgo=o("glpn"),_go=o(" \u2014 "),AI=a("a"),ugo=o("GLPNFeatureExtractor"),bgo=o(" (GLPN model)"),vgo=l(),wh=a("li"),yse=a("strong"),Fgo=o("greaselm"),Tgo=o(" \u2014 "),LI=a("a"),Mgo=o("GreaseLMFeatureExtractor"),Ego=o(" (GreaseLM model)"),Cgo=l(),Ah=a("li"),xse=a("strong"),wgo=o("hubert"),Ago=o(" \u2014 "),yI=a("a"),Lgo=o("Wav2Vec2FeatureExtractor"),ygo=o(" (Hubert model)"),xgo=l(),Lh=a("li"),$se=a("strong"),$go=o("imagegpt"),kgo=o(" \u2014 "),xI=a("a"),Sgo=o("ImageGPTFeatureExtractor"),Rgo=o(" (ImageGPT model)"),Pgo=l(),yh=a("li"),kse=a("strong"),Bgo=o("layoutlmv2"),Igo=o(" \u2014 "),$I=a("a"),Ngo=o("LayoutLMv2FeatureExtractor"),qgo=o(" (LayoutLMv2 model)"),jgo=l(),xh=a("li"),Sse=a("strong"),Dgo=o("layoutlmv3"),Ggo=o(" \u2014 "),kI=a("a"),Ogo=o("LayoutLMv3FeatureExtractor"),Vgo=o(" (LayoutLMv3 model)"),Xgo=l(),$h=a("li"),Rse=a("strong"),zgo=o("levit"),Wgo=o(" \u2014 "),SI=a("a"),Qgo=o("LevitFeatureExtractor"),Hgo=o(" (LeViT model)"),Ugo=l(),kh=a("li"),Pse=a("strong"),Jgo=o("maskformer"),Ygo=o(" \u2014 "),RI=a("a"),Kgo=o("MaskFormerFeatureExtractor"),Zgo=o(" (MaskFormer model)"),eho=l(),Sh=a("li"),Bse=a("strong"),oho=o("mctct"),rho=o(" \u2014 "),PI=a("a"),tho=o("MCTCTFeatureExtractor"),aho=o(" (M-CTC-T model)"),nho=l(),Rh=a("li"),Ise=a("strong"),sho=o("perceiver"),lho=o(" \u2014 "),BI=a("a"),iho=o("PerceiverFeatureExtractor"),dho=o(" (Perceiver model)"),cho=l(),Ph=a("li"),Nse=a("strong"),fho=o("poolformer"),mho=o(" \u2014 "),II=a("a"),gho=o("PoolFormerFeatureExtractor"),hho=o(" (PoolFormer model)"),pho=l(),Bh=a("li"),qse=a("strong"),_ho=o("regnet"),uho=o(" \u2014 "),NI=a("a"),bho=o("ConvNextFeatureExtractor"),vho=o(" (RegNet model)"),Fho=l(),Ih=a("li"),jse=a("strong"),Tho=o("resnet"),Mho=o(" \u2014 "),qI=a("a"),Eho=o("ConvNextFeatureExtractor"),Cho=o(" (ResNet model)"),who=l(),Nh=a("li"),Dse=a("strong"),Aho=o("segformer"),Lho=o(" \u2014 "),jI=a("a"),yho=o("SegformerFeatureExtractor"),xho=o(" (SegFormer model)"),$ho=l(),qh=a("li"),Gse=a("strong"),kho=o("speech_to_text"),Sho=o(" \u2014 "),DI=a("a"),Rho=o("Speech2TextFeatureExtractor"),Pho=o(" (Speech2Text model)"),Bho=l(),jh=a("li"),Ose=a("strong"),Iho=o("swin"),Nho=o(" \u2014 "),GI=a("a"),qho=o("ViTFeatureExtractor"),jho=o(" (Swin Transformer model)"),Dho=l(),Dh=a("li"),Vse=a("strong"),Gho=o("van"),Oho=o(" \u2014 "),OI=a("a"),Vho=o("ConvNextFeatureExtractor"),Xho=o(" (VAN model)"),zho=l(),Gh=a("li"),Xse=a("strong"),Who=o("vit"),Qho=o(" \u2014 "),VI=a("a"),Hho=o("ViTFeatureExtractor"),Uho=o(" (ViT model)"),Jho=l(),Oh=a("li"),zse=a("strong"),Yho=o("vit_mae"),Kho=o(" \u2014 "),XI=a("a"),Zho=o("ViTFeatureExtractor"),epo=o(" (ViTMAE model)"),opo=l(),Vh=a("li"),Wse=a("strong"),rpo=o("wav2vec2"),tpo=o(" \u2014 "),zI=a("a"),apo=o("Wav2Vec2FeatureExtractor"),npo=o(" (Wav2Vec2 model)"),spo=l(),Xh=a("li"),Qse=a("strong"),lpo=o("wav2vec2-conformer"),ipo=o(" \u2014 "),WI=a("a"),dpo=o("Wav2Vec2FeatureExtractor"),cpo=o(" (Wav2Vec2-Conformer model)"),fpo=l(),zh=a("li"),Hse=a("strong"),mpo=o("yolos"),gpo=o(" \u2014 "),QI=a("a"),hpo=o("YolosFeatureExtractor"),ppo=o(" (YOLOS model)"),_po=l(),F(Wh.$$.fragment),upo=l(),F(Qh.$$.fragment),bpo=l(),Hh=a("div"),F(_L.$$.fragment),vpo=l(),Use=a("p"),Fpo=o("Register a new feature extractor for this class."),Zje=l(),wi=a("h2"),Uh=a("a"),Jse=a("span"),F(uL.$$.fragment),Tpo=l(),Yse=a("span"),Mpo=o("AutoProcessor"),eDe=l(),Lo=a("div"),F(bL.$$.fragment),Epo=l(),vL=a("p"),Cpo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),HI=a("a"),wpo=o("AutoProcessor.from_pretrained()"),Apo=o(" class method."),Lpo=l(),FL=a("p"),ypo=o("This class cannot be instantiated directly using "),Kse=a("code"),xpo=o("__init__()"),$po=o(" (throws an error)."),kpo=l(),Ue=a("div"),F(TL.$$.fragment),Spo=l(),Zse=a("p"),Rpo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ppo=l(),Ai=a("p"),Bpo=o("The processor class to instantiate is selected based on the "),ele=a("code"),Ipo=o("model_type"),Npo=o(` property of the config object (either
passed as an argument or loaded from `),ole=a("code"),qpo=o("pretrained_model_name_or_path"),jpo=o(" if possible):"),Dpo=l(),he=a("ul"),Jh=a("li"),rle=a("strong"),Gpo=o("clip"),Opo=o(" \u2014 "),UI=a("a"),Vpo=o("CLIPProcessor"),Xpo=o(" (CLIP model)"),zpo=l(),Yh=a("li"),tle=a("strong"),Wpo=o("flava"),Qpo=o(" \u2014 "),ale=a("code"),Hpo=o("FLAVAProcessor"),Upo=o(" (FLAVA model)"),Jpo=l(),Kh=a("li"),nle=a("strong"),Ypo=o("greaselm"),Kpo=o(" \u2014 "),JI=a("a"),Zpo=o("GreaseLMProcessor"),e_o=o(" (GreaseLM model)"),o_o=l(),Zh=a("li"),sle=a("strong"),r_o=o("layoutlmv2"),t_o=o(" \u2014 "),YI=a("a"),a_o=o("LayoutLMv2Processor"),n_o=o(" (LayoutLMv2 model)"),s_o=l(),ep=a("li"),lle=a("strong"),l_o=o("layoutlmv3"),i_o=o(" \u2014 "),KI=a("a"),d_o=o("LayoutLMv3Processor"),c_o=o(" (LayoutLMv3 model)"),f_o=l(),op=a("li"),ile=a("strong"),m_o=o("layoutxlm"),g_o=o(" \u2014 "),ZI=a("a"),h_o=o("LayoutXLMProcessor"),p_o=o(" (LayoutXLM model)"),__o=l(),rp=a("li"),dle=a("strong"),u_o=o("sew"),b_o=o(" \u2014 "),eN=a("a"),v_o=o("Wav2Vec2Processor"),F_o=o(" (SEW model)"),T_o=l(),tp=a("li"),cle=a("strong"),M_o=o("sew-d"),E_o=o(" \u2014 "),oN=a("a"),C_o=o("Wav2Vec2Processor"),w_o=o(" (SEW-D model)"),A_o=l(),ap=a("li"),fle=a("strong"),L_o=o("speech_to_text"),y_o=o(" \u2014 "),rN=a("a"),x_o=o("Speech2TextProcessor"),$_o=o(" (Speech2Text model)"),k_o=l(),np=a("li"),mle=a("strong"),S_o=o("speech_to_text_2"),R_o=o(" \u2014 "),tN=a("a"),P_o=o("Speech2Text2Processor"),B_o=o(" (Speech2Text2 model)"),I_o=l(),sp=a("li"),gle=a("strong"),N_o=o("trocr"),q_o=o(" \u2014 "),aN=a("a"),j_o=o("TrOCRProcessor"),D_o=o(" (TrOCR model)"),G_o=l(),lp=a("li"),hle=a("strong"),O_o=o("unispeech"),V_o=o(" \u2014 "),nN=a("a"),X_o=o("Wav2Vec2Processor"),z_o=o(" (UniSpeech model)"),W_o=l(),ip=a("li"),ple=a("strong"),Q_o=o("unispeech-sat"),H_o=o(" \u2014 "),sN=a("a"),U_o=o("Wav2Vec2Processor"),J_o=o(" (UniSpeechSat model)"),Y_o=l(),dp=a("li"),_le=a("strong"),K_o=o("vilt"),Z_o=o(" \u2014 "),lN=a("a"),euo=o("ViltProcessor"),ouo=o(" (ViLT model)"),ruo=l(),cp=a("li"),ule=a("strong"),tuo=o("vision-text-dual-encoder"),auo=o(" \u2014 "),iN=a("a"),nuo=o("VisionTextDualEncoderProcessor"),suo=o(" (VisionTextDualEncoder model)"),luo=l(),fp=a("li"),ble=a("strong"),iuo=o("wav2vec2"),duo=o(" \u2014 "),dN=a("a"),cuo=o("Wav2Vec2Processor"),fuo=o(" (Wav2Vec2 model)"),muo=l(),mp=a("li"),vle=a("strong"),guo=o("wav2vec2-conformer"),huo=o(" \u2014 "),cN=a("a"),puo=o("Wav2Vec2Processor"),_uo=o(" (Wav2Vec2-Conformer model)"),uuo=l(),gp=a("li"),Fle=a("strong"),buo=o("wavlm"),vuo=o(" \u2014 "),fN=a("a"),Fuo=o("Wav2Vec2Processor"),Tuo=o(" (WavLM model)"),Muo=l(),F(hp.$$.fragment),Euo=l(),F(pp.$$.fragment),Cuo=l(),_p=a("div"),F(ML.$$.fragment),wuo=l(),Tle=a("p"),Auo=o("Register a new processor for this class."),oDe=l(),Li=a("h2"),up=a("a"),Mle=a("span"),F(EL.$$.fragment),Luo=l(),Ele=a("span"),yuo=o("AutoModel"),rDe=l(),yo=a("div"),F(CL.$$.fragment),xuo=l(),yi=a("p"),$uo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mN=a("a"),kuo=o("from_pretrained()"),Suo=o(" class method or the "),gN=a("a"),Ruo=o("from_config()"),Puo=o(` class
method.`),Buo=l(),wL=a("p"),Iuo=o("This class cannot be instantiated directly using "),Cle=a("code"),Nuo=o("__init__()"),quo=o(" (throws an error)."),juo=l(),tt=a("div"),F(AL.$$.fragment),Duo=l(),wle=a("p"),Guo=o("Instantiates one of the base model classes of the library from a configuration."),Ouo=l(),xi=a("p"),Vuo=o(`Note:
Loading a model from its configuration file does `),Ale=a("strong"),Xuo=o("not"),zuo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hN=a("a"),Wuo=o("from_pretrained()"),Quo=o(" to load the model weights."),Huo=l(),F(bp.$$.fragment),Uuo=l(),Je=a("div"),F(LL.$$.fragment),Juo=l(),Lle=a("p"),Yuo=o("Instantiate one of the base model classes of the library from a pretrained model."),Kuo=l(),ya=a("p"),Zuo=o("The model class to instantiate is selected based on the "),yle=a("code"),e1o=o("model_type"),o1o=o(` property of the config object (either
passed as an argument or loaded from `),xle=a("code"),r1o=o("pretrained_model_name_or_path"),t1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$le=a("code"),a1o=o("pretrained_model_name_or_path"),n1o=o(":"),s1o=l(),y=a("ul"),vp=a("li"),kle=a("strong"),l1o=o("albert"),i1o=o(" \u2014 "),pN=a("a"),d1o=o("AlbertModel"),c1o=o(" (ALBERT model)"),f1o=l(),Fp=a("li"),Sle=a("strong"),m1o=o("bart"),g1o=o(" \u2014 "),_N=a("a"),h1o=o("BartModel"),p1o=o(" (BART model)"),_1o=l(),Tp=a("li"),Rle=a("strong"),u1o=o("beit"),b1o=o(" \u2014 "),uN=a("a"),v1o=o("BeitModel"),F1o=o(" (BEiT model)"),T1o=l(),Mp=a("li"),Ple=a("strong"),M1o=o("bert"),E1o=o(" \u2014 "),bN=a("a"),C1o=o("BertModel"),w1o=o(" (BERT model)"),A1o=l(),Ep=a("li"),Ble=a("strong"),L1o=o("bert-generation"),y1o=o(" \u2014 "),vN=a("a"),x1o=o("BertGenerationEncoder"),$1o=o(" (Bert Generation model)"),k1o=l(),Cp=a("li"),Ile=a("strong"),S1o=o("big_bird"),R1o=o(" \u2014 "),FN=a("a"),P1o=o("BigBirdModel"),B1o=o(" (BigBird model)"),I1o=l(),wp=a("li"),Nle=a("strong"),N1o=o("bigbird_pegasus"),q1o=o(" \u2014 "),TN=a("a"),j1o=o("BigBirdPegasusModel"),D1o=o(" (BigBird-Pegasus model)"),G1o=l(),Ap=a("li"),qle=a("strong"),O1o=o("blenderbot"),V1o=o(" \u2014 "),MN=a("a"),X1o=o("BlenderbotModel"),z1o=o(" (Blenderbot model)"),W1o=l(),Lp=a("li"),jle=a("strong"),Q1o=o("blenderbot-small"),H1o=o(" \u2014 "),EN=a("a"),U1o=o("BlenderbotSmallModel"),J1o=o(" (BlenderbotSmall model)"),Y1o=l(),yp=a("li"),Dle=a("strong"),K1o=o("bloom"),Z1o=o(" \u2014 "),CN=a("a"),ebo=o("BloomModel"),obo=o(" (BLOOM model)"),rbo=l(),xp=a("li"),Gle=a("strong"),tbo=o("camembert"),abo=o(" \u2014 "),wN=a("a"),nbo=o("CamembertModel"),sbo=o(" (CamemBERT model)"),lbo=l(),$p=a("li"),Ole=a("strong"),ibo=o("canine"),dbo=o(" \u2014 "),AN=a("a"),cbo=o("CanineModel"),fbo=o(" (CANINE model)"),mbo=l(),kp=a("li"),Vle=a("strong"),gbo=o("clip"),hbo=o(" \u2014 "),LN=a("a"),pbo=o("CLIPModel"),_bo=o(" (CLIP model)"),ubo=l(),Sp=a("li"),Xle=a("strong"),bbo=o("convbert"),vbo=o(" \u2014 "),yN=a("a"),Fbo=o("ConvBertModel"),Tbo=o(" (ConvBERT model)"),Mbo=l(),Rp=a("li"),zle=a("strong"),Ebo=o("convnext"),Cbo=o(" \u2014 "),xN=a("a"),wbo=o("ConvNextModel"),Abo=o(" (ConvNeXT model)"),Lbo=l(),Pp=a("li"),Wle=a("strong"),ybo=o("ctrl"),xbo=o(" \u2014 "),$N=a("a"),$bo=o("CTRLModel"),kbo=o(" (CTRL model)"),Sbo=l(),Bp=a("li"),Qle=a("strong"),Rbo=o("cvt"),Pbo=o(" \u2014 "),kN=a("a"),Bbo=o("CvtModel"),Ibo=o(" (CvT model)"),Nbo=l(),Ip=a("li"),Hle=a("strong"),qbo=o("data2vec-audio"),jbo=o(" \u2014 "),SN=a("a"),Dbo=o("Data2VecAudioModel"),Gbo=o(" (Data2VecAudio model)"),Obo=l(),Np=a("li"),Ule=a("strong"),Vbo=o("data2vec-text"),Xbo=o(" \u2014 "),RN=a("a"),zbo=o("Data2VecTextModel"),Wbo=o(" (Data2VecText model)"),Qbo=l(),qp=a("li"),Jle=a("strong"),Hbo=o("data2vec-vision"),Ubo=o(" \u2014 "),PN=a("a"),Jbo=o("Data2VecVisionModel"),Ybo=o(" (Data2VecVision model)"),Kbo=l(),jp=a("li"),Yle=a("strong"),Zbo=o("deberta"),e2o=o(" \u2014 "),BN=a("a"),o2o=o("DebertaModel"),r2o=o(" (DeBERTa model)"),t2o=l(),Dp=a("li"),Kle=a("strong"),a2o=o("deberta-v2"),n2o=o(" \u2014 "),IN=a("a"),s2o=o("DebertaV2Model"),l2o=o(" (DeBERTa-v2 model)"),i2o=l(),Gp=a("li"),Zle=a("strong"),d2o=o("decision_transformer"),c2o=o(" \u2014 "),NN=a("a"),f2o=o("DecisionTransformerModel"),m2o=o(" (Decision Transformer model)"),g2o=l(),Op=a("li"),eie=a("strong"),h2o=o("deit"),p2o=o(" \u2014 "),qN=a("a"),_2o=o("DeiTModel"),u2o=o(" (DeiT model)"),b2o=l(),Vp=a("li"),oie=a("strong"),v2o=o("detr"),F2o=o(" \u2014 "),jN=a("a"),T2o=o("DetrModel"),M2o=o(" (DETR model)"),E2o=l(),Xp=a("li"),rie=a("strong"),C2o=o("distilbert"),w2o=o(" \u2014 "),DN=a("a"),A2o=o("DistilBertModel"),L2o=o(" (DistilBERT model)"),y2o=l(),zp=a("li"),tie=a("strong"),x2o=o("dpr"),$2o=o(" \u2014 "),GN=a("a"),k2o=o("DPRQuestionEncoder"),S2o=o(" (DPR model)"),R2o=l(),Wp=a("li"),aie=a("strong"),P2o=o("dpt"),B2o=o(" \u2014 "),ON=a("a"),I2o=o("DPTModel"),N2o=o(" (DPT model)"),q2o=l(),Qp=a("li"),nie=a("strong"),j2o=o("electra"),D2o=o(" \u2014 "),VN=a("a"),G2o=o("ElectraModel"),O2o=o(" (ELECTRA model)"),V2o=l(),Hp=a("li"),sie=a("strong"),X2o=o("flaubert"),z2o=o(" \u2014 "),XN=a("a"),W2o=o("FlaubertModel"),Q2o=o(" (FlauBERT model)"),H2o=l(),Up=a("li"),lie=a("strong"),U2o=o("flava"),J2o=o(" \u2014 "),zN=a("a"),Y2o=o("FlavaModel"),K2o=o(" (FLAVA model)"),Z2o=l(),Jp=a("li"),iie=a("strong"),e4o=o("fnet"),o4o=o(" \u2014 "),WN=a("a"),r4o=o("FNetModel"),t4o=o(" (FNet model)"),a4o=l(),Yp=a("li"),die=a("strong"),n4o=o("fsmt"),s4o=o(" \u2014 "),QN=a("a"),l4o=o("FSMTModel"),i4o=o(" (FairSeq Machine-Translation model)"),d4o=l(),Bs=a("li"),cie=a("strong"),c4o=o("funnel"),f4o=o(" \u2014 "),HN=a("a"),m4o=o("FunnelModel"),g4o=o(" or "),UN=a("a"),h4o=o("FunnelBaseModel"),p4o=o(" (Funnel Transformer model)"),_4o=l(),Kp=a("li"),fie=a("strong"),u4o=o("glpn"),b4o=o(" \u2014 "),JN=a("a"),v4o=o("GLPNModel"),F4o=o(" (GLPN model)"),T4o=l(),Zp=a("li"),mie=a("strong"),M4o=o("gpt2"),E4o=o(" \u2014 "),YN=a("a"),C4o=o("GPT2Model"),w4o=o(" (OpenAI GPT-2 model)"),A4o=l(),e_=a("li"),gie=a("strong"),L4o=o("gpt_neo"),y4o=o(" \u2014 "),KN=a("a"),x4o=o("GPTNeoModel"),$4o=o(" (GPT Neo model)"),k4o=l(),o_=a("li"),hie=a("strong"),S4o=o("gpt_neox"),R4o=o(" \u2014 "),ZN=a("a"),P4o=o("GPTNeoXModel"),B4o=o(" (GPT NeoX model)"),I4o=l(),r_=a("li"),pie=a("strong"),N4o=o("gptj"),q4o=o(" \u2014 "),eq=a("a"),j4o=o("GPTJModel"),D4o=o(" (GPT-J model)"),G4o=l(),t_=a("li"),_ie=a("strong"),O4o=o("greaselm"),V4o=o(" \u2014 "),oq=a("a"),X4o=o("GreaseLMModel"),z4o=o(" (GreaseLM model)"),W4o=l(),a_=a("li"),uie=a("strong"),Q4o=o("hubert"),H4o=o(" \u2014 "),rq=a("a"),U4o=o("HubertModel"),J4o=o(" (Hubert model)"),Y4o=l(),n_=a("li"),bie=a("strong"),K4o=o("ibert"),Z4o=o(" \u2014 "),tq=a("a"),evo=o("IBertModel"),ovo=o(" (I-BERT model)"),rvo=l(),s_=a("li"),vie=a("strong"),tvo=o("imagegpt"),avo=o(" \u2014 "),aq=a("a"),nvo=o("ImageGPTModel"),svo=o(" (ImageGPT model)"),lvo=l(),l_=a("li"),Fie=a("strong"),ivo=o("layoutlm"),dvo=o(" \u2014 "),nq=a("a"),cvo=o("LayoutLMModel"),fvo=o(" (LayoutLM model)"),mvo=l(),i_=a("li"),Tie=a("strong"),gvo=o("layoutlmv2"),hvo=o(" \u2014 "),sq=a("a"),pvo=o("LayoutLMv2Model"),_vo=o(" (LayoutLMv2 model)"),uvo=l(),d_=a("li"),Mie=a("strong"),bvo=o("layoutlmv3"),vvo=o(" \u2014 "),lq=a("a"),Fvo=o("LayoutLMv3Model"),Tvo=o(" (LayoutLMv3 model)"),Mvo=l(),c_=a("li"),Eie=a("strong"),Evo=o("led"),Cvo=o(" \u2014 "),iq=a("a"),wvo=o("LEDModel"),Avo=o(" (LED model)"),Lvo=l(),f_=a("li"),Cie=a("strong"),yvo=o("levit"),xvo=o(" \u2014 "),dq=a("a"),$vo=o("LevitModel"),kvo=o(" (LeViT model)"),Svo=l(),m_=a("li"),wie=a("strong"),Rvo=o("longformer"),Pvo=o(" \u2014 "),cq=a("a"),Bvo=o("LongformerModel"),Ivo=o(" (Longformer model)"),Nvo=l(),g_=a("li"),Aie=a("strong"),qvo=o("luke"),jvo=o(" \u2014 "),fq=a("a"),Dvo=o("LukeModel"),Gvo=o(" (LUKE model)"),Ovo=l(),h_=a("li"),Lie=a("strong"),Vvo=o("lxmert"),Xvo=o(" \u2014 "),mq=a("a"),zvo=o("LxmertModel"),Wvo=o(" (LXMERT model)"),Qvo=l(),p_=a("li"),yie=a("strong"),Hvo=o("m2m_100"),Uvo=o(" \u2014 "),gq=a("a"),Jvo=o("M2M100Model"),Yvo=o(" (M2M100 model)"),Kvo=l(),__=a("li"),xie=a("strong"),Zvo=o("marian"),eFo=o(" \u2014 "),hq=a("a"),oFo=o("MarianModel"),rFo=o(" (Marian model)"),tFo=l(),u_=a("li"),$ie=a("strong"),aFo=o("maskformer"),nFo=o(" \u2014 "),pq=a("a"),sFo=o("MaskFormerModel"),lFo=o(" (MaskFormer model)"),iFo=l(),b_=a("li"),kie=a("strong"),dFo=o("mbart"),cFo=o(" \u2014 "),_q=a("a"),fFo=o("MBartModel"),mFo=o(" (mBART model)"),gFo=l(),v_=a("li"),Sie=a("strong"),hFo=o("mctct"),pFo=o(" \u2014 "),uq=a("a"),_Fo=o("MCTCTModel"),uFo=o(" (M-CTC-T model)"),bFo=l(),F_=a("li"),Rie=a("strong"),vFo=o("megatron-bert"),FFo=o(" \u2014 "),bq=a("a"),TFo=o("MegatronBertModel"),MFo=o(" (Megatron-BERT model)"),EFo=l(),T_=a("li"),Pie=a("strong"),CFo=o("mobilebert"),wFo=o(" \u2014 "),vq=a("a"),AFo=o("MobileBertModel"),LFo=o(" (MobileBERT model)"),yFo=l(),M_=a("li"),Bie=a("strong"),xFo=o("mpnet"),$Fo=o(" \u2014 "),Fq=a("a"),kFo=o("MPNetModel"),SFo=o(" (MPNet model)"),RFo=l(),E_=a("li"),Iie=a("strong"),PFo=o("mt5"),BFo=o(" \u2014 "),Tq=a("a"),IFo=o("MT5Model"),NFo=o(" (MT5 model)"),qFo=l(),C_=a("li"),Nie=a("strong"),jFo=o("nystromformer"),DFo=o(" \u2014 "),Mq=a("a"),GFo=o("NystromformerModel"),OFo=o(" (Nystr\xF6mformer model)"),VFo=l(),w_=a("li"),qie=a("strong"),XFo=o("openai-gpt"),zFo=o(" \u2014 "),Eq=a("a"),WFo=o("OpenAIGPTModel"),QFo=o(" (OpenAI GPT model)"),HFo=l(),A_=a("li"),jie=a("strong"),UFo=o("opt"),JFo=o(" \u2014 "),Cq=a("a"),YFo=o("OPTModel"),KFo=o(" (OPT model)"),ZFo=l(),L_=a("li"),Die=a("strong"),e6o=o("pegasus"),o6o=o(" \u2014 "),wq=a("a"),r6o=o("PegasusModel"),t6o=o(" (Pegasus model)"),a6o=l(),y_=a("li"),Gie=a("strong"),n6o=o("perceiver"),s6o=o(" \u2014 "),Aq=a("a"),l6o=o("PerceiverModel"),i6o=o(" (Perceiver model)"),d6o=l(),x_=a("li"),Oie=a("strong"),c6o=o("plbart"),f6o=o(" \u2014 "),Lq=a("a"),m6o=o("PLBartModel"),g6o=o(" (PLBart model)"),h6o=l(),$_=a("li"),Vie=a("strong"),p6o=o("poolformer"),_6o=o(" \u2014 "),yq=a("a"),u6o=o("PoolFormerModel"),b6o=o(" (PoolFormer model)"),v6o=l(),k_=a("li"),Xie=a("strong"),F6o=o("prophetnet"),T6o=o(" \u2014 "),xq=a("a"),M6o=o("ProphetNetModel"),E6o=o(" (ProphetNet model)"),C6o=l(),S_=a("li"),zie=a("strong"),w6o=o("qdqbert"),A6o=o(" \u2014 "),$q=a("a"),L6o=o("QDQBertModel"),y6o=o(" (QDQBert model)"),x6o=l(),R_=a("li"),Wie=a("strong"),$6o=o("reformer"),k6o=o(" \u2014 "),kq=a("a"),S6o=o("ReformerModel"),R6o=o(" (Reformer model)"),P6o=l(),P_=a("li"),Qie=a("strong"),B6o=o("regnet"),I6o=o(" \u2014 "),Sq=a("a"),N6o=o("RegNetModel"),q6o=o(" (RegNet model)"),j6o=l(),B_=a("li"),Hie=a("strong"),D6o=o("rembert"),G6o=o(" \u2014 "),Rq=a("a"),O6o=o("RemBertModel"),V6o=o(" (RemBERT model)"),X6o=l(),I_=a("li"),Uie=a("strong"),z6o=o("resnet"),W6o=o(" \u2014 "),Pq=a("a"),Q6o=o("ResNetModel"),H6o=o(" (ResNet model)"),U6o=l(),N_=a("li"),Jie=a("strong"),J6o=o("retribert"),Y6o=o(" \u2014 "),Bq=a("a"),K6o=o("RetriBertModel"),Z6o=o(" (RetriBERT model)"),eTo=l(),q_=a("li"),Yie=a("strong"),oTo=o("roberta"),rTo=o(" \u2014 "),Iq=a("a"),tTo=o("RobertaModel"),aTo=o(" (RoBERTa model)"),nTo=l(),j_=a("li"),Kie=a("strong"),sTo=o("roformer"),lTo=o(" \u2014 "),Nq=a("a"),iTo=o("RoFormerModel"),dTo=o(" (RoFormer model)"),cTo=l(),D_=a("li"),Zie=a("strong"),fTo=o("segformer"),mTo=o(" \u2014 "),qq=a("a"),gTo=o("SegformerModel"),hTo=o(" (SegFormer model)"),pTo=l(),G_=a("li"),ede=a("strong"),_To=o("sew"),uTo=o(" \u2014 "),jq=a("a"),bTo=o("SEWModel"),vTo=o(" (SEW model)"),FTo=l(),O_=a("li"),ode=a("strong"),TTo=o("sew-d"),MTo=o(" \u2014 "),Dq=a("a"),ETo=o("SEWDModel"),CTo=o(" (SEW-D model)"),wTo=l(),V_=a("li"),rde=a("strong"),ATo=o("speech_to_text"),LTo=o(" \u2014 "),Gq=a("a"),yTo=o("Speech2TextModel"),xTo=o(" (Speech2Text model)"),$To=l(),X_=a("li"),tde=a("strong"),kTo=o("splinter"),STo=o(" \u2014 "),Oq=a("a"),RTo=o("SplinterModel"),PTo=o(" (Splinter model)"),BTo=l(),z_=a("li"),ade=a("strong"),ITo=o("squeezebert"),NTo=o(" \u2014 "),Vq=a("a"),qTo=o("SqueezeBertModel"),jTo=o(" (SqueezeBERT model)"),DTo=l(),W_=a("li"),nde=a("strong"),GTo=o("swin"),OTo=o(" \u2014 "),Xq=a("a"),VTo=o("SwinModel"),XTo=o(" (Swin Transformer model)"),zTo=l(),Q_=a("li"),sde=a("strong"),WTo=o("t5"),QTo=o(" \u2014 "),zq=a("a"),HTo=o("T5Model"),UTo=o(" (T5 model)"),JTo=l(),H_=a("li"),lde=a("strong"),YTo=o("tapas"),KTo=o(" \u2014 "),Wq=a("a"),ZTo=o("TapasModel"),e7o=o(" (TAPAS model)"),o7o=l(),U_=a("li"),ide=a("strong"),r7o=o("trajectory_transformer"),t7o=o(" \u2014 "),Qq=a("a"),a7o=o("TrajectoryTransformerModel"),n7o=o(" (Trajectory Transformer model)"),s7o=l(),J_=a("li"),dde=a("strong"),l7o=o("transfo-xl"),i7o=o(" \u2014 "),Hq=a("a"),d7o=o("TransfoXLModel"),c7o=o(" (Transformer-XL model)"),f7o=l(),Y_=a("li"),cde=a("strong"),m7o=o("unispeech"),g7o=o(" \u2014 "),Uq=a("a"),h7o=o("UniSpeechModel"),p7o=o(" (UniSpeech model)"),_7o=l(),K_=a("li"),fde=a("strong"),u7o=o("unispeech-sat"),b7o=o(" \u2014 "),Jq=a("a"),v7o=o("UniSpeechSatModel"),F7o=o(" (UniSpeechSat model)"),T7o=l(),Z_=a("li"),mde=a("strong"),M7o=o("van"),E7o=o(" \u2014 "),Yq=a("a"),C7o=o("VanModel"),w7o=o(" (VAN model)"),A7o=l(),eu=a("li"),gde=a("strong"),L7o=o("vilt"),y7o=o(" \u2014 "),Kq=a("a"),x7o=o("ViltModel"),$7o=o(" (ViLT model)"),k7o=l(),ou=a("li"),hde=a("strong"),S7o=o("vision-text-dual-encoder"),R7o=o(" \u2014 "),Zq=a("a"),P7o=o("VisionTextDualEncoderModel"),B7o=o(" (VisionTextDualEncoder model)"),I7o=l(),ru=a("li"),pde=a("strong"),N7o=o("visual_bert"),q7o=o(" \u2014 "),ej=a("a"),j7o=o("VisualBertModel"),D7o=o(" (VisualBERT model)"),G7o=l(),tu=a("li"),_de=a("strong"),O7o=o("vit"),V7o=o(" \u2014 "),oj=a("a"),X7o=o("ViTModel"),z7o=o(" (ViT model)"),W7o=l(),au=a("li"),ude=a("strong"),Q7o=o("vit_mae"),H7o=o(" \u2014 "),rj=a("a"),U7o=o("ViTMAEModel"),J7o=o(" (ViTMAE model)"),Y7o=l(),nu=a("li"),bde=a("strong"),K7o=o("wav2vec2"),Z7o=o(" \u2014 "),tj=a("a"),eMo=o("Wav2Vec2Model"),oMo=o(" (Wav2Vec2 model)"),rMo=l(),su=a("li"),vde=a("strong"),tMo=o("wav2vec2-conformer"),aMo=o(" \u2014 "),aj=a("a"),nMo=o("Wav2Vec2ConformerModel"),sMo=o(" (Wav2Vec2-Conformer model)"),lMo=l(),lu=a("li"),Fde=a("strong"),iMo=o("wavlm"),dMo=o(" \u2014 "),nj=a("a"),cMo=o("WavLMModel"),fMo=o(" (WavLM model)"),mMo=l(),iu=a("li"),Tde=a("strong"),gMo=o("xglm"),hMo=o(" \u2014 "),sj=a("a"),pMo=o("XGLMModel"),_Mo=o(" (XGLM model)"),uMo=l(),du=a("li"),Mde=a("strong"),bMo=o("xlm"),vMo=o(" \u2014 "),lj=a("a"),FMo=o("XLMModel"),TMo=o(" (XLM model)"),MMo=l(),cu=a("li"),Ede=a("strong"),EMo=o("xlm-prophetnet"),CMo=o(" \u2014 "),ij=a("a"),wMo=o("XLMProphetNetModel"),AMo=o(" (XLM-ProphetNet model)"),LMo=l(),fu=a("li"),Cde=a("strong"),yMo=o("xlm-roberta"),xMo=o(" \u2014 "),dj=a("a"),$Mo=o("XLMRobertaModel"),kMo=o(" (XLM-RoBERTa model)"),SMo=l(),mu=a("li"),wde=a("strong"),RMo=o("xlm-roberta-xl"),PMo=o(" \u2014 "),cj=a("a"),BMo=o("XLMRobertaXLModel"),IMo=o(" (XLM-RoBERTa-XL model)"),NMo=l(),gu=a("li"),Ade=a("strong"),qMo=o("xlnet"),jMo=o(" \u2014 "),fj=a("a"),DMo=o("XLNetModel"),GMo=o(" (XLNet model)"),OMo=l(),hu=a("li"),Lde=a("strong"),VMo=o("yolos"),XMo=o(" \u2014 "),mj=a("a"),zMo=o("YolosModel"),WMo=o(" (YOLOS model)"),QMo=l(),pu=a("li"),yde=a("strong"),HMo=o("yoso"),UMo=o(" \u2014 "),gj=a("a"),JMo=o("YosoModel"),YMo=o(" (YOSO model)"),KMo=l(),_u=a("p"),ZMo=o("The model is set in evaluation mode by default using "),xde=a("code"),eEo=o("model.eval()"),oEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$de=a("code"),rEo=o("model.train()"),tEo=l(),F(uu.$$.fragment),tDe=l(),$i=a("h2"),bu=a("a"),kde=a("span"),F(yL.$$.fragment),aEo=l(),Sde=a("span"),nEo=o("AutoModelForPreTraining"),aDe=l(),xo=a("div"),F(xL.$$.fragment),sEo=l(),ki=a("p"),lEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hj=a("a"),iEo=o("from_pretrained()"),dEo=o(" class method or the "),pj=a("a"),cEo=o("from_config()"),fEo=o(` class
method.`),mEo=l(),$L=a("p"),gEo=o("This class cannot be instantiated directly using "),Rde=a("code"),hEo=o("__init__()"),pEo=o(" (throws an error)."),_Eo=l(),at=a("div"),F(kL.$$.fragment),uEo=l(),Pde=a("p"),bEo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vEo=l(),Si=a("p"),FEo=o(`Note:
Loading a model from its configuration file does `),Bde=a("strong"),TEo=o("not"),MEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_j=a("a"),EEo=o("from_pretrained()"),CEo=o(" to load the model weights."),wEo=l(),F(vu.$$.fragment),AEo=l(),Ye=a("div"),F(SL.$$.fragment),LEo=l(),Ide=a("p"),yEo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xEo=l(),xa=a("p"),$Eo=o("The model class to instantiate is selected based on the "),Nde=a("code"),kEo=o("model_type"),SEo=o(` property of the config object (either
passed as an argument or loaded from `),qde=a("code"),REo=o("pretrained_model_name_or_path"),PEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jde=a("code"),BEo=o("pretrained_model_name_or_path"),IEo=o(":"),NEo=l(),G=a("ul"),Fu=a("li"),Dde=a("strong"),qEo=o("albert"),jEo=o(" \u2014 "),uj=a("a"),DEo=o("AlbertForPreTraining"),GEo=o(" (ALBERT model)"),OEo=l(),Tu=a("li"),Gde=a("strong"),VEo=o("bart"),XEo=o(" \u2014 "),bj=a("a"),zEo=o("BartForConditionalGeneration"),WEo=o(" (BART model)"),QEo=l(),Mu=a("li"),Ode=a("strong"),HEo=o("bert"),UEo=o(" \u2014 "),vj=a("a"),JEo=o("BertForPreTraining"),YEo=o(" (BERT model)"),KEo=l(),Eu=a("li"),Vde=a("strong"),ZEo=o("big_bird"),eCo=o(" \u2014 "),Fj=a("a"),oCo=o("BigBirdForPreTraining"),rCo=o(" (BigBird model)"),tCo=l(),Cu=a("li"),Xde=a("strong"),aCo=o("bloom"),nCo=o(" \u2014 "),Tj=a("a"),sCo=o("BloomForCausalLM"),lCo=o(" (BLOOM model)"),iCo=l(),wu=a("li"),zde=a("strong"),dCo=o("camembert"),cCo=o(" \u2014 "),Mj=a("a"),fCo=o("CamembertForMaskedLM"),mCo=o(" (CamemBERT model)"),gCo=l(),Au=a("li"),Wde=a("strong"),hCo=o("ctrl"),pCo=o(" \u2014 "),Ej=a("a"),_Co=o("CTRLLMHeadModel"),uCo=o(" (CTRL model)"),bCo=l(),Lu=a("li"),Qde=a("strong"),vCo=o("data2vec-text"),FCo=o(" \u2014 "),Cj=a("a"),TCo=o("Data2VecTextForMaskedLM"),MCo=o(" (Data2VecText model)"),ECo=l(),yu=a("li"),Hde=a("strong"),CCo=o("deberta"),wCo=o(" \u2014 "),wj=a("a"),ACo=o("DebertaForMaskedLM"),LCo=o(" (DeBERTa model)"),yCo=l(),xu=a("li"),Ude=a("strong"),xCo=o("deberta-v2"),$Co=o(" \u2014 "),Aj=a("a"),kCo=o("DebertaV2ForMaskedLM"),SCo=o(" (DeBERTa-v2 model)"),RCo=l(),$u=a("li"),Jde=a("strong"),PCo=o("distilbert"),BCo=o(" \u2014 "),Lj=a("a"),ICo=o("DistilBertForMaskedLM"),NCo=o(" (DistilBERT model)"),qCo=l(),ku=a("li"),Yde=a("strong"),jCo=o("electra"),DCo=o(" \u2014 "),yj=a("a"),GCo=o("ElectraForPreTraining"),OCo=o(" (ELECTRA model)"),VCo=l(),Su=a("li"),Kde=a("strong"),XCo=o("flaubert"),zCo=o(" \u2014 "),xj=a("a"),WCo=o("FlaubertWithLMHeadModel"),QCo=o(" (FlauBERT model)"),HCo=l(),Ru=a("li"),Zde=a("strong"),UCo=o("flava"),JCo=o(" \u2014 "),$j=a("a"),YCo=o("FlavaForPreTraining"),KCo=o(" (FLAVA model)"),ZCo=l(),Pu=a("li"),ece=a("strong"),e5o=o("fnet"),o5o=o(" \u2014 "),kj=a("a"),r5o=o("FNetForPreTraining"),t5o=o(" (FNet model)"),a5o=l(),Bu=a("li"),oce=a("strong"),n5o=o("fsmt"),s5o=o(" \u2014 "),Sj=a("a"),l5o=o("FSMTForConditionalGeneration"),i5o=o(" (FairSeq Machine-Translation model)"),d5o=l(),Iu=a("li"),rce=a("strong"),c5o=o("funnel"),f5o=o(" \u2014 "),Rj=a("a"),m5o=o("FunnelForPreTraining"),g5o=o(" (Funnel Transformer model)"),h5o=l(),Nu=a("li"),tce=a("strong"),p5o=o("gpt2"),_5o=o(" \u2014 "),Pj=a("a"),u5o=o("GPT2LMHeadModel"),b5o=o(" (OpenAI GPT-2 model)"),v5o=l(),qu=a("li"),ace=a("strong"),F5o=o("ibert"),T5o=o(" \u2014 "),Bj=a("a"),M5o=o("IBertForMaskedLM"),E5o=o(" (I-BERT model)"),C5o=l(),ju=a("li"),nce=a("strong"),w5o=o("layoutlm"),A5o=o(" \u2014 "),Ij=a("a"),L5o=o("LayoutLMForMaskedLM"),y5o=o(" (LayoutLM model)"),x5o=l(),Du=a("li"),sce=a("strong"),$5o=o("longformer"),k5o=o(" \u2014 "),Nj=a("a"),S5o=o("LongformerForMaskedLM"),R5o=o(" (Longformer model)"),P5o=l(),Gu=a("li"),lce=a("strong"),B5o=o("lxmert"),I5o=o(" \u2014 "),qj=a("a"),N5o=o("LxmertForPreTraining"),q5o=o(" (LXMERT model)"),j5o=l(),Ou=a("li"),ice=a("strong"),D5o=o("megatron-bert"),G5o=o(" \u2014 "),jj=a("a"),O5o=o("MegatronBertForPreTraining"),V5o=o(" (Megatron-BERT model)"),X5o=l(),Vu=a("li"),dce=a("strong"),z5o=o("mobilebert"),W5o=o(" \u2014 "),Dj=a("a"),Q5o=o("MobileBertForPreTraining"),H5o=o(" (MobileBERT model)"),U5o=l(),Xu=a("li"),cce=a("strong"),J5o=o("mpnet"),Y5o=o(" \u2014 "),Gj=a("a"),K5o=o("MPNetForMaskedLM"),Z5o=o(" (MPNet model)"),e3o=l(),zu=a("li"),fce=a("strong"),o3o=o("openai-gpt"),r3o=o(" \u2014 "),Oj=a("a"),t3o=o("OpenAIGPTLMHeadModel"),a3o=o(" (OpenAI GPT model)"),n3o=l(),Wu=a("li"),mce=a("strong"),s3o=o("retribert"),l3o=o(" \u2014 "),Vj=a("a"),i3o=o("RetriBertModel"),d3o=o(" (RetriBERT model)"),c3o=l(),Qu=a("li"),gce=a("strong"),f3o=o("roberta"),m3o=o(" \u2014 "),Xj=a("a"),g3o=o("RobertaForMaskedLM"),h3o=o(" (RoBERTa model)"),p3o=l(),Hu=a("li"),hce=a("strong"),_3o=o("splinter"),u3o=o(" \u2014 "),zj=a("a"),b3o=o("SplinterForPreTraining"),v3o=o(" (Splinter model)"),F3o=l(),Uu=a("li"),pce=a("strong"),T3o=o("squeezebert"),M3o=o(" \u2014 "),Wj=a("a"),E3o=o("SqueezeBertForMaskedLM"),C3o=o(" (SqueezeBERT model)"),w3o=l(),Ju=a("li"),_ce=a("strong"),A3o=o("t5"),L3o=o(" \u2014 "),Qj=a("a"),y3o=o("T5ForConditionalGeneration"),x3o=o(" (T5 model)"),$3o=l(),Yu=a("li"),uce=a("strong"),k3o=o("tapas"),S3o=o(" \u2014 "),Hj=a("a"),R3o=o("TapasForMaskedLM"),P3o=o(" (TAPAS model)"),B3o=l(),Ku=a("li"),bce=a("strong"),I3o=o("transfo-xl"),N3o=o(" \u2014 "),Uj=a("a"),q3o=o("TransfoXLLMHeadModel"),j3o=o(" (Transformer-XL model)"),D3o=l(),Zu=a("li"),vce=a("strong"),G3o=o("unispeech"),O3o=o(" \u2014 "),Jj=a("a"),V3o=o("UniSpeechForPreTraining"),X3o=o(" (UniSpeech model)"),z3o=l(),e1=a("li"),Fce=a("strong"),W3o=o("unispeech-sat"),Q3o=o(" \u2014 "),Yj=a("a"),H3o=o("UniSpeechSatForPreTraining"),U3o=o(" (UniSpeechSat model)"),J3o=l(),o1=a("li"),Tce=a("strong"),Y3o=o("visual_bert"),K3o=o(" \u2014 "),Kj=a("a"),Z3o=o("VisualBertForPreTraining"),e0o=o(" (VisualBERT model)"),o0o=l(),r1=a("li"),Mce=a("strong"),r0o=o("vit_mae"),t0o=o(" \u2014 "),Zj=a("a"),a0o=o("ViTMAEForPreTraining"),n0o=o(" (ViTMAE model)"),s0o=l(),t1=a("li"),Ece=a("strong"),l0o=o("wav2vec2"),i0o=o(" \u2014 "),eD=a("a"),d0o=o("Wav2Vec2ForPreTraining"),c0o=o(" (Wav2Vec2 model)"),f0o=l(),a1=a("li"),Cce=a("strong"),m0o=o("wav2vec2-conformer"),g0o=o(" \u2014 "),oD=a("a"),h0o=o("Wav2Vec2ConformerForPreTraining"),p0o=o(" (Wav2Vec2-Conformer model)"),_0o=l(),n1=a("li"),wce=a("strong"),u0o=o("xlm"),b0o=o(" \u2014 "),rD=a("a"),v0o=o("XLMWithLMHeadModel"),F0o=o(" (XLM model)"),T0o=l(),s1=a("li"),Ace=a("strong"),M0o=o("xlm-roberta"),E0o=o(" \u2014 "),tD=a("a"),C0o=o("XLMRobertaForMaskedLM"),w0o=o(" (XLM-RoBERTa model)"),A0o=l(),l1=a("li"),Lce=a("strong"),L0o=o("xlm-roberta-xl"),y0o=o(" \u2014 "),aD=a("a"),x0o=o("XLMRobertaXLForMaskedLM"),$0o=o(" (XLM-RoBERTa-XL model)"),k0o=l(),i1=a("li"),yce=a("strong"),S0o=o("xlnet"),R0o=o(" \u2014 "),nD=a("a"),P0o=o("XLNetLMHeadModel"),B0o=o(" (XLNet model)"),I0o=l(),d1=a("p"),N0o=o("The model is set in evaluation mode by default using "),xce=a("code"),q0o=o("model.eval()"),j0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=a("code"),D0o=o("model.train()"),G0o=l(),F(c1.$$.fragment),nDe=l(),Ri=a("h2"),f1=a("a"),kce=a("span"),F(RL.$$.fragment),O0o=l(),Sce=a("span"),V0o=o("AutoModelForCausalLM"),sDe=l(),$o=a("div"),F(PL.$$.fragment),X0o=l(),Pi=a("p"),z0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sD=a("a"),W0o=o("from_pretrained()"),Q0o=o(" class method or the "),lD=a("a"),H0o=o("from_config()"),U0o=o(` class
method.`),J0o=l(),BL=a("p"),Y0o=o("This class cannot be instantiated directly using "),Rce=a("code"),K0o=o("__init__()"),Z0o=o(" (throws an error)."),ewo=l(),nt=a("div"),F(IL.$$.fragment),owo=l(),Pce=a("p"),rwo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),two=l(),Bi=a("p"),awo=o(`Note:
Loading a model from its configuration file does `),Bce=a("strong"),nwo=o("not"),swo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iD=a("a"),lwo=o("from_pretrained()"),iwo=o(" to load the model weights."),dwo=l(),F(m1.$$.fragment),cwo=l(),Ke=a("div"),F(NL.$$.fragment),fwo=l(),Ice=a("p"),mwo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gwo=l(),$a=a("p"),hwo=o("The model class to instantiate is selected based on the "),Nce=a("code"),pwo=o("model_type"),_wo=o(` property of the config object (either
passed as an argument or loaded from `),qce=a("code"),uwo=o("pretrained_model_name_or_path"),bwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=a("code"),vwo=o("pretrained_model_name_or_path"),Fwo=o(":"),Two=l(),z=a("ul"),g1=a("li"),Dce=a("strong"),Mwo=o("bart"),Ewo=o(" \u2014 "),dD=a("a"),Cwo=o("BartForCausalLM"),wwo=o(" (BART model)"),Awo=l(),h1=a("li"),Gce=a("strong"),Lwo=o("bert"),ywo=o(" \u2014 "),cD=a("a"),xwo=o("BertLMHeadModel"),$wo=o(" (BERT model)"),kwo=l(),p1=a("li"),Oce=a("strong"),Swo=o("bert-generation"),Rwo=o(" \u2014 "),fD=a("a"),Pwo=o("BertGenerationDecoder"),Bwo=o(" (Bert Generation model)"),Iwo=l(),_1=a("li"),Vce=a("strong"),Nwo=o("big_bird"),qwo=o(" \u2014 "),mD=a("a"),jwo=o("BigBirdForCausalLM"),Dwo=o(" (BigBird model)"),Gwo=l(),u1=a("li"),Xce=a("strong"),Owo=o("bigbird_pegasus"),Vwo=o(" \u2014 "),gD=a("a"),Xwo=o("BigBirdPegasusForCausalLM"),zwo=o(" (BigBird-Pegasus model)"),Wwo=l(),b1=a("li"),zce=a("strong"),Qwo=o("blenderbot"),Hwo=o(" \u2014 "),hD=a("a"),Uwo=o("BlenderbotForCausalLM"),Jwo=o(" (Blenderbot model)"),Ywo=l(),v1=a("li"),Wce=a("strong"),Kwo=o("blenderbot-small"),Zwo=o(" \u2014 "),pD=a("a"),eAo=o("BlenderbotSmallForCausalLM"),oAo=o(" (BlenderbotSmall model)"),rAo=l(),F1=a("li"),Qce=a("strong"),tAo=o("bloom"),aAo=o(" \u2014 "),_D=a("a"),nAo=o("BloomForCausalLM"),sAo=o(" (BLOOM model)"),lAo=l(),T1=a("li"),Hce=a("strong"),iAo=o("camembert"),dAo=o(" \u2014 "),uD=a("a"),cAo=o("CamembertForCausalLM"),fAo=o(" (CamemBERT model)"),mAo=l(),M1=a("li"),Uce=a("strong"),gAo=o("ctrl"),hAo=o(" \u2014 "),bD=a("a"),pAo=o("CTRLLMHeadModel"),_Ao=o(" (CTRL model)"),uAo=l(),E1=a("li"),Jce=a("strong"),bAo=o("data2vec-text"),vAo=o(" \u2014 "),vD=a("a"),FAo=o("Data2VecTextForCausalLM"),TAo=o(" (Data2VecText model)"),MAo=l(),C1=a("li"),Yce=a("strong"),EAo=o("electra"),CAo=o(" \u2014 "),FD=a("a"),wAo=o("ElectraForCausalLM"),AAo=o(" (ELECTRA model)"),LAo=l(),w1=a("li"),Kce=a("strong"),yAo=o("gpt2"),xAo=o(" \u2014 "),TD=a("a"),$Ao=o("GPT2LMHeadModel"),kAo=o(" (OpenAI GPT-2 model)"),SAo=l(),A1=a("li"),Zce=a("strong"),RAo=o("gpt_neo"),PAo=o(" \u2014 "),MD=a("a"),BAo=o("GPTNeoForCausalLM"),IAo=o(" (GPT Neo model)"),NAo=l(),L1=a("li"),efe=a("strong"),qAo=o("gpt_neox"),jAo=o(" \u2014 "),ED=a("a"),DAo=o("GPTNeoXForCausalLM"),GAo=o(" (GPT NeoX model)"),OAo=l(),y1=a("li"),ofe=a("strong"),VAo=o("gptj"),XAo=o(" \u2014 "),CD=a("a"),zAo=o("GPTJForCausalLM"),WAo=o(" (GPT-J model)"),QAo=l(),x1=a("li"),rfe=a("strong"),HAo=o("marian"),UAo=o(" \u2014 "),wD=a("a"),JAo=o("MarianForCausalLM"),YAo=o(" (Marian model)"),KAo=l(),$1=a("li"),tfe=a("strong"),ZAo=o("mbart"),eLo=o(" \u2014 "),AD=a("a"),oLo=o("MBartForCausalLM"),rLo=o(" (mBART model)"),tLo=l(),k1=a("li"),afe=a("strong"),aLo=o("megatron-bert"),nLo=o(" \u2014 "),LD=a("a"),sLo=o("MegatronBertForCausalLM"),lLo=o(" (Megatron-BERT model)"),iLo=l(),S1=a("li"),nfe=a("strong"),dLo=o("openai-gpt"),cLo=o(" \u2014 "),yD=a("a"),fLo=o("OpenAIGPTLMHeadModel"),mLo=o(" (OpenAI GPT model)"),gLo=l(),R1=a("li"),sfe=a("strong"),hLo=o("opt"),pLo=o(" \u2014 "),xD=a("a"),_Lo=o("OPTForCausalLM"),uLo=o(" (OPT model)"),bLo=l(),P1=a("li"),lfe=a("strong"),vLo=o("pegasus"),FLo=o(" \u2014 "),$D=a("a"),TLo=o("PegasusForCausalLM"),MLo=o(" (Pegasus model)"),ELo=l(),B1=a("li"),ife=a("strong"),CLo=o("plbart"),wLo=o(" \u2014 "),kD=a("a"),ALo=o("PLBartForCausalLM"),LLo=o(" (PLBart model)"),yLo=l(),I1=a("li"),dfe=a("strong"),xLo=o("prophetnet"),$Lo=o(" \u2014 "),SD=a("a"),kLo=o("ProphetNetForCausalLM"),SLo=o(" (ProphetNet model)"),RLo=l(),N1=a("li"),cfe=a("strong"),PLo=o("qdqbert"),BLo=o(" \u2014 "),RD=a("a"),ILo=o("QDQBertLMHeadModel"),NLo=o(" (QDQBert model)"),qLo=l(),q1=a("li"),ffe=a("strong"),jLo=o("reformer"),DLo=o(" \u2014 "),PD=a("a"),GLo=o("ReformerModelWithLMHead"),OLo=o(" (Reformer model)"),VLo=l(),j1=a("li"),mfe=a("strong"),XLo=o("rembert"),zLo=o(" \u2014 "),BD=a("a"),WLo=o("RemBertForCausalLM"),QLo=o(" (RemBERT model)"),HLo=l(),D1=a("li"),gfe=a("strong"),ULo=o("roberta"),JLo=o(" \u2014 "),ID=a("a"),YLo=o("RobertaForCausalLM"),KLo=o(" (RoBERTa model)"),ZLo=l(),G1=a("li"),hfe=a("strong"),eyo=o("roformer"),oyo=o(" \u2014 "),ND=a("a"),ryo=o("RoFormerForCausalLM"),tyo=o(" (RoFormer model)"),ayo=l(),O1=a("li"),pfe=a("strong"),nyo=o("speech_to_text_2"),syo=o(" \u2014 "),qD=a("a"),lyo=o("Speech2Text2ForCausalLM"),iyo=o(" (Speech2Text2 model)"),dyo=l(),V1=a("li"),_fe=a("strong"),cyo=o("transfo-xl"),fyo=o(" \u2014 "),jD=a("a"),myo=o("TransfoXLLMHeadModel"),gyo=o(" (Transformer-XL model)"),hyo=l(),X1=a("li"),ufe=a("strong"),pyo=o("trocr"),_yo=o(" \u2014 "),DD=a("a"),uyo=o("TrOCRForCausalLM"),byo=o(" (TrOCR model)"),vyo=l(),z1=a("li"),bfe=a("strong"),Fyo=o("xglm"),Tyo=o(" \u2014 "),GD=a("a"),Myo=o("XGLMForCausalLM"),Eyo=o(" (XGLM model)"),Cyo=l(),W1=a("li"),vfe=a("strong"),wyo=o("xlm"),Ayo=o(" \u2014 "),OD=a("a"),Lyo=o("XLMWithLMHeadModel"),yyo=o(" (XLM model)"),xyo=l(),Q1=a("li"),Ffe=a("strong"),$yo=o("xlm-prophetnet"),kyo=o(" \u2014 "),VD=a("a"),Syo=o("XLMProphetNetForCausalLM"),Ryo=o(" (XLM-ProphetNet model)"),Pyo=l(),H1=a("li"),Tfe=a("strong"),Byo=o("xlm-roberta"),Iyo=o(" \u2014 "),XD=a("a"),Nyo=o("XLMRobertaForCausalLM"),qyo=o(" (XLM-RoBERTa model)"),jyo=l(),U1=a("li"),Mfe=a("strong"),Dyo=o("xlm-roberta-xl"),Gyo=o(" \u2014 "),zD=a("a"),Oyo=o("XLMRobertaXLForCausalLM"),Vyo=o(" (XLM-RoBERTa-XL model)"),Xyo=l(),J1=a("li"),Efe=a("strong"),zyo=o("xlnet"),Wyo=o(" \u2014 "),WD=a("a"),Qyo=o("XLNetLMHeadModel"),Hyo=o(" (XLNet model)"),Uyo=l(),Y1=a("p"),Jyo=o("The model is set in evaluation mode by default using "),Cfe=a("code"),Yyo=o("model.eval()"),Kyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wfe=a("code"),Zyo=o("model.train()"),e8o=l(),F(K1.$$.fragment),lDe=l(),Ii=a("h2"),Z1=a("a"),Afe=a("span"),F(qL.$$.fragment),o8o=l(),Lfe=a("span"),r8o=o("AutoModelForMaskedLM"),iDe=l(),ko=a("div"),F(jL.$$.fragment),t8o=l(),Ni=a("p"),a8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),QD=a("a"),n8o=o("from_pretrained()"),s8o=o(" class method or the "),HD=a("a"),l8o=o("from_config()"),i8o=o(` class
method.`),d8o=l(),DL=a("p"),c8o=o("This class cannot be instantiated directly using "),yfe=a("code"),f8o=o("__init__()"),m8o=o(" (throws an error)."),g8o=l(),st=a("div"),F(GL.$$.fragment),h8o=l(),xfe=a("p"),p8o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_8o=l(),qi=a("p"),u8o=o(`Note:
Loading a model from its configuration file does `),$fe=a("strong"),b8o=o("not"),v8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UD=a("a"),F8o=o("from_pretrained()"),T8o=o(" to load the model weights."),M8o=l(),F(eb.$$.fragment),E8o=l(),Ze=a("div"),F(OL.$$.fragment),C8o=l(),kfe=a("p"),w8o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),A8o=l(),ka=a("p"),L8o=o("The model class to instantiate is selected based on the "),Sfe=a("code"),y8o=o("model_type"),x8o=o(` property of the config object (either
passed as an argument or loaded from `),Rfe=a("code"),$8o=o("pretrained_model_name_or_path"),k8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=a("code"),S8o=o("pretrained_model_name_or_path"),R8o=o(":"),P8o=l(),Q=a("ul"),ob=a("li"),Bfe=a("strong"),B8o=o("albert"),I8o=o(" \u2014 "),JD=a("a"),N8o=o("AlbertForMaskedLM"),q8o=o(" (ALBERT model)"),j8o=l(),rb=a("li"),Ife=a("strong"),D8o=o("bart"),G8o=o(" \u2014 "),YD=a("a"),O8o=o("BartForConditionalGeneration"),V8o=o(" (BART model)"),X8o=l(),tb=a("li"),Nfe=a("strong"),z8o=o("bert"),W8o=o(" \u2014 "),KD=a("a"),Q8o=o("BertForMaskedLM"),H8o=o(" (BERT model)"),U8o=l(),ab=a("li"),qfe=a("strong"),J8o=o("big_bird"),Y8o=o(" \u2014 "),ZD=a("a"),K8o=o("BigBirdForMaskedLM"),Z8o=o(" (BigBird model)"),e9o=l(),nb=a("li"),jfe=a("strong"),o9o=o("camembert"),r9o=o(" \u2014 "),eG=a("a"),t9o=o("CamembertForMaskedLM"),a9o=o(" (CamemBERT model)"),n9o=l(),sb=a("li"),Dfe=a("strong"),s9o=o("convbert"),l9o=o(" \u2014 "),oG=a("a"),i9o=o("ConvBertForMaskedLM"),d9o=o(" (ConvBERT model)"),c9o=l(),lb=a("li"),Gfe=a("strong"),f9o=o("data2vec-text"),m9o=o(" \u2014 "),rG=a("a"),g9o=o("Data2VecTextForMaskedLM"),h9o=o(" (Data2VecText model)"),p9o=l(),ib=a("li"),Ofe=a("strong"),_9o=o("deberta"),u9o=o(" \u2014 "),tG=a("a"),b9o=o("DebertaForMaskedLM"),v9o=o(" (DeBERTa model)"),F9o=l(),db=a("li"),Vfe=a("strong"),T9o=o("deberta-v2"),M9o=o(" \u2014 "),aG=a("a"),E9o=o("DebertaV2ForMaskedLM"),C9o=o(" (DeBERTa-v2 model)"),w9o=l(),cb=a("li"),Xfe=a("strong"),A9o=o("distilbert"),L9o=o(" \u2014 "),nG=a("a"),y9o=o("DistilBertForMaskedLM"),x9o=o(" (DistilBERT model)"),$9o=l(),fb=a("li"),zfe=a("strong"),k9o=o("electra"),S9o=o(" \u2014 "),sG=a("a"),R9o=o("ElectraForMaskedLM"),P9o=o(" (ELECTRA model)"),B9o=l(),mb=a("li"),Wfe=a("strong"),I9o=o("flaubert"),N9o=o(" \u2014 "),lG=a("a"),q9o=o("FlaubertWithLMHeadModel"),j9o=o(" (FlauBERT model)"),D9o=l(),gb=a("li"),Qfe=a("strong"),G9o=o("fnet"),O9o=o(" \u2014 "),iG=a("a"),V9o=o("FNetForMaskedLM"),X9o=o(" (FNet model)"),z9o=l(),hb=a("li"),Hfe=a("strong"),W9o=o("funnel"),Q9o=o(" \u2014 "),dG=a("a"),H9o=o("FunnelForMaskedLM"),U9o=o(" (Funnel Transformer model)"),J9o=l(),pb=a("li"),Ufe=a("strong"),Y9o=o("ibert"),K9o=o(" \u2014 "),cG=a("a"),Z9o=o("IBertForMaskedLM"),exo=o(" (I-BERT model)"),oxo=l(),_b=a("li"),Jfe=a("strong"),rxo=o("layoutlm"),txo=o(" \u2014 "),fG=a("a"),axo=o("LayoutLMForMaskedLM"),nxo=o(" (LayoutLM model)"),sxo=l(),ub=a("li"),Yfe=a("strong"),lxo=o("longformer"),ixo=o(" \u2014 "),mG=a("a"),dxo=o("LongformerForMaskedLM"),cxo=o(" (Longformer model)"),fxo=l(),bb=a("li"),Kfe=a("strong"),mxo=o("luke"),gxo=o(" \u2014 "),gG=a("a"),hxo=o("LukeForMaskedLM"),pxo=o(" (LUKE model)"),_xo=l(),vb=a("li"),Zfe=a("strong"),uxo=o("mbart"),bxo=o(" \u2014 "),hG=a("a"),vxo=o("MBartForConditionalGeneration"),Fxo=o(" (mBART model)"),Txo=l(),Fb=a("li"),eme=a("strong"),Mxo=o("megatron-bert"),Exo=o(" \u2014 "),pG=a("a"),Cxo=o("MegatronBertForMaskedLM"),wxo=o(" (Megatron-BERT model)"),Axo=l(),Tb=a("li"),ome=a("strong"),Lxo=o("mobilebert"),yxo=o(" \u2014 "),_G=a("a"),xxo=o("MobileBertForMaskedLM"),$xo=o(" (MobileBERT model)"),kxo=l(),Mb=a("li"),rme=a("strong"),Sxo=o("mpnet"),Rxo=o(" \u2014 "),uG=a("a"),Pxo=o("MPNetForMaskedLM"),Bxo=o(" (MPNet model)"),Ixo=l(),Eb=a("li"),tme=a("strong"),Nxo=o("nystromformer"),qxo=o(" \u2014 "),bG=a("a"),jxo=o("NystromformerForMaskedLM"),Dxo=o(" (Nystr\xF6mformer model)"),Gxo=l(),Cb=a("li"),ame=a("strong"),Oxo=o("perceiver"),Vxo=o(" \u2014 "),vG=a("a"),Xxo=o("PerceiverForMaskedLM"),zxo=o(" (Perceiver model)"),Wxo=l(),wb=a("li"),nme=a("strong"),Qxo=o("qdqbert"),Hxo=o(" \u2014 "),FG=a("a"),Uxo=o("QDQBertForMaskedLM"),Jxo=o(" (QDQBert model)"),Yxo=l(),Ab=a("li"),sme=a("strong"),Kxo=o("reformer"),Zxo=o(" \u2014 "),TG=a("a"),e$o=o("ReformerForMaskedLM"),o$o=o(" (Reformer model)"),r$o=l(),Lb=a("li"),lme=a("strong"),t$o=o("rembert"),a$o=o(" \u2014 "),MG=a("a"),n$o=o("RemBertForMaskedLM"),s$o=o(" (RemBERT model)"),l$o=l(),yb=a("li"),ime=a("strong"),i$o=o("roberta"),d$o=o(" \u2014 "),EG=a("a"),c$o=o("RobertaForMaskedLM"),f$o=o(" (RoBERTa model)"),m$o=l(),xb=a("li"),dme=a("strong"),g$o=o("roformer"),h$o=o(" \u2014 "),CG=a("a"),p$o=o("RoFormerForMaskedLM"),_$o=o(" (RoFormer model)"),u$o=l(),$b=a("li"),cme=a("strong"),b$o=o("squeezebert"),v$o=o(" \u2014 "),wG=a("a"),F$o=o("SqueezeBertForMaskedLM"),T$o=o(" (SqueezeBERT model)"),M$o=l(),kb=a("li"),fme=a("strong"),E$o=o("tapas"),C$o=o(" \u2014 "),AG=a("a"),w$o=o("TapasForMaskedLM"),A$o=o(" (TAPAS model)"),L$o=l(),Sb=a("li"),mme=a("strong"),y$o=o("wav2vec2"),x$o=o(" \u2014 "),gme=a("code"),$$o=o("Wav2Vec2ForMaskedLM"),k$o=o(" (Wav2Vec2 model)"),S$o=l(),Rb=a("li"),hme=a("strong"),R$o=o("xlm"),P$o=o(" \u2014 "),LG=a("a"),B$o=o("XLMWithLMHeadModel"),I$o=o(" (XLM model)"),N$o=l(),Pb=a("li"),pme=a("strong"),q$o=o("xlm-roberta"),j$o=o(" \u2014 "),yG=a("a"),D$o=o("XLMRobertaForMaskedLM"),G$o=o(" (XLM-RoBERTa model)"),O$o=l(),Bb=a("li"),_me=a("strong"),V$o=o("xlm-roberta-xl"),X$o=o(" \u2014 "),xG=a("a"),z$o=o("XLMRobertaXLForMaskedLM"),W$o=o(" (XLM-RoBERTa-XL model)"),Q$o=l(),Ib=a("li"),ume=a("strong"),H$o=o("yoso"),U$o=o(" \u2014 "),$G=a("a"),J$o=o("YosoForMaskedLM"),Y$o=o(" (YOSO model)"),K$o=l(),Nb=a("p"),Z$o=o("The model is set in evaluation mode by default using "),bme=a("code"),eko=o("model.eval()"),oko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=a("code"),rko=o("model.train()"),tko=l(),F(qb.$$.fragment),dDe=l(),ji=a("h2"),jb=a("a"),Fme=a("span"),F(VL.$$.fragment),ako=l(),Tme=a("span"),nko=o("AutoModelForSeq2SeqLM"),cDe=l(),So=a("div"),F(XL.$$.fragment),sko=l(),Di=a("p"),lko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kG=a("a"),iko=o("from_pretrained()"),dko=o(" class method or the "),SG=a("a"),cko=o("from_config()"),fko=o(` class
method.`),mko=l(),zL=a("p"),gko=o("This class cannot be instantiated directly using "),Mme=a("code"),hko=o("__init__()"),pko=o(" (throws an error)."),_ko=l(),lt=a("div"),F(WL.$$.fragment),uko=l(),Eme=a("p"),bko=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vko=l(),Gi=a("p"),Fko=o(`Note:
Loading a model from its configuration file does `),Cme=a("strong"),Tko=o("not"),Mko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RG=a("a"),Eko=o("from_pretrained()"),Cko=o(" to load the model weights."),wko=l(),F(Db.$$.fragment),Ako=l(),eo=a("div"),F(QL.$$.fragment),Lko=l(),wme=a("p"),yko=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xko=l(),Sa=a("p"),$ko=o("The model class to instantiate is selected based on the "),Ame=a("code"),kko=o("model_type"),Sko=o(` property of the config object (either
passed as an argument or loaded from `),Lme=a("code"),Rko=o("pretrained_model_name_or_path"),Pko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=a("code"),Bko=o("pretrained_model_name_or_path"),Iko=o(":"),Nko=l(),ue=a("ul"),Gb=a("li"),xme=a("strong"),qko=o("bart"),jko=o(" \u2014 "),PG=a("a"),Dko=o("BartForConditionalGeneration"),Gko=o(" (BART model)"),Oko=l(),Ob=a("li"),$me=a("strong"),Vko=o("bigbird_pegasus"),Xko=o(" \u2014 "),BG=a("a"),zko=o("BigBirdPegasusForConditionalGeneration"),Wko=o(" (BigBird-Pegasus model)"),Qko=l(),Vb=a("li"),kme=a("strong"),Hko=o("blenderbot"),Uko=o(" \u2014 "),IG=a("a"),Jko=o("BlenderbotForConditionalGeneration"),Yko=o(" (Blenderbot model)"),Kko=l(),Xb=a("li"),Sme=a("strong"),Zko=o("blenderbot-small"),eSo=o(" \u2014 "),NG=a("a"),oSo=o("BlenderbotSmallForConditionalGeneration"),rSo=o(" (BlenderbotSmall model)"),tSo=l(),zb=a("li"),Rme=a("strong"),aSo=o("encoder-decoder"),nSo=o(" \u2014 "),qG=a("a"),sSo=o("EncoderDecoderModel"),lSo=o(" (Encoder decoder model)"),iSo=l(),Wb=a("li"),Pme=a("strong"),dSo=o("fsmt"),cSo=o(" \u2014 "),jG=a("a"),fSo=o("FSMTForConditionalGeneration"),mSo=o(" (FairSeq Machine-Translation model)"),gSo=l(),Qb=a("li"),Bme=a("strong"),hSo=o("led"),pSo=o(" \u2014 "),DG=a("a"),_So=o("LEDForConditionalGeneration"),uSo=o(" (LED model)"),bSo=l(),Hb=a("li"),Ime=a("strong"),vSo=o("m2m_100"),FSo=o(" \u2014 "),GG=a("a"),TSo=o("M2M100ForConditionalGeneration"),MSo=o(" (M2M100 model)"),ESo=l(),Ub=a("li"),Nme=a("strong"),CSo=o("marian"),wSo=o(" \u2014 "),OG=a("a"),ASo=o("MarianMTModel"),LSo=o(" (Marian model)"),ySo=l(),Jb=a("li"),qme=a("strong"),xSo=o("mbart"),$So=o(" \u2014 "),VG=a("a"),kSo=o("MBartForConditionalGeneration"),SSo=o(" (mBART model)"),RSo=l(),Yb=a("li"),jme=a("strong"),PSo=o("mt5"),BSo=o(" \u2014 "),XG=a("a"),ISo=o("MT5ForConditionalGeneration"),NSo=o(" (MT5 model)"),qSo=l(),Kb=a("li"),Dme=a("strong"),jSo=o("pegasus"),DSo=o(" \u2014 "),zG=a("a"),GSo=o("PegasusForConditionalGeneration"),OSo=o(" (Pegasus model)"),VSo=l(),Zb=a("li"),Gme=a("strong"),XSo=o("plbart"),zSo=o(" \u2014 "),WG=a("a"),WSo=o("PLBartForConditionalGeneration"),QSo=o(" (PLBart model)"),HSo=l(),e2=a("li"),Ome=a("strong"),USo=o("prophetnet"),JSo=o(" \u2014 "),QG=a("a"),YSo=o("ProphetNetForConditionalGeneration"),KSo=o(" (ProphetNet model)"),ZSo=l(),o2=a("li"),Vme=a("strong"),eRo=o("t5"),oRo=o(" \u2014 "),HG=a("a"),rRo=o("T5ForConditionalGeneration"),tRo=o(" (T5 model)"),aRo=l(),r2=a("li"),Xme=a("strong"),nRo=o("xlm-prophetnet"),sRo=o(" \u2014 "),UG=a("a"),lRo=o("XLMProphetNetForConditionalGeneration"),iRo=o(" (XLM-ProphetNet model)"),dRo=l(),t2=a("p"),cRo=o("The model is set in evaluation mode by default using "),zme=a("code"),fRo=o("model.eval()"),mRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wme=a("code"),gRo=o("model.train()"),hRo=l(),F(a2.$$.fragment),fDe=l(),Oi=a("h2"),n2=a("a"),Qme=a("span"),F(HL.$$.fragment),pRo=l(),Hme=a("span"),_Ro=o("AutoModelForSequenceClassification"),mDe=l(),Ro=a("div"),F(UL.$$.fragment),uRo=l(),Vi=a("p"),bRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JG=a("a"),vRo=o("from_pretrained()"),FRo=o(" class method or the "),YG=a("a"),TRo=o("from_config()"),MRo=o(` class
method.`),ERo=l(),JL=a("p"),CRo=o("This class cannot be instantiated directly using "),Ume=a("code"),wRo=o("__init__()"),ARo=o(" (throws an error)."),LRo=l(),it=a("div"),F(YL.$$.fragment),yRo=l(),Jme=a("p"),xRo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Ro=l(),Xi=a("p"),kRo=o(`Note:
Loading a model from its configuration file does `),Yme=a("strong"),SRo=o("not"),RRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=a("a"),PRo=o("from_pretrained()"),BRo=o(" to load the model weights."),IRo=l(),F(s2.$$.fragment),NRo=l(),oo=a("div"),F(KL.$$.fragment),qRo=l(),Kme=a("p"),jRo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),DRo=l(),Ra=a("p"),GRo=o("The model class to instantiate is selected based on the "),Zme=a("code"),ORo=o("model_type"),VRo=o(` property of the config object (either
passed as an argument or loaded from `),ege=a("code"),XRo=o("pretrained_model_name_or_path"),zRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=a("code"),WRo=o("pretrained_model_name_or_path"),QRo=o(":"),HRo=l(),N=a("ul"),l2=a("li"),rge=a("strong"),URo=o("albert"),JRo=o(" \u2014 "),ZG=a("a"),YRo=o("AlbertForSequenceClassification"),KRo=o(" (ALBERT model)"),ZRo=l(),i2=a("li"),tge=a("strong"),ePo=o("bart"),oPo=o(" \u2014 "),eO=a("a"),rPo=o("BartForSequenceClassification"),tPo=o(" (BART model)"),aPo=l(),d2=a("li"),age=a("strong"),nPo=o("bert"),sPo=o(" \u2014 "),oO=a("a"),lPo=o("BertForSequenceClassification"),iPo=o(" (BERT model)"),dPo=l(),c2=a("li"),nge=a("strong"),cPo=o("big_bird"),fPo=o(" \u2014 "),rO=a("a"),mPo=o("BigBirdForSequenceClassification"),gPo=o(" (BigBird model)"),hPo=l(),f2=a("li"),sge=a("strong"),pPo=o("bigbird_pegasus"),_Po=o(" \u2014 "),tO=a("a"),uPo=o("BigBirdPegasusForSequenceClassification"),bPo=o(" (BigBird-Pegasus model)"),vPo=l(),m2=a("li"),lge=a("strong"),FPo=o("camembert"),TPo=o(" \u2014 "),aO=a("a"),MPo=o("CamembertForSequenceClassification"),EPo=o(" (CamemBERT model)"),CPo=l(),g2=a("li"),ige=a("strong"),wPo=o("canine"),APo=o(" \u2014 "),nO=a("a"),LPo=o("CanineForSequenceClassification"),yPo=o(" (CANINE model)"),xPo=l(),h2=a("li"),dge=a("strong"),$Po=o("convbert"),kPo=o(" \u2014 "),sO=a("a"),SPo=o("ConvBertForSequenceClassification"),RPo=o(" (ConvBERT model)"),PPo=l(),p2=a("li"),cge=a("strong"),BPo=o("ctrl"),IPo=o(" \u2014 "),lO=a("a"),NPo=o("CTRLForSequenceClassification"),qPo=o(" (CTRL model)"),jPo=l(),_2=a("li"),fge=a("strong"),DPo=o("data2vec-text"),GPo=o(" \u2014 "),iO=a("a"),OPo=o("Data2VecTextForSequenceClassification"),VPo=o(" (Data2VecText model)"),XPo=l(),u2=a("li"),mge=a("strong"),zPo=o("deberta"),WPo=o(" \u2014 "),dO=a("a"),QPo=o("DebertaForSequenceClassification"),HPo=o(" (DeBERTa model)"),UPo=l(),b2=a("li"),gge=a("strong"),JPo=o("deberta-v2"),YPo=o(" \u2014 "),cO=a("a"),KPo=o("DebertaV2ForSequenceClassification"),ZPo=o(" (DeBERTa-v2 model)"),eBo=l(),v2=a("li"),hge=a("strong"),oBo=o("distilbert"),rBo=o(" \u2014 "),fO=a("a"),tBo=o("DistilBertForSequenceClassification"),aBo=o(" (DistilBERT model)"),nBo=l(),F2=a("li"),pge=a("strong"),sBo=o("electra"),lBo=o(" \u2014 "),mO=a("a"),iBo=o("ElectraForSequenceClassification"),dBo=o(" (ELECTRA model)"),cBo=l(),T2=a("li"),_ge=a("strong"),fBo=o("flaubert"),mBo=o(" \u2014 "),gO=a("a"),gBo=o("FlaubertForSequenceClassification"),hBo=o(" (FlauBERT model)"),pBo=l(),M2=a("li"),uge=a("strong"),_Bo=o("fnet"),uBo=o(" \u2014 "),hO=a("a"),bBo=o("FNetForSequenceClassification"),vBo=o(" (FNet model)"),FBo=l(),E2=a("li"),bge=a("strong"),TBo=o("funnel"),MBo=o(" \u2014 "),pO=a("a"),EBo=o("FunnelForSequenceClassification"),CBo=o(" (Funnel Transformer model)"),wBo=l(),C2=a("li"),vge=a("strong"),ABo=o("gpt2"),LBo=o(" \u2014 "),_O=a("a"),yBo=o("GPT2ForSequenceClassification"),xBo=o(" (OpenAI GPT-2 model)"),$Bo=l(),w2=a("li"),Fge=a("strong"),kBo=o("gpt_neo"),SBo=o(" \u2014 "),uO=a("a"),RBo=o("GPTNeoForSequenceClassification"),PBo=o(" (GPT Neo model)"),BBo=l(),A2=a("li"),Tge=a("strong"),IBo=o("gptj"),NBo=o(" \u2014 "),bO=a("a"),qBo=o("GPTJForSequenceClassification"),jBo=o(" (GPT-J model)"),DBo=l(),L2=a("li"),Mge=a("strong"),GBo=o("ibert"),OBo=o(" \u2014 "),vO=a("a"),VBo=o("IBertForSequenceClassification"),XBo=o(" (I-BERT model)"),zBo=l(),y2=a("li"),Ege=a("strong"),WBo=o("layoutlm"),QBo=o(" \u2014 "),FO=a("a"),HBo=o("LayoutLMForSequenceClassification"),UBo=o(" (LayoutLM model)"),JBo=l(),x2=a("li"),Cge=a("strong"),YBo=o("layoutlmv2"),KBo=o(" \u2014 "),TO=a("a"),ZBo=o("LayoutLMv2ForSequenceClassification"),eIo=o(" (LayoutLMv2 model)"),oIo=l(),$2=a("li"),wge=a("strong"),rIo=o("layoutlmv3"),tIo=o(" \u2014 "),MO=a("a"),aIo=o("LayoutLMv3ForSequenceClassification"),nIo=o(" (LayoutLMv3 model)"),sIo=l(),k2=a("li"),Age=a("strong"),lIo=o("led"),iIo=o(" \u2014 "),EO=a("a"),dIo=o("LEDForSequenceClassification"),cIo=o(" (LED model)"),fIo=l(),S2=a("li"),Lge=a("strong"),mIo=o("longformer"),gIo=o(" \u2014 "),CO=a("a"),hIo=o("LongformerForSequenceClassification"),pIo=o(" (Longformer model)"),_Io=l(),R2=a("li"),yge=a("strong"),uIo=o("mbart"),bIo=o(" \u2014 "),wO=a("a"),vIo=o("MBartForSequenceClassification"),FIo=o(" (mBART model)"),TIo=l(),P2=a("li"),xge=a("strong"),MIo=o("megatron-bert"),EIo=o(" \u2014 "),AO=a("a"),CIo=o("MegatronBertForSequenceClassification"),wIo=o(" (Megatron-BERT model)"),AIo=l(),B2=a("li"),$ge=a("strong"),LIo=o("mobilebert"),yIo=o(" \u2014 "),LO=a("a"),xIo=o("MobileBertForSequenceClassification"),$Io=o(" (MobileBERT model)"),kIo=l(),I2=a("li"),kge=a("strong"),SIo=o("mpnet"),RIo=o(" \u2014 "),yO=a("a"),PIo=o("MPNetForSequenceClassification"),BIo=o(" (MPNet model)"),IIo=l(),N2=a("li"),Sge=a("strong"),NIo=o("nystromformer"),qIo=o(" \u2014 "),xO=a("a"),jIo=o("NystromformerForSequenceClassification"),DIo=o(" (Nystr\xF6mformer model)"),GIo=l(),q2=a("li"),Rge=a("strong"),OIo=o("openai-gpt"),VIo=o(" \u2014 "),$O=a("a"),XIo=o("OpenAIGPTForSequenceClassification"),zIo=o(" (OpenAI GPT model)"),WIo=l(),j2=a("li"),Pge=a("strong"),QIo=o("perceiver"),HIo=o(" \u2014 "),kO=a("a"),UIo=o("PerceiverForSequenceClassification"),JIo=o(" (Perceiver model)"),YIo=l(),D2=a("li"),Bge=a("strong"),KIo=o("plbart"),ZIo=o(" \u2014 "),SO=a("a"),eNo=o("PLBartForSequenceClassification"),oNo=o(" (PLBart model)"),rNo=l(),G2=a("li"),Ige=a("strong"),tNo=o("qdqbert"),aNo=o(" \u2014 "),RO=a("a"),nNo=o("QDQBertForSequenceClassification"),sNo=o(" (QDQBert model)"),lNo=l(),O2=a("li"),Nge=a("strong"),iNo=o("reformer"),dNo=o(" \u2014 "),PO=a("a"),cNo=o("ReformerForSequenceClassification"),fNo=o(" (Reformer model)"),mNo=l(),V2=a("li"),qge=a("strong"),gNo=o("rembert"),hNo=o(" \u2014 "),BO=a("a"),pNo=o("RemBertForSequenceClassification"),_No=o(" (RemBERT model)"),uNo=l(),X2=a("li"),jge=a("strong"),bNo=o("roberta"),vNo=o(" \u2014 "),IO=a("a"),FNo=o("RobertaForSequenceClassification"),TNo=o(" (RoBERTa model)"),MNo=l(),z2=a("li"),Dge=a("strong"),ENo=o("roformer"),CNo=o(" \u2014 "),NO=a("a"),wNo=o("RoFormerForSequenceClassification"),ANo=o(" (RoFormer model)"),LNo=l(),W2=a("li"),Gge=a("strong"),yNo=o("squeezebert"),xNo=o(" \u2014 "),qO=a("a"),$No=o("SqueezeBertForSequenceClassification"),kNo=o(" (SqueezeBERT model)"),SNo=l(),Q2=a("li"),Oge=a("strong"),RNo=o("tapas"),PNo=o(" \u2014 "),jO=a("a"),BNo=o("TapasForSequenceClassification"),INo=o(" (TAPAS model)"),NNo=l(),H2=a("li"),Vge=a("strong"),qNo=o("transfo-xl"),jNo=o(" \u2014 "),DO=a("a"),DNo=o("TransfoXLForSequenceClassification"),GNo=o(" (Transformer-XL model)"),ONo=l(),U2=a("li"),Xge=a("strong"),VNo=o("xlm"),XNo=o(" \u2014 "),GO=a("a"),zNo=o("XLMForSequenceClassification"),WNo=o(" (XLM model)"),QNo=l(),J2=a("li"),zge=a("strong"),HNo=o("xlm-roberta"),UNo=o(" \u2014 "),OO=a("a"),JNo=o("XLMRobertaForSequenceClassification"),YNo=o(" (XLM-RoBERTa model)"),KNo=l(),Y2=a("li"),Wge=a("strong"),ZNo=o("xlm-roberta-xl"),eqo=o(" \u2014 "),VO=a("a"),oqo=o("XLMRobertaXLForSequenceClassification"),rqo=o(" (XLM-RoBERTa-XL model)"),tqo=l(),K2=a("li"),Qge=a("strong"),aqo=o("xlnet"),nqo=o(" \u2014 "),XO=a("a"),sqo=o("XLNetForSequenceClassification"),lqo=o(" (XLNet model)"),iqo=l(),Z2=a("li"),Hge=a("strong"),dqo=o("yoso"),cqo=o(" \u2014 "),zO=a("a"),fqo=o("YosoForSequenceClassification"),mqo=o(" (YOSO model)"),gqo=l(),e4=a("p"),hqo=o("The model is set in evaluation mode by default using "),Uge=a("code"),pqo=o("model.eval()"),_qo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jge=a("code"),uqo=o("model.train()"),bqo=l(),F(o4.$$.fragment),gDe=l(),zi=a("h2"),r4=a("a"),Yge=a("span"),F(ZL.$$.fragment),vqo=l(),Kge=a("span"),Fqo=o("AutoModelForMultipleChoice"),hDe=l(),Po=a("div"),F(ey.$$.fragment),Tqo=l(),Wi=a("p"),Mqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WO=a("a"),Eqo=o("from_pretrained()"),Cqo=o(" class method or the "),QO=a("a"),wqo=o("from_config()"),Aqo=o(` class
method.`),Lqo=l(),oy=a("p"),yqo=o("This class cannot be instantiated directly using "),Zge=a("code"),xqo=o("__init__()"),$qo=o(" (throws an error)."),kqo=l(),dt=a("div"),F(ry.$$.fragment),Sqo=l(),ehe=a("p"),Rqo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Pqo=l(),Qi=a("p"),Bqo=o(`Note:
Loading a model from its configuration file does `),ohe=a("strong"),Iqo=o("not"),Nqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=a("a"),qqo=o("from_pretrained()"),jqo=o(" to load the model weights."),Dqo=l(),F(t4.$$.fragment),Gqo=l(),ro=a("div"),F(ty.$$.fragment),Oqo=l(),rhe=a("p"),Vqo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Xqo=l(),Pa=a("p"),zqo=o("The model class to instantiate is selected based on the "),the=a("code"),Wqo=o("model_type"),Qqo=o(` property of the config object (either
passed as an argument or loaded from `),ahe=a("code"),Hqo=o("pretrained_model_name_or_path"),Uqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=a("code"),Jqo=o("pretrained_model_name_or_path"),Yqo=o(":"),Kqo=l(),Z=a("ul"),a4=a("li"),she=a("strong"),Zqo=o("albert"),ejo=o(" \u2014 "),UO=a("a"),ojo=o("AlbertForMultipleChoice"),rjo=o(" (ALBERT model)"),tjo=l(),n4=a("li"),lhe=a("strong"),ajo=o("bert"),njo=o(" \u2014 "),JO=a("a"),sjo=o("BertForMultipleChoice"),ljo=o(" (BERT model)"),ijo=l(),s4=a("li"),ihe=a("strong"),djo=o("big_bird"),cjo=o(" \u2014 "),YO=a("a"),fjo=o("BigBirdForMultipleChoice"),mjo=o(" (BigBird model)"),gjo=l(),l4=a("li"),dhe=a("strong"),hjo=o("camembert"),pjo=o(" \u2014 "),KO=a("a"),_jo=o("CamembertForMultipleChoice"),ujo=o(" (CamemBERT model)"),bjo=l(),i4=a("li"),che=a("strong"),vjo=o("canine"),Fjo=o(" \u2014 "),ZO=a("a"),Tjo=o("CanineForMultipleChoice"),Mjo=o(" (CANINE model)"),Ejo=l(),d4=a("li"),fhe=a("strong"),Cjo=o("convbert"),wjo=o(" \u2014 "),eV=a("a"),Ajo=o("ConvBertForMultipleChoice"),Ljo=o(" (ConvBERT model)"),yjo=l(),c4=a("li"),mhe=a("strong"),xjo=o("data2vec-text"),$jo=o(" \u2014 "),oV=a("a"),kjo=o("Data2VecTextForMultipleChoice"),Sjo=o(" (Data2VecText model)"),Rjo=l(),f4=a("li"),ghe=a("strong"),Pjo=o("deberta-v2"),Bjo=o(" \u2014 "),rV=a("a"),Ijo=o("DebertaV2ForMultipleChoice"),Njo=o(" (DeBERTa-v2 model)"),qjo=l(),m4=a("li"),hhe=a("strong"),jjo=o("distilbert"),Djo=o(" \u2014 "),tV=a("a"),Gjo=o("DistilBertForMultipleChoice"),Ojo=o(" (DistilBERT model)"),Vjo=l(),g4=a("li"),phe=a("strong"),Xjo=o("electra"),zjo=o(" \u2014 "),aV=a("a"),Wjo=o("ElectraForMultipleChoice"),Qjo=o(" (ELECTRA model)"),Hjo=l(),h4=a("li"),_he=a("strong"),Ujo=o("flaubert"),Jjo=o(" \u2014 "),nV=a("a"),Yjo=o("FlaubertForMultipleChoice"),Kjo=o(" (FlauBERT model)"),Zjo=l(),p4=a("li"),uhe=a("strong"),eDo=o("fnet"),oDo=o(" \u2014 "),sV=a("a"),rDo=o("FNetForMultipleChoice"),tDo=o(" (FNet model)"),aDo=l(),_4=a("li"),bhe=a("strong"),nDo=o("funnel"),sDo=o(" \u2014 "),lV=a("a"),lDo=o("FunnelForMultipleChoice"),iDo=o(" (Funnel Transformer model)"),dDo=l(),u4=a("li"),vhe=a("strong"),cDo=o("greaselm"),fDo=o(" \u2014 "),iV=a("a"),mDo=o("GreaseLMForMultipleChoice"),gDo=o(" (GreaseLM model)"),hDo=l(),b4=a("li"),Fhe=a("strong"),pDo=o("ibert"),_Do=o(" \u2014 "),dV=a("a"),uDo=o("IBertForMultipleChoice"),bDo=o(" (I-BERT model)"),vDo=l(),v4=a("li"),The=a("strong"),FDo=o("longformer"),TDo=o(" \u2014 "),cV=a("a"),MDo=o("LongformerForMultipleChoice"),EDo=o(" (Longformer model)"),CDo=l(),F4=a("li"),Mhe=a("strong"),wDo=o("megatron-bert"),ADo=o(" \u2014 "),fV=a("a"),LDo=o("MegatronBertForMultipleChoice"),yDo=o(" (Megatron-BERT model)"),xDo=l(),T4=a("li"),Ehe=a("strong"),$Do=o("mobilebert"),kDo=o(" \u2014 "),mV=a("a"),SDo=o("MobileBertForMultipleChoice"),RDo=o(" (MobileBERT model)"),PDo=l(),M4=a("li"),Che=a("strong"),BDo=o("mpnet"),IDo=o(" \u2014 "),gV=a("a"),NDo=o("MPNetForMultipleChoice"),qDo=o(" (MPNet model)"),jDo=l(),E4=a("li"),whe=a("strong"),DDo=o("nystromformer"),GDo=o(" \u2014 "),hV=a("a"),ODo=o("NystromformerForMultipleChoice"),VDo=o(" (Nystr\xF6mformer model)"),XDo=l(),C4=a("li"),Ahe=a("strong"),zDo=o("qdqbert"),WDo=o(" \u2014 "),pV=a("a"),QDo=o("QDQBertForMultipleChoice"),HDo=o(" (QDQBert model)"),UDo=l(),w4=a("li"),Lhe=a("strong"),JDo=o("rembert"),YDo=o(" \u2014 "),_V=a("a"),KDo=o("RemBertForMultipleChoice"),ZDo=o(" (RemBERT model)"),eGo=l(),A4=a("li"),yhe=a("strong"),oGo=o("roberta"),rGo=o(" \u2014 "),uV=a("a"),tGo=o("RobertaForMultipleChoice"),aGo=o(" (RoBERTa model)"),nGo=l(),L4=a("li"),xhe=a("strong"),sGo=o("roformer"),lGo=o(" \u2014 "),bV=a("a"),iGo=o("RoFormerForMultipleChoice"),dGo=o(" (RoFormer model)"),cGo=l(),y4=a("li"),$he=a("strong"),fGo=o("squeezebert"),mGo=o(" \u2014 "),vV=a("a"),gGo=o("SqueezeBertForMultipleChoice"),hGo=o(" (SqueezeBERT model)"),pGo=l(),x4=a("li"),khe=a("strong"),_Go=o("xlm"),uGo=o(" \u2014 "),FV=a("a"),bGo=o("XLMForMultipleChoice"),vGo=o(" (XLM model)"),FGo=l(),$4=a("li"),She=a("strong"),TGo=o("xlm-roberta"),MGo=o(" \u2014 "),TV=a("a"),EGo=o("XLMRobertaForMultipleChoice"),CGo=o(" (XLM-RoBERTa model)"),wGo=l(),k4=a("li"),Rhe=a("strong"),AGo=o("xlm-roberta-xl"),LGo=o(" \u2014 "),MV=a("a"),yGo=o("XLMRobertaXLForMultipleChoice"),xGo=o(" (XLM-RoBERTa-XL model)"),$Go=l(),S4=a("li"),Phe=a("strong"),kGo=o("xlnet"),SGo=o(" \u2014 "),EV=a("a"),RGo=o("XLNetForMultipleChoice"),PGo=o(" (XLNet model)"),BGo=l(),R4=a("li"),Bhe=a("strong"),IGo=o("yoso"),NGo=o(" \u2014 "),CV=a("a"),qGo=o("YosoForMultipleChoice"),jGo=o(" (YOSO model)"),DGo=l(),P4=a("p"),GGo=o("The model is set in evaluation mode by default using "),Ihe=a("code"),OGo=o("model.eval()"),VGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=a("code"),XGo=o("model.train()"),zGo=l(),F(B4.$$.fragment),pDe=l(),Hi=a("h2"),I4=a("a"),qhe=a("span"),F(ay.$$.fragment),WGo=l(),jhe=a("span"),QGo=o("AutoModelForNextSentencePrediction"),_De=l(),Bo=a("div"),F(ny.$$.fragment),HGo=l(),Ui=a("p"),UGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),wV=a("a"),JGo=o("from_pretrained()"),YGo=o(" class method or the "),AV=a("a"),KGo=o("from_config()"),ZGo=o(` class
method.`),eOo=l(),sy=a("p"),oOo=o("This class cannot be instantiated directly using "),Dhe=a("code"),rOo=o("__init__()"),tOo=o(" (throws an error)."),aOo=l(),ct=a("div"),F(ly.$$.fragment),nOo=l(),Ghe=a("p"),sOo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lOo=l(),Ji=a("p"),iOo=o(`Note:
Loading a model from its configuration file does `),Ohe=a("strong"),dOo=o("not"),cOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=a("a"),fOo=o("from_pretrained()"),mOo=o(" to load the model weights."),gOo=l(),F(N4.$$.fragment),hOo=l(),to=a("div"),F(iy.$$.fragment),pOo=l(),Vhe=a("p"),_Oo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uOo=l(),Ba=a("p"),bOo=o("The model class to instantiate is selected based on the "),Xhe=a("code"),vOo=o("model_type"),FOo=o(` property of the config object (either
passed as an argument or loaded from `),zhe=a("code"),TOo=o("pretrained_model_name_or_path"),MOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Whe=a("code"),EOo=o("pretrained_model_name_or_path"),COo=o(":"),wOo=l(),Yr=a("ul"),q4=a("li"),Qhe=a("strong"),AOo=o("bert"),LOo=o(" \u2014 "),yV=a("a"),yOo=o("BertForNextSentencePrediction"),xOo=o(" (BERT model)"),$Oo=l(),j4=a("li"),Hhe=a("strong"),kOo=o("fnet"),SOo=o(" \u2014 "),xV=a("a"),ROo=o("FNetForNextSentencePrediction"),POo=o(" (FNet model)"),BOo=l(),D4=a("li"),Uhe=a("strong"),IOo=o("megatron-bert"),NOo=o(" \u2014 "),$V=a("a"),qOo=o("MegatronBertForNextSentencePrediction"),jOo=o(" (Megatron-BERT model)"),DOo=l(),G4=a("li"),Jhe=a("strong"),GOo=o("mobilebert"),OOo=o(" \u2014 "),kV=a("a"),VOo=o("MobileBertForNextSentencePrediction"),XOo=o(" (MobileBERT model)"),zOo=l(),O4=a("li"),Yhe=a("strong"),WOo=o("qdqbert"),QOo=o(" \u2014 "),SV=a("a"),HOo=o("QDQBertForNextSentencePrediction"),UOo=o(" (QDQBert model)"),JOo=l(),V4=a("p"),YOo=o("The model is set in evaluation mode by default using "),Khe=a("code"),KOo=o("model.eval()"),ZOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=a("code"),eVo=o("model.train()"),oVo=l(),F(X4.$$.fragment),uDe=l(),Yi=a("h2"),z4=a("a"),epe=a("span"),F(dy.$$.fragment),rVo=l(),ope=a("span"),tVo=o("AutoModelForTokenClassification"),bDe=l(),Io=a("div"),F(cy.$$.fragment),aVo=l(),Ki=a("p"),nVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RV=a("a"),sVo=o("from_pretrained()"),lVo=o(" class method or the "),PV=a("a"),iVo=o("from_config()"),dVo=o(` class
method.`),cVo=l(),fy=a("p"),fVo=o("This class cannot be instantiated directly using "),rpe=a("code"),mVo=o("__init__()"),gVo=o(" (throws an error)."),hVo=l(),ft=a("div"),F(my.$$.fragment),pVo=l(),tpe=a("p"),_Vo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uVo=l(),Zi=a("p"),bVo=o(`Note:
Loading a model from its configuration file does `),ape=a("strong"),vVo=o("not"),FVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=a("a"),TVo=o("from_pretrained()"),MVo=o(" to load the model weights."),EVo=l(),F(W4.$$.fragment),CVo=l(),ao=a("div"),F(gy.$$.fragment),wVo=l(),npe=a("p"),AVo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),LVo=l(),Ia=a("p"),yVo=o("The model class to instantiate is selected based on the "),spe=a("code"),xVo=o("model_type"),$Vo=o(` property of the config object (either
passed as an argument or loaded from `),lpe=a("code"),kVo=o("pretrained_model_name_or_path"),SVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=a("code"),RVo=o("pretrained_model_name_or_path"),PVo=o(":"),BVo=l(),U=a("ul"),Q4=a("li"),dpe=a("strong"),IVo=o("albert"),NVo=o(" \u2014 "),IV=a("a"),qVo=o("AlbertForTokenClassification"),jVo=o(" (ALBERT model)"),DVo=l(),H4=a("li"),cpe=a("strong"),GVo=o("bert"),OVo=o(" \u2014 "),NV=a("a"),VVo=o("BertForTokenClassification"),XVo=o(" (BERT model)"),zVo=l(),U4=a("li"),fpe=a("strong"),WVo=o("big_bird"),QVo=o(" \u2014 "),qV=a("a"),HVo=o("BigBirdForTokenClassification"),UVo=o(" (BigBird model)"),JVo=l(),J4=a("li"),mpe=a("strong"),YVo=o("camembert"),KVo=o(" \u2014 "),jV=a("a"),ZVo=o("CamembertForTokenClassification"),eXo=o(" (CamemBERT model)"),oXo=l(),Y4=a("li"),gpe=a("strong"),rXo=o("canine"),tXo=o(" \u2014 "),DV=a("a"),aXo=o("CanineForTokenClassification"),nXo=o(" (CANINE model)"),sXo=l(),K4=a("li"),hpe=a("strong"),lXo=o("convbert"),iXo=o(" \u2014 "),GV=a("a"),dXo=o("ConvBertForTokenClassification"),cXo=o(" (ConvBERT model)"),fXo=l(),Z4=a("li"),ppe=a("strong"),mXo=o("data2vec-text"),gXo=o(" \u2014 "),OV=a("a"),hXo=o("Data2VecTextForTokenClassification"),pXo=o(" (Data2VecText model)"),_Xo=l(),ev=a("li"),_pe=a("strong"),uXo=o("deberta"),bXo=o(" \u2014 "),VV=a("a"),vXo=o("DebertaForTokenClassification"),FXo=o(" (DeBERTa model)"),TXo=l(),ov=a("li"),upe=a("strong"),MXo=o("deberta-v2"),EXo=o(" \u2014 "),XV=a("a"),CXo=o("DebertaV2ForTokenClassification"),wXo=o(" (DeBERTa-v2 model)"),AXo=l(),rv=a("li"),bpe=a("strong"),LXo=o("distilbert"),yXo=o(" \u2014 "),zV=a("a"),xXo=o("DistilBertForTokenClassification"),$Xo=o(" (DistilBERT model)"),kXo=l(),tv=a("li"),vpe=a("strong"),SXo=o("electra"),RXo=o(" \u2014 "),WV=a("a"),PXo=o("ElectraForTokenClassification"),BXo=o(" (ELECTRA model)"),IXo=l(),av=a("li"),Fpe=a("strong"),NXo=o("flaubert"),qXo=o(" \u2014 "),QV=a("a"),jXo=o("FlaubertForTokenClassification"),DXo=o(" (FlauBERT model)"),GXo=l(),nv=a("li"),Tpe=a("strong"),OXo=o("fnet"),VXo=o(" \u2014 "),HV=a("a"),XXo=o("FNetForTokenClassification"),zXo=o(" (FNet model)"),WXo=l(),sv=a("li"),Mpe=a("strong"),QXo=o("funnel"),HXo=o(" \u2014 "),UV=a("a"),UXo=o("FunnelForTokenClassification"),JXo=o(" (Funnel Transformer model)"),YXo=l(),lv=a("li"),Epe=a("strong"),KXo=o("gpt2"),ZXo=o(" \u2014 "),JV=a("a"),ezo=o("GPT2ForTokenClassification"),ozo=o(" (OpenAI GPT-2 model)"),rzo=l(),iv=a("li"),Cpe=a("strong"),tzo=o("ibert"),azo=o(" \u2014 "),YV=a("a"),nzo=o("IBertForTokenClassification"),szo=o(" (I-BERT model)"),lzo=l(),dv=a("li"),wpe=a("strong"),izo=o("layoutlm"),dzo=o(" \u2014 "),KV=a("a"),czo=o("LayoutLMForTokenClassification"),fzo=o(" (LayoutLM model)"),mzo=l(),cv=a("li"),Ape=a("strong"),gzo=o("layoutlmv2"),hzo=o(" \u2014 "),ZV=a("a"),pzo=o("LayoutLMv2ForTokenClassification"),_zo=o(" (LayoutLMv2 model)"),uzo=l(),fv=a("li"),Lpe=a("strong"),bzo=o("layoutlmv3"),vzo=o(" \u2014 "),eX=a("a"),Fzo=o("LayoutLMv3ForTokenClassification"),Tzo=o(" (LayoutLMv3 model)"),Mzo=l(),mv=a("li"),ype=a("strong"),Ezo=o("longformer"),Czo=o(" \u2014 "),oX=a("a"),wzo=o("LongformerForTokenClassification"),Azo=o(" (Longformer model)"),Lzo=l(),gv=a("li"),xpe=a("strong"),yzo=o("megatron-bert"),xzo=o(" \u2014 "),rX=a("a"),$zo=o("MegatronBertForTokenClassification"),kzo=o(" (Megatron-BERT model)"),Szo=l(),hv=a("li"),$pe=a("strong"),Rzo=o("mobilebert"),Pzo=o(" \u2014 "),tX=a("a"),Bzo=o("MobileBertForTokenClassification"),Izo=o(" (MobileBERT model)"),Nzo=l(),pv=a("li"),kpe=a("strong"),qzo=o("mpnet"),jzo=o(" \u2014 "),aX=a("a"),Dzo=o("MPNetForTokenClassification"),Gzo=o(" (MPNet model)"),Ozo=l(),_v=a("li"),Spe=a("strong"),Vzo=o("nystromformer"),Xzo=o(" \u2014 "),nX=a("a"),zzo=o("NystromformerForTokenClassification"),Wzo=o(" (Nystr\xF6mformer model)"),Qzo=l(),uv=a("li"),Rpe=a("strong"),Hzo=o("qdqbert"),Uzo=o(" \u2014 "),sX=a("a"),Jzo=o("QDQBertForTokenClassification"),Yzo=o(" (QDQBert model)"),Kzo=l(),bv=a("li"),Ppe=a("strong"),Zzo=o("rembert"),eWo=o(" \u2014 "),lX=a("a"),oWo=o("RemBertForTokenClassification"),rWo=o(" (RemBERT model)"),tWo=l(),vv=a("li"),Bpe=a("strong"),aWo=o("roberta"),nWo=o(" \u2014 "),iX=a("a"),sWo=o("RobertaForTokenClassification"),lWo=o(" (RoBERTa model)"),iWo=l(),Fv=a("li"),Ipe=a("strong"),dWo=o("roformer"),cWo=o(" \u2014 "),dX=a("a"),fWo=o("RoFormerForTokenClassification"),mWo=o(" (RoFormer model)"),gWo=l(),Tv=a("li"),Npe=a("strong"),hWo=o("squeezebert"),pWo=o(" \u2014 "),cX=a("a"),_Wo=o("SqueezeBertForTokenClassification"),uWo=o(" (SqueezeBERT model)"),bWo=l(),Mv=a("li"),qpe=a("strong"),vWo=o("xlm"),FWo=o(" \u2014 "),fX=a("a"),TWo=o("XLMForTokenClassification"),MWo=o(" (XLM model)"),EWo=l(),Ev=a("li"),jpe=a("strong"),CWo=o("xlm-roberta"),wWo=o(" \u2014 "),mX=a("a"),AWo=o("XLMRobertaForTokenClassification"),LWo=o(" (XLM-RoBERTa model)"),yWo=l(),Cv=a("li"),Dpe=a("strong"),xWo=o("xlm-roberta-xl"),$Wo=o(" \u2014 "),gX=a("a"),kWo=o("XLMRobertaXLForTokenClassification"),SWo=o(" (XLM-RoBERTa-XL model)"),RWo=l(),wv=a("li"),Gpe=a("strong"),PWo=o("xlnet"),BWo=o(" \u2014 "),hX=a("a"),IWo=o("XLNetForTokenClassification"),NWo=o(" (XLNet model)"),qWo=l(),Av=a("li"),Ope=a("strong"),jWo=o("yoso"),DWo=o(" \u2014 "),pX=a("a"),GWo=o("YosoForTokenClassification"),OWo=o(" (YOSO model)"),VWo=l(),Lv=a("p"),XWo=o("The model is set in evaluation mode by default using "),Vpe=a("code"),zWo=o("model.eval()"),WWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=a("code"),QWo=o("model.train()"),HWo=l(),F(yv.$$.fragment),vDe=l(),ed=a("h2"),xv=a("a"),zpe=a("span"),F(hy.$$.fragment),UWo=l(),Wpe=a("span"),JWo=o("AutoModelForQuestionAnswering"),FDe=l(),No=a("div"),F(py.$$.fragment),YWo=l(),od=a("p"),KWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_X=a("a"),ZWo=o("from_pretrained()"),eQo=o(" class method or the "),uX=a("a"),oQo=o("from_config()"),rQo=o(` class
method.`),tQo=l(),_y=a("p"),aQo=o("This class cannot be instantiated directly using "),Qpe=a("code"),nQo=o("__init__()"),sQo=o(" (throws an error)."),lQo=l(),mt=a("div"),F(uy.$$.fragment),iQo=l(),Hpe=a("p"),dQo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cQo=l(),rd=a("p"),fQo=o(`Note:
Loading a model from its configuration file does `),Upe=a("strong"),mQo=o("not"),gQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),hQo=o("from_pretrained()"),pQo=o(" to load the model weights."),_Qo=l(),F($v.$$.fragment),uQo=l(),no=a("div"),F(by.$$.fragment),bQo=l(),Jpe=a("p"),vQo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FQo=l(),Na=a("p"),TQo=o("The model class to instantiate is selected based on the "),Ype=a("code"),MQo=o("model_type"),EQo=o(` property of the config object (either
passed as an argument or loaded from `),Kpe=a("code"),CQo=o("pretrained_model_name_or_path"),wQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=a("code"),AQo=o("pretrained_model_name_or_path"),LQo=o(":"),yQo=l(),V=a("ul"),kv=a("li"),e_e=a("strong"),xQo=o("albert"),$Qo=o(" \u2014 "),vX=a("a"),kQo=o("AlbertForQuestionAnswering"),SQo=o(" (ALBERT model)"),RQo=l(),Sv=a("li"),o_e=a("strong"),PQo=o("bart"),BQo=o(" \u2014 "),FX=a("a"),IQo=o("BartForQuestionAnswering"),NQo=o(" (BART model)"),qQo=l(),Rv=a("li"),r_e=a("strong"),jQo=o("bert"),DQo=o(" \u2014 "),TX=a("a"),GQo=o("BertForQuestionAnswering"),OQo=o(" (BERT model)"),VQo=l(),Pv=a("li"),t_e=a("strong"),XQo=o("big_bird"),zQo=o(" \u2014 "),MX=a("a"),WQo=o("BigBirdForQuestionAnswering"),QQo=o(" (BigBird model)"),HQo=l(),Bv=a("li"),a_e=a("strong"),UQo=o("bigbird_pegasus"),JQo=o(" \u2014 "),EX=a("a"),YQo=o("BigBirdPegasusForQuestionAnswering"),KQo=o(" (BigBird-Pegasus model)"),ZQo=l(),Iv=a("li"),n_e=a("strong"),eHo=o("camembert"),oHo=o(" \u2014 "),CX=a("a"),rHo=o("CamembertForQuestionAnswering"),tHo=o(" (CamemBERT model)"),aHo=l(),Nv=a("li"),s_e=a("strong"),nHo=o("canine"),sHo=o(" \u2014 "),wX=a("a"),lHo=o("CanineForQuestionAnswering"),iHo=o(" (CANINE model)"),dHo=l(),qv=a("li"),l_e=a("strong"),cHo=o("convbert"),fHo=o(" \u2014 "),AX=a("a"),mHo=o("ConvBertForQuestionAnswering"),gHo=o(" (ConvBERT model)"),hHo=l(),jv=a("li"),i_e=a("strong"),pHo=o("data2vec-text"),_Ho=o(" \u2014 "),LX=a("a"),uHo=o("Data2VecTextForQuestionAnswering"),bHo=o(" (Data2VecText model)"),vHo=l(),Dv=a("li"),d_e=a("strong"),FHo=o("deberta"),THo=o(" \u2014 "),yX=a("a"),MHo=o("DebertaForQuestionAnswering"),EHo=o(" (DeBERTa model)"),CHo=l(),Gv=a("li"),c_e=a("strong"),wHo=o("deberta-v2"),AHo=o(" \u2014 "),xX=a("a"),LHo=o("DebertaV2ForQuestionAnswering"),yHo=o(" (DeBERTa-v2 model)"),xHo=l(),Ov=a("li"),f_e=a("strong"),$Ho=o("distilbert"),kHo=o(" \u2014 "),$X=a("a"),SHo=o("DistilBertForQuestionAnswering"),RHo=o(" (DistilBERT model)"),PHo=l(),Vv=a("li"),m_e=a("strong"),BHo=o("electra"),IHo=o(" \u2014 "),kX=a("a"),NHo=o("ElectraForQuestionAnswering"),qHo=o(" (ELECTRA model)"),jHo=l(),Xv=a("li"),g_e=a("strong"),DHo=o("flaubert"),GHo=o(" \u2014 "),SX=a("a"),OHo=o("FlaubertForQuestionAnsweringSimple"),VHo=o(" (FlauBERT model)"),XHo=l(),zv=a("li"),h_e=a("strong"),zHo=o("fnet"),WHo=o(" \u2014 "),RX=a("a"),QHo=o("FNetForQuestionAnswering"),HHo=o(" (FNet model)"),UHo=l(),Wv=a("li"),p_e=a("strong"),JHo=o("funnel"),YHo=o(" \u2014 "),PX=a("a"),KHo=o("FunnelForQuestionAnswering"),ZHo=o(" (Funnel Transformer model)"),eUo=l(),Qv=a("li"),__e=a("strong"),oUo=o("gptj"),rUo=o(" \u2014 "),BX=a("a"),tUo=o("GPTJForQuestionAnswering"),aUo=o(" (GPT-J model)"),nUo=l(),Hv=a("li"),u_e=a("strong"),sUo=o("ibert"),lUo=o(" \u2014 "),IX=a("a"),iUo=o("IBertForQuestionAnswering"),dUo=o(" (I-BERT model)"),cUo=l(),Uv=a("li"),b_e=a("strong"),fUo=o("layoutlmv2"),mUo=o(" \u2014 "),NX=a("a"),gUo=o("LayoutLMv2ForQuestionAnswering"),hUo=o(" (LayoutLMv2 model)"),pUo=l(),Jv=a("li"),v_e=a("strong"),_Uo=o("layoutlmv3"),uUo=o(" \u2014 "),qX=a("a"),bUo=o("LayoutLMv3ForQuestionAnswering"),vUo=o(" (LayoutLMv3 model)"),FUo=l(),Yv=a("li"),F_e=a("strong"),TUo=o("led"),MUo=o(" \u2014 "),jX=a("a"),EUo=o("LEDForQuestionAnswering"),CUo=o(" (LED model)"),wUo=l(),Kv=a("li"),T_e=a("strong"),AUo=o("longformer"),LUo=o(" \u2014 "),DX=a("a"),yUo=o("LongformerForQuestionAnswering"),xUo=o(" (Longformer model)"),$Uo=l(),Zv=a("li"),M_e=a("strong"),kUo=o("lxmert"),SUo=o(" \u2014 "),GX=a("a"),RUo=o("LxmertForQuestionAnswering"),PUo=o(" (LXMERT model)"),BUo=l(),eF=a("li"),E_e=a("strong"),IUo=o("mbart"),NUo=o(" \u2014 "),OX=a("a"),qUo=o("MBartForQuestionAnswering"),jUo=o(" (mBART model)"),DUo=l(),oF=a("li"),C_e=a("strong"),GUo=o("megatron-bert"),OUo=o(" \u2014 "),VX=a("a"),VUo=o("MegatronBertForQuestionAnswering"),XUo=o(" (Megatron-BERT model)"),zUo=l(),rF=a("li"),w_e=a("strong"),WUo=o("mobilebert"),QUo=o(" \u2014 "),XX=a("a"),HUo=o("MobileBertForQuestionAnswering"),UUo=o(" (MobileBERT model)"),JUo=l(),tF=a("li"),A_e=a("strong"),YUo=o("mpnet"),KUo=o(" \u2014 "),zX=a("a"),ZUo=o("MPNetForQuestionAnswering"),eJo=o(" (MPNet model)"),oJo=l(),aF=a("li"),L_e=a("strong"),rJo=o("nystromformer"),tJo=o(" \u2014 "),WX=a("a"),aJo=o("NystromformerForQuestionAnswering"),nJo=o(" (Nystr\xF6mformer model)"),sJo=l(),nF=a("li"),y_e=a("strong"),lJo=o("qdqbert"),iJo=o(" \u2014 "),QX=a("a"),dJo=o("QDQBertForQuestionAnswering"),cJo=o(" (QDQBert model)"),fJo=l(),sF=a("li"),x_e=a("strong"),mJo=o("reformer"),gJo=o(" \u2014 "),HX=a("a"),hJo=o("ReformerForQuestionAnswering"),pJo=o(" (Reformer model)"),_Jo=l(),lF=a("li"),$_e=a("strong"),uJo=o("rembert"),bJo=o(" \u2014 "),UX=a("a"),vJo=o("RemBertForQuestionAnswering"),FJo=o(" (RemBERT model)"),TJo=l(),iF=a("li"),k_e=a("strong"),MJo=o("roberta"),EJo=o(" \u2014 "),JX=a("a"),CJo=o("RobertaForQuestionAnswering"),wJo=o(" (RoBERTa model)"),AJo=l(),dF=a("li"),S_e=a("strong"),LJo=o("roformer"),yJo=o(" \u2014 "),YX=a("a"),xJo=o("RoFormerForQuestionAnswering"),$Jo=o(" (RoFormer model)"),kJo=l(),cF=a("li"),R_e=a("strong"),SJo=o("splinter"),RJo=o(" \u2014 "),KX=a("a"),PJo=o("SplinterForQuestionAnswering"),BJo=o(" (Splinter model)"),IJo=l(),fF=a("li"),P_e=a("strong"),NJo=o("squeezebert"),qJo=o(" \u2014 "),ZX=a("a"),jJo=o("SqueezeBertForQuestionAnswering"),DJo=o(" (SqueezeBERT model)"),GJo=l(),mF=a("li"),B_e=a("strong"),OJo=o("xlm"),VJo=o(" \u2014 "),ez=a("a"),XJo=o("XLMForQuestionAnsweringSimple"),zJo=o(" (XLM model)"),WJo=l(),gF=a("li"),I_e=a("strong"),QJo=o("xlm-roberta"),HJo=o(" \u2014 "),oz=a("a"),UJo=o("XLMRobertaForQuestionAnswering"),JJo=o(" (XLM-RoBERTa model)"),YJo=l(),hF=a("li"),N_e=a("strong"),KJo=o("xlm-roberta-xl"),ZJo=o(" \u2014 "),rz=a("a"),eYo=o("XLMRobertaXLForQuestionAnswering"),oYo=o(" (XLM-RoBERTa-XL model)"),rYo=l(),pF=a("li"),q_e=a("strong"),tYo=o("xlnet"),aYo=o(" \u2014 "),tz=a("a"),nYo=o("XLNetForQuestionAnsweringSimple"),sYo=o(" (XLNet model)"),lYo=l(),_F=a("li"),j_e=a("strong"),iYo=o("yoso"),dYo=o(" \u2014 "),az=a("a"),cYo=o("YosoForQuestionAnswering"),fYo=o(" (YOSO model)"),mYo=l(),uF=a("p"),gYo=o("The model is set in evaluation mode by default using "),D_e=a("code"),hYo=o("model.eval()"),pYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=a("code"),_Yo=o("model.train()"),uYo=l(),F(bF.$$.fragment),TDe=l(),td=a("h2"),vF=a("a"),O_e=a("span"),F(vy.$$.fragment),bYo=l(),V_e=a("span"),vYo=o("AutoModelForTableQuestionAnswering"),MDe=l(),qo=a("div"),F(Fy.$$.fragment),FYo=l(),ad=a("p"),TYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nz=a("a"),MYo=o("from_pretrained()"),EYo=o(" class method or the "),sz=a("a"),CYo=o("from_config()"),wYo=o(` class
method.`),AYo=l(),Ty=a("p"),LYo=o("This class cannot be instantiated directly using "),X_e=a("code"),yYo=o("__init__()"),xYo=o(" (throws an error)."),$Yo=l(),gt=a("div"),F(My.$$.fragment),kYo=l(),z_e=a("p"),SYo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),RYo=l(),nd=a("p"),PYo=o(`Note:
Loading a model from its configuration file does `),W_e=a("strong"),BYo=o("not"),IYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lz=a("a"),NYo=o("from_pretrained()"),qYo=o(" to load the model weights."),jYo=l(),F(FF.$$.fragment),DYo=l(),so=a("div"),F(Ey.$$.fragment),GYo=l(),Q_e=a("p"),OYo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),VYo=l(),qa=a("p"),XYo=o("The model class to instantiate is selected based on the "),H_e=a("code"),zYo=o("model_type"),WYo=o(` property of the config object (either
passed as an argument or loaded from `),U_e=a("code"),QYo=o("pretrained_model_name_or_path"),HYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=a("code"),UYo=o("pretrained_model_name_or_path"),JYo=o(":"),YYo=l(),Y_e=a("ul"),TF=a("li"),K_e=a("strong"),KYo=o("tapas"),ZYo=o(" \u2014 "),iz=a("a"),eKo=o("TapasForQuestionAnswering"),oKo=o(" (TAPAS model)"),rKo=l(),MF=a("p"),tKo=o("The model is set in evaluation mode by default using "),Z_e=a("code"),aKo=o("model.eval()"),nKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=a("code"),sKo=o("model.train()"),lKo=l(),F(EF.$$.fragment),EDe=l(),sd=a("h2"),CF=a("a"),oue=a("span"),F(Cy.$$.fragment),iKo=l(),rue=a("span"),dKo=o("AutoModelForImageClassification"),CDe=l(),jo=a("div"),F(wy.$$.fragment),cKo=l(),ld=a("p"),fKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dz=a("a"),mKo=o("from_pretrained()"),gKo=o(" class method or the "),cz=a("a"),hKo=o("from_config()"),pKo=o(` class
method.`),_Ko=l(),Ay=a("p"),uKo=o("This class cannot be instantiated directly using "),tue=a("code"),bKo=o("__init__()"),vKo=o(" (throws an error)."),FKo=l(),ht=a("div"),F(Ly.$$.fragment),TKo=l(),aue=a("p"),MKo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),EKo=l(),id=a("p"),CKo=o(`Note:
Loading a model from its configuration file does `),nue=a("strong"),wKo=o("not"),AKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=a("a"),LKo=o("from_pretrained()"),yKo=o(" to load the model weights."),xKo=l(),F(wF.$$.fragment),$Ko=l(),lo=a("div"),F(yy.$$.fragment),kKo=l(),sue=a("p"),SKo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),RKo=l(),ja=a("p"),PKo=o("The model class to instantiate is selected based on the "),lue=a("code"),BKo=o("model_type"),IKo=o(` property of the config object (either
passed as an argument or loaded from `),iue=a("code"),NKo=o("pretrained_model_name_or_path"),qKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=a("code"),jKo=o("pretrained_model_name_or_path"),DKo=o(":"),GKo=l(),ve=a("ul"),AF=a("li"),cue=a("strong"),OKo=o("beit"),VKo=o(" \u2014 "),mz=a("a"),XKo=o("BeitForImageClassification"),zKo=o(" (BEiT model)"),WKo=l(),LF=a("li"),fue=a("strong"),QKo=o("convnext"),HKo=o(" \u2014 "),gz=a("a"),UKo=o("ConvNextForImageClassification"),JKo=o(" (ConvNeXT model)"),YKo=l(),yF=a("li"),mue=a("strong"),KKo=o("cvt"),ZKo=o(" \u2014 "),hz=a("a"),eZo=o("CvtForImageClassification"),oZo=o(" (CvT model)"),rZo=l(),xF=a("li"),gue=a("strong"),tZo=o("data2vec-vision"),aZo=o(" \u2014 "),pz=a("a"),nZo=o("Data2VecVisionForImageClassification"),sZo=o(" (Data2VecVision model)"),lZo=l(),Is=a("li"),hue=a("strong"),iZo=o("deit"),dZo=o(" \u2014 "),_z=a("a"),cZo=o("DeiTForImageClassification"),fZo=o(" or "),uz=a("a"),mZo=o("DeiTForImageClassificationWithTeacher"),gZo=o(" (DeiT model)"),hZo=l(),$F=a("li"),pue=a("strong"),pZo=o("imagegpt"),_Zo=o(" \u2014 "),bz=a("a"),uZo=o("ImageGPTForImageClassification"),bZo=o(" (ImageGPT model)"),vZo=l(),Ns=a("li"),_ue=a("strong"),FZo=o("levit"),TZo=o(" \u2014 "),vz=a("a"),MZo=o("LevitForImageClassification"),EZo=o(" or "),Fz=a("a"),CZo=o("LevitForImageClassificationWithTeacher"),wZo=o(" (LeViT model)"),AZo=l(),pt=a("li"),uue=a("strong"),LZo=o("perceiver"),yZo=o(" \u2014 "),Tz=a("a"),xZo=o("PerceiverForImageClassificationLearned"),$Zo=o(" or "),Mz=a("a"),kZo=o("PerceiverForImageClassificationFourier"),SZo=o(" or "),Ez=a("a"),RZo=o("PerceiverForImageClassificationConvProcessing"),PZo=o(" (Perceiver model)"),BZo=l(),kF=a("li"),bue=a("strong"),IZo=o("poolformer"),NZo=o(" \u2014 "),Cz=a("a"),qZo=o("PoolFormerForImageClassification"),jZo=o(" (PoolFormer model)"),DZo=l(),SF=a("li"),vue=a("strong"),GZo=o("regnet"),OZo=o(" \u2014 "),wz=a("a"),VZo=o("RegNetForImageClassification"),XZo=o(" (RegNet model)"),zZo=l(),RF=a("li"),Fue=a("strong"),WZo=o("resnet"),QZo=o(" \u2014 "),Az=a("a"),HZo=o("ResNetForImageClassification"),UZo=o(" (ResNet model)"),JZo=l(),PF=a("li"),Tue=a("strong"),YZo=o("segformer"),KZo=o(" \u2014 "),Lz=a("a"),ZZo=o("SegformerForImageClassification"),eer=o(" (SegFormer model)"),oer=l(),BF=a("li"),Mue=a("strong"),rer=o("swin"),ter=o(" \u2014 "),yz=a("a"),aer=o("SwinForImageClassification"),ner=o(" (Swin Transformer model)"),ser=l(),IF=a("li"),Eue=a("strong"),ler=o("van"),ier=o(" \u2014 "),xz=a("a"),der=o("VanForImageClassification"),cer=o(" (VAN model)"),fer=l(),NF=a("li"),Cue=a("strong"),mer=o("vit"),ger=o(" \u2014 "),$z=a("a"),her=o("ViTForImageClassification"),per=o(" (ViT model)"),_er=l(),qF=a("p"),uer=o("The model is set in evaluation mode by default using "),wue=a("code"),ber=o("model.eval()"),ver=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=a("code"),Fer=o("model.train()"),Ter=l(),F(jF.$$.fragment),wDe=l(),dd=a("h2"),DF=a("a"),Lue=a("span"),F(xy.$$.fragment),Mer=l(),yue=a("span"),Eer=o("AutoModelForVision2Seq"),ADe=l(),Do=a("div"),F($y.$$.fragment),Cer=l(),cd=a("p"),wer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kz=a("a"),Aer=o("from_pretrained()"),Ler=o(" class method or the "),Sz=a("a"),yer=o("from_config()"),xer=o(` class
method.`),$er=l(),ky=a("p"),ker=o("This class cannot be instantiated directly using "),xue=a("code"),Ser=o("__init__()"),Rer=o(" (throws an error)."),Per=l(),_t=a("div"),F(Sy.$$.fragment),Ber=l(),$ue=a("p"),Ier=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ner=l(),fd=a("p"),qer=o(`Note:
Loading a model from its configuration file does `),kue=a("strong"),jer=o("not"),Der=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=a("a"),Ger=o("from_pretrained()"),Oer=o(" to load the model weights."),Ver=l(),F(GF.$$.fragment),Xer=l(),io=a("div"),F(Ry.$$.fragment),zer=l(),Sue=a("p"),Wer=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Qer=l(),Da=a("p"),Her=o("The model class to instantiate is selected based on the "),Rue=a("code"),Uer=o("model_type"),Jer=o(` property of the config object (either
passed as an argument or loaded from `),Pue=a("code"),Yer=o("pretrained_model_name_or_path"),Ker=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=a("code"),Zer=o("pretrained_model_name_or_path"),eor=o(":"),oor=l(),Iue=a("ul"),OF=a("li"),Nue=a("strong"),ror=o("vision-encoder-decoder"),tor=o(" \u2014 "),Pz=a("a"),aor=o("VisionEncoderDecoderModel"),nor=o(" (Vision Encoder decoder model)"),sor=l(),VF=a("p"),lor=o("The model is set in evaluation mode by default using "),que=a("code"),ior=o("model.eval()"),dor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jue=a("code"),cor=o("model.train()"),mor=l(),F(XF.$$.fragment),LDe=l(),md=a("h2"),zF=a("a"),Due=a("span"),F(Py.$$.fragment),gor=l(),Gue=a("span"),hor=o("AutoModelForAudioClassification"),yDe=l(),Go=a("div"),F(By.$$.fragment),por=l(),gd=a("p"),_or=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Bz=a("a"),uor=o("from_pretrained()"),bor=o(" class method or the "),Iz=a("a"),vor=o("from_config()"),For=o(` class
method.`),Tor=l(),Iy=a("p"),Mor=o("This class cannot be instantiated directly using "),Oue=a("code"),Eor=o("__init__()"),Cor=o(" (throws an error)."),wor=l(),ut=a("div"),F(Ny.$$.fragment),Aor=l(),Vue=a("p"),Lor=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),yor=l(),hd=a("p"),xor=o(`Note:
Loading a model from its configuration file does `),Xue=a("strong"),$or=o("not"),kor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),Sor=o("from_pretrained()"),Ror=o(" to load the model weights."),Por=l(),F(WF.$$.fragment),Bor=l(),co=a("div"),F(qy.$$.fragment),Ior=l(),zue=a("p"),Nor=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),qor=l(),Ga=a("p"),jor=o("The model class to instantiate is selected based on the "),Wue=a("code"),Dor=o("model_type"),Gor=o(` property of the config object (either
passed as an argument or loaded from `),Que=a("code"),Oor=o("pretrained_model_name_or_path"),Vor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=a("code"),Xor=o("pretrained_model_name_or_path"),zor=o(":"),Wor=l(),Re=a("ul"),QF=a("li"),Uue=a("strong"),Qor=o("data2vec-audio"),Hor=o(" \u2014 "),qz=a("a"),Uor=o("Data2VecAudioForSequenceClassification"),Jor=o(" (Data2VecAudio model)"),Yor=l(),HF=a("li"),Jue=a("strong"),Kor=o("hubert"),Zor=o(" \u2014 "),jz=a("a"),err=o("HubertForSequenceClassification"),orr=o(" (Hubert model)"),rrr=l(),UF=a("li"),Yue=a("strong"),trr=o("sew"),arr=o(" \u2014 "),Dz=a("a"),nrr=o("SEWForSequenceClassification"),srr=o(" (SEW model)"),lrr=l(),JF=a("li"),Kue=a("strong"),irr=o("sew-d"),drr=o(" \u2014 "),Gz=a("a"),crr=o("SEWDForSequenceClassification"),frr=o(" (SEW-D model)"),mrr=l(),YF=a("li"),Zue=a("strong"),grr=o("unispeech"),hrr=o(" \u2014 "),Oz=a("a"),prr=o("UniSpeechForSequenceClassification"),_rr=o(" (UniSpeech model)"),urr=l(),KF=a("li"),e1e=a("strong"),brr=o("unispeech-sat"),vrr=o(" \u2014 "),Vz=a("a"),Frr=o("UniSpeechSatForSequenceClassification"),Trr=o(" (UniSpeechSat model)"),Mrr=l(),ZF=a("li"),o1e=a("strong"),Err=o("wav2vec2"),Crr=o(" \u2014 "),Xz=a("a"),wrr=o("Wav2Vec2ForSequenceClassification"),Arr=o(" (Wav2Vec2 model)"),Lrr=l(),e6=a("li"),r1e=a("strong"),yrr=o("wav2vec2-conformer"),xrr=o(" \u2014 "),zz=a("a"),$rr=o("Wav2Vec2ConformerForSequenceClassification"),krr=o(" (Wav2Vec2-Conformer model)"),Srr=l(),o6=a("li"),t1e=a("strong"),Rrr=o("wavlm"),Prr=o(" \u2014 "),Wz=a("a"),Brr=o("WavLMForSequenceClassification"),Irr=o(" (WavLM model)"),Nrr=l(),r6=a("p"),qrr=o("The model is set in evaluation mode by default using "),a1e=a("code"),jrr=o("model.eval()"),Drr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n1e=a("code"),Grr=o("model.train()"),Orr=l(),F(t6.$$.fragment),xDe=l(),pd=a("h2"),a6=a("a"),s1e=a("span"),F(jy.$$.fragment),Vrr=l(),l1e=a("span"),Xrr=o("AutoModelForAudioFrameClassification"),$De=l(),Oo=a("div"),F(Dy.$$.fragment),zrr=l(),_d=a("p"),Wrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Qz=a("a"),Qrr=o("from_pretrained()"),Hrr=o(" class method or the "),Hz=a("a"),Urr=o("from_config()"),Jrr=o(` class
method.`),Yrr=l(),Gy=a("p"),Krr=o("This class cannot be instantiated directly using "),i1e=a("code"),Zrr=o("__init__()"),etr=o(" (throws an error)."),otr=l(),bt=a("div"),F(Oy.$$.fragment),rtr=l(),d1e=a("p"),ttr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),atr=l(),ud=a("p"),ntr=o(`Note:
Loading a model from its configuration file does `),c1e=a("strong"),str=o("not"),ltr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=a("a"),itr=o("from_pretrained()"),dtr=o(" to load the model weights."),ctr=l(),F(n6.$$.fragment),ftr=l(),fo=a("div"),F(Vy.$$.fragment),mtr=l(),f1e=a("p"),gtr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),htr=l(),Oa=a("p"),ptr=o("The model class to instantiate is selected based on the "),m1e=a("code"),_tr=o("model_type"),utr=o(` property of the config object (either
passed as an argument or loaded from `),g1e=a("code"),btr=o("pretrained_model_name_or_path"),vtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=a("code"),Ftr=o("pretrained_model_name_or_path"),Ttr=o(":"),Mtr=l(),Kr=a("ul"),s6=a("li"),p1e=a("strong"),Etr=o("data2vec-audio"),Ctr=o(" \u2014 "),Jz=a("a"),wtr=o("Data2VecAudioForAudioFrameClassification"),Atr=o(" (Data2VecAudio model)"),Ltr=l(),l6=a("li"),_1e=a("strong"),ytr=o("unispeech-sat"),xtr=o(" \u2014 "),Yz=a("a"),$tr=o("UniSpeechSatForAudioFrameClassification"),ktr=o(" (UniSpeechSat model)"),Str=l(),i6=a("li"),u1e=a("strong"),Rtr=o("wav2vec2"),Ptr=o(" \u2014 "),Kz=a("a"),Btr=o("Wav2Vec2ForAudioFrameClassification"),Itr=o(" (Wav2Vec2 model)"),Ntr=l(),d6=a("li"),b1e=a("strong"),qtr=o("wav2vec2-conformer"),jtr=o(" \u2014 "),Zz=a("a"),Dtr=o("Wav2Vec2ConformerForAudioFrameClassification"),Gtr=o(" (Wav2Vec2-Conformer model)"),Otr=l(),c6=a("li"),v1e=a("strong"),Vtr=o("wavlm"),Xtr=o(" \u2014 "),eW=a("a"),ztr=o("WavLMForAudioFrameClassification"),Wtr=o(" (WavLM model)"),Qtr=l(),f6=a("p"),Htr=o("The model is set in evaluation mode by default using "),F1e=a("code"),Utr=o("model.eval()"),Jtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T1e=a("code"),Ytr=o("model.train()"),Ktr=l(),F(m6.$$.fragment),kDe=l(),bd=a("h2"),g6=a("a"),M1e=a("span"),F(Xy.$$.fragment),Ztr=l(),E1e=a("span"),ear=o("AutoModelForCTC"),SDe=l(),Vo=a("div"),F(zy.$$.fragment),oar=l(),vd=a("p"),rar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),oW=a("a"),tar=o("from_pretrained()"),aar=o(" class method or the "),rW=a("a"),nar=o("from_config()"),sar=o(` class
method.`),lar=l(),Wy=a("p"),iar=o("This class cannot be instantiated directly using "),C1e=a("code"),dar=o("__init__()"),car=o(" (throws an error)."),far=l(),vt=a("div"),F(Qy.$$.fragment),mar=l(),w1e=a("p"),gar=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),har=l(),Fd=a("p"),par=o(`Note:
Loading a model from its configuration file does `),A1e=a("strong"),_ar=o("not"),uar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=a("a"),bar=o("from_pretrained()"),Far=o(" to load the model weights."),Tar=l(),F(h6.$$.fragment),Mar=l(),mo=a("div"),F(Hy.$$.fragment),Ear=l(),L1e=a("p"),Car=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),war=l(),Va=a("p"),Aar=o("The model class to instantiate is selected based on the "),y1e=a("code"),Lar=o("model_type"),yar=o(` property of the config object (either
passed as an argument or loaded from `),x1e=a("code"),xar=o("pretrained_model_name_or_path"),$ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=a("code"),kar=o("pretrained_model_name_or_path"),Sar=o(":"),Rar=l(),Le=a("ul"),p6=a("li"),k1e=a("strong"),Par=o("data2vec-audio"),Bar=o(" \u2014 "),aW=a("a"),Iar=o("Data2VecAudioForCTC"),Nar=o(" (Data2VecAudio model)"),qar=l(),_6=a("li"),S1e=a("strong"),jar=o("hubert"),Dar=o(" \u2014 "),nW=a("a"),Gar=o("HubertForCTC"),Oar=o(" (Hubert model)"),Var=l(),u6=a("li"),R1e=a("strong"),Xar=o("mctct"),zar=o(" \u2014 "),sW=a("a"),War=o("MCTCTForCTC"),Qar=o(" (M-CTC-T model)"),Har=l(),b6=a("li"),P1e=a("strong"),Uar=o("sew"),Jar=o(" \u2014 "),lW=a("a"),Yar=o("SEWForCTC"),Kar=o(" (SEW model)"),Zar=l(),v6=a("li"),B1e=a("strong"),enr=o("sew-d"),onr=o(" \u2014 "),iW=a("a"),rnr=o("SEWDForCTC"),tnr=o(" (SEW-D model)"),anr=l(),F6=a("li"),I1e=a("strong"),nnr=o("unispeech"),snr=o(" \u2014 "),dW=a("a"),lnr=o("UniSpeechForCTC"),inr=o(" (UniSpeech model)"),dnr=l(),T6=a("li"),N1e=a("strong"),cnr=o("unispeech-sat"),fnr=o(" \u2014 "),cW=a("a"),mnr=o("UniSpeechSatForCTC"),gnr=o(" (UniSpeechSat model)"),hnr=l(),M6=a("li"),q1e=a("strong"),pnr=o("wav2vec2"),_nr=o(" \u2014 "),fW=a("a"),unr=o("Wav2Vec2ForCTC"),bnr=o(" (Wav2Vec2 model)"),vnr=l(),E6=a("li"),j1e=a("strong"),Fnr=o("wav2vec2-conformer"),Tnr=o(" \u2014 "),mW=a("a"),Mnr=o("Wav2Vec2ConformerForCTC"),Enr=o(" (Wav2Vec2-Conformer model)"),Cnr=l(),C6=a("li"),D1e=a("strong"),wnr=o("wavlm"),Anr=o(" \u2014 "),gW=a("a"),Lnr=o("WavLMForCTC"),ynr=o(" (WavLM model)"),xnr=l(),w6=a("p"),$nr=o("The model is set in evaluation mode by default using "),G1e=a("code"),knr=o("model.eval()"),Snr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O1e=a("code"),Rnr=o("model.train()"),Pnr=l(),F(A6.$$.fragment),RDe=l(),Td=a("h2"),L6=a("a"),V1e=a("span"),F(Uy.$$.fragment),Bnr=l(),X1e=a("span"),Inr=o("AutoModelForSpeechSeq2Seq"),PDe=l(),Xo=a("div"),F(Jy.$$.fragment),Nnr=l(),Md=a("p"),qnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hW=a("a"),jnr=o("from_pretrained()"),Dnr=o(" class method or the "),pW=a("a"),Gnr=o("from_config()"),Onr=o(` class
method.`),Vnr=l(),Yy=a("p"),Xnr=o("This class cannot be instantiated directly using "),z1e=a("code"),znr=o("__init__()"),Wnr=o(" (throws an error)."),Qnr=l(),Ft=a("div"),F(Ky.$$.fragment),Hnr=l(),W1e=a("p"),Unr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Jnr=l(),Ed=a("p"),Ynr=o(`Note:
Loading a model from its configuration file does `),Q1e=a("strong"),Knr=o("not"),Znr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=a("a"),esr=o("from_pretrained()"),osr=o(" to load the model weights."),rsr=l(),F(y6.$$.fragment),tsr=l(),go=a("div"),F(Zy.$$.fragment),asr=l(),H1e=a("p"),nsr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ssr=l(),Xa=a("p"),lsr=o("The model class to instantiate is selected based on the "),U1e=a("code"),isr=o("model_type"),dsr=o(` property of the config object (either
passed as an argument or loaded from `),J1e=a("code"),csr=o("pretrained_model_name_or_path"),fsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=a("code"),msr=o("pretrained_model_name_or_path"),gsr=o(":"),hsr=l(),e8=a("ul"),x6=a("li"),K1e=a("strong"),psr=o("speech-encoder-decoder"),_sr=o(" \u2014 "),uW=a("a"),usr=o("SpeechEncoderDecoderModel"),bsr=o(" (Speech Encoder decoder model)"),vsr=l(),$6=a("li"),Z1e=a("strong"),Fsr=o("speech_to_text"),Tsr=o(" \u2014 "),bW=a("a"),Msr=o("Speech2TextForConditionalGeneration"),Esr=o(" (Speech2Text model)"),Csr=l(),k6=a("p"),wsr=o("The model is set in evaluation mode by default using "),ebe=a("code"),Asr=o("model.eval()"),Lsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=a("code"),ysr=o("model.train()"),xsr=l(),F(S6.$$.fragment),BDe=l(),Cd=a("h2"),R6=a("a"),rbe=a("span"),F(o8.$$.fragment),$sr=l(),tbe=a("span"),ksr=o("AutoModelForAudioXVector"),IDe=l(),zo=a("div"),F(r8.$$.fragment),Ssr=l(),wd=a("p"),Rsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),vW=a("a"),Psr=o("from_pretrained()"),Bsr=o(" class method or the "),FW=a("a"),Isr=o("from_config()"),Nsr=o(` class
method.`),qsr=l(),t8=a("p"),jsr=o("This class cannot be instantiated directly using "),abe=a("code"),Dsr=o("__init__()"),Gsr=o(" (throws an error)."),Osr=l(),Tt=a("div"),F(a8.$$.fragment),Vsr=l(),nbe=a("p"),Xsr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),zsr=l(),Ad=a("p"),Wsr=o(`Note:
Loading a model from its configuration file does `),sbe=a("strong"),Qsr=o("not"),Hsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),Usr=o("from_pretrained()"),Jsr=o(" to load the model weights."),Ysr=l(),F(P6.$$.fragment),Ksr=l(),ho=a("div"),F(n8.$$.fragment),Zsr=l(),lbe=a("p"),elr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),olr=l(),za=a("p"),rlr=o("The model class to instantiate is selected based on the "),ibe=a("code"),tlr=o("model_type"),alr=o(` property of the config object (either
passed as an argument or loaded from `),dbe=a("code"),nlr=o("pretrained_model_name_or_path"),slr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=a("code"),llr=o("pretrained_model_name_or_path"),ilr=o(":"),dlr=l(),Zr=a("ul"),B6=a("li"),fbe=a("strong"),clr=o("data2vec-audio"),flr=o(" \u2014 "),MW=a("a"),mlr=o("Data2VecAudioForXVector"),glr=o(" (Data2VecAudio model)"),hlr=l(),I6=a("li"),mbe=a("strong"),plr=o("unispeech-sat"),_lr=o(" \u2014 "),EW=a("a"),ulr=o("UniSpeechSatForXVector"),blr=o(" (UniSpeechSat model)"),vlr=l(),N6=a("li"),gbe=a("strong"),Flr=o("wav2vec2"),Tlr=o(" \u2014 "),CW=a("a"),Mlr=o("Wav2Vec2ForXVector"),Elr=o(" (Wav2Vec2 model)"),Clr=l(),q6=a("li"),hbe=a("strong"),wlr=o("wav2vec2-conformer"),Alr=o(" \u2014 "),wW=a("a"),Llr=o("Wav2Vec2ConformerForXVector"),ylr=o(" (Wav2Vec2-Conformer model)"),xlr=l(),j6=a("li"),pbe=a("strong"),$lr=o("wavlm"),klr=o(" \u2014 "),AW=a("a"),Slr=o("WavLMForXVector"),Rlr=o(" (WavLM model)"),Plr=l(),D6=a("p"),Blr=o("The model is set in evaluation mode by default using "),_be=a("code"),Ilr=o("model.eval()"),Nlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ube=a("code"),qlr=o("model.train()"),jlr=l(),F(G6.$$.fragment),NDe=l(),Ld=a("h2"),O6=a("a"),bbe=a("span"),F(s8.$$.fragment),Dlr=l(),vbe=a("span"),Glr=o("AutoModelForMaskedImageModeling"),qDe=l(),Wo=a("div"),F(l8.$$.fragment),Olr=l(),yd=a("p"),Vlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),LW=a("a"),Xlr=o("from_pretrained()"),zlr=o(" class method or the "),yW=a("a"),Wlr=o("from_config()"),Qlr=o(` class
method.`),Hlr=l(),i8=a("p"),Ulr=o("This class cannot be instantiated directly using "),Fbe=a("code"),Jlr=o("__init__()"),Ylr=o(" (throws an error)."),Klr=l(),Mt=a("div"),F(d8.$$.fragment),Zlr=l(),Tbe=a("p"),eir=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),oir=l(),xd=a("p"),rir=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),tir=o("not"),air=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=a("a"),nir=o("from_pretrained()"),sir=o(" to load the model weights."),lir=l(),F(V6.$$.fragment),iir=l(),po=a("div"),F(c8.$$.fragment),dir=l(),Ebe=a("p"),cir=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),fir=l(),Wa=a("p"),mir=o("The model class to instantiate is selected based on the "),Cbe=a("code"),gir=o("model_type"),hir=o(` property of the config object (either
passed as an argument or loaded from `),wbe=a("code"),pir=o("pretrained_model_name_or_path"),_ir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=a("code"),uir=o("pretrained_model_name_or_path"),bir=o(":"),vir=l(),$d=a("ul"),X6=a("li"),Lbe=a("strong"),Fir=o("deit"),Tir=o(" \u2014 "),$W=a("a"),Mir=o("DeiTForMaskedImageModeling"),Eir=o(" (DeiT model)"),Cir=l(),z6=a("li"),ybe=a("strong"),wir=o("swin"),Air=o(" \u2014 "),kW=a("a"),Lir=o("SwinForMaskedImageModeling"),yir=o(" (Swin Transformer model)"),xir=l(),W6=a("li"),xbe=a("strong"),$ir=o("vit"),kir=o(" \u2014 "),SW=a("a"),Sir=o("ViTForMaskedImageModeling"),Rir=o(" (ViT model)"),Pir=l(),Q6=a("p"),Bir=o("The model is set in evaluation mode by default using "),$be=a("code"),Iir=o("model.eval()"),Nir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kbe=a("code"),qir=o("model.train()"),jir=l(),F(H6.$$.fragment),jDe=l(),kd=a("h2"),U6=a("a"),Sbe=a("span"),F(f8.$$.fragment),Dir=l(),Rbe=a("span"),Gir=o("AutoModelForObjectDetection"),DDe=l(),Qo=a("div"),F(m8.$$.fragment),Oir=l(),Sd=a("p"),Vir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),RW=a("a"),Xir=o("from_pretrained()"),zir=o(" class method or the "),PW=a("a"),Wir=o("from_config()"),Qir=o(` class
method.`),Hir=l(),g8=a("p"),Uir=o("This class cannot be instantiated directly using "),Pbe=a("code"),Jir=o("__init__()"),Yir=o(" (throws an error)."),Kir=l(),Et=a("div"),F(h8.$$.fragment),Zir=l(),Bbe=a("p"),edr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),odr=l(),Rd=a("p"),rdr=o(`Note:
Loading a model from its configuration file does `),Ibe=a("strong"),tdr=o("not"),adr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=a("a"),ndr=o("from_pretrained()"),sdr=o(" to load the model weights."),ldr=l(),F(J6.$$.fragment),idr=l(),_o=a("div"),F(p8.$$.fragment),ddr=l(),Nbe=a("p"),cdr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),fdr=l(),Qa=a("p"),mdr=o("The model class to instantiate is selected based on the "),qbe=a("code"),gdr=o("model_type"),hdr=o(` property of the config object (either
passed as an argument or loaded from `),jbe=a("code"),pdr=o("pretrained_model_name_or_path"),_dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=a("code"),udr=o("pretrained_model_name_or_path"),bdr=o(":"),vdr=l(),_8=a("ul"),Y6=a("li"),Gbe=a("strong"),Fdr=o("detr"),Tdr=o(" \u2014 "),IW=a("a"),Mdr=o("DetrForObjectDetection"),Edr=o(" (DETR model)"),Cdr=l(),K6=a("li"),Obe=a("strong"),wdr=o("yolos"),Adr=o(" \u2014 "),NW=a("a"),Ldr=o("YolosForObjectDetection"),ydr=o(" (YOLOS model)"),xdr=l(),Z6=a("p"),$dr=o("The model is set in evaluation mode by default using "),Vbe=a("code"),kdr=o("model.eval()"),Sdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xbe=a("code"),Rdr=o("model.train()"),Pdr=l(),F(eT.$$.fragment),GDe=l(),Pd=a("h2"),oT=a("a"),zbe=a("span"),F(u8.$$.fragment),Bdr=l(),Wbe=a("span"),Idr=o("AutoModelForImageSegmentation"),ODe=l(),Ho=a("div"),F(b8.$$.fragment),Ndr=l(),Bd=a("p"),qdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),qW=a("a"),jdr=o("from_pretrained()"),Ddr=o(" class method or the "),jW=a("a"),Gdr=o("from_config()"),Odr=o(` class
method.`),Vdr=l(),v8=a("p"),Xdr=o("This class cannot be instantiated directly using "),Qbe=a("code"),zdr=o("__init__()"),Wdr=o(" (throws an error)."),Qdr=l(),Ct=a("div"),F(F8.$$.fragment),Hdr=l(),Hbe=a("p"),Udr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Jdr=l(),Id=a("p"),Ydr=o(`Note:
Loading a model from its configuration file does `),Ube=a("strong"),Kdr=o("not"),Zdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=a("a"),ecr=o("from_pretrained()"),ocr=o(" to load the model weights."),rcr=l(),F(rT.$$.fragment),tcr=l(),uo=a("div"),F(T8.$$.fragment),acr=l(),Jbe=a("p"),ncr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),scr=l(),Ha=a("p"),lcr=o("The model class to instantiate is selected based on the "),Ybe=a("code"),icr=o("model_type"),dcr=o(` property of the config object (either
passed as an argument or loaded from `),Kbe=a("code"),ccr=o("pretrained_model_name_or_path"),fcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=a("code"),mcr=o("pretrained_model_name_or_path"),gcr=o(":"),hcr=l(),e2e=a("ul"),tT=a("li"),o2e=a("strong"),pcr=o("detr"),_cr=o(" \u2014 "),GW=a("a"),ucr=o("DetrForSegmentation"),bcr=o(" (DETR model)"),vcr=l(),aT=a("p"),Fcr=o("The model is set in evaluation mode by default using "),r2e=a("code"),Tcr=o("model.eval()"),Mcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t2e=a("code"),Ecr=o("model.train()"),Ccr=l(),F(nT.$$.fragment),VDe=l(),Nd=a("h2"),sT=a("a"),a2e=a("span"),F(M8.$$.fragment),wcr=l(),n2e=a("span"),Acr=o("AutoModelForSemanticSegmentation"),XDe=l(),Uo=a("div"),F(E8.$$.fragment),Lcr=l(),qd=a("p"),ycr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),OW=a("a"),xcr=o("from_pretrained()"),$cr=o(" class method or the "),VW=a("a"),kcr=o("from_config()"),Scr=o(` class
method.`),Rcr=l(),C8=a("p"),Pcr=o("This class cannot be instantiated directly using "),s2e=a("code"),Bcr=o("__init__()"),Icr=o(" (throws an error)."),Ncr=l(),wt=a("div"),F(w8.$$.fragment),qcr=l(),l2e=a("p"),jcr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Dcr=l(),jd=a("p"),Gcr=o(`Note:
Loading a model from its configuration file does `),i2e=a("strong"),Ocr=o("not"),Vcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),Xcr=o("from_pretrained()"),zcr=o(" to load the model weights."),Wcr=l(),F(lT.$$.fragment),Qcr=l(),bo=a("div"),F(A8.$$.fragment),Hcr=l(),d2e=a("p"),Ucr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Jcr=l(),Ua=a("p"),Ycr=o("The model class to instantiate is selected based on the "),c2e=a("code"),Kcr=o("model_type"),Zcr=o(` property of the config object (either
passed as an argument or loaded from `),f2e=a("code"),efr=o("pretrained_model_name_or_path"),ofr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=a("code"),rfr=o("pretrained_model_name_or_path"),tfr=o(":"),afr=l(),Ja=a("ul"),iT=a("li"),g2e=a("strong"),nfr=o("beit"),sfr=o(" \u2014 "),zW=a("a"),lfr=o("BeitForSemanticSegmentation"),ifr=o(" (BEiT model)"),dfr=l(),dT=a("li"),h2e=a("strong"),cfr=o("data2vec-vision"),ffr=o(" \u2014 "),WW=a("a"),mfr=o("Data2VecVisionForSemanticSegmentation"),gfr=o(" (Data2VecVision model)"),hfr=l(),cT=a("li"),p2e=a("strong"),pfr=o("dpt"),_fr=o(" \u2014 "),QW=a("a"),ufr=o("DPTForSemanticSegmentation"),bfr=o(" (DPT model)"),vfr=l(),fT=a("li"),_2e=a("strong"),Ffr=o("segformer"),Tfr=o(" \u2014 "),HW=a("a"),Mfr=o("SegformerForSemanticSegmentation"),Efr=o(" (SegFormer model)"),Cfr=l(),mT=a("p"),wfr=o("The model is set in evaluation mode by default using "),u2e=a("code"),Afr=o("model.eval()"),Lfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b2e=a("code"),yfr=o("model.train()"),xfr=l(),F(gT.$$.fragment),zDe=l(),Dd=a("h2"),hT=a("a"),v2e=a("span"),F(L8.$$.fragment),$fr=l(),F2e=a("span"),kfr=o("AutoModelForInstanceSegmentation"),WDe=l(),Jo=a("div"),F(y8.$$.fragment),Sfr=l(),Gd=a("p"),Rfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),UW=a("a"),Pfr=o("from_pretrained()"),Bfr=o(" class method or the "),JW=a("a"),Ifr=o("from_config()"),Nfr=o(` class
method.`),qfr=l(),x8=a("p"),jfr=o("This class cannot be instantiated directly using "),T2e=a("code"),Dfr=o("__init__()"),Gfr=o(" (throws an error)."),Ofr=l(),At=a("div"),F($8.$$.fragment),Vfr=l(),M2e=a("p"),Xfr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),zfr=l(),Od=a("p"),Wfr=o(`Note:
Loading a model from its configuration file does `),E2e=a("strong"),Qfr=o("not"),Hfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=a("a"),Ufr=o("from_pretrained()"),Jfr=o(" to load the model weights."),Yfr=l(),F(pT.$$.fragment),Kfr=l(),vo=a("div"),F(k8.$$.fragment),Zfr=l(),C2e=a("p"),emr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),omr=l(),Ya=a("p"),rmr=o("The model class to instantiate is selected based on the "),w2e=a("code"),tmr=o("model_type"),amr=o(` property of the config object (either
passed as an argument or loaded from `),A2e=a("code"),nmr=o("pretrained_model_name_or_path"),smr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),lmr=o("pretrained_model_name_or_path"),imr=o(":"),dmr=l(),y2e=a("ul"),_T=a("li"),x2e=a("strong"),cmr=o("maskformer"),fmr=o(" \u2014 "),KW=a("a"),mmr=o("MaskFormerForInstanceSegmentation"),gmr=o(" (MaskFormer model)"),hmr=l(),uT=a("p"),pmr=o("The model is set in evaluation mode by default using "),$2e=a("code"),_mr=o("model.eval()"),umr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k2e=a("code"),bmr=o("model.train()"),vmr=l(),F(bT.$$.fragment),QDe=l(),Vd=a("h2"),vT=a("a"),S2e=a("span"),F(S8.$$.fragment),Fmr=l(),R2e=a("span"),Tmr=o("TFAutoModel"),HDe=l(),Yo=a("div"),F(R8.$$.fragment),Mmr=l(),Xd=a("p"),Emr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZW=a("a"),Cmr=o("from_pretrained()"),wmr=o(" class method or the "),eQ=a("a"),Amr=o("from_config()"),Lmr=o(` class
method.`),ymr=l(),P8=a("p"),xmr=o("This class cannot be instantiated directly using "),P2e=a("code"),$mr=o("__init__()"),kmr=o(" (throws an error)."),Smr=l(),Lt=a("div"),F(B8.$$.fragment),Rmr=l(),B2e=a("p"),Pmr=o("Instantiates one of the base model classes of the library from a configuration."),Bmr=l(),zd=a("p"),Imr=o(`Note:
Loading a model from its configuration file does `),I2e=a("strong"),Nmr=o("not"),qmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=a("a"),jmr=o("from_pretrained()"),Dmr=o(" to load the model weights."),Gmr=l(),F(FT.$$.fragment),Omr=l(),wr=a("div"),F(I8.$$.fragment),Vmr=l(),N2e=a("p"),Xmr=o("Instantiate one of the base model classes of the library from a pretrained model."),zmr=l(),Ka=a("p"),Wmr=o("The model class to instantiate is selected based on the "),q2e=a("code"),Qmr=o("model_type"),Hmr=o(` property of the config object (either
passed as an argument or loaded from `),j2e=a("code"),Umr=o("pretrained_model_name_or_path"),Jmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=a("code"),Ymr=o("pretrained_model_name_or_path"),Kmr=o(":"),Zmr=l(),q=a("ul"),TT=a("li"),G2e=a("strong"),egr=o("albert"),ogr=o(" \u2014 "),rQ=a("a"),rgr=o("TFAlbertModel"),tgr=o(" (ALBERT model)"),agr=l(),MT=a("li"),O2e=a("strong"),ngr=o("bart"),sgr=o(" \u2014 "),tQ=a("a"),lgr=o("TFBartModel"),igr=o(" (BART model)"),dgr=l(),ET=a("li"),V2e=a("strong"),cgr=o("bert"),fgr=o(" \u2014 "),aQ=a("a"),mgr=o("TFBertModel"),ggr=o(" (BERT model)"),hgr=l(),CT=a("li"),X2e=a("strong"),pgr=o("blenderbot"),_gr=o(" \u2014 "),nQ=a("a"),ugr=o("TFBlenderbotModel"),bgr=o(" (Blenderbot model)"),vgr=l(),wT=a("li"),z2e=a("strong"),Fgr=o("blenderbot-small"),Tgr=o(" \u2014 "),sQ=a("a"),Mgr=o("TFBlenderbotSmallModel"),Egr=o(" (BlenderbotSmall model)"),Cgr=l(),AT=a("li"),W2e=a("strong"),wgr=o("camembert"),Agr=o(" \u2014 "),lQ=a("a"),Lgr=o("TFCamembertModel"),ygr=o(" (CamemBERT model)"),xgr=l(),LT=a("li"),Q2e=a("strong"),$gr=o("clip"),kgr=o(" \u2014 "),iQ=a("a"),Sgr=o("TFCLIPModel"),Rgr=o(" (CLIP model)"),Pgr=l(),yT=a("li"),H2e=a("strong"),Bgr=o("convbert"),Igr=o(" \u2014 "),dQ=a("a"),Ngr=o("TFConvBertModel"),qgr=o(" (ConvBERT model)"),jgr=l(),xT=a("li"),U2e=a("strong"),Dgr=o("convnext"),Ggr=o(" \u2014 "),cQ=a("a"),Ogr=o("TFConvNextModel"),Vgr=o(" (ConvNeXT model)"),Xgr=l(),$T=a("li"),J2e=a("strong"),zgr=o("ctrl"),Wgr=o(" \u2014 "),fQ=a("a"),Qgr=o("TFCTRLModel"),Hgr=o(" (CTRL model)"),Ugr=l(),kT=a("li"),Y2e=a("strong"),Jgr=o("data2vec-vision"),Ygr=o(" \u2014 "),mQ=a("a"),Kgr=o("TFData2VecVisionModel"),Zgr=o(" (Data2VecVision model)"),ehr=l(),ST=a("li"),K2e=a("strong"),ohr=o("deberta"),rhr=o(" \u2014 "),gQ=a("a"),thr=o("TFDebertaModel"),ahr=o(" (DeBERTa model)"),nhr=l(),RT=a("li"),Z2e=a("strong"),shr=o("deberta-v2"),lhr=o(" \u2014 "),hQ=a("a"),ihr=o("TFDebertaV2Model"),dhr=o(" (DeBERTa-v2 model)"),chr=l(),PT=a("li"),e4e=a("strong"),fhr=o("distilbert"),mhr=o(" \u2014 "),pQ=a("a"),ghr=o("TFDistilBertModel"),hhr=o(" (DistilBERT model)"),phr=l(),BT=a("li"),o4e=a("strong"),_hr=o("dpr"),uhr=o(" \u2014 "),_Q=a("a"),bhr=o("TFDPRQuestionEncoder"),vhr=o(" (DPR model)"),Fhr=l(),IT=a("li"),r4e=a("strong"),Thr=o("electra"),Mhr=o(" \u2014 "),uQ=a("a"),Ehr=o("TFElectraModel"),Chr=o(" (ELECTRA model)"),whr=l(),NT=a("li"),t4e=a("strong"),Ahr=o("flaubert"),Lhr=o(" \u2014 "),bQ=a("a"),yhr=o("TFFlaubertModel"),xhr=o(" (FlauBERT model)"),$hr=l(),qs=a("li"),a4e=a("strong"),khr=o("funnel"),Shr=o(" \u2014 "),vQ=a("a"),Rhr=o("TFFunnelModel"),Phr=o(" or "),FQ=a("a"),Bhr=o("TFFunnelBaseModel"),Ihr=o(" (Funnel Transformer model)"),Nhr=l(),qT=a("li"),n4e=a("strong"),qhr=o("gpt2"),jhr=o(" \u2014 "),TQ=a("a"),Dhr=o("TFGPT2Model"),Ghr=o(" (OpenAI GPT-2 model)"),Ohr=l(),jT=a("li"),s4e=a("strong"),Vhr=o("gptj"),Xhr=o(" \u2014 "),MQ=a("a"),zhr=o("TFGPTJModel"),Whr=o(" (GPT-J model)"),Qhr=l(),DT=a("li"),l4e=a("strong"),Hhr=o("hubert"),Uhr=o(" \u2014 "),EQ=a("a"),Jhr=o("TFHubertModel"),Yhr=o(" (Hubert model)"),Khr=l(),GT=a("li"),i4e=a("strong"),Zhr=o("layoutlm"),epr=o(" \u2014 "),CQ=a("a"),opr=o("TFLayoutLMModel"),rpr=o(" (LayoutLM model)"),tpr=l(),OT=a("li"),d4e=a("strong"),apr=o("led"),npr=o(" \u2014 "),wQ=a("a"),spr=o("TFLEDModel"),lpr=o(" (LED model)"),ipr=l(),VT=a("li"),c4e=a("strong"),dpr=o("longformer"),cpr=o(" \u2014 "),AQ=a("a"),fpr=o("TFLongformerModel"),mpr=o(" (Longformer model)"),gpr=l(),XT=a("li"),f4e=a("strong"),hpr=o("lxmert"),ppr=o(" \u2014 "),LQ=a("a"),_pr=o("TFLxmertModel"),upr=o(" (LXMERT model)"),bpr=l(),zT=a("li"),m4e=a("strong"),vpr=o("marian"),Fpr=o(" \u2014 "),yQ=a("a"),Tpr=o("TFMarianModel"),Mpr=o(" (Marian model)"),Epr=l(),WT=a("li"),g4e=a("strong"),Cpr=o("mbart"),wpr=o(" \u2014 "),xQ=a("a"),Apr=o("TFMBartModel"),Lpr=o(" (mBART model)"),ypr=l(),QT=a("li"),h4e=a("strong"),xpr=o("mobilebert"),$pr=o(" \u2014 "),$Q=a("a"),kpr=o("TFMobileBertModel"),Spr=o(" (MobileBERT model)"),Rpr=l(),HT=a("li"),p4e=a("strong"),Ppr=o("mpnet"),Bpr=o(" \u2014 "),kQ=a("a"),Ipr=o("TFMPNetModel"),Npr=o(" (MPNet model)"),qpr=l(),UT=a("li"),_4e=a("strong"),jpr=o("mt5"),Dpr=o(" \u2014 "),SQ=a("a"),Gpr=o("TFMT5Model"),Opr=o(" (MT5 model)"),Vpr=l(),JT=a("li"),u4e=a("strong"),Xpr=o("openai-gpt"),zpr=o(" \u2014 "),RQ=a("a"),Wpr=o("TFOpenAIGPTModel"),Qpr=o(" (OpenAI GPT model)"),Hpr=l(),YT=a("li"),b4e=a("strong"),Upr=o("opt"),Jpr=o(" \u2014 "),PQ=a("a"),Ypr=o("TFOPTModel"),Kpr=o(" (OPT model)"),Zpr=l(),KT=a("li"),v4e=a("strong"),e_r=o("pegasus"),o_r=o(" \u2014 "),BQ=a("a"),r_r=o("TFPegasusModel"),t_r=o(" (Pegasus model)"),a_r=l(),ZT=a("li"),F4e=a("strong"),n_r=o("rembert"),s_r=o(" \u2014 "),IQ=a("a"),l_r=o("TFRemBertModel"),i_r=o(" (RemBERT model)"),d_r=l(),e7=a("li"),T4e=a("strong"),c_r=o("roberta"),f_r=o(" \u2014 "),NQ=a("a"),m_r=o("TFRobertaModel"),g_r=o(" (RoBERTa model)"),h_r=l(),o7=a("li"),M4e=a("strong"),p_r=o("roformer"),__r=o(" \u2014 "),qQ=a("a"),u_r=o("TFRoFormerModel"),b_r=o(" (RoFormer model)"),v_r=l(),r7=a("li"),E4e=a("strong"),F_r=o("speech_to_text"),T_r=o(" \u2014 "),jQ=a("a"),M_r=o("TFSpeech2TextModel"),E_r=o(" (Speech2Text model)"),C_r=l(),t7=a("li"),C4e=a("strong"),w_r=o("swin"),A_r=o(" \u2014 "),DQ=a("a"),L_r=o("TFSwinModel"),y_r=o(" (Swin Transformer model)"),x_r=l(),a7=a("li"),w4e=a("strong"),$_r=o("t5"),k_r=o(" \u2014 "),GQ=a("a"),S_r=o("TFT5Model"),R_r=o(" (T5 model)"),P_r=l(),n7=a("li"),A4e=a("strong"),B_r=o("tapas"),I_r=o(" \u2014 "),OQ=a("a"),N_r=o("TFTapasModel"),q_r=o(" (TAPAS model)"),j_r=l(),s7=a("li"),L4e=a("strong"),D_r=o("transfo-xl"),G_r=o(" \u2014 "),VQ=a("a"),O_r=o("TFTransfoXLModel"),V_r=o(" (Transformer-XL model)"),X_r=l(),l7=a("li"),y4e=a("strong"),z_r=o("vit"),W_r=o(" \u2014 "),XQ=a("a"),Q_r=o("TFViTModel"),H_r=o(" (ViT model)"),U_r=l(),i7=a("li"),x4e=a("strong"),J_r=o("vit_mae"),Y_r=o(" \u2014 "),zQ=a("a"),K_r=o("TFViTMAEModel"),Z_r=o(" (ViTMAE model)"),eur=l(),d7=a("li"),$4e=a("strong"),our=o("wav2vec2"),rur=o(" \u2014 "),WQ=a("a"),tur=o("TFWav2Vec2Model"),aur=o(" (Wav2Vec2 model)"),nur=l(),c7=a("li"),k4e=a("strong"),sur=o("xlm"),lur=o(" \u2014 "),QQ=a("a"),iur=o("TFXLMModel"),dur=o(" (XLM model)"),cur=l(),f7=a("li"),S4e=a("strong"),fur=o("xlm-roberta"),mur=o(" \u2014 "),HQ=a("a"),gur=o("TFXLMRobertaModel"),hur=o(" (XLM-RoBERTa model)"),pur=l(),m7=a("li"),R4e=a("strong"),_ur=o("xlnet"),uur=o(" \u2014 "),UQ=a("a"),bur=o("TFXLNetModel"),vur=o(" (XLNet model)"),Fur=l(),F(g7.$$.fragment),UDe=l(),Wd=a("h2"),h7=a("a"),P4e=a("span"),F(N8.$$.fragment),Tur=l(),B4e=a("span"),Mur=o("TFAutoModelForPreTraining"),JDe=l(),Ko=a("div"),F(q8.$$.fragment),Eur=l(),Qd=a("p"),Cur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),JQ=a("a"),wur=o("from_pretrained()"),Aur=o(" class method or the "),YQ=a("a"),Lur=o("from_config()"),yur=o(` class
method.`),xur=l(),j8=a("p"),$ur=o("This class cannot be instantiated directly using "),I4e=a("code"),kur=o("__init__()"),Sur=o(" (throws an error)."),Rur=l(),yt=a("div"),F(D8.$$.fragment),Pur=l(),N4e=a("p"),Bur=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Iur=l(),Hd=a("p"),Nur=o(`Note:
Loading a model from its configuration file does `),q4e=a("strong"),qur=o("not"),jur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=a("a"),Dur=o("from_pretrained()"),Gur=o(" to load the model weights."),Our=l(),F(p7.$$.fragment),Vur=l(),Ar=a("div"),F(G8.$$.fragment),Xur=l(),j4e=a("p"),zur=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Wur=l(),Za=a("p"),Qur=o("The model class to instantiate is selected based on the "),D4e=a("code"),Hur=o("model_type"),Uur=o(` property of the config object (either
passed as an argument or loaded from `),G4e=a("code"),Jur=o("pretrained_model_name_or_path"),Yur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=a("code"),Kur=o("pretrained_model_name_or_path"),Zur=o(":"),e1r=l(),se=a("ul"),_7=a("li"),V4e=a("strong"),o1r=o("albert"),r1r=o(" \u2014 "),ZQ=a("a"),t1r=o("TFAlbertForPreTraining"),a1r=o(" (ALBERT model)"),n1r=l(),u7=a("li"),X4e=a("strong"),s1r=o("bart"),l1r=o(" \u2014 "),eH=a("a"),i1r=o("TFBartForConditionalGeneration"),d1r=o(" (BART model)"),c1r=l(),b7=a("li"),z4e=a("strong"),f1r=o("bert"),m1r=o(" \u2014 "),oH=a("a"),g1r=o("TFBertForPreTraining"),h1r=o(" (BERT model)"),p1r=l(),v7=a("li"),W4e=a("strong"),_1r=o("camembert"),u1r=o(" \u2014 "),rH=a("a"),b1r=o("TFCamembertForMaskedLM"),v1r=o(" (CamemBERT model)"),F1r=l(),F7=a("li"),Q4e=a("strong"),T1r=o("ctrl"),M1r=o(" \u2014 "),tH=a("a"),E1r=o("TFCTRLLMHeadModel"),C1r=o(" (CTRL model)"),w1r=l(),T7=a("li"),H4e=a("strong"),A1r=o("distilbert"),L1r=o(" \u2014 "),aH=a("a"),y1r=o("TFDistilBertForMaskedLM"),x1r=o(" (DistilBERT model)"),$1r=l(),M7=a("li"),U4e=a("strong"),k1r=o("electra"),S1r=o(" \u2014 "),nH=a("a"),R1r=o("TFElectraForPreTraining"),P1r=o(" (ELECTRA model)"),B1r=l(),E7=a("li"),J4e=a("strong"),I1r=o("flaubert"),N1r=o(" \u2014 "),sH=a("a"),q1r=o("TFFlaubertWithLMHeadModel"),j1r=o(" (FlauBERT model)"),D1r=l(),C7=a("li"),Y4e=a("strong"),G1r=o("funnel"),O1r=o(" \u2014 "),lH=a("a"),V1r=o("TFFunnelForPreTraining"),X1r=o(" (Funnel Transformer model)"),z1r=l(),w7=a("li"),K4e=a("strong"),W1r=o("gpt2"),Q1r=o(" \u2014 "),iH=a("a"),H1r=o("TFGPT2LMHeadModel"),U1r=o(" (OpenAI GPT-2 model)"),J1r=l(),A7=a("li"),Z4e=a("strong"),Y1r=o("layoutlm"),K1r=o(" \u2014 "),dH=a("a"),Z1r=o("TFLayoutLMForMaskedLM"),ebr=o(" (LayoutLM model)"),obr=l(),L7=a("li"),eve=a("strong"),rbr=o("lxmert"),tbr=o(" \u2014 "),cH=a("a"),abr=o("TFLxmertForPreTraining"),nbr=o(" (LXMERT model)"),sbr=l(),y7=a("li"),ove=a("strong"),lbr=o("mobilebert"),ibr=o(" \u2014 "),fH=a("a"),dbr=o("TFMobileBertForPreTraining"),cbr=o(" (MobileBERT model)"),fbr=l(),x7=a("li"),rve=a("strong"),mbr=o("mpnet"),gbr=o(" \u2014 "),mH=a("a"),hbr=o("TFMPNetForMaskedLM"),pbr=o(" (MPNet model)"),_br=l(),$7=a("li"),tve=a("strong"),ubr=o("openai-gpt"),bbr=o(" \u2014 "),gH=a("a"),vbr=o("TFOpenAIGPTLMHeadModel"),Fbr=o(" (OpenAI GPT model)"),Tbr=l(),k7=a("li"),ave=a("strong"),Mbr=o("roberta"),Ebr=o(" \u2014 "),hH=a("a"),Cbr=o("TFRobertaForMaskedLM"),wbr=o(" (RoBERTa model)"),Abr=l(),S7=a("li"),nve=a("strong"),Lbr=o("t5"),ybr=o(" \u2014 "),pH=a("a"),xbr=o("TFT5ForConditionalGeneration"),$br=o(" (T5 model)"),kbr=l(),R7=a("li"),sve=a("strong"),Sbr=o("tapas"),Rbr=o(" \u2014 "),_H=a("a"),Pbr=o("TFTapasForMaskedLM"),Bbr=o(" (TAPAS model)"),Ibr=l(),P7=a("li"),lve=a("strong"),Nbr=o("transfo-xl"),qbr=o(" \u2014 "),uH=a("a"),jbr=o("TFTransfoXLLMHeadModel"),Dbr=o(" (Transformer-XL model)"),Gbr=l(),B7=a("li"),ive=a("strong"),Obr=o("vit_mae"),Vbr=o(" \u2014 "),bH=a("a"),Xbr=o("TFViTMAEForPreTraining"),zbr=o(" (ViTMAE model)"),Wbr=l(),I7=a("li"),dve=a("strong"),Qbr=o("xlm"),Hbr=o(" \u2014 "),vH=a("a"),Ubr=o("TFXLMWithLMHeadModel"),Jbr=o(" (XLM model)"),Ybr=l(),N7=a("li"),cve=a("strong"),Kbr=o("xlm-roberta"),Zbr=o(" \u2014 "),FH=a("a"),e2r=o("TFXLMRobertaForMaskedLM"),o2r=o(" (XLM-RoBERTa model)"),r2r=l(),q7=a("li"),fve=a("strong"),t2r=o("xlnet"),a2r=o(" \u2014 "),TH=a("a"),n2r=o("TFXLNetLMHeadModel"),s2r=o(" (XLNet model)"),l2r=l(),F(j7.$$.fragment),YDe=l(),Ud=a("h2"),D7=a("a"),mve=a("span"),F(O8.$$.fragment),i2r=l(),gve=a("span"),d2r=o("TFAutoModelForCausalLM"),KDe=l(),Zo=a("div"),F(V8.$$.fragment),c2r=l(),Jd=a("p"),f2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MH=a("a"),m2r=o("from_pretrained()"),g2r=o(" class method or the "),EH=a("a"),h2r=o("from_config()"),p2r=o(` class
method.`),_2r=l(),X8=a("p"),u2r=o("This class cannot be instantiated directly using "),hve=a("code"),b2r=o("__init__()"),v2r=o(" (throws an error)."),F2r=l(),xt=a("div"),F(z8.$$.fragment),T2r=l(),pve=a("p"),M2r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),E2r=l(),Yd=a("p"),C2r=o(`Note:
Loading a model from its configuration file does `),_ve=a("strong"),w2r=o("not"),A2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),L2r=o("from_pretrained()"),y2r=o(" to load the model weights."),x2r=l(),F(G7.$$.fragment),$2r=l(),Lr=a("div"),F(W8.$$.fragment),k2r=l(),uve=a("p"),S2r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),R2r=l(),en=a("p"),P2r=o("The model class to instantiate is selected based on the "),bve=a("code"),B2r=o("model_type"),I2r=o(` property of the config object (either
passed as an argument or loaded from `),vve=a("code"),N2r=o("pretrained_model_name_or_path"),q2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=a("code"),j2r=o("pretrained_model_name_or_path"),D2r=o(":"),G2r=l(),Me=a("ul"),O7=a("li"),Tve=a("strong"),O2r=o("bert"),V2r=o(" \u2014 "),wH=a("a"),X2r=o("TFBertLMHeadModel"),z2r=o(" (BERT model)"),W2r=l(),V7=a("li"),Mve=a("strong"),Q2r=o("camembert"),H2r=o(" \u2014 "),AH=a("a"),U2r=o("TFCamembertForCausalLM"),J2r=o(" (CamemBERT model)"),Y2r=l(),X7=a("li"),Eve=a("strong"),K2r=o("ctrl"),Z2r=o(" \u2014 "),LH=a("a"),e4r=o("TFCTRLLMHeadModel"),o4r=o(" (CTRL model)"),r4r=l(),z7=a("li"),Cve=a("strong"),t4r=o("gpt2"),a4r=o(" \u2014 "),yH=a("a"),n4r=o("TFGPT2LMHeadModel"),s4r=o(" (OpenAI GPT-2 model)"),l4r=l(),W7=a("li"),wve=a("strong"),i4r=o("gptj"),d4r=o(" \u2014 "),xH=a("a"),c4r=o("TFGPTJForCausalLM"),f4r=o(" (GPT-J model)"),m4r=l(),Q7=a("li"),Ave=a("strong"),g4r=o("openai-gpt"),h4r=o(" \u2014 "),$H=a("a"),p4r=o("TFOpenAIGPTLMHeadModel"),_4r=o(" (OpenAI GPT model)"),u4r=l(),H7=a("li"),Lve=a("strong"),b4r=o("opt"),v4r=o(" \u2014 "),kH=a("a"),F4r=o("TFOPTForCausalLM"),T4r=o(" (OPT model)"),M4r=l(),U7=a("li"),yve=a("strong"),E4r=o("rembert"),C4r=o(" \u2014 "),SH=a("a"),w4r=o("TFRemBertForCausalLM"),A4r=o(" (RemBERT model)"),L4r=l(),J7=a("li"),xve=a("strong"),y4r=o("roberta"),x4r=o(" \u2014 "),RH=a("a"),$4r=o("TFRobertaForCausalLM"),k4r=o(" (RoBERTa model)"),S4r=l(),Y7=a("li"),$ve=a("strong"),R4r=o("roformer"),P4r=o(" \u2014 "),PH=a("a"),B4r=o("TFRoFormerForCausalLM"),I4r=o(" (RoFormer model)"),N4r=l(),K7=a("li"),kve=a("strong"),q4r=o("transfo-xl"),j4r=o(" \u2014 "),BH=a("a"),D4r=o("TFTransfoXLLMHeadModel"),G4r=o(" (Transformer-XL model)"),O4r=l(),Z7=a("li"),Sve=a("strong"),V4r=o("xlm"),X4r=o(" \u2014 "),IH=a("a"),z4r=o("TFXLMWithLMHeadModel"),W4r=o(" (XLM model)"),Q4r=l(),eM=a("li"),Rve=a("strong"),H4r=o("xlnet"),U4r=o(" \u2014 "),NH=a("a"),J4r=o("TFXLNetLMHeadModel"),Y4r=o(" (XLNet model)"),K4r=l(),F(oM.$$.fragment),ZDe=l(),Kd=a("h2"),rM=a("a"),Pve=a("span"),F(Q8.$$.fragment),Z4r=l(),Bve=a("span"),evr=o("TFAutoModelForImageClassification"),eGe=l(),er=a("div"),F(H8.$$.fragment),ovr=l(),Zd=a("p"),rvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qH=a("a"),tvr=o("from_pretrained()"),avr=o(" class method or the "),jH=a("a"),nvr=o("from_config()"),svr=o(` class
method.`),lvr=l(),U8=a("p"),ivr=o("This class cannot be instantiated directly using "),Ive=a("code"),dvr=o("__init__()"),cvr=o(" (throws an error)."),fvr=l(),$t=a("div"),F(J8.$$.fragment),mvr=l(),Nve=a("p"),gvr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hvr=l(),ec=a("p"),pvr=o(`Note:
Loading a model from its configuration file does `),qve=a("strong"),_vr=o("not"),uvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),bvr=o("from_pretrained()"),vvr=o(" to load the model weights."),Fvr=l(),F(tM.$$.fragment),Tvr=l(),yr=a("div"),F(Y8.$$.fragment),Mvr=l(),jve=a("p"),Evr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Cvr=l(),on=a("p"),wvr=o("The model class to instantiate is selected based on the "),Dve=a("code"),Avr=o("model_type"),Lvr=o(` property of the config object (either
passed as an argument or loaded from `),Gve=a("code"),yvr=o("pretrained_model_name_or_path"),xvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=a("code"),$vr=o("pretrained_model_name_or_path"),kvr=o(":"),Svr=l(),rn=a("ul"),aM=a("li"),Vve=a("strong"),Rvr=o("convnext"),Pvr=o(" \u2014 "),GH=a("a"),Bvr=o("TFConvNextForImageClassification"),Ivr=o(" (ConvNeXT model)"),Nvr=l(),nM=a("li"),Xve=a("strong"),qvr=o("data2vec-vision"),jvr=o(" \u2014 "),OH=a("a"),Dvr=o("TFData2VecVisionForImageClassification"),Gvr=o(" (Data2VecVision model)"),Ovr=l(),sM=a("li"),zve=a("strong"),Vvr=o("swin"),Xvr=o(" \u2014 "),VH=a("a"),zvr=o("TFSwinForImageClassification"),Wvr=o(" (Swin Transformer model)"),Qvr=l(),lM=a("li"),Wve=a("strong"),Hvr=o("vit"),Uvr=o(" \u2014 "),XH=a("a"),Jvr=o("TFViTForImageClassification"),Yvr=o(" (ViT model)"),Kvr=l(),F(iM.$$.fragment),oGe=l(),oc=a("h2"),dM=a("a"),Qve=a("span"),F(K8.$$.fragment),Zvr=l(),Hve=a("span"),eFr=o("TFAutoModelForMaskedLM"),rGe=l(),or=a("div"),F(Z8.$$.fragment),oFr=l(),rc=a("p"),rFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zH=a("a"),tFr=o("from_pretrained()"),aFr=o(" class method or the "),WH=a("a"),nFr=o("from_config()"),sFr=o(` class
method.`),lFr=l(),e9=a("p"),iFr=o("This class cannot be instantiated directly using "),Uve=a("code"),dFr=o("__init__()"),cFr=o(" (throws an error)."),fFr=l(),kt=a("div"),F(o9.$$.fragment),mFr=l(),Jve=a("p"),gFr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),hFr=l(),tc=a("p"),pFr=o(`Note:
Loading a model from its configuration file does `),Yve=a("strong"),_Fr=o("not"),uFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),bFr=o("from_pretrained()"),vFr=o(" to load the model weights."),FFr=l(),F(cM.$$.fragment),TFr=l(),xr=a("div"),F(r9.$$.fragment),MFr=l(),Kve=a("p"),EFr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),CFr=l(),tn=a("p"),wFr=o("The model class to instantiate is selected based on the "),Zve=a("code"),AFr=o("model_type"),LFr=o(` property of the config object (either
passed as an argument or loaded from `),eFe=a("code"),yFr=o("pretrained_model_name_or_path"),xFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oFe=a("code"),$Fr=o("pretrained_model_name_or_path"),kFr=o(":"),SFr=l(),ie=a("ul"),fM=a("li"),rFe=a("strong"),RFr=o("albert"),PFr=o(" \u2014 "),HH=a("a"),BFr=o("TFAlbertForMaskedLM"),IFr=o(" (ALBERT model)"),NFr=l(),mM=a("li"),tFe=a("strong"),qFr=o("bert"),jFr=o(" \u2014 "),UH=a("a"),DFr=o("TFBertForMaskedLM"),GFr=o(" (BERT model)"),OFr=l(),gM=a("li"),aFe=a("strong"),VFr=o("camembert"),XFr=o(" \u2014 "),JH=a("a"),zFr=o("TFCamembertForMaskedLM"),WFr=o(" (CamemBERT model)"),QFr=l(),hM=a("li"),nFe=a("strong"),HFr=o("convbert"),UFr=o(" \u2014 "),YH=a("a"),JFr=o("TFConvBertForMaskedLM"),YFr=o(" (ConvBERT model)"),KFr=l(),pM=a("li"),sFe=a("strong"),ZFr=o("deberta"),e6r=o(" \u2014 "),KH=a("a"),o6r=o("TFDebertaForMaskedLM"),r6r=o(" (DeBERTa model)"),t6r=l(),_M=a("li"),lFe=a("strong"),a6r=o("deberta-v2"),n6r=o(" \u2014 "),ZH=a("a"),s6r=o("TFDebertaV2ForMaskedLM"),l6r=o(" (DeBERTa-v2 model)"),i6r=l(),uM=a("li"),iFe=a("strong"),d6r=o("distilbert"),c6r=o(" \u2014 "),eU=a("a"),f6r=o("TFDistilBertForMaskedLM"),m6r=o(" (DistilBERT model)"),g6r=l(),bM=a("li"),dFe=a("strong"),h6r=o("electra"),p6r=o(" \u2014 "),oU=a("a"),_6r=o("TFElectraForMaskedLM"),u6r=o(" (ELECTRA model)"),b6r=l(),vM=a("li"),cFe=a("strong"),v6r=o("flaubert"),F6r=o(" \u2014 "),rU=a("a"),T6r=o("TFFlaubertWithLMHeadModel"),M6r=o(" (FlauBERT model)"),E6r=l(),FM=a("li"),fFe=a("strong"),C6r=o("funnel"),w6r=o(" \u2014 "),tU=a("a"),A6r=o("TFFunnelForMaskedLM"),L6r=o(" (Funnel Transformer model)"),y6r=l(),TM=a("li"),mFe=a("strong"),x6r=o("layoutlm"),$6r=o(" \u2014 "),aU=a("a"),k6r=o("TFLayoutLMForMaskedLM"),S6r=o(" (LayoutLM model)"),R6r=l(),MM=a("li"),gFe=a("strong"),P6r=o("longformer"),B6r=o(" \u2014 "),nU=a("a"),I6r=o("TFLongformerForMaskedLM"),N6r=o(" (Longformer model)"),q6r=l(),EM=a("li"),hFe=a("strong"),j6r=o("mobilebert"),D6r=o(" \u2014 "),sU=a("a"),G6r=o("TFMobileBertForMaskedLM"),O6r=o(" (MobileBERT model)"),V6r=l(),CM=a("li"),pFe=a("strong"),X6r=o("mpnet"),z6r=o(" \u2014 "),lU=a("a"),W6r=o("TFMPNetForMaskedLM"),Q6r=o(" (MPNet model)"),H6r=l(),wM=a("li"),_Fe=a("strong"),U6r=o("rembert"),J6r=o(" \u2014 "),iU=a("a"),Y6r=o("TFRemBertForMaskedLM"),K6r=o(" (RemBERT model)"),Z6r=l(),AM=a("li"),uFe=a("strong"),eTr=o("roberta"),oTr=o(" \u2014 "),dU=a("a"),rTr=o("TFRobertaForMaskedLM"),tTr=o(" (RoBERTa model)"),aTr=l(),LM=a("li"),bFe=a("strong"),nTr=o("roformer"),sTr=o(" \u2014 "),cU=a("a"),lTr=o("TFRoFormerForMaskedLM"),iTr=o(" (RoFormer model)"),dTr=l(),yM=a("li"),vFe=a("strong"),cTr=o("tapas"),fTr=o(" \u2014 "),fU=a("a"),mTr=o("TFTapasForMaskedLM"),gTr=o(" (TAPAS model)"),hTr=l(),xM=a("li"),FFe=a("strong"),pTr=o("xlm"),_Tr=o(" \u2014 "),mU=a("a"),uTr=o("TFXLMWithLMHeadModel"),bTr=o(" (XLM model)"),vTr=l(),$M=a("li"),TFe=a("strong"),FTr=o("xlm-roberta"),TTr=o(" \u2014 "),gU=a("a"),MTr=o("TFXLMRobertaForMaskedLM"),ETr=o(" (XLM-RoBERTa model)"),CTr=l(),F(kM.$$.fragment),tGe=l(),ac=a("h2"),SM=a("a"),MFe=a("span"),F(t9.$$.fragment),wTr=l(),EFe=a("span"),ATr=o("TFAutoModelForSeq2SeqLM"),aGe=l(),rr=a("div"),F(a9.$$.fragment),LTr=l(),nc=a("p"),yTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hU=a("a"),xTr=o("from_pretrained()"),$Tr=o(" class method or the "),pU=a("a"),kTr=o("from_config()"),STr=o(` class
method.`),RTr=l(),n9=a("p"),PTr=o("This class cannot be instantiated directly using "),CFe=a("code"),BTr=o("__init__()"),ITr=o(" (throws an error)."),NTr=l(),St=a("div"),F(s9.$$.fragment),qTr=l(),wFe=a("p"),jTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DTr=l(),sc=a("p"),GTr=o(`Note:
Loading a model from its configuration file does `),AFe=a("strong"),OTr=o("not"),VTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=a("a"),XTr=o("from_pretrained()"),zTr=o(" to load the model weights."),WTr=l(),F(RM.$$.fragment),QTr=l(),$r=a("div"),F(l9.$$.fragment),HTr=l(),LFe=a("p"),UTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),JTr=l(),an=a("p"),YTr=o("The model class to instantiate is selected based on the "),yFe=a("code"),KTr=o("model_type"),ZTr=o(` property of the config object (either
passed as an argument or loaded from `),xFe=a("code"),e7r=o("pretrained_model_name_or_path"),o7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=a("code"),r7r=o("pretrained_model_name_or_path"),t7r=o(":"),a7r=l(),ye=a("ul"),PM=a("li"),kFe=a("strong"),n7r=o("bart"),s7r=o(" \u2014 "),uU=a("a"),l7r=o("TFBartForConditionalGeneration"),i7r=o(" (BART model)"),d7r=l(),BM=a("li"),SFe=a("strong"),c7r=o("blenderbot"),f7r=o(" \u2014 "),bU=a("a"),m7r=o("TFBlenderbotForConditionalGeneration"),g7r=o(" (Blenderbot model)"),h7r=l(),IM=a("li"),RFe=a("strong"),p7r=o("blenderbot-small"),_7r=o(" \u2014 "),vU=a("a"),u7r=o("TFBlenderbotSmallForConditionalGeneration"),b7r=o(" (BlenderbotSmall model)"),v7r=l(),NM=a("li"),PFe=a("strong"),F7r=o("encoder-decoder"),T7r=o(" \u2014 "),FU=a("a"),M7r=o("TFEncoderDecoderModel"),E7r=o(" (Encoder decoder model)"),C7r=l(),qM=a("li"),BFe=a("strong"),w7r=o("led"),A7r=o(" \u2014 "),TU=a("a"),L7r=o("TFLEDForConditionalGeneration"),y7r=o(" (LED model)"),x7r=l(),jM=a("li"),IFe=a("strong"),$7r=o("marian"),k7r=o(" \u2014 "),MU=a("a"),S7r=o("TFMarianMTModel"),R7r=o(" (Marian model)"),P7r=l(),DM=a("li"),NFe=a("strong"),B7r=o("mbart"),I7r=o(" \u2014 "),EU=a("a"),N7r=o("TFMBartForConditionalGeneration"),q7r=o(" (mBART model)"),j7r=l(),GM=a("li"),qFe=a("strong"),D7r=o("mt5"),G7r=o(" \u2014 "),CU=a("a"),O7r=o("TFMT5ForConditionalGeneration"),V7r=o(" (MT5 model)"),X7r=l(),OM=a("li"),jFe=a("strong"),z7r=o("pegasus"),W7r=o(" \u2014 "),wU=a("a"),Q7r=o("TFPegasusForConditionalGeneration"),H7r=o(" (Pegasus model)"),U7r=l(),VM=a("li"),DFe=a("strong"),J7r=o("t5"),Y7r=o(" \u2014 "),AU=a("a"),K7r=o("TFT5ForConditionalGeneration"),Z7r=o(" (T5 model)"),eMr=l(),F(XM.$$.fragment),nGe=l(),lc=a("h2"),zM=a("a"),GFe=a("span"),F(i9.$$.fragment),oMr=l(),OFe=a("span"),rMr=o("TFAutoModelForSequenceClassification"),sGe=l(),tr=a("div"),F(d9.$$.fragment),tMr=l(),ic=a("p"),aMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),LU=a("a"),nMr=o("from_pretrained()"),sMr=o(" class method or the "),yU=a("a"),lMr=o("from_config()"),iMr=o(` class
method.`),dMr=l(),c9=a("p"),cMr=o("This class cannot be instantiated directly using "),VFe=a("code"),fMr=o("__init__()"),mMr=o(" (throws an error)."),gMr=l(),Rt=a("div"),F(f9.$$.fragment),hMr=l(),XFe=a("p"),pMr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_Mr=l(),dc=a("p"),uMr=o(`Note:
Loading a model from its configuration file does `),zFe=a("strong"),bMr=o("not"),vMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=a("a"),FMr=o("from_pretrained()"),TMr=o(" to load the model weights."),MMr=l(),F(WM.$$.fragment),EMr=l(),kr=a("div"),F(m9.$$.fragment),CMr=l(),WFe=a("p"),wMr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),AMr=l(),nn=a("p"),LMr=o("The model class to instantiate is selected based on the "),QFe=a("code"),yMr=o("model_type"),xMr=o(` property of the config object (either
passed as an argument or loaded from `),HFe=a("code"),$Mr=o("pretrained_model_name_or_path"),kMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=a("code"),SMr=o("pretrained_model_name_or_path"),RMr=o(":"),PMr=l(),oe=a("ul"),QM=a("li"),JFe=a("strong"),BMr=o("albert"),IMr=o(" \u2014 "),$U=a("a"),NMr=o("TFAlbertForSequenceClassification"),qMr=o(" (ALBERT model)"),jMr=l(),HM=a("li"),YFe=a("strong"),DMr=o("bert"),GMr=o(" \u2014 "),kU=a("a"),OMr=o("TFBertForSequenceClassification"),VMr=o(" (BERT model)"),XMr=l(),UM=a("li"),KFe=a("strong"),zMr=o("camembert"),WMr=o(" \u2014 "),SU=a("a"),QMr=o("TFCamembertForSequenceClassification"),HMr=o(" (CamemBERT model)"),UMr=l(),JM=a("li"),ZFe=a("strong"),JMr=o("convbert"),YMr=o(" \u2014 "),RU=a("a"),KMr=o("TFConvBertForSequenceClassification"),ZMr=o(" (ConvBERT model)"),eEr=l(),YM=a("li"),e6e=a("strong"),oEr=o("ctrl"),rEr=o(" \u2014 "),PU=a("a"),tEr=o("TFCTRLForSequenceClassification"),aEr=o(" (CTRL model)"),nEr=l(),KM=a("li"),o6e=a("strong"),sEr=o("deberta"),lEr=o(" \u2014 "),BU=a("a"),iEr=o("TFDebertaForSequenceClassification"),dEr=o(" (DeBERTa model)"),cEr=l(),ZM=a("li"),r6e=a("strong"),fEr=o("deberta-v2"),mEr=o(" \u2014 "),IU=a("a"),gEr=o("TFDebertaV2ForSequenceClassification"),hEr=o(" (DeBERTa-v2 model)"),pEr=l(),eE=a("li"),t6e=a("strong"),_Er=o("distilbert"),uEr=o(" \u2014 "),NU=a("a"),bEr=o("TFDistilBertForSequenceClassification"),vEr=o(" (DistilBERT model)"),FEr=l(),oE=a("li"),a6e=a("strong"),TEr=o("electra"),MEr=o(" \u2014 "),qU=a("a"),EEr=o("TFElectraForSequenceClassification"),CEr=o(" (ELECTRA model)"),wEr=l(),rE=a("li"),n6e=a("strong"),AEr=o("flaubert"),LEr=o(" \u2014 "),jU=a("a"),yEr=o("TFFlaubertForSequenceClassification"),xEr=o(" (FlauBERT model)"),$Er=l(),tE=a("li"),s6e=a("strong"),kEr=o("funnel"),SEr=o(" \u2014 "),DU=a("a"),REr=o("TFFunnelForSequenceClassification"),PEr=o(" (Funnel Transformer model)"),BEr=l(),aE=a("li"),l6e=a("strong"),IEr=o("gpt2"),NEr=o(" \u2014 "),GU=a("a"),qEr=o("TFGPT2ForSequenceClassification"),jEr=o(" (OpenAI GPT-2 model)"),DEr=l(),nE=a("li"),i6e=a("strong"),GEr=o("gptj"),OEr=o(" \u2014 "),OU=a("a"),VEr=o("TFGPTJForSequenceClassification"),XEr=o(" (GPT-J model)"),zEr=l(),sE=a("li"),d6e=a("strong"),WEr=o("layoutlm"),QEr=o(" \u2014 "),VU=a("a"),HEr=o("TFLayoutLMForSequenceClassification"),UEr=o(" (LayoutLM model)"),JEr=l(),lE=a("li"),c6e=a("strong"),YEr=o("longformer"),KEr=o(" \u2014 "),XU=a("a"),ZEr=o("TFLongformerForSequenceClassification"),eCr=o(" (Longformer model)"),oCr=l(),iE=a("li"),f6e=a("strong"),rCr=o("mobilebert"),tCr=o(" \u2014 "),zU=a("a"),aCr=o("TFMobileBertForSequenceClassification"),nCr=o(" (MobileBERT model)"),sCr=l(),dE=a("li"),m6e=a("strong"),lCr=o("mpnet"),iCr=o(" \u2014 "),WU=a("a"),dCr=o("TFMPNetForSequenceClassification"),cCr=o(" (MPNet model)"),fCr=l(),cE=a("li"),g6e=a("strong"),mCr=o("openai-gpt"),gCr=o(" \u2014 "),QU=a("a"),hCr=o("TFOpenAIGPTForSequenceClassification"),pCr=o(" (OpenAI GPT model)"),_Cr=l(),fE=a("li"),h6e=a("strong"),uCr=o("rembert"),bCr=o(" \u2014 "),HU=a("a"),vCr=o("TFRemBertForSequenceClassification"),FCr=o(" (RemBERT model)"),TCr=l(),mE=a("li"),p6e=a("strong"),MCr=o("roberta"),ECr=o(" \u2014 "),UU=a("a"),CCr=o("TFRobertaForSequenceClassification"),wCr=o(" (RoBERTa model)"),ACr=l(),gE=a("li"),_6e=a("strong"),LCr=o("roformer"),yCr=o(" \u2014 "),JU=a("a"),xCr=o("TFRoFormerForSequenceClassification"),$Cr=o(" (RoFormer model)"),kCr=l(),hE=a("li"),u6e=a("strong"),SCr=o("tapas"),RCr=o(" \u2014 "),YU=a("a"),PCr=o("TFTapasForSequenceClassification"),BCr=o(" (TAPAS model)"),ICr=l(),pE=a("li"),b6e=a("strong"),NCr=o("transfo-xl"),qCr=o(" \u2014 "),KU=a("a"),jCr=o("TFTransfoXLForSequenceClassification"),DCr=o(" (Transformer-XL model)"),GCr=l(),_E=a("li"),v6e=a("strong"),OCr=o("xlm"),VCr=o(" \u2014 "),ZU=a("a"),XCr=o("TFXLMForSequenceClassification"),zCr=o(" (XLM model)"),WCr=l(),uE=a("li"),F6e=a("strong"),QCr=o("xlm-roberta"),HCr=o(" \u2014 "),eJ=a("a"),UCr=o("TFXLMRobertaForSequenceClassification"),JCr=o(" (XLM-RoBERTa model)"),YCr=l(),bE=a("li"),T6e=a("strong"),KCr=o("xlnet"),ZCr=o(" \u2014 "),oJ=a("a"),e5r=o("TFXLNetForSequenceClassification"),o5r=o(" (XLNet model)"),r5r=l(),F(vE.$$.fragment),lGe=l(),cc=a("h2"),FE=a("a"),M6e=a("span"),F(g9.$$.fragment),t5r=l(),E6e=a("span"),a5r=o("TFAutoModelForMultipleChoice"),iGe=l(),ar=a("div"),F(h9.$$.fragment),n5r=l(),fc=a("p"),s5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rJ=a("a"),l5r=o("from_pretrained()"),i5r=o(" class method or the "),tJ=a("a"),d5r=o("from_config()"),c5r=o(` class
method.`),f5r=l(),p9=a("p"),m5r=o("This class cannot be instantiated directly using "),C6e=a("code"),g5r=o("__init__()"),h5r=o(" (throws an error)."),p5r=l(),Pt=a("div"),F(_9.$$.fragment),_5r=l(),w6e=a("p"),u5r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),b5r=l(),mc=a("p"),v5r=o(`Note:
Loading a model from its configuration file does `),A6e=a("strong"),F5r=o("not"),T5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aJ=a("a"),M5r=o("from_pretrained()"),E5r=o(" to load the model weights."),C5r=l(),F(TE.$$.fragment),w5r=l(),Sr=a("div"),F(u9.$$.fragment),A5r=l(),L6e=a("p"),L5r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),y5r=l(),sn=a("p"),x5r=o("The model class to instantiate is selected based on the "),y6e=a("code"),$5r=o("model_type"),k5r=o(` property of the config object (either
passed as an argument or loaded from `),x6e=a("code"),S5r=o("pretrained_model_name_or_path"),R5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=a("code"),P5r=o("pretrained_model_name_or_path"),B5r=o(":"),I5r=l(),pe=a("ul"),ME=a("li"),k6e=a("strong"),N5r=o("albert"),q5r=o(" \u2014 "),nJ=a("a"),j5r=o("TFAlbertForMultipleChoice"),D5r=o(" (ALBERT model)"),G5r=l(),EE=a("li"),S6e=a("strong"),O5r=o("bert"),V5r=o(" \u2014 "),sJ=a("a"),X5r=o("TFBertForMultipleChoice"),z5r=o(" (BERT model)"),W5r=l(),CE=a("li"),R6e=a("strong"),Q5r=o("camembert"),H5r=o(" \u2014 "),lJ=a("a"),U5r=o("TFCamembertForMultipleChoice"),J5r=o(" (CamemBERT model)"),Y5r=l(),wE=a("li"),P6e=a("strong"),K5r=o("convbert"),Z5r=o(" \u2014 "),iJ=a("a"),e3r=o("TFConvBertForMultipleChoice"),o3r=o(" (ConvBERT model)"),r3r=l(),AE=a("li"),B6e=a("strong"),t3r=o("distilbert"),a3r=o(" \u2014 "),dJ=a("a"),n3r=o("TFDistilBertForMultipleChoice"),s3r=o(" (DistilBERT model)"),l3r=l(),LE=a("li"),I6e=a("strong"),i3r=o("electra"),d3r=o(" \u2014 "),cJ=a("a"),c3r=o("TFElectraForMultipleChoice"),f3r=o(" (ELECTRA model)"),m3r=l(),yE=a("li"),N6e=a("strong"),g3r=o("flaubert"),h3r=o(" \u2014 "),fJ=a("a"),p3r=o("TFFlaubertForMultipleChoice"),_3r=o(" (FlauBERT model)"),u3r=l(),xE=a("li"),q6e=a("strong"),b3r=o("funnel"),v3r=o(" \u2014 "),mJ=a("a"),F3r=o("TFFunnelForMultipleChoice"),T3r=o(" (Funnel Transformer model)"),M3r=l(),$E=a("li"),j6e=a("strong"),E3r=o("longformer"),C3r=o(" \u2014 "),gJ=a("a"),w3r=o("TFLongformerForMultipleChoice"),A3r=o(" (Longformer model)"),L3r=l(),kE=a("li"),D6e=a("strong"),y3r=o("mobilebert"),x3r=o(" \u2014 "),hJ=a("a"),$3r=o("TFMobileBertForMultipleChoice"),k3r=o(" (MobileBERT model)"),S3r=l(),SE=a("li"),G6e=a("strong"),R3r=o("mpnet"),P3r=o(" \u2014 "),pJ=a("a"),B3r=o("TFMPNetForMultipleChoice"),I3r=o(" (MPNet model)"),N3r=l(),RE=a("li"),O6e=a("strong"),q3r=o("rembert"),j3r=o(" \u2014 "),_J=a("a"),D3r=o("TFRemBertForMultipleChoice"),G3r=o(" (RemBERT model)"),O3r=l(),PE=a("li"),V6e=a("strong"),V3r=o("roberta"),X3r=o(" \u2014 "),uJ=a("a"),z3r=o("TFRobertaForMultipleChoice"),W3r=o(" (RoBERTa model)"),Q3r=l(),BE=a("li"),X6e=a("strong"),H3r=o("roformer"),U3r=o(" \u2014 "),bJ=a("a"),J3r=o("TFRoFormerForMultipleChoice"),Y3r=o(" (RoFormer model)"),K3r=l(),IE=a("li"),z6e=a("strong"),Z3r=o("xlm"),e0r=o(" \u2014 "),vJ=a("a"),o0r=o("TFXLMForMultipleChoice"),r0r=o(" (XLM model)"),t0r=l(),NE=a("li"),W6e=a("strong"),a0r=o("xlm-roberta"),n0r=o(" \u2014 "),FJ=a("a"),s0r=o("TFXLMRobertaForMultipleChoice"),l0r=o(" (XLM-RoBERTa model)"),i0r=l(),qE=a("li"),Q6e=a("strong"),d0r=o("xlnet"),c0r=o(" \u2014 "),TJ=a("a"),f0r=o("TFXLNetForMultipleChoice"),m0r=o(" (XLNet model)"),g0r=l(),F(jE.$$.fragment),dGe=l(),gc=a("h2"),DE=a("a"),H6e=a("span"),F(b9.$$.fragment),h0r=l(),U6e=a("span"),p0r=o("TFAutoModelForNextSentencePrediction"),cGe=l(),nr=a("div"),F(v9.$$.fragment),_0r=l(),hc=a("p"),u0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),MJ=a("a"),b0r=o("from_pretrained()"),v0r=o(" class method or the "),EJ=a("a"),F0r=o("from_config()"),T0r=o(` class
method.`),M0r=l(),F9=a("p"),E0r=o("This class cannot be instantiated directly using "),J6e=a("code"),C0r=o("__init__()"),w0r=o(" (throws an error)."),A0r=l(),Bt=a("div"),F(T9.$$.fragment),L0r=l(),Y6e=a("p"),y0r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),x0r=l(),pc=a("p"),$0r=o(`Note:
Loading a model from its configuration file does `),K6e=a("strong"),k0r=o("not"),S0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=a("a"),R0r=o("from_pretrained()"),P0r=o(" to load the model weights."),B0r=l(),F(GE.$$.fragment),I0r=l(),Rr=a("div"),F(M9.$$.fragment),N0r=l(),Z6e=a("p"),q0r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),j0r=l(),ln=a("p"),D0r=o("The model class to instantiate is selected based on the "),eTe=a("code"),G0r=o("model_type"),O0r=o(` property of the config object (either
passed as an argument or loaded from `),oTe=a("code"),V0r=o("pretrained_model_name_or_path"),X0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=a("code"),z0r=o("pretrained_model_name_or_path"),W0r=o(":"),Q0r=l(),E9=a("ul"),OE=a("li"),tTe=a("strong"),H0r=o("bert"),U0r=o(" \u2014 "),wJ=a("a"),J0r=o("TFBertForNextSentencePrediction"),Y0r=o(" (BERT model)"),K0r=l(),VE=a("li"),aTe=a("strong"),Z0r=o("mobilebert"),ewr=o(" \u2014 "),AJ=a("a"),owr=o("TFMobileBertForNextSentencePrediction"),rwr=o(" (MobileBERT model)"),twr=l(),F(XE.$$.fragment),fGe=l(),_c=a("h2"),zE=a("a"),nTe=a("span"),F(C9.$$.fragment),awr=l(),sTe=a("span"),nwr=o("TFAutoModelForTableQuestionAnswering"),mGe=l(),sr=a("div"),F(w9.$$.fragment),swr=l(),uc=a("p"),lwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LJ=a("a"),iwr=o("from_pretrained()"),dwr=o(" class method or the "),yJ=a("a"),cwr=o("from_config()"),fwr=o(` class
method.`),mwr=l(),A9=a("p"),gwr=o("This class cannot be instantiated directly using "),lTe=a("code"),hwr=o("__init__()"),pwr=o(" (throws an error)."),_wr=l(),It=a("div"),F(L9.$$.fragment),uwr=l(),iTe=a("p"),bwr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vwr=l(),bc=a("p"),Fwr=o(`Note:
Loading a model from its configuration file does `),dTe=a("strong"),Twr=o("not"),Mwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=a("a"),Ewr=o("from_pretrained()"),Cwr=o(" to load the model weights."),wwr=l(),F(WE.$$.fragment),Awr=l(),Pr=a("div"),F(y9.$$.fragment),Lwr=l(),cTe=a("p"),ywr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xwr=l(),dn=a("p"),$wr=o("The model class to instantiate is selected based on the "),fTe=a("code"),kwr=o("model_type"),Swr=o(` property of the config object (either
passed as an argument or loaded from `),mTe=a("code"),Rwr=o("pretrained_model_name_or_path"),Pwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=a("code"),Bwr=o("pretrained_model_name_or_path"),Iwr=o(":"),Nwr=l(),hTe=a("ul"),QE=a("li"),pTe=a("strong"),qwr=o("tapas"),jwr=o(" \u2014 "),$J=a("a"),Dwr=o("TFTapasForQuestionAnswering"),Gwr=o(" (TAPAS model)"),Owr=l(),F(HE.$$.fragment),gGe=l(),vc=a("h2"),UE=a("a"),_Te=a("span"),F(x9.$$.fragment),Vwr=l(),uTe=a("span"),Xwr=o("TFAutoModelForTokenClassification"),hGe=l(),lr=a("div"),F($9.$$.fragment),zwr=l(),Fc=a("p"),Wwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kJ=a("a"),Qwr=o("from_pretrained()"),Hwr=o(" class method or the "),SJ=a("a"),Uwr=o("from_config()"),Jwr=o(` class
method.`),Ywr=l(),k9=a("p"),Kwr=o("This class cannot be instantiated directly using "),bTe=a("code"),Zwr=o("__init__()"),eAr=o(" (throws an error)."),oAr=l(),Nt=a("div"),F(S9.$$.fragment),rAr=l(),vTe=a("p"),tAr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),aAr=l(),Tc=a("p"),nAr=o(`Note:
Loading a model from its configuration file does `),FTe=a("strong"),sAr=o("not"),lAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),iAr=o("from_pretrained()"),dAr=o(" to load the model weights."),cAr=l(),F(JE.$$.fragment),fAr=l(),Br=a("div"),F(R9.$$.fragment),mAr=l(),TTe=a("p"),gAr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hAr=l(),cn=a("p"),pAr=o("The model class to instantiate is selected based on the "),MTe=a("code"),_Ar=o("model_type"),uAr=o(` property of the config object (either
passed as an argument or loaded from `),ETe=a("code"),bAr=o("pretrained_model_name_or_path"),vAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=a("code"),FAr=o("pretrained_model_name_or_path"),TAr=o(":"),MAr=l(),de=a("ul"),YE=a("li"),wTe=a("strong"),EAr=o("albert"),CAr=o(" \u2014 "),PJ=a("a"),wAr=o("TFAlbertForTokenClassification"),AAr=o(" (ALBERT model)"),LAr=l(),KE=a("li"),ATe=a("strong"),yAr=o("bert"),xAr=o(" \u2014 "),BJ=a("a"),$Ar=o("TFBertForTokenClassification"),kAr=o(" (BERT model)"),SAr=l(),ZE=a("li"),LTe=a("strong"),RAr=o("camembert"),PAr=o(" \u2014 "),IJ=a("a"),BAr=o("TFCamembertForTokenClassification"),IAr=o(" (CamemBERT model)"),NAr=l(),eC=a("li"),yTe=a("strong"),qAr=o("convbert"),jAr=o(" \u2014 "),NJ=a("a"),DAr=o("TFConvBertForTokenClassification"),GAr=o(" (ConvBERT model)"),OAr=l(),oC=a("li"),xTe=a("strong"),VAr=o("deberta"),XAr=o(" \u2014 "),qJ=a("a"),zAr=o("TFDebertaForTokenClassification"),WAr=o(" (DeBERTa model)"),QAr=l(),rC=a("li"),$Te=a("strong"),HAr=o("deberta-v2"),UAr=o(" \u2014 "),jJ=a("a"),JAr=o("TFDebertaV2ForTokenClassification"),YAr=o(" (DeBERTa-v2 model)"),KAr=l(),tC=a("li"),kTe=a("strong"),ZAr=o("distilbert"),eLr=o(" \u2014 "),DJ=a("a"),oLr=o("TFDistilBertForTokenClassification"),rLr=o(" (DistilBERT model)"),tLr=l(),aC=a("li"),STe=a("strong"),aLr=o("electra"),nLr=o(" \u2014 "),GJ=a("a"),sLr=o("TFElectraForTokenClassification"),lLr=o(" (ELECTRA model)"),iLr=l(),nC=a("li"),RTe=a("strong"),dLr=o("flaubert"),cLr=o(" \u2014 "),OJ=a("a"),fLr=o("TFFlaubertForTokenClassification"),mLr=o(" (FlauBERT model)"),gLr=l(),sC=a("li"),PTe=a("strong"),hLr=o("funnel"),pLr=o(" \u2014 "),VJ=a("a"),_Lr=o("TFFunnelForTokenClassification"),uLr=o(" (Funnel Transformer model)"),bLr=l(),lC=a("li"),BTe=a("strong"),vLr=o("layoutlm"),FLr=o(" \u2014 "),XJ=a("a"),TLr=o("TFLayoutLMForTokenClassification"),MLr=o(" (LayoutLM model)"),ELr=l(),iC=a("li"),ITe=a("strong"),CLr=o("longformer"),wLr=o(" \u2014 "),zJ=a("a"),ALr=o("TFLongformerForTokenClassification"),LLr=o(" (Longformer model)"),yLr=l(),dC=a("li"),NTe=a("strong"),xLr=o("mobilebert"),$Lr=o(" \u2014 "),WJ=a("a"),kLr=o("TFMobileBertForTokenClassification"),SLr=o(" (MobileBERT model)"),RLr=l(),cC=a("li"),qTe=a("strong"),PLr=o("mpnet"),BLr=o(" \u2014 "),QJ=a("a"),ILr=o("TFMPNetForTokenClassification"),NLr=o(" (MPNet model)"),qLr=l(),fC=a("li"),jTe=a("strong"),jLr=o("rembert"),DLr=o(" \u2014 "),HJ=a("a"),GLr=o("TFRemBertForTokenClassification"),OLr=o(" (RemBERT model)"),VLr=l(),mC=a("li"),DTe=a("strong"),XLr=o("roberta"),zLr=o(" \u2014 "),UJ=a("a"),WLr=o("TFRobertaForTokenClassification"),QLr=o(" (RoBERTa model)"),HLr=l(),gC=a("li"),GTe=a("strong"),ULr=o("roformer"),JLr=o(" \u2014 "),JJ=a("a"),YLr=o("TFRoFormerForTokenClassification"),KLr=o(" (RoFormer model)"),ZLr=l(),hC=a("li"),OTe=a("strong"),eyr=o("xlm"),oyr=o(" \u2014 "),YJ=a("a"),ryr=o("TFXLMForTokenClassification"),tyr=o(" (XLM model)"),ayr=l(),pC=a("li"),VTe=a("strong"),nyr=o("xlm-roberta"),syr=o(" \u2014 "),KJ=a("a"),lyr=o("TFXLMRobertaForTokenClassification"),iyr=o(" (XLM-RoBERTa model)"),dyr=l(),_C=a("li"),XTe=a("strong"),cyr=o("xlnet"),fyr=o(" \u2014 "),ZJ=a("a"),myr=o("TFXLNetForTokenClassification"),gyr=o(" (XLNet model)"),hyr=l(),F(uC.$$.fragment),pGe=l(),Mc=a("h2"),bC=a("a"),zTe=a("span"),F(P9.$$.fragment),pyr=l(),WTe=a("span"),_yr=o("TFAutoModelForQuestionAnswering"),_Ge=l(),ir=a("div"),F(B9.$$.fragment),uyr=l(),Ec=a("p"),byr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eY=a("a"),vyr=o("from_pretrained()"),Fyr=o(" class method or the "),oY=a("a"),Tyr=o("from_config()"),Myr=o(` class
method.`),Eyr=l(),I9=a("p"),Cyr=o("This class cannot be instantiated directly using "),QTe=a("code"),wyr=o("__init__()"),Ayr=o(" (throws an error)."),Lyr=l(),qt=a("div"),F(N9.$$.fragment),yyr=l(),HTe=a("p"),xyr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$yr=l(),Cc=a("p"),kyr=o(`Note:
Loading a model from its configuration file does `),UTe=a("strong"),Syr=o("not"),Ryr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=a("a"),Pyr=o("from_pretrained()"),Byr=o(" to load the model weights."),Iyr=l(),F(vC.$$.fragment),Nyr=l(),Ir=a("div"),F(q9.$$.fragment),qyr=l(),JTe=a("p"),jyr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Dyr=l(),fn=a("p"),Gyr=o("The model class to instantiate is selected based on the "),YTe=a("code"),Oyr=o("model_type"),Vyr=o(` property of the config object (either
passed as an argument or loaded from `),KTe=a("code"),Xyr=o("pretrained_model_name_or_path"),zyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=a("code"),Wyr=o("pretrained_model_name_or_path"),Qyr=o(":"),Hyr=l(),ce=a("ul"),FC=a("li"),e7e=a("strong"),Uyr=o("albert"),Jyr=o(" \u2014 "),tY=a("a"),Yyr=o("TFAlbertForQuestionAnswering"),Kyr=o(" (ALBERT model)"),Zyr=l(),TC=a("li"),o7e=a("strong"),e8r=o("bert"),o8r=o(" \u2014 "),aY=a("a"),r8r=o("TFBertForQuestionAnswering"),t8r=o(" (BERT model)"),a8r=l(),MC=a("li"),r7e=a("strong"),n8r=o("camembert"),s8r=o(" \u2014 "),nY=a("a"),l8r=o("TFCamembertForQuestionAnswering"),i8r=o(" (CamemBERT model)"),d8r=l(),EC=a("li"),t7e=a("strong"),c8r=o("convbert"),f8r=o(" \u2014 "),sY=a("a"),m8r=o("TFConvBertForQuestionAnswering"),g8r=o(" (ConvBERT model)"),h8r=l(),CC=a("li"),a7e=a("strong"),p8r=o("deberta"),_8r=o(" \u2014 "),lY=a("a"),u8r=o("TFDebertaForQuestionAnswering"),b8r=o(" (DeBERTa model)"),v8r=l(),wC=a("li"),n7e=a("strong"),F8r=o("deberta-v2"),T8r=o(" \u2014 "),iY=a("a"),M8r=o("TFDebertaV2ForQuestionAnswering"),E8r=o(" (DeBERTa-v2 model)"),C8r=l(),AC=a("li"),s7e=a("strong"),w8r=o("distilbert"),A8r=o(" \u2014 "),dY=a("a"),L8r=o("TFDistilBertForQuestionAnswering"),y8r=o(" (DistilBERT model)"),x8r=l(),LC=a("li"),l7e=a("strong"),$8r=o("electra"),k8r=o(" \u2014 "),cY=a("a"),S8r=o("TFElectraForQuestionAnswering"),R8r=o(" (ELECTRA model)"),P8r=l(),yC=a("li"),i7e=a("strong"),B8r=o("flaubert"),I8r=o(" \u2014 "),fY=a("a"),N8r=o("TFFlaubertForQuestionAnsweringSimple"),q8r=o(" (FlauBERT model)"),j8r=l(),xC=a("li"),d7e=a("strong"),D8r=o("funnel"),G8r=o(" \u2014 "),mY=a("a"),O8r=o("TFFunnelForQuestionAnswering"),V8r=o(" (Funnel Transformer model)"),X8r=l(),$C=a("li"),c7e=a("strong"),z8r=o("gptj"),W8r=o(" \u2014 "),gY=a("a"),Q8r=o("TFGPTJForQuestionAnswering"),H8r=o(" (GPT-J model)"),U8r=l(),kC=a("li"),f7e=a("strong"),J8r=o("longformer"),Y8r=o(" \u2014 "),hY=a("a"),K8r=o("TFLongformerForQuestionAnswering"),Z8r=o(" (Longformer model)"),e9r=l(),SC=a("li"),m7e=a("strong"),o9r=o("mobilebert"),r9r=o(" \u2014 "),pY=a("a"),t9r=o("TFMobileBertForQuestionAnswering"),a9r=o(" (MobileBERT model)"),n9r=l(),RC=a("li"),g7e=a("strong"),s9r=o("mpnet"),l9r=o(" \u2014 "),_Y=a("a"),i9r=o("TFMPNetForQuestionAnswering"),d9r=o(" (MPNet model)"),c9r=l(),PC=a("li"),h7e=a("strong"),f9r=o("rembert"),m9r=o(" \u2014 "),uY=a("a"),g9r=o("TFRemBertForQuestionAnswering"),h9r=o(" (RemBERT model)"),p9r=l(),BC=a("li"),p7e=a("strong"),_9r=o("roberta"),u9r=o(" \u2014 "),bY=a("a"),b9r=o("TFRobertaForQuestionAnswering"),v9r=o(" (RoBERTa model)"),F9r=l(),IC=a("li"),_7e=a("strong"),T9r=o("roformer"),M9r=o(" \u2014 "),vY=a("a"),E9r=o("TFRoFormerForQuestionAnswering"),C9r=o(" (RoFormer model)"),w9r=l(),NC=a("li"),u7e=a("strong"),A9r=o("xlm"),L9r=o(" \u2014 "),FY=a("a"),y9r=o("TFXLMForQuestionAnsweringSimple"),x9r=o(" (XLM model)"),$9r=l(),qC=a("li"),b7e=a("strong"),k9r=o("xlm-roberta"),S9r=o(" \u2014 "),TY=a("a"),R9r=o("TFXLMRobertaForQuestionAnswering"),P9r=o(" (XLM-RoBERTa model)"),B9r=l(),jC=a("li"),v7e=a("strong"),I9r=o("xlnet"),N9r=o(" \u2014 "),MY=a("a"),q9r=o("TFXLNetForQuestionAnsweringSimple"),j9r=o(" (XLNet model)"),D9r=l(),F(DC.$$.fragment),uGe=l(),wc=a("h2"),GC=a("a"),F7e=a("span"),F(j9.$$.fragment),G9r=l(),T7e=a("span"),O9r=o("TFAutoModelForVision2Seq"),bGe=l(),dr=a("div"),F(D9.$$.fragment),V9r=l(),Ac=a("p"),X9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),EY=a("a"),z9r=o("from_pretrained()"),W9r=o(" class method or the "),CY=a("a"),Q9r=o("from_config()"),H9r=o(` class
method.`),U9r=l(),G9=a("p"),J9r=o("This class cannot be instantiated directly using "),M7e=a("code"),Y9r=o("__init__()"),K9r=o(" (throws an error)."),Z9r=l(),jt=a("div"),F(O9.$$.fragment),exr=l(),E7e=a("p"),oxr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rxr=l(),Lc=a("p"),txr=o(`Note:
Loading a model from its configuration file does `),C7e=a("strong"),axr=o("not"),nxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),sxr=o("from_pretrained()"),lxr=o(" to load the model weights."),ixr=l(),F(OC.$$.fragment),dxr=l(),Nr=a("div"),F(V9.$$.fragment),cxr=l(),w7e=a("p"),fxr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mxr=l(),mn=a("p"),gxr=o("The model class to instantiate is selected based on the "),A7e=a("code"),hxr=o("model_type"),pxr=o(` property of the config object (either
passed as an argument or loaded from `),L7e=a("code"),_xr=o("pretrained_model_name_or_path"),uxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=a("code"),bxr=o("pretrained_model_name_or_path"),vxr=o(":"),Fxr=l(),x7e=a("ul"),VC=a("li"),$7e=a("strong"),Txr=o("vision-encoder-decoder"),Mxr=o(" \u2014 "),AY=a("a"),Exr=o("TFVisionEncoderDecoderModel"),Cxr=o(" (Vision Encoder decoder model)"),wxr=l(),F(XC.$$.fragment),vGe=l(),yc=a("h2"),zC=a("a"),k7e=a("span"),F(X9.$$.fragment),Axr=l(),S7e=a("span"),Lxr=o("TFAutoModelForSpeechSeq2Seq"),FGe=l(),cr=a("div"),F(z9.$$.fragment),yxr=l(),xc=a("p"),xxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),LY=a("a"),$xr=o("from_pretrained()"),kxr=o(" class method or the "),yY=a("a"),Sxr=o("from_config()"),Rxr=o(` class
method.`),Pxr=l(),W9=a("p"),Bxr=o("This class cannot be instantiated directly using "),R7e=a("code"),Ixr=o("__init__()"),Nxr=o(" (throws an error)."),qxr=l(),Dt=a("div"),F(Q9.$$.fragment),jxr=l(),P7e=a("p"),Dxr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Gxr=l(),$c=a("p"),Oxr=o(`Note:
Loading a model from its configuration file does `),B7e=a("strong"),Vxr=o("not"),Xxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=a("a"),zxr=o("from_pretrained()"),Wxr=o(" to load the model weights."),Qxr=l(),F(WC.$$.fragment),Hxr=l(),qr=a("div"),F(H9.$$.fragment),Uxr=l(),I7e=a("p"),Jxr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Yxr=l(),gn=a("p"),Kxr=o("The model class to instantiate is selected based on the "),N7e=a("code"),Zxr=o("model_type"),e$r=o(` property of the config object (either
passed as an argument or loaded from `),q7e=a("code"),o$r=o("pretrained_model_name_or_path"),r$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=a("code"),t$r=o("pretrained_model_name_or_path"),a$r=o(":"),n$r=l(),D7e=a("ul"),QC=a("li"),G7e=a("strong"),s$r=o("speech_to_text"),l$r=o(" \u2014 "),$Y=a("a"),i$r=o("TFSpeech2TextForConditionalGeneration"),d$r=o(" (Speech2Text model)"),c$r=l(),F(HC.$$.fragment),TGe=l(),kc=a("h2"),UC=a("a"),O7e=a("span"),F(U9.$$.fragment),f$r=l(),V7e=a("span"),m$r=o("FlaxAutoModel"),MGe=l(),fr=a("div"),F(J9.$$.fragment),g$r=l(),Sc=a("p"),h$r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kY=a("a"),p$r=o("from_pretrained()"),_$r=o(" class method or the "),SY=a("a"),u$r=o("from_config()"),b$r=o(` class
method.`),v$r=l(),Y9=a("p"),F$r=o("This class cannot be instantiated directly using "),X7e=a("code"),T$r=o("__init__()"),M$r=o(" (throws an error)."),E$r=l(),Gt=a("div"),F(K9.$$.fragment),C$r=l(),z7e=a("p"),w$r=o("Instantiates one of the base model classes of the library from a configuration."),A$r=l(),Rc=a("p"),L$r=o(`Note:
Loading a model from its configuration file does `),W7e=a("strong"),y$r=o("not"),x$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),$$r=o("from_pretrained()"),k$r=o(" to load the model weights."),S$r=l(),F(JC.$$.fragment),R$r=l(),jr=a("div"),F(Z9.$$.fragment),P$r=l(),Q7e=a("p"),B$r=o("Instantiate one of the base model classes of the library from a pretrained model."),I$r=l(),hn=a("p"),N$r=o("The model class to instantiate is selected based on the "),H7e=a("code"),q$r=o("model_type"),j$r=o(` property of the config object (either
passed as an argument or loaded from `),U7e=a("code"),D$r=o("pretrained_model_name_or_path"),G$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J7e=a("code"),O$r=o("pretrained_model_name_or_path"),V$r=o(":"),X$r=l(),re=a("ul"),YC=a("li"),Y7e=a("strong"),z$r=o("albert"),W$r=o(" \u2014 "),PY=a("a"),Q$r=o("FlaxAlbertModel"),H$r=o(" (ALBERT model)"),U$r=l(),KC=a("li"),K7e=a("strong"),J$r=o("bart"),Y$r=o(" \u2014 "),BY=a("a"),K$r=o("FlaxBartModel"),Z$r=o(" (BART model)"),ekr=l(),ZC=a("li"),Z7e=a("strong"),okr=o("beit"),rkr=o(" \u2014 "),IY=a("a"),tkr=o("FlaxBeitModel"),akr=o(" (BEiT model)"),nkr=l(),e5=a("li"),eMe=a("strong"),skr=o("bert"),lkr=o(" \u2014 "),NY=a("a"),ikr=o("FlaxBertModel"),dkr=o(" (BERT model)"),ckr=l(),o5=a("li"),oMe=a("strong"),fkr=o("big_bird"),mkr=o(" \u2014 "),qY=a("a"),gkr=o("FlaxBigBirdModel"),hkr=o(" (BigBird model)"),pkr=l(),r5=a("li"),rMe=a("strong"),_kr=o("blenderbot"),ukr=o(" \u2014 "),jY=a("a"),bkr=o("FlaxBlenderbotModel"),vkr=o(" (Blenderbot model)"),Fkr=l(),t5=a("li"),tMe=a("strong"),Tkr=o("blenderbot-small"),Mkr=o(" \u2014 "),DY=a("a"),Ekr=o("FlaxBlenderbotSmallModel"),Ckr=o(" (BlenderbotSmall model)"),wkr=l(),a5=a("li"),aMe=a("strong"),Akr=o("clip"),Lkr=o(" \u2014 "),GY=a("a"),ykr=o("FlaxCLIPModel"),xkr=o(" (CLIP model)"),$kr=l(),n5=a("li"),nMe=a("strong"),kkr=o("distilbert"),Skr=o(" \u2014 "),OY=a("a"),Rkr=o("FlaxDistilBertModel"),Pkr=o(" (DistilBERT model)"),Bkr=l(),s5=a("li"),sMe=a("strong"),Ikr=o("electra"),Nkr=o(" \u2014 "),VY=a("a"),qkr=o("FlaxElectraModel"),jkr=o(" (ELECTRA model)"),Dkr=l(),l5=a("li"),lMe=a("strong"),Gkr=o("gpt2"),Okr=o(" \u2014 "),XY=a("a"),Vkr=o("FlaxGPT2Model"),Xkr=o(" (OpenAI GPT-2 model)"),zkr=l(),i5=a("li"),iMe=a("strong"),Wkr=o("gpt_neo"),Qkr=o(" \u2014 "),zY=a("a"),Hkr=o("FlaxGPTNeoModel"),Ukr=o(" (GPT Neo model)"),Jkr=l(),d5=a("li"),dMe=a("strong"),Ykr=o("gptj"),Kkr=o(" \u2014 "),WY=a("a"),Zkr=o("FlaxGPTJModel"),eSr=o(" (GPT-J model)"),oSr=l(),c5=a("li"),cMe=a("strong"),rSr=o("marian"),tSr=o(" \u2014 "),QY=a("a"),aSr=o("FlaxMarianModel"),nSr=o(" (Marian model)"),sSr=l(),f5=a("li"),fMe=a("strong"),lSr=o("mbart"),iSr=o(" \u2014 "),HY=a("a"),dSr=o("FlaxMBartModel"),cSr=o(" (mBART model)"),fSr=l(),m5=a("li"),mMe=a("strong"),mSr=o("mt5"),gSr=o(" \u2014 "),UY=a("a"),hSr=o("FlaxMT5Model"),pSr=o(" (MT5 model)"),_Sr=l(),g5=a("li"),gMe=a("strong"),uSr=o("opt"),bSr=o(" \u2014 "),JY=a("a"),vSr=o("FlaxOPTModel"),FSr=o(" (OPT model)"),TSr=l(),h5=a("li"),hMe=a("strong"),MSr=o("pegasus"),ESr=o(" \u2014 "),YY=a("a"),CSr=o("FlaxPegasusModel"),wSr=o(" (Pegasus model)"),ASr=l(),p5=a("li"),pMe=a("strong"),LSr=o("roberta"),ySr=o(" \u2014 "),KY=a("a"),xSr=o("FlaxRobertaModel"),$Sr=o(" (RoBERTa model)"),kSr=l(),_5=a("li"),_Me=a("strong"),SSr=o("roformer"),RSr=o(" \u2014 "),ZY=a("a"),PSr=o("FlaxRoFormerModel"),BSr=o(" (RoFormer model)"),ISr=l(),u5=a("li"),uMe=a("strong"),NSr=o("t5"),qSr=o(" \u2014 "),eK=a("a"),jSr=o("FlaxT5Model"),DSr=o(" (T5 model)"),GSr=l(),b5=a("li"),bMe=a("strong"),OSr=o("vision-text-dual-encoder"),VSr=o(" \u2014 "),oK=a("a"),XSr=o("FlaxVisionTextDualEncoderModel"),zSr=o(" (VisionTextDualEncoder model)"),WSr=l(),v5=a("li"),vMe=a("strong"),QSr=o("vit"),HSr=o(" \u2014 "),rK=a("a"),USr=o("FlaxViTModel"),JSr=o(" (ViT model)"),YSr=l(),F5=a("li"),FMe=a("strong"),KSr=o("wav2vec2"),ZSr=o(" \u2014 "),tK=a("a"),eRr=o("FlaxWav2Vec2Model"),oRr=o(" (Wav2Vec2 model)"),rRr=l(),T5=a("li"),TMe=a("strong"),tRr=o("xglm"),aRr=o(" \u2014 "),aK=a("a"),nRr=o("FlaxXGLMModel"),sRr=o(" (XGLM model)"),lRr=l(),M5=a("li"),MMe=a("strong"),iRr=o("xlm-roberta"),dRr=o(" \u2014 "),nK=a("a"),cRr=o("FlaxXLMRobertaModel"),fRr=o(" (XLM-RoBERTa model)"),mRr=l(),F(E5.$$.fragment),EGe=l(),Pc=a("h2"),C5=a("a"),EMe=a("span"),F(ex.$$.fragment),gRr=l(),CMe=a("span"),hRr=o("FlaxAutoModelForCausalLM"),CGe=l(),mr=a("div"),F(ox.$$.fragment),pRr=l(),Bc=a("p"),_Rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sK=a("a"),uRr=o("from_pretrained()"),bRr=o(" class method or the "),lK=a("a"),vRr=o("from_config()"),FRr=o(` class
method.`),TRr=l(),rx=a("p"),MRr=o("This class cannot be instantiated directly using "),wMe=a("code"),ERr=o("__init__()"),CRr=o(" (throws an error)."),wRr=l(),Ot=a("div"),F(tx.$$.fragment),ARr=l(),AMe=a("p"),LRr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yRr=l(),Ic=a("p"),xRr=o(`Note:
Loading a model from its configuration file does `),LMe=a("strong"),$Rr=o("not"),kRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=a("a"),SRr=o("from_pretrained()"),RRr=o(" to load the model weights."),PRr=l(),F(w5.$$.fragment),BRr=l(),Dr=a("div"),F(ax.$$.fragment),IRr=l(),yMe=a("p"),NRr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qRr=l(),pn=a("p"),jRr=o("The model class to instantiate is selected based on the "),xMe=a("code"),DRr=o("model_type"),GRr=o(` property of the config object (either
passed as an argument or loaded from `),$Me=a("code"),ORr=o("pretrained_model_name_or_path"),VRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=a("code"),XRr=o("pretrained_model_name_or_path"),zRr=o(":"),WRr=l(),xe=a("ul"),A5=a("li"),SMe=a("strong"),QRr=o("bart"),HRr=o(" \u2014 "),dK=a("a"),URr=o("FlaxBartForCausalLM"),JRr=o(" (BART model)"),YRr=l(),L5=a("li"),RMe=a("strong"),KRr=o("bert"),ZRr=o(" \u2014 "),cK=a("a"),ePr=o("FlaxBertForCausalLM"),oPr=o(" (BERT model)"),rPr=l(),y5=a("li"),PMe=a("strong"),tPr=o("big_bird"),aPr=o(" \u2014 "),fK=a("a"),nPr=o("FlaxBigBirdForCausalLM"),sPr=o(" (BigBird model)"),lPr=l(),x5=a("li"),BMe=a("strong"),iPr=o("electra"),dPr=o(" \u2014 "),mK=a("a"),cPr=o("FlaxElectraForCausalLM"),fPr=o(" (ELECTRA model)"),mPr=l(),$5=a("li"),IMe=a("strong"),gPr=o("gpt2"),hPr=o(" \u2014 "),gK=a("a"),pPr=o("FlaxGPT2LMHeadModel"),_Pr=o(" (OpenAI GPT-2 model)"),uPr=l(),k5=a("li"),NMe=a("strong"),bPr=o("gpt_neo"),vPr=o(" \u2014 "),hK=a("a"),FPr=o("FlaxGPTNeoForCausalLM"),TPr=o(" (GPT Neo model)"),MPr=l(),S5=a("li"),qMe=a("strong"),EPr=o("gptj"),CPr=o(" \u2014 "),pK=a("a"),wPr=o("FlaxGPTJForCausalLM"),APr=o(" (GPT-J model)"),LPr=l(),R5=a("li"),jMe=a("strong"),yPr=o("opt"),xPr=o(" \u2014 "),_K=a("a"),$Pr=o("FlaxOPTForCausalLM"),kPr=o(" (OPT model)"),SPr=l(),P5=a("li"),DMe=a("strong"),RPr=o("roberta"),PPr=o(" \u2014 "),uK=a("a"),BPr=o("FlaxRobertaForCausalLM"),IPr=o(" (RoBERTa model)"),NPr=l(),B5=a("li"),GMe=a("strong"),qPr=o("xglm"),jPr=o(" \u2014 "),bK=a("a"),DPr=o("FlaxXGLMForCausalLM"),GPr=o(" (XGLM model)"),OPr=l(),F(I5.$$.fragment),wGe=l(),Nc=a("h2"),N5=a("a"),OMe=a("span"),F(nx.$$.fragment),VPr=l(),VMe=a("span"),XPr=o("FlaxAutoModelForPreTraining"),AGe=l(),gr=a("div"),F(sx.$$.fragment),zPr=l(),qc=a("p"),WPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vK=a("a"),QPr=o("from_pretrained()"),HPr=o(" class method or the "),FK=a("a"),UPr=o("from_config()"),JPr=o(` class
method.`),YPr=l(),lx=a("p"),KPr=o("This class cannot be instantiated directly using "),XMe=a("code"),ZPr=o("__init__()"),eBr=o(" (throws an error)."),oBr=l(),Vt=a("div"),F(ix.$$.fragment),rBr=l(),zMe=a("p"),tBr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),aBr=l(),jc=a("p"),nBr=o(`Note:
Loading a model from its configuration file does `),WMe=a("strong"),sBr=o("not"),lBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=a("a"),iBr=o("from_pretrained()"),dBr=o(" to load the model weights."),cBr=l(),F(q5.$$.fragment),fBr=l(),Gr=a("div"),F(dx.$$.fragment),mBr=l(),QMe=a("p"),gBr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hBr=l(),_n=a("p"),pBr=o("The model class to instantiate is selected based on the "),HMe=a("code"),_Br=o("model_type"),uBr=o(` property of the config object (either
passed as an argument or loaded from `),UMe=a("code"),bBr=o("pretrained_model_name_or_path"),vBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JMe=a("code"),FBr=o("pretrained_model_name_or_path"),TBr=o(":"),MBr=l(),Ee=a("ul"),j5=a("li"),YMe=a("strong"),EBr=o("albert"),CBr=o(" \u2014 "),MK=a("a"),wBr=o("FlaxAlbertForPreTraining"),ABr=o(" (ALBERT model)"),LBr=l(),D5=a("li"),KMe=a("strong"),yBr=o("bart"),xBr=o(" \u2014 "),EK=a("a"),$Br=o("FlaxBartForConditionalGeneration"),kBr=o(" (BART model)"),SBr=l(),G5=a("li"),ZMe=a("strong"),RBr=o("bert"),PBr=o(" \u2014 "),CK=a("a"),BBr=o("FlaxBertForPreTraining"),IBr=o(" (BERT model)"),NBr=l(),O5=a("li"),eEe=a("strong"),qBr=o("big_bird"),jBr=o(" \u2014 "),wK=a("a"),DBr=o("FlaxBigBirdForPreTraining"),GBr=o(" (BigBird model)"),OBr=l(),V5=a("li"),oEe=a("strong"),VBr=o("electra"),XBr=o(" \u2014 "),AK=a("a"),zBr=o("FlaxElectraForPreTraining"),WBr=o(" (ELECTRA model)"),QBr=l(),X5=a("li"),rEe=a("strong"),HBr=o("mbart"),UBr=o(" \u2014 "),LK=a("a"),JBr=o("FlaxMBartForConditionalGeneration"),YBr=o(" (mBART model)"),KBr=l(),z5=a("li"),tEe=a("strong"),ZBr=o("mt5"),eIr=o(" \u2014 "),yK=a("a"),oIr=o("FlaxMT5ForConditionalGeneration"),rIr=o(" (MT5 model)"),tIr=l(),W5=a("li"),aEe=a("strong"),aIr=o("roberta"),nIr=o(" \u2014 "),xK=a("a"),sIr=o("FlaxRobertaForMaskedLM"),lIr=o(" (RoBERTa model)"),iIr=l(),Q5=a("li"),nEe=a("strong"),dIr=o("roformer"),cIr=o(" \u2014 "),$K=a("a"),fIr=o("FlaxRoFormerForMaskedLM"),mIr=o(" (RoFormer model)"),gIr=l(),H5=a("li"),sEe=a("strong"),hIr=o("t5"),pIr=o(" \u2014 "),kK=a("a"),_Ir=o("FlaxT5ForConditionalGeneration"),uIr=o(" (T5 model)"),bIr=l(),U5=a("li"),lEe=a("strong"),vIr=o("wav2vec2"),FIr=o(" \u2014 "),SK=a("a"),TIr=o("FlaxWav2Vec2ForPreTraining"),MIr=o(" (Wav2Vec2 model)"),EIr=l(),J5=a("li"),iEe=a("strong"),CIr=o("xlm-roberta"),wIr=o(" \u2014 "),RK=a("a"),AIr=o("FlaxXLMRobertaForMaskedLM"),LIr=o(" (XLM-RoBERTa model)"),yIr=l(),F(Y5.$$.fragment),LGe=l(),Dc=a("h2"),K5=a("a"),dEe=a("span"),F(cx.$$.fragment),xIr=l(),cEe=a("span"),$Ir=o("FlaxAutoModelForMaskedLM"),yGe=l(),hr=a("div"),F(fx.$$.fragment),kIr=l(),Gc=a("p"),SIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PK=a("a"),RIr=o("from_pretrained()"),PIr=o(" class method or the "),BK=a("a"),BIr=o("from_config()"),IIr=o(` class
method.`),NIr=l(),mx=a("p"),qIr=o("This class cannot be instantiated directly using "),fEe=a("code"),jIr=o("__init__()"),DIr=o(" (throws an error)."),GIr=l(),Xt=a("div"),F(gx.$$.fragment),OIr=l(),mEe=a("p"),VIr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),XIr=l(),Oc=a("p"),zIr=o(`Note:
Loading a model from its configuration file does `),gEe=a("strong"),WIr=o("not"),QIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=a("a"),HIr=o("from_pretrained()"),UIr=o(" to load the model weights."),JIr=l(),F(Z5.$$.fragment),YIr=l(),Or=a("div"),F(hx.$$.fragment),KIr=l(),hEe=a("p"),ZIr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),eNr=l(),un=a("p"),oNr=o("The model class to instantiate is selected based on the "),pEe=a("code"),rNr=o("model_type"),tNr=o(` property of the config object (either
passed as an argument or loaded from `),_Ee=a("code"),aNr=o("pretrained_model_name_or_path"),nNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uEe=a("code"),sNr=o("pretrained_model_name_or_path"),lNr=o(":"),iNr=l(),$e=a("ul"),e3=a("li"),bEe=a("strong"),dNr=o("albert"),cNr=o(" \u2014 "),NK=a("a"),fNr=o("FlaxAlbertForMaskedLM"),mNr=o(" (ALBERT model)"),gNr=l(),o3=a("li"),vEe=a("strong"),hNr=o("bart"),pNr=o(" \u2014 "),qK=a("a"),_Nr=o("FlaxBartForConditionalGeneration"),uNr=o(" (BART model)"),bNr=l(),r3=a("li"),FEe=a("strong"),vNr=o("bert"),FNr=o(" \u2014 "),jK=a("a"),TNr=o("FlaxBertForMaskedLM"),MNr=o(" (BERT model)"),ENr=l(),t3=a("li"),TEe=a("strong"),CNr=o("big_bird"),wNr=o(" \u2014 "),DK=a("a"),ANr=o("FlaxBigBirdForMaskedLM"),LNr=o(" (BigBird model)"),yNr=l(),a3=a("li"),MEe=a("strong"),xNr=o("distilbert"),$Nr=o(" \u2014 "),GK=a("a"),kNr=o("FlaxDistilBertForMaskedLM"),SNr=o(" (DistilBERT model)"),RNr=l(),n3=a("li"),EEe=a("strong"),PNr=o("electra"),BNr=o(" \u2014 "),OK=a("a"),INr=o("FlaxElectraForMaskedLM"),NNr=o(" (ELECTRA model)"),qNr=l(),s3=a("li"),CEe=a("strong"),jNr=o("mbart"),DNr=o(" \u2014 "),VK=a("a"),GNr=o("FlaxMBartForConditionalGeneration"),ONr=o(" (mBART model)"),VNr=l(),l3=a("li"),wEe=a("strong"),XNr=o("roberta"),zNr=o(" \u2014 "),XK=a("a"),WNr=o("FlaxRobertaForMaskedLM"),QNr=o(" (RoBERTa model)"),HNr=l(),i3=a("li"),AEe=a("strong"),UNr=o("roformer"),JNr=o(" \u2014 "),zK=a("a"),YNr=o("FlaxRoFormerForMaskedLM"),KNr=o(" (RoFormer model)"),ZNr=l(),d3=a("li"),LEe=a("strong"),eqr=o("xlm-roberta"),oqr=o(" \u2014 "),WK=a("a"),rqr=o("FlaxXLMRobertaForMaskedLM"),tqr=o(" (XLM-RoBERTa model)"),aqr=l(),F(c3.$$.fragment),xGe=l(),Vc=a("h2"),f3=a("a"),yEe=a("span"),F(px.$$.fragment),nqr=l(),xEe=a("span"),sqr=o("FlaxAutoModelForSeq2SeqLM"),$Ge=l(),pr=a("div"),F(_x.$$.fragment),lqr=l(),Xc=a("p"),iqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QK=a("a"),dqr=o("from_pretrained()"),cqr=o(" class method or the "),HK=a("a"),fqr=o("from_config()"),mqr=o(` class
method.`),gqr=l(),ux=a("p"),hqr=o("This class cannot be instantiated directly using "),$Ee=a("code"),pqr=o("__init__()"),_qr=o(" (throws an error)."),uqr=l(),zt=a("div"),F(bx.$$.fragment),bqr=l(),kEe=a("p"),vqr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Fqr=l(),zc=a("p"),Tqr=o(`Note:
Loading a model from its configuration file does `),SEe=a("strong"),Mqr=o("not"),Eqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UK=a("a"),Cqr=o("from_pretrained()"),wqr=o(" to load the model weights."),Aqr=l(),F(m3.$$.fragment),Lqr=l(),Vr=a("div"),F(vx.$$.fragment),yqr=l(),REe=a("p"),xqr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$qr=l(),bn=a("p"),kqr=o("The model class to instantiate is selected based on the "),PEe=a("code"),Sqr=o("model_type"),Rqr=o(` property of the config object (either
passed as an argument or loaded from `),BEe=a("code"),Pqr=o("pretrained_model_name_or_path"),Bqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IEe=a("code"),Iqr=o("pretrained_model_name_or_path"),Nqr=o(":"),qqr=l(),Pe=a("ul"),g3=a("li"),NEe=a("strong"),jqr=o("bart"),Dqr=o(" \u2014 "),JK=a("a"),Gqr=o("FlaxBartForConditionalGeneration"),Oqr=o(" (BART model)"),Vqr=l(),h3=a("li"),qEe=a("strong"),Xqr=o("blenderbot"),zqr=o(" \u2014 "),YK=a("a"),Wqr=o("FlaxBlenderbotForConditionalGeneration"),Qqr=o(" (Blenderbot model)"),Hqr=l(),p3=a("li"),jEe=a("strong"),Uqr=o("blenderbot-small"),Jqr=o(" \u2014 "),KK=a("a"),Yqr=o("FlaxBlenderbotSmallForConditionalGeneration"),Kqr=o(" (BlenderbotSmall model)"),Zqr=l(),_3=a("li"),DEe=a("strong"),ejr=o("encoder-decoder"),ojr=o(" \u2014 "),ZK=a("a"),rjr=o("FlaxEncoderDecoderModel"),tjr=o(" (Encoder decoder model)"),ajr=l(),u3=a("li"),GEe=a("strong"),njr=o("marian"),sjr=o(" \u2014 "),eZ=a("a"),ljr=o("FlaxMarianMTModel"),ijr=o(" (Marian model)"),djr=l(),b3=a("li"),OEe=a("strong"),cjr=o("mbart"),fjr=o(" \u2014 "),oZ=a("a"),mjr=o("FlaxMBartForConditionalGeneration"),gjr=o(" (mBART model)"),hjr=l(),v3=a("li"),VEe=a("strong"),pjr=o("mt5"),_jr=o(" \u2014 "),rZ=a("a"),ujr=o("FlaxMT5ForConditionalGeneration"),bjr=o(" (MT5 model)"),vjr=l(),F3=a("li"),XEe=a("strong"),Fjr=o("pegasus"),Tjr=o(" \u2014 "),tZ=a("a"),Mjr=o("FlaxPegasusForConditionalGeneration"),Ejr=o(" (Pegasus model)"),Cjr=l(),T3=a("li"),zEe=a("strong"),wjr=o("t5"),Ajr=o(" \u2014 "),aZ=a("a"),Ljr=o("FlaxT5ForConditionalGeneration"),yjr=o(" (T5 model)"),xjr=l(),F(M3.$$.fragment),kGe=l(),Wc=a("h2"),E3=a("a"),WEe=a("span"),F(Fx.$$.fragment),$jr=l(),QEe=a("span"),kjr=o("FlaxAutoModelForSequenceClassification"),SGe=l(),_r=a("div"),F(Tx.$$.fragment),Sjr=l(),Qc=a("p"),Rjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nZ=a("a"),Pjr=o("from_pretrained()"),Bjr=o(" class method or the "),sZ=a("a"),Ijr=o("from_config()"),Njr=o(` class
method.`),qjr=l(),Mx=a("p"),jjr=o("This class cannot be instantiated directly using "),HEe=a("code"),Djr=o("__init__()"),Gjr=o(" (throws an error)."),Ojr=l(),Wt=a("div"),F(Ex.$$.fragment),Vjr=l(),UEe=a("p"),Xjr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zjr=l(),Hc=a("p"),Wjr=o(`Note:
Loading a model from its configuration file does `),JEe=a("strong"),Qjr=o("not"),Hjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=a("a"),Ujr=o("from_pretrained()"),Jjr=o(" to load the model weights."),Yjr=l(),F(C3.$$.fragment),Kjr=l(),Xr=a("div"),F(Cx.$$.fragment),Zjr=l(),YEe=a("p"),eDr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oDr=l(),vn=a("p"),rDr=o("The model class to instantiate is selected based on the "),KEe=a("code"),tDr=o("model_type"),aDr=o(` property of the config object (either
passed as an argument or loaded from `),ZEe=a("code"),nDr=o("pretrained_model_name_or_path"),sDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eCe=a("code"),lDr=o("pretrained_model_name_or_path"),iDr=o(":"),dDr=l(),ke=a("ul"),w3=a("li"),oCe=a("strong"),cDr=o("albert"),fDr=o(" \u2014 "),iZ=a("a"),mDr=o("FlaxAlbertForSequenceClassification"),gDr=o(" (ALBERT model)"),hDr=l(),A3=a("li"),rCe=a("strong"),pDr=o("bart"),_Dr=o(" \u2014 "),dZ=a("a"),uDr=o("FlaxBartForSequenceClassification"),bDr=o(" (BART model)"),vDr=l(),L3=a("li"),tCe=a("strong"),FDr=o("bert"),TDr=o(" \u2014 "),cZ=a("a"),MDr=o("FlaxBertForSequenceClassification"),EDr=o(" (BERT model)"),CDr=l(),y3=a("li"),aCe=a("strong"),wDr=o("big_bird"),ADr=o(" \u2014 "),fZ=a("a"),LDr=o("FlaxBigBirdForSequenceClassification"),yDr=o(" (BigBird model)"),xDr=l(),x3=a("li"),nCe=a("strong"),$Dr=o("distilbert"),kDr=o(" \u2014 "),mZ=a("a"),SDr=o("FlaxDistilBertForSequenceClassification"),RDr=o(" (DistilBERT model)"),PDr=l(),$3=a("li"),sCe=a("strong"),BDr=o("electra"),IDr=o(" \u2014 "),gZ=a("a"),NDr=o("FlaxElectraForSequenceClassification"),qDr=o(" (ELECTRA model)"),jDr=l(),k3=a("li"),lCe=a("strong"),DDr=o("mbart"),GDr=o(" \u2014 "),hZ=a("a"),ODr=o("FlaxMBartForSequenceClassification"),VDr=o(" (mBART model)"),XDr=l(),S3=a("li"),iCe=a("strong"),zDr=o("roberta"),WDr=o(" \u2014 "),pZ=a("a"),QDr=o("FlaxRobertaForSequenceClassification"),HDr=o(" (RoBERTa model)"),UDr=l(),R3=a("li"),dCe=a("strong"),JDr=o("roformer"),YDr=o(" \u2014 "),_Z=a("a"),KDr=o("FlaxRoFormerForSequenceClassification"),ZDr=o(" (RoFormer model)"),eGr=l(),P3=a("li"),cCe=a("strong"),oGr=o("xlm-roberta"),rGr=o(" \u2014 "),uZ=a("a"),tGr=o("FlaxXLMRobertaForSequenceClassification"),aGr=o(" (XLM-RoBERTa model)"),nGr=l(),F(B3.$$.fragment),RGe=l(),Uc=a("h2"),I3=a("a"),fCe=a("span"),F(wx.$$.fragment),sGr=l(),mCe=a("span"),lGr=o("FlaxAutoModelForQuestionAnswering"),PGe=l(),ur=a("div"),F(Ax.$$.fragment),iGr=l(),Jc=a("p"),dGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bZ=a("a"),cGr=o("from_pretrained()"),fGr=o(" class method or the "),vZ=a("a"),mGr=o("from_config()"),gGr=o(` class
method.`),hGr=l(),Lx=a("p"),pGr=o("This class cannot be instantiated directly using "),gCe=a("code"),_Gr=o("__init__()"),uGr=o(" (throws an error)."),bGr=l(),Qt=a("div"),F(yx.$$.fragment),vGr=l(),hCe=a("p"),FGr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TGr=l(),Yc=a("p"),MGr=o(`Note:
Loading a model from its configuration file does `),pCe=a("strong"),EGr=o("not"),CGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FZ=a("a"),wGr=o("from_pretrained()"),AGr=o(" to load the model weights."),LGr=l(),F(N3.$$.fragment),yGr=l(),zr=a("div"),F(xx.$$.fragment),xGr=l(),_Ce=a("p"),$Gr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),kGr=l(),Fn=a("p"),SGr=o("The model class to instantiate is selected based on the "),uCe=a("code"),RGr=o("model_type"),PGr=o(` property of the config object (either
passed as an argument or loaded from `),bCe=a("code"),BGr=o("pretrained_model_name_or_path"),IGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vCe=a("code"),NGr=o("pretrained_model_name_or_path"),qGr=o(":"),jGr=l(),Se=a("ul"),q3=a("li"),FCe=a("strong"),DGr=o("albert"),GGr=o(" \u2014 "),TZ=a("a"),OGr=o("FlaxAlbertForQuestionAnswering"),VGr=o(" (ALBERT model)"),XGr=l(),j3=a("li"),TCe=a("strong"),zGr=o("bart"),WGr=o(" \u2014 "),MZ=a("a"),QGr=o("FlaxBartForQuestionAnswering"),HGr=o(" (BART model)"),UGr=l(),D3=a("li"),MCe=a("strong"),JGr=o("bert"),YGr=o(" \u2014 "),EZ=a("a"),KGr=o("FlaxBertForQuestionAnswering"),ZGr=o(" (BERT model)"),eOr=l(),G3=a("li"),ECe=a("strong"),oOr=o("big_bird"),rOr=o(" \u2014 "),CZ=a("a"),tOr=o("FlaxBigBirdForQuestionAnswering"),aOr=o(" (BigBird model)"),nOr=l(),O3=a("li"),CCe=a("strong"),sOr=o("distilbert"),lOr=o(" \u2014 "),wZ=a("a"),iOr=o("FlaxDistilBertForQuestionAnswering"),dOr=o(" (DistilBERT model)"),cOr=l(),V3=a("li"),wCe=a("strong"),fOr=o("electra"),mOr=o(" \u2014 "),AZ=a("a"),gOr=o("FlaxElectraForQuestionAnswering"),hOr=o(" (ELECTRA model)"),pOr=l(),X3=a("li"),ACe=a("strong"),_Or=o("mbart"),uOr=o(" \u2014 "),LZ=a("a"),bOr=o("FlaxMBartForQuestionAnswering"),vOr=o(" (mBART model)"),FOr=l(),z3=a("li"),LCe=a("strong"),TOr=o("roberta"),MOr=o(" \u2014 "),yZ=a("a"),EOr=o("FlaxRobertaForQuestionAnswering"),COr=o(" (RoBERTa model)"),wOr=l(),W3=a("li"),yCe=a("strong"),AOr=o("roformer"),LOr=o(" \u2014 "),xZ=a("a"),yOr=o("FlaxRoFormerForQuestionAnswering"),xOr=o(" (RoFormer model)"),$Or=l(),Q3=a("li"),xCe=a("strong"),kOr=o("xlm-roberta"),SOr=o(" \u2014 "),$Z=a("a"),ROr=o("FlaxXLMRobertaForQuestionAnswering"),POr=o(" (XLM-RoBERTa model)"),BOr=l(),F(H3.$$.fragment),BGe=l(),Kc=a("h2"),U3=a("a"),$Ce=a("span"),F($x.$$.fragment),IOr=l(),kCe=a("span"),NOr=o("FlaxAutoModelForTokenClassification"),IGe=l(),br=a("div"),F(kx.$$.fragment),qOr=l(),Zc=a("p"),jOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kZ=a("a"),DOr=o("from_pretrained()"),GOr=o(" class method or the "),SZ=a("a"),OOr=o("from_config()"),VOr=o(` class
method.`),XOr=l(),Sx=a("p"),zOr=o("This class cannot be instantiated directly using "),SCe=a("code"),WOr=o("__init__()"),QOr=o(" (throws an error)."),HOr=l(),Ht=a("div"),F(Rx.$$.fragment),UOr=l(),RCe=a("p"),JOr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),YOr=l(),ef=a("p"),KOr=o(`Note:
Loading a model from its configuration file does `),PCe=a("strong"),ZOr=o("not"),eVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RZ=a("a"),oVr=o("from_pretrained()"),rVr=o(" to load the model weights."),tVr=l(),F(J3.$$.fragment),aVr=l(),Wr=a("div"),F(Px.$$.fragment),nVr=l(),BCe=a("p"),sVr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lVr=l(),Tn=a("p"),iVr=o("The model class to instantiate is selected based on the "),ICe=a("code"),dVr=o("model_type"),cVr=o(` property of the config object (either
passed as an argument or loaded from `),NCe=a("code"),fVr=o("pretrained_model_name_or_path"),mVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qCe=a("code"),gVr=o("pretrained_model_name_or_path"),hVr=o(":"),pVr=l(),Oe=a("ul"),Y3=a("li"),jCe=a("strong"),_Vr=o("albert"),uVr=o(" \u2014 "),PZ=a("a"),bVr=o("FlaxAlbertForTokenClassification"),vVr=o(" (ALBERT model)"),FVr=l(),K3=a("li"),DCe=a("strong"),TVr=o("bert"),MVr=o(" \u2014 "),BZ=a("a"),EVr=o("FlaxBertForTokenClassification"),CVr=o(" (BERT model)"),wVr=l(),Z3=a("li"),GCe=a("strong"),AVr=o("big_bird"),LVr=o(" \u2014 "),IZ=a("a"),yVr=o("FlaxBigBirdForTokenClassification"),xVr=o(" (BigBird model)"),$Vr=l(),e0=a("li"),OCe=a("strong"),kVr=o("distilbert"),SVr=o(" \u2014 "),NZ=a("a"),RVr=o("FlaxDistilBertForTokenClassification"),PVr=o(" (DistilBERT model)"),BVr=l(),o0=a("li"),VCe=a("strong"),IVr=o("electra"),NVr=o(" \u2014 "),qZ=a("a"),qVr=o("FlaxElectraForTokenClassification"),jVr=o(" (ELECTRA model)"),DVr=l(),r0=a("li"),XCe=a("strong"),GVr=o("roberta"),OVr=o(" \u2014 "),jZ=a("a"),VVr=o("FlaxRobertaForTokenClassification"),XVr=o(" (RoBERTa model)"),zVr=l(),t0=a("li"),zCe=a("strong"),WVr=o("roformer"),QVr=o(" \u2014 "),DZ=a("a"),HVr=o("FlaxRoFormerForTokenClassification"),UVr=o(" (RoFormer model)"),JVr=l(),a0=a("li"),WCe=a("strong"),YVr=o("xlm-roberta"),KVr=o(" \u2014 "),GZ=a("a"),ZVr=o("FlaxXLMRobertaForTokenClassification"),eXr=o(" (XLM-RoBERTa model)"),oXr=l(),F(n0.$$.fragment),NGe=l(),of=a("h2"),s0=a("a"),QCe=a("span"),F(Bx.$$.fragment),rXr=l(),HCe=a("span"),tXr=o("FlaxAutoModelForMultipleChoice"),qGe=l(),vr=a("div"),F(Ix.$$.fragment),aXr=l(),rf=a("p"),nXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OZ=a("a"),sXr=o("from_pretrained()"),lXr=o(" class method or the "),VZ=a("a"),iXr=o("from_config()"),dXr=o(` class
method.`),cXr=l(),Nx=a("p"),fXr=o("This class cannot be instantiated directly using "),UCe=a("code"),mXr=o("__init__()"),gXr=o(" (throws an error)."),hXr=l(),Ut=a("div"),F(qx.$$.fragment),pXr=l(),JCe=a("p"),_Xr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uXr=l(),tf=a("p"),bXr=o(`Note:
Loading a model from its configuration file does `),YCe=a("strong"),vXr=o("not"),FXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=a("a"),TXr=o("from_pretrained()"),MXr=o(" to load the model weights."),EXr=l(),F(l0.$$.fragment),CXr=l(),Qr=a("div"),F(jx.$$.fragment),wXr=l(),KCe=a("p"),AXr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),LXr=l(),Mn=a("p"),yXr=o("The model class to instantiate is selected based on the "),ZCe=a("code"),xXr=o("model_type"),$Xr=o(` property of the config object (either
passed as an argument or loaded from `),e5e=a("code"),kXr=o("pretrained_model_name_or_path"),SXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o5e=a("code"),RXr=o("pretrained_model_name_or_path"),PXr=o(":"),BXr=l(),Ve=a("ul"),i0=a("li"),r5e=a("strong"),IXr=o("albert"),NXr=o(" \u2014 "),zZ=a("a"),qXr=o("FlaxAlbertForMultipleChoice"),jXr=o(" (ALBERT model)"),DXr=l(),d0=a("li"),t5e=a("strong"),GXr=o("bert"),OXr=o(" \u2014 "),WZ=a("a"),VXr=o("FlaxBertForMultipleChoice"),XXr=o(" (BERT model)"),zXr=l(),c0=a("li"),a5e=a("strong"),WXr=o("big_bird"),QXr=o(" \u2014 "),QZ=a("a"),HXr=o("FlaxBigBirdForMultipleChoice"),UXr=o(" (BigBird model)"),JXr=l(),f0=a("li"),n5e=a("strong"),YXr=o("distilbert"),KXr=o(" \u2014 "),HZ=a("a"),ZXr=o("FlaxDistilBertForMultipleChoice"),ezr=o(" (DistilBERT model)"),ozr=l(),m0=a("li"),s5e=a("strong"),rzr=o("electra"),tzr=o(" \u2014 "),UZ=a("a"),azr=o("FlaxElectraForMultipleChoice"),nzr=o(" (ELECTRA model)"),szr=l(),g0=a("li"),l5e=a("strong"),lzr=o("roberta"),izr=o(" \u2014 "),JZ=a("a"),dzr=o("FlaxRobertaForMultipleChoice"),czr=o(" (RoBERTa model)"),fzr=l(),h0=a("li"),i5e=a("strong"),mzr=o("roformer"),gzr=o(" \u2014 "),YZ=a("a"),hzr=o("FlaxRoFormerForMultipleChoice"),pzr=o(" (RoFormer model)"),_zr=l(),p0=a("li"),d5e=a("strong"),uzr=o("xlm-roberta"),bzr=o(" \u2014 "),KZ=a("a"),vzr=o("FlaxXLMRobertaForMultipleChoice"),Fzr=o(" (XLM-RoBERTa model)"),Tzr=l(),F(_0.$$.fragment),jGe=l(),af=a("h2"),u0=a("a"),c5e=a("span"),F(Dx.$$.fragment),Mzr=l(),f5e=a("span"),Ezr=o("FlaxAutoModelForNextSentencePrediction"),DGe=l(),Fr=a("div"),F(Gx.$$.fragment),Czr=l(),nf=a("p"),wzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZZ=a("a"),Azr=o("from_pretrained()"),Lzr=o(" class method or the "),eee=a("a"),yzr=o("from_config()"),xzr=o(` class
method.`),$zr=l(),Ox=a("p"),kzr=o("This class cannot be instantiated directly using "),m5e=a("code"),Szr=o("__init__()"),Rzr=o(" (throws an error)."),Pzr=l(),Jt=a("div"),F(Vx.$$.fragment),Bzr=l(),g5e=a("p"),Izr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Nzr=l(),sf=a("p"),qzr=o(`Note:
Loading a model from its configuration file does `),h5e=a("strong"),jzr=o("not"),Dzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=a("a"),Gzr=o("from_pretrained()"),Ozr=o(" to load the model weights."),Vzr=l(),F(b0.$$.fragment),Xzr=l(),Hr=a("div"),F(Xx.$$.fragment),zzr=l(),p5e=a("p"),Wzr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Qzr=l(),En=a("p"),Hzr=o("The model class to instantiate is selected based on the "),_5e=a("code"),Uzr=o("model_type"),Jzr=o(` property of the config object (either
passed as an argument or loaded from `),u5e=a("code"),Yzr=o("pretrained_model_name_or_path"),Kzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b5e=a("code"),Zzr=o("pretrained_model_name_or_path"),eWr=o(":"),oWr=l(),v5e=a("ul"),v0=a("li"),F5e=a("strong"),rWr=o("bert"),tWr=o(" \u2014 "),ree=a("a"),aWr=o("FlaxBertForNextSentencePrediction"),nWr=o(" (BERT model)"),sWr=l(),F(F0.$$.fragment),GGe=l(),lf=a("h2"),T0=a("a"),T5e=a("span"),F(zx.$$.fragment),lWr=l(),M5e=a("span"),iWr=o("FlaxAutoModelForImageClassification"),OGe=l(),Tr=a("div"),F(Wx.$$.fragment),dWr=l(),df=a("p"),cWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tee=a("a"),fWr=o("from_pretrained()"),mWr=o(" class method or the "),aee=a("a"),gWr=o("from_config()"),hWr=o(` class
method.`),pWr=l(),Qx=a("p"),_Wr=o("This class cannot be instantiated directly using "),E5e=a("code"),uWr=o("__init__()"),bWr=o(" (throws an error)."),vWr=l(),Yt=a("div"),F(Hx.$$.fragment),FWr=l(),C5e=a("p"),TWr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),MWr=l(),cf=a("p"),EWr=o(`Note:
Loading a model from its configuration file does `),w5e=a("strong"),CWr=o("not"),wWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nee=a("a"),AWr=o("from_pretrained()"),LWr=o(" to load the model weights."),yWr=l(),F(M0.$$.fragment),xWr=l(),Ur=a("div"),F(Ux.$$.fragment),$Wr=l(),A5e=a("p"),kWr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),SWr=l(),Cn=a("p"),RWr=o("The model class to instantiate is selected based on the "),L5e=a("code"),PWr=o("model_type"),BWr=o(` property of the config object (either
passed as an argument or loaded from `),y5e=a("code"),IWr=o("pretrained_model_name_or_path"),NWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=a("code"),qWr=o("pretrained_model_name_or_path"),jWr=o(":"),DWr=l(),Jx=a("ul"),E0=a("li"),$5e=a("strong"),GWr=o("beit"),OWr=o(" \u2014 "),see=a("a"),VWr=o("FlaxBeitForImageClassification"),XWr=o(" (BEiT model)"),zWr=l(),C0=a("li"),k5e=a("strong"),WWr=o("vit"),QWr=o(" \u2014 "),lee=a("a"),HWr=o("FlaxViTForImageClassification"),UWr=o(" (ViT model)"),JWr=l(),F(w0.$$.fragment),VGe=l(),ff=a("h2"),A0=a("a"),S5e=a("span"),F(Yx.$$.fragment),YWr=l(),R5e=a("span"),KWr=o("FlaxAutoModelForVision2Seq"),XGe=l(),Mr=a("div"),F(Kx.$$.fragment),ZWr=l(),mf=a("p"),eQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iee=a("a"),oQr=o("from_pretrained()"),rQr=o(" class method or the "),dee=a("a"),tQr=o("from_config()"),aQr=o(` class
method.`),nQr=l(),Zx=a("p"),sQr=o("This class cannot be instantiated directly using "),P5e=a("code"),lQr=o("__init__()"),iQr=o(" (throws an error)."),dQr=l(),Kt=a("div"),F(e$.$$.fragment),cQr=l(),B5e=a("p"),fQr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mQr=l(),gf=a("p"),gQr=o(`Note:
Loading a model from its configuration file does `),I5e=a("strong"),hQr=o("not"),pQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cee=a("a"),_Qr=o("from_pretrained()"),uQr=o(" to load the model weights."),bQr=l(),F(L0.$$.fragment),vQr=l(),Jr=a("div"),F(o$.$$.fragment),FQr=l(),N5e=a("p"),TQr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MQr=l(),wn=a("p"),EQr=o("The model class to instantiate is selected based on the "),q5e=a("code"),CQr=o("model_type"),wQr=o(` property of the config object (either
passed as an argument or loaded from `),j5e=a("code"),AQr=o("pretrained_model_name_or_path"),LQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D5e=a("code"),yQr=o("pretrained_model_name_or_path"),xQr=o(":"),$Qr=l(),G5e=a("ul"),y0=a("li"),O5e=a("strong"),kQr=o("vision-encoder-decoder"),SQr=o(" \u2014 "),fee=a("a"),RQr=o("FlaxVisionEncoderDecoderModel"),PQr=o(" (Vision Encoder decoder model)"),BQr=l(),F(x0.$$.fragment),this.h()},l(f){const u=fBt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var r$=s(p);m=n(r$,"A",{id:!0,class:!0,href:!0});var V5e=s(m);_=n(V5e,"SPAN",{});var X5e=s(_);T(d.$$.fragment,X5e),X5e.forEach(t),V5e.forEach(t),h=i(r$),Mo=n(r$,"SPAN",{});var z5e=s(Mo);gi=r(z5e,"Auto Classes"),z5e.forEach(t),r$.forEach(t),uf=i(f),rt=n(f,"P",{});var t$=s(rt);hi=r(t$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=n(t$,"CODE",{});var W5e=s(pi);QA=r(W5e,"from_pretrained()"),W5e.forEach(t),bf=r(t$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),t$.forEach(t),Ge=i(f),We=n(f,"P",{});var An=s(We);_i=r(An,"Instantiating one of "),Ln=n(An,"A",{href:!0});var Q5e=s(Ln);HA=r(Q5e,"AutoConfig"),Q5e.forEach(t),yn=r(An,", "),xn=n(An,"A",{href:!0});var H5e=s(xn);UA=r(H5e,"AutoModel"),H5e.forEach(t),ui=r(An,`, and
`),$n=n(An,"A",{href:!0});var U5e=s($n);JA=r(U5e,"AutoTokenizer"),U5e.forEach(t),bi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),vf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var a$=s(Ae);uk=r(a$,"will create a model that is an instance of "),vi=n(a$,"A",{href:!0});var J5e=s(vi);bk=r(J5e,"BertModel"),J5e.forEach(t),vk=r(a$,"."),a$.forEach(t),Eo=i(f),wa=n(f,"P",{});var n$=s(wa);Fk=r(n$,"There is one class of "),Ff=n(n$,"CODE",{});var Y5e=s(Ff);Tk=r(Y5e,"AutoModel"),Y5e.forEach(t),ZVe=r(n$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),n$.forEach(t),Oje=i(f),Fi=n(f,"H2",{class:!0});var s$=s(Fi);Tf=n(s$,"A",{id:!0,class:!0,href:!0});var K5e=s(Tf);are=n(K5e,"SPAN",{});var Z5e=s(are);T(YA.$$.fragment,Z5e),Z5e.forEach(t),K5e.forEach(t),eXe=i(s$),nre=n(s$,"SPAN",{});var e3e=s(nre);oXe=r(e3e,"Extending the Auto Classes"),e3e.forEach(t),s$.forEach(t),Vje=i(f),kn=n(f,"P",{});var hf=s(kn);rXe=r(hf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),sre=n(hf,"CODE",{});var o3e=s(sre);tXe=r(o3e,"NewModel"),o3e.forEach(t),aXe=r(hf,", make sure you have a "),lre=n(hf,"CODE",{});var r3e=s(lre);nXe=r(r3e,"NewModelConfig"),r3e.forEach(t),sXe=r(hf,` then you can add those to the auto
classes like this:`),hf.forEach(t),Xje=i(f),T(KA.$$.fragment,f),zje=i(f),Mk=n(f,"P",{});var t3e=s(Mk);lXe=r(t3e,"You will then be able to use the auto classes like you would usually do!"),t3e.forEach(t),Wje=i(f),T(Mf.$$.fragment,f),Qje=i(f),Ti=n(f,"H2",{class:!0});var l$=s(Ti);Ef=n(l$,"A",{id:!0,class:!0,href:!0});var a3e=s(Ef);ire=n(a3e,"SPAN",{});var n3e=s(ire);T(ZA.$$.fragment,n3e),n3e.forEach(t),a3e.forEach(t),iXe=i(l$),dre=n(l$,"SPAN",{});var s3e=s(dre);dXe=r(s3e,"AutoConfig"),s3e.forEach(t),l$.forEach(t),Hje=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(eL.$$.fragment,et),cXe=i(et),oL=n(et,"P",{});var i$=s(oL);fXe=r(i$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Ek=n(i$,"A",{href:!0});var l3e=s(Ek);mXe=r(l3e,"from_pretrained()"),l3e.forEach(t),gXe=r(i$," class method."),i$.forEach(t),hXe=i(et),rL=n(et,"P",{});var d$=s(rL);pXe=r(d$,"This class cannot be instantiated directly using "),cre=n(d$,"CODE",{});var i3e=s(cre);_Xe=r(i3e,"__init__()"),i3e.forEach(t),uXe=r(d$," (throws an error)."),d$.forEach(t),bXe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(tL.$$.fragment,ot),vXe=i(ot),fre=n(ot,"P",{});var d3e=s(fre);FXe=r(d3e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),d3e.forEach(t),TXe=i(ot),Mi=n(ot,"P",{});var pf=s(Mi);MXe=r(pf,"The configuration class to instantiate is selected based on the "),mre=n(pf,"CODE",{});var c3e=s(mre);EXe=r(c3e,"model_type"),c3e.forEach(t),CXe=r(pf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),gre=n(pf,"CODE",{});var f3e=s(gre);wXe=r(f3e,"pretrained_model_name_or_path"),f3e.forEach(t),AXe=r(pf,":"),pf.forEach(t),LXe=i(ot),A=n(ot,"UL",{});var L=s(A);Cf=n(L,"LI",{});var $0=s(Cf);hre=n($0,"STRONG",{});var m3e=s(hre);yXe=r(m3e,"albert"),m3e.forEach(t),xXe=r($0," \u2014 "),Ck=n($0,"A",{href:!0});var g3e=s(Ck);$Xe=r(g3e,"AlbertConfig"),g3e.forEach(t),kXe=r($0," (ALBERT model)"),$0.forEach(t),SXe=i(L),wf=n(L,"LI",{});var k0=s(wf);pre=n(k0,"STRONG",{});var h3e=s(pre);RXe=r(h3e,"bart"),h3e.forEach(t),PXe=r(k0," \u2014 "),wk=n(k0,"A",{href:!0});var p3e=s(wk);BXe=r(p3e,"BartConfig"),p3e.forEach(t),IXe=r(k0," (BART model)"),k0.forEach(t),NXe=i(L),Af=n(L,"LI",{});var S0=s(Af);_re=n(S0,"STRONG",{});var _3e=s(_re);qXe=r(_3e,"beit"),_3e.forEach(t),jXe=r(S0," \u2014 "),Ak=n(S0,"A",{href:!0});var u3e=s(Ak);DXe=r(u3e,"BeitConfig"),u3e.forEach(t),GXe=r(S0," (BEiT model)"),S0.forEach(t),OXe=i(L),Lf=n(L,"LI",{});var R0=s(Lf);ure=n(R0,"STRONG",{});var b3e=s(ure);VXe=r(b3e,"bert"),b3e.forEach(t),XXe=r(R0," \u2014 "),Lk=n(R0,"A",{href:!0});var v3e=s(Lk);zXe=r(v3e,"BertConfig"),v3e.forEach(t),WXe=r(R0," (BERT model)"),R0.forEach(t),QXe=i(L),yf=n(L,"LI",{});var P0=s(yf);bre=n(P0,"STRONG",{});var F3e=s(bre);HXe=r(F3e,"bert-generation"),F3e.forEach(t),UXe=r(P0," \u2014 "),yk=n(P0,"A",{href:!0});var T3e=s(yk);JXe=r(T3e,"BertGenerationConfig"),T3e.forEach(t),YXe=r(P0," (Bert Generation model)"),P0.forEach(t),KXe=i(L),xf=n(L,"LI",{});var B0=s(xf);vre=n(B0,"STRONG",{});var M3e=s(vre);ZXe=r(M3e,"big_bird"),M3e.forEach(t),eze=r(B0," \u2014 "),xk=n(B0,"A",{href:!0});var E3e=s(xk);oze=r(E3e,"BigBirdConfig"),E3e.forEach(t),rze=r(B0," (BigBird model)"),B0.forEach(t),tze=i(L),$f=n(L,"LI",{});var I0=s($f);Fre=n(I0,"STRONG",{});var C3e=s(Fre);aze=r(C3e,"bigbird_pegasus"),C3e.forEach(t),nze=r(I0," \u2014 "),$k=n(I0,"A",{href:!0});var w3e=s($k);sze=r(w3e,"BigBirdPegasusConfig"),w3e.forEach(t),lze=r(I0," (BigBird-Pegasus model)"),I0.forEach(t),ize=i(L),kf=n(L,"LI",{});var N0=s(kf);Tre=n(N0,"STRONG",{});var A3e=s(Tre);dze=r(A3e,"blenderbot"),A3e.forEach(t),cze=r(N0," \u2014 "),kk=n(N0,"A",{href:!0});var L3e=s(kk);fze=r(L3e,"BlenderbotConfig"),L3e.forEach(t),mze=r(N0," (Blenderbot model)"),N0.forEach(t),gze=i(L),Sf=n(L,"LI",{});var q0=s(Sf);Mre=n(q0,"STRONG",{});var y3e=s(Mre);hze=r(y3e,"blenderbot-small"),y3e.forEach(t),pze=r(q0," \u2014 "),Sk=n(q0,"A",{href:!0});var x3e=s(Sk);_ze=r(x3e,"BlenderbotSmallConfig"),x3e.forEach(t),uze=r(q0," (BlenderbotSmall model)"),q0.forEach(t),bze=i(L),Rf=n(L,"LI",{});var j0=s(Rf);Ere=n(j0,"STRONG",{});var $3e=s(Ere);vze=r($3e,"bloom"),$3e.forEach(t),Fze=r(j0," \u2014 "),Rk=n(j0,"A",{href:!0});var k3e=s(Rk);Tze=r(k3e,"BloomConfig"),k3e.forEach(t),Mze=r(j0," (BLOOM model)"),j0.forEach(t),Eze=i(L),Pf=n(L,"LI",{});var D0=s(Pf);Cre=n(D0,"STRONG",{});var S3e=s(Cre);Cze=r(S3e,"camembert"),S3e.forEach(t),wze=r(D0," \u2014 "),Pk=n(D0,"A",{href:!0});var R3e=s(Pk);Aze=r(R3e,"CamembertConfig"),R3e.forEach(t),Lze=r(D0," (CamemBERT model)"),D0.forEach(t),yze=i(L),Bf=n(L,"LI",{});var G0=s(Bf);wre=n(G0,"STRONG",{});var P3e=s(wre);xze=r(P3e,"canine"),P3e.forEach(t),$ze=r(G0," \u2014 "),Bk=n(G0,"A",{href:!0});var B3e=s(Bk);kze=r(B3e,"CanineConfig"),B3e.forEach(t),Sze=r(G0," (CANINE model)"),G0.forEach(t),Rze=i(L),If=n(L,"LI",{});var O0=s(If);Are=n(O0,"STRONG",{});var I3e=s(Are);Pze=r(I3e,"clip"),I3e.forEach(t),Bze=r(O0," \u2014 "),Ik=n(O0,"A",{href:!0});var N3e=s(Ik);Ize=r(N3e,"CLIPConfig"),N3e.forEach(t),Nze=r(O0," (CLIP model)"),O0.forEach(t),qze=i(L),Nf=n(L,"LI",{});var V0=s(Nf);Lre=n(V0,"STRONG",{});var q3e=s(Lre);jze=r(q3e,"convbert"),q3e.forEach(t),Dze=r(V0," \u2014 "),Nk=n(V0,"A",{href:!0});var j3e=s(Nk);Gze=r(j3e,"ConvBertConfig"),j3e.forEach(t),Oze=r(V0," (ConvBERT model)"),V0.forEach(t),Vze=i(L),qf=n(L,"LI",{});var X0=s(qf);yre=n(X0,"STRONG",{});var D3e=s(yre);Xze=r(D3e,"convnext"),D3e.forEach(t),zze=r(X0," \u2014 "),qk=n(X0,"A",{href:!0});var G3e=s(qk);Wze=r(G3e,"ConvNextConfig"),G3e.forEach(t),Qze=r(X0," (ConvNeXT model)"),X0.forEach(t),Hze=i(L),jf=n(L,"LI",{});var z0=s(jf);xre=n(z0,"STRONG",{});var O3e=s(xre);Uze=r(O3e,"ctrl"),O3e.forEach(t),Jze=r(z0," \u2014 "),jk=n(z0,"A",{href:!0});var V3e=s(jk);Yze=r(V3e,"CTRLConfig"),V3e.forEach(t),Kze=r(z0," (CTRL model)"),z0.forEach(t),Zze=i(L),Df=n(L,"LI",{});var W0=s(Df);$re=n(W0,"STRONG",{});var X3e=s($re);eWe=r(X3e,"cvt"),X3e.forEach(t),oWe=r(W0," \u2014 "),Dk=n(W0,"A",{href:!0});var z3e=s(Dk);rWe=r(z3e,"CvtConfig"),z3e.forEach(t),tWe=r(W0," (CvT model)"),W0.forEach(t),aWe=i(L),Gf=n(L,"LI",{});var Q0=s(Gf);kre=n(Q0,"STRONG",{});var W3e=s(kre);nWe=r(W3e,"data2vec-audio"),W3e.forEach(t),sWe=r(Q0," \u2014 "),Gk=n(Q0,"A",{href:!0});var Q3e=s(Gk);lWe=r(Q3e,"Data2VecAudioConfig"),Q3e.forEach(t),iWe=r(Q0," (Data2VecAudio model)"),Q0.forEach(t),dWe=i(L),Of=n(L,"LI",{});var H0=s(Of);Sre=n(H0,"STRONG",{});var H3e=s(Sre);cWe=r(H3e,"data2vec-text"),H3e.forEach(t),fWe=r(H0," \u2014 "),Ok=n(H0,"A",{href:!0});var U3e=s(Ok);mWe=r(U3e,"Data2VecTextConfig"),U3e.forEach(t),gWe=r(H0," (Data2VecText model)"),H0.forEach(t),hWe=i(L),Vf=n(L,"LI",{});var U0=s(Vf);Rre=n(U0,"STRONG",{});var J3e=s(Rre);pWe=r(J3e,"data2vec-vision"),J3e.forEach(t),_We=r(U0," \u2014 "),Vk=n(U0,"A",{href:!0});var Y3e=s(Vk);uWe=r(Y3e,"Data2VecVisionConfig"),Y3e.forEach(t),bWe=r(U0," (Data2VecVision model)"),U0.forEach(t),vWe=i(L),Xf=n(L,"LI",{});var J0=s(Xf);Pre=n(J0,"STRONG",{});var K3e=s(Pre);FWe=r(K3e,"deberta"),K3e.forEach(t),TWe=r(J0," \u2014 "),Xk=n(J0,"A",{href:!0});var Z3e=s(Xk);MWe=r(Z3e,"DebertaConfig"),Z3e.forEach(t),EWe=r(J0," (DeBERTa model)"),J0.forEach(t),CWe=i(L),zf=n(L,"LI",{});var Y0=s(zf);Bre=n(Y0,"STRONG",{});var e0e=s(Bre);wWe=r(e0e,"deberta-v2"),e0e.forEach(t),AWe=r(Y0," \u2014 "),zk=n(Y0,"A",{href:!0});var o0e=s(zk);LWe=r(o0e,"DebertaV2Config"),o0e.forEach(t),yWe=r(Y0," (DeBERTa-v2 model)"),Y0.forEach(t),xWe=i(L),Wf=n(L,"LI",{});var K0=s(Wf);Ire=n(K0,"STRONG",{});var r0e=s(Ire);$We=r(r0e,"decision_transformer"),r0e.forEach(t),kWe=r(K0," \u2014 "),Wk=n(K0,"A",{href:!0});var NQr=s(Wk);SWe=r(NQr,"DecisionTransformerConfig"),NQr.forEach(t),RWe=r(K0," (Decision Transformer model)"),K0.forEach(t),PWe=i(L),Qf=n(L,"LI",{});var t0e=s(Qf);Nre=n(t0e,"STRONG",{});var qQr=s(Nre);BWe=r(qQr,"deit"),qQr.forEach(t),IWe=r(t0e," \u2014 "),Qk=n(t0e,"A",{href:!0});var jQr=s(Qk);NWe=r(jQr,"DeiTConfig"),jQr.forEach(t),qWe=r(t0e," (DeiT model)"),t0e.forEach(t),jWe=i(L),Hf=n(L,"LI",{});var a0e=s(Hf);qre=n(a0e,"STRONG",{});var DQr=s(qre);DWe=r(DQr,"detr"),DQr.forEach(t),GWe=r(a0e," \u2014 "),Hk=n(a0e,"A",{href:!0});var GQr=s(Hk);OWe=r(GQr,"DetrConfig"),GQr.forEach(t),VWe=r(a0e," (DETR model)"),a0e.forEach(t),XWe=i(L),Uf=n(L,"LI",{});var n0e=s(Uf);jre=n(n0e,"STRONG",{});var OQr=s(jre);zWe=r(OQr,"distilbert"),OQr.forEach(t),WWe=r(n0e," \u2014 "),Uk=n(n0e,"A",{href:!0});var VQr=s(Uk);QWe=r(VQr,"DistilBertConfig"),VQr.forEach(t),HWe=r(n0e," (DistilBERT model)"),n0e.forEach(t),UWe=i(L),Jf=n(L,"LI",{});var s0e=s(Jf);Dre=n(s0e,"STRONG",{});var XQr=s(Dre);JWe=r(XQr,"dpr"),XQr.forEach(t),YWe=r(s0e," \u2014 "),Jk=n(s0e,"A",{href:!0});var zQr=s(Jk);KWe=r(zQr,"DPRConfig"),zQr.forEach(t),ZWe=r(s0e," (DPR model)"),s0e.forEach(t),eQe=i(L),Yf=n(L,"LI",{});var l0e=s(Yf);Gre=n(l0e,"STRONG",{});var WQr=s(Gre);oQe=r(WQr,"dpt"),WQr.forEach(t),rQe=r(l0e," \u2014 "),Yk=n(l0e,"A",{href:!0});var QQr=s(Yk);tQe=r(QQr,"DPTConfig"),QQr.forEach(t),aQe=r(l0e," (DPT model)"),l0e.forEach(t),nQe=i(L),Kf=n(L,"LI",{});var i0e=s(Kf);Ore=n(i0e,"STRONG",{});var HQr=s(Ore);sQe=r(HQr,"electra"),HQr.forEach(t),lQe=r(i0e," \u2014 "),Kk=n(i0e,"A",{href:!0});var UQr=s(Kk);iQe=r(UQr,"ElectraConfig"),UQr.forEach(t),dQe=r(i0e," (ELECTRA model)"),i0e.forEach(t),cQe=i(L),Zf=n(L,"LI",{});var d0e=s(Zf);Vre=n(d0e,"STRONG",{});var JQr=s(Vre);fQe=r(JQr,"encoder-decoder"),JQr.forEach(t),mQe=r(d0e," \u2014 "),Zk=n(d0e,"A",{href:!0});var YQr=s(Zk);gQe=r(YQr,"EncoderDecoderConfig"),YQr.forEach(t),hQe=r(d0e," (Encoder decoder model)"),d0e.forEach(t),pQe=i(L),em=n(L,"LI",{});var c0e=s(em);Xre=n(c0e,"STRONG",{});var KQr=s(Xre);_Qe=r(KQr,"flaubert"),KQr.forEach(t),uQe=r(c0e," \u2014 "),eS=n(c0e,"A",{href:!0});var ZQr=s(eS);bQe=r(ZQr,"FlaubertConfig"),ZQr.forEach(t),vQe=r(c0e," (FlauBERT model)"),c0e.forEach(t),FQe=i(L),om=n(L,"LI",{});var f0e=s(om);zre=n(f0e,"STRONG",{});var eHr=s(zre);TQe=r(eHr,"flava"),eHr.forEach(t),MQe=r(f0e," \u2014 "),oS=n(f0e,"A",{href:!0});var oHr=s(oS);EQe=r(oHr,"FlavaConfig"),oHr.forEach(t),CQe=r(f0e," (FLAVA model)"),f0e.forEach(t),wQe=i(L),rm=n(L,"LI",{});var m0e=s(rm);Wre=n(m0e,"STRONG",{});var rHr=s(Wre);AQe=r(rHr,"fnet"),rHr.forEach(t),LQe=r(m0e," \u2014 "),rS=n(m0e,"A",{href:!0});var tHr=s(rS);yQe=r(tHr,"FNetConfig"),tHr.forEach(t),xQe=r(m0e," (FNet model)"),m0e.forEach(t),$Qe=i(L),tm=n(L,"LI",{});var g0e=s(tm);Qre=n(g0e,"STRONG",{});var aHr=s(Qre);kQe=r(aHr,"fsmt"),aHr.forEach(t),SQe=r(g0e," \u2014 "),tS=n(g0e,"A",{href:!0});var nHr=s(tS);RQe=r(nHr,"FSMTConfig"),nHr.forEach(t),PQe=r(g0e," (FairSeq Machine-Translation model)"),g0e.forEach(t),BQe=i(L),am=n(L,"LI",{});var h0e=s(am);Hre=n(h0e,"STRONG",{});var sHr=s(Hre);IQe=r(sHr,"funnel"),sHr.forEach(t),NQe=r(h0e," \u2014 "),aS=n(h0e,"A",{href:!0});var lHr=s(aS);qQe=r(lHr,"FunnelConfig"),lHr.forEach(t),jQe=r(h0e," (Funnel Transformer model)"),h0e.forEach(t),DQe=i(L),nm=n(L,"LI",{});var p0e=s(nm);Ure=n(p0e,"STRONG",{});var iHr=s(Ure);GQe=r(iHr,"glpn"),iHr.forEach(t),OQe=r(p0e," \u2014 "),nS=n(p0e,"A",{href:!0});var dHr=s(nS);VQe=r(dHr,"GLPNConfig"),dHr.forEach(t),XQe=r(p0e," (GLPN model)"),p0e.forEach(t),zQe=i(L),sm=n(L,"LI",{});var _0e=s(sm);Jre=n(_0e,"STRONG",{});var cHr=s(Jre);WQe=r(cHr,"gpt2"),cHr.forEach(t),QQe=r(_0e," \u2014 "),sS=n(_0e,"A",{href:!0});var fHr=s(sS);HQe=r(fHr,"GPT2Config"),fHr.forEach(t),UQe=r(_0e," (OpenAI GPT-2 model)"),_0e.forEach(t),JQe=i(L),lm=n(L,"LI",{});var u0e=s(lm);Yre=n(u0e,"STRONG",{});var mHr=s(Yre);YQe=r(mHr,"gpt_neo"),mHr.forEach(t),KQe=r(u0e," \u2014 "),lS=n(u0e,"A",{href:!0});var gHr=s(lS);ZQe=r(gHr,"GPTNeoConfig"),gHr.forEach(t),eHe=r(u0e," (GPT Neo model)"),u0e.forEach(t),oHe=i(L),im=n(L,"LI",{});var b0e=s(im);Kre=n(b0e,"STRONG",{});var hHr=s(Kre);rHe=r(hHr,"gpt_neox"),hHr.forEach(t),tHe=r(b0e," \u2014 "),iS=n(b0e,"A",{href:!0});var pHr=s(iS);aHe=r(pHr,"GPTNeoXConfig"),pHr.forEach(t),nHe=r(b0e," (GPT NeoX model)"),b0e.forEach(t),sHe=i(L),dm=n(L,"LI",{});var v0e=s(dm);Zre=n(v0e,"STRONG",{});var _Hr=s(Zre);lHe=r(_Hr,"gptj"),_Hr.forEach(t),iHe=r(v0e," \u2014 "),dS=n(v0e,"A",{href:!0});var uHr=s(dS);dHe=r(uHr,"GPTJConfig"),uHr.forEach(t),cHe=r(v0e," (GPT-J model)"),v0e.forEach(t),fHe=i(L),cm=n(L,"LI",{});var F0e=s(cm);ete=n(F0e,"STRONG",{});var bHr=s(ete);mHe=r(bHr,"greaselm"),bHr.forEach(t),gHe=r(F0e," \u2014 "),cS=n(F0e,"A",{href:!0});var vHr=s(cS);hHe=r(vHr,"GreaseLMConfig"),vHr.forEach(t),pHe=r(F0e," (GreaseLM model)"),F0e.forEach(t),_He=i(L),fm=n(L,"LI",{});var T0e=s(fm);ote=n(T0e,"STRONG",{});var FHr=s(ote);uHe=r(FHr,"hubert"),FHr.forEach(t),bHe=r(T0e," \u2014 "),fS=n(T0e,"A",{href:!0});var THr=s(fS);vHe=r(THr,"HubertConfig"),THr.forEach(t),FHe=r(T0e," (Hubert model)"),T0e.forEach(t),THe=i(L),mm=n(L,"LI",{});var M0e=s(mm);rte=n(M0e,"STRONG",{});var MHr=s(rte);MHe=r(MHr,"ibert"),MHr.forEach(t),EHe=r(M0e," \u2014 "),mS=n(M0e,"A",{href:!0});var EHr=s(mS);CHe=r(EHr,"IBertConfig"),EHr.forEach(t),wHe=r(M0e," (I-BERT model)"),M0e.forEach(t),AHe=i(L),gm=n(L,"LI",{});var E0e=s(gm);tte=n(E0e,"STRONG",{});var CHr=s(tte);LHe=r(CHr,"imagegpt"),CHr.forEach(t),yHe=r(E0e," \u2014 "),gS=n(E0e,"A",{href:!0});var wHr=s(gS);xHe=r(wHr,"ImageGPTConfig"),wHr.forEach(t),$He=r(E0e," (ImageGPT model)"),E0e.forEach(t),kHe=i(L),hm=n(L,"LI",{});var C0e=s(hm);ate=n(C0e,"STRONG",{});var AHr=s(ate);SHe=r(AHr,"layoutlm"),AHr.forEach(t),RHe=r(C0e," \u2014 "),hS=n(C0e,"A",{href:!0});var LHr=s(hS);PHe=r(LHr,"LayoutLMConfig"),LHr.forEach(t),BHe=r(C0e," (LayoutLM model)"),C0e.forEach(t),IHe=i(L),pm=n(L,"LI",{});var w0e=s(pm);nte=n(w0e,"STRONG",{});var yHr=s(nte);NHe=r(yHr,"layoutlmv2"),yHr.forEach(t),qHe=r(w0e," \u2014 "),pS=n(w0e,"A",{href:!0});var xHr=s(pS);jHe=r(xHr,"LayoutLMv2Config"),xHr.forEach(t),DHe=r(w0e," (LayoutLMv2 model)"),w0e.forEach(t),GHe=i(L),_m=n(L,"LI",{});var A0e=s(_m);ste=n(A0e,"STRONG",{});var $Hr=s(ste);OHe=r($Hr,"layoutlmv3"),$Hr.forEach(t),VHe=r(A0e," \u2014 "),_S=n(A0e,"A",{href:!0});var kHr=s(_S);XHe=r(kHr,"LayoutLMv3Config"),kHr.forEach(t),zHe=r(A0e," (LayoutLMv3 model)"),A0e.forEach(t),WHe=i(L),um=n(L,"LI",{});var L0e=s(um);lte=n(L0e,"STRONG",{});var SHr=s(lte);QHe=r(SHr,"led"),SHr.forEach(t),HHe=r(L0e," \u2014 "),uS=n(L0e,"A",{href:!0});var RHr=s(uS);UHe=r(RHr,"LEDConfig"),RHr.forEach(t),JHe=r(L0e," (LED model)"),L0e.forEach(t),YHe=i(L),bm=n(L,"LI",{});var y0e=s(bm);ite=n(y0e,"STRONG",{});var PHr=s(ite);KHe=r(PHr,"levit"),PHr.forEach(t),ZHe=r(y0e," \u2014 "),bS=n(y0e,"A",{href:!0});var BHr=s(bS);eUe=r(BHr,"LevitConfig"),BHr.forEach(t),oUe=r(y0e," (LeViT model)"),y0e.forEach(t),rUe=i(L),vm=n(L,"LI",{});var x0e=s(vm);dte=n(x0e,"STRONG",{});var IHr=s(dte);tUe=r(IHr,"longformer"),IHr.forEach(t),aUe=r(x0e," \u2014 "),vS=n(x0e,"A",{href:!0});var NHr=s(vS);nUe=r(NHr,"LongformerConfig"),NHr.forEach(t),sUe=r(x0e," (Longformer model)"),x0e.forEach(t),lUe=i(L),Fm=n(L,"LI",{});var $0e=s(Fm);cte=n($0e,"STRONG",{});var qHr=s(cte);iUe=r(qHr,"luke"),qHr.forEach(t),dUe=r($0e," \u2014 "),FS=n($0e,"A",{href:!0});var jHr=s(FS);cUe=r(jHr,"LukeConfig"),jHr.forEach(t),fUe=r($0e," (LUKE model)"),$0e.forEach(t),mUe=i(L),Tm=n(L,"LI",{});var k0e=s(Tm);fte=n(k0e,"STRONG",{});var DHr=s(fte);gUe=r(DHr,"lxmert"),DHr.forEach(t),hUe=r(k0e," \u2014 "),TS=n(k0e,"A",{href:!0});var GHr=s(TS);pUe=r(GHr,"LxmertConfig"),GHr.forEach(t),_Ue=r(k0e," (LXMERT model)"),k0e.forEach(t),uUe=i(L),Mm=n(L,"LI",{});var S0e=s(Mm);mte=n(S0e,"STRONG",{});var OHr=s(mte);bUe=r(OHr,"m2m_100"),OHr.forEach(t),vUe=r(S0e," \u2014 "),MS=n(S0e,"A",{href:!0});var VHr=s(MS);FUe=r(VHr,"M2M100Config"),VHr.forEach(t),TUe=r(S0e," (M2M100 model)"),S0e.forEach(t),MUe=i(L),Em=n(L,"LI",{});var R0e=s(Em);gte=n(R0e,"STRONG",{});var XHr=s(gte);EUe=r(XHr,"marian"),XHr.forEach(t),CUe=r(R0e," \u2014 "),ES=n(R0e,"A",{href:!0});var zHr=s(ES);wUe=r(zHr,"MarianConfig"),zHr.forEach(t),AUe=r(R0e," (Marian model)"),R0e.forEach(t),LUe=i(L),Cm=n(L,"LI",{});var P0e=s(Cm);hte=n(P0e,"STRONG",{});var WHr=s(hte);yUe=r(WHr,"maskformer"),WHr.forEach(t),xUe=r(P0e," \u2014 "),CS=n(P0e,"A",{href:!0});var QHr=s(CS);$Ue=r(QHr,"MaskFormerConfig"),QHr.forEach(t),kUe=r(P0e," (MaskFormer model)"),P0e.forEach(t),SUe=i(L),wm=n(L,"LI",{});var B0e=s(wm);pte=n(B0e,"STRONG",{});var HHr=s(pte);RUe=r(HHr,"mbart"),HHr.forEach(t),PUe=r(B0e," \u2014 "),wS=n(B0e,"A",{href:!0});var UHr=s(wS);BUe=r(UHr,"MBartConfig"),UHr.forEach(t),IUe=r(B0e," (mBART model)"),B0e.forEach(t),NUe=i(L),Am=n(L,"LI",{});var I0e=s(Am);_te=n(I0e,"STRONG",{});var JHr=s(_te);qUe=r(JHr,"mctct"),JHr.forEach(t),jUe=r(I0e," \u2014 "),AS=n(I0e,"A",{href:!0});var YHr=s(AS);DUe=r(YHr,"MCTCTConfig"),YHr.forEach(t),GUe=r(I0e," (M-CTC-T model)"),I0e.forEach(t),OUe=i(L),Lm=n(L,"LI",{});var N0e=s(Lm);ute=n(N0e,"STRONG",{});var KHr=s(ute);VUe=r(KHr,"megatron-bert"),KHr.forEach(t),XUe=r(N0e," \u2014 "),LS=n(N0e,"A",{href:!0});var ZHr=s(LS);zUe=r(ZHr,"MegatronBertConfig"),ZHr.forEach(t),WUe=r(N0e," (Megatron-BERT model)"),N0e.forEach(t),QUe=i(L),ym=n(L,"LI",{});var q0e=s(ym);bte=n(q0e,"STRONG",{});var eUr=s(bte);HUe=r(eUr,"mobilebert"),eUr.forEach(t),UUe=r(q0e," \u2014 "),yS=n(q0e,"A",{href:!0});var oUr=s(yS);JUe=r(oUr,"MobileBertConfig"),oUr.forEach(t),YUe=r(q0e," (MobileBERT model)"),q0e.forEach(t),KUe=i(L),xm=n(L,"LI",{});var j0e=s(xm);vte=n(j0e,"STRONG",{});var rUr=s(vte);ZUe=r(rUr,"mpnet"),rUr.forEach(t),eJe=r(j0e," \u2014 "),xS=n(j0e,"A",{href:!0});var tUr=s(xS);oJe=r(tUr,"MPNetConfig"),tUr.forEach(t),rJe=r(j0e," (MPNet model)"),j0e.forEach(t),tJe=i(L),$m=n(L,"LI",{});var D0e=s($m);Fte=n(D0e,"STRONG",{});var aUr=s(Fte);aJe=r(aUr,"mt5"),aUr.forEach(t),nJe=r(D0e," \u2014 "),$S=n(D0e,"A",{href:!0});var nUr=s($S);sJe=r(nUr,"MT5Config"),nUr.forEach(t),lJe=r(D0e," (MT5 model)"),D0e.forEach(t),iJe=i(L),km=n(L,"LI",{});var G0e=s(km);Tte=n(G0e,"STRONG",{});var sUr=s(Tte);dJe=r(sUr,"nystromformer"),sUr.forEach(t),cJe=r(G0e," \u2014 "),kS=n(G0e,"A",{href:!0});var lUr=s(kS);fJe=r(lUr,"NystromformerConfig"),lUr.forEach(t),mJe=r(G0e," (Nystr\xF6mformer model)"),G0e.forEach(t),gJe=i(L),Sm=n(L,"LI",{});var O0e=s(Sm);Mte=n(O0e,"STRONG",{});var iUr=s(Mte);hJe=r(iUr,"openai-gpt"),iUr.forEach(t),pJe=r(O0e," \u2014 "),SS=n(O0e,"A",{href:!0});var dUr=s(SS);_Je=r(dUr,"OpenAIGPTConfig"),dUr.forEach(t),uJe=r(O0e," (OpenAI GPT model)"),O0e.forEach(t),bJe=i(L),Rm=n(L,"LI",{});var V0e=s(Rm);Ete=n(V0e,"STRONG",{});var cUr=s(Ete);vJe=r(cUr,"opt"),cUr.forEach(t),FJe=r(V0e," \u2014 "),RS=n(V0e,"A",{href:!0});var fUr=s(RS);TJe=r(fUr,"OPTConfig"),fUr.forEach(t),MJe=r(V0e," (OPT model)"),V0e.forEach(t),EJe=i(L),Pm=n(L,"LI",{});var X0e=s(Pm);Cte=n(X0e,"STRONG",{});var mUr=s(Cte);CJe=r(mUr,"pegasus"),mUr.forEach(t),wJe=r(X0e," \u2014 "),PS=n(X0e,"A",{href:!0});var gUr=s(PS);AJe=r(gUr,"PegasusConfig"),gUr.forEach(t),LJe=r(X0e," (Pegasus model)"),X0e.forEach(t),yJe=i(L),Bm=n(L,"LI",{});var z0e=s(Bm);wte=n(z0e,"STRONG",{});var hUr=s(wte);xJe=r(hUr,"perceiver"),hUr.forEach(t),$Je=r(z0e," \u2014 "),BS=n(z0e,"A",{href:!0});var pUr=s(BS);kJe=r(pUr,"PerceiverConfig"),pUr.forEach(t),SJe=r(z0e," (Perceiver model)"),z0e.forEach(t),RJe=i(L),Im=n(L,"LI",{});var W0e=s(Im);Ate=n(W0e,"STRONG",{});var _Ur=s(Ate);PJe=r(_Ur,"plbart"),_Ur.forEach(t),BJe=r(W0e," \u2014 "),IS=n(W0e,"A",{href:!0});var uUr=s(IS);IJe=r(uUr,"PLBartConfig"),uUr.forEach(t),NJe=r(W0e," (PLBart model)"),W0e.forEach(t),qJe=i(L),Nm=n(L,"LI",{});var Q0e=s(Nm);Lte=n(Q0e,"STRONG",{});var bUr=s(Lte);jJe=r(bUr,"poolformer"),bUr.forEach(t),DJe=r(Q0e," \u2014 "),NS=n(Q0e,"A",{href:!0});var vUr=s(NS);GJe=r(vUr,"PoolFormerConfig"),vUr.forEach(t),OJe=r(Q0e," (PoolFormer model)"),Q0e.forEach(t),VJe=i(L),qm=n(L,"LI",{});var H0e=s(qm);yte=n(H0e,"STRONG",{});var FUr=s(yte);XJe=r(FUr,"prophetnet"),FUr.forEach(t),zJe=r(H0e," \u2014 "),qS=n(H0e,"A",{href:!0});var TUr=s(qS);WJe=r(TUr,"ProphetNetConfig"),TUr.forEach(t),QJe=r(H0e," (ProphetNet model)"),H0e.forEach(t),HJe=i(L),jm=n(L,"LI",{});var U0e=s(jm);xte=n(U0e,"STRONG",{});var MUr=s(xte);UJe=r(MUr,"qdqbert"),MUr.forEach(t),JJe=r(U0e," \u2014 "),jS=n(U0e,"A",{href:!0});var EUr=s(jS);YJe=r(EUr,"QDQBertConfig"),EUr.forEach(t),KJe=r(U0e," (QDQBert model)"),U0e.forEach(t),ZJe=i(L),Dm=n(L,"LI",{});var J0e=s(Dm);$te=n(J0e,"STRONG",{});var CUr=s($te);eYe=r(CUr,"rag"),CUr.forEach(t),oYe=r(J0e," \u2014 "),DS=n(J0e,"A",{href:!0});var wUr=s(DS);rYe=r(wUr,"RagConfig"),wUr.forEach(t),tYe=r(J0e," (RAG model)"),J0e.forEach(t),aYe=i(L),Gm=n(L,"LI",{});var Y0e=s(Gm);kte=n(Y0e,"STRONG",{});var AUr=s(kte);nYe=r(AUr,"realm"),AUr.forEach(t),sYe=r(Y0e," \u2014 "),GS=n(Y0e,"A",{href:!0});var LUr=s(GS);lYe=r(LUr,"RealmConfig"),LUr.forEach(t),iYe=r(Y0e," (REALM model)"),Y0e.forEach(t),dYe=i(L),Om=n(L,"LI",{});var K0e=s(Om);Ste=n(K0e,"STRONG",{});var yUr=s(Ste);cYe=r(yUr,"reformer"),yUr.forEach(t),fYe=r(K0e," \u2014 "),OS=n(K0e,"A",{href:!0});var xUr=s(OS);mYe=r(xUr,"ReformerConfig"),xUr.forEach(t),gYe=r(K0e," (Reformer model)"),K0e.forEach(t),hYe=i(L),Vm=n(L,"LI",{});var Z0e=s(Vm);Rte=n(Z0e,"STRONG",{});var $Ur=s(Rte);pYe=r($Ur,"regnet"),$Ur.forEach(t),_Ye=r(Z0e," \u2014 "),VS=n(Z0e,"A",{href:!0});var kUr=s(VS);uYe=r(kUr,"RegNetConfig"),kUr.forEach(t),bYe=r(Z0e," (RegNet model)"),Z0e.forEach(t),vYe=i(L),Xm=n(L,"LI",{});var ewe=s(Xm);Pte=n(ewe,"STRONG",{});var SUr=s(Pte);FYe=r(SUr,"rembert"),SUr.forEach(t),TYe=r(ewe," \u2014 "),XS=n(ewe,"A",{href:!0});var RUr=s(XS);MYe=r(RUr,"RemBertConfig"),RUr.forEach(t),EYe=r(ewe," (RemBERT model)"),ewe.forEach(t),CYe=i(L),zm=n(L,"LI",{});var owe=s(zm);Bte=n(owe,"STRONG",{});var PUr=s(Bte);wYe=r(PUr,"resnet"),PUr.forEach(t),AYe=r(owe," \u2014 "),zS=n(owe,"A",{href:!0});var BUr=s(zS);LYe=r(BUr,"ResNetConfig"),BUr.forEach(t),yYe=r(owe," (ResNet model)"),owe.forEach(t),xYe=i(L),Wm=n(L,"LI",{});var rwe=s(Wm);Ite=n(rwe,"STRONG",{});var IUr=s(Ite);$Ye=r(IUr,"retribert"),IUr.forEach(t),kYe=r(rwe," \u2014 "),WS=n(rwe,"A",{href:!0});var NUr=s(WS);SYe=r(NUr,"RetriBertConfig"),NUr.forEach(t),RYe=r(rwe," (RetriBERT model)"),rwe.forEach(t),PYe=i(L),Qm=n(L,"LI",{});var twe=s(Qm);Nte=n(twe,"STRONG",{});var qUr=s(Nte);BYe=r(qUr,"roberta"),qUr.forEach(t),IYe=r(twe," \u2014 "),QS=n(twe,"A",{href:!0});var jUr=s(QS);NYe=r(jUr,"RobertaConfig"),jUr.forEach(t),qYe=r(twe," (RoBERTa model)"),twe.forEach(t),jYe=i(L),Hm=n(L,"LI",{});var awe=s(Hm);qte=n(awe,"STRONG",{});var DUr=s(qte);DYe=r(DUr,"roformer"),DUr.forEach(t),GYe=r(awe," \u2014 "),HS=n(awe,"A",{href:!0});var GUr=s(HS);OYe=r(GUr,"RoFormerConfig"),GUr.forEach(t),VYe=r(awe," (RoFormer model)"),awe.forEach(t),XYe=i(L),Um=n(L,"LI",{});var nwe=s(Um);jte=n(nwe,"STRONG",{});var OUr=s(jte);zYe=r(OUr,"segformer"),OUr.forEach(t),WYe=r(nwe," \u2014 "),US=n(nwe,"A",{href:!0});var VUr=s(US);QYe=r(VUr,"SegformerConfig"),VUr.forEach(t),HYe=r(nwe," (SegFormer model)"),nwe.forEach(t),UYe=i(L),Jm=n(L,"LI",{});var swe=s(Jm);Dte=n(swe,"STRONG",{});var XUr=s(Dte);JYe=r(XUr,"sew"),XUr.forEach(t),YYe=r(swe," \u2014 "),JS=n(swe,"A",{href:!0});var zUr=s(JS);KYe=r(zUr,"SEWConfig"),zUr.forEach(t),ZYe=r(swe," (SEW model)"),swe.forEach(t),eKe=i(L),Ym=n(L,"LI",{});var lwe=s(Ym);Gte=n(lwe,"STRONG",{});var WUr=s(Gte);oKe=r(WUr,"sew-d"),WUr.forEach(t),rKe=r(lwe," \u2014 "),YS=n(lwe,"A",{href:!0});var QUr=s(YS);tKe=r(QUr,"SEWDConfig"),QUr.forEach(t),aKe=r(lwe," (SEW-D model)"),lwe.forEach(t),nKe=i(L),Km=n(L,"LI",{});var iwe=s(Km);Ote=n(iwe,"STRONG",{});var HUr=s(Ote);sKe=r(HUr,"speech-encoder-decoder"),HUr.forEach(t),lKe=r(iwe," \u2014 "),KS=n(iwe,"A",{href:!0});var UUr=s(KS);iKe=r(UUr,"SpeechEncoderDecoderConfig"),UUr.forEach(t),dKe=r(iwe," (Speech Encoder decoder model)"),iwe.forEach(t),cKe=i(L),Zm=n(L,"LI",{});var dwe=s(Zm);Vte=n(dwe,"STRONG",{});var JUr=s(Vte);fKe=r(JUr,"speech_to_text"),JUr.forEach(t),mKe=r(dwe," \u2014 "),ZS=n(dwe,"A",{href:!0});var YUr=s(ZS);gKe=r(YUr,"Speech2TextConfig"),YUr.forEach(t),hKe=r(dwe," (Speech2Text model)"),dwe.forEach(t),pKe=i(L),eg=n(L,"LI",{});var cwe=s(eg);Xte=n(cwe,"STRONG",{});var KUr=s(Xte);_Ke=r(KUr,"speech_to_text_2"),KUr.forEach(t),uKe=r(cwe," \u2014 "),eR=n(cwe,"A",{href:!0});var ZUr=s(eR);bKe=r(ZUr,"Speech2Text2Config"),ZUr.forEach(t),vKe=r(cwe," (Speech2Text2 model)"),cwe.forEach(t),FKe=i(L),og=n(L,"LI",{});var fwe=s(og);zte=n(fwe,"STRONG",{});var eJr=s(zte);TKe=r(eJr,"splinter"),eJr.forEach(t),MKe=r(fwe," \u2014 "),oR=n(fwe,"A",{href:!0});var oJr=s(oR);EKe=r(oJr,"SplinterConfig"),oJr.forEach(t),CKe=r(fwe," (Splinter model)"),fwe.forEach(t),wKe=i(L),rg=n(L,"LI",{});var mwe=s(rg);Wte=n(mwe,"STRONG",{});var rJr=s(Wte);AKe=r(rJr,"squeezebert"),rJr.forEach(t),LKe=r(mwe," \u2014 "),rR=n(mwe,"A",{href:!0});var tJr=s(rR);yKe=r(tJr,"SqueezeBertConfig"),tJr.forEach(t),xKe=r(mwe," (SqueezeBERT model)"),mwe.forEach(t),$Ke=i(L),tg=n(L,"LI",{});var gwe=s(tg);Qte=n(gwe,"STRONG",{});var aJr=s(Qte);kKe=r(aJr,"swin"),aJr.forEach(t),SKe=r(gwe," \u2014 "),tR=n(gwe,"A",{href:!0});var nJr=s(tR);RKe=r(nJr,"SwinConfig"),nJr.forEach(t),PKe=r(gwe," (Swin Transformer model)"),gwe.forEach(t),BKe=i(L),ag=n(L,"LI",{});var hwe=s(ag);Hte=n(hwe,"STRONG",{});var sJr=s(Hte);IKe=r(sJr,"t5"),sJr.forEach(t),NKe=r(hwe," \u2014 "),aR=n(hwe,"A",{href:!0});var lJr=s(aR);qKe=r(lJr,"T5Config"),lJr.forEach(t),jKe=r(hwe," (T5 model)"),hwe.forEach(t),DKe=i(L),ng=n(L,"LI",{});var pwe=s(ng);Ute=n(pwe,"STRONG",{});var iJr=s(Ute);GKe=r(iJr,"tapas"),iJr.forEach(t),OKe=r(pwe," \u2014 "),nR=n(pwe,"A",{href:!0});var dJr=s(nR);VKe=r(dJr,"TapasConfig"),dJr.forEach(t),XKe=r(pwe," (TAPAS model)"),pwe.forEach(t),zKe=i(L),sg=n(L,"LI",{});var _we=s(sg);Jte=n(_we,"STRONG",{});var cJr=s(Jte);WKe=r(cJr,"trajectory_transformer"),cJr.forEach(t),QKe=r(_we," \u2014 "),sR=n(_we,"A",{href:!0});var fJr=s(sR);HKe=r(fJr,"TrajectoryTransformerConfig"),fJr.forEach(t),UKe=r(_we," (Trajectory Transformer model)"),_we.forEach(t),JKe=i(L),lg=n(L,"LI",{});var uwe=s(lg);Yte=n(uwe,"STRONG",{});var mJr=s(Yte);YKe=r(mJr,"transfo-xl"),mJr.forEach(t),KKe=r(uwe," \u2014 "),lR=n(uwe,"A",{href:!0});var gJr=s(lR);ZKe=r(gJr,"TransfoXLConfig"),gJr.forEach(t),eZe=r(uwe," (Transformer-XL model)"),uwe.forEach(t),oZe=i(L),ig=n(L,"LI",{});var bwe=s(ig);Kte=n(bwe,"STRONG",{});var hJr=s(Kte);rZe=r(hJr,"trocr"),hJr.forEach(t),tZe=r(bwe," \u2014 "),iR=n(bwe,"A",{href:!0});var pJr=s(iR);aZe=r(pJr,"TrOCRConfig"),pJr.forEach(t),nZe=r(bwe," (TrOCR model)"),bwe.forEach(t),sZe=i(L),dg=n(L,"LI",{});var vwe=s(dg);Zte=n(vwe,"STRONG",{});var _Jr=s(Zte);lZe=r(_Jr,"unispeech"),_Jr.forEach(t),iZe=r(vwe," \u2014 "),dR=n(vwe,"A",{href:!0});var uJr=s(dR);dZe=r(uJr,"UniSpeechConfig"),uJr.forEach(t),cZe=r(vwe," (UniSpeech model)"),vwe.forEach(t),fZe=i(L),cg=n(L,"LI",{});var Fwe=s(cg);eae=n(Fwe,"STRONG",{});var bJr=s(eae);mZe=r(bJr,"unispeech-sat"),bJr.forEach(t),gZe=r(Fwe," \u2014 "),cR=n(Fwe,"A",{href:!0});var vJr=s(cR);hZe=r(vJr,"UniSpeechSatConfig"),vJr.forEach(t),pZe=r(Fwe," (UniSpeechSat model)"),Fwe.forEach(t),_Ze=i(L),fg=n(L,"LI",{});var Twe=s(fg);oae=n(Twe,"STRONG",{});var FJr=s(oae);uZe=r(FJr,"van"),FJr.forEach(t),bZe=r(Twe," \u2014 "),fR=n(Twe,"A",{href:!0});var TJr=s(fR);vZe=r(TJr,"VanConfig"),TJr.forEach(t),FZe=r(Twe," (VAN model)"),Twe.forEach(t),TZe=i(L),mg=n(L,"LI",{});var Mwe=s(mg);rae=n(Mwe,"STRONG",{});var MJr=s(rae);MZe=r(MJr,"vilt"),MJr.forEach(t),EZe=r(Mwe," \u2014 "),mR=n(Mwe,"A",{href:!0});var EJr=s(mR);CZe=r(EJr,"ViltConfig"),EJr.forEach(t),wZe=r(Mwe," (ViLT model)"),Mwe.forEach(t),AZe=i(L),gg=n(L,"LI",{});var Ewe=s(gg);tae=n(Ewe,"STRONG",{});var CJr=s(tae);LZe=r(CJr,"vision-encoder-decoder"),CJr.forEach(t),yZe=r(Ewe," \u2014 "),gR=n(Ewe,"A",{href:!0});var wJr=s(gR);xZe=r(wJr,"VisionEncoderDecoderConfig"),wJr.forEach(t),$Ze=r(Ewe," (Vision Encoder decoder model)"),Ewe.forEach(t),kZe=i(L),hg=n(L,"LI",{});var Cwe=s(hg);aae=n(Cwe,"STRONG",{});var AJr=s(aae);SZe=r(AJr,"vision-text-dual-encoder"),AJr.forEach(t),RZe=r(Cwe," \u2014 "),hR=n(Cwe,"A",{href:!0});var LJr=s(hR);PZe=r(LJr,"VisionTextDualEncoderConfig"),LJr.forEach(t),BZe=r(Cwe," (VisionTextDualEncoder model)"),Cwe.forEach(t),IZe=i(L),pg=n(L,"LI",{});var wwe=s(pg);nae=n(wwe,"STRONG",{});var yJr=s(nae);NZe=r(yJr,"visual_bert"),yJr.forEach(t),qZe=r(wwe," \u2014 "),pR=n(wwe,"A",{href:!0});var xJr=s(pR);jZe=r(xJr,"VisualBertConfig"),xJr.forEach(t),DZe=r(wwe," (VisualBERT model)"),wwe.forEach(t),GZe=i(L),_g=n(L,"LI",{});var Awe=s(_g);sae=n(Awe,"STRONG",{});var $Jr=s(sae);OZe=r($Jr,"vit"),$Jr.forEach(t),VZe=r(Awe," \u2014 "),_R=n(Awe,"A",{href:!0});var kJr=s(_R);XZe=r(kJr,"ViTConfig"),kJr.forEach(t),zZe=r(Awe," (ViT model)"),Awe.forEach(t),WZe=i(L),ug=n(L,"LI",{});var Lwe=s(ug);lae=n(Lwe,"STRONG",{});var SJr=s(lae);QZe=r(SJr,"vit_mae"),SJr.forEach(t),HZe=r(Lwe," \u2014 "),uR=n(Lwe,"A",{href:!0});var RJr=s(uR);UZe=r(RJr,"ViTMAEConfig"),RJr.forEach(t),JZe=r(Lwe," (ViTMAE model)"),Lwe.forEach(t),YZe=i(L),bg=n(L,"LI",{});var ywe=s(bg);iae=n(ywe,"STRONG",{});var PJr=s(iae);KZe=r(PJr,"wav2vec2"),PJr.forEach(t),ZZe=r(ywe," \u2014 "),bR=n(ywe,"A",{href:!0});var BJr=s(bR);eeo=r(BJr,"Wav2Vec2Config"),BJr.forEach(t),oeo=r(ywe," (Wav2Vec2 model)"),ywe.forEach(t),reo=i(L),vg=n(L,"LI",{});var xwe=s(vg);dae=n(xwe,"STRONG",{});var IJr=s(dae);teo=r(IJr,"wav2vec2-conformer"),IJr.forEach(t),aeo=r(xwe," \u2014 "),vR=n(xwe,"A",{href:!0});var NJr=s(vR);neo=r(NJr,"Wav2Vec2ConformerConfig"),NJr.forEach(t),seo=r(xwe," (Wav2Vec2-Conformer model)"),xwe.forEach(t),leo=i(L),Fg=n(L,"LI",{});var $we=s(Fg);cae=n($we,"STRONG",{});var qJr=s(cae);ieo=r(qJr,"wavlm"),qJr.forEach(t),deo=r($we," \u2014 "),FR=n($we,"A",{href:!0});var jJr=s(FR);ceo=r(jJr,"WavLMConfig"),jJr.forEach(t),feo=r($we," (WavLM model)"),$we.forEach(t),meo=i(L),Tg=n(L,"LI",{});var kwe=s(Tg);fae=n(kwe,"STRONG",{});var DJr=s(fae);geo=r(DJr,"xglm"),DJr.forEach(t),heo=r(kwe," \u2014 "),TR=n(kwe,"A",{href:!0});var GJr=s(TR);peo=r(GJr,"XGLMConfig"),GJr.forEach(t),_eo=r(kwe," (XGLM model)"),kwe.forEach(t),ueo=i(L),Mg=n(L,"LI",{});var Swe=s(Mg);mae=n(Swe,"STRONG",{});var OJr=s(mae);beo=r(OJr,"xlm"),OJr.forEach(t),veo=r(Swe," \u2014 "),MR=n(Swe,"A",{href:!0});var VJr=s(MR);Feo=r(VJr,"XLMConfig"),VJr.forEach(t),Teo=r(Swe," (XLM model)"),Swe.forEach(t),Meo=i(L),Eg=n(L,"LI",{});var Rwe=s(Eg);gae=n(Rwe,"STRONG",{});var XJr=s(gae);Eeo=r(XJr,"xlm-prophetnet"),XJr.forEach(t),Ceo=r(Rwe," \u2014 "),ER=n(Rwe,"A",{href:!0});var zJr=s(ER);weo=r(zJr,"XLMProphetNetConfig"),zJr.forEach(t),Aeo=r(Rwe," (XLM-ProphetNet model)"),Rwe.forEach(t),Leo=i(L),Cg=n(L,"LI",{});var Pwe=s(Cg);hae=n(Pwe,"STRONG",{});var WJr=s(hae);yeo=r(WJr,"xlm-roberta"),WJr.forEach(t),xeo=r(Pwe," \u2014 "),CR=n(Pwe,"A",{href:!0});var QJr=s(CR);$eo=r(QJr,"XLMRobertaConfig"),QJr.forEach(t),keo=r(Pwe," (XLM-RoBERTa model)"),Pwe.forEach(t),Seo=i(L),wg=n(L,"LI",{});var Bwe=s(wg);pae=n(Bwe,"STRONG",{});var HJr=s(pae);Reo=r(HJr,"xlm-roberta-xl"),HJr.forEach(t),Peo=r(Bwe," \u2014 "),wR=n(Bwe,"A",{href:!0});var UJr=s(wR);Beo=r(UJr,"XLMRobertaXLConfig"),UJr.forEach(t),Ieo=r(Bwe," (XLM-RoBERTa-XL model)"),Bwe.forEach(t),Neo=i(L),Ag=n(L,"LI",{});var Iwe=s(Ag);_ae=n(Iwe,"STRONG",{});var JJr=s(_ae);qeo=r(JJr,"xlnet"),JJr.forEach(t),jeo=r(Iwe," \u2014 "),AR=n(Iwe,"A",{href:!0});var YJr=s(AR);Deo=r(YJr,"XLNetConfig"),YJr.forEach(t),Geo=r(Iwe," (XLNet model)"),Iwe.forEach(t),Oeo=i(L),Lg=n(L,"LI",{});var Nwe=s(Lg);uae=n(Nwe,"STRONG",{});var KJr=s(uae);Veo=r(KJr,"yolos"),KJr.forEach(t),Xeo=r(Nwe," \u2014 "),LR=n(Nwe,"A",{href:!0});var ZJr=s(LR);zeo=r(ZJr,"YolosConfig"),ZJr.forEach(t),Weo=r(Nwe," (YOLOS model)"),Nwe.forEach(t),Qeo=i(L),yg=n(L,"LI",{});var qwe=s(yg);bae=n(qwe,"STRONG",{});var eYr=s(bae);Heo=r(eYr,"yoso"),eYr.forEach(t),Ueo=r(qwe," \u2014 "),yR=n(qwe,"A",{href:!0});var oYr=s(yR);Jeo=r(oYr,"YosoConfig"),oYr.forEach(t),Yeo=r(qwe," (YOSO model)"),qwe.forEach(t),L.forEach(t),Keo=i(ot),T(xg.$$.fragment,ot),ot.forEach(t),Zeo=i(et),$g=n(et,"DIV",{class:!0});var WGe=s($g);T(aL.$$.fragment,WGe),eoo=i(WGe),vae=n(WGe,"P",{});var rYr=s(vae);ooo=r(rYr,"Register a new configuration for this class."),rYr.forEach(t),WGe.forEach(t),et.forEach(t),Uje=i(f),Ei=n(f,"H2",{class:!0});var QGe=s(Ei);kg=n(QGe,"A",{id:!0,class:!0,href:!0});var tYr=s(kg);Fae=n(tYr,"SPAN",{});var aYr=s(Fae);T(nL.$$.fragment,aYr),aYr.forEach(t),tYr.forEach(t),roo=i(QGe),Tae=n(QGe,"SPAN",{});var nYr=s(Tae);too=r(nYr,"AutoTokenizer"),nYr.forEach(t),QGe.forEach(t),Jje=i(f),wo=n(f,"DIV",{class:!0});var js=s(wo);T(sL.$$.fragment,js),aoo=i(js),lL=n(js,"P",{});var HGe=s(lL);noo=r(HGe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),xR=n(HGe,"A",{href:!0});var sYr=s(xR);soo=r(sYr,"AutoTokenizer.from_pretrained()"),sYr.forEach(t),loo=r(HGe," class method."),HGe.forEach(t),ioo=i(js),iL=n(js,"P",{});var UGe=s(iL);doo=r(UGe,"This class cannot be instantiated directly using "),Mae=n(UGe,"CODE",{});var lYr=s(Mae);coo=r(lYr,"__init__()"),lYr.forEach(t),foo=r(UGe," (throws an error)."),UGe.forEach(t),moo=i(js),Cr=n(js,"DIV",{class:!0});var Ds=s(Cr);T(dL.$$.fragment,Ds),goo=i(Ds),Eae=n(Ds,"P",{});var iYr=s(Eae);hoo=r(iYr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),iYr.forEach(t),poo=i(Ds),Aa=n(Ds,"P",{});var Z0=s(Aa);_oo=r(Z0,"The tokenizer class to instantiate is selected based on the "),Cae=n(Z0,"CODE",{});var dYr=s(Cae);uoo=r(dYr,"model_type"),dYr.forEach(t),boo=r(Z0,` property of the config object (either
passed as an argument or loaded from `),wae=n(Z0,"CODE",{});var cYr=s(wae);voo=r(cYr,"pretrained_model_name_or_path"),cYr.forEach(t),Foo=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aae=n(Z0,"CODE",{});var fYr=s(Aae);Too=r(fYr,"pretrained_model_name_or_path"),fYr.forEach(t),Moo=r(Z0,":"),Z0.forEach(t),Eoo=i(Ds),k=n(Ds,"UL",{});var S=s(k);Sn=n(S,"LI",{});var c$=s(Sn);Lae=n(c$,"STRONG",{});var mYr=s(Lae);Coo=r(mYr,"albert"),mYr.forEach(t),woo=r(c$," \u2014 "),$R=n(c$,"A",{href:!0});var gYr=s($R);Aoo=r(gYr,"AlbertTokenizer"),gYr.forEach(t),Loo=r(c$," or "),kR=n(c$,"A",{href:!0});var hYr=s(kR);yoo=r(hYr,"AlbertTokenizerFast"),hYr.forEach(t),xoo=r(c$," (ALBERT model)"),c$.forEach(t),$oo=i(S),Rn=n(S,"LI",{});var f$=s(Rn);yae=n(f$,"STRONG",{});var pYr=s(yae);koo=r(pYr,"bart"),pYr.forEach(t),Soo=r(f$," \u2014 "),SR=n(f$,"A",{href:!0});var _Yr=s(SR);Roo=r(_Yr,"BartTokenizer"),_Yr.forEach(t),Poo=r(f$," or "),RR=n(f$,"A",{href:!0});var uYr=s(RR);Boo=r(uYr,"BartTokenizerFast"),uYr.forEach(t),Ioo=r(f$," (BART model)"),f$.forEach(t),Noo=i(S),Pn=n(S,"LI",{});var m$=s(Pn);xae=n(m$,"STRONG",{});var bYr=s(xae);qoo=r(bYr,"barthez"),bYr.forEach(t),joo=r(m$," \u2014 "),PR=n(m$,"A",{href:!0});var vYr=s(PR);Doo=r(vYr,"BarthezTokenizer"),vYr.forEach(t),Goo=r(m$," or "),BR=n(m$,"A",{href:!0});var FYr=s(BR);Ooo=r(FYr,"BarthezTokenizerFast"),FYr.forEach(t),Voo=r(m$," (BARThez model)"),m$.forEach(t),Xoo=i(S),Sg=n(S,"LI",{});var jwe=s(Sg);$ae=n(jwe,"STRONG",{});var TYr=s($ae);zoo=r(TYr,"bartpho"),TYr.forEach(t),Woo=r(jwe," \u2014 "),IR=n(jwe,"A",{href:!0});var MYr=s(IR);Qoo=r(MYr,"BartphoTokenizer"),MYr.forEach(t),Hoo=r(jwe," (BARTpho model)"),jwe.forEach(t),Uoo=i(S),Bn=n(S,"LI",{});var g$=s(Bn);kae=n(g$,"STRONG",{});var EYr=s(kae);Joo=r(EYr,"bert"),EYr.forEach(t),Yoo=r(g$," \u2014 "),NR=n(g$,"A",{href:!0});var CYr=s(NR);Koo=r(CYr,"BertTokenizer"),CYr.forEach(t),Zoo=r(g$," or "),qR=n(g$,"A",{href:!0});var wYr=s(qR);ero=r(wYr,"BertTokenizerFast"),wYr.forEach(t),oro=r(g$," (BERT model)"),g$.forEach(t),rro=i(S),Rg=n(S,"LI",{});var Dwe=s(Rg);Sae=n(Dwe,"STRONG",{});var AYr=s(Sae);tro=r(AYr,"bert-generation"),AYr.forEach(t),aro=r(Dwe," \u2014 "),jR=n(Dwe,"A",{href:!0});var LYr=s(jR);nro=r(LYr,"BertGenerationTokenizer"),LYr.forEach(t),sro=r(Dwe," (Bert Generation model)"),Dwe.forEach(t),lro=i(S),Pg=n(S,"LI",{});var Gwe=s(Pg);Rae=n(Gwe,"STRONG",{});var yYr=s(Rae);iro=r(yYr,"bert-japanese"),yYr.forEach(t),dro=r(Gwe," \u2014 "),DR=n(Gwe,"A",{href:!0});var xYr=s(DR);cro=r(xYr,"BertJapaneseTokenizer"),xYr.forEach(t),fro=r(Gwe," (BertJapanese model)"),Gwe.forEach(t),mro=i(S),Bg=n(S,"LI",{});var Owe=s(Bg);Pae=n(Owe,"STRONG",{});var $Yr=s(Pae);gro=r($Yr,"bertweet"),$Yr.forEach(t),hro=r(Owe," \u2014 "),GR=n(Owe,"A",{href:!0});var kYr=s(GR);pro=r(kYr,"BertweetTokenizer"),kYr.forEach(t),_ro=r(Owe," (BERTweet model)"),Owe.forEach(t),uro=i(S),In=n(S,"LI",{});var h$=s(In);Bae=n(h$,"STRONG",{});var SYr=s(Bae);bro=r(SYr,"big_bird"),SYr.forEach(t),vro=r(h$," \u2014 "),OR=n(h$,"A",{href:!0});var RYr=s(OR);Fro=r(RYr,"BigBirdTokenizer"),RYr.forEach(t),Tro=r(h$," or "),VR=n(h$,"A",{href:!0});var PYr=s(VR);Mro=r(PYr,"BigBirdTokenizerFast"),PYr.forEach(t),Ero=r(h$," (BigBird model)"),h$.forEach(t),Cro=i(S),Nn=n(S,"LI",{});var p$=s(Nn);Iae=n(p$,"STRONG",{});var BYr=s(Iae);wro=r(BYr,"bigbird_pegasus"),BYr.forEach(t),Aro=r(p$," \u2014 "),XR=n(p$,"A",{href:!0});var IYr=s(XR);Lro=r(IYr,"PegasusTokenizer"),IYr.forEach(t),yro=r(p$," or "),zR=n(p$,"A",{href:!0});var NYr=s(zR);xro=r(NYr,"PegasusTokenizerFast"),NYr.forEach(t),$ro=r(p$," (BigBird-Pegasus model)"),p$.forEach(t),kro=i(S),qn=n(S,"LI",{});var _$=s(qn);Nae=n(_$,"STRONG",{});var qYr=s(Nae);Sro=r(qYr,"blenderbot"),qYr.forEach(t),Rro=r(_$," \u2014 "),WR=n(_$,"A",{href:!0});var jYr=s(WR);Pro=r(jYr,"BlenderbotTokenizer"),jYr.forEach(t),Bro=r(_$," or "),QR=n(_$,"A",{href:!0});var DYr=s(QR);Iro=r(DYr,"BlenderbotTokenizerFast"),DYr.forEach(t),Nro=r(_$," (Blenderbot model)"),_$.forEach(t),qro=i(S),Ig=n(S,"LI",{});var Vwe=s(Ig);qae=n(Vwe,"STRONG",{});var GYr=s(qae);jro=r(GYr,"blenderbot-small"),GYr.forEach(t),Dro=r(Vwe," \u2014 "),HR=n(Vwe,"A",{href:!0});var OYr=s(HR);Gro=r(OYr,"BlenderbotSmallTokenizer"),OYr.forEach(t),Oro=r(Vwe," (BlenderbotSmall model)"),Vwe.forEach(t),Vro=i(S),Ng=n(S,"LI",{});var Xwe=s(Ng);jae=n(Xwe,"STRONG",{});var VYr=s(jae);Xro=r(VYr,"bloom"),VYr.forEach(t),zro=r(Xwe," \u2014 "),UR=n(Xwe,"A",{href:!0});var XYr=s(UR);Wro=r(XYr,"BloomTokenizerFast"),XYr.forEach(t),Qro=r(Xwe," (BLOOM model)"),Xwe.forEach(t),Hro=i(S),qg=n(S,"LI",{});var zwe=s(qg);Dae=n(zwe,"STRONG",{});var zYr=s(Dae);Uro=r(zYr,"byt5"),zYr.forEach(t),Jro=r(zwe," \u2014 "),JR=n(zwe,"A",{href:!0});var WYr=s(JR);Yro=r(WYr,"ByT5Tokenizer"),WYr.forEach(t),Kro=r(zwe," (ByT5 model)"),zwe.forEach(t),Zro=i(S),jn=n(S,"LI",{});var u$=s(jn);Gae=n(u$,"STRONG",{});var QYr=s(Gae);eto=r(QYr,"camembert"),QYr.forEach(t),oto=r(u$," \u2014 "),YR=n(u$,"A",{href:!0});var HYr=s(YR);rto=r(HYr,"CamembertTokenizer"),HYr.forEach(t),tto=r(u$," or "),KR=n(u$,"A",{href:!0});var UYr=s(KR);ato=r(UYr,"CamembertTokenizerFast"),UYr.forEach(t),nto=r(u$," (CamemBERT model)"),u$.forEach(t),sto=i(S),jg=n(S,"LI",{});var Wwe=s(jg);Oae=n(Wwe,"STRONG",{});var JYr=s(Oae);lto=r(JYr,"canine"),JYr.forEach(t),ito=r(Wwe," \u2014 "),ZR=n(Wwe,"A",{href:!0});var YYr=s(ZR);dto=r(YYr,"CanineTokenizer"),YYr.forEach(t),cto=r(Wwe," (CANINE model)"),Wwe.forEach(t),fto=i(S),Dn=n(S,"LI",{});var b$=s(Dn);Vae=n(b$,"STRONG",{});var KYr=s(Vae);mto=r(KYr,"clip"),KYr.forEach(t),gto=r(b$," \u2014 "),eP=n(b$,"A",{href:!0});var ZYr=s(eP);hto=r(ZYr,"CLIPTokenizer"),ZYr.forEach(t),pto=r(b$," or "),oP=n(b$,"A",{href:!0});var eKr=s(oP);_to=r(eKr,"CLIPTokenizerFast"),eKr.forEach(t),uto=r(b$," (CLIP model)"),b$.forEach(t),bto=i(S),Gn=n(S,"LI",{});var v$=s(Gn);Xae=n(v$,"STRONG",{});var oKr=s(Xae);vto=r(oKr,"convbert"),oKr.forEach(t),Fto=r(v$," \u2014 "),rP=n(v$,"A",{href:!0});var rKr=s(rP);Tto=r(rKr,"ConvBertTokenizer"),rKr.forEach(t),Mto=r(v$," or "),tP=n(v$,"A",{href:!0});var tKr=s(tP);Eto=r(tKr,"ConvBertTokenizerFast"),tKr.forEach(t),Cto=r(v$," (ConvBERT model)"),v$.forEach(t),wto=i(S),On=n(S,"LI",{});var F$=s(On);zae=n(F$,"STRONG",{});var aKr=s(zae);Ato=r(aKr,"cpm"),aKr.forEach(t),Lto=r(F$," \u2014 "),aP=n(F$,"A",{href:!0});var nKr=s(aP);yto=r(nKr,"CpmTokenizer"),nKr.forEach(t),xto=r(F$," or "),nP=n(F$,"A",{href:!0});var sKr=s(nP);$to=r(sKr,"CpmTokenizerFast"),sKr.forEach(t),kto=r(F$," (CPM model)"),F$.forEach(t),Sto=i(S),Dg=n(S,"LI",{});var Qwe=s(Dg);Wae=n(Qwe,"STRONG",{});var lKr=s(Wae);Rto=r(lKr,"ctrl"),lKr.forEach(t),Pto=r(Qwe," \u2014 "),sP=n(Qwe,"A",{href:!0});var iKr=s(sP);Bto=r(iKr,"CTRLTokenizer"),iKr.forEach(t),Ito=r(Qwe," (CTRL model)"),Qwe.forEach(t),Nto=i(S),Vn=n(S,"LI",{});var T$=s(Vn);Qae=n(T$,"STRONG",{});var dKr=s(Qae);qto=r(dKr,"data2vec-text"),dKr.forEach(t),jto=r(T$," \u2014 "),lP=n(T$,"A",{href:!0});var cKr=s(lP);Dto=r(cKr,"RobertaTokenizer"),cKr.forEach(t),Gto=r(T$," or "),iP=n(T$,"A",{href:!0});var fKr=s(iP);Oto=r(fKr,"RobertaTokenizerFast"),fKr.forEach(t),Vto=r(T$," (Data2VecText model)"),T$.forEach(t),Xto=i(S),Xn=n(S,"LI",{});var M$=s(Xn);Hae=n(M$,"STRONG",{});var mKr=s(Hae);zto=r(mKr,"deberta"),mKr.forEach(t),Wto=r(M$," \u2014 "),dP=n(M$,"A",{href:!0});var gKr=s(dP);Qto=r(gKr,"DebertaTokenizer"),gKr.forEach(t),Hto=r(M$," or "),cP=n(M$,"A",{href:!0});var hKr=s(cP);Uto=r(hKr,"DebertaTokenizerFast"),hKr.forEach(t),Jto=r(M$," (DeBERTa model)"),M$.forEach(t),Yto=i(S),zn=n(S,"LI",{});var E$=s(zn);Uae=n(E$,"STRONG",{});var pKr=s(Uae);Kto=r(pKr,"deberta-v2"),pKr.forEach(t),Zto=r(E$," \u2014 "),fP=n(E$,"A",{href:!0});var _Kr=s(fP);eao=r(_Kr,"DebertaV2Tokenizer"),_Kr.forEach(t),oao=r(E$," or "),mP=n(E$,"A",{href:!0});var uKr=s(mP);rao=r(uKr,"DebertaV2TokenizerFast"),uKr.forEach(t),tao=r(E$," (DeBERTa-v2 model)"),E$.forEach(t),aao=i(S),Wn=n(S,"LI",{});var C$=s(Wn);Jae=n(C$,"STRONG",{});var bKr=s(Jae);nao=r(bKr,"distilbert"),bKr.forEach(t),sao=r(C$," \u2014 "),gP=n(C$,"A",{href:!0});var vKr=s(gP);lao=r(vKr,"DistilBertTokenizer"),vKr.forEach(t),iao=r(C$," or "),hP=n(C$,"A",{href:!0});var FKr=s(hP);dao=r(FKr,"DistilBertTokenizerFast"),FKr.forEach(t),cao=r(C$," (DistilBERT model)"),C$.forEach(t),fao=i(S),Qn=n(S,"LI",{});var w$=s(Qn);Yae=n(w$,"STRONG",{});var TKr=s(Yae);mao=r(TKr,"dpr"),TKr.forEach(t),gao=r(w$," \u2014 "),pP=n(w$,"A",{href:!0});var MKr=s(pP);hao=r(MKr,"DPRQuestionEncoderTokenizer"),MKr.forEach(t),pao=r(w$," or "),_P=n(w$,"A",{href:!0});var EKr=s(_P);_ao=r(EKr,"DPRQuestionEncoderTokenizerFast"),EKr.forEach(t),uao=r(w$," (DPR model)"),w$.forEach(t),bao=i(S),Hn=n(S,"LI",{});var A$=s(Hn);Kae=n(A$,"STRONG",{});var CKr=s(Kae);vao=r(CKr,"electra"),CKr.forEach(t),Fao=r(A$," \u2014 "),uP=n(A$,"A",{href:!0});var wKr=s(uP);Tao=r(wKr,"ElectraTokenizer"),wKr.forEach(t),Mao=r(A$," or "),bP=n(A$,"A",{href:!0});var AKr=s(bP);Eao=r(AKr,"ElectraTokenizerFast"),AKr.forEach(t),Cao=r(A$," (ELECTRA model)"),A$.forEach(t),wao=i(S),Gg=n(S,"LI",{});var Hwe=s(Gg);Zae=n(Hwe,"STRONG",{});var LKr=s(Zae);Aao=r(LKr,"flaubert"),LKr.forEach(t),Lao=r(Hwe," \u2014 "),vP=n(Hwe,"A",{href:!0});var yKr=s(vP);yao=r(yKr,"FlaubertTokenizer"),yKr.forEach(t),xao=r(Hwe," (FlauBERT model)"),Hwe.forEach(t),$ao=i(S),Un=n(S,"LI",{});var L$=s(Un);ene=n(L$,"STRONG",{});var xKr=s(ene);kao=r(xKr,"fnet"),xKr.forEach(t),Sao=r(L$," \u2014 "),FP=n(L$,"A",{href:!0});var $Kr=s(FP);Rao=r($Kr,"FNetTokenizer"),$Kr.forEach(t),Pao=r(L$," or "),TP=n(L$,"A",{href:!0});var kKr=s(TP);Bao=r(kKr,"FNetTokenizerFast"),kKr.forEach(t),Iao=r(L$," (FNet model)"),L$.forEach(t),Nao=i(S),Og=n(S,"LI",{});var Uwe=s(Og);one=n(Uwe,"STRONG",{});var SKr=s(one);qao=r(SKr,"fsmt"),SKr.forEach(t),jao=r(Uwe," \u2014 "),MP=n(Uwe,"A",{href:!0});var RKr=s(MP);Dao=r(RKr,"FSMTTokenizer"),RKr.forEach(t),Gao=r(Uwe," (FairSeq Machine-Translation model)"),Uwe.forEach(t),Oao=i(S),Jn=n(S,"LI",{});var y$=s(Jn);rne=n(y$,"STRONG",{});var PKr=s(rne);Vao=r(PKr,"funnel"),PKr.forEach(t),Xao=r(y$," \u2014 "),EP=n(y$,"A",{href:!0});var BKr=s(EP);zao=r(BKr,"FunnelTokenizer"),BKr.forEach(t),Wao=r(y$," or "),CP=n(y$,"A",{href:!0});var IKr=s(CP);Qao=r(IKr,"FunnelTokenizerFast"),IKr.forEach(t),Hao=r(y$," (Funnel Transformer model)"),y$.forEach(t),Uao=i(S),Yn=n(S,"LI",{});var x$=s(Yn);tne=n(x$,"STRONG",{});var NKr=s(tne);Jao=r(NKr,"gpt2"),NKr.forEach(t),Yao=r(x$," \u2014 "),wP=n(x$,"A",{href:!0});var qKr=s(wP);Kao=r(qKr,"GPT2Tokenizer"),qKr.forEach(t),Zao=r(x$," or "),AP=n(x$,"A",{href:!0});var jKr=s(AP);eno=r(jKr,"GPT2TokenizerFast"),jKr.forEach(t),ono=r(x$," (OpenAI GPT-2 model)"),x$.forEach(t),rno=i(S),Kn=n(S,"LI",{});var $$=s(Kn);ane=n($$,"STRONG",{});var DKr=s(ane);tno=r(DKr,"gpt_neo"),DKr.forEach(t),ano=r($$," \u2014 "),LP=n($$,"A",{href:!0});var GKr=s(LP);nno=r(GKr,"GPT2Tokenizer"),GKr.forEach(t),sno=r($$," or "),yP=n($$,"A",{href:!0});var OKr=s(yP);lno=r(OKr,"GPT2TokenizerFast"),OKr.forEach(t),ino=r($$," (GPT Neo model)"),$$.forEach(t),dno=i(S),Vg=n(S,"LI",{});var Jwe=s(Vg);nne=n(Jwe,"STRONG",{});var VKr=s(nne);cno=r(VKr,"gpt_neox"),VKr.forEach(t),fno=r(Jwe," \u2014 "),xP=n(Jwe,"A",{href:!0});var XKr=s(xP);mno=r(XKr,"GPTNeoXTokenizerFast"),XKr.forEach(t),gno=r(Jwe," (GPT NeoX model)"),Jwe.forEach(t),hno=i(S),Zn=n(S,"LI",{});var k$=s(Zn);sne=n(k$,"STRONG",{});var zKr=s(sne);pno=r(zKr,"gptj"),zKr.forEach(t),_no=r(k$," \u2014 "),$P=n(k$,"A",{href:!0});var WKr=s($P);uno=r(WKr,"GPT2Tokenizer"),WKr.forEach(t),bno=r(k$," or "),kP=n(k$,"A",{href:!0});var QKr=s(kP);vno=r(QKr,"GPT2TokenizerFast"),QKr.forEach(t),Fno=r(k$," (GPT-J model)"),k$.forEach(t),Tno=i(S),es=n(S,"LI",{});var S$=s(es);lne=n(S$,"STRONG",{});var HKr=s(lne);Mno=r(HKr,"greaselm"),HKr.forEach(t),Eno=r(S$," \u2014 "),SP=n(S$,"A",{href:!0});var UKr=s(SP);Cno=r(UKr,"RobertaTokenizer"),UKr.forEach(t),wno=r(S$," or "),RP=n(S$,"A",{href:!0});var JKr=s(RP);Ano=r(JKr,"RobertaTokenizerFast"),JKr.forEach(t),Lno=r(S$," (GreaseLM model)"),S$.forEach(t),yno=i(S),os=n(S,"LI",{});var R$=s(os);ine=n(R$,"STRONG",{});var YKr=s(ine);xno=r(YKr,"herbert"),YKr.forEach(t),$no=r(R$," \u2014 "),PP=n(R$,"A",{href:!0});var KKr=s(PP);kno=r(KKr,"HerbertTokenizer"),KKr.forEach(t),Sno=r(R$," or "),BP=n(R$,"A",{href:!0});var ZKr=s(BP);Rno=r(ZKr,"HerbertTokenizerFast"),ZKr.forEach(t),Pno=r(R$," (HerBERT model)"),R$.forEach(t),Bno=i(S),Xg=n(S,"LI",{});var Ywe=s(Xg);dne=n(Ywe,"STRONG",{});var eZr=s(dne);Ino=r(eZr,"hubert"),eZr.forEach(t),Nno=r(Ywe," \u2014 "),IP=n(Ywe,"A",{href:!0});var oZr=s(IP);qno=r(oZr,"Wav2Vec2CTCTokenizer"),oZr.forEach(t),jno=r(Ywe," (Hubert model)"),Ywe.forEach(t),Dno=i(S),rs=n(S,"LI",{});var P$=s(rs);cne=n(P$,"STRONG",{});var rZr=s(cne);Gno=r(rZr,"ibert"),rZr.forEach(t),Ono=r(P$," \u2014 "),NP=n(P$,"A",{href:!0});var tZr=s(NP);Vno=r(tZr,"RobertaTokenizer"),tZr.forEach(t),Xno=r(P$," or "),qP=n(P$,"A",{href:!0});var aZr=s(qP);zno=r(aZr,"RobertaTokenizerFast"),aZr.forEach(t),Wno=r(P$," (I-BERT model)"),P$.forEach(t),Qno=i(S),ts=n(S,"LI",{});var B$=s(ts);fne=n(B$,"STRONG",{});var nZr=s(fne);Hno=r(nZr,"layoutlm"),nZr.forEach(t),Uno=r(B$," \u2014 "),jP=n(B$,"A",{href:!0});var sZr=s(jP);Jno=r(sZr,"LayoutLMTokenizer"),sZr.forEach(t),Yno=r(B$," or "),DP=n(B$,"A",{href:!0});var lZr=s(DP);Kno=r(lZr,"LayoutLMTokenizerFast"),lZr.forEach(t),Zno=r(B$," (LayoutLM model)"),B$.forEach(t),eso=i(S),as=n(S,"LI",{});var I$=s(as);mne=n(I$,"STRONG",{});var iZr=s(mne);oso=r(iZr,"layoutlmv2"),iZr.forEach(t),rso=r(I$," \u2014 "),GP=n(I$,"A",{href:!0});var dZr=s(GP);tso=r(dZr,"LayoutLMv2Tokenizer"),dZr.forEach(t),aso=r(I$," or "),OP=n(I$,"A",{href:!0});var cZr=s(OP);nso=r(cZr,"LayoutLMv2TokenizerFast"),cZr.forEach(t),sso=r(I$," (LayoutLMv2 model)"),I$.forEach(t),lso=i(S),ns=n(S,"LI",{});var N$=s(ns);gne=n(N$,"STRONG",{});var fZr=s(gne);iso=r(fZr,"layoutlmv3"),fZr.forEach(t),dso=r(N$," \u2014 "),VP=n(N$,"A",{href:!0});var mZr=s(VP);cso=r(mZr,"LayoutLMv3Tokenizer"),mZr.forEach(t),fso=r(N$," or "),XP=n(N$,"A",{href:!0});var gZr=s(XP);mso=r(gZr,"LayoutLMv3TokenizerFast"),gZr.forEach(t),gso=r(N$," (LayoutLMv3 model)"),N$.forEach(t),hso=i(S),ss=n(S,"LI",{});var q$=s(ss);hne=n(q$,"STRONG",{});var hZr=s(hne);pso=r(hZr,"layoutxlm"),hZr.forEach(t),_so=r(q$," \u2014 "),zP=n(q$,"A",{href:!0});var pZr=s(zP);uso=r(pZr,"LayoutXLMTokenizer"),pZr.forEach(t),bso=r(q$," or "),WP=n(q$,"A",{href:!0});var _Zr=s(WP);vso=r(_Zr,"LayoutXLMTokenizerFast"),_Zr.forEach(t),Fso=r(q$," (LayoutXLM model)"),q$.forEach(t),Tso=i(S),ls=n(S,"LI",{});var j$=s(ls);pne=n(j$,"STRONG",{});var uZr=s(pne);Mso=r(uZr,"led"),uZr.forEach(t),Eso=r(j$," \u2014 "),QP=n(j$,"A",{href:!0});var bZr=s(QP);Cso=r(bZr,"LEDTokenizer"),bZr.forEach(t),wso=r(j$," or "),HP=n(j$,"A",{href:!0});var vZr=s(HP);Aso=r(vZr,"LEDTokenizerFast"),vZr.forEach(t),Lso=r(j$," (LED model)"),j$.forEach(t),yso=i(S),is=n(S,"LI",{});var D$=s(is);_ne=n(D$,"STRONG",{});var FZr=s(_ne);xso=r(FZr,"longformer"),FZr.forEach(t),$so=r(D$," \u2014 "),UP=n(D$,"A",{href:!0});var TZr=s(UP);kso=r(TZr,"LongformerTokenizer"),TZr.forEach(t),Sso=r(D$," or "),JP=n(D$,"A",{href:!0});var MZr=s(JP);Rso=r(MZr,"LongformerTokenizerFast"),MZr.forEach(t),Pso=r(D$," (Longformer model)"),D$.forEach(t),Bso=i(S),zg=n(S,"LI",{});var Kwe=s(zg);une=n(Kwe,"STRONG",{});var EZr=s(une);Iso=r(EZr,"luke"),EZr.forEach(t),Nso=r(Kwe," \u2014 "),YP=n(Kwe,"A",{href:!0});var CZr=s(YP);qso=r(CZr,"LukeTokenizer"),CZr.forEach(t),jso=r(Kwe," (LUKE model)"),Kwe.forEach(t),Dso=i(S),ds=n(S,"LI",{});var G$=s(ds);bne=n(G$,"STRONG",{});var wZr=s(bne);Gso=r(wZr,"lxmert"),wZr.forEach(t),Oso=r(G$," \u2014 "),KP=n(G$,"A",{href:!0});var AZr=s(KP);Vso=r(AZr,"LxmertTokenizer"),AZr.forEach(t),Xso=r(G$," or "),ZP=n(G$,"A",{href:!0});var LZr=s(ZP);zso=r(LZr,"LxmertTokenizerFast"),LZr.forEach(t),Wso=r(G$," (LXMERT model)"),G$.forEach(t),Qso=i(S),Wg=n(S,"LI",{});var Zwe=s(Wg);vne=n(Zwe,"STRONG",{});var yZr=s(vne);Hso=r(yZr,"m2m_100"),yZr.forEach(t),Uso=r(Zwe," \u2014 "),eB=n(Zwe,"A",{href:!0});var xZr=s(eB);Jso=r(xZr,"M2M100Tokenizer"),xZr.forEach(t),Yso=r(Zwe," (M2M100 model)"),Zwe.forEach(t),Kso=i(S),Qg=n(S,"LI",{});var eAe=s(Qg);Fne=n(eAe,"STRONG",{});var $Zr=s(Fne);Zso=r($Zr,"marian"),$Zr.forEach(t),elo=r(eAe," \u2014 "),oB=n(eAe,"A",{href:!0});var kZr=s(oB);olo=r(kZr,"MarianTokenizer"),kZr.forEach(t),rlo=r(eAe," (Marian model)"),eAe.forEach(t),tlo=i(S),cs=n(S,"LI",{});var O$=s(cs);Tne=n(O$,"STRONG",{});var SZr=s(Tne);alo=r(SZr,"mbart"),SZr.forEach(t),nlo=r(O$," \u2014 "),rB=n(O$,"A",{href:!0});var RZr=s(rB);slo=r(RZr,"MBartTokenizer"),RZr.forEach(t),llo=r(O$," or "),tB=n(O$,"A",{href:!0});var PZr=s(tB);ilo=r(PZr,"MBartTokenizerFast"),PZr.forEach(t),dlo=r(O$," (mBART model)"),O$.forEach(t),clo=i(S),fs=n(S,"LI",{});var V$=s(fs);Mne=n(V$,"STRONG",{});var BZr=s(Mne);flo=r(BZr,"mbart50"),BZr.forEach(t),mlo=r(V$," \u2014 "),aB=n(V$,"A",{href:!0});var IZr=s(aB);glo=r(IZr,"MBart50Tokenizer"),IZr.forEach(t),hlo=r(V$," or "),nB=n(V$,"A",{href:!0});var NZr=s(nB);plo=r(NZr,"MBart50TokenizerFast"),NZr.forEach(t),_lo=r(V$," (mBART-50 model)"),V$.forEach(t),ulo=i(S),ms=n(S,"LI",{});var X$=s(ms);Ene=n(X$,"STRONG",{});var qZr=s(Ene);blo=r(qZr,"megatron-bert"),qZr.forEach(t),vlo=r(X$," \u2014 "),sB=n(X$,"A",{href:!0});var jZr=s(sB);Flo=r(jZr,"BertTokenizer"),jZr.forEach(t),Tlo=r(X$," or "),lB=n(X$,"A",{href:!0});var DZr=s(lB);Mlo=r(DZr,"BertTokenizerFast"),DZr.forEach(t),Elo=r(X$," (Megatron-BERT model)"),X$.forEach(t),Clo=i(S),Hg=n(S,"LI",{});var oAe=s(Hg);Cne=n(oAe,"STRONG",{});var GZr=s(Cne);wlo=r(GZr,"mluke"),GZr.forEach(t),Alo=r(oAe," \u2014 "),iB=n(oAe,"A",{href:!0});var OZr=s(iB);Llo=r(OZr,"MLukeTokenizer"),OZr.forEach(t),ylo=r(oAe," (mLUKE model)"),oAe.forEach(t),xlo=i(S),gs=n(S,"LI",{});var z$=s(gs);wne=n(z$,"STRONG",{});var VZr=s(wne);$lo=r(VZr,"mobilebert"),VZr.forEach(t),klo=r(z$," \u2014 "),dB=n(z$,"A",{href:!0});var XZr=s(dB);Slo=r(XZr,"MobileBertTokenizer"),XZr.forEach(t),Rlo=r(z$," or "),cB=n(z$,"A",{href:!0});var zZr=s(cB);Plo=r(zZr,"MobileBertTokenizerFast"),zZr.forEach(t),Blo=r(z$," (MobileBERT model)"),z$.forEach(t),Ilo=i(S),hs=n(S,"LI",{});var W$=s(hs);Ane=n(W$,"STRONG",{});var WZr=s(Ane);Nlo=r(WZr,"mpnet"),WZr.forEach(t),qlo=r(W$," \u2014 "),fB=n(W$,"A",{href:!0});var QZr=s(fB);jlo=r(QZr,"MPNetTokenizer"),QZr.forEach(t),Dlo=r(W$," or "),mB=n(W$,"A",{href:!0});var HZr=s(mB);Glo=r(HZr,"MPNetTokenizerFast"),HZr.forEach(t),Olo=r(W$," (MPNet model)"),W$.forEach(t),Vlo=i(S),ps=n(S,"LI",{});var Q$=s(ps);Lne=n(Q$,"STRONG",{});var UZr=s(Lne);Xlo=r(UZr,"mt5"),UZr.forEach(t),zlo=r(Q$," \u2014 "),gB=n(Q$,"A",{href:!0});var JZr=s(gB);Wlo=r(JZr,"MT5Tokenizer"),JZr.forEach(t),Qlo=r(Q$," or "),hB=n(Q$,"A",{href:!0});var YZr=s(hB);Hlo=r(YZr,"MT5TokenizerFast"),YZr.forEach(t),Ulo=r(Q$," (MT5 model)"),Q$.forEach(t),Jlo=i(S),_s=n(S,"LI",{});var H$=s(_s);yne=n(H$,"STRONG",{});var KZr=s(yne);Ylo=r(KZr,"nystromformer"),KZr.forEach(t),Klo=r(H$," \u2014 "),pB=n(H$,"A",{href:!0});var ZZr=s(pB);Zlo=r(ZZr,"AlbertTokenizer"),ZZr.forEach(t),eio=r(H$," or "),_B=n(H$,"A",{href:!0});var eet=s(_B);oio=r(eet,"AlbertTokenizerFast"),eet.forEach(t),rio=r(H$," (Nystr\xF6mformer model)"),H$.forEach(t),tio=i(S),us=n(S,"LI",{});var U$=s(us);xne=n(U$,"STRONG",{});var oet=s(xne);aio=r(oet,"openai-gpt"),oet.forEach(t),nio=r(U$," \u2014 "),uB=n(U$,"A",{href:!0});var ret=s(uB);sio=r(ret,"OpenAIGPTTokenizer"),ret.forEach(t),lio=r(U$," or "),bB=n(U$,"A",{href:!0});var tet=s(bB);iio=r(tet,"OpenAIGPTTokenizerFast"),tet.forEach(t),dio=r(U$," (OpenAI GPT model)"),U$.forEach(t),cio=i(S),Ug=n(S,"LI",{});var rAe=s(Ug);$ne=n(rAe,"STRONG",{});var aet=s($ne);fio=r(aet,"opt"),aet.forEach(t),mio=r(rAe," \u2014 "),vB=n(rAe,"A",{href:!0});var net=s(vB);gio=r(net,"GPT2Tokenizer"),net.forEach(t),hio=r(rAe," (OPT model)"),rAe.forEach(t),pio=i(S),bs=n(S,"LI",{});var J$=s(bs);kne=n(J$,"STRONG",{});var set=s(kne);_io=r(set,"pegasus"),set.forEach(t),uio=r(J$," \u2014 "),FB=n(J$,"A",{href:!0});var iet=s(FB);bio=r(iet,"PegasusTokenizer"),iet.forEach(t),vio=r(J$," or "),TB=n(J$,"A",{href:!0});var det=s(TB);Fio=r(det,"PegasusTokenizerFast"),det.forEach(t),Tio=r(J$," (Pegasus model)"),J$.forEach(t),Mio=i(S),Jg=n(S,"LI",{});var tAe=s(Jg);Sne=n(tAe,"STRONG",{});var cet=s(Sne);Eio=r(cet,"perceiver"),cet.forEach(t),Cio=r(tAe," \u2014 "),MB=n(tAe,"A",{href:!0});var fet=s(MB);wio=r(fet,"PerceiverTokenizer"),fet.forEach(t),Aio=r(tAe," (Perceiver model)"),tAe.forEach(t),Lio=i(S),Yg=n(S,"LI",{});var aAe=s(Yg);Rne=n(aAe,"STRONG",{});var met=s(Rne);yio=r(met,"phobert"),met.forEach(t),xio=r(aAe," \u2014 "),EB=n(aAe,"A",{href:!0});var get=s(EB);$io=r(get,"PhobertTokenizer"),get.forEach(t),kio=r(aAe," (PhoBERT model)"),aAe.forEach(t),Sio=i(S),Kg=n(S,"LI",{});var nAe=s(Kg);Pne=n(nAe,"STRONG",{});var het=s(Pne);Rio=r(het,"plbart"),het.forEach(t),Pio=r(nAe," \u2014 "),CB=n(nAe,"A",{href:!0});var pet=s(CB);Bio=r(pet,"PLBartTokenizer"),pet.forEach(t),Iio=r(nAe," (PLBart model)"),nAe.forEach(t),Nio=i(S),Zg=n(S,"LI",{});var sAe=s(Zg);Bne=n(sAe,"STRONG",{});var _et=s(Bne);qio=r(_et,"prophetnet"),_et.forEach(t),jio=r(sAe," \u2014 "),wB=n(sAe,"A",{href:!0});var uet=s(wB);Dio=r(uet,"ProphetNetTokenizer"),uet.forEach(t),Gio=r(sAe," (ProphetNet model)"),sAe.forEach(t),Oio=i(S),vs=n(S,"LI",{});var Y$=s(vs);Ine=n(Y$,"STRONG",{});var bet=s(Ine);Vio=r(bet,"qdqbert"),bet.forEach(t),Xio=r(Y$," \u2014 "),AB=n(Y$,"A",{href:!0});var vet=s(AB);zio=r(vet,"BertTokenizer"),vet.forEach(t),Wio=r(Y$," or "),LB=n(Y$,"A",{href:!0});var Fet=s(LB);Qio=r(Fet,"BertTokenizerFast"),Fet.forEach(t),Hio=r(Y$," (QDQBert model)"),Y$.forEach(t),Uio=i(S),eh=n(S,"LI",{});var lAe=s(eh);Nne=n(lAe,"STRONG",{});var Tet=s(Nne);Jio=r(Tet,"rag"),Tet.forEach(t),Yio=r(lAe," \u2014 "),yB=n(lAe,"A",{href:!0});var Met=s(yB);Kio=r(Met,"RagTokenizer"),Met.forEach(t),Zio=r(lAe," (RAG model)"),lAe.forEach(t),edo=i(S),Fs=n(S,"LI",{});var K$=s(Fs);qne=n(K$,"STRONG",{});var Eet=s(qne);odo=r(Eet,"realm"),Eet.forEach(t),rdo=r(K$," \u2014 "),xB=n(K$,"A",{href:!0});var Cet=s(xB);tdo=r(Cet,"RealmTokenizer"),Cet.forEach(t),ado=r(K$," or "),$B=n(K$,"A",{href:!0});var wet=s($B);ndo=r(wet,"RealmTokenizerFast"),wet.forEach(t),sdo=r(K$," (REALM model)"),K$.forEach(t),ldo=i(S),Ts=n(S,"LI",{});var Z$=s(Ts);jne=n(Z$,"STRONG",{});var Aet=s(jne);ido=r(Aet,"reformer"),Aet.forEach(t),ddo=r(Z$," \u2014 "),kB=n(Z$,"A",{href:!0});var Let=s(kB);cdo=r(Let,"ReformerTokenizer"),Let.forEach(t),fdo=r(Z$," or "),SB=n(Z$,"A",{href:!0});var yet=s(SB);mdo=r(yet,"ReformerTokenizerFast"),yet.forEach(t),gdo=r(Z$," (Reformer model)"),Z$.forEach(t),hdo=i(S),Ms=n(S,"LI",{});var ek=s(Ms);Dne=n(ek,"STRONG",{});var xet=s(Dne);pdo=r(xet,"rembert"),xet.forEach(t),_do=r(ek," \u2014 "),RB=n(ek,"A",{href:!0});var $et=s(RB);udo=r($et,"RemBertTokenizer"),$et.forEach(t),bdo=r(ek," or "),PB=n(ek,"A",{href:!0});var ket=s(PB);vdo=r(ket,"RemBertTokenizerFast"),ket.forEach(t),Fdo=r(ek," (RemBERT model)"),ek.forEach(t),Tdo=i(S),Es=n(S,"LI",{});var ok=s(Es);Gne=n(ok,"STRONG",{});var Set=s(Gne);Mdo=r(Set,"retribert"),Set.forEach(t),Edo=r(ok," \u2014 "),BB=n(ok,"A",{href:!0});var Ret=s(BB);Cdo=r(Ret,"RetriBertTokenizer"),Ret.forEach(t),wdo=r(ok," or "),IB=n(ok,"A",{href:!0});var Pet=s(IB);Ado=r(Pet,"RetriBertTokenizerFast"),Pet.forEach(t),Ldo=r(ok," (RetriBERT model)"),ok.forEach(t),ydo=i(S),Cs=n(S,"LI",{});var rk=s(Cs);One=n(rk,"STRONG",{});var Bet=s(One);xdo=r(Bet,"roberta"),Bet.forEach(t),$do=r(rk," \u2014 "),NB=n(rk,"A",{href:!0});var Iet=s(NB);kdo=r(Iet,"RobertaTokenizer"),Iet.forEach(t),Sdo=r(rk," or "),qB=n(rk,"A",{href:!0});var Net=s(qB);Rdo=r(Net,"RobertaTokenizerFast"),Net.forEach(t),Pdo=r(rk," (RoBERTa model)"),rk.forEach(t),Bdo=i(S),ws=n(S,"LI",{});var tk=s(ws);Vne=n(tk,"STRONG",{});var qet=s(Vne);Ido=r(qet,"roformer"),qet.forEach(t),Ndo=r(tk," \u2014 "),jB=n(tk,"A",{href:!0});var jet=s(jB);qdo=r(jet,"RoFormerTokenizer"),jet.forEach(t),jdo=r(tk," or "),DB=n(tk,"A",{href:!0});var Det=s(DB);Ddo=r(Det,"RoFormerTokenizerFast"),Det.forEach(t),Gdo=r(tk," (RoFormer model)"),tk.forEach(t),Odo=i(S),oh=n(S,"LI",{});var iAe=s(oh);Xne=n(iAe,"STRONG",{});var Get=s(Xne);Vdo=r(Get,"speech_to_text"),Get.forEach(t),Xdo=r(iAe," \u2014 "),GB=n(iAe,"A",{href:!0});var Oet=s(GB);zdo=r(Oet,"Speech2TextTokenizer"),Oet.forEach(t),Wdo=r(iAe," (Speech2Text model)"),iAe.forEach(t),Qdo=i(S),rh=n(S,"LI",{});var dAe=s(rh);zne=n(dAe,"STRONG",{});var Vet=s(zne);Hdo=r(Vet,"speech_to_text_2"),Vet.forEach(t),Udo=r(dAe," \u2014 "),OB=n(dAe,"A",{href:!0});var Xet=s(OB);Jdo=r(Xet,"Speech2Text2Tokenizer"),Xet.forEach(t),Ydo=r(dAe," (Speech2Text2 model)"),dAe.forEach(t),Kdo=i(S),As=n(S,"LI",{});var ak=s(As);Wne=n(ak,"STRONG",{});var zet=s(Wne);Zdo=r(zet,"splinter"),zet.forEach(t),eco=r(ak," \u2014 "),VB=n(ak,"A",{href:!0});var Wet=s(VB);oco=r(Wet,"SplinterTokenizer"),Wet.forEach(t),rco=r(ak," or "),XB=n(ak,"A",{href:!0});var Qet=s(XB);tco=r(Qet,"SplinterTokenizerFast"),Qet.forEach(t),aco=r(ak," (Splinter model)"),ak.forEach(t),nco=i(S),Ls=n(S,"LI",{});var nk=s(Ls);Qne=n(nk,"STRONG",{});var Het=s(Qne);sco=r(Het,"squeezebert"),Het.forEach(t),lco=r(nk," \u2014 "),zB=n(nk,"A",{href:!0});var Uet=s(zB);ico=r(Uet,"SqueezeBertTokenizer"),Uet.forEach(t),dco=r(nk," or "),WB=n(nk,"A",{href:!0});var Jet=s(WB);cco=r(Jet,"SqueezeBertTokenizerFast"),Jet.forEach(t),fco=r(nk," (SqueezeBERT model)"),nk.forEach(t),mco=i(S),ys=n(S,"LI",{});var sk=s(ys);Hne=n(sk,"STRONG",{});var Yet=s(Hne);gco=r(Yet,"t5"),Yet.forEach(t),hco=r(sk," \u2014 "),QB=n(sk,"A",{href:!0});var Ket=s(QB);pco=r(Ket,"T5Tokenizer"),Ket.forEach(t),_co=r(sk," or "),HB=n(sk,"A",{href:!0});var Zet=s(HB);uco=r(Zet,"T5TokenizerFast"),Zet.forEach(t),bco=r(sk," (T5 model)"),sk.forEach(t),vco=i(S),th=n(S,"LI",{});var cAe=s(th);Une=n(cAe,"STRONG",{});var eot=s(Une);Fco=r(eot,"tapas"),eot.forEach(t),Tco=r(cAe," \u2014 "),UB=n(cAe,"A",{href:!0});var oot=s(UB);Mco=r(oot,"TapasTokenizer"),oot.forEach(t),Eco=r(cAe," (TAPAS model)"),cAe.forEach(t),Cco=i(S),ah=n(S,"LI",{});var fAe=s(ah);Jne=n(fAe,"STRONG",{});var rot=s(Jne);wco=r(rot,"tapex"),rot.forEach(t),Aco=r(fAe," \u2014 "),JB=n(fAe,"A",{href:!0});var tot=s(JB);Lco=r(tot,"TapexTokenizer"),tot.forEach(t),yco=r(fAe," (TAPEX model)"),fAe.forEach(t),xco=i(S),nh=n(S,"LI",{});var mAe=s(nh);Yne=n(mAe,"STRONG",{});var aot=s(Yne);$co=r(aot,"transfo-xl"),aot.forEach(t),kco=r(mAe," \u2014 "),YB=n(mAe,"A",{href:!0});var not=s(YB);Sco=r(not,"TransfoXLTokenizer"),not.forEach(t),Rco=r(mAe," (Transformer-XL model)"),mAe.forEach(t),Pco=i(S),xs=n(S,"LI",{});var lk=s(xs);Kne=n(lk,"STRONG",{});var sot=s(Kne);Bco=r(sot,"visual_bert"),sot.forEach(t),Ico=r(lk," \u2014 "),KB=n(lk,"A",{href:!0});var lot=s(KB);Nco=r(lot,"BertTokenizer"),lot.forEach(t),qco=r(lk," or "),ZB=n(lk,"A",{href:!0});var iot=s(ZB);jco=r(iot,"BertTokenizerFast"),iot.forEach(t),Dco=r(lk," (VisualBERT model)"),lk.forEach(t),Gco=i(S),sh=n(S,"LI",{});var gAe=s(sh);Zne=n(gAe,"STRONG",{});var dot=s(Zne);Oco=r(dot,"wav2vec2"),dot.forEach(t),Vco=r(gAe," \u2014 "),eI=n(gAe,"A",{href:!0});var cot=s(eI);Xco=r(cot,"Wav2Vec2CTCTokenizer"),cot.forEach(t),zco=r(gAe," (Wav2Vec2 model)"),gAe.forEach(t),Wco=i(S),lh=n(S,"LI",{});var hAe=s(lh);ese=n(hAe,"STRONG",{});var fot=s(ese);Qco=r(fot,"wav2vec2-conformer"),fot.forEach(t),Hco=r(hAe," \u2014 "),oI=n(hAe,"A",{href:!0});var mot=s(oI);Uco=r(mot,"Wav2Vec2CTCTokenizer"),mot.forEach(t),Jco=r(hAe," (Wav2Vec2-Conformer model)"),hAe.forEach(t),Yco=i(S),ih=n(S,"LI",{});var pAe=s(ih);ose=n(pAe,"STRONG",{});var got=s(ose);Kco=r(got,"wav2vec2_phoneme"),got.forEach(t),Zco=r(pAe," \u2014 "),rI=n(pAe,"A",{href:!0});var hot=s(rI);efo=r(hot,"Wav2Vec2PhonemeCTCTokenizer"),hot.forEach(t),ofo=r(pAe," (Wav2Vec2Phoneme model)"),pAe.forEach(t),rfo=i(S),$s=n(S,"LI",{});var ik=s($s);rse=n(ik,"STRONG",{});var pot=s(rse);tfo=r(pot,"xglm"),pot.forEach(t),afo=r(ik," \u2014 "),tI=n(ik,"A",{href:!0});var _ot=s(tI);nfo=r(_ot,"XGLMTokenizer"),_ot.forEach(t),sfo=r(ik," or "),aI=n(ik,"A",{href:!0});var uot=s(aI);lfo=r(uot,"XGLMTokenizerFast"),uot.forEach(t),ifo=r(ik," (XGLM model)"),ik.forEach(t),dfo=i(S),dh=n(S,"LI",{});var _Ae=s(dh);tse=n(_Ae,"STRONG",{});var bot=s(tse);cfo=r(bot,"xlm"),bot.forEach(t),ffo=r(_Ae," \u2014 "),nI=n(_Ae,"A",{href:!0});var vot=s(nI);mfo=r(vot,"XLMTokenizer"),vot.forEach(t),gfo=r(_Ae," (XLM model)"),_Ae.forEach(t),hfo=i(S),ch=n(S,"LI",{});var uAe=s(ch);ase=n(uAe,"STRONG",{});var Fot=s(ase);pfo=r(Fot,"xlm-prophetnet"),Fot.forEach(t),_fo=r(uAe," \u2014 "),sI=n(uAe,"A",{href:!0});var Tot=s(sI);ufo=r(Tot,"XLMProphetNetTokenizer"),Tot.forEach(t),bfo=r(uAe," (XLM-ProphetNet model)"),uAe.forEach(t),vfo=i(S),ks=n(S,"LI",{});var dk=s(ks);nse=n(dk,"STRONG",{});var Mot=s(nse);Ffo=r(Mot,"xlm-roberta"),Mot.forEach(t),Tfo=r(dk," \u2014 "),lI=n(dk,"A",{href:!0});var Eot=s(lI);Mfo=r(Eot,"XLMRobertaTokenizer"),Eot.forEach(t),Efo=r(dk," or "),iI=n(dk,"A",{href:!0});var Cot=s(iI);Cfo=r(Cot,"XLMRobertaTokenizerFast"),Cot.forEach(t),wfo=r(dk," (XLM-RoBERTa model)"),dk.forEach(t),Afo=i(S),Ss=n(S,"LI",{});var ck=s(Ss);sse=n(ck,"STRONG",{});var wot=s(sse);Lfo=r(wot,"xlm-roberta-xl"),wot.forEach(t),yfo=r(ck," \u2014 "),dI=n(ck,"A",{href:!0});var Aot=s(dI);xfo=r(Aot,"RobertaTokenizer"),Aot.forEach(t),$fo=r(ck," or "),cI=n(ck,"A",{href:!0});var Lot=s(cI);kfo=r(Lot,"RobertaTokenizerFast"),Lot.forEach(t),Sfo=r(ck," (XLM-RoBERTa-XL model)"),ck.forEach(t),Rfo=i(S),Rs=n(S,"LI",{});var fk=s(Rs);lse=n(fk,"STRONG",{});var yot=s(lse);Pfo=r(yot,"xlnet"),yot.forEach(t),Bfo=r(fk," \u2014 "),fI=n(fk,"A",{href:!0});var xot=s(fI);Ifo=r(xot,"XLNetTokenizer"),xot.forEach(t),Nfo=r(fk," or "),mI=n(fk,"A",{href:!0});var $ot=s(mI);qfo=r($ot,"XLNetTokenizerFast"),$ot.forEach(t),jfo=r(fk," (XLNet model)"),fk.forEach(t),Dfo=i(S),Ps=n(S,"LI",{});var mk=s(Ps);ise=n(mk,"STRONG",{});var kot=s(ise);Gfo=r(kot,"yoso"),kot.forEach(t),Ofo=r(mk," \u2014 "),gI=n(mk,"A",{href:!0});var Sot=s(gI);Vfo=r(Sot,"AlbertTokenizer"),Sot.forEach(t),Xfo=r(mk," or "),hI=n(mk,"A",{href:!0});var Rot=s(hI);zfo=r(Rot,"AlbertTokenizerFast"),Rot.forEach(t),Wfo=r(mk," (YOSO model)"),mk.forEach(t),S.forEach(t),Qfo=i(Ds),T(fh.$$.fragment,Ds),Ds.forEach(t),Hfo=i(js),mh=n(js,"DIV",{class:!0});var JGe=s(mh);T(cL.$$.fragment,JGe),Ufo=i(JGe),dse=n(JGe,"P",{});var Pot=s(dse);Jfo=r(Pot,"Register a new tokenizer in this mapping."),Pot.forEach(t),JGe.forEach(t),js.forEach(t),Yje=i(f),Ci=n(f,"H2",{class:!0});var YGe=s(Ci);gh=n(YGe,"A",{id:!0,class:!0,href:!0});var Bot=s(gh);cse=n(Bot,"SPAN",{});var Iot=s(cse);T(fL.$$.fragment,Iot),Iot.forEach(t),Bot.forEach(t),Yfo=i(YGe),fse=n(YGe,"SPAN",{});var Not=s(fse);Kfo=r(Not,"AutoFeatureExtractor"),Not.forEach(t),YGe.forEach(t),Kje=i(f),Ao=n(f,"DIV",{class:!0});var Gs=s(Ao);T(mL.$$.fragment,Gs),Zfo=i(Gs),gL=n(Gs,"P",{});var KGe=s(gL);emo=r(KGe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),pI=n(KGe,"A",{href:!0});var qot=s(pI);omo=r(qot,"AutoFeatureExtractor.from_pretrained()"),qot.forEach(t),rmo=r(KGe," class method."),KGe.forEach(t),tmo=i(Gs),hL=n(Gs,"P",{});var ZGe=s(hL);amo=r(ZGe,"This class cannot be instantiated directly using "),mse=n(ZGe,"CODE",{});var jot=s(mse);nmo=r(jot,"__init__()"),jot.forEach(t),smo=r(ZGe," (throws an error)."),ZGe.forEach(t),lmo=i(Gs),He=n(Gs,"DIV",{class:!0});var Zt=s(He);T(pL.$$.fragment,Zt),imo=i(Zt),gse=n(Zt,"P",{});var Dot=s(gse);dmo=r(Dot,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Dot.forEach(t),cmo=i(Zt),La=n(Zt,"P",{});var ew=s(La);fmo=r(ew,"The feature extractor class to instantiate is selected based on the "),hse=n(ew,"CODE",{});var Got=s(hse);mmo=r(Got,"model_type"),Got.forEach(t),gmo=r(ew,` property of the config object
(either passed as an argument or loaded from `),pse=n(ew,"CODE",{});var Oot=s(pse);hmo=r(Oot,"pretrained_model_name_or_path"),Oot.forEach(t),pmo=r(ew,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),_se=n(ew,"CODE",{});var Vot=s(_se);_mo=r(Vot,"pretrained_model_name_or_path"),Vot.forEach(t),umo=r(ew,":"),ew.forEach(t),bmo=i(Zt),Y=n(Zt,"UL",{});var K=s(Y);hh=n(K,"LI",{});var bAe=s(hh);use=n(bAe,"STRONG",{});var Xot=s(use);vmo=r(Xot,"beit"),Xot.forEach(t),Fmo=r(bAe," \u2014 "),_I=n(bAe,"A",{href:!0});var zot=s(_I);Tmo=r(zot,"BeitFeatureExtractor"),zot.forEach(t),Mmo=r(bAe," (BEiT model)"),bAe.forEach(t),Emo=i(K),ph=n(K,"LI",{});var vAe=s(ph);bse=n(vAe,"STRONG",{});var Wot=s(bse);Cmo=r(Wot,"clip"),Wot.forEach(t),wmo=r(vAe," \u2014 "),uI=n(vAe,"A",{href:!0});var Qot=s(uI);Amo=r(Qot,"CLIPFeatureExtractor"),Qot.forEach(t),Lmo=r(vAe," (CLIP model)"),vAe.forEach(t),ymo=i(K),_h=n(K,"LI",{});var FAe=s(_h);vse=n(FAe,"STRONG",{});var Hot=s(vse);xmo=r(Hot,"convnext"),Hot.forEach(t),$mo=r(FAe," \u2014 "),bI=n(FAe,"A",{href:!0});var Uot=s(bI);kmo=r(Uot,"ConvNextFeatureExtractor"),Uot.forEach(t),Smo=r(FAe," (ConvNeXT model)"),FAe.forEach(t),Rmo=i(K),uh=n(K,"LI",{});var TAe=s(uh);Fse=n(TAe,"STRONG",{});var Jot=s(Fse);Pmo=r(Jot,"cvt"),Jot.forEach(t),Bmo=r(TAe," \u2014 "),vI=n(TAe,"A",{href:!0});var Yot=s(vI);Imo=r(Yot,"ConvNextFeatureExtractor"),Yot.forEach(t),Nmo=r(TAe," (CvT model)"),TAe.forEach(t),qmo=i(K),bh=n(K,"LI",{});var MAe=s(bh);Tse=n(MAe,"STRONG",{});var Kot=s(Tse);jmo=r(Kot,"data2vec-audio"),Kot.forEach(t),Dmo=r(MAe," \u2014 "),FI=n(MAe,"A",{href:!0});var Zot=s(FI);Gmo=r(Zot,"Wav2Vec2FeatureExtractor"),Zot.forEach(t),Omo=r(MAe," (Data2VecAudio model)"),MAe.forEach(t),Vmo=i(K),vh=n(K,"LI",{});var EAe=s(vh);Mse=n(EAe,"STRONG",{});var ert=s(Mse);Xmo=r(ert,"data2vec-vision"),ert.forEach(t),zmo=r(EAe," \u2014 "),TI=n(EAe,"A",{href:!0});var ort=s(TI);Wmo=r(ort,"BeitFeatureExtractor"),ort.forEach(t),Qmo=r(EAe," (Data2VecVision model)"),EAe.forEach(t),Hmo=i(K),Fh=n(K,"LI",{});var CAe=s(Fh);Ese=n(CAe,"STRONG",{});var rrt=s(Ese);Umo=r(rrt,"deit"),rrt.forEach(t),Jmo=r(CAe," \u2014 "),MI=n(CAe,"A",{href:!0});var trt=s(MI);Ymo=r(trt,"DeiTFeatureExtractor"),trt.forEach(t),Kmo=r(CAe," (DeiT model)"),CAe.forEach(t),Zmo=i(K),Th=n(K,"LI",{});var wAe=s(Th);Cse=n(wAe,"STRONG",{});var art=s(Cse);ego=r(art,"detr"),art.forEach(t),ogo=r(wAe," \u2014 "),EI=n(wAe,"A",{href:!0});var nrt=s(EI);rgo=r(nrt,"DetrFeatureExtractor"),nrt.forEach(t),tgo=r(wAe," (DETR model)"),wAe.forEach(t),ago=i(K),Mh=n(K,"LI",{});var AAe=s(Mh);wse=n(AAe,"STRONG",{});var srt=s(wse);ngo=r(srt,"dpt"),srt.forEach(t),sgo=r(AAe," \u2014 "),CI=n(AAe,"A",{href:!0});var lrt=s(CI);lgo=r(lrt,"DPTFeatureExtractor"),lrt.forEach(t),igo=r(AAe," (DPT model)"),AAe.forEach(t),dgo=i(K),Eh=n(K,"LI",{});var LAe=s(Eh);Ase=n(LAe,"STRONG",{});var irt=s(Ase);cgo=r(irt,"flava"),irt.forEach(t),fgo=r(LAe," \u2014 "),wI=n(LAe,"A",{href:!0});var drt=s(wI);mgo=r(drt,"FlavaFeatureExtractor"),drt.forEach(t),ggo=r(LAe," (FLAVA model)"),LAe.forEach(t),hgo=i(K),Ch=n(K,"LI",{});var yAe=s(Ch);Lse=n(yAe,"STRONG",{});var crt=s(Lse);pgo=r(crt,"glpn"),crt.forEach(t),_go=r(yAe," \u2014 "),AI=n(yAe,"A",{href:!0});var frt=s(AI);ugo=r(frt,"GLPNFeatureExtractor"),frt.forEach(t),bgo=r(yAe," (GLPN model)"),yAe.forEach(t),vgo=i(K),wh=n(K,"LI",{});var xAe=s(wh);yse=n(xAe,"STRONG",{});var mrt=s(yse);Fgo=r(mrt,"greaselm"),mrt.forEach(t),Tgo=r(xAe," \u2014 "),LI=n(xAe,"A",{href:!0});var grt=s(LI);Mgo=r(grt,"GreaseLMFeatureExtractor"),grt.forEach(t),Ego=r(xAe," (GreaseLM model)"),xAe.forEach(t),Cgo=i(K),Ah=n(K,"LI",{});var $Ae=s(Ah);xse=n($Ae,"STRONG",{});var hrt=s(xse);wgo=r(hrt,"hubert"),hrt.forEach(t),Ago=r($Ae," \u2014 "),yI=n($Ae,"A",{href:!0});var prt=s(yI);Lgo=r(prt,"Wav2Vec2FeatureExtractor"),prt.forEach(t),ygo=r($Ae," (Hubert model)"),$Ae.forEach(t),xgo=i(K),Lh=n(K,"LI",{});var kAe=s(Lh);$se=n(kAe,"STRONG",{});var _rt=s($se);$go=r(_rt,"imagegpt"),_rt.forEach(t),kgo=r(kAe," \u2014 "),xI=n(kAe,"A",{href:!0});var urt=s(xI);Sgo=r(urt,"ImageGPTFeatureExtractor"),urt.forEach(t),Rgo=r(kAe," (ImageGPT model)"),kAe.forEach(t),Pgo=i(K),yh=n(K,"LI",{});var SAe=s(yh);kse=n(SAe,"STRONG",{});var brt=s(kse);Bgo=r(brt,"layoutlmv2"),brt.forEach(t),Igo=r(SAe," \u2014 "),$I=n(SAe,"A",{href:!0});var vrt=s($I);Ngo=r(vrt,"LayoutLMv2FeatureExtractor"),vrt.forEach(t),qgo=r(SAe," (LayoutLMv2 model)"),SAe.forEach(t),jgo=i(K),xh=n(K,"LI",{});var RAe=s(xh);Sse=n(RAe,"STRONG",{});var Frt=s(Sse);Dgo=r(Frt,"layoutlmv3"),Frt.forEach(t),Ggo=r(RAe," \u2014 "),kI=n(RAe,"A",{href:!0});var Trt=s(kI);Ogo=r(Trt,"LayoutLMv3FeatureExtractor"),Trt.forEach(t),Vgo=r(RAe," (LayoutLMv3 model)"),RAe.forEach(t),Xgo=i(K),$h=n(K,"LI",{});var PAe=s($h);Rse=n(PAe,"STRONG",{});var Mrt=s(Rse);zgo=r(Mrt,"levit"),Mrt.forEach(t),Wgo=r(PAe," \u2014 "),SI=n(PAe,"A",{href:!0});var Ert=s(SI);Qgo=r(Ert,"LevitFeatureExtractor"),Ert.forEach(t),Hgo=r(PAe," (LeViT model)"),PAe.forEach(t),Ugo=i(K),kh=n(K,"LI",{});var BAe=s(kh);Pse=n(BAe,"STRONG",{});var Crt=s(Pse);Jgo=r(Crt,"maskformer"),Crt.forEach(t),Ygo=r(BAe," \u2014 "),RI=n(BAe,"A",{href:!0});var wrt=s(RI);Kgo=r(wrt,"MaskFormerFeatureExtractor"),wrt.forEach(t),Zgo=r(BAe," (MaskFormer model)"),BAe.forEach(t),eho=i(K),Sh=n(K,"LI",{});var IAe=s(Sh);Bse=n(IAe,"STRONG",{});var Art=s(Bse);oho=r(Art,"mctct"),Art.forEach(t),rho=r(IAe," \u2014 "),PI=n(IAe,"A",{href:!0});var Lrt=s(PI);tho=r(Lrt,"MCTCTFeatureExtractor"),Lrt.forEach(t),aho=r(IAe," (M-CTC-T model)"),IAe.forEach(t),nho=i(K),Rh=n(K,"LI",{});var NAe=s(Rh);Ise=n(NAe,"STRONG",{});var yrt=s(Ise);sho=r(yrt,"perceiver"),yrt.forEach(t),lho=r(NAe," \u2014 "),BI=n(NAe,"A",{href:!0});var xrt=s(BI);iho=r(xrt,"PerceiverFeatureExtractor"),xrt.forEach(t),dho=r(NAe," (Perceiver model)"),NAe.forEach(t),cho=i(K),Ph=n(K,"LI",{});var qAe=s(Ph);Nse=n(qAe,"STRONG",{});var $rt=s(Nse);fho=r($rt,"poolformer"),$rt.forEach(t),mho=r(qAe," \u2014 "),II=n(qAe,"A",{href:!0});var krt=s(II);gho=r(krt,"PoolFormerFeatureExtractor"),krt.forEach(t),hho=r(qAe," (PoolFormer model)"),qAe.forEach(t),pho=i(K),Bh=n(K,"LI",{});var jAe=s(Bh);qse=n(jAe,"STRONG",{});var Srt=s(qse);_ho=r(Srt,"regnet"),Srt.forEach(t),uho=r(jAe," \u2014 "),NI=n(jAe,"A",{href:!0});var Rrt=s(NI);bho=r(Rrt,"ConvNextFeatureExtractor"),Rrt.forEach(t),vho=r(jAe," (RegNet model)"),jAe.forEach(t),Fho=i(K),Ih=n(K,"LI",{});var DAe=s(Ih);jse=n(DAe,"STRONG",{});var Prt=s(jse);Tho=r(Prt,"resnet"),Prt.forEach(t),Mho=r(DAe," \u2014 "),qI=n(DAe,"A",{href:!0});var Brt=s(qI);Eho=r(Brt,"ConvNextFeatureExtractor"),Brt.forEach(t),Cho=r(DAe," (ResNet model)"),DAe.forEach(t),who=i(K),Nh=n(K,"LI",{});var GAe=s(Nh);Dse=n(GAe,"STRONG",{});var Irt=s(Dse);Aho=r(Irt,"segformer"),Irt.forEach(t),Lho=r(GAe," \u2014 "),jI=n(GAe,"A",{href:!0});var Nrt=s(jI);yho=r(Nrt,"SegformerFeatureExtractor"),Nrt.forEach(t),xho=r(GAe," (SegFormer model)"),GAe.forEach(t),$ho=i(K),qh=n(K,"LI",{});var OAe=s(qh);Gse=n(OAe,"STRONG",{});var qrt=s(Gse);kho=r(qrt,"speech_to_text"),qrt.forEach(t),Sho=r(OAe," \u2014 "),DI=n(OAe,"A",{href:!0});var jrt=s(DI);Rho=r(jrt,"Speech2TextFeatureExtractor"),jrt.forEach(t),Pho=r(OAe," (Speech2Text model)"),OAe.forEach(t),Bho=i(K),jh=n(K,"LI",{});var VAe=s(jh);Ose=n(VAe,"STRONG",{});var Drt=s(Ose);Iho=r(Drt,"swin"),Drt.forEach(t),Nho=r(VAe," \u2014 "),GI=n(VAe,"A",{href:!0});var Grt=s(GI);qho=r(Grt,"ViTFeatureExtractor"),Grt.forEach(t),jho=r(VAe," (Swin Transformer model)"),VAe.forEach(t),Dho=i(K),Dh=n(K,"LI",{});var XAe=s(Dh);Vse=n(XAe,"STRONG",{});var Ort=s(Vse);Gho=r(Ort,"van"),Ort.forEach(t),Oho=r(XAe," \u2014 "),OI=n(XAe,"A",{href:!0});var Vrt=s(OI);Vho=r(Vrt,"ConvNextFeatureExtractor"),Vrt.forEach(t),Xho=r(XAe," (VAN model)"),XAe.forEach(t),zho=i(K),Gh=n(K,"LI",{});var zAe=s(Gh);Xse=n(zAe,"STRONG",{});var Xrt=s(Xse);Who=r(Xrt,"vit"),Xrt.forEach(t),Qho=r(zAe," \u2014 "),VI=n(zAe,"A",{href:!0});var zrt=s(VI);Hho=r(zrt,"ViTFeatureExtractor"),zrt.forEach(t),Uho=r(zAe," (ViT model)"),zAe.forEach(t),Jho=i(K),Oh=n(K,"LI",{});var WAe=s(Oh);zse=n(WAe,"STRONG",{});var Wrt=s(zse);Yho=r(Wrt,"vit_mae"),Wrt.forEach(t),Kho=r(WAe," \u2014 "),XI=n(WAe,"A",{href:!0});var Qrt=s(XI);Zho=r(Qrt,"ViTFeatureExtractor"),Qrt.forEach(t),epo=r(WAe," (ViTMAE model)"),WAe.forEach(t),opo=i(K),Vh=n(K,"LI",{});var QAe=s(Vh);Wse=n(QAe,"STRONG",{});var Hrt=s(Wse);rpo=r(Hrt,"wav2vec2"),Hrt.forEach(t),tpo=r(QAe," \u2014 "),zI=n(QAe,"A",{href:!0});var Urt=s(zI);apo=r(Urt,"Wav2Vec2FeatureExtractor"),Urt.forEach(t),npo=r(QAe," (Wav2Vec2 model)"),QAe.forEach(t),spo=i(K),Xh=n(K,"LI",{});var HAe=s(Xh);Qse=n(HAe,"STRONG",{});var Jrt=s(Qse);lpo=r(Jrt,"wav2vec2-conformer"),Jrt.forEach(t),ipo=r(HAe," \u2014 "),WI=n(HAe,"A",{href:!0});var Yrt=s(WI);dpo=r(Yrt,"Wav2Vec2FeatureExtractor"),Yrt.forEach(t),cpo=r(HAe," (Wav2Vec2-Conformer model)"),HAe.forEach(t),fpo=i(K),zh=n(K,"LI",{});var UAe=s(zh);Hse=n(UAe,"STRONG",{});var Krt=s(Hse);mpo=r(Krt,"yolos"),Krt.forEach(t),gpo=r(UAe," \u2014 "),QI=n(UAe,"A",{href:!0});var Zrt=s(QI);hpo=r(Zrt,"YolosFeatureExtractor"),Zrt.forEach(t),ppo=r(UAe," (YOLOS model)"),UAe.forEach(t),K.forEach(t),_po=i(Zt),T(Wh.$$.fragment,Zt),upo=i(Zt),T(Qh.$$.fragment,Zt),Zt.forEach(t),bpo=i(Gs),Hh=n(Gs,"DIV",{class:!0});var eOe=s(Hh);T(_L.$$.fragment,eOe),vpo=i(eOe),Use=n(eOe,"P",{});var ett=s(Use);Fpo=r(ett,"Register a new feature extractor for this class."),ett.forEach(t),eOe.forEach(t),Gs.forEach(t),Zje=i(f),wi=n(f,"H2",{class:!0});var oOe=s(wi);Uh=n(oOe,"A",{id:!0,class:!0,href:!0});var ott=s(Uh);Jse=n(ott,"SPAN",{});var rtt=s(Jse);T(uL.$$.fragment,rtt),rtt.forEach(t),ott.forEach(t),Tpo=i(oOe),Yse=n(oOe,"SPAN",{});var ttt=s(Yse);Mpo=r(ttt,"AutoProcessor"),ttt.forEach(t),oOe.forEach(t),eDe=i(f),Lo=n(f,"DIV",{class:!0});var Os=s(Lo);T(bL.$$.fragment,Os),Epo=i(Os),vL=n(Os,"P",{});var rOe=s(vL);Cpo=r(rOe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),HI=n(rOe,"A",{href:!0});var att=s(HI);wpo=r(att,"AutoProcessor.from_pretrained()"),att.forEach(t),Apo=r(rOe," class method."),rOe.forEach(t),Lpo=i(Os),FL=n(Os,"P",{});var tOe=s(FL);ypo=r(tOe,"This class cannot be instantiated directly using "),Kse=n(tOe,"CODE",{});var ntt=s(Kse);xpo=r(ntt,"__init__()"),ntt.forEach(t),$po=r(tOe," (throws an error)."),tOe.forEach(t),kpo=i(Os),Ue=n(Os,"DIV",{class:!0});var ea=s(Ue);T(TL.$$.fragment,ea),Spo=i(ea),Zse=n(ea,"P",{});var stt=s(Zse);Rpo=r(stt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),stt.forEach(t),Ppo=i(ea),Ai=n(ea,"P",{});var mee=s(Ai);Bpo=r(mee,"The processor class to instantiate is selected based on the "),ele=n(mee,"CODE",{});var ltt=s(ele);Ipo=r(ltt,"model_type"),ltt.forEach(t),Npo=r(mee,` property of the config object (either
passed as an argument or loaded from `),ole=n(mee,"CODE",{});var itt=s(ole);qpo=r(itt,"pretrained_model_name_or_path"),itt.forEach(t),jpo=r(mee," if possible):"),mee.forEach(t),Dpo=i(ea),he=n(ea,"UL",{});var _e=s(he);Jh=n(_e,"LI",{});var JAe=s(Jh);rle=n(JAe,"STRONG",{});var dtt=s(rle);Gpo=r(dtt,"clip"),dtt.forEach(t),Opo=r(JAe," \u2014 "),UI=n(JAe,"A",{href:!0});var ctt=s(UI);Vpo=r(ctt,"CLIPProcessor"),ctt.forEach(t),Xpo=r(JAe," (CLIP model)"),JAe.forEach(t),zpo=i(_e),Yh=n(_e,"LI",{});var YAe=s(Yh);tle=n(YAe,"STRONG",{});var ftt=s(tle);Wpo=r(ftt,"flava"),ftt.forEach(t),Qpo=r(YAe," \u2014 "),ale=n(YAe,"CODE",{});var mtt=s(ale);Hpo=r(mtt,"FLAVAProcessor"),mtt.forEach(t),Upo=r(YAe," (FLAVA model)"),YAe.forEach(t),Jpo=i(_e),Kh=n(_e,"LI",{});var KAe=s(Kh);nle=n(KAe,"STRONG",{});var gtt=s(nle);Ypo=r(gtt,"greaselm"),gtt.forEach(t),Kpo=r(KAe," \u2014 "),JI=n(KAe,"A",{href:!0});var htt=s(JI);Zpo=r(htt,"GreaseLMProcessor"),htt.forEach(t),e_o=r(KAe," (GreaseLM model)"),KAe.forEach(t),o_o=i(_e),Zh=n(_e,"LI",{});var ZAe=s(Zh);sle=n(ZAe,"STRONG",{});var ptt=s(sle);r_o=r(ptt,"layoutlmv2"),ptt.forEach(t),t_o=r(ZAe," \u2014 "),YI=n(ZAe,"A",{href:!0});var _tt=s(YI);a_o=r(_tt,"LayoutLMv2Processor"),_tt.forEach(t),n_o=r(ZAe," (LayoutLMv2 model)"),ZAe.forEach(t),s_o=i(_e),ep=n(_e,"LI",{});var eLe=s(ep);lle=n(eLe,"STRONG",{});var utt=s(lle);l_o=r(utt,"layoutlmv3"),utt.forEach(t),i_o=r(eLe," \u2014 "),KI=n(eLe,"A",{href:!0});var btt=s(KI);d_o=r(btt,"LayoutLMv3Processor"),btt.forEach(t),c_o=r(eLe," (LayoutLMv3 model)"),eLe.forEach(t),f_o=i(_e),op=n(_e,"LI",{});var oLe=s(op);ile=n(oLe,"STRONG",{});var vtt=s(ile);m_o=r(vtt,"layoutxlm"),vtt.forEach(t),g_o=r(oLe," \u2014 "),ZI=n(oLe,"A",{href:!0});var Ftt=s(ZI);h_o=r(Ftt,"LayoutXLMProcessor"),Ftt.forEach(t),p_o=r(oLe," (LayoutXLM model)"),oLe.forEach(t),__o=i(_e),rp=n(_e,"LI",{});var rLe=s(rp);dle=n(rLe,"STRONG",{});var Ttt=s(dle);u_o=r(Ttt,"sew"),Ttt.forEach(t),b_o=r(rLe," \u2014 "),eN=n(rLe,"A",{href:!0});var Mtt=s(eN);v_o=r(Mtt,"Wav2Vec2Processor"),Mtt.forEach(t),F_o=r(rLe," (SEW model)"),rLe.forEach(t),T_o=i(_e),tp=n(_e,"LI",{});var tLe=s(tp);cle=n(tLe,"STRONG",{});var Ett=s(cle);M_o=r(Ett,"sew-d"),Ett.forEach(t),E_o=r(tLe," \u2014 "),oN=n(tLe,"A",{href:!0});var Ctt=s(oN);C_o=r(Ctt,"Wav2Vec2Processor"),Ctt.forEach(t),w_o=r(tLe," (SEW-D model)"),tLe.forEach(t),A_o=i(_e),ap=n(_e,"LI",{});var aLe=s(ap);fle=n(aLe,"STRONG",{});var wtt=s(fle);L_o=r(wtt,"speech_to_text"),wtt.forEach(t),y_o=r(aLe," \u2014 "),rN=n(aLe,"A",{href:!0});var Att=s(rN);x_o=r(Att,"Speech2TextProcessor"),Att.forEach(t),$_o=r(aLe," (Speech2Text model)"),aLe.forEach(t),k_o=i(_e),np=n(_e,"LI",{});var nLe=s(np);mle=n(nLe,"STRONG",{});var Ltt=s(mle);S_o=r(Ltt,"speech_to_text_2"),Ltt.forEach(t),R_o=r(nLe," \u2014 "),tN=n(nLe,"A",{href:!0});var ytt=s(tN);P_o=r(ytt,"Speech2Text2Processor"),ytt.forEach(t),B_o=r(nLe," (Speech2Text2 model)"),nLe.forEach(t),I_o=i(_e),sp=n(_e,"LI",{});var sLe=s(sp);gle=n(sLe,"STRONG",{});var xtt=s(gle);N_o=r(xtt,"trocr"),xtt.forEach(t),q_o=r(sLe," \u2014 "),aN=n(sLe,"A",{href:!0});var $tt=s(aN);j_o=r($tt,"TrOCRProcessor"),$tt.forEach(t),D_o=r(sLe," (TrOCR model)"),sLe.forEach(t),G_o=i(_e),lp=n(_e,"LI",{});var lLe=s(lp);hle=n(lLe,"STRONG",{});var ktt=s(hle);O_o=r(ktt,"unispeech"),ktt.forEach(t),V_o=r(lLe," \u2014 "),nN=n(lLe,"A",{href:!0});var Stt=s(nN);X_o=r(Stt,"Wav2Vec2Processor"),Stt.forEach(t),z_o=r(lLe," (UniSpeech model)"),lLe.forEach(t),W_o=i(_e),ip=n(_e,"LI",{});var iLe=s(ip);ple=n(iLe,"STRONG",{});var Rtt=s(ple);Q_o=r(Rtt,"unispeech-sat"),Rtt.forEach(t),H_o=r(iLe," \u2014 "),sN=n(iLe,"A",{href:!0});var Ptt=s(sN);U_o=r(Ptt,"Wav2Vec2Processor"),Ptt.forEach(t),J_o=r(iLe," (UniSpeechSat model)"),iLe.forEach(t),Y_o=i(_e),dp=n(_e,"LI",{});var dLe=s(dp);_le=n(dLe,"STRONG",{});var Btt=s(_le);K_o=r(Btt,"vilt"),Btt.forEach(t),Z_o=r(dLe," \u2014 "),lN=n(dLe,"A",{href:!0});var Itt=s(lN);euo=r(Itt,"ViltProcessor"),Itt.forEach(t),ouo=r(dLe," (ViLT model)"),dLe.forEach(t),ruo=i(_e),cp=n(_e,"LI",{});var cLe=s(cp);ule=n(cLe,"STRONG",{});var Ntt=s(ule);tuo=r(Ntt,"vision-text-dual-encoder"),Ntt.forEach(t),auo=r(cLe," \u2014 "),iN=n(cLe,"A",{href:!0});var qtt=s(iN);nuo=r(qtt,"VisionTextDualEncoderProcessor"),qtt.forEach(t),suo=r(cLe," (VisionTextDualEncoder model)"),cLe.forEach(t),luo=i(_e),fp=n(_e,"LI",{});var fLe=s(fp);ble=n(fLe,"STRONG",{});var jtt=s(ble);iuo=r(jtt,"wav2vec2"),jtt.forEach(t),duo=r(fLe," \u2014 "),dN=n(fLe,"A",{href:!0});var Dtt=s(dN);cuo=r(Dtt,"Wav2Vec2Processor"),Dtt.forEach(t),fuo=r(fLe," (Wav2Vec2 model)"),fLe.forEach(t),muo=i(_e),mp=n(_e,"LI",{});var mLe=s(mp);vle=n(mLe,"STRONG",{});var Gtt=s(vle);guo=r(Gtt,"wav2vec2-conformer"),Gtt.forEach(t),huo=r(mLe," \u2014 "),cN=n(mLe,"A",{href:!0});var Ott=s(cN);puo=r(Ott,"Wav2Vec2Processor"),Ott.forEach(t),_uo=r(mLe," (Wav2Vec2-Conformer model)"),mLe.forEach(t),uuo=i(_e),gp=n(_e,"LI",{});var gLe=s(gp);Fle=n(gLe,"STRONG",{});var Vtt=s(Fle);buo=r(Vtt,"wavlm"),Vtt.forEach(t),vuo=r(gLe," \u2014 "),fN=n(gLe,"A",{href:!0});var Xtt=s(fN);Fuo=r(Xtt,"Wav2Vec2Processor"),Xtt.forEach(t),Tuo=r(gLe," (WavLM model)"),gLe.forEach(t),_e.forEach(t),Muo=i(ea),T(hp.$$.fragment,ea),Euo=i(ea),T(pp.$$.fragment,ea),ea.forEach(t),Cuo=i(Os),_p=n(Os,"DIV",{class:!0});var aOe=s(_p);T(ML.$$.fragment,aOe),wuo=i(aOe),Tle=n(aOe,"P",{});var ztt=s(Tle);Auo=r(ztt,"Register a new processor for this class."),ztt.forEach(t),aOe.forEach(t),Os.forEach(t),oDe=i(f),Li=n(f,"H2",{class:!0});var nOe=s(Li);up=n(nOe,"A",{id:!0,class:!0,href:!0});var Wtt=s(up);Mle=n(Wtt,"SPAN",{});var Qtt=s(Mle);T(EL.$$.fragment,Qtt),Qtt.forEach(t),Wtt.forEach(t),Luo=i(nOe),Ele=n(nOe,"SPAN",{});var Htt=s(Ele);yuo=r(Htt,"AutoModel"),Htt.forEach(t),nOe.forEach(t),rDe=i(f),yo=n(f,"DIV",{class:!0});var Vs=s(yo);T(CL.$$.fragment,Vs),xuo=i(Vs),yi=n(Vs,"P",{});var gee=s(yi);$uo=r(gee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mN=n(gee,"A",{href:!0});var Utt=s(mN);kuo=r(Utt,"from_pretrained()"),Utt.forEach(t),Suo=r(gee," class method or the "),gN=n(gee,"A",{href:!0});var Jtt=s(gN);Ruo=r(Jtt,"from_config()"),Jtt.forEach(t),Puo=r(gee,` class
method.`),gee.forEach(t),Buo=i(Vs),wL=n(Vs,"P",{});var sOe=s(wL);Iuo=r(sOe,"This class cannot be instantiated directly using "),Cle=n(sOe,"CODE",{});var Ytt=s(Cle);Nuo=r(Ytt,"__init__()"),Ytt.forEach(t),quo=r(sOe," (throws an error)."),sOe.forEach(t),juo=i(Vs),tt=n(Vs,"DIV",{class:!0});var ow=s(tt);T(AL.$$.fragment,ow),Duo=i(ow),wle=n(ow,"P",{});var Ktt=s(wle);Guo=r(Ktt,"Instantiates one of the base model classes of the library from a configuration."),Ktt.forEach(t),Ouo=i(ow),xi=n(ow,"P",{});var hee=s(xi);Vuo=r(hee,`Note:
Loading a model from its configuration file does `),Ale=n(hee,"STRONG",{});var Ztt=s(Ale);Xuo=r(Ztt,"not"),Ztt.forEach(t),zuo=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hN=n(hee,"A",{href:!0});var eat=s(hN);Wuo=r(eat,"from_pretrained()"),eat.forEach(t),Quo=r(hee," to load the model weights."),hee.forEach(t),Huo=i(ow),T(bp.$$.fragment,ow),ow.forEach(t),Uuo=i(Vs),Je=n(Vs,"DIV",{class:!0});var oa=s(Je);T(LL.$$.fragment,oa),Juo=i(oa),Lle=n(oa,"P",{});var oat=s(Lle);Yuo=r(oat,"Instantiate one of the base model classes of the library from a pretrained model."),oat.forEach(t),Kuo=i(oa),ya=n(oa,"P",{});var rw=s(ya);Zuo=r(rw,"The model class to instantiate is selected based on the "),yle=n(rw,"CODE",{});var rat=s(yle);e1o=r(rat,"model_type"),rat.forEach(t),o1o=r(rw,` property of the config object (either
passed as an argument or loaded from `),xle=n(rw,"CODE",{});var tat=s(xle);r1o=r(tat,"pretrained_model_name_or_path"),tat.forEach(t),t1o=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$le=n(rw,"CODE",{});var aat=s($le);a1o=r(aat,"pretrained_model_name_or_path"),aat.forEach(t),n1o=r(rw,":"),rw.forEach(t),s1o=i(oa),y=n(oa,"UL",{});var $=s(y);vp=n($,"LI",{});var hLe=s(vp);kle=n(hLe,"STRONG",{});var nat=s(kle);l1o=r(nat,"albert"),nat.forEach(t),i1o=r(hLe," \u2014 "),pN=n(hLe,"A",{href:!0});var sat=s(pN);d1o=r(sat,"AlbertModel"),sat.forEach(t),c1o=r(hLe," (ALBERT model)"),hLe.forEach(t),f1o=i($),Fp=n($,"LI",{});var pLe=s(Fp);Sle=n(pLe,"STRONG",{});var lat=s(Sle);m1o=r(lat,"bart"),lat.forEach(t),g1o=r(pLe," \u2014 "),_N=n(pLe,"A",{href:!0});var iat=s(_N);h1o=r(iat,"BartModel"),iat.forEach(t),p1o=r(pLe," (BART model)"),pLe.forEach(t),_1o=i($),Tp=n($,"LI",{});var _Le=s(Tp);Rle=n(_Le,"STRONG",{});var dat=s(Rle);u1o=r(dat,"beit"),dat.forEach(t),b1o=r(_Le," \u2014 "),uN=n(_Le,"A",{href:!0});var cat=s(uN);v1o=r(cat,"BeitModel"),cat.forEach(t),F1o=r(_Le," (BEiT model)"),_Le.forEach(t),T1o=i($),Mp=n($,"LI",{});var uLe=s(Mp);Ple=n(uLe,"STRONG",{});var fat=s(Ple);M1o=r(fat,"bert"),fat.forEach(t),E1o=r(uLe," \u2014 "),bN=n(uLe,"A",{href:!0});var mat=s(bN);C1o=r(mat,"BertModel"),mat.forEach(t),w1o=r(uLe," (BERT model)"),uLe.forEach(t),A1o=i($),Ep=n($,"LI",{});var bLe=s(Ep);Ble=n(bLe,"STRONG",{});var gat=s(Ble);L1o=r(gat,"bert-generation"),gat.forEach(t),y1o=r(bLe," \u2014 "),vN=n(bLe,"A",{href:!0});var hat=s(vN);x1o=r(hat,"BertGenerationEncoder"),hat.forEach(t),$1o=r(bLe," (Bert Generation model)"),bLe.forEach(t),k1o=i($),Cp=n($,"LI",{});var vLe=s(Cp);Ile=n(vLe,"STRONG",{});var pat=s(Ile);S1o=r(pat,"big_bird"),pat.forEach(t),R1o=r(vLe," \u2014 "),FN=n(vLe,"A",{href:!0});var _at=s(FN);P1o=r(_at,"BigBirdModel"),_at.forEach(t),B1o=r(vLe," (BigBird model)"),vLe.forEach(t),I1o=i($),wp=n($,"LI",{});var FLe=s(wp);Nle=n(FLe,"STRONG",{});var uat=s(Nle);N1o=r(uat,"bigbird_pegasus"),uat.forEach(t),q1o=r(FLe," \u2014 "),TN=n(FLe,"A",{href:!0});var bat=s(TN);j1o=r(bat,"BigBirdPegasusModel"),bat.forEach(t),D1o=r(FLe," (BigBird-Pegasus model)"),FLe.forEach(t),G1o=i($),Ap=n($,"LI",{});var TLe=s(Ap);qle=n(TLe,"STRONG",{});var vat=s(qle);O1o=r(vat,"blenderbot"),vat.forEach(t),V1o=r(TLe," \u2014 "),MN=n(TLe,"A",{href:!0});var Fat=s(MN);X1o=r(Fat,"BlenderbotModel"),Fat.forEach(t),z1o=r(TLe," (Blenderbot model)"),TLe.forEach(t),W1o=i($),Lp=n($,"LI",{});var MLe=s(Lp);jle=n(MLe,"STRONG",{});var Tat=s(jle);Q1o=r(Tat,"blenderbot-small"),Tat.forEach(t),H1o=r(MLe," \u2014 "),EN=n(MLe,"A",{href:!0});var Mat=s(EN);U1o=r(Mat,"BlenderbotSmallModel"),Mat.forEach(t),J1o=r(MLe," (BlenderbotSmall model)"),MLe.forEach(t),Y1o=i($),yp=n($,"LI",{});var ELe=s(yp);Dle=n(ELe,"STRONG",{});var Eat=s(Dle);K1o=r(Eat,"bloom"),Eat.forEach(t),Z1o=r(ELe," \u2014 "),CN=n(ELe,"A",{href:!0});var Cat=s(CN);ebo=r(Cat,"BloomModel"),Cat.forEach(t),obo=r(ELe," (BLOOM model)"),ELe.forEach(t),rbo=i($),xp=n($,"LI",{});var CLe=s(xp);Gle=n(CLe,"STRONG",{});var wat=s(Gle);tbo=r(wat,"camembert"),wat.forEach(t),abo=r(CLe," \u2014 "),wN=n(CLe,"A",{href:!0});var Aat=s(wN);nbo=r(Aat,"CamembertModel"),Aat.forEach(t),sbo=r(CLe," (CamemBERT model)"),CLe.forEach(t),lbo=i($),$p=n($,"LI",{});var wLe=s($p);Ole=n(wLe,"STRONG",{});var Lat=s(Ole);ibo=r(Lat,"canine"),Lat.forEach(t),dbo=r(wLe," \u2014 "),AN=n(wLe,"A",{href:!0});var yat=s(AN);cbo=r(yat,"CanineModel"),yat.forEach(t),fbo=r(wLe," (CANINE model)"),wLe.forEach(t),mbo=i($),kp=n($,"LI",{});var ALe=s(kp);Vle=n(ALe,"STRONG",{});var xat=s(Vle);gbo=r(xat,"clip"),xat.forEach(t),hbo=r(ALe," \u2014 "),LN=n(ALe,"A",{href:!0});var $at=s(LN);pbo=r($at,"CLIPModel"),$at.forEach(t),_bo=r(ALe," (CLIP model)"),ALe.forEach(t),ubo=i($),Sp=n($,"LI",{});var LLe=s(Sp);Xle=n(LLe,"STRONG",{});var kat=s(Xle);bbo=r(kat,"convbert"),kat.forEach(t),vbo=r(LLe," \u2014 "),yN=n(LLe,"A",{href:!0});var Sat=s(yN);Fbo=r(Sat,"ConvBertModel"),Sat.forEach(t),Tbo=r(LLe," (ConvBERT model)"),LLe.forEach(t),Mbo=i($),Rp=n($,"LI",{});var yLe=s(Rp);zle=n(yLe,"STRONG",{});var Rat=s(zle);Ebo=r(Rat,"convnext"),Rat.forEach(t),Cbo=r(yLe," \u2014 "),xN=n(yLe,"A",{href:!0});var Pat=s(xN);wbo=r(Pat,"ConvNextModel"),Pat.forEach(t),Abo=r(yLe," (ConvNeXT model)"),yLe.forEach(t),Lbo=i($),Pp=n($,"LI",{});var xLe=s(Pp);Wle=n(xLe,"STRONG",{});var Bat=s(Wle);ybo=r(Bat,"ctrl"),Bat.forEach(t),xbo=r(xLe," \u2014 "),$N=n(xLe,"A",{href:!0});var Iat=s($N);$bo=r(Iat,"CTRLModel"),Iat.forEach(t),kbo=r(xLe," (CTRL model)"),xLe.forEach(t),Sbo=i($),Bp=n($,"LI",{});var $Le=s(Bp);Qle=n($Le,"STRONG",{});var Nat=s(Qle);Rbo=r(Nat,"cvt"),Nat.forEach(t),Pbo=r($Le," \u2014 "),kN=n($Le,"A",{href:!0});var qat=s(kN);Bbo=r(qat,"CvtModel"),qat.forEach(t),Ibo=r($Le," (CvT model)"),$Le.forEach(t),Nbo=i($),Ip=n($,"LI",{});var kLe=s(Ip);Hle=n(kLe,"STRONG",{});var jat=s(Hle);qbo=r(jat,"data2vec-audio"),jat.forEach(t),jbo=r(kLe," \u2014 "),SN=n(kLe,"A",{href:!0});var Dat=s(SN);Dbo=r(Dat,"Data2VecAudioModel"),Dat.forEach(t),Gbo=r(kLe," (Data2VecAudio model)"),kLe.forEach(t),Obo=i($),Np=n($,"LI",{});var SLe=s(Np);Ule=n(SLe,"STRONG",{});var Gat=s(Ule);Vbo=r(Gat,"data2vec-text"),Gat.forEach(t),Xbo=r(SLe," \u2014 "),RN=n(SLe,"A",{href:!0});var Oat=s(RN);zbo=r(Oat,"Data2VecTextModel"),Oat.forEach(t),Wbo=r(SLe," (Data2VecText model)"),SLe.forEach(t),Qbo=i($),qp=n($,"LI",{});var RLe=s(qp);Jle=n(RLe,"STRONG",{});var Vat=s(Jle);Hbo=r(Vat,"data2vec-vision"),Vat.forEach(t),Ubo=r(RLe," \u2014 "),PN=n(RLe,"A",{href:!0});var Xat=s(PN);Jbo=r(Xat,"Data2VecVisionModel"),Xat.forEach(t),Ybo=r(RLe," (Data2VecVision model)"),RLe.forEach(t),Kbo=i($),jp=n($,"LI",{});var PLe=s(jp);Yle=n(PLe,"STRONG",{});var zat=s(Yle);Zbo=r(zat,"deberta"),zat.forEach(t),e2o=r(PLe," \u2014 "),BN=n(PLe,"A",{href:!0});var Wat=s(BN);o2o=r(Wat,"DebertaModel"),Wat.forEach(t),r2o=r(PLe," (DeBERTa model)"),PLe.forEach(t),t2o=i($),Dp=n($,"LI",{});var BLe=s(Dp);Kle=n(BLe,"STRONG",{});var Qat=s(Kle);a2o=r(Qat,"deberta-v2"),Qat.forEach(t),n2o=r(BLe," \u2014 "),IN=n(BLe,"A",{href:!0});var Hat=s(IN);s2o=r(Hat,"DebertaV2Model"),Hat.forEach(t),l2o=r(BLe," (DeBERTa-v2 model)"),BLe.forEach(t),i2o=i($),Gp=n($,"LI",{});var ILe=s(Gp);Zle=n(ILe,"STRONG",{});var Uat=s(Zle);d2o=r(Uat,"decision_transformer"),Uat.forEach(t),c2o=r(ILe," \u2014 "),NN=n(ILe,"A",{href:!0});var Jat=s(NN);f2o=r(Jat,"DecisionTransformerModel"),Jat.forEach(t),m2o=r(ILe," (Decision Transformer model)"),ILe.forEach(t),g2o=i($),Op=n($,"LI",{});var NLe=s(Op);eie=n(NLe,"STRONG",{});var Yat=s(eie);h2o=r(Yat,"deit"),Yat.forEach(t),p2o=r(NLe," \u2014 "),qN=n(NLe,"A",{href:!0});var Kat=s(qN);_2o=r(Kat,"DeiTModel"),Kat.forEach(t),u2o=r(NLe," (DeiT model)"),NLe.forEach(t),b2o=i($),Vp=n($,"LI",{});var qLe=s(Vp);oie=n(qLe,"STRONG",{});var Zat=s(oie);v2o=r(Zat,"detr"),Zat.forEach(t),F2o=r(qLe," \u2014 "),jN=n(qLe,"A",{href:!0});var ent=s(jN);T2o=r(ent,"DetrModel"),ent.forEach(t),M2o=r(qLe," (DETR model)"),qLe.forEach(t),E2o=i($),Xp=n($,"LI",{});var jLe=s(Xp);rie=n(jLe,"STRONG",{});var ont=s(rie);C2o=r(ont,"distilbert"),ont.forEach(t),w2o=r(jLe," \u2014 "),DN=n(jLe,"A",{href:!0});var rnt=s(DN);A2o=r(rnt,"DistilBertModel"),rnt.forEach(t),L2o=r(jLe," (DistilBERT model)"),jLe.forEach(t),y2o=i($),zp=n($,"LI",{});var DLe=s(zp);tie=n(DLe,"STRONG",{});var tnt=s(tie);x2o=r(tnt,"dpr"),tnt.forEach(t),$2o=r(DLe," \u2014 "),GN=n(DLe,"A",{href:!0});var ant=s(GN);k2o=r(ant,"DPRQuestionEncoder"),ant.forEach(t),S2o=r(DLe," (DPR model)"),DLe.forEach(t),R2o=i($),Wp=n($,"LI",{});var GLe=s(Wp);aie=n(GLe,"STRONG",{});var nnt=s(aie);P2o=r(nnt,"dpt"),nnt.forEach(t),B2o=r(GLe," \u2014 "),ON=n(GLe,"A",{href:!0});var snt=s(ON);I2o=r(snt,"DPTModel"),snt.forEach(t),N2o=r(GLe," (DPT model)"),GLe.forEach(t),q2o=i($),Qp=n($,"LI",{});var OLe=s(Qp);nie=n(OLe,"STRONG",{});var lnt=s(nie);j2o=r(lnt,"electra"),lnt.forEach(t),D2o=r(OLe," \u2014 "),VN=n(OLe,"A",{href:!0});var int=s(VN);G2o=r(int,"ElectraModel"),int.forEach(t),O2o=r(OLe," (ELECTRA model)"),OLe.forEach(t),V2o=i($),Hp=n($,"LI",{});var VLe=s(Hp);sie=n(VLe,"STRONG",{});var dnt=s(sie);X2o=r(dnt,"flaubert"),dnt.forEach(t),z2o=r(VLe," \u2014 "),XN=n(VLe,"A",{href:!0});var cnt=s(XN);W2o=r(cnt,"FlaubertModel"),cnt.forEach(t),Q2o=r(VLe," (FlauBERT model)"),VLe.forEach(t),H2o=i($),Up=n($,"LI",{});var XLe=s(Up);lie=n(XLe,"STRONG",{});var fnt=s(lie);U2o=r(fnt,"flava"),fnt.forEach(t),J2o=r(XLe," \u2014 "),zN=n(XLe,"A",{href:!0});var mnt=s(zN);Y2o=r(mnt,"FlavaModel"),mnt.forEach(t),K2o=r(XLe," (FLAVA model)"),XLe.forEach(t),Z2o=i($),Jp=n($,"LI",{});var zLe=s(Jp);iie=n(zLe,"STRONG",{});var gnt=s(iie);e4o=r(gnt,"fnet"),gnt.forEach(t),o4o=r(zLe," \u2014 "),WN=n(zLe,"A",{href:!0});var hnt=s(WN);r4o=r(hnt,"FNetModel"),hnt.forEach(t),t4o=r(zLe," (FNet model)"),zLe.forEach(t),a4o=i($),Yp=n($,"LI",{});var WLe=s(Yp);die=n(WLe,"STRONG",{});var pnt=s(die);n4o=r(pnt,"fsmt"),pnt.forEach(t),s4o=r(WLe," \u2014 "),QN=n(WLe,"A",{href:!0});var _nt=s(QN);l4o=r(_nt,"FSMTModel"),_nt.forEach(t),i4o=r(WLe," (FairSeq Machine-Translation model)"),WLe.forEach(t),d4o=i($),Bs=n($,"LI",{});var gk=s(Bs);cie=n(gk,"STRONG",{});var unt=s(cie);c4o=r(unt,"funnel"),unt.forEach(t),f4o=r(gk," \u2014 "),HN=n(gk,"A",{href:!0});var bnt=s(HN);m4o=r(bnt,"FunnelModel"),bnt.forEach(t),g4o=r(gk," or "),UN=n(gk,"A",{href:!0});var vnt=s(UN);h4o=r(vnt,"FunnelBaseModel"),vnt.forEach(t),p4o=r(gk," (Funnel Transformer model)"),gk.forEach(t),_4o=i($),Kp=n($,"LI",{});var QLe=s(Kp);fie=n(QLe,"STRONG",{});var Fnt=s(fie);u4o=r(Fnt,"glpn"),Fnt.forEach(t),b4o=r(QLe," \u2014 "),JN=n(QLe,"A",{href:!0});var Tnt=s(JN);v4o=r(Tnt,"GLPNModel"),Tnt.forEach(t),F4o=r(QLe," (GLPN model)"),QLe.forEach(t),T4o=i($),Zp=n($,"LI",{});var HLe=s(Zp);mie=n(HLe,"STRONG",{});var Mnt=s(mie);M4o=r(Mnt,"gpt2"),Mnt.forEach(t),E4o=r(HLe," \u2014 "),YN=n(HLe,"A",{href:!0});var Ent=s(YN);C4o=r(Ent,"GPT2Model"),Ent.forEach(t),w4o=r(HLe," (OpenAI GPT-2 model)"),HLe.forEach(t),A4o=i($),e_=n($,"LI",{});var ULe=s(e_);gie=n(ULe,"STRONG",{});var Cnt=s(gie);L4o=r(Cnt,"gpt_neo"),Cnt.forEach(t),y4o=r(ULe," \u2014 "),KN=n(ULe,"A",{href:!0});var wnt=s(KN);x4o=r(wnt,"GPTNeoModel"),wnt.forEach(t),$4o=r(ULe," (GPT Neo model)"),ULe.forEach(t),k4o=i($),o_=n($,"LI",{});var JLe=s(o_);hie=n(JLe,"STRONG",{});var Ant=s(hie);S4o=r(Ant,"gpt_neox"),Ant.forEach(t),R4o=r(JLe," \u2014 "),ZN=n(JLe,"A",{href:!0});var Lnt=s(ZN);P4o=r(Lnt,"GPTNeoXModel"),Lnt.forEach(t),B4o=r(JLe," (GPT NeoX model)"),JLe.forEach(t),I4o=i($),r_=n($,"LI",{});var YLe=s(r_);pie=n(YLe,"STRONG",{});var ynt=s(pie);N4o=r(ynt,"gptj"),ynt.forEach(t),q4o=r(YLe," \u2014 "),eq=n(YLe,"A",{href:!0});var xnt=s(eq);j4o=r(xnt,"GPTJModel"),xnt.forEach(t),D4o=r(YLe," (GPT-J model)"),YLe.forEach(t),G4o=i($),t_=n($,"LI",{});var KLe=s(t_);_ie=n(KLe,"STRONG",{});var $nt=s(_ie);O4o=r($nt,"greaselm"),$nt.forEach(t),V4o=r(KLe," \u2014 "),oq=n(KLe,"A",{href:!0});var knt=s(oq);X4o=r(knt,"GreaseLMModel"),knt.forEach(t),z4o=r(KLe," (GreaseLM model)"),KLe.forEach(t),W4o=i($),a_=n($,"LI",{});var ZLe=s(a_);uie=n(ZLe,"STRONG",{});var Snt=s(uie);Q4o=r(Snt,"hubert"),Snt.forEach(t),H4o=r(ZLe," \u2014 "),rq=n(ZLe,"A",{href:!0});var Rnt=s(rq);U4o=r(Rnt,"HubertModel"),Rnt.forEach(t),J4o=r(ZLe," (Hubert model)"),ZLe.forEach(t),Y4o=i($),n_=n($,"LI",{});var eye=s(n_);bie=n(eye,"STRONG",{});var Pnt=s(bie);K4o=r(Pnt,"ibert"),Pnt.forEach(t),Z4o=r(eye," \u2014 "),tq=n(eye,"A",{href:!0});var Bnt=s(tq);evo=r(Bnt,"IBertModel"),Bnt.forEach(t),ovo=r(eye," (I-BERT model)"),eye.forEach(t),rvo=i($),s_=n($,"LI",{});var oye=s(s_);vie=n(oye,"STRONG",{});var Int=s(vie);tvo=r(Int,"imagegpt"),Int.forEach(t),avo=r(oye," \u2014 "),aq=n(oye,"A",{href:!0});var Nnt=s(aq);nvo=r(Nnt,"ImageGPTModel"),Nnt.forEach(t),svo=r(oye," (ImageGPT model)"),oye.forEach(t),lvo=i($),l_=n($,"LI",{});var rye=s(l_);Fie=n(rye,"STRONG",{});var qnt=s(Fie);ivo=r(qnt,"layoutlm"),qnt.forEach(t),dvo=r(rye," \u2014 "),nq=n(rye,"A",{href:!0});var jnt=s(nq);cvo=r(jnt,"LayoutLMModel"),jnt.forEach(t),fvo=r(rye," (LayoutLM model)"),rye.forEach(t),mvo=i($),i_=n($,"LI",{});var tye=s(i_);Tie=n(tye,"STRONG",{});var Dnt=s(Tie);gvo=r(Dnt,"layoutlmv2"),Dnt.forEach(t),hvo=r(tye," \u2014 "),sq=n(tye,"A",{href:!0});var Gnt=s(sq);pvo=r(Gnt,"LayoutLMv2Model"),Gnt.forEach(t),_vo=r(tye," (LayoutLMv2 model)"),tye.forEach(t),uvo=i($),d_=n($,"LI",{});var aye=s(d_);Mie=n(aye,"STRONG",{});var Ont=s(Mie);bvo=r(Ont,"layoutlmv3"),Ont.forEach(t),vvo=r(aye," \u2014 "),lq=n(aye,"A",{href:!0});var Vnt=s(lq);Fvo=r(Vnt,"LayoutLMv3Model"),Vnt.forEach(t),Tvo=r(aye," (LayoutLMv3 model)"),aye.forEach(t),Mvo=i($),c_=n($,"LI",{});var nye=s(c_);Eie=n(nye,"STRONG",{});var Xnt=s(Eie);Evo=r(Xnt,"led"),Xnt.forEach(t),Cvo=r(nye," \u2014 "),iq=n(nye,"A",{href:!0});var znt=s(iq);wvo=r(znt,"LEDModel"),znt.forEach(t),Avo=r(nye," (LED model)"),nye.forEach(t),Lvo=i($),f_=n($,"LI",{});var sye=s(f_);Cie=n(sye,"STRONG",{});var Wnt=s(Cie);yvo=r(Wnt,"levit"),Wnt.forEach(t),xvo=r(sye," \u2014 "),dq=n(sye,"A",{href:!0});var Qnt=s(dq);$vo=r(Qnt,"LevitModel"),Qnt.forEach(t),kvo=r(sye," (LeViT model)"),sye.forEach(t),Svo=i($),m_=n($,"LI",{});var lye=s(m_);wie=n(lye,"STRONG",{});var Hnt=s(wie);Rvo=r(Hnt,"longformer"),Hnt.forEach(t),Pvo=r(lye," \u2014 "),cq=n(lye,"A",{href:!0});var Unt=s(cq);Bvo=r(Unt,"LongformerModel"),Unt.forEach(t),Ivo=r(lye," (Longformer model)"),lye.forEach(t),Nvo=i($),g_=n($,"LI",{});var iye=s(g_);Aie=n(iye,"STRONG",{});var Jnt=s(Aie);qvo=r(Jnt,"luke"),Jnt.forEach(t),jvo=r(iye," \u2014 "),fq=n(iye,"A",{href:!0});var Ynt=s(fq);Dvo=r(Ynt,"LukeModel"),Ynt.forEach(t),Gvo=r(iye," (LUKE model)"),iye.forEach(t),Ovo=i($),h_=n($,"LI",{});var dye=s(h_);Lie=n(dye,"STRONG",{});var Knt=s(Lie);Vvo=r(Knt,"lxmert"),Knt.forEach(t),Xvo=r(dye," \u2014 "),mq=n(dye,"A",{href:!0});var Znt=s(mq);zvo=r(Znt,"LxmertModel"),Znt.forEach(t),Wvo=r(dye," (LXMERT model)"),dye.forEach(t),Qvo=i($),p_=n($,"LI",{});var cye=s(p_);yie=n(cye,"STRONG",{});var est=s(yie);Hvo=r(est,"m2m_100"),est.forEach(t),Uvo=r(cye," \u2014 "),gq=n(cye,"A",{href:!0});var ost=s(gq);Jvo=r(ost,"M2M100Model"),ost.forEach(t),Yvo=r(cye," (M2M100 model)"),cye.forEach(t),Kvo=i($),__=n($,"LI",{});var fye=s(__);xie=n(fye,"STRONG",{});var rst=s(xie);Zvo=r(rst,"marian"),rst.forEach(t),eFo=r(fye," \u2014 "),hq=n(fye,"A",{href:!0});var tst=s(hq);oFo=r(tst,"MarianModel"),tst.forEach(t),rFo=r(fye," (Marian model)"),fye.forEach(t),tFo=i($),u_=n($,"LI",{});var mye=s(u_);$ie=n(mye,"STRONG",{});var ast=s($ie);aFo=r(ast,"maskformer"),ast.forEach(t),nFo=r(mye," \u2014 "),pq=n(mye,"A",{href:!0});var nst=s(pq);sFo=r(nst,"MaskFormerModel"),nst.forEach(t),lFo=r(mye," (MaskFormer model)"),mye.forEach(t),iFo=i($),b_=n($,"LI",{});var gye=s(b_);kie=n(gye,"STRONG",{});var sst=s(kie);dFo=r(sst,"mbart"),sst.forEach(t),cFo=r(gye," \u2014 "),_q=n(gye,"A",{href:!0});var lst=s(_q);fFo=r(lst,"MBartModel"),lst.forEach(t),mFo=r(gye," (mBART model)"),gye.forEach(t),gFo=i($),v_=n($,"LI",{});var hye=s(v_);Sie=n(hye,"STRONG",{});var ist=s(Sie);hFo=r(ist,"mctct"),ist.forEach(t),pFo=r(hye," \u2014 "),uq=n(hye,"A",{href:!0});var dst=s(uq);_Fo=r(dst,"MCTCTModel"),dst.forEach(t),uFo=r(hye," (M-CTC-T model)"),hye.forEach(t),bFo=i($),F_=n($,"LI",{});var pye=s(F_);Rie=n(pye,"STRONG",{});var cst=s(Rie);vFo=r(cst,"megatron-bert"),cst.forEach(t),FFo=r(pye," \u2014 "),bq=n(pye,"A",{href:!0});var fst=s(bq);TFo=r(fst,"MegatronBertModel"),fst.forEach(t),MFo=r(pye," (Megatron-BERT model)"),pye.forEach(t),EFo=i($),T_=n($,"LI",{});var _ye=s(T_);Pie=n(_ye,"STRONG",{});var mst=s(Pie);CFo=r(mst,"mobilebert"),mst.forEach(t),wFo=r(_ye," \u2014 "),vq=n(_ye,"A",{href:!0});var gst=s(vq);AFo=r(gst,"MobileBertModel"),gst.forEach(t),LFo=r(_ye," (MobileBERT model)"),_ye.forEach(t),yFo=i($),M_=n($,"LI",{});var uye=s(M_);Bie=n(uye,"STRONG",{});var hst=s(Bie);xFo=r(hst,"mpnet"),hst.forEach(t),$Fo=r(uye," \u2014 "),Fq=n(uye,"A",{href:!0});var pst=s(Fq);kFo=r(pst,"MPNetModel"),pst.forEach(t),SFo=r(uye," (MPNet model)"),uye.forEach(t),RFo=i($),E_=n($,"LI",{});var bye=s(E_);Iie=n(bye,"STRONG",{});var _st=s(Iie);PFo=r(_st,"mt5"),_st.forEach(t),BFo=r(bye," \u2014 "),Tq=n(bye,"A",{href:!0});var ust=s(Tq);IFo=r(ust,"MT5Model"),ust.forEach(t),NFo=r(bye," (MT5 model)"),bye.forEach(t),qFo=i($),C_=n($,"LI",{});var vye=s(C_);Nie=n(vye,"STRONG",{});var bst=s(Nie);jFo=r(bst,"nystromformer"),bst.forEach(t),DFo=r(vye," \u2014 "),Mq=n(vye,"A",{href:!0});var vst=s(Mq);GFo=r(vst,"NystromformerModel"),vst.forEach(t),OFo=r(vye," (Nystr\xF6mformer model)"),vye.forEach(t),VFo=i($),w_=n($,"LI",{});var Fye=s(w_);qie=n(Fye,"STRONG",{});var Fst=s(qie);XFo=r(Fst,"openai-gpt"),Fst.forEach(t),zFo=r(Fye," \u2014 "),Eq=n(Fye,"A",{href:!0});var Tst=s(Eq);WFo=r(Tst,"OpenAIGPTModel"),Tst.forEach(t),QFo=r(Fye," (OpenAI GPT model)"),Fye.forEach(t),HFo=i($),A_=n($,"LI",{});var Tye=s(A_);jie=n(Tye,"STRONG",{});var Mst=s(jie);UFo=r(Mst,"opt"),Mst.forEach(t),JFo=r(Tye," \u2014 "),Cq=n(Tye,"A",{href:!0});var Est=s(Cq);YFo=r(Est,"OPTModel"),Est.forEach(t),KFo=r(Tye," (OPT model)"),Tye.forEach(t),ZFo=i($),L_=n($,"LI",{});var Mye=s(L_);Die=n(Mye,"STRONG",{});var Cst=s(Die);e6o=r(Cst,"pegasus"),Cst.forEach(t),o6o=r(Mye," \u2014 "),wq=n(Mye,"A",{href:!0});var wst=s(wq);r6o=r(wst,"PegasusModel"),wst.forEach(t),t6o=r(Mye," (Pegasus model)"),Mye.forEach(t),a6o=i($),y_=n($,"LI",{});var Eye=s(y_);Gie=n(Eye,"STRONG",{});var Ast=s(Gie);n6o=r(Ast,"perceiver"),Ast.forEach(t),s6o=r(Eye," \u2014 "),Aq=n(Eye,"A",{href:!0});var Lst=s(Aq);l6o=r(Lst,"PerceiverModel"),Lst.forEach(t),i6o=r(Eye," (Perceiver model)"),Eye.forEach(t),d6o=i($),x_=n($,"LI",{});var Cye=s(x_);Oie=n(Cye,"STRONG",{});var yst=s(Oie);c6o=r(yst,"plbart"),yst.forEach(t),f6o=r(Cye," \u2014 "),Lq=n(Cye,"A",{href:!0});var xst=s(Lq);m6o=r(xst,"PLBartModel"),xst.forEach(t),g6o=r(Cye," (PLBart model)"),Cye.forEach(t),h6o=i($),$_=n($,"LI",{});var wye=s($_);Vie=n(wye,"STRONG",{});var $st=s(Vie);p6o=r($st,"poolformer"),$st.forEach(t),_6o=r(wye," \u2014 "),yq=n(wye,"A",{href:!0});var kst=s(yq);u6o=r(kst,"PoolFormerModel"),kst.forEach(t),b6o=r(wye," (PoolFormer model)"),wye.forEach(t),v6o=i($),k_=n($,"LI",{});var Aye=s(k_);Xie=n(Aye,"STRONG",{});var Sst=s(Xie);F6o=r(Sst,"prophetnet"),Sst.forEach(t),T6o=r(Aye," \u2014 "),xq=n(Aye,"A",{href:!0});var Rst=s(xq);M6o=r(Rst,"ProphetNetModel"),Rst.forEach(t),E6o=r(Aye," (ProphetNet model)"),Aye.forEach(t),C6o=i($),S_=n($,"LI",{});var Lye=s(S_);zie=n(Lye,"STRONG",{});var Pst=s(zie);w6o=r(Pst,"qdqbert"),Pst.forEach(t),A6o=r(Lye," \u2014 "),$q=n(Lye,"A",{href:!0});var Bst=s($q);L6o=r(Bst,"QDQBertModel"),Bst.forEach(t),y6o=r(Lye," (QDQBert model)"),Lye.forEach(t),x6o=i($),R_=n($,"LI",{});var yye=s(R_);Wie=n(yye,"STRONG",{});var Ist=s(Wie);$6o=r(Ist,"reformer"),Ist.forEach(t),k6o=r(yye," \u2014 "),kq=n(yye,"A",{href:!0});var Nst=s(kq);S6o=r(Nst,"ReformerModel"),Nst.forEach(t),R6o=r(yye," (Reformer model)"),yye.forEach(t),P6o=i($),P_=n($,"LI",{});var xye=s(P_);Qie=n(xye,"STRONG",{});var qst=s(Qie);B6o=r(qst,"regnet"),qst.forEach(t),I6o=r(xye," \u2014 "),Sq=n(xye,"A",{href:!0});var jst=s(Sq);N6o=r(jst,"RegNetModel"),jst.forEach(t),q6o=r(xye," (RegNet model)"),xye.forEach(t),j6o=i($),B_=n($,"LI",{});var $ye=s(B_);Hie=n($ye,"STRONG",{});var Dst=s(Hie);D6o=r(Dst,"rembert"),Dst.forEach(t),G6o=r($ye," \u2014 "),Rq=n($ye,"A",{href:!0});var Gst=s(Rq);O6o=r(Gst,"RemBertModel"),Gst.forEach(t),V6o=r($ye," (RemBERT model)"),$ye.forEach(t),X6o=i($),I_=n($,"LI",{});var kye=s(I_);Uie=n(kye,"STRONG",{});var Ost=s(Uie);z6o=r(Ost,"resnet"),Ost.forEach(t),W6o=r(kye," \u2014 "),Pq=n(kye,"A",{href:!0});var Vst=s(Pq);Q6o=r(Vst,"ResNetModel"),Vst.forEach(t),H6o=r(kye," (ResNet model)"),kye.forEach(t),U6o=i($),N_=n($,"LI",{});var Sye=s(N_);Jie=n(Sye,"STRONG",{});var Xst=s(Jie);J6o=r(Xst,"retribert"),Xst.forEach(t),Y6o=r(Sye," \u2014 "),Bq=n(Sye,"A",{href:!0});var zst=s(Bq);K6o=r(zst,"RetriBertModel"),zst.forEach(t),Z6o=r(Sye," (RetriBERT model)"),Sye.forEach(t),eTo=i($),q_=n($,"LI",{});var Rye=s(q_);Yie=n(Rye,"STRONG",{});var Wst=s(Yie);oTo=r(Wst,"roberta"),Wst.forEach(t),rTo=r(Rye," \u2014 "),Iq=n(Rye,"A",{href:!0});var Qst=s(Iq);tTo=r(Qst,"RobertaModel"),Qst.forEach(t),aTo=r(Rye," (RoBERTa model)"),Rye.forEach(t),nTo=i($),j_=n($,"LI",{});var Pye=s(j_);Kie=n(Pye,"STRONG",{});var Hst=s(Kie);sTo=r(Hst,"roformer"),Hst.forEach(t),lTo=r(Pye," \u2014 "),Nq=n(Pye,"A",{href:!0});var Ust=s(Nq);iTo=r(Ust,"RoFormerModel"),Ust.forEach(t),dTo=r(Pye," (RoFormer model)"),Pye.forEach(t),cTo=i($),D_=n($,"LI",{});var Bye=s(D_);Zie=n(Bye,"STRONG",{});var Jst=s(Zie);fTo=r(Jst,"segformer"),Jst.forEach(t),mTo=r(Bye," \u2014 "),qq=n(Bye,"A",{href:!0});var Yst=s(qq);gTo=r(Yst,"SegformerModel"),Yst.forEach(t),hTo=r(Bye," (SegFormer model)"),Bye.forEach(t),pTo=i($),G_=n($,"LI",{});var Iye=s(G_);ede=n(Iye,"STRONG",{});var Kst=s(ede);_To=r(Kst,"sew"),Kst.forEach(t),uTo=r(Iye," \u2014 "),jq=n(Iye,"A",{href:!0});var Zst=s(jq);bTo=r(Zst,"SEWModel"),Zst.forEach(t),vTo=r(Iye," (SEW model)"),Iye.forEach(t),FTo=i($),O_=n($,"LI",{});var Nye=s(O_);ode=n(Nye,"STRONG",{});var elt=s(ode);TTo=r(elt,"sew-d"),elt.forEach(t),MTo=r(Nye," \u2014 "),Dq=n(Nye,"A",{href:!0});var olt=s(Dq);ETo=r(olt,"SEWDModel"),olt.forEach(t),CTo=r(Nye," (SEW-D model)"),Nye.forEach(t),wTo=i($),V_=n($,"LI",{});var qye=s(V_);rde=n(qye,"STRONG",{});var rlt=s(rde);ATo=r(rlt,"speech_to_text"),rlt.forEach(t),LTo=r(qye," \u2014 "),Gq=n(qye,"A",{href:!0});var tlt=s(Gq);yTo=r(tlt,"Speech2TextModel"),tlt.forEach(t),xTo=r(qye," (Speech2Text model)"),qye.forEach(t),$To=i($),X_=n($,"LI",{});var jye=s(X_);tde=n(jye,"STRONG",{});var alt=s(tde);kTo=r(alt,"splinter"),alt.forEach(t),STo=r(jye," \u2014 "),Oq=n(jye,"A",{href:!0});var nlt=s(Oq);RTo=r(nlt,"SplinterModel"),nlt.forEach(t),PTo=r(jye," (Splinter model)"),jye.forEach(t),BTo=i($),z_=n($,"LI",{});var Dye=s(z_);ade=n(Dye,"STRONG",{});var slt=s(ade);ITo=r(slt,"squeezebert"),slt.forEach(t),NTo=r(Dye," \u2014 "),Vq=n(Dye,"A",{href:!0});var llt=s(Vq);qTo=r(llt,"SqueezeBertModel"),llt.forEach(t),jTo=r(Dye," (SqueezeBERT model)"),Dye.forEach(t),DTo=i($),W_=n($,"LI",{});var Gye=s(W_);nde=n(Gye,"STRONG",{});var ilt=s(nde);GTo=r(ilt,"swin"),ilt.forEach(t),OTo=r(Gye," \u2014 "),Xq=n(Gye,"A",{href:!0});var dlt=s(Xq);VTo=r(dlt,"SwinModel"),dlt.forEach(t),XTo=r(Gye," (Swin Transformer model)"),Gye.forEach(t),zTo=i($),Q_=n($,"LI",{});var Oye=s(Q_);sde=n(Oye,"STRONG",{});var clt=s(sde);WTo=r(clt,"t5"),clt.forEach(t),QTo=r(Oye," \u2014 "),zq=n(Oye,"A",{href:!0});var flt=s(zq);HTo=r(flt,"T5Model"),flt.forEach(t),UTo=r(Oye," (T5 model)"),Oye.forEach(t),JTo=i($),H_=n($,"LI",{});var Vye=s(H_);lde=n(Vye,"STRONG",{});var mlt=s(lde);YTo=r(mlt,"tapas"),mlt.forEach(t),KTo=r(Vye," \u2014 "),Wq=n(Vye,"A",{href:!0});var glt=s(Wq);ZTo=r(glt,"TapasModel"),glt.forEach(t),e7o=r(Vye," (TAPAS model)"),Vye.forEach(t),o7o=i($),U_=n($,"LI",{});var Xye=s(U_);ide=n(Xye,"STRONG",{});var hlt=s(ide);r7o=r(hlt,"trajectory_transformer"),hlt.forEach(t),t7o=r(Xye," \u2014 "),Qq=n(Xye,"A",{href:!0});var plt=s(Qq);a7o=r(plt,"TrajectoryTransformerModel"),plt.forEach(t),n7o=r(Xye," (Trajectory Transformer model)"),Xye.forEach(t),s7o=i($),J_=n($,"LI",{});var zye=s(J_);dde=n(zye,"STRONG",{});var _lt=s(dde);l7o=r(_lt,"transfo-xl"),_lt.forEach(t),i7o=r(zye," \u2014 "),Hq=n(zye,"A",{href:!0});var ult=s(Hq);d7o=r(ult,"TransfoXLModel"),ult.forEach(t),c7o=r(zye," (Transformer-XL model)"),zye.forEach(t),f7o=i($),Y_=n($,"LI",{});var Wye=s(Y_);cde=n(Wye,"STRONG",{});var blt=s(cde);m7o=r(blt,"unispeech"),blt.forEach(t),g7o=r(Wye," \u2014 "),Uq=n(Wye,"A",{href:!0});var vlt=s(Uq);h7o=r(vlt,"UniSpeechModel"),vlt.forEach(t),p7o=r(Wye," (UniSpeech model)"),Wye.forEach(t),_7o=i($),K_=n($,"LI",{});var Qye=s(K_);fde=n(Qye,"STRONG",{});var Flt=s(fde);u7o=r(Flt,"unispeech-sat"),Flt.forEach(t),b7o=r(Qye," \u2014 "),Jq=n(Qye,"A",{href:!0});var Tlt=s(Jq);v7o=r(Tlt,"UniSpeechSatModel"),Tlt.forEach(t),F7o=r(Qye," (UniSpeechSat model)"),Qye.forEach(t),T7o=i($),Z_=n($,"LI",{});var Hye=s(Z_);mde=n(Hye,"STRONG",{});var Mlt=s(mde);M7o=r(Mlt,"van"),Mlt.forEach(t),E7o=r(Hye," \u2014 "),Yq=n(Hye,"A",{href:!0});var Elt=s(Yq);C7o=r(Elt,"VanModel"),Elt.forEach(t),w7o=r(Hye," (VAN model)"),Hye.forEach(t),A7o=i($),eu=n($,"LI",{});var Uye=s(eu);gde=n(Uye,"STRONG",{});var Clt=s(gde);L7o=r(Clt,"vilt"),Clt.forEach(t),y7o=r(Uye," \u2014 "),Kq=n(Uye,"A",{href:!0});var wlt=s(Kq);x7o=r(wlt,"ViltModel"),wlt.forEach(t),$7o=r(Uye," (ViLT model)"),Uye.forEach(t),k7o=i($),ou=n($,"LI",{});var Jye=s(ou);hde=n(Jye,"STRONG",{});var Alt=s(hde);S7o=r(Alt,"vision-text-dual-encoder"),Alt.forEach(t),R7o=r(Jye," \u2014 "),Zq=n(Jye,"A",{href:!0});var Llt=s(Zq);P7o=r(Llt,"VisionTextDualEncoderModel"),Llt.forEach(t),B7o=r(Jye," (VisionTextDualEncoder model)"),Jye.forEach(t),I7o=i($),ru=n($,"LI",{});var Yye=s(ru);pde=n(Yye,"STRONG",{});var ylt=s(pde);N7o=r(ylt,"visual_bert"),ylt.forEach(t),q7o=r(Yye," \u2014 "),ej=n(Yye,"A",{href:!0});var xlt=s(ej);j7o=r(xlt,"VisualBertModel"),xlt.forEach(t),D7o=r(Yye," (VisualBERT model)"),Yye.forEach(t),G7o=i($),tu=n($,"LI",{});var Kye=s(tu);_de=n(Kye,"STRONG",{});var $lt=s(_de);O7o=r($lt,"vit"),$lt.forEach(t),V7o=r(Kye," \u2014 "),oj=n(Kye,"A",{href:!0});var klt=s(oj);X7o=r(klt,"ViTModel"),klt.forEach(t),z7o=r(Kye," (ViT model)"),Kye.forEach(t),W7o=i($),au=n($,"LI",{});var Zye=s(au);ude=n(Zye,"STRONG",{});var Slt=s(ude);Q7o=r(Slt,"vit_mae"),Slt.forEach(t),H7o=r(Zye," \u2014 "),rj=n(Zye,"A",{href:!0});var Rlt=s(rj);U7o=r(Rlt,"ViTMAEModel"),Rlt.forEach(t),J7o=r(Zye," (ViTMAE model)"),Zye.forEach(t),Y7o=i($),nu=n($,"LI",{});var e8e=s(nu);bde=n(e8e,"STRONG",{});var Plt=s(bde);K7o=r(Plt,"wav2vec2"),Plt.forEach(t),Z7o=r(e8e," \u2014 "),tj=n(e8e,"A",{href:!0});var Blt=s(tj);eMo=r(Blt,"Wav2Vec2Model"),Blt.forEach(t),oMo=r(e8e," (Wav2Vec2 model)"),e8e.forEach(t),rMo=i($),su=n($,"LI",{});var o8e=s(su);vde=n(o8e,"STRONG",{});var Ilt=s(vde);tMo=r(Ilt,"wav2vec2-conformer"),Ilt.forEach(t),aMo=r(o8e," \u2014 "),aj=n(o8e,"A",{href:!0});var Nlt=s(aj);nMo=r(Nlt,"Wav2Vec2ConformerModel"),Nlt.forEach(t),sMo=r(o8e," (Wav2Vec2-Conformer model)"),o8e.forEach(t),lMo=i($),lu=n($,"LI",{});var r8e=s(lu);Fde=n(r8e,"STRONG",{});var qlt=s(Fde);iMo=r(qlt,"wavlm"),qlt.forEach(t),dMo=r(r8e," \u2014 "),nj=n(r8e,"A",{href:!0});var jlt=s(nj);cMo=r(jlt,"WavLMModel"),jlt.forEach(t),fMo=r(r8e," (WavLM model)"),r8e.forEach(t),mMo=i($),iu=n($,"LI",{});var t8e=s(iu);Tde=n(t8e,"STRONG",{});var Dlt=s(Tde);gMo=r(Dlt,"xglm"),Dlt.forEach(t),hMo=r(t8e," \u2014 "),sj=n(t8e,"A",{href:!0});var Glt=s(sj);pMo=r(Glt,"XGLMModel"),Glt.forEach(t),_Mo=r(t8e," (XGLM model)"),t8e.forEach(t),uMo=i($),du=n($,"LI",{});var a8e=s(du);Mde=n(a8e,"STRONG",{});var Olt=s(Mde);bMo=r(Olt,"xlm"),Olt.forEach(t),vMo=r(a8e," \u2014 "),lj=n(a8e,"A",{href:!0});var Vlt=s(lj);FMo=r(Vlt,"XLMModel"),Vlt.forEach(t),TMo=r(a8e," (XLM model)"),a8e.forEach(t),MMo=i($),cu=n($,"LI",{});var n8e=s(cu);Ede=n(n8e,"STRONG",{});var Xlt=s(Ede);EMo=r(Xlt,"xlm-prophetnet"),Xlt.forEach(t),CMo=r(n8e," \u2014 "),ij=n(n8e,"A",{href:!0});var zlt=s(ij);wMo=r(zlt,"XLMProphetNetModel"),zlt.forEach(t),AMo=r(n8e," (XLM-ProphetNet model)"),n8e.forEach(t),LMo=i($),fu=n($,"LI",{});var s8e=s(fu);Cde=n(s8e,"STRONG",{});var Wlt=s(Cde);yMo=r(Wlt,"xlm-roberta"),Wlt.forEach(t),xMo=r(s8e," \u2014 "),dj=n(s8e,"A",{href:!0});var Qlt=s(dj);$Mo=r(Qlt,"XLMRobertaModel"),Qlt.forEach(t),kMo=r(s8e," (XLM-RoBERTa model)"),s8e.forEach(t),SMo=i($),mu=n($,"LI",{});var l8e=s(mu);wde=n(l8e,"STRONG",{});var Hlt=s(wde);RMo=r(Hlt,"xlm-roberta-xl"),Hlt.forEach(t),PMo=r(l8e," \u2014 "),cj=n(l8e,"A",{href:!0});var Ult=s(cj);BMo=r(Ult,"XLMRobertaXLModel"),Ult.forEach(t),IMo=r(l8e," (XLM-RoBERTa-XL model)"),l8e.forEach(t),NMo=i($),gu=n($,"LI",{});var i8e=s(gu);Ade=n(i8e,"STRONG",{});var Jlt=s(Ade);qMo=r(Jlt,"xlnet"),Jlt.forEach(t),jMo=r(i8e," \u2014 "),fj=n(i8e,"A",{href:!0});var Ylt=s(fj);DMo=r(Ylt,"XLNetModel"),Ylt.forEach(t),GMo=r(i8e," (XLNet model)"),i8e.forEach(t),OMo=i($),hu=n($,"LI",{});var d8e=s(hu);Lde=n(d8e,"STRONG",{});var Klt=s(Lde);VMo=r(Klt,"yolos"),Klt.forEach(t),XMo=r(d8e," \u2014 "),mj=n(d8e,"A",{href:!0});var Zlt=s(mj);zMo=r(Zlt,"YolosModel"),Zlt.forEach(t),WMo=r(d8e," (YOLOS model)"),d8e.forEach(t),QMo=i($),pu=n($,"LI",{});var c8e=s(pu);yde=n(c8e,"STRONG",{});var eit=s(yde);HMo=r(eit,"yoso"),eit.forEach(t),UMo=r(c8e," \u2014 "),gj=n(c8e,"A",{href:!0});var oit=s(gj);JMo=r(oit,"YosoModel"),oit.forEach(t),YMo=r(c8e," (YOSO model)"),c8e.forEach(t),$.forEach(t),KMo=i(oa),_u=n(oa,"P",{});var f8e=s(_u);ZMo=r(f8e,"The model is set in evaluation mode by default using "),xde=n(f8e,"CODE",{});var rit=s(xde);eEo=r(rit,"model.eval()"),rit.forEach(t),oEo=r(f8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$de=n(f8e,"CODE",{});var tit=s($de);rEo=r(tit,"model.train()"),tit.forEach(t),f8e.forEach(t),tEo=i(oa),T(uu.$$.fragment,oa),oa.forEach(t),Vs.forEach(t),tDe=i(f),$i=n(f,"H2",{class:!0});var lOe=s($i);bu=n(lOe,"A",{id:!0,class:!0,href:!0});var ait=s(bu);kde=n(ait,"SPAN",{});var nit=s(kde);T(yL.$$.fragment,nit),nit.forEach(t),ait.forEach(t),aEo=i(lOe),Sde=n(lOe,"SPAN",{});var sit=s(Sde);nEo=r(sit,"AutoModelForPreTraining"),sit.forEach(t),lOe.forEach(t),aDe=i(f),xo=n(f,"DIV",{class:!0});var Xs=s(xo);T(xL.$$.fragment,Xs),sEo=i(Xs),ki=n(Xs,"P",{});var pee=s(ki);lEo=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hj=n(pee,"A",{href:!0});var lit=s(hj);iEo=r(lit,"from_pretrained()"),lit.forEach(t),dEo=r(pee," class method or the "),pj=n(pee,"A",{href:!0});var iit=s(pj);cEo=r(iit,"from_config()"),iit.forEach(t),fEo=r(pee,` class
method.`),pee.forEach(t),mEo=i(Xs),$L=n(Xs,"P",{});var iOe=s($L);gEo=r(iOe,"This class cannot be instantiated directly using "),Rde=n(iOe,"CODE",{});var dit=s(Rde);hEo=r(dit,"__init__()"),dit.forEach(t),pEo=r(iOe," (throws an error)."),iOe.forEach(t),_Eo=i(Xs),at=n(Xs,"DIV",{class:!0});var tw=s(at);T(kL.$$.fragment,tw),uEo=i(tw),Pde=n(tw,"P",{});var cit=s(Pde);bEo=r(cit,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cit.forEach(t),vEo=i(tw),Si=n(tw,"P",{});var _ee=s(Si);FEo=r(_ee,`Note:
Loading a model from its configuration file does `),Bde=n(_ee,"STRONG",{});var fit=s(Bde);TEo=r(fit,"not"),fit.forEach(t),MEo=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_j=n(_ee,"A",{href:!0});var mit=s(_j);EEo=r(mit,"from_pretrained()"),mit.forEach(t),CEo=r(_ee," to load the model weights."),_ee.forEach(t),wEo=i(tw),T(vu.$$.fragment,tw),tw.forEach(t),AEo=i(Xs),Ye=n(Xs,"DIV",{class:!0});var ra=s(Ye);T(SL.$$.fragment,ra),LEo=i(ra),Ide=n(ra,"P",{});var git=s(Ide);yEo=r(git,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),git.forEach(t),xEo=i(ra),xa=n(ra,"P",{});var aw=s(xa);$Eo=r(aw,"The model class to instantiate is selected based on the "),Nde=n(aw,"CODE",{});var hit=s(Nde);kEo=r(hit,"model_type"),hit.forEach(t),SEo=r(aw,` property of the config object (either
passed as an argument or loaded from `),qde=n(aw,"CODE",{});var pit=s(qde);REo=r(pit,"pretrained_model_name_or_path"),pit.forEach(t),PEo=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jde=n(aw,"CODE",{});var _it=s(jde);BEo=r(_it,"pretrained_model_name_or_path"),_it.forEach(t),IEo=r(aw,":"),aw.forEach(t),NEo=i(ra),G=n(ra,"UL",{});var O=s(G);Fu=n(O,"LI",{});var m8e=s(Fu);Dde=n(m8e,"STRONG",{});var uit=s(Dde);qEo=r(uit,"albert"),uit.forEach(t),jEo=r(m8e," \u2014 "),uj=n(m8e,"A",{href:!0});var bit=s(uj);DEo=r(bit,"AlbertForPreTraining"),bit.forEach(t),GEo=r(m8e," (ALBERT model)"),m8e.forEach(t),OEo=i(O),Tu=n(O,"LI",{});var g8e=s(Tu);Gde=n(g8e,"STRONG",{});var vit=s(Gde);VEo=r(vit,"bart"),vit.forEach(t),XEo=r(g8e," \u2014 "),bj=n(g8e,"A",{href:!0});var Fit=s(bj);zEo=r(Fit,"BartForConditionalGeneration"),Fit.forEach(t),WEo=r(g8e," (BART model)"),g8e.forEach(t),QEo=i(O),Mu=n(O,"LI",{});var h8e=s(Mu);Ode=n(h8e,"STRONG",{});var Tit=s(Ode);HEo=r(Tit,"bert"),Tit.forEach(t),UEo=r(h8e," \u2014 "),vj=n(h8e,"A",{href:!0});var Mit=s(vj);JEo=r(Mit,"BertForPreTraining"),Mit.forEach(t),YEo=r(h8e," (BERT model)"),h8e.forEach(t),KEo=i(O),Eu=n(O,"LI",{});var p8e=s(Eu);Vde=n(p8e,"STRONG",{});var Eit=s(Vde);ZEo=r(Eit,"big_bird"),Eit.forEach(t),eCo=r(p8e," \u2014 "),Fj=n(p8e,"A",{href:!0});var Cit=s(Fj);oCo=r(Cit,"BigBirdForPreTraining"),Cit.forEach(t),rCo=r(p8e," (BigBird model)"),p8e.forEach(t),tCo=i(O),Cu=n(O,"LI",{});var _8e=s(Cu);Xde=n(_8e,"STRONG",{});var wit=s(Xde);aCo=r(wit,"bloom"),wit.forEach(t),nCo=r(_8e," \u2014 "),Tj=n(_8e,"A",{href:!0});var Ait=s(Tj);sCo=r(Ait,"BloomForCausalLM"),Ait.forEach(t),lCo=r(_8e," (BLOOM model)"),_8e.forEach(t),iCo=i(O),wu=n(O,"LI",{});var u8e=s(wu);zde=n(u8e,"STRONG",{});var Lit=s(zde);dCo=r(Lit,"camembert"),Lit.forEach(t),cCo=r(u8e," \u2014 "),Mj=n(u8e,"A",{href:!0});var yit=s(Mj);fCo=r(yit,"CamembertForMaskedLM"),yit.forEach(t),mCo=r(u8e," (CamemBERT model)"),u8e.forEach(t),gCo=i(O),Au=n(O,"LI",{});var b8e=s(Au);Wde=n(b8e,"STRONG",{});var xit=s(Wde);hCo=r(xit,"ctrl"),xit.forEach(t),pCo=r(b8e," \u2014 "),Ej=n(b8e,"A",{href:!0});var $it=s(Ej);_Co=r($it,"CTRLLMHeadModel"),$it.forEach(t),uCo=r(b8e," (CTRL model)"),b8e.forEach(t),bCo=i(O),Lu=n(O,"LI",{});var v8e=s(Lu);Qde=n(v8e,"STRONG",{});var kit=s(Qde);vCo=r(kit,"data2vec-text"),kit.forEach(t),FCo=r(v8e," \u2014 "),Cj=n(v8e,"A",{href:!0});var Sit=s(Cj);TCo=r(Sit,"Data2VecTextForMaskedLM"),Sit.forEach(t),MCo=r(v8e," (Data2VecText model)"),v8e.forEach(t),ECo=i(O),yu=n(O,"LI",{});var F8e=s(yu);Hde=n(F8e,"STRONG",{});var Rit=s(Hde);CCo=r(Rit,"deberta"),Rit.forEach(t),wCo=r(F8e," \u2014 "),wj=n(F8e,"A",{href:!0});var Pit=s(wj);ACo=r(Pit,"DebertaForMaskedLM"),Pit.forEach(t),LCo=r(F8e," (DeBERTa model)"),F8e.forEach(t),yCo=i(O),xu=n(O,"LI",{});var T8e=s(xu);Ude=n(T8e,"STRONG",{});var Bit=s(Ude);xCo=r(Bit,"deberta-v2"),Bit.forEach(t),$Co=r(T8e," \u2014 "),Aj=n(T8e,"A",{href:!0});var Iit=s(Aj);kCo=r(Iit,"DebertaV2ForMaskedLM"),Iit.forEach(t),SCo=r(T8e," (DeBERTa-v2 model)"),T8e.forEach(t),RCo=i(O),$u=n(O,"LI",{});var M8e=s($u);Jde=n(M8e,"STRONG",{});var Nit=s(Jde);PCo=r(Nit,"distilbert"),Nit.forEach(t),BCo=r(M8e," \u2014 "),Lj=n(M8e,"A",{href:!0});var qit=s(Lj);ICo=r(qit,"DistilBertForMaskedLM"),qit.forEach(t),NCo=r(M8e," (DistilBERT model)"),M8e.forEach(t),qCo=i(O),ku=n(O,"LI",{});var E8e=s(ku);Yde=n(E8e,"STRONG",{});var jit=s(Yde);jCo=r(jit,"electra"),jit.forEach(t),DCo=r(E8e," \u2014 "),yj=n(E8e,"A",{href:!0});var Dit=s(yj);GCo=r(Dit,"ElectraForPreTraining"),Dit.forEach(t),OCo=r(E8e," (ELECTRA model)"),E8e.forEach(t),VCo=i(O),Su=n(O,"LI",{});var C8e=s(Su);Kde=n(C8e,"STRONG",{});var Git=s(Kde);XCo=r(Git,"flaubert"),Git.forEach(t),zCo=r(C8e," \u2014 "),xj=n(C8e,"A",{href:!0});var Oit=s(xj);WCo=r(Oit,"FlaubertWithLMHeadModel"),Oit.forEach(t),QCo=r(C8e," (FlauBERT model)"),C8e.forEach(t),HCo=i(O),Ru=n(O,"LI",{});var w8e=s(Ru);Zde=n(w8e,"STRONG",{});var Vit=s(Zde);UCo=r(Vit,"flava"),Vit.forEach(t),JCo=r(w8e," \u2014 "),$j=n(w8e,"A",{href:!0});var Xit=s($j);YCo=r(Xit,"FlavaForPreTraining"),Xit.forEach(t),KCo=r(w8e," (FLAVA model)"),w8e.forEach(t),ZCo=i(O),Pu=n(O,"LI",{});var A8e=s(Pu);ece=n(A8e,"STRONG",{});var zit=s(ece);e5o=r(zit,"fnet"),zit.forEach(t),o5o=r(A8e," \u2014 "),kj=n(A8e,"A",{href:!0});var Wit=s(kj);r5o=r(Wit,"FNetForPreTraining"),Wit.forEach(t),t5o=r(A8e," (FNet model)"),A8e.forEach(t),a5o=i(O),Bu=n(O,"LI",{});var L8e=s(Bu);oce=n(L8e,"STRONG",{});var Qit=s(oce);n5o=r(Qit,"fsmt"),Qit.forEach(t),s5o=r(L8e," \u2014 "),Sj=n(L8e,"A",{href:!0});var Hit=s(Sj);l5o=r(Hit,"FSMTForConditionalGeneration"),Hit.forEach(t),i5o=r(L8e," (FairSeq Machine-Translation model)"),L8e.forEach(t),d5o=i(O),Iu=n(O,"LI",{});var y8e=s(Iu);rce=n(y8e,"STRONG",{});var Uit=s(rce);c5o=r(Uit,"funnel"),Uit.forEach(t),f5o=r(y8e," \u2014 "),Rj=n(y8e,"A",{href:!0});var Jit=s(Rj);m5o=r(Jit,"FunnelForPreTraining"),Jit.forEach(t),g5o=r(y8e," (Funnel Transformer model)"),y8e.forEach(t),h5o=i(O),Nu=n(O,"LI",{});var x8e=s(Nu);tce=n(x8e,"STRONG",{});var Yit=s(tce);p5o=r(Yit,"gpt2"),Yit.forEach(t),_5o=r(x8e," \u2014 "),Pj=n(x8e,"A",{href:!0});var Kit=s(Pj);u5o=r(Kit,"GPT2LMHeadModel"),Kit.forEach(t),b5o=r(x8e," (OpenAI GPT-2 model)"),x8e.forEach(t),v5o=i(O),qu=n(O,"LI",{});var $8e=s(qu);ace=n($8e,"STRONG",{});var Zit=s(ace);F5o=r(Zit,"ibert"),Zit.forEach(t),T5o=r($8e," \u2014 "),Bj=n($8e,"A",{href:!0});var edt=s(Bj);M5o=r(edt,"IBertForMaskedLM"),edt.forEach(t),E5o=r($8e," (I-BERT model)"),$8e.forEach(t),C5o=i(O),ju=n(O,"LI",{});var k8e=s(ju);nce=n(k8e,"STRONG",{});var odt=s(nce);w5o=r(odt,"layoutlm"),odt.forEach(t),A5o=r(k8e," \u2014 "),Ij=n(k8e,"A",{href:!0});var rdt=s(Ij);L5o=r(rdt,"LayoutLMForMaskedLM"),rdt.forEach(t),y5o=r(k8e," (LayoutLM model)"),k8e.forEach(t),x5o=i(O),Du=n(O,"LI",{});var S8e=s(Du);sce=n(S8e,"STRONG",{});var tdt=s(sce);$5o=r(tdt,"longformer"),tdt.forEach(t),k5o=r(S8e," \u2014 "),Nj=n(S8e,"A",{href:!0});var adt=s(Nj);S5o=r(adt,"LongformerForMaskedLM"),adt.forEach(t),R5o=r(S8e," (Longformer model)"),S8e.forEach(t),P5o=i(O),Gu=n(O,"LI",{});var R8e=s(Gu);lce=n(R8e,"STRONG",{});var ndt=s(lce);B5o=r(ndt,"lxmert"),ndt.forEach(t),I5o=r(R8e," \u2014 "),qj=n(R8e,"A",{href:!0});var sdt=s(qj);N5o=r(sdt,"LxmertForPreTraining"),sdt.forEach(t),q5o=r(R8e," (LXMERT model)"),R8e.forEach(t),j5o=i(O),Ou=n(O,"LI",{});var P8e=s(Ou);ice=n(P8e,"STRONG",{});var ldt=s(ice);D5o=r(ldt,"megatron-bert"),ldt.forEach(t),G5o=r(P8e," \u2014 "),jj=n(P8e,"A",{href:!0});var idt=s(jj);O5o=r(idt,"MegatronBertForPreTraining"),idt.forEach(t),V5o=r(P8e," (Megatron-BERT model)"),P8e.forEach(t),X5o=i(O),Vu=n(O,"LI",{});var B8e=s(Vu);dce=n(B8e,"STRONG",{});var ddt=s(dce);z5o=r(ddt,"mobilebert"),ddt.forEach(t),W5o=r(B8e," \u2014 "),Dj=n(B8e,"A",{href:!0});var cdt=s(Dj);Q5o=r(cdt,"MobileBertForPreTraining"),cdt.forEach(t),H5o=r(B8e," (MobileBERT model)"),B8e.forEach(t),U5o=i(O),Xu=n(O,"LI",{});var I8e=s(Xu);cce=n(I8e,"STRONG",{});var fdt=s(cce);J5o=r(fdt,"mpnet"),fdt.forEach(t),Y5o=r(I8e," \u2014 "),Gj=n(I8e,"A",{href:!0});var mdt=s(Gj);K5o=r(mdt,"MPNetForMaskedLM"),mdt.forEach(t),Z5o=r(I8e," (MPNet model)"),I8e.forEach(t),e3o=i(O),zu=n(O,"LI",{});var N8e=s(zu);fce=n(N8e,"STRONG",{});var gdt=s(fce);o3o=r(gdt,"openai-gpt"),gdt.forEach(t),r3o=r(N8e," \u2014 "),Oj=n(N8e,"A",{href:!0});var hdt=s(Oj);t3o=r(hdt,"OpenAIGPTLMHeadModel"),hdt.forEach(t),a3o=r(N8e," (OpenAI GPT model)"),N8e.forEach(t),n3o=i(O),Wu=n(O,"LI",{});var q8e=s(Wu);mce=n(q8e,"STRONG",{});var pdt=s(mce);s3o=r(pdt,"retribert"),pdt.forEach(t),l3o=r(q8e," \u2014 "),Vj=n(q8e,"A",{href:!0});var _dt=s(Vj);i3o=r(_dt,"RetriBertModel"),_dt.forEach(t),d3o=r(q8e," (RetriBERT model)"),q8e.forEach(t),c3o=i(O),Qu=n(O,"LI",{});var j8e=s(Qu);gce=n(j8e,"STRONG",{});var udt=s(gce);f3o=r(udt,"roberta"),udt.forEach(t),m3o=r(j8e," \u2014 "),Xj=n(j8e,"A",{href:!0});var bdt=s(Xj);g3o=r(bdt,"RobertaForMaskedLM"),bdt.forEach(t),h3o=r(j8e," (RoBERTa model)"),j8e.forEach(t),p3o=i(O),Hu=n(O,"LI",{});var D8e=s(Hu);hce=n(D8e,"STRONG",{});var vdt=s(hce);_3o=r(vdt,"splinter"),vdt.forEach(t),u3o=r(D8e," \u2014 "),zj=n(D8e,"A",{href:!0});var Fdt=s(zj);b3o=r(Fdt,"SplinterForPreTraining"),Fdt.forEach(t),v3o=r(D8e," (Splinter model)"),D8e.forEach(t),F3o=i(O),Uu=n(O,"LI",{});var G8e=s(Uu);pce=n(G8e,"STRONG",{});var Tdt=s(pce);T3o=r(Tdt,"squeezebert"),Tdt.forEach(t),M3o=r(G8e," \u2014 "),Wj=n(G8e,"A",{href:!0});var Mdt=s(Wj);E3o=r(Mdt,"SqueezeBertForMaskedLM"),Mdt.forEach(t),C3o=r(G8e," (SqueezeBERT model)"),G8e.forEach(t),w3o=i(O),Ju=n(O,"LI",{});var O8e=s(Ju);_ce=n(O8e,"STRONG",{});var Edt=s(_ce);A3o=r(Edt,"t5"),Edt.forEach(t),L3o=r(O8e," \u2014 "),Qj=n(O8e,"A",{href:!0});var Cdt=s(Qj);y3o=r(Cdt,"T5ForConditionalGeneration"),Cdt.forEach(t),x3o=r(O8e," (T5 model)"),O8e.forEach(t),$3o=i(O),Yu=n(O,"LI",{});var V8e=s(Yu);uce=n(V8e,"STRONG",{});var wdt=s(uce);k3o=r(wdt,"tapas"),wdt.forEach(t),S3o=r(V8e," \u2014 "),Hj=n(V8e,"A",{href:!0});var Adt=s(Hj);R3o=r(Adt,"TapasForMaskedLM"),Adt.forEach(t),P3o=r(V8e," (TAPAS model)"),V8e.forEach(t),B3o=i(O),Ku=n(O,"LI",{});var X8e=s(Ku);bce=n(X8e,"STRONG",{});var Ldt=s(bce);I3o=r(Ldt,"transfo-xl"),Ldt.forEach(t),N3o=r(X8e," \u2014 "),Uj=n(X8e,"A",{href:!0});var ydt=s(Uj);q3o=r(ydt,"TransfoXLLMHeadModel"),ydt.forEach(t),j3o=r(X8e," (Transformer-XL model)"),X8e.forEach(t),D3o=i(O),Zu=n(O,"LI",{});var z8e=s(Zu);vce=n(z8e,"STRONG",{});var xdt=s(vce);G3o=r(xdt,"unispeech"),xdt.forEach(t),O3o=r(z8e," \u2014 "),Jj=n(z8e,"A",{href:!0});var $dt=s(Jj);V3o=r($dt,"UniSpeechForPreTraining"),$dt.forEach(t),X3o=r(z8e," (UniSpeech model)"),z8e.forEach(t),z3o=i(O),e1=n(O,"LI",{});var W8e=s(e1);Fce=n(W8e,"STRONG",{});var kdt=s(Fce);W3o=r(kdt,"unispeech-sat"),kdt.forEach(t),Q3o=r(W8e," \u2014 "),Yj=n(W8e,"A",{href:!0});var Sdt=s(Yj);H3o=r(Sdt,"UniSpeechSatForPreTraining"),Sdt.forEach(t),U3o=r(W8e," (UniSpeechSat model)"),W8e.forEach(t),J3o=i(O),o1=n(O,"LI",{});var Q8e=s(o1);Tce=n(Q8e,"STRONG",{});var Rdt=s(Tce);Y3o=r(Rdt,"visual_bert"),Rdt.forEach(t),K3o=r(Q8e," \u2014 "),Kj=n(Q8e,"A",{href:!0});var Pdt=s(Kj);Z3o=r(Pdt,"VisualBertForPreTraining"),Pdt.forEach(t),e0o=r(Q8e," (VisualBERT model)"),Q8e.forEach(t),o0o=i(O),r1=n(O,"LI",{});var H8e=s(r1);Mce=n(H8e,"STRONG",{});var Bdt=s(Mce);r0o=r(Bdt,"vit_mae"),Bdt.forEach(t),t0o=r(H8e," \u2014 "),Zj=n(H8e,"A",{href:!0});var Idt=s(Zj);a0o=r(Idt,"ViTMAEForPreTraining"),Idt.forEach(t),n0o=r(H8e," (ViTMAE model)"),H8e.forEach(t),s0o=i(O),t1=n(O,"LI",{});var U8e=s(t1);Ece=n(U8e,"STRONG",{});var Ndt=s(Ece);l0o=r(Ndt,"wav2vec2"),Ndt.forEach(t),i0o=r(U8e," \u2014 "),eD=n(U8e,"A",{href:!0});var qdt=s(eD);d0o=r(qdt,"Wav2Vec2ForPreTraining"),qdt.forEach(t),c0o=r(U8e," (Wav2Vec2 model)"),U8e.forEach(t),f0o=i(O),a1=n(O,"LI",{});var J8e=s(a1);Cce=n(J8e,"STRONG",{});var jdt=s(Cce);m0o=r(jdt,"wav2vec2-conformer"),jdt.forEach(t),g0o=r(J8e," \u2014 "),oD=n(J8e,"A",{href:!0});var Ddt=s(oD);h0o=r(Ddt,"Wav2Vec2ConformerForPreTraining"),Ddt.forEach(t),p0o=r(J8e," (Wav2Vec2-Conformer model)"),J8e.forEach(t),_0o=i(O),n1=n(O,"LI",{});var Y8e=s(n1);wce=n(Y8e,"STRONG",{});var Gdt=s(wce);u0o=r(Gdt,"xlm"),Gdt.forEach(t),b0o=r(Y8e," \u2014 "),rD=n(Y8e,"A",{href:!0});var Odt=s(rD);v0o=r(Odt,"XLMWithLMHeadModel"),Odt.forEach(t),F0o=r(Y8e," (XLM model)"),Y8e.forEach(t),T0o=i(O),s1=n(O,"LI",{});var K8e=s(s1);Ace=n(K8e,"STRONG",{});var Vdt=s(Ace);M0o=r(Vdt,"xlm-roberta"),Vdt.forEach(t),E0o=r(K8e," \u2014 "),tD=n(K8e,"A",{href:!0});var Xdt=s(tD);C0o=r(Xdt,"XLMRobertaForMaskedLM"),Xdt.forEach(t),w0o=r(K8e," (XLM-RoBERTa model)"),K8e.forEach(t),A0o=i(O),l1=n(O,"LI",{});var Z8e=s(l1);Lce=n(Z8e,"STRONG",{});var zdt=s(Lce);L0o=r(zdt,"xlm-roberta-xl"),zdt.forEach(t),y0o=r(Z8e," \u2014 "),aD=n(Z8e,"A",{href:!0});var Wdt=s(aD);x0o=r(Wdt,"XLMRobertaXLForMaskedLM"),Wdt.forEach(t),$0o=r(Z8e," (XLM-RoBERTa-XL model)"),Z8e.forEach(t),k0o=i(O),i1=n(O,"LI",{});var e9e=s(i1);yce=n(e9e,"STRONG",{});var Qdt=s(yce);S0o=r(Qdt,"xlnet"),Qdt.forEach(t),R0o=r(e9e," \u2014 "),nD=n(e9e,"A",{href:!0});var Hdt=s(nD);P0o=r(Hdt,"XLNetLMHeadModel"),Hdt.forEach(t),B0o=r(e9e," (XLNet model)"),e9e.forEach(t),O.forEach(t),I0o=i(ra),d1=n(ra,"P",{});var o9e=s(d1);N0o=r(o9e,"The model is set in evaluation mode by default using "),xce=n(o9e,"CODE",{});var Udt=s(xce);q0o=r(Udt,"model.eval()"),Udt.forEach(t),j0o=r(o9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=n(o9e,"CODE",{});var Jdt=s($ce);D0o=r(Jdt,"model.train()"),Jdt.forEach(t),o9e.forEach(t),G0o=i(ra),T(c1.$$.fragment,ra),ra.forEach(t),Xs.forEach(t),nDe=i(f),Ri=n(f,"H2",{class:!0});var dOe=s(Ri);f1=n(dOe,"A",{id:!0,class:!0,href:!0});var Ydt=s(f1);kce=n(Ydt,"SPAN",{});var Kdt=s(kce);T(RL.$$.fragment,Kdt),Kdt.forEach(t),Ydt.forEach(t),O0o=i(dOe),Sce=n(dOe,"SPAN",{});var Zdt=s(Sce);V0o=r(Zdt,"AutoModelForCausalLM"),Zdt.forEach(t),dOe.forEach(t),sDe=i(f),$o=n(f,"DIV",{class:!0});var zs=s($o);T(PL.$$.fragment,zs),X0o=i(zs),Pi=n(zs,"P",{});var uee=s(Pi);z0o=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sD=n(uee,"A",{href:!0});var ect=s(sD);W0o=r(ect,"from_pretrained()"),ect.forEach(t),Q0o=r(uee," class method or the "),lD=n(uee,"A",{href:!0});var oct=s(lD);H0o=r(oct,"from_config()"),oct.forEach(t),U0o=r(uee,` class
method.`),uee.forEach(t),J0o=i(zs),BL=n(zs,"P",{});var cOe=s(BL);Y0o=r(cOe,"This class cannot be instantiated directly using "),Rce=n(cOe,"CODE",{});var rct=s(Rce);K0o=r(rct,"__init__()"),rct.forEach(t),Z0o=r(cOe," (throws an error)."),cOe.forEach(t),ewo=i(zs),nt=n(zs,"DIV",{class:!0});var nw=s(nt);T(IL.$$.fragment,nw),owo=i(nw),Pce=n(nw,"P",{});var tct=s(Pce);rwo=r(tct,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),tct.forEach(t),two=i(nw),Bi=n(nw,"P",{});var bee=s(Bi);awo=r(bee,`Note:
Loading a model from its configuration file does `),Bce=n(bee,"STRONG",{});var act=s(Bce);nwo=r(act,"not"),act.forEach(t),swo=r(bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iD=n(bee,"A",{href:!0});var nct=s(iD);lwo=r(nct,"from_pretrained()"),nct.forEach(t),iwo=r(bee," to load the model weights."),bee.forEach(t),dwo=i(nw),T(m1.$$.fragment,nw),nw.forEach(t),cwo=i(zs),Ke=n(zs,"DIV",{class:!0});var ta=s(Ke);T(NL.$$.fragment,ta),fwo=i(ta),Ice=n(ta,"P",{});var sct=s(Ice);mwo=r(sct,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sct.forEach(t),gwo=i(ta),$a=n(ta,"P",{});var sw=s($a);hwo=r(sw,"The model class to instantiate is selected based on the "),Nce=n(sw,"CODE",{});var lct=s(Nce);pwo=r(lct,"model_type"),lct.forEach(t),_wo=r(sw,` property of the config object (either
passed as an argument or loaded from `),qce=n(sw,"CODE",{});var ict=s(qce);uwo=r(ict,"pretrained_model_name_or_path"),ict.forEach(t),bwo=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=n(sw,"CODE",{});var dct=s(jce);vwo=r(dct,"pretrained_model_name_or_path"),dct.forEach(t),Fwo=r(sw,":"),sw.forEach(t),Two=i(ta),z=n(ta,"UL",{});var W=s(z);g1=n(W,"LI",{});var r9e=s(g1);Dce=n(r9e,"STRONG",{});var cct=s(Dce);Mwo=r(cct,"bart"),cct.forEach(t),Ewo=r(r9e," \u2014 "),dD=n(r9e,"A",{href:!0});var fct=s(dD);Cwo=r(fct,"BartForCausalLM"),fct.forEach(t),wwo=r(r9e," (BART model)"),r9e.forEach(t),Awo=i(W),h1=n(W,"LI",{});var t9e=s(h1);Gce=n(t9e,"STRONG",{});var mct=s(Gce);Lwo=r(mct,"bert"),mct.forEach(t),ywo=r(t9e," \u2014 "),cD=n(t9e,"A",{href:!0});var gct=s(cD);xwo=r(gct,"BertLMHeadModel"),gct.forEach(t),$wo=r(t9e," (BERT model)"),t9e.forEach(t),kwo=i(W),p1=n(W,"LI",{});var a9e=s(p1);Oce=n(a9e,"STRONG",{});var hct=s(Oce);Swo=r(hct,"bert-generation"),hct.forEach(t),Rwo=r(a9e," \u2014 "),fD=n(a9e,"A",{href:!0});var pct=s(fD);Pwo=r(pct,"BertGenerationDecoder"),pct.forEach(t),Bwo=r(a9e," (Bert Generation model)"),a9e.forEach(t),Iwo=i(W),_1=n(W,"LI",{});var n9e=s(_1);Vce=n(n9e,"STRONG",{});var _ct=s(Vce);Nwo=r(_ct,"big_bird"),_ct.forEach(t),qwo=r(n9e," \u2014 "),mD=n(n9e,"A",{href:!0});var uct=s(mD);jwo=r(uct,"BigBirdForCausalLM"),uct.forEach(t),Dwo=r(n9e," (BigBird model)"),n9e.forEach(t),Gwo=i(W),u1=n(W,"LI",{});var s9e=s(u1);Xce=n(s9e,"STRONG",{});var bct=s(Xce);Owo=r(bct,"bigbird_pegasus"),bct.forEach(t),Vwo=r(s9e," \u2014 "),gD=n(s9e,"A",{href:!0});var vct=s(gD);Xwo=r(vct,"BigBirdPegasusForCausalLM"),vct.forEach(t),zwo=r(s9e," (BigBird-Pegasus model)"),s9e.forEach(t),Wwo=i(W),b1=n(W,"LI",{});var l9e=s(b1);zce=n(l9e,"STRONG",{});var Fct=s(zce);Qwo=r(Fct,"blenderbot"),Fct.forEach(t),Hwo=r(l9e," \u2014 "),hD=n(l9e,"A",{href:!0});var Tct=s(hD);Uwo=r(Tct,"BlenderbotForCausalLM"),Tct.forEach(t),Jwo=r(l9e," (Blenderbot model)"),l9e.forEach(t),Ywo=i(W),v1=n(W,"LI",{});var i9e=s(v1);Wce=n(i9e,"STRONG",{});var Mct=s(Wce);Kwo=r(Mct,"blenderbot-small"),Mct.forEach(t),Zwo=r(i9e," \u2014 "),pD=n(i9e,"A",{href:!0});var Ect=s(pD);eAo=r(Ect,"BlenderbotSmallForCausalLM"),Ect.forEach(t),oAo=r(i9e," (BlenderbotSmall model)"),i9e.forEach(t),rAo=i(W),F1=n(W,"LI",{});var d9e=s(F1);Qce=n(d9e,"STRONG",{});var Cct=s(Qce);tAo=r(Cct,"bloom"),Cct.forEach(t),aAo=r(d9e," \u2014 "),_D=n(d9e,"A",{href:!0});var wct=s(_D);nAo=r(wct,"BloomForCausalLM"),wct.forEach(t),sAo=r(d9e," (BLOOM model)"),d9e.forEach(t),lAo=i(W),T1=n(W,"LI",{});var c9e=s(T1);Hce=n(c9e,"STRONG",{});var Act=s(Hce);iAo=r(Act,"camembert"),Act.forEach(t),dAo=r(c9e," \u2014 "),uD=n(c9e,"A",{href:!0});var Lct=s(uD);cAo=r(Lct,"CamembertForCausalLM"),Lct.forEach(t),fAo=r(c9e," (CamemBERT model)"),c9e.forEach(t),mAo=i(W),M1=n(W,"LI",{});var f9e=s(M1);Uce=n(f9e,"STRONG",{});var yct=s(Uce);gAo=r(yct,"ctrl"),yct.forEach(t),hAo=r(f9e," \u2014 "),bD=n(f9e,"A",{href:!0});var xct=s(bD);pAo=r(xct,"CTRLLMHeadModel"),xct.forEach(t),_Ao=r(f9e," (CTRL model)"),f9e.forEach(t),uAo=i(W),E1=n(W,"LI",{});var m9e=s(E1);Jce=n(m9e,"STRONG",{});var $ct=s(Jce);bAo=r($ct,"data2vec-text"),$ct.forEach(t),vAo=r(m9e," \u2014 "),vD=n(m9e,"A",{href:!0});var kct=s(vD);FAo=r(kct,"Data2VecTextForCausalLM"),kct.forEach(t),TAo=r(m9e," (Data2VecText model)"),m9e.forEach(t),MAo=i(W),C1=n(W,"LI",{});var g9e=s(C1);Yce=n(g9e,"STRONG",{});var Sct=s(Yce);EAo=r(Sct,"electra"),Sct.forEach(t),CAo=r(g9e," \u2014 "),FD=n(g9e,"A",{href:!0});var Rct=s(FD);wAo=r(Rct,"ElectraForCausalLM"),Rct.forEach(t),AAo=r(g9e," (ELECTRA model)"),g9e.forEach(t),LAo=i(W),w1=n(W,"LI",{});var h9e=s(w1);Kce=n(h9e,"STRONG",{});var Pct=s(Kce);yAo=r(Pct,"gpt2"),Pct.forEach(t),xAo=r(h9e," \u2014 "),TD=n(h9e,"A",{href:!0});var Bct=s(TD);$Ao=r(Bct,"GPT2LMHeadModel"),Bct.forEach(t),kAo=r(h9e," (OpenAI GPT-2 model)"),h9e.forEach(t),SAo=i(W),A1=n(W,"LI",{});var p9e=s(A1);Zce=n(p9e,"STRONG",{});var Ict=s(Zce);RAo=r(Ict,"gpt_neo"),Ict.forEach(t),PAo=r(p9e," \u2014 "),MD=n(p9e,"A",{href:!0});var Nct=s(MD);BAo=r(Nct,"GPTNeoForCausalLM"),Nct.forEach(t),IAo=r(p9e," (GPT Neo model)"),p9e.forEach(t),NAo=i(W),L1=n(W,"LI",{});var _9e=s(L1);efe=n(_9e,"STRONG",{});var qct=s(efe);qAo=r(qct,"gpt_neox"),qct.forEach(t),jAo=r(_9e," \u2014 "),ED=n(_9e,"A",{href:!0});var jct=s(ED);DAo=r(jct,"GPTNeoXForCausalLM"),jct.forEach(t),GAo=r(_9e," (GPT NeoX model)"),_9e.forEach(t),OAo=i(W),y1=n(W,"LI",{});var u9e=s(y1);ofe=n(u9e,"STRONG",{});var Dct=s(ofe);VAo=r(Dct,"gptj"),Dct.forEach(t),XAo=r(u9e," \u2014 "),CD=n(u9e,"A",{href:!0});var Gct=s(CD);zAo=r(Gct,"GPTJForCausalLM"),Gct.forEach(t),WAo=r(u9e," (GPT-J model)"),u9e.forEach(t),QAo=i(W),x1=n(W,"LI",{});var b9e=s(x1);rfe=n(b9e,"STRONG",{});var Oct=s(rfe);HAo=r(Oct,"marian"),Oct.forEach(t),UAo=r(b9e," \u2014 "),wD=n(b9e,"A",{href:!0});var Vct=s(wD);JAo=r(Vct,"MarianForCausalLM"),Vct.forEach(t),YAo=r(b9e," (Marian model)"),b9e.forEach(t),KAo=i(W),$1=n(W,"LI",{});var v9e=s($1);tfe=n(v9e,"STRONG",{});var Xct=s(tfe);ZAo=r(Xct,"mbart"),Xct.forEach(t),eLo=r(v9e," \u2014 "),AD=n(v9e,"A",{href:!0});var zct=s(AD);oLo=r(zct,"MBartForCausalLM"),zct.forEach(t),rLo=r(v9e," (mBART model)"),v9e.forEach(t),tLo=i(W),k1=n(W,"LI",{});var F9e=s(k1);afe=n(F9e,"STRONG",{});var Wct=s(afe);aLo=r(Wct,"megatron-bert"),Wct.forEach(t),nLo=r(F9e," \u2014 "),LD=n(F9e,"A",{href:!0});var Qct=s(LD);sLo=r(Qct,"MegatronBertForCausalLM"),Qct.forEach(t),lLo=r(F9e," (Megatron-BERT model)"),F9e.forEach(t),iLo=i(W),S1=n(W,"LI",{});var T9e=s(S1);nfe=n(T9e,"STRONG",{});var Hct=s(nfe);dLo=r(Hct,"openai-gpt"),Hct.forEach(t),cLo=r(T9e," \u2014 "),yD=n(T9e,"A",{href:!0});var Uct=s(yD);fLo=r(Uct,"OpenAIGPTLMHeadModel"),Uct.forEach(t),mLo=r(T9e," (OpenAI GPT model)"),T9e.forEach(t),gLo=i(W),R1=n(W,"LI",{});var M9e=s(R1);sfe=n(M9e,"STRONG",{});var Jct=s(sfe);hLo=r(Jct,"opt"),Jct.forEach(t),pLo=r(M9e," \u2014 "),xD=n(M9e,"A",{href:!0});var Yct=s(xD);_Lo=r(Yct,"OPTForCausalLM"),Yct.forEach(t),uLo=r(M9e," (OPT model)"),M9e.forEach(t),bLo=i(W),P1=n(W,"LI",{});var E9e=s(P1);lfe=n(E9e,"STRONG",{});var Kct=s(lfe);vLo=r(Kct,"pegasus"),Kct.forEach(t),FLo=r(E9e," \u2014 "),$D=n(E9e,"A",{href:!0});var Zct=s($D);TLo=r(Zct,"PegasusForCausalLM"),Zct.forEach(t),MLo=r(E9e," (Pegasus model)"),E9e.forEach(t),ELo=i(W),B1=n(W,"LI",{});var C9e=s(B1);ife=n(C9e,"STRONG",{});var eft=s(ife);CLo=r(eft,"plbart"),eft.forEach(t),wLo=r(C9e," \u2014 "),kD=n(C9e,"A",{href:!0});var oft=s(kD);ALo=r(oft,"PLBartForCausalLM"),oft.forEach(t),LLo=r(C9e," (PLBart model)"),C9e.forEach(t),yLo=i(W),I1=n(W,"LI",{});var w9e=s(I1);dfe=n(w9e,"STRONG",{});var rft=s(dfe);xLo=r(rft,"prophetnet"),rft.forEach(t),$Lo=r(w9e," \u2014 "),SD=n(w9e,"A",{href:!0});var tft=s(SD);kLo=r(tft,"ProphetNetForCausalLM"),tft.forEach(t),SLo=r(w9e," (ProphetNet model)"),w9e.forEach(t),RLo=i(W),N1=n(W,"LI",{});var A9e=s(N1);cfe=n(A9e,"STRONG",{});var aft=s(cfe);PLo=r(aft,"qdqbert"),aft.forEach(t),BLo=r(A9e," \u2014 "),RD=n(A9e,"A",{href:!0});var nft=s(RD);ILo=r(nft,"QDQBertLMHeadModel"),nft.forEach(t),NLo=r(A9e," (QDQBert model)"),A9e.forEach(t),qLo=i(W),q1=n(W,"LI",{});var L9e=s(q1);ffe=n(L9e,"STRONG",{});var sft=s(ffe);jLo=r(sft,"reformer"),sft.forEach(t),DLo=r(L9e," \u2014 "),PD=n(L9e,"A",{href:!0});var lft=s(PD);GLo=r(lft,"ReformerModelWithLMHead"),lft.forEach(t),OLo=r(L9e," (Reformer model)"),L9e.forEach(t),VLo=i(W),j1=n(W,"LI",{});var y9e=s(j1);mfe=n(y9e,"STRONG",{});var ift=s(mfe);XLo=r(ift,"rembert"),ift.forEach(t),zLo=r(y9e," \u2014 "),BD=n(y9e,"A",{href:!0});var dft=s(BD);WLo=r(dft,"RemBertForCausalLM"),dft.forEach(t),QLo=r(y9e," (RemBERT model)"),y9e.forEach(t),HLo=i(W),D1=n(W,"LI",{});var x9e=s(D1);gfe=n(x9e,"STRONG",{});var cft=s(gfe);ULo=r(cft,"roberta"),cft.forEach(t),JLo=r(x9e," \u2014 "),ID=n(x9e,"A",{href:!0});var fft=s(ID);YLo=r(fft,"RobertaForCausalLM"),fft.forEach(t),KLo=r(x9e," (RoBERTa model)"),x9e.forEach(t),ZLo=i(W),G1=n(W,"LI",{});var $9e=s(G1);hfe=n($9e,"STRONG",{});var mft=s(hfe);eyo=r(mft,"roformer"),mft.forEach(t),oyo=r($9e," \u2014 "),ND=n($9e,"A",{href:!0});var gft=s(ND);ryo=r(gft,"RoFormerForCausalLM"),gft.forEach(t),tyo=r($9e," (RoFormer model)"),$9e.forEach(t),ayo=i(W),O1=n(W,"LI",{});var k9e=s(O1);pfe=n(k9e,"STRONG",{});var hft=s(pfe);nyo=r(hft,"speech_to_text_2"),hft.forEach(t),syo=r(k9e," \u2014 "),qD=n(k9e,"A",{href:!0});var pft=s(qD);lyo=r(pft,"Speech2Text2ForCausalLM"),pft.forEach(t),iyo=r(k9e," (Speech2Text2 model)"),k9e.forEach(t),dyo=i(W),V1=n(W,"LI",{});var S9e=s(V1);_fe=n(S9e,"STRONG",{});var _ft=s(_fe);cyo=r(_ft,"transfo-xl"),_ft.forEach(t),fyo=r(S9e," \u2014 "),jD=n(S9e,"A",{href:!0});var uft=s(jD);myo=r(uft,"TransfoXLLMHeadModel"),uft.forEach(t),gyo=r(S9e," (Transformer-XL model)"),S9e.forEach(t),hyo=i(W),X1=n(W,"LI",{});var R9e=s(X1);ufe=n(R9e,"STRONG",{});var bft=s(ufe);pyo=r(bft,"trocr"),bft.forEach(t),_yo=r(R9e," \u2014 "),DD=n(R9e,"A",{href:!0});var vft=s(DD);uyo=r(vft,"TrOCRForCausalLM"),vft.forEach(t),byo=r(R9e," (TrOCR model)"),R9e.forEach(t),vyo=i(W),z1=n(W,"LI",{});var P9e=s(z1);bfe=n(P9e,"STRONG",{});var Fft=s(bfe);Fyo=r(Fft,"xglm"),Fft.forEach(t),Tyo=r(P9e," \u2014 "),GD=n(P9e,"A",{href:!0});var Tft=s(GD);Myo=r(Tft,"XGLMForCausalLM"),Tft.forEach(t),Eyo=r(P9e," (XGLM model)"),P9e.forEach(t),Cyo=i(W),W1=n(W,"LI",{});var B9e=s(W1);vfe=n(B9e,"STRONG",{});var Mft=s(vfe);wyo=r(Mft,"xlm"),Mft.forEach(t),Ayo=r(B9e," \u2014 "),OD=n(B9e,"A",{href:!0});var Eft=s(OD);Lyo=r(Eft,"XLMWithLMHeadModel"),Eft.forEach(t),yyo=r(B9e," (XLM model)"),B9e.forEach(t),xyo=i(W),Q1=n(W,"LI",{});var I9e=s(Q1);Ffe=n(I9e,"STRONG",{});var Cft=s(Ffe);$yo=r(Cft,"xlm-prophetnet"),Cft.forEach(t),kyo=r(I9e," \u2014 "),VD=n(I9e,"A",{href:!0});var wft=s(VD);Syo=r(wft,"XLMProphetNetForCausalLM"),wft.forEach(t),Ryo=r(I9e," (XLM-ProphetNet model)"),I9e.forEach(t),Pyo=i(W),H1=n(W,"LI",{});var N9e=s(H1);Tfe=n(N9e,"STRONG",{});var Aft=s(Tfe);Byo=r(Aft,"xlm-roberta"),Aft.forEach(t),Iyo=r(N9e," \u2014 "),XD=n(N9e,"A",{href:!0});var Lft=s(XD);Nyo=r(Lft,"XLMRobertaForCausalLM"),Lft.forEach(t),qyo=r(N9e," (XLM-RoBERTa model)"),N9e.forEach(t),jyo=i(W),U1=n(W,"LI",{});var q9e=s(U1);Mfe=n(q9e,"STRONG",{});var yft=s(Mfe);Dyo=r(yft,"xlm-roberta-xl"),yft.forEach(t),Gyo=r(q9e," \u2014 "),zD=n(q9e,"A",{href:!0});var xft=s(zD);Oyo=r(xft,"XLMRobertaXLForCausalLM"),xft.forEach(t),Vyo=r(q9e," (XLM-RoBERTa-XL model)"),q9e.forEach(t),Xyo=i(W),J1=n(W,"LI",{});var j9e=s(J1);Efe=n(j9e,"STRONG",{});var $ft=s(Efe);zyo=r($ft,"xlnet"),$ft.forEach(t),Wyo=r(j9e," \u2014 "),WD=n(j9e,"A",{href:!0});var kft=s(WD);Qyo=r(kft,"XLNetLMHeadModel"),kft.forEach(t),Hyo=r(j9e," (XLNet model)"),j9e.forEach(t),W.forEach(t),Uyo=i(ta),Y1=n(ta,"P",{});var D9e=s(Y1);Jyo=r(D9e,"The model is set in evaluation mode by default using "),Cfe=n(D9e,"CODE",{});var Sft=s(Cfe);Yyo=r(Sft,"model.eval()"),Sft.forEach(t),Kyo=r(D9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wfe=n(D9e,"CODE",{});var Rft=s(wfe);Zyo=r(Rft,"model.train()"),Rft.forEach(t),D9e.forEach(t),e8o=i(ta),T(K1.$$.fragment,ta),ta.forEach(t),zs.forEach(t),lDe=i(f),Ii=n(f,"H2",{class:!0});var fOe=s(Ii);Z1=n(fOe,"A",{id:!0,class:!0,href:!0});var Pft=s(Z1);Afe=n(Pft,"SPAN",{});var Bft=s(Afe);T(qL.$$.fragment,Bft),Bft.forEach(t),Pft.forEach(t),o8o=i(fOe),Lfe=n(fOe,"SPAN",{});var Ift=s(Lfe);r8o=r(Ift,"AutoModelForMaskedLM"),Ift.forEach(t),fOe.forEach(t),iDe=i(f),ko=n(f,"DIV",{class:!0});var Ws=s(ko);T(jL.$$.fragment,Ws),t8o=i(Ws),Ni=n(Ws,"P",{});var vee=s(Ni);a8o=r(vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),QD=n(vee,"A",{href:!0});var Nft=s(QD);n8o=r(Nft,"from_pretrained()"),Nft.forEach(t),s8o=r(vee," class method or the "),HD=n(vee,"A",{href:!0});var qft=s(HD);l8o=r(qft,"from_config()"),qft.forEach(t),i8o=r(vee,` class
method.`),vee.forEach(t),d8o=i(Ws),DL=n(Ws,"P",{});var mOe=s(DL);c8o=r(mOe,"This class cannot be instantiated directly using "),yfe=n(mOe,"CODE",{});var jft=s(yfe);f8o=r(jft,"__init__()"),jft.forEach(t),m8o=r(mOe," (throws an error)."),mOe.forEach(t),g8o=i(Ws),st=n(Ws,"DIV",{class:!0});var lw=s(st);T(GL.$$.fragment,lw),h8o=i(lw),xfe=n(lw,"P",{});var Dft=s(xfe);p8o=r(Dft,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Dft.forEach(t),_8o=i(lw),qi=n(lw,"P",{});var Fee=s(qi);u8o=r(Fee,`Note:
Loading a model from its configuration file does `),$fe=n(Fee,"STRONG",{});var Gft=s($fe);b8o=r(Gft,"not"),Gft.forEach(t),v8o=r(Fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UD=n(Fee,"A",{href:!0});var Oft=s(UD);F8o=r(Oft,"from_pretrained()"),Oft.forEach(t),T8o=r(Fee," to load the model weights."),Fee.forEach(t),M8o=i(lw),T(eb.$$.fragment,lw),lw.forEach(t),E8o=i(Ws),Ze=n(Ws,"DIV",{class:!0});var aa=s(Ze);T(OL.$$.fragment,aa),C8o=i(aa),kfe=n(aa,"P",{});var Vft=s(kfe);w8o=r(Vft,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Vft.forEach(t),A8o=i(aa),ka=n(aa,"P",{});var iw=s(ka);L8o=r(iw,"The model class to instantiate is selected based on the "),Sfe=n(iw,"CODE",{});var Xft=s(Sfe);y8o=r(Xft,"model_type"),Xft.forEach(t),x8o=r(iw,` property of the config object (either
passed as an argument or loaded from `),Rfe=n(iw,"CODE",{});var zft=s(Rfe);$8o=r(zft,"pretrained_model_name_or_path"),zft.forEach(t),k8o=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=n(iw,"CODE",{});var Wft=s(Pfe);S8o=r(Wft,"pretrained_model_name_or_path"),Wft.forEach(t),R8o=r(iw,":"),iw.forEach(t),P8o=i(aa),Q=n(aa,"UL",{});var H=s(Q);ob=n(H,"LI",{});var G9e=s(ob);Bfe=n(G9e,"STRONG",{});var Qft=s(Bfe);B8o=r(Qft,"albert"),Qft.forEach(t),I8o=r(G9e," \u2014 "),JD=n(G9e,"A",{href:!0});var Hft=s(JD);N8o=r(Hft,"AlbertForMaskedLM"),Hft.forEach(t),q8o=r(G9e," (ALBERT model)"),G9e.forEach(t),j8o=i(H),rb=n(H,"LI",{});var O9e=s(rb);Ife=n(O9e,"STRONG",{});var Uft=s(Ife);D8o=r(Uft,"bart"),Uft.forEach(t),G8o=r(O9e," \u2014 "),YD=n(O9e,"A",{href:!0});var Jft=s(YD);O8o=r(Jft,"BartForConditionalGeneration"),Jft.forEach(t),V8o=r(O9e," (BART model)"),O9e.forEach(t),X8o=i(H),tb=n(H,"LI",{});var V9e=s(tb);Nfe=n(V9e,"STRONG",{});var Yft=s(Nfe);z8o=r(Yft,"bert"),Yft.forEach(t),W8o=r(V9e," \u2014 "),KD=n(V9e,"A",{href:!0});var Kft=s(KD);Q8o=r(Kft,"BertForMaskedLM"),Kft.forEach(t),H8o=r(V9e," (BERT model)"),V9e.forEach(t),U8o=i(H),ab=n(H,"LI",{});var X9e=s(ab);qfe=n(X9e,"STRONG",{});var Zft=s(qfe);J8o=r(Zft,"big_bird"),Zft.forEach(t),Y8o=r(X9e," \u2014 "),ZD=n(X9e,"A",{href:!0});var emt=s(ZD);K8o=r(emt,"BigBirdForMaskedLM"),emt.forEach(t),Z8o=r(X9e," (BigBird model)"),X9e.forEach(t),e9o=i(H),nb=n(H,"LI",{});var z9e=s(nb);jfe=n(z9e,"STRONG",{});var omt=s(jfe);o9o=r(omt,"camembert"),omt.forEach(t),r9o=r(z9e," \u2014 "),eG=n(z9e,"A",{href:!0});var rmt=s(eG);t9o=r(rmt,"CamembertForMaskedLM"),rmt.forEach(t),a9o=r(z9e," (CamemBERT model)"),z9e.forEach(t),n9o=i(H),sb=n(H,"LI",{});var W9e=s(sb);Dfe=n(W9e,"STRONG",{});var tmt=s(Dfe);s9o=r(tmt,"convbert"),tmt.forEach(t),l9o=r(W9e," \u2014 "),oG=n(W9e,"A",{href:!0});var amt=s(oG);i9o=r(amt,"ConvBertForMaskedLM"),amt.forEach(t),d9o=r(W9e," (ConvBERT model)"),W9e.forEach(t),c9o=i(H),lb=n(H,"LI",{});var Q9e=s(lb);Gfe=n(Q9e,"STRONG",{});var nmt=s(Gfe);f9o=r(nmt,"data2vec-text"),nmt.forEach(t),m9o=r(Q9e," \u2014 "),rG=n(Q9e,"A",{href:!0});var smt=s(rG);g9o=r(smt,"Data2VecTextForMaskedLM"),smt.forEach(t),h9o=r(Q9e," (Data2VecText model)"),Q9e.forEach(t),p9o=i(H),ib=n(H,"LI",{});var H9e=s(ib);Ofe=n(H9e,"STRONG",{});var lmt=s(Ofe);_9o=r(lmt,"deberta"),lmt.forEach(t),u9o=r(H9e," \u2014 "),tG=n(H9e,"A",{href:!0});var imt=s(tG);b9o=r(imt,"DebertaForMaskedLM"),imt.forEach(t),v9o=r(H9e," (DeBERTa model)"),H9e.forEach(t),F9o=i(H),db=n(H,"LI",{});var U9e=s(db);Vfe=n(U9e,"STRONG",{});var dmt=s(Vfe);T9o=r(dmt,"deberta-v2"),dmt.forEach(t),M9o=r(U9e," \u2014 "),aG=n(U9e,"A",{href:!0});var cmt=s(aG);E9o=r(cmt,"DebertaV2ForMaskedLM"),cmt.forEach(t),C9o=r(U9e," (DeBERTa-v2 model)"),U9e.forEach(t),w9o=i(H),cb=n(H,"LI",{});var J9e=s(cb);Xfe=n(J9e,"STRONG",{});var fmt=s(Xfe);A9o=r(fmt,"distilbert"),fmt.forEach(t),L9o=r(J9e," \u2014 "),nG=n(J9e,"A",{href:!0});var mmt=s(nG);y9o=r(mmt,"DistilBertForMaskedLM"),mmt.forEach(t),x9o=r(J9e," (DistilBERT model)"),J9e.forEach(t),$9o=i(H),fb=n(H,"LI",{});var Y9e=s(fb);zfe=n(Y9e,"STRONG",{});var gmt=s(zfe);k9o=r(gmt,"electra"),gmt.forEach(t),S9o=r(Y9e," \u2014 "),sG=n(Y9e,"A",{href:!0});var hmt=s(sG);R9o=r(hmt,"ElectraForMaskedLM"),hmt.forEach(t),P9o=r(Y9e," (ELECTRA model)"),Y9e.forEach(t),B9o=i(H),mb=n(H,"LI",{});var K9e=s(mb);Wfe=n(K9e,"STRONG",{});var pmt=s(Wfe);I9o=r(pmt,"flaubert"),pmt.forEach(t),N9o=r(K9e," \u2014 "),lG=n(K9e,"A",{href:!0});var _mt=s(lG);q9o=r(_mt,"FlaubertWithLMHeadModel"),_mt.forEach(t),j9o=r(K9e," (FlauBERT model)"),K9e.forEach(t),D9o=i(H),gb=n(H,"LI",{});var Z9e=s(gb);Qfe=n(Z9e,"STRONG",{});var umt=s(Qfe);G9o=r(umt,"fnet"),umt.forEach(t),O9o=r(Z9e," \u2014 "),iG=n(Z9e,"A",{href:!0});var bmt=s(iG);V9o=r(bmt,"FNetForMaskedLM"),bmt.forEach(t),X9o=r(Z9e," (FNet model)"),Z9e.forEach(t),z9o=i(H),hb=n(H,"LI",{});var exe=s(hb);Hfe=n(exe,"STRONG",{});var vmt=s(Hfe);W9o=r(vmt,"funnel"),vmt.forEach(t),Q9o=r(exe," \u2014 "),dG=n(exe,"A",{href:!0});var Fmt=s(dG);H9o=r(Fmt,"FunnelForMaskedLM"),Fmt.forEach(t),U9o=r(exe," (Funnel Transformer model)"),exe.forEach(t),J9o=i(H),pb=n(H,"LI",{});var oxe=s(pb);Ufe=n(oxe,"STRONG",{});var Tmt=s(Ufe);Y9o=r(Tmt,"ibert"),Tmt.forEach(t),K9o=r(oxe," \u2014 "),cG=n(oxe,"A",{href:!0});var Mmt=s(cG);Z9o=r(Mmt,"IBertForMaskedLM"),Mmt.forEach(t),exo=r(oxe," (I-BERT model)"),oxe.forEach(t),oxo=i(H),_b=n(H,"LI",{});var rxe=s(_b);Jfe=n(rxe,"STRONG",{});var Emt=s(Jfe);rxo=r(Emt,"layoutlm"),Emt.forEach(t),txo=r(rxe," \u2014 "),fG=n(rxe,"A",{href:!0});var Cmt=s(fG);axo=r(Cmt,"LayoutLMForMaskedLM"),Cmt.forEach(t),nxo=r(rxe," (LayoutLM model)"),rxe.forEach(t),sxo=i(H),ub=n(H,"LI",{});var txe=s(ub);Yfe=n(txe,"STRONG",{});var wmt=s(Yfe);lxo=r(wmt,"longformer"),wmt.forEach(t),ixo=r(txe," \u2014 "),mG=n(txe,"A",{href:!0});var Amt=s(mG);dxo=r(Amt,"LongformerForMaskedLM"),Amt.forEach(t),cxo=r(txe," (Longformer model)"),txe.forEach(t),fxo=i(H),bb=n(H,"LI",{});var axe=s(bb);Kfe=n(axe,"STRONG",{});var Lmt=s(Kfe);mxo=r(Lmt,"luke"),Lmt.forEach(t),gxo=r(axe," \u2014 "),gG=n(axe,"A",{href:!0});var ymt=s(gG);hxo=r(ymt,"LukeForMaskedLM"),ymt.forEach(t),pxo=r(axe," (LUKE model)"),axe.forEach(t),_xo=i(H),vb=n(H,"LI",{});var nxe=s(vb);Zfe=n(nxe,"STRONG",{});var xmt=s(Zfe);uxo=r(xmt,"mbart"),xmt.forEach(t),bxo=r(nxe," \u2014 "),hG=n(nxe,"A",{href:!0});var $mt=s(hG);vxo=r($mt,"MBartForConditionalGeneration"),$mt.forEach(t),Fxo=r(nxe," (mBART model)"),nxe.forEach(t),Txo=i(H),Fb=n(H,"LI",{});var sxe=s(Fb);eme=n(sxe,"STRONG",{});var kmt=s(eme);Mxo=r(kmt,"megatron-bert"),kmt.forEach(t),Exo=r(sxe," \u2014 "),pG=n(sxe,"A",{href:!0});var Smt=s(pG);Cxo=r(Smt,"MegatronBertForMaskedLM"),Smt.forEach(t),wxo=r(sxe," (Megatron-BERT model)"),sxe.forEach(t),Axo=i(H),Tb=n(H,"LI",{});var lxe=s(Tb);ome=n(lxe,"STRONG",{});var Rmt=s(ome);Lxo=r(Rmt,"mobilebert"),Rmt.forEach(t),yxo=r(lxe," \u2014 "),_G=n(lxe,"A",{href:!0});var Pmt=s(_G);xxo=r(Pmt,"MobileBertForMaskedLM"),Pmt.forEach(t),$xo=r(lxe," (MobileBERT model)"),lxe.forEach(t),kxo=i(H),Mb=n(H,"LI",{});var ixe=s(Mb);rme=n(ixe,"STRONG",{});var Bmt=s(rme);Sxo=r(Bmt,"mpnet"),Bmt.forEach(t),Rxo=r(ixe," \u2014 "),uG=n(ixe,"A",{href:!0});var Imt=s(uG);Pxo=r(Imt,"MPNetForMaskedLM"),Imt.forEach(t),Bxo=r(ixe," (MPNet model)"),ixe.forEach(t),Ixo=i(H),Eb=n(H,"LI",{});var dxe=s(Eb);tme=n(dxe,"STRONG",{});var Nmt=s(tme);Nxo=r(Nmt,"nystromformer"),Nmt.forEach(t),qxo=r(dxe," \u2014 "),bG=n(dxe,"A",{href:!0});var qmt=s(bG);jxo=r(qmt,"NystromformerForMaskedLM"),qmt.forEach(t),Dxo=r(dxe," (Nystr\xF6mformer model)"),dxe.forEach(t),Gxo=i(H),Cb=n(H,"LI",{});var cxe=s(Cb);ame=n(cxe,"STRONG",{});var jmt=s(ame);Oxo=r(jmt,"perceiver"),jmt.forEach(t),Vxo=r(cxe," \u2014 "),vG=n(cxe,"A",{href:!0});var Dmt=s(vG);Xxo=r(Dmt,"PerceiverForMaskedLM"),Dmt.forEach(t),zxo=r(cxe," (Perceiver model)"),cxe.forEach(t),Wxo=i(H),wb=n(H,"LI",{});var fxe=s(wb);nme=n(fxe,"STRONG",{});var Gmt=s(nme);Qxo=r(Gmt,"qdqbert"),Gmt.forEach(t),Hxo=r(fxe," \u2014 "),FG=n(fxe,"A",{href:!0});var Omt=s(FG);Uxo=r(Omt,"QDQBertForMaskedLM"),Omt.forEach(t),Jxo=r(fxe," (QDQBert model)"),fxe.forEach(t),Yxo=i(H),Ab=n(H,"LI",{});var mxe=s(Ab);sme=n(mxe,"STRONG",{});var Vmt=s(sme);Kxo=r(Vmt,"reformer"),Vmt.forEach(t),Zxo=r(mxe," \u2014 "),TG=n(mxe,"A",{href:!0});var Xmt=s(TG);e$o=r(Xmt,"ReformerForMaskedLM"),Xmt.forEach(t),o$o=r(mxe," (Reformer model)"),mxe.forEach(t),r$o=i(H),Lb=n(H,"LI",{});var gxe=s(Lb);lme=n(gxe,"STRONG",{});var zmt=s(lme);t$o=r(zmt,"rembert"),zmt.forEach(t),a$o=r(gxe," \u2014 "),MG=n(gxe,"A",{href:!0});var Wmt=s(MG);n$o=r(Wmt,"RemBertForMaskedLM"),Wmt.forEach(t),s$o=r(gxe," (RemBERT model)"),gxe.forEach(t),l$o=i(H),yb=n(H,"LI",{});var hxe=s(yb);ime=n(hxe,"STRONG",{});var Qmt=s(ime);i$o=r(Qmt,"roberta"),Qmt.forEach(t),d$o=r(hxe," \u2014 "),EG=n(hxe,"A",{href:!0});var Hmt=s(EG);c$o=r(Hmt,"RobertaForMaskedLM"),Hmt.forEach(t),f$o=r(hxe," (RoBERTa model)"),hxe.forEach(t),m$o=i(H),xb=n(H,"LI",{});var pxe=s(xb);dme=n(pxe,"STRONG",{});var Umt=s(dme);g$o=r(Umt,"roformer"),Umt.forEach(t),h$o=r(pxe," \u2014 "),CG=n(pxe,"A",{href:!0});var Jmt=s(CG);p$o=r(Jmt,"RoFormerForMaskedLM"),Jmt.forEach(t),_$o=r(pxe," (RoFormer model)"),pxe.forEach(t),u$o=i(H),$b=n(H,"LI",{});var _xe=s($b);cme=n(_xe,"STRONG",{});var Ymt=s(cme);b$o=r(Ymt,"squeezebert"),Ymt.forEach(t),v$o=r(_xe," \u2014 "),wG=n(_xe,"A",{href:!0});var Kmt=s(wG);F$o=r(Kmt,"SqueezeBertForMaskedLM"),Kmt.forEach(t),T$o=r(_xe," (SqueezeBERT model)"),_xe.forEach(t),M$o=i(H),kb=n(H,"LI",{});var uxe=s(kb);fme=n(uxe,"STRONG",{});var Zmt=s(fme);E$o=r(Zmt,"tapas"),Zmt.forEach(t),C$o=r(uxe," \u2014 "),AG=n(uxe,"A",{href:!0});var egt=s(AG);w$o=r(egt,"TapasForMaskedLM"),egt.forEach(t),A$o=r(uxe," (TAPAS model)"),uxe.forEach(t),L$o=i(H),Sb=n(H,"LI",{});var bxe=s(Sb);mme=n(bxe,"STRONG",{});var ogt=s(mme);y$o=r(ogt,"wav2vec2"),ogt.forEach(t),x$o=r(bxe," \u2014 "),gme=n(bxe,"CODE",{});var rgt=s(gme);$$o=r(rgt,"Wav2Vec2ForMaskedLM"),rgt.forEach(t),k$o=r(bxe," (Wav2Vec2 model)"),bxe.forEach(t),S$o=i(H),Rb=n(H,"LI",{});var vxe=s(Rb);hme=n(vxe,"STRONG",{});var tgt=s(hme);R$o=r(tgt,"xlm"),tgt.forEach(t),P$o=r(vxe," \u2014 "),LG=n(vxe,"A",{href:!0});var agt=s(LG);B$o=r(agt,"XLMWithLMHeadModel"),agt.forEach(t),I$o=r(vxe," (XLM model)"),vxe.forEach(t),N$o=i(H),Pb=n(H,"LI",{});var Fxe=s(Pb);pme=n(Fxe,"STRONG",{});var ngt=s(pme);q$o=r(ngt,"xlm-roberta"),ngt.forEach(t),j$o=r(Fxe," \u2014 "),yG=n(Fxe,"A",{href:!0});var sgt=s(yG);D$o=r(sgt,"XLMRobertaForMaskedLM"),sgt.forEach(t),G$o=r(Fxe," (XLM-RoBERTa model)"),Fxe.forEach(t),O$o=i(H),Bb=n(H,"LI",{});var Txe=s(Bb);_me=n(Txe,"STRONG",{});var lgt=s(_me);V$o=r(lgt,"xlm-roberta-xl"),lgt.forEach(t),X$o=r(Txe," \u2014 "),xG=n(Txe,"A",{href:!0});var igt=s(xG);z$o=r(igt,"XLMRobertaXLForMaskedLM"),igt.forEach(t),W$o=r(Txe," (XLM-RoBERTa-XL model)"),Txe.forEach(t),Q$o=i(H),Ib=n(H,"LI",{});var Mxe=s(Ib);ume=n(Mxe,"STRONG",{});var dgt=s(ume);H$o=r(dgt,"yoso"),dgt.forEach(t),U$o=r(Mxe," \u2014 "),$G=n(Mxe,"A",{href:!0});var cgt=s($G);J$o=r(cgt,"YosoForMaskedLM"),cgt.forEach(t),Y$o=r(Mxe," (YOSO model)"),Mxe.forEach(t),H.forEach(t),K$o=i(aa),Nb=n(aa,"P",{});var Exe=s(Nb);Z$o=r(Exe,"The model is set in evaluation mode by default using "),bme=n(Exe,"CODE",{});var fgt=s(bme);eko=r(fgt,"model.eval()"),fgt.forEach(t),oko=r(Exe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=n(Exe,"CODE",{});var mgt=s(vme);rko=r(mgt,"model.train()"),mgt.forEach(t),Exe.forEach(t),tko=i(aa),T(qb.$$.fragment,aa),aa.forEach(t),Ws.forEach(t),dDe=i(f),ji=n(f,"H2",{class:!0});var gOe=s(ji);jb=n(gOe,"A",{id:!0,class:!0,href:!0});var ggt=s(jb);Fme=n(ggt,"SPAN",{});var hgt=s(Fme);T(VL.$$.fragment,hgt),hgt.forEach(t),ggt.forEach(t),ako=i(gOe),Tme=n(gOe,"SPAN",{});var pgt=s(Tme);nko=r(pgt,"AutoModelForSeq2SeqLM"),pgt.forEach(t),gOe.forEach(t),cDe=i(f),So=n(f,"DIV",{class:!0});var Qs=s(So);T(XL.$$.fragment,Qs),sko=i(Qs),Di=n(Qs,"P",{});var Tee=s(Di);lko=r(Tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kG=n(Tee,"A",{href:!0});var _gt=s(kG);iko=r(_gt,"from_pretrained()"),_gt.forEach(t),dko=r(Tee," class method or the "),SG=n(Tee,"A",{href:!0});var ugt=s(SG);cko=r(ugt,"from_config()"),ugt.forEach(t),fko=r(Tee,` class
method.`),Tee.forEach(t),mko=i(Qs),zL=n(Qs,"P",{});var hOe=s(zL);gko=r(hOe,"This class cannot be instantiated directly using "),Mme=n(hOe,"CODE",{});var bgt=s(Mme);hko=r(bgt,"__init__()"),bgt.forEach(t),pko=r(hOe," (throws an error)."),hOe.forEach(t),_ko=i(Qs),lt=n(Qs,"DIV",{class:!0});var dw=s(lt);T(WL.$$.fragment,dw),uko=i(dw),Eme=n(dw,"P",{});var vgt=s(Eme);bko=r(vgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vgt.forEach(t),vko=i(dw),Gi=n(dw,"P",{});var Mee=s(Gi);Fko=r(Mee,`Note:
Loading a model from its configuration file does `),Cme=n(Mee,"STRONG",{});var Fgt=s(Cme);Tko=r(Fgt,"not"),Fgt.forEach(t),Mko=r(Mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RG=n(Mee,"A",{href:!0});var Tgt=s(RG);Eko=r(Tgt,"from_pretrained()"),Tgt.forEach(t),Cko=r(Mee," to load the model weights."),Mee.forEach(t),wko=i(dw),T(Db.$$.fragment,dw),dw.forEach(t),Ako=i(Qs),eo=n(Qs,"DIV",{class:!0});var na=s(eo);T(QL.$$.fragment,na),Lko=i(na),wme=n(na,"P",{});var Mgt=s(wme);yko=r(Mgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Mgt.forEach(t),xko=i(na),Sa=n(na,"P",{});var cw=s(Sa);$ko=r(cw,"The model class to instantiate is selected based on the "),Ame=n(cw,"CODE",{});var Egt=s(Ame);kko=r(Egt,"model_type"),Egt.forEach(t),Sko=r(cw,` property of the config object (either
passed as an argument or loaded from `),Lme=n(cw,"CODE",{});var Cgt=s(Lme);Rko=r(Cgt,"pretrained_model_name_or_path"),Cgt.forEach(t),Pko=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=n(cw,"CODE",{});var wgt=s(yme);Bko=r(wgt,"pretrained_model_name_or_path"),wgt.forEach(t),Iko=r(cw,":"),cw.forEach(t),Nko=i(na),ue=n(na,"UL",{});var Fe=s(ue);Gb=n(Fe,"LI",{});var Cxe=s(Gb);xme=n(Cxe,"STRONG",{});var Agt=s(xme);qko=r(Agt,"bart"),Agt.forEach(t),jko=r(Cxe," \u2014 "),PG=n(Cxe,"A",{href:!0});var Lgt=s(PG);Dko=r(Lgt,"BartForConditionalGeneration"),Lgt.forEach(t),Gko=r(Cxe," (BART model)"),Cxe.forEach(t),Oko=i(Fe),Ob=n(Fe,"LI",{});var wxe=s(Ob);$me=n(wxe,"STRONG",{});var ygt=s($me);Vko=r(ygt,"bigbird_pegasus"),ygt.forEach(t),Xko=r(wxe," \u2014 "),BG=n(wxe,"A",{href:!0});var xgt=s(BG);zko=r(xgt,"BigBirdPegasusForConditionalGeneration"),xgt.forEach(t),Wko=r(wxe," (BigBird-Pegasus model)"),wxe.forEach(t),Qko=i(Fe),Vb=n(Fe,"LI",{});var Axe=s(Vb);kme=n(Axe,"STRONG",{});var $gt=s(kme);Hko=r($gt,"blenderbot"),$gt.forEach(t),Uko=r(Axe," \u2014 "),IG=n(Axe,"A",{href:!0});var kgt=s(IG);Jko=r(kgt,"BlenderbotForConditionalGeneration"),kgt.forEach(t),Yko=r(Axe," (Blenderbot model)"),Axe.forEach(t),Kko=i(Fe),Xb=n(Fe,"LI",{});var Lxe=s(Xb);Sme=n(Lxe,"STRONG",{});var Sgt=s(Sme);Zko=r(Sgt,"blenderbot-small"),Sgt.forEach(t),eSo=r(Lxe," \u2014 "),NG=n(Lxe,"A",{href:!0});var Rgt=s(NG);oSo=r(Rgt,"BlenderbotSmallForConditionalGeneration"),Rgt.forEach(t),rSo=r(Lxe," (BlenderbotSmall model)"),Lxe.forEach(t),tSo=i(Fe),zb=n(Fe,"LI",{});var yxe=s(zb);Rme=n(yxe,"STRONG",{});var Pgt=s(Rme);aSo=r(Pgt,"encoder-decoder"),Pgt.forEach(t),nSo=r(yxe," \u2014 "),qG=n(yxe,"A",{href:!0});var Bgt=s(qG);sSo=r(Bgt,"EncoderDecoderModel"),Bgt.forEach(t),lSo=r(yxe," (Encoder decoder model)"),yxe.forEach(t),iSo=i(Fe),Wb=n(Fe,"LI",{});var xxe=s(Wb);Pme=n(xxe,"STRONG",{});var Igt=s(Pme);dSo=r(Igt,"fsmt"),Igt.forEach(t),cSo=r(xxe," \u2014 "),jG=n(xxe,"A",{href:!0});var Ngt=s(jG);fSo=r(Ngt,"FSMTForConditionalGeneration"),Ngt.forEach(t),mSo=r(xxe," (FairSeq Machine-Translation model)"),xxe.forEach(t),gSo=i(Fe),Qb=n(Fe,"LI",{});var $xe=s(Qb);Bme=n($xe,"STRONG",{});var qgt=s(Bme);hSo=r(qgt,"led"),qgt.forEach(t),pSo=r($xe," \u2014 "),DG=n($xe,"A",{href:!0});var jgt=s(DG);_So=r(jgt,"LEDForConditionalGeneration"),jgt.forEach(t),uSo=r($xe," (LED model)"),$xe.forEach(t),bSo=i(Fe),Hb=n(Fe,"LI",{});var kxe=s(Hb);Ime=n(kxe,"STRONG",{});var Dgt=s(Ime);vSo=r(Dgt,"m2m_100"),Dgt.forEach(t),FSo=r(kxe," \u2014 "),GG=n(kxe,"A",{href:!0});var Ggt=s(GG);TSo=r(Ggt,"M2M100ForConditionalGeneration"),Ggt.forEach(t),MSo=r(kxe," (M2M100 model)"),kxe.forEach(t),ESo=i(Fe),Ub=n(Fe,"LI",{});var Sxe=s(Ub);Nme=n(Sxe,"STRONG",{});var Ogt=s(Nme);CSo=r(Ogt,"marian"),Ogt.forEach(t),wSo=r(Sxe," \u2014 "),OG=n(Sxe,"A",{href:!0});var Vgt=s(OG);ASo=r(Vgt,"MarianMTModel"),Vgt.forEach(t),LSo=r(Sxe," (Marian model)"),Sxe.forEach(t),ySo=i(Fe),Jb=n(Fe,"LI",{});var Rxe=s(Jb);qme=n(Rxe,"STRONG",{});var Xgt=s(qme);xSo=r(Xgt,"mbart"),Xgt.forEach(t),$So=r(Rxe," \u2014 "),VG=n(Rxe,"A",{href:!0});var zgt=s(VG);kSo=r(zgt,"MBartForConditionalGeneration"),zgt.forEach(t),SSo=r(Rxe," (mBART model)"),Rxe.forEach(t),RSo=i(Fe),Yb=n(Fe,"LI",{});var Pxe=s(Yb);jme=n(Pxe,"STRONG",{});var Wgt=s(jme);PSo=r(Wgt,"mt5"),Wgt.forEach(t),BSo=r(Pxe," \u2014 "),XG=n(Pxe,"A",{href:!0});var Qgt=s(XG);ISo=r(Qgt,"MT5ForConditionalGeneration"),Qgt.forEach(t),NSo=r(Pxe," (MT5 model)"),Pxe.forEach(t),qSo=i(Fe),Kb=n(Fe,"LI",{});var Bxe=s(Kb);Dme=n(Bxe,"STRONG",{});var Hgt=s(Dme);jSo=r(Hgt,"pegasus"),Hgt.forEach(t),DSo=r(Bxe," \u2014 "),zG=n(Bxe,"A",{href:!0});var Ugt=s(zG);GSo=r(Ugt,"PegasusForConditionalGeneration"),Ugt.forEach(t),OSo=r(Bxe," (Pegasus model)"),Bxe.forEach(t),VSo=i(Fe),Zb=n(Fe,"LI",{});var Ixe=s(Zb);Gme=n(Ixe,"STRONG",{});var Jgt=s(Gme);XSo=r(Jgt,"plbart"),Jgt.forEach(t),zSo=r(Ixe," \u2014 "),WG=n(Ixe,"A",{href:!0});var Ygt=s(WG);WSo=r(Ygt,"PLBartForConditionalGeneration"),Ygt.forEach(t),QSo=r(Ixe," (PLBart model)"),Ixe.forEach(t),HSo=i(Fe),e2=n(Fe,"LI",{});var Nxe=s(e2);Ome=n(Nxe,"STRONG",{});var Kgt=s(Ome);USo=r(Kgt,"prophetnet"),Kgt.forEach(t),JSo=r(Nxe," \u2014 "),QG=n(Nxe,"A",{href:!0});var Zgt=s(QG);YSo=r(Zgt,"ProphetNetForConditionalGeneration"),Zgt.forEach(t),KSo=r(Nxe," (ProphetNet model)"),Nxe.forEach(t),ZSo=i(Fe),o2=n(Fe,"LI",{});var qxe=s(o2);Vme=n(qxe,"STRONG",{});var eht=s(Vme);eRo=r(eht,"t5"),eht.forEach(t),oRo=r(qxe," \u2014 "),HG=n(qxe,"A",{href:!0});var oht=s(HG);rRo=r(oht,"T5ForConditionalGeneration"),oht.forEach(t),tRo=r(qxe," (T5 model)"),qxe.forEach(t),aRo=i(Fe),r2=n(Fe,"LI",{});var jxe=s(r2);Xme=n(jxe,"STRONG",{});var rht=s(Xme);nRo=r(rht,"xlm-prophetnet"),rht.forEach(t),sRo=r(jxe," \u2014 "),UG=n(jxe,"A",{href:!0});var tht=s(UG);lRo=r(tht,"XLMProphetNetForConditionalGeneration"),tht.forEach(t),iRo=r(jxe," (XLM-ProphetNet model)"),jxe.forEach(t),Fe.forEach(t),dRo=i(na),t2=n(na,"P",{});var Dxe=s(t2);cRo=r(Dxe,"The model is set in evaluation mode by default using "),zme=n(Dxe,"CODE",{});var aht=s(zme);fRo=r(aht,"model.eval()"),aht.forEach(t),mRo=r(Dxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wme=n(Dxe,"CODE",{});var nht=s(Wme);gRo=r(nht,"model.train()"),nht.forEach(t),Dxe.forEach(t),hRo=i(na),T(a2.$$.fragment,na),na.forEach(t),Qs.forEach(t),fDe=i(f),Oi=n(f,"H2",{class:!0});var pOe=s(Oi);n2=n(pOe,"A",{id:!0,class:!0,href:!0});var sht=s(n2);Qme=n(sht,"SPAN",{});var lht=s(Qme);T(HL.$$.fragment,lht),lht.forEach(t),sht.forEach(t),pRo=i(pOe),Hme=n(pOe,"SPAN",{});var iht=s(Hme);_Ro=r(iht,"AutoModelForSequenceClassification"),iht.forEach(t),pOe.forEach(t),mDe=i(f),Ro=n(f,"DIV",{class:!0});var Hs=s(Ro);T(UL.$$.fragment,Hs),uRo=i(Hs),Vi=n(Hs,"P",{});var Eee=s(Vi);bRo=r(Eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JG=n(Eee,"A",{href:!0});var dht=s(JG);vRo=r(dht,"from_pretrained()"),dht.forEach(t),FRo=r(Eee," class method or the "),YG=n(Eee,"A",{href:!0});var cht=s(YG);TRo=r(cht,"from_config()"),cht.forEach(t),MRo=r(Eee,` class
method.`),Eee.forEach(t),ERo=i(Hs),JL=n(Hs,"P",{});var _Oe=s(JL);CRo=r(_Oe,"This class cannot be instantiated directly using "),Ume=n(_Oe,"CODE",{});var fht=s(Ume);wRo=r(fht,"__init__()"),fht.forEach(t),ARo=r(_Oe," (throws an error)."),_Oe.forEach(t),LRo=i(Hs),it=n(Hs,"DIV",{class:!0});var fw=s(it);T(YL.$$.fragment,fw),yRo=i(fw),Jme=n(fw,"P",{});var mht=s(Jme);xRo=r(mht,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),mht.forEach(t),$Ro=i(fw),Xi=n(fw,"P",{});var Cee=s(Xi);kRo=r(Cee,`Note:
Loading a model from its configuration file does `),Yme=n(Cee,"STRONG",{});var ght=s(Yme);SRo=r(ght,"not"),ght.forEach(t),RRo=r(Cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=n(Cee,"A",{href:!0});var hht=s(KG);PRo=r(hht,"from_pretrained()"),hht.forEach(t),BRo=r(Cee," to load the model weights."),Cee.forEach(t),IRo=i(fw),T(s2.$$.fragment,fw),fw.forEach(t),NRo=i(Hs),oo=n(Hs,"DIV",{class:!0});var sa=s(oo);T(KL.$$.fragment,sa),qRo=i(sa),Kme=n(sa,"P",{});var pht=s(Kme);jRo=r(pht,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pht.forEach(t),DRo=i(sa),Ra=n(sa,"P",{});var mw=s(Ra);GRo=r(mw,"The model class to instantiate is selected based on the "),Zme=n(mw,"CODE",{});var _ht=s(Zme);ORo=r(_ht,"model_type"),_ht.forEach(t),VRo=r(mw,` property of the config object (either
passed as an argument or loaded from `),ege=n(mw,"CODE",{});var uht=s(ege);XRo=r(uht,"pretrained_model_name_or_path"),uht.forEach(t),zRo=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=n(mw,"CODE",{});var bht=s(oge);WRo=r(bht,"pretrained_model_name_or_path"),bht.forEach(t),QRo=r(mw,":"),mw.forEach(t),HRo=i(sa),N=n(sa,"UL",{});var j=s(N);l2=n(j,"LI",{});var Gxe=s(l2);rge=n(Gxe,"STRONG",{});var vht=s(rge);URo=r(vht,"albert"),vht.forEach(t),JRo=r(Gxe," \u2014 "),ZG=n(Gxe,"A",{href:!0});var Fht=s(ZG);YRo=r(Fht,"AlbertForSequenceClassification"),Fht.forEach(t),KRo=r(Gxe," (ALBERT model)"),Gxe.forEach(t),ZRo=i(j),i2=n(j,"LI",{});var Oxe=s(i2);tge=n(Oxe,"STRONG",{});var Tht=s(tge);ePo=r(Tht,"bart"),Tht.forEach(t),oPo=r(Oxe," \u2014 "),eO=n(Oxe,"A",{href:!0});var Mht=s(eO);rPo=r(Mht,"BartForSequenceClassification"),Mht.forEach(t),tPo=r(Oxe," (BART model)"),Oxe.forEach(t),aPo=i(j),d2=n(j,"LI",{});var Vxe=s(d2);age=n(Vxe,"STRONG",{});var Eht=s(age);nPo=r(Eht,"bert"),Eht.forEach(t),sPo=r(Vxe," \u2014 "),oO=n(Vxe,"A",{href:!0});var Cht=s(oO);lPo=r(Cht,"BertForSequenceClassification"),Cht.forEach(t),iPo=r(Vxe," (BERT model)"),Vxe.forEach(t),dPo=i(j),c2=n(j,"LI",{});var Xxe=s(c2);nge=n(Xxe,"STRONG",{});var wht=s(nge);cPo=r(wht,"big_bird"),wht.forEach(t),fPo=r(Xxe," \u2014 "),rO=n(Xxe,"A",{href:!0});var Aht=s(rO);mPo=r(Aht,"BigBirdForSequenceClassification"),Aht.forEach(t),gPo=r(Xxe," (BigBird model)"),Xxe.forEach(t),hPo=i(j),f2=n(j,"LI",{});var zxe=s(f2);sge=n(zxe,"STRONG",{});var Lht=s(sge);pPo=r(Lht,"bigbird_pegasus"),Lht.forEach(t),_Po=r(zxe," \u2014 "),tO=n(zxe,"A",{href:!0});var yht=s(tO);uPo=r(yht,"BigBirdPegasusForSequenceClassification"),yht.forEach(t),bPo=r(zxe," (BigBird-Pegasus model)"),zxe.forEach(t),vPo=i(j),m2=n(j,"LI",{});var Wxe=s(m2);lge=n(Wxe,"STRONG",{});var xht=s(lge);FPo=r(xht,"camembert"),xht.forEach(t),TPo=r(Wxe," \u2014 "),aO=n(Wxe,"A",{href:!0});var $ht=s(aO);MPo=r($ht,"CamembertForSequenceClassification"),$ht.forEach(t),EPo=r(Wxe," (CamemBERT model)"),Wxe.forEach(t),CPo=i(j),g2=n(j,"LI",{});var Qxe=s(g2);ige=n(Qxe,"STRONG",{});var kht=s(ige);wPo=r(kht,"canine"),kht.forEach(t),APo=r(Qxe," \u2014 "),nO=n(Qxe,"A",{href:!0});var Sht=s(nO);LPo=r(Sht,"CanineForSequenceClassification"),Sht.forEach(t),yPo=r(Qxe," (CANINE model)"),Qxe.forEach(t),xPo=i(j),h2=n(j,"LI",{});var Hxe=s(h2);dge=n(Hxe,"STRONG",{});var Rht=s(dge);$Po=r(Rht,"convbert"),Rht.forEach(t),kPo=r(Hxe," \u2014 "),sO=n(Hxe,"A",{href:!0});var Pht=s(sO);SPo=r(Pht,"ConvBertForSequenceClassification"),Pht.forEach(t),RPo=r(Hxe," (ConvBERT model)"),Hxe.forEach(t),PPo=i(j),p2=n(j,"LI",{});var Uxe=s(p2);cge=n(Uxe,"STRONG",{});var Bht=s(cge);BPo=r(Bht,"ctrl"),Bht.forEach(t),IPo=r(Uxe," \u2014 "),lO=n(Uxe,"A",{href:!0});var Iht=s(lO);NPo=r(Iht,"CTRLForSequenceClassification"),Iht.forEach(t),qPo=r(Uxe," (CTRL model)"),Uxe.forEach(t),jPo=i(j),_2=n(j,"LI",{});var Jxe=s(_2);fge=n(Jxe,"STRONG",{});var Nht=s(fge);DPo=r(Nht,"data2vec-text"),Nht.forEach(t),GPo=r(Jxe," \u2014 "),iO=n(Jxe,"A",{href:!0});var qht=s(iO);OPo=r(qht,"Data2VecTextForSequenceClassification"),qht.forEach(t),VPo=r(Jxe," (Data2VecText model)"),Jxe.forEach(t),XPo=i(j),u2=n(j,"LI",{});var Yxe=s(u2);mge=n(Yxe,"STRONG",{});var jht=s(mge);zPo=r(jht,"deberta"),jht.forEach(t),WPo=r(Yxe," \u2014 "),dO=n(Yxe,"A",{href:!0});var Dht=s(dO);QPo=r(Dht,"DebertaForSequenceClassification"),Dht.forEach(t),HPo=r(Yxe," (DeBERTa model)"),Yxe.forEach(t),UPo=i(j),b2=n(j,"LI",{});var Kxe=s(b2);gge=n(Kxe,"STRONG",{});var Ght=s(gge);JPo=r(Ght,"deberta-v2"),Ght.forEach(t),YPo=r(Kxe," \u2014 "),cO=n(Kxe,"A",{href:!0});var Oht=s(cO);KPo=r(Oht,"DebertaV2ForSequenceClassification"),Oht.forEach(t),ZPo=r(Kxe," (DeBERTa-v2 model)"),Kxe.forEach(t),eBo=i(j),v2=n(j,"LI",{});var Zxe=s(v2);hge=n(Zxe,"STRONG",{});var Vht=s(hge);oBo=r(Vht,"distilbert"),Vht.forEach(t),rBo=r(Zxe," \u2014 "),fO=n(Zxe,"A",{href:!0});var Xht=s(fO);tBo=r(Xht,"DistilBertForSequenceClassification"),Xht.forEach(t),aBo=r(Zxe," (DistilBERT model)"),Zxe.forEach(t),nBo=i(j),F2=n(j,"LI",{});var e$e=s(F2);pge=n(e$e,"STRONG",{});var zht=s(pge);sBo=r(zht,"electra"),zht.forEach(t),lBo=r(e$e," \u2014 "),mO=n(e$e,"A",{href:!0});var Wht=s(mO);iBo=r(Wht,"ElectraForSequenceClassification"),Wht.forEach(t),dBo=r(e$e," (ELECTRA model)"),e$e.forEach(t),cBo=i(j),T2=n(j,"LI",{});var o$e=s(T2);_ge=n(o$e,"STRONG",{});var Qht=s(_ge);fBo=r(Qht,"flaubert"),Qht.forEach(t),mBo=r(o$e," \u2014 "),gO=n(o$e,"A",{href:!0});var Hht=s(gO);gBo=r(Hht,"FlaubertForSequenceClassification"),Hht.forEach(t),hBo=r(o$e," (FlauBERT model)"),o$e.forEach(t),pBo=i(j),M2=n(j,"LI",{});var r$e=s(M2);uge=n(r$e,"STRONG",{});var Uht=s(uge);_Bo=r(Uht,"fnet"),Uht.forEach(t),uBo=r(r$e," \u2014 "),hO=n(r$e,"A",{href:!0});var Jht=s(hO);bBo=r(Jht,"FNetForSequenceClassification"),Jht.forEach(t),vBo=r(r$e," (FNet model)"),r$e.forEach(t),FBo=i(j),E2=n(j,"LI",{});var t$e=s(E2);bge=n(t$e,"STRONG",{});var Yht=s(bge);TBo=r(Yht,"funnel"),Yht.forEach(t),MBo=r(t$e," \u2014 "),pO=n(t$e,"A",{href:!0});var Kht=s(pO);EBo=r(Kht,"FunnelForSequenceClassification"),Kht.forEach(t),CBo=r(t$e," (Funnel Transformer model)"),t$e.forEach(t),wBo=i(j),C2=n(j,"LI",{});var a$e=s(C2);vge=n(a$e,"STRONG",{});var Zht=s(vge);ABo=r(Zht,"gpt2"),Zht.forEach(t),LBo=r(a$e," \u2014 "),_O=n(a$e,"A",{href:!0});var ept=s(_O);yBo=r(ept,"GPT2ForSequenceClassification"),ept.forEach(t),xBo=r(a$e," (OpenAI GPT-2 model)"),a$e.forEach(t),$Bo=i(j),w2=n(j,"LI",{});var n$e=s(w2);Fge=n(n$e,"STRONG",{});var opt=s(Fge);kBo=r(opt,"gpt_neo"),opt.forEach(t),SBo=r(n$e," \u2014 "),uO=n(n$e,"A",{href:!0});var rpt=s(uO);RBo=r(rpt,"GPTNeoForSequenceClassification"),rpt.forEach(t),PBo=r(n$e," (GPT Neo model)"),n$e.forEach(t),BBo=i(j),A2=n(j,"LI",{});var s$e=s(A2);Tge=n(s$e,"STRONG",{});var tpt=s(Tge);IBo=r(tpt,"gptj"),tpt.forEach(t),NBo=r(s$e," \u2014 "),bO=n(s$e,"A",{href:!0});var apt=s(bO);qBo=r(apt,"GPTJForSequenceClassification"),apt.forEach(t),jBo=r(s$e," (GPT-J model)"),s$e.forEach(t),DBo=i(j),L2=n(j,"LI",{});var l$e=s(L2);Mge=n(l$e,"STRONG",{});var npt=s(Mge);GBo=r(npt,"ibert"),npt.forEach(t),OBo=r(l$e," \u2014 "),vO=n(l$e,"A",{href:!0});var spt=s(vO);VBo=r(spt,"IBertForSequenceClassification"),spt.forEach(t),XBo=r(l$e," (I-BERT model)"),l$e.forEach(t),zBo=i(j),y2=n(j,"LI",{});var i$e=s(y2);Ege=n(i$e,"STRONG",{});var lpt=s(Ege);WBo=r(lpt,"layoutlm"),lpt.forEach(t),QBo=r(i$e," \u2014 "),FO=n(i$e,"A",{href:!0});var ipt=s(FO);HBo=r(ipt,"LayoutLMForSequenceClassification"),ipt.forEach(t),UBo=r(i$e," (LayoutLM model)"),i$e.forEach(t),JBo=i(j),x2=n(j,"LI",{});var d$e=s(x2);Cge=n(d$e,"STRONG",{});var dpt=s(Cge);YBo=r(dpt,"layoutlmv2"),dpt.forEach(t),KBo=r(d$e," \u2014 "),TO=n(d$e,"A",{href:!0});var cpt=s(TO);ZBo=r(cpt,"LayoutLMv2ForSequenceClassification"),cpt.forEach(t),eIo=r(d$e," (LayoutLMv2 model)"),d$e.forEach(t),oIo=i(j),$2=n(j,"LI",{});var c$e=s($2);wge=n(c$e,"STRONG",{});var fpt=s(wge);rIo=r(fpt,"layoutlmv3"),fpt.forEach(t),tIo=r(c$e," \u2014 "),MO=n(c$e,"A",{href:!0});var mpt=s(MO);aIo=r(mpt,"LayoutLMv3ForSequenceClassification"),mpt.forEach(t),nIo=r(c$e," (LayoutLMv3 model)"),c$e.forEach(t),sIo=i(j),k2=n(j,"LI",{});var f$e=s(k2);Age=n(f$e,"STRONG",{});var gpt=s(Age);lIo=r(gpt,"led"),gpt.forEach(t),iIo=r(f$e," \u2014 "),EO=n(f$e,"A",{href:!0});var hpt=s(EO);dIo=r(hpt,"LEDForSequenceClassification"),hpt.forEach(t),cIo=r(f$e," (LED model)"),f$e.forEach(t),fIo=i(j),S2=n(j,"LI",{});var m$e=s(S2);Lge=n(m$e,"STRONG",{});var ppt=s(Lge);mIo=r(ppt,"longformer"),ppt.forEach(t),gIo=r(m$e," \u2014 "),CO=n(m$e,"A",{href:!0});var _pt=s(CO);hIo=r(_pt,"LongformerForSequenceClassification"),_pt.forEach(t),pIo=r(m$e," (Longformer model)"),m$e.forEach(t),_Io=i(j),R2=n(j,"LI",{});var g$e=s(R2);yge=n(g$e,"STRONG",{});var upt=s(yge);uIo=r(upt,"mbart"),upt.forEach(t),bIo=r(g$e," \u2014 "),wO=n(g$e,"A",{href:!0});var bpt=s(wO);vIo=r(bpt,"MBartForSequenceClassification"),bpt.forEach(t),FIo=r(g$e," (mBART model)"),g$e.forEach(t),TIo=i(j),P2=n(j,"LI",{});var h$e=s(P2);xge=n(h$e,"STRONG",{});var vpt=s(xge);MIo=r(vpt,"megatron-bert"),vpt.forEach(t),EIo=r(h$e," \u2014 "),AO=n(h$e,"A",{href:!0});var Fpt=s(AO);CIo=r(Fpt,"MegatronBertForSequenceClassification"),Fpt.forEach(t),wIo=r(h$e," (Megatron-BERT model)"),h$e.forEach(t),AIo=i(j),B2=n(j,"LI",{});var p$e=s(B2);$ge=n(p$e,"STRONG",{});var Tpt=s($ge);LIo=r(Tpt,"mobilebert"),Tpt.forEach(t),yIo=r(p$e," \u2014 "),LO=n(p$e,"A",{href:!0});var Mpt=s(LO);xIo=r(Mpt,"MobileBertForSequenceClassification"),Mpt.forEach(t),$Io=r(p$e," (MobileBERT model)"),p$e.forEach(t),kIo=i(j),I2=n(j,"LI",{});var _$e=s(I2);kge=n(_$e,"STRONG",{});var Ept=s(kge);SIo=r(Ept,"mpnet"),Ept.forEach(t),RIo=r(_$e," \u2014 "),yO=n(_$e,"A",{href:!0});var Cpt=s(yO);PIo=r(Cpt,"MPNetForSequenceClassification"),Cpt.forEach(t),BIo=r(_$e," (MPNet model)"),_$e.forEach(t),IIo=i(j),N2=n(j,"LI",{});var u$e=s(N2);Sge=n(u$e,"STRONG",{});var wpt=s(Sge);NIo=r(wpt,"nystromformer"),wpt.forEach(t),qIo=r(u$e," \u2014 "),xO=n(u$e,"A",{href:!0});var Apt=s(xO);jIo=r(Apt,"NystromformerForSequenceClassification"),Apt.forEach(t),DIo=r(u$e," (Nystr\xF6mformer model)"),u$e.forEach(t),GIo=i(j),q2=n(j,"LI",{});var b$e=s(q2);Rge=n(b$e,"STRONG",{});var Lpt=s(Rge);OIo=r(Lpt,"openai-gpt"),Lpt.forEach(t),VIo=r(b$e," \u2014 "),$O=n(b$e,"A",{href:!0});var ypt=s($O);XIo=r(ypt,"OpenAIGPTForSequenceClassification"),ypt.forEach(t),zIo=r(b$e," (OpenAI GPT model)"),b$e.forEach(t),WIo=i(j),j2=n(j,"LI",{});var v$e=s(j2);Pge=n(v$e,"STRONG",{});var xpt=s(Pge);QIo=r(xpt,"perceiver"),xpt.forEach(t),HIo=r(v$e," \u2014 "),kO=n(v$e,"A",{href:!0});var $pt=s(kO);UIo=r($pt,"PerceiverForSequenceClassification"),$pt.forEach(t),JIo=r(v$e," (Perceiver model)"),v$e.forEach(t),YIo=i(j),D2=n(j,"LI",{});var F$e=s(D2);Bge=n(F$e,"STRONG",{});var kpt=s(Bge);KIo=r(kpt,"plbart"),kpt.forEach(t),ZIo=r(F$e," \u2014 "),SO=n(F$e,"A",{href:!0});var Spt=s(SO);eNo=r(Spt,"PLBartForSequenceClassification"),Spt.forEach(t),oNo=r(F$e," (PLBart model)"),F$e.forEach(t),rNo=i(j),G2=n(j,"LI",{});var T$e=s(G2);Ige=n(T$e,"STRONG",{});var Rpt=s(Ige);tNo=r(Rpt,"qdqbert"),Rpt.forEach(t),aNo=r(T$e," \u2014 "),RO=n(T$e,"A",{href:!0});var Ppt=s(RO);nNo=r(Ppt,"QDQBertForSequenceClassification"),Ppt.forEach(t),sNo=r(T$e," (QDQBert model)"),T$e.forEach(t),lNo=i(j),O2=n(j,"LI",{});var M$e=s(O2);Nge=n(M$e,"STRONG",{});var Bpt=s(Nge);iNo=r(Bpt,"reformer"),Bpt.forEach(t),dNo=r(M$e," \u2014 "),PO=n(M$e,"A",{href:!0});var Ipt=s(PO);cNo=r(Ipt,"ReformerForSequenceClassification"),Ipt.forEach(t),fNo=r(M$e," (Reformer model)"),M$e.forEach(t),mNo=i(j),V2=n(j,"LI",{});var E$e=s(V2);qge=n(E$e,"STRONG",{});var Npt=s(qge);gNo=r(Npt,"rembert"),Npt.forEach(t),hNo=r(E$e," \u2014 "),BO=n(E$e,"A",{href:!0});var qpt=s(BO);pNo=r(qpt,"RemBertForSequenceClassification"),qpt.forEach(t),_No=r(E$e," (RemBERT model)"),E$e.forEach(t),uNo=i(j),X2=n(j,"LI",{});var C$e=s(X2);jge=n(C$e,"STRONG",{});var jpt=s(jge);bNo=r(jpt,"roberta"),jpt.forEach(t),vNo=r(C$e," \u2014 "),IO=n(C$e,"A",{href:!0});var Dpt=s(IO);FNo=r(Dpt,"RobertaForSequenceClassification"),Dpt.forEach(t),TNo=r(C$e," (RoBERTa model)"),C$e.forEach(t),MNo=i(j),z2=n(j,"LI",{});var w$e=s(z2);Dge=n(w$e,"STRONG",{});var Gpt=s(Dge);ENo=r(Gpt,"roformer"),Gpt.forEach(t),CNo=r(w$e," \u2014 "),NO=n(w$e,"A",{href:!0});var Opt=s(NO);wNo=r(Opt,"RoFormerForSequenceClassification"),Opt.forEach(t),ANo=r(w$e," (RoFormer model)"),w$e.forEach(t),LNo=i(j),W2=n(j,"LI",{});var A$e=s(W2);Gge=n(A$e,"STRONG",{});var Vpt=s(Gge);yNo=r(Vpt,"squeezebert"),Vpt.forEach(t),xNo=r(A$e," \u2014 "),qO=n(A$e,"A",{href:!0});var Xpt=s(qO);$No=r(Xpt,"SqueezeBertForSequenceClassification"),Xpt.forEach(t),kNo=r(A$e," (SqueezeBERT model)"),A$e.forEach(t),SNo=i(j),Q2=n(j,"LI",{});var L$e=s(Q2);Oge=n(L$e,"STRONG",{});var zpt=s(Oge);RNo=r(zpt,"tapas"),zpt.forEach(t),PNo=r(L$e," \u2014 "),jO=n(L$e,"A",{href:!0});var Wpt=s(jO);BNo=r(Wpt,"TapasForSequenceClassification"),Wpt.forEach(t),INo=r(L$e," (TAPAS model)"),L$e.forEach(t),NNo=i(j),H2=n(j,"LI",{});var y$e=s(H2);Vge=n(y$e,"STRONG",{});var Qpt=s(Vge);qNo=r(Qpt,"transfo-xl"),Qpt.forEach(t),jNo=r(y$e," \u2014 "),DO=n(y$e,"A",{href:!0});var Hpt=s(DO);DNo=r(Hpt,"TransfoXLForSequenceClassification"),Hpt.forEach(t),GNo=r(y$e," (Transformer-XL model)"),y$e.forEach(t),ONo=i(j),U2=n(j,"LI",{});var x$e=s(U2);Xge=n(x$e,"STRONG",{});var Upt=s(Xge);VNo=r(Upt,"xlm"),Upt.forEach(t),XNo=r(x$e," \u2014 "),GO=n(x$e,"A",{href:!0});var Jpt=s(GO);zNo=r(Jpt,"XLMForSequenceClassification"),Jpt.forEach(t),WNo=r(x$e," (XLM model)"),x$e.forEach(t),QNo=i(j),J2=n(j,"LI",{});var $$e=s(J2);zge=n($$e,"STRONG",{});var Ypt=s(zge);HNo=r(Ypt,"xlm-roberta"),Ypt.forEach(t),UNo=r($$e," \u2014 "),OO=n($$e,"A",{href:!0});var Kpt=s(OO);JNo=r(Kpt,"XLMRobertaForSequenceClassification"),Kpt.forEach(t),YNo=r($$e," (XLM-RoBERTa model)"),$$e.forEach(t),KNo=i(j),Y2=n(j,"LI",{});var k$e=s(Y2);Wge=n(k$e,"STRONG",{});var Zpt=s(Wge);ZNo=r(Zpt,"xlm-roberta-xl"),Zpt.forEach(t),eqo=r(k$e," \u2014 "),VO=n(k$e,"A",{href:!0});var e_t=s(VO);oqo=r(e_t,"XLMRobertaXLForSequenceClassification"),e_t.forEach(t),rqo=r(k$e," (XLM-RoBERTa-XL model)"),k$e.forEach(t),tqo=i(j),K2=n(j,"LI",{});var S$e=s(K2);Qge=n(S$e,"STRONG",{});var o_t=s(Qge);aqo=r(o_t,"xlnet"),o_t.forEach(t),nqo=r(S$e," \u2014 "),XO=n(S$e,"A",{href:!0});var r_t=s(XO);sqo=r(r_t,"XLNetForSequenceClassification"),r_t.forEach(t),lqo=r(S$e," (XLNet model)"),S$e.forEach(t),iqo=i(j),Z2=n(j,"LI",{});var R$e=s(Z2);Hge=n(R$e,"STRONG",{});var t_t=s(Hge);dqo=r(t_t,"yoso"),t_t.forEach(t),cqo=r(R$e," \u2014 "),zO=n(R$e,"A",{href:!0});var a_t=s(zO);fqo=r(a_t,"YosoForSequenceClassification"),a_t.forEach(t),mqo=r(R$e," (YOSO model)"),R$e.forEach(t),j.forEach(t),gqo=i(sa),e4=n(sa,"P",{});var P$e=s(e4);hqo=r(P$e,"The model is set in evaluation mode by default using "),Uge=n(P$e,"CODE",{});var n_t=s(Uge);pqo=r(n_t,"model.eval()"),n_t.forEach(t),_qo=r(P$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jge=n(P$e,"CODE",{});var s_t=s(Jge);uqo=r(s_t,"model.train()"),s_t.forEach(t),P$e.forEach(t),bqo=i(sa),T(o4.$$.fragment,sa),sa.forEach(t),Hs.forEach(t),gDe=i(f),zi=n(f,"H2",{class:!0});var uOe=s(zi);r4=n(uOe,"A",{id:!0,class:!0,href:!0});var l_t=s(r4);Yge=n(l_t,"SPAN",{});var i_t=s(Yge);T(ZL.$$.fragment,i_t),i_t.forEach(t),l_t.forEach(t),vqo=i(uOe),Kge=n(uOe,"SPAN",{});var d_t=s(Kge);Fqo=r(d_t,"AutoModelForMultipleChoice"),d_t.forEach(t),uOe.forEach(t),hDe=i(f),Po=n(f,"DIV",{class:!0});var Us=s(Po);T(ey.$$.fragment,Us),Tqo=i(Us),Wi=n(Us,"P",{});var wee=s(Wi);Mqo=r(wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WO=n(wee,"A",{href:!0});var c_t=s(WO);Eqo=r(c_t,"from_pretrained()"),c_t.forEach(t),Cqo=r(wee," class method or the "),QO=n(wee,"A",{href:!0});var f_t=s(QO);wqo=r(f_t,"from_config()"),f_t.forEach(t),Aqo=r(wee,` class
method.`),wee.forEach(t),Lqo=i(Us),oy=n(Us,"P",{});var bOe=s(oy);yqo=r(bOe,"This class cannot be instantiated directly using "),Zge=n(bOe,"CODE",{});var m_t=s(Zge);xqo=r(m_t,"__init__()"),m_t.forEach(t),$qo=r(bOe," (throws an error)."),bOe.forEach(t),kqo=i(Us),dt=n(Us,"DIV",{class:!0});var gw=s(dt);T(ry.$$.fragment,gw),Sqo=i(gw),ehe=n(gw,"P",{});var g_t=s(ehe);Rqo=r(g_t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),g_t.forEach(t),Pqo=i(gw),Qi=n(gw,"P",{});var Aee=s(Qi);Bqo=r(Aee,`Note:
Loading a model from its configuration file does `),ohe=n(Aee,"STRONG",{});var h_t=s(ohe);Iqo=r(h_t,"not"),h_t.forEach(t),Nqo=r(Aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=n(Aee,"A",{href:!0});var p_t=s(HO);qqo=r(p_t,"from_pretrained()"),p_t.forEach(t),jqo=r(Aee," to load the model weights."),Aee.forEach(t),Dqo=i(gw),T(t4.$$.fragment,gw),gw.forEach(t),Gqo=i(Us),ro=n(Us,"DIV",{class:!0});var la=s(ro);T(ty.$$.fragment,la),Oqo=i(la),rhe=n(la,"P",{});var __t=s(rhe);Vqo=r(__t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),__t.forEach(t),Xqo=i(la),Pa=n(la,"P",{});var hw=s(Pa);zqo=r(hw,"The model class to instantiate is selected based on the "),the=n(hw,"CODE",{});var u_t=s(the);Wqo=r(u_t,"model_type"),u_t.forEach(t),Qqo=r(hw,` property of the config object (either
passed as an argument or loaded from `),ahe=n(hw,"CODE",{});var b_t=s(ahe);Hqo=r(b_t,"pretrained_model_name_or_path"),b_t.forEach(t),Uqo=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=n(hw,"CODE",{});var v_t=s(nhe);Jqo=r(v_t,"pretrained_model_name_or_path"),v_t.forEach(t),Yqo=r(hw,":"),hw.forEach(t),Kqo=i(la),Z=n(la,"UL",{});var ee=s(Z);a4=n(ee,"LI",{});var B$e=s(a4);she=n(B$e,"STRONG",{});var F_t=s(she);Zqo=r(F_t,"albert"),F_t.forEach(t),ejo=r(B$e," \u2014 "),UO=n(B$e,"A",{href:!0});var T_t=s(UO);ojo=r(T_t,"AlbertForMultipleChoice"),T_t.forEach(t),rjo=r(B$e," (ALBERT model)"),B$e.forEach(t),tjo=i(ee),n4=n(ee,"LI",{});var I$e=s(n4);lhe=n(I$e,"STRONG",{});var M_t=s(lhe);ajo=r(M_t,"bert"),M_t.forEach(t),njo=r(I$e," \u2014 "),JO=n(I$e,"A",{href:!0});var E_t=s(JO);sjo=r(E_t,"BertForMultipleChoice"),E_t.forEach(t),ljo=r(I$e," (BERT model)"),I$e.forEach(t),ijo=i(ee),s4=n(ee,"LI",{});var N$e=s(s4);ihe=n(N$e,"STRONG",{});var C_t=s(ihe);djo=r(C_t,"big_bird"),C_t.forEach(t),cjo=r(N$e," \u2014 "),YO=n(N$e,"A",{href:!0});var w_t=s(YO);fjo=r(w_t,"BigBirdForMultipleChoice"),w_t.forEach(t),mjo=r(N$e," (BigBird model)"),N$e.forEach(t),gjo=i(ee),l4=n(ee,"LI",{});var q$e=s(l4);dhe=n(q$e,"STRONG",{});var A_t=s(dhe);hjo=r(A_t,"camembert"),A_t.forEach(t),pjo=r(q$e," \u2014 "),KO=n(q$e,"A",{href:!0});var L_t=s(KO);_jo=r(L_t,"CamembertForMultipleChoice"),L_t.forEach(t),ujo=r(q$e," (CamemBERT model)"),q$e.forEach(t),bjo=i(ee),i4=n(ee,"LI",{});var j$e=s(i4);che=n(j$e,"STRONG",{});var y_t=s(che);vjo=r(y_t,"canine"),y_t.forEach(t),Fjo=r(j$e," \u2014 "),ZO=n(j$e,"A",{href:!0});var x_t=s(ZO);Tjo=r(x_t,"CanineForMultipleChoice"),x_t.forEach(t),Mjo=r(j$e," (CANINE model)"),j$e.forEach(t),Ejo=i(ee),d4=n(ee,"LI",{});var D$e=s(d4);fhe=n(D$e,"STRONG",{});var $_t=s(fhe);Cjo=r($_t,"convbert"),$_t.forEach(t),wjo=r(D$e," \u2014 "),eV=n(D$e,"A",{href:!0});var k_t=s(eV);Ajo=r(k_t,"ConvBertForMultipleChoice"),k_t.forEach(t),Ljo=r(D$e," (ConvBERT model)"),D$e.forEach(t),yjo=i(ee),c4=n(ee,"LI",{});var G$e=s(c4);mhe=n(G$e,"STRONG",{});var S_t=s(mhe);xjo=r(S_t,"data2vec-text"),S_t.forEach(t),$jo=r(G$e," \u2014 "),oV=n(G$e,"A",{href:!0});var R_t=s(oV);kjo=r(R_t,"Data2VecTextForMultipleChoice"),R_t.forEach(t),Sjo=r(G$e," (Data2VecText model)"),G$e.forEach(t),Rjo=i(ee),f4=n(ee,"LI",{});var O$e=s(f4);ghe=n(O$e,"STRONG",{});var P_t=s(ghe);Pjo=r(P_t,"deberta-v2"),P_t.forEach(t),Bjo=r(O$e," \u2014 "),rV=n(O$e,"A",{href:!0});var B_t=s(rV);Ijo=r(B_t,"DebertaV2ForMultipleChoice"),B_t.forEach(t),Njo=r(O$e," (DeBERTa-v2 model)"),O$e.forEach(t),qjo=i(ee),m4=n(ee,"LI",{});var V$e=s(m4);hhe=n(V$e,"STRONG",{});var I_t=s(hhe);jjo=r(I_t,"distilbert"),I_t.forEach(t),Djo=r(V$e," \u2014 "),tV=n(V$e,"A",{href:!0});var N_t=s(tV);Gjo=r(N_t,"DistilBertForMultipleChoice"),N_t.forEach(t),Ojo=r(V$e," (DistilBERT model)"),V$e.forEach(t),Vjo=i(ee),g4=n(ee,"LI",{});var X$e=s(g4);phe=n(X$e,"STRONG",{});var q_t=s(phe);Xjo=r(q_t,"electra"),q_t.forEach(t),zjo=r(X$e," \u2014 "),aV=n(X$e,"A",{href:!0});var j_t=s(aV);Wjo=r(j_t,"ElectraForMultipleChoice"),j_t.forEach(t),Qjo=r(X$e," (ELECTRA model)"),X$e.forEach(t),Hjo=i(ee),h4=n(ee,"LI",{});var z$e=s(h4);_he=n(z$e,"STRONG",{});var D_t=s(_he);Ujo=r(D_t,"flaubert"),D_t.forEach(t),Jjo=r(z$e," \u2014 "),nV=n(z$e,"A",{href:!0});var G_t=s(nV);Yjo=r(G_t,"FlaubertForMultipleChoice"),G_t.forEach(t),Kjo=r(z$e," (FlauBERT model)"),z$e.forEach(t),Zjo=i(ee),p4=n(ee,"LI",{});var W$e=s(p4);uhe=n(W$e,"STRONG",{});var O_t=s(uhe);eDo=r(O_t,"fnet"),O_t.forEach(t),oDo=r(W$e," \u2014 "),sV=n(W$e,"A",{href:!0});var V_t=s(sV);rDo=r(V_t,"FNetForMultipleChoice"),V_t.forEach(t),tDo=r(W$e," (FNet model)"),W$e.forEach(t),aDo=i(ee),_4=n(ee,"LI",{});var Q$e=s(_4);bhe=n(Q$e,"STRONG",{});var X_t=s(bhe);nDo=r(X_t,"funnel"),X_t.forEach(t),sDo=r(Q$e," \u2014 "),lV=n(Q$e,"A",{href:!0});var z_t=s(lV);lDo=r(z_t,"FunnelForMultipleChoice"),z_t.forEach(t),iDo=r(Q$e," (Funnel Transformer model)"),Q$e.forEach(t),dDo=i(ee),u4=n(ee,"LI",{});var H$e=s(u4);vhe=n(H$e,"STRONG",{});var W_t=s(vhe);cDo=r(W_t,"greaselm"),W_t.forEach(t),fDo=r(H$e," \u2014 "),iV=n(H$e,"A",{href:!0});var Q_t=s(iV);mDo=r(Q_t,"GreaseLMForMultipleChoice"),Q_t.forEach(t),gDo=r(H$e," (GreaseLM model)"),H$e.forEach(t),hDo=i(ee),b4=n(ee,"LI",{});var U$e=s(b4);Fhe=n(U$e,"STRONG",{});var H_t=s(Fhe);pDo=r(H_t,"ibert"),H_t.forEach(t),_Do=r(U$e," \u2014 "),dV=n(U$e,"A",{href:!0});var U_t=s(dV);uDo=r(U_t,"IBertForMultipleChoice"),U_t.forEach(t),bDo=r(U$e," (I-BERT model)"),U$e.forEach(t),vDo=i(ee),v4=n(ee,"LI",{});var J$e=s(v4);The=n(J$e,"STRONG",{});var J_t=s(The);FDo=r(J_t,"longformer"),J_t.forEach(t),TDo=r(J$e," \u2014 "),cV=n(J$e,"A",{href:!0});var Y_t=s(cV);MDo=r(Y_t,"LongformerForMultipleChoice"),Y_t.forEach(t),EDo=r(J$e," (Longformer model)"),J$e.forEach(t),CDo=i(ee),F4=n(ee,"LI",{});var Y$e=s(F4);Mhe=n(Y$e,"STRONG",{});var K_t=s(Mhe);wDo=r(K_t,"megatron-bert"),K_t.forEach(t),ADo=r(Y$e," \u2014 "),fV=n(Y$e,"A",{href:!0});var Z_t=s(fV);LDo=r(Z_t,"MegatronBertForMultipleChoice"),Z_t.forEach(t),yDo=r(Y$e," (Megatron-BERT model)"),Y$e.forEach(t),xDo=i(ee),T4=n(ee,"LI",{});var K$e=s(T4);Ehe=n(K$e,"STRONG",{});var eut=s(Ehe);$Do=r(eut,"mobilebert"),eut.forEach(t),kDo=r(K$e," \u2014 "),mV=n(K$e,"A",{href:!0});var out=s(mV);SDo=r(out,"MobileBertForMultipleChoice"),out.forEach(t),RDo=r(K$e," (MobileBERT model)"),K$e.forEach(t),PDo=i(ee),M4=n(ee,"LI",{});var Z$e=s(M4);Che=n(Z$e,"STRONG",{});var rut=s(Che);BDo=r(rut,"mpnet"),rut.forEach(t),IDo=r(Z$e," \u2014 "),gV=n(Z$e,"A",{href:!0});var tut=s(gV);NDo=r(tut,"MPNetForMultipleChoice"),tut.forEach(t),qDo=r(Z$e," (MPNet model)"),Z$e.forEach(t),jDo=i(ee),E4=n(ee,"LI",{});var eke=s(E4);whe=n(eke,"STRONG",{});var aut=s(whe);DDo=r(aut,"nystromformer"),aut.forEach(t),GDo=r(eke," \u2014 "),hV=n(eke,"A",{href:!0});var nut=s(hV);ODo=r(nut,"NystromformerForMultipleChoice"),nut.forEach(t),VDo=r(eke," (Nystr\xF6mformer model)"),eke.forEach(t),XDo=i(ee),C4=n(ee,"LI",{});var oke=s(C4);Ahe=n(oke,"STRONG",{});var sut=s(Ahe);zDo=r(sut,"qdqbert"),sut.forEach(t),WDo=r(oke," \u2014 "),pV=n(oke,"A",{href:!0});var lut=s(pV);QDo=r(lut,"QDQBertForMultipleChoice"),lut.forEach(t),HDo=r(oke," (QDQBert model)"),oke.forEach(t),UDo=i(ee),w4=n(ee,"LI",{});var rke=s(w4);Lhe=n(rke,"STRONG",{});var iut=s(Lhe);JDo=r(iut,"rembert"),iut.forEach(t),YDo=r(rke," \u2014 "),_V=n(rke,"A",{href:!0});var dut=s(_V);KDo=r(dut,"RemBertForMultipleChoice"),dut.forEach(t),ZDo=r(rke," (RemBERT model)"),rke.forEach(t),eGo=i(ee),A4=n(ee,"LI",{});var tke=s(A4);yhe=n(tke,"STRONG",{});var cut=s(yhe);oGo=r(cut,"roberta"),cut.forEach(t),rGo=r(tke," \u2014 "),uV=n(tke,"A",{href:!0});var fut=s(uV);tGo=r(fut,"RobertaForMultipleChoice"),fut.forEach(t),aGo=r(tke," (RoBERTa model)"),tke.forEach(t),nGo=i(ee),L4=n(ee,"LI",{});var ake=s(L4);xhe=n(ake,"STRONG",{});var mut=s(xhe);sGo=r(mut,"roformer"),mut.forEach(t),lGo=r(ake," \u2014 "),bV=n(ake,"A",{href:!0});var gut=s(bV);iGo=r(gut,"RoFormerForMultipleChoice"),gut.forEach(t),dGo=r(ake," (RoFormer model)"),ake.forEach(t),cGo=i(ee),y4=n(ee,"LI",{});var nke=s(y4);$he=n(nke,"STRONG",{});var hut=s($he);fGo=r(hut,"squeezebert"),hut.forEach(t),mGo=r(nke," \u2014 "),vV=n(nke,"A",{href:!0});var put=s(vV);gGo=r(put,"SqueezeBertForMultipleChoice"),put.forEach(t),hGo=r(nke," (SqueezeBERT model)"),nke.forEach(t),pGo=i(ee),x4=n(ee,"LI",{});var ske=s(x4);khe=n(ske,"STRONG",{});var _ut=s(khe);_Go=r(_ut,"xlm"),_ut.forEach(t),uGo=r(ske," \u2014 "),FV=n(ske,"A",{href:!0});var uut=s(FV);bGo=r(uut,"XLMForMultipleChoice"),uut.forEach(t),vGo=r(ske," (XLM model)"),ske.forEach(t),FGo=i(ee),$4=n(ee,"LI",{});var lke=s($4);She=n(lke,"STRONG",{});var but=s(She);TGo=r(but,"xlm-roberta"),but.forEach(t),MGo=r(lke," \u2014 "),TV=n(lke,"A",{href:!0});var vut=s(TV);EGo=r(vut,"XLMRobertaForMultipleChoice"),vut.forEach(t),CGo=r(lke," (XLM-RoBERTa model)"),lke.forEach(t),wGo=i(ee),k4=n(ee,"LI",{});var ike=s(k4);Rhe=n(ike,"STRONG",{});var Fut=s(Rhe);AGo=r(Fut,"xlm-roberta-xl"),Fut.forEach(t),LGo=r(ike," \u2014 "),MV=n(ike,"A",{href:!0});var Tut=s(MV);yGo=r(Tut,"XLMRobertaXLForMultipleChoice"),Tut.forEach(t),xGo=r(ike," (XLM-RoBERTa-XL model)"),ike.forEach(t),$Go=i(ee),S4=n(ee,"LI",{});var dke=s(S4);Phe=n(dke,"STRONG",{});var Mut=s(Phe);kGo=r(Mut,"xlnet"),Mut.forEach(t),SGo=r(dke," \u2014 "),EV=n(dke,"A",{href:!0});var Eut=s(EV);RGo=r(Eut,"XLNetForMultipleChoice"),Eut.forEach(t),PGo=r(dke," (XLNet model)"),dke.forEach(t),BGo=i(ee),R4=n(ee,"LI",{});var cke=s(R4);Bhe=n(cke,"STRONG",{});var Cut=s(Bhe);IGo=r(Cut,"yoso"),Cut.forEach(t),NGo=r(cke," \u2014 "),CV=n(cke,"A",{href:!0});var wut=s(CV);qGo=r(wut,"YosoForMultipleChoice"),wut.forEach(t),jGo=r(cke," (YOSO model)"),cke.forEach(t),ee.forEach(t),DGo=i(la),P4=n(la,"P",{});var fke=s(P4);GGo=r(fke,"The model is set in evaluation mode by default using "),Ihe=n(fke,"CODE",{});var Aut=s(Ihe);OGo=r(Aut,"model.eval()"),Aut.forEach(t),VGo=r(fke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=n(fke,"CODE",{});var Lut=s(Nhe);XGo=r(Lut,"model.train()"),Lut.forEach(t),fke.forEach(t),zGo=i(la),T(B4.$$.fragment,la),la.forEach(t),Us.forEach(t),pDe=i(f),Hi=n(f,"H2",{class:!0});var vOe=s(Hi);I4=n(vOe,"A",{id:!0,class:!0,href:!0});var yut=s(I4);qhe=n(yut,"SPAN",{});var xut=s(qhe);T(ay.$$.fragment,xut),xut.forEach(t),yut.forEach(t),WGo=i(vOe),jhe=n(vOe,"SPAN",{});var $ut=s(jhe);QGo=r($ut,"AutoModelForNextSentencePrediction"),$ut.forEach(t),vOe.forEach(t),_De=i(f),Bo=n(f,"DIV",{class:!0});var Js=s(Bo);T(ny.$$.fragment,Js),HGo=i(Js),Ui=n(Js,"P",{});var Lee=s(Ui);UGo=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),wV=n(Lee,"A",{href:!0});var kut=s(wV);JGo=r(kut,"from_pretrained()"),kut.forEach(t),YGo=r(Lee," class method or the "),AV=n(Lee,"A",{href:!0});var Sut=s(AV);KGo=r(Sut,"from_config()"),Sut.forEach(t),ZGo=r(Lee,` class
method.`),Lee.forEach(t),eOo=i(Js),sy=n(Js,"P",{});var FOe=s(sy);oOo=r(FOe,"This class cannot be instantiated directly using "),Dhe=n(FOe,"CODE",{});var Rut=s(Dhe);rOo=r(Rut,"__init__()"),Rut.forEach(t),tOo=r(FOe," (throws an error)."),FOe.forEach(t),aOo=i(Js),ct=n(Js,"DIV",{class:!0});var pw=s(ct);T(ly.$$.fragment,pw),nOo=i(pw),Ghe=n(pw,"P",{});var Put=s(Ghe);sOo=r(Put,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Put.forEach(t),lOo=i(pw),Ji=n(pw,"P",{});var yee=s(Ji);iOo=r(yee,`Note:
Loading a model from its configuration file does `),Ohe=n(yee,"STRONG",{});var But=s(Ohe);dOo=r(But,"not"),But.forEach(t),cOo=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=n(yee,"A",{href:!0});var Iut=s(LV);fOo=r(Iut,"from_pretrained()"),Iut.forEach(t),mOo=r(yee," to load the model weights."),yee.forEach(t),gOo=i(pw),T(N4.$$.fragment,pw),pw.forEach(t),hOo=i(Js),to=n(Js,"DIV",{class:!0});var ia=s(to);T(iy.$$.fragment,ia),pOo=i(ia),Vhe=n(ia,"P",{});var Nut=s(Vhe);_Oo=r(Nut,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Nut.forEach(t),uOo=i(ia),Ba=n(ia,"P",{});var _w=s(Ba);bOo=r(_w,"The model class to instantiate is selected based on the "),Xhe=n(_w,"CODE",{});var qut=s(Xhe);vOo=r(qut,"model_type"),qut.forEach(t),FOo=r(_w,` property of the config object (either
passed as an argument or loaded from `),zhe=n(_w,"CODE",{});var jut=s(zhe);TOo=r(jut,"pretrained_model_name_or_path"),jut.forEach(t),MOo=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Whe=n(_w,"CODE",{});var Dut=s(Whe);EOo=r(Dut,"pretrained_model_name_or_path"),Dut.forEach(t),COo=r(_w,":"),_w.forEach(t),wOo=i(ia),Yr=n(ia,"UL",{});var Ys=s(Yr);q4=n(Ys,"LI",{});var mke=s(q4);Qhe=n(mke,"STRONG",{});var Gut=s(Qhe);AOo=r(Gut,"bert"),Gut.forEach(t),LOo=r(mke," \u2014 "),yV=n(mke,"A",{href:!0});var Out=s(yV);yOo=r(Out,"BertForNextSentencePrediction"),Out.forEach(t),xOo=r(mke," (BERT model)"),mke.forEach(t),$Oo=i(Ys),j4=n(Ys,"LI",{});var gke=s(j4);Hhe=n(gke,"STRONG",{});var Vut=s(Hhe);kOo=r(Vut,"fnet"),Vut.forEach(t),SOo=r(gke," \u2014 "),xV=n(gke,"A",{href:!0});var Xut=s(xV);ROo=r(Xut,"FNetForNextSentencePrediction"),Xut.forEach(t),POo=r(gke," (FNet model)"),gke.forEach(t),BOo=i(Ys),D4=n(Ys,"LI",{});var hke=s(D4);Uhe=n(hke,"STRONG",{});var zut=s(Uhe);IOo=r(zut,"megatron-bert"),zut.forEach(t),NOo=r(hke," \u2014 "),$V=n(hke,"A",{href:!0});var Wut=s($V);qOo=r(Wut,"MegatronBertForNextSentencePrediction"),Wut.forEach(t),jOo=r(hke," (Megatron-BERT model)"),hke.forEach(t),DOo=i(Ys),G4=n(Ys,"LI",{});var pke=s(G4);Jhe=n(pke,"STRONG",{});var Qut=s(Jhe);GOo=r(Qut,"mobilebert"),Qut.forEach(t),OOo=r(pke," \u2014 "),kV=n(pke,"A",{href:!0});var Hut=s(kV);VOo=r(Hut,"MobileBertForNextSentencePrediction"),Hut.forEach(t),XOo=r(pke," (MobileBERT model)"),pke.forEach(t),zOo=i(Ys),O4=n(Ys,"LI",{});var _ke=s(O4);Yhe=n(_ke,"STRONG",{});var Uut=s(Yhe);WOo=r(Uut,"qdqbert"),Uut.forEach(t),QOo=r(_ke," \u2014 "),SV=n(_ke,"A",{href:!0});var Jut=s(SV);HOo=r(Jut,"QDQBertForNextSentencePrediction"),Jut.forEach(t),UOo=r(_ke," (QDQBert model)"),_ke.forEach(t),Ys.forEach(t),JOo=i(ia),V4=n(ia,"P",{});var uke=s(V4);YOo=r(uke,"The model is set in evaluation mode by default using "),Khe=n(uke,"CODE",{});var Yut=s(Khe);KOo=r(Yut,"model.eval()"),Yut.forEach(t),ZOo=r(uke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=n(uke,"CODE",{});var Kut=s(Zhe);eVo=r(Kut,"model.train()"),Kut.forEach(t),uke.forEach(t),oVo=i(ia),T(X4.$$.fragment,ia),ia.forEach(t),Js.forEach(t),uDe=i(f),Yi=n(f,"H2",{class:!0});var TOe=s(Yi);z4=n(TOe,"A",{id:!0,class:!0,href:!0});var Zut=s(z4);epe=n(Zut,"SPAN",{});var e1t=s(epe);T(dy.$$.fragment,e1t),e1t.forEach(t),Zut.forEach(t),rVo=i(TOe),ope=n(TOe,"SPAN",{});var o1t=s(ope);tVo=r(o1t,"AutoModelForTokenClassification"),o1t.forEach(t),TOe.forEach(t),bDe=i(f),Io=n(f,"DIV",{class:!0});var Ks=s(Io);T(cy.$$.fragment,Ks),aVo=i(Ks),Ki=n(Ks,"P",{});var xee=s(Ki);nVo=r(xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RV=n(xee,"A",{href:!0});var r1t=s(RV);sVo=r(r1t,"from_pretrained()"),r1t.forEach(t),lVo=r(xee," class method or the "),PV=n(xee,"A",{href:!0});var t1t=s(PV);iVo=r(t1t,"from_config()"),t1t.forEach(t),dVo=r(xee,` class
method.`),xee.forEach(t),cVo=i(Ks),fy=n(Ks,"P",{});var MOe=s(fy);fVo=r(MOe,"This class cannot be instantiated directly using "),rpe=n(MOe,"CODE",{});var a1t=s(rpe);mVo=r(a1t,"__init__()"),a1t.forEach(t),gVo=r(MOe," (throws an error)."),MOe.forEach(t),hVo=i(Ks),ft=n(Ks,"DIV",{class:!0});var uw=s(ft);T(my.$$.fragment,uw),pVo=i(uw),tpe=n(uw,"P",{});var n1t=s(tpe);_Vo=r(n1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),n1t.forEach(t),uVo=i(uw),Zi=n(uw,"P",{});var $ee=s(Zi);bVo=r($ee,`Note:
Loading a model from its configuration file does `),ape=n($ee,"STRONG",{});var s1t=s(ape);vVo=r(s1t,"not"),s1t.forEach(t),FVo=r($ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=n($ee,"A",{href:!0});var l1t=s(BV);TVo=r(l1t,"from_pretrained()"),l1t.forEach(t),MVo=r($ee," to load the model weights."),$ee.forEach(t),EVo=i(uw),T(W4.$$.fragment,uw),uw.forEach(t),CVo=i(Ks),ao=n(Ks,"DIV",{class:!0});var da=s(ao);T(gy.$$.fragment,da),wVo=i(da),npe=n(da,"P",{});var i1t=s(npe);AVo=r(i1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),i1t.forEach(t),LVo=i(da),Ia=n(da,"P",{});var bw=s(Ia);yVo=r(bw,"The model class to instantiate is selected based on the "),spe=n(bw,"CODE",{});var d1t=s(spe);xVo=r(d1t,"model_type"),d1t.forEach(t),$Vo=r(bw,` property of the config object (either
passed as an argument or loaded from `),lpe=n(bw,"CODE",{});var c1t=s(lpe);kVo=r(c1t,"pretrained_model_name_or_path"),c1t.forEach(t),SVo=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=n(bw,"CODE",{});var f1t=s(ipe);RVo=r(f1t,"pretrained_model_name_or_path"),f1t.forEach(t),PVo=r(bw,":"),bw.forEach(t),BVo=i(da),U=n(da,"UL",{});var J=s(U);Q4=n(J,"LI",{});var bke=s(Q4);dpe=n(bke,"STRONG",{});var m1t=s(dpe);IVo=r(m1t,"albert"),m1t.forEach(t),NVo=r(bke," \u2014 "),IV=n(bke,"A",{href:!0});var g1t=s(IV);qVo=r(g1t,"AlbertForTokenClassification"),g1t.forEach(t),jVo=r(bke," (ALBERT model)"),bke.forEach(t),DVo=i(J),H4=n(J,"LI",{});var vke=s(H4);cpe=n(vke,"STRONG",{});var h1t=s(cpe);GVo=r(h1t,"bert"),h1t.forEach(t),OVo=r(vke," \u2014 "),NV=n(vke,"A",{href:!0});var p1t=s(NV);VVo=r(p1t,"BertForTokenClassification"),p1t.forEach(t),XVo=r(vke," (BERT model)"),vke.forEach(t),zVo=i(J),U4=n(J,"LI",{});var Fke=s(U4);fpe=n(Fke,"STRONG",{});var _1t=s(fpe);WVo=r(_1t,"big_bird"),_1t.forEach(t),QVo=r(Fke," \u2014 "),qV=n(Fke,"A",{href:!0});var u1t=s(qV);HVo=r(u1t,"BigBirdForTokenClassification"),u1t.forEach(t),UVo=r(Fke," (BigBird model)"),Fke.forEach(t),JVo=i(J),J4=n(J,"LI",{});var Tke=s(J4);mpe=n(Tke,"STRONG",{});var b1t=s(mpe);YVo=r(b1t,"camembert"),b1t.forEach(t),KVo=r(Tke," \u2014 "),jV=n(Tke,"A",{href:!0});var v1t=s(jV);ZVo=r(v1t,"CamembertForTokenClassification"),v1t.forEach(t),eXo=r(Tke," (CamemBERT model)"),Tke.forEach(t),oXo=i(J),Y4=n(J,"LI",{});var Mke=s(Y4);gpe=n(Mke,"STRONG",{});var F1t=s(gpe);rXo=r(F1t,"canine"),F1t.forEach(t),tXo=r(Mke," \u2014 "),DV=n(Mke,"A",{href:!0});var T1t=s(DV);aXo=r(T1t,"CanineForTokenClassification"),T1t.forEach(t),nXo=r(Mke," (CANINE model)"),Mke.forEach(t),sXo=i(J),K4=n(J,"LI",{});var Eke=s(K4);hpe=n(Eke,"STRONG",{});var M1t=s(hpe);lXo=r(M1t,"convbert"),M1t.forEach(t),iXo=r(Eke," \u2014 "),GV=n(Eke,"A",{href:!0});var E1t=s(GV);dXo=r(E1t,"ConvBertForTokenClassification"),E1t.forEach(t),cXo=r(Eke," (ConvBERT model)"),Eke.forEach(t),fXo=i(J),Z4=n(J,"LI",{});var Cke=s(Z4);ppe=n(Cke,"STRONG",{});var C1t=s(ppe);mXo=r(C1t,"data2vec-text"),C1t.forEach(t),gXo=r(Cke," \u2014 "),OV=n(Cke,"A",{href:!0});var w1t=s(OV);hXo=r(w1t,"Data2VecTextForTokenClassification"),w1t.forEach(t),pXo=r(Cke," (Data2VecText model)"),Cke.forEach(t),_Xo=i(J),ev=n(J,"LI",{});var wke=s(ev);_pe=n(wke,"STRONG",{});var A1t=s(_pe);uXo=r(A1t,"deberta"),A1t.forEach(t),bXo=r(wke," \u2014 "),VV=n(wke,"A",{href:!0});var L1t=s(VV);vXo=r(L1t,"DebertaForTokenClassification"),L1t.forEach(t),FXo=r(wke," (DeBERTa model)"),wke.forEach(t),TXo=i(J),ov=n(J,"LI",{});var Ake=s(ov);upe=n(Ake,"STRONG",{});var y1t=s(upe);MXo=r(y1t,"deberta-v2"),y1t.forEach(t),EXo=r(Ake," \u2014 "),XV=n(Ake,"A",{href:!0});var x1t=s(XV);CXo=r(x1t,"DebertaV2ForTokenClassification"),x1t.forEach(t),wXo=r(Ake," (DeBERTa-v2 model)"),Ake.forEach(t),AXo=i(J),rv=n(J,"LI",{});var Lke=s(rv);bpe=n(Lke,"STRONG",{});var $1t=s(bpe);LXo=r($1t,"distilbert"),$1t.forEach(t),yXo=r(Lke," \u2014 "),zV=n(Lke,"A",{href:!0});var k1t=s(zV);xXo=r(k1t,"DistilBertForTokenClassification"),k1t.forEach(t),$Xo=r(Lke," (DistilBERT model)"),Lke.forEach(t),kXo=i(J),tv=n(J,"LI",{});var yke=s(tv);vpe=n(yke,"STRONG",{});var S1t=s(vpe);SXo=r(S1t,"electra"),S1t.forEach(t),RXo=r(yke," \u2014 "),WV=n(yke,"A",{href:!0});var R1t=s(WV);PXo=r(R1t,"ElectraForTokenClassification"),R1t.forEach(t),BXo=r(yke," (ELECTRA model)"),yke.forEach(t),IXo=i(J),av=n(J,"LI",{});var xke=s(av);Fpe=n(xke,"STRONG",{});var P1t=s(Fpe);NXo=r(P1t,"flaubert"),P1t.forEach(t),qXo=r(xke," \u2014 "),QV=n(xke,"A",{href:!0});var B1t=s(QV);jXo=r(B1t,"FlaubertForTokenClassification"),B1t.forEach(t),DXo=r(xke," (FlauBERT model)"),xke.forEach(t),GXo=i(J),nv=n(J,"LI",{});var $ke=s(nv);Tpe=n($ke,"STRONG",{});var I1t=s(Tpe);OXo=r(I1t,"fnet"),I1t.forEach(t),VXo=r($ke," \u2014 "),HV=n($ke,"A",{href:!0});var N1t=s(HV);XXo=r(N1t,"FNetForTokenClassification"),N1t.forEach(t),zXo=r($ke," (FNet model)"),$ke.forEach(t),WXo=i(J),sv=n(J,"LI",{});var kke=s(sv);Mpe=n(kke,"STRONG",{});var q1t=s(Mpe);QXo=r(q1t,"funnel"),q1t.forEach(t),HXo=r(kke," \u2014 "),UV=n(kke,"A",{href:!0});var j1t=s(UV);UXo=r(j1t,"FunnelForTokenClassification"),j1t.forEach(t),JXo=r(kke," (Funnel Transformer model)"),kke.forEach(t),YXo=i(J),lv=n(J,"LI",{});var Ske=s(lv);Epe=n(Ske,"STRONG",{});var D1t=s(Epe);KXo=r(D1t,"gpt2"),D1t.forEach(t),ZXo=r(Ske," \u2014 "),JV=n(Ske,"A",{href:!0});var G1t=s(JV);ezo=r(G1t,"GPT2ForTokenClassification"),G1t.forEach(t),ozo=r(Ske," (OpenAI GPT-2 model)"),Ske.forEach(t),rzo=i(J),iv=n(J,"LI",{});var Rke=s(iv);Cpe=n(Rke,"STRONG",{});var O1t=s(Cpe);tzo=r(O1t,"ibert"),O1t.forEach(t),azo=r(Rke," \u2014 "),YV=n(Rke,"A",{href:!0});var V1t=s(YV);nzo=r(V1t,"IBertForTokenClassification"),V1t.forEach(t),szo=r(Rke," (I-BERT model)"),Rke.forEach(t),lzo=i(J),dv=n(J,"LI",{});var Pke=s(dv);wpe=n(Pke,"STRONG",{});var X1t=s(wpe);izo=r(X1t,"layoutlm"),X1t.forEach(t),dzo=r(Pke," \u2014 "),KV=n(Pke,"A",{href:!0});var z1t=s(KV);czo=r(z1t,"LayoutLMForTokenClassification"),z1t.forEach(t),fzo=r(Pke," (LayoutLM model)"),Pke.forEach(t),mzo=i(J),cv=n(J,"LI",{});var Bke=s(cv);Ape=n(Bke,"STRONG",{});var W1t=s(Ape);gzo=r(W1t,"layoutlmv2"),W1t.forEach(t),hzo=r(Bke," \u2014 "),ZV=n(Bke,"A",{href:!0});var Q1t=s(ZV);pzo=r(Q1t,"LayoutLMv2ForTokenClassification"),Q1t.forEach(t),_zo=r(Bke," (LayoutLMv2 model)"),Bke.forEach(t),uzo=i(J),fv=n(J,"LI",{});var Ike=s(fv);Lpe=n(Ike,"STRONG",{});var H1t=s(Lpe);bzo=r(H1t,"layoutlmv3"),H1t.forEach(t),vzo=r(Ike," \u2014 "),eX=n(Ike,"A",{href:!0});var U1t=s(eX);Fzo=r(U1t,"LayoutLMv3ForTokenClassification"),U1t.forEach(t),Tzo=r(Ike," (LayoutLMv3 model)"),Ike.forEach(t),Mzo=i(J),mv=n(J,"LI",{});var Nke=s(mv);ype=n(Nke,"STRONG",{});var J1t=s(ype);Ezo=r(J1t,"longformer"),J1t.forEach(t),Czo=r(Nke," \u2014 "),oX=n(Nke,"A",{href:!0});var Y1t=s(oX);wzo=r(Y1t,"LongformerForTokenClassification"),Y1t.forEach(t),Azo=r(Nke," (Longformer model)"),Nke.forEach(t),Lzo=i(J),gv=n(J,"LI",{});var qke=s(gv);xpe=n(qke,"STRONG",{});var K1t=s(xpe);yzo=r(K1t,"megatron-bert"),K1t.forEach(t),xzo=r(qke," \u2014 "),rX=n(qke,"A",{href:!0});var Z1t=s(rX);$zo=r(Z1t,"MegatronBertForTokenClassification"),Z1t.forEach(t),kzo=r(qke," (Megatron-BERT model)"),qke.forEach(t),Szo=i(J),hv=n(J,"LI",{});var jke=s(hv);$pe=n(jke,"STRONG",{});var ebt=s($pe);Rzo=r(ebt,"mobilebert"),ebt.forEach(t),Pzo=r(jke," \u2014 "),tX=n(jke,"A",{href:!0});var obt=s(tX);Bzo=r(obt,"MobileBertForTokenClassification"),obt.forEach(t),Izo=r(jke," (MobileBERT model)"),jke.forEach(t),Nzo=i(J),pv=n(J,"LI",{});var Dke=s(pv);kpe=n(Dke,"STRONG",{});var rbt=s(kpe);qzo=r(rbt,"mpnet"),rbt.forEach(t),jzo=r(Dke," \u2014 "),aX=n(Dke,"A",{href:!0});var tbt=s(aX);Dzo=r(tbt,"MPNetForTokenClassification"),tbt.forEach(t),Gzo=r(Dke," (MPNet model)"),Dke.forEach(t),Ozo=i(J),_v=n(J,"LI",{});var Gke=s(_v);Spe=n(Gke,"STRONG",{});var abt=s(Spe);Vzo=r(abt,"nystromformer"),abt.forEach(t),Xzo=r(Gke," \u2014 "),nX=n(Gke,"A",{href:!0});var nbt=s(nX);zzo=r(nbt,"NystromformerForTokenClassification"),nbt.forEach(t),Wzo=r(Gke," (Nystr\xF6mformer model)"),Gke.forEach(t),Qzo=i(J),uv=n(J,"LI",{});var Oke=s(uv);Rpe=n(Oke,"STRONG",{});var sbt=s(Rpe);Hzo=r(sbt,"qdqbert"),sbt.forEach(t),Uzo=r(Oke," \u2014 "),sX=n(Oke,"A",{href:!0});var lbt=s(sX);Jzo=r(lbt,"QDQBertForTokenClassification"),lbt.forEach(t),Yzo=r(Oke," (QDQBert model)"),Oke.forEach(t),Kzo=i(J),bv=n(J,"LI",{});var Vke=s(bv);Ppe=n(Vke,"STRONG",{});var ibt=s(Ppe);Zzo=r(ibt,"rembert"),ibt.forEach(t),eWo=r(Vke," \u2014 "),lX=n(Vke,"A",{href:!0});var dbt=s(lX);oWo=r(dbt,"RemBertForTokenClassification"),dbt.forEach(t),rWo=r(Vke," (RemBERT model)"),Vke.forEach(t),tWo=i(J),vv=n(J,"LI",{});var Xke=s(vv);Bpe=n(Xke,"STRONG",{});var cbt=s(Bpe);aWo=r(cbt,"roberta"),cbt.forEach(t),nWo=r(Xke," \u2014 "),iX=n(Xke,"A",{href:!0});var fbt=s(iX);sWo=r(fbt,"RobertaForTokenClassification"),fbt.forEach(t),lWo=r(Xke," (RoBERTa model)"),Xke.forEach(t),iWo=i(J),Fv=n(J,"LI",{});var zke=s(Fv);Ipe=n(zke,"STRONG",{});var mbt=s(Ipe);dWo=r(mbt,"roformer"),mbt.forEach(t),cWo=r(zke," \u2014 "),dX=n(zke,"A",{href:!0});var gbt=s(dX);fWo=r(gbt,"RoFormerForTokenClassification"),gbt.forEach(t),mWo=r(zke," (RoFormer model)"),zke.forEach(t),gWo=i(J),Tv=n(J,"LI",{});var Wke=s(Tv);Npe=n(Wke,"STRONG",{});var hbt=s(Npe);hWo=r(hbt,"squeezebert"),hbt.forEach(t),pWo=r(Wke," \u2014 "),cX=n(Wke,"A",{href:!0});var pbt=s(cX);_Wo=r(pbt,"SqueezeBertForTokenClassification"),pbt.forEach(t),uWo=r(Wke," (SqueezeBERT model)"),Wke.forEach(t),bWo=i(J),Mv=n(J,"LI",{});var Qke=s(Mv);qpe=n(Qke,"STRONG",{});var _bt=s(qpe);vWo=r(_bt,"xlm"),_bt.forEach(t),FWo=r(Qke," \u2014 "),fX=n(Qke,"A",{href:!0});var ubt=s(fX);TWo=r(ubt,"XLMForTokenClassification"),ubt.forEach(t),MWo=r(Qke," (XLM model)"),Qke.forEach(t),EWo=i(J),Ev=n(J,"LI",{});var Hke=s(Ev);jpe=n(Hke,"STRONG",{});var bbt=s(jpe);CWo=r(bbt,"xlm-roberta"),bbt.forEach(t),wWo=r(Hke," \u2014 "),mX=n(Hke,"A",{href:!0});var vbt=s(mX);AWo=r(vbt,"XLMRobertaForTokenClassification"),vbt.forEach(t),LWo=r(Hke," (XLM-RoBERTa model)"),Hke.forEach(t),yWo=i(J),Cv=n(J,"LI",{});var Uke=s(Cv);Dpe=n(Uke,"STRONG",{});var Fbt=s(Dpe);xWo=r(Fbt,"xlm-roberta-xl"),Fbt.forEach(t),$Wo=r(Uke," \u2014 "),gX=n(Uke,"A",{href:!0});var Tbt=s(gX);kWo=r(Tbt,"XLMRobertaXLForTokenClassification"),Tbt.forEach(t),SWo=r(Uke," (XLM-RoBERTa-XL model)"),Uke.forEach(t),RWo=i(J),wv=n(J,"LI",{});var Jke=s(wv);Gpe=n(Jke,"STRONG",{});var Mbt=s(Gpe);PWo=r(Mbt,"xlnet"),Mbt.forEach(t),BWo=r(Jke," \u2014 "),hX=n(Jke,"A",{href:!0});var Ebt=s(hX);IWo=r(Ebt,"XLNetForTokenClassification"),Ebt.forEach(t),NWo=r(Jke," (XLNet model)"),Jke.forEach(t),qWo=i(J),Av=n(J,"LI",{});var Yke=s(Av);Ope=n(Yke,"STRONG",{});var Cbt=s(Ope);jWo=r(Cbt,"yoso"),Cbt.forEach(t),DWo=r(Yke," \u2014 "),pX=n(Yke,"A",{href:!0});var wbt=s(pX);GWo=r(wbt,"YosoForTokenClassification"),wbt.forEach(t),OWo=r(Yke," (YOSO model)"),Yke.forEach(t),J.forEach(t),VWo=i(da),Lv=n(da,"P",{});var Kke=s(Lv);XWo=r(Kke,"The model is set in evaluation mode by default using "),Vpe=n(Kke,"CODE",{});var Abt=s(Vpe);zWo=r(Abt,"model.eval()"),Abt.forEach(t),WWo=r(Kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=n(Kke,"CODE",{});var Lbt=s(Xpe);QWo=r(Lbt,"model.train()"),Lbt.forEach(t),Kke.forEach(t),HWo=i(da),T(yv.$$.fragment,da),da.forEach(t),Ks.forEach(t),vDe=i(f),ed=n(f,"H2",{class:!0});var EOe=s(ed);xv=n(EOe,"A",{id:!0,class:!0,href:!0});var ybt=s(xv);zpe=n(ybt,"SPAN",{});var xbt=s(zpe);T(hy.$$.fragment,xbt),xbt.forEach(t),ybt.forEach(t),UWo=i(EOe),Wpe=n(EOe,"SPAN",{});var $bt=s(Wpe);JWo=r($bt,"AutoModelForQuestionAnswering"),$bt.forEach(t),EOe.forEach(t),FDe=i(f),No=n(f,"DIV",{class:!0});var Zs=s(No);T(py.$$.fragment,Zs),YWo=i(Zs),od=n(Zs,"P",{});var kee=s(od);KWo=r(kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_X=n(kee,"A",{href:!0});var kbt=s(_X);ZWo=r(kbt,"from_pretrained()"),kbt.forEach(t),eQo=r(kee," class method or the "),uX=n(kee,"A",{href:!0});var Sbt=s(uX);oQo=r(Sbt,"from_config()"),Sbt.forEach(t),rQo=r(kee,` class
method.`),kee.forEach(t),tQo=i(Zs),_y=n(Zs,"P",{});var COe=s(_y);aQo=r(COe,"This class cannot be instantiated directly using "),Qpe=n(COe,"CODE",{});var Rbt=s(Qpe);nQo=r(Rbt,"__init__()"),Rbt.forEach(t),sQo=r(COe," (throws an error)."),COe.forEach(t),lQo=i(Zs),mt=n(Zs,"DIV",{class:!0});var vw=s(mt);T(uy.$$.fragment,vw),iQo=i(vw),Hpe=n(vw,"P",{});var Pbt=s(Hpe);dQo=r(Pbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Pbt.forEach(t),cQo=i(vw),rd=n(vw,"P",{});var See=s(rd);fQo=r(See,`Note:
Loading a model from its configuration file does `),Upe=n(See,"STRONG",{});var Bbt=s(Upe);mQo=r(Bbt,"not"),Bbt.forEach(t),gQo=r(See,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n(See,"A",{href:!0});var Ibt=s(bX);hQo=r(Ibt,"from_pretrained()"),Ibt.forEach(t),pQo=r(See," to load the model weights."),See.forEach(t),_Qo=i(vw),T($v.$$.fragment,vw),vw.forEach(t),uQo=i(Zs),no=n(Zs,"DIV",{class:!0});var ca=s(no);T(by.$$.fragment,ca),bQo=i(ca),Jpe=n(ca,"P",{});var Nbt=s(Jpe);vQo=r(Nbt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Nbt.forEach(t),FQo=i(ca),Na=n(ca,"P",{});var Fw=s(Na);TQo=r(Fw,"The model class to instantiate is selected based on the "),Ype=n(Fw,"CODE",{});var qbt=s(Ype);MQo=r(qbt,"model_type"),qbt.forEach(t),EQo=r(Fw,` property of the config object (either
passed as an argument or loaded from `),Kpe=n(Fw,"CODE",{});var jbt=s(Kpe);CQo=r(jbt,"pretrained_model_name_or_path"),jbt.forEach(t),wQo=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=n(Fw,"CODE",{});var Dbt=s(Zpe);AQo=r(Dbt,"pretrained_model_name_or_path"),Dbt.forEach(t),LQo=r(Fw,":"),Fw.forEach(t),yQo=i(ca),V=n(ca,"UL",{});var X=s(V);kv=n(X,"LI",{});var Zke=s(kv);e_e=n(Zke,"STRONG",{});var Gbt=s(e_e);xQo=r(Gbt,"albert"),Gbt.forEach(t),$Qo=r(Zke," \u2014 "),vX=n(Zke,"A",{href:!0});var Obt=s(vX);kQo=r(Obt,"AlbertForQuestionAnswering"),Obt.forEach(t),SQo=r(Zke," (ALBERT model)"),Zke.forEach(t),RQo=i(X),Sv=n(X,"LI",{});var eSe=s(Sv);o_e=n(eSe,"STRONG",{});var Vbt=s(o_e);PQo=r(Vbt,"bart"),Vbt.forEach(t),BQo=r(eSe," \u2014 "),FX=n(eSe,"A",{href:!0});var Xbt=s(FX);IQo=r(Xbt,"BartForQuestionAnswering"),Xbt.forEach(t),NQo=r(eSe," (BART model)"),eSe.forEach(t),qQo=i(X),Rv=n(X,"LI",{});var oSe=s(Rv);r_e=n(oSe,"STRONG",{});var zbt=s(r_e);jQo=r(zbt,"bert"),zbt.forEach(t),DQo=r(oSe," \u2014 "),TX=n(oSe,"A",{href:!0});var Wbt=s(TX);GQo=r(Wbt,"BertForQuestionAnswering"),Wbt.forEach(t),OQo=r(oSe," (BERT model)"),oSe.forEach(t),VQo=i(X),Pv=n(X,"LI",{});var rSe=s(Pv);t_e=n(rSe,"STRONG",{});var Qbt=s(t_e);XQo=r(Qbt,"big_bird"),Qbt.forEach(t),zQo=r(rSe," \u2014 "),MX=n(rSe,"A",{href:!0});var Hbt=s(MX);WQo=r(Hbt,"BigBirdForQuestionAnswering"),Hbt.forEach(t),QQo=r(rSe," (BigBird model)"),rSe.forEach(t),HQo=i(X),Bv=n(X,"LI",{});var tSe=s(Bv);a_e=n(tSe,"STRONG",{});var Ubt=s(a_e);UQo=r(Ubt,"bigbird_pegasus"),Ubt.forEach(t),JQo=r(tSe," \u2014 "),EX=n(tSe,"A",{href:!0});var Jbt=s(EX);YQo=r(Jbt,"BigBirdPegasusForQuestionAnswering"),Jbt.forEach(t),KQo=r(tSe," (BigBird-Pegasus model)"),tSe.forEach(t),ZQo=i(X),Iv=n(X,"LI",{});var aSe=s(Iv);n_e=n(aSe,"STRONG",{});var Ybt=s(n_e);eHo=r(Ybt,"camembert"),Ybt.forEach(t),oHo=r(aSe," \u2014 "),CX=n(aSe,"A",{href:!0});var Kbt=s(CX);rHo=r(Kbt,"CamembertForQuestionAnswering"),Kbt.forEach(t),tHo=r(aSe," (CamemBERT model)"),aSe.forEach(t),aHo=i(X),Nv=n(X,"LI",{});var nSe=s(Nv);s_e=n(nSe,"STRONG",{});var Zbt=s(s_e);nHo=r(Zbt,"canine"),Zbt.forEach(t),sHo=r(nSe," \u2014 "),wX=n(nSe,"A",{href:!0});var e2t=s(wX);lHo=r(e2t,"CanineForQuestionAnswering"),e2t.forEach(t),iHo=r(nSe," (CANINE model)"),nSe.forEach(t),dHo=i(X),qv=n(X,"LI",{});var sSe=s(qv);l_e=n(sSe,"STRONG",{});var o2t=s(l_e);cHo=r(o2t,"convbert"),o2t.forEach(t),fHo=r(sSe," \u2014 "),AX=n(sSe,"A",{href:!0});var r2t=s(AX);mHo=r(r2t,"ConvBertForQuestionAnswering"),r2t.forEach(t),gHo=r(sSe," (ConvBERT model)"),sSe.forEach(t),hHo=i(X),jv=n(X,"LI",{});var lSe=s(jv);i_e=n(lSe,"STRONG",{});var t2t=s(i_e);pHo=r(t2t,"data2vec-text"),t2t.forEach(t),_Ho=r(lSe," \u2014 "),LX=n(lSe,"A",{href:!0});var a2t=s(LX);uHo=r(a2t,"Data2VecTextForQuestionAnswering"),a2t.forEach(t),bHo=r(lSe," (Data2VecText model)"),lSe.forEach(t),vHo=i(X),Dv=n(X,"LI",{});var iSe=s(Dv);d_e=n(iSe,"STRONG",{});var n2t=s(d_e);FHo=r(n2t,"deberta"),n2t.forEach(t),THo=r(iSe," \u2014 "),yX=n(iSe,"A",{href:!0});var s2t=s(yX);MHo=r(s2t,"DebertaForQuestionAnswering"),s2t.forEach(t),EHo=r(iSe," (DeBERTa model)"),iSe.forEach(t),CHo=i(X),Gv=n(X,"LI",{});var dSe=s(Gv);c_e=n(dSe,"STRONG",{});var l2t=s(c_e);wHo=r(l2t,"deberta-v2"),l2t.forEach(t),AHo=r(dSe," \u2014 "),xX=n(dSe,"A",{href:!0});var i2t=s(xX);LHo=r(i2t,"DebertaV2ForQuestionAnswering"),i2t.forEach(t),yHo=r(dSe," (DeBERTa-v2 model)"),dSe.forEach(t),xHo=i(X),Ov=n(X,"LI",{});var cSe=s(Ov);f_e=n(cSe,"STRONG",{});var d2t=s(f_e);$Ho=r(d2t,"distilbert"),d2t.forEach(t),kHo=r(cSe," \u2014 "),$X=n(cSe,"A",{href:!0});var c2t=s($X);SHo=r(c2t,"DistilBertForQuestionAnswering"),c2t.forEach(t),RHo=r(cSe," (DistilBERT model)"),cSe.forEach(t),PHo=i(X),Vv=n(X,"LI",{});var fSe=s(Vv);m_e=n(fSe,"STRONG",{});var f2t=s(m_e);BHo=r(f2t,"electra"),f2t.forEach(t),IHo=r(fSe," \u2014 "),kX=n(fSe,"A",{href:!0});var m2t=s(kX);NHo=r(m2t,"ElectraForQuestionAnswering"),m2t.forEach(t),qHo=r(fSe," (ELECTRA model)"),fSe.forEach(t),jHo=i(X),Xv=n(X,"LI",{});var mSe=s(Xv);g_e=n(mSe,"STRONG",{});var g2t=s(g_e);DHo=r(g2t,"flaubert"),g2t.forEach(t),GHo=r(mSe," \u2014 "),SX=n(mSe,"A",{href:!0});var h2t=s(SX);OHo=r(h2t,"FlaubertForQuestionAnsweringSimple"),h2t.forEach(t),VHo=r(mSe," (FlauBERT model)"),mSe.forEach(t),XHo=i(X),zv=n(X,"LI",{});var gSe=s(zv);h_e=n(gSe,"STRONG",{});var p2t=s(h_e);zHo=r(p2t,"fnet"),p2t.forEach(t),WHo=r(gSe," \u2014 "),RX=n(gSe,"A",{href:!0});var _2t=s(RX);QHo=r(_2t,"FNetForQuestionAnswering"),_2t.forEach(t),HHo=r(gSe," (FNet model)"),gSe.forEach(t),UHo=i(X),Wv=n(X,"LI",{});var hSe=s(Wv);p_e=n(hSe,"STRONG",{});var u2t=s(p_e);JHo=r(u2t,"funnel"),u2t.forEach(t),YHo=r(hSe," \u2014 "),PX=n(hSe,"A",{href:!0});var b2t=s(PX);KHo=r(b2t,"FunnelForQuestionAnswering"),b2t.forEach(t),ZHo=r(hSe," (Funnel Transformer model)"),hSe.forEach(t),eUo=i(X),Qv=n(X,"LI",{});var pSe=s(Qv);__e=n(pSe,"STRONG",{});var v2t=s(__e);oUo=r(v2t,"gptj"),v2t.forEach(t),rUo=r(pSe," \u2014 "),BX=n(pSe,"A",{href:!0});var F2t=s(BX);tUo=r(F2t,"GPTJForQuestionAnswering"),F2t.forEach(t),aUo=r(pSe," (GPT-J model)"),pSe.forEach(t),nUo=i(X),Hv=n(X,"LI",{});var _Se=s(Hv);u_e=n(_Se,"STRONG",{});var T2t=s(u_e);sUo=r(T2t,"ibert"),T2t.forEach(t),lUo=r(_Se," \u2014 "),IX=n(_Se,"A",{href:!0});var M2t=s(IX);iUo=r(M2t,"IBertForQuestionAnswering"),M2t.forEach(t),dUo=r(_Se," (I-BERT model)"),_Se.forEach(t),cUo=i(X),Uv=n(X,"LI",{});var uSe=s(Uv);b_e=n(uSe,"STRONG",{});var E2t=s(b_e);fUo=r(E2t,"layoutlmv2"),E2t.forEach(t),mUo=r(uSe," \u2014 "),NX=n(uSe,"A",{href:!0});var C2t=s(NX);gUo=r(C2t,"LayoutLMv2ForQuestionAnswering"),C2t.forEach(t),hUo=r(uSe," (LayoutLMv2 model)"),uSe.forEach(t),pUo=i(X),Jv=n(X,"LI",{});var bSe=s(Jv);v_e=n(bSe,"STRONG",{});var w2t=s(v_e);_Uo=r(w2t,"layoutlmv3"),w2t.forEach(t),uUo=r(bSe," \u2014 "),qX=n(bSe,"A",{href:!0});var A2t=s(qX);bUo=r(A2t,"LayoutLMv3ForQuestionAnswering"),A2t.forEach(t),vUo=r(bSe," (LayoutLMv3 model)"),bSe.forEach(t),FUo=i(X),Yv=n(X,"LI",{});var vSe=s(Yv);F_e=n(vSe,"STRONG",{});var L2t=s(F_e);TUo=r(L2t,"led"),L2t.forEach(t),MUo=r(vSe," \u2014 "),jX=n(vSe,"A",{href:!0});var y2t=s(jX);EUo=r(y2t,"LEDForQuestionAnswering"),y2t.forEach(t),CUo=r(vSe," (LED model)"),vSe.forEach(t),wUo=i(X),Kv=n(X,"LI",{});var FSe=s(Kv);T_e=n(FSe,"STRONG",{});var x2t=s(T_e);AUo=r(x2t,"longformer"),x2t.forEach(t),LUo=r(FSe," \u2014 "),DX=n(FSe,"A",{href:!0});var $2t=s(DX);yUo=r($2t,"LongformerForQuestionAnswering"),$2t.forEach(t),xUo=r(FSe," (Longformer model)"),FSe.forEach(t),$Uo=i(X),Zv=n(X,"LI",{});var TSe=s(Zv);M_e=n(TSe,"STRONG",{});var k2t=s(M_e);kUo=r(k2t,"lxmert"),k2t.forEach(t),SUo=r(TSe," \u2014 "),GX=n(TSe,"A",{href:!0});var S2t=s(GX);RUo=r(S2t,"LxmertForQuestionAnswering"),S2t.forEach(t),PUo=r(TSe," (LXMERT model)"),TSe.forEach(t),BUo=i(X),eF=n(X,"LI",{});var MSe=s(eF);E_e=n(MSe,"STRONG",{});var R2t=s(E_e);IUo=r(R2t,"mbart"),R2t.forEach(t),NUo=r(MSe," \u2014 "),OX=n(MSe,"A",{href:!0});var P2t=s(OX);qUo=r(P2t,"MBartForQuestionAnswering"),P2t.forEach(t),jUo=r(MSe," (mBART model)"),MSe.forEach(t),DUo=i(X),oF=n(X,"LI",{});var ESe=s(oF);C_e=n(ESe,"STRONG",{});var B2t=s(C_e);GUo=r(B2t,"megatron-bert"),B2t.forEach(t),OUo=r(ESe," \u2014 "),VX=n(ESe,"A",{href:!0});var I2t=s(VX);VUo=r(I2t,"MegatronBertForQuestionAnswering"),I2t.forEach(t),XUo=r(ESe," (Megatron-BERT model)"),ESe.forEach(t),zUo=i(X),rF=n(X,"LI",{});var CSe=s(rF);w_e=n(CSe,"STRONG",{});var N2t=s(w_e);WUo=r(N2t,"mobilebert"),N2t.forEach(t),QUo=r(CSe," \u2014 "),XX=n(CSe,"A",{href:!0});var q2t=s(XX);HUo=r(q2t,"MobileBertForQuestionAnswering"),q2t.forEach(t),UUo=r(CSe," (MobileBERT model)"),CSe.forEach(t),JUo=i(X),tF=n(X,"LI",{});var wSe=s(tF);A_e=n(wSe,"STRONG",{});var j2t=s(A_e);YUo=r(j2t,"mpnet"),j2t.forEach(t),KUo=r(wSe," \u2014 "),zX=n(wSe,"A",{href:!0});var D2t=s(zX);ZUo=r(D2t,"MPNetForQuestionAnswering"),D2t.forEach(t),eJo=r(wSe," (MPNet model)"),wSe.forEach(t),oJo=i(X),aF=n(X,"LI",{});var ASe=s(aF);L_e=n(ASe,"STRONG",{});var G2t=s(L_e);rJo=r(G2t,"nystromformer"),G2t.forEach(t),tJo=r(ASe," \u2014 "),WX=n(ASe,"A",{href:!0});var O2t=s(WX);aJo=r(O2t,"NystromformerForQuestionAnswering"),O2t.forEach(t),nJo=r(ASe," (Nystr\xF6mformer model)"),ASe.forEach(t),sJo=i(X),nF=n(X,"LI",{});var LSe=s(nF);y_e=n(LSe,"STRONG",{});var V2t=s(y_e);lJo=r(V2t,"qdqbert"),V2t.forEach(t),iJo=r(LSe," \u2014 "),QX=n(LSe,"A",{href:!0});var X2t=s(QX);dJo=r(X2t,"QDQBertForQuestionAnswering"),X2t.forEach(t),cJo=r(LSe," (QDQBert model)"),LSe.forEach(t),fJo=i(X),sF=n(X,"LI",{});var ySe=s(sF);x_e=n(ySe,"STRONG",{});var z2t=s(x_e);mJo=r(z2t,"reformer"),z2t.forEach(t),gJo=r(ySe," \u2014 "),HX=n(ySe,"A",{href:!0});var W2t=s(HX);hJo=r(W2t,"ReformerForQuestionAnswering"),W2t.forEach(t),pJo=r(ySe," (Reformer model)"),ySe.forEach(t),_Jo=i(X),lF=n(X,"LI",{});var xSe=s(lF);$_e=n(xSe,"STRONG",{});var Q2t=s($_e);uJo=r(Q2t,"rembert"),Q2t.forEach(t),bJo=r(xSe," \u2014 "),UX=n(xSe,"A",{href:!0});var H2t=s(UX);vJo=r(H2t,"RemBertForQuestionAnswering"),H2t.forEach(t),FJo=r(xSe," (RemBERT model)"),xSe.forEach(t),TJo=i(X),iF=n(X,"LI",{});var $Se=s(iF);k_e=n($Se,"STRONG",{});var U2t=s(k_e);MJo=r(U2t,"roberta"),U2t.forEach(t),EJo=r($Se," \u2014 "),JX=n($Se,"A",{href:!0});var J2t=s(JX);CJo=r(J2t,"RobertaForQuestionAnswering"),J2t.forEach(t),wJo=r($Se," (RoBERTa model)"),$Se.forEach(t),AJo=i(X),dF=n(X,"LI",{});var kSe=s(dF);S_e=n(kSe,"STRONG",{});var Y2t=s(S_e);LJo=r(Y2t,"roformer"),Y2t.forEach(t),yJo=r(kSe," \u2014 "),YX=n(kSe,"A",{href:!0});var K2t=s(YX);xJo=r(K2t,"RoFormerForQuestionAnswering"),K2t.forEach(t),$Jo=r(kSe," (RoFormer model)"),kSe.forEach(t),kJo=i(X),cF=n(X,"LI",{});var SSe=s(cF);R_e=n(SSe,"STRONG",{});var Z2t=s(R_e);SJo=r(Z2t,"splinter"),Z2t.forEach(t),RJo=r(SSe," \u2014 "),KX=n(SSe,"A",{href:!0});var e4t=s(KX);PJo=r(e4t,"SplinterForQuestionAnswering"),e4t.forEach(t),BJo=r(SSe," (Splinter model)"),SSe.forEach(t),IJo=i(X),fF=n(X,"LI",{});var RSe=s(fF);P_e=n(RSe,"STRONG",{});var o4t=s(P_e);NJo=r(o4t,"squeezebert"),o4t.forEach(t),qJo=r(RSe," \u2014 "),ZX=n(RSe,"A",{href:!0});var r4t=s(ZX);jJo=r(r4t,"SqueezeBertForQuestionAnswering"),r4t.forEach(t),DJo=r(RSe," (SqueezeBERT model)"),RSe.forEach(t),GJo=i(X),mF=n(X,"LI",{});var PSe=s(mF);B_e=n(PSe,"STRONG",{});var t4t=s(B_e);OJo=r(t4t,"xlm"),t4t.forEach(t),VJo=r(PSe," \u2014 "),ez=n(PSe,"A",{href:!0});var a4t=s(ez);XJo=r(a4t,"XLMForQuestionAnsweringSimple"),a4t.forEach(t),zJo=r(PSe," (XLM model)"),PSe.forEach(t),WJo=i(X),gF=n(X,"LI",{});var BSe=s(gF);I_e=n(BSe,"STRONG",{});var n4t=s(I_e);QJo=r(n4t,"xlm-roberta"),n4t.forEach(t),HJo=r(BSe," \u2014 "),oz=n(BSe,"A",{href:!0});var s4t=s(oz);UJo=r(s4t,"XLMRobertaForQuestionAnswering"),s4t.forEach(t),JJo=r(BSe," (XLM-RoBERTa model)"),BSe.forEach(t),YJo=i(X),hF=n(X,"LI",{});var ISe=s(hF);N_e=n(ISe,"STRONG",{});var l4t=s(N_e);KJo=r(l4t,"xlm-roberta-xl"),l4t.forEach(t),ZJo=r(ISe," \u2014 "),rz=n(ISe,"A",{href:!0});var i4t=s(rz);eYo=r(i4t,"XLMRobertaXLForQuestionAnswering"),i4t.forEach(t),oYo=r(ISe," (XLM-RoBERTa-XL model)"),ISe.forEach(t),rYo=i(X),pF=n(X,"LI",{});var NSe=s(pF);q_e=n(NSe,"STRONG",{});var d4t=s(q_e);tYo=r(d4t,"xlnet"),d4t.forEach(t),aYo=r(NSe," \u2014 "),tz=n(NSe,"A",{href:!0});var c4t=s(tz);nYo=r(c4t,"XLNetForQuestionAnsweringSimple"),c4t.forEach(t),sYo=r(NSe," (XLNet model)"),NSe.forEach(t),lYo=i(X),_F=n(X,"LI",{});var qSe=s(_F);j_e=n(qSe,"STRONG",{});var f4t=s(j_e);iYo=r(f4t,"yoso"),f4t.forEach(t),dYo=r(qSe," \u2014 "),az=n(qSe,"A",{href:!0});var m4t=s(az);cYo=r(m4t,"YosoForQuestionAnswering"),m4t.forEach(t),fYo=r(qSe," (YOSO model)"),qSe.forEach(t),X.forEach(t),mYo=i(ca),uF=n(ca,"P",{});var jSe=s(uF);gYo=r(jSe,"The model is set in evaluation mode by default using "),D_e=n(jSe,"CODE",{});var g4t=s(D_e);hYo=r(g4t,"model.eval()"),g4t.forEach(t),pYo=r(jSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=n(jSe,"CODE",{});var h4t=s(G_e);_Yo=r(h4t,"model.train()"),h4t.forEach(t),jSe.forEach(t),uYo=i(ca),T(bF.$$.fragment,ca),ca.forEach(t),Zs.forEach(t),TDe=i(f),td=n(f,"H2",{class:!0});var wOe=s(td);vF=n(wOe,"A",{id:!0,class:!0,href:!0});var p4t=s(vF);O_e=n(p4t,"SPAN",{});var _4t=s(O_e);T(vy.$$.fragment,_4t),_4t.forEach(t),p4t.forEach(t),bYo=i(wOe),V_e=n(wOe,"SPAN",{});var u4t=s(V_e);vYo=r(u4t,"AutoModelForTableQuestionAnswering"),u4t.forEach(t),wOe.forEach(t),MDe=i(f),qo=n(f,"DIV",{class:!0});var el=s(qo);T(Fy.$$.fragment,el),FYo=i(el),ad=n(el,"P",{});var Ree=s(ad);TYo=r(Ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nz=n(Ree,"A",{href:!0});var b4t=s(nz);MYo=r(b4t,"from_pretrained()"),b4t.forEach(t),EYo=r(Ree," class method or the "),sz=n(Ree,"A",{href:!0});var v4t=s(sz);CYo=r(v4t,"from_config()"),v4t.forEach(t),wYo=r(Ree,` class
method.`),Ree.forEach(t),AYo=i(el),Ty=n(el,"P",{});var AOe=s(Ty);LYo=r(AOe,"This class cannot be instantiated directly using "),X_e=n(AOe,"CODE",{});var F4t=s(X_e);yYo=r(F4t,"__init__()"),F4t.forEach(t),xYo=r(AOe," (throws an error)."),AOe.forEach(t),$Yo=i(el),gt=n(el,"DIV",{class:!0});var Tw=s(gt);T(My.$$.fragment,Tw),kYo=i(Tw),z_e=n(Tw,"P",{});var T4t=s(z_e);SYo=r(T4t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),T4t.forEach(t),RYo=i(Tw),nd=n(Tw,"P",{});var Pee=s(nd);PYo=r(Pee,`Note:
Loading a model from its configuration file does `),W_e=n(Pee,"STRONG",{});var M4t=s(W_e);BYo=r(M4t,"not"),M4t.forEach(t),IYo=r(Pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lz=n(Pee,"A",{href:!0});var E4t=s(lz);NYo=r(E4t,"from_pretrained()"),E4t.forEach(t),qYo=r(Pee," to load the model weights."),Pee.forEach(t),jYo=i(Tw),T(FF.$$.fragment,Tw),Tw.forEach(t),DYo=i(el),so=n(el,"DIV",{class:!0});var fa=s(so);T(Ey.$$.fragment,fa),GYo=i(fa),Q_e=n(fa,"P",{});var C4t=s(Q_e);OYo=r(C4t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),C4t.forEach(t),VYo=i(fa),qa=n(fa,"P",{});var Mw=s(qa);XYo=r(Mw,"The model class to instantiate is selected based on the "),H_e=n(Mw,"CODE",{});var w4t=s(H_e);zYo=r(w4t,"model_type"),w4t.forEach(t),WYo=r(Mw,` property of the config object (either
passed as an argument or loaded from `),U_e=n(Mw,"CODE",{});var A4t=s(U_e);QYo=r(A4t,"pretrained_model_name_or_path"),A4t.forEach(t),HYo=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=n(Mw,"CODE",{});var L4t=s(J_e);UYo=r(L4t,"pretrained_model_name_or_path"),L4t.forEach(t),JYo=r(Mw,":"),Mw.forEach(t),YYo=i(fa),Y_e=n(fa,"UL",{});var y4t=s(Y_e);TF=n(y4t,"LI",{});var DSe=s(TF);K_e=n(DSe,"STRONG",{});var x4t=s(K_e);KYo=r(x4t,"tapas"),x4t.forEach(t),ZYo=r(DSe," \u2014 "),iz=n(DSe,"A",{href:!0});var $4t=s(iz);eKo=r($4t,"TapasForQuestionAnswering"),$4t.forEach(t),oKo=r(DSe," (TAPAS model)"),DSe.forEach(t),y4t.forEach(t),rKo=i(fa),MF=n(fa,"P",{});var GSe=s(MF);tKo=r(GSe,"The model is set in evaluation mode by default using "),Z_e=n(GSe,"CODE",{});var k4t=s(Z_e);aKo=r(k4t,"model.eval()"),k4t.forEach(t),nKo=r(GSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=n(GSe,"CODE",{});var S4t=s(eue);sKo=r(S4t,"model.train()"),S4t.forEach(t),GSe.forEach(t),lKo=i(fa),T(EF.$$.fragment,fa),fa.forEach(t),el.forEach(t),EDe=i(f),sd=n(f,"H2",{class:!0});var LOe=s(sd);CF=n(LOe,"A",{id:!0,class:!0,href:!0});var R4t=s(CF);oue=n(R4t,"SPAN",{});var P4t=s(oue);T(Cy.$$.fragment,P4t),P4t.forEach(t),R4t.forEach(t),iKo=i(LOe),rue=n(LOe,"SPAN",{});var B4t=s(rue);dKo=r(B4t,"AutoModelForImageClassification"),B4t.forEach(t),LOe.forEach(t),CDe=i(f),jo=n(f,"DIV",{class:!0});var ol=s(jo);T(wy.$$.fragment,ol),cKo=i(ol),ld=n(ol,"P",{});var Bee=s(ld);fKo=r(Bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dz=n(Bee,"A",{href:!0});var I4t=s(dz);mKo=r(I4t,"from_pretrained()"),I4t.forEach(t),gKo=r(Bee," class method or the "),cz=n(Bee,"A",{href:!0});var N4t=s(cz);hKo=r(N4t,"from_config()"),N4t.forEach(t),pKo=r(Bee,` class
method.`),Bee.forEach(t),_Ko=i(ol),Ay=n(ol,"P",{});var yOe=s(Ay);uKo=r(yOe,"This class cannot be instantiated directly using "),tue=n(yOe,"CODE",{});var q4t=s(tue);bKo=r(q4t,"__init__()"),q4t.forEach(t),vKo=r(yOe," (throws an error)."),yOe.forEach(t),FKo=i(ol),ht=n(ol,"DIV",{class:!0});var Ew=s(ht);T(Ly.$$.fragment,Ew),TKo=i(Ew),aue=n(Ew,"P",{});var j4t=s(aue);MKo=r(j4t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),j4t.forEach(t),EKo=i(Ew),id=n(Ew,"P",{});var Iee=s(id);CKo=r(Iee,`Note:
Loading a model from its configuration file does `),nue=n(Iee,"STRONG",{});var D4t=s(nue);wKo=r(D4t,"not"),D4t.forEach(t),AKo=r(Iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=n(Iee,"A",{href:!0});var G4t=s(fz);LKo=r(G4t,"from_pretrained()"),G4t.forEach(t),yKo=r(Iee," to load the model weights."),Iee.forEach(t),xKo=i(Ew),T(wF.$$.fragment,Ew),Ew.forEach(t),$Ko=i(ol),lo=n(ol,"DIV",{class:!0});var ma=s(lo);T(yy.$$.fragment,ma),kKo=i(ma),sue=n(ma,"P",{});var O4t=s(sue);SKo=r(O4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),O4t.forEach(t),RKo=i(ma),ja=n(ma,"P",{});var Cw=s(ja);PKo=r(Cw,"The model class to instantiate is selected based on the "),lue=n(Cw,"CODE",{});var V4t=s(lue);BKo=r(V4t,"model_type"),V4t.forEach(t),IKo=r(Cw,` property of the config object (either
passed as an argument or loaded from `),iue=n(Cw,"CODE",{});var X4t=s(iue);NKo=r(X4t,"pretrained_model_name_or_path"),X4t.forEach(t),qKo=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=n(Cw,"CODE",{});var z4t=s(due);jKo=r(z4t,"pretrained_model_name_or_path"),z4t.forEach(t),DKo=r(Cw,":"),Cw.forEach(t),GKo=i(ma),ve=n(ma,"UL",{});var Te=s(ve);AF=n(Te,"LI",{});var OSe=s(AF);cue=n(OSe,"STRONG",{});var W4t=s(cue);OKo=r(W4t,"beit"),W4t.forEach(t),VKo=r(OSe," \u2014 "),mz=n(OSe,"A",{href:!0});var Q4t=s(mz);XKo=r(Q4t,"BeitForImageClassification"),Q4t.forEach(t),zKo=r(OSe," (BEiT model)"),OSe.forEach(t),WKo=i(Te),LF=n(Te,"LI",{});var VSe=s(LF);fue=n(VSe,"STRONG",{});var H4t=s(fue);QKo=r(H4t,"convnext"),H4t.forEach(t),HKo=r(VSe," \u2014 "),gz=n(VSe,"A",{href:!0});var U4t=s(gz);UKo=r(U4t,"ConvNextForImageClassification"),U4t.forEach(t),JKo=r(VSe," (ConvNeXT model)"),VSe.forEach(t),YKo=i(Te),yF=n(Te,"LI",{});var XSe=s(yF);mue=n(XSe,"STRONG",{});var J4t=s(mue);KKo=r(J4t,"cvt"),J4t.forEach(t),ZKo=r(XSe," \u2014 "),hz=n(XSe,"A",{href:!0});var Y4t=s(hz);eZo=r(Y4t,"CvtForImageClassification"),Y4t.forEach(t),oZo=r(XSe," (CvT model)"),XSe.forEach(t),rZo=i(Te),xF=n(Te,"LI",{});var zSe=s(xF);gue=n(zSe,"STRONG",{});var K4t=s(gue);tZo=r(K4t,"data2vec-vision"),K4t.forEach(t),aZo=r(zSe," \u2014 "),pz=n(zSe,"A",{href:!0});var Z4t=s(pz);nZo=r(Z4t,"Data2VecVisionForImageClassification"),Z4t.forEach(t),sZo=r(zSe," (Data2VecVision model)"),zSe.forEach(t),lZo=i(Te),Is=n(Te,"LI",{});var hk=s(Is);hue=n(hk,"STRONG",{});var evt=s(hue);iZo=r(evt,"deit"),evt.forEach(t),dZo=r(hk," \u2014 "),_z=n(hk,"A",{href:!0});var ovt=s(_z);cZo=r(ovt,"DeiTForImageClassification"),ovt.forEach(t),fZo=r(hk," or "),uz=n(hk,"A",{href:!0});var rvt=s(uz);mZo=r(rvt,"DeiTForImageClassificationWithTeacher"),rvt.forEach(t),gZo=r(hk," (DeiT model)"),hk.forEach(t),hZo=i(Te),$F=n(Te,"LI",{});var WSe=s($F);pue=n(WSe,"STRONG",{});var tvt=s(pue);pZo=r(tvt,"imagegpt"),tvt.forEach(t),_Zo=r(WSe," \u2014 "),bz=n(WSe,"A",{href:!0});var avt=s(bz);uZo=r(avt,"ImageGPTForImageClassification"),avt.forEach(t),bZo=r(WSe," (ImageGPT model)"),WSe.forEach(t),vZo=i(Te),Ns=n(Te,"LI",{});var pk=s(Ns);_ue=n(pk,"STRONG",{});var nvt=s(_ue);FZo=r(nvt,"levit"),nvt.forEach(t),TZo=r(pk," \u2014 "),vz=n(pk,"A",{href:!0});var svt=s(vz);MZo=r(svt,"LevitForImageClassification"),svt.forEach(t),EZo=r(pk," or "),Fz=n(pk,"A",{href:!0});var lvt=s(Fz);CZo=r(lvt,"LevitForImageClassificationWithTeacher"),lvt.forEach(t),wZo=r(pk," (LeViT model)"),pk.forEach(t),AZo=i(Te),pt=n(Te,"LI",{});var _f=s(pt);uue=n(_f,"STRONG",{});var ivt=s(uue);LZo=r(ivt,"perceiver"),ivt.forEach(t),yZo=r(_f," \u2014 "),Tz=n(_f,"A",{href:!0});var dvt=s(Tz);xZo=r(dvt,"PerceiverForImageClassificationLearned"),dvt.forEach(t),$Zo=r(_f," or "),Mz=n(_f,"A",{href:!0});var cvt=s(Mz);kZo=r(cvt,"PerceiverForImageClassificationFourier"),cvt.forEach(t),SZo=r(_f," or "),Ez=n(_f,"A",{href:!0});var fvt=s(Ez);RZo=r(fvt,"PerceiverForImageClassificationConvProcessing"),fvt.forEach(t),PZo=r(_f," (Perceiver model)"),_f.forEach(t),BZo=i(Te),kF=n(Te,"LI",{});var QSe=s(kF);bue=n(QSe,"STRONG",{});var mvt=s(bue);IZo=r(mvt,"poolformer"),mvt.forEach(t),NZo=r(QSe," \u2014 "),Cz=n(QSe,"A",{href:!0});var gvt=s(Cz);qZo=r(gvt,"PoolFormerForImageClassification"),gvt.forEach(t),jZo=r(QSe," (PoolFormer model)"),QSe.forEach(t),DZo=i(Te),SF=n(Te,"LI",{});var HSe=s(SF);vue=n(HSe,"STRONG",{});var hvt=s(vue);GZo=r(hvt,"regnet"),hvt.forEach(t),OZo=r(HSe," \u2014 "),wz=n(HSe,"A",{href:!0});var pvt=s(wz);VZo=r(pvt,"RegNetForImageClassification"),pvt.forEach(t),XZo=r(HSe," (RegNet model)"),HSe.forEach(t),zZo=i(Te),RF=n(Te,"LI",{});var USe=s(RF);Fue=n(USe,"STRONG",{});var _vt=s(Fue);WZo=r(_vt,"resnet"),_vt.forEach(t),QZo=r(USe," \u2014 "),Az=n(USe,"A",{href:!0});var uvt=s(Az);HZo=r(uvt,"ResNetForImageClassification"),uvt.forEach(t),UZo=r(USe," (ResNet model)"),USe.forEach(t),JZo=i(Te),PF=n(Te,"LI",{});var JSe=s(PF);Tue=n(JSe,"STRONG",{});var bvt=s(Tue);YZo=r(bvt,"segformer"),bvt.forEach(t),KZo=r(JSe," \u2014 "),Lz=n(JSe,"A",{href:!0});var vvt=s(Lz);ZZo=r(vvt,"SegformerForImageClassification"),vvt.forEach(t),eer=r(JSe," (SegFormer model)"),JSe.forEach(t),oer=i(Te),BF=n(Te,"LI",{});var YSe=s(BF);Mue=n(YSe,"STRONG",{});var Fvt=s(Mue);rer=r(Fvt,"swin"),Fvt.forEach(t),ter=r(YSe," \u2014 "),yz=n(YSe,"A",{href:!0});var Tvt=s(yz);aer=r(Tvt,"SwinForImageClassification"),Tvt.forEach(t),ner=r(YSe," (Swin Transformer model)"),YSe.forEach(t),ser=i(Te),IF=n(Te,"LI",{});var KSe=s(IF);Eue=n(KSe,"STRONG",{});var Mvt=s(Eue);ler=r(Mvt,"van"),Mvt.forEach(t),ier=r(KSe," \u2014 "),xz=n(KSe,"A",{href:!0});var Evt=s(xz);der=r(Evt,"VanForImageClassification"),Evt.forEach(t),cer=r(KSe," (VAN model)"),KSe.forEach(t),fer=i(Te),NF=n(Te,"LI",{});var ZSe=s(NF);Cue=n(ZSe,"STRONG",{});var Cvt=s(Cue);mer=r(Cvt,"vit"),Cvt.forEach(t),ger=r(ZSe," \u2014 "),$z=n(ZSe,"A",{href:!0});var wvt=s($z);her=r(wvt,"ViTForImageClassification"),wvt.forEach(t),per=r(ZSe," (ViT model)"),ZSe.forEach(t),Te.forEach(t),_er=i(ma),qF=n(ma,"P",{});var eRe=s(qF);uer=r(eRe,"The model is set in evaluation mode by default using "),wue=n(eRe,"CODE",{});var Avt=s(wue);ber=r(Avt,"model.eval()"),Avt.forEach(t),ver=r(eRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=n(eRe,"CODE",{});var Lvt=s(Aue);Fer=r(Lvt,"model.train()"),Lvt.forEach(t),eRe.forEach(t),Ter=i(ma),T(jF.$$.fragment,ma),ma.forEach(t),ol.forEach(t),wDe=i(f),dd=n(f,"H2",{class:!0});var xOe=s(dd);DF=n(xOe,"A",{id:!0,class:!0,href:!0});var yvt=s(DF);Lue=n(yvt,"SPAN",{});var xvt=s(Lue);T(xy.$$.fragment,xvt),xvt.forEach(t),yvt.forEach(t),Mer=i(xOe),yue=n(xOe,"SPAN",{});var $vt=s(yue);Eer=r($vt,"AutoModelForVision2Seq"),$vt.forEach(t),xOe.forEach(t),ADe=i(f),Do=n(f,"DIV",{class:!0});var rl=s(Do);T($y.$$.fragment,rl),Cer=i(rl),cd=n(rl,"P",{});var Nee=s(cd);wer=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kz=n(Nee,"A",{href:!0});var kvt=s(kz);Aer=r(kvt,"from_pretrained()"),kvt.forEach(t),Ler=r(Nee," class method or the "),Sz=n(Nee,"A",{href:!0});var Svt=s(Sz);yer=r(Svt,"from_config()"),Svt.forEach(t),xer=r(Nee,` class
method.`),Nee.forEach(t),$er=i(rl),ky=n(rl,"P",{});var $Oe=s(ky);ker=r($Oe,"This class cannot be instantiated directly using "),xue=n($Oe,"CODE",{});var Rvt=s(xue);Ser=r(Rvt,"__init__()"),Rvt.forEach(t),Rer=r($Oe," (throws an error)."),$Oe.forEach(t),Per=i(rl),_t=n(rl,"DIV",{class:!0});var ww=s(_t);T(Sy.$$.fragment,ww),Ber=i(ww),$ue=n(ww,"P",{});var Pvt=s($ue);Ier=r(Pvt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pvt.forEach(t),Ner=i(ww),fd=n(ww,"P",{});var qee=s(fd);qer=r(qee,`Note:
Loading a model from its configuration file does `),kue=n(qee,"STRONG",{});var Bvt=s(kue);jer=r(Bvt,"not"),Bvt.forEach(t),Der=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=n(qee,"A",{href:!0});var Ivt=s(Rz);Ger=r(Ivt,"from_pretrained()"),Ivt.forEach(t),Oer=r(qee," to load the model weights."),qee.forEach(t),Ver=i(ww),T(GF.$$.fragment,ww),ww.forEach(t),Xer=i(rl),io=n(rl,"DIV",{class:!0});var ga=s(io);T(Ry.$$.fragment,ga),zer=i(ga),Sue=n(ga,"P",{});var Nvt=s(Sue);Wer=r(Nvt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Nvt.forEach(t),Qer=i(ga),Da=n(ga,"P",{});var Aw=s(Da);Her=r(Aw,"The model class to instantiate is selected based on the "),Rue=n(Aw,"CODE",{});var qvt=s(Rue);Uer=r(qvt,"model_type"),qvt.forEach(t),Jer=r(Aw,` property of the config object (either
passed as an argument or loaded from `),Pue=n(Aw,"CODE",{});var jvt=s(Pue);Yer=r(jvt,"pretrained_model_name_or_path"),jvt.forEach(t),Ker=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=n(Aw,"CODE",{});var Dvt=s(Bue);Zer=r(Dvt,"pretrained_model_name_or_path"),Dvt.forEach(t),eor=r(Aw,":"),Aw.forEach(t),oor=i(ga),Iue=n(ga,"UL",{});var Gvt=s(Iue);OF=n(Gvt,"LI",{});var oRe=s(OF);Nue=n(oRe,"STRONG",{});var Ovt=s(Nue);ror=r(Ovt,"vision-encoder-decoder"),Ovt.forEach(t),tor=r(oRe," \u2014 "),Pz=n(oRe,"A",{href:!0});var Vvt=s(Pz);aor=r(Vvt,"VisionEncoderDecoderModel"),Vvt.forEach(t),nor=r(oRe," (Vision Encoder decoder model)"),oRe.forEach(t),Gvt.forEach(t),sor=i(ga),VF=n(ga,"P",{});var rRe=s(VF);lor=r(rRe,"The model is set in evaluation mode by default using "),que=n(rRe,"CODE",{});var Xvt=s(que);ior=r(Xvt,"model.eval()"),Xvt.forEach(t),dor=r(rRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jue=n(rRe,"CODE",{});var zvt=s(jue);cor=r(zvt,"model.train()"),zvt.forEach(t),rRe.forEach(t),mor=i(ga),T(XF.$$.fragment,ga),ga.forEach(t),rl.forEach(t),LDe=i(f),md=n(f,"H2",{class:!0});var kOe=s(md);zF=n(kOe,"A",{id:!0,class:!0,href:!0});var Wvt=s(zF);Due=n(Wvt,"SPAN",{});var Qvt=s(Due);T(Py.$$.fragment,Qvt),Qvt.forEach(t),Wvt.forEach(t),gor=i(kOe),Gue=n(kOe,"SPAN",{});var Hvt=s(Gue);hor=r(Hvt,"AutoModelForAudioClassification"),Hvt.forEach(t),kOe.forEach(t),yDe=i(f),Go=n(f,"DIV",{class:!0});var tl=s(Go);T(By.$$.fragment,tl),por=i(tl),gd=n(tl,"P",{});var jee=s(gd);_or=r(jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Bz=n(jee,"A",{href:!0});var Uvt=s(Bz);uor=r(Uvt,"from_pretrained()"),Uvt.forEach(t),bor=r(jee," class method or the "),Iz=n(jee,"A",{href:!0});var Jvt=s(Iz);vor=r(Jvt,"from_config()"),Jvt.forEach(t),For=r(jee,` class
method.`),jee.forEach(t),Tor=i(tl),Iy=n(tl,"P",{});var SOe=s(Iy);Mor=r(SOe,"This class cannot be instantiated directly using "),Oue=n(SOe,"CODE",{});var Yvt=s(Oue);Eor=r(Yvt,"__init__()"),Yvt.forEach(t),Cor=r(SOe," (throws an error)."),SOe.forEach(t),wor=i(tl),ut=n(tl,"DIV",{class:!0});var Lw=s(ut);T(Ny.$$.fragment,Lw),Aor=i(Lw),Vue=n(Lw,"P",{});var Kvt=s(Vue);Lor=r(Kvt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Kvt.forEach(t),yor=i(Lw),hd=n(Lw,"P",{});var Dee=s(hd);xor=r(Dee,`Note:
Loading a model from its configuration file does `),Xue=n(Dee,"STRONG",{});var Zvt=s(Xue);$or=r(Zvt,"not"),Zvt.forEach(t),kor=r(Dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(Dee,"A",{href:!0});var eFt=s(Nz);Sor=r(eFt,"from_pretrained()"),eFt.forEach(t),Ror=r(Dee," to load the model weights."),Dee.forEach(t),Por=i(Lw),T(WF.$$.fragment,Lw),Lw.forEach(t),Bor=i(tl),co=n(tl,"DIV",{class:!0});var ha=s(co);T(qy.$$.fragment,ha),Ior=i(ha),zue=n(ha,"P",{});var oFt=s(zue);Nor=r(oFt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),oFt.forEach(t),qor=i(ha),Ga=n(ha,"P",{});var yw=s(Ga);jor=r(yw,"The model class to instantiate is selected based on the "),Wue=n(yw,"CODE",{});var rFt=s(Wue);Dor=r(rFt,"model_type"),rFt.forEach(t),Gor=r(yw,` property of the config object (either
passed as an argument or loaded from `),Que=n(yw,"CODE",{});var tFt=s(Que);Oor=r(tFt,"pretrained_model_name_or_path"),tFt.forEach(t),Vor=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=n(yw,"CODE",{});var aFt=s(Hue);Xor=r(aFt,"pretrained_model_name_or_path"),aFt.forEach(t),zor=r(yw,":"),yw.forEach(t),Wor=i(ha),Re=n(ha,"UL",{});var Xe=s(Re);QF=n(Xe,"LI",{});var tRe=s(QF);Uue=n(tRe,"STRONG",{});var nFt=s(Uue);Qor=r(nFt,"data2vec-audio"),nFt.forEach(t),Hor=r(tRe," \u2014 "),qz=n(tRe,"A",{href:!0});var sFt=s(qz);Uor=r(sFt,"Data2VecAudioForSequenceClassification"),sFt.forEach(t),Jor=r(tRe," (Data2VecAudio model)"),tRe.forEach(t),Yor=i(Xe),HF=n(Xe,"LI",{});var aRe=s(HF);Jue=n(aRe,"STRONG",{});var lFt=s(Jue);Kor=r(lFt,"hubert"),lFt.forEach(t),Zor=r(aRe," \u2014 "),jz=n(aRe,"A",{href:!0});var iFt=s(jz);err=r(iFt,"HubertForSequenceClassification"),iFt.forEach(t),orr=r(aRe," (Hubert model)"),aRe.forEach(t),rrr=i(Xe),UF=n(Xe,"LI",{});var nRe=s(UF);Yue=n(nRe,"STRONG",{});var dFt=s(Yue);trr=r(dFt,"sew"),dFt.forEach(t),arr=r(nRe," \u2014 "),Dz=n(nRe,"A",{href:!0});var cFt=s(Dz);nrr=r(cFt,"SEWForSequenceClassification"),cFt.forEach(t),srr=r(nRe," (SEW model)"),nRe.forEach(t),lrr=i(Xe),JF=n(Xe,"LI",{});var sRe=s(JF);Kue=n(sRe,"STRONG",{});var fFt=s(Kue);irr=r(fFt,"sew-d"),fFt.forEach(t),drr=r(sRe," \u2014 "),Gz=n(sRe,"A",{href:!0});var mFt=s(Gz);crr=r(mFt,"SEWDForSequenceClassification"),mFt.forEach(t),frr=r(sRe," (SEW-D model)"),sRe.forEach(t),mrr=i(Xe),YF=n(Xe,"LI",{});var lRe=s(YF);Zue=n(lRe,"STRONG",{});var gFt=s(Zue);grr=r(gFt,"unispeech"),gFt.forEach(t),hrr=r(lRe," \u2014 "),Oz=n(lRe,"A",{href:!0});var hFt=s(Oz);prr=r(hFt,"UniSpeechForSequenceClassification"),hFt.forEach(t),_rr=r(lRe," (UniSpeech model)"),lRe.forEach(t),urr=i(Xe),KF=n(Xe,"LI",{});var iRe=s(KF);e1e=n(iRe,"STRONG",{});var pFt=s(e1e);brr=r(pFt,"unispeech-sat"),pFt.forEach(t),vrr=r(iRe," \u2014 "),Vz=n(iRe,"A",{href:!0});var _Ft=s(Vz);Frr=r(_Ft,"UniSpeechSatForSequenceClassification"),_Ft.forEach(t),Trr=r(iRe," (UniSpeechSat model)"),iRe.forEach(t),Mrr=i(Xe),ZF=n(Xe,"LI",{});var dRe=s(ZF);o1e=n(dRe,"STRONG",{});var uFt=s(o1e);Err=r(uFt,"wav2vec2"),uFt.forEach(t),Crr=r(dRe," \u2014 "),Xz=n(dRe,"A",{href:!0});var bFt=s(Xz);wrr=r(bFt,"Wav2Vec2ForSequenceClassification"),bFt.forEach(t),Arr=r(dRe," (Wav2Vec2 model)"),dRe.forEach(t),Lrr=i(Xe),e6=n(Xe,"LI",{});var cRe=s(e6);r1e=n(cRe,"STRONG",{});var vFt=s(r1e);yrr=r(vFt,"wav2vec2-conformer"),vFt.forEach(t),xrr=r(cRe," \u2014 "),zz=n(cRe,"A",{href:!0});var FFt=s(zz);$rr=r(FFt,"Wav2Vec2ConformerForSequenceClassification"),FFt.forEach(t),krr=r(cRe," (Wav2Vec2-Conformer model)"),cRe.forEach(t),Srr=i(Xe),o6=n(Xe,"LI",{});var fRe=s(o6);t1e=n(fRe,"STRONG",{});var TFt=s(t1e);Rrr=r(TFt,"wavlm"),TFt.forEach(t),Prr=r(fRe," \u2014 "),Wz=n(fRe,"A",{href:!0});var MFt=s(Wz);Brr=r(MFt,"WavLMForSequenceClassification"),MFt.forEach(t),Irr=r(fRe," (WavLM model)"),fRe.forEach(t),Xe.forEach(t),Nrr=i(ha),r6=n(ha,"P",{});var mRe=s(r6);qrr=r(mRe,"The model is set in evaluation mode by default using "),a1e=n(mRe,"CODE",{});var EFt=s(a1e);jrr=r(EFt,"model.eval()"),EFt.forEach(t),Drr=r(mRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n1e=n(mRe,"CODE",{});var CFt=s(n1e);Grr=r(CFt,"model.train()"),CFt.forEach(t),mRe.forEach(t),Orr=i(ha),T(t6.$$.fragment,ha),ha.forEach(t),tl.forEach(t),xDe=i(f),pd=n(f,"H2",{class:!0});var ROe=s(pd);a6=n(ROe,"A",{id:!0,class:!0,href:!0});var wFt=s(a6);s1e=n(wFt,"SPAN",{});var AFt=s(s1e);T(jy.$$.fragment,AFt),AFt.forEach(t),wFt.forEach(t),Vrr=i(ROe),l1e=n(ROe,"SPAN",{});var LFt=s(l1e);Xrr=r(LFt,"AutoModelForAudioFrameClassification"),LFt.forEach(t),ROe.forEach(t),$De=i(f),Oo=n(f,"DIV",{class:!0});var al=s(Oo);T(Dy.$$.fragment,al),zrr=i(al),_d=n(al,"P",{});var Gee=s(_d);Wrr=r(Gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Qz=n(Gee,"A",{href:!0});var yFt=s(Qz);Qrr=r(yFt,"from_pretrained()"),yFt.forEach(t),Hrr=r(Gee," class method or the "),Hz=n(Gee,"A",{href:!0});var xFt=s(Hz);Urr=r(xFt,"from_config()"),xFt.forEach(t),Jrr=r(Gee,` class
method.`),Gee.forEach(t),Yrr=i(al),Gy=n(al,"P",{});var POe=s(Gy);Krr=r(POe,"This class cannot be instantiated directly using "),i1e=n(POe,"CODE",{});var $Ft=s(i1e);Zrr=r($Ft,"__init__()"),$Ft.forEach(t),etr=r(POe," (throws an error)."),POe.forEach(t),otr=i(al),bt=n(al,"DIV",{class:!0});var xw=s(bt);T(Oy.$$.fragment,xw),rtr=i(xw),d1e=n(xw,"P",{});var kFt=s(d1e);ttr=r(kFt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),kFt.forEach(t),atr=i(xw),ud=n(xw,"P",{});var Oee=s(ud);ntr=r(Oee,`Note:
Loading a model from its configuration file does `),c1e=n(Oee,"STRONG",{});var SFt=s(c1e);str=r(SFt,"not"),SFt.forEach(t),ltr=r(Oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=n(Oee,"A",{href:!0});var RFt=s(Uz);itr=r(RFt,"from_pretrained()"),RFt.forEach(t),dtr=r(Oee," to load the model weights."),Oee.forEach(t),ctr=i(xw),T(n6.$$.fragment,xw),xw.forEach(t),ftr=i(al),fo=n(al,"DIV",{class:!0});var pa=s(fo);T(Vy.$$.fragment,pa),mtr=i(pa),f1e=n(pa,"P",{});var PFt=s(f1e);gtr=r(PFt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),PFt.forEach(t),htr=i(pa),Oa=n(pa,"P",{});var $w=s(Oa);ptr=r($w,"The model class to instantiate is selected based on the "),m1e=n($w,"CODE",{});var BFt=s(m1e);_tr=r(BFt,"model_type"),BFt.forEach(t),utr=r($w,` property of the config object (either
passed as an argument or loaded from `),g1e=n($w,"CODE",{});var IFt=s(g1e);btr=r(IFt,"pretrained_model_name_or_path"),IFt.forEach(t),vtr=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=n($w,"CODE",{});var NFt=s(h1e);Ftr=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),Ttr=r($w,":"),$w.forEach(t),Mtr=i(pa),Kr=n(pa,"UL",{});var nl=s(Kr);s6=n(nl,"LI",{});var gRe=s(s6);p1e=n(gRe,"STRONG",{});var qFt=s(p1e);Etr=r(qFt,"data2vec-audio"),qFt.forEach(t),Ctr=r(gRe," \u2014 "),Jz=n(gRe,"A",{href:!0});var jFt=s(Jz);wtr=r(jFt,"Data2VecAudioForAudioFrameClassification"),jFt.forEach(t),Atr=r(gRe," (Data2VecAudio model)"),gRe.forEach(t),Ltr=i(nl),l6=n(nl,"LI",{});var hRe=s(l6);_1e=n(hRe,"STRONG",{});var DFt=s(_1e);ytr=r(DFt,"unispeech-sat"),DFt.forEach(t),xtr=r(hRe," \u2014 "),Yz=n(hRe,"A",{href:!0});var GFt=s(Yz);$tr=r(GFt,"UniSpeechSatForAudioFrameClassification"),GFt.forEach(t),ktr=r(hRe," (UniSpeechSat model)"),hRe.forEach(t),Str=i(nl),i6=n(nl,"LI",{});var pRe=s(i6);u1e=n(pRe,"STRONG",{});var OFt=s(u1e);Rtr=r(OFt,"wav2vec2"),OFt.forEach(t),Ptr=r(pRe," \u2014 "),Kz=n(pRe,"A",{href:!0});var VFt=s(Kz);Btr=r(VFt,"Wav2Vec2ForAudioFrameClassification"),VFt.forEach(t),Itr=r(pRe," (Wav2Vec2 model)"),pRe.forEach(t),Ntr=i(nl),d6=n(nl,"LI",{});var _Re=s(d6);b1e=n(_Re,"STRONG",{});var XFt=s(b1e);qtr=r(XFt,"wav2vec2-conformer"),XFt.forEach(t),jtr=r(_Re," \u2014 "),Zz=n(_Re,"A",{href:!0});var zFt=s(Zz);Dtr=r(zFt,"Wav2Vec2ConformerForAudioFrameClassification"),zFt.forEach(t),Gtr=r(_Re," (Wav2Vec2-Conformer model)"),_Re.forEach(t),Otr=i(nl),c6=n(nl,"LI",{});var uRe=s(c6);v1e=n(uRe,"STRONG",{});var WFt=s(v1e);Vtr=r(WFt,"wavlm"),WFt.forEach(t),Xtr=r(uRe," \u2014 "),eW=n(uRe,"A",{href:!0});var QFt=s(eW);ztr=r(QFt,"WavLMForAudioFrameClassification"),QFt.forEach(t),Wtr=r(uRe," (WavLM model)"),uRe.forEach(t),nl.forEach(t),Qtr=i(pa),f6=n(pa,"P",{});var bRe=s(f6);Htr=r(bRe,"The model is set in evaluation mode by default using "),F1e=n(bRe,"CODE",{});var HFt=s(F1e);Utr=r(HFt,"model.eval()"),HFt.forEach(t),Jtr=r(bRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T1e=n(bRe,"CODE",{});var UFt=s(T1e);Ytr=r(UFt,"model.train()"),UFt.forEach(t),bRe.forEach(t),Ktr=i(pa),T(m6.$$.fragment,pa),pa.forEach(t),al.forEach(t),kDe=i(f),bd=n(f,"H2",{class:!0});var BOe=s(bd);g6=n(BOe,"A",{id:!0,class:!0,href:!0});var JFt=s(g6);M1e=n(JFt,"SPAN",{});var YFt=s(M1e);T(Xy.$$.fragment,YFt),YFt.forEach(t),JFt.forEach(t),Ztr=i(BOe),E1e=n(BOe,"SPAN",{});var KFt=s(E1e);ear=r(KFt,"AutoModelForCTC"),KFt.forEach(t),BOe.forEach(t),SDe=i(f),Vo=n(f,"DIV",{class:!0});var sl=s(Vo);T(zy.$$.fragment,sl),oar=i(sl),vd=n(sl,"P",{});var Vee=s(vd);rar=r(Vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),oW=n(Vee,"A",{href:!0});var ZFt=s(oW);tar=r(ZFt,"from_pretrained()"),ZFt.forEach(t),aar=r(Vee," class method or the "),rW=n(Vee,"A",{href:!0});var e6t=s(rW);nar=r(e6t,"from_config()"),e6t.forEach(t),sar=r(Vee,` class
method.`),Vee.forEach(t),lar=i(sl),Wy=n(sl,"P",{});var IOe=s(Wy);iar=r(IOe,"This class cannot be instantiated directly using "),C1e=n(IOe,"CODE",{});var o6t=s(C1e);dar=r(o6t,"__init__()"),o6t.forEach(t),car=r(IOe," (throws an error)."),IOe.forEach(t),far=i(sl),vt=n(sl,"DIV",{class:!0});var kw=s(vt);T(Qy.$$.fragment,kw),mar=i(kw),w1e=n(kw,"P",{});var r6t=s(w1e);gar=r(r6t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),r6t.forEach(t),har=i(kw),Fd=n(kw,"P",{});var Xee=s(Fd);par=r(Xee,`Note:
Loading a model from its configuration file does `),A1e=n(Xee,"STRONG",{});var t6t=s(A1e);_ar=r(t6t,"not"),t6t.forEach(t),uar=r(Xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=n(Xee,"A",{href:!0});var a6t=s(tW);bar=r(a6t,"from_pretrained()"),a6t.forEach(t),Far=r(Xee," to load the model weights."),Xee.forEach(t),Tar=i(kw),T(h6.$$.fragment,kw),kw.forEach(t),Mar=i(sl),mo=n(sl,"DIV",{class:!0});var _a=s(mo);T(Hy.$$.fragment,_a),Ear=i(_a),L1e=n(_a,"P",{});var n6t=s(L1e);Car=r(n6t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),n6t.forEach(t),war=i(_a),Va=n(_a,"P",{});var Sw=s(Va);Aar=r(Sw,"The model class to instantiate is selected based on the "),y1e=n(Sw,"CODE",{});var s6t=s(y1e);Lar=r(s6t,"model_type"),s6t.forEach(t),yar=r(Sw,` property of the config object (either
passed as an argument or loaded from `),x1e=n(Sw,"CODE",{});var l6t=s(x1e);xar=r(l6t,"pretrained_model_name_or_path"),l6t.forEach(t),$ar=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=n(Sw,"CODE",{});var i6t=s($1e);kar=r(i6t,"pretrained_model_name_or_path"),i6t.forEach(t),Sar=r(Sw,":"),Sw.forEach(t),Rar=i(_a),Le=n(_a,"UL",{});var Be=s(Le);p6=n(Be,"LI",{});var vRe=s(p6);k1e=n(vRe,"STRONG",{});var d6t=s(k1e);Par=r(d6t,"data2vec-audio"),d6t.forEach(t),Bar=r(vRe," \u2014 "),aW=n(vRe,"A",{href:!0});var c6t=s(aW);Iar=r(c6t,"Data2VecAudioForCTC"),c6t.forEach(t),Nar=r(vRe," (Data2VecAudio model)"),vRe.forEach(t),qar=i(Be),_6=n(Be,"LI",{});var FRe=s(_6);S1e=n(FRe,"STRONG",{});var f6t=s(S1e);jar=r(f6t,"hubert"),f6t.forEach(t),Dar=r(FRe," \u2014 "),nW=n(FRe,"A",{href:!0});var m6t=s(nW);Gar=r(m6t,"HubertForCTC"),m6t.forEach(t),Oar=r(FRe," (Hubert model)"),FRe.forEach(t),Var=i(Be),u6=n(Be,"LI",{});var TRe=s(u6);R1e=n(TRe,"STRONG",{});var g6t=s(R1e);Xar=r(g6t,"mctct"),g6t.forEach(t),zar=r(TRe," \u2014 "),sW=n(TRe,"A",{href:!0});var h6t=s(sW);War=r(h6t,"MCTCTForCTC"),h6t.forEach(t),Qar=r(TRe," (M-CTC-T model)"),TRe.forEach(t),Har=i(Be),b6=n(Be,"LI",{});var MRe=s(b6);P1e=n(MRe,"STRONG",{});var p6t=s(P1e);Uar=r(p6t,"sew"),p6t.forEach(t),Jar=r(MRe," \u2014 "),lW=n(MRe,"A",{href:!0});var _6t=s(lW);Yar=r(_6t,"SEWForCTC"),_6t.forEach(t),Kar=r(MRe," (SEW model)"),MRe.forEach(t),Zar=i(Be),v6=n(Be,"LI",{});var ERe=s(v6);B1e=n(ERe,"STRONG",{});var u6t=s(B1e);enr=r(u6t,"sew-d"),u6t.forEach(t),onr=r(ERe," \u2014 "),iW=n(ERe,"A",{href:!0});var b6t=s(iW);rnr=r(b6t,"SEWDForCTC"),b6t.forEach(t),tnr=r(ERe," (SEW-D model)"),ERe.forEach(t),anr=i(Be),F6=n(Be,"LI",{});var CRe=s(F6);I1e=n(CRe,"STRONG",{});var v6t=s(I1e);nnr=r(v6t,"unispeech"),v6t.forEach(t),snr=r(CRe," \u2014 "),dW=n(CRe,"A",{href:!0});var F6t=s(dW);lnr=r(F6t,"UniSpeechForCTC"),F6t.forEach(t),inr=r(CRe," (UniSpeech model)"),CRe.forEach(t),dnr=i(Be),T6=n(Be,"LI",{});var wRe=s(T6);N1e=n(wRe,"STRONG",{});var T6t=s(N1e);cnr=r(T6t,"unispeech-sat"),T6t.forEach(t),fnr=r(wRe," \u2014 "),cW=n(wRe,"A",{href:!0});var M6t=s(cW);mnr=r(M6t,"UniSpeechSatForCTC"),M6t.forEach(t),gnr=r(wRe," (UniSpeechSat model)"),wRe.forEach(t),hnr=i(Be),M6=n(Be,"LI",{});var ARe=s(M6);q1e=n(ARe,"STRONG",{});var E6t=s(q1e);pnr=r(E6t,"wav2vec2"),E6t.forEach(t),_nr=r(ARe," \u2014 "),fW=n(ARe,"A",{href:!0});var C6t=s(fW);unr=r(C6t,"Wav2Vec2ForCTC"),C6t.forEach(t),bnr=r(ARe," (Wav2Vec2 model)"),ARe.forEach(t),vnr=i(Be),E6=n(Be,"LI",{});var LRe=s(E6);j1e=n(LRe,"STRONG",{});var w6t=s(j1e);Fnr=r(w6t,"wav2vec2-conformer"),w6t.forEach(t),Tnr=r(LRe," \u2014 "),mW=n(LRe,"A",{href:!0});var A6t=s(mW);Mnr=r(A6t,"Wav2Vec2ConformerForCTC"),A6t.forEach(t),Enr=r(LRe," (Wav2Vec2-Conformer model)"),LRe.forEach(t),Cnr=i(Be),C6=n(Be,"LI",{});var yRe=s(C6);D1e=n(yRe,"STRONG",{});var L6t=s(D1e);wnr=r(L6t,"wavlm"),L6t.forEach(t),Anr=r(yRe," \u2014 "),gW=n(yRe,"A",{href:!0});var y6t=s(gW);Lnr=r(y6t,"WavLMForCTC"),y6t.forEach(t),ynr=r(yRe," (WavLM model)"),yRe.forEach(t),Be.forEach(t),xnr=i(_a),w6=n(_a,"P",{});var xRe=s(w6);$nr=r(xRe,"The model is set in evaluation mode by default using "),G1e=n(xRe,"CODE",{});var x6t=s(G1e);knr=r(x6t,"model.eval()"),x6t.forEach(t),Snr=r(xRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O1e=n(xRe,"CODE",{});var $6t=s(O1e);Rnr=r($6t,"model.train()"),$6t.forEach(t),xRe.forEach(t),Pnr=i(_a),T(A6.$$.fragment,_a),_a.forEach(t),sl.forEach(t),RDe=i(f),Td=n(f,"H2",{class:!0});var NOe=s(Td);L6=n(NOe,"A",{id:!0,class:!0,href:!0});var k6t=s(L6);V1e=n(k6t,"SPAN",{});var S6t=s(V1e);T(Uy.$$.fragment,S6t),S6t.forEach(t),k6t.forEach(t),Bnr=i(NOe),X1e=n(NOe,"SPAN",{});var R6t=s(X1e);Inr=r(R6t,"AutoModelForSpeechSeq2Seq"),R6t.forEach(t),NOe.forEach(t),PDe=i(f),Xo=n(f,"DIV",{class:!0});var ll=s(Xo);T(Jy.$$.fragment,ll),Nnr=i(ll),Md=n(ll,"P",{});var zee=s(Md);qnr=r(zee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hW=n(zee,"A",{href:!0});var P6t=s(hW);jnr=r(P6t,"from_pretrained()"),P6t.forEach(t),Dnr=r(zee," class method or the "),pW=n(zee,"A",{href:!0});var B6t=s(pW);Gnr=r(B6t,"from_config()"),B6t.forEach(t),Onr=r(zee,` class
method.`),zee.forEach(t),Vnr=i(ll),Yy=n(ll,"P",{});var qOe=s(Yy);Xnr=r(qOe,"This class cannot be instantiated directly using "),z1e=n(qOe,"CODE",{});var I6t=s(z1e);znr=r(I6t,"__init__()"),I6t.forEach(t),Wnr=r(qOe," (throws an error)."),qOe.forEach(t),Qnr=i(ll),Ft=n(ll,"DIV",{class:!0});var Rw=s(Ft);T(Ky.$$.fragment,Rw),Hnr=i(Rw),W1e=n(Rw,"P",{});var N6t=s(W1e);Unr=r(N6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),N6t.forEach(t),Jnr=i(Rw),Ed=n(Rw,"P",{});var Wee=s(Ed);Ynr=r(Wee,`Note:
Loading a model from its configuration file does `),Q1e=n(Wee,"STRONG",{});var q6t=s(Q1e);Knr=r(q6t,"not"),q6t.forEach(t),Znr=r(Wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=n(Wee,"A",{href:!0});var j6t=s(_W);esr=r(j6t,"from_pretrained()"),j6t.forEach(t),osr=r(Wee," to load the model weights."),Wee.forEach(t),rsr=i(Rw),T(y6.$$.fragment,Rw),Rw.forEach(t),tsr=i(ll),go=n(ll,"DIV",{class:!0});var ua=s(go);T(Zy.$$.fragment,ua),asr=i(ua),H1e=n(ua,"P",{});var D6t=s(H1e);nsr=r(D6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),D6t.forEach(t),ssr=i(ua),Xa=n(ua,"P",{});var Pw=s(Xa);lsr=r(Pw,"The model class to instantiate is selected based on the "),U1e=n(Pw,"CODE",{});var G6t=s(U1e);isr=r(G6t,"model_type"),G6t.forEach(t),dsr=r(Pw,` property of the config object (either
passed as an argument or loaded from `),J1e=n(Pw,"CODE",{});var O6t=s(J1e);csr=r(O6t,"pretrained_model_name_or_path"),O6t.forEach(t),fsr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=n(Pw,"CODE",{});var V6t=s(Y1e);msr=r(V6t,"pretrained_model_name_or_path"),V6t.forEach(t),gsr=r(Pw,":"),Pw.forEach(t),hsr=i(ua),e8=n(ua,"UL",{});var jOe=s(e8);x6=n(jOe,"LI",{});var $Re=s(x6);K1e=n($Re,"STRONG",{});var X6t=s(K1e);psr=r(X6t,"speech-encoder-decoder"),X6t.forEach(t),_sr=r($Re," \u2014 "),uW=n($Re,"A",{href:!0});var z6t=s(uW);usr=r(z6t,"SpeechEncoderDecoderModel"),z6t.forEach(t),bsr=r($Re," (Speech Encoder decoder model)"),$Re.forEach(t),vsr=i(jOe),$6=n(jOe,"LI",{});var kRe=s($6);Z1e=n(kRe,"STRONG",{});var W6t=s(Z1e);Fsr=r(W6t,"speech_to_text"),W6t.forEach(t),Tsr=r(kRe," \u2014 "),bW=n(kRe,"A",{href:!0});var Q6t=s(bW);Msr=r(Q6t,"Speech2TextForConditionalGeneration"),Q6t.forEach(t),Esr=r(kRe," (Speech2Text model)"),kRe.forEach(t),jOe.forEach(t),Csr=i(ua),k6=n(ua,"P",{});var SRe=s(k6);wsr=r(SRe,"The model is set in evaluation mode by default using "),ebe=n(SRe,"CODE",{});var H6t=s(ebe);Asr=r(H6t,"model.eval()"),H6t.forEach(t),Lsr=r(SRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=n(SRe,"CODE",{});var U6t=s(obe);ysr=r(U6t,"model.train()"),U6t.forEach(t),SRe.forEach(t),xsr=i(ua),T(S6.$$.fragment,ua),ua.forEach(t),ll.forEach(t),BDe=i(f),Cd=n(f,"H2",{class:!0});var DOe=s(Cd);R6=n(DOe,"A",{id:!0,class:!0,href:!0});var J6t=s(R6);rbe=n(J6t,"SPAN",{});var Y6t=s(rbe);T(o8.$$.fragment,Y6t),Y6t.forEach(t),J6t.forEach(t),$sr=i(DOe),tbe=n(DOe,"SPAN",{});var K6t=s(tbe);ksr=r(K6t,"AutoModelForAudioXVector"),K6t.forEach(t),DOe.forEach(t),IDe=i(f),zo=n(f,"DIV",{class:!0});var il=s(zo);T(r8.$$.fragment,il),Ssr=i(il),wd=n(il,"P",{});var Qee=s(wd);Rsr=r(Qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),vW=n(Qee,"A",{href:!0});var Z6t=s(vW);Psr=r(Z6t,"from_pretrained()"),Z6t.forEach(t),Bsr=r(Qee," class method or the "),FW=n(Qee,"A",{href:!0});var eTt=s(FW);Isr=r(eTt,"from_config()"),eTt.forEach(t),Nsr=r(Qee,` class
method.`),Qee.forEach(t),qsr=i(il),t8=n(il,"P",{});var GOe=s(t8);jsr=r(GOe,"This class cannot be instantiated directly using "),abe=n(GOe,"CODE",{});var oTt=s(abe);Dsr=r(oTt,"__init__()"),oTt.forEach(t),Gsr=r(GOe," (throws an error)."),GOe.forEach(t),Osr=i(il),Tt=n(il,"DIV",{class:!0});var Bw=s(Tt);T(a8.$$.fragment,Bw),Vsr=i(Bw),nbe=n(Bw,"P",{});var rTt=s(nbe);Xsr=r(rTt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),rTt.forEach(t),zsr=i(Bw),Ad=n(Bw,"P",{});var Hee=s(Ad);Wsr=r(Hee,`Note:
Loading a model from its configuration file does `),sbe=n(Hee,"STRONG",{});var tTt=s(sbe);Qsr=r(tTt,"not"),tTt.forEach(t),Hsr=r(Hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(Hee,"A",{href:!0});var aTt=s(TW);Usr=r(aTt,"from_pretrained()"),aTt.forEach(t),Jsr=r(Hee," to load the model weights."),Hee.forEach(t),Ysr=i(Bw),T(P6.$$.fragment,Bw),Bw.forEach(t),Ksr=i(il),ho=n(il,"DIV",{class:!0});var ba=s(ho);T(n8.$$.fragment,ba),Zsr=i(ba),lbe=n(ba,"P",{});var nTt=s(lbe);elr=r(nTt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),nTt.forEach(t),olr=i(ba),za=n(ba,"P",{});var Iw=s(za);rlr=r(Iw,"The model class to instantiate is selected based on the "),ibe=n(Iw,"CODE",{});var sTt=s(ibe);tlr=r(sTt,"model_type"),sTt.forEach(t),alr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),dbe=n(Iw,"CODE",{});var lTt=s(dbe);nlr=r(lTt,"pretrained_model_name_or_path"),lTt.forEach(t),slr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=n(Iw,"CODE",{});var iTt=s(cbe);llr=r(iTt,"pretrained_model_name_or_path"),iTt.forEach(t),ilr=r(Iw,":"),Iw.forEach(t),dlr=i(ba),Zr=n(ba,"UL",{});var dl=s(Zr);B6=n(dl,"LI",{});var RRe=s(B6);fbe=n(RRe,"STRONG",{});var dTt=s(fbe);clr=r(dTt,"data2vec-audio"),dTt.forEach(t),flr=r(RRe," \u2014 "),MW=n(RRe,"A",{href:!0});var cTt=s(MW);mlr=r(cTt,"Data2VecAudioForXVector"),cTt.forEach(t),glr=r(RRe," (Data2VecAudio model)"),RRe.forEach(t),hlr=i(dl),I6=n(dl,"LI",{});var PRe=s(I6);mbe=n(PRe,"STRONG",{});var fTt=s(mbe);plr=r(fTt,"unispeech-sat"),fTt.forEach(t),_lr=r(PRe," \u2014 "),EW=n(PRe,"A",{href:!0});var mTt=s(EW);ulr=r(mTt,"UniSpeechSatForXVector"),mTt.forEach(t),blr=r(PRe," (UniSpeechSat model)"),PRe.forEach(t),vlr=i(dl),N6=n(dl,"LI",{});var BRe=s(N6);gbe=n(BRe,"STRONG",{});var gTt=s(gbe);Flr=r(gTt,"wav2vec2"),gTt.forEach(t),Tlr=r(BRe," \u2014 "),CW=n(BRe,"A",{href:!0});var hTt=s(CW);Mlr=r(hTt,"Wav2Vec2ForXVector"),hTt.forEach(t),Elr=r(BRe," (Wav2Vec2 model)"),BRe.forEach(t),Clr=i(dl),q6=n(dl,"LI",{});var IRe=s(q6);hbe=n(IRe,"STRONG",{});var pTt=s(hbe);wlr=r(pTt,"wav2vec2-conformer"),pTt.forEach(t),Alr=r(IRe," \u2014 "),wW=n(IRe,"A",{href:!0});var _Tt=s(wW);Llr=r(_Tt,"Wav2Vec2ConformerForXVector"),_Tt.forEach(t),ylr=r(IRe," (Wav2Vec2-Conformer model)"),IRe.forEach(t),xlr=i(dl),j6=n(dl,"LI",{});var NRe=s(j6);pbe=n(NRe,"STRONG",{});var uTt=s(pbe);$lr=r(uTt,"wavlm"),uTt.forEach(t),klr=r(NRe," \u2014 "),AW=n(NRe,"A",{href:!0});var bTt=s(AW);Slr=r(bTt,"WavLMForXVector"),bTt.forEach(t),Rlr=r(NRe," (WavLM model)"),NRe.forEach(t),dl.forEach(t),Plr=i(ba),D6=n(ba,"P",{});var qRe=s(D6);Blr=r(qRe,"The model is set in evaluation mode by default using "),_be=n(qRe,"CODE",{});var vTt=s(_be);Ilr=r(vTt,"model.eval()"),vTt.forEach(t),Nlr=r(qRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ube=n(qRe,"CODE",{});var FTt=s(ube);qlr=r(FTt,"model.train()"),FTt.forEach(t),qRe.forEach(t),jlr=i(ba),T(G6.$$.fragment,ba),ba.forEach(t),il.forEach(t),NDe=i(f),Ld=n(f,"H2",{class:!0});var OOe=s(Ld);O6=n(OOe,"A",{id:!0,class:!0,href:!0});var TTt=s(O6);bbe=n(TTt,"SPAN",{});var MTt=s(bbe);T(s8.$$.fragment,MTt),MTt.forEach(t),TTt.forEach(t),Dlr=i(OOe),vbe=n(OOe,"SPAN",{});var ETt=s(vbe);Glr=r(ETt,"AutoModelForMaskedImageModeling"),ETt.forEach(t),OOe.forEach(t),qDe=i(f),Wo=n(f,"DIV",{class:!0});var cl=s(Wo);T(l8.$$.fragment,cl),Olr=i(cl),yd=n(cl,"P",{});var Uee=s(yd);Vlr=r(Uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),LW=n(Uee,"A",{href:!0});var CTt=s(LW);Xlr=r(CTt,"from_pretrained()"),CTt.forEach(t),zlr=r(Uee," class method or the "),yW=n(Uee,"A",{href:!0});var wTt=s(yW);Wlr=r(wTt,"from_config()"),wTt.forEach(t),Qlr=r(Uee,` class
method.`),Uee.forEach(t),Hlr=i(cl),i8=n(cl,"P",{});var VOe=s(i8);Ulr=r(VOe,"This class cannot be instantiated directly using "),Fbe=n(VOe,"CODE",{});var ATt=s(Fbe);Jlr=r(ATt,"__init__()"),ATt.forEach(t),Ylr=r(VOe," (throws an error)."),VOe.forEach(t),Klr=i(cl),Mt=n(cl,"DIV",{class:!0});var Nw=s(Mt);T(d8.$$.fragment,Nw),Zlr=i(Nw),Tbe=n(Nw,"P",{});var LTt=s(Tbe);eir=r(LTt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),LTt.forEach(t),oir=i(Nw),xd=n(Nw,"P",{});var Jee=s(xd);rir=r(Jee,`Note:
Loading a model from its configuration file does `),Mbe=n(Jee,"STRONG",{});var yTt=s(Mbe);tir=r(yTt,"not"),yTt.forEach(t),air=r(Jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=n(Jee,"A",{href:!0});var xTt=s(xW);nir=r(xTt,"from_pretrained()"),xTt.forEach(t),sir=r(Jee," to load the model weights."),Jee.forEach(t),lir=i(Nw),T(V6.$$.fragment,Nw),Nw.forEach(t),iir=i(cl),po=n(cl,"DIV",{class:!0});var va=s(po);T(c8.$$.fragment,va),dir=i(va),Ebe=n(va,"P",{});var $Tt=s(Ebe);cir=r($Tt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),$Tt.forEach(t),fir=i(va),Wa=n(va,"P",{});var qw=s(Wa);mir=r(qw,"The model class to instantiate is selected based on the "),Cbe=n(qw,"CODE",{});var kTt=s(Cbe);gir=r(kTt,"model_type"),kTt.forEach(t),hir=r(qw,` property of the config object (either
passed as an argument or loaded from `),wbe=n(qw,"CODE",{});var STt=s(wbe);pir=r(STt,"pretrained_model_name_or_path"),STt.forEach(t),_ir=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=n(qw,"CODE",{});var RTt=s(Abe);uir=r(RTt,"pretrained_model_name_or_path"),RTt.forEach(t),bir=r(qw,":"),qw.forEach(t),vir=i(va),$d=n(va,"UL",{});var Yee=s($d);X6=n(Yee,"LI",{});var jRe=s(X6);Lbe=n(jRe,"STRONG",{});var PTt=s(Lbe);Fir=r(PTt,"deit"),PTt.forEach(t),Tir=r(jRe," \u2014 "),$W=n(jRe,"A",{href:!0});var BTt=s($W);Mir=r(BTt,"DeiTForMaskedImageModeling"),BTt.forEach(t),Eir=r(jRe," (DeiT model)"),jRe.forEach(t),Cir=i(Yee),z6=n(Yee,"LI",{});var DRe=s(z6);ybe=n(DRe,"STRONG",{});var ITt=s(ybe);wir=r(ITt,"swin"),ITt.forEach(t),Air=r(DRe," \u2014 "),kW=n(DRe,"A",{href:!0});var NTt=s(kW);Lir=r(NTt,"SwinForMaskedImageModeling"),NTt.forEach(t),yir=r(DRe," (Swin Transformer model)"),DRe.forEach(t),xir=i(Yee),W6=n(Yee,"LI",{});var GRe=s(W6);xbe=n(GRe,"STRONG",{});var qTt=s(xbe);$ir=r(qTt,"vit"),qTt.forEach(t),kir=r(GRe," \u2014 "),SW=n(GRe,"A",{href:!0});var jTt=s(SW);Sir=r(jTt,"ViTForMaskedImageModeling"),jTt.forEach(t),Rir=r(GRe," (ViT model)"),GRe.forEach(t),Yee.forEach(t),Pir=i(va),Q6=n(va,"P",{});var ORe=s(Q6);Bir=r(ORe,"The model is set in evaluation mode by default using "),$be=n(ORe,"CODE",{});var DTt=s($be);Iir=r(DTt,"model.eval()"),DTt.forEach(t),Nir=r(ORe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kbe=n(ORe,"CODE",{});var GTt=s(kbe);qir=r(GTt,"model.train()"),GTt.forEach(t),ORe.forEach(t),jir=i(va),T(H6.$$.fragment,va),va.forEach(t),cl.forEach(t),jDe=i(f),kd=n(f,"H2",{class:!0});var XOe=s(kd);U6=n(XOe,"A",{id:!0,class:!0,href:!0});var OTt=s(U6);Sbe=n(OTt,"SPAN",{});var VTt=s(Sbe);T(f8.$$.fragment,VTt),VTt.forEach(t),OTt.forEach(t),Dir=i(XOe),Rbe=n(XOe,"SPAN",{});var XTt=s(Rbe);Gir=r(XTt,"AutoModelForObjectDetection"),XTt.forEach(t),XOe.forEach(t),DDe=i(f),Qo=n(f,"DIV",{class:!0});var fl=s(Qo);T(m8.$$.fragment,fl),Oir=i(fl),Sd=n(fl,"P",{});var Kee=s(Sd);Vir=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),RW=n(Kee,"A",{href:!0});var zTt=s(RW);Xir=r(zTt,"from_pretrained()"),zTt.forEach(t),zir=r(Kee," class method or the "),PW=n(Kee,"A",{href:!0});var WTt=s(PW);Wir=r(WTt,"from_config()"),WTt.forEach(t),Qir=r(Kee,` class
method.`),Kee.forEach(t),Hir=i(fl),g8=n(fl,"P",{});var zOe=s(g8);Uir=r(zOe,"This class cannot be instantiated directly using "),Pbe=n(zOe,"CODE",{});var QTt=s(Pbe);Jir=r(QTt,"__init__()"),QTt.forEach(t),Yir=r(zOe," (throws an error)."),zOe.forEach(t),Kir=i(fl),Et=n(fl,"DIV",{class:!0});var jw=s(Et);T(h8.$$.fragment,jw),Zir=i(jw),Bbe=n(jw,"P",{});var HTt=s(Bbe);edr=r(HTt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),HTt.forEach(t),odr=i(jw),Rd=n(jw,"P",{});var Zee=s(Rd);rdr=r(Zee,`Note:
Loading a model from its configuration file does `),Ibe=n(Zee,"STRONG",{});var UTt=s(Ibe);tdr=r(UTt,"not"),UTt.forEach(t),adr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=n(Zee,"A",{href:!0});var JTt=s(BW);ndr=r(JTt,"from_pretrained()"),JTt.forEach(t),sdr=r(Zee," to load the model weights."),Zee.forEach(t),ldr=i(jw),T(J6.$$.fragment,jw),jw.forEach(t),idr=i(fl),_o=n(fl,"DIV",{class:!0});var Fa=s(_o);T(p8.$$.fragment,Fa),ddr=i(Fa),Nbe=n(Fa,"P",{});var YTt=s(Nbe);cdr=r(YTt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),YTt.forEach(t),fdr=i(Fa),Qa=n(Fa,"P",{});var Dw=s(Qa);mdr=r(Dw,"The model class to instantiate is selected based on the "),qbe=n(Dw,"CODE",{});var KTt=s(qbe);gdr=r(KTt,"model_type"),KTt.forEach(t),hdr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),jbe=n(Dw,"CODE",{});var ZTt=s(jbe);pdr=r(ZTt,"pretrained_model_name_or_path"),ZTt.forEach(t),_dr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=n(Dw,"CODE",{});var e7t=s(Dbe);udr=r(e7t,"pretrained_model_name_or_path"),e7t.forEach(t),bdr=r(Dw,":"),Dw.forEach(t),vdr=i(Fa),_8=n(Fa,"UL",{});var WOe=s(_8);Y6=n(WOe,"LI",{});var VRe=s(Y6);Gbe=n(VRe,"STRONG",{});var o7t=s(Gbe);Fdr=r(o7t,"detr"),o7t.forEach(t),Tdr=r(VRe," \u2014 "),IW=n(VRe,"A",{href:!0});var r7t=s(IW);Mdr=r(r7t,"DetrForObjectDetection"),r7t.forEach(t),Edr=r(VRe," (DETR model)"),VRe.forEach(t),Cdr=i(WOe),K6=n(WOe,"LI",{});var XRe=s(K6);Obe=n(XRe,"STRONG",{});var t7t=s(Obe);wdr=r(t7t,"yolos"),t7t.forEach(t),Adr=r(XRe," \u2014 "),NW=n(XRe,"A",{href:!0});var a7t=s(NW);Ldr=r(a7t,"YolosForObjectDetection"),a7t.forEach(t),ydr=r(XRe," (YOLOS model)"),XRe.forEach(t),WOe.forEach(t),xdr=i(Fa),Z6=n(Fa,"P",{});var zRe=s(Z6);$dr=r(zRe,"The model is set in evaluation mode by default using "),Vbe=n(zRe,"CODE",{});var n7t=s(Vbe);kdr=r(n7t,"model.eval()"),n7t.forEach(t),Sdr=r(zRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xbe=n(zRe,"CODE",{});var s7t=s(Xbe);Rdr=r(s7t,"model.train()"),s7t.forEach(t),zRe.forEach(t),Pdr=i(Fa),T(eT.$$.fragment,Fa),Fa.forEach(t),fl.forEach(t),GDe=i(f),Pd=n(f,"H2",{class:!0});var QOe=s(Pd);oT=n(QOe,"A",{id:!0,class:!0,href:!0});var l7t=s(oT);zbe=n(l7t,"SPAN",{});var i7t=s(zbe);T(u8.$$.fragment,i7t),i7t.forEach(t),l7t.forEach(t),Bdr=i(QOe),Wbe=n(QOe,"SPAN",{});var d7t=s(Wbe);Idr=r(d7t,"AutoModelForImageSegmentation"),d7t.forEach(t),QOe.forEach(t),ODe=i(f),Ho=n(f,"DIV",{class:!0});var ml=s(Ho);T(b8.$$.fragment,ml),Ndr=i(ml),Bd=n(ml,"P",{});var eoe=s(Bd);qdr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),qW=n(eoe,"A",{href:!0});var c7t=s(qW);jdr=r(c7t,"from_pretrained()"),c7t.forEach(t),Ddr=r(eoe," class method or the "),jW=n(eoe,"A",{href:!0});var f7t=s(jW);Gdr=r(f7t,"from_config()"),f7t.forEach(t),Odr=r(eoe,` class
method.`),eoe.forEach(t),Vdr=i(ml),v8=n(ml,"P",{});var HOe=s(v8);Xdr=r(HOe,"This class cannot be instantiated directly using "),Qbe=n(HOe,"CODE",{});var m7t=s(Qbe);zdr=r(m7t,"__init__()"),m7t.forEach(t),Wdr=r(HOe," (throws an error)."),HOe.forEach(t),Qdr=i(ml),Ct=n(ml,"DIV",{class:!0});var Gw=s(Ct);T(F8.$$.fragment,Gw),Hdr=i(Gw),Hbe=n(Gw,"P",{});var g7t=s(Hbe);Udr=r(g7t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),g7t.forEach(t),Jdr=i(Gw),Id=n(Gw,"P",{});var ooe=s(Id);Ydr=r(ooe,`Note:
Loading a model from its configuration file does `),Ube=n(ooe,"STRONG",{});var h7t=s(Ube);Kdr=r(h7t,"not"),h7t.forEach(t),Zdr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=n(ooe,"A",{href:!0});var p7t=s(DW);ecr=r(p7t,"from_pretrained()"),p7t.forEach(t),ocr=r(ooe," to load the model weights."),ooe.forEach(t),rcr=i(Gw),T(rT.$$.fragment,Gw),Gw.forEach(t),tcr=i(ml),uo=n(ml,"DIV",{class:!0});var Ta=s(uo);T(T8.$$.fragment,Ta),acr=i(Ta),Jbe=n(Ta,"P",{});var _7t=s(Jbe);ncr=r(_7t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),_7t.forEach(t),scr=i(Ta),Ha=n(Ta,"P",{});var Ow=s(Ha);lcr=r(Ow,"The model class to instantiate is selected based on the "),Ybe=n(Ow,"CODE",{});var u7t=s(Ybe);icr=r(u7t,"model_type"),u7t.forEach(t),dcr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),Kbe=n(Ow,"CODE",{});var b7t=s(Kbe);ccr=r(b7t,"pretrained_model_name_or_path"),b7t.forEach(t),fcr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=n(Ow,"CODE",{});var v7t=s(Zbe);mcr=r(v7t,"pretrained_model_name_or_path"),v7t.forEach(t),gcr=r(Ow,":"),Ow.forEach(t),hcr=i(Ta),e2e=n(Ta,"UL",{});var F7t=s(e2e);tT=n(F7t,"LI",{});var WRe=s(tT);o2e=n(WRe,"STRONG",{});var T7t=s(o2e);pcr=r(T7t,"detr"),T7t.forEach(t),_cr=r(WRe," \u2014 "),GW=n(WRe,"A",{href:!0});var M7t=s(GW);ucr=r(M7t,"DetrForSegmentation"),M7t.forEach(t),bcr=r(WRe," (DETR model)"),WRe.forEach(t),F7t.forEach(t),vcr=i(Ta),aT=n(Ta,"P",{});var QRe=s(aT);Fcr=r(QRe,"The model is set in evaluation mode by default using "),r2e=n(QRe,"CODE",{});var E7t=s(r2e);Tcr=r(E7t,"model.eval()"),E7t.forEach(t),Mcr=r(QRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t2e=n(QRe,"CODE",{});var C7t=s(t2e);Ecr=r(C7t,"model.train()"),C7t.forEach(t),QRe.forEach(t),Ccr=i(Ta),T(nT.$$.fragment,Ta),Ta.forEach(t),ml.forEach(t),VDe=i(f),Nd=n(f,"H2",{class:!0});var UOe=s(Nd);sT=n(UOe,"A",{id:!0,class:!0,href:!0});var w7t=s(sT);a2e=n(w7t,"SPAN",{});var A7t=s(a2e);T(M8.$$.fragment,A7t),A7t.forEach(t),w7t.forEach(t),wcr=i(UOe),n2e=n(UOe,"SPAN",{});var L7t=s(n2e);Acr=r(L7t,"AutoModelForSemanticSegmentation"),L7t.forEach(t),UOe.forEach(t),XDe=i(f),Uo=n(f,"DIV",{class:!0});var gl=s(Uo);T(E8.$$.fragment,gl),Lcr=i(gl),qd=n(gl,"P",{});var roe=s(qd);ycr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),OW=n(roe,"A",{href:!0});var y7t=s(OW);xcr=r(y7t,"from_pretrained()"),y7t.forEach(t),$cr=r(roe," class method or the "),VW=n(roe,"A",{href:!0});var x7t=s(VW);kcr=r(x7t,"from_config()"),x7t.forEach(t),Scr=r(roe,` class
method.`),roe.forEach(t),Rcr=i(gl),C8=n(gl,"P",{});var JOe=s(C8);Pcr=r(JOe,"This class cannot be instantiated directly using "),s2e=n(JOe,"CODE",{});var $7t=s(s2e);Bcr=r($7t,"__init__()"),$7t.forEach(t),Icr=r(JOe," (throws an error)."),JOe.forEach(t),Ncr=i(gl),wt=n(gl,"DIV",{class:!0});var Vw=s(wt);T(w8.$$.fragment,Vw),qcr=i(Vw),l2e=n(Vw,"P",{});var k7t=s(l2e);jcr=r(k7t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),k7t.forEach(t),Dcr=i(Vw),jd=n(Vw,"P",{});var toe=s(jd);Gcr=r(toe,`Note:
Loading a model from its configuration file does `),i2e=n(toe,"STRONG",{});var S7t=s(i2e);Ocr=r(S7t,"not"),S7t.forEach(t),Vcr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(toe,"A",{href:!0});var R7t=s(XW);Xcr=r(R7t,"from_pretrained()"),R7t.forEach(t),zcr=r(toe," to load the model weights."),toe.forEach(t),Wcr=i(Vw),T(lT.$$.fragment,Vw),Vw.forEach(t),Qcr=i(gl),bo=n(gl,"DIV",{class:!0});var Ma=s(bo);T(A8.$$.fragment,Ma),Hcr=i(Ma),d2e=n(Ma,"P",{});var P7t=s(d2e);Ucr=r(P7t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),P7t.forEach(t),Jcr=i(Ma),Ua=n(Ma,"P",{});var Xw=s(Ua);Ycr=r(Xw,"The model class to instantiate is selected based on the "),c2e=n(Xw,"CODE",{});var B7t=s(c2e);Kcr=r(B7t,"model_type"),B7t.forEach(t),Zcr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),f2e=n(Xw,"CODE",{});var I7t=s(f2e);efr=r(I7t,"pretrained_model_name_or_path"),I7t.forEach(t),ofr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=n(Xw,"CODE",{});var N7t=s(m2e);rfr=r(N7t,"pretrained_model_name_or_path"),N7t.forEach(t),tfr=r(Xw,":"),Xw.forEach(t),afr=i(Ma),Ja=n(Ma,"UL",{});var zw=s(Ja);iT=n(zw,"LI",{});var HRe=s(iT);g2e=n(HRe,"STRONG",{});var q7t=s(g2e);nfr=r(q7t,"beit"),q7t.forEach(t),sfr=r(HRe," \u2014 "),zW=n(HRe,"A",{href:!0});var j7t=s(zW);lfr=r(j7t,"BeitForSemanticSegmentation"),j7t.forEach(t),ifr=r(HRe," (BEiT model)"),HRe.forEach(t),dfr=i(zw),dT=n(zw,"LI",{});var URe=s(dT);h2e=n(URe,"STRONG",{});var D7t=s(h2e);cfr=r(D7t,"data2vec-vision"),D7t.forEach(t),ffr=r(URe," \u2014 "),WW=n(URe,"A",{href:!0});var G7t=s(WW);mfr=r(G7t,"Data2VecVisionForSemanticSegmentation"),G7t.forEach(t),gfr=r(URe," (Data2VecVision model)"),URe.forEach(t),hfr=i(zw),cT=n(zw,"LI",{});var JRe=s(cT);p2e=n(JRe,"STRONG",{});var O7t=s(p2e);pfr=r(O7t,"dpt"),O7t.forEach(t),_fr=r(JRe," \u2014 "),QW=n(JRe,"A",{href:!0});var V7t=s(QW);ufr=r(V7t,"DPTForSemanticSegmentation"),V7t.forEach(t),bfr=r(JRe," (DPT model)"),JRe.forEach(t),vfr=i(zw),fT=n(zw,"LI",{});var YRe=s(fT);_2e=n(YRe,"STRONG",{});var X7t=s(_2e);Ffr=r(X7t,"segformer"),X7t.forEach(t),Tfr=r(YRe," \u2014 "),HW=n(YRe,"A",{href:!0});var z7t=s(HW);Mfr=r(z7t,"SegformerForSemanticSegmentation"),z7t.forEach(t),Efr=r(YRe," (SegFormer model)"),YRe.forEach(t),zw.forEach(t),Cfr=i(Ma),mT=n(Ma,"P",{});var KRe=s(mT);wfr=r(KRe,"The model is set in evaluation mode by default using "),u2e=n(KRe,"CODE",{});var W7t=s(u2e);Afr=r(W7t,"model.eval()"),W7t.forEach(t),Lfr=r(KRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b2e=n(KRe,"CODE",{});var Q7t=s(b2e);yfr=r(Q7t,"model.train()"),Q7t.forEach(t),KRe.forEach(t),xfr=i(Ma),T(gT.$$.fragment,Ma),Ma.forEach(t),gl.forEach(t),zDe=i(f),Dd=n(f,"H2",{class:!0});var YOe=s(Dd);hT=n(YOe,"A",{id:!0,class:!0,href:!0});var H7t=s(hT);v2e=n(H7t,"SPAN",{});var U7t=s(v2e);T(L8.$$.fragment,U7t),U7t.forEach(t),H7t.forEach(t),$fr=i(YOe),F2e=n(YOe,"SPAN",{});var J7t=s(F2e);kfr=r(J7t,"AutoModelForInstanceSegmentation"),J7t.forEach(t),YOe.forEach(t),WDe=i(f),Jo=n(f,"DIV",{class:!0});var hl=s(Jo);T(y8.$$.fragment,hl),Sfr=i(hl),Gd=n(hl,"P",{});var aoe=s(Gd);Rfr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),UW=n(aoe,"A",{href:!0});var Y7t=s(UW);Pfr=r(Y7t,"from_pretrained()"),Y7t.forEach(t),Bfr=r(aoe," class method or the "),JW=n(aoe,"A",{href:!0});var K7t=s(JW);Ifr=r(K7t,"from_config()"),K7t.forEach(t),Nfr=r(aoe,` class
method.`),aoe.forEach(t),qfr=i(hl),x8=n(hl,"P",{});var KOe=s(x8);jfr=r(KOe,"This class cannot be instantiated directly using "),T2e=n(KOe,"CODE",{});var Z7t=s(T2e);Dfr=r(Z7t,"__init__()"),Z7t.forEach(t),Gfr=r(KOe," (throws an error)."),KOe.forEach(t),Ofr=i(hl),At=n(hl,"DIV",{class:!0});var Ww=s(At);T($8.$$.fragment,Ww),Vfr=i(Ww),M2e=n(Ww,"P",{});var eMt=s(M2e);Xfr=r(eMt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),eMt.forEach(t),zfr=i(Ww),Od=n(Ww,"P",{});var noe=s(Od);Wfr=r(noe,`Note:
Loading a model from its configuration file does `),E2e=n(noe,"STRONG",{});var oMt=s(E2e);Qfr=r(oMt,"not"),oMt.forEach(t),Hfr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=n(noe,"A",{href:!0});var rMt=s(YW);Ufr=r(rMt,"from_pretrained()"),rMt.forEach(t),Jfr=r(noe," to load the model weights."),noe.forEach(t),Yfr=i(Ww),T(pT.$$.fragment,Ww),Ww.forEach(t),Kfr=i(hl),vo=n(hl,"DIV",{class:!0});var Ea=s(vo);T(k8.$$.fragment,Ea),Zfr=i(Ea),C2e=n(Ea,"P",{});var tMt=s(C2e);emr=r(tMt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),tMt.forEach(t),omr=i(Ea),Ya=n(Ea,"P",{});var Qw=s(Ya);rmr=r(Qw,"The model class to instantiate is selected based on the "),w2e=n(Qw,"CODE",{});var aMt=s(w2e);tmr=r(aMt,"model_type"),aMt.forEach(t),amr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),A2e=n(Qw,"CODE",{});var nMt=s(A2e);nmr=r(nMt,"pretrained_model_name_or_path"),nMt.forEach(t),smr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(Qw,"CODE",{});var sMt=s(L2e);lmr=r(sMt,"pretrained_model_name_or_path"),sMt.forEach(t),imr=r(Qw,":"),Qw.forEach(t),dmr=i(Ea),y2e=n(Ea,"UL",{});var lMt=s(y2e);_T=n(lMt,"LI",{});var ZRe=s(_T);x2e=n(ZRe,"STRONG",{});var iMt=s(x2e);cmr=r(iMt,"maskformer"),iMt.forEach(t),fmr=r(ZRe," \u2014 "),KW=n(ZRe,"A",{href:!0});var dMt=s(KW);mmr=r(dMt,"MaskFormerForInstanceSegmentation"),dMt.forEach(t),gmr=r(ZRe," (MaskFormer model)"),ZRe.forEach(t),lMt.forEach(t),hmr=i(Ea),uT=n(Ea,"P",{});var ePe=s(uT);pmr=r(ePe,"The model is set in evaluation mode by default using "),$2e=n(ePe,"CODE",{});var cMt=s($2e);_mr=r(cMt,"model.eval()"),cMt.forEach(t),umr=r(ePe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k2e=n(ePe,"CODE",{});var fMt=s(k2e);bmr=r(fMt,"model.train()"),fMt.forEach(t),ePe.forEach(t),vmr=i(Ea),T(bT.$$.fragment,Ea),Ea.forEach(t),hl.forEach(t),QDe=i(f),Vd=n(f,"H2",{class:!0});var ZOe=s(Vd);vT=n(ZOe,"A",{id:!0,class:!0,href:!0});var mMt=s(vT);S2e=n(mMt,"SPAN",{});var gMt=s(S2e);T(S8.$$.fragment,gMt),gMt.forEach(t),mMt.forEach(t),Fmr=i(ZOe),R2e=n(ZOe,"SPAN",{});var hMt=s(R2e);Tmr=r(hMt,"TFAutoModel"),hMt.forEach(t),ZOe.forEach(t),HDe=i(f),Yo=n(f,"DIV",{class:!0});var pl=s(Yo);T(R8.$$.fragment,pl),Mmr=i(pl),Xd=n(pl,"P",{});var soe=s(Xd);Emr=r(soe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZW=n(soe,"A",{href:!0});var pMt=s(ZW);Cmr=r(pMt,"from_pretrained()"),pMt.forEach(t),wmr=r(soe," class method or the "),eQ=n(soe,"A",{href:!0});var _Mt=s(eQ);Amr=r(_Mt,"from_config()"),_Mt.forEach(t),Lmr=r(soe,` class
method.`),soe.forEach(t),ymr=i(pl),P8=n(pl,"P",{});var eVe=s(P8);xmr=r(eVe,"This class cannot be instantiated directly using "),P2e=n(eVe,"CODE",{});var uMt=s(P2e);$mr=r(uMt,"__init__()"),uMt.forEach(t),kmr=r(eVe," (throws an error)."),eVe.forEach(t),Smr=i(pl),Lt=n(pl,"DIV",{class:!0});var Hw=s(Lt);T(B8.$$.fragment,Hw),Rmr=i(Hw),B2e=n(Hw,"P",{});var bMt=s(B2e);Pmr=r(bMt,"Instantiates one of the base model classes of the library from a configuration."),bMt.forEach(t),Bmr=i(Hw),zd=n(Hw,"P",{});var loe=s(zd);Imr=r(loe,`Note:
Loading a model from its configuration file does `),I2e=n(loe,"STRONG",{});var vMt=s(I2e);Nmr=r(vMt,"not"),vMt.forEach(t),qmr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=n(loe,"A",{href:!0});var FMt=s(oQ);jmr=r(FMt,"from_pretrained()"),FMt.forEach(t),Dmr=r(loe," to load the model weights."),loe.forEach(t),Gmr=i(Hw),T(FT.$$.fragment,Hw),Hw.forEach(t),Omr=i(pl),wr=n(pl,"DIV",{class:!0});var _l=s(wr);T(I8.$$.fragment,_l),Vmr=i(_l),N2e=n(_l,"P",{});var TMt=s(N2e);Xmr=r(TMt,"Instantiate one of the base model classes of the library from a pretrained model."),TMt.forEach(t),zmr=i(_l),Ka=n(_l,"P",{});var Uw=s(Ka);Wmr=r(Uw,"The model class to instantiate is selected based on the "),q2e=n(Uw,"CODE",{});var MMt=s(q2e);Qmr=r(MMt,"model_type"),MMt.forEach(t),Hmr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),j2e=n(Uw,"CODE",{});var EMt=s(j2e);Umr=r(EMt,"pretrained_model_name_or_path"),EMt.forEach(t),Jmr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=n(Uw,"CODE",{});var CMt=s(D2e);Ymr=r(CMt,"pretrained_model_name_or_path"),CMt.forEach(t),Kmr=r(Uw,":"),Uw.forEach(t),Zmr=i(_l),q=n(_l,"UL",{});var D=s(q);TT=n(D,"LI",{});var oPe=s(TT);G2e=n(oPe,"STRONG",{});var wMt=s(G2e);egr=r(wMt,"albert"),wMt.forEach(t),ogr=r(oPe," \u2014 "),rQ=n(oPe,"A",{href:!0});var AMt=s(rQ);rgr=r(AMt,"TFAlbertModel"),AMt.forEach(t),tgr=r(oPe," (ALBERT model)"),oPe.forEach(t),agr=i(D),MT=n(D,"LI",{});var rPe=s(MT);O2e=n(rPe,"STRONG",{});var LMt=s(O2e);ngr=r(LMt,"bart"),LMt.forEach(t),sgr=r(rPe," \u2014 "),tQ=n(rPe,"A",{href:!0});var yMt=s(tQ);lgr=r(yMt,"TFBartModel"),yMt.forEach(t),igr=r(rPe," (BART model)"),rPe.forEach(t),dgr=i(D),ET=n(D,"LI",{});var tPe=s(ET);V2e=n(tPe,"STRONG",{});var xMt=s(V2e);cgr=r(xMt,"bert"),xMt.forEach(t),fgr=r(tPe," \u2014 "),aQ=n(tPe,"A",{href:!0});var $Mt=s(aQ);mgr=r($Mt,"TFBertModel"),$Mt.forEach(t),ggr=r(tPe," (BERT model)"),tPe.forEach(t),hgr=i(D),CT=n(D,"LI",{});var aPe=s(CT);X2e=n(aPe,"STRONG",{});var kMt=s(X2e);pgr=r(kMt,"blenderbot"),kMt.forEach(t),_gr=r(aPe," \u2014 "),nQ=n(aPe,"A",{href:!0});var SMt=s(nQ);ugr=r(SMt,"TFBlenderbotModel"),SMt.forEach(t),bgr=r(aPe," (Blenderbot model)"),aPe.forEach(t),vgr=i(D),wT=n(D,"LI",{});var nPe=s(wT);z2e=n(nPe,"STRONG",{});var RMt=s(z2e);Fgr=r(RMt,"blenderbot-small"),RMt.forEach(t),Tgr=r(nPe," \u2014 "),sQ=n(nPe,"A",{href:!0});var PMt=s(sQ);Mgr=r(PMt,"TFBlenderbotSmallModel"),PMt.forEach(t),Egr=r(nPe," (BlenderbotSmall model)"),nPe.forEach(t),Cgr=i(D),AT=n(D,"LI",{});var sPe=s(AT);W2e=n(sPe,"STRONG",{});var BMt=s(W2e);wgr=r(BMt,"camembert"),BMt.forEach(t),Agr=r(sPe," \u2014 "),lQ=n(sPe,"A",{href:!0});var IMt=s(lQ);Lgr=r(IMt,"TFCamembertModel"),IMt.forEach(t),ygr=r(sPe," (CamemBERT model)"),sPe.forEach(t),xgr=i(D),LT=n(D,"LI",{});var lPe=s(LT);Q2e=n(lPe,"STRONG",{});var NMt=s(Q2e);$gr=r(NMt,"clip"),NMt.forEach(t),kgr=r(lPe," \u2014 "),iQ=n(lPe,"A",{href:!0});var qMt=s(iQ);Sgr=r(qMt,"TFCLIPModel"),qMt.forEach(t),Rgr=r(lPe," (CLIP model)"),lPe.forEach(t),Pgr=i(D),yT=n(D,"LI",{});var iPe=s(yT);H2e=n(iPe,"STRONG",{});var jMt=s(H2e);Bgr=r(jMt,"convbert"),jMt.forEach(t),Igr=r(iPe," \u2014 "),dQ=n(iPe,"A",{href:!0});var DMt=s(dQ);Ngr=r(DMt,"TFConvBertModel"),DMt.forEach(t),qgr=r(iPe," (ConvBERT model)"),iPe.forEach(t),jgr=i(D),xT=n(D,"LI",{});var dPe=s(xT);U2e=n(dPe,"STRONG",{});var GMt=s(U2e);Dgr=r(GMt,"convnext"),GMt.forEach(t),Ggr=r(dPe," \u2014 "),cQ=n(dPe,"A",{href:!0});var OMt=s(cQ);Ogr=r(OMt,"TFConvNextModel"),OMt.forEach(t),Vgr=r(dPe," (ConvNeXT model)"),dPe.forEach(t),Xgr=i(D),$T=n(D,"LI",{});var cPe=s($T);J2e=n(cPe,"STRONG",{});var VMt=s(J2e);zgr=r(VMt,"ctrl"),VMt.forEach(t),Wgr=r(cPe," \u2014 "),fQ=n(cPe,"A",{href:!0});var XMt=s(fQ);Qgr=r(XMt,"TFCTRLModel"),XMt.forEach(t),Hgr=r(cPe," (CTRL model)"),cPe.forEach(t),Ugr=i(D),kT=n(D,"LI",{});var fPe=s(kT);Y2e=n(fPe,"STRONG",{});var zMt=s(Y2e);Jgr=r(zMt,"data2vec-vision"),zMt.forEach(t),Ygr=r(fPe," \u2014 "),mQ=n(fPe,"A",{href:!0});var WMt=s(mQ);Kgr=r(WMt,"TFData2VecVisionModel"),WMt.forEach(t),Zgr=r(fPe," (Data2VecVision model)"),fPe.forEach(t),ehr=i(D),ST=n(D,"LI",{});var mPe=s(ST);K2e=n(mPe,"STRONG",{});var QMt=s(K2e);ohr=r(QMt,"deberta"),QMt.forEach(t),rhr=r(mPe," \u2014 "),gQ=n(mPe,"A",{href:!0});var HMt=s(gQ);thr=r(HMt,"TFDebertaModel"),HMt.forEach(t),ahr=r(mPe," (DeBERTa model)"),mPe.forEach(t),nhr=i(D),RT=n(D,"LI",{});var gPe=s(RT);Z2e=n(gPe,"STRONG",{});var UMt=s(Z2e);shr=r(UMt,"deberta-v2"),UMt.forEach(t),lhr=r(gPe," \u2014 "),hQ=n(gPe,"A",{href:!0});var JMt=s(hQ);ihr=r(JMt,"TFDebertaV2Model"),JMt.forEach(t),dhr=r(gPe," (DeBERTa-v2 model)"),gPe.forEach(t),chr=i(D),PT=n(D,"LI",{});var hPe=s(PT);e4e=n(hPe,"STRONG",{});var YMt=s(e4e);fhr=r(YMt,"distilbert"),YMt.forEach(t),mhr=r(hPe," \u2014 "),pQ=n(hPe,"A",{href:!0});var KMt=s(pQ);ghr=r(KMt,"TFDistilBertModel"),KMt.forEach(t),hhr=r(hPe," (DistilBERT model)"),hPe.forEach(t),phr=i(D),BT=n(D,"LI",{});var pPe=s(BT);o4e=n(pPe,"STRONG",{});var ZMt=s(o4e);_hr=r(ZMt,"dpr"),ZMt.forEach(t),uhr=r(pPe," \u2014 "),_Q=n(pPe,"A",{href:!0});var eEt=s(_Q);bhr=r(eEt,"TFDPRQuestionEncoder"),eEt.forEach(t),vhr=r(pPe," (DPR model)"),pPe.forEach(t),Fhr=i(D),IT=n(D,"LI",{});var _Pe=s(IT);r4e=n(_Pe,"STRONG",{});var oEt=s(r4e);Thr=r(oEt,"electra"),oEt.forEach(t),Mhr=r(_Pe," \u2014 "),uQ=n(_Pe,"A",{href:!0});var rEt=s(uQ);Ehr=r(rEt,"TFElectraModel"),rEt.forEach(t),Chr=r(_Pe," (ELECTRA model)"),_Pe.forEach(t),whr=i(D),NT=n(D,"LI",{});var uPe=s(NT);t4e=n(uPe,"STRONG",{});var tEt=s(t4e);Ahr=r(tEt,"flaubert"),tEt.forEach(t),Lhr=r(uPe," \u2014 "),bQ=n(uPe,"A",{href:!0});var aEt=s(bQ);yhr=r(aEt,"TFFlaubertModel"),aEt.forEach(t),xhr=r(uPe," (FlauBERT model)"),uPe.forEach(t),$hr=i(D),qs=n(D,"LI",{});var _k=s(qs);a4e=n(_k,"STRONG",{});var nEt=s(a4e);khr=r(nEt,"funnel"),nEt.forEach(t),Shr=r(_k," \u2014 "),vQ=n(_k,"A",{href:!0});var sEt=s(vQ);Rhr=r(sEt,"TFFunnelModel"),sEt.forEach(t),Phr=r(_k," or "),FQ=n(_k,"A",{href:!0});var lEt=s(FQ);Bhr=r(lEt,"TFFunnelBaseModel"),lEt.forEach(t),Ihr=r(_k," (Funnel Transformer model)"),_k.forEach(t),Nhr=i(D),qT=n(D,"LI",{});var bPe=s(qT);n4e=n(bPe,"STRONG",{});var iEt=s(n4e);qhr=r(iEt,"gpt2"),iEt.forEach(t),jhr=r(bPe," \u2014 "),TQ=n(bPe,"A",{href:!0});var dEt=s(TQ);Dhr=r(dEt,"TFGPT2Model"),dEt.forEach(t),Ghr=r(bPe," (OpenAI GPT-2 model)"),bPe.forEach(t),Ohr=i(D),jT=n(D,"LI",{});var vPe=s(jT);s4e=n(vPe,"STRONG",{});var cEt=s(s4e);Vhr=r(cEt,"gptj"),cEt.forEach(t),Xhr=r(vPe," \u2014 "),MQ=n(vPe,"A",{href:!0});var fEt=s(MQ);zhr=r(fEt,"TFGPTJModel"),fEt.forEach(t),Whr=r(vPe," (GPT-J model)"),vPe.forEach(t),Qhr=i(D),DT=n(D,"LI",{});var FPe=s(DT);l4e=n(FPe,"STRONG",{});var mEt=s(l4e);Hhr=r(mEt,"hubert"),mEt.forEach(t),Uhr=r(FPe," \u2014 "),EQ=n(FPe,"A",{href:!0});var gEt=s(EQ);Jhr=r(gEt,"TFHubertModel"),gEt.forEach(t),Yhr=r(FPe," (Hubert model)"),FPe.forEach(t),Khr=i(D),GT=n(D,"LI",{});var TPe=s(GT);i4e=n(TPe,"STRONG",{});var hEt=s(i4e);Zhr=r(hEt,"layoutlm"),hEt.forEach(t),epr=r(TPe," \u2014 "),CQ=n(TPe,"A",{href:!0});var pEt=s(CQ);opr=r(pEt,"TFLayoutLMModel"),pEt.forEach(t),rpr=r(TPe," (LayoutLM model)"),TPe.forEach(t),tpr=i(D),OT=n(D,"LI",{});var MPe=s(OT);d4e=n(MPe,"STRONG",{});var _Et=s(d4e);apr=r(_Et,"led"),_Et.forEach(t),npr=r(MPe," \u2014 "),wQ=n(MPe,"A",{href:!0});var uEt=s(wQ);spr=r(uEt,"TFLEDModel"),uEt.forEach(t),lpr=r(MPe," (LED model)"),MPe.forEach(t),ipr=i(D),VT=n(D,"LI",{});var EPe=s(VT);c4e=n(EPe,"STRONG",{});var bEt=s(c4e);dpr=r(bEt,"longformer"),bEt.forEach(t),cpr=r(EPe," \u2014 "),AQ=n(EPe,"A",{href:!0});var vEt=s(AQ);fpr=r(vEt,"TFLongformerModel"),vEt.forEach(t),mpr=r(EPe," (Longformer model)"),EPe.forEach(t),gpr=i(D),XT=n(D,"LI",{});var CPe=s(XT);f4e=n(CPe,"STRONG",{});var FEt=s(f4e);hpr=r(FEt,"lxmert"),FEt.forEach(t),ppr=r(CPe," \u2014 "),LQ=n(CPe,"A",{href:!0});var TEt=s(LQ);_pr=r(TEt,"TFLxmertModel"),TEt.forEach(t),upr=r(CPe," (LXMERT model)"),CPe.forEach(t),bpr=i(D),zT=n(D,"LI",{});var wPe=s(zT);m4e=n(wPe,"STRONG",{});var MEt=s(m4e);vpr=r(MEt,"marian"),MEt.forEach(t),Fpr=r(wPe," \u2014 "),yQ=n(wPe,"A",{href:!0});var EEt=s(yQ);Tpr=r(EEt,"TFMarianModel"),EEt.forEach(t),Mpr=r(wPe," (Marian model)"),wPe.forEach(t),Epr=i(D),WT=n(D,"LI",{});var APe=s(WT);g4e=n(APe,"STRONG",{});var CEt=s(g4e);Cpr=r(CEt,"mbart"),CEt.forEach(t),wpr=r(APe," \u2014 "),xQ=n(APe,"A",{href:!0});var wEt=s(xQ);Apr=r(wEt,"TFMBartModel"),wEt.forEach(t),Lpr=r(APe," (mBART model)"),APe.forEach(t),ypr=i(D),QT=n(D,"LI",{});var LPe=s(QT);h4e=n(LPe,"STRONG",{});var AEt=s(h4e);xpr=r(AEt,"mobilebert"),AEt.forEach(t),$pr=r(LPe," \u2014 "),$Q=n(LPe,"A",{href:!0});var LEt=s($Q);kpr=r(LEt,"TFMobileBertModel"),LEt.forEach(t),Spr=r(LPe," (MobileBERT model)"),LPe.forEach(t),Rpr=i(D),HT=n(D,"LI",{});var yPe=s(HT);p4e=n(yPe,"STRONG",{});var yEt=s(p4e);Ppr=r(yEt,"mpnet"),yEt.forEach(t),Bpr=r(yPe," \u2014 "),kQ=n(yPe,"A",{href:!0});var xEt=s(kQ);Ipr=r(xEt,"TFMPNetModel"),xEt.forEach(t),Npr=r(yPe," (MPNet model)"),yPe.forEach(t),qpr=i(D),UT=n(D,"LI",{});var xPe=s(UT);_4e=n(xPe,"STRONG",{});var $Et=s(_4e);jpr=r($Et,"mt5"),$Et.forEach(t),Dpr=r(xPe," \u2014 "),SQ=n(xPe,"A",{href:!0});var kEt=s(SQ);Gpr=r(kEt,"TFMT5Model"),kEt.forEach(t),Opr=r(xPe," (MT5 model)"),xPe.forEach(t),Vpr=i(D),JT=n(D,"LI",{});var $Pe=s(JT);u4e=n($Pe,"STRONG",{});var SEt=s(u4e);Xpr=r(SEt,"openai-gpt"),SEt.forEach(t),zpr=r($Pe," \u2014 "),RQ=n($Pe,"A",{href:!0});var REt=s(RQ);Wpr=r(REt,"TFOpenAIGPTModel"),REt.forEach(t),Qpr=r($Pe," (OpenAI GPT model)"),$Pe.forEach(t),Hpr=i(D),YT=n(D,"LI",{});var kPe=s(YT);b4e=n(kPe,"STRONG",{});var PEt=s(b4e);Upr=r(PEt,"opt"),PEt.forEach(t),Jpr=r(kPe," \u2014 "),PQ=n(kPe,"A",{href:!0});var BEt=s(PQ);Ypr=r(BEt,"TFOPTModel"),BEt.forEach(t),Kpr=r(kPe," (OPT model)"),kPe.forEach(t),Zpr=i(D),KT=n(D,"LI",{});var SPe=s(KT);v4e=n(SPe,"STRONG",{});var IEt=s(v4e);e_r=r(IEt,"pegasus"),IEt.forEach(t),o_r=r(SPe," \u2014 "),BQ=n(SPe,"A",{href:!0});var NEt=s(BQ);r_r=r(NEt,"TFPegasusModel"),NEt.forEach(t),t_r=r(SPe," (Pegasus model)"),SPe.forEach(t),a_r=i(D),ZT=n(D,"LI",{});var RPe=s(ZT);F4e=n(RPe,"STRONG",{});var qEt=s(F4e);n_r=r(qEt,"rembert"),qEt.forEach(t),s_r=r(RPe," \u2014 "),IQ=n(RPe,"A",{href:!0});var jEt=s(IQ);l_r=r(jEt,"TFRemBertModel"),jEt.forEach(t),i_r=r(RPe," (RemBERT model)"),RPe.forEach(t),d_r=i(D),e7=n(D,"LI",{});var PPe=s(e7);T4e=n(PPe,"STRONG",{});var DEt=s(T4e);c_r=r(DEt,"roberta"),DEt.forEach(t),f_r=r(PPe," \u2014 "),NQ=n(PPe,"A",{href:!0});var GEt=s(NQ);m_r=r(GEt,"TFRobertaModel"),GEt.forEach(t),g_r=r(PPe," (RoBERTa model)"),PPe.forEach(t),h_r=i(D),o7=n(D,"LI",{});var BPe=s(o7);M4e=n(BPe,"STRONG",{});var OEt=s(M4e);p_r=r(OEt,"roformer"),OEt.forEach(t),__r=r(BPe," \u2014 "),qQ=n(BPe,"A",{href:!0});var VEt=s(qQ);u_r=r(VEt,"TFRoFormerModel"),VEt.forEach(t),b_r=r(BPe," (RoFormer model)"),BPe.forEach(t),v_r=i(D),r7=n(D,"LI",{});var IPe=s(r7);E4e=n(IPe,"STRONG",{});var XEt=s(E4e);F_r=r(XEt,"speech_to_text"),XEt.forEach(t),T_r=r(IPe," \u2014 "),jQ=n(IPe,"A",{href:!0});var zEt=s(jQ);M_r=r(zEt,"TFSpeech2TextModel"),zEt.forEach(t),E_r=r(IPe," (Speech2Text model)"),IPe.forEach(t),C_r=i(D),t7=n(D,"LI",{});var NPe=s(t7);C4e=n(NPe,"STRONG",{});var WEt=s(C4e);w_r=r(WEt,"swin"),WEt.forEach(t),A_r=r(NPe," \u2014 "),DQ=n(NPe,"A",{href:!0});var QEt=s(DQ);L_r=r(QEt,"TFSwinModel"),QEt.forEach(t),y_r=r(NPe," (Swin Transformer model)"),NPe.forEach(t),x_r=i(D),a7=n(D,"LI",{});var qPe=s(a7);w4e=n(qPe,"STRONG",{});var HEt=s(w4e);$_r=r(HEt,"t5"),HEt.forEach(t),k_r=r(qPe," \u2014 "),GQ=n(qPe,"A",{href:!0});var UEt=s(GQ);S_r=r(UEt,"TFT5Model"),UEt.forEach(t),R_r=r(qPe," (T5 model)"),qPe.forEach(t),P_r=i(D),n7=n(D,"LI",{});var jPe=s(n7);A4e=n(jPe,"STRONG",{});var JEt=s(A4e);B_r=r(JEt,"tapas"),JEt.forEach(t),I_r=r(jPe," \u2014 "),OQ=n(jPe,"A",{href:!0});var YEt=s(OQ);N_r=r(YEt,"TFTapasModel"),YEt.forEach(t),q_r=r(jPe," (TAPAS model)"),jPe.forEach(t),j_r=i(D),s7=n(D,"LI",{});var DPe=s(s7);L4e=n(DPe,"STRONG",{});var KEt=s(L4e);D_r=r(KEt,"transfo-xl"),KEt.forEach(t),G_r=r(DPe," \u2014 "),VQ=n(DPe,"A",{href:!0});var ZEt=s(VQ);O_r=r(ZEt,"TFTransfoXLModel"),ZEt.forEach(t),V_r=r(DPe," (Transformer-XL model)"),DPe.forEach(t),X_r=i(D),l7=n(D,"LI",{});var GPe=s(l7);y4e=n(GPe,"STRONG",{});var eCt=s(y4e);z_r=r(eCt,"vit"),eCt.forEach(t),W_r=r(GPe," \u2014 "),XQ=n(GPe,"A",{href:!0});var oCt=s(XQ);Q_r=r(oCt,"TFViTModel"),oCt.forEach(t),H_r=r(GPe," (ViT model)"),GPe.forEach(t),U_r=i(D),i7=n(D,"LI",{});var OPe=s(i7);x4e=n(OPe,"STRONG",{});var rCt=s(x4e);J_r=r(rCt,"vit_mae"),rCt.forEach(t),Y_r=r(OPe," \u2014 "),zQ=n(OPe,"A",{href:!0});var tCt=s(zQ);K_r=r(tCt,"TFViTMAEModel"),tCt.forEach(t),Z_r=r(OPe," (ViTMAE model)"),OPe.forEach(t),eur=i(D),d7=n(D,"LI",{});var VPe=s(d7);$4e=n(VPe,"STRONG",{});var aCt=s($4e);our=r(aCt,"wav2vec2"),aCt.forEach(t),rur=r(VPe," \u2014 "),WQ=n(VPe,"A",{href:!0});var nCt=s(WQ);tur=r(nCt,"TFWav2Vec2Model"),nCt.forEach(t),aur=r(VPe," (Wav2Vec2 model)"),VPe.forEach(t),nur=i(D),c7=n(D,"LI",{});var XPe=s(c7);k4e=n(XPe,"STRONG",{});var sCt=s(k4e);sur=r(sCt,"xlm"),sCt.forEach(t),lur=r(XPe," \u2014 "),QQ=n(XPe,"A",{href:!0});var lCt=s(QQ);iur=r(lCt,"TFXLMModel"),lCt.forEach(t),dur=r(XPe," (XLM model)"),XPe.forEach(t),cur=i(D),f7=n(D,"LI",{});var zPe=s(f7);S4e=n(zPe,"STRONG",{});var iCt=s(S4e);fur=r(iCt,"xlm-roberta"),iCt.forEach(t),mur=r(zPe," \u2014 "),HQ=n(zPe,"A",{href:!0});var dCt=s(HQ);gur=r(dCt,"TFXLMRobertaModel"),dCt.forEach(t),hur=r(zPe," (XLM-RoBERTa model)"),zPe.forEach(t),pur=i(D),m7=n(D,"LI",{});var WPe=s(m7);R4e=n(WPe,"STRONG",{});var cCt=s(R4e);_ur=r(cCt,"xlnet"),cCt.forEach(t),uur=r(WPe," \u2014 "),UQ=n(WPe,"A",{href:!0});var fCt=s(UQ);bur=r(fCt,"TFXLNetModel"),fCt.forEach(t),vur=r(WPe," (XLNet model)"),WPe.forEach(t),D.forEach(t),Fur=i(_l),T(g7.$$.fragment,_l),_l.forEach(t),pl.forEach(t),UDe=i(f),Wd=n(f,"H2",{class:!0});var oVe=s(Wd);h7=n(oVe,"A",{id:!0,class:!0,href:!0});var mCt=s(h7);P4e=n(mCt,"SPAN",{});var gCt=s(P4e);T(N8.$$.fragment,gCt),gCt.forEach(t),mCt.forEach(t),Tur=i(oVe),B4e=n(oVe,"SPAN",{});var hCt=s(B4e);Mur=r(hCt,"TFAutoModelForPreTraining"),hCt.forEach(t),oVe.forEach(t),JDe=i(f),Ko=n(f,"DIV",{class:!0});var ul=s(Ko);T(q8.$$.fragment,ul),Eur=i(ul),Qd=n(ul,"P",{});var ioe=s(Qd);Cur=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),JQ=n(ioe,"A",{href:!0});var pCt=s(JQ);wur=r(pCt,"from_pretrained()"),pCt.forEach(t),Aur=r(ioe," class method or the "),YQ=n(ioe,"A",{href:!0});var _Ct=s(YQ);Lur=r(_Ct,"from_config()"),_Ct.forEach(t),yur=r(ioe,` class
method.`),ioe.forEach(t),xur=i(ul),j8=n(ul,"P",{});var rVe=s(j8);$ur=r(rVe,"This class cannot be instantiated directly using "),I4e=n(rVe,"CODE",{});var uCt=s(I4e);kur=r(uCt,"__init__()"),uCt.forEach(t),Sur=r(rVe," (throws an error)."),rVe.forEach(t),Rur=i(ul),yt=n(ul,"DIV",{class:!0});var Jw=s(yt);T(D8.$$.fragment,Jw),Pur=i(Jw),N4e=n(Jw,"P",{});var bCt=s(N4e);Bur=r(bCt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),bCt.forEach(t),Iur=i(Jw),Hd=n(Jw,"P",{});var doe=s(Hd);Nur=r(doe,`Note:
Loading a model from its configuration file does `),q4e=n(doe,"STRONG",{});var vCt=s(q4e);qur=r(vCt,"not"),vCt.forEach(t),jur=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=n(doe,"A",{href:!0});var FCt=s(KQ);Dur=r(FCt,"from_pretrained()"),FCt.forEach(t),Gur=r(doe," to load the model weights."),doe.forEach(t),Our=i(Jw),T(p7.$$.fragment,Jw),Jw.forEach(t),Vur=i(ul),Ar=n(ul,"DIV",{class:!0});var bl=s(Ar);T(G8.$$.fragment,bl),Xur=i(bl),j4e=n(bl,"P",{});var TCt=s(j4e);zur=r(TCt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),TCt.forEach(t),Wur=i(bl),Za=n(bl,"P",{});var Yw=s(Za);Qur=r(Yw,"The model class to instantiate is selected based on the "),D4e=n(Yw,"CODE",{});var MCt=s(D4e);Hur=r(MCt,"model_type"),MCt.forEach(t),Uur=r(Yw,` property of the config object (either
passed as an argument or loaded from `),G4e=n(Yw,"CODE",{});var ECt=s(G4e);Jur=r(ECt,"pretrained_model_name_or_path"),ECt.forEach(t),Yur=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=n(Yw,"CODE",{});var CCt=s(O4e);Kur=r(CCt,"pretrained_model_name_or_path"),CCt.forEach(t),Zur=r(Yw,":"),Yw.forEach(t),e1r=i(bl),se=n(bl,"UL",{});var le=s(se);_7=n(le,"LI",{});var QPe=s(_7);V4e=n(QPe,"STRONG",{});var wCt=s(V4e);o1r=r(wCt,"albert"),wCt.forEach(t),r1r=r(QPe," \u2014 "),ZQ=n(QPe,"A",{href:!0});var ACt=s(ZQ);t1r=r(ACt,"TFAlbertForPreTraining"),ACt.forEach(t),a1r=r(QPe," (ALBERT model)"),QPe.forEach(t),n1r=i(le),u7=n(le,"LI",{});var HPe=s(u7);X4e=n(HPe,"STRONG",{});var LCt=s(X4e);s1r=r(LCt,"bart"),LCt.forEach(t),l1r=r(HPe," \u2014 "),eH=n(HPe,"A",{href:!0});var yCt=s(eH);i1r=r(yCt,"TFBartForConditionalGeneration"),yCt.forEach(t),d1r=r(HPe," (BART model)"),HPe.forEach(t),c1r=i(le),b7=n(le,"LI",{});var UPe=s(b7);z4e=n(UPe,"STRONG",{});var xCt=s(z4e);f1r=r(xCt,"bert"),xCt.forEach(t),m1r=r(UPe," \u2014 "),oH=n(UPe,"A",{href:!0});var $Ct=s(oH);g1r=r($Ct,"TFBertForPreTraining"),$Ct.forEach(t),h1r=r(UPe," (BERT model)"),UPe.forEach(t),p1r=i(le),v7=n(le,"LI",{});var JPe=s(v7);W4e=n(JPe,"STRONG",{});var kCt=s(W4e);_1r=r(kCt,"camembert"),kCt.forEach(t),u1r=r(JPe," \u2014 "),rH=n(JPe,"A",{href:!0});var SCt=s(rH);b1r=r(SCt,"TFCamembertForMaskedLM"),SCt.forEach(t),v1r=r(JPe," (CamemBERT model)"),JPe.forEach(t),F1r=i(le),F7=n(le,"LI",{});var YPe=s(F7);Q4e=n(YPe,"STRONG",{});var RCt=s(Q4e);T1r=r(RCt,"ctrl"),RCt.forEach(t),M1r=r(YPe," \u2014 "),tH=n(YPe,"A",{href:!0});var PCt=s(tH);E1r=r(PCt,"TFCTRLLMHeadModel"),PCt.forEach(t),C1r=r(YPe," (CTRL model)"),YPe.forEach(t),w1r=i(le),T7=n(le,"LI",{});var KPe=s(T7);H4e=n(KPe,"STRONG",{});var BCt=s(H4e);A1r=r(BCt,"distilbert"),BCt.forEach(t),L1r=r(KPe," \u2014 "),aH=n(KPe,"A",{href:!0});var ICt=s(aH);y1r=r(ICt,"TFDistilBertForMaskedLM"),ICt.forEach(t),x1r=r(KPe," (DistilBERT model)"),KPe.forEach(t),$1r=i(le),M7=n(le,"LI",{});var ZPe=s(M7);U4e=n(ZPe,"STRONG",{});var NCt=s(U4e);k1r=r(NCt,"electra"),NCt.forEach(t),S1r=r(ZPe," \u2014 "),nH=n(ZPe,"A",{href:!0});var qCt=s(nH);R1r=r(qCt,"TFElectraForPreTraining"),qCt.forEach(t),P1r=r(ZPe," (ELECTRA model)"),ZPe.forEach(t),B1r=i(le),E7=n(le,"LI",{});var eBe=s(E7);J4e=n(eBe,"STRONG",{});var jCt=s(J4e);I1r=r(jCt,"flaubert"),jCt.forEach(t),N1r=r(eBe," \u2014 "),sH=n(eBe,"A",{href:!0});var DCt=s(sH);q1r=r(DCt,"TFFlaubertWithLMHeadModel"),DCt.forEach(t),j1r=r(eBe," (FlauBERT model)"),eBe.forEach(t),D1r=i(le),C7=n(le,"LI",{});var oBe=s(C7);Y4e=n(oBe,"STRONG",{});var GCt=s(Y4e);G1r=r(GCt,"funnel"),GCt.forEach(t),O1r=r(oBe," \u2014 "),lH=n(oBe,"A",{href:!0});var OCt=s(lH);V1r=r(OCt,"TFFunnelForPreTraining"),OCt.forEach(t),X1r=r(oBe," (Funnel Transformer model)"),oBe.forEach(t),z1r=i(le),w7=n(le,"LI",{});var rBe=s(w7);K4e=n(rBe,"STRONG",{});var VCt=s(K4e);W1r=r(VCt,"gpt2"),VCt.forEach(t),Q1r=r(rBe," \u2014 "),iH=n(rBe,"A",{href:!0});var XCt=s(iH);H1r=r(XCt,"TFGPT2LMHeadModel"),XCt.forEach(t),U1r=r(rBe," (OpenAI GPT-2 model)"),rBe.forEach(t),J1r=i(le),A7=n(le,"LI",{});var tBe=s(A7);Z4e=n(tBe,"STRONG",{});var zCt=s(Z4e);Y1r=r(zCt,"layoutlm"),zCt.forEach(t),K1r=r(tBe," \u2014 "),dH=n(tBe,"A",{href:!0});var WCt=s(dH);Z1r=r(WCt,"TFLayoutLMForMaskedLM"),WCt.forEach(t),ebr=r(tBe," (LayoutLM model)"),tBe.forEach(t),obr=i(le),L7=n(le,"LI",{});var aBe=s(L7);eve=n(aBe,"STRONG",{});var QCt=s(eve);rbr=r(QCt,"lxmert"),QCt.forEach(t),tbr=r(aBe," \u2014 "),cH=n(aBe,"A",{href:!0});var HCt=s(cH);abr=r(HCt,"TFLxmertForPreTraining"),HCt.forEach(t),nbr=r(aBe," (LXMERT model)"),aBe.forEach(t),sbr=i(le),y7=n(le,"LI",{});var nBe=s(y7);ove=n(nBe,"STRONG",{});var UCt=s(ove);lbr=r(UCt,"mobilebert"),UCt.forEach(t),ibr=r(nBe," \u2014 "),fH=n(nBe,"A",{href:!0});var JCt=s(fH);dbr=r(JCt,"TFMobileBertForPreTraining"),JCt.forEach(t),cbr=r(nBe," (MobileBERT model)"),nBe.forEach(t),fbr=i(le),x7=n(le,"LI",{});var sBe=s(x7);rve=n(sBe,"STRONG",{});var YCt=s(rve);mbr=r(YCt,"mpnet"),YCt.forEach(t),gbr=r(sBe," \u2014 "),mH=n(sBe,"A",{href:!0});var KCt=s(mH);hbr=r(KCt,"TFMPNetForMaskedLM"),KCt.forEach(t),pbr=r(sBe," (MPNet model)"),sBe.forEach(t),_br=i(le),$7=n(le,"LI",{});var lBe=s($7);tve=n(lBe,"STRONG",{});var ZCt=s(tve);ubr=r(ZCt,"openai-gpt"),ZCt.forEach(t),bbr=r(lBe," \u2014 "),gH=n(lBe,"A",{href:!0});var e5t=s(gH);vbr=r(e5t,"TFOpenAIGPTLMHeadModel"),e5t.forEach(t),Fbr=r(lBe," (OpenAI GPT model)"),lBe.forEach(t),Tbr=i(le),k7=n(le,"LI",{});var iBe=s(k7);ave=n(iBe,"STRONG",{});var o5t=s(ave);Mbr=r(o5t,"roberta"),o5t.forEach(t),Ebr=r(iBe," \u2014 "),hH=n(iBe,"A",{href:!0});var r5t=s(hH);Cbr=r(r5t,"TFRobertaForMaskedLM"),r5t.forEach(t),wbr=r(iBe," (RoBERTa model)"),iBe.forEach(t),Abr=i(le),S7=n(le,"LI",{});var dBe=s(S7);nve=n(dBe,"STRONG",{});var t5t=s(nve);Lbr=r(t5t,"t5"),t5t.forEach(t),ybr=r(dBe," \u2014 "),pH=n(dBe,"A",{href:!0});var a5t=s(pH);xbr=r(a5t,"TFT5ForConditionalGeneration"),a5t.forEach(t),$br=r(dBe," (T5 model)"),dBe.forEach(t),kbr=i(le),R7=n(le,"LI",{});var cBe=s(R7);sve=n(cBe,"STRONG",{});var n5t=s(sve);Sbr=r(n5t,"tapas"),n5t.forEach(t),Rbr=r(cBe," \u2014 "),_H=n(cBe,"A",{href:!0});var s5t=s(_H);Pbr=r(s5t,"TFTapasForMaskedLM"),s5t.forEach(t),Bbr=r(cBe," (TAPAS model)"),cBe.forEach(t),Ibr=i(le),P7=n(le,"LI",{});var fBe=s(P7);lve=n(fBe,"STRONG",{});var l5t=s(lve);Nbr=r(l5t,"transfo-xl"),l5t.forEach(t),qbr=r(fBe," \u2014 "),uH=n(fBe,"A",{href:!0});var i5t=s(uH);jbr=r(i5t,"TFTransfoXLLMHeadModel"),i5t.forEach(t),Dbr=r(fBe," (Transformer-XL model)"),fBe.forEach(t),Gbr=i(le),B7=n(le,"LI",{});var mBe=s(B7);ive=n(mBe,"STRONG",{});var d5t=s(ive);Obr=r(d5t,"vit_mae"),d5t.forEach(t),Vbr=r(mBe," \u2014 "),bH=n(mBe,"A",{href:!0});var c5t=s(bH);Xbr=r(c5t,"TFViTMAEForPreTraining"),c5t.forEach(t),zbr=r(mBe," (ViTMAE model)"),mBe.forEach(t),Wbr=i(le),I7=n(le,"LI",{});var gBe=s(I7);dve=n(gBe,"STRONG",{});var f5t=s(dve);Qbr=r(f5t,"xlm"),f5t.forEach(t),Hbr=r(gBe," \u2014 "),vH=n(gBe,"A",{href:!0});var m5t=s(vH);Ubr=r(m5t,"TFXLMWithLMHeadModel"),m5t.forEach(t),Jbr=r(gBe," (XLM model)"),gBe.forEach(t),Ybr=i(le),N7=n(le,"LI",{});var hBe=s(N7);cve=n(hBe,"STRONG",{});var g5t=s(cve);Kbr=r(g5t,"xlm-roberta"),g5t.forEach(t),Zbr=r(hBe," \u2014 "),FH=n(hBe,"A",{href:!0});var h5t=s(FH);e2r=r(h5t,"TFXLMRobertaForMaskedLM"),h5t.forEach(t),o2r=r(hBe," (XLM-RoBERTa model)"),hBe.forEach(t),r2r=i(le),q7=n(le,"LI",{});var pBe=s(q7);fve=n(pBe,"STRONG",{});var p5t=s(fve);t2r=r(p5t,"xlnet"),p5t.forEach(t),a2r=r(pBe," \u2014 "),TH=n(pBe,"A",{href:!0});var _5t=s(TH);n2r=r(_5t,"TFXLNetLMHeadModel"),_5t.forEach(t),s2r=r(pBe," (XLNet model)"),pBe.forEach(t),le.forEach(t),l2r=i(bl),T(j7.$$.fragment,bl),bl.forEach(t),ul.forEach(t),YDe=i(f),Ud=n(f,"H2",{class:!0});var tVe=s(Ud);D7=n(tVe,"A",{id:!0,class:!0,href:!0});var u5t=s(D7);mve=n(u5t,"SPAN",{});var b5t=s(mve);T(O8.$$.fragment,b5t),b5t.forEach(t),u5t.forEach(t),i2r=i(tVe),gve=n(tVe,"SPAN",{});var v5t=s(gve);d2r=r(v5t,"TFAutoModelForCausalLM"),v5t.forEach(t),tVe.forEach(t),KDe=i(f),Zo=n(f,"DIV",{class:!0});var vl=s(Zo);T(V8.$$.fragment,vl),c2r=i(vl),Jd=n(vl,"P",{});var coe=s(Jd);f2r=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MH=n(coe,"A",{href:!0});var F5t=s(MH);m2r=r(F5t,"from_pretrained()"),F5t.forEach(t),g2r=r(coe," class method or the "),EH=n(coe,"A",{href:!0});var T5t=s(EH);h2r=r(T5t,"from_config()"),T5t.forEach(t),p2r=r(coe,` class
method.`),coe.forEach(t),_2r=i(vl),X8=n(vl,"P",{});var aVe=s(X8);u2r=r(aVe,"This class cannot be instantiated directly using "),hve=n(aVe,"CODE",{});var M5t=s(hve);b2r=r(M5t,"__init__()"),M5t.forEach(t),v2r=r(aVe," (throws an error)."),aVe.forEach(t),F2r=i(vl),xt=n(vl,"DIV",{class:!0});var Kw=s(xt);T(z8.$$.fragment,Kw),T2r=i(Kw),pve=n(Kw,"P",{});var E5t=s(pve);M2r=r(E5t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),E5t.forEach(t),E2r=i(Kw),Yd=n(Kw,"P",{});var foe=s(Yd);C2r=r(foe,`Note:
Loading a model from its configuration file does `),_ve=n(foe,"STRONG",{});var C5t=s(_ve);w2r=r(C5t,"not"),C5t.forEach(t),A2r=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(foe,"A",{href:!0});var w5t=s(CH);L2r=r(w5t,"from_pretrained()"),w5t.forEach(t),y2r=r(foe," to load the model weights."),foe.forEach(t),x2r=i(Kw),T(G7.$$.fragment,Kw),Kw.forEach(t),$2r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(W8.$$.fragment,Fl),k2r=i(Fl),uve=n(Fl,"P",{});var A5t=s(uve);S2r=r(A5t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),A5t.forEach(t),R2r=i(Fl),en=n(Fl,"P",{});var Zw=s(en);P2r=r(Zw,"The model class to instantiate is selected based on the "),bve=n(Zw,"CODE",{});var L5t=s(bve);B2r=r(L5t,"model_type"),L5t.forEach(t),I2r=r(Zw,` property of the config object (either
passed as an argument or loaded from `),vve=n(Zw,"CODE",{});var y5t=s(vve);N2r=r(y5t,"pretrained_model_name_or_path"),y5t.forEach(t),q2r=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=n(Zw,"CODE",{});var x5t=s(Fve);j2r=r(x5t,"pretrained_model_name_or_path"),x5t.forEach(t),D2r=r(Zw,":"),Zw.forEach(t),G2r=i(Fl),Me=n(Fl,"UL",{});var Ce=s(Me);O7=n(Ce,"LI",{});var _Be=s(O7);Tve=n(_Be,"STRONG",{});var $5t=s(Tve);O2r=r($5t,"bert"),$5t.forEach(t),V2r=r(_Be," \u2014 "),wH=n(_Be,"A",{href:!0});var k5t=s(wH);X2r=r(k5t,"TFBertLMHeadModel"),k5t.forEach(t),z2r=r(_Be," (BERT model)"),_Be.forEach(t),W2r=i(Ce),V7=n(Ce,"LI",{});var uBe=s(V7);Mve=n(uBe,"STRONG",{});var S5t=s(Mve);Q2r=r(S5t,"camembert"),S5t.forEach(t),H2r=r(uBe," \u2014 "),AH=n(uBe,"A",{href:!0});var R5t=s(AH);U2r=r(R5t,"TFCamembertForCausalLM"),R5t.forEach(t),J2r=r(uBe," (CamemBERT model)"),uBe.forEach(t),Y2r=i(Ce),X7=n(Ce,"LI",{});var bBe=s(X7);Eve=n(bBe,"STRONG",{});var P5t=s(Eve);K2r=r(P5t,"ctrl"),P5t.forEach(t),Z2r=r(bBe," \u2014 "),LH=n(bBe,"A",{href:!0});var B5t=s(LH);e4r=r(B5t,"TFCTRLLMHeadModel"),B5t.forEach(t),o4r=r(bBe," (CTRL model)"),bBe.forEach(t),r4r=i(Ce),z7=n(Ce,"LI",{});var vBe=s(z7);Cve=n(vBe,"STRONG",{});var I5t=s(Cve);t4r=r(I5t,"gpt2"),I5t.forEach(t),a4r=r(vBe," \u2014 "),yH=n(vBe,"A",{href:!0});var N5t=s(yH);n4r=r(N5t,"TFGPT2LMHeadModel"),N5t.forEach(t),s4r=r(vBe," (OpenAI GPT-2 model)"),vBe.forEach(t),l4r=i(Ce),W7=n(Ce,"LI",{});var FBe=s(W7);wve=n(FBe,"STRONG",{});var q5t=s(wve);i4r=r(q5t,"gptj"),q5t.forEach(t),d4r=r(FBe," \u2014 "),xH=n(FBe,"A",{href:!0});var j5t=s(xH);c4r=r(j5t,"TFGPTJForCausalLM"),j5t.forEach(t),f4r=r(FBe," (GPT-J model)"),FBe.forEach(t),m4r=i(Ce),Q7=n(Ce,"LI",{});var TBe=s(Q7);Ave=n(TBe,"STRONG",{});var D5t=s(Ave);g4r=r(D5t,"openai-gpt"),D5t.forEach(t),h4r=r(TBe," \u2014 "),$H=n(TBe,"A",{href:!0});var G5t=s($H);p4r=r(G5t,"TFOpenAIGPTLMHeadModel"),G5t.forEach(t),_4r=r(TBe," (OpenAI GPT model)"),TBe.forEach(t),u4r=i(Ce),H7=n(Ce,"LI",{});var MBe=s(H7);Lve=n(MBe,"STRONG",{});var O5t=s(Lve);b4r=r(O5t,"opt"),O5t.forEach(t),v4r=r(MBe," \u2014 "),kH=n(MBe,"A",{href:!0});var V5t=s(kH);F4r=r(V5t,"TFOPTForCausalLM"),V5t.forEach(t),T4r=r(MBe," (OPT model)"),MBe.forEach(t),M4r=i(Ce),U7=n(Ce,"LI",{});var EBe=s(U7);yve=n(EBe,"STRONG",{});var X5t=s(yve);E4r=r(X5t,"rembert"),X5t.forEach(t),C4r=r(EBe," \u2014 "),SH=n(EBe,"A",{href:!0});var z5t=s(SH);w4r=r(z5t,"TFRemBertForCausalLM"),z5t.forEach(t),A4r=r(EBe," (RemBERT model)"),EBe.forEach(t),L4r=i(Ce),J7=n(Ce,"LI",{});var CBe=s(J7);xve=n(CBe,"STRONG",{});var W5t=s(xve);y4r=r(W5t,"roberta"),W5t.forEach(t),x4r=r(CBe," \u2014 "),RH=n(CBe,"A",{href:!0});var Q5t=s(RH);$4r=r(Q5t,"TFRobertaForCausalLM"),Q5t.forEach(t),k4r=r(CBe," (RoBERTa model)"),CBe.forEach(t),S4r=i(Ce),Y7=n(Ce,"LI",{});var wBe=s(Y7);$ve=n(wBe,"STRONG",{});var H5t=s($ve);R4r=r(H5t,"roformer"),H5t.forEach(t),P4r=r(wBe," \u2014 "),PH=n(wBe,"A",{href:!0});var U5t=s(PH);B4r=r(U5t,"TFRoFormerForCausalLM"),U5t.forEach(t),I4r=r(wBe," (RoFormer model)"),wBe.forEach(t),N4r=i(Ce),K7=n(Ce,"LI",{});var ABe=s(K7);kve=n(ABe,"STRONG",{});var J5t=s(kve);q4r=r(J5t,"transfo-xl"),J5t.forEach(t),j4r=r(ABe," \u2014 "),BH=n(ABe,"A",{href:!0});var Y5t=s(BH);D4r=r(Y5t,"TFTransfoXLLMHeadModel"),Y5t.forEach(t),G4r=r(ABe," (Transformer-XL model)"),ABe.forEach(t),O4r=i(Ce),Z7=n(Ce,"LI",{});var LBe=s(Z7);Sve=n(LBe,"STRONG",{});var K5t=s(Sve);V4r=r(K5t,"xlm"),K5t.forEach(t),X4r=r(LBe," \u2014 "),IH=n(LBe,"A",{href:!0});var Z5t=s(IH);z4r=r(Z5t,"TFXLMWithLMHeadModel"),Z5t.forEach(t),W4r=r(LBe," (XLM model)"),LBe.forEach(t),Q4r=i(Ce),eM=n(Ce,"LI",{});var yBe=s(eM);Rve=n(yBe,"STRONG",{});var e3t=s(Rve);H4r=r(e3t,"xlnet"),e3t.forEach(t),U4r=r(yBe," \u2014 "),NH=n(yBe,"A",{href:!0});var o3t=s(NH);J4r=r(o3t,"TFXLNetLMHeadModel"),o3t.forEach(t),Y4r=r(yBe," (XLNet model)"),yBe.forEach(t),Ce.forEach(t),K4r=i(Fl),T(oM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),ZDe=i(f),Kd=n(f,"H2",{class:!0});var nVe=s(Kd);rM=n(nVe,"A",{id:!0,class:!0,href:!0});var r3t=s(rM);Pve=n(r3t,"SPAN",{});var t3t=s(Pve);T(Q8.$$.fragment,t3t),t3t.forEach(t),r3t.forEach(t),Z4r=i(nVe),Bve=n(nVe,"SPAN",{});var a3t=s(Bve);evr=r(a3t,"TFAutoModelForImageClassification"),a3t.forEach(t),nVe.forEach(t),eGe=i(f),er=n(f,"DIV",{class:!0});var Tl=s(er);T(H8.$$.fragment,Tl),ovr=i(Tl),Zd=n(Tl,"P",{});var moe=s(Zd);rvr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qH=n(moe,"A",{href:!0});var n3t=s(qH);tvr=r(n3t,"from_pretrained()"),n3t.forEach(t),avr=r(moe," class method or the "),jH=n(moe,"A",{href:!0});var s3t=s(jH);nvr=r(s3t,"from_config()"),s3t.forEach(t),svr=r(moe,` class
method.`),moe.forEach(t),lvr=i(Tl),U8=n(Tl,"P",{});var sVe=s(U8);ivr=r(sVe,"This class cannot be instantiated directly using "),Ive=n(sVe,"CODE",{});var l3t=s(Ive);dvr=r(l3t,"__init__()"),l3t.forEach(t),cvr=r(sVe," (throws an error)."),sVe.forEach(t),fvr=i(Tl),$t=n(Tl,"DIV",{class:!0});var eA=s($t);T(J8.$$.fragment,eA),mvr=i(eA),Nve=n(eA,"P",{});var i3t=s(Nve);gvr=r(i3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),i3t.forEach(t),hvr=i(eA),ec=n(eA,"P",{});var goe=s(ec);pvr=r(goe,`Note:
Loading a model from its configuration file does `),qve=n(goe,"STRONG",{});var d3t=s(qve);_vr=r(d3t,"not"),d3t.forEach(t),uvr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(goe,"A",{href:!0});var c3t=s(DH);bvr=r(c3t,"from_pretrained()"),c3t.forEach(t),vvr=r(goe," to load the model weights."),goe.forEach(t),Fvr=i(eA),T(tM.$$.fragment,eA),eA.forEach(t),Tvr=i(Tl),yr=n(Tl,"DIV",{class:!0});var Ml=s(yr);T(Y8.$$.fragment,Ml),Mvr=i(Ml),jve=n(Ml,"P",{});var f3t=s(jve);Evr=r(f3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),f3t.forEach(t),Cvr=i(Ml),on=n(Ml,"P",{});var oA=s(on);wvr=r(oA,"The model class to instantiate is selected based on the "),Dve=n(oA,"CODE",{});var m3t=s(Dve);Avr=r(m3t,"model_type"),m3t.forEach(t),Lvr=r(oA,` property of the config object (either
passed as an argument or loaded from `),Gve=n(oA,"CODE",{});var g3t=s(Gve);yvr=r(g3t,"pretrained_model_name_or_path"),g3t.forEach(t),xvr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=n(oA,"CODE",{});var h3t=s(Ove);$vr=r(h3t,"pretrained_model_name_or_path"),h3t.forEach(t),kvr=r(oA,":"),oA.forEach(t),Svr=i(Ml),rn=n(Ml,"UL",{});var rA=s(rn);aM=n(rA,"LI",{});var xBe=s(aM);Vve=n(xBe,"STRONG",{});var p3t=s(Vve);Rvr=r(p3t,"convnext"),p3t.forEach(t),Pvr=r(xBe," \u2014 "),GH=n(xBe,"A",{href:!0});var _3t=s(GH);Bvr=r(_3t,"TFConvNextForImageClassification"),_3t.forEach(t),Ivr=r(xBe," (ConvNeXT model)"),xBe.forEach(t),Nvr=i(rA),nM=n(rA,"LI",{});var $Be=s(nM);Xve=n($Be,"STRONG",{});var u3t=s(Xve);qvr=r(u3t,"data2vec-vision"),u3t.forEach(t),jvr=r($Be," \u2014 "),OH=n($Be,"A",{href:!0});var b3t=s(OH);Dvr=r(b3t,"TFData2VecVisionForImageClassification"),b3t.forEach(t),Gvr=r($Be," (Data2VecVision model)"),$Be.forEach(t),Ovr=i(rA),sM=n(rA,"LI",{});var kBe=s(sM);zve=n(kBe,"STRONG",{});var v3t=s(zve);Vvr=r(v3t,"swin"),v3t.forEach(t),Xvr=r(kBe," \u2014 "),VH=n(kBe,"A",{href:!0});var F3t=s(VH);zvr=r(F3t,"TFSwinForImageClassification"),F3t.forEach(t),Wvr=r(kBe," (Swin Transformer model)"),kBe.forEach(t),Qvr=i(rA),lM=n(rA,"LI",{});var SBe=s(lM);Wve=n(SBe,"STRONG",{});var T3t=s(Wve);Hvr=r(T3t,"vit"),T3t.forEach(t),Uvr=r(SBe," \u2014 "),XH=n(SBe,"A",{href:!0});var M3t=s(XH);Jvr=r(M3t,"TFViTForImageClassification"),M3t.forEach(t),Yvr=r(SBe," (ViT model)"),SBe.forEach(t),rA.forEach(t),Kvr=i(Ml),T(iM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),oGe=i(f),oc=n(f,"H2",{class:!0});var lVe=s(oc);dM=n(lVe,"A",{id:!0,class:!0,href:!0});var E3t=s(dM);Qve=n(E3t,"SPAN",{});var C3t=s(Qve);T(K8.$$.fragment,C3t),C3t.forEach(t),E3t.forEach(t),Zvr=i(lVe),Hve=n(lVe,"SPAN",{});var w3t=s(Hve);eFr=r(w3t,"TFAutoModelForMaskedLM"),w3t.forEach(t),lVe.forEach(t),rGe=i(f),or=n(f,"DIV",{class:!0});var El=s(or);T(Z8.$$.fragment,El),oFr=i(El),rc=n(El,"P",{});var hoe=s(rc);rFr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zH=n(hoe,"A",{href:!0});var A3t=s(zH);tFr=r(A3t,"from_pretrained()"),A3t.forEach(t),aFr=r(hoe," class method or the "),WH=n(hoe,"A",{href:!0});var L3t=s(WH);nFr=r(L3t,"from_config()"),L3t.forEach(t),sFr=r(hoe,` class
method.`),hoe.forEach(t),lFr=i(El),e9=n(El,"P",{});var iVe=s(e9);iFr=r(iVe,"This class cannot be instantiated directly using "),Uve=n(iVe,"CODE",{});var y3t=s(Uve);dFr=r(y3t,"__init__()"),y3t.forEach(t),cFr=r(iVe," (throws an error)."),iVe.forEach(t),fFr=i(El),kt=n(El,"DIV",{class:!0});var tA=s(kt);T(o9.$$.fragment,tA),mFr=i(tA),Jve=n(tA,"P",{});var x3t=s(Jve);gFr=r(x3t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),x3t.forEach(t),hFr=i(tA),tc=n(tA,"P",{});var poe=s(tc);pFr=r(poe,`Note:
Loading a model from its configuration file does `),Yve=n(poe,"STRONG",{});var $3t=s(Yve);_Fr=r($3t,"not"),$3t.forEach(t),uFr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(poe,"A",{href:!0});var k3t=s(QH);bFr=r(k3t,"from_pretrained()"),k3t.forEach(t),vFr=r(poe," to load the model weights."),poe.forEach(t),FFr=i(tA),T(cM.$$.fragment,tA),tA.forEach(t),TFr=i(El),xr=n(El,"DIV",{class:!0});var Cl=s(xr);T(r9.$$.fragment,Cl),MFr=i(Cl),Kve=n(Cl,"P",{});var S3t=s(Kve);EFr=r(S3t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),S3t.forEach(t),CFr=i(Cl),tn=n(Cl,"P",{});var aA=s(tn);wFr=r(aA,"The model class to instantiate is selected based on the "),Zve=n(aA,"CODE",{});var R3t=s(Zve);AFr=r(R3t,"model_type"),R3t.forEach(t),LFr=r(aA,` property of the config object (either
passed as an argument or loaded from `),eFe=n(aA,"CODE",{});var P3t=s(eFe);yFr=r(P3t,"pretrained_model_name_or_path"),P3t.forEach(t),xFr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oFe=n(aA,"CODE",{});var B3t=s(oFe);$Fr=r(B3t,"pretrained_model_name_or_path"),B3t.forEach(t),kFr=r(aA,":"),aA.forEach(t),SFr=i(Cl),ie=n(Cl,"UL",{});var fe=s(ie);fM=n(fe,"LI",{});var RBe=s(fM);rFe=n(RBe,"STRONG",{});var I3t=s(rFe);RFr=r(I3t,"albert"),I3t.forEach(t),PFr=r(RBe," \u2014 "),HH=n(RBe,"A",{href:!0});var N3t=s(HH);BFr=r(N3t,"TFAlbertForMaskedLM"),N3t.forEach(t),IFr=r(RBe," (ALBERT model)"),RBe.forEach(t),NFr=i(fe),mM=n(fe,"LI",{});var PBe=s(mM);tFe=n(PBe,"STRONG",{});var q3t=s(tFe);qFr=r(q3t,"bert"),q3t.forEach(t),jFr=r(PBe," \u2014 "),UH=n(PBe,"A",{href:!0});var j3t=s(UH);DFr=r(j3t,"TFBertForMaskedLM"),j3t.forEach(t),GFr=r(PBe," (BERT model)"),PBe.forEach(t),OFr=i(fe),gM=n(fe,"LI",{});var BBe=s(gM);aFe=n(BBe,"STRONG",{});var D3t=s(aFe);VFr=r(D3t,"camembert"),D3t.forEach(t),XFr=r(BBe," \u2014 "),JH=n(BBe,"A",{href:!0});var G3t=s(JH);zFr=r(G3t,"TFCamembertForMaskedLM"),G3t.forEach(t),WFr=r(BBe," (CamemBERT model)"),BBe.forEach(t),QFr=i(fe),hM=n(fe,"LI",{});var IBe=s(hM);nFe=n(IBe,"STRONG",{});var O3t=s(nFe);HFr=r(O3t,"convbert"),O3t.forEach(t),UFr=r(IBe," \u2014 "),YH=n(IBe,"A",{href:!0});var V3t=s(YH);JFr=r(V3t,"TFConvBertForMaskedLM"),V3t.forEach(t),YFr=r(IBe," (ConvBERT model)"),IBe.forEach(t),KFr=i(fe),pM=n(fe,"LI",{});var NBe=s(pM);sFe=n(NBe,"STRONG",{});var X3t=s(sFe);ZFr=r(X3t,"deberta"),X3t.forEach(t),e6r=r(NBe," \u2014 "),KH=n(NBe,"A",{href:!0});var z3t=s(KH);o6r=r(z3t,"TFDebertaForMaskedLM"),z3t.forEach(t),r6r=r(NBe," (DeBERTa model)"),NBe.forEach(t),t6r=i(fe),_M=n(fe,"LI",{});var qBe=s(_M);lFe=n(qBe,"STRONG",{});var W3t=s(lFe);a6r=r(W3t,"deberta-v2"),W3t.forEach(t),n6r=r(qBe," \u2014 "),ZH=n(qBe,"A",{href:!0});var Q3t=s(ZH);s6r=r(Q3t,"TFDebertaV2ForMaskedLM"),Q3t.forEach(t),l6r=r(qBe," (DeBERTa-v2 model)"),qBe.forEach(t),i6r=i(fe),uM=n(fe,"LI",{});var jBe=s(uM);iFe=n(jBe,"STRONG",{});var H3t=s(iFe);d6r=r(H3t,"distilbert"),H3t.forEach(t),c6r=r(jBe," \u2014 "),eU=n(jBe,"A",{href:!0});var U3t=s(eU);f6r=r(U3t,"TFDistilBertForMaskedLM"),U3t.forEach(t),m6r=r(jBe," (DistilBERT model)"),jBe.forEach(t),g6r=i(fe),bM=n(fe,"LI",{});var DBe=s(bM);dFe=n(DBe,"STRONG",{});var J3t=s(dFe);h6r=r(J3t,"electra"),J3t.forEach(t),p6r=r(DBe," \u2014 "),oU=n(DBe,"A",{href:!0});var Y3t=s(oU);_6r=r(Y3t,"TFElectraForMaskedLM"),Y3t.forEach(t),u6r=r(DBe," (ELECTRA model)"),DBe.forEach(t),b6r=i(fe),vM=n(fe,"LI",{});var GBe=s(vM);cFe=n(GBe,"STRONG",{});var K3t=s(cFe);v6r=r(K3t,"flaubert"),K3t.forEach(t),F6r=r(GBe," \u2014 "),rU=n(GBe,"A",{href:!0});var Z3t=s(rU);T6r=r(Z3t,"TFFlaubertWithLMHeadModel"),Z3t.forEach(t),M6r=r(GBe," (FlauBERT model)"),GBe.forEach(t),E6r=i(fe),FM=n(fe,"LI",{});var OBe=s(FM);fFe=n(OBe,"STRONG",{});var e0t=s(fFe);C6r=r(e0t,"funnel"),e0t.forEach(t),w6r=r(OBe," \u2014 "),tU=n(OBe,"A",{href:!0});var o0t=s(tU);A6r=r(o0t,"TFFunnelForMaskedLM"),o0t.forEach(t),L6r=r(OBe," (Funnel Transformer model)"),OBe.forEach(t),y6r=i(fe),TM=n(fe,"LI",{});var VBe=s(TM);mFe=n(VBe,"STRONG",{});var r0t=s(mFe);x6r=r(r0t,"layoutlm"),r0t.forEach(t),$6r=r(VBe," \u2014 "),aU=n(VBe,"A",{href:!0});var t0t=s(aU);k6r=r(t0t,"TFLayoutLMForMaskedLM"),t0t.forEach(t),S6r=r(VBe," (LayoutLM model)"),VBe.forEach(t),R6r=i(fe),MM=n(fe,"LI",{});var XBe=s(MM);gFe=n(XBe,"STRONG",{});var a0t=s(gFe);P6r=r(a0t,"longformer"),a0t.forEach(t),B6r=r(XBe," \u2014 "),nU=n(XBe,"A",{href:!0});var n0t=s(nU);I6r=r(n0t,"TFLongformerForMaskedLM"),n0t.forEach(t),N6r=r(XBe," (Longformer model)"),XBe.forEach(t),q6r=i(fe),EM=n(fe,"LI",{});var zBe=s(EM);hFe=n(zBe,"STRONG",{});var s0t=s(hFe);j6r=r(s0t,"mobilebert"),s0t.forEach(t),D6r=r(zBe," \u2014 "),sU=n(zBe,"A",{href:!0});var l0t=s(sU);G6r=r(l0t,"TFMobileBertForMaskedLM"),l0t.forEach(t),O6r=r(zBe," (MobileBERT model)"),zBe.forEach(t),V6r=i(fe),CM=n(fe,"LI",{});var WBe=s(CM);pFe=n(WBe,"STRONG",{});var i0t=s(pFe);X6r=r(i0t,"mpnet"),i0t.forEach(t),z6r=r(WBe," \u2014 "),lU=n(WBe,"A",{href:!0});var d0t=s(lU);W6r=r(d0t,"TFMPNetForMaskedLM"),d0t.forEach(t),Q6r=r(WBe," (MPNet model)"),WBe.forEach(t),H6r=i(fe),wM=n(fe,"LI",{});var QBe=s(wM);_Fe=n(QBe,"STRONG",{});var c0t=s(_Fe);U6r=r(c0t,"rembert"),c0t.forEach(t),J6r=r(QBe," \u2014 "),iU=n(QBe,"A",{href:!0});var f0t=s(iU);Y6r=r(f0t,"TFRemBertForMaskedLM"),f0t.forEach(t),K6r=r(QBe," (RemBERT model)"),QBe.forEach(t),Z6r=i(fe),AM=n(fe,"LI",{});var HBe=s(AM);uFe=n(HBe,"STRONG",{});var m0t=s(uFe);eTr=r(m0t,"roberta"),m0t.forEach(t),oTr=r(HBe," \u2014 "),dU=n(HBe,"A",{href:!0});var g0t=s(dU);rTr=r(g0t,"TFRobertaForMaskedLM"),g0t.forEach(t),tTr=r(HBe," (RoBERTa model)"),HBe.forEach(t),aTr=i(fe),LM=n(fe,"LI",{});var UBe=s(LM);bFe=n(UBe,"STRONG",{});var h0t=s(bFe);nTr=r(h0t,"roformer"),h0t.forEach(t),sTr=r(UBe," \u2014 "),cU=n(UBe,"A",{href:!0});var p0t=s(cU);lTr=r(p0t,"TFRoFormerForMaskedLM"),p0t.forEach(t),iTr=r(UBe," (RoFormer model)"),UBe.forEach(t),dTr=i(fe),yM=n(fe,"LI",{});var JBe=s(yM);vFe=n(JBe,"STRONG",{});var _0t=s(vFe);cTr=r(_0t,"tapas"),_0t.forEach(t),fTr=r(JBe," \u2014 "),fU=n(JBe,"A",{href:!0});var u0t=s(fU);mTr=r(u0t,"TFTapasForMaskedLM"),u0t.forEach(t),gTr=r(JBe," (TAPAS model)"),JBe.forEach(t),hTr=i(fe),xM=n(fe,"LI",{});var YBe=s(xM);FFe=n(YBe,"STRONG",{});var b0t=s(FFe);pTr=r(b0t,"xlm"),b0t.forEach(t),_Tr=r(YBe," \u2014 "),mU=n(YBe,"A",{href:!0});var v0t=s(mU);uTr=r(v0t,"TFXLMWithLMHeadModel"),v0t.forEach(t),bTr=r(YBe," (XLM model)"),YBe.forEach(t),vTr=i(fe),$M=n(fe,"LI",{});var KBe=s($M);TFe=n(KBe,"STRONG",{});var F0t=s(TFe);FTr=r(F0t,"xlm-roberta"),F0t.forEach(t),TTr=r(KBe," \u2014 "),gU=n(KBe,"A",{href:!0});var T0t=s(gU);MTr=r(T0t,"TFXLMRobertaForMaskedLM"),T0t.forEach(t),ETr=r(KBe," (XLM-RoBERTa model)"),KBe.forEach(t),fe.forEach(t),CTr=i(Cl),T(kM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),tGe=i(f),ac=n(f,"H2",{class:!0});var dVe=s(ac);SM=n(dVe,"A",{id:!0,class:!0,href:!0});var M0t=s(SM);MFe=n(M0t,"SPAN",{});var E0t=s(MFe);T(t9.$$.fragment,E0t),E0t.forEach(t),M0t.forEach(t),wTr=i(dVe),EFe=n(dVe,"SPAN",{});var C0t=s(EFe);ATr=r(C0t,"TFAutoModelForSeq2SeqLM"),C0t.forEach(t),dVe.forEach(t),aGe=i(f),rr=n(f,"DIV",{class:!0});var wl=s(rr);T(a9.$$.fragment,wl),LTr=i(wl),nc=n(wl,"P",{});var _oe=s(nc);yTr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hU=n(_oe,"A",{href:!0});var w0t=s(hU);xTr=r(w0t,"from_pretrained()"),w0t.forEach(t),$Tr=r(_oe," class method or the "),pU=n(_oe,"A",{href:!0});var A0t=s(pU);kTr=r(A0t,"from_config()"),A0t.forEach(t),STr=r(_oe,` class
method.`),_oe.forEach(t),RTr=i(wl),n9=n(wl,"P",{});var cVe=s(n9);PTr=r(cVe,"This class cannot be instantiated directly using "),CFe=n(cVe,"CODE",{});var L0t=s(CFe);BTr=r(L0t,"__init__()"),L0t.forEach(t),ITr=r(cVe," (throws an error)."),cVe.forEach(t),NTr=i(wl),St=n(wl,"DIV",{class:!0});var nA=s(St);T(s9.$$.fragment,nA),qTr=i(nA),wFe=n(nA,"P",{});var y0t=s(wFe);jTr=r(y0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),y0t.forEach(t),DTr=i(nA),sc=n(nA,"P",{});var uoe=s(sc);GTr=r(uoe,`Note:
Loading a model from its configuration file does `),AFe=n(uoe,"STRONG",{});var x0t=s(AFe);OTr=r(x0t,"not"),x0t.forEach(t),VTr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=n(uoe,"A",{href:!0});var $0t=s(_U);XTr=r($0t,"from_pretrained()"),$0t.forEach(t),zTr=r(uoe," to load the model weights."),uoe.forEach(t),WTr=i(nA),T(RM.$$.fragment,nA),nA.forEach(t),QTr=i(wl),$r=n(wl,"DIV",{class:!0});var Al=s($r);T(l9.$$.fragment,Al),HTr=i(Al),LFe=n(Al,"P",{});var k0t=s(LFe);UTr=r(k0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),k0t.forEach(t),JTr=i(Al),an=n(Al,"P",{});var sA=s(an);YTr=r(sA,"The model class to instantiate is selected based on the "),yFe=n(sA,"CODE",{});var S0t=s(yFe);KTr=r(S0t,"model_type"),S0t.forEach(t),ZTr=r(sA,` property of the config object (either
passed as an argument or loaded from `),xFe=n(sA,"CODE",{});var R0t=s(xFe);e7r=r(R0t,"pretrained_model_name_or_path"),R0t.forEach(t),o7r=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=n(sA,"CODE",{});var P0t=s($Fe);r7r=r(P0t,"pretrained_model_name_or_path"),P0t.forEach(t),t7r=r(sA,":"),sA.forEach(t),a7r=i(Al),ye=n(Al,"UL",{});var Ie=s(ye);PM=n(Ie,"LI",{});var ZBe=s(PM);kFe=n(ZBe,"STRONG",{});var B0t=s(kFe);n7r=r(B0t,"bart"),B0t.forEach(t),s7r=r(ZBe," \u2014 "),uU=n(ZBe,"A",{href:!0});var I0t=s(uU);l7r=r(I0t,"TFBartForConditionalGeneration"),I0t.forEach(t),i7r=r(ZBe," (BART model)"),ZBe.forEach(t),d7r=i(Ie),BM=n(Ie,"LI",{});var eIe=s(BM);SFe=n(eIe,"STRONG",{});var N0t=s(SFe);c7r=r(N0t,"blenderbot"),N0t.forEach(t),f7r=r(eIe," \u2014 "),bU=n(eIe,"A",{href:!0});var q0t=s(bU);m7r=r(q0t,"TFBlenderbotForConditionalGeneration"),q0t.forEach(t),g7r=r(eIe," (Blenderbot model)"),eIe.forEach(t),h7r=i(Ie),IM=n(Ie,"LI",{});var oIe=s(IM);RFe=n(oIe,"STRONG",{});var j0t=s(RFe);p7r=r(j0t,"blenderbot-small"),j0t.forEach(t),_7r=r(oIe," \u2014 "),vU=n(oIe,"A",{href:!0});var D0t=s(vU);u7r=r(D0t,"TFBlenderbotSmallForConditionalGeneration"),D0t.forEach(t),b7r=r(oIe," (BlenderbotSmall model)"),oIe.forEach(t),v7r=i(Ie),NM=n(Ie,"LI",{});var rIe=s(NM);PFe=n(rIe,"STRONG",{});var G0t=s(PFe);F7r=r(G0t,"encoder-decoder"),G0t.forEach(t),T7r=r(rIe," \u2014 "),FU=n(rIe,"A",{href:!0});var O0t=s(FU);M7r=r(O0t,"TFEncoderDecoderModel"),O0t.forEach(t),E7r=r(rIe," (Encoder decoder model)"),rIe.forEach(t),C7r=i(Ie),qM=n(Ie,"LI",{});var tIe=s(qM);BFe=n(tIe,"STRONG",{});var V0t=s(BFe);w7r=r(V0t,"led"),V0t.forEach(t),A7r=r(tIe," \u2014 "),TU=n(tIe,"A",{href:!0});var X0t=s(TU);L7r=r(X0t,"TFLEDForConditionalGeneration"),X0t.forEach(t),y7r=r(tIe," (LED model)"),tIe.forEach(t),x7r=i(Ie),jM=n(Ie,"LI",{});var aIe=s(jM);IFe=n(aIe,"STRONG",{});var z0t=s(IFe);$7r=r(z0t,"marian"),z0t.forEach(t),k7r=r(aIe," \u2014 "),MU=n(aIe,"A",{href:!0});var W0t=s(MU);S7r=r(W0t,"TFMarianMTModel"),W0t.forEach(t),R7r=r(aIe," (Marian model)"),aIe.forEach(t),P7r=i(Ie),DM=n(Ie,"LI",{});var nIe=s(DM);NFe=n(nIe,"STRONG",{});var Q0t=s(NFe);B7r=r(Q0t,"mbart"),Q0t.forEach(t),I7r=r(nIe," \u2014 "),EU=n(nIe,"A",{href:!0});var H0t=s(EU);N7r=r(H0t,"TFMBartForConditionalGeneration"),H0t.forEach(t),q7r=r(nIe," (mBART model)"),nIe.forEach(t),j7r=i(Ie),GM=n(Ie,"LI",{});var sIe=s(GM);qFe=n(sIe,"STRONG",{});var U0t=s(qFe);D7r=r(U0t,"mt5"),U0t.forEach(t),G7r=r(sIe," \u2014 "),CU=n(sIe,"A",{href:!0});var J0t=s(CU);O7r=r(J0t,"TFMT5ForConditionalGeneration"),J0t.forEach(t),V7r=r(sIe," (MT5 model)"),sIe.forEach(t),X7r=i(Ie),OM=n(Ie,"LI",{});var lIe=s(OM);jFe=n(lIe,"STRONG",{});var Y0t=s(jFe);z7r=r(Y0t,"pegasus"),Y0t.forEach(t),W7r=r(lIe," \u2014 "),wU=n(lIe,"A",{href:!0});var K0t=s(wU);Q7r=r(K0t,"TFPegasusForConditionalGeneration"),K0t.forEach(t),H7r=r(lIe," (Pegasus model)"),lIe.forEach(t),U7r=i(Ie),VM=n(Ie,"LI",{});var iIe=s(VM);DFe=n(iIe,"STRONG",{});var Z0t=s(DFe);J7r=r(Z0t,"t5"),Z0t.forEach(t),Y7r=r(iIe," \u2014 "),AU=n(iIe,"A",{href:!0});var ewt=s(AU);K7r=r(ewt,"TFT5ForConditionalGeneration"),ewt.forEach(t),Z7r=r(iIe," (T5 model)"),iIe.forEach(t),Ie.forEach(t),eMr=i(Al),T(XM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),nGe=i(f),lc=n(f,"H2",{class:!0});var fVe=s(lc);zM=n(fVe,"A",{id:!0,class:!0,href:!0});var owt=s(zM);GFe=n(owt,"SPAN",{});var rwt=s(GFe);T(i9.$$.fragment,rwt),rwt.forEach(t),owt.forEach(t),oMr=i(fVe),OFe=n(fVe,"SPAN",{});var twt=s(OFe);rMr=r(twt,"TFAutoModelForSequenceClassification"),twt.forEach(t),fVe.forEach(t),sGe=i(f),tr=n(f,"DIV",{class:!0});var Ll=s(tr);T(d9.$$.fragment,Ll),tMr=i(Ll),ic=n(Ll,"P",{});var boe=s(ic);aMr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),LU=n(boe,"A",{href:!0});var awt=s(LU);nMr=r(awt,"from_pretrained()"),awt.forEach(t),sMr=r(boe," class method or the "),yU=n(boe,"A",{href:!0});var nwt=s(yU);lMr=r(nwt,"from_config()"),nwt.forEach(t),iMr=r(boe,` class
method.`),boe.forEach(t),dMr=i(Ll),c9=n(Ll,"P",{});var mVe=s(c9);cMr=r(mVe,"This class cannot be instantiated directly using "),VFe=n(mVe,"CODE",{});var swt=s(VFe);fMr=r(swt,"__init__()"),swt.forEach(t),mMr=r(mVe," (throws an error)."),mVe.forEach(t),gMr=i(Ll),Rt=n(Ll,"DIV",{class:!0});var lA=s(Rt);T(f9.$$.fragment,lA),hMr=i(lA),XFe=n(lA,"P",{});var lwt=s(XFe);pMr=r(lwt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lwt.forEach(t),_Mr=i(lA),dc=n(lA,"P",{});var voe=s(dc);uMr=r(voe,`Note:
Loading a model from its configuration file does `),zFe=n(voe,"STRONG",{});var iwt=s(zFe);bMr=r(iwt,"not"),iwt.forEach(t),vMr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=n(voe,"A",{href:!0});var dwt=s(xU);FMr=r(dwt,"from_pretrained()"),dwt.forEach(t),TMr=r(voe," to load the model weights."),voe.forEach(t),MMr=i(lA),T(WM.$$.fragment,lA),lA.forEach(t),EMr=i(Ll),kr=n(Ll,"DIV",{class:!0});var yl=s(kr);T(m9.$$.fragment,yl),CMr=i(yl),WFe=n(yl,"P",{});var cwt=s(WFe);wMr=r(cwt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cwt.forEach(t),AMr=i(yl),nn=n(yl,"P",{});var iA=s(nn);LMr=r(iA,"The model class to instantiate is selected based on the "),QFe=n(iA,"CODE",{});var fwt=s(QFe);yMr=r(fwt,"model_type"),fwt.forEach(t),xMr=r(iA,` property of the config object (either
passed as an argument or loaded from `),HFe=n(iA,"CODE",{});var mwt=s(HFe);$Mr=r(mwt,"pretrained_model_name_or_path"),mwt.forEach(t),kMr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=n(iA,"CODE",{});var gwt=s(UFe);SMr=r(gwt,"pretrained_model_name_or_path"),gwt.forEach(t),RMr=r(iA,":"),iA.forEach(t),PMr=i(yl),oe=n(yl,"UL",{});var ae=s(oe);QM=n(ae,"LI",{});var dIe=s(QM);JFe=n(dIe,"STRONG",{});var hwt=s(JFe);BMr=r(hwt,"albert"),hwt.forEach(t),IMr=r(dIe," \u2014 "),$U=n(dIe,"A",{href:!0});var pwt=s($U);NMr=r(pwt,"TFAlbertForSequenceClassification"),pwt.forEach(t),qMr=r(dIe," (ALBERT model)"),dIe.forEach(t),jMr=i(ae),HM=n(ae,"LI",{});var cIe=s(HM);YFe=n(cIe,"STRONG",{});var _wt=s(YFe);DMr=r(_wt,"bert"),_wt.forEach(t),GMr=r(cIe," \u2014 "),kU=n(cIe,"A",{href:!0});var uwt=s(kU);OMr=r(uwt,"TFBertForSequenceClassification"),uwt.forEach(t),VMr=r(cIe," (BERT model)"),cIe.forEach(t),XMr=i(ae),UM=n(ae,"LI",{});var fIe=s(UM);KFe=n(fIe,"STRONG",{});var bwt=s(KFe);zMr=r(bwt,"camembert"),bwt.forEach(t),WMr=r(fIe," \u2014 "),SU=n(fIe,"A",{href:!0});var vwt=s(SU);QMr=r(vwt,"TFCamembertForSequenceClassification"),vwt.forEach(t),HMr=r(fIe," (CamemBERT model)"),fIe.forEach(t),UMr=i(ae),JM=n(ae,"LI",{});var mIe=s(JM);ZFe=n(mIe,"STRONG",{});var Fwt=s(ZFe);JMr=r(Fwt,"convbert"),Fwt.forEach(t),YMr=r(mIe," \u2014 "),RU=n(mIe,"A",{href:!0});var Twt=s(RU);KMr=r(Twt,"TFConvBertForSequenceClassification"),Twt.forEach(t),ZMr=r(mIe," (ConvBERT model)"),mIe.forEach(t),eEr=i(ae),YM=n(ae,"LI",{});var gIe=s(YM);e6e=n(gIe,"STRONG",{});var Mwt=s(e6e);oEr=r(Mwt,"ctrl"),Mwt.forEach(t),rEr=r(gIe," \u2014 "),PU=n(gIe,"A",{href:!0});var Ewt=s(PU);tEr=r(Ewt,"TFCTRLForSequenceClassification"),Ewt.forEach(t),aEr=r(gIe," (CTRL model)"),gIe.forEach(t),nEr=i(ae),KM=n(ae,"LI",{});var hIe=s(KM);o6e=n(hIe,"STRONG",{});var Cwt=s(o6e);sEr=r(Cwt,"deberta"),Cwt.forEach(t),lEr=r(hIe," \u2014 "),BU=n(hIe,"A",{href:!0});var wwt=s(BU);iEr=r(wwt,"TFDebertaForSequenceClassification"),wwt.forEach(t),dEr=r(hIe," (DeBERTa model)"),hIe.forEach(t),cEr=i(ae),ZM=n(ae,"LI",{});var pIe=s(ZM);r6e=n(pIe,"STRONG",{});var Awt=s(r6e);fEr=r(Awt,"deberta-v2"),Awt.forEach(t),mEr=r(pIe," \u2014 "),IU=n(pIe,"A",{href:!0});var Lwt=s(IU);gEr=r(Lwt,"TFDebertaV2ForSequenceClassification"),Lwt.forEach(t),hEr=r(pIe," (DeBERTa-v2 model)"),pIe.forEach(t),pEr=i(ae),eE=n(ae,"LI",{});var _Ie=s(eE);t6e=n(_Ie,"STRONG",{});var ywt=s(t6e);_Er=r(ywt,"distilbert"),ywt.forEach(t),uEr=r(_Ie," \u2014 "),NU=n(_Ie,"A",{href:!0});var xwt=s(NU);bEr=r(xwt,"TFDistilBertForSequenceClassification"),xwt.forEach(t),vEr=r(_Ie," (DistilBERT model)"),_Ie.forEach(t),FEr=i(ae),oE=n(ae,"LI",{});var uIe=s(oE);a6e=n(uIe,"STRONG",{});var $wt=s(a6e);TEr=r($wt,"electra"),$wt.forEach(t),MEr=r(uIe," \u2014 "),qU=n(uIe,"A",{href:!0});var kwt=s(qU);EEr=r(kwt,"TFElectraForSequenceClassification"),kwt.forEach(t),CEr=r(uIe," (ELECTRA model)"),uIe.forEach(t),wEr=i(ae),rE=n(ae,"LI",{});var bIe=s(rE);n6e=n(bIe,"STRONG",{});var Swt=s(n6e);AEr=r(Swt,"flaubert"),Swt.forEach(t),LEr=r(bIe," \u2014 "),jU=n(bIe,"A",{href:!0});var Rwt=s(jU);yEr=r(Rwt,"TFFlaubertForSequenceClassification"),Rwt.forEach(t),xEr=r(bIe," (FlauBERT model)"),bIe.forEach(t),$Er=i(ae),tE=n(ae,"LI",{});var vIe=s(tE);s6e=n(vIe,"STRONG",{});var Pwt=s(s6e);kEr=r(Pwt,"funnel"),Pwt.forEach(t),SEr=r(vIe," \u2014 "),DU=n(vIe,"A",{href:!0});var Bwt=s(DU);REr=r(Bwt,"TFFunnelForSequenceClassification"),Bwt.forEach(t),PEr=r(vIe," (Funnel Transformer model)"),vIe.forEach(t),BEr=i(ae),aE=n(ae,"LI",{});var FIe=s(aE);l6e=n(FIe,"STRONG",{});var Iwt=s(l6e);IEr=r(Iwt,"gpt2"),Iwt.forEach(t),NEr=r(FIe," \u2014 "),GU=n(FIe,"A",{href:!0});var Nwt=s(GU);qEr=r(Nwt,"TFGPT2ForSequenceClassification"),Nwt.forEach(t),jEr=r(FIe," (OpenAI GPT-2 model)"),FIe.forEach(t),DEr=i(ae),nE=n(ae,"LI",{});var TIe=s(nE);i6e=n(TIe,"STRONG",{});var qwt=s(i6e);GEr=r(qwt,"gptj"),qwt.forEach(t),OEr=r(TIe," \u2014 "),OU=n(TIe,"A",{href:!0});var jwt=s(OU);VEr=r(jwt,"TFGPTJForSequenceClassification"),jwt.forEach(t),XEr=r(TIe," (GPT-J model)"),TIe.forEach(t),zEr=i(ae),sE=n(ae,"LI",{});var MIe=s(sE);d6e=n(MIe,"STRONG",{});var Dwt=s(d6e);WEr=r(Dwt,"layoutlm"),Dwt.forEach(t),QEr=r(MIe," \u2014 "),VU=n(MIe,"A",{href:!0});var Gwt=s(VU);HEr=r(Gwt,"TFLayoutLMForSequenceClassification"),Gwt.forEach(t),UEr=r(MIe," (LayoutLM model)"),MIe.forEach(t),JEr=i(ae),lE=n(ae,"LI",{});var EIe=s(lE);c6e=n(EIe,"STRONG",{});var Owt=s(c6e);YEr=r(Owt,"longformer"),Owt.forEach(t),KEr=r(EIe," \u2014 "),XU=n(EIe,"A",{href:!0});var Vwt=s(XU);ZEr=r(Vwt,"TFLongformerForSequenceClassification"),Vwt.forEach(t),eCr=r(EIe," (Longformer model)"),EIe.forEach(t),oCr=i(ae),iE=n(ae,"LI",{});var CIe=s(iE);f6e=n(CIe,"STRONG",{});var Xwt=s(f6e);rCr=r(Xwt,"mobilebert"),Xwt.forEach(t),tCr=r(CIe," \u2014 "),zU=n(CIe,"A",{href:!0});var zwt=s(zU);aCr=r(zwt,"TFMobileBertForSequenceClassification"),zwt.forEach(t),nCr=r(CIe," (MobileBERT model)"),CIe.forEach(t),sCr=i(ae),dE=n(ae,"LI",{});var wIe=s(dE);m6e=n(wIe,"STRONG",{});var Wwt=s(m6e);lCr=r(Wwt,"mpnet"),Wwt.forEach(t),iCr=r(wIe," \u2014 "),WU=n(wIe,"A",{href:!0});var Qwt=s(WU);dCr=r(Qwt,"TFMPNetForSequenceClassification"),Qwt.forEach(t),cCr=r(wIe," (MPNet model)"),wIe.forEach(t),fCr=i(ae),cE=n(ae,"LI",{});var AIe=s(cE);g6e=n(AIe,"STRONG",{});var Hwt=s(g6e);mCr=r(Hwt,"openai-gpt"),Hwt.forEach(t),gCr=r(AIe," \u2014 "),QU=n(AIe,"A",{href:!0});var Uwt=s(QU);hCr=r(Uwt,"TFOpenAIGPTForSequenceClassification"),Uwt.forEach(t),pCr=r(AIe," (OpenAI GPT model)"),AIe.forEach(t),_Cr=i(ae),fE=n(ae,"LI",{});var LIe=s(fE);h6e=n(LIe,"STRONG",{});var Jwt=s(h6e);uCr=r(Jwt,"rembert"),Jwt.forEach(t),bCr=r(LIe," \u2014 "),HU=n(LIe,"A",{href:!0});var Ywt=s(HU);vCr=r(Ywt,"TFRemBertForSequenceClassification"),Ywt.forEach(t),FCr=r(LIe," (RemBERT model)"),LIe.forEach(t),TCr=i(ae),mE=n(ae,"LI",{});var yIe=s(mE);p6e=n(yIe,"STRONG",{});var Kwt=s(p6e);MCr=r(Kwt,"roberta"),Kwt.forEach(t),ECr=r(yIe," \u2014 "),UU=n(yIe,"A",{href:!0});var Zwt=s(UU);CCr=r(Zwt,"TFRobertaForSequenceClassification"),Zwt.forEach(t),wCr=r(yIe," (RoBERTa model)"),yIe.forEach(t),ACr=i(ae),gE=n(ae,"LI",{});var xIe=s(gE);_6e=n(xIe,"STRONG",{});var eAt=s(_6e);LCr=r(eAt,"roformer"),eAt.forEach(t),yCr=r(xIe," \u2014 "),JU=n(xIe,"A",{href:!0});var oAt=s(JU);xCr=r(oAt,"TFRoFormerForSequenceClassification"),oAt.forEach(t),$Cr=r(xIe," (RoFormer model)"),xIe.forEach(t),kCr=i(ae),hE=n(ae,"LI",{});var $Ie=s(hE);u6e=n($Ie,"STRONG",{});var rAt=s(u6e);SCr=r(rAt,"tapas"),rAt.forEach(t),RCr=r($Ie," \u2014 "),YU=n($Ie,"A",{href:!0});var tAt=s(YU);PCr=r(tAt,"TFTapasForSequenceClassification"),tAt.forEach(t),BCr=r($Ie," (TAPAS model)"),$Ie.forEach(t),ICr=i(ae),pE=n(ae,"LI",{});var kIe=s(pE);b6e=n(kIe,"STRONG",{});var aAt=s(b6e);NCr=r(aAt,"transfo-xl"),aAt.forEach(t),qCr=r(kIe," \u2014 "),KU=n(kIe,"A",{href:!0});var nAt=s(KU);jCr=r(nAt,"TFTransfoXLForSequenceClassification"),nAt.forEach(t),DCr=r(kIe," (Transformer-XL model)"),kIe.forEach(t),GCr=i(ae),_E=n(ae,"LI",{});var SIe=s(_E);v6e=n(SIe,"STRONG",{});var sAt=s(v6e);OCr=r(sAt,"xlm"),sAt.forEach(t),VCr=r(SIe," \u2014 "),ZU=n(SIe,"A",{href:!0});var lAt=s(ZU);XCr=r(lAt,"TFXLMForSequenceClassification"),lAt.forEach(t),zCr=r(SIe," (XLM model)"),SIe.forEach(t),WCr=i(ae),uE=n(ae,"LI",{});var RIe=s(uE);F6e=n(RIe,"STRONG",{});var iAt=s(F6e);QCr=r(iAt,"xlm-roberta"),iAt.forEach(t),HCr=r(RIe," \u2014 "),eJ=n(RIe,"A",{href:!0});var dAt=s(eJ);UCr=r(dAt,"TFXLMRobertaForSequenceClassification"),dAt.forEach(t),JCr=r(RIe," (XLM-RoBERTa model)"),RIe.forEach(t),YCr=i(ae),bE=n(ae,"LI",{});var PIe=s(bE);T6e=n(PIe,"STRONG",{});var cAt=s(T6e);KCr=r(cAt,"xlnet"),cAt.forEach(t),ZCr=r(PIe," \u2014 "),oJ=n(PIe,"A",{href:!0});var fAt=s(oJ);e5r=r(fAt,"TFXLNetForSequenceClassification"),fAt.forEach(t),o5r=r(PIe," (XLNet model)"),PIe.forEach(t),ae.forEach(t),r5r=i(yl),T(vE.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),lGe=i(f),cc=n(f,"H2",{class:!0});var gVe=s(cc);FE=n(gVe,"A",{id:!0,class:!0,href:!0});var mAt=s(FE);M6e=n(mAt,"SPAN",{});var gAt=s(M6e);T(g9.$$.fragment,gAt),gAt.forEach(t),mAt.forEach(t),t5r=i(gVe),E6e=n(gVe,"SPAN",{});var hAt=s(E6e);a5r=r(hAt,"TFAutoModelForMultipleChoice"),hAt.forEach(t),gVe.forEach(t),iGe=i(f),ar=n(f,"DIV",{class:!0});var xl=s(ar);T(h9.$$.fragment,xl),n5r=i(xl),fc=n(xl,"P",{});var Foe=s(fc);s5r=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rJ=n(Foe,"A",{href:!0});var pAt=s(rJ);l5r=r(pAt,"from_pretrained()"),pAt.forEach(t),i5r=r(Foe," class method or the "),tJ=n(Foe,"A",{href:!0});var _At=s(tJ);d5r=r(_At,"from_config()"),_At.forEach(t),c5r=r(Foe,` class
method.`),Foe.forEach(t),f5r=i(xl),p9=n(xl,"P",{});var hVe=s(p9);m5r=r(hVe,"This class cannot be instantiated directly using "),C6e=n(hVe,"CODE",{});var uAt=s(C6e);g5r=r(uAt,"__init__()"),uAt.forEach(t),h5r=r(hVe," (throws an error)."),hVe.forEach(t),p5r=i(xl),Pt=n(xl,"DIV",{class:!0});var dA=s(Pt);T(_9.$$.fragment,dA),_5r=i(dA),w6e=n(dA,"P",{});var bAt=s(w6e);u5r=r(bAt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bAt.forEach(t),b5r=i(dA),mc=n(dA,"P",{});var Toe=s(mc);v5r=r(Toe,`Note:
Loading a model from its configuration file does `),A6e=n(Toe,"STRONG",{});var vAt=s(A6e);F5r=r(vAt,"not"),vAt.forEach(t),T5r=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),aJ=n(Toe,"A",{href:!0});var FAt=s(aJ);M5r=r(FAt,"from_pretrained()"),FAt.forEach(t),E5r=r(Toe," to load the model weights."),Toe.forEach(t),C5r=i(dA),T(TE.$$.fragment,dA),dA.forEach(t),w5r=i(xl),Sr=n(xl,"DIV",{class:!0});var $l=s(Sr);T(u9.$$.fragment,$l),A5r=i($l),L6e=n($l,"P",{});var TAt=s(L6e);L5r=r(TAt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TAt.forEach(t),y5r=i($l),sn=n($l,"P",{});var cA=s(sn);x5r=r(cA,"The model class to instantiate is selected based on the "),y6e=n(cA,"CODE",{});var MAt=s(y6e);$5r=r(MAt,"model_type"),MAt.forEach(t),k5r=r(cA,` property of the config object (either
passed as an argument or loaded from `),x6e=n(cA,"CODE",{});var EAt=s(x6e);S5r=r(EAt,"pretrained_model_name_or_path"),EAt.forEach(t),R5r=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=n(cA,"CODE",{});var CAt=s($6e);P5r=r(CAt,"pretrained_model_name_or_path"),CAt.forEach(t),B5r=r(cA,":"),cA.forEach(t),I5r=i($l),pe=n($l,"UL",{});var be=s(pe);ME=n(be,"LI",{});var BIe=s(ME);k6e=n(BIe,"STRONG",{});var wAt=s(k6e);N5r=r(wAt,"albert"),wAt.forEach(t),q5r=r(BIe," \u2014 "),nJ=n(BIe,"A",{href:!0});var AAt=s(nJ);j5r=r(AAt,"TFAlbertForMultipleChoice"),AAt.forEach(t),D5r=r(BIe," (ALBERT model)"),BIe.forEach(t),G5r=i(be),EE=n(be,"LI",{});var IIe=s(EE);S6e=n(IIe,"STRONG",{});var LAt=s(S6e);O5r=r(LAt,"bert"),LAt.forEach(t),V5r=r(IIe," \u2014 "),sJ=n(IIe,"A",{href:!0});var yAt=s(sJ);X5r=r(yAt,"TFBertForMultipleChoice"),yAt.forEach(t),z5r=r(IIe," (BERT model)"),IIe.forEach(t),W5r=i(be),CE=n(be,"LI",{});var NIe=s(CE);R6e=n(NIe,"STRONG",{});var xAt=s(R6e);Q5r=r(xAt,"camembert"),xAt.forEach(t),H5r=r(NIe," \u2014 "),lJ=n(NIe,"A",{href:!0});var $At=s(lJ);U5r=r($At,"TFCamembertForMultipleChoice"),$At.forEach(t),J5r=r(NIe," (CamemBERT model)"),NIe.forEach(t),Y5r=i(be),wE=n(be,"LI",{});var qIe=s(wE);P6e=n(qIe,"STRONG",{});var kAt=s(P6e);K5r=r(kAt,"convbert"),kAt.forEach(t),Z5r=r(qIe," \u2014 "),iJ=n(qIe,"A",{href:!0});var SAt=s(iJ);e3r=r(SAt,"TFConvBertForMultipleChoice"),SAt.forEach(t),o3r=r(qIe," (ConvBERT model)"),qIe.forEach(t),r3r=i(be),AE=n(be,"LI",{});var jIe=s(AE);B6e=n(jIe,"STRONG",{});var RAt=s(B6e);t3r=r(RAt,"distilbert"),RAt.forEach(t),a3r=r(jIe," \u2014 "),dJ=n(jIe,"A",{href:!0});var PAt=s(dJ);n3r=r(PAt,"TFDistilBertForMultipleChoice"),PAt.forEach(t),s3r=r(jIe," (DistilBERT model)"),jIe.forEach(t),l3r=i(be),LE=n(be,"LI",{});var DIe=s(LE);I6e=n(DIe,"STRONG",{});var BAt=s(I6e);i3r=r(BAt,"electra"),BAt.forEach(t),d3r=r(DIe," \u2014 "),cJ=n(DIe,"A",{href:!0});var IAt=s(cJ);c3r=r(IAt,"TFElectraForMultipleChoice"),IAt.forEach(t),f3r=r(DIe," (ELECTRA model)"),DIe.forEach(t),m3r=i(be),yE=n(be,"LI",{});var GIe=s(yE);N6e=n(GIe,"STRONG",{});var NAt=s(N6e);g3r=r(NAt,"flaubert"),NAt.forEach(t),h3r=r(GIe," \u2014 "),fJ=n(GIe,"A",{href:!0});var qAt=s(fJ);p3r=r(qAt,"TFFlaubertForMultipleChoice"),qAt.forEach(t),_3r=r(GIe," (FlauBERT model)"),GIe.forEach(t),u3r=i(be),xE=n(be,"LI",{});var OIe=s(xE);q6e=n(OIe,"STRONG",{});var jAt=s(q6e);b3r=r(jAt,"funnel"),jAt.forEach(t),v3r=r(OIe," \u2014 "),mJ=n(OIe,"A",{href:!0});var DAt=s(mJ);F3r=r(DAt,"TFFunnelForMultipleChoice"),DAt.forEach(t),T3r=r(OIe," (Funnel Transformer model)"),OIe.forEach(t),M3r=i(be),$E=n(be,"LI",{});var VIe=s($E);j6e=n(VIe,"STRONG",{});var GAt=s(j6e);E3r=r(GAt,"longformer"),GAt.forEach(t),C3r=r(VIe," \u2014 "),gJ=n(VIe,"A",{href:!0});var OAt=s(gJ);w3r=r(OAt,"TFLongformerForMultipleChoice"),OAt.forEach(t),A3r=r(VIe," (Longformer model)"),VIe.forEach(t),L3r=i(be),kE=n(be,"LI",{});var XIe=s(kE);D6e=n(XIe,"STRONG",{});var VAt=s(D6e);y3r=r(VAt,"mobilebert"),VAt.forEach(t),x3r=r(XIe," \u2014 "),hJ=n(XIe,"A",{href:!0});var XAt=s(hJ);$3r=r(XAt,"TFMobileBertForMultipleChoice"),XAt.forEach(t),k3r=r(XIe," (MobileBERT model)"),XIe.forEach(t),S3r=i(be),SE=n(be,"LI",{});var zIe=s(SE);G6e=n(zIe,"STRONG",{});var zAt=s(G6e);R3r=r(zAt,"mpnet"),zAt.forEach(t),P3r=r(zIe," \u2014 "),pJ=n(zIe,"A",{href:!0});var WAt=s(pJ);B3r=r(WAt,"TFMPNetForMultipleChoice"),WAt.forEach(t),I3r=r(zIe," (MPNet model)"),zIe.forEach(t),N3r=i(be),RE=n(be,"LI",{});var WIe=s(RE);O6e=n(WIe,"STRONG",{});var QAt=s(O6e);q3r=r(QAt,"rembert"),QAt.forEach(t),j3r=r(WIe," \u2014 "),_J=n(WIe,"A",{href:!0});var HAt=s(_J);D3r=r(HAt,"TFRemBertForMultipleChoice"),HAt.forEach(t),G3r=r(WIe," (RemBERT model)"),WIe.forEach(t),O3r=i(be),PE=n(be,"LI",{});var QIe=s(PE);V6e=n(QIe,"STRONG",{});var UAt=s(V6e);V3r=r(UAt,"roberta"),UAt.forEach(t),X3r=r(QIe," \u2014 "),uJ=n(QIe,"A",{href:!0});var JAt=s(uJ);z3r=r(JAt,"TFRobertaForMultipleChoice"),JAt.forEach(t),W3r=r(QIe," (RoBERTa model)"),QIe.forEach(t),Q3r=i(be),BE=n(be,"LI",{});var HIe=s(BE);X6e=n(HIe,"STRONG",{});var YAt=s(X6e);H3r=r(YAt,"roformer"),YAt.forEach(t),U3r=r(HIe," \u2014 "),bJ=n(HIe,"A",{href:!0});var KAt=s(bJ);J3r=r(KAt,"TFRoFormerForMultipleChoice"),KAt.forEach(t),Y3r=r(HIe," (RoFormer model)"),HIe.forEach(t),K3r=i(be),IE=n(be,"LI",{});var UIe=s(IE);z6e=n(UIe,"STRONG",{});var ZAt=s(z6e);Z3r=r(ZAt,"xlm"),ZAt.forEach(t),e0r=r(UIe," \u2014 "),vJ=n(UIe,"A",{href:!0});var eLt=s(vJ);o0r=r(eLt,"TFXLMForMultipleChoice"),eLt.forEach(t),r0r=r(UIe," (XLM model)"),UIe.forEach(t),t0r=i(be),NE=n(be,"LI",{});var JIe=s(NE);W6e=n(JIe,"STRONG",{});var oLt=s(W6e);a0r=r(oLt,"xlm-roberta"),oLt.forEach(t),n0r=r(JIe," \u2014 "),FJ=n(JIe,"A",{href:!0});var rLt=s(FJ);s0r=r(rLt,"TFXLMRobertaForMultipleChoice"),rLt.forEach(t),l0r=r(JIe," (XLM-RoBERTa model)"),JIe.forEach(t),i0r=i(be),qE=n(be,"LI",{});var YIe=s(qE);Q6e=n(YIe,"STRONG",{});var tLt=s(Q6e);d0r=r(tLt,"xlnet"),tLt.forEach(t),c0r=r(YIe," \u2014 "),TJ=n(YIe,"A",{href:!0});var aLt=s(TJ);f0r=r(aLt,"TFXLNetForMultipleChoice"),aLt.forEach(t),m0r=r(YIe," (XLNet model)"),YIe.forEach(t),be.forEach(t),g0r=i($l),T(jE.$$.fragment,$l),$l.forEach(t),xl.forEach(t),dGe=i(f),gc=n(f,"H2",{class:!0});var pVe=s(gc);DE=n(pVe,"A",{id:!0,class:!0,href:!0});var nLt=s(DE);H6e=n(nLt,"SPAN",{});var sLt=s(H6e);T(b9.$$.fragment,sLt),sLt.forEach(t),nLt.forEach(t),h0r=i(pVe),U6e=n(pVe,"SPAN",{});var lLt=s(U6e);p0r=r(lLt,"TFAutoModelForNextSentencePrediction"),lLt.forEach(t),pVe.forEach(t),cGe=i(f),nr=n(f,"DIV",{class:!0});var kl=s(nr);T(v9.$$.fragment,kl),_0r=i(kl),hc=n(kl,"P",{});var Moe=s(hc);u0r=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),MJ=n(Moe,"A",{href:!0});var iLt=s(MJ);b0r=r(iLt,"from_pretrained()"),iLt.forEach(t),v0r=r(Moe," class method or the "),EJ=n(Moe,"A",{href:!0});var dLt=s(EJ);F0r=r(dLt,"from_config()"),dLt.forEach(t),T0r=r(Moe,` class
method.`),Moe.forEach(t),M0r=i(kl),F9=n(kl,"P",{});var _Ve=s(F9);E0r=r(_Ve,"This class cannot be instantiated directly using "),J6e=n(_Ve,"CODE",{});var cLt=s(J6e);C0r=r(cLt,"__init__()"),cLt.forEach(t),w0r=r(_Ve," (throws an error)."),_Ve.forEach(t),A0r=i(kl),Bt=n(kl,"DIV",{class:!0});var fA=s(Bt);T(T9.$$.fragment,fA),L0r=i(fA),Y6e=n(fA,"P",{});var fLt=s(Y6e);y0r=r(fLt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),fLt.forEach(t),x0r=i(fA),pc=n(fA,"P",{});var Eoe=s(pc);$0r=r(Eoe,`Note:
Loading a model from its configuration file does `),K6e=n(Eoe,"STRONG",{});var mLt=s(K6e);k0r=r(mLt,"not"),mLt.forEach(t),S0r=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=n(Eoe,"A",{href:!0});var gLt=s(CJ);R0r=r(gLt,"from_pretrained()"),gLt.forEach(t),P0r=r(Eoe," to load the model weights."),Eoe.forEach(t),B0r=i(fA),T(GE.$$.fragment,fA),fA.forEach(t),I0r=i(kl),Rr=n(kl,"DIV",{class:!0});var Sl=s(Rr);T(M9.$$.fragment,Sl),N0r=i(Sl),Z6e=n(Sl,"P",{});var hLt=s(Z6e);q0r=r(hLt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hLt.forEach(t),j0r=i(Sl),ln=n(Sl,"P",{});var mA=s(ln);D0r=r(mA,"The model class to instantiate is selected based on the "),eTe=n(mA,"CODE",{});var pLt=s(eTe);G0r=r(pLt,"model_type"),pLt.forEach(t),O0r=r(mA,` property of the config object (either
passed as an argument or loaded from `),oTe=n(mA,"CODE",{});var _Lt=s(oTe);V0r=r(_Lt,"pretrained_model_name_or_path"),_Lt.forEach(t),X0r=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=n(mA,"CODE",{});var uLt=s(rTe);z0r=r(uLt,"pretrained_model_name_or_path"),uLt.forEach(t),W0r=r(mA,":"),mA.forEach(t),Q0r=i(Sl),E9=n(Sl,"UL",{});var uVe=s(E9);OE=n(uVe,"LI",{});var KIe=s(OE);tTe=n(KIe,"STRONG",{});var bLt=s(tTe);H0r=r(bLt,"bert"),bLt.forEach(t),U0r=r(KIe," \u2014 "),wJ=n(KIe,"A",{href:!0});var vLt=s(wJ);J0r=r(vLt,"TFBertForNextSentencePrediction"),vLt.forEach(t),Y0r=r(KIe," (BERT model)"),KIe.forEach(t),K0r=i(uVe),VE=n(uVe,"LI",{});var ZIe=s(VE);aTe=n(ZIe,"STRONG",{});var FLt=s(aTe);Z0r=r(FLt,"mobilebert"),FLt.forEach(t),ewr=r(ZIe," \u2014 "),AJ=n(ZIe,"A",{href:!0});var TLt=s(AJ);owr=r(TLt,"TFMobileBertForNextSentencePrediction"),TLt.forEach(t),rwr=r(ZIe," (MobileBERT model)"),ZIe.forEach(t),uVe.forEach(t),twr=i(Sl),T(XE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),fGe=i(f),_c=n(f,"H2",{class:!0});var bVe=s(_c);zE=n(bVe,"A",{id:!0,class:!0,href:!0});var MLt=s(zE);nTe=n(MLt,"SPAN",{});var ELt=s(nTe);T(C9.$$.fragment,ELt),ELt.forEach(t),MLt.forEach(t),awr=i(bVe),sTe=n(bVe,"SPAN",{});var CLt=s(sTe);nwr=r(CLt,"TFAutoModelForTableQuestionAnswering"),CLt.forEach(t),bVe.forEach(t),mGe=i(f),sr=n(f,"DIV",{class:!0});var Rl=s(sr);T(w9.$$.fragment,Rl),swr=i(Rl),uc=n(Rl,"P",{});var Coe=s(uc);lwr=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LJ=n(Coe,"A",{href:!0});var wLt=s(LJ);iwr=r(wLt,"from_pretrained()"),wLt.forEach(t),dwr=r(Coe," class method or the "),yJ=n(Coe,"A",{href:!0});var ALt=s(yJ);cwr=r(ALt,"from_config()"),ALt.forEach(t),fwr=r(Coe,` class
method.`),Coe.forEach(t),mwr=i(Rl),A9=n(Rl,"P",{});var vVe=s(A9);gwr=r(vVe,"This class cannot be instantiated directly using "),lTe=n(vVe,"CODE",{});var LLt=s(lTe);hwr=r(LLt,"__init__()"),LLt.forEach(t),pwr=r(vVe," (throws an error)."),vVe.forEach(t),_wr=i(Rl),It=n(Rl,"DIV",{class:!0});var gA=s(It);T(L9.$$.fragment,gA),uwr=i(gA),iTe=n(gA,"P",{});var yLt=s(iTe);bwr=r(yLt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),yLt.forEach(t),vwr=i(gA),bc=n(gA,"P",{});var woe=s(bc);Fwr=r(woe,`Note:
Loading a model from its configuration file does `),dTe=n(woe,"STRONG",{});var xLt=s(dTe);Twr=r(xLt,"not"),xLt.forEach(t),Mwr=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=n(woe,"A",{href:!0});var $Lt=s(xJ);Ewr=r($Lt,"from_pretrained()"),$Lt.forEach(t),Cwr=r(woe," to load the model weights."),woe.forEach(t),wwr=i(gA),T(WE.$$.fragment,gA),gA.forEach(t),Awr=i(Rl),Pr=n(Rl,"DIV",{class:!0});var Pl=s(Pr);T(y9.$$.fragment,Pl),Lwr=i(Pl),cTe=n(Pl,"P",{});var kLt=s(cTe);ywr=r(kLt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),kLt.forEach(t),xwr=i(Pl),dn=n(Pl,"P",{});var hA=s(dn);$wr=r(hA,"The model class to instantiate is selected based on the "),fTe=n(hA,"CODE",{});var SLt=s(fTe);kwr=r(SLt,"model_type"),SLt.forEach(t),Swr=r(hA,` property of the config object (either
passed as an argument or loaded from `),mTe=n(hA,"CODE",{});var RLt=s(mTe);Rwr=r(RLt,"pretrained_model_name_or_path"),RLt.forEach(t),Pwr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=n(hA,"CODE",{});var PLt=s(gTe);Bwr=r(PLt,"pretrained_model_name_or_path"),PLt.forEach(t),Iwr=r(hA,":"),hA.forEach(t),Nwr=i(Pl),hTe=n(Pl,"UL",{});var BLt=s(hTe);QE=n(BLt,"LI",{});var eNe=s(QE);pTe=n(eNe,"STRONG",{});var ILt=s(pTe);qwr=r(ILt,"tapas"),ILt.forEach(t),jwr=r(eNe," \u2014 "),$J=n(eNe,"A",{href:!0});var NLt=s($J);Dwr=r(NLt,"TFTapasForQuestionAnswering"),NLt.forEach(t),Gwr=r(eNe," (TAPAS model)"),eNe.forEach(t),BLt.forEach(t),Owr=i(Pl),T(HE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),gGe=i(f),vc=n(f,"H2",{class:!0});var FVe=s(vc);UE=n(FVe,"A",{id:!0,class:!0,href:!0});var qLt=s(UE);_Te=n(qLt,"SPAN",{});var jLt=s(_Te);T(x9.$$.fragment,jLt),jLt.forEach(t),qLt.forEach(t),Vwr=i(FVe),uTe=n(FVe,"SPAN",{});var DLt=s(uTe);Xwr=r(DLt,"TFAutoModelForTokenClassification"),DLt.forEach(t),FVe.forEach(t),hGe=i(f),lr=n(f,"DIV",{class:!0});var Bl=s(lr);T($9.$$.fragment,Bl),zwr=i(Bl),Fc=n(Bl,"P",{});var Aoe=s(Fc);Wwr=r(Aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kJ=n(Aoe,"A",{href:!0});var GLt=s(kJ);Qwr=r(GLt,"from_pretrained()"),GLt.forEach(t),Hwr=r(Aoe," class method or the "),SJ=n(Aoe,"A",{href:!0});var OLt=s(SJ);Uwr=r(OLt,"from_config()"),OLt.forEach(t),Jwr=r(Aoe,` class
method.`),Aoe.forEach(t),Ywr=i(Bl),k9=n(Bl,"P",{});var TVe=s(k9);Kwr=r(TVe,"This class cannot be instantiated directly using "),bTe=n(TVe,"CODE",{});var VLt=s(bTe);Zwr=r(VLt,"__init__()"),VLt.forEach(t),eAr=r(TVe," (throws an error)."),TVe.forEach(t),oAr=i(Bl),Nt=n(Bl,"DIV",{class:!0});var pA=s(Nt);T(S9.$$.fragment,pA),rAr=i(pA),vTe=n(pA,"P",{});var XLt=s(vTe);tAr=r(XLt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),XLt.forEach(t),aAr=i(pA),Tc=n(pA,"P",{});var Loe=s(Tc);nAr=r(Loe,`Note:
Loading a model from its configuration file does `),FTe=n(Loe,"STRONG",{});var zLt=s(FTe);sAr=r(zLt,"not"),zLt.forEach(t),lAr=r(Loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(Loe,"A",{href:!0});var WLt=s(RJ);iAr=r(WLt,"from_pretrained()"),WLt.forEach(t),dAr=r(Loe," to load the model weights."),Loe.forEach(t),cAr=i(pA),T(JE.$$.fragment,pA),pA.forEach(t),fAr=i(Bl),Br=n(Bl,"DIV",{class:!0});var Il=s(Br);T(R9.$$.fragment,Il),mAr=i(Il),TTe=n(Il,"P",{});var QLt=s(TTe);gAr=r(QLt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QLt.forEach(t),hAr=i(Il),cn=n(Il,"P",{});var _A=s(cn);pAr=r(_A,"The model class to instantiate is selected based on the "),MTe=n(_A,"CODE",{});var HLt=s(MTe);_Ar=r(HLt,"model_type"),HLt.forEach(t),uAr=r(_A,` property of the config object (either
passed as an argument or loaded from `),ETe=n(_A,"CODE",{});var ULt=s(ETe);bAr=r(ULt,"pretrained_model_name_or_path"),ULt.forEach(t),vAr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=n(_A,"CODE",{});var JLt=s(CTe);FAr=r(JLt,"pretrained_model_name_or_path"),JLt.forEach(t),TAr=r(_A,":"),_A.forEach(t),MAr=i(Il),de=n(Il,"UL",{});var me=s(de);YE=n(me,"LI",{});var oNe=s(YE);wTe=n(oNe,"STRONG",{});var YLt=s(wTe);EAr=r(YLt,"albert"),YLt.forEach(t),CAr=r(oNe," \u2014 "),PJ=n(oNe,"A",{href:!0});var KLt=s(PJ);wAr=r(KLt,"TFAlbertForTokenClassification"),KLt.forEach(t),AAr=r(oNe," (ALBERT model)"),oNe.forEach(t),LAr=i(me),KE=n(me,"LI",{});var rNe=s(KE);ATe=n(rNe,"STRONG",{});var ZLt=s(ATe);yAr=r(ZLt,"bert"),ZLt.forEach(t),xAr=r(rNe," \u2014 "),BJ=n(rNe,"A",{href:!0});var eyt=s(BJ);$Ar=r(eyt,"TFBertForTokenClassification"),eyt.forEach(t),kAr=r(rNe," (BERT model)"),rNe.forEach(t),SAr=i(me),ZE=n(me,"LI",{});var tNe=s(ZE);LTe=n(tNe,"STRONG",{});var oyt=s(LTe);RAr=r(oyt,"camembert"),oyt.forEach(t),PAr=r(tNe," \u2014 "),IJ=n(tNe,"A",{href:!0});var ryt=s(IJ);BAr=r(ryt,"TFCamembertForTokenClassification"),ryt.forEach(t),IAr=r(tNe," (CamemBERT model)"),tNe.forEach(t),NAr=i(me),eC=n(me,"LI",{});var aNe=s(eC);yTe=n(aNe,"STRONG",{});var tyt=s(yTe);qAr=r(tyt,"convbert"),tyt.forEach(t),jAr=r(aNe," \u2014 "),NJ=n(aNe,"A",{href:!0});var ayt=s(NJ);DAr=r(ayt,"TFConvBertForTokenClassification"),ayt.forEach(t),GAr=r(aNe," (ConvBERT model)"),aNe.forEach(t),OAr=i(me),oC=n(me,"LI",{});var nNe=s(oC);xTe=n(nNe,"STRONG",{});var nyt=s(xTe);VAr=r(nyt,"deberta"),nyt.forEach(t),XAr=r(nNe," \u2014 "),qJ=n(nNe,"A",{href:!0});var syt=s(qJ);zAr=r(syt,"TFDebertaForTokenClassification"),syt.forEach(t),WAr=r(nNe," (DeBERTa model)"),nNe.forEach(t),QAr=i(me),rC=n(me,"LI",{});var sNe=s(rC);$Te=n(sNe,"STRONG",{});var lyt=s($Te);HAr=r(lyt,"deberta-v2"),lyt.forEach(t),UAr=r(sNe," \u2014 "),jJ=n(sNe,"A",{href:!0});var iyt=s(jJ);JAr=r(iyt,"TFDebertaV2ForTokenClassification"),iyt.forEach(t),YAr=r(sNe," (DeBERTa-v2 model)"),sNe.forEach(t),KAr=i(me),tC=n(me,"LI",{});var lNe=s(tC);kTe=n(lNe,"STRONG",{});var dyt=s(kTe);ZAr=r(dyt,"distilbert"),dyt.forEach(t),eLr=r(lNe," \u2014 "),DJ=n(lNe,"A",{href:!0});var cyt=s(DJ);oLr=r(cyt,"TFDistilBertForTokenClassification"),cyt.forEach(t),rLr=r(lNe," (DistilBERT model)"),lNe.forEach(t),tLr=i(me),aC=n(me,"LI",{});var iNe=s(aC);STe=n(iNe,"STRONG",{});var fyt=s(STe);aLr=r(fyt,"electra"),fyt.forEach(t),nLr=r(iNe," \u2014 "),GJ=n(iNe,"A",{href:!0});var myt=s(GJ);sLr=r(myt,"TFElectraForTokenClassification"),myt.forEach(t),lLr=r(iNe," (ELECTRA model)"),iNe.forEach(t),iLr=i(me),nC=n(me,"LI",{});var dNe=s(nC);RTe=n(dNe,"STRONG",{});var gyt=s(RTe);dLr=r(gyt,"flaubert"),gyt.forEach(t),cLr=r(dNe," \u2014 "),OJ=n(dNe,"A",{href:!0});var hyt=s(OJ);fLr=r(hyt,"TFFlaubertForTokenClassification"),hyt.forEach(t),mLr=r(dNe," (FlauBERT model)"),dNe.forEach(t),gLr=i(me),sC=n(me,"LI",{});var cNe=s(sC);PTe=n(cNe,"STRONG",{});var pyt=s(PTe);hLr=r(pyt,"funnel"),pyt.forEach(t),pLr=r(cNe," \u2014 "),VJ=n(cNe,"A",{href:!0});var _yt=s(VJ);_Lr=r(_yt,"TFFunnelForTokenClassification"),_yt.forEach(t),uLr=r(cNe," (Funnel Transformer model)"),cNe.forEach(t),bLr=i(me),lC=n(me,"LI",{});var fNe=s(lC);BTe=n(fNe,"STRONG",{});var uyt=s(BTe);vLr=r(uyt,"layoutlm"),uyt.forEach(t),FLr=r(fNe," \u2014 "),XJ=n(fNe,"A",{href:!0});var byt=s(XJ);TLr=r(byt,"TFLayoutLMForTokenClassification"),byt.forEach(t),MLr=r(fNe," (LayoutLM model)"),fNe.forEach(t),ELr=i(me),iC=n(me,"LI",{});var mNe=s(iC);ITe=n(mNe,"STRONG",{});var vyt=s(ITe);CLr=r(vyt,"longformer"),vyt.forEach(t),wLr=r(mNe," \u2014 "),zJ=n(mNe,"A",{href:!0});var Fyt=s(zJ);ALr=r(Fyt,"TFLongformerForTokenClassification"),Fyt.forEach(t),LLr=r(mNe," (Longformer model)"),mNe.forEach(t),yLr=i(me),dC=n(me,"LI",{});var gNe=s(dC);NTe=n(gNe,"STRONG",{});var Tyt=s(NTe);xLr=r(Tyt,"mobilebert"),Tyt.forEach(t),$Lr=r(gNe," \u2014 "),WJ=n(gNe,"A",{href:!0});var Myt=s(WJ);kLr=r(Myt,"TFMobileBertForTokenClassification"),Myt.forEach(t),SLr=r(gNe," (MobileBERT model)"),gNe.forEach(t),RLr=i(me),cC=n(me,"LI",{});var hNe=s(cC);qTe=n(hNe,"STRONG",{});var Eyt=s(qTe);PLr=r(Eyt,"mpnet"),Eyt.forEach(t),BLr=r(hNe," \u2014 "),QJ=n(hNe,"A",{href:!0});var Cyt=s(QJ);ILr=r(Cyt,"TFMPNetForTokenClassification"),Cyt.forEach(t),NLr=r(hNe," (MPNet model)"),hNe.forEach(t),qLr=i(me),fC=n(me,"LI",{});var pNe=s(fC);jTe=n(pNe,"STRONG",{});var wyt=s(jTe);jLr=r(wyt,"rembert"),wyt.forEach(t),DLr=r(pNe," \u2014 "),HJ=n(pNe,"A",{href:!0});var Ayt=s(HJ);GLr=r(Ayt,"TFRemBertForTokenClassification"),Ayt.forEach(t),OLr=r(pNe," (RemBERT model)"),pNe.forEach(t),VLr=i(me),mC=n(me,"LI",{});var _Ne=s(mC);DTe=n(_Ne,"STRONG",{});var Lyt=s(DTe);XLr=r(Lyt,"roberta"),Lyt.forEach(t),zLr=r(_Ne," \u2014 "),UJ=n(_Ne,"A",{href:!0});var yyt=s(UJ);WLr=r(yyt,"TFRobertaForTokenClassification"),yyt.forEach(t),QLr=r(_Ne," (RoBERTa model)"),_Ne.forEach(t),HLr=i(me),gC=n(me,"LI",{});var uNe=s(gC);GTe=n(uNe,"STRONG",{});var xyt=s(GTe);ULr=r(xyt,"roformer"),xyt.forEach(t),JLr=r(uNe," \u2014 "),JJ=n(uNe,"A",{href:!0});var $yt=s(JJ);YLr=r($yt,"TFRoFormerForTokenClassification"),$yt.forEach(t),KLr=r(uNe," (RoFormer model)"),uNe.forEach(t),ZLr=i(me),hC=n(me,"LI",{});var bNe=s(hC);OTe=n(bNe,"STRONG",{});var kyt=s(OTe);eyr=r(kyt,"xlm"),kyt.forEach(t),oyr=r(bNe," \u2014 "),YJ=n(bNe,"A",{href:!0});var Syt=s(YJ);ryr=r(Syt,"TFXLMForTokenClassification"),Syt.forEach(t),tyr=r(bNe," (XLM model)"),bNe.forEach(t),ayr=i(me),pC=n(me,"LI",{});var vNe=s(pC);VTe=n(vNe,"STRONG",{});var Ryt=s(VTe);nyr=r(Ryt,"xlm-roberta"),Ryt.forEach(t),syr=r(vNe," \u2014 "),KJ=n(vNe,"A",{href:!0});var Pyt=s(KJ);lyr=r(Pyt,"TFXLMRobertaForTokenClassification"),Pyt.forEach(t),iyr=r(vNe," (XLM-RoBERTa model)"),vNe.forEach(t),dyr=i(me),_C=n(me,"LI",{});var FNe=s(_C);XTe=n(FNe,"STRONG",{});var Byt=s(XTe);cyr=r(Byt,"xlnet"),Byt.forEach(t),fyr=r(FNe," \u2014 "),ZJ=n(FNe,"A",{href:!0});var Iyt=s(ZJ);myr=r(Iyt,"TFXLNetForTokenClassification"),Iyt.forEach(t),gyr=r(FNe," (XLNet model)"),FNe.forEach(t),me.forEach(t),hyr=i(Il),T(uC.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),pGe=i(f),Mc=n(f,"H2",{class:!0});var MVe=s(Mc);bC=n(MVe,"A",{id:!0,class:!0,href:!0});var Nyt=s(bC);zTe=n(Nyt,"SPAN",{});var qyt=s(zTe);T(P9.$$.fragment,qyt),qyt.forEach(t),Nyt.forEach(t),pyr=i(MVe),WTe=n(MVe,"SPAN",{});var jyt=s(WTe);_yr=r(jyt,"TFAutoModelForQuestionAnswering"),jyt.forEach(t),MVe.forEach(t),_Ge=i(f),ir=n(f,"DIV",{class:!0});var Nl=s(ir);T(B9.$$.fragment,Nl),uyr=i(Nl),Ec=n(Nl,"P",{});var yoe=s(Ec);byr=r(yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eY=n(yoe,"A",{href:!0});var Dyt=s(eY);vyr=r(Dyt,"from_pretrained()"),Dyt.forEach(t),Fyr=r(yoe," class method or the "),oY=n(yoe,"A",{href:!0});var Gyt=s(oY);Tyr=r(Gyt,"from_config()"),Gyt.forEach(t),Myr=r(yoe,` class
method.`),yoe.forEach(t),Eyr=i(Nl),I9=n(Nl,"P",{});var EVe=s(I9);Cyr=r(EVe,"This class cannot be instantiated directly using "),QTe=n(EVe,"CODE",{});var Oyt=s(QTe);wyr=r(Oyt,"__init__()"),Oyt.forEach(t),Ayr=r(EVe," (throws an error)."),EVe.forEach(t),Lyr=i(Nl),qt=n(Nl,"DIV",{class:!0});var uA=s(qt);T(N9.$$.fragment,uA),yyr=i(uA),HTe=n(uA,"P",{});var Vyt=s(HTe);xyr=r(Vyt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Vyt.forEach(t),$yr=i(uA),Cc=n(uA,"P",{});var xoe=s(Cc);kyr=r(xoe,`Note:
Loading a model from its configuration file does `),UTe=n(xoe,"STRONG",{});var Xyt=s(UTe);Syr=r(Xyt,"not"),Xyt.forEach(t),Ryr=r(xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=n(xoe,"A",{href:!0});var zyt=s(rY);Pyr=r(zyt,"from_pretrained()"),zyt.forEach(t),Byr=r(xoe," to load the model weights."),xoe.forEach(t),Iyr=i(uA),T(vC.$$.fragment,uA),uA.forEach(t),Nyr=i(Nl),Ir=n(Nl,"DIV",{class:!0});var ql=s(Ir);T(q9.$$.fragment,ql),qyr=i(ql),JTe=n(ql,"P",{});var Wyt=s(JTe);jyr=r(Wyt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Wyt.forEach(t),Dyr=i(ql),fn=n(ql,"P",{});var bA=s(fn);Gyr=r(bA,"The model class to instantiate is selected based on the "),YTe=n(bA,"CODE",{});var Qyt=s(YTe);Oyr=r(Qyt,"model_type"),Qyt.forEach(t),Vyr=r(bA,` property of the config object (either
passed as an argument or loaded from `),KTe=n(bA,"CODE",{});var Hyt=s(KTe);Xyr=r(Hyt,"pretrained_model_name_or_path"),Hyt.forEach(t),zyr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=n(bA,"CODE",{});var Uyt=s(ZTe);Wyr=r(Uyt,"pretrained_model_name_or_path"),Uyt.forEach(t),Qyr=r(bA,":"),bA.forEach(t),Hyr=i(ql),ce=n(ql,"UL",{});var ge=s(ce);FC=n(ge,"LI",{});var TNe=s(FC);e7e=n(TNe,"STRONG",{});var Jyt=s(e7e);Uyr=r(Jyt,"albert"),Jyt.forEach(t),Jyr=r(TNe," \u2014 "),tY=n(TNe,"A",{href:!0});var Yyt=s(tY);Yyr=r(Yyt,"TFAlbertForQuestionAnswering"),Yyt.forEach(t),Kyr=r(TNe," (ALBERT model)"),TNe.forEach(t),Zyr=i(ge),TC=n(ge,"LI",{});var MNe=s(TC);o7e=n(MNe,"STRONG",{});var Kyt=s(o7e);e8r=r(Kyt,"bert"),Kyt.forEach(t),o8r=r(MNe," \u2014 "),aY=n(MNe,"A",{href:!0});var Zyt=s(aY);r8r=r(Zyt,"TFBertForQuestionAnswering"),Zyt.forEach(t),t8r=r(MNe," (BERT model)"),MNe.forEach(t),a8r=i(ge),MC=n(ge,"LI",{});var ENe=s(MC);r7e=n(ENe,"STRONG",{});var e8t=s(r7e);n8r=r(e8t,"camembert"),e8t.forEach(t),s8r=r(ENe," \u2014 "),nY=n(ENe,"A",{href:!0});var o8t=s(nY);l8r=r(o8t,"TFCamembertForQuestionAnswering"),o8t.forEach(t),i8r=r(ENe," (CamemBERT model)"),ENe.forEach(t),d8r=i(ge),EC=n(ge,"LI",{});var CNe=s(EC);t7e=n(CNe,"STRONG",{});var r8t=s(t7e);c8r=r(r8t,"convbert"),r8t.forEach(t),f8r=r(CNe," \u2014 "),sY=n(CNe,"A",{href:!0});var t8t=s(sY);m8r=r(t8t,"TFConvBertForQuestionAnswering"),t8t.forEach(t),g8r=r(CNe," (ConvBERT model)"),CNe.forEach(t),h8r=i(ge),CC=n(ge,"LI",{});var wNe=s(CC);a7e=n(wNe,"STRONG",{});var a8t=s(a7e);p8r=r(a8t,"deberta"),a8t.forEach(t),_8r=r(wNe," \u2014 "),lY=n(wNe,"A",{href:!0});var n8t=s(lY);u8r=r(n8t,"TFDebertaForQuestionAnswering"),n8t.forEach(t),b8r=r(wNe," (DeBERTa model)"),wNe.forEach(t),v8r=i(ge),wC=n(ge,"LI",{});var ANe=s(wC);n7e=n(ANe,"STRONG",{});var s8t=s(n7e);F8r=r(s8t,"deberta-v2"),s8t.forEach(t),T8r=r(ANe," \u2014 "),iY=n(ANe,"A",{href:!0});var l8t=s(iY);M8r=r(l8t,"TFDebertaV2ForQuestionAnswering"),l8t.forEach(t),E8r=r(ANe," (DeBERTa-v2 model)"),ANe.forEach(t),C8r=i(ge),AC=n(ge,"LI",{});var LNe=s(AC);s7e=n(LNe,"STRONG",{});var i8t=s(s7e);w8r=r(i8t,"distilbert"),i8t.forEach(t),A8r=r(LNe," \u2014 "),dY=n(LNe,"A",{href:!0});var d8t=s(dY);L8r=r(d8t,"TFDistilBertForQuestionAnswering"),d8t.forEach(t),y8r=r(LNe," (DistilBERT model)"),LNe.forEach(t),x8r=i(ge),LC=n(ge,"LI",{});var yNe=s(LC);l7e=n(yNe,"STRONG",{});var c8t=s(l7e);$8r=r(c8t,"electra"),c8t.forEach(t),k8r=r(yNe," \u2014 "),cY=n(yNe,"A",{href:!0});var f8t=s(cY);S8r=r(f8t,"TFElectraForQuestionAnswering"),f8t.forEach(t),R8r=r(yNe," (ELECTRA model)"),yNe.forEach(t),P8r=i(ge),yC=n(ge,"LI",{});var xNe=s(yC);i7e=n(xNe,"STRONG",{});var m8t=s(i7e);B8r=r(m8t,"flaubert"),m8t.forEach(t),I8r=r(xNe," \u2014 "),fY=n(xNe,"A",{href:!0});var g8t=s(fY);N8r=r(g8t,"TFFlaubertForQuestionAnsweringSimple"),g8t.forEach(t),q8r=r(xNe," (FlauBERT model)"),xNe.forEach(t),j8r=i(ge),xC=n(ge,"LI",{});var $Ne=s(xC);d7e=n($Ne,"STRONG",{});var h8t=s(d7e);D8r=r(h8t,"funnel"),h8t.forEach(t),G8r=r($Ne," \u2014 "),mY=n($Ne,"A",{href:!0});var p8t=s(mY);O8r=r(p8t,"TFFunnelForQuestionAnswering"),p8t.forEach(t),V8r=r($Ne," (Funnel Transformer model)"),$Ne.forEach(t),X8r=i(ge),$C=n(ge,"LI",{});var kNe=s($C);c7e=n(kNe,"STRONG",{});var _8t=s(c7e);z8r=r(_8t,"gptj"),_8t.forEach(t),W8r=r(kNe," \u2014 "),gY=n(kNe,"A",{href:!0});var u8t=s(gY);Q8r=r(u8t,"TFGPTJForQuestionAnswering"),u8t.forEach(t),H8r=r(kNe," (GPT-J model)"),kNe.forEach(t),U8r=i(ge),kC=n(ge,"LI",{});var SNe=s(kC);f7e=n(SNe,"STRONG",{});var b8t=s(f7e);J8r=r(b8t,"longformer"),b8t.forEach(t),Y8r=r(SNe," \u2014 "),hY=n(SNe,"A",{href:!0});var v8t=s(hY);K8r=r(v8t,"TFLongformerForQuestionAnswering"),v8t.forEach(t),Z8r=r(SNe," (Longformer model)"),SNe.forEach(t),e9r=i(ge),SC=n(ge,"LI",{});var RNe=s(SC);m7e=n(RNe,"STRONG",{});var F8t=s(m7e);o9r=r(F8t,"mobilebert"),F8t.forEach(t),r9r=r(RNe," \u2014 "),pY=n(RNe,"A",{href:!0});var T8t=s(pY);t9r=r(T8t,"TFMobileBertForQuestionAnswering"),T8t.forEach(t),a9r=r(RNe," (MobileBERT model)"),RNe.forEach(t),n9r=i(ge),RC=n(ge,"LI",{});var PNe=s(RC);g7e=n(PNe,"STRONG",{});var M8t=s(g7e);s9r=r(M8t,"mpnet"),M8t.forEach(t),l9r=r(PNe," \u2014 "),_Y=n(PNe,"A",{href:!0});var E8t=s(_Y);i9r=r(E8t,"TFMPNetForQuestionAnswering"),E8t.forEach(t),d9r=r(PNe," (MPNet model)"),PNe.forEach(t),c9r=i(ge),PC=n(ge,"LI",{});var BNe=s(PC);h7e=n(BNe,"STRONG",{});var C8t=s(h7e);f9r=r(C8t,"rembert"),C8t.forEach(t),m9r=r(BNe," \u2014 "),uY=n(BNe,"A",{href:!0});var w8t=s(uY);g9r=r(w8t,"TFRemBertForQuestionAnswering"),w8t.forEach(t),h9r=r(BNe," (RemBERT model)"),BNe.forEach(t),p9r=i(ge),BC=n(ge,"LI",{});var INe=s(BC);p7e=n(INe,"STRONG",{});var A8t=s(p7e);_9r=r(A8t,"roberta"),A8t.forEach(t),u9r=r(INe," \u2014 "),bY=n(INe,"A",{href:!0});var L8t=s(bY);b9r=r(L8t,"TFRobertaForQuestionAnswering"),L8t.forEach(t),v9r=r(INe," (RoBERTa model)"),INe.forEach(t),F9r=i(ge),IC=n(ge,"LI",{});var NNe=s(IC);_7e=n(NNe,"STRONG",{});var y8t=s(_7e);T9r=r(y8t,"roformer"),y8t.forEach(t),M9r=r(NNe," \u2014 "),vY=n(NNe,"A",{href:!0});var x8t=s(vY);E9r=r(x8t,"TFRoFormerForQuestionAnswering"),x8t.forEach(t),C9r=r(NNe," (RoFormer model)"),NNe.forEach(t),w9r=i(ge),NC=n(ge,"LI",{});var qNe=s(NC);u7e=n(qNe,"STRONG",{});var $8t=s(u7e);A9r=r($8t,"xlm"),$8t.forEach(t),L9r=r(qNe," \u2014 "),FY=n(qNe,"A",{href:!0});var k8t=s(FY);y9r=r(k8t,"TFXLMForQuestionAnsweringSimple"),k8t.forEach(t),x9r=r(qNe," (XLM model)"),qNe.forEach(t),$9r=i(ge),qC=n(ge,"LI",{});var jNe=s(qC);b7e=n(jNe,"STRONG",{});var S8t=s(b7e);k9r=r(S8t,"xlm-roberta"),S8t.forEach(t),S9r=r(jNe," \u2014 "),TY=n(jNe,"A",{href:!0});var R8t=s(TY);R9r=r(R8t,"TFXLMRobertaForQuestionAnswering"),R8t.forEach(t),P9r=r(jNe," (XLM-RoBERTa model)"),jNe.forEach(t),B9r=i(ge),jC=n(ge,"LI",{});var DNe=s(jC);v7e=n(DNe,"STRONG",{});var P8t=s(v7e);I9r=r(P8t,"xlnet"),P8t.forEach(t),N9r=r(DNe," \u2014 "),MY=n(DNe,"A",{href:!0});var B8t=s(MY);q9r=r(B8t,"TFXLNetForQuestionAnsweringSimple"),B8t.forEach(t),j9r=r(DNe," (XLNet model)"),DNe.forEach(t),ge.forEach(t),D9r=i(ql),T(DC.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),uGe=i(f),wc=n(f,"H2",{class:!0});var CVe=s(wc);GC=n(CVe,"A",{id:!0,class:!0,href:!0});var I8t=s(GC);F7e=n(I8t,"SPAN",{});var N8t=s(F7e);T(j9.$$.fragment,N8t),N8t.forEach(t),I8t.forEach(t),G9r=i(CVe),T7e=n(CVe,"SPAN",{});var q8t=s(T7e);O9r=r(q8t,"TFAutoModelForVision2Seq"),q8t.forEach(t),CVe.forEach(t),bGe=i(f),dr=n(f,"DIV",{class:!0});var jl=s(dr);T(D9.$$.fragment,jl),V9r=i(jl),Ac=n(jl,"P",{});var $oe=s(Ac);X9r=r($oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),EY=n($oe,"A",{href:!0});var j8t=s(EY);z9r=r(j8t,"from_pretrained()"),j8t.forEach(t),W9r=r($oe," class method or the "),CY=n($oe,"A",{href:!0});var D8t=s(CY);Q9r=r(D8t,"from_config()"),D8t.forEach(t),H9r=r($oe,` class
method.`),$oe.forEach(t),U9r=i(jl),G9=n(jl,"P",{});var wVe=s(G9);J9r=r(wVe,"This class cannot be instantiated directly using "),M7e=n(wVe,"CODE",{});var G8t=s(M7e);Y9r=r(G8t,"__init__()"),G8t.forEach(t),K9r=r(wVe," (throws an error)."),wVe.forEach(t),Z9r=i(jl),jt=n(jl,"DIV",{class:!0});var vA=s(jt);T(O9.$$.fragment,vA),exr=i(vA),E7e=n(vA,"P",{});var O8t=s(E7e);oxr=r(O8t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),O8t.forEach(t),rxr=i(vA),Lc=n(vA,"P",{});var koe=s(Lc);txr=r(koe,`Note:
Loading a model from its configuration file does `),C7e=n(koe,"STRONG",{});var V8t=s(C7e);axr=r(V8t,"not"),V8t.forEach(t),nxr=r(koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(koe,"A",{href:!0});var X8t=s(wY);sxr=r(X8t,"from_pretrained()"),X8t.forEach(t),lxr=r(koe," to load the model weights."),koe.forEach(t),ixr=i(vA),T(OC.$$.fragment,vA),vA.forEach(t),dxr=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(V9.$$.fragment,Dl),cxr=i(Dl),w7e=n(Dl,"P",{});var z8t=s(w7e);fxr=r(z8t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),z8t.forEach(t),mxr=i(Dl),mn=n(Dl,"P",{});var FA=s(mn);gxr=r(FA,"The model class to instantiate is selected based on the "),A7e=n(FA,"CODE",{});var W8t=s(A7e);hxr=r(W8t,"model_type"),W8t.forEach(t),pxr=r(FA,` property of the config object (either
passed as an argument or loaded from `),L7e=n(FA,"CODE",{});var Q8t=s(L7e);_xr=r(Q8t,"pretrained_model_name_or_path"),Q8t.forEach(t),uxr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=n(FA,"CODE",{});var H8t=s(y7e);bxr=r(H8t,"pretrained_model_name_or_path"),H8t.forEach(t),vxr=r(FA,":"),FA.forEach(t),Fxr=i(Dl),x7e=n(Dl,"UL",{});var U8t=s(x7e);VC=n(U8t,"LI",{});var GNe=s(VC);$7e=n(GNe,"STRONG",{});var J8t=s($7e);Txr=r(J8t,"vision-encoder-decoder"),J8t.forEach(t),Mxr=r(GNe," \u2014 "),AY=n(GNe,"A",{href:!0});var Y8t=s(AY);Exr=r(Y8t,"TFVisionEncoderDecoderModel"),Y8t.forEach(t),Cxr=r(GNe," (Vision Encoder decoder model)"),GNe.forEach(t),U8t.forEach(t),wxr=i(Dl),T(XC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),vGe=i(f),yc=n(f,"H2",{class:!0});var AVe=s(yc);zC=n(AVe,"A",{id:!0,class:!0,href:!0});var K8t=s(zC);k7e=n(K8t,"SPAN",{});var Z8t=s(k7e);T(X9.$$.fragment,Z8t),Z8t.forEach(t),K8t.forEach(t),Axr=i(AVe),S7e=n(AVe,"SPAN",{});var e9t=s(S7e);Lxr=r(e9t,"TFAutoModelForSpeechSeq2Seq"),e9t.forEach(t),AVe.forEach(t),FGe=i(f),cr=n(f,"DIV",{class:!0});var Gl=s(cr);T(z9.$$.fragment,Gl),yxr=i(Gl),xc=n(Gl,"P",{});var Soe=s(xc);xxr=r(Soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),LY=n(Soe,"A",{href:!0});var o9t=s(LY);$xr=r(o9t,"from_pretrained()"),o9t.forEach(t),kxr=r(Soe," class method or the "),yY=n(Soe,"A",{href:!0});var r9t=s(yY);Sxr=r(r9t,"from_config()"),r9t.forEach(t),Rxr=r(Soe,` class
method.`),Soe.forEach(t),Pxr=i(Gl),W9=n(Gl,"P",{});var LVe=s(W9);Bxr=r(LVe,"This class cannot be instantiated directly using "),R7e=n(LVe,"CODE",{});var t9t=s(R7e);Ixr=r(t9t,"__init__()"),t9t.forEach(t),Nxr=r(LVe," (throws an error)."),LVe.forEach(t),qxr=i(Gl),Dt=n(Gl,"DIV",{class:!0});var TA=s(Dt);T(Q9.$$.fragment,TA),jxr=i(TA),P7e=n(TA,"P",{});var a9t=s(P7e);Dxr=r(a9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),a9t.forEach(t),Gxr=i(TA),$c=n(TA,"P",{});var Roe=s($c);Oxr=r(Roe,`Note:
Loading a model from its configuration file does `),B7e=n(Roe,"STRONG",{});var n9t=s(B7e);Vxr=r(n9t,"not"),n9t.forEach(t),Xxr=r(Roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=n(Roe,"A",{href:!0});var s9t=s(xY);zxr=r(s9t,"from_pretrained()"),s9t.forEach(t),Wxr=r(Roe," to load the model weights."),Roe.forEach(t),Qxr=i(TA),T(WC.$$.fragment,TA),TA.forEach(t),Hxr=i(Gl),qr=n(Gl,"DIV",{class:!0});var Ol=s(qr);T(H9.$$.fragment,Ol),Uxr=i(Ol),I7e=n(Ol,"P",{});var l9t=s(I7e);Jxr=r(l9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),l9t.forEach(t),Yxr=i(Ol),gn=n(Ol,"P",{});var MA=s(gn);Kxr=r(MA,"The model class to instantiate is selected based on the "),N7e=n(MA,"CODE",{});var i9t=s(N7e);Zxr=r(i9t,"model_type"),i9t.forEach(t),e$r=r(MA,` property of the config object (either
passed as an argument or loaded from `),q7e=n(MA,"CODE",{});var d9t=s(q7e);o$r=r(d9t,"pretrained_model_name_or_path"),d9t.forEach(t),r$r=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=n(MA,"CODE",{});var c9t=s(j7e);t$r=r(c9t,"pretrained_model_name_or_path"),c9t.forEach(t),a$r=r(MA,":"),MA.forEach(t),n$r=i(Ol),D7e=n(Ol,"UL",{});var f9t=s(D7e);QC=n(f9t,"LI",{});var ONe=s(QC);G7e=n(ONe,"STRONG",{});var m9t=s(G7e);s$r=r(m9t,"speech_to_text"),m9t.forEach(t),l$r=r(ONe," \u2014 "),$Y=n(ONe,"A",{href:!0});var g9t=s($Y);i$r=r(g9t,"TFSpeech2TextForConditionalGeneration"),g9t.forEach(t),d$r=r(ONe," (Speech2Text model)"),ONe.forEach(t),f9t.forEach(t),c$r=i(Ol),T(HC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),TGe=i(f),kc=n(f,"H2",{class:!0});var yVe=s(kc);UC=n(yVe,"A",{id:!0,class:!0,href:!0});var h9t=s(UC);O7e=n(h9t,"SPAN",{});var p9t=s(O7e);T(U9.$$.fragment,p9t),p9t.forEach(t),h9t.forEach(t),f$r=i(yVe),V7e=n(yVe,"SPAN",{});var _9t=s(V7e);m$r=r(_9t,"FlaxAutoModel"),_9t.forEach(t),yVe.forEach(t),MGe=i(f),fr=n(f,"DIV",{class:!0});var Vl=s(fr);T(J9.$$.fragment,Vl),g$r=i(Vl),Sc=n(Vl,"P",{});var Poe=s(Sc);h$r=r(Poe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kY=n(Poe,"A",{href:!0});var u9t=s(kY);p$r=r(u9t,"from_pretrained()"),u9t.forEach(t),_$r=r(Poe," class method or the "),SY=n(Poe,"A",{href:!0});var b9t=s(SY);u$r=r(b9t,"from_config()"),b9t.forEach(t),b$r=r(Poe,` class
method.`),Poe.forEach(t),v$r=i(Vl),Y9=n(Vl,"P",{});var xVe=s(Y9);F$r=r(xVe,"This class cannot be instantiated directly using "),X7e=n(xVe,"CODE",{});var v9t=s(X7e);T$r=r(v9t,"__init__()"),v9t.forEach(t),M$r=r(xVe," (throws an error)."),xVe.forEach(t),E$r=i(Vl),Gt=n(Vl,"DIV",{class:!0});var EA=s(Gt);T(K9.$$.fragment,EA),C$r=i(EA),z7e=n(EA,"P",{});var F9t=s(z7e);w$r=r(F9t,"Instantiates one of the base model classes of the library from a configuration."),F9t.forEach(t),A$r=i(EA),Rc=n(EA,"P",{});var Boe=s(Rc);L$r=r(Boe,`Note:
Loading a model from its configuration file does `),W7e=n(Boe,"STRONG",{});var T9t=s(W7e);y$r=r(T9t,"not"),T9t.forEach(t),x$r=r(Boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(Boe,"A",{href:!0});var M9t=s(RY);$$r=r(M9t,"from_pretrained()"),M9t.forEach(t),k$r=r(Boe," to load the model weights."),Boe.forEach(t),S$r=i(EA),T(JC.$$.fragment,EA),EA.forEach(t),R$r=i(Vl),jr=n(Vl,"DIV",{class:!0});var Xl=s(jr);T(Z9.$$.fragment,Xl),P$r=i(Xl),Q7e=n(Xl,"P",{});var E9t=s(Q7e);B$r=r(E9t,"Instantiate one of the base model classes of the library from a pretrained model."),E9t.forEach(t),I$r=i(Xl),hn=n(Xl,"P",{});var CA=s(hn);N$r=r(CA,"The model class to instantiate is selected based on the "),H7e=n(CA,"CODE",{});var C9t=s(H7e);q$r=r(C9t,"model_type"),C9t.forEach(t),j$r=r(CA,` property of the config object (either
passed as an argument or loaded from `),U7e=n(CA,"CODE",{});var w9t=s(U7e);D$r=r(w9t,"pretrained_model_name_or_path"),w9t.forEach(t),G$r=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J7e=n(CA,"CODE",{});var A9t=s(J7e);O$r=r(A9t,"pretrained_model_name_or_path"),A9t.forEach(t),V$r=r(CA,":"),CA.forEach(t),X$r=i(Xl),re=n(Xl,"UL",{});var ne=s(re);YC=n(ne,"LI",{});var VNe=s(YC);Y7e=n(VNe,"STRONG",{});var L9t=s(Y7e);z$r=r(L9t,"albert"),L9t.forEach(t),W$r=r(VNe," \u2014 "),PY=n(VNe,"A",{href:!0});var y9t=s(PY);Q$r=r(y9t,"FlaxAlbertModel"),y9t.forEach(t),H$r=r(VNe," (ALBERT model)"),VNe.forEach(t),U$r=i(ne),KC=n(ne,"LI",{});var XNe=s(KC);K7e=n(XNe,"STRONG",{});var x9t=s(K7e);J$r=r(x9t,"bart"),x9t.forEach(t),Y$r=r(XNe," \u2014 "),BY=n(XNe,"A",{href:!0});var $9t=s(BY);K$r=r($9t,"FlaxBartModel"),$9t.forEach(t),Z$r=r(XNe," (BART model)"),XNe.forEach(t),ekr=i(ne),ZC=n(ne,"LI",{});var zNe=s(ZC);Z7e=n(zNe,"STRONG",{});var k9t=s(Z7e);okr=r(k9t,"beit"),k9t.forEach(t),rkr=r(zNe," \u2014 "),IY=n(zNe,"A",{href:!0});var S9t=s(IY);tkr=r(S9t,"FlaxBeitModel"),S9t.forEach(t),akr=r(zNe," (BEiT model)"),zNe.forEach(t),nkr=i(ne),e5=n(ne,"LI",{});var WNe=s(e5);eMe=n(WNe,"STRONG",{});var R9t=s(eMe);skr=r(R9t,"bert"),R9t.forEach(t),lkr=r(WNe," \u2014 "),NY=n(WNe,"A",{href:!0});var P9t=s(NY);ikr=r(P9t,"FlaxBertModel"),P9t.forEach(t),dkr=r(WNe," (BERT model)"),WNe.forEach(t),ckr=i(ne),o5=n(ne,"LI",{});var QNe=s(o5);oMe=n(QNe,"STRONG",{});var B9t=s(oMe);fkr=r(B9t,"big_bird"),B9t.forEach(t),mkr=r(QNe," \u2014 "),qY=n(QNe,"A",{href:!0});var I9t=s(qY);gkr=r(I9t,"FlaxBigBirdModel"),I9t.forEach(t),hkr=r(QNe," (BigBird model)"),QNe.forEach(t),pkr=i(ne),r5=n(ne,"LI",{});var HNe=s(r5);rMe=n(HNe,"STRONG",{});var N9t=s(rMe);_kr=r(N9t,"blenderbot"),N9t.forEach(t),ukr=r(HNe," \u2014 "),jY=n(HNe,"A",{href:!0});var q9t=s(jY);bkr=r(q9t,"FlaxBlenderbotModel"),q9t.forEach(t),vkr=r(HNe," (Blenderbot model)"),HNe.forEach(t),Fkr=i(ne),t5=n(ne,"LI",{});var UNe=s(t5);tMe=n(UNe,"STRONG",{});var j9t=s(tMe);Tkr=r(j9t,"blenderbot-small"),j9t.forEach(t),Mkr=r(UNe," \u2014 "),DY=n(UNe,"A",{href:!0});var D9t=s(DY);Ekr=r(D9t,"FlaxBlenderbotSmallModel"),D9t.forEach(t),Ckr=r(UNe," (BlenderbotSmall model)"),UNe.forEach(t),wkr=i(ne),a5=n(ne,"LI",{});var JNe=s(a5);aMe=n(JNe,"STRONG",{});var G9t=s(aMe);Akr=r(G9t,"clip"),G9t.forEach(t),Lkr=r(JNe," \u2014 "),GY=n(JNe,"A",{href:!0});var O9t=s(GY);ykr=r(O9t,"FlaxCLIPModel"),O9t.forEach(t),xkr=r(JNe," (CLIP model)"),JNe.forEach(t),$kr=i(ne),n5=n(ne,"LI",{});var YNe=s(n5);nMe=n(YNe,"STRONG",{});var V9t=s(nMe);kkr=r(V9t,"distilbert"),V9t.forEach(t),Skr=r(YNe," \u2014 "),OY=n(YNe,"A",{href:!0});var X9t=s(OY);Rkr=r(X9t,"FlaxDistilBertModel"),X9t.forEach(t),Pkr=r(YNe," (DistilBERT model)"),YNe.forEach(t),Bkr=i(ne),s5=n(ne,"LI",{});var KNe=s(s5);sMe=n(KNe,"STRONG",{});var z9t=s(sMe);Ikr=r(z9t,"electra"),z9t.forEach(t),Nkr=r(KNe," \u2014 "),VY=n(KNe,"A",{href:!0});var W9t=s(VY);qkr=r(W9t,"FlaxElectraModel"),W9t.forEach(t),jkr=r(KNe," (ELECTRA model)"),KNe.forEach(t),Dkr=i(ne),l5=n(ne,"LI",{});var ZNe=s(l5);lMe=n(ZNe,"STRONG",{});var Q9t=s(lMe);Gkr=r(Q9t,"gpt2"),Q9t.forEach(t),Okr=r(ZNe," \u2014 "),XY=n(ZNe,"A",{href:!0});var H9t=s(XY);Vkr=r(H9t,"FlaxGPT2Model"),H9t.forEach(t),Xkr=r(ZNe," (OpenAI GPT-2 model)"),ZNe.forEach(t),zkr=i(ne),i5=n(ne,"LI",{});var eqe=s(i5);iMe=n(eqe,"STRONG",{});var U9t=s(iMe);Wkr=r(U9t,"gpt_neo"),U9t.forEach(t),Qkr=r(eqe," \u2014 "),zY=n(eqe,"A",{href:!0});var J9t=s(zY);Hkr=r(J9t,"FlaxGPTNeoModel"),J9t.forEach(t),Ukr=r(eqe," (GPT Neo model)"),eqe.forEach(t),Jkr=i(ne),d5=n(ne,"LI",{});var oqe=s(d5);dMe=n(oqe,"STRONG",{});var Y9t=s(dMe);Ykr=r(Y9t,"gptj"),Y9t.forEach(t),Kkr=r(oqe," \u2014 "),WY=n(oqe,"A",{href:!0});var K9t=s(WY);Zkr=r(K9t,"FlaxGPTJModel"),K9t.forEach(t),eSr=r(oqe," (GPT-J model)"),oqe.forEach(t),oSr=i(ne),c5=n(ne,"LI",{});var rqe=s(c5);cMe=n(rqe,"STRONG",{});var Z9t=s(cMe);rSr=r(Z9t,"marian"),Z9t.forEach(t),tSr=r(rqe," \u2014 "),QY=n(rqe,"A",{href:!0});var ext=s(QY);aSr=r(ext,"FlaxMarianModel"),ext.forEach(t),nSr=r(rqe," (Marian model)"),rqe.forEach(t),sSr=i(ne),f5=n(ne,"LI",{});var tqe=s(f5);fMe=n(tqe,"STRONG",{});var oxt=s(fMe);lSr=r(oxt,"mbart"),oxt.forEach(t),iSr=r(tqe," \u2014 "),HY=n(tqe,"A",{href:!0});var rxt=s(HY);dSr=r(rxt,"FlaxMBartModel"),rxt.forEach(t),cSr=r(tqe," (mBART model)"),tqe.forEach(t),fSr=i(ne),m5=n(ne,"LI",{});var aqe=s(m5);mMe=n(aqe,"STRONG",{});var txt=s(mMe);mSr=r(txt,"mt5"),txt.forEach(t),gSr=r(aqe," \u2014 "),UY=n(aqe,"A",{href:!0});var axt=s(UY);hSr=r(axt,"FlaxMT5Model"),axt.forEach(t),pSr=r(aqe," (MT5 model)"),aqe.forEach(t),_Sr=i(ne),g5=n(ne,"LI",{});var nqe=s(g5);gMe=n(nqe,"STRONG",{});var nxt=s(gMe);uSr=r(nxt,"opt"),nxt.forEach(t),bSr=r(nqe," \u2014 "),JY=n(nqe,"A",{href:!0});var sxt=s(JY);vSr=r(sxt,"FlaxOPTModel"),sxt.forEach(t),FSr=r(nqe," (OPT model)"),nqe.forEach(t),TSr=i(ne),h5=n(ne,"LI",{});var sqe=s(h5);hMe=n(sqe,"STRONG",{});var lxt=s(hMe);MSr=r(lxt,"pegasus"),lxt.forEach(t),ESr=r(sqe," \u2014 "),YY=n(sqe,"A",{href:!0});var ixt=s(YY);CSr=r(ixt,"FlaxPegasusModel"),ixt.forEach(t),wSr=r(sqe," (Pegasus model)"),sqe.forEach(t),ASr=i(ne),p5=n(ne,"LI",{});var lqe=s(p5);pMe=n(lqe,"STRONG",{});var dxt=s(pMe);LSr=r(dxt,"roberta"),dxt.forEach(t),ySr=r(lqe," \u2014 "),KY=n(lqe,"A",{href:!0});var cxt=s(KY);xSr=r(cxt,"FlaxRobertaModel"),cxt.forEach(t),$Sr=r(lqe," (RoBERTa model)"),lqe.forEach(t),kSr=i(ne),_5=n(ne,"LI",{});var iqe=s(_5);_Me=n(iqe,"STRONG",{});var fxt=s(_Me);SSr=r(fxt,"roformer"),fxt.forEach(t),RSr=r(iqe," \u2014 "),ZY=n(iqe,"A",{href:!0});var mxt=s(ZY);PSr=r(mxt,"FlaxRoFormerModel"),mxt.forEach(t),BSr=r(iqe," (RoFormer model)"),iqe.forEach(t),ISr=i(ne),u5=n(ne,"LI",{});var dqe=s(u5);uMe=n(dqe,"STRONG",{});var gxt=s(uMe);NSr=r(gxt,"t5"),gxt.forEach(t),qSr=r(dqe," \u2014 "),eK=n(dqe,"A",{href:!0});var hxt=s(eK);jSr=r(hxt,"FlaxT5Model"),hxt.forEach(t),DSr=r(dqe," (T5 model)"),dqe.forEach(t),GSr=i(ne),b5=n(ne,"LI",{});var cqe=s(b5);bMe=n(cqe,"STRONG",{});var pxt=s(bMe);OSr=r(pxt,"vision-text-dual-encoder"),pxt.forEach(t),VSr=r(cqe," \u2014 "),oK=n(cqe,"A",{href:!0});var _xt=s(oK);XSr=r(_xt,"FlaxVisionTextDualEncoderModel"),_xt.forEach(t),zSr=r(cqe," (VisionTextDualEncoder model)"),cqe.forEach(t),WSr=i(ne),v5=n(ne,"LI",{});var fqe=s(v5);vMe=n(fqe,"STRONG",{});var uxt=s(vMe);QSr=r(uxt,"vit"),uxt.forEach(t),HSr=r(fqe," \u2014 "),rK=n(fqe,"A",{href:!0});var bxt=s(rK);USr=r(bxt,"FlaxViTModel"),bxt.forEach(t),JSr=r(fqe," (ViT model)"),fqe.forEach(t),YSr=i(ne),F5=n(ne,"LI",{});var mqe=s(F5);FMe=n(mqe,"STRONG",{});var vxt=s(FMe);KSr=r(vxt,"wav2vec2"),vxt.forEach(t),ZSr=r(mqe," \u2014 "),tK=n(mqe,"A",{href:!0});var Fxt=s(tK);eRr=r(Fxt,"FlaxWav2Vec2Model"),Fxt.forEach(t),oRr=r(mqe," (Wav2Vec2 model)"),mqe.forEach(t),rRr=i(ne),T5=n(ne,"LI",{});var gqe=s(T5);TMe=n(gqe,"STRONG",{});var Txt=s(TMe);tRr=r(Txt,"xglm"),Txt.forEach(t),aRr=r(gqe," \u2014 "),aK=n(gqe,"A",{href:!0});var Mxt=s(aK);nRr=r(Mxt,"FlaxXGLMModel"),Mxt.forEach(t),sRr=r(gqe," (XGLM model)"),gqe.forEach(t),lRr=i(ne),M5=n(ne,"LI",{});var hqe=s(M5);MMe=n(hqe,"STRONG",{});var Ext=s(MMe);iRr=r(Ext,"xlm-roberta"),Ext.forEach(t),dRr=r(hqe," \u2014 "),nK=n(hqe,"A",{href:!0});var Cxt=s(nK);cRr=r(Cxt,"FlaxXLMRobertaModel"),Cxt.forEach(t),fRr=r(hqe," (XLM-RoBERTa model)"),hqe.forEach(t),ne.forEach(t),mRr=i(Xl),T(E5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),EGe=i(f),Pc=n(f,"H2",{class:!0});var $Ve=s(Pc);C5=n($Ve,"A",{id:!0,class:!0,href:!0});var wxt=s(C5);EMe=n(wxt,"SPAN",{});var Axt=s(EMe);T(ex.$$.fragment,Axt),Axt.forEach(t),wxt.forEach(t),gRr=i($Ve),CMe=n($Ve,"SPAN",{});var Lxt=s(CMe);hRr=r(Lxt,"FlaxAutoModelForCausalLM"),Lxt.forEach(t),$Ve.forEach(t),CGe=i(f),mr=n(f,"DIV",{class:!0});var zl=s(mr);T(ox.$$.fragment,zl),pRr=i(zl),Bc=n(zl,"P",{});var Ioe=s(Bc);_Rr=r(Ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sK=n(Ioe,"A",{href:!0});var yxt=s(sK);uRr=r(yxt,"from_pretrained()"),yxt.forEach(t),bRr=r(Ioe," class method or the "),lK=n(Ioe,"A",{href:!0});var xxt=s(lK);vRr=r(xxt,"from_config()"),xxt.forEach(t),FRr=r(Ioe,` class
method.`),Ioe.forEach(t),TRr=i(zl),rx=n(zl,"P",{});var kVe=s(rx);MRr=r(kVe,"This class cannot be instantiated directly using "),wMe=n(kVe,"CODE",{});var $xt=s(wMe);ERr=r($xt,"__init__()"),$xt.forEach(t),CRr=r(kVe," (throws an error)."),kVe.forEach(t),wRr=i(zl),Ot=n(zl,"DIV",{class:!0});var wA=s(Ot);T(tx.$$.fragment,wA),ARr=i(wA),AMe=n(wA,"P",{});var kxt=s(AMe);LRr=r(kxt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kxt.forEach(t),yRr=i(wA),Ic=n(wA,"P",{});var Noe=s(Ic);xRr=r(Noe,`Note:
Loading a model from its configuration file does `),LMe=n(Noe,"STRONG",{});var Sxt=s(LMe);$Rr=r(Sxt,"not"),Sxt.forEach(t),kRr=r(Noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=n(Noe,"A",{href:!0});var Rxt=s(iK);SRr=r(Rxt,"from_pretrained()"),Rxt.forEach(t),RRr=r(Noe," to load the model weights."),Noe.forEach(t),PRr=i(wA),T(w5.$$.fragment,wA),wA.forEach(t),BRr=i(zl),Dr=n(zl,"DIV",{class:!0});var Wl=s(Dr);T(ax.$$.fragment,Wl),IRr=i(Wl),yMe=n(Wl,"P",{});var Pxt=s(yMe);NRr=r(Pxt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Pxt.forEach(t),qRr=i(Wl),pn=n(Wl,"P",{});var AA=s(pn);jRr=r(AA,"The model class to instantiate is selected based on the "),xMe=n(AA,"CODE",{});var Bxt=s(xMe);DRr=r(Bxt,"model_type"),Bxt.forEach(t),GRr=r(AA,` property of the config object (either
passed as an argument or loaded from `),$Me=n(AA,"CODE",{});var Ixt=s($Me);ORr=r(Ixt,"pretrained_model_name_or_path"),Ixt.forEach(t),VRr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=n(AA,"CODE",{});var Nxt=s(kMe);XRr=r(Nxt,"pretrained_model_name_or_path"),Nxt.forEach(t),zRr=r(AA,":"),AA.forEach(t),WRr=i(Wl),xe=n(Wl,"UL",{});var Ne=s(xe);A5=n(Ne,"LI",{});var pqe=s(A5);SMe=n(pqe,"STRONG",{});var qxt=s(SMe);QRr=r(qxt,"bart"),qxt.forEach(t),HRr=r(pqe," \u2014 "),dK=n(pqe,"A",{href:!0});var jxt=s(dK);URr=r(jxt,"FlaxBartForCausalLM"),jxt.forEach(t),JRr=r(pqe," (BART model)"),pqe.forEach(t),YRr=i(Ne),L5=n(Ne,"LI",{});var _qe=s(L5);RMe=n(_qe,"STRONG",{});var Dxt=s(RMe);KRr=r(Dxt,"bert"),Dxt.forEach(t),ZRr=r(_qe," \u2014 "),cK=n(_qe,"A",{href:!0});var Gxt=s(cK);ePr=r(Gxt,"FlaxBertForCausalLM"),Gxt.forEach(t),oPr=r(_qe," (BERT model)"),_qe.forEach(t),rPr=i(Ne),y5=n(Ne,"LI",{});var uqe=s(y5);PMe=n(uqe,"STRONG",{});var Oxt=s(PMe);tPr=r(Oxt,"big_bird"),Oxt.forEach(t),aPr=r(uqe," \u2014 "),fK=n(uqe,"A",{href:!0});var Vxt=s(fK);nPr=r(Vxt,"FlaxBigBirdForCausalLM"),Vxt.forEach(t),sPr=r(uqe," (BigBird model)"),uqe.forEach(t),lPr=i(Ne),x5=n(Ne,"LI",{});var bqe=s(x5);BMe=n(bqe,"STRONG",{});var Xxt=s(BMe);iPr=r(Xxt,"electra"),Xxt.forEach(t),dPr=r(bqe," \u2014 "),mK=n(bqe,"A",{href:!0});var zxt=s(mK);cPr=r(zxt,"FlaxElectraForCausalLM"),zxt.forEach(t),fPr=r(bqe," (ELECTRA model)"),bqe.forEach(t),mPr=i(Ne),$5=n(Ne,"LI",{});var vqe=s($5);IMe=n(vqe,"STRONG",{});var Wxt=s(IMe);gPr=r(Wxt,"gpt2"),Wxt.forEach(t),hPr=r(vqe," \u2014 "),gK=n(vqe,"A",{href:!0});var Qxt=s(gK);pPr=r(Qxt,"FlaxGPT2LMHeadModel"),Qxt.forEach(t),_Pr=r(vqe," (OpenAI GPT-2 model)"),vqe.forEach(t),uPr=i(Ne),k5=n(Ne,"LI",{});var Fqe=s(k5);NMe=n(Fqe,"STRONG",{});var Hxt=s(NMe);bPr=r(Hxt,"gpt_neo"),Hxt.forEach(t),vPr=r(Fqe," \u2014 "),hK=n(Fqe,"A",{href:!0});var Uxt=s(hK);FPr=r(Uxt,"FlaxGPTNeoForCausalLM"),Uxt.forEach(t),TPr=r(Fqe," (GPT Neo model)"),Fqe.forEach(t),MPr=i(Ne),S5=n(Ne,"LI",{});var Tqe=s(S5);qMe=n(Tqe,"STRONG",{});var Jxt=s(qMe);EPr=r(Jxt,"gptj"),Jxt.forEach(t),CPr=r(Tqe," \u2014 "),pK=n(Tqe,"A",{href:!0});var Yxt=s(pK);wPr=r(Yxt,"FlaxGPTJForCausalLM"),Yxt.forEach(t),APr=r(Tqe," (GPT-J model)"),Tqe.forEach(t),LPr=i(Ne),R5=n(Ne,"LI",{});var Mqe=s(R5);jMe=n(Mqe,"STRONG",{});var Kxt=s(jMe);yPr=r(Kxt,"opt"),Kxt.forEach(t),xPr=r(Mqe," \u2014 "),_K=n(Mqe,"A",{href:!0});var Zxt=s(_K);$Pr=r(Zxt,"FlaxOPTForCausalLM"),Zxt.forEach(t),kPr=r(Mqe," (OPT model)"),Mqe.forEach(t),SPr=i(Ne),P5=n(Ne,"LI",{});var Eqe=s(P5);DMe=n(Eqe,"STRONG",{});var e$t=s(DMe);RPr=r(e$t,"roberta"),e$t.forEach(t),PPr=r(Eqe," \u2014 "),uK=n(Eqe,"A",{href:!0});var o$t=s(uK);BPr=r(o$t,"FlaxRobertaForCausalLM"),o$t.forEach(t),IPr=r(Eqe," (RoBERTa model)"),Eqe.forEach(t),NPr=i(Ne),B5=n(Ne,"LI",{});var Cqe=s(B5);GMe=n(Cqe,"STRONG",{});var r$t=s(GMe);qPr=r(r$t,"xglm"),r$t.forEach(t),jPr=r(Cqe," \u2014 "),bK=n(Cqe,"A",{href:!0});var t$t=s(bK);DPr=r(t$t,"FlaxXGLMForCausalLM"),t$t.forEach(t),GPr=r(Cqe," (XGLM model)"),Cqe.forEach(t),Ne.forEach(t),OPr=i(Wl),T(I5.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),wGe=i(f),Nc=n(f,"H2",{class:!0});var SVe=s(Nc);N5=n(SVe,"A",{id:!0,class:!0,href:!0});var a$t=s(N5);OMe=n(a$t,"SPAN",{});var n$t=s(OMe);T(nx.$$.fragment,n$t),n$t.forEach(t),a$t.forEach(t),VPr=i(SVe),VMe=n(SVe,"SPAN",{});var s$t=s(VMe);XPr=r(s$t,"FlaxAutoModelForPreTraining"),s$t.forEach(t),SVe.forEach(t),AGe=i(f),gr=n(f,"DIV",{class:!0});var Ql=s(gr);T(sx.$$.fragment,Ql),zPr=i(Ql),qc=n(Ql,"P",{});var qoe=s(qc);WPr=r(qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vK=n(qoe,"A",{href:!0});var l$t=s(vK);QPr=r(l$t,"from_pretrained()"),l$t.forEach(t),HPr=r(qoe," class method or the "),FK=n(qoe,"A",{href:!0});var i$t=s(FK);UPr=r(i$t,"from_config()"),i$t.forEach(t),JPr=r(qoe,` class
method.`),qoe.forEach(t),YPr=i(Ql),lx=n(Ql,"P",{});var RVe=s(lx);KPr=r(RVe,"This class cannot be instantiated directly using "),XMe=n(RVe,"CODE",{});var d$t=s(XMe);ZPr=r(d$t,"__init__()"),d$t.forEach(t),eBr=r(RVe," (throws an error)."),RVe.forEach(t),oBr=i(Ql),Vt=n(Ql,"DIV",{class:!0});var LA=s(Vt);T(ix.$$.fragment,LA),rBr=i(LA),zMe=n(LA,"P",{});var c$t=s(zMe);tBr=r(c$t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),c$t.forEach(t),aBr=i(LA),jc=n(LA,"P",{});var joe=s(jc);nBr=r(joe,`Note:
Loading a model from its configuration file does `),WMe=n(joe,"STRONG",{});var f$t=s(WMe);sBr=r(f$t,"not"),f$t.forEach(t),lBr=r(joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=n(joe,"A",{href:!0});var m$t=s(TK);iBr=r(m$t,"from_pretrained()"),m$t.forEach(t),dBr=r(joe," to load the model weights."),joe.forEach(t),cBr=i(LA),T(q5.$$.fragment,LA),LA.forEach(t),fBr=i(Ql),Gr=n(Ql,"DIV",{class:!0});var Hl=s(Gr);T(dx.$$.fragment,Hl),mBr=i(Hl),QMe=n(Hl,"P",{});var g$t=s(QMe);gBr=r(g$t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),g$t.forEach(t),hBr=i(Hl),_n=n(Hl,"P",{});var yA=s(_n);pBr=r(yA,"The model class to instantiate is selected based on the "),HMe=n(yA,"CODE",{});var h$t=s(HMe);_Br=r(h$t,"model_type"),h$t.forEach(t),uBr=r(yA,` property of the config object (either
passed as an argument or loaded from `),UMe=n(yA,"CODE",{});var p$t=s(UMe);bBr=r(p$t,"pretrained_model_name_or_path"),p$t.forEach(t),vBr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JMe=n(yA,"CODE",{});var _$t=s(JMe);FBr=r(_$t,"pretrained_model_name_or_path"),_$t.forEach(t),TBr=r(yA,":"),yA.forEach(t),MBr=i(Hl),Ee=n(Hl,"UL",{});var we=s(Ee);j5=n(we,"LI",{});var wqe=s(j5);YMe=n(wqe,"STRONG",{});var u$t=s(YMe);EBr=r(u$t,"albert"),u$t.forEach(t),CBr=r(wqe," \u2014 "),MK=n(wqe,"A",{href:!0});var b$t=s(MK);wBr=r(b$t,"FlaxAlbertForPreTraining"),b$t.forEach(t),ABr=r(wqe," (ALBERT model)"),wqe.forEach(t),LBr=i(we),D5=n(we,"LI",{});var Aqe=s(D5);KMe=n(Aqe,"STRONG",{});var v$t=s(KMe);yBr=r(v$t,"bart"),v$t.forEach(t),xBr=r(Aqe," \u2014 "),EK=n(Aqe,"A",{href:!0});var F$t=s(EK);$Br=r(F$t,"FlaxBartForConditionalGeneration"),F$t.forEach(t),kBr=r(Aqe," (BART model)"),Aqe.forEach(t),SBr=i(we),G5=n(we,"LI",{});var Lqe=s(G5);ZMe=n(Lqe,"STRONG",{});var T$t=s(ZMe);RBr=r(T$t,"bert"),T$t.forEach(t),PBr=r(Lqe," \u2014 "),CK=n(Lqe,"A",{href:!0});var M$t=s(CK);BBr=r(M$t,"FlaxBertForPreTraining"),M$t.forEach(t),IBr=r(Lqe," (BERT model)"),Lqe.forEach(t),NBr=i(we),O5=n(we,"LI",{});var yqe=s(O5);eEe=n(yqe,"STRONG",{});var E$t=s(eEe);qBr=r(E$t,"big_bird"),E$t.forEach(t),jBr=r(yqe," \u2014 "),wK=n(yqe,"A",{href:!0});var C$t=s(wK);DBr=r(C$t,"FlaxBigBirdForPreTraining"),C$t.forEach(t),GBr=r(yqe," (BigBird model)"),yqe.forEach(t),OBr=i(we),V5=n(we,"LI",{});var xqe=s(V5);oEe=n(xqe,"STRONG",{});var w$t=s(oEe);VBr=r(w$t,"electra"),w$t.forEach(t),XBr=r(xqe," \u2014 "),AK=n(xqe,"A",{href:!0});var A$t=s(AK);zBr=r(A$t,"FlaxElectraForPreTraining"),A$t.forEach(t),WBr=r(xqe," (ELECTRA model)"),xqe.forEach(t),QBr=i(we),X5=n(we,"LI",{});var $qe=s(X5);rEe=n($qe,"STRONG",{});var L$t=s(rEe);HBr=r(L$t,"mbart"),L$t.forEach(t),UBr=r($qe," \u2014 "),LK=n($qe,"A",{href:!0});var y$t=s(LK);JBr=r(y$t,"FlaxMBartForConditionalGeneration"),y$t.forEach(t),YBr=r($qe," (mBART model)"),$qe.forEach(t),KBr=i(we),z5=n(we,"LI",{});var kqe=s(z5);tEe=n(kqe,"STRONG",{});var x$t=s(tEe);ZBr=r(x$t,"mt5"),x$t.forEach(t),eIr=r(kqe," \u2014 "),yK=n(kqe,"A",{href:!0});var $$t=s(yK);oIr=r($$t,"FlaxMT5ForConditionalGeneration"),$$t.forEach(t),rIr=r(kqe," (MT5 model)"),kqe.forEach(t),tIr=i(we),W5=n(we,"LI",{});var Sqe=s(W5);aEe=n(Sqe,"STRONG",{});var k$t=s(aEe);aIr=r(k$t,"roberta"),k$t.forEach(t),nIr=r(Sqe," \u2014 "),xK=n(Sqe,"A",{href:!0});var S$t=s(xK);sIr=r(S$t,"FlaxRobertaForMaskedLM"),S$t.forEach(t),lIr=r(Sqe," (RoBERTa model)"),Sqe.forEach(t),iIr=i(we),Q5=n(we,"LI",{});var Rqe=s(Q5);nEe=n(Rqe,"STRONG",{});var R$t=s(nEe);dIr=r(R$t,"roformer"),R$t.forEach(t),cIr=r(Rqe," \u2014 "),$K=n(Rqe,"A",{href:!0});var P$t=s($K);fIr=r(P$t,"FlaxRoFormerForMaskedLM"),P$t.forEach(t),mIr=r(Rqe," (RoFormer model)"),Rqe.forEach(t),gIr=i(we),H5=n(we,"LI",{});var Pqe=s(H5);sEe=n(Pqe,"STRONG",{});var B$t=s(sEe);hIr=r(B$t,"t5"),B$t.forEach(t),pIr=r(Pqe," \u2014 "),kK=n(Pqe,"A",{href:!0});var I$t=s(kK);_Ir=r(I$t,"FlaxT5ForConditionalGeneration"),I$t.forEach(t),uIr=r(Pqe," (T5 model)"),Pqe.forEach(t),bIr=i(we),U5=n(we,"LI",{});var Bqe=s(U5);lEe=n(Bqe,"STRONG",{});var N$t=s(lEe);vIr=r(N$t,"wav2vec2"),N$t.forEach(t),FIr=r(Bqe," \u2014 "),SK=n(Bqe,"A",{href:!0});var q$t=s(SK);TIr=r(q$t,"FlaxWav2Vec2ForPreTraining"),q$t.forEach(t),MIr=r(Bqe," (Wav2Vec2 model)"),Bqe.forEach(t),EIr=i(we),J5=n(we,"LI",{});var Iqe=s(J5);iEe=n(Iqe,"STRONG",{});var j$t=s(iEe);CIr=r(j$t,"xlm-roberta"),j$t.forEach(t),wIr=r(Iqe," \u2014 "),RK=n(Iqe,"A",{href:!0});var D$t=s(RK);AIr=r(D$t,"FlaxXLMRobertaForMaskedLM"),D$t.forEach(t),LIr=r(Iqe," (XLM-RoBERTa model)"),Iqe.forEach(t),we.forEach(t),yIr=i(Hl),T(Y5.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),LGe=i(f),Dc=n(f,"H2",{class:!0});var PVe=s(Dc);K5=n(PVe,"A",{id:!0,class:!0,href:!0});var G$t=s(K5);dEe=n(G$t,"SPAN",{});var O$t=s(dEe);T(cx.$$.fragment,O$t),O$t.forEach(t),G$t.forEach(t),xIr=i(PVe),cEe=n(PVe,"SPAN",{});var V$t=s(cEe);$Ir=r(V$t,"FlaxAutoModelForMaskedLM"),V$t.forEach(t),PVe.forEach(t),yGe=i(f),hr=n(f,"DIV",{class:!0});var Ul=s(hr);T(fx.$$.fragment,Ul),kIr=i(Ul),Gc=n(Ul,"P",{});var Doe=s(Gc);SIr=r(Doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PK=n(Doe,"A",{href:!0});var X$t=s(PK);RIr=r(X$t,"from_pretrained()"),X$t.forEach(t),PIr=r(Doe," class method or the "),BK=n(Doe,"A",{href:!0});var z$t=s(BK);BIr=r(z$t,"from_config()"),z$t.forEach(t),IIr=r(Doe,` class
method.`),Doe.forEach(t),NIr=i(Ul),mx=n(Ul,"P",{});var BVe=s(mx);qIr=r(BVe,"This class cannot be instantiated directly using "),fEe=n(BVe,"CODE",{});var W$t=s(fEe);jIr=r(W$t,"__init__()"),W$t.forEach(t),DIr=r(BVe," (throws an error)."),BVe.forEach(t),GIr=i(Ul),Xt=n(Ul,"DIV",{class:!0});var xA=s(Xt);T(gx.$$.fragment,xA),OIr=i(xA),mEe=n(xA,"P",{});var Q$t=s(mEe);VIr=r(Q$t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Q$t.forEach(t),XIr=i(xA),Oc=n(xA,"P",{});var Goe=s(Oc);zIr=r(Goe,`Note:
Loading a model from its configuration file does `),gEe=n(Goe,"STRONG",{});var H$t=s(gEe);WIr=r(H$t,"not"),H$t.forEach(t),QIr=r(Goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=n(Goe,"A",{href:!0});var U$t=s(IK);HIr=r(U$t,"from_pretrained()"),U$t.forEach(t),UIr=r(Goe," to load the model weights."),Goe.forEach(t),JIr=i(xA),T(Z5.$$.fragment,xA),xA.forEach(t),YIr=i(Ul),Or=n(Ul,"DIV",{class:!0});var Jl=s(Or);T(hx.$$.fragment,Jl),KIr=i(Jl),hEe=n(Jl,"P",{});var J$t=s(hEe);ZIr=r(J$t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),J$t.forEach(t),eNr=i(Jl),un=n(Jl,"P",{});var $A=s(un);oNr=r($A,"The model class to instantiate is selected based on the "),pEe=n($A,"CODE",{});var Y$t=s(pEe);rNr=r(Y$t,"model_type"),Y$t.forEach(t),tNr=r($A,` property of the config object (either
passed as an argument or loaded from `),_Ee=n($A,"CODE",{});var K$t=s(_Ee);aNr=r(K$t,"pretrained_model_name_or_path"),K$t.forEach(t),nNr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uEe=n($A,"CODE",{});var Z$t=s(uEe);sNr=r(Z$t,"pretrained_model_name_or_path"),Z$t.forEach(t),lNr=r($A,":"),$A.forEach(t),iNr=i(Jl),$e=n(Jl,"UL",{});var qe=s($e);e3=n(qe,"LI",{});var Nqe=s(e3);bEe=n(Nqe,"STRONG",{});var ekt=s(bEe);dNr=r(ekt,"albert"),ekt.forEach(t),cNr=r(Nqe," \u2014 "),NK=n(Nqe,"A",{href:!0});var okt=s(NK);fNr=r(okt,"FlaxAlbertForMaskedLM"),okt.forEach(t),mNr=r(Nqe," (ALBERT model)"),Nqe.forEach(t),gNr=i(qe),o3=n(qe,"LI",{});var qqe=s(o3);vEe=n(qqe,"STRONG",{});var rkt=s(vEe);hNr=r(rkt,"bart"),rkt.forEach(t),pNr=r(qqe," \u2014 "),qK=n(qqe,"A",{href:!0});var tkt=s(qK);_Nr=r(tkt,"FlaxBartForConditionalGeneration"),tkt.forEach(t),uNr=r(qqe," (BART model)"),qqe.forEach(t),bNr=i(qe),r3=n(qe,"LI",{});var jqe=s(r3);FEe=n(jqe,"STRONG",{});var akt=s(FEe);vNr=r(akt,"bert"),akt.forEach(t),FNr=r(jqe," \u2014 "),jK=n(jqe,"A",{href:!0});var nkt=s(jK);TNr=r(nkt,"FlaxBertForMaskedLM"),nkt.forEach(t),MNr=r(jqe," (BERT model)"),jqe.forEach(t),ENr=i(qe),t3=n(qe,"LI",{});var Dqe=s(t3);TEe=n(Dqe,"STRONG",{});var skt=s(TEe);CNr=r(skt,"big_bird"),skt.forEach(t),wNr=r(Dqe," \u2014 "),DK=n(Dqe,"A",{href:!0});var lkt=s(DK);ANr=r(lkt,"FlaxBigBirdForMaskedLM"),lkt.forEach(t),LNr=r(Dqe," (BigBird model)"),Dqe.forEach(t),yNr=i(qe),a3=n(qe,"LI",{});var Gqe=s(a3);MEe=n(Gqe,"STRONG",{});var ikt=s(MEe);xNr=r(ikt,"distilbert"),ikt.forEach(t),$Nr=r(Gqe," \u2014 "),GK=n(Gqe,"A",{href:!0});var dkt=s(GK);kNr=r(dkt,"FlaxDistilBertForMaskedLM"),dkt.forEach(t),SNr=r(Gqe," (DistilBERT model)"),Gqe.forEach(t),RNr=i(qe),n3=n(qe,"LI",{});var Oqe=s(n3);EEe=n(Oqe,"STRONG",{});var ckt=s(EEe);PNr=r(ckt,"electra"),ckt.forEach(t),BNr=r(Oqe," \u2014 "),OK=n(Oqe,"A",{href:!0});var fkt=s(OK);INr=r(fkt,"FlaxElectraForMaskedLM"),fkt.forEach(t),NNr=r(Oqe," (ELECTRA model)"),Oqe.forEach(t),qNr=i(qe),s3=n(qe,"LI",{});var Vqe=s(s3);CEe=n(Vqe,"STRONG",{});var mkt=s(CEe);jNr=r(mkt,"mbart"),mkt.forEach(t),DNr=r(Vqe," \u2014 "),VK=n(Vqe,"A",{href:!0});var gkt=s(VK);GNr=r(gkt,"FlaxMBartForConditionalGeneration"),gkt.forEach(t),ONr=r(Vqe," (mBART model)"),Vqe.forEach(t),VNr=i(qe),l3=n(qe,"LI",{});var Xqe=s(l3);wEe=n(Xqe,"STRONG",{});var hkt=s(wEe);XNr=r(hkt,"roberta"),hkt.forEach(t),zNr=r(Xqe," \u2014 "),XK=n(Xqe,"A",{href:!0});var pkt=s(XK);WNr=r(pkt,"FlaxRobertaForMaskedLM"),pkt.forEach(t),QNr=r(Xqe," (RoBERTa model)"),Xqe.forEach(t),HNr=i(qe),i3=n(qe,"LI",{});var zqe=s(i3);AEe=n(zqe,"STRONG",{});var _kt=s(AEe);UNr=r(_kt,"roformer"),_kt.forEach(t),JNr=r(zqe," \u2014 "),zK=n(zqe,"A",{href:!0});var ukt=s(zK);YNr=r(ukt,"FlaxRoFormerForMaskedLM"),ukt.forEach(t),KNr=r(zqe," (RoFormer model)"),zqe.forEach(t),ZNr=i(qe),d3=n(qe,"LI",{});var Wqe=s(d3);LEe=n(Wqe,"STRONG",{});var bkt=s(LEe);eqr=r(bkt,"xlm-roberta"),bkt.forEach(t),oqr=r(Wqe," \u2014 "),WK=n(Wqe,"A",{href:!0});var vkt=s(WK);rqr=r(vkt,"FlaxXLMRobertaForMaskedLM"),vkt.forEach(t),tqr=r(Wqe," (XLM-RoBERTa model)"),Wqe.forEach(t),qe.forEach(t),aqr=i(Jl),T(c3.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),xGe=i(f),Vc=n(f,"H2",{class:!0});var IVe=s(Vc);f3=n(IVe,"A",{id:!0,class:!0,href:!0});var Fkt=s(f3);yEe=n(Fkt,"SPAN",{});var Tkt=s(yEe);T(px.$$.fragment,Tkt),Tkt.forEach(t),Fkt.forEach(t),nqr=i(IVe),xEe=n(IVe,"SPAN",{});var Mkt=s(xEe);sqr=r(Mkt,"FlaxAutoModelForSeq2SeqLM"),Mkt.forEach(t),IVe.forEach(t),$Ge=i(f),pr=n(f,"DIV",{class:!0});var Yl=s(pr);T(_x.$$.fragment,Yl),lqr=i(Yl),Xc=n(Yl,"P",{});var Ooe=s(Xc);iqr=r(Ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QK=n(Ooe,"A",{href:!0});var Ekt=s(QK);dqr=r(Ekt,"from_pretrained()"),Ekt.forEach(t),cqr=r(Ooe," class method or the "),HK=n(Ooe,"A",{href:!0});var Ckt=s(HK);fqr=r(Ckt,"from_config()"),Ckt.forEach(t),mqr=r(Ooe,` class
method.`),Ooe.forEach(t),gqr=i(Yl),ux=n(Yl,"P",{});var NVe=s(ux);hqr=r(NVe,"This class cannot be instantiated directly using "),$Ee=n(NVe,"CODE",{});var wkt=s($Ee);pqr=r(wkt,"__init__()"),wkt.forEach(t),_qr=r(NVe," (throws an error)."),NVe.forEach(t),uqr=i(Yl),zt=n(Yl,"DIV",{class:!0});var kA=s(zt);T(bx.$$.fragment,kA),bqr=i(kA),kEe=n(kA,"P",{});var Akt=s(kEe);vqr=r(Akt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Akt.forEach(t),Fqr=i(kA),zc=n(kA,"P",{});var Voe=s(zc);Tqr=r(Voe,`Note:
Loading a model from its configuration file does `),SEe=n(Voe,"STRONG",{});var Lkt=s(SEe);Mqr=r(Lkt,"not"),Lkt.forEach(t),Eqr=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),UK=n(Voe,"A",{href:!0});var ykt=s(UK);Cqr=r(ykt,"from_pretrained()"),ykt.forEach(t),wqr=r(Voe," to load the model weights."),Voe.forEach(t),Aqr=i(kA),T(m3.$$.fragment,kA),kA.forEach(t),Lqr=i(Yl),Vr=n(Yl,"DIV",{class:!0});var Kl=s(Vr);T(vx.$$.fragment,Kl),yqr=i(Kl),REe=n(Kl,"P",{});var xkt=s(REe);xqr=r(xkt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xkt.forEach(t),$qr=i(Kl),bn=n(Kl,"P",{});var SA=s(bn);kqr=r(SA,"The model class to instantiate is selected based on the "),PEe=n(SA,"CODE",{});var $kt=s(PEe);Sqr=r($kt,"model_type"),$kt.forEach(t),Rqr=r(SA,` property of the config object (either
passed as an argument or loaded from `),BEe=n(SA,"CODE",{});var kkt=s(BEe);Pqr=r(kkt,"pretrained_model_name_or_path"),kkt.forEach(t),Bqr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IEe=n(SA,"CODE",{});var Skt=s(IEe);Iqr=r(Skt,"pretrained_model_name_or_path"),Skt.forEach(t),Nqr=r(SA,":"),SA.forEach(t),qqr=i(Kl),Pe=n(Kl,"UL",{});var ze=s(Pe);g3=n(ze,"LI",{});var Qqe=s(g3);NEe=n(Qqe,"STRONG",{});var Rkt=s(NEe);jqr=r(Rkt,"bart"),Rkt.forEach(t),Dqr=r(Qqe," \u2014 "),JK=n(Qqe,"A",{href:!0});var Pkt=s(JK);Gqr=r(Pkt,"FlaxBartForConditionalGeneration"),Pkt.forEach(t),Oqr=r(Qqe," (BART model)"),Qqe.forEach(t),Vqr=i(ze),h3=n(ze,"LI",{});var Hqe=s(h3);qEe=n(Hqe,"STRONG",{});var Bkt=s(qEe);Xqr=r(Bkt,"blenderbot"),Bkt.forEach(t),zqr=r(Hqe," \u2014 "),YK=n(Hqe,"A",{href:!0});var Ikt=s(YK);Wqr=r(Ikt,"FlaxBlenderbotForConditionalGeneration"),Ikt.forEach(t),Qqr=r(Hqe," (Blenderbot model)"),Hqe.forEach(t),Hqr=i(ze),p3=n(ze,"LI",{});var Uqe=s(p3);jEe=n(Uqe,"STRONG",{});var Nkt=s(jEe);Uqr=r(Nkt,"blenderbot-small"),Nkt.forEach(t),Jqr=r(Uqe," \u2014 "),KK=n(Uqe,"A",{href:!0});var qkt=s(KK);Yqr=r(qkt,"FlaxBlenderbotSmallForConditionalGeneration"),qkt.forEach(t),Kqr=r(Uqe," (BlenderbotSmall model)"),Uqe.forEach(t),Zqr=i(ze),_3=n(ze,"LI",{});var Jqe=s(_3);DEe=n(Jqe,"STRONG",{});var jkt=s(DEe);ejr=r(jkt,"encoder-decoder"),jkt.forEach(t),ojr=r(Jqe," \u2014 "),ZK=n(Jqe,"A",{href:!0});var Dkt=s(ZK);rjr=r(Dkt,"FlaxEncoderDecoderModel"),Dkt.forEach(t),tjr=r(Jqe," (Encoder decoder model)"),Jqe.forEach(t),ajr=i(ze),u3=n(ze,"LI",{});var Yqe=s(u3);GEe=n(Yqe,"STRONG",{});var Gkt=s(GEe);njr=r(Gkt,"marian"),Gkt.forEach(t),sjr=r(Yqe," \u2014 "),eZ=n(Yqe,"A",{href:!0});var Okt=s(eZ);ljr=r(Okt,"FlaxMarianMTModel"),Okt.forEach(t),ijr=r(Yqe," (Marian model)"),Yqe.forEach(t),djr=i(ze),b3=n(ze,"LI",{});var Kqe=s(b3);OEe=n(Kqe,"STRONG",{});var Vkt=s(OEe);cjr=r(Vkt,"mbart"),Vkt.forEach(t),fjr=r(Kqe," \u2014 "),oZ=n(Kqe,"A",{href:!0});var Xkt=s(oZ);mjr=r(Xkt,"FlaxMBartForConditionalGeneration"),Xkt.forEach(t),gjr=r(Kqe," (mBART model)"),Kqe.forEach(t),hjr=i(ze),v3=n(ze,"LI",{});var Zqe=s(v3);VEe=n(Zqe,"STRONG",{});var zkt=s(VEe);pjr=r(zkt,"mt5"),zkt.forEach(t),_jr=r(Zqe," \u2014 "),rZ=n(Zqe,"A",{href:!0});var Wkt=s(rZ);ujr=r(Wkt,"FlaxMT5ForConditionalGeneration"),Wkt.forEach(t),bjr=r(Zqe," (MT5 model)"),Zqe.forEach(t),vjr=i(ze),F3=n(ze,"LI",{});var eje=s(F3);XEe=n(eje,"STRONG",{});var Qkt=s(XEe);Fjr=r(Qkt,"pegasus"),Qkt.forEach(t),Tjr=r(eje," \u2014 "),tZ=n(eje,"A",{href:!0});var Hkt=s(tZ);Mjr=r(Hkt,"FlaxPegasusForConditionalGeneration"),Hkt.forEach(t),Ejr=r(eje," (Pegasus model)"),eje.forEach(t),Cjr=i(ze),T3=n(ze,"LI",{});var oje=s(T3);zEe=n(oje,"STRONG",{});var Ukt=s(zEe);wjr=r(Ukt,"t5"),Ukt.forEach(t),Ajr=r(oje," \u2014 "),aZ=n(oje,"A",{href:!0});var Jkt=s(aZ);Ljr=r(Jkt,"FlaxT5ForConditionalGeneration"),Jkt.forEach(t),yjr=r(oje," (T5 model)"),oje.forEach(t),ze.forEach(t),xjr=i(Kl),T(M3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),kGe=i(f),Wc=n(f,"H2",{class:!0});var qVe=s(Wc);E3=n(qVe,"A",{id:!0,class:!0,href:!0});var Ykt=s(E3);WEe=n(Ykt,"SPAN",{});var Kkt=s(WEe);T(Fx.$$.fragment,Kkt),Kkt.forEach(t),Ykt.forEach(t),$jr=i(qVe),QEe=n(qVe,"SPAN",{});var Zkt=s(QEe);kjr=r(Zkt,"FlaxAutoModelForSequenceClassification"),Zkt.forEach(t),qVe.forEach(t),SGe=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(Tx.$$.fragment,Zl),Sjr=i(Zl),Qc=n(Zl,"P",{});var Xoe=s(Qc);Rjr=r(Xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nZ=n(Xoe,"A",{href:!0});var eSt=s(nZ);Pjr=r(eSt,"from_pretrained()"),eSt.forEach(t),Bjr=r(Xoe," class method or the "),sZ=n(Xoe,"A",{href:!0});var oSt=s(sZ);Ijr=r(oSt,"from_config()"),oSt.forEach(t),Njr=r(Xoe,` class
method.`),Xoe.forEach(t),qjr=i(Zl),Mx=n(Zl,"P",{});var jVe=s(Mx);jjr=r(jVe,"This class cannot be instantiated directly using "),HEe=n(jVe,"CODE",{});var rSt=s(HEe);Djr=r(rSt,"__init__()"),rSt.forEach(t),Gjr=r(jVe," (throws an error)."),jVe.forEach(t),Ojr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var RA=s(Wt);T(Ex.$$.fragment,RA),Vjr=i(RA),UEe=n(RA,"P",{});var tSt=s(UEe);Xjr=r(tSt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tSt.forEach(t),zjr=i(RA),Hc=n(RA,"P",{});var zoe=s(Hc);Wjr=r(zoe,`Note:
Loading a model from its configuration file does `),JEe=n(zoe,"STRONG",{});var aSt=s(JEe);Qjr=r(aSt,"not"),aSt.forEach(t),Hjr=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=n(zoe,"A",{href:!0});var nSt=s(lZ);Ujr=r(nSt,"from_pretrained()"),nSt.forEach(t),Jjr=r(zoe," to load the model weights."),zoe.forEach(t),Yjr=i(RA),T(C3.$$.fragment,RA),RA.forEach(t),Kjr=i(Zl),Xr=n(Zl,"DIV",{class:!0});var ei=s(Xr);T(Cx.$$.fragment,ei),Zjr=i(ei),YEe=n(ei,"P",{});var sSt=s(YEe);eDr=r(sSt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sSt.forEach(t),oDr=i(ei),vn=n(ei,"P",{});var PA=s(vn);rDr=r(PA,"The model class to instantiate is selected based on the "),KEe=n(PA,"CODE",{});var lSt=s(KEe);tDr=r(lSt,"model_type"),lSt.forEach(t),aDr=r(PA,` property of the config object (either
passed as an argument or loaded from `),ZEe=n(PA,"CODE",{});var iSt=s(ZEe);nDr=r(iSt,"pretrained_model_name_or_path"),iSt.forEach(t),sDr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eCe=n(PA,"CODE",{});var dSt=s(eCe);lDr=r(dSt,"pretrained_model_name_or_path"),dSt.forEach(t),iDr=r(PA,":"),PA.forEach(t),dDr=i(ei),ke=n(ei,"UL",{});var je=s(ke);w3=n(je,"LI",{});var rje=s(w3);oCe=n(rje,"STRONG",{});var cSt=s(oCe);cDr=r(cSt,"albert"),cSt.forEach(t),fDr=r(rje," \u2014 "),iZ=n(rje,"A",{href:!0});var fSt=s(iZ);mDr=r(fSt,"FlaxAlbertForSequenceClassification"),fSt.forEach(t),gDr=r(rje," (ALBERT model)"),rje.forEach(t),hDr=i(je),A3=n(je,"LI",{});var tje=s(A3);rCe=n(tje,"STRONG",{});var mSt=s(rCe);pDr=r(mSt,"bart"),mSt.forEach(t),_Dr=r(tje," \u2014 "),dZ=n(tje,"A",{href:!0});var gSt=s(dZ);uDr=r(gSt,"FlaxBartForSequenceClassification"),gSt.forEach(t),bDr=r(tje," (BART model)"),tje.forEach(t),vDr=i(je),L3=n(je,"LI",{});var aje=s(L3);tCe=n(aje,"STRONG",{});var hSt=s(tCe);FDr=r(hSt,"bert"),hSt.forEach(t),TDr=r(aje," \u2014 "),cZ=n(aje,"A",{href:!0});var pSt=s(cZ);MDr=r(pSt,"FlaxBertForSequenceClassification"),pSt.forEach(t),EDr=r(aje," (BERT model)"),aje.forEach(t),CDr=i(je),y3=n(je,"LI",{});var nje=s(y3);aCe=n(nje,"STRONG",{});var _St=s(aCe);wDr=r(_St,"big_bird"),_St.forEach(t),ADr=r(nje," \u2014 "),fZ=n(nje,"A",{href:!0});var uSt=s(fZ);LDr=r(uSt,"FlaxBigBirdForSequenceClassification"),uSt.forEach(t),yDr=r(nje," (BigBird model)"),nje.forEach(t),xDr=i(je),x3=n(je,"LI",{});var sje=s(x3);nCe=n(sje,"STRONG",{});var bSt=s(nCe);$Dr=r(bSt,"distilbert"),bSt.forEach(t),kDr=r(sje," \u2014 "),mZ=n(sje,"A",{href:!0});var vSt=s(mZ);SDr=r(vSt,"FlaxDistilBertForSequenceClassification"),vSt.forEach(t),RDr=r(sje," (DistilBERT model)"),sje.forEach(t),PDr=i(je),$3=n(je,"LI",{});var lje=s($3);sCe=n(lje,"STRONG",{});var FSt=s(sCe);BDr=r(FSt,"electra"),FSt.forEach(t),IDr=r(lje," \u2014 "),gZ=n(lje,"A",{href:!0});var TSt=s(gZ);NDr=r(TSt,"FlaxElectraForSequenceClassification"),TSt.forEach(t),qDr=r(lje," (ELECTRA model)"),lje.forEach(t),jDr=i(je),k3=n(je,"LI",{});var ije=s(k3);lCe=n(ije,"STRONG",{});var MSt=s(lCe);DDr=r(MSt,"mbart"),MSt.forEach(t),GDr=r(ije," \u2014 "),hZ=n(ije,"A",{href:!0});var ESt=s(hZ);ODr=r(ESt,"FlaxMBartForSequenceClassification"),ESt.forEach(t),VDr=r(ije," (mBART model)"),ije.forEach(t),XDr=i(je),S3=n(je,"LI",{});var dje=s(S3);iCe=n(dje,"STRONG",{});var CSt=s(iCe);zDr=r(CSt,"roberta"),CSt.forEach(t),WDr=r(dje," \u2014 "),pZ=n(dje,"A",{href:!0});var wSt=s(pZ);QDr=r(wSt,"FlaxRobertaForSequenceClassification"),wSt.forEach(t),HDr=r(dje," (RoBERTa model)"),dje.forEach(t),UDr=i(je),R3=n(je,"LI",{});var cje=s(R3);dCe=n(cje,"STRONG",{});var ASt=s(dCe);JDr=r(ASt,"roformer"),ASt.forEach(t),YDr=r(cje," \u2014 "),_Z=n(cje,"A",{href:!0});var LSt=s(_Z);KDr=r(LSt,"FlaxRoFormerForSequenceClassification"),LSt.forEach(t),ZDr=r(cje," (RoFormer model)"),cje.forEach(t),eGr=i(je),P3=n(je,"LI",{});var fje=s(P3);cCe=n(fje,"STRONG",{});var ySt=s(cCe);oGr=r(ySt,"xlm-roberta"),ySt.forEach(t),rGr=r(fje," \u2014 "),uZ=n(fje,"A",{href:!0});var xSt=s(uZ);tGr=r(xSt,"FlaxXLMRobertaForSequenceClassification"),xSt.forEach(t),aGr=r(fje," (XLM-RoBERTa model)"),fje.forEach(t),je.forEach(t),nGr=i(ei),T(B3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),RGe=i(f),Uc=n(f,"H2",{class:!0});var DVe=s(Uc);I3=n(DVe,"A",{id:!0,class:!0,href:!0});var $St=s(I3);fCe=n($St,"SPAN",{});var kSt=s(fCe);T(wx.$$.fragment,kSt),kSt.forEach(t),$St.forEach(t),sGr=i(DVe),mCe=n(DVe,"SPAN",{});var SSt=s(mCe);lGr=r(SSt,"FlaxAutoModelForQuestionAnswering"),SSt.forEach(t),DVe.forEach(t),PGe=i(f),ur=n(f,"DIV",{class:!0});var oi=s(ur);T(Ax.$$.fragment,oi),iGr=i(oi),Jc=n(oi,"P",{});var Woe=s(Jc);dGr=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bZ=n(Woe,"A",{href:!0});var RSt=s(bZ);cGr=r(RSt,"from_pretrained()"),RSt.forEach(t),fGr=r(Woe," class method or the "),vZ=n(Woe,"A",{href:!0});var PSt=s(vZ);mGr=r(PSt,"from_config()"),PSt.forEach(t),gGr=r(Woe,` class
method.`),Woe.forEach(t),hGr=i(oi),Lx=n(oi,"P",{});var GVe=s(Lx);pGr=r(GVe,"This class cannot be instantiated directly using "),gCe=n(GVe,"CODE",{});var BSt=s(gCe);_Gr=r(BSt,"__init__()"),BSt.forEach(t),uGr=r(GVe," (throws an error)."),GVe.forEach(t),bGr=i(oi),Qt=n(oi,"DIV",{class:!0});var BA=s(Qt);T(yx.$$.fragment,BA),vGr=i(BA),hCe=n(BA,"P",{});var ISt=s(hCe);FGr=r(ISt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ISt.forEach(t),TGr=i(BA),Yc=n(BA,"P",{});var Qoe=s(Yc);MGr=r(Qoe,`Note:
Loading a model from its configuration file does `),pCe=n(Qoe,"STRONG",{});var NSt=s(pCe);EGr=r(NSt,"not"),NSt.forEach(t),CGr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FZ=n(Qoe,"A",{href:!0});var qSt=s(FZ);wGr=r(qSt,"from_pretrained()"),qSt.forEach(t),AGr=r(Qoe," to load the model weights."),Qoe.forEach(t),LGr=i(BA),T(N3.$$.fragment,BA),BA.forEach(t),yGr=i(oi),zr=n(oi,"DIV",{class:!0});var ri=s(zr);T(xx.$$.fragment,ri),xGr=i(ri),_Ce=n(ri,"P",{});var jSt=s(_Ce);$Gr=r(jSt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jSt.forEach(t),kGr=i(ri),Fn=n(ri,"P",{});var IA=s(Fn);SGr=r(IA,"The model class to instantiate is selected based on the "),uCe=n(IA,"CODE",{});var DSt=s(uCe);RGr=r(DSt,"model_type"),DSt.forEach(t),PGr=r(IA,` property of the config object (either
passed as an argument or loaded from `),bCe=n(IA,"CODE",{});var GSt=s(bCe);BGr=r(GSt,"pretrained_model_name_or_path"),GSt.forEach(t),IGr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vCe=n(IA,"CODE",{});var OSt=s(vCe);NGr=r(OSt,"pretrained_model_name_or_path"),OSt.forEach(t),qGr=r(IA,":"),IA.forEach(t),jGr=i(ri),Se=n(ri,"UL",{});var De=s(Se);q3=n(De,"LI",{});var mje=s(q3);FCe=n(mje,"STRONG",{});var VSt=s(FCe);DGr=r(VSt,"albert"),VSt.forEach(t),GGr=r(mje," \u2014 "),TZ=n(mje,"A",{href:!0});var XSt=s(TZ);OGr=r(XSt,"FlaxAlbertForQuestionAnswering"),XSt.forEach(t),VGr=r(mje," (ALBERT model)"),mje.forEach(t),XGr=i(De),j3=n(De,"LI",{});var gje=s(j3);TCe=n(gje,"STRONG",{});var zSt=s(TCe);zGr=r(zSt,"bart"),zSt.forEach(t),WGr=r(gje," \u2014 "),MZ=n(gje,"A",{href:!0});var WSt=s(MZ);QGr=r(WSt,"FlaxBartForQuestionAnswering"),WSt.forEach(t),HGr=r(gje," (BART model)"),gje.forEach(t),UGr=i(De),D3=n(De,"LI",{});var hje=s(D3);MCe=n(hje,"STRONG",{});var QSt=s(MCe);JGr=r(QSt,"bert"),QSt.forEach(t),YGr=r(hje," \u2014 "),EZ=n(hje,"A",{href:!0});var HSt=s(EZ);KGr=r(HSt,"FlaxBertForQuestionAnswering"),HSt.forEach(t),ZGr=r(hje," (BERT model)"),hje.forEach(t),eOr=i(De),G3=n(De,"LI",{});var pje=s(G3);ECe=n(pje,"STRONG",{});var USt=s(ECe);oOr=r(USt,"big_bird"),USt.forEach(t),rOr=r(pje," \u2014 "),CZ=n(pje,"A",{href:!0});var JSt=s(CZ);tOr=r(JSt,"FlaxBigBirdForQuestionAnswering"),JSt.forEach(t),aOr=r(pje," (BigBird model)"),pje.forEach(t),nOr=i(De),O3=n(De,"LI",{});var _je=s(O3);CCe=n(_je,"STRONG",{});var YSt=s(CCe);sOr=r(YSt,"distilbert"),YSt.forEach(t),lOr=r(_je," \u2014 "),wZ=n(_je,"A",{href:!0});var KSt=s(wZ);iOr=r(KSt,"FlaxDistilBertForQuestionAnswering"),KSt.forEach(t),dOr=r(_je," (DistilBERT model)"),_je.forEach(t),cOr=i(De),V3=n(De,"LI",{});var uje=s(V3);wCe=n(uje,"STRONG",{});var ZSt=s(wCe);fOr=r(ZSt,"electra"),ZSt.forEach(t),mOr=r(uje," \u2014 "),AZ=n(uje,"A",{href:!0});var eRt=s(AZ);gOr=r(eRt,"FlaxElectraForQuestionAnswering"),eRt.forEach(t),hOr=r(uje," (ELECTRA model)"),uje.forEach(t),pOr=i(De),X3=n(De,"LI",{});var bje=s(X3);ACe=n(bje,"STRONG",{});var oRt=s(ACe);_Or=r(oRt,"mbart"),oRt.forEach(t),uOr=r(bje," \u2014 "),LZ=n(bje,"A",{href:!0});var rRt=s(LZ);bOr=r(rRt,"FlaxMBartForQuestionAnswering"),rRt.forEach(t),vOr=r(bje," (mBART model)"),bje.forEach(t),FOr=i(De),z3=n(De,"LI",{});var vje=s(z3);LCe=n(vje,"STRONG",{});var tRt=s(LCe);TOr=r(tRt,"roberta"),tRt.forEach(t),MOr=r(vje," \u2014 "),yZ=n(vje,"A",{href:!0});var aRt=s(yZ);EOr=r(aRt,"FlaxRobertaForQuestionAnswering"),aRt.forEach(t),COr=r(vje," (RoBERTa model)"),vje.forEach(t),wOr=i(De),W3=n(De,"LI",{});var Fje=s(W3);yCe=n(Fje,"STRONG",{});var nRt=s(yCe);AOr=r(nRt,"roformer"),nRt.forEach(t),LOr=r(Fje," \u2014 "),xZ=n(Fje,"A",{href:!0});var sRt=s(xZ);yOr=r(sRt,"FlaxRoFormerForQuestionAnswering"),sRt.forEach(t),xOr=r(Fje," (RoFormer model)"),Fje.forEach(t),$Or=i(De),Q3=n(De,"LI",{});var Tje=s(Q3);xCe=n(Tje,"STRONG",{});var lRt=s(xCe);kOr=r(lRt,"xlm-roberta"),lRt.forEach(t),SOr=r(Tje," \u2014 "),$Z=n(Tje,"A",{href:!0});var iRt=s($Z);ROr=r(iRt,"FlaxXLMRobertaForQuestionAnswering"),iRt.forEach(t),POr=r(Tje," (XLM-RoBERTa model)"),Tje.forEach(t),De.forEach(t),BOr=i(ri),T(H3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),BGe=i(f),Kc=n(f,"H2",{class:!0});var OVe=s(Kc);U3=n(OVe,"A",{id:!0,class:!0,href:!0});var dRt=s(U3);$Ce=n(dRt,"SPAN",{});var cRt=s($Ce);T($x.$$.fragment,cRt),cRt.forEach(t),dRt.forEach(t),IOr=i(OVe),kCe=n(OVe,"SPAN",{});var fRt=s(kCe);NOr=r(fRt,"FlaxAutoModelForTokenClassification"),fRt.forEach(t),OVe.forEach(t),IGe=i(f),br=n(f,"DIV",{class:!0});var ti=s(br);T(kx.$$.fragment,ti),qOr=i(ti),Zc=n(ti,"P",{});var Hoe=s(Zc);jOr=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kZ=n(Hoe,"A",{href:!0});var mRt=s(kZ);DOr=r(mRt,"from_pretrained()"),mRt.forEach(t),GOr=r(Hoe," class method or the "),SZ=n(Hoe,"A",{href:!0});var gRt=s(SZ);OOr=r(gRt,"from_config()"),gRt.forEach(t),VOr=r(Hoe,` class
method.`),Hoe.forEach(t),XOr=i(ti),Sx=n(ti,"P",{});var VVe=s(Sx);zOr=r(VVe,"This class cannot be instantiated directly using "),SCe=n(VVe,"CODE",{});var hRt=s(SCe);WOr=r(hRt,"__init__()"),hRt.forEach(t),QOr=r(VVe," (throws an error)."),VVe.forEach(t),HOr=i(ti),Ht=n(ti,"DIV",{class:!0});var NA=s(Ht);T(Rx.$$.fragment,NA),UOr=i(NA),RCe=n(NA,"P",{});var pRt=s(RCe);JOr=r(pRt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pRt.forEach(t),YOr=i(NA),ef=n(NA,"P",{});var Uoe=s(ef);KOr=r(Uoe,`Note:
Loading a model from its configuration file does `),PCe=n(Uoe,"STRONG",{});var _Rt=s(PCe);ZOr=r(_Rt,"not"),_Rt.forEach(t),eVr=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),RZ=n(Uoe,"A",{href:!0});var uRt=s(RZ);oVr=r(uRt,"from_pretrained()"),uRt.forEach(t),rVr=r(Uoe," to load the model weights."),Uoe.forEach(t),tVr=i(NA),T(J3.$$.fragment,NA),NA.forEach(t),aVr=i(ti),Wr=n(ti,"DIV",{class:!0});var ai=s(Wr);T(Px.$$.fragment,ai),nVr=i(ai),BCe=n(ai,"P",{});var bRt=s(BCe);sVr=r(bRt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bRt.forEach(t),lVr=i(ai),Tn=n(ai,"P",{});var qA=s(Tn);iVr=r(qA,"The model class to instantiate is selected based on the "),ICe=n(qA,"CODE",{});var vRt=s(ICe);dVr=r(vRt,"model_type"),vRt.forEach(t),cVr=r(qA,` property of the config object (either
passed as an argument or loaded from `),NCe=n(qA,"CODE",{});var FRt=s(NCe);fVr=r(FRt,"pretrained_model_name_or_path"),FRt.forEach(t),mVr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qCe=n(qA,"CODE",{});var TRt=s(qCe);gVr=r(TRt,"pretrained_model_name_or_path"),TRt.forEach(t),hVr=r(qA,":"),qA.forEach(t),pVr=i(ai),Oe=n(ai,"UL",{});var Fo=s(Oe);Y3=n(Fo,"LI",{});var Mje=s(Y3);jCe=n(Mje,"STRONG",{});var MRt=s(jCe);_Vr=r(MRt,"albert"),MRt.forEach(t),uVr=r(Mje," \u2014 "),PZ=n(Mje,"A",{href:!0});var ERt=s(PZ);bVr=r(ERt,"FlaxAlbertForTokenClassification"),ERt.forEach(t),vVr=r(Mje," (ALBERT model)"),Mje.forEach(t),FVr=i(Fo),K3=n(Fo,"LI",{});var Eje=s(K3);DCe=n(Eje,"STRONG",{});var CRt=s(DCe);TVr=r(CRt,"bert"),CRt.forEach(t),MVr=r(Eje," \u2014 "),BZ=n(Eje,"A",{href:!0});var wRt=s(BZ);EVr=r(wRt,"FlaxBertForTokenClassification"),wRt.forEach(t),CVr=r(Eje," (BERT model)"),Eje.forEach(t),wVr=i(Fo),Z3=n(Fo,"LI",{});var Cje=s(Z3);GCe=n(Cje,"STRONG",{});var ARt=s(GCe);AVr=r(ARt,"big_bird"),ARt.forEach(t),LVr=r(Cje," \u2014 "),IZ=n(Cje,"A",{href:!0});var LRt=s(IZ);yVr=r(LRt,"FlaxBigBirdForTokenClassification"),LRt.forEach(t),xVr=r(Cje," (BigBird model)"),Cje.forEach(t),$Vr=i(Fo),e0=n(Fo,"LI",{});var wje=s(e0);OCe=n(wje,"STRONG",{});var yRt=s(OCe);kVr=r(yRt,"distilbert"),yRt.forEach(t),SVr=r(wje," \u2014 "),NZ=n(wje,"A",{href:!0});var xRt=s(NZ);RVr=r(xRt,"FlaxDistilBertForTokenClassification"),xRt.forEach(t),PVr=r(wje," (DistilBERT model)"),wje.forEach(t),BVr=i(Fo),o0=n(Fo,"LI",{});var Aje=s(o0);VCe=n(Aje,"STRONG",{});var $Rt=s(VCe);IVr=r($Rt,"electra"),$Rt.forEach(t),NVr=r(Aje," \u2014 "),qZ=n(Aje,"A",{href:!0});var kRt=s(qZ);qVr=r(kRt,"FlaxElectraForTokenClassification"),kRt.forEach(t),jVr=r(Aje," (ELECTRA model)"),Aje.forEach(t),DVr=i(Fo),r0=n(Fo,"LI",{});var Lje=s(r0);XCe=n(Lje,"STRONG",{});var SRt=s(XCe);GVr=r(SRt,"roberta"),SRt.forEach(t),OVr=r(Lje," \u2014 "),jZ=n(Lje,"A",{href:!0});var RRt=s(jZ);VVr=r(RRt,"FlaxRobertaForTokenClassification"),RRt.forEach(t),XVr=r(Lje," (RoBERTa model)"),Lje.forEach(t),zVr=i(Fo),t0=n(Fo,"LI",{});var yje=s(t0);zCe=n(yje,"STRONG",{});var PRt=s(zCe);WVr=r(PRt,"roformer"),PRt.forEach(t),QVr=r(yje," \u2014 "),DZ=n(yje,"A",{href:!0});var BRt=s(DZ);HVr=r(BRt,"FlaxRoFormerForTokenClassification"),BRt.forEach(t),UVr=r(yje," (RoFormer model)"),yje.forEach(t),JVr=i(Fo),a0=n(Fo,"LI",{});var xje=s(a0);WCe=n(xje,"STRONG",{});var IRt=s(WCe);YVr=r(IRt,"xlm-roberta"),IRt.forEach(t),KVr=r(xje," \u2014 "),GZ=n(xje,"A",{href:!0});var NRt=s(GZ);ZVr=r(NRt,"FlaxXLMRobertaForTokenClassification"),NRt.forEach(t),eXr=r(xje," (XLM-RoBERTa model)"),xje.forEach(t),Fo.forEach(t),oXr=i(ai),T(n0.$$.fragment,ai),ai.forEach(t),ti.forEach(t),NGe=i(f),of=n(f,"H2",{class:!0});var XVe=s(of);s0=n(XVe,"A",{id:!0,class:!0,href:!0});var qRt=s(s0);QCe=n(qRt,"SPAN",{});var jRt=s(QCe);T(Bx.$$.fragment,jRt),jRt.forEach(t),qRt.forEach(t),rXr=i(XVe),HCe=n(XVe,"SPAN",{});var DRt=s(HCe);tXr=r(DRt,"FlaxAutoModelForMultipleChoice"),DRt.forEach(t),XVe.forEach(t),qGe=i(f),vr=n(f,"DIV",{class:!0});var ni=s(vr);T(Ix.$$.fragment,ni),aXr=i(ni),rf=n(ni,"P",{});var Joe=s(rf);nXr=r(Joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OZ=n(Joe,"A",{href:!0});var GRt=s(OZ);sXr=r(GRt,"from_pretrained()"),GRt.forEach(t),lXr=r(Joe," class method or the "),VZ=n(Joe,"A",{href:!0});var ORt=s(VZ);iXr=r(ORt,"from_config()"),ORt.forEach(t),dXr=r(Joe,` class
method.`),Joe.forEach(t),cXr=i(ni),Nx=n(ni,"P",{});var zVe=s(Nx);fXr=r(zVe,"This class cannot be instantiated directly using "),UCe=n(zVe,"CODE",{});var VRt=s(UCe);mXr=r(VRt,"__init__()"),VRt.forEach(t),gXr=r(zVe," (throws an error)."),zVe.forEach(t),hXr=i(ni),Ut=n(ni,"DIV",{class:!0});var jA=s(Ut);T(qx.$$.fragment,jA),pXr=i(jA),JCe=n(jA,"P",{});var XRt=s(JCe);_Xr=r(XRt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),XRt.forEach(t),uXr=i(jA),tf=n(jA,"P",{});var Yoe=s(tf);bXr=r(Yoe,`Note:
Loading a model from its configuration file does `),YCe=n(Yoe,"STRONG",{});var zRt=s(YCe);vXr=r(zRt,"not"),zRt.forEach(t),FXr=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=n(Yoe,"A",{href:!0});var WRt=s(XZ);TXr=r(WRt,"from_pretrained()"),WRt.forEach(t),MXr=r(Yoe," to load the model weights."),Yoe.forEach(t),EXr=i(jA),T(l0.$$.fragment,jA),jA.forEach(t),CXr=i(ni),Qr=n(ni,"DIV",{class:!0});var si=s(Qr);T(jx.$$.fragment,si),wXr=i(si),KCe=n(si,"P",{});var QRt=s(KCe);AXr=r(QRt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),QRt.forEach(t),LXr=i(si),Mn=n(si,"P",{});var DA=s(Mn);yXr=r(DA,"The model class to instantiate is selected based on the "),ZCe=n(DA,"CODE",{});var HRt=s(ZCe);xXr=r(HRt,"model_type"),HRt.forEach(t),$Xr=r(DA,` property of the config object (either
passed as an argument or loaded from `),e5e=n(DA,"CODE",{});var URt=s(e5e);kXr=r(URt,"pretrained_model_name_or_path"),URt.forEach(t),SXr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o5e=n(DA,"CODE",{});var JRt=s(o5e);RXr=r(JRt,"pretrained_model_name_or_path"),JRt.forEach(t),PXr=r(DA,":"),DA.forEach(t),BXr=i(si),Ve=n(si,"UL",{});var To=s(Ve);i0=n(To,"LI",{});var $je=s(i0);r5e=n($je,"STRONG",{});var YRt=s(r5e);IXr=r(YRt,"albert"),YRt.forEach(t),NXr=r($je," \u2014 "),zZ=n($je,"A",{href:!0});var KRt=s(zZ);qXr=r(KRt,"FlaxAlbertForMultipleChoice"),KRt.forEach(t),jXr=r($je," (ALBERT model)"),$je.forEach(t),DXr=i(To),d0=n(To,"LI",{});var kje=s(d0);t5e=n(kje,"STRONG",{});var ZRt=s(t5e);GXr=r(ZRt,"bert"),ZRt.forEach(t),OXr=r(kje," \u2014 "),WZ=n(kje,"A",{href:!0});var ePt=s(WZ);VXr=r(ePt,"FlaxBertForMultipleChoice"),ePt.forEach(t),XXr=r(kje," (BERT model)"),kje.forEach(t),zXr=i(To),c0=n(To,"LI",{});var Sje=s(c0);a5e=n(Sje,"STRONG",{});var oPt=s(a5e);WXr=r(oPt,"big_bird"),oPt.forEach(t),QXr=r(Sje," \u2014 "),QZ=n(Sje,"A",{href:!0});var rPt=s(QZ);HXr=r(rPt,"FlaxBigBirdForMultipleChoice"),rPt.forEach(t),UXr=r(Sje," (BigBird model)"),Sje.forEach(t),JXr=i(To),f0=n(To,"LI",{});var Rje=s(f0);n5e=n(Rje,"STRONG",{});var tPt=s(n5e);YXr=r(tPt,"distilbert"),tPt.forEach(t),KXr=r(Rje," \u2014 "),HZ=n(Rje,"A",{href:!0});var aPt=s(HZ);ZXr=r(aPt,"FlaxDistilBertForMultipleChoice"),aPt.forEach(t),ezr=r(Rje," (DistilBERT model)"),Rje.forEach(t),ozr=i(To),m0=n(To,"LI",{});var Pje=s(m0);s5e=n(Pje,"STRONG",{});var nPt=s(s5e);rzr=r(nPt,"electra"),nPt.forEach(t),tzr=r(Pje," \u2014 "),UZ=n(Pje,"A",{href:!0});var sPt=s(UZ);azr=r(sPt,"FlaxElectraForMultipleChoice"),sPt.forEach(t),nzr=r(Pje," (ELECTRA model)"),Pje.forEach(t),szr=i(To),g0=n(To,"LI",{});var Bje=s(g0);l5e=n(Bje,"STRONG",{});var lPt=s(l5e);lzr=r(lPt,"roberta"),lPt.forEach(t),izr=r(Bje," \u2014 "),JZ=n(Bje,"A",{href:!0});var iPt=s(JZ);dzr=r(iPt,"FlaxRobertaForMultipleChoice"),iPt.forEach(t),czr=r(Bje," (RoBERTa model)"),Bje.forEach(t),fzr=i(To),h0=n(To,"LI",{});var Ije=s(h0);i5e=n(Ije,"STRONG",{});var dPt=s(i5e);mzr=r(dPt,"roformer"),dPt.forEach(t),gzr=r(Ije," \u2014 "),YZ=n(Ije,"A",{href:!0});var cPt=s(YZ);hzr=r(cPt,"FlaxRoFormerForMultipleChoice"),cPt.forEach(t),pzr=r(Ije," (RoFormer model)"),Ije.forEach(t),_zr=i(To),p0=n(To,"LI",{});var Nje=s(p0);d5e=n(Nje,"STRONG",{});var fPt=s(d5e);uzr=r(fPt,"xlm-roberta"),fPt.forEach(t),bzr=r(Nje," \u2014 "),KZ=n(Nje,"A",{href:!0});var mPt=s(KZ);vzr=r(mPt,"FlaxXLMRobertaForMultipleChoice"),mPt.forEach(t),Fzr=r(Nje," (XLM-RoBERTa model)"),Nje.forEach(t),To.forEach(t),Tzr=i(si),T(_0.$$.fragment,si),si.forEach(t),ni.forEach(t),jGe=i(f),af=n(f,"H2",{class:!0});var WVe=s(af);u0=n(WVe,"A",{id:!0,class:!0,href:!0});var gPt=s(u0);c5e=n(gPt,"SPAN",{});var hPt=s(c5e);T(Dx.$$.fragment,hPt),hPt.forEach(t),gPt.forEach(t),Mzr=i(WVe),f5e=n(WVe,"SPAN",{});var pPt=s(f5e);Ezr=r(pPt,"FlaxAutoModelForNextSentencePrediction"),pPt.forEach(t),WVe.forEach(t),DGe=i(f),Fr=n(f,"DIV",{class:!0});var li=s(Fr);T(Gx.$$.fragment,li),Czr=i(li),nf=n(li,"P",{});var Koe=s(nf);wzr=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZZ=n(Koe,"A",{href:!0});var _Pt=s(ZZ);Azr=r(_Pt,"from_pretrained()"),_Pt.forEach(t),Lzr=r(Koe," class method or the "),eee=n(Koe,"A",{href:!0});var uPt=s(eee);yzr=r(uPt,"from_config()"),uPt.forEach(t),xzr=r(Koe,` class
method.`),Koe.forEach(t),$zr=i(li),Ox=n(li,"P",{});var QVe=s(Ox);kzr=r(QVe,"This class cannot be instantiated directly using "),m5e=n(QVe,"CODE",{});var bPt=s(m5e);Szr=r(bPt,"__init__()"),bPt.forEach(t),Rzr=r(QVe," (throws an error)."),QVe.forEach(t),Pzr=i(li),Jt=n(li,"DIV",{class:!0});var GA=s(Jt);T(Vx.$$.fragment,GA),Bzr=i(GA),g5e=n(GA,"P",{});var vPt=s(g5e);Izr=r(vPt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vPt.forEach(t),Nzr=i(GA),sf=n(GA,"P",{});var Zoe=s(sf);qzr=r(Zoe,`Note:
Loading a model from its configuration file does `),h5e=n(Zoe,"STRONG",{});var FPt=s(h5e);jzr=r(FPt,"not"),FPt.forEach(t),Dzr=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=n(Zoe,"A",{href:!0});var TPt=s(oee);Gzr=r(TPt,"from_pretrained()"),TPt.forEach(t),Ozr=r(Zoe," to load the model weights."),Zoe.forEach(t),Vzr=i(GA),T(b0.$$.fragment,GA),GA.forEach(t),Xzr=i(li),Hr=n(li,"DIV",{class:!0});var ii=s(Hr);T(Xx.$$.fragment,ii),zzr=i(ii),p5e=n(ii,"P",{});var MPt=s(p5e);Wzr=r(MPt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),MPt.forEach(t),Qzr=i(ii),En=n(ii,"P",{});var OA=s(En);Hzr=r(OA,"The model class to instantiate is selected based on the "),_5e=n(OA,"CODE",{});var EPt=s(_5e);Uzr=r(EPt,"model_type"),EPt.forEach(t),Jzr=r(OA,` property of the config object (either
passed as an argument or loaded from `),u5e=n(OA,"CODE",{});var CPt=s(u5e);Yzr=r(CPt,"pretrained_model_name_or_path"),CPt.forEach(t),Kzr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b5e=n(OA,"CODE",{});var wPt=s(b5e);Zzr=r(wPt,"pretrained_model_name_or_path"),wPt.forEach(t),eWr=r(OA,":"),OA.forEach(t),oWr=i(ii),v5e=n(ii,"UL",{});var APt=s(v5e);v0=n(APt,"LI",{});var qje=s(v0);F5e=n(qje,"STRONG",{});var LPt=s(F5e);rWr=r(LPt,"bert"),LPt.forEach(t),tWr=r(qje," \u2014 "),ree=n(qje,"A",{href:!0});var yPt=s(ree);aWr=r(yPt,"FlaxBertForNextSentencePrediction"),yPt.forEach(t),nWr=r(qje," (BERT model)"),qje.forEach(t),APt.forEach(t),sWr=i(ii),T(F0.$$.fragment,ii),ii.forEach(t),li.forEach(t),GGe=i(f),lf=n(f,"H2",{class:!0});var HVe=s(lf);T0=n(HVe,"A",{id:!0,class:!0,href:!0});var xPt=s(T0);T5e=n(xPt,"SPAN",{});var $Pt=s(T5e);T(zx.$$.fragment,$Pt),$Pt.forEach(t),xPt.forEach(t),lWr=i(HVe),M5e=n(HVe,"SPAN",{});var kPt=s(M5e);iWr=r(kPt,"FlaxAutoModelForImageClassification"),kPt.forEach(t),HVe.forEach(t),OGe=i(f),Tr=n(f,"DIV",{class:!0});var di=s(Tr);T(Wx.$$.fragment,di),dWr=i(di),df=n(di,"P",{});var ere=s(df);cWr=r(ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tee=n(ere,"A",{href:!0});var SPt=s(tee);fWr=r(SPt,"from_pretrained()"),SPt.forEach(t),mWr=r(ere," class method or the "),aee=n(ere,"A",{href:!0});var RPt=s(aee);gWr=r(RPt,"from_config()"),RPt.forEach(t),hWr=r(ere,` class
method.`),ere.forEach(t),pWr=i(di),Qx=n(di,"P",{});var UVe=s(Qx);_Wr=r(UVe,"This class cannot be instantiated directly using "),E5e=n(UVe,"CODE",{});var PPt=s(E5e);uWr=r(PPt,"__init__()"),PPt.forEach(t),bWr=r(UVe," (throws an error)."),UVe.forEach(t),vWr=i(di),Yt=n(di,"DIV",{class:!0});var VA=s(Yt);T(Hx.$$.fragment,VA),FWr=i(VA),C5e=n(VA,"P",{});var BPt=s(C5e);TWr=r(BPt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),BPt.forEach(t),MWr=i(VA),cf=n(VA,"P",{});var ore=s(cf);EWr=r(ore,`Note:
Loading a model from its configuration file does `),w5e=n(ore,"STRONG",{});var IPt=s(w5e);CWr=r(IPt,"not"),IPt.forEach(t),wWr=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),nee=n(ore,"A",{href:!0});var NPt=s(nee);AWr=r(NPt,"from_pretrained()"),NPt.forEach(t),LWr=r(ore," to load the model weights."),ore.forEach(t),yWr=i(VA),T(M0.$$.fragment,VA),VA.forEach(t),xWr=i(di),Ur=n(di,"DIV",{class:!0});var ci=s(Ur);T(Ux.$$.fragment,ci),$Wr=i(ci),A5e=n(ci,"P",{});var qPt=s(A5e);kWr=r(qPt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qPt.forEach(t),SWr=i(ci),Cn=n(ci,"P",{});var XA=s(Cn);RWr=r(XA,"The model class to instantiate is selected based on the "),L5e=n(XA,"CODE",{});var jPt=s(L5e);PWr=r(jPt,"model_type"),jPt.forEach(t),BWr=r(XA,` property of the config object (either
passed as an argument or loaded from `),y5e=n(XA,"CODE",{});var DPt=s(y5e);IWr=r(DPt,"pretrained_model_name_or_path"),DPt.forEach(t),NWr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=n(XA,"CODE",{});var GPt=s(x5e);qWr=r(GPt,"pretrained_model_name_or_path"),GPt.forEach(t),jWr=r(XA,":"),XA.forEach(t),DWr=i(ci),Jx=n(ci,"UL",{});var JVe=s(Jx);E0=n(JVe,"LI",{});var jje=s(E0);$5e=n(jje,"STRONG",{});var OPt=s($5e);GWr=r(OPt,"beit"),OPt.forEach(t),OWr=r(jje," \u2014 "),see=n(jje,"A",{href:!0});var VPt=s(see);VWr=r(VPt,"FlaxBeitForImageClassification"),VPt.forEach(t),XWr=r(jje," (BEiT model)"),jje.forEach(t),zWr=i(JVe),C0=n(JVe,"LI",{});var Dje=s(C0);k5e=n(Dje,"STRONG",{});var XPt=s(k5e);WWr=r(XPt,"vit"),XPt.forEach(t),QWr=r(Dje," \u2014 "),lee=n(Dje,"A",{href:!0});var zPt=s(lee);HWr=r(zPt,"FlaxViTForImageClassification"),zPt.forEach(t),UWr=r(Dje," (ViT model)"),Dje.forEach(t),JVe.forEach(t),JWr=i(ci),T(w0.$$.fragment,ci),ci.forEach(t),di.forEach(t),VGe=i(f),ff=n(f,"H2",{class:!0});var YVe=s(ff);A0=n(YVe,"A",{id:!0,class:!0,href:!0});var WPt=s(A0);S5e=n(WPt,"SPAN",{});var QPt=s(S5e);T(Yx.$$.fragment,QPt),QPt.forEach(t),WPt.forEach(t),YWr=i(YVe),R5e=n(YVe,"SPAN",{});var HPt=s(R5e);KWr=r(HPt,"FlaxAutoModelForVision2Seq"),HPt.forEach(t),YVe.forEach(t),XGe=i(f),Mr=n(f,"DIV",{class:!0});var fi=s(Mr);T(Kx.$$.fragment,fi),ZWr=i(fi),mf=n(fi,"P",{});var rre=s(mf);eQr=r(rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iee=n(rre,"A",{href:!0});var UPt=s(iee);oQr=r(UPt,"from_pretrained()"),UPt.forEach(t),rQr=r(rre," class method or the "),dee=n(rre,"A",{href:!0});var JPt=s(dee);tQr=r(JPt,"from_config()"),JPt.forEach(t),aQr=r(rre,` class
method.`),rre.forEach(t),nQr=i(fi),Zx=n(fi,"P",{});var KVe=s(Zx);sQr=r(KVe,"This class cannot be instantiated directly using "),P5e=n(KVe,"CODE",{});var YPt=s(P5e);lQr=r(YPt,"__init__()"),YPt.forEach(t),iQr=r(KVe," (throws an error)."),KVe.forEach(t),dQr=i(fi),Kt=n(fi,"DIV",{class:!0});var zA=s(Kt);T(e$.$$.fragment,zA),cQr=i(zA),B5e=n(zA,"P",{});var KPt=s(B5e);fQr=r(KPt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KPt.forEach(t),mQr=i(zA),gf=n(zA,"P",{});var tre=s(gf);gQr=r(tre,`Note:
Loading a model from its configuration file does `),I5e=n(tre,"STRONG",{});var ZPt=s(I5e);hQr=r(ZPt,"not"),ZPt.forEach(t),pQr=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cee=n(tre,"A",{href:!0});var eBt=s(cee);_Qr=r(eBt,"from_pretrained()"),eBt.forEach(t),uQr=r(tre," to load the model weights."),tre.forEach(t),bQr=i(zA),T(L0.$$.fragment,zA),zA.forEach(t),vQr=i(fi),Jr=n(fi,"DIV",{class:!0});var mi=s(Jr);T(o$.$$.fragment,mi),FQr=i(mi),N5e=n(mi,"P",{});var oBt=s(N5e);TQr=r(oBt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oBt.forEach(t),MQr=i(mi),wn=n(mi,"P",{});var WA=s(wn);EQr=r(WA,"The model class to instantiate is selected based on the "),q5e=n(WA,"CODE",{});var rBt=s(q5e);CQr=r(rBt,"model_type"),rBt.forEach(t),wQr=r(WA,` property of the config object (either
passed as an argument or loaded from `),j5e=n(WA,"CODE",{});var tBt=s(j5e);AQr=r(tBt,"pretrained_model_name_or_path"),tBt.forEach(t),LQr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D5e=n(WA,"CODE",{});var aBt=s(D5e);yQr=r(aBt,"pretrained_model_name_or_path"),aBt.forEach(t),xQr=r(WA,":"),WA.forEach(t),$Qr=i(mi),G5e=n(mi,"UL",{});var nBt=s(G5e);y0=n(nBt,"LI",{});var Gje=s(y0);O5e=n(Gje,"STRONG",{});var sBt=s(O5e);kQr=r(sBt,"vision-encoder-decoder"),sBt.forEach(t),SQr=r(Gje," \u2014 "),fee=n(Gje,"A",{href:!0});var lBt=s(fee);RQr=r(lBt,"FlaxVisionEncoderDecoderModel"),lBt.forEach(t),PQr=r(Gje," (Vision Encoder decoder model)"),Gje.forEach(t),nBt.forEach(t),BQr=i(mi),T(x0.$$.fragment,mi),mi.forEach(t),fi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(fNt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Ln,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.AutoTokenizer"),c(vi,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertModel"),c(Tf,"id","extending-the-auto-classes"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#extending-the-auto-classes"),c(Fi,"class","relative group"),c(Ef,"id","transformers.AutoConfig"),c(Ef,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ef,"href","#transformers.AutoConfig"),c(Ti,"class","relative group"),c(Ek,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Ck,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertConfig"),c(wk,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartConfig"),c(Ak,"href","/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitConfig"),c(Lk,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertConfig"),c(yk,"href","/docs/transformers/pr_17146/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(xk,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdConfig"),c($k,"href","/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(kk,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Sk,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Rk,"href","/docs/transformers/pr_17146/en/model_doc/bloom#transformers.BloomConfig"),c(Pk,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertConfig"),c(Bk,"href","/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineConfig"),c(Ik,"href","/docs/transformers/pr_17146/en/model_doc/clip#transformers.CLIPConfig"),c(Nk,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertConfig"),c(qk,"href","/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextConfig"),c(jk,"href","/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLConfig"),c(Dk,"href","/docs/transformers/pr_17146/en/model_doc/cvt#transformers.CvtConfig"),c(Gk,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Ok,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Vk,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Xk,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaConfig"),c(zk,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Wk,"href","/docs/transformers/pr_17146/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Qk,"href","/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTConfig"),c(Hk,"href","/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrConfig"),c(Uk,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Jk,"href","/docs/transformers/pr_17146/en/model_doc/dpr#transformers.DPRConfig"),c(Yk,"href","/docs/transformers/pr_17146/en/model_doc/dpt#transformers.DPTConfig"),c(Kk,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraConfig"),c(Zk,"href","/docs/transformers/pr_17146/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(eS,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertConfig"),c(oS,"href","/docs/transformers/pr_17146/en/model_doc/flava#transformers.FlavaConfig"),c(rS,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetConfig"),c(tS,"href","/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTConfig"),c(aS,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelConfig"),c(nS,"href","/docs/transformers/pr_17146/en/model_doc/glpn#transformers.GLPNConfig"),c(sS,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Config"),c(lS,"href","/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(iS,"href","/docs/transformers/pr_17146/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(dS,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJConfig"),c(cS,"href","/docs/transformers/pr_17146/en/model_doc/greaselm#transformers.GreaseLMConfig"),c(fS,"href","/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertConfig"),c(mS,"href","/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertConfig"),c(gS,"href","/docs/transformers/pr_17146/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(hS,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(pS,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(_S,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(uS,"href","/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDConfig"),c(bS,"href","/docs/transformers/pr_17146/en/model_doc/levit#transformers.LevitConfig"),c(vS,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerConfig"),c(FS,"href","/docs/transformers/pr_17146/en/model_doc/luke#transformers.LukeConfig"),c(TS,"href","/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertConfig"),c(MS,"href","/docs/transformers/pr_17146/en/model_doc/m2m_100#transformers.M2M100Config"),c(ES,"href","/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianConfig"),c(CS,"href","/docs/transformers/pr_17146/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(wS,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartConfig"),c(AS,"href","/docs/transformers/pr_17146/en/model_doc/mctct#transformers.MCTCTConfig"),c(LS,"href","/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(yS,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(xS,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetConfig"),c($S,"href","/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5Config"),c(kS,"href","/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(SS,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(RS,"href","/docs/transformers/pr_17146/en/model_doc/opt#transformers.OPTConfig"),c(PS,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusConfig"),c(BS,"href","/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverConfig"),c(IS,"href","/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartConfig"),c(NS,"href","/docs/transformers/pr_17146/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(qS,"href","/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(jS,"href","/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(DS,"href","/docs/transformers/pr_17146/en/model_doc/rag#transformers.RagConfig"),c(GS,"href","/docs/transformers/pr_17146/en/model_doc/realm#transformers.RealmConfig"),c(OS,"href","/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerConfig"),c(VS,"href","/docs/transformers/pr_17146/en/model_doc/regnet#transformers.RegNetConfig"),c(XS,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertConfig"),c(zS,"href","/docs/transformers/pr_17146/en/model_doc/resnet#transformers.ResNetConfig"),c(WS,"href","/docs/transformers/pr_17146/en/model_doc/retribert#transformers.RetriBertConfig"),c(QS,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaConfig"),c(HS,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerConfig"),c(US,"href","/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerConfig"),c(JS,"href","/docs/transformers/pr_17146/en/model_doc/sew#transformers.SEWConfig"),c(YS,"href","/docs/transformers/pr_17146/en/model_doc/sew-d#transformers.SEWDConfig"),c(KS,"href","/docs/transformers/pr_17146/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(ZS,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(eR,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(oR,"href","/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterConfig"),c(rR,"href","/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(tR,"href","/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinConfig"),c(aR,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Config"),c(nR,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasConfig"),c(sR,"href","/docs/transformers/pr_17146/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(lR,"href","/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(iR,"href","/docs/transformers/pr_17146/en/model_doc/trocr#transformers.TrOCRConfig"),c(dR,"href","/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(cR,"href","/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(fR,"href","/docs/transformers/pr_17146/en/model_doc/van#transformers.VanConfig"),c(mR,"href","/docs/transformers/pr_17146/en/model_doc/vilt#transformers.ViltConfig"),c(gR,"href","/docs/transformers/pr_17146/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(hR,"href","/docs/transformers/pr_17146/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(pR,"href","/docs/transformers/pr_17146/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(_R,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTConfig"),c(uR,"href","/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(bR,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(vR,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(FR,"href","/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMConfig"),c(TR,"href","/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMConfig"),c(MR,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMConfig"),c(ER,"href","/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(CR,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(wR,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(AR,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetConfig"),c(LR,"href","/docs/transformers/pr_17146/en/model_doc/yolos#transformers.YolosConfig"),c(yR,"href","/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kg,"id","transformers.AutoTokenizer"),c(kg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kg,"href","#transformers.AutoTokenizer"),c(Ei,"class","relative group"),c(xR,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c($R,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertTokenizer"),c(kR,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(SR,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartTokenizer"),c(RR,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartTokenizerFast"),c(PR,"href","/docs/transformers/pr_17146/en/model_doc/barthez#transformers.BarthezTokenizer"),c(BR,"href","/docs/transformers/pr_17146/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(IR,"href","/docs/transformers/pr_17146/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(NR,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertTokenizer"),c(qR,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertTokenizerFast"),c(jR,"href","/docs/transformers/pr_17146/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(DR,"href","/docs/transformers/pr_17146/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(GR,"href","/docs/transformers/pr_17146/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(OR,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(VR,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(XR,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(zR,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(WR,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(QR,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(HR,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(UR,"href","/docs/transformers/pr_17146/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(JR,"href","/docs/transformers/pr_17146/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(YR,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertTokenizer"),c(KR,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineTokenizer"),c(eP,"href","/docs/transformers/pr_17146/en/model_doc/clip#transformers.CLIPTokenizer"),c(oP,"href","/docs/transformers/pr_17146/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(rP,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(tP,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(aP,"href","/docs/transformers/pr_17146/en/model_doc/cpm#transformers.CpmTokenizer"),c(nP,"href","/docs/transformers/pr_17146/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(sP,"href","/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(lP,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaTokenizer"),c(iP,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dP,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaTokenizer"),c(cP,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(fP,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(mP,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(gP,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(hP,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(pP,"href","/docs/transformers/pr_17146/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(_P,"href","/docs/transformers/pr_17146/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(uP,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraTokenizer"),c(bP,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(vP,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(FP,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetTokenizer"),c(TP,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(MP,"href","/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(EP,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelTokenizer"),c(CP,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(wP,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(AP,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(LP,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yP,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(xP,"href","/docs/transformers/pr_17146/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c($P,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kP,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(SP,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RP,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PP,"href","/docs/transformers/pr_17146/en/model_doc/herbert#transformers.HerbertTokenizer"),c(BP,"href","/docs/transformers/pr_17146/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(IP,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(NP,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qP,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jP,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(DP,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(GP,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(OP,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(VP,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(XP,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(zP,"href","/docs/transformers/pr_17146/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(WP,"href","/docs/transformers/pr_17146/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(QP,"href","/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDTokenizer"),c(HP,"href","/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDTokenizerFast"),c(UP,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerTokenizer"),c(JP,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(YP,"href","/docs/transformers/pr_17146/en/model_doc/luke#transformers.LukeTokenizer"),c(KP,"href","/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(ZP,"href","/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(eB,"href","/docs/transformers/pr_17146/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(oB,"href","/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianTokenizer"),c(rB,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartTokenizer"),c(tB,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(aB,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(nB,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(sB,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertTokenizer"),c(lB,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertTokenizerFast"),c(iB,"href","/docs/transformers/pr_17146/en/model_doc/mluke#transformers.MLukeTokenizer"),c(dB,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(cB,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(fB,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(mB,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(gB,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Tokenizer"),c(hB,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5TokenizerFast"),c(pB,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertTokenizer"),c(_B,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(uB,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(bB,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(vB,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(FB,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(TB,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(MB,"href","/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(EB,"href","/docs/transformers/pr_17146/en/model_doc/phobert#transformers.PhobertTokenizer"),c(CB,"href","/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartTokenizer"),c(wB,"href","/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(AB,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertTokenizer"),c(LB,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertTokenizerFast"),c(yB,"href","/docs/transformers/pr_17146/en/model_doc/rag#transformers.RagTokenizer"),c(xB,"href","/docs/transformers/pr_17146/en/model_doc/realm#transformers.RealmTokenizer"),c($B,"href","/docs/transformers/pr_17146/en/model_doc/realm#transformers.RealmTokenizerFast"),c(kB,"href","/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerTokenizer"),c(SB,"href","/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(RB,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertTokenizer"),c(PB,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(BB,"href","/docs/transformers/pr_17146/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(IB,"href","/docs/transformers/pr_17146/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(NB,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qB,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jB,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(DB,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(GB,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(OB,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(VB,"href","/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterTokenizer"),c(XB,"href","/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(zB,"href","/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(WB,"href","/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(QB,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Tokenizer"),c(HB,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5TokenizerFast"),c(UB,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasTokenizer"),c(JB,"href","/docs/transformers/pr_17146/en/model_doc/tapex#transformers.TapexTokenizer"),c(YB,"href","/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(KB,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertTokenizer"),c(ZB,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertTokenizerFast"),c(eI,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(oI,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(rI,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(tI,"href","/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMTokenizer"),c(aI,"href","/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(nI,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMTokenizer"),c(sI,"href","/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(lI,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(iI,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(dI,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cI,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fI,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(mI,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(gI,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertTokenizer"),c(hI,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gh,"id","transformers.AutoFeatureExtractor"),c(gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gh,"href","#transformers.AutoFeatureExtractor"),c(Ci,"class","relative group"),c(pI,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(_I,"href","/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(uI,"href","/docs/transformers/pr_17146/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(bI,"href","/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vI,"href","/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(FI,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TI,"href","/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(MI,"href","/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(EI,"href","/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(CI,"href","/docs/transformers/pr_17146/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(wI,"href","/docs/transformers/pr_17146/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(AI,"href","/docs/transformers/pr_17146/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(LI,"href","/docs/transformers/pr_17146/en/model_doc/greaselm#transformers.GreaseLMFeatureExtractor"),c(yI,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xI,"href","/docs/transformers/pr_17146/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c($I,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(kI,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(SI,"href","/docs/transformers/pr_17146/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(RI,"href","/docs/transformers/pr_17146/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(PI,"href","/docs/transformers/pr_17146/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(BI,"href","/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(II,"href","/docs/transformers/pr_17146/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(NI,"href","/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(qI,"href","/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(jI,"href","/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(DI,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(GI,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(OI,"href","/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(VI,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(XI,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(zI,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(WI,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(QI,"href","/docs/transformers/pr_17146/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uh,"id","transformers.AutoProcessor"),c(Uh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uh,"href","#transformers.AutoProcessor"),c(wi,"class","relative group"),c(HI,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(UI,"href","/docs/transformers/pr_17146/en/model_doc/clip#transformers.CLIPProcessor"),c(JI,"href","/docs/transformers/pr_17146/en/model_doc/greaselm#transformers.GreaseLMProcessor"),c(YI,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(KI,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(ZI,"href","/docs/transformers/pr_17146/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(eN,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(oN,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rN,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(tN,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(aN,"href","/docs/transformers/pr_17146/en/model_doc/trocr#transformers.TrOCRProcessor"),c(nN,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(sN,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(lN,"href","/docs/transformers/pr_17146/en/model_doc/vilt#transformers.ViltProcessor"),c(iN,"href","/docs/transformers/pr_17146/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(dN,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(cN,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(fN,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_p,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(up,"id","transformers.AutoModel"),c(up,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(up,"href","#transformers.AutoModel"),c(Li,"class","relative group"),c(mN,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gN,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hN,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pN,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertModel"),c(_N,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartModel"),c(uN,"href","/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitModel"),c(bN,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertModel"),c(vN,"href","/docs/transformers/pr_17146/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(FN,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdModel"),c(TN,"href","/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(MN,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(EN,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(CN,"href","/docs/transformers/pr_17146/en/model_doc/bloom#transformers.BloomModel"),c(wN,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertModel"),c(AN,"href","/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineModel"),c(LN,"href","/docs/transformers/pr_17146/en/model_doc/clip#transformers.CLIPModel"),c(yN,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertModel"),c(xN,"href","/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextModel"),c($N,"href","/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLModel"),c(kN,"href","/docs/transformers/pr_17146/en/model_doc/cvt#transformers.CvtModel"),c(SN,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(RN,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(PN,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(BN,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaModel"),c(IN,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(NN,"href","/docs/transformers/pr_17146/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(qN,"href","/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTModel"),c(jN,"href","/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrModel"),c(DN,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertModel"),c(GN,"href","/docs/transformers/pr_17146/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(ON,"href","/docs/transformers/pr_17146/en/model_doc/dpt#transformers.DPTModel"),c(VN,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraModel"),c(XN,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertModel"),c(zN,"href","/docs/transformers/pr_17146/en/model_doc/flava#transformers.FlavaModel"),c(WN,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetModel"),c(QN,"href","/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTModel"),c(HN,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelModel"),c(UN,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelBaseModel"),c(JN,"href","/docs/transformers/pr_17146/en/model_doc/glpn#transformers.GLPNModel"),c(YN,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2Model"),c(KN,"href","/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(ZN,"href","/docs/transformers/pr_17146/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(eq,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJModel"),c(oq,"href","/docs/transformers/pr_17146/en/model_doc/greaselm#transformers.GreaseLMModel"),c(rq,"href","/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertModel"),c(tq,"href","/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertModel"),c(aq,"href","/docs/transformers/pr_17146/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(nq,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(sq,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(lq,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(iq,"href","/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDModel"),c(dq,"href","/docs/transformers/pr_17146/en/model_doc/levit#transformers.LevitModel"),c(cq,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerModel"),c(fq,"href","/docs/transformers/pr_17146/en/model_doc/luke#transformers.LukeModel"),c(mq,"href","/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertModel"),c(gq,"href","/docs/transformers/pr_17146/en/model_doc/m2m_100#transformers.M2M100Model"),c(hq,"href","/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianModel"),c(pq,"href","/docs/transformers/pr_17146/en/model_doc/maskformer#transformers.MaskFormerModel"),c(_q,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartModel"),c(uq,"href","/docs/transformers/pr_17146/en/model_doc/mctct#transformers.MCTCTModel"),c(bq,"href","/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(vq,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Fq,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetModel"),c(Tq,"href","/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5Model"),c(Mq,"href","/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Eq,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Cq,"href","/docs/transformers/pr_17146/en/model_doc/opt#transformers.OPTModel"),c(wq,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusModel"),c(Aq,"href","/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverModel"),c(Lq,"href","/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartModel"),c(yq,"href","/docs/transformers/pr_17146/en/model_doc/poolformer#transformers.PoolFormerModel"),c(xq,"href","/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetModel"),c($q,"href","/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertModel"),c(kq,"href","/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerModel"),c(Sq,"href","/docs/transformers/pr_17146/en/model_doc/regnet#transformers.RegNetModel"),c(Rq,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertModel"),c(Pq,"href","/docs/transformers/pr_17146/en/model_doc/resnet#transformers.ResNetModel"),c(Bq,"href","/docs/transformers/pr_17146/en/model_doc/retribert#transformers.RetriBertModel"),c(Iq,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaModel"),c(Nq,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerModel"),c(qq,"href","/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerModel"),c(jq,"href","/docs/transformers/pr_17146/en/model_doc/sew#transformers.SEWModel"),c(Dq,"href","/docs/transformers/pr_17146/en/model_doc/sew-d#transformers.SEWDModel"),c(Gq,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Oq,"href","/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterModel"),c(Vq,"href","/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Xq,"href","/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinModel"),c(zq,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5Model"),c(Wq,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasModel"),c(Qq,"href","/docs/transformers/pr_17146/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Hq,"href","/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Uq,"href","/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Jq,"href","/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Yq,"href","/docs/transformers/pr_17146/en/model_doc/van#transformers.VanModel"),c(Kq,"href","/docs/transformers/pr_17146/en/model_doc/vilt#transformers.ViltModel"),c(Zq,"href","/docs/transformers/pr_17146/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(ej,"href","/docs/transformers/pr_17146/en/model_doc/visual_bert#transformers.VisualBertModel"),c(oj,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTModel"),c(rj,"href","/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(tj,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(aj,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(nj,"href","/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMModel"),c(sj,"href","/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMModel"),c(lj,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMModel"),c(ij,"href","/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(dj,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(cj,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(fj,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetModel"),c(mj,"href","/docs/transformers/pr_17146/en/model_doc/yolos#transformers.YolosModel"),c(gj,"href","/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bu,"id","transformers.AutoModelForPreTraining"),c(bu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bu,"href","#transformers.AutoModelForPreTraining"),c($i,"class","relative group"),c(hj,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pj,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_j,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uj,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForPreTraining"),c(bj,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(vj,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForPreTraining"),c(Fj,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Tj,"href","/docs/transformers/pr_17146/en/model_doc/bloom#transformers.BloomForCausalLM"),c(Mj,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Cj,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(wj,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(yj,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForPreTraining"),c(xj,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c($j,"href","/docs/transformers/pr_17146/en/model_doc/flava#transformers.FlavaForPreTraining"),c(kj,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Sj,"href","/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Rj,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Pj,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Bj,"href","/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(qj,"href","/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(jj,"href","/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Dj,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Gj,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Vj,"href","/docs/transformers/pr_17146/en/model_doc/retribert#transformers.RetriBertModel"),c(Xj,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(zj,"href","/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(Wj,"href","/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Jj,"href","/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Yj,"href","/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Kj,"href","/docs/transformers/pr_17146/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Zj,"href","/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(eD,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(oD,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(rD,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(tD,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(aD,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(nD,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f1,"id","transformers.AutoModelForCausalLM"),c(f1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f1,"href","#transformers.AutoModelForCausalLM"),c(Ri,"class","relative group"),c(sD,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lD,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iD,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dD,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForCausalLM"),c(cD,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertLMHeadModel"),c(fD,"href","/docs/transformers/pr_17146/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(mD,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(gD,"href","/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(hD,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(pD,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(_D,"href","/docs/transformers/pr_17146/en/model_doc/bloom#transformers.BloomForCausalLM"),c(uD,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(bD,"href","/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(vD,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(FD,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForCausalLM"),c(TD,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(MD,"href","/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(ED,"href","/docs/transformers/pr_17146/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(CD,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(wD,"href","/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianForCausalLM"),c(AD,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartForCausalLM"),c(LD,"href","/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(yD,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(xD,"href","/docs/transformers/pr_17146/en/model_doc/opt#transformers.OPTForCausalLM"),c($D,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(kD,"href","/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(SD,"href","/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(RD,"href","/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(PD,"href","/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(BD,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(ID,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(ND,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(qD,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(jD,"href","/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(DD,"href","/docs/transformers/pr_17146/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(GD,"href","/docs/transformers/pr_17146/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(OD,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(VD,"href","/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(XD,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(zD,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(WD,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z1,"id","transformers.AutoModelForMaskedLM"),c(Z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z1,"href","#transformers.AutoModelForMaskedLM"),c(Ii,"class","relative group"),c(QD,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HD,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UD,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JD,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(YD,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(KD,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(eG,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(oG,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(rG,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(tG,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(aG,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(nG,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(sG,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(lG,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(iG,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(dG,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(cG,"href","/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(fG,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(mG,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(gG,"href","/docs/transformers/pr_17146/en/model_doc/luke#transformers.LukeForMaskedLM"),c(hG,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(pG,"href","/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(_G,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(uG,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(bG,"href","/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(vG,"href","/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(FG,"href","/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(TG,"href","/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(MG,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(EG,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(CG,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(wG,"href","/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(AG,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(LG,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(yG,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(xG,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c($G,"href","/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jb,"id","transformers.AutoModelForSeq2SeqLM"),c(jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jb,"href","#transformers.AutoModelForSeq2SeqLM"),c(ji,"class","relative group"),c(kG,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SG,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RG,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PG,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(BG,"href","/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(IG,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(NG,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(qG,"href","/docs/transformers/pr_17146/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(jG,"href","/docs/transformers/pr_17146/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(DG,"href","/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(GG,"href","/docs/transformers/pr_17146/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(OG,"href","/docs/transformers/pr_17146/en/model_doc/marian#transformers.MarianMTModel"),c(VG,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(XG,"href","/docs/transformers/pr_17146/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(zG,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(WG,"href","/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(QG,"href","/docs/transformers/pr_17146/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(HG,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(UG,"href","/docs/transformers/pr_17146/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n2,"id","transformers.AutoModelForSequenceClassification"),c(n2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n2,"href","#transformers.AutoModelForSequenceClassification"),c(Oi,"class","relative group"),c(JG,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YG,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KG,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZG,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(mO,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(gO,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(hO,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(pO,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(_O,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(uO,"href","/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(bO,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(vO,"href","/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(FO,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(TO,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(MO,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(EO,"href","/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDForSequenceClassification"),c(CO,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(wO,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(AO,"href","/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(LO,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(yO,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(xO,"href","/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c($O,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(kO,"href","/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(SO,"href","/docs/transformers/pr_17146/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(RO,"href","/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(PO,"href","/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(BO,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(IO,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(NO,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(qO,"href","/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(jO,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(DO,"href","/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(GO,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(OO,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(VO,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(XO,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(zO,"href","/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r4,"id","transformers.AutoModelForMultipleChoice"),c(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r4,"href","#transformers.AutoModelForMultipleChoice"),c(zi,"class","relative group"),c(WO,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QO,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HO,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UO,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(JO,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForMultipleChoice"),c(YO,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(KO,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(ZO,"href","/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(eV,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(oV,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(rV,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(tV,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(aV,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(nV,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(sV,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(lV,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(iV,"href","/docs/transformers/pr_17146/en/model_doc/greaselm#transformers.GreaseLMForMultipleChoice"),c(dV,"href","/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(cV,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(fV,"href","/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(mV,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(gV,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(hV,"href","/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(pV,"href","/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(_V,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(uV,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(bV,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(vV,"href","/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(FV,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(TV,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(MV,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(EV,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(CV,"href","/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I4,"id","transformers.AutoModelForNextSentencePrediction"),c(I4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I4,"href","#transformers.AutoModelForNextSentencePrediction"),c(Hi,"class","relative group"),c(wV,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AV,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LV,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yV,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(xV,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c($V,"href","/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(kV,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(SV,"href","/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z4,"id","transformers.AutoModelForTokenClassification"),c(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z4,"href","#transformers.AutoModelForTokenClassification"),c(Yi,"class","relative group"),c(RV,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PV,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BV,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(NV,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForTokenClassification"),c(qV,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(jV,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(DV,"href","/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineForTokenClassification"),c(GV,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(OV,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(VV,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(XV,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(zV,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(WV,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(QV,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(HV,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(UV,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(JV,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(YV,"href","/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(KV,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(ZV,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(eX,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(oX,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(rX,"href","/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(tX,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(aX,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(nX,"href","/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(sX,"href","/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(lX,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(iX,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(dX,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(cX,"href","/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(fX,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(mX,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(gX,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(hX,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(pX,"href","/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xv,"id","transformers.AutoModelForQuestionAnswering"),c(xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xv,"href","#transformers.AutoModelForQuestionAnswering"),c(ed,"class","relative group"),c(_X,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bX,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vX,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_17146/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_17146/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(LX,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(yX,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(xX,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c($X,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(kX,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(SX,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(RX,"href","/docs/transformers/pr_17146/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(PX,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(BX,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(IX,"href","/docs/transformers/pr_17146/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(NX,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(qX,"href","/docs/transformers/pr_17146/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(jX,"href","/docs/transformers/pr_17146/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(DX,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(GX,"href","/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(OX,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(VX,"href","/docs/transformers/pr_17146/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(XX,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(zX,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(WX,"href","/docs/transformers/pr_17146/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(QX,"href","/docs/transformers/pr_17146/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(HX,"href","/docs/transformers/pr_17146/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(UX,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(JX,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(YX,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(KX,"href","/docs/transformers/pr_17146/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(ZX,"href","/docs/transformers/pr_17146/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(ez,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(oz,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(rz,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(tz,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(az,"href","/docs/transformers/pr_17146/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vF,"id","transformers.AutoModelForTableQuestionAnswering"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(td,"class","relative group"),c(nz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iz,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CF,"id","transformers.AutoModelForImageClassification"),c(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CF,"href","#transformers.AutoModelForImageClassification"),c(sd,"class","relative group"),c(dz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mz,"href","/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitForImageClassification"),c(gz,"href","/docs/transformers/pr_17146/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(hz,"href","/docs/transformers/pr_17146/en/model_doc/cvt#transformers.CvtForImageClassification"),c(pz,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(_z,"href","/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTForImageClassification"),c(uz,"href","/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(bz,"href","/docs/transformers/pr_17146/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(vz,"href","/docs/transformers/pr_17146/en/model_doc/levit#transformers.LevitForImageClassification"),c(Fz,"href","/docs/transformers/pr_17146/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(Tz,"href","/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(Mz,"href","/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(Ez,"href","/docs/transformers/pr_17146/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(Cz,"href","/docs/transformers/pr_17146/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(wz,"href","/docs/transformers/pr_17146/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(Az,"href","/docs/transformers/pr_17146/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(Lz,"href","/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(yz,"href","/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinForImageClassification"),c(xz,"href","/docs/transformers/pr_17146/en/model_doc/van#transformers.VanForImageClassification"),c($z,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForVision2Seq"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForVision2Seq"),c(dd,"class","relative group"),c(kz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pz,"href","/docs/transformers/pr_17146/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zF,"id","transformers.AutoModelForAudioClassification"),c(zF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zF,"href","#transformers.AutoModelForAudioClassification"),c(md,"class","relative group"),c(Bz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(jz,"href","/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(Dz,"href","/docs/transformers/pr_17146/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(Gz,"href","/docs/transformers/pr_17146/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(Oz,"href","/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(Vz,"href","/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(Xz,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(zz,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(Wz,"href","/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a6,"id","transformers.AutoModelForAudioFrameClassification"),c(a6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a6,"href","#transformers.AutoModelForAudioFrameClassification"),c(pd,"class","relative group"),c(Qz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uz,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jz,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(Yz,"href","/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(Kz,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Zz,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(eW,"href","/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g6,"id","transformers.AutoModelForCTC"),c(g6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g6,"href","#transformers.AutoModelForCTC"),c(bd,"class","relative group"),c(oW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aW,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(nW,"href","/docs/transformers/pr_17146/en/model_doc/hubert#transformers.HubertForCTC"),c(sW,"href","/docs/transformers/pr_17146/en/model_doc/mctct#transformers.MCTCTForCTC"),c(lW,"href","/docs/transformers/pr_17146/en/model_doc/sew#transformers.SEWForCTC"),c(iW,"href","/docs/transformers/pr_17146/en/model_doc/sew-d#transformers.SEWDForCTC"),c(dW,"href","/docs/transformers/pr_17146/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(cW,"href","/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(fW,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(mW,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(gW,"href","/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L6,"id","transformers.AutoModelForSpeechSeq2Seq"),c(L6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L6,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Td,"class","relative group"),c(hW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_W,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uW,"href","/docs/transformers/pr_17146/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(bW,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R6,"id","transformers.AutoModelForAudioXVector"),c(R6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R6,"href","#transformers.AutoModelForAudioXVector"),c(Cd,"class","relative group"),c(vW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(EW,"href","/docs/transformers/pr_17146/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(CW,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(wW,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(AW,"href","/docs/transformers/pr_17146/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O6,"id","transformers.AutoModelForMaskedImageModeling"),c(O6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O6,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ld,"class","relative group"),c(LW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($W,"href","/docs/transformers/pr_17146/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(kW,"href","/docs/transformers/pr_17146/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(SW,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U6,"id","transformers.AutoModelForObjectDetection"),c(U6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U6,"href","#transformers.AutoModelForObjectDetection"),c(kd,"class","relative group"),c(RW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IW,"href","/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrForObjectDetection"),c(NW,"href","/docs/transformers/pr_17146/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oT,"id","transformers.AutoModelForImageSegmentation"),c(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oT,"href","#transformers.AutoModelForImageSegmentation"),c(Pd,"class","relative group"),c(qW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GW,"href","/docs/transformers/pr_17146/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sT,"id","transformers.AutoModelForSemanticSegmentation"),c(sT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Nd,"class","relative group"),c(OW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zW,"href","/docs/transformers/pr_17146/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(WW,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(QW,"href","/docs/transformers/pr_17146/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(HW,"href","/docs/transformers/pr_17146/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hT,"id","transformers.AutoModelForInstanceSegmentation"),c(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Dd,"class","relative group"),c(UW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KW,"href","/docs/transformers/pr_17146/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vT,"id","transformers.TFAutoModel"),c(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vT,"href","#transformers.TFAutoModel"),c(Vd,"class","relative group"),c(ZW,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eQ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oQ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rQ,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertModel"),c(tQ,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.TFBartModel"),c(aQ,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertModel"),c(nQ,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(sQ,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(lQ,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertModel"),c(iQ,"href","/docs/transformers/pr_17146/en/model_doc/clip#transformers.TFCLIPModel"),c(dQ,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertModel"),c(cQ,"href","/docs/transformers/pr_17146/en/model_doc/convnext#transformers.TFConvNextModel"),c(fQ,"href","/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.TFCTRLModel"),c(mQ,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(gQ,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.TFDebertaModel"),c(hQ,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(pQ,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(_Q,"href","/docs/transformers/pr_17146/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(uQ,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraModel"),c(bQ,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(vQ,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelModel"),c(FQ,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(TQ,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.TFGPT2Model"),c(MQ,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.TFGPTJModel"),c(EQ,"href","/docs/transformers/pr_17146/en/model_doc/hubert#transformers.TFHubertModel"),c(CQ,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(wQ,"href","/docs/transformers/pr_17146/en/model_doc/led#transformers.TFLEDModel"),c(AQ,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerModel"),c(LQ,"href","/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.TFLxmertModel"),c(yQ,"href","/docs/transformers/pr_17146/en/model_doc/marian#transformers.TFMarianModel"),c(xQ,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.TFMBartModel"),c($Q,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(kQ,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetModel"),c(SQ,"href","/docs/transformers/pr_17146/en/model_doc/mt5#transformers.TFMT5Model"),c(RQ,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(PQ,"href","/docs/transformers/pr_17146/en/model_doc/opt#transformers.TFOPTModel"),c(BQ,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.TFPegasusModel"),c(IQ,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertModel"),c(NQ,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaModel"),c(qQ,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerModel"),c(jQ,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(DQ,"href","/docs/transformers/pr_17146/en/model_doc/swin#transformers.TFSwinModel"),c(GQ,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.TFT5Model"),c(OQ,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TFTapasModel"),c(VQ,"href","/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(XQ,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.TFViTModel"),c(zQ,"href","/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(WQ,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(QQ,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMModel"),c(HQ,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(UQ,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h7,"id","transformers.TFAutoModelForPreTraining"),c(h7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h7,"href","#transformers.TFAutoModelForPreTraining"),c(Wd,"class","relative group"),c(JQ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YQ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KQ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZQ,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(eH,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(oH,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForPreTraining"),c(rH,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(tH,"href","/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(aH,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(nH,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(sH,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(lH,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(iH,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(dH,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(cH,"href","/docs/transformers/pr_17146/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(fH,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(mH,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(gH,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(hH,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(pH,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(_H,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(uH,"href","/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(bH,"href","/docs/transformers/pr_17146/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(vH,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(FH,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(TH,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D7,"id","transformers.TFAutoModelForCausalLM"),c(D7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D7,"href","#transformers.TFAutoModelForCausalLM"),c(Ud,"class","relative group"),c(MH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wH,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(AH,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(LH,"href","/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(yH,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(xH,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c($H,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(kH,"href","/docs/transformers/pr_17146/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(SH,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(RH,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(PH,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(BH,"href","/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(IH,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(NH,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rM,"id","transformers.TFAutoModelForImageClassification"),c(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rM,"href","#transformers.TFAutoModelForImageClassification"),c(Kd,"class","relative group"),c(qH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GH,"href","/docs/transformers/pr_17146/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(OH,"href","/docs/transformers/pr_17146/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(VH,"href","/docs/transformers/pr_17146/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(XH,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dM,"id","transformers.TFAutoModelForMaskedLM"),c(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dM,"href","#transformers.TFAutoModelForMaskedLM"),c(oc,"class","relative group"),c(zH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HH,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(UH,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(JH,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(YH,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(KH,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(ZH,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(eU,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(oU,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(rU,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(tU,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(aU,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(nU,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(sU,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(lU,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(iU,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(dU,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(cU,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(fU,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(mU,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(gU,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(SM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ac,"class","relative group"),c(hU,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pU,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_U,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uU,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(bU,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(vU,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(FU,"href","/docs/transformers/pr_17146/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(TU,"href","/docs/transformers/pr_17146/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(MU,"href","/docs/transformers/pr_17146/en/model_doc/marian#transformers.TFMarianMTModel"),c(EU,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(CU,"href","/docs/transformers/pr_17146/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(wU,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(AU,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zM,"id","transformers.TFAutoModelForSequenceClassification"),c(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zM,"href","#transformers.TFAutoModelForSequenceClassification"),c(lc,"class","relative group"),c(LU,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yU,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xU,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($U,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(kU,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(SU,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(RU,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(PU,"href","/docs/transformers/pr_17146/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(BU,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(IU,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(NU,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(qU,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(jU,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(DU,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(GU,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(OU,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(VU,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(XU,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(zU,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(WU,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(QU,"href","/docs/transformers/pr_17146/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(HU,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(UU,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(JU,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(YU,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(KU,"href","/docs/transformers/pr_17146/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(ZU,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(eJ,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(oJ,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FE,"id","transformers.TFAutoModelForMultipleChoice"),c(FE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FE,"href","#transformers.TFAutoModelForMultipleChoice"),c(cc,"class","relative group"),c(rJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nJ,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(sJ,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(lJ,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(iJ,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(dJ,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(cJ,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(fJ,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(mJ,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(gJ,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(hJ,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(pJ,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(_J,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(uJ,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(bJ,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(vJ,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(FJ,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(TJ,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(DE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(gc,"class","relative group"),c(MJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wJ,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(AJ,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(zE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(_c,"class","relative group"),c(LJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($J,"href","/docs/transformers/pr_17146/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UE,"id","transformers.TFAutoModelForTokenClassification"),c(UE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UE,"href","#transformers.TFAutoModelForTokenClassification"),c(vc,"class","relative group"),c(kJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(BJ,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(IJ,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(NJ,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(qJ,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(jJ,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(DJ,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(GJ,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(OJ,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(VJ,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(XJ,"href","/docs/transformers/pr_17146/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(zJ,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(WJ,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(QJ,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(HJ,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(UJ,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(JJ,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(YJ,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(KJ,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(ZJ,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bC,"id","transformers.TFAutoModelForQuestionAnswering"),c(bC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Mc,"class","relative group"),c(eY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tY,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(aY,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(nY,"href","/docs/transformers/pr_17146/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(sY,"href","/docs/transformers/pr_17146/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(lY,"href","/docs/transformers/pr_17146/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(iY,"href","/docs/transformers/pr_17146/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(dY,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(cY,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(fY,"href","/docs/transformers/pr_17146/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(mY,"href","/docs/transformers/pr_17146/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(gY,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(hY,"href","/docs/transformers/pr_17146/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(pY,"href","/docs/transformers/pr_17146/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(_Y,"href","/docs/transformers/pr_17146/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(uY,"href","/docs/transformers/pr_17146/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(bY,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(vY,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(FY,"href","/docs/transformers/pr_17146/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(TY,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(MY,"href","/docs/transformers/pr_17146/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GC,"id","transformers.TFAutoModelForVision2Seq"),c(GC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GC,"href","#transformers.TFAutoModelForVision2Seq"),c(wc,"class","relative group"),c(EY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_17146/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(zC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(LY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Y,"href","/docs/transformers/pr_17146/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UC,"id","transformers.FlaxAutoModel"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.FlaxAutoModel"),c(kc,"class","relative group"),c(kY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PY,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertModel"),c(BY,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartModel"),c(IY,"href","/docs/transformers/pr_17146/en/model_doc/beit#transformers.FlaxBeitModel"),c(NY,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertModel"),c(qY,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(jY,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(DY,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(GY,"href","/docs/transformers/pr_17146/en/model_doc/clip#transformers.FlaxCLIPModel"),c(OY,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(VY,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraModel"),c(XY,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(zY,"href","/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(WY,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(QY,"href","/docs/transformers/pr_17146/en/model_doc/marian#transformers.FlaxMarianModel"),c(HY,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartModel"),c(UY,"href","/docs/transformers/pr_17146/en/model_doc/mt5#transformers.FlaxMT5Model"),c(JY,"href","/docs/transformers/pr_17146/en/model_doc/opt#transformers.FlaxOPTModel"),c(YY,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(KY,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(ZY,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(eK,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.FlaxT5Model"),c(oK,"href","/docs/transformers/pr_17146/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(rK,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.FlaxViTModel"),c(tK,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(aK,"href","/docs/transformers/pr_17146/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(nK,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C5,"id","transformers.FlaxAutoModelForCausalLM"),c(C5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Pc,"class","relative group"),c(sK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dK,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(cK,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(fK,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(mK,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(gK,"href","/docs/transformers/pr_17146/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(hK,"href","/docs/transformers/pr_17146/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(pK,"href","/docs/transformers/pr_17146/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(_K,"href","/docs/transformers/pr_17146/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(uK,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(bK,"href","/docs/transformers/pr_17146/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N5,"id","transformers.FlaxAutoModelForPreTraining"),c(N5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Nc,"class","relative group"),c(vK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MK,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(EK,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(CK,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(wK,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(AK,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(LK,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(yK,"href","/docs/transformers/pr_17146/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(xK,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c($K,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(kK,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(SK,"href","/docs/transformers/pr_17146/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(RK,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K5,"id","transformers.FlaxAutoModelForMaskedLM"),c(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Dc,"class","relative group"),c(PK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NK,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(qK,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(jK,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(DK,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(GK,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(OK,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(VK,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XK,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(zK,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(WK,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(f3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Vc,"class","relative group"),c(QK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UK,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JK,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(YK,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(KK,"href","/docs/transformers/pr_17146/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(ZK,"href","/docs/transformers/pr_17146/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(eZ,"href","/docs/transformers/pr_17146/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(oZ,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(rZ,"href","/docs/transformers/pr_17146/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(tZ,"href","/docs/transformers/pr_17146/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(aZ,"href","/docs/transformers/pr_17146/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(E3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Wc,"class","relative group"),c(nZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iZ,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(dZ,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(cZ,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(fZ,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(mZ,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(gZ,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(hZ,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(pZ,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(_Z,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(uZ,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(I3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Uc,"class","relative group"),c(bZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TZ,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(MZ,"href","/docs/transformers/pr_17146/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(EZ,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(CZ,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(wZ,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(AZ,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(LZ,"href","/docs/transformers/pr_17146/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(yZ,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(xZ,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c($Z,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U3,"id","transformers.FlaxAutoModelForTokenClassification"),c(U3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Kc,"class","relative group"),c(kZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PZ,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(BZ,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(IZ,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(NZ,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(qZ,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(jZ,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(DZ,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(GZ,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(s0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(of,"class","relative group"),c(OZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zZ,"href","/docs/transformers/pr_17146/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(WZ,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(QZ,"href","/docs/transformers/pr_17146/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(HZ,"href","/docs/transformers/pr_17146/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(UZ,"href","/docs/transformers/pr_17146/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(JZ,"href","/docs/transformers/pr_17146/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(YZ,"href","/docs/transformers/pr_17146/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(KZ,"href","/docs/transformers/pr_17146/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(u0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(af,"class","relative group"),c(ZZ,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eee,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oee,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ree,"href","/docs/transformers/pr_17146/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T0,"id","transformers.FlaxAutoModelForImageClassification"),c(T0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T0,"href","#transformers.FlaxAutoModelForImageClassification"),c(lf,"class","relative group"),c(tee,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aee,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nee,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(see,"href","/docs/transformers/pr_17146/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(lee,"href","/docs/transformers/pr_17146/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A0,"id","transformers.FlaxAutoModelForVision2Seq"),c(A0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(ff,"class","relative group"),c(iee,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dee,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cee,"href","/docs/transformers/pr_17146/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fee,"href","/docs/transformers/pr_17146/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,gi),b(f,uf,u),b(f,rt,u),e(rt,hi),e(rt,pi),e(pi,QA),e(rt,bf),b(f,Ge,u),b(f,We,u),e(We,_i),e(We,Ln),e(Ln,HA),e(We,yn),e(We,xn),e(xn,UA),e(We,ui),e(We,$n),e($n,JA),e(We,bi),b(f,vf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,uk),e(Ae,vi),e(vi,bk),e(Ae,vk),b(f,Eo,u),b(f,wa,u),e(wa,Fk),e(wa,Ff),e(Ff,Tk),e(wa,ZVe),b(f,Oje,u),b(f,Fi,u),e(Fi,Tf),e(Tf,are),M(YA,are,null),e(Fi,eXe),e(Fi,nre),e(nre,oXe),b(f,Vje,u),b(f,kn,u),e(kn,rXe),e(kn,sre),e(sre,tXe),e(kn,aXe),e(kn,lre),e(lre,nXe),e(kn,sXe),b(f,Xje,u),M(KA,f,u),b(f,zje,u),b(f,Mk,u),e(Mk,lXe),b(f,Wje,u),M(Mf,f,u),b(f,Qje,u),b(f,Ti,u),e(Ti,Ef),e(Ef,ire),M(ZA,ire,null),e(Ti,iXe),e(Ti,dre),e(dre,dXe),b(f,Hje,u),b(f,Co,u),M(eL,Co,null),e(Co,cXe),e(Co,oL),e(oL,fXe),e(oL,Ek),e(Ek,mXe),e(oL,gXe),e(Co,hXe),e(Co,rL),e(rL,pXe),e(rL,cre),e(cre,_Xe),e(rL,uXe),e(Co,bXe),e(Co,Er),M(tL,Er,null),e(Er,vXe),e(Er,fre),e(fre,FXe),e(Er,TXe),e(Er,Mi),e(Mi,MXe),e(Mi,mre),e(mre,EXe),e(Mi,CXe),e(Mi,gre),e(gre,wXe),e(Mi,AXe),e(Er,LXe),e(Er,A),e(A,Cf),e(Cf,hre),e(hre,yXe),e(Cf,xXe),e(Cf,Ck),e(Ck,$Xe),e(Cf,kXe),e(A,SXe),e(A,wf),e(wf,pre),e(pre,RXe),e(wf,PXe),e(wf,wk),e(wk,BXe),e(wf,IXe),e(A,NXe),e(A,Af),e(Af,_re),e(_re,qXe),e(Af,jXe),e(Af,Ak),e(Ak,DXe),e(Af,GXe),e(A,OXe),e(A,Lf),e(Lf,ure),e(ure,VXe),e(Lf,XXe),e(Lf,Lk),e(Lk,zXe),e(Lf,WXe),e(A,QXe),e(A,yf),e(yf,bre),e(bre,HXe),e(yf,UXe),e(yf,yk),e(yk,JXe),e(yf,YXe),e(A,KXe),e(A,xf),e(xf,vre),e(vre,ZXe),e(xf,eze),e(xf,xk),e(xk,oze),e(xf,rze),e(A,tze),e(A,$f),e($f,Fre),e(Fre,aze),e($f,nze),e($f,$k),e($k,sze),e($f,lze),e(A,ize),e(A,kf),e(kf,Tre),e(Tre,dze),e(kf,cze),e(kf,kk),e(kk,fze),e(kf,mze),e(A,gze),e(A,Sf),e(Sf,Mre),e(Mre,hze),e(Sf,pze),e(Sf,Sk),e(Sk,_ze),e(Sf,uze),e(A,bze),e(A,Rf),e(Rf,Ere),e(Ere,vze),e(Rf,Fze),e(Rf,Rk),e(Rk,Tze),e(Rf,Mze),e(A,Eze),e(A,Pf),e(Pf,Cre),e(Cre,Cze),e(Pf,wze),e(Pf,Pk),e(Pk,Aze),e(Pf,Lze),e(A,yze),e(A,Bf),e(Bf,wre),e(wre,xze),e(Bf,$ze),e(Bf,Bk),e(Bk,kze),e(Bf,Sze),e(A,Rze),e(A,If),e(If,Are),e(Are,Pze),e(If,Bze),e(If,Ik),e(Ik,Ize),e(If,Nze),e(A,qze),e(A,Nf),e(Nf,Lre),e(Lre,jze),e(Nf,Dze),e(Nf,Nk),e(Nk,Gze),e(Nf,Oze),e(A,Vze),e(A,qf),e(qf,yre),e(yre,Xze),e(qf,zze),e(qf,qk),e(qk,Wze),e(qf,Qze),e(A,Hze),e(A,jf),e(jf,xre),e(xre,Uze),e(jf,Jze),e(jf,jk),e(jk,Yze),e(jf,Kze),e(A,Zze),e(A,Df),e(Df,$re),e($re,eWe),e(Df,oWe),e(Df,Dk),e(Dk,rWe),e(Df,tWe),e(A,aWe),e(A,Gf),e(Gf,kre),e(kre,nWe),e(Gf,sWe),e(Gf,Gk),e(Gk,lWe),e(Gf,iWe),e(A,dWe),e(A,Of),e(Of,Sre),e(Sre,cWe),e(Of,fWe),e(Of,Ok),e(Ok,mWe),e(Of,gWe),e(A,hWe),e(A,Vf),e(Vf,Rre),e(Rre,pWe),e(Vf,_We),e(Vf,Vk),e(Vk,uWe),e(Vf,bWe),e(A,vWe),e(A,Xf),e(Xf,Pre),e(Pre,FWe),e(Xf,TWe),e(Xf,Xk),e(Xk,MWe),e(Xf,EWe),e(A,CWe),e(A,zf),e(zf,Bre),e(Bre,wWe),e(zf,AWe),e(zf,zk),e(zk,LWe),e(zf,yWe),e(A,xWe),e(A,Wf),e(Wf,Ire),e(Ire,$We),e(Wf,kWe),e(Wf,Wk),e(Wk,SWe),e(Wf,RWe),e(A,PWe),e(A,Qf),e(Qf,Nre),e(Nre,BWe),e(Qf,IWe),e(Qf,Qk),e(Qk,NWe),e(Qf,qWe),e(A,jWe),e(A,Hf),e(Hf,qre),e(qre,DWe),e(Hf,GWe),e(Hf,Hk),e(Hk,OWe),e(Hf,VWe),e(A,XWe),e(A,Uf),e(Uf,jre),e(jre,zWe),e(Uf,WWe),e(Uf,Uk),e(Uk,QWe),e(Uf,HWe),e(A,UWe),e(A,Jf),e(Jf,Dre),e(Dre,JWe),e(Jf,YWe),e(Jf,Jk),e(Jk,KWe),e(Jf,ZWe),e(A,eQe),e(A,Yf),e(Yf,Gre),e(Gre,oQe),e(Yf,rQe),e(Yf,Yk),e(Yk,tQe),e(Yf,aQe),e(A,nQe),e(A,Kf),e(Kf,Ore),e(Ore,sQe),e(Kf,lQe),e(Kf,Kk),e(Kk,iQe),e(Kf,dQe),e(A,cQe),e(A,Zf),e(Zf,Vre),e(Vre,fQe),e(Zf,mQe),e(Zf,Zk),e(Zk,gQe),e(Zf,hQe),e(A,pQe),e(A,em),e(em,Xre),e(Xre,_Qe),e(em,uQe),e(em,eS),e(eS,bQe),e(em,vQe),e(A,FQe),e(A,om),e(om,zre),e(zre,TQe),e(om,MQe),e(om,oS),e(oS,EQe),e(om,CQe),e(A,wQe),e(A,rm),e(rm,Wre),e(Wre,AQe),e(rm,LQe),e(rm,rS),e(rS,yQe),e(rm,xQe),e(A,$Qe),e(A,tm),e(tm,Qre),e(Qre,kQe),e(tm,SQe),e(tm,tS),e(tS,RQe),e(tm,PQe),e(A,BQe),e(A,am),e(am,Hre),e(Hre,IQe),e(am,NQe),e(am,aS),e(aS,qQe),e(am,jQe),e(A,DQe),e(A,nm),e(nm,Ure),e(Ure,GQe),e(nm,OQe),e(nm,nS),e(nS,VQe),e(nm,XQe),e(A,zQe),e(A,sm),e(sm,Jre),e(Jre,WQe),e(sm,QQe),e(sm,sS),e(sS,HQe),e(sm,UQe),e(A,JQe),e(A,lm),e(lm,Yre),e(Yre,YQe),e(lm,KQe),e(lm,lS),e(lS,ZQe),e(lm,eHe),e(A,oHe),e(A,im),e(im,Kre),e(Kre,rHe),e(im,tHe),e(im,iS),e(iS,aHe),e(im,nHe),e(A,sHe),e(A,dm),e(dm,Zre),e(Zre,lHe),e(dm,iHe),e(dm,dS),e(dS,dHe),e(dm,cHe),e(A,fHe),e(A,cm),e(cm,ete),e(ete,mHe),e(cm,gHe),e(cm,cS),e(cS,hHe),e(cm,pHe),e(A,_He),e(A,fm),e(fm,ote),e(ote,uHe),e(fm,bHe),e(fm,fS),e(fS,vHe),e(fm,FHe),e(A,THe),e(A,mm),e(mm,rte),e(rte,MHe),e(mm,EHe),e(mm,mS),e(mS,CHe),e(mm,wHe),e(A,AHe),e(A,gm),e(gm,tte),e(tte,LHe),e(gm,yHe),e(gm,gS),e(gS,xHe),e(gm,$He),e(A,kHe),e(A,hm),e(hm,ate),e(ate,SHe),e(hm,RHe),e(hm,hS),e(hS,PHe),e(hm,BHe),e(A,IHe),e(A,pm),e(pm,nte),e(nte,NHe),e(pm,qHe),e(pm,pS),e(pS,jHe),e(pm,DHe),e(A,GHe),e(A,_m),e(_m,ste),e(ste,OHe),e(_m,VHe),e(_m,_S),e(_S,XHe),e(_m,zHe),e(A,WHe),e(A,um),e(um,lte),e(lte,QHe),e(um,HHe),e(um,uS),e(uS,UHe),e(um,JHe),e(A,YHe),e(A,bm),e(bm,ite),e(ite,KHe),e(bm,ZHe),e(bm,bS),e(bS,eUe),e(bm,oUe),e(A,rUe),e(A,vm),e(vm,dte),e(dte,tUe),e(vm,aUe),e(vm,vS),e(vS,nUe),e(vm,sUe),e(A,lUe),e(A,Fm),e(Fm,cte),e(cte,iUe),e(Fm,dUe),e(Fm,FS),e(FS,cUe),e(Fm,fUe),e(A,mUe),e(A,Tm),e(Tm,fte),e(fte,gUe),e(Tm,hUe),e(Tm,TS),e(TS,pUe),e(Tm,_Ue),e(A,uUe),e(A,Mm),e(Mm,mte),e(mte,bUe),e(Mm,vUe),e(Mm,MS),e(MS,FUe),e(Mm,TUe),e(A,MUe),e(A,Em),e(Em,gte),e(gte,EUe),e(Em,CUe),e(Em,ES),e(ES,wUe),e(Em,AUe),e(A,LUe),e(A,Cm),e(Cm,hte),e(hte,yUe),e(Cm,xUe),e(Cm,CS),e(CS,$Ue),e(Cm,kUe),e(A,SUe),e(A,wm),e(wm,pte),e(pte,RUe),e(wm,PUe),e(wm,wS),e(wS,BUe),e(wm,IUe),e(A,NUe),e(A,Am),e(Am,_te),e(_te,qUe),e(Am,jUe),e(Am,AS),e(AS,DUe),e(Am,GUe),e(A,OUe),e(A,Lm),e(Lm,ute),e(ute,VUe),e(Lm,XUe),e(Lm,LS),e(LS,zUe),e(Lm,WUe),e(A,QUe),e(A,ym),e(ym,bte),e(bte,HUe),e(ym,UUe),e(ym,yS),e(yS,JUe),e(ym,YUe),e(A,KUe),e(A,xm),e(xm,vte),e(vte,ZUe),e(xm,eJe),e(xm,xS),e(xS,oJe),e(xm,rJe),e(A,tJe),e(A,$m),e($m,Fte),e(Fte,aJe),e($m,nJe),e($m,$S),e($S,sJe),e($m,lJe),e(A,iJe),e(A,km),e(km,Tte),e(Tte,dJe),e(km,cJe),e(km,kS),e(kS,fJe),e(km,mJe),e(A,gJe),e(A,Sm),e(Sm,Mte),e(Mte,hJe),e(Sm,pJe),e(Sm,SS),e(SS,_Je),e(Sm,uJe),e(A,bJe),e(A,Rm),e(Rm,Ete),e(Ete,vJe),e(Rm,FJe),e(Rm,RS),e(RS,TJe),e(Rm,MJe),e(A,EJe),e(A,Pm),e(Pm,Cte),e(Cte,CJe),e(Pm,wJe),e(Pm,PS),e(PS,AJe),e(Pm,LJe),e(A,yJe),e(A,Bm),e(Bm,wte),e(wte,xJe),e(Bm,$Je),e(Bm,BS),e(BS,kJe),e(Bm,SJe),e(A,RJe),e(A,Im),e(Im,Ate),e(Ate,PJe),e(Im,BJe),e(Im,IS),e(IS,IJe),e(Im,NJe),e(A,qJe),e(A,Nm),e(Nm,Lte),e(Lte,jJe),e(Nm,DJe),e(Nm,NS),e(NS,GJe),e(Nm,OJe),e(A,VJe),e(A,qm),e(qm,yte),e(yte,XJe),e(qm,zJe),e(qm,qS),e(qS,WJe),e(qm,QJe),e(A,HJe),e(A,jm),e(jm,xte),e(xte,UJe),e(jm,JJe),e(jm,jS),e(jS,YJe),e(jm,KJe),e(A,ZJe),e(A,Dm),e(Dm,$te),e($te,eYe),e(Dm,oYe),e(Dm,DS),e(DS,rYe),e(Dm,tYe),e(A,aYe),e(A,Gm),e(Gm,kte),e(kte,nYe),e(Gm,sYe),e(Gm,GS),e(GS,lYe),e(Gm,iYe),e(A,dYe),e(A,Om),e(Om,Ste),e(Ste,cYe),e(Om,fYe),e(Om,OS),e(OS,mYe),e(Om,gYe),e(A,hYe),e(A,Vm),e(Vm,Rte),e(Rte,pYe),e(Vm,_Ye),e(Vm,VS),e(VS,uYe),e(Vm,bYe),e(A,vYe),e(A,Xm),e(Xm,Pte),e(Pte,FYe),e(Xm,TYe),e(Xm,XS),e(XS,MYe),e(Xm,EYe),e(A,CYe),e(A,zm),e(zm,Bte),e(Bte,wYe),e(zm,AYe),e(zm,zS),e(zS,LYe),e(zm,yYe),e(A,xYe),e(A,Wm),e(Wm,Ite),e(Ite,$Ye),e(Wm,kYe),e(Wm,WS),e(WS,SYe),e(Wm,RYe),e(A,PYe),e(A,Qm),e(Qm,Nte),e(Nte,BYe),e(Qm,IYe),e(Qm,QS),e(QS,NYe),e(Qm,qYe),e(A,jYe),e(A,Hm),e(Hm,qte),e(qte,DYe),e(Hm,GYe),e(Hm,HS),e(HS,OYe),e(Hm,VYe),e(A,XYe),e(A,Um),e(Um,jte),e(jte,zYe),e(Um,WYe),e(Um,US),e(US,QYe),e(Um,HYe),e(A,UYe),e(A,Jm),e(Jm,Dte),e(Dte,JYe),e(Jm,YYe),e(Jm,JS),e(JS,KYe),e(Jm,ZYe),e(A,eKe),e(A,Ym),e(Ym,Gte),e(Gte,oKe),e(Ym,rKe),e(Ym,YS),e(YS,tKe),e(Ym,aKe),e(A,nKe),e(A,Km),e(Km,Ote),e(Ote,sKe),e(Km,lKe),e(Km,KS),e(KS,iKe),e(Km,dKe),e(A,cKe),e(A,Zm),e(Zm,Vte),e(Vte,fKe),e(Zm,mKe),e(Zm,ZS),e(ZS,gKe),e(Zm,hKe),e(A,pKe),e(A,eg),e(eg,Xte),e(Xte,_Ke),e(eg,uKe),e(eg,eR),e(eR,bKe),e(eg,vKe),e(A,FKe),e(A,og),e(og,zte),e(zte,TKe),e(og,MKe),e(og,oR),e(oR,EKe),e(og,CKe),e(A,wKe),e(A,rg),e(rg,Wte),e(Wte,AKe),e(rg,LKe),e(rg,rR),e(rR,yKe),e(rg,xKe),e(A,$Ke),e(A,tg),e(tg,Qte),e(Qte,kKe),e(tg,SKe),e(tg,tR),e(tR,RKe),e(tg,PKe),e(A,BKe),e(A,ag),e(ag,Hte),e(Hte,IKe),e(ag,NKe),e(ag,aR),e(aR,qKe),e(ag,jKe),e(A,DKe),e(A,ng),e(ng,Ute),e(Ute,GKe),e(ng,OKe),e(ng,nR),e(nR,VKe),e(ng,XKe),e(A,zKe),e(A,sg),e(sg,Jte),e(Jte,WKe),e(sg,QKe),e(sg,sR),e(sR,HKe),e(sg,UKe),e(A,JKe),e(A,lg),e(lg,Yte),e(Yte,YKe),e(lg,KKe),e(lg,lR),e(lR,ZKe),e(lg,eZe),e(A,oZe),e(A,ig),e(ig,Kte),e(Kte,rZe),e(ig,tZe),e(ig,iR),e(iR,aZe),e(ig,nZe),e(A,sZe),e(A,dg),e(dg,Zte),e(Zte,lZe),e(dg,iZe),e(dg,dR),e(dR,dZe),e(dg,cZe),e(A,fZe),e(A,cg),e(cg,eae),e(eae,mZe),e(cg,gZe),e(cg,cR),e(cR,hZe),e(cg,pZe),e(A,_Ze),e(A,fg),e(fg,oae),e(oae,uZe),e(fg,bZe),e(fg,fR),e(fR,vZe),e(fg,FZe),e(A,TZe),e(A,mg),e(mg,rae),e(rae,MZe),e(mg,EZe),e(mg,mR),e(mR,CZe),e(mg,wZe),e(A,AZe),e(A,gg),e(gg,tae),e(tae,LZe),e(gg,yZe),e(gg,gR),e(gR,xZe),e(gg,$Ze),e(A,kZe),e(A,hg),e(hg,aae),e(aae,SZe),e(hg,RZe),e(hg,hR),e(hR,PZe),e(hg,BZe),e(A,IZe),e(A,pg),e(pg,nae),e(nae,NZe),e(pg,qZe),e(pg,pR),e(pR,jZe),e(pg,DZe),e(A,GZe),e(A,_g),e(_g,sae),e(sae,OZe),e(_g,VZe),e(_g,_R),e(_R,XZe),e(_g,zZe),e(A,WZe),e(A,ug),e(ug,lae),e(lae,QZe),e(ug,HZe),e(ug,uR),e(uR,UZe),e(ug,JZe),e(A,YZe),e(A,bg),e(bg,iae),e(iae,KZe),e(bg,ZZe),e(bg,bR),e(bR,eeo),e(bg,oeo),e(A,reo),e(A,vg),e(vg,dae),e(dae,teo),e(vg,aeo),e(vg,vR),e(vR,neo),e(vg,seo),e(A,leo),e(A,Fg),e(Fg,cae),e(cae,ieo),e(Fg,deo),e(Fg,FR),e(FR,ceo),e(Fg,feo),e(A,meo),e(A,Tg),e(Tg,fae),e(fae,geo),e(Tg,heo),e(Tg,TR),e(TR,peo),e(Tg,_eo),e(A,ueo),e(A,Mg),e(Mg,mae),e(mae,beo),e(Mg,veo),e(Mg,MR),e(MR,Feo),e(Mg,Teo),e(A,Meo),e(A,Eg),e(Eg,gae),e(gae,Eeo),e(Eg,Ceo),e(Eg,ER),e(ER,weo),e(Eg,Aeo),e(A,Leo),e(A,Cg),e(Cg,hae),e(hae,yeo),e(Cg,xeo),e(Cg,CR),e(CR,$eo),e(Cg,keo),e(A,Seo),e(A,wg),e(wg,pae),e(pae,Reo),e(wg,Peo),e(wg,wR),e(wR,Beo),e(wg,Ieo),e(A,Neo),e(A,Ag),e(Ag,_ae),e(_ae,qeo),e(Ag,jeo),e(Ag,AR),e(AR,Deo),e(Ag,Geo),e(A,Oeo),e(A,Lg),e(Lg,uae),e(uae,Veo),e(Lg,Xeo),e(Lg,LR),e(LR,zeo),e(Lg,Weo),e(A,Qeo),e(A,yg),e(yg,bae),e(bae,Heo),e(yg,Ueo),e(yg,yR),e(yR,Jeo),e(yg,Yeo),e(Er,Keo),M(xg,Er,null),e(Co,Zeo),e(Co,$g),M(aL,$g,null),e($g,eoo),e($g,vae),e(vae,ooo),b(f,Uje,u),b(f,Ei,u),e(Ei,kg),e(kg,Fae),M(nL,Fae,null),e(Ei,roo),e(Ei,Tae),e(Tae,too),b(f,Jje,u),b(f,wo,u),M(sL,wo,null),e(wo,aoo),e(wo,lL),e(lL,noo),e(lL,xR),e(xR,soo),e(lL,loo),e(wo,ioo),e(wo,iL),e(iL,doo),e(iL,Mae),e(Mae,coo),e(iL,foo),e(wo,moo),e(wo,Cr),M(dL,Cr,null),e(Cr,goo),e(Cr,Eae),e(Eae,hoo),e(Cr,poo),e(Cr,Aa),e(Aa,_oo),e(Aa,Cae),e(Cae,uoo),e(Aa,boo),e(Aa,wae),e(wae,voo),e(Aa,Foo),e(Aa,Aae),e(Aae,Too),e(Aa,Moo),e(Cr,Eoo),e(Cr,k),e(k,Sn),e(Sn,Lae),e(Lae,Coo),e(Sn,woo),e(Sn,$R),e($R,Aoo),e(Sn,Loo),e(Sn,kR),e(kR,yoo),e(Sn,xoo),e(k,$oo),e(k,Rn),e(Rn,yae),e(yae,koo),e(Rn,Soo),e(Rn,SR),e(SR,Roo),e(Rn,Poo),e(Rn,RR),e(RR,Boo),e(Rn,Ioo),e(k,Noo),e(k,Pn),e(Pn,xae),e(xae,qoo),e(Pn,joo),e(Pn,PR),e(PR,Doo),e(Pn,Goo),e(Pn,BR),e(BR,Ooo),e(Pn,Voo),e(k,Xoo),e(k,Sg),e(Sg,$ae),e($ae,zoo),e(Sg,Woo),e(Sg,IR),e(IR,Qoo),e(Sg,Hoo),e(k,Uoo),e(k,Bn),e(Bn,kae),e(kae,Joo),e(Bn,Yoo),e(Bn,NR),e(NR,Koo),e(Bn,Zoo),e(Bn,qR),e(qR,ero),e(Bn,oro),e(k,rro),e(k,Rg),e(Rg,Sae),e(Sae,tro),e(Rg,aro),e(Rg,jR),e(jR,nro),e(Rg,sro),e(k,lro),e(k,Pg),e(Pg,Rae),e(Rae,iro),e(Pg,dro),e(Pg,DR),e(DR,cro),e(Pg,fro),e(k,mro),e(k,Bg),e(Bg,Pae),e(Pae,gro),e(Bg,hro),e(Bg,GR),e(GR,pro),e(Bg,_ro),e(k,uro),e(k,In),e(In,Bae),e(Bae,bro),e(In,vro),e(In,OR),e(OR,Fro),e(In,Tro),e(In,VR),e(VR,Mro),e(In,Ero),e(k,Cro),e(k,Nn),e(Nn,Iae),e(Iae,wro),e(Nn,Aro),e(Nn,XR),e(XR,Lro),e(Nn,yro),e(Nn,zR),e(zR,xro),e(Nn,$ro),e(k,kro),e(k,qn),e(qn,Nae),e(Nae,Sro),e(qn,Rro),e(qn,WR),e(WR,Pro),e(qn,Bro),e(qn,QR),e(QR,Iro),e(qn,Nro),e(k,qro),e(k,Ig),e(Ig,qae),e(qae,jro),e(Ig,Dro),e(Ig,HR),e(HR,Gro),e(Ig,Oro),e(k,Vro),e(k,Ng),e(Ng,jae),e(jae,Xro),e(Ng,zro),e(Ng,UR),e(UR,Wro),e(Ng,Qro),e(k,Hro),e(k,qg),e(qg,Dae),e(Dae,Uro),e(qg,Jro),e(qg,JR),e(JR,Yro),e(qg,Kro),e(k,Zro),e(k,jn),e(jn,Gae),e(Gae,eto),e(jn,oto),e(jn,YR),e(YR,rto),e(jn,tto),e(jn,KR),e(KR,ato),e(jn,nto),e(k,sto),e(k,jg),e(jg,Oae),e(Oae,lto),e(jg,ito),e(jg,ZR),e(ZR,dto),e(jg,cto),e(k,fto),e(k,Dn),e(Dn,Vae),e(Vae,mto),e(Dn,gto),e(Dn,eP),e(eP,hto),e(Dn,pto),e(Dn,oP),e(oP,_to),e(Dn,uto),e(k,bto),e(k,Gn),e(Gn,Xae),e(Xae,vto),e(Gn,Fto),e(Gn,rP),e(rP,Tto),e(Gn,Mto),e(Gn,tP),e(tP,Eto),e(Gn,Cto),e(k,wto),e(k,On),e(On,zae),e(zae,Ato),e(On,Lto),e(On,aP),e(aP,yto),e(On,xto),e(On,nP),e(nP,$to),e(On,kto),e(k,Sto),e(k,Dg),e(Dg,Wae),e(Wae,Rto),e(Dg,Pto),e(Dg,sP),e(sP,Bto),e(Dg,Ito),e(k,Nto),e(k,Vn),e(Vn,Qae),e(Qae,qto),e(Vn,jto),e(Vn,lP),e(lP,Dto),e(Vn,Gto),e(Vn,iP),e(iP,Oto),e(Vn,Vto),e(k,Xto),e(k,Xn),e(Xn,Hae),e(Hae,zto),e(Xn,Wto),e(Xn,dP),e(dP,Qto),e(Xn,Hto),e(Xn,cP),e(cP,Uto),e(Xn,Jto),e(k,Yto),e(k,zn),e(zn,Uae),e(Uae,Kto),e(zn,Zto),e(zn,fP),e(fP,eao),e(zn,oao),e(zn,mP),e(mP,rao),e(zn,tao),e(k,aao),e(k,Wn),e(Wn,Jae),e(Jae,nao),e(Wn,sao),e(Wn,gP),e(gP,lao),e(Wn,iao),e(Wn,hP),e(hP,dao),e(Wn,cao),e(k,fao),e(k,Qn),e(Qn,Yae),e(Yae,mao),e(Qn,gao),e(Qn,pP),e(pP,hao),e(Qn,pao),e(Qn,_P),e(_P,_ao),e(Qn,uao),e(k,bao),e(k,Hn),e(Hn,Kae),e(Kae,vao),e(Hn,Fao),e(Hn,uP),e(uP,Tao),e(Hn,Mao),e(Hn,bP),e(bP,Eao),e(Hn,Cao),e(k,wao),e(k,Gg),e(Gg,Zae),e(Zae,Aao),e(Gg,Lao),e(Gg,vP),e(vP,yao),e(Gg,xao),e(k,$ao),e(k,Un),e(Un,ene),e(ene,kao),e(Un,Sao),e(Un,FP),e(FP,Rao),e(Un,Pao),e(Un,TP),e(TP,Bao),e(Un,Iao),e(k,Nao),e(k,Og),e(Og,one),e(one,qao),e(Og,jao),e(Og,MP),e(MP,Dao),e(Og,Gao),e(k,Oao),e(k,Jn),e(Jn,rne),e(rne,Vao),e(Jn,Xao),e(Jn,EP),e(EP,zao),e(Jn,Wao),e(Jn,CP),e(CP,Qao),e(Jn,Hao),e(k,Uao),e(k,Yn),e(Yn,tne),e(tne,Jao),e(Yn,Yao),e(Yn,wP),e(wP,Kao),e(Yn,Zao),e(Yn,AP),e(AP,eno),e(Yn,ono),e(k,rno),e(k,Kn),e(Kn,ane),e(ane,tno),e(Kn,ano),e(Kn,LP),e(LP,nno),e(Kn,sno),e(Kn,yP),e(yP,lno),e(Kn,ino),e(k,dno),e(k,Vg),e(Vg,nne),e(nne,cno),e(Vg,fno),e(Vg,xP),e(xP,mno),e(Vg,gno),e(k,hno),e(k,Zn),e(Zn,sne),e(sne,pno),e(Zn,_no),e(Zn,$P),e($P,uno),e(Zn,bno),e(Zn,kP),e(kP,vno),e(Zn,Fno),e(k,Tno),e(k,es),e(es,lne),e(lne,Mno),e(es,Eno),e(es,SP),e(SP,Cno),e(es,wno),e(es,RP),e(RP,Ano),e(es,Lno),e(k,yno),e(k,os),e(os,ine),e(ine,xno),e(os,$no),e(os,PP),e(PP,kno),e(os,Sno),e(os,BP),e(BP,Rno),e(os,Pno),e(k,Bno),e(k,Xg),e(Xg,dne),e(dne,Ino),e(Xg,Nno),e(Xg,IP),e(IP,qno),e(Xg,jno),e(k,Dno),e(k,rs),e(rs,cne),e(cne,Gno),e(rs,Ono),e(rs,NP),e(NP,Vno),e(rs,Xno),e(rs,qP),e(qP,zno),e(rs,Wno),e(k,Qno),e(k,ts),e(ts,fne),e(fne,Hno),e(ts,Uno),e(ts,jP),e(jP,Jno),e(ts,Yno),e(ts,DP),e(DP,Kno),e(ts,Zno),e(k,eso),e(k,as),e(as,mne),e(mne,oso),e(as,rso),e(as,GP),e(GP,tso),e(as,aso),e(as,OP),e(OP,nso),e(as,sso),e(k,lso),e(k,ns),e(ns,gne),e(gne,iso),e(ns,dso),e(ns,VP),e(VP,cso),e(ns,fso),e(ns,XP),e(XP,mso),e(ns,gso),e(k,hso),e(k,ss),e(ss,hne),e(hne,pso),e(ss,_so),e(ss,zP),e(zP,uso),e(ss,bso),e(ss,WP),e(WP,vso),e(ss,Fso),e(k,Tso),e(k,ls),e(ls,pne),e(pne,Mso),e(ls,Eso),e(ls,QP),e(QP,Cso),e(ls,wso),e(ls,HP),e(HP,Aso),e(ls,Lso),e(k,yso),e(k,is),e(is,_ne),e(_ne,xso),e(is,$so),e(is,UP),e(UP,kso),e(is,Sso),e(is,JP),e(JP,Rso),e(is,Pso),e(k,Bso),e(k,zg),e(zg,une),e(une,Iso),e(zg,Nso),e(zg,YP),e(YP,qso),e(zg,jso),e(k,Dso),e(k,ds),e(ds,bne),e(bne,Gso),e(ds,Oso),e(ds,KP),e(KP,Vso),e(ds,Xso),e(ds,ZP),e(ZP,zso),e(ds,Wso),e(k,Qso),e(k,Wg),e(Wg,vne),e(vne,Hso),e(Wg,Uso),e(Wg,eB),e(eB,Jso),e(Wg,Yso),e(k,Kso),e(k,Qg),e(Qg,Fne),e(Fne,Zso),e(Qg,elo),e(Qg,oB),e(oB,olo),e(Qg,rlo),e(k,tlo),e(k,cs),e(cs,Tne),e(Tne,alo),e(cs,nlo),e(cs,rB),e(rB,slo),e(cs,llo),e(cs,tB),e(tB,ilo),e(cs,dlo),e(k,clo),e(k,fs),e(fs,Mne),e(Mne,flo),e(fs,mlo),e(fs,aB),e(aB,glo),e(fs,hlo),e(fs,nB),e(nB,plo),e(fs,_lo),e(k,ulo),e(k,ms),e(ms,Ene),e(Ene,blo),e(ms,vlo),e(ms,sB),e(sB,Flo),e(ms,Tlo),e(ms,lB),e(lB,Mlo),e(ms,Elo),e(k,Clo),e(k,Hg),e(Hg,Cne),e(Cne,wlo),e(Hg,Alo),e(Hg,iB),e(iB,Llo),e(Hg,ylo),e(k,xlo),e(k,gs),e(gs,wne),e(wne,$lo),e(gs,klo),e(gs,dB),e(dB,Slo),e(gs,Rlo),e(gs,cB),e(cB,Plo),e(gs,Blo),e(k,Ilo),e(k,hs),e(hs,Ane),e(Ane,Nlo),e(hs,qlo),e(hs,fB),e(fB,jlo),e(hs,Dlo),e(hs,mB),e(mB,Glo),e(hs,Olo),e(k,Vlo),e(k,ps),e(ps,Lne),e(Lne,Xlo),e(ps,zlo),e(ps,gB),e(gB,Wlo),e(ps,Qlo),e(ps,hB),e(hB,Hlo),e(ps,Ulo),e(k,Jlo),e(k,_s),e(_s,yne),e(yne,Ylo),e(_s,Klo),e(_s,pB),e(pB,Zlo),e(_s,eio),e(_s,_B),e(_B,oio),e(_s,rio),e(k,tio),e(k,us),e(us,xne),e(xne,aio),e(us,nio),e(us,uB),e(uB,sio),e(us,lio),e(us,bB),e(bB,iio),e(us,dio),e(k,cio),e(k,Ug),e(Ug,$ne),e($ne,fio),e(Ug,mio),e(Ug,vB),e(vB,gio),e(Ug,hio),e(k,pio),e(k,bs),e(bs,kne),e(kne,_io),e(bs,uio),e(bs,FB),e(FB,bio),e(bs,vio),e(bs,TB),e(TB,Fio),e(bs,Tio),e(k,Mio),e(k,Jg),e(Jg,Sne),e(Sne,Eio),e(Jg,Cio),e(Jg,MB),e(MB,wio),e(Jg,Aio),e(k,Lio),e(k,Yg),e(Yg,Rne),e(Rne,yio),e(Yg,xio),e(Yg,EB),e(EB,$io),e(Yg,kio),e(k,Sio),e(k,Kg),e(Kg,Pne),e(Pne,Rio),e(Kg,Pio),e(Kg,CB),e(CB,Bio),e(Kg,Iio),e(k,Nio),e(k,Zg),e(Zg,Bne),e(Bne,qio),e(Zg,jio),e(Zg,wB),e(wB,Dio),e(Zg,Gio),e(k,Oio),e(k,vs),e(vs,Ine),e(Ine,Vio),e(vs,Xio),e(vs,AB),e(AB,zio),e(vs,Wio),e(vs,LB),e(LB,Qio),e(vs,Hio),e(k,Uio),e(k,eh),e(eh,Nne),e(Nne,Jio),e(eh,Yio),e(eh,yB),e(yB,Kio),e(eh,Zio),e(k,edo),e(k,Fs),e(Fs,qne),e(qne,odo),e(Fs,rdo),e(Fs,xB),e(xB,tdo),e(Fs,ado),e(Fs,$B),e($B,ndo),e(Fs,sdo),e(k,ldo),e(k,Ts),e(Ts,jne),e(jne,ido),e(Ts,ddo),e(Ts,kB),e(kB,cdo),e(Ts,fdo),e(Ts,SB),e(SB,mdo),e(Ts,gdo),e(k,hdo),e(k,Ms),e(Ms,Dne),e(Dne,pdo),e(Ms,_do),e(Ms,RB),e(RB,udo),e(Ms,bdo),e(Ms,PB),e(PB,vdo),e(Ms,Fdo),e(k,Tdo),e(k,Es),e(Es,Gne),e(Gne,Mdo),e(Es,Edo),e(Es,BB),e(BB,Cdo),e(Es,wdo),e(Es,IB),e(IB,Ado),e(Es,Ldo),e(k,ydo),e(k,Cs),e(Cs,One),e(One,xdo),e(Cs,$do),e(Cs,NB),e(NB,kdo),e(Cs,Sdo),e(Cs,qB),e(qB,Rdo),e(Cs,Pdo),e(k,Bdo),e(k,ws),e(ws,Vne),e(Vne,Ido),e(ws,Ndo),e(ws,jB),e(jB,qdo),e(ws,jdo),e(ws,DB),e(DB,Ddo),e(ws,Gdo),e(k,Odo),e(k,oh),e(oh,Xne),e(Xne,Vdo),e(oh,Xdo),e(oh,GB),e(GB,zdo),e(oh,Wdo),e(k,Qdo),e(k,rh),e(rh,zne),e(zne,Hdo),e(rh,Udo),e(rh,OB),e(OB,Jdo),e(rh,Ydo),e(k,Kdo),e(k,As),e(As,Wne),e(Wne,Zdo),e(As,eco),e(As,VB),e(VB,oco),e(As,rco),e(As,XB),e(XB,tco),e(As,aco),e(k,nco),e(k,Ls),e(Ls,Qne),e(Qne,sco),e(Ls,lco),e(Ls,zB),e(zB,ico),e(Ls,dco),e(Ls,WB),e(WB,cco),e(Ls,fco),e(k,mco),e(k,ys),e(ys,Hne),e(Hne,gco),e(ys,hco),e(ys,QB),e(QB,pco),e(ys,_co),e(ys,HB),e(HB,uco),e(ys,bco),e(k,vco),e(k,th),e(th,Une),e(Une,Fco),e(th,Tco),e(th,UB),e(UB,Mco),e(th,Eco),e(k,Cco),e(k,ah),e(ah,Jne),e(Jne,wco),e(ah,Aco),e(ah,JB),e(JB,Lco),e(ah,yco),e(k,xco),e(k,nh),e(nh,Yne),e(Yne,$co),e(nh,kco),e(nh,YB),e(YB,Sco),e(nh,Rco),e(k,Pco),e(k,xs),e(xs,Kne),e(Kne,Bco),e(xs,Ico),e(xs,KB),e(KB,Nco),e(xs,qco),e(xs,ZB),e(ZB,jco),e(xs,Dco),e(k,Gco),e(k,sh),e(sh,Zne),e(Zne,Oco),e(sh,Vco),e(sh,eI),e(eI,Xco),e(sh,zco),e(k,Wco),e(k,lh),e(lh,ese),e(ese,Qco),e(lh,Hco),e(lh,oI),e(oI,Uco),e(lh,Jco),e(k,Yco),e(k,ih),e(ih,ose),e(ose,Kco),e(ih,Zco),e(ih,rI),e(rI,efo),e(ih,ofo),e(k,rfo),e(k,$s),e($s,rse),e(rse,tfo),e($s,afo),e($s,tI),e(tI,nfo),e($s,sfo),e($s,aI),e(aI,lfo),e($s,ifo),e(k,dfo),e(k,dh),e(dh,tse),e(tse,cfo),e(dh,ffo),e(dh,nI),e(nI,mfo),e(dh,gfo),e(k,hfo),e(k,ch),e(ch,ase),e(ase,pfo),e(ch,_fo),e(ch,sI),e(sI,ufo),e(ch,bfo),e(k,vfo),e(k,ks),e(ks,nse),e(nse,Ffo),e(ks,Tfo),e(ks,lI),e(lI,Mfo),e(ks,Efo),e(ks,iI),e(iI,Cfo),e(ks,wfo),e(k,Afo),e(k,Ss),e(Ss,sse),e(sse,Lfo),e(Ss,yfo),e(Ss,dI),e(dI,xfo),e(Ss,$fo),e(Ss,cI),e(cI,kfo),e(Ss,Sfo),e(k,Rfo),e(k,Rs),e(Rs,lse),e(lse,Pfo),e(Rs,Bfo),e(Rs,fI),e(fI,Ifo),e(Rs,Nfo),e(Rs,mI),e(mI,qfo),e(Rs,jfo),e(k,Dfo),e(k,Ps),e(Ps,ise),e(ise,Gfo),e(Ps,Ofo),e(Ps,gI),e(gI,Vfo),e(Ps,Xfo),e(Ps,hI),e(hI,zfo),e(Ps,Wfo),e(Cr,Qfo),M(fh,Cr,null),e(wo,Hfo),e(wo,mh),M(cL,mh,null),e(mh,Ufo),e(mh,dse),e(dse,Jfo),b(f,Yje,u),b(f,Ci,u),e(Ci,gh),e(gh,cse),M(fL,cse,null),e(Ci,Yfo),e(Ci,fse),e(fse,Kfo),b(f,Kje,u),b(f,Ao,u),M(mL,Ao,null),e(Ao,Zfo),e(Ao,gL),e(gL,emo),e(gL,pI),e(pI,omo),e(gL,rmo),e(Ao,tmo),e(Ao,hL),e(hL,amo),e(hL,mse),e(mse,nmo),e(hL,smo),e(Ao,lmo),e(Ao,He),M(pL,He,null),e(He,imo),e(He,gse),e(gse,dmo),e(He,cmo),e(He,La),e(La,fmo),e(La,hse),e(hse,mmo),e(La,gmo),e(La,pse),e(pse,hmo),e(La,pmo),e(La,_se),e(_se,_mo),e(La,umo),e(He,bmo),e(He,Y),e(Y,hh),e(hh,use),e(use,vmo),e(hh,Fmo),e(hh,_I),e(_I,Tmo),e(hh,Mmo),e(Y,Emo),e(Y,ph),e(ph,bse),e(bse,Cmo),e(ph,wmo),e(ph,uI),e(uI,Amo),e(ph,Lmo),e(Y,ymo),e(Y,_h),e(_h,vse),e(vse,xmo),e(_h,$mo),e(_h,bI),e(bI,kmo),e(_h,Smo),e(Y,Rmo),e(Y,uh),e(uh,Fse),e(Fse,Pmo),e(uh,Bmo),e(uh,vI),e(vI,Imo),e(uh,Nmo),e(Y,qmo),e(Y,bh),e(bh,Tse),e(Tse,jmo),e(bh,Dmo),e(bh,FI),e(FI,Gmo),e(bh,Omo),e(Y,Vmo),e(Y,vh),e(vh,Mse),e(Mse,Xmo),e(vh,zmo),e(vh,TI),e(TI,Wmo),e(vh,Qmo),e(Y,Hmo),e(Y,Fh),e(Fh,Ese),e(Ese,Umo),e(Fh,Jmo),e(Fh,MI),e(MI,Ymo),e(Fh,Kmo),e(Y,Zmo),e(Y,Th),e(Th,Cse),e(Cse,ego),e(Th,ogo),e(Th,EI),e(EI,rgo),e(Th,tgo),e(Y,ago),e(Y,Mh),e(Mh,wse),e(wse,ngo),e(Mh,sgo),e(Mh,CI),e(CI,lgo),e(Mh,igo),e(Y,dgo),e(Y,Eh),e(Eh,Ase),e(Ase,cgo),e(Eh,fgo),e(Eh,wI),e(wI,mgo),e(Eh,ggo),e(Y,hgo),e(Y,Ch),e(Ch,Lse),e(Lse,pgo),e(Ch,_go),e(Ch,AI),e(AI,ugo),e(Ch,bgo),e(Y,vgo),e(Y,wh),e(wh,yse),e(yse,Fgo),e(wh,Tgo),e(wh,LI),e(LI,Mgo),e(wh,Ego),e(Y,Cgo),e(Y,Ah),e(Ah,xse),e(xse,wgo),e(Ah,Ago),e(Ah,yI),e(yI,Lgo),e(Ah,ygo),e(Y,xgo),e(Y,Lh),e(Lh,$se),e($se,$go),e(Lh,kgo),e(Lh,xI),e(xI,Sgo),e(Lh,Rgo),e(Y,Pgo),e(Y,yh),e(yh,kse),e(kse,Bgo),e(yh,Igo),e(yh,$I),e($I,Ngo),e(yh,qgo),e(Y,jgo),e(Y,xh),e(xh,Sse),e(Sse,Dgo),e(xh,Ggo),e(xh,kI),e(kI,Ogo),e(xh,Vgo),e(Y,Xgo),e(Y,$h),e($h,Rse),e(Rse,zgo),e($h,Wgo),e($h,SI),e(SI,Qgo),e($h,Hgo),e(Y,Ugo),e(Y,kh),e(kh,Pse),e(Pse,Jgo),e(kh,Ygo),e(kh,RI),e(RI,Kgo),e(kh,Zgo),e(Y,eho),e(Y,Sh),e(Sh,Bse),e(Bse,oho),e(Sh,rho),e(Sh,PI),e(PI,tho),e(Sh,aho),e(Y,nho),e(Y,Rh),e(Rh,Ise),e(Ise,sho),e(Rh,lho),e(Rh,BI),e(BI,iho),e(Rh,dho),e(Y,cho),e(Y,Ph),e(Ph,Nse),e(Nse,fho),e(Ph,mho),e(Ph,II),e(II,gho),e(Ph,hho),e(Y,pho),e(Y,Bh),e(Bh,qse),e(qse,_ho),e(Bh,uho),e(Bh,NI),e(NI,bho),e(Bh,vho),e(Y,Fho),e(Y,Ih),e(Ih,jse),e(jse,Tho),e(Ih,Mho),e(Ih,qI),e(qI,Eho),e(Ih,Cho),e(Y,who),e(Y,Nh),e(Nh,Dse),e(Dse,Aho),e(Nh,Lho),e(Nh,jI),e(jI,yho),e(Nh,xho),e(Y,$ho),e(Y,qh),e(qh,Gse),e(Gse,kho),e(qh,Sho),e(qh,DI),e(DI,Rho),e(qh,Pho),e(Y,Bho),e(Y,jh),e(jh,Ose),e(Ose,Iho),e(jh,Nho),e(jh,GI),e(GI,qho),e(jh,jho),e(Y,Dho),e(Y,Dh),e(Dh,Vse),e(Vse,Gho),e(Dh,Oho),e(Dh,OI),e(OI,Vho),e(Dh,Xho),e(Y,zho),e(Y,Gh),e(Gh,Xse),e(Xse,Who),e(Gh,Qho),e(Gh,VI),e(VI,Hho),e(Gh,Uho),e(Y,Jho),e(Y,Oh),e(Oh,zse),e(zse,Yho),e(Oh,Kho),e(Oh,XI),e(XI,Zho),e(Oh,epo),e(Y,opo),e(Y,Vh),e(Vh,Wse),e(Wse,rpo),e(Vh,tpo),e(Vh,zI),e(zI,apo),e(Vh,npo),e(Y,spo),e(Y,Xh),e(Xh,Qse),e(Qse,lpo),e(Xh,ipo),e(Xh,WI),e(WI,dpo),e(Xh,cpo),e(Y,fpo),e(Y,zh),e(zh,Hse),e(Hse,mpo),e(zh,gpo),e(zh,QI),e(QI,hpo),e(zh,ppo),e(He,_po),M(Wh,He,null),e(He,upo),M(Qh,He,null),e(Ao,bpo),e(Ao,Hh),M(_L,Hh,null),e(Hh,vpo),e(Hh,Use),e(Use,Fpo),b(f,Zje,u),b(f,wi,u),e(wi,Uh),e(Uh,Jse),M(uL,Jse,null),e(wi,Tpo),e(wi,Yse),e(Yse,Mpo),b(f,eDe,u),b(f,Lo,u),M(bL,Lo,null),e(Lo,Epo),e(Lo,vL),e(vL,Cpo),e(vL,HI),e(HI,wpo),e(vL,Apo),e(Lo,Lpo),e(Lo,FL),e(FL,ypo),e(FL,Kse),e(Kse,xpo),e(FL,$po),e(Lo,kpo),e(Lo,Ue),M(TL,Ue,null),e(Ue,Spo),e(Ue,Zse),e(Zse,Rpo),e(Ue,Ppo),e(Ue,Ai),e(Ai,Bpo),e(Ai,ele),e(ele,Ipo),e(Ai,Npo),e(Ai,ole),e(ole,qpo),e(Ai,jpo),e(Ue,Dpo),e(Ue,he),e(he,Jh),e(Jh,rle),e(rle,Gpo),e(Jh,Opo),e(Jh,UI),e(UI,Vpo),e(Jh,Xpo),e(he,zpo),e(he,Yh),e(Yh,tle),e(tle,Wpo),e(Yh,Qpo),e(Yh,ale),e(ale,Hpo),e(Yh,Upo),e(he,Jpo),e(he,Kh),e(Kh,nle),e(nle,Ypo),e(Kh,Kpo),e(Kh,JI),e(JI,Zpo),e(Kh,e_o),e(he,o_o),e(he,Zh),e(Zh,sle),e(sle,r_o),e(Zh,t_o),e(Zh,YI),e(YI,a_o),e(Zh,n_o),e(he,s_o),e(he,ep),e(ep,lle),e(lle,l_o),e(ep,i_o),e(ep,KI),e(KI,d_o),e(ep,c_o),e(he,f_o),e(he,op),e(op,ile),e(ile,m_o),e(op,g_o),e(op,ZI),e(ZI,h_o),e(op,p_o),e(he,__o),e(he,rp),e(rp,dle),e(dle,u_o),e(rp,b_o),e(rp,eN),e(eN,v_o),e(rp,F_o),e(he,T_o),e(he,tp),e(tp,cle),e(cle,M_o),e(tp,E_o),e(tp,oN),e(oN,C_o),e(tp,w_o),e(he,A_o),e(he,ap),e(ap,fle),e(fle,L_o),e(ap,y_o),e(ap,rN),e(rN,x_o),e(ap,$_o),e(he,k_o),e(he,np),e(np,mle),e(mle,S_o),e(np,R_o),e(np,tN),e(tN,P_o),e(np,B_o),e(he,I_o),e(he,sp),e(sp,gle),e(gle,N_o),e(sp,q_o),e(sp,aN),e(aN,j_o),e(sp,D_o),e(he,G_o),e(he,lp),e(lp,hle),e(hle,O_o),e(lp,V_o),e(lp,nN),e(nN,X_o),e(lp,z_o),e(he,W_o),e(he,ip),e(ip,ple),e(ple,Q_o),e(ip,H_o),e(ip,sN),e(sN,U_o),e(ip,J_o),e(he,Y_o),e(he,dp),e(dp,_le),e(_le,K_o),e(dp,Z_o),e(dp,lN),e(lN,euo),e(dp,ouo),e(he,ruo),e(he,cp),e(cp,ule),e(ule,tuo),e(cp,auo),e(cp,iN),e(iN,nuo),e(cp,suo),e(he,luo),e(he,fp),e(fp,ble),e(ble,iuo),e(fp,duo),e(fp,dN),e(dN,cuo),e(fp,fuo),e(he,muo),e(he,mp),e(mp,vle),e(vle,guo),e(mp,huo),e(mp,cN),e(cN,puo),e(mp,_uo),e(he,uuo),e(he,gp),e(gp,Fle),e(Fle,buo),e(gp,vuo),e(gp,fN),e(fN,Fuo),e(gp,Tuo),e(Ue,Muo),M(hp,Ue,null),e(Ue,Euo),M(pp,Ue,null),e(Lo,Cuo),e(Lo,_p),M(ML,_p,null),e(_p,wuo),e(_p,Tle),e(Tle,Auo),b(f,oDe,u),b(f,Li,u),e(Li,up),e(up,Mle),M(EL,Mle,null),e(Li,Luo),e(Li,Ele),e(Ele,yuo),b(f,rDe,u),b(f,yo,u),M(CL,yo,null),e(yo,xuo),e(yo,yi),e(yi,$uo),e(yi,mN),e(mN,kuo),e(yi,Suo),e(yi,gN),e(gN,Ruo),e(yi,Puo),e(yo,Buo),e(yo,wL),e(wL,Iuo),e(wL,Cle),e(Cle,Nuo),e(wL,quo),e(yo,juo),e(yo,tt),M(AL,tt,null),e(tt,Duo),e(tt,wle),e(wle,Guo),e(tt,Ouo),e(tt,xi),e(xi,Vuo),e(xi,Ale),e(Ale,Xuo),e(xi,zuo),e(xi,hN),e(hN,Wuo),e(xi,Quo),e(tt,Huo),M(bp,tt,null),e(yo,Uuo),e(yo,Je),M(LL,Je,null),e(Je,Juo),e(Je,Lle),e(Lle,Yuo),e(Je,Kuo),e(Je,ya),e(ya,Zuo),e(ya,yle),e(yle,e1o),e(ya,o1o),e(ya,xle),e(xle,r1o),e(ya,t1o),e(ya,$le),e($le,a1o),e(ya,n1o),e(Je,s1o),e(Je,y),e(y,vp),e(vp,kle),e(kle,l1o),e(vp,i1o),e(vp,pN),e(pN,d1o),e(vp,c1o),e(y,f1o),e(y,Fp),e(Fp,Sle),e(Sle,m1o),e(Fp,g1o),e(Fp,_N),e(_N,h1o),e(Fp,p1o),e(y,_1o),e(y,Tp),e(Tp,Rle),e(Rle,u1o),e(Tp,b1o),e(Tp,uN),e(uN,v1o),e(Tp,F1o),e(y,T1o),e(y,Mp),e(Mp,Ple),e(Ple,M1o),e(Mp,E1o),e(Mp,bN),e(bN,C1o),e(Mp,w1o),e(y,A1o),e(y,Ep),e(Ep,Ble),e(Ble,L1o),e(Ep,y1o),e(Ep,vN),e(vN,x1o),e(Ep,$1o),e(y,k1o),e(y,Cp),e(Cp,Ile),e(Ile,S1o),e(Cp,R1o),e(Cp,FN),e(FN,P1o),e(Cp,B1o),e(y,I1o),e(y,wp),e(wp,Nle),e(Nle,N1o),e(wp,q1o),e(wp,TN),e(TN,j1o),e(wp,D1o),e(y,G1o),e(y,Ap),e(Ap,qle),e(qle,O1o),e(Ap,V1o),e(Ap,MN),e(MN,X1o),e(Ap,z1o),e(y,W1o),e(y,Lp),e(Lp,jle),e(jle,Q1o),e(Lp,H1o),e(Lp,EN),e(EN,U1o),e(Lp,J1o),e(y,Y1o),e(y,yp),e(yp,Dle),e(Dle,K1o),e(yp,Z1o),e(yp,CN),e(CN,ebo),e(yp,obo),e(y,rbo),e(y,xp),e(xp,Gle),e(Gle,tbo),e(xp,abo),e(xp,wN),e(wN,nbo),e(xp,sbo),e(y,lbo),e(y,$p),e($p,Ole),e(Ole,ibo),e($p,dbo),e($p,AN),e(AN,cbo),e($p,fbo),e(y,mbo),e(y,kp),e(kp,Vle),e(Vle,gbo),e(kp,hbo),e(kp,LN),e(LN,pbo),e(kp,_bo),e(y,ubo),e(y,Sp),e(Sp,Xle),e(Xle,bbo),e(Sp,vbo),e(Sp,yN),e(yN,Fbo),e(Sp,Tbo),e(y,Mbo),e(y,Rp),e(Rp,zle),e(zle,Ebo),e(Rp,Cbo),e(Rp,xN),e(xN,wbo),e(Rp,Abo),e(y,Lbo),e(y,Pp),e(Pp,Wle),e(Wle,ybo),e(Pp,xbo),e(Pp,$N),e($N,$bo),e(Pp,kbo),e(y,Sbo),e(y,Bp),e(Bp,Qle),e(Qle,Rbo),e(Bp,Pbo),e(Bp,kN),e(kN,Bbo),e(Bp,Ibo),e(y,Nbo),e(y,Ip),e(Ip,Hle),e(Hle,qbo),e(Ip,jbo),e(Ip,SN),e(SN,Dbo),e(Ip,Gbo),e(y,Obo),e(y,Np),e(Np,Ule),e(Ule,Vbo),e(Np,Xbo),e(Np,RN),e(RN,zbo),e(Np,Wbo),e(y,Qbo),e(y,qp),e(qp,Jle),e(Jle,Hbo),e(qp,Ubo),e(qp,PN),e(PN,Jbo),e(qp,Ybo),e(y,Kbo),e(y,jp),e(jp,Yle),e(Yle,Zbo),e(jp,e2o),e(jp,BN),e(BN,o2o),e(jp,r2o),e(y,t2o),e(y,Dp),e(Dp,Kle),e(Kle,a2o),e(Dp,n2o),e(Dp,IN),e(IN,s2o),e(Dp,l2o),e(y,i2o),e(y,Gp),e(Gp,Zle),e(Zle,d2o),e(Gp,c2o),e(Gp,NN),e(NN,f2o),e(Gp,m2o),e(y,g2o),e(y,Op),e(Op,eie),e(eie,h2o),e(Op,p2o),e(Op,qN),e(qN,_2o),e(Op,u2o),e(y,b2o),e(y,Vp),e(Vp,oie),e(oie,v2o),e(Vp,F2o),e(Vp,jN),e(jN,T2o),e(Vp,M2o),e(y,E2o),e(y,Xp),e(Xp,rie),e(rie,C2o),e(Xp,w2o),e(Xp,DN),e(DN,A2o),e(Xp,L2o),e(y,y2o),e(y,zp),e(zp,tie),e(tie,x2o),e(zp,$2o),e(zp,GN),e(GN,k2o),e(zp,S2o),e(y,R2o),e(y,Wp),e(Wp,aie),e(aie,P2o),e(Wp,B2o),e(Wp,ON),e(ON,I2o),e(Wp,N2o),e(y,q2o),e(y,Qp),e(Qp,nie),e(nie,j2o),e(Qp,D2o),e(Qp,VN),e(VN,G2o),e(Qp,O2o),e(y,V2o),e(y,Hp),e(Hp,sie),e(sie,X2o),e(Hp,z2o),e(Hp,XN),e(XN,W2o),e(Hp,Q2o),e(y,H2o),e(y,Up),e(Up,lie),e(lie,U2o),e(Up,J2o),e(Up,zN),e(zN,Y2o),e(Up,K2o),e(y,Z2o),e(y,Jp),e(Jp,iie),e(iie,e4o),e(Jp,o4o),e(Jp,WN),e(WN,r4o),e(Jp,t4o),e(y,a4o),e(y,Yp),e(Yp,die),e(die,n4o),e(Yp,s4o),e(Yp,QN),e(QN,l4o),e(Yp,i4o),e(y,d4o),e(y,Bs),e(Bs,cie),e(cie,c4o),e(Bs,f4o),e(Bs,HN),e(HN,m4o),e(Bs,g4o),e(Bs,UN),e(UN,h4o),e(Bs,p4o),e(y,_4o),e(y,Kp),e(Kp,fie),e(fie,u4o),e(Kp,b4o),e(Kp,JN),e(JN,v4o),e(Kp,F4o),e(y,T4o),e(y,Zp),e(Zp,mie),e(mie,M4o),e(Zp,E4o),e(Zp,YN),e(YN,C4o),e(Zp,w4o),e(y,A4o),e(y,e_),e(e_,gie),e(gie,L4o),e(e_,y4o),e(e_,KN),e(KN,x4o),e(e_,$4o),e(y,k4o),e(y,o_),e(o_,hie),e(hie,S4o),e(o_,R4o),e(o_,ZN),e(ZN,P4o),e(o_,B4o),e(y,I4o),e(y,r_),e(r_,pie),e(pie,N4o),e(r_,q4o),e(r_,eq),e(eq,j4o),e(r_,D4o),e(y,G4o),e(y,t_),e(t_,_ie),e(_ie,O4o),e(t_,V4o),e(t_,oq),e(oq,X4o),e(t_,z4o),e(y,W4o),e(y,a_),e(a_,uie),e(uie,Q4o),e(a_,H4o),e(a_,rq),e(rq,U4o),e(a_,J4o),e(y,Y4o),e(y,n_),e(n_,bie),e(bie,K4o),e(n_,Z4o),e(n_,tq),e(tq,evo),e(n_,ovo),e(y,rvo),e(y,s_),e(s_,vie),e(vie,tvo),e(s_,avo),e(s_,aq),e(aq,nvo),e(s_,svo),e(y,lvo),e(y,l_),e(l_,Fie),e(Fie,ivo),e(l_,dvo),e(l_,nq),e(nq,cvo),e(l_,fvo),e(y,mvo),e(y,i_),e(i_,Tie),e(Tie,gvo),e(i_,hvo),e(i_,sq),e(sq,pvo),e(i_,_vo),e(y,uvo),e(y,d_),e(d_,Mie),e(Mie,bvo),e(d_,vvo),e(d_,lq),e(lq,Fvo),e(d_,Tvo),e(y,Mvo),e(y,c_),e(c_,Eie),e(Eie,Evo),e(c_,Cvo),e(c_,iq),e(iq,wvo),e(c_,Avo),e(y,Lvo),e(y,f_),e(f_,Cie),e(Cie,yvo),e(f_,xvo),e(f_,dq),e(dq,$vo),e(f_,kvo),e(y,Svo),e(y,m_),e(m_,wie),e(wie,Rvo),e(m_,Pvo),e(m_,cq),e(cq,Bvo),e(m_,Ivo),e(y,Nvo),e(y,g_),e(g_,Aie),e(Aie,qvo),e(g_,jvo),e(g_,fq),e(fq,Dvo),e(g_,Gvo),e(y,Ovo),e(y,h_),e(h_,Lie),e(Lie,Vvo),e(h_,Xvo),e(h_,mq),e(mq,zvo),e(h_,Wvo),e(y,Qvo),e(y,p_),e(p_,yie),e(yie,Hvo),e(p_,Uvo),e(p_,gq),e(gq,Jvo),e(p_,Yvo),e(y,Kvo),e(y,__),e(__,xie),e(xie,Zvo),e(__,eFo),e(__,hq),e(hq,oFo),e(__,rFo),e(y,tFo),e(y,u_),e(u_,$ie),e($ie,aFo),e(u_,nFo),e(u_,pq),e(pq,sFo),e(u_,lFo),e(y,iFo),e(y,b_),e(b_,kie),e(kie,dFo),e(b_,cFo),e(b_,_q),e(_q,fFo),e(b_,mFo),e(y,gFo),e(y,v_),e(v_,Sie),e(Sie,hFo),e(v_,pFo),e(v_,uq),e(uq,_Fo),e(v_,uFo),e(y,bFo),e(y,F_),e(F_,Rie),e(Rie,vFo),e(F_,FFo),e(F_,bq),e(bq,TFo),e(F_,MFo),e(y,EFo),e(y,T_),e(T_,Pie),e(Pie,CFo),e(T_,wFo),e(T_,vq),e(vq,AFo),e(T_,LFo),e(y,yFo),e(y,M_),e(M_,Bie),e(Bie,xFo),e(M_,$Fo),e(M_,Fq),e(Fq,kFo),e(M_,SFo),e(y,RFo),e(y,E_),e(E_,Iie),e(Iie,PFo),e(E_,BFo),e(E_,Tq),e(Tq,IFo),e(E_,NFo),e(y,qFo),e(y,C_),e(C_,Nie),e(Nie,jFo),e(C_,DFo),e(C_,Mq),e(Mq,GFo),e(C_,OFo),e(y,VFo),e(y,w_),e(w_,qie),e(qie,XFo),e(w_,zFo),e(w_,Eq),e(Eq,WFo),e(w_,QFo),e(y,HFo),e(y,A_),e(A_,jie),e(jie,UFo),e(A_,JFo),e(A_,Cq),e(Cq,YFo),e(A_,KFo),e(y,ZFo),e(y,L_),e(L_,Die),e(Die,e6o),e(L_,o6o),e(L_,wq),e(wq,r6o),e(L_,t6o),e(y,a6o),e(y,y_),e(y_,Gie),e(Gie,n6o),e(y_,s6o),e(y_,Aq),e(Aq,l6o),e(y_,i6o),e(y,d6o),e(y,x_),e(x_,Oie),e(Oie,c6o),e(x_,f6o),e(x_,Lq),e(Lq,m6o),e(x_,g6o),e(y,h6o),e(y,$_),e($_,Vie),e(Vie,p6o),e($_,_6o),e($_,yq),e(yq,u6o),e($_,b6o),e(y,v6o),e(y,k_),e(k_,Xie),e(Xie,F6o),e(k_,T6o),e(k_,xq),e(xq,M6o),e(k_,E6o),e(y,C6o),e(y,S_),e(S_,zie),e(zie,w6o),e(S_,A6o),e(S_,$q),e($q,L6o),e(S_,y6o),e(y,x6o),e(y,R_),e(R_,Wie),e(Wie,$6o),e(R_,k6o),e(R_,kq),e(kq,S6o),e(R_,R6o),e(y,P6o),e(y,P_),e(P_,Qie),e(Qie,B6o),e(P_,I6o),e(P_,Sq),e(Sq,N6o),e(P_,q6o),e(y,j6o),e(y,B_),e(B_,Hie),e(Hie,D6o),e(B_,G6o),e(B_,Rq),e(Rq,O6o),e(B_,V6o),e(y,X6o),e(y,I_),e(I_,Uie),e(Uie,z6o),e(I_,W6o),e(I_,Pq),e(Pq,Q6o),e(I_,H6o),e(y,U6o),e(y,N_),e(N_,Jie),e(Jie,J6o),e(N_,Y6o),e(N_,Bq),e(Bq,K6o),e(N_,Z6o),e(y,eTo),e(y,q_),e(q_,Yie),e(Yie,oTo),e(q_,rTo),e(q_,Iq),e(Iq,tTo),e(q_,aTo),e(y,nTo),e(y,j_),e(j_,Kie),e(Kie,sTo),e(j_,lTo),e(j_,Nq),e(Nq,iTo),e(j_,dTo),e(y,cTo),e(y,D_),e(D_,Zie),e(Zie,fTo),e(D_,mTo),e(D_,qq),e(qq,gTo),e(D_,hTo),e(y,pTo),e(y,G_),e(G_,ede),e(ede,_To),e(G_,uTo),e(G_,jq),e(jq,bTo),e(G_,vTo),e(y,FTo),e(y,O_),e(O_,ode),e(ode,TTo),e(O_,MTo),e(O_,Dq),e(Dq,ETo),e(O_,CTo),e(y,wTo),e(y,V_),e(V_,rde),e(rde,ATo),e(V_,LTo),e(V_,Gq),e(Gq,yTo),e(V_,xTo),e(y,$To),e(y,X_),e(X_,tde),e(tde,kTo),e(X_,STo),e(X_,Oq),e(Oq,RTo),e(X_,PTo),e(y,BTo),e(y,z_),e(z_,ade),e(ade,ITo),e(z_,NTo),e(z_,Vq),e(Vq,qTo),e(z_,jTo),e(y,DTo),e(y,W_),e(W_,nde),e(nde,GTo),e(W_,OTo),e(W_,Xq),e(Xq,VTo),e(W_,XTo),e(y,zTo),e(y,Q_),e(Q_,sde),e(sde,WTo),e(Q_,QTo),e(Q_,zq),e(zq,HTo),e(Q_,UTo),e(y,JTo),e(y,H_),e(H_,lde),e(lde,YTo),e(H_,KTo),e(H_,Wq),e(Wq,ZTo),e(H_,e7o),e(y,o7o),e(y,U_),e(U_,ide),e(ide,r7o),e(U_,t7o),e(U_,Qq),e(Qq,a7o),e(U_,n7o),e(y,s7o),e(y,J_),e(J_,dde),e(dde,l7o),e(J_,i7o),e(J_,Hq),e(Hq,d7o),e(J_,c7o),e(y,f7o),e(y,Y_),e(Y_,cde),e(cde,m7o),e(Y_,g7o),e(Y_,Uq),e(Uq,h7o),e(Y_,p7o),e(y,_7o),e(y,K_),e(K_,fde),e(fde,u7o),e(K_,b7o),e(K_,Jq),e(Jq,v7o),e(K_,F7o),e(y,T7o),e(y,Z_),e(Z_,mde),e(mde,M7o),e(Z_,E7o),e(Z_,Yq),e(Yq,C7o),e(Z_,w7o),e(y,A7o),e(y,eu),e(eu,gde),e(gde,L7o),e(eu,y7o),e(eu,Kq),e(Kq,x7o),e(eu,$7o),e(y,k7o),e(y,ou),e(ou,hde),e(hde,S7o),e(ou,R7o),e(ou,Zq),e(Zq,P7o),e(ou,B7o),e(y,I7o),e(y,ru),e(ru,pde),e(pde,N7o),e(ru,q7o),e(ru,ej),e(ej,j7o),e(ru,D7o),e(y,G7o),e(y,tu),e(tu,_de),e(_de,O7o),e(tu,V7o),e(tu,oj),e(oj,X7o),e(tu,z7o),e(y,W7o),e(y,au),e(au,ude),e(ude,Q7o),e(au,H7o),e(au,rj),e(rj,U7o),e(au,J7o),e(y,Y7o),e(y,nu),e(nu,bde),e(bde,K7o),e(nu,Z7o),e(nu,tj),e(tj,eMo),e(nu,oMo),e(y,rMo),e(y,su),e(su,vde),e(vde,tMo),e(su,aMo),e(su,aj),e(aj,nMo),e(su,sMo),e(y,lMo),e(y,lu),e(lu,Fde),e(Fde,iMo),e(lu,dMo),e(lu,nj),e(nj,cMo),e(lu,fMo),e(y,mMo),e(y,iu),e(iu,Tde),e(Tde,gMo),e(iu,hMo),e(iu,sj),e(sj,pMo),e(iu,_Mo),e(y,uMo),e(y,du),e(du,Mde),e(Mde,bMo),e(du,vMo),e(du,lj),e(lj,FMo),e(du,TMo),e(y,MMo),e(y,cu),e(cu,Ede),e(Ede,EMo),e(cu,CMo),e(cu,ij),e(ij,wMo),e(cu,AMo),e(y,LMo),e(y,fu),e(fu,Cde),e(Cde,yMo),e(fu,xMo),e(fu,dj),e(dj,$Mo),e(fu,kMo),e(y,SMo),e(y,mu),e(mu,wde),e(wde,RMo),e(mu,PMo),e(mu,cj),e(cj,BMo),e(mu,IMo),e(y,NMo),e(y,gu),e(gu,Ade),e(Ade,qMo),e(gu,jMo),e(gu,fj),e(fj,DMo),e(gu,GMo),e(y,OMo),e(y,hu),e(hu,Lde),e(Lde,VMo),e(hu,XMo),e(hu,mj),e(mj,zMo),e(hu,WMo),e(y,QMo),e(y,pu),e(pu,yde),e(yde,HMo),e(pu,UMo),e(pu,gj),e(gj,JMo),e(pu,YMo),e(Je,KMo),e(Je,_u),e(_u,ZMo),e(_u,xde),e(xde,eEo),e(_u,oEo),e(_u,$de),e($de,rEo),e(Je,tEo),M(uu,Je,null),b(f,tDe,u),b(f,$i,u),e($i,bu),e(bu,kde),M(yL,kde,null),e($i,aEo),e($i,Sde),e(Sde,nEo),b(f,aDe,u),b(f,xo,u),M(xL,xo,null),e(xo,sEo),e(xo,ki),e(ki,lEo),e(ki,hj),e(hj,iEo),e(ki,dEo),e(ki,pj),e(pj,cEo),e(ki,fEo),e(xo,mEo),e(xo,$L),e($L,gEo),e($L,Rde),e(Rde,hEo),e($L,pEo),e(xo,_Eo),e(xo,at),M(kL,at,null),e(at,uEo),e(at,Pde),e(Pde,bEo),e(at,vEo),e(at,Si),e(Si,FEo),e(Si,Bde),e(Bde,TEo),e(Si,MEo),e(Si,_j),e(_j,EEo),e(Si,CEo),e(at,wEo),M(vu,at,null),e(xo,AEo),e(xo,Ye),M(SL,Ye,null),e(Ye,LEo),e(Ye,Ide),e(Ide,yEo),e(Ye,xEo),e(Ye,xa),e(xa,$Eo),e(xa,Nde),e(Nde,kEo),e(xa,SEo),e(xa,qde),e(qde,REo),e(xa,PEo),e(xa,jde),e(jde,BEo),e(xa,IEo),e(Ye,NEo),e(Ye,G),e(G,Fu),e(Fu,Dde),e(Dde,qEo),e(Fu,jEo),e(Fu,uj),e(uj,DEo),e(Fu,GEo),e(G,OEo),e(G,Tu),e(Tu,Gde),e(Gde,VEo),e(Tu,XEo),e(Tu,bj),e(bj,zEo),e(Tu,WEo),e(G,QEo),e(G,Mu),e(Mu,Ode),e(Ode,HEo),e(Mu,UEo),e(Mu,vj),e(vj,JEo),e(Mu,YEo),e(G,KEo),e(G,Eu),e(Eu,Vde),e(Vde,ZEo),e(Eu,eCo),e(Eu,Fj),e(Fj,oCo),e(Eu,rCo),e(G,tCo),e(G,Cu),e(Cu,Xde),e(Xde,aCo),e(Cu,nCo),e(Cu,Tj),e(Tj,sCo),e(Cu,lCo),e(G,iCo),e(G,wu),e(wu,zde),e(zde,dCo),e(wu,cCo),e(wu,Mj),e(Mj,fCo),e(wu,mCo),e(G,gCo),e(G,Au),e(Au,Wde),e(Wde,hCo),e(Au,pCo),e(Au,Ej),e(Ej,_Co),e(Au,uCo),e(G,bCo),e(G,Lu),e(Lu,Qde),e(Qde,vCo),e(Lu,FCo),e(Lu,Cj),e(Cj,TCo),e(Lu,MCo),e(G,ECo),e(G,yu),e(yu,Hde),e(Hde,CCo),e(yu,wCo),e(yu,wj),e(wj,ACo),e(yu,LCo),e(G,yCo),e(G,xu),e(xu,Ude),e(Ude,xCo),e(xu,$Co),e(xu,Aj),e(Aj,kCo),e(xu,SCo),e(G,RCo),e(G,$u),e($u,Jde),e(Jde,PCo),e($u,BCo),e($u,Lj),e(Lj,ICo),e($u,NCo),e(G,qCo),e(G,ku),e(ku,Yde),e(Yde,jCo),e(ku,DCo),e(ku,yj),e(yj,GCo),e(ku,OCo),e(G,VCo),e(G,Su),e(Su,Kde),e(Kde,XCo),e(Su,zCo),e(Su,xj),e(xj,WCo),e(Su,QCo),e(G,HCo),e(G,Ru),e(Ru,Zde),e(Zde,UCo),e(Ru,JCo),e(Ru,$j),e($j,YCo),e(Ru,KCo),e(G,ZCo),e(G,Pu),e(Pu,ece),e(ece,e5o),e(Pu,o5o),e(Pu,kj),e(kj,r5o),e(Pu,t5o),e(G,a5o),e(G,Bu),e(Bu,oce),e(oce,n5o),e(Bu,s5o),e(Bu,Sj),e(Sj,l5o),e(Bu,i5o),e(G,d5o),e(G,Iu),e(Iu,rce),e(rce,c5o),e(Iu,f5o),e(Iu,Rj),e(Rj,m5o),e(Iu,g5o),e(G,h5o),e(G,Nu),e(Nu,tce),e(tce,p5o),e(Nu,_5o),e(Nu,Pj),e(Pj,u5o),e(Nu,b5o),e(G,v5o),e(G,qu),e(qu,ace),e(ace,F5o),e(qu,T5o),e(qu,Bj),e(Bj,M5o),e(qu,E5o),e(G,C5o),e(G,ju),e(ju,nce),e(nce,w5o),e(ju,A5o),e(ju,Ij),e(Ij,L5o),e(ju,y5o),e(G,x5o),e(G,Du),e(Du,sce),e(sce,$5o),e(Du,k5o),e(Du,Nj),e(Nj,S5o),e(Du,R5o),e(G,P5o),e(G,Gu),e(Gu,lce),e(lce,B5o),e(Gu,I5o),e(Gu,qj),e(qj,N5o),e(Gu,q5o),e(G,j5o),e(G,Ou),e(Ou,ice),e(ice,D5o),e(Ou,G5o),e(Ou,jj),e(jj,O5o),e(Ou,V5o),e(G,X5o),e(G,Vu),e(Vu,dce),e(dce,z5o),e(Vu,W5o),e(Vu,Dj),e(Dj,Q5o),e(Vu,H5o),e(G,U5o),e(G,Xu),e(Xu,cce),e(cce,J5o),e(Xu,Y5o),e(Xu,Gj),e(Gj,K5o),e(Xu,Z5o),e(G,e3o),e(G,zu),e(zu,fce),e(fce,o3o),e(zu,r3o),e(zu,Oj),e(Oj,t3o),e(zu,a3o),e(G,n3o),e(G,Wu),e(Wu,mce),e(mce,s3o),e(Wu,l3o),e(Wu,Vj),e(Vj,i3o),e(Wu,d3o),e(G,c3o),e(G,Qu),e(Qu,gce),e(gce,f3o),e(Qu,m3o),e(Qu,Xj),e(Xj,g3o),e(Qu,h3o),e(G,p3o),e(G,Hu),e(Hu,hce),e(hce,_3o),e(Hu,u3o),e(Hu,zj),e(zj,b3o),e(Hu,v3o),e(G,F3o),e(G,Uu),e(Uu,pce),e(pce,T3o),e(Uu,M3o),e(Uu,Wj),e(Wj,E3o),e(Uu,C3o),e(G,w3o),e(G,Ju),e(Ju,_ce),e(_ce,A3o),e(Ju,L3o),e(Ju,Qj),e(Qj,y3o),e(Ju,x3o),e(G,$3o),e(G,Yu),e(Yu,uce),e(uce,k3o),e(Yu,S3o),e(Yu,Hj),e(Hj,R3o),e(Yu,P3o),e(G,B3o),e(G,Ku),e(Ku,bce),e(bce,I3o),e(Ku,N3o),e(Ku,Uj),e(Uj,q3o),e(Ku,j3o),e(G,D3o),e(G,Zu),e(Zu,vce),e(vce,G3o),e(Zu,O3o),e(Zu,Jj),e(Jj,V3o),e(Zu,X3o),e(G,z3o),e(G,e1),e(e1,Fce),e(Fce,W3o),e(e1,Q3o),e(e1,Yj),e(Yj,H3o),e(e1,U3o),e(G,J3o),e(G,o1),e(o1,Tce),e(Tce,Y3o),e(o1,K3o),e(o1,Kj),e(Kj,Z3o),e(o1,e0o),e(G,o0o),e(G,r1),e(r1,Mce),e(Mce,r0o),e(r1,t0o),e(r1,Zj),e(Zj,a0o),e(r1,n0o),e(G,s0o),e(G,t1),e(t1,Ece),e(Ece,l0o),e(t1,i0o),e(t1,eD),e(eD,d0o),e(t1,c0o),e(G,f0o),e(G,a1),e(a1,Cce),e(Cce,m0o),e(a1,g0o),e(a1,oD),e(oD,h0o),e(a1,p0o),e(G,_0o),e(G,n1),e(n1,wce),e(wce,u0o),e(n1,b0o),e(n1,rD),e(rD,v0o),e(n1,F0o),e(G,T0o),e(G,s1),e(s1,Ace),e(Ace,M0o),e(s1,E0o),e(s1,tD),e(tD,C0o),e(s1,w0o),e(G,A0o),e(G,l1),e(l1,Lce),e(Lce,L0o),e(l1,y0o),e(l1,aD),e(aD,x0o),e(l1,$0o),e(G,k0o),e(G,i1),e(i1,yce),e(yce,S0o),e(i1,R0o),e(i1,nD),e(nD,P0o),e(i1,B0o),e(Ye,I0o),e(Ye,d1),e(d1,N0o),e(d1,xce),e(xce,q0o),e(d1,j0o),e(d1,$ce),e($ce,D0o),e(Ye,G0o),M(c1,Ye,null),b(f,nDe,u),b(f,Ri,u),e(Ri,f1),e(f1,kce),M(RL,kce,null),e(Ri,O0o),e(Ri,Sce),e(Sce,V0o),b(f,sDe,u),b(f,$o,u),M(PL,$o,null),e($o,X0o),e($o,Pi),e(Pi,z0o),e(Pi,sD),e(sD,W0o),e(Pi,Q0o),e(Pi,lD),e(lD,H0o),e(Pi,U0o),e($o,J0o),e($o,BL),e(BL,Y0o),e(BL,Rce),e(Rce,K0o),e(BL,Z0o),e($o,ewo),e($o,nt),M(IL,nt,null),e(nt,owo),e(nt,Pce),e(Pce,rwo),e(nt,two),e(nt,Bi),e(Bi,awo),e(Bi,Bce),e(Bce,nwo),e(Bi,swo),e(Bi,iD),e(iD,lwo),e(Bi,iwo),e(nt,dwo),M(m1,nt,null),e($o,cwo),e($o,Ke),M(NL,Ke,null),e(Ke,fwo),e(Ke,Ice),e(Ice,mwo),e(Ke,gwo),e(Ke,$a),e($a,hwo),e($a,Nce),e(Nce,pwo),e($a,_wo),e($a,qce),e(qce,uwo),e($a,bwo),e($a,jce),e(jce,vwo),e($a,Fwo),e(Ke,Two),e(Ke,z),e(z,g1),e(g1,Dce),e(Dce,Mwo),e(g1,Ewo),e(g1,dD),e(dD,Cwo),e(g1,wwo),e(z,Awo),e(z,h1),e(h1,Gce),e(Gce,Lwo),e(h1,ywo),e(h1,cD),e(cD,xwo),e(h1,$wo),e(z,kwo),e(z,p1),e(p1,Oce),e(Oce,Swo),e(p1,Rwo),e(p1,fD),e(fD,Pwo),e(p1,Bwo),e(z,Iwo),e(z,_1),e(_1,Vce),e(Vce,Nwo),e(_1,qwo),e(_1,mD),e(mD,jwo),e(_1,Dwo),e(z,Gwo),e(z,u1),e(u1,Xce),e(Xce,Owo),e(u1,Vwo),e(u1,gD),e(gD,Xwo),e(u1,zwo),e(z,Wwo),e(z,b1),e(b1,zce),e(zce,Qwo),e(b1,Hwo),e(b1,hD),e(hD,Uwo),e(b1,Jwo),e(z,Ywo),e(z,v1),e(v1,Wce),e(Wce,Kwo),e(v1,Zwo),e(v1,pD),e(pD,eAo),e(v1,oAo),e(z,rAo),e(z,F1),e(F1,Qce),e(Qce,tAo),e(F1,aAo),e(F1,_D),e(_D,nAo),e(F1,sAo),e(z,lAo),e(z,T1),e(T1,Hce),e(Hce,iAo),e(T1,dAo),e(T1,uD),e(uD,cAo),e(T1,fAo),e(z,mAo),e(z,M1),e(M1,Uce),e(Uce,gAo),e(M1,hAo),e(M1,bD),e(bD,pAo),e(M1,_Ao),e(z,uAo),e(z,E1),e(E1,Jce),e(Jce,bAo),e(E1,vAo),e(E1,vD),e(vD,FAo),e(E1,TAo),e(z,MAo),e(z,C1),e(C1,Yce),e(Yce,EAo),e(C1,CAo),e(C1,FD),e(FD,wAo),e(C1,AAo),e(z,LAo),e(z,w1),e(w1,Kce),e(Kce,yAo),e(w1,xAo),e(w1,TD),e(TD,$Ao),e(w1,kAo),e(z,SAo),e(z,A1),e(A1,Zce),e(Zce,RAo),e(A1,PAo),e(A1,MD),e(MD,BAo),e(A1,IAo),e(z,NAo),e(z,L1),e(L1,efe),e(efe,qAo),e(L1,jAo),e(L1,ED),e(ED,DAo),e(L1,GAo),e(z,OAo),e(z,y1),e(y1,ofe),e(ofe,VAo),e(y1,XAo),e(y1,CD),e(CD,zAo),e(y1,WAo),e(z,QAo),e(z,x1),e(x1,rfe),e(rfe,HAo),e(x1,UAo),e(x1,wD),e(wD,JAo),e(x1,YAo),e(z,KAo),e(z,$1),e($1,tfe),e(tfe,ZAo),e($1,eLo),e($1,AD),e(AD,oLo),e($1,rLo),e(z,tLo),e(z,k1),e(k1,afe),e(afe,aLo),e(k1,nLo),e(k1,LD),e(LD,sLo),e(k1,lLo),e(z,iLo),e(z,S1),e(S1,nfe),e(nfe,dLo),e(S1,cLo),e(S1,yD),e(yD,fLo),e(S1,mLo),e(z,gLo),e(z,R1),e(R1,sfe),e(sfe,hLo),e(R1,pLo),e(R1,xD),e(xD,_Lo),e(R1,uLo),e(z,bLo),e(z,P1),e(P1,lfe),e(lfe,vLo),e(P1,FLo),e(P1,$D),e($D,TLo),e(P1,MLo),e(z,ELo),e(z,B1),e(B1,ife),e(ife,CLo),e(B1,wLo),e(B1,kD),e(kD,ALo),e(B1,LLo),e(z,yLo),e(z,I1),e(I1,dfe),e(dfe,xLo),e(I1,$Lo),e(I1,SD),e(SD,kLo),e(I1,SLo),e(z,RLo),e(z,N1),e(N1,cfe),e(cfe,PLo),e(N1,BLo),e(N1,RD),e(RD,ILo),e(N1,NLo),e(z,qLo),e(z,q1),e(q1,ffe),e(ffe,jLo),e(q1,DLo),e(q1,PD),e(PD,GLo),e(q1,OLo),e(z,VLo),e(z,j1),e(j1,mfe),e(mfe,XLo),e(j1,zLo),e(j1,BD),e(BD,WLo),e(j1,QLo),e(z,HLo),e(z,D1),e(D1,gfe),e(gfe,ULo),e(D1,JLo),e(D1,ID),e(ID,YLo),e(D1,KLo),e(z,ZLo),e(z,G1),e(G1,hfe),e(hfe,eyo),e(G1,oyo),e(G1,ND),e(ND,ryo),e(G1,tyo),e(z,ayo),e(z,O1),e(O1,pfe),e(pfe,nyo),e(O1,syo),e(O1,qD),e(qD,lyo),e(O1,iyo),e(z,dyo),e(z,V1),e(V1,_fe),e(_fe,cyo),e(V1,fyo),e(V1,jD),e(jD,myo),e(V1,gyo),e(z,hyo),e(z,X1),e(X1,ufe),e(ufe,pyo),e(X1,_yo),e(X1,DD),e(DD,uyo),e(X1,byo),e(z,vyo),e(z,z1),e(z1,bfe),e(bfe,Fyo),e(z1,Tyo),e(z1,GD),e(GD,Myo),e(z1,Eyo),e(z,Cyo),e(z,W1),e(W1,vfe),e(vfe,wyo),e(W1,Ayo),e(W1,OD),e(OD,Lyo),e(W1,yyo),e(z,xyo),e(z,Q1),e(Q1,Ffe),e(Ffe,$yo),e(Q1,kyo),e(Q1,VD),e(VD,Syo),e(Q1,Ryo),e(z,Pyo),e(z,H1),e(H1,Tfe),e(Tfe,Byo),e(H1,Iyo),e(H1,XD),e(XD,Nyo),e(H1,qyo),e(z,jyo),e(z,U1),e(U1,Mfe),e(Mfe,Dyo),e(U1,Gyo),e(U1,zD),e(zD,Oyo),e(U1,Vyo),e(z,Xyo),e(z,J1),e(J1,Efe),e(Efe,zyo),e(J1,Wyo),e(J1,WD),e(WD,Qyo),e(J1,Hyo),e(Ke,Uyo),e(Ke,Y1),e(Y1,Jyo),e(Y1,Cfe),e(Cfe,Yyo),e(Y1,Kyo),e(Y1,wfe),e(wfe,Zyo),e(Ke,e8o),M(K1,Ke,null),b(f,lDe,u),b(f,Ii,u),e(Ii,Z1),e(Z1,Afe),M(qL,Afe,null),e(Ii,o8o),e(Ii,Lfe),e(Lfe,r8o),b(f,iDe,u),b(f,ko,u),M(jL,ko,null),e(ko,t8o),e(ko,Ni),e(Ni,a8o),e(Ni,QD),e(QD,n8o),e(Ni,s8o),e(Ni,HD),e(HD,l8o),e(Ni,i8o),e(ko,d8o),e(ko,DL),e(DL,c8o),e(DL,yfe),e(yfe,f8o),e(DL,m8o),e(ko,g8o),e(ko,st),M(GL,st,null),e(st,h8o),e(st,xfe),e(xfe,p8o),e(st,_8o),e(st,qi),e(qi,u8o),e(qi,$fe),e($fe,b8o),e(qi,v8o),e(qi,UD),e(UD,F8o),e(qi,T8o),e(st,M8o),M(eb,st,null),e(ko,E8o),e(ko,Ze),M(OL,Ze,null),e(Ze,C8o),e(Ze,kfe),e(kfe,w8o),e(Ze,A8o),e(Ze,ka),e(ka,L8o),e(ka,Sfe),e(Sfe,y8o),e(ka,x8o),e(ka,Rfe),e(Rfe,$8o),e(ka,k8o),e(ka,Pfe),e(Pfe,S8o),e(ka,R8o),e(Ze,P8o),e(Ze,Q),e(Q,ob),e(ob,Bfe),e(Bfe,B8o),e(ob,I8o),e(ob,JD),e(JD,N8o),e(ob,q8o),e(Q,j8o),e(Q,rb),e(rb,Ife),e(Ife,D8o),e(rb,G8o),e(rb,YD),e(YD,O8o),e(rb,V8o),e(Q,X8o),e(Q,tb),e(tb,Nfe),e(Nfe,z8o),e(tb,W8o),e(tb,KD),e(KD,Q8o),e(tb,H8o),e(Q,U8o),e(Q,ab),e(ab,qfe),e(qfe,J8o),e(ab,Y8o),e(ab,ZD),e(ZD,K8o),e(ab,Z8o),e(Q,e9o),e(Q,nb),e(nb,jfe),e(jfe,o9o),e(nb,r9o),e(nb,eG),e(eG,t9o),e(nb,a9o),e(Q,n9o),e(Q,sb),e(sb,Dfe),e(Dfe,s9o),e(sb,l9o),e(sb,oG),e(oG,i9o),e(sb,d9o),e(Q,c9o),e(Q,lb),e(lb,Gfe),e(Gfe,f9o),e(lb,m9o),e(lb,rG),e(rG,g9o),e(lb,h9o),e(Q,p9o),e(Q,ib),e(ib,Ofe),e(Ofe,_9o),e(ib,u9o),e(ib,tG),e(tG,b9o),e(ib,v9o),e(Q,F9o),e(Q,db),e(db,Vfe),e(Vfe,T9o),e(db,M9o),e(db,aG),e(aG,E9o),e(db,C9o),e(Q,w9o),e(Q,cb),e(cb,Xfe),e(Xfe,A9o),e(cb,L9o),e(cb,nG),e(nG,y9o),e(cb,x9o),e(Q,$9o),e(Q,fb),e(fb,zfe),e(zfe,k9o),e(fb,S9o),e(fb,sG),e(sG,R9o),e(fb,P9o),e(Q,B9o),e(Q,mb),e(mb,Wfe),e(Wfe,I9o),e(mb,N9o),e(mb,lG),e(lG,q9o),e(mb,j9o),e(Q,D9o),e(Q,gb),e(gb,Qfe),e(Qfe,G9o),e(gb,O9o),e(gb,iG),e(iG,V9o),e(gb,X9o),e(Q,z9o),e(Q,hb),e(hb,Hfe),e(Hfe,W9o),e(hb,Q9o),e(hb,dG),e(dG,H9o),e(hb,U9o),e(Q,J9o),e(Q,pb),e(pb,Ufe),e(Ufe,Y9o),e(pb,K9o),e(pb,cG),e(cG,Z9o),e(pb,exo),e(Q,oxo),e(Q,_b),e(_b,Jfe),e(Jfe,rxo),e(_b,txo),e(_b,fG),e(fG,axo),e(_b,nxo),e(Q,sxo),e(Q,ub),e(ub,Yfe),e(Yfe,lxo),e(ub,ixo),e(ub,mG),e(mG,dxo),e(ub,cxo),e(Q,fxo),e(Q,bb),e(bb,Kfe),e(Kfe,mxo),e(bb,gxo),e(bb,gG),e(gG,hxo),e(bb,pxo),e(Q,_xo),e(Q,vb),e(vb,Zfe),e(Zfe,uxo),e(vb,bxo),e(vb,hG),e(hG,vxo),e(vb,Fxo),e(Q,Txo),e(Q,Fb),e(Fb,eme),e(eme,Mxo),e(Fb,Exo),e(Fb,pG),e(pG,Cxo),e(Fb,wxo),e(Q,Axo),e(Q,Tb),e(Tb,ome),e(ome,Lxo),e(Tb,yxo),e(Tb,_G),e(_G,xxo),e(Tb,$xo),e(Q,kxo),e(Q,Mb),e(Mb,rme),e(rme,Sxo),e(Mb,Rxo),e(Mb,uG),e(uG,Pxo),e(Mb,Bxo),e(Q,Ixo),e(Q,Eb),e(Eb,tme),e(tme,Nxo),e(Eb,qxo),e(Eb,bG),e(bG,jxo),e(Eb,Dxo),e(Q,Gxo),e(Q,Cb),e(Cb,ame),e(ame,Oxo),e(Cb,Vxo),e(Cb,vG),e(vG,Xxo),e(Cb,zxo),e(Q,Wxo),e(Q,wb),e(wb,nme),e(nme,Qxo),e(wb,Hxo),e(wb,FG),e(FG,Uxo),e(wb,Jxo),e(Q,Yxo),e(Q,Ab),e(Ab,sme),e(sme,Kxo),e(Ab,Zxo),e(Ab,TG),e(TG,e$o),e(Ab,o$o),e(Q,r$o),e(Q,Lb),e(Lb,lme),e(lme,t$o),e(Lb,a$o),e(Lb,MG),e(MG,n$o),e(Lb,s$o),e(Q,l$o),e(Q,yb),e(yb,ime),e(ime,i$o),e(yb,d$o),e(yb,EG),e(EG,c$o),e(yb,f$o),e(Q,m$o),e(Q,xb),e(xb,dme),e(dme,g$o),e(xb,h$o),e(xb,CG),e(CG,p$o),e(xb,_$o),e(Q,u$o),e(Q,$b),e($b,cme),e(cme,b$o),e($b,v$o),e($b,wG),e(wG,F$o),e($b,T$o),e(Q,M$o),e(Q,kb),e(kb,fme),e(fme,E$o),e(kb,C$o),e(kb,AG),e(AG,w$o),e(kb,A$o),e(Q,L$o),e(Q,Sb),e(Sb,mme),e(mme,y$o),e(Sb,x$o),e(Sb,gme),e(gme,$$o),e(Sb,k$o),e(Q,S$o),e(Q,Rb),e(Rb,hme),e(hme,R$o),e(Rb,P$o),e(Rb,LG),e(LG,B$o),e(Rb,I$o),e(Q,N$o),e(Q,Pb),e(Pb,pme),e(pme,q$o),e(Pb,j$o),e(Pb,yG),e(yG,D$o),e(Pb,G$o),e(Q,O$o),e(Q,Bb),e(Bb,_me),e(_me,V$o),e(Bb,X$o),e(Bb,xG),e(xG,z$o),e(Bb,W$o),e(Q,Q$o),e(Q,Ib),e(Ib,ume),e(ume,H$o),e(Ib,U$o),e(Ib,$G),e($G,J$o),e(Ib,Y$o),e(Ze,K$o),e(Ze,Nb),e(Nb,Z$o),e(Nb,bme),e(bme,eko),e(Nb,oko),e(Nb,vme),e(vme,rko),e(Ze,tko),M(qb,Ze,null),b(f,dDe,u),b(f,ji,u),e(ji,jb),e(jb,Fme),M(VL,Fme,null),e(ji,ako),e(ji,Tme),e(Tme,nko),b(f,cDe,u),b(f,So,u),M(XL,So,null),e(So,sko),e(So,Di),e(Di,lko),e(Di,kG),e(kG,iko),e(Di,dko),e(Di,SG),e(SG,cko),e(Di,fko),e(So,mko),e(So,zL),e(zL,gko),e(zL,Mme),e(Mme,hko),e(zL,pko),e(So,_ko),e(So,lt),M(WL,lt,null),e(lt,uko),e(lt,Eme),e(Eme,bko),e(lt,vko),e(lt,Gi),e(Gi,Fko),e(Gi,Cme),e(Cme,Tko),e(Gi,Mko),e(Gi,RG),e(RG,Eko),e(Gi,Cko),e(lt,wko),M(Db,lt,null),e(So,Ako),e(So,eo),M(QL,eo,null),e(eo,Lko),e(eo,wme),e(wme,yko),e(eo,xko),e(eo,Sa),e(Sa,$ko),e(Sa,Ame),e(Ame,kko),e(Sa,Sko),e(Sa,Lme),e(Lme,Rko),e(Sa,Pko),e(Sa,yme),e(yme,Bko),e(Sa,Iko),e(eo,Nko),e(eo,ue),e(ue,Gb),e(Gb,xme),e(xme,qko),e(Gb,jko),e(Gb,PG),e(PG,Dko),e(Gb,Gko),e(ue,Oko),e(ue,Ob),e(Ob,$me),e($me,Vko),e(Ob,Xko),e(Ob,BG),e(BG,zko),e(Ob,Wko),e(ue,Qko),e(ue,Vb),e(Vb,kme),e(kme,Hko),e(Vb,Uko),e(Vb,IG),e(IG,Jko),e(Vb,Yko),e(ue,Kko),e(ue,Xb),e(Xb,Sme),e(Sme,Zko),e(Xb,eSo),e(Xb,NG),e(NG,oSo),e(Xb,rSo),e(ue,tSo),e(ue,zb),e(zb,Rme),e(Rme,aSo),e(zb,nSo),e(zb,qG),e(qG,sSo),e(zb,lSo),e(ue,iSo),e(ue,Wb),e(Wb,Pme),e(Pme,dSo),e(Wb,cSo),e(Wb,jG),e(jG,fSo),e(Wb,mSo),e(ue,gSo),e(ue,Qb),e(Qb,Bme),e(Bme,hSo),e(Qb,pSo),e(Qb,DG),e(DG,_So),e(Qb,uSo),e(ue,bSo),e(ue,Hb),e(Hb,Ime),e(Ime,vSo),e(Hb,FSo),e(Hb,GG),e(GG,TSo),e(Hb,MSo),e(ue,ESo),e(ue,Ub),e(Ub,Nme),e(Nme,CSo),e(Ub,wSo),e(Ub,OG),e(OG,ASo),e(Ub,LSo),e(ue,ySo),e(ue,Jb),e(Jb,qme),e(qme,xSo),e(Jb,$So),e(Jb,VG),e(VG,kSo),e(Jb,SSo),e(ue,RSo),e(ue,Yb),e(Yb,jme),e(jme,PSo),e(Yb,BSo),e(Yb,XG),e(XG,ISo),e(Yb,NSo),e(ue,qSo),e(ue,Kb),e(Kb,Dme),e(Dme,jSo),e(Kb,DSo),e(Kb,zG),e(zG,GSo),e(Kb,OSo),e(ue,VSo),e(ue,Zb),e(Zb,Gme),e(Gme,XSo),e(Zb,zSo),e(Zb,WG),e(WG,WSo),e(Zb,QSo),e(ue,HSo),e(ue,e2),e(e2,Ome),e(Ome,USo),e(e2,JSo),e(e2,QG),e(QG,YSo),e(e2,KSo),e(ue,ZSo),e(ue,o2),e(o2,Vme),e(Vme,eRo),e(o2,oRo),e(o2,HG),e(HG,rRo),e(o2,tRo),e(ue,aRo),e(ue,r2),e(r2,Xme),e(Xme,nRo),e(r2,sRo),e(r2,UG),e(UG,lRo),e(r2,iRo),e(eo,dRo),e(eo,t2),e(t2,cRo),e(t2,zme),e(zme,fRo),e(t2,mRo),e(t2,Wme),e(Wme,gRo),e(eo,hRo),M(a2,eo,null),b(f,fDe,u),b(f,Oi,u),e(Oi,n2),e(n2,Qme),M(HL,Qme,null),e(Oi,pRo),e(Oi,Hme),e(Hme,_Ro),b(f,mDe,u),b(f,Ro,u),M(UL,Ro,null),e(Ro,uRo),e(Ro,Vi),e(Vi,bRo),e(Vi,JG),e(JG,vRo),e(Vi,FRo),e(Vi,YG),e(YG,TRo),e(Vi,MRo),e(Ro,ERo),e(Ro,JL),e(JL,CRo),e(JL,Ume),e(Ume,wRo),e(JL,ARo),e(Ro,LRo),e(Ro,it),M(YL,it,null),e(it,yRo),e(it,Jme),e(Jme,xRo),e(it,$Ro),e(it,Xi),e(Xi,kRo),e(Xi,Yme),e(Yme,SRo),e(Xi,RRo),e(Xi,KG),e(KG,PRo),e(Xi,BRo),e(it,IRo),M(s2,it,null),e(Ro,NRo),e(Ro,oo),M(KL,oo,null),e(oo,qRo),e(oo,Kme),e(Kme,jRo),e(oo,DRo),e(oo,Ra),e(Ra,GRo),e(Ra,Zme),e(Zme,ORo),e(Ra,VRo),e(Ra,ege),e(ege,XRo),e(Ra,zRo),e(Ra,oge),e(oge,WRo),e(Ra,QRo),e(oo,HRo),e(oo,N),e(N,l2),e(l2,rge),e(rge,URo),e(l2,JRo),e(l2,ZG),e(ZG,YRo),e(l2,KRo),e(N,ZRo),e(N,i2),e(i2,tge),e(tge,ePo),e(i2,oPo),e(i2,eO),e(eO,rPo),e(i2,tPo),e(N,aPo),e(N,d2),e(d2,age),e(age,nPo),e(d2,sPo),e(d2,oO),e(oO,lPo),e(d2,iPo),e(N,dPo),e(N,c2),e(c2,nge),e(nge,cPo),e(c2,fPo),e(c2,rO),e(rO,mPo),e(c2,gPo),e(N,hPo),e(N,f2),e(f2,sge),e(sge,pPo),e(f2,_Po),e(f2,tO),e(tO,uPo),e(f2,bPo),e(N,vPo),e(N,m2),e(m2,lge),e(lge,FPo),e(m2,TPo),e(m2,aO),e(aO,MPo),e(m2,EPo),e(N,CPo),e(N,g2),e(g2,ige),e(ige,wPo),e(g2,APo),e(g2,nO),e(nO,LPo),e(g2,yPo),e(N,xPo),e(N,h2),e(h2,dge),e(dge,$Po),e(h2,kPo),e(h2,sO),e(sO,SPo),e(h2,RPo),e(N,PPo),e(N,p2),e(p2,cge),e(cge,BPo),e(p2,IPo),e(p2,lO),e(lO,NPo),e(p2,qPo),e(N,jPo),e(N,_2),e(_2,fge),e(fge,DPo),e(_2,GPo),e(_2,iO),e(iO,OPo),e(_2,VPo),e(N,XPo),e(N,u2),e(u2,mge),e(mge,zPo),e(u2,WPo),e(u2,dO),e(dO,QPo),e(u2,HPo),e(N,UPo),e(N,b2),e(b2,gge),e(gge,JPo),e(b2,YPo),e(b2,cO),e(cO,KPo),e(b2,ZPo),e(N,eBo),e(N,v2),e(v2,hge),e(hge,oBo),e(v2,rBo),e(v2,fO),e(fO,tBo),e(v2,aBo),e(N,nBo),e(N,F2),e(F2,pge),e(pge,sBo),e(F2,lBo),e(F2,mO),e(mO,iBo),e(F2,dBo),e(N,cBo),e(N,T2),e(T2,_ge),e(_ge,fBo),e(T2,mBo),e(T2,gO),e(gO,gBo),e(T2,hBo),e(N,pBo),e(N,M2),e(M2,uge),e(uge,_Bo),e(M2,uBo),e(M2,hO),e(hO,bBo),e(M2,vBo),e(N,FBo),e(N,E2),e(E2,bge),e(bge,TBo),e(E2,MBo),e(E2,pO),e(pO,EBo),e(E2,CBo),e(N,wBo),e(N,C2),e(C2,vge),e(vge,ABo),e(C2,LBo),e(C2,_O),e(_O,yBo),e(C2,xBo),e(N,$Bo),e(N,w2),e(w2,Fge),e(Fge,kBo),e(w2,SBo),e(w2,uO),e(uO,RBo),e(w2,PBo),e(N,BBo),e(N,A2),e(A2,Tge),e(Tge,IBo),e(A2,NBo),e(A2,bO),e(bO,qBo),e(A2,jBo),e(N,DBo),e(N,L2),e(L2,Mge),e(Mge,GBo),e(L2,OBo),e(L2,vO),e(vO,VBo),e(L2,XBo),e(N,zBo),e(N,y2),e(y2,Ege),e(Ege,WBo),e(y2,QBo),e(y2,FO),e(FO,HBo),e(y2,UBo),e(N,JBo),e(N,x2),e(x2,Cge),e(Cge,YBo),e(x2,KBo),e(x2,TO),e(TO,ZBo),e(x2,eIo),e(N,oIo),e(N,$2),e($2,wge),e(wge,rIo),e($2,tIo),e($2,MO),e(MO,aIo),e($2,nIo),e(N,sIo),e(N,k2),e(k2,Age),e(Age,lIo),e(k2,iIo),e(k2,EO),e(EO,dIo),e(k2,cIo),e(N,fIo),e(N,S2),e(S2,Lge),e(Lge,mIo),e(S2,gIo),e(S2,CO),e(CO,hIo),e(S2,pIo),e(N,_Io),e(N,R2),e(R2,yge),e(yge,uIo),e(R2,bIo),e(R2,wO),e(wO,vIo),e(R2,FIo),e(N,TIo),e(N,P2),e(P2,xge),e(xge,MIo),e(P2,EIo),e(P2,AO),e(AO,CIo),e(P2,wIo),e(N,AIo),e(N,B2),e(B2,$ge),e($ge,LIo),e(B2,yIo),e(B2,LO),e(LO,xIo),e(B2,$Io),e(N,kIo),e(N,I2),e(I2,kge),e(kge,SIo),e(I2,RIo),e(I2,yO),e(yO,PIo),e(I2,BIo),e(N,IIo),e(N,N2),e(N2,Sge),e(Sge,NIo),e(N2,qIo),e(N2,xO),e(xO,jIo),e(N2,DIo),e(N,GIo),e(N,q2),e(q2,Rge),e(Rge,OIo),e(q2,VIo),e(q2,$O),e($O,XIo),e(q2,zIo),e(N,WIo),e(N,j2),e(j2,Pge),e(Pge,QIo),e(j2,HIo),e(j2,kO),e(kO,UIo),e(j2,JIo),e(N,YIo),e(N,D2),e(D2,Bge),e(Bge,KIo),e(D2,ZIo),e(D2,SO),e(SO,eNo),e(D2,oNo),e(N,rNo),e(N,G2),e(G2,Ige),e(Ige,tNo),e(G2,aNo),e(G2,RO),e(RO,nNo),e(G2,sNo),e(N,lNo),e(N,O2),e(O2,Nge),e(Nge,iNo),e(O2,dNo),e(O2,PO),e(PO,cNo),e(O2,fNo),e(N,mNo),e(N,V2),e(V2,qge),e(qge,gNo),e(V2,hNo),e(V2,BO),e(BO,pNo),e(V2,_No),e(N,uNo),e(N,X2),e(X2,jge),e(jge,bNo),e(X2,vNo),e(X2,IO),e(IO,FNo),e(X2,TNo),e(N,MNo),e(N,z2),e(z2,Dge),e(Dge,ENo),e(z2,CNo),e(z2,NO),e(NO,wNo),e(z2,ANo),e(N,LNo),e(N,W2),e(W2,Gge),e(Gge,yNo),e(W2,xNo),e(W2,qO),e(qO,$No),e(W2,kNo),e(N,SNo),e(N,Q2),e(Q2,Oge),e(Oge,RNo),e(Q2,PNo),e(Q2,jO),e(jO,BNo),e(Q2,INo),e(N,NNo),e(N,H2),e(H2,Vge),e(Vge,qNo),e(H2,jNo),e(H2,DO),e(DO,DNo),e(H2,GNo),e(N,ONo),e(N,U2),e(U2,Xge),e(Xge,VNo),e(U2,XNo),e(U2,GO),e(GO,zNo),e(U2,WNo),e(N,QNo),e(N,J2),e(J2,zge),e(zge,HNo),e(J2,UNo),e(J2,OO),e(OO,JNo),e(J2,YNo),e(N,KNo),e(N,Y2),e(Y2,Wge),e(Wge,ZNo),e(Y2,eqo),e(Y2,VO),e(VO,oqo),e(Y2,rqo),e(N,tqo),e(N,K2),e(K2,Qge),e(Qge,aqo),e(K2,nqo),e(K2,XO),e(XO,sqo),e(K2,lqo),e(N,iqo),e(N,Z2),e(Z2,Hge),e(Hge,dqo),e(Z2,cqo),e(Z2,zO),e(zO,fqo),e(Z2,mqo),e(oo,gqo),e(oo,e4),e(e4,hqo),e(e4,Uge),e(Uge,pqo),e(e4,_qo),e(e4,Jge),e(Jge,uqo),e(oo,bqo),M(o4,oo,null),b(f,gDe,u),b(f,zi,u),e(zi,r4),e(r4,Yge),M(ZL,Yge,null),e(zi,vqo),e(zi,Kge),e(Kge,Fqo),b(f,hDe,u),b(f,Po,u),M(ey,Po,null),e(Po,Tqo),e(Po,Wi),e(Wi,Mqo),e(Wi,WO),e(WO,Eqo),e(Wi,Cqo),e(Wi,QO),e(QO,wqo),e(Wi,Aqo),e(Po,Lqo),e(Po,oy),e(oy,yqo),e(oy,Zge),e(Zge,xqo),e(oy,$qo),e(Po,kqo),e(Po,dt),M(ry,dt,null),e(dt,Sqo),e(dt,ehe),e(ehe,Rqo),e(dt,Pqo),e(dt,Qi),e(Qi,Bqo),e(Qi,ohe),e(ohe,Iqo),e(Qi,Nqo),e(Qi,HO),e(HO,qqo),e(Qi,jqo),e(dt,Dqo),M(t4,dt,null),e(Po,Gqo),e(Po,ro),M(ty,ro,null),e(ro,Oqo),e(ro,rhe),e(rhe,Vqo),e(ro,Xqo),e(ro,Pa),e(Pa,zqo),e(Pa,the),e(the,Wqo),e(Pa,Qqo),e(Pa,ahe),e(ahe,Hqo),e(Pa,Uqo),e(Pa,nhe),e(nhe,Jqo),e(Pa,Yqo),e(ro,Kqo),e(ro,Z),e(Z,a4),e(a4,she),e(she,Zqo),e(a4,ejo),e(a4,UO),e(UO,ojo),e(a4,rjo),e(Z,tjo),e(Z,n4),e(n4,lhe),e(lhe,ajo),e(n4,njo),e(n4,JO),e(JO,sjo),e(n4,ljo),e(Z,ijo),e(Z,s4),e(s4,ihe),e(ihe,djo),e(s4,cjo),e(s4,YO),e(YO,fjo),e(s4,mjo),e(Z,gjo),e(Z,l4),e(l4,dhe),e(dhe,hjo),e(l4,pjo),e(l4,KO),e(KO,_jo),e(l4,ujo),e(Z,bjo),e(Z,i4),e(i4,che),e(che,vjo),e(i4,Fjo),e(i4,ZO),e(ZO,Tjo),e(i4,Mjo),e(Z,Ejo),e(Z,d4),e(d4,fhe),e(fhe,Cjo),e(d4,wjo),e(d4,eV),e(eV,Ajo),e(d4,Ljo),e(Z,yjo),e(Z,c4),e(c4,mhe),e(mhe,xjo),e(c4,$jo),e(c4,oV),e(oV,kjo),e(c4,Sjo),e(Z,Rjo),e(Z,f4),e(f4,ghe),e(ghe,Pjo),e(f4,Bjo),e(f4,rV),e(rV,Ijo),e(f4,Njo),e(Z,qjo),e(Z,m4),e(m4,hhe),e(hhe,jjo),e(m4,Djo),e(m4,tV),e(tV,Gjo),e(m4,Ojo),e(Z,Vjo),e(Z,g4),e(g4,phe),e(phe,Xjo),e(g4,zjo),e(g4,aV),e(aV,Wjo),e(g4,Qjo),e(Z,Hjo),e(Z,h4),e(h4,_he),e(_he,Ujo),e(h4,Jjo),e(h4,nV),e(nV,Yjo),e(h4,Kjo),e(Z,Zjo),e(Z,p4),e(p4,uhe),e(uhe,eDo),e(p4,oDo),e(p4,sV),e(sV,rDo),e(p4,tDo),e(Z,aDo),e(Z,_4),e(_4,bhe),e(bhe,nDo),e(_4,sDo),e(_4,lV),e(lV,lDo),e(_4,iDo),e(Z,dDo),e(Z,u4),e(u4,vhe),e(vhe,cDo),e(u4,fDo),e(u4,iV),e(iV,mDo),e(u4,gDo),e(Z,hDo),e(Z,b4),e(b4,Fhe),e(Fhe,pDo),e(b4,_Do),e(b4,dV),e(dV,uDo),e(b4,bDo),e(Z,vDo),e(Z,v4),e(v4,The),e(The,FDo),e(v4,TDo),e(v4,cV),e(cV,MDo),e(v4,EDo),e(Z,CDo),e(Z,F4),e(F4,Mhe),e(Mhe,wDo),e(F4,ADo),e(F4,fV),e(fV,LDo),e(F4,yDo),e(Z,xDo),e(Z,T4),e(T4,Ehe),e(Ehe,$Do),e(T4,kDo),e(T4,mV),e(mV,SDo),e(T4,RDo),e(Z,PDo),e(Z,M4),e(M4,Che),e(Che,BDo),e(M4,IDo),e(M4,gV),e(gV,NDo),e(M4,qDo),e(Z,jDo),e(Z,E4),e(E4,whe),e(whe,DDo),e(E4,GDo),e(E4,hV),e(hV,ODo),e(E4,VDo),e(Z,XDo),e(Z,C4),e(C4,Ahe),e(Ahe,zDo),e(C4,WDo),e(C4,pV),e(pV,QDo),e(C4,HDo),e(Z,UDo),e(Z,w4),e(w4,Lhe),e(Lhe,JDo),e(w4,YDo),e(w4,_V),e(_V,KDo),e(w4,ZDo),e(Z,eGo),e(Z,A4),e(A4,yhe),e(yhe,oGo),e(A4,rGo),e(A4,uV),e(uV,tGo),e(A4,aGo),e(Z,nGo),e(Z,L4),e(L4,xhe),e(xhe,sGo),e(L4,lGo),e(L4,bV),e(bV,iGo),e(L4,dGo),e(Z,cGo),e(Z,y4),e(y4,$he),e($he,fGo),e(y4,mGo),e(y4,vV),e(vV,gGo),e(y4,hGo),e(Z,pGo),e(Z,x4),e(x4,khe),e(khe,_Go),e(x4,uGo),e(x4,FV),e(FV,bGo),e(x4,vGo),e(Z,FGo),e(Z,$4),e($4,She),e(She,TGo),e($4,MGo),e($4,TV),e(TV,EGo),e($4,CGo),e(Z,wGo),e(Z,k4),e(k4,Rhe),e(Rhe,AGo),e(k4,LGo),e(k4,MV),e(MV,yGo),e(k4,xGo),e(Z,$Go),e(Z,S4),e(S4,Phe),e(Phe,kGo),e(S4,SGo),e(S4,EV),e(EV,RGo),e(S4,PGo),e(Z,BGo),e(Z,R4),e(R4,Bhe),e(Bhe,IGo),e(R4,NGo),e(R4,CV),e(CV,qGo),e(R4,jGo),e(ro,DGo),e(ro,P4),e(P4,GGo),e(P4,Ihe),e(Ihe,OGo),e(P4,VGo),e(P4,Nhe),e(Nhe,XGo),e(ro,zGo),M(B4,ro,null),b(f,pDe,u),b(f,Hi,u),e(Hi,I4),e(I4,qhe),M(ay,qhe,null),e(Hi,WGo),e(Hi,jhe),e(jhe,QGo),b(f,_De,u),b(f,Bo,u),M(ny,Bo,null),e(Bo,HGo),e(Bo,Ui),e(Ui,UGo),e(Ui,wV),e(wV,JGo),e(Ui,YGo),e(Ui,AV),e(AV,KGo),e(Ui,ZGo),e(Bo,eOo),e(Bo,sy),e(sy,oOo),e(sy,Dhe),e(Dhe,rOo),e(sy,tOo),e(Bo,aOo),e(Bo,ct),M(ly,ct,null),e(ct,nOo),e(ct,Ghe),e(Ghe,sOo),e(ct,lOo),e(ct,Ji),e(Ji,iOo),e(Ji,Ohe),e(Ohe,dOo),e(Ji,cOo),e(Ji,LV),e(LV,fOo),e(Ji,mOo),e(ct,gOo),M(N4,ct,null),e(Bo,hOo),e(Bo,to),M(iy,to,null),e(to,pOo),e(to,Vhe),e(Vhe,_Oo),e(to,uOo),e(to,Ba),e(Ba,bOo),e(Ba,Xhe),e(Xhe,vOo),e(Ba,FOo),e(Ba,zhe),e(zhe,TOo),e(Ba,MOo),e(Ba,Whe),e(Whe,EOo),e(Ba,COo),e(to,wOo),e(to,Yr),e(Yr,q4),e(q4,Qhe),e(Qhe,AOo),e(q4,LOo),e(q4,yV),e(yV,yOo),e(q4,xOo),e(Yr,$Oo),e(Yr,j4),e(j4,Hhe),e(Hhe,kOo),e(j4,SOo),e(j4,xV),e(xV,ROo),e(j4,POo),e(Yr,BOo),e(Yr,D4),e(D4,Uhe),e(Uhe,IOo),e(D4,NOo),e(D4,$V),e($V,qOo),e(D4,jOo),e(Yr,DOo),e(Yr,G4),e(G4,Jhe),e(Jhe,GOo),e(G4,OOo),e(G4,kV),e(kV,VOo),e(G4,XOo),e(Yr,zOo),e(Yr,O4),e(O4,Yhe),e(Yhe,WOo),e(O4,QOo),e(O4,SV),e(SV,HOo),e(O4,UOo),e(to,JOo),e(to,V4),e(V4,YOo),e(V4,Khe),e(Khe,KOo),e(V4,ZOo),e(V4,Zhe),e(Zhe,eVo),e(to,oVo),M(X4,to,null),b(f,uDe,u),b(f,Yi,u),e(Yi,z4),e(z4,epe),M(dy,epe,null),e(Yi,rVo),e(Yi,ope),e(ope,tVo),b(f,bDe,u),b(f,Io,u),M(cy,Io,null),e(Io,aVo),e(Io,Ki),e(Ki,nVo),e(Ki,RV),e(RV,sVo),e(Ki,lVo),e(Ki,PV),e(PV,iVo),e(Ki,dVo),e(Io,cVo),e(Io,fy),e(fy,fVo),e(fy,rpe),e(rpe,mVo),e(fy,gVo),e(Io,hVo),e(Io,ft),M(my,ft,null),e(ft,pVo),e(ft,tpe),e(tpe,_Vo),e(ft,uVo),e(ft,Zi),e(Zi,bVo),e(Zi,ape),e(ape,vVo),e(Zi,FVo),e(Zi,BV),e(BV,TVo),e(Zi,MVo),e(ft,EVo),M(W4,ft,null),e(Io,CVo),e(Io,ao),M(gy,ao,null),e(ao,wVo),e(ao,npe),e(npe,AVo),e(ao,LVo),e(ao,Ia),e(Ia,yVo),e(Ia,spe),e(spe,xVo),e(Ia,$Vo),e(Ia,lpe),e(lpe,kVo),e(Ia,SVo),e(Ia,ipe),e(ipe,RVo),e(Ia,PVo),e(ao,BVo),e(ao,U),e(U,Q4),e(Q4,dpe),e(dpe,IVo),e(Q4,NVo),e(Q4,IV),e(IV,qVo),e(Q4,jVo),e(U,DVo),e(U,H4),e(H4,cpe),e(cpe,GVo),e(H4,OVo),e(H4,NV),e(NV,VVo),e(H4,XVo),e(U,zVo),e(U,U4),e(U4,fpe),e(fpe,WVo),e(U4,QVo),e(U4,qV),e(qV,HVo),e(U4,UVo),e(U,JVo),e(U,J4),e(J4,mpe),e(mpe,YVo),e(J4,KVo),e(J4,jV),e(jV,ZVo),e(J4,eXo),e(U,oXo),e(U,Y4),e(Y4,gpe),e(gpe,rXo),e(Y4,tXo),e(Y4,DV),e(DV,aXo),e(Y4,nXo),e(U,sXo),e(U,K4),e(K4,hpe),e(hpe,lXo),e(K4,iXo),e(K4,GV),e(GV,dXo),e(K4,cXo),e(U,fXo),e(U,Z4),e(Z4,ppe),e(ppe,mXo),e(Z4,gXo),e(Z4,OV),e(OV,hXo),e(Z4,pXo),e(U,_Xo),e(U,ev),e(ev,_pe),e(_pe,uXo),e(ev,bXo),e(ev,VV),e(VV,vXo),e(ev,FXo),e(U,TXo),e(U,ov),e(ov,upe),e(upe,MXo),e(ov,EXo),e(ov,XV),e(XV,CXo),e(ov,wXo),e(U,AXo),e(U,rv),e(rv,bpe),e(bpe,LXo),e(rv,yXo),e(rv,zV),e(zV,xXo),e(rv,$Xo),e(U,kXo),e(U,tv),e(tv,vpe),e(vpe,SXo),e(tv,RXo),e(tv,WV),e(WV,PXo),e(tv,BXo),e(U,IXo),e(U,av),e(av,Fpe),e(Fpe,NXo),e(av,qXo),e(av,QV),e(QV,jXo),e(av,DXo),e(U,GXo),e(U,nv),e(nv,Tpe),e(Tpe,OXo),e(nv,VXo),e(nv,HV),e(HV,XXo),e(nv,zXo),e(U,WXo),e(U,sv),e(sv,Mpe),e(Mpe,QXo),e(sv,HXo),e(sv,UV),e(UV,UXo),e(sv,JXo),e(U,YXo),e(U,lv),e(lv,Epe),e(Epe,KXo),e(lv,ZXo),e(lv,JV),e(JV,ezo),e(lv,ozo),e(U,rzo),e(U,iv),e(iv,Cpe),e(Cpe,tzo),e(iv,azo),e(iv,YV),e(YV,nzo),e(iv,szo),e(U,lzo),e(U,dv),e(dv,wpe),e(wpe,izo),e(dv,dzo),e(dv,KV),e(KV,czo),e(dv,fzo),e(U,mzo),e(U,cv),e(cv,Ape),e(Ape,gzo),e(cv,hzo),e(cv,ZV),e(ZV,pzo),e(cv,_zo),e(U,uzo),e(U,fv),e(fv,Lpe),e(Lpe,bzo),e(fv,vzo),e(fv,eX),e(eX,Fzo),e(fv,Tzo),e(U,Mzo),e(U,mv),e(mv,ype),e(ype,Ezo),e(mv,Czo),e(mv,oX),e(oX,wzo),e(mv,Azo),e(U,Lzo),e(U,gv),e(gv,xpe),e(xpe,yzo),e(gv,xzo),e(gv,rX),e(rX,$zo),e(gv,kzo),e(U,Szo),e(U,hv),e(hv,$pe),e($pe,Rzo),e(hv,Pzo),e(hv,tX),e(tX,Bzo),e(hv,Izo),e(U,Nzo),e(U,pv),e(pv,kpe),e(kpe,qzo),e(pv,jzo),e(pv,aX),e(aX,Dzo),e(pv,Gzo),e(U,Ozo),e(U,_v),e(_v,Spe),e(Spe,Vzo),e(_v,Xzo),e(_v,nX),e(nX,zzo),e(_v,Wzo),e(U,Qzo),e(U,uv),e(uv,Rpe),e(Rpe,Hzo),e(uv,Uzo),e(uv,sX),e(sX,Jzo),e(uv,Yzo),e(U,Kzo),e(U,bv),e(bv,Ppe),e(Ppe,Zzo),e(bv,eWo),e(bv,lX),e(lX,oWo),e(bv,rWo),e(U,tWo),e(U,vv),e(vv,Bpe),e(Bpe,aWo),e(vv,nWo),e(vv,iX),e(iX,sWo),e(vv,lWo),e(U,iWo),e(U,Fv),e(Fv,Ipe),e(Ipe,dWo),e(Fv,cWo),e(Fv,dX),e(dX,fWo),e(Fv,mWo),e(U,gWo),e(U,Tv),e(Tv,Npe),e(Npe,hWo),e(Tv,pWo),e(Tv,cX),e(cX,_Wo),e(Tv,uWo),e(U,bWo),e(U,Mv),e(Mv,qpe),e(qpe,vWo),e(Mv,FWo),e(Mv,fX),e(fX,TWo),e(Mv,MWo),e(U,EWo),e(U,Ev),e(Ev,jpe),e(jpe,CWo),e(Ev,wWo),e(Ev,mX),e(mX,AWo),e(Ev,LWo),e(U,yWo),e(U,Cv),e(Cv,Dpe),e(Dpe,xWo),e(Cv,$Wo),e(Cv,gX),e(gX,kWo),e(Cv,SWo),e(U,RWo),e(U,wv),e(wv,Gpe),e(Gpe,PWo),e(wv,BWo),e(wv,hX),e(hX,IWo),e(wv,NWo),e(U,qWo),e(U,Av),e(Av,Ope),e(Ope,jWo),e(Av,DWo),e(Av,pX),e(pX,GWo),e(Av,OWo),e(ao,VWo),e(ao,Lv),e(Lv,XWo),e(Lv,Vpe),e(Vpe,zWo),e(Lv,WWo),e(Lv,Xpe),e(Xpe,QWo),e(ao,HWo),M(yv,ao,null),b(f,vDe,u),b(f,ed,u),e(ed,xv),e(xv,zpe),M(hy,zpe,null),e(ed,UWo),e(ed,Wpe),e(Wpe,JWo),b(f,FDe,u),b(f,No,u),M(py,No,null),e(No,YWo),e(No,od),e(od,KWo),e(od,_X),e(_X,ZWo),e(od,eQo),e(od,uX),e(uX,oQo),e(od,rQo),e(No,tQo),e(No,_y),e(_y,aQo),e(_y,Qpe),e(Qpe,nQo),e(_y,sQo),e(No,lQo),e(No,mt),M(uy,mt,null),e(mt,iQo),e(mt,Hpe),e(Hpe,dQo),e(mt,cQo),e(mt,rd),e(rd,fQo),e(rd,Upe),e(Upe,mQo),e(rd,gQo),e(rd,bX),e(bX,hQo),e(rd,pQo),e(mt,_Qo),M($v,mt,null),e(No,uQo),e(No,no),M(by,no,null),e(no,bQo),e(no,Jpe),e(Jpe,vQo),e(no,FQo),e(no,Na),e(Na,TQo),e(Na,Ype),e(Ype,MQo),e(Na,EQo),e(Na,Kpe),e(Kpe,CQo),e(Na,wQo),e(Na,Zpe),e(Zpe,AQo),e(Na,LQo),e(no,yQo),e(no,V),e(V,kv),e(kv,e_e),e(e_e,xQo),e(kv,$Qo),e(kv,vX),e(vX,kQo),e(kv,SQo),e(V,RQo),e(V,Sv),e(Sv,o_e),e(o_e,PQo),e(Sv,BQo),e(Sv,FX),e(FX,IQo),e(Sv,NQo),e(V,qQo),e(V,Rv),e(Rv,r_e),e(r_e,jQo),e(Rv,DQo),e(Rv,TX),e(TX,GQo),e(Rv,OQo),e(V,VQo),e(V,Pv),e(Pv,t_e),e(t_e,XQo),e(Pv,zQo),e(Pv,MX),e(MX,WQo),e(Pv,QQo),e(V,HQo),e(V,Bv),e(Bv,a_e),e(a_e,UQo),e(Bv,JQo),e(Bv,EX),e(EX,YQo),e(Bv,KQo),e(V,ZQo),e(V,Iv),e(Iv,n_e),e(n_e,eHo),e(Iv,oHo),e(Iv,CX),e(CX,rHo),e(Iv,tHo),e(V,aHo),e(V,Nv),e(Nv,s_e),e(s_e,nHo),e(Nv,sHo),e(Nv,wX),e(wX,lHo),e(Nv,iHo),e(V,dHo),e(V,qv),e(qv,l_e),e(l_e,cHo),e(qv,fHo),e(qv,AX),e(AX,mHo),e(qv,gHo),e(V,hHo),e(V,jv),e(jv,i_e),e(i_e,pHo),e(jv,_Ho),e(jv,LX),e(LX,uHo),e(jv,bHo),e(V,vHo),e(V,Dv),e(Dv,d_e),e(d_e,FHo),e(Dv,THo),e(Dv,yX),e(yX,MHo),e(Dv,EHo),e(V,CHo),e(V,Gv),e(Gv,c_e),e(c_e,wHo),e(Gv,AHo),e(Gv,xX),e(xX,LHo),e(Gv,yHo),e(V,xHo),e(V,Ov),e(Ov,f_e),e(f_e,$Ho),e(Ov,kHo),e(Ov,$X),e($X,SHo),e(Ov,RHo),e(V,PHo),e(V,Vv),e(Vv,m_e),e(m_e,BHo),e(Vv,IHo),e(Vv,kX),e(kX,NHo),e(Vv,qHo),e(V,jHo),e(V,Xv),e(Xv,g_e),e(g_e,DHo),e(Xv,GHo),e(Xv,SX),e(SX,OHo),e(Xv,VHo),e(V,XHo),e(V,zv),e(zv,h_e),e(h_e,zHo),e(zv,WHo),e(zv,RX),e(RX,QHo),e(zv,HHo),e(V,UHo),e(V,Wv),e(Wv,p_e),e(p_e,JHo),e(Wv,YHo),e(Wv,PX),e(PX,KHo),e(Wv,ZHo),e(V,eUo),e(V,Qv),e(Qv,__e),e(__e,oUo),e(Qv,rUo),e(Qv,BX),e(BX,tUo),e(Qv,aUo),e(V,nUo),e(V,Hv),e(Hv,u_e),e(u_e,sUo),e(Hv,lUo),e(Hv,IX),e(IX,iUo),e(Hv,dUo),e(V,cUo),e(V,Uv),e(Uv,b_e),e(b_e,fUo),e(Uv,mUo),e(Uv,NX),e(NX,gUo),e(Uv,hUo),e(V,pUo),e(V,Jv),e(Jv,v_e),e(v_e,_Uo),e(Jv,uUo),e(Jv,qX),e(qX,bUo),e(Jv,vUo),e(V,FUo),e(V,Yv),e(Yv,F_e),e(F_e,TUo),e(Yv,MUo),e(Yv,jX),e(jX,EUo),e(Yv,CUo),e(V,wUo),e(V,Kv),e(Kv,T_e),e(T_e,AUo),e(Kv,LUo),e(Kv,DX),e(DX,yUo),e(Kv,xUo),e(V,$Uo),e(V,Zv),e(Zv,M_e),e(M_e,kUo),e(Zv,SUo),e(Zv,GX),e(GX,RUo),e(Zv,PUo),e(V,BUo),e(V,eF),e(eF,E_e),e(E_e,IUo),e(eF,NUo),e(eF,OX),e(OX,qUo),e(eF,jUo),e(V,DUo),e(V,oF),e(oF,C_e),e(C_e,GUo),e(oF,OUo),e(oF,VX),e(VX,VUo),e(oF,XUo),e(V,zUo),e(V,rF),e(rF,w_e),e(w_e,WUo),e(rF,QUo),e(rF,XX),e(XX,HUo),e(rF,UUo),e(V,JUo),e(V,tF),e(tF,A_e),e(A_e,YUo),e(tF,KUo),e(tF,zX),e(zX,ZUo),e(tF,eJo),e(V,oJo),e(V,aF),e(aF,L_e),e(L_e,rJo),e(aF,tJo),e(aF,WX),e(WX,aJo),e(aF,nJo),e(V,sJo),e(V,nF),e(nF,y_e),e(y_e,lJo),e(nF,iJo),e(nF,QX),e(QX,dJo),e(nF,cJo),e(V,fJo),e(V,sF),e(sF,x_e),e(x_e,mJo),e(sF,gJo),e(sF,HX),e(HX,hJo),e(sF,pJo),e(V,_Jo),e(V,lF),e(lF,$_e),e($_e,uJo),e(lF,bJo),e(lF,UX),e(UX,vJo),e(lF,FJo),e(V,TJo),e(V,iF),e(iF,k_e),e(k_e,MJo),e(iF,EJo),e(iF,JX),e(JX,CJo),e(iF,wJo),e(V,AJo),e(V,dF),e(dF,S_e),e(S_e,LJo),e(dF,yJo),e(dF,YX),e(YX,xJo),e(dF,$Jo),e(V,kJo),e(V,cF),e(cF,R_e),e(R_e,SJo),e(cF,RJo),e(cF,KX),e(KX,PJo),e(cF,BJo),e(V,IJo),e(V,fF),e(fF,P_e),e(P_e,NJo),e(fF,qJo),e(fF,ZX),e(ZX,jJo),e(fF,DJo),e(V,GJo),e(V,mF),e(mF,B_e),e(B_e,OJo),e(mF,VJo),e(mF,ez),e(ez,XJo),e(mF,zJo),e(V,WJo),e(V,gF),e(gF,I_e),e(I_e,QJo),e(gF,HJo),e(gF,oz),e(oz,UJo),e(gF,JJo),e(V,YJo),e(V,hF),e(hF,N_e),e(N_e,KJo),e(hF,ZJo),e(hF,rz),e(rz,eYo),e(hF,oYo),e(V,rYo),e(V,pF),e(pF,q_e),e(q_e,tYo),e(pF,aYo),e(pF,tz),e(tz,nYo),e(pF,sYo),e(V,lYo),e(V,_F),e(_F,j_e),e(j_e,iYo),e(_F,dYo),e(_F,az),e(az,cYo),e(_F,fYo),e(no,mYo),e(no,uF),e(uF,gYo),e(uF,D_e),e(D_e,hYo),e(uF,pYo),e(uF,G_e),e(G_e,_Yo),e(no,uYo),M(bF,no,null),b(f,TDe,u),b(f,td,u),e(td,vF),e(vF,O_e),M(vy,O_e,null),e(td,bYo),e(td,V_e),e(V_e,vYo),b(f,MDe,u),b(f,qo,u),M(Fy,qo,null),e(qo,FYo),e(qo,ad),e(ad,TYo),e(ad,nz),e(nz,MYo),e(ad,EYo),e(ad,sz),e(sz,CYo),e(ad,wYo),e(qo,AYo),e(qo,Ty),e(Ty,LYo),e(Ty,X_e),e(X_e,yYo),e(Ty,xYo),e(qo,$Yo),e(qo,gt),M(My,gt,null),e(gt,kYo),e(gt,z_e),e(z_e,SYo),e(gt,RYo),e(gt,nd),e(nd,PYo),e(nd,W_e),e(W_e,BYo),e(nd,IYo),e(nd,lz),e(lz,NYo),e(nd,qYo),e(gt,jYo),M(FF,gt,null),e(qo,DYo),e(qo,so),M(Ey,so,null),e(so,GYo),e(so,Q_e),e(Q_e,OYo),e(so,VYo),e(so,qa),e(qa,XYo),e(qa,H_e),e(H_e,zYo),e(qa,WYo),e(qa,U_e),e(U_e,QYo),e(qa,HYo),e(qa,J_e),e(J_e,UYo),e(qa,JYo),e(so,YYo),e(so,Y_e),e(Y_e,TF),e(TF,K_e),e(K_e,KYo),e(TF,ZYo),e(TF,iz),e(iz,eKo),e(TF,oKo),e(so,rKo),e(so,MF),e(MF,tKo),e(MF,Z_e),e(Z_e,aKo),e(MF,nKo),e(MF,eue),e(eue,sKo),e(so,lKo),M(EF,so,null),b(f,EDe,u),b(f,sd,u),e(sd,CF),e(CF,oue),M(Cy,oue,null),e(sd,iKo),e(sd,rue),e(rue,dKo),b(f,CDe,u),b(f,jo,u),M(wy,jo,null),e(jo,cKo),e(jo,ld),e(ld,fKo),e(ld,dz),e(dz,mKo),e(ld,gKo),e(ld,cz),e(cz,hKo),e(ld,pKo),e(jo,_Ko),e(jo,Ay),e(Ay,uKo),e(Ay,tue),e(tue,bKo),e(Ay,vKo),e(jo,FKo),e(jo,ht),M(Ly,ht,null),e(ht,TKo),e(ht,aue),e(aue,MKo),e(ht,EKo),e(ht,id),e(id,CKo),e(id,nue),e(nue,wKo),e(id,AKo),e(id,fz),e(fz,LKo),e(id,yKo),e(ht,xKo),M(wF,ht,null),e(jo,$Ko),e(jo,lo),M(yy,lo,null),e(lo,kKo),e(lo,sue),e(sue,SKo),e(lo,RKo),e(lo,ja),e(ja,PKo),e(ja,lue),e(lue,BKo),e(ja,IKo),e(ja,iue),e(iue,NKo),e(ja,qKo),e(ja,due),e(due,jKo),e(ja,DKo),e(lo,GKo),e(lo,ve),e(ve,AF),e(AF,cue),e(cue,OKo),e(AF,VKo),e(AF,mz),e(mz,XKo),e(AF,zKo),e(ve,WKo),e(ve,LF),e(LF,fue),e(fue,QKo),e(LF,HKo),e(LF,gz),e(gz,UKo),e(LF,JKo),e(ve,YKo),e(ve,yF),e(yF,mue),e(mue,KKo),e(yF,ZKo),e(yF,hz),e(hz,eZo),e(yF,oZo),e(ve,rZo),e(ve,xF),e(xF,gue),e(gue,tZo),e(xF,aZo),e(xF,pz),e(pz,nZo),e(xF,sZo),e(ve,lZo),e(ve,Is),e(Is,hue),e(hue,iZo),e(Is,dZo),e(Is,_z),e(_z,cZo),e(Is,fZo),e(Is,uz),e(uz,mZo),e(Is,gZo),e(ve,hZo),e(ve,$F),e($F,pue),e(pue,pZo),e($F,_Zo),e($F,bz),e(bz,uZo),e($F,bZo),e(ve,vZo),e(ve,Ns),e(Ns,_ue),e(_ue,FZo),e(Ns,TZo),e(Ns,vz),e(vz,MZo),e(Ns,EZo),e(Ns,Fz),e(Fz,CZo),e(Ns,wZo),e(ve,AZo),e(ve,pt),e(pt,uue),e(uue,LZo),e(pt,yZo),e(pt,Tz),e(Tz,xZo),e(pt,$Zo),e(pt,Mz),e(Mz,kZo),e(pt,SZo),e(pt,Ez),e(Ez,RZo),e(pt,PZo),e(ve,BZo),e(ve,kF),e(kF,bue),e(bue,IZo),e(kF,NZo),e(kF,Cz),e(Cz,qZo),e(kF,jZo),e(ve,DZo),e(ve,SF),e(SF,vue),e(vue,GZo),e(SF,OZo),e(SF,wz),e(wz,VZo),e(SF,XZo),e(ve,zZo),e(ve,RF),e(RF,Fue),e(Fue,WZo),e(RF,QZo),e(RF,Az),e(Az,HZo),e(RF,UZo),e(ve,JZo),e(ve,PF),e(PF,Tue),e(Tue,YZo),e(PF,KZo),e(PF,Lz),e(Lz,ZZo),e(PF,eer),e(ve,oer),e(ve,BF),e(BF,Mue),e(Mue,rer),e(BF,ter),e(BF,yz),e(yz,aer),e(BF,ner),e(ve,ser),e(ve,IF),e(IF,Eue),e(Eue,ler),e(IF,ier),e(IF,xz),e(xz,der),e(IF,cer),e(ve,fer),e(ve,NF),e(NF,Cue),e(Cue,mer),e(NF,ger),e(NF,$z),e($z,her),e(NF,per),e(lo,_er),e(lo,qF),e(qF,uer),e(qF,wue),e(wue,ber),e(qF,ver),e(qF,Aue),e(Aue,Fer),e(lo,Ter),M(jF,lo,null),b(f,wDe,u),b(f,dd,u),e(dd,DF),e(DF,Lue),M(xy,Lue,null),e(dd,Mer),e(dd,yue),e(yue,Eer),b(f,ADe,u),b(f,Do,u),M($y,Do,null),e(Do,Cer),e(Do,cd),e(cd,wer),e(cd,kz),e(kz,Aer),e(cd,Ler),e(cd,Sz),e(Sz,yer),e(cd,xer),e(Do,$er),e(Do,ky),e(ky,ker),e(ky,xue),e(xue,Ser),e(ky,Rer),e(Do,Per),e(Do,_t),M(Sy,_t,null),e(_t,Ber),e(_t,$ue),e($ue,Ier),e(_t,Ner),e(_t,fd),e(fd,qer),e(fd,kue),e(kue,jer),e(fd,Der),e(fd,Rz),e(Rz,Ger),e(fd,Oer),e(_t,Ver),M(GF,_t,null),e(Do,Xer),e(Do,io),M(Ry,io,null),e(io,zer),e(io,Sue),e(Sue,Wer),e(io,Qer),e(io,Da),e(Da,Her),e(Da,Rue),e(Rue,Uer),e(Da,Jer),e(Da,Pue),e(Pue,Yer),e(Da,Ker),e(Da,Bue),e(Bue,Zer),e(Da,eor),e(io,oor),e(io,Iue),e(Iue,OF),e(OF,Nue),e(Nue,ror),e(OF,tor),e(OF,Pz),e(Pz,aor),e(OF,nor),e(io,sor),e(io,VF),e(VF,lor),e(VF,que),e(que,ior),e(VF,dor),e(VF,jue),e(jue,cor),e(io,mor),M(XF,io,null),b(f,LDe,u),b(f,md,u),e(md,zF),e(zF,Due),M(Py,Due,null),e(md,gor),e(md,Gue),e(Gue,hor),b(f,yDe,u),b(f,Go,u),M(By,Go,null),e(Go,por),e(Go,gd),e(gd,_or),e(gd,Bz),e(Bz,uor),e(gd,bor),e(gd,Iz),e(Iz,vor),e(gd,For),e(Go,Tor),e(Go,Iy),e(Iy,Mor),e(Iy,Oue),e(Oue,Eor),e(Iy,Cor),e(Go,wor),e(Go,ut),M(Ny,ut,null),e(ut,Aor),e(ut,Vue),e(Vue,Lor),e(ut,yor),e(ut,hd),e(hd,xor),e(hd,Xue),e(Xue,$or),e(hd,kor),e(hd,Nz),e(Nz,Sor),e(hd,Ror),e(ut,Por),M(WF,ut,null),e(Go,Bor),e(Go,co),M(qy,co,null),e(co,Ior),e(co,zue),e(zue,Nor),e(co,qor),e(co,Ga),e(Ga,jor),e(Ga,Wue),e(Wue,Dor),e(Ga,Gor),e(Ga,Que),e(Que,Oor),e(Ga,Vor),e(Ga,Hue),e(Hue,Xor),e(Ga,zor),e(co,Wor),e(co,Re),e(Re,QF),e(QF,Uue),e(Uue,Qor),e(QF,Hor),e(QF,qz),e(qz,Uor),e(QF,Jor),e(Re,Yor),e(Re,HF),e(HF,Jue),e(Jue,Kor),e(HF,Zor),e(HF,jz),e(jz,err),e(HF,orr),e(Re,rrr),e(Re,UF),e(UF,Yue),e(Yue,trr),e(UF,arr),e(UF,Dz),e(Dz,nrr),e(UF,srr),e(Re,lrr),e(Re,JF),e(JF,Kue),e(Kue,irr),e(JF,drr),e(JF,Gz),e(Gz,crr),e(JF,frr),e(Re,mrr),e(Re,YF),e(YF,Zue),e(Zue,grr),e(YF,hrr),e(YF,Oz),e(Oz,prr),e(YF,_rr),e(Re,urr),e(Re,KF),e(KF,e1e),e(e1e,brr),e(KF,vrr),e(KF,Vz),e(Vz,Frr),e(KF,Trr),e(Re,Mrr),e(Re,ZF),e(ZF,o1e),e(o1e,Err),e(ZF,Crr),e(ZF,Xz),e(Xz,wrr),e(ZF,Arr),e(Re,Lrr),e(Re,e6),e(e6,r1e),e(r1e,yrr),e(e6,xrr),e(e6,zz),e(zz,$rr),e(e6,krr),e(Re,Srr),e(Re,o6),e(o6,t1e),e(t1e,Rrr),e(o6,Prr),e(o6,Wz),e(Wz,Brr),e(o6,Irr),e(co,Nrr),e(co,r6),e(r6,qrr),e(r6,a1e),e(a1e,jrr),e(r6,Drr),e(r6,n1e),e(n1e,Grr),e(co,Orr),M(t6,co,null),b(f,xDe,u),b(f,pd,u),e(pd,a6),e(a6,s1e),M(jy,s1e,null),e(pd,Vrr),e(pd,l1e),e(l1e,Xrr),b(f,$De,u),b(f,Oo,u),M(Dy,Oo,null),e(Oo,zrr),e(Oo,_d),e(_d,Wrr),e(_d,Qz),e(Qz,Qrr),e(_d,Hrr),e(_d,Hz),e(Hz,Urr),e(_d,Jrr),e(Oo,Yrr),e(Oo,Gy),e(Gy,Krr),e(Gy,i1e),e(i1e,Zrr),e(Gy,etr),e(Oo,otr),e(Oo,bt),M(Oy,bt,null),e(bt,rtr),e(bt,d1e),e(d1e,ttr),e(bt,atr),e(bt,ud),e(ud,ntr),e(ud,c1e),e(c1e,str),e(ud,ltr),e(ud,Uz),e(Uz,itr),e(ud,dtr),e(bt,ctr),M(n6,bt,null),e(Oo,ftr),e(Oo,fo),M(Vy,fo,null),e(fo,mtr),e(fo,f1e),e(f1e,gtr),e(fo,htr),e(fo,Oa),e(Oa,ptr),e(Oa,m1e),e(m1e,_tr),e(Oa,utr),e(Oa,g1e),e(g1e,btr),e(Oa,vtr),e(Oa,h1e),e(h1e,Ftr),e(Oa,Ttr),e(fo,Mtr),e(fo,Kr),e(Kr,s6),e(s6,p1e),e(p1e,Etr),e(s6,Ctr),e(s6,Jz),e(Jz,wtr),e(s6,Atr),e(Kr,Ltr),e(Kr,l6),e(l6,_1e),e(_1e,ytr),e(l6,xtr),e(l6,Yz),e(Yz,$tr),e(l6,ktr),e(Kr,Str),e(Kr,i6),e(i6,u1e),e(u1e,Rtr),e(i6,Ptr),e(i6,Kz),e(Kz,Btr),e(i6,Itr),e(Kr,Ntr),e(Kr,d6),e(d6,b1e),e(b1e,qtr),e(d6,jtr),e(d6,Zz),e(Zz,Dtr),e(d6,Gtr),e(Kr,Otr),e(Kr,c6),e(c6,v1e),e(v1e,Vtr),e(c6,Xtr),e(c6,eW),e(eW,ztr),e(c6,Wtr),e(fo,Qtr),e(fo,f6),e(f6,Htr),e(f6,F1e),e(F1e,Utr),e(f6,Jtr),e(f6,T1e),e(T1e,Ytr),e(fo,Ktr),M(m6,fo,null),b(f,kDe,u),b(f,bd,u),e(bd,g6),e(g6,M1e),M(Xy,M1e,null),e(bd,Ztr),e(bd,E1e),e(E1e,ear),b(f,SDe,u),b(f,Vo,u),M(zy,Vo,null),e(Vo,oar),e(Vo,vd),e(vd,rar),e(vd,oW),e(oW,tar),e(vd,aar),e(vd,rW),e(rW,nar),e(vd,sar),e(Vo,lar),e(Vo,Wy),e(Wy,iar),e(Wy,C1e),e(C1e,dar),e(Wy,car),e(Vo,far),e(Vo,vt),M(Qy,vt,null),e(vt,mar),e(vt,w1e),e(w1e,gar),e(vt,har),e(vt,Fd),e(Fd,par),e(Fd,A1e),e(A1e,_ar),e(Fd,uar),e(Fd,tW),e(tW,bar),e(Fd,Far),e(vt,Tar),M(h6,vt,null),e(Vo,Mar),e(Vo,mo),M(Hy,mo,null),e(mo,Ear),e(mo,L1e),e(L1e,Car),e(mo,war),e(mo,Va),e(Va,Aar),e(Va,y1e),e(y1e,Lar),e(Va,yar),e(Va,x1e),e(x1e,xar),e(Va,$ar),e(Va,$1e),e($1e,kar),e(Va,Sar),e(mo,Rar),e(mo,Le),e(Le,p6),e(p6,k1e),e(k1e,Par),e(p6,Bar),e(p6,aW),e(aW,Iar),e(p6,Nar),e(Le,qar),e(Le,_6),e(_6,S1e),e(S1e,jar),e(_6,Dar),e(_6,nW),e(nW,Gar),e(_6,Oar),e(Le,Var),e(Le,u6),e(u6,R1e),e(R1e,Xar),e(u6,zar),e(u6,sW),e(sW,War),e(u6,Qar),e(Le,Har),e(Le,b6),e(b6,P1e),e(P1e,Uar),e(b6,Jar),e(b6,lW),e(lW,Yar),e(b6,Kar),e(Le,Zar),e(Le,v6),e(v6,B1e),e(B1e,enr),e(v6,onr),e(v6,iW),e(iW,rnr),e(v6,tnr),e(Le,anr),e(Le,F6),e(F6,I1e),e(I1e,nnr),e(F6,snr),e(F6,dW),e(dW,lnr),e(F6,inr),e(Le,dnr),e(Le,T6),e(T6,N1e),e(N1e,cnr),e(T6,fnr),e(T6,cW),e(cW,mnr),e(T6,gnr),e(Le,hnr),e(Le,M6),e(M6,q1e),e(q1e,pnr),e(M6,_nr),e(M6,fW),e(fW,unr),e(M6,bnr),e(Le,vnr),e(Le,E6),e(E6,j1e),e(j1e,Fnr),e(E6,Tnr),e(E6,mW),e(mW,Mnr),e(E6,Enr),e(Le,Cnr),e(Le,C6),e(C6,D1e),e(D1e,wnr),e(C6,Anr),e(C6,gW),e(gW,Lnr),e(C6,ynr),e(mo,xnr),e(mo,w6),e(w6,$nr),e(w6,G1e),e(G1e,knr),e(w6,Snr),e(w6,O1e),e(O1e,Rnr),e(mo,Pnr),M(A6,mo,null),b(f,RDe,u),b(f,Td,u),e(Td,L6),e(L6,V1e),M(Uy,V1e,null),e(Td,Bnr),e(Td,X1e),e(X1e,Inr),b(f,PDe,u),b(f,Xo,u),M(Jy,Xo,null),e(Xo,Nnr),e(Xo,Md),e(Md,qnr),e(Md,hW),e(hW,jnr),e(Md,Dnr),e(Md,pW),e(pW,Gnr),e(Md,Onr),e(Xo,Vnr),e(Xo,Yy),e(Yy,Xnr),e(Yy,z1e),e(z1e,znr),e(Yy,Wnr),e(Xo,Qnr),e(Xo,Ft),M(Ky,Ft,null),e(Ft,Hnr),e(Ft,W1e),e(W1e,Unr),e(Ft,Jnr),e(Ft,Ed),e(Ed,Ynr),e(Ed,Q1e),e(Q1e,Knr),e(Ed,Znr),e(Ed,_W),e(_W,esr),e(Ed,osr),e(Ft,rsr),M(y6,Ft,null),e(Xo,tsr),e(Xo,go),M(Zy,go,null),e(go,asr),e(go,H1e),e(H1e,nsr),e(go,ssr),e(go,Xa),e(Xa,lsr),e(Xa,U1e),e(U1e,isr),e(Xa,dsr),e(Xa,J1e),e(J1e,csr),e(Xa,fsr),e(Xa,Y1e),e(Y1e,msr),e(Xa,gsr),e(go,hsr),e(go,e8),e(e8,x6),e(x6,K1e),e(K1e,psr),e(x6,_sr),e(x6,uW),e(uW,usr),e(x6,bsr),e(e8,vsr),e(e8,$6),e($6,Z1e),e(Z1e,Fsr),e($6,Tsr),e($6,bW),e(bW,Msr),e($6,Esr),e(go,Csr),e(go,k6),e(k6,wsr),e(k6,ebe),e(ebe,Asr),e(k6,Lsr),e(k6,obe),e(obe,ysr),e(go,xsr),M(S6,go,null),b(f,BDe,u),b(f,Cd,u),e(Cd,R6),e(R6,rbe),M(o8,rbe,null),e(Cd,$sr),e(Cd,tbe),e(tbe,ksr),b(f,IDe,u),b(f,zo,u),M(r8,zo,null),e(zo,Ssr),e(zo,wd),e(wd,Rsr),e(wd,vW),e(vW,Psr),e(wd,Bsr),e(wd,FW),e(FW,Isr),e(wd,Nsr),e(zo,qsr),e(zo,t8),e(t8,jsr),e(t8,abe),e(abe,Dsr),e(t8,Gsr),e(zo,Osr),e(zo,Tt),M(a8,Tt,null),e(Tt,Vsr),e(Tt,nbe),e(nbe,Xsr),e(Tt,zsr),e(Tt,Ad),e(Ad,Wsr),e(Ad,sbe),e(sbe,Qsr),e(Ad,Hsr),e(Ad,TW),e(TW,Usr),e(Ad,Jsr),e(Tt,Ysr),M(P6,Tt,null),e(zo,Ksr),e(zo,ho),M(n8,ho,null),e(ho,Zsr),e(ho,lbe),e(lbe,elr),e(ho,olr),e(ho,za),e(za,rlr),e(za,ibe),e(ibe,tlr),e(za,alr),e(za,dbe),e(dbe,nlr),e(za,slr),e(za,cbe),e(cbe,llr),e(za,ilr),e(ho,dlr),e(ho,Zr),e(Zr,B6),e(B6,fbe),e(fbe,clr),e(B6,flr),e(B6,MW),e(MW,mlr),e(B6,glr),e(Zr,hlr),e(Zr,I6),e(I6,mbe),e(mbe,plr),e(I6,_lr),e(I6,EW),e(EW,ulr),e(I6,blr),e(Zr,vlr),e(Zr,N6),e(N6,gbe),e(gbe,Flr),e(N6,Tlr),e(N6,CW),e(CW,Mlr),e(N6,Elr),e(Zr,Clr),e(Zr,q6),e(q6,hbe),e(hbe,wlr),e(q6,Alr),e(q6,wW),e(wW,Llr),e(q6,ylr),e(Zr,xlr),e(Zr,j6),e(j6,pbe),e(pbe,$lr),e(j6,klr),e(j6,AW),e(AW,Slr),e(j6,Rlr),e(ho,Plr),e(ho,D6),e(D6,Blr),e(D6,_be),e(_be,Ilr),e(D6,Nlr),e(D6,ube),e(ube,qlr),e(ho,jlr),M(G6,ho,null),b(f,NDe,u),b(f,Ld,u),e(Ld,O6),e(O6,bbe),M(s8,bbe,null),e(Ld,Dlr),e(Ld,vbe),e(vbe,Glr),b(f,qDe,u),b(f,Wo,u),M(l8,Wo,null),e(Wo,Olr),e(Wo,yd),e(yd,Vlr),e(yd,LW),e(LW,Xlr),e(yd,zlr),e(yd,yW),e(yW,Wlr),e(yd,Qlr),e(Wo,Hlr),e(Wo,i8),e(i8,Ulr),e(i8,Fbe),e(Fbe,Jlr),e(i8,Ylr),e(Wo,Klr),e(Wo,Mt),M(d8,Mt,null),e(Mt,Zlr),e(Mt,Tbe),e(Tbe,eir),e(Mt,oir),e(Mt,xd),e(xd,rir),e(xd,Mbe),e(Mbe,tir),e(xd,air),e(xd,xW),e(xW,nir),e(xd,sir),e(Mt,lir),M(V6,Mt,null),e(Wo,iir),e(Wo,po),M(c8,po,null),e(po,dir),e(po,Ebe),e(Ebe,cir),e(po,fir),e(po,Wa),e(Wa,mir),e(Wa,Cbe),e(Cbe,gir),e(Wa,hir),e(Wa,wbe),e(wbe,pir),e(Wa,_ir),e(Wa,Abe),e(Abe,uir),e(Wa,bir),e(po,vir),e(po,$d),e($d,X6),e(X6,Lbe),e(Lbe,Fir),e(X6,Tir),e(X6,$W),e($W,Mir),e(X6,Eir),e($d,Cir),e($d,z6),e(z6,ybe),e(ybe,wir),e(z6,Air),e(z6,kW),e(kW,Lir),e(z6,yir),e($d,xir),e($d,W6),e(W6,xbe),e(xbe,$ir),e(W6,kir),e(W6,SW),e(SW,Sir),e(W6,Rir),e(po,Pir),e(po,Q6),e(Q6,Bir),e(Q6,$be),e($be,Iir),e(Q6,Nir),e(Q6,kbe),e(kbe,qir),e(po,jir),M(H6,po,null),b(f,jDe,u),b(f,kd,u),e(kd,U6),e(U6,Sbe),M(f8,Sbe,null),e(kd,Dir),e(kd,Rbe),e(Rbe,Gir),b(f,DDe,u),b(f,Qo,u),M(m8,Qo,null),e(Qo,Oir),e(Qo,Sd),e(Sd,Vir),e(Sd,RW),e(RW,Xir),e(Sd,zir),e(Sd,PW),e(PW,Wir),e(Sd,Qir),e(Qo,Hir),e(Qo,g8),e(g8,Uir),e(g8,Pbe),e(Pbe,Jir),e(g8,Yir),e(Qo,Kir),e(Qo,Et),M(h8,Et,null),e(Et,Zir),e(Et,Bbe),e(Bbe,edr),e(Et,odr),e(Et,Rd),e(Rd,rdr),e(Rd,Ibe),e(Ibe,tdr),e(Rd,adr),e(Rd,BW),e(BW,ndr),e(Rd,sdr),e(Et,ldr),M(J6,Et,null),e(Qo,idr),e(Qo,_o),M(p8,_o,null),e(_o,ddr),e(_o,Nbe),e(Nbe,cdr),e(_o,fdr),e(_o,Qa),e(Qa,mdr),e(Qa,qbe),e(qbe,gdr),e(Qa,hdr),e(Qa,jbe),e(jbe,pdr),e(Qa,_dr),e(Qa,Dbe),e(Dbe,udr),e(Qa,bdr),e(_o,vdr),e(_o,_8),e(_8,Y6),e(Y6,Gbe),e(Gbe,Fdr),e(Y6,Tdr),e(Y6,IW),e(IW,Mdr),e(Y6,Edr),e(_8,Cdr),e(_8,K6),e(K6,Obe),e(Obe,wdr),e(K6,Adr),e(K6,NW),e(NW,Ldr),e(K6,ydr),e(_o,xdr),e(_o,Z6),e(Z6,$dr),e(Z6,Vbe),e(Vbe,kdr),e(Z6,Sdr),e(Z6,Xbe),e(Xbe,Rdr),e(_o,Pdr),M(eT,_o,null),b(f,GDe,u),b(f,Pd,u),e(Pd,oT),e(oT,zbe),M(u8,zbe,null),e(Pd,Bdr),e(Pd,Wbe),e(Wbe,Idr),b(f,ODe,u),b(f,Ho,u),M(b8,Ho,null),e(Ho,Ndr),e(Ho,Bd),e(Bd,qdr),e(Bd,qW),e(qW,jdr),e(Bd,Ddr),e(Bd,jW),e(jW,Gdr),e(Bd,Odr),e(Ho,Vdr),e(Ho,v8),e(v8,Xdr),e(v8,Qbe),e(Qbe,zdr),e(v8,Wdr),e(Ho,Qdr),e(Ho,Ct),M(F8,Ct,null),e(Ct,Hdr),e(Ct,Hbe),e(Hbe,Udr),e(Ct,Jdr),e(Ct,Id),e(Id,Ydr),e(Id,Ube),e(Ube,Kdr),e(Id,Zdr),e(Id,DW),e(DW,ecr),e(Id,ocr),e(Ct,rcr),M(rT,Ct,null),e(Ho,tcr),e(Ho,uo),M(T8,uo,null),e(uo,acr),e(uo,Jbe),e(Jbe,ncr),e(uo,scr),e(uo,Ha),e(Ha,lcr),e(Ha,Ybe),e(Ybe,icr),e(Ha,dcr),e(Ha,Kbe),e(Kbe,ccr),e(Ha,fcr),e(Ha,Zbe),e(Zbe,mcr),e(Ha,gcr),e(uo,hcr),e(uo,e2e),e(e2e,tT),e(tT,o2e),e(o2e,pcr),e(tT,_cr),e(tT,GW),e(GW,ucr),e(tT,bcr),e(uo,vcr),e(uo,aT),e(aT,Fcr),e(aT,r2e),e(r2e,Tcr),e(aT,Mcr),e(aT,t2e),e(t2e,Ecr),e(uo,Ccr),M(nT,uo,null),b(f,VDe,u),b(f,Nd,u),e(Nd,sT),e(sT,a2e),M(M8,a2e,null),e(Nd,wcr),e(Nd,n2e),e(n2e,Acr),b(f,XDe,u),b(f,Uo,u),M(E8,Uo,null),e(Uo,Lcr),e(Uo,qd),e(qd,ycr),e(qd,OW),e(OW,xcr),e(qd,$cr),e(qd,VW),e(VW,kcr),e(qd,Scr),e(Uo,Rcr),e(Uo,C8),e(C8,Pcr),e(C8,s2e),e(s2e,Bcr),e(C8,Icr),e(Uo,Ncr),e(Uo,wt),M(w8,wt,null),e(wt,qcr),e(wt,l2e),e(l2e,jcr),e(wt,Dcr),e(wt,jd),e(jd,Gcr),e(jd,i2e),e(i2e,Ocr),e(jd,Vcr),e(jd,XW),e(XW,Xcr),e(jd,zcr),e(wt,Wcr),M(lT,wt,null),e(Uo,Qcr),e(Uo,bo),M(A8,bo,null),e(bo,Hcr),e(bo,d2e),e(d2e,Ucr),e(bo,Jcr),e(bo,Ua),e(Ua,Ycr),e(Ua,c2e),e(c2e,Kcr),e(Ua,Zcr),e(Ua,f2e),e(f2e,efr),e(Ua,ofr),e(Ua,m2e),e(m2e,rfr),e(Ua,tfr),e(bo,afr),e(bo,Ja),e(Ja,iT),e(iT,g2e),e(g2e,nfr),e(iT,sfr),e(iT,zW),e(zW,lfr),e(iT,ifr),e(Ja,dfr),e(Ja,dT),e(dT,h2e),e(h2e,cfr),e(dT,ffr),e(dT,WW),e(WW,mfr),e(dT,gfr),e(Ja,hfr),e(Ja,cT),e(cT,p2e),e(p2e,pfr),e(cT,_fr),e(cT,QW),e(QW,ufr),e(cT,bfr),e(Ja,vfr),e(Ja,fT),e(fT,_2e),e(_2e,Ffr),e(fT,Tfr),e(fT,HW),e(HW,Mfr),e(fT,Efr),e(bo,Cfr),e(bo,mT),e(mT,wfr),e(mT,u2e),e(u2e,Afr),e(mT,Lfr),e(mT,b2e),e(b2e,yfr),e(bo,xfr),M(gT,bo,null),b(f,zDe,u),b(f,Dd,u),e(Dd,hT),e(hT,v2e),M(L8,v2e,null),e(Dd,$fr),e(Dd,F2e),e(F2e,kfr),b(f,WDe,u),b(f,Jo,u),M(y8,Jo,null),e(Jo,Sfr),e(Jo,Gd),e(Gd,Rfr),e(Gd,UW),e(UW,Pfr),e(Gd,Bfr),e(Gd,JW),e(JW,Ifr),e(Gd,Nfr),e(Jo,qfr),e(Jo,x8),e(x8,jfr),e(x8,T2e),e(T2e,Dfr),e(x8,Gfr),e(Jo,Ofr),e(Jo,At),M($8,At,null),e(At,Vfr),e(At,M2e),e(M2e,Xfr),e(At,zfr),e(At,Od),e(Od,Wfr),e(Od,E2e),e(E2e,Qfr),e(Od,Hfr),e(Od,YW),e(YW,Ufr),e(Od,Jfr),e(At,Yfr),M(pT,At,null),e(Jo,Kfr),e(Jo,vo),M(k8,vo,null),e(vo,Zfr),e(vo,C2e),e(C2e,emr),e(vo,omr),e(vo,Ya),e(Ya,rmr),e(Ya,w2e),e(w2e,tmr),e(Ya,amr),e(Ya,A2e),e(A2e,nmr),e(Ya,smr),e(Ya,L2e),e(L2e,lmr),e(Ya,imr),e(vo,dmr),e(vo,y2e),e(y2e,_T),e(_T,x2e),e(x2e,cmr),e(_T,fmr),e(_T,KW),e(KW,mmr),e(_T,gmr),e(vo,hmr),e(vo,uT),e(uT,pmr),e(uT,$2e),e($2e,_mr),e(uT,umr),e(uT,k2e),e(k2e,bmr),e(vo,vmr),M(bT,vo,null),b(f,QDe,u),b(f,Vd,u),e(Vd,vT),e(vT,S2e),M(S8,S2e,null),e(Vd,Fmr),e(Vd,R2e),e(R2e,Tmr),b(f,HDe,u),b(f,Yo,u),M(R8,Yo,null),e(Yo,Mmr),e(Yo,Xd),e(Xd,Emr),e(Xd,ZW),e(ZW,Cmr),e(Xd,wmr),e(Xd,eQ),e(eQ,Amr),e(Xd,Lmr),e(Yo,ymr),e(Yo,P8),e(P8,xmr),e(P8,P2e),e(P2e,$mr),e(P8,kmr),e(Yo,Smr),e(Yo,Lt),M(B8,Lt,null),e(Lt,Rmr),e(Lt,B2e),e(B2e,Pmr),e(Lt,Bmr),e(Lt,zd),e(zd,Imr),e(zd,I2e),e(I2e,Nmr),e(zd,qmr),e(zd,oQ),e(oQ,jmr),e(zd,Dmr),e(Lt,Gmr),M(FT,Lt,null),e(Yo,Omr),e(Yo,wr),M(I8,wr,null),e(wr,Vmr),e(wr,N2e),e(N2e,Xmr),e(wr,zmr),e(wr,Ka),e(Ka,Wmr),e(Ka,q2e),e(q2e,Qmr),e(Ka,Hmr),e(Ka,j2e),e(j2e,Umr),e(Ka,Jmr),e(Ka,D2e),e(D2e,Ymr),e(Ka,Kmr),e(wr,Zmr),e(wr,q),e(q,TT),e(TT,G2e),e(G2e,egr),e(TT,ogr),e(TT,rQ),e(rQ,rgr),e(TT,tgr),e(q,agr),e(q,MT),e(MT,O2e),e(O2e,ngr),e(MT,sgr),e(MT,tQ),e(tQ,lgr),e(MT,igr),e(q,dgr),e(q,ET),e(ET,V2e),e(V2e,cgr),e(ET,fgr),e(ET,aQ),e(aQ,mgr),e(ET,ggr),e(q,hgr),e(q,CT),e(CT,X2e),e(X2e,pgr),e(CT,_gr),e(CT,nQ),e(nQ,ugr),e(CT,bgr),e(q,vgr),e(q,wT),e(wT,z2e),e(z2e,Fgr),e(wT,Tgr),e(wT,sQ),e(sQ,Mgr),e(wT,Egr),e(q,Cgr),e(q,AT),e(AT,W2e),e(W2e,wgr),e(AT,Agr),e(AT,lQ),e(lQ,Lgr),e(AT,ygr),e(q,xgr),e(q,LT),e(LT,Q2e),e(Q2e,$gr),e(LT,kgr),e(LT,iQ),e(iQ,Sgr),e(LT,Rgr),e(q,Pgr),e(q,yT),e(yT,H2e),e(H2e,Bgr),e(yT,Igr),e(yT,dQ),e(dQ,Ngr),e(yT,qgr),e(q,jgr),e(q,xT),e(xT,U2e),e(U2e,Dgr),e(xT,Ggr),e(xT,cQ),e(cQ,Ogr),e(xT,Vgr),e(q,Xgr),e(q,$T),e($T,J2e),e(J2e,zgr),e($T,Wgr),e($T,fQ),e(fQ,Qgr),e($T,Hgr),e(q,Ugr),e(q,kT),e(kT,Y2e),e(Y2e,Jgr),e(kT,Ygr),e(kT,mQ),e(mQ,Kgr),e(kT,Zgr),e(q,ehr),e(q,ST),e(ST,K2e),e(K2e,ohr),e(ST,rhr),e(ST,gQ),e(gQ,thr),e(ST,ahr),e(q,nhr),e(q,RT),e(RT,Z2e),e(Z2e,shr),e(RT,lhr),e(RT,hQ),e(hQ,ihr),e(RT,dhr),e(q,chr),e(q,PT),e(PT,e4e),e(e4e,fhr),e(PT,mhr),e(PT,pQ),e(pQ,ghr),e(PT,hhr),e(q,phr),e(q,BT),e(BT,o4e),e(o4e,_hr),e(BT,uhr),e(BT,_Q),e(_Q,bhr),e(BT,vhr),e(q,Fhr),e(q,IT),e(IT,r4e),e(r4e,Thr),e(IT,Mhr),e(IT,uQ),e(uQ,Ehr),e(IT,Chr),e(q,whr),e(q,NT),e(NT,t4e),e(t4e,Ahr),e(NT,Lhr),e(NT,bQ),e(bQ,yhr),e(NT,xhr),e(q,$hr),e(q,qs),e(qs,a4e),e(a4e,khr),e(qs,Shr),e(qs,vQ),e(vQ,Rhr),e(qs,Phr),e(qs,FQ),e(FQ,Bhr),e(qs,Ihr),e(q,Nhr),e(q,qT),e(qT,n4e),e(n4e,qhr),e(qT,jhr),e(qT,TQ),e(TQ,Dhr),e(qT,Ghr),e(q,Ohr),e(q,jT),e(jT,s4e),e(s4e,Vhr),e(jT,Xhr),e(jT,MQ),e(MQ,zhr),e(jT,Whr),e(q,Qhr),e(q,DT),e(DT,l4e),e(l4e,Hhr),e(DT,Uhr),e(DT,EQ),e(EQ,Jhr),e(DT,Yhr),e(q,Khr),e(q,GT),e(GT,i4e),e(i4e,Zhr),e(GT,epr),e(GT,CQ),e(CQ,opr),e(GT,rpr),e(q,tpr),e(q,OT),e(OT,d4e),e(d4e,apr),e(OT,npr),e(OT,wQ),e(wQ,spr),e(OT,lpr),e(q,ipr),e(q,VT),e(VT,c4e),e(c4e,dpr),e(VT,cpr),e(VT,AQ),e(AQ,fpr),e(VT,mpr),e(q,gpr),e(q,XT),e(XT,f4e),e(f4e,hpr),e(XT,ppr),e(XT,LQ),e(LQ,_pr),e(XT,upr),e(q,bpr),e(q,zT),e(zT,m4e),e(m4e,vpr),e(zT,Fpr),e(zT,yQ),e(yQ,Tpr),e(zT,Mpr),e(q,Epr),e(q,WT),e(WT,g4e),e(g4e,Cpr),e(WT,wpr),e(WT,xQ),e(xQ,Apr),e(WT,Lpr),e(q,ypr),e(q,QT),e(QT,h4e),e(h4e,xpr),e(QT,$pr),e(QT,$Q),e($Q,kpr),e(QT,Spr),e(q,Rpr),e(q,HT),e(HT,p4e),e(p4e,Ppr),e(HT,Bpr),e(HT,kQ),e(kQ,Ipr),e(HT,Npr),e(q,qpr),e(q,UT),e(UT,_4e),e(_4e,jpr),e(UT,Dpr),e(UT,SQ),e(SQ,Gpr),e(UT,Opr),e(q,Vpr),e(q,JT),e(JT,u4e),e(u4e,Xpr),e(JT,zpr),e(JT,RQ),e(RQ,Wpr),e(JT,Qpr),e(q,Hpr),e(q,YT),e(YT,b4e),e(b4e,Upr),e(YT,Jpr),e(YT,PQ),e(PQ,Ypr),e(YT,Kpr),e(q,Zpr),e(q,KT),e(KT,v4e),e(v4e,e_r),e(KT,o_r),e(KT,BQ),e(BQ,r_r),e(KT,t_r),e(q,a_r),e(q,ZT),e(ZT,F4e),e(F4e,n_r),e(ZT,s_r),e(ZT,IQ),e(IQ,l_r),e(ZT,i_r),e(q,d_r),e(q,e7),e(e7,T4e),e(T4e,c_r),e(e7,f_r),e(e7,NQ),e(NQ,m_r),e(e7,g_r),e(q,h_r),e(q,o7),e(o7,M4e),e(M4e,p_r),e(o7,__r),e(o7,qQ),e(qQ,u_r),e(o7,b_r),e(q,v_r),e(q,r7),e(r7,E4e),e(E4e,F_r),e(r7,T_r),e(r7,jQ),e(jQ,M_r),e(r7,E_r),e(q,C_r),e(q,t7),e(t7,C4e),e(C4e,w_r),e(t7,A_r),e(t7,DQ),e(DQ,L_r),e(t7,y_r),e(q,x_r),e(q,a7),e(a7,w4e),e(w4e,$_r),e(a7,k_r),e(a7,GQ),e(GQ,S_r),e(a7,R_r),e(q,P_r),e(q,n7),e(n7,A4e),e(A4e,B_r),e(n7,I_r),e(n7,OQ),e(OQ,N_r),e(n7,q_r),e(q,j_r),e(q,s7),e(s7,L4e),e(L4e,D_r),e(s7,G_r),e(s7,VQ),e(VQ,O_r),e(s7,V_r),e(q,X_r),e(q,l7),e(l7,y4e),e(y4e,z_r),e(l7,W_r),e(l7,XQ),e(XQ,Q_r),e(l7,H_r),e(q,U_r),e(q,i7),e(i7,x4e),e(x4e,J_r),e(i7,Y_r),e(i7,zQ),e(zQ,K_r),e(i7,Z_r),e(q,eur),e(q,d7),e(d7,$4e),e($4e,our),e(d7,rur),e(d7,WQ),e(WQ,tur),e(d7,aur),e(q,nur),e(q,c7),e(c7,k4e),e(k4e,sur),e(c7,lur),e(c7,QQ),e(QQ,iur),e(c7,dur),e(q,cur),e(q,f7),e(f7,S4e),e(S4e,fur),e(f7,mur),e(f7,HQ),e(HQ,gur),e(f7,hur),e(q,pur),e(q,m7),e(m7,R4e),e(R4e,_ur),e(m7,uur),e(m7,UQ),e(UQ,bur),e(m7,vur),e(wr,Fur),M(g7,wr,null),b(f,UDe,u),b(f,Wd,u),e(Wd,h7),e(h7,P4e),M(N8,P4e,null),e(Wd,Tur),e(Wd,B4e),e(B4e,Mur),b(f,JDe,u),b(f,Ko,u),M(q8,Ko,null),e(Ko,Eur),e(Ko,Qd),e(Qd,Cur),e(Qd,JQ),e(JQ,wur),e(Qd,Aur),e(Qd,YQ),e(YQ,Lur),e(Qd,yur),e(Ko,xur),e(Ko,j8),e(j8,$ur),e(j8,I4e),e(I4e,kur),e(j8,Sur),e(Ko,Rur),e(Ko,yt),M(D8,yt,null),e(yt,Pur),e(yt,N4e),e(N4e,Bur),e(yt,Iur),e(yt,Hd),e(Hd,Nur),e(Hd,q4e),e(q4e,qur),e(Hd,jur),e(Hd,KQ),e(KQ,Dur),e(Hd,Gur),e(yt,Our),M(p7,yt,null),e(Ko,Vur),e(Ko,Ar),M(G8,Ar,null),e(Ar,Xur),e(Ar,j4e),e(j4e,zur),e(Ar,Wur),e(Ar,Za),e(Za,Qur),e(Za,D4e),e(D4e,Hur),e(Za,Uur),e(Za,G4e),e(G4e,Jur),e(Za,Yur),e(Za,O4e),e(O4e,Kur),e(Za,Zur),e(Ar,e1r),e(Ar,se),e(se,_7),e(_7,V4e),e(V4e,o1r),e(_7,r1r),e(_7,ZQ),e(ZQ,t1r),e(_7,a1r),e(se,n1r),e(se,u7),e(u7,X4e),e(X4e,s1r),e(u7,l1r),e(u7,eH),e(eH,i1r),e(u7,d1r),e(se,c1r),e(se,b7),e(b7,z4e),e(z4e,f1r),e(b7,m1r),e(b7,oH),e(oH,g1r),e(b7,h1r),e(se,p1r),e(se,v7),e(v7,W4e),e(W4e,_1r),e(v7,u1r),e(v7,rH),e(rH,b1r),e(v7,v1r),e(se,F1r),e(se,F7),e(F7,Q4e),e(Q4e,T1r),e(F7,M1r),e(F7,tH),e(tH,E1r),e(F7,C1r),e(se,w1r),e(se,T7),e(T7,H4e),e(H4e,A1r),e(T7,L1r),e(T7,aH),e(aH,y1r),e(T7,x1r),e(se,$1r),e(se,M7),e(M7,U4e),e(U4e,k1r),e(M7,S1r),e(M7,nH),e(nH,R1r),e(M7,P1r),e(se,B1r),e(se,E7),e(E7,J4e),e(J4e,I1r),e(E7,N1r),e(E7,sH),e(sH,q1r),e(E7,j1r),e(se,D1r),e(se,C7),e(C7,Y4e),e(Y4e,G1r),e(C7,O1r),e(C7,lH),e(lH,V1r),e(C7,X1r),e(se,z1r),e(se,w7),e(w7,K4e),e(K4e,W1r),e(w7,Q1r),e(w7,iH),e(iH,H1r),e(w7,U1r),e(se,J1r),e(se,A7),e(A7,Z4e),e(Z4e,Y1r),e(A7,K1r),e(A7,dH),e(dH,Z1r),e(A7,ebr),e(se,obr),e(se,L7),e(L7,eve),e(eve,rbr),e(L7,tbr),e(L7,cH),e(cH,abr),e(L7,nbr),e(se,sbr),e(se,y7),e(y7,ove),e(ove,lbr),e(y7,ibr),e(y7,fH),e(fH,dbr),e(y7,cbr),e(se,fbr),e(se,x7),e(x7,rve),e(rve,mbr),e(x7,gbr),e(x7,mH),e(mH,hbr),e(x7,pbr),e(se,_br),e(se,$7),e($7,tve),e(tve,ubr),e($7,bbr),e($7,gH),e(gH,vbr),e($7,Fbr),e(se,Tbr),e(se,k7),e(k7,ave),e(ave,Mbr),e(k7,Ebr),e(k7,hH),e(hH,Cbr),e(k7,wbr),e(se,Abr),e(se,S7),e(S7,nve),e(nve,Lbr),e(S7,ybr),e(S7,pH),e(pH,xbr),e(S7,$br),e(se,kbr),e(se,R7),e(R7,sve),e(sve,Sbr),e(R7,Rbr),e(R7,_H),e(_H,Pbr),e(R7,Bbr),e(se,Ibr),e(se,P7),e(P7,lve),e(lve,Nbr),e(P7,qbr),e(P7,uH),e(uH,jbr),e(P7,Dbr),e(se,Gbr),e(se,B7),e(B7,ive),e(ive,Obr),e(B7,Vbr),e(B7,bH),e(bH,Xbr),e(B7,zbr),e(se,Wbr),e(se,I7),e(I7,dve),e(dve,Qbr),e(I7,Hbr),e(I7,vH),e(vH,Ubr),e(I7,Jbr),e(se,Ybr),e(se,N7),e(N7,cve),e(cve,Kbr),e(N7,Zbr),e(N7,FH),e(FH,e2r),e(N7,o2r),e(se,r2r),e(se,q7),e(q7,fve),e(fve,t2r),e(q7,a2r),e(q7,TH),e(TH,n2r),e(q7,s2r),e(Ar,l2r),M(j7,Ar,null),b(f,YDe,u),b(f,Ud,u),e(Ud,D7),e(D7,mve),M(O8,mve,null),e(Ud,i2r),e(Ud,gve),e(gve,d2r),b(f,KDe,u),b(f,Zo,u),M(V8,Zo,null),e(Zo,c2r),e(Zo,Jd),e(Jd,f2r),e(Jd,MH),e(MH,m2r),e(Jd,g2r),e(Jd,EH),e(EH,h2r),e(Jd,p2r),e(Zo,_2r),e(Zo,X8),e(X8,u2r),e(X8,hve),e(hve,b2r),e(X8,v2r),e(Zo,F2r),e(Zo,xt),M(z8,xt,null),e(xt,T2r),e(xt,pve),e(pve,M2r),e(xt,E2r),e(xt,Yd),e(Yd,C2r),e(Yd,_ve),e(_ve,w2r),e(Yd,A2r),e(Yd,CH),e(CH,L2r),e(Yd,y2r),e(xt,x2r),M(G7,xt,null),e(Zo,$2r),e(Zo,Lr),M(W8,Lr,null),e(Lr,k2r),e(Lr,uve),e(uve,S2r),e(Lr,R2r),e(Lr,en),e(en,P2r),e(en,bve),e(bve,B2r),e(en,I2r),e(en,vve),e(vve,N2r),e(en,q2r),e(en,Fve),e(Fve,j2r),e(en,D2r),e(Lr,G2r),e(Lr,Me),e(Me,O7),e(O7,Tve),e(Tve,O2r),e(O7,V2r),e(O7,wH),e(wH,X2r),e(O7,z2r),e(Me,W2r),e(Me,V7),e(V7,Mve),e(Mve,Q2r),e(V7,H2r),e(V7,AH),e(AH,U2r),e(V7,J2r),e(Me,Y2r),e(Me,X7),e(X7,Eve),e(Eve,K2r),e(X7,Z2r),e(X7,LH),e(LH,e4r),e(X7,o4r),e(Me,r4r),e(Me,z7),e(z7,Cve),e(Cve,t4r),e(z7,a4r),e(z7,yH),e(yH,n4r),e(z7,s4r),e(Me,l4r),e(Me,W7),e(W7,wve),e(wve,i4r),e(W7,d4r),e(W7,xH),e(xH,c4r),e(W7,f4r),e(Me,m4r),e(Me,Q7),e(Q7,Ave),e(Ave,g4r),e(Q7,h4r),e(Q7,$H),e($H,p4r),e(Q7,_4r),e(Me,u4r),e(Me,H7),e(H7,Lve),e(Lve,b4r),e(H7,v4r),e(H7,kH),e(kH,F4r),e(H7,T4r),e(Me,M4r),e(Me,U7),e(U7,yve),e(yve,E4r),e(U7,C4r),e(U7,SH),e(SH,w4r),e(U7,A4r),e(Me,L4r),e(Me,J7),e(J7,xve),e(xve,y4r),e(J7,x4r),e(J7,RH),e(RH,$4r),e(J7,k4r),e(Me,S4r),e(Me,Y7),e(Y7,$ve),e($ve,R4r),e(Y7,P4r),e(Y7,PH),e(PH,B4r),e(Y7,I4r),e(Me,N4r),e(Me,K7),e(K7,kve),e(kve,q4r),e(K7,j4r),e(K7,BH),e(BH,D4r),e(K7,G4r),e(Me,O4r),e(Me,Z7),e(Z7,Sve),e(Sve,V4r),e(Z7,X4r),e(Z7,IH),e(IH,z4r),e(Z7,W4r),e(Me,Q4r),e(Me,eM),e(eM,Rve),e(Rve,H4r),e(eM,U4r),e(eM,NH),e(NH,J4r),e(eM,Y4r),e(Lr,K4r),M(oM,Lr,null),b(f,ZDe,u),b(f,Kd,u),e(Kd,rM),e(rM,Pve),M(Q8,Pve,null),e(Kd,Z4r),e(Kd,Bve),e(Bve,evr),b(f,eGe,u),b(f,er,u),M(H8,er,null),e(er,ovr),e(er,Zd),e(Zd,rvr),e(Zd,qH),e(qH,tvr),e(Zd,avr),e(Zd,jH),e(jH,nvr),e(Zd,svr),e(er,lvr),e(er,U8),e(U8,ivr),e(U8,Ive),e(Ive,dvr),e(U8,cvr),e(er,fvr),e(er,$t),M(J8,$t,null),e($t,mvr),e($t,Nve),e(Nve,gvr),e($t,hvr),e($t,ec),e(ec,pvr),e(ec,qve),e(qve,_vr),e(ec,uvr),e(ec,DH),e(DH,bvr),e(ec,vvr),e($t,Fvr),M(tM,$t,null),e(er,Tvr),e(er,yr),M(Y8,yr,null),e(yr,Mvr),e(yr,jve),e(jve,Evr),e(yr,Cvr),e(yr,on),e(on,wvr),e(on,Dve),e(Dve,Avr),e(on,Lvr),e(on,Gve),e(Gve,yvr),e(on,xvr),e(on,Ove),e(Ove,$vr),e(on,kvr),e(yr,Svr),e(yr,rn),e(rn,aM),e(aM,Vve),e(Vve,Rvr),e(aM,Pvr),e(aM,GH),e(GH,Bvr),e(aM,Ivr),e(rn,Nvr),e(rn,nM),e(nM,Xve),e(Xve,qvr),e(nM,jvr),e(nM,OH),e(OH,Dvr),e(nM,Gvr),e(rn,Ovr),e(rn,sM),e(sM,zve),e(zve,Vvr),e(sM,Xvr),e(sM,VH),e(VH,zvr),e(sM,Wvr),e(rn,Qvr),e(rn,lM),e(lM,Wve),e(Wve,Hvr),e(lM,Uvr),e(lM,XH),e(XH,Jvr),e(lM,Yvr),e(yr,Kvr),M(iM,yr,null),b(f,oGe,u),b(f,oc,u),e(oc,dM),e(dM,Qve),M(K8,Qve,null),e(oc,Zvr),e(oc,Hve),e(Hve,eFr),b(f,rGe,u),b(f,or,u),M(Z8,or,null),e(or,oFr),e(or,rc),e(rc,rFr),e(rc,zH),e(zH,tFr),e(rc,aFr),e(rc,WH),e(WH,nFr),e(rc,sFr),e(or,lFr),e(or,e9),e(e9,iFr),e(e9,Uve),e(Uve,dFr),e(e9,cFr),e(or,fFr),e(or,kt),M(o9,kt,null),e(kt,mFr),e(kt,Jve),e(Jve,gFr),e(kt,hFr),e(kt,tc),e(tc,pFr),e(tc,Yve),e(Yve,_Fr),e(tc,uFr),e(tc,QH),e(QH,bFr),e(tc,vFr),e(kt,FFr),M(cM,kt,null),e(or,TFr),e(or,xr),M(r9,xr,null),e(xr,MFr),e(xr,Kve),e(Kve,EFr),e(xr,CFr),e(xr,tn),e(tn,wFr),e(tn,Zve),e(Zve,AFr),e(tn,LFr),e(tn,eFe),e(eFe,yFr),e(tn,xFr),e(tn,oFe),e(oFe,$Fr),e(tn,kFr),e(xr,SFr),e(xr,ie),e(ie,fM),e(fM,rFe),e(rFe,RFr),e(fM,PFr),e(fM,HH),e(HH,BFr),e(fM,IFr),e(ie,NFr),e(ie,mM),e(mM,tFe),e(tFe,qFr),e(mM,jFr),e(mM,UH),e(UH,DFr),e(mM,GFr),e(ie,OFr),e(ie,gM),e(gM,aFe),e(aFe,VFr),e(gM,XFr),e(gM,JH),e(JH,zFr),e(gM,WFr),e(ie,QFr),e(ie,hM),e(hM,nFe),e(nFe,HFr),e(hM,UFr),e(hM,YH),e(YH,JFr),e(hM,YFr),e(ie,KFr),e(ie,pM),e(pM,sFe),e(sFe,ZFr),e(pM,e6r),e(pM,KH),e(KH,o6r),e(pM,r6r),e(ie,t6r),e(ie,_M),e(_M,lFe),e(lFe,a6r),e(_M,n6r),e(_M,ZH),e(ZH,s6r),e(_M,l6r),e(ie,i6r),e(ie,uM),e(uM,iFe),e(iFe,d6r),e(uM,c6r),e(uM,eU),e(eU,f6r),e(uM,m6r),e(ie,g6r),e(ie,bM),e(bM,dFe),e(dFe,h6r),e(bM,p6r),e(bM,oU),e(oU,_6r),e(bM,u6r),e(ie,b6r),e(ie,vM),e(vM,cFe),e(cFe,v6r),e(vM,F6r),e(vM,rU),e(rU,T6r),e(vM,M6r),e(ie,E6r),e(ie,FM),e(FM,fFe),e(fFe,C6r),e(FM,w6r),e(FM,tU),e(tU,A6r),e(FM,L6r),e(ie,y6r),e(ie,TM),e(TM,mFe),e(mFe,x6r),e(TM,$6r),e(TM,aU),e(aU,k6r),e(TM,S6r),e(ie,R6r),e(ie,MM),e(MM,gFe),e(gFe,P6r),e(MM,B6r),e(MM,nU),e(nU,I6r),e(MM,N6r),e(ie,q6r),e(ie,EM),e(EM,hFe),e(hFe,j6r),e(EM,D6r),e(EM,sU),e(sU,G6r),e(EM,O6r),e(ie,V6r),e(ie,CM),e(CM,pFe),e(pFe,X6r),e(CM,z6r),e(CM,lU),e(lU,W6r),e(CM,Q6r),e(ie,H6r),e(ie,wM),e(wM,_Fe),e(_Fe,U6r),e(wM,J6r),e(wM,iU),e(iU,Y6r),e(wM,K6r),e(ie,Z6r),e(ie,AM),e(AM,uFe),e(uFe,eTr),e(AM,oTr),e(AM,dU),e(dU,rTr),e(AM,tTr),e(ie,aTr),e(ie,LM),e(LM,bFe),e(bFe,nTr),e(LM,sTr),e(LM,cU),e(cU,lTr),e(LM,iTr),e(ie,dTr),e(ie,yM),e(yM,vFe),e(vFe,cTr),e(yM,fTr),e(yM,fU),e(fU,mTr),e(yM,gTr),e(ie,hTr),e(ie,xM),e(xM,FFe),e(FFe,pTr),e(xM,_Tr),e(xM,mU),e(mU,uTr),e(xM,bTr),e(ie,vTr),e(ie,$M),e($M,TFe),e(TFe,FTr),e($M,TTr),e($M,gU),e(gU,MTr),e($M,ETr),e(xr,CTr),M(kM,xr,null),b(f,tGe,u),b(f,ac,u),e(ac,SM),e(SM,MFe),M(t9,MFe,null),e(ac,wTr),e(ac,EFe),e(EFe,ATr),b(f,aGe,u),b(f,rr,u),M(a9,rr,null),e(rr,LTr),e(rr,nc),e(nc,yTr),e(nc,hU),e(hU,xTr),e(nc,$Tr),e(nc,pU),e(pU,kTr),e(nc,STr),e(rr,RTr),e(rr,n9),e(n9,PTr),e(n9,CFe),e(CFe,BTr),e(n9,ITr),e(rr,NTr),e(rr,St),M(s9,St,null),e(St,qTr),e(St,wFe),e(wFe,jTr),e(St,DTr),e(St,sc),e(sc,GTr),e(sc,AFe),e(AFe,OTr),e(sc,VTr),e(sc,_U),e(_U,XTr),e(sc,zTr),e(St,WTr),M(RM,St,null),e(rr,QTr),e(rr,$r),M(l9,$r,null),e($r,HTr),e($r,LFe),e(LFe,UTr),e($r,JTr),e($r,an),e(an,YTr),e(an,yFe),e(yFe,KTr),e(an,ZTr),e(an,xFe),e(xFe,e7r),e(an,o7r),e(an,$Fe),e($Fe,r7r),e(an,t7r),e($r,a7r),e($r,ye),e(ye,PM),e(PM,kFe),e(kFe,n7r),e(PM,s7r),e(PM,uU),e(uU,l7r),e(PM,i7r),e(ye,d7r),e(ye,BM),e(BM,SFe),e(SFe,c7r),e(BM,f7r),e(BM,bU),e(bU,m7r),e(BM,g7r),e(ye,h7r),e(ye,IM),e(IM,RFe),e(RFe,p7r),e(IM,_7r),e(IM,vU),e(vU,u7r),e(IM,b7r),e(ye,v7r),e(ye,NM),e(NM,PFe),e(PFe,F7r),e(NM,T7r),e(NM,FU),e(FU,M7r),e(NM,E7r),e(ye,C7r),e(ye,qM),e(qM,BFe),e(BFe,w7r),e(qM,A7r),e(qM,TU),e(TU,L7r),e(qM,y7r),e(ye,x7r),e(ye,jM),e(jM,IFe),e(IFe,$7r),e(jM,k7r),e(jM,MU),e(MU,S7r),e(jM,R7r),e(ye,P7r),e(ye,DM),e(DM,NFe),e(NFe,B7r),e(DM,I7r),e(DM,EU),e(EU,N7r),e(DM,q7r),e(ye,j7r),e(ye,GM),e(GM,qFe),e(qFe,D7r),e(GM,G7r),e(GM,CU),e(CU,O7r),e(GM,V7r),e(ye,X7r),e(ye,OM),e(OM,jFe),e(jFe,z7r),e(OM,W7r),e(OM,wU),e(wU,Q7r),e(OM,H7r),e(ye,U7r),e(ye,VM),e(VM,DFe),e(DFe,J7r),e(VM,Y7r),e(VM,AU),e(AU,K7r),e(VM,Z7r),e($r,eMr),M(XM,$r,null),b(f,nGe,u),b(f,lc,u),e(lc,zM),e(zM,GFe),M(i9,GFe,null),e(lc,oMr),e(lc,OFe),e(OFe,rMr),b(f,sGe,u),b(f,tr,u),M(d9,tr,null),e(tr,tMr),e(tr,ic),e(ic,aMr),e(ic,LU),e(LU,nMr),e(ic,sMr),e(ic,yU),e(yU,lMr),e(ic,iMr),e(tr,dMr),e(tr,c9),e(c9,cMr),e(c9,VFe),e(VFe,fMr),e(c9,mMr),e(tr,gMr),e(tr,Rt),M(f9,Rt,null),e(Rt,hMr),e(Rt,XFe),e(XFe,pMr),e(Rt,_Mr),e(Rt,dc),e(dc,uMr),e(dc,zFe),e(zFe,bMr),e(dc,vMr),e(dc,xU),e(xU,FMr),e(dc,TMr),e(Rt,MMr),M(WM,Rt,null),e(tr,EMr),e(tr,kr),M(m9,kr,null),e(kr,CMr),e(kr,WFe),e(WFe,wMr),e(kr,AMr),e(kr,nn),e(nn,LMr),e(nn,QFe),e(QFe,yMr),e(nn,xMr),e(nn,HFe),e(HFe,$Mr),e(nn,kMr),e(nn,UFe),e(UFe,SMr),e(nn,RMr),e(kr,PMr),e(kr,oe),e(oe,QM),e(QM,JFe),e(JFe,BMr),e(QM,IMr),e(QM,$U),e($U,NMr),e(QM,qMr),e(oe,jMr),e(oe,HM),e(HM,YFe),e(YFe,DMr),e(HM,GMr),e(HM,kU),e(kU,OMr),e(HM,VMr),e(oe,XMr),e(oe,UM),e(UM,KFe),e(KFe,zMr),e(UM,WMr),e(UM,SU),e(SU,QMr),e(UM,HMr),e(oe,UMr),e(oe,JM),e(JM,ZFe),e(ZFe,JMr),e(JM,YMr),e(JM,RU),e(RU,KMr),e(JM,ZMr),e(oe,eEr),e(oe,YM),e(YM,e6e),e(e6e,oEr),e(YM,rEr),e(YM,PU),e(PU,tEr),e(YM,aEr),e(oe,nEr),e(oe,KM),e(KM,o6e),e(o6e,sEr),e(KM,lEr),e(KM,BU),e(BU,iEr),e(KM,dEr),e(oe,cEr),e(oe,ZM),e(ZM,r6e),e(r6e,fEr),e(ZM,mEr),e(ZM,IU),e(IU,gEr),e(ZM,hEr),e(oe,pEr),e(oe,eE),e(eE,t6e),e(t6e,_Er),e(eE,uEr),e(eE,NU),e(NU,bEr),e(eE,vEr),e(oe,FEr),e(oe,oE),e(oE,a6e),e(a6e,TEr),e(oE,MEr),e(oE,qU),e(qU,EEr),e(oE,CEr),e(oe,wEr),e(oe,rE),e(rE,n6e),e(n6e,AEr),e(rE,LEr),e(rE,jU),e(jU,yEr),e(rE,xEr),e(oe,$Er),e(oe,tE),e(tE,s6e),e(s6e,kEr),e(tE,SEr),e(tE,DU),e(DU,REr),e(tE,PEr),e(oe,BEr),e(oe,aE),e(aE,l6e),e(l6e,IEr),e(aE,NEr),e(aE,GU),e(GU,qEr),e(aE,jEr),e(oe,DEr),e(oe,nE),e(nE,i6e),e(i6e,GEr),e(nE,OEr),e(nE,OU),e(OU,VEr),e(nE,XEr),e(oe,zEr),e(oe,sE),e(sE,d6e),e(d6e,WEr),e(sE,QEr),e(sE,VU),e(VU,HEr),e(sE,UEr),e(oe,JEr),e(oe,lE),e(lE,c6e),e(c6e,YEr),e(lE,KEr),e(lE,XU),e(XU,ZEr),e(lE,eCr),e(oe,oCr),e(oe,iE),e(iE,f6e),e(f6e,rCr),e(iE,tCr),e(iE,zU),e(zU,aCr),e(iE,nCr),e(oe,sCr),e(oe,dE),e(dE,m6e),e(m6e,lCr),e(dE,iCr),e(dE,WU),e(WU,dCr),e(dE,cCr),e(oe,fCr),e(oe,cE),e(cE,g6e),e(g6e,mCr),e(cE,gCr),e(cE,QU),e(QU,hCr),e(cE,pCr),e(oe,_Cr),e(oe,fE),e(fE,h6e),e(h6e,uCr),e(fE,bCr),e(fE,HU),e(HU,vCr),e(fE,FCr),e(oe,TCr),e(oe,mE),e(mE,p6e),e(p6e,MCr),e(mE,ECr),e(mE,UU),e(UU,CCr),e(mE,wCr),e(oe,ACr),e(oe,gE),e(gE,_6e),e(_6e,LCr),e(gE,yCr),e(gE,JU),e(JU,xCr),e(gE,$Cr),e(oe,kCr),e(oe,hE),e(hE,u6e),e(u6e,SCr),e(hE,RCr),e(hE,YU),e(YU,PCr),e(hE,BCr),e(oe,ICr),e(oe,pE),e(pE,b6e),e(b6e,NCr),e(pE,qCr),e(pE,KU),e(KU,jCr),e(pE,DCr),e(oe,GCr),e(oe,_E),e(_E,v6e),e(v6e,OCr),e(_E,VCr),e(_E,ZU),e(ZU,XCr),e(_E,zCr),e(oe,WCr),e(oe,uE),e(uE,F6e),e(F6e,QCr),e(uE,HCr),e(uE,eJ),e(eJ,UCr),e(uE,JCr),e(oe,YCr),e(oe,bE),e(bE,T6e),e(T6e,KCr),e(bE,ZCr),e(bE,oJ),e(oJ,e5r),e(bE,o5r),e(kr,r5r),M(vE,kr,null),b(f,lGe,u),b(f,cc,u),e(cc,FE),e(FE,M6e),M(g9,M6e,null),e(cc,t5r),e(cc,E6e),e(E6e,a5r),b(f,iGe,u),b(f,ar,u),M(h9,ar,null),e(ar,n5r),e(ar,fc),e(fc,s5r),e(fc,rJ),e(rJ,l5r),e(fc,i5r),e(fc,tJ),e(tJ,d5r),e(fc,c5r),e(ar,f5r),e(ar,p9),e(p9,m5r),e(p9,C6e),e(C6e,g5r),e(p9,h5r),e(ar,p5r),e(ar,Pt),M(_9,Pt,null),e(Pt,_5r),e(Pt,w6e),e(w6e,u5r),e(Pt,b5r),e(Pt,mc),e(mc,v5r),e(mc,A6e),e(A6e,F5r),e(mc,T5r),e(mc,aJ),e(aJ,M5r),e(mc,E5r),e(Pt,C5r),M(TE,Pt,null),e(ar,w5r),e(ar,Sr),M(u9,Sr,null),e(Sr,A5r),e(Sr,L6e),e(L6e,L5r),e(Sr,y5r),e(Sr,sn),e(sn,x5r),e(sn,y6e),e(y6e,$5r),e(sn,k5r),e(sn,x6e),e(x6e,S5r),e(sn,R5r),e(sn,$6e),e($6e,P5r),e(sn,B5r),e(Sr,I5r),e(Sr,pe),e(pe,ME),e(ME,k6e),e(k6e,N5r),e(ME,q5r),e(ME,nJ),e(nJ,j5r),e(ME,D5r),e(pe,G5r),e(pe,EE),e(EE,S6e),e(S6e,O5r),e(EE,V5r),e(EE,sJ),e(sJ,X5r),e(EE,z5r),e(pe,W5r),e(pe,CE),e(CE,R6e),e(R6e,Q5r),e(CE,H5r),e(CE,lJ),e(lJ,U5r),e(CE,J5r),e(pe,Y5r),e(pe,wE),e(wE,P6e),e(P6e,K5r),e(wE,Z5r),e(wE,iJ),e(iJ,e3r),e(wE,o3r),e(pe,r3r),e(pe,AE),e(AE,B6e),e(B6e,t3r),e(AE,a3r),e(AE,dJ),e(dJ,n3r),e(AE,s3r),e(pe,l3r),e(pe,LE),e(LE,I6e),e(I6e,i3r),e(LE,d3r),e(LE,cJ),e(cJ,c3r),e(LE,f3r),e(pe,m3r),e(pe,yE),e(yE,N6e),e(N6e,g3r),e(yE,h3r),e(yE,fJ),e(fJ,p3r),e(yE,_3r),e(pe,u3r),e(pe,xE),e(xE,q6e),e(q6e,b3r),e(xE,v3r),e(xE,mJ),e(mJ,F3r),e(xE,T3r),e(pe,M3r),e(pe,$E),e($E,j6e),e(j6e,E3r),e($E,C3r),e($E,gJ),e(gJ,w3r),e($E,A3r),e(pe,L3r),e(pe,kE),e(kE,D6e),e(D6e,y3r),e(kE,x3r),e(kE,hJ),e(hJ,$3r),e(kE,k3r),e(pe,S3r),e(pe,SE),e(SE,G6e),e(G6e,R3r),e(SE,P3r),e(SE,pJ),e(pJ,B3r),e(SE,I3r),e(pe,N3r),e(pe,RE),e(RE,O6e),e(O6e,q3r),e(RE,j3r),e(RE,_J),e(_J,D3r),e(RE,G3r),e(pe,O3r),e(pe,PE),e(PE,V6e),e(V6e,V3r),e(PE,X3r),e(PE,uJ),e(uJ,z3r),e(PE,W3r),e(pe,Q3r),e(pe,BE),e(BE,X6e),e(X6e,H3r),e(BE,U3r),e(BE,bJ),e(bJ,J3r),e(BE,Y3r),e(pe,K3r),e(pe,IE),e(IE,z6e),e(z6e,Z3r),e(IE,e0r),e(IE,vJ),e(vJ,o0r),e(IE,r0r),e(pe,t0r),e(pe,NE),e(NE,W6e),e(W6e,a0r),e(NE,n0r),e(NE,FJ),e(FJ,s0r),e(NE,l0r),e(pe,i0r),e(pe,qE),e(qE,Q6e),e(Q6e,d0r),e(qE,c0r),e(qE,TJ),e(TJ,f0r),e(qE,m0r),e(Sr,g0r),M(jE,Sr,null),b(f,dGe,u),b(f,gc,u),e(gc,DE),e(DE,H6e),M(b9,H6e,null),e(gc,h0r),e(gc,U6e),e(U6e,p0r),b(f,cGe,u),b(f,nr,u),M(v9,nr,null),e(nr,_0r),e(nr,hc),e(hc,u0r),e(hc,MJ),e(MJ,b0r),e(hc,v0r),e(hc,EJ),e(EJ,F0r),e(hc,T0r),e(nr,M0r),e(nr,F9),e(F9,E0r),e(F9,J6e),e(J6e,C0r),e(F9,w0r),e(nr,A0r),e(nr,Bt),M(T9,Bt,null),e(Bt,L0r),e(Bt,Y6e),e(Y6e,y0r),e(Bt,x0r),e(Bt,pc),e(pc,$0r),e(pc,K6e),e(K6e,k0r),e(pc,S0r),e(pc,CJ),e(CJ,R0r),e(pc,P0r),e(Bt,B0r),M(GE,Bt,null),e(nr,I0r),e(nr,Rr),M(M9,Rr,null),e(Rr,N0r),e(Rr,Z6e),e(Z6e,q0r),e(Rr,j0r),e(Rr,ln),e(ln,D0r),e(ln,eTe),e(eTe,G0r),e(ln,O0r),e(ln,oTe),e(oTe,V0r),e(ln,X0r),e(ln,rTe),e(rTe,z0r),e(ln,W0r),e(Rr,Q0r),e(Rr,E9),e(E9,OE),e(OE,tTe),e(tTe,H0r),e(OE,U0r),e(OE,wJ),e(wJ,J0r),e(OE,Y0r),e(E9,K0r),e(E9,VE),e(VE,aTe),e(aTe,Z0r),e(VE,ewr),e(VE,AJ),e(AJ,owr),e(VE,rwr),e(Rr,twr),M(XE,Rr,null),b(f,fGe,u),b(f,_c,u),e(_c,zE),e(zE,nTe),M(C9,nTe,null),e(_c,awr),e(_c,sTe),e(sTe,nwr),b(f,mGe,u),b(f,sr,u),M(w9,sr,null),e(sr,swr),e(sr,uc),e(uc,lwr),e(uc,LJ),e(LJ,iwr),e(uc,dwr),e(uc,yJ),e(yJ,cwr),e(uc,fwr),e(sr,mwr),e(sr,A9),e(A9,gwr),e(A9,lTe),e(lTe,hwr),e(A9,pwr),e(sr,_wr),e(sr,It),M(L9,It,null),e(It,uwr),e(It,iTe),e(iTe,bwr),e(It,vwr),e(It,bc),e(bc,Fwr),e(bc,dTe),e(dTe,Twr),e(bc,Mwr),e(bc,xJ),e(xJ,Ewr),e(bc,Cwr),e(It,wwr),M(WE,It,null),e(sr,Awr),e(sr,Pr),M(y9,Pr,null),e(Pr,Lwr),e(Pr,cTe),e(cTe,ywr),e(Pr,xwr),e(Pr,dn),e(dn,$wr),e(dn,fTe),e(fTe,kwr),e(dn,Swr),e(dn,mTe),e(mTe,Rwr),e(dn,Pwr),e(dn,gTe),e(gTe,Bwr),e(dn,Iwr),e(Pr,Nwr),e(Pr,hTe),e(hTe,QE),e(QE,pTe),e(pTe,qwr),e(QE,jwr),e(QE,$J),e($J,Dwr),e(QE,Gwr),e(Pr,Owr),M(HE,Pr,null),b(f,gGe,u),b(f,vc,u),e(vc,UE),e(UE,_Te),M(x9,_Te,null),e(vc,Vwr),e(vc,uTe),e(uTe,Xwr),b(f,hGe,u),b(f,lr,u),M($9,lr,null),e(lr,zwr),e(lr,Fc),e(Fc,Wwr),e(Fc,kJ),e(kJ,Qwr),e(Fc,Hwr),e(Fc,SJ),e(SJ,Uwr),e(Fc,Jwr),e(lr,Ywr),e(lr,k9),e(k9,Kwr),e(k9,bTe),e(bTe,Zwr),e(k9,eAr),e(lr,oAr),e(lr,Nt),M(S9,Nt,null),e(Nt,rAr),e(Nt,vTe),e(vTe,tAr),e(Nt,aAr),e(Nt,Tc),e(Tc,nAr),e(Tc,FTe),e(FTe,sAr),e(Tc,lAr),e(Tc,RJ),e(RJ,iAr),e(Tc,dAr),e(Nt,cAr),M(JE,Nt,null),e(lr,fAr),e(lr,Br),M(R9,Br,null),e(Br,mAr),e(Br,TTe),e(TTe,gAr),e(Br,hAr),e(Br,cn),e(cn,pAr),e(cn,MTe),e(MTe,_Ar),e(cn,uAr),e(cn,ETe),e(ETe,bAr),e(cn,vAr),e(cn,CTe),e(CTe,FAr),e(cn,TAr),e(Br,MAr),e(Br,de),e(de,YE),e(YE,wTe),e(wTe,EAr),e(YE,CAr),e(YE,PJ),e(PJ,wAr),e(YE,AAr),e(de,LAr),e(de,KE),e(KE,ATe),e(ATe,yAr),e(KE,xAr),e(KE,BJ),e(BJ,$Ar),e(KE,kAr),e(de,SAr),e(de,ZE),e(ZE,LTe),e(LTe,RAr),e(ZE,PAr),e(ZE,IJ),e(IJ,BAr),e(ZE,IAr),e(de,NAr),e(de,eC),e(eC,yTe),e(yTe,qAr),e(eC,jAr),e(eC,NJ),e(NJ,DAr),e(eC,GAr),e(de,OAr),e(de,oC),e(oC,xTe),e(xTe,VAr),e(oC,XAr),e(oC,qJ),e(qJ,zAr),e(oC,WAr),e(de,QAr),e(de,rC),e(rC,$Te),e($Te,HAr),e(rC,UAr),e(rC,jJ),e(jJ,JAr),e(rC,YAr),e(de,KAr),e(de,tC),e(tC,kTe),e(kTe,ZAr),e(tC,eLr),e(tC,DJ),e(DJ,oLr),e(tC,rLr),e(de,tLr),e(de,aC),e(aC,STe),e(STe,aLr),e(aC,nLr),e(aC,GJ),e(GJ,sLr),e(aC,lLr),e(de,iLr),e(de,nC),e(nC,RTe),e(RTe,dLr),e(nC,cLr),e(nC,OJ),e(OJ,fLr),e(nC,mLr),e(de,gLr),e(de,sC),e(sC,PTe),e(PTe,hLr),e(sC,pLr),e(sC,VJ),e(VJ,_Lr),e(sC,uLr),e(de,bLr),e(de,lC),e(lC,BTe),e(BTe,vLr),e(lC,FLr),e(lC,XJ),e(XJ,TLr),e(lC,MLr),e(de,ELr),e(de,iC),e(iC,ITe),e(ITe,CLr),e(iC,wLr),e(iC,zJ),e(zJ,ALr),e(iC,LLr),e(de,yLr),e(de,dC),e(dC,NTe),e(NTe,xLr),e(dC,$Lr),e(dC,WJ),e(WJ,kLr),e(dC,SLr),e(de,RLr),e(de,cC),e(cC,qTe),e(qTe,PLr),e(cC,BLr),e(cC,QJ),e(QJ,ILr),e(cC,NLr),e(de,qLr),e(de,fC),e(fC,jTe),e(jTe,jLr),e(fC,DLr),e(fC,HJ),e(HJ,GLr),e(fC,OLr),e(de,VLr),e(de,mC),e(mC,DTe),e(DTe,XLr),e(mC,zLr),e(mC,UJ),e(UJ,WLr),e(mC,QLr),e(de,HLr),e(de,gC),e(gC,GTe),e(GTe,ULr),e(gC,JLr),e(gC,JJ),e(JJ,YLr),e(gC,KLr),e(de,ZLr),e(de,hC),e(hC,OTe),e(OTe,eyr),e(hC,oyr),e(hC,YJ),e(YJ,ryr),e(hC,tyr),e(de,ayr),e(de,pC),e(pC,VTe),e(VTe,nyr),e(pC,syr),e(pC,KJ),e(KJ,lyr),e(pC,iyr),e(de,dyr),e(de,_C),e(_C,XTe),e(XTe,cyr),e(_C,fyr),e(_C,ZJ),e(ZJ,myr),e(_C,gyr),e(Br,hyr),M(uC,Br,null),b(f,pGe,u),b(f,Mc,u),e(Mc,bC),e(bC,zTe),M(P9,zTe,null),e(Mc,pyr),e(Mc,WTe),e(WTe,_yr),b(f,_Ge,u),b(f,ir,u),M(B9,ir,null),e(ir,uyr),e(ir,Ec),e(Ec,byr),e(Ec,eY),e(eY,vyr),e(Ec,Fyr),e(Ec,oY),e(oY,Tyr),e(Ec,Myr),e(ir,Eyr),e(ir,I9),e(I9,Cyr),e(I9,QTe),e(QTe,wyr),e(I9,Ayr),e(ir,Lyr),e(ir,qt),M(N9,qt,null),e(qt,yyr),e(qt,HTe),e(HTe,xyr),e(qt,$yr),e(qt,Cc),e(Cc,kyr),e(Cc,UTe),e(UTe,Syr),e(Cc,Ryr),e(Cc,rY),e(rY,Pyr),e(Cc,Byr),e(qt,Iyr),M(vC,qt,null),e(ir,Nyr),e(ir,Ir),M(q9,Ir,null),e(Ir,qyr),e(Ir,JTe),e(JTe,jyr),e(Ir,Dyr),e(Ir,fn),e(fn,Gyr),e(fn,YTe),e(YTe,Oyr),e(fn,Vyr),e(fn,KTe),e(KTe,Xyr),e(fn,zyr),e(fn,ZTe),e(ZTe,Wyr),e(fn,Qyr),e(Ir,Hyr),e(Ir,ce),e(ce,FC),e(FC,e7e),e(e7e,Uyr),e(FC,Jyr),e(FC,tY),e(tY,Yyr),e(FC,Kyr),e(ce,Zyr),e(ce,TC),e(TC,o7e),e(o7e,e8r),e(TC,o8r),e(TC,aY),e(aY,r8r),e(TC,t8r),e(ce,a8r),e(ce,MC),e(MC,r7e),e(r7e,n8r),e(MC,s8r),e(MC,nY),e(nY,l8r),e(MC,i8r),e(ce,d8r),e(ce,EC),e(EC,t7e),e(t7e,c8r),e(EC,f8r),e(EC,sY),e(sY,m8r),e(EC,g8r),e(ce,h8r),e(ce,CC),e(CC,a7e),e(a7e,p8r),e(CC,_8r),e(CC,lY),e(lY,u8r),e(CC,b8r),e(ce,v8r),e(ce,wC),e(wC,n7e),e(n7e,F8r),e(wC,T8r),e(wC,iY),e(iY,M8r),e(wC,E8r),e(ce,C8r),e(ce,AC),e(AC,s7e),e(s7e,w8r),e(AC,A8r),e(AC,dY),e(dY,L8r),e(AC,y8r),e(ce,x8r),e(ce,LC),e(LC,l7e),e(l7e,$8r),e(LC,k8r),e(LC,cY),e(cY,S8r),e(LC,R8r),e(ce,P8r),e(ce,yC),e(yC,i7e),e(i7e,B8r),e(yC,I8r),e(yC,fY),e(fY,N8r),e(yC,q8r),e(ce,j8r),e(ce,xC),e(xC,d7e),e(d7e,D8r),e(xC,G8r),e(xC,mY),e(mY,O8r),e(xC,V8r),e(ce,X8r),e(ce,$C),e($C,c7e),e(c7e,z8r),e($C,W8r),e($C,gY),e(gY,Q8r),e($C,H8r),e(ce,U8r),e(ce,kC),e(kC,f7e),e(f7e,J8r),e(kC,Y8r),e(kC,hY),e(hY,K8r),e(kC,Z8r),e(ce,e9r),e(ce,SC),e(SC,m7e),e(m7e,o9r),e(SC,r9r),e(SC,pY),e(pY,t9r),e(SC,a9r),e(ce,n9r),e(ce,RC),e(RC,g7e),e(g7e,s9r),e(RC,l9r),e(RC,_Y),e(_Y,i9r),e(RC,d9r),e(ce,c9r),e(ce,PC),e(PC,h7e),e(h7e,f9r),e(PC,m9r),e(PC,uY),e(uY,g9r),e(PC,h9r),e(ce,p9r),e(ce,BC),e(BC,p7e),e(p7e,_9r),e(BC,u9r),e(BC,bY),e(bY,b9r),e(BC,v9r),e(ce,F9r),e(ce,IC),e(IC,_7e),e(_7e,T9r),e(IC,M9r),e(IC,vY),e(vY,E9r),e(IC,C9r),e(ce,w9r),e(ce,NC),e(NC,u7e),e(u7e,A9r),e(NC,L9r),e(NC,FY),e(FY,y9r),e(NC,x9r),e(ce,$9r),e(ce,qC),e(qC,b7e),e(b7e,k9r),e(qC,S9r),e(qC,TY),e(TY,R9r),e(qC,P9r),e(ce,B9r),e(ce,jC),e(jC,v7e),e(v7e,I9r),e(jC,N9r),e(jC,MY),e(MY,q9r),e(jC,j9r),e(Ir,D9r),M(DC,Ir,null),b(f,uGe,u),b(f,wc,u),e(wc,GC),e(GC,F7e),M(j9,F7e,null),e(wc,G9r),e(wc,T7e),e(T7e,O9r),b(f,bGe,u),b(f,dr,u),M(D9,dr,null),e(dr,V9r),e(dr,Ac),e(Ac,X9r),e(Ac,EY),e(EY,z9r),e(Ac,W9r),e(Ac,CY),e(CY,Q9r),e(Ac,H9r),e(dr,U9r),e(dr,G9),e(G9,J9r),e(G9,M7e),e(M7e,Y9r),e(G9,K9r),e(dr,Z9r),e(dr,jt),M(O9,jt,null),e(jt,exr),e(jt,E7e),e(E7e,oxr),e(jt,rxr),e(jt,Lc),e(Lc,txr),e(Lc,C7e),e(C7e,axr),e(Lc,nxr),e(Lc,wY),e(wY,sxr),e(Lc,lxr),e(jt,ixr),M(OC,jt,null),e(dr,dxr),e(dr,Nr),M(V9,Nr,null),e(Nr,cxr),e(Nr,w7e),e(w7e,fxr),e(Nr,mxr),e(Nr,mn),e(mn,gxr),e(mn,A7e),e(A7e,hxr),e(mn,pxr),e(mn,L7e),e(L7e,_xr),e(mn,uxr),e(mn,y7e),e(y7e,bxr),e(mn,vxr),e(Nr,Fxr),e(Nr,x7e),e(x7e,VC),e(VC,$7e),e($7e,Txr),e(VC,Mxr),e(VC,AY),e(AY,Exr),e(VC,Cxr),e(Nr,wxr),M(XC,Nr,null),b(f,vGe,u),b(f,yc,u),e(yc,zC),e(zC,k7e),M(X9,k7e,null),e(yc,Axr),e(yc,S7e),e(S7e,Lxr),b(f,FGe,u),b(f,cr,u),M(z9,cr,null),e(cr,yxr),e(cr,xc),e(xc,xxr),e(xc,LY),e(LY,$xr),e(xc,kxr),e(xc,yY),e(yY,Sxr),e(xc,Rxr),e(cr,Pxr),e(cr,W9),e(W9,Bxr),e(W9,R7e),e(R7e,Ixr),e(W9,Nxr),e(cr,qxr),e(cr,Dt),M(Q9,Dt,null),e(Dt,jxr),e(Dt,P7e),e(P7e,Dxr),e(Dt,Gxr),e(Dt,$c),e($c,Oxr),e($c,B7e),e(B7e,Vxr),e($c,Xxr),e($c,xY),e(xY,zxr),e($c,Wxr),e(Dt,Qxr),M(WC,Dt,null),e(cr,Hxr),e(cr,qr),M(H9,qr,null),e(qr,Uxr),e(qr,I7e),e(I7e,Jxr),e(qr,Yxr),e(qr,gn),e(gn,Kxr),e(gn,N7e),e(N7e,Zxr),e(gn,e$r),e(gn,q7e),e(q7e,o$r),e(gn,r$r),e(gn,j7e),e(j7e,t$r),e(gn,a$r),e(qr,n$r),e(qr,D7e),e(D7e,QC),e(QC,G7e),e(G7e,s$r),e(QC,l$r),e(QC,$Y),e($Y,i$r),e(QC,d$r),e(qr,c$r),M(HC,qr,null),b(f,TGe,u),b(f,kc,u),e(kc,UC),e(UC,O7e),M(U9,O7e,null),e(kc,f$r),e(kc,V7e),e(V7e,m$r),b(f,MGe,u),b(f,fr,u),M(J9,fr,null),e(fr,g$r),e(fr,Sc),e(Sc,h$r),e(Sc,kY),e(kY,p$r),e(Sc,_$r),e(Sc,SY),e(SY,u$r),e(Sc,b$r),e(fr,v$r),e(fr,Y9),e(Y9,F$r),e(Y9,X7e),e(X7e,T$r),e(Y9,M$r),e(fr,E$r),e(fr,Gt),M(K9,Gt,null),e(Gt,C$r),e(Gt,z7e),e(z7e,w$r),e(Gt,A$r),e(Gt,Rc),e(Rc,L$r),e(Rc,W7e),e(W7e,y$r),e(Rc,x$r),e(Rc,RY),e(RY,$$r),e(Rc,k$r),e(Gt,S$r),M(JC,Gt,null),e(fr,R$r),e(fr,jr),M(Z9,jr,null),e(jr,P$r),e(jr,Q7e),e(Q7e,B$r),e(jr,I$r),e(jr,hn),e(hn,N$r),e(hn,H7e),e(H7e,q$r),e(hn,j$r),e(hn,U7e),e(U7e,D$r),e(hn,G$r),e(hn,J7e),e(J7e,O$r),e(hn,V$r),e(jr,X$r),e(jr,re),e(re,YC),e(YC,Y7e),e(Y7e,z$r),e(YC,W$r),e(YC,PY),e(PY,Q$r),e(YC,H$r),e(re,U$r),e(re,KC),e(KC,K7e),e(K7e,J$r),e(KC,Y$r),e(KC,BY),e(BY,K$r),e(KC,Z$r),e(re,ekr),e(re,ZC),e(ZC,Z7e),e(Z7e,okr),e(ZC,rkr),e(ZC,IY),e(IY,tkr),e(ZC,akr),e(re,nkr),e(re,e5),e(e5,eMe),e(eMe,skr),e(e5,lkr),e(e5,NY),e(NY,ikr),e(e5,dkr),e(re,ckr),e(re,o5),e(o5,oMe),e(oMe,fkr),e(o5,mkr),e(o5,qY),e(qY,gkr),e(o5,hkr),e(re,pkr),e(re,r5),e(r5,rMe),e(rMe,_kr),e(r5,ukr),e(r5,jY),e(jY,bkr),e(r5,vkr),e(re,Fkr),e(re,t5),e(t5,tMe),e(tMe,Tkr),e(t5,Mkr),e(t5,DY),e(DY,Ekr),e(t5,Ckr),e(re,wkr),e(re,a5),e(a5,aMe),e(aMe,Akr),e(a5,Lkr),e(a5,GY),e(GY,ykr),e(a5,xkr),e(re,$kr),e(re,n5),e(n5,nMe),e(nMe,kkr),e(n5,Skr),e(n5,OY),e(OY,Rkr),e(n5,Pkr),e(re,Bkr),e(re,s5),e(s5,sMe),e(sMe,Ikr),e(s5,Nkr),e(s5,VY),e(VY,qkr),e(s5,jkr),e(re,Dkr),e(re,l5),e(l5,lMe),e(lMe,Gkr),e(l5,Okr),e(l5,XY),e(XY,Vkr),e(l5,Xkr),e(re,zkr),e(re,i5),e(i5,iMe),e(iMe,Wkr),e(i5,Qkr),e(i5,zY),e(zY,Hkr),e(i5,Ukr),e(re,Jkr),e(re,d5),e(d5,dMe),e(dMe,Ykr),e(d5,Kkr),e(d5,WY),e(WY,Zkr),e(d5,eSr),e(re,oSr),e(re,c5),e(c5,cMe),e(cMe,rSr),e(c5,tSr),e(c5,QY),e(QY,aSr),e(c5,nSr),e(re,sSr),e(re,f5),e(f5,fMe),e(fMe,lSr),e(f5,iSr),e(f5,HY),e(HY,dSr),e(f5,cSr),e(re,fSr),e(re,m5),e(m5,mMe),e(mMe,mSr),e(m5,gSr),e(m5,UY),e(UY,hSr),e(m5,pSr),e(re,_Sr),e(re,g5),e(g5,gMe),e(gMe,uSr),e(g5,bSr),e(g5,JY),e(JY,vSr),e(g5,FSr),e(re,TSr),e(re,h5),e(h5,hMe),e(hMe,MSr),e(h5,ESr),e(h5,YY),e(YY,CSr),e(h5,wSr),e(re,ASr),e(re,p5),e(p5,pMe),e(pMe,LSr),e(p5,ySr),e(p5,KY),e(KY,xSr),e(p5,$Sr),e(re,kSr),e(re,_5),e(_5,_Me),e(_Me,SSr),e(_5,RSr),e(_5,ZY),e(ZY,PSr),e(_5,BSr),e(re,ISr),e(re,u5),e(u5,uMe),e(uMe,NSr),e(u5,qSr),e(u5,eK),e(eK,jSr),e(u5,DSr),e(re,GSr),e(re,b5),e(b5,bMe),e(bMe,OSr),e(b5,VSr),e(b5,oK),e(oK,XSr),e(b5,zSr),e(re,WSr),e(re,v5),e(v5,vMe),e(vMe,QSr),e(v5,HSr),e(v5,rK),e(rK,USr),e(v5,JSr),e(re,YSr),e(re,F5),e(F5,FMe),e(FMe,KSr),e(F5,ZSr),e(F5,tK),e(tK,eRr),e(F5,oRr),e(re,rRr),e(re,T5),e(T5,TMe),e(TMe,tRr),e(T5,aRr),e(T5,aK),e(aK,nRr),e(T5,sRr),e(re,lRr),e(re,M5),e(M5,MMe),e(MMe,iRr),e(M5,dRr),e(M5,nK),e(nK,cRr),e(M5,fRr),e(jr,mRr),M(E5,jr,null),b(f,EGe,u),b(f,Pc,u),e(Pc,C5),e(C5,EMe),M(ex,EMe,null),e(Pc,gRr),e(Pc,CMe),e(CMe,hRr),b(f,CGe,u),b(f,mr,u),M(ox,mr,null),e(mr,pRr),e(mr,Bc),e(Bc,_Rr),e(Bc,sK),e(sK,uRr),e(Bc,bRr),e(Bc,lK),e(lK,vRr),e(Bc,FRr),e(mr,TRr),e(mr,rx),e(rx,MRr),e(rx,wMe),e(wMe,ERr),e(rx,CRr),e(mr,wRr),e(mr,Ot),M(tx,Ot,null),e(Ot,ARr),e(Ot,AMe),e(AMe,LRr),e(Ot,yRr),e(Ot,Ic),e(Ic,xRr),e(Ic,LMe),e(LMe,$Rr),e(Ic,kRr),e(Ic,iK),e(iK,SRr),e(Ic,RRr),e(Ot,PRr),M(w5,Ot,null),e(mr,BRr),e(mr,Dr),M(ax,Dr,null),e(Dr,IRr),e(Dr,yMe),e(yMe,NRr),e(Dr,qRr),e(Dr,pn),e(pn,jRr),e(pn,xMe),e(xMe,DRr),e(pn,GRr),e(pn,$Me),e($Me,ORr),e(pn,VRr),e(pn,kMe),e(kMe,XRr),e(pn,zRr),e(Dr,WRr),e(Dr,xe),e(xe,A5),e(A5,SMe),e(SMe,QRr),e(A5,HRr),e(A5,dK),e(dK,URr),e(A5,JRr),e(xe,YRr),e(xe,L5),e(L5,RMe),e(RMe,KRr),e(L5,ZRr),e(L5,cK),e(cK,ePr),e(L5,oPr),e(xe,rPr),e(xe,y5),e(y5,PMe),e(PMe,tPr),e(y5,aPr),e(y5,fK),e(fK,nPr),e(y5,sPr),e(xe,lPr),e(xe,x5),e(x5,BMe),e(BMe,iPr),e(x5,dPr),e(x5,mK),e(mK,cPr),e(x5,fPr),e(xe,mPr),e(xe,$5),e($5,IMe),e(IMe,gPr),e($5,hPr),e($5,gK),e(gK,pPr),e($5,_Pr),e(xe,uPr),e(xe,k5),e(k5,NMe),e(NMe,bPr),e(k5,vPr),e(k5,hK),e(hK,FPr),e(k5,TPr),e(xe,MPr),e(xe,S5),e(S5,qMe),e(qMe,EPr),e(S5,CPr),e(S5,pK),e(pK,wPr),e(S5,APr),e(xe,LPr),e(xe,R5),e(R5,jMe),e(jMe,yPr),e(R5,xPr),e(R5,_K),e(_K,$Pr),e(R5,kPr),e(xe,SPr),e(xe,P5),e(P5,DMe),e(DMe,RPr),e(P5,PPr),e(P5,uK),e(uK,BPr),e(P5,IPr),e(xe,NPr),e(xe,B5),e(B5,GMe),e(GMe,qPr),e(B5,jPr),e(B5,bK),e(bK,DPr),e(B5,GPr),e(Dr,OPr),M(I5,Dr,null),b(f,wGe,u),b(f,Nc,u),e(Nc,N5),e(N5,OMe),M(nx,OMe,null),e(Nc,VPr),e(Nc,VMe),e(VMe,XPr),b(f,AGe,u),b(f,gr,u),M(sx,gr,null),e(gr,zPr),e(gr,qc),e(qc,WPr),e(qc,vK),e(vK,QPr),e(qc,HPr),e(qc,FK),e(FK,UPr),e(qc,JPr),e(gr,YPr),e(gr,lx),e(lx,KPr),e(lx,XMe),e(XMe,ZPr),e(lx,eBr),e(gr,oBr),e(gr,Vt),M(ix,Vt,null),e(Vt,rBr),e(Vt,zMe),e(zMe,tBr),e(Vt,aBr),e(Vt,jc),e(jc,nBr),e(jc,WMe),e(WMe,sBr),e(jc,lBr),e(jc,TK),e(TK,iBr),e(jc,dBr),e(Vt,cBr),M(q5,Vt,null),e(gr,fBr),e(gr,Gr),M(dx,Gr,null),e(Gr,mBr),e(Gr,QMe),e(QMe,gBr),e(Gr,hBr),e(Gr,_n),e(_n,pBr),e(_n,HMe),e(HMe,_Br),e(_n,uBr),e(_n,UMe),e(UMe,bBr),e(_n,vBr),e(_n,JMe),e(JMe,FBr),e(_n,TBr),e(Gr,MBr),e(Gr,Ee),e(Ee,j5),e(j5,YMe),e(YMe,EBr),e(j5,CBr),e(j5,MK),e(MK,wBr),e(j5,ABr),e(Ee,LBr),e(Ee,D5),e(D5,KMe),e(KMe,yBr),e(D5,xBr),e(D5,EK),e(EK,$Br),e(D5,kBr),e(Ee,SBr),e(Ee,G5),e(G5,ZMe),e(ZMe,RBr),e(G5,PBr),e(G5,CK),e(CK,BBr),e(G5,IBr),e(Ee,NBr),e(Ee,O5),e(O5,eEe),e(eEe,qBr),e(O5,jBr),e(O5,wK),e(wK,DBr),e(O5,GBr),e(Ee,OBr),e(Ee,V5),e(V5,oEe),e(oEe,VBr),e(V5,XBr),e(V5,AK),e(AK,zBr),e(V5,WBr),e(Ee,QBr),e(Ee,X5),e(X5,rEe),e(rEe,HBr),e(X5,UBr),e(X5,LK),e(LK,JBr),e(X5,YBr),e(Ee,KBr),e(Ee,z5),e(z5,tEe),e(tEe,ZBr),e(z5,eIr),e(z5,yK),e(yK,oIr),e(z5,rIr),e(Ee,tIr),e(Ee,W5),e(W5,aEe),e(aEe,aIr),e(W5,nIr),e(W5,xK),e(xK,sIr),e(W5,lIr),e(Ee,iIr),e(Ee,Q5),e(Q5,nEe),e(nEe,dIr),e(Q5,cIr),e(Q5,$K),e($K,fIr),e(Q5,mIr),e(Ee,gIr),e(Ee,H5),e(H5,sEe),e(sEe,hIr),e(H5,pIr),e(H5,kK),e(kK,_Ir),e(H5,uIr),e(Ee,bIr),e(Ee,U5),e(U5,lEe),e(lEe,vIr),e(U5,FIr),e(U5,SK),e(SK,TIr),e(U5,MIr),e(Ee,EIr),e(Ee,J5),e(J5,iEe),e(iEe,CIr),e(J5,wIr),e(J5,RK),e(RK,AIr),e(J5,LIr),e(Gr,yIr),M(Y5,Gr,null),b(f,LGe,u),b(f,Dc,u),e(Dc,K5),e(K5,dEe),M(cx,dEe,null),e(Dc,xIr),e(Dc,cEe),e(cEe,$Ir),b(f,yGe,u),b(f,hr,u),M(fx,hr,null),e(hr,kIr),e(hr,Gc),e(Gc,SIr),e(Gc,PK),e(PK,RIr),e(Gc,PIr),e(Gc,BK),e(BK,BIr),e(Gc,IIr),e(hr,NIr),e(hr,mx),e(mx,qIr),e(mx,fEe),e(fEe,jIr),e(mx,DIr),e(hr,GIr),e(hr,Xt),M(gx,Xt,null),e(Xt,OIr),e(Xt,mEe),e(mEe,VIr),e(Xt,XIr),e(Xt,Oc),e(Oc,zIr),e(Oc,gEe),e(gEe,WIr),e(Oc,QIr),e(Oc,IK),e(IK,HIr),e(Oc,UIr),e(Xt,JIr),M(Z5,Xt,null),e(hr,YIr),e(hr,Or),M(hx,Or,null),e(Or,KIr),e(Or,hEe),e(hEe,ZIr),e(Or,eNr),e(Or,un),e(un,oNr),e(un,pEe),e(pEe,rNr),e(un,tNr),e(un,_Ee),e(_Ee,aNr),e(un,nNr),e(un,uEe),e(uEe,sNr),e(un,lNr),e(Or,iNr),e(Or,$e),e($e,e3),e(e3,bEe),e(bEe,dNr),e(e3,cNr),e(e3,NK),e(NK,fNr),e(e3,mNr),e($e,gNr),e($e,o3),e(o3,vEe),e(vEe,hNr),e(o3,pNr),e(o3,qK),e(qK,_Nr),e(o3,uNr),e($e,bNr),e($e,r3),e(r3,FEe),e(FEe,vNr),e(r3,FNr),e(r3,jK),e(jK,TNr),e(r3,MNr),e($e,ENr),e($e,t3),e(t3,TEe),e(TEe,CNr),e(t3,wNr),e(t3,DK),e(DK,ANr),e(t3,LNr),e($e,yNr),e($e,a3),e(a3,MEe),e(MEe,xNr),e(a3,$Nr),e(a3,GK),e(GK,kNr),e(a3,SNr),e($e,RNr),e($e,n3),e(n3,EEe),e(EEe,PNr),e(n3,BNr),e(n3,OK),e(OK,INr),e(n3,NNr),e($e,qNr),e($e,s3),e(s3,CEe),e(CEe,jNr),e(s3,DNr),e(s3,VK),e(VK,GNr),e(s3,ONr),e($e,VNr),e($e,l3),e(l3,wEe),e(wEe,XNr),e(l3,zNr),e(l3,XK),e(XK,WNr),e(l3,QNr),e($e,HNr),e($e,i3),e(i3,AEe),e(AEe,UNr),e(i3,JNr),e(i3,zK),e(zK,YNr),e(i3,KNr),e($e,ZNr),e($e,d3),e(d3,LEe),e(LEe,eqr),e(d3,oqr),e(d3,WK),e(WK,rqr),e(d3,tqr),e(Or,aqr),M(c3,Or,null),b(f,xGe,u),b(f,Vc,u),e(Vc,f3),e(f3,yEe),M(px,yEe,null),e(Vc,nqr),e(Vc,xEe),e(xEe,sqr),b(f,$Ge,u),b(f,pr,u),M(_x,pr,null),e(pr,lqr),e(pr,Xc),e(Xc,iqr),e(Xc,QK),e(QK,dqr),e(Xc,cqr),e(Xc,HK),e(HK,fqr),e(Xc,mqr),e(pr,gqr),e(pr,ux),e(ux,hqr),e(ux,$Ee),e($Ee,pqr),e(ux,_qr),e(pr,uqr),e(pr,zt),M(bx,zt,null),e(zt,bqr),e(zt,kEe),e(kEe,vqr),e(zt,Fqr),e(zt,zc),e(zc,Tqr),e(zc,SEe),e(SEe,Mqr),e(zc,Eqr),e(zc,UK),e(UK,Cqr),e(zc,wqr),e(zt,Aqr),M(m3,zt,null),e(pr,Lqr),e(pr,Vr),M(vx,Vr,null),e(Vr,yqr),e(Vr,REe),e(REe,xqr),e(Vr,$qr),e(Vr,bn),e(bn,kqr),e(bn,PEe),e(PEe,Sqr),e(bn,Rqr),e(bn,BEe),e(BEe,Pqr),e(bn,Bqr),e(bn,IEe),e(IEe,Iqr),e(bn,Nqr),e(Vr,qqr),e(Vr,Pe),e(Pe,g3),e(g3,NEe),e(NEe,jqr),e(g3,Dqr),e(g3,JK),e(JK,Gqr),e(g3,Oqr),e(Pe,Vqr),e(Pe,h3),e(h3,qEe),e(qEe,Xqr),e(h3,zqr),e(h3,YK),e(YK,Wqr),e(h3,Qqr),e(Pe,Hqr),e(Pe,p3),e(p3,jEe),e(jEe,Uqr),e(p3,Jqr),e(p3,KK),e(KK,Yqr),e(p3,Kqr),e(Pe,Zqr),e(Pe,_3),e(_3,DEe),e(DEe,ejr),e(_3,ojr),e(_3,ZK),e(ZK,rjr),e(_3,tjr),e(Pe,ajr),e(Pe,u3),e(u3,GEe),e(GEe,njr),e(u3,sjr),e(u3,eZ),e(eZ,ljr),e(u3,ijr),e(Pe,djr),e(Pe,b3),e(b3,OEe),e(OEe,cjr),e(b3,fjr),e(b3,oZ),e(oZ,mjr),e(b3,gjr),e(Pe,hjr),e(Pe,v3),e(v3,VEe),e(VEe,pjr),e(v3,_jr),e(v3,rZ),e(rZ,ujr),e(v3,bjr),e(Pe,vjr),e(Pe,F3),e(F3,XEe),e(XEe,Fjr),e(F3,Tjr),e(F3,tZ),e(tZ,Mjr),e(F3,Ejr),e(Pe,Cjr),e(Pe,T3),e(T3,zEe),e(zEe,wjr),e(T3,Ajr),e(T3,aZ),e(aZ,Ljr),e(T3,yjr),e(Vr,xjr),M(M3,Vr,null),b(f,kGe,u),b(f,Wc,u),e(Wc,E3),e(E3,WEe),M(Fx,WEe,null),e(Wc,$jr),e(Wc,QEe),e(QEe,kjr),b(f,SGe,u),b(f,_r,u),M(Tx,_r,null),e(_r,Sjr),e(_r,Qc),e(Qc,Rjr),e(Qc,nZ),e(nZ,Pjr),e(Qc,Bjr),e(Qc,sZ),e(sZ,Ijr),e(Qc,Njr),e(_r,qjr),e(_r,Mx),e(Mx,jjr),e(Mx,HEe),e(HEe,Djr),e(Mx,Gjr),e(_r,Ojr),e(_r,Wt),M(Ex,Wt,null),e(Wt,Vjr),e(Wt,UEe),e(UEe,Xjr),e(Wt,zjr),e(Wt,Hc),e(Hc,Wjr),e(Hc,JEe),e(JEe,Qjr),e(Hc,Hjr),e(Hc,lZ),e(lZ,Ujr),e(Hc,Jjr),e(Wt,Yjr),M(C3,Wt,null),e(_r,Kjr),e(_r,Xr),M(Cx,Xr,null),e(Xr,Zjr),e(Xr,YEe),e(YEe,eDr),e(Xr,oDr),e(Xr,vn),e(vn,rDr),e(vn,KEe),e(KEe,tDr),e(vn,aDr),e(vn,ZEe),e(ZEe,nDr),e(vn,sDr),e(vn,eCe),e(eCe,lDr),e(vn,iDr),e(Xr,dDr),e(Xr,ke),e(ke,w3),e(w3,oCe),e(oCe,cDr),e(w3,fDr),e(w3,iZ),e(iZ,mDr),e(w3,gDr),e(ke,hDr),e(ke,A3),e(A3,rCe),e(rCe,pDr),e(A3,_Dr),e(A3,dZ),e(dZ,uDr),e(A3,bDr),e(ke,vDr),e(ke,L3),e(L3,tCe),e(tCe,FDr),e(L3,TDr),e(L3,cZ),e(cZ,MDr),e(L3,EDr),e(ke,CDr),e(ke,y3),e(y3,aCe),e(aCe,wDr),e(y3,ADr),e(y3,fZ),e(fZ,LDr),e(y3,yDr),e(ke,xDr),e(ke,x3),e(x3,nCe),e(nCe,$Dr),e(x3,kDr),e(x3,mZ),e(mZ,SDr),e(x3,RDr),e(ke,PDr),e(ke,$3),e($3,sCe),e(sCe,BDr),e($3,IDr),e($3,gZ),e(gZ,NDr),e($3,qDr),e(ke,jDr),e(ke,k3),e(k3,lCe),e(lCe,DDr),e(k3,GDr),e(k3,hZ),e(hZ,ODr),e(k3,VDr),e(ke,XDr),e(ke,S3),e(S3,iCe),e(iCe,zDr),e(S3,WDr),e(S3,pZ),e(pZ,QDr),e(S3,HDr),e(ke,UDr),e(ke,R3),e(R3,dCe),e(dCe,JDr),e(R3,YDr),e(R3,_Z),e(_Z,KDr),e(R3,ZDr),e(ke,eGr),e(ke,P3),e(P3,cCe),e(cCe,oGr),e(P3,rGr),e(P3,uZ),e(uZ,tGr),e(P3,aGr),e(Xr,nGr),M(B3,Xr,null),b(f,RGe,u),b(f,Uc,u),e(Uc,I3),e(I3,fCe),M(wx,fCe,null),e(Uc,sGr),e(Uc,mCe),e(mCe,lGr),b(f,PGe,u),b(f,ur,u),M(Ax,ur,null),e(ur,iGr),e(ur,Jc),e(Jc,dGr),e(Jc,bZ),e(bZ,cGr),e(Jc,fGr),e(Jc,vZ),e(vZ,mGr),e(Jc,gGr),e(ur,hGr),e(ur,Lx),e(Lx,pGr),e(Lx,gCe),e(gCe,_Gr),e(Lx,uGr),e(ur,bGr),e(ur,Qt),M(yx,Qt,null),e(Qt,vGr),e(Qt,hCe),e(hCe,FGr),e(Qt,TGr),e(Qt,Yc),e(Yc,MGr),e(Yc,pCe),e(pCe,EGr),e(Yc,CGr),e(Yc,FZ),e(FZ,wGr),e(Yc,AGr),e(Qt,LGr),M(N3,Qt,null),e(ur,yGr),e(ur,zr),M(xx,zr,null),e(zr,xGr),e(zr,_Ce),e(_Ce,$Gr),e(zr,kGr),e(zr,Fn),e(Fn,SGr),e(Fn,uCe),e(uCe,RGr),e(Fn,PGr),e(Fn,bCe),e(bCe,BGr),e(Fn,IGr),e(Fn,vCe),e(vCe,NGr),e(Fn,qGr),e(zr,jGr),e(zr,Se),e(Se,q3),e(q3,FCe),e(FCe,DGr),e(q3,GGr),e(q3,TZ),e(TZ,OGr),e(q3,VGr),e(Se,XGr),e(Se,j3),e(j3,TCe),e(TCe,zGr),e(j3,WGr),e(j3,MZ),e(MZ,QGr),e(j3,HGr),e(Se,UGr),e(Se,D3),e(D3,MCe),e(MCe,JGr),e(D3,YGr),e(D3,EZ),e(EZ,KGr),e(D3,ZGr),e(Se,eOr),e(Se,G3),e(G3,ECe),e(ECe,oOr),e(G3,rOr),e(G3,CZ),e(CZ,tOr),e(G3,aOr),e(Se,nOr),e(Se,O3),e(O3,CCe),e(CCe,sOr),e(O3,lOr),e(O3,wZ),e(wZ,iOr),e(O3,dOr),e(Se,cOr),e(Se,V3),e(V3,wCe),e(wCe,fOr),e(V3,mOr),e(V3,AZ),e(AZ,gOr),e(V3,hOr),e(Se,pOr),e(Se,X3),e(X3,ACe),e(ACe,_Or),e(X3,uOr),e(X3,LZ),e(LZ,bOr),e(X3,vOr),e(Se,FOr),e(Se,z3),e(z3,LCe),e(LCe,TOr),e(z3,MOr),e(z3,yZ),e(yZ,EOr),e(z3,COr),e(Se,wOr),e(Se,W3),e(W3,yCe),e(yCe,AOr),e(W3,LOr),e(W3,xZ),e(xZ,yOr),e(W3,xOr),e(Se,$Or),e(Se,Q3),e(Q3,xCe),e(xCe,kOr),e(Q3,SOr),e(Q3,$Z),e($Z,ROr),e(Q3,POr),e(zr,BOr),M(H3,zr,null),b(f,BGe,u),b(f,Kc,u),e(Kc,U3),e(U3,$Ce),M($x,$Ce,null),e(Kc,IOr),e(Kc,kCe),e(kCe,NOr),b(f,IGe,u),b(f,br,u),M(kx,br,null),e(br,qOr),e(br,Zc),e(Zc,jOr),e(Zc,kZ),e(kZ,DOr),e(Zc,GOr),e(Zc,SZ),e(SZ,OOr),e(Zc,VOr),e(br,XOr),e(br,Sx),e(Sx,zOr),e(Sx,SCe),e(SCe,WOr),e(Sx,QOr),e(br,HOr),e(br,Ht),M(Rx,Ht,null),e(Ht,UOr),e(Ht,RCe),e(RCe,JOr),e(Ht,YOr),e(Ht,ef),e(ef,KOr),e(ef,PCe),e(PCe,ZOr),e(ef,eVr),e(ef,RZ),e(RZ,oVr),e(ef,rVr),e(Ht,tVr),M(J3,Ht,null),e(br,aVr),e(br,Wr),M(Px,Wr,null),e(Wr,nVr),e(Wr,BCe),e(BCe,sVr),e(Wr,lVr),e(Wr,Tn),e(Tn,iVr),e(Tn,ICe),e(ICe,dVr),e(Tn,cVr),e(Tn,NCe),e(NCe,fVr),e(Tn,mVr),e(Tn,qCe),e(qCe,gVr),e(Tn,hVr),e(Wr,pVr),e(Wr,Oe),e(Oe,Y3),e(Y3,jCe),e(jCe,_Vr),e(Y3,uVr),e(Y3,PZ),e(PZ,bVr),e(Y3,vVr),e(Oe,FVr),e(Oe,K3),e(K3,DCe),e(DCe,TVr),e(K3,MVr),e(K3,BZ),e(BZ,EVr),e(K3,CVr),e(Oe,wVr),e(Oe,Z3),e(Z3,GCe),e(GCe,AVr),e(Z3,LVr),e(Z3,IZ),e(IZ,yVr),e(Z3,xVr),e(Oe,$Vr),e(Oe,e0),e(e0,OCe),e(OCe,kVr),e(e0,SVr),e(e0,NZ),e(NZ,RVr),e(e0,PVr),e(Oe,BVr),e(Oe,o0),e(o0,VCe),e(VCe,IVr),e(o0,NVr),e(o0,qZ),e(qZ,qVr),e(o0,jVr),e(Oe,DVr),e(Oe,r0),e(r0,XCe),e(XCe,GVr),e(r0,OVr),e(r0,jZ),e(jZ,VVr),e(r0,XVr),e(Oe,zVr),e(Oe,t0),e(t0,zCe),e(zCe,WVr),e(t0,QVr),e(t0,DZ),e(DZ,HVr),e(t0,UVr),e(Oe,JVr),e(Oe,a0),e(a0,WCe),e(WCe,YVr),e(a0,KVr),e(a0,GZ),e(GZ,ZVr),e(a0,eXr),e(Wr,oXr),M(n0,Wr,null),b(f,NGe,u),b(f,of,u),e(of,s0),e(s0,QCe),M(Bx,QCe,null),e(of,rXr),e(of,HCe),e(HCe,tXr),b(f,qGe,u),b(f,vr,u),M(Ix,vr,null),e(vr,aXr),e(vr,rf),e(rf,nXr),e(rf,OZ),e(OZ,sXr),e(rf,lXr),e(rf,VZ),e(VZ,iXr),e(rf,dXr),e(vr,cXr),e(vr,Nx),e(Nx,fXr),e(Nx,UCe),e(UCe,mXr),e(Nx,gXr),e(vr,hXr),e(vr,Ut),M(qx,Ut,null),e(Ut,pXr),e(Ut,JCe),e(JCe,_Xr),e(Ut,uXr),e(Ut,tf),e(tf,bXr),e(tf,YCe),e(YCe,vXr),e(tf,FXr),e(tf,XZ),e(XZ,TXr),e(tf,MXr),e(Ut,EXr),M(l0,Ut,null),e(vr,CXr),e(vr,Qr),M(jx,Qr,null),e(Qr,wXr),e(Qr,KCe),e(KCe,AXr),e(Qr,LXr),e(Qr,Mn),e(Mn,yXr),e(Mn,ZCe),e(ZCe,xXr),e(Mn,$Xr),e(Mn,e5e),e(e5e,kXr),e(Mn,SXr),e(Mn,o5e),e(o5e,RXr),e(Mn,PXr),e(Qr,BXr),e(Qr,Ve),e(Ve,i0),e(i0,r5e),e(r5e,IXr),e(i0,NXr),e(i0,zZ),e(zZ,qXr),e(i0,jXr),e(Ve,DXr),e(Ve,d0),e(d0,t5e),e(t5e,GXr),e(d0,OXr),e(d0,WZ),e(WZ,VXr),e(d0,XXr),e(Ve,zXr),e(Ve,c0),e(c0,a5e),e(a5e,WXr),e(c0,QXr),e(c0,QZ),e(QZ,HXr),e(c0,UXr),e(Ve,JXr),e(Ve,f0),e(f0,n5e),e(n5e,YXr),e(f0,KXr),e(f0,HZ),e(HZ,ZXr),e(f0,ezr),e(Ve,ozr),e(Ve,m0),e(m0,s5e),e(s5e,rzr),e(m0,tzr),e(m0,UZ),e(UZ,azr),e(m0,nzr),e(Ve,szr),e(Ve,g0),e(g0,l5e),e(l5e,lzr),e(g0,izr),e(g0,JZ),e(JZ,dzr),e(g0,czr),e(Ve,fzr),e(Ve,h0),e(h0,i5e),e(i5e,mzr),e(h0,gzr),e(h0,YZ),e(YZ,hzr),e(h0,pzr),e(Ve,_zr),e(Ve,p0),e(p0,d5e),e(d5e,uzr),e(p0,bzr),e(p0,KZ),e(KZ,vzr),e(p0,Fzr),e(Qr,Tzr),M(_0,Qr,null),b(f,jGe,u),b(f,af,u),e(af,u0),e(u0,c5e),M(Dx,c5e,null),e(af,Mzr),e(af,f5e),e(f5e,Ezr),b(f,DGe,u),b(f,Fr,u),M(Gx,Fr,null),e(Fr,Czr),e(Fr,nf),e(nf,wzr),e(nf,ZZ),e(ZZ,Azr),e(nf,Lzr),e(nf,eee),e(eee,yzr),e(nf,xzr),e(Fr,$zr),e(Fr,Ox),e(Ox,kzr),e(Ox,m5e),e(m5e,Szr),e(Ox,Rzr),e(Fr,Pzr),e(Fr,Jt),M(Vx,Jt,null),e(Jt,Bzr),e(Jt,g5e),e(g5e,Izr),e(Jt,Nzr),e(Jt,sf),e(sf,qzr),e(sf,h5e),e(h5e,jzr),e(sf,Dzr),e(sf,oee),e(oee,Gzr),e(sf,Ozr),e(Jt,Vzr),M(b0,Jt,null),e(Fr,Xzr),e(Fr,Hr),M(Xx,Hr,null),e(Hr,zzr),e(Hr,p5e),e(p5e,Wzr),e(Hr,Qzr),e(Hr,En),e(En,Hzr),e(En,_5e),e(_5e,Uzr),e(En,Jzr),e(En,u5e),e(u5e,Yzr),e(En,Kzr),e(En,b5e),e(b5e,Zzr),e(En,eWr),e(Hr,oWr),e(Hr,v5e),e(v5e,v0),e(v0,F5e),e(F5e,rWr),e(v0,tWr),e(v0,ree),e(ree,aWr),e(v0,nWr),e(Hr,sWr),M(F0,Hr,null),b(f,GGe,u),b(f,lf,u),e(lf,T0),e(T0,T5e),M(zx,T5e,null),e(lf,lWr),e(lf,M5e),e(M5e,iWr),b(f,OGe,u),b(f,Tr,u),M(Wx,Tr,null),e(Tr,dWr),e(Tr,df),e(df,cWr),e(df,tee),e(tee,fWr),e(df,mWr),e(df,aee),e(aee,gWr),e(df,hWr),e(Tr,pWr),e(Tr,Qx),e(Qx,_Wr),e(Qx,E5e),e(E5e,uWr),e(Qx,bWr),e(Tr,vWr),e(Tr,Yt),M(Hx,Yt,null),e(Yt,FWr),e(Yt,C5e),e(C5e,TWr),e(Yt,MWr),e(Yt,cf),e(cf,EWr),e(cf,w5e),e(w5e,CWr),e(cf,wWr),e(cf,nee),e(nee,AWr),e(cf,LWr),e(Yt,yWr),M(M0,Yt,null),e(Tr,xWr),e(Tr,Ur),M(Ux,Ur,null),e(Ur,$Wr),e(Ur,A5e),e(A5e,kWr),e(Ur,SWr),e(Ur,Cn),e(Cn,RWr),e(Cn,L5e),e(L5e,PWr),e(Cn,BWr),e(Cn,y5e),e(y5e,IWr),e(Cn,NWr),e(Cn,x5e),e(x5e,qWr),e(Cn,jWr),e(Ur,DWr),e(Ur,Jx),e(Jx,E0),e(E0,$5e),e($5e,GWr),e(E0,OWr),e(E0,see),e(see,VWr),e(E0,XWr),e(Jx,zWr),e(Jx,C0),e(C0,k5e),e(k5e,WWr),e(C0,QWr),e(C0,lee),e(lee,HWr),e(C0,UWr),e(Ur,JWr),M(w0,Ur,null),b(f,VGe,u),b(f,ff,u),e(ff,A0),e(A0,S5e),M(Yx,S5e,null),e(ff,YWr),e(ff,R5e),e(R5e,KWr),b(f,XGe,u),b(f,Mr,u),M(Kx,Mr,null),e(Mr,ZWr),e(Mr,mf),e(mf,eQr),e(mf,iee),e(iee,oQr),e(mf,rQr),e(mf,dee),e(dee,tQr),e(mf,aQr),e(Mr,nQr),e(Mr,Zx),e(Zx,sQr),e(Zx,P5e),e(P5e,lQr),e(Zx,iQr),e(Mr,dQr),e(Mr,Kt),M(e$,Kt,null),e(Kt,cQr),e(Kt,B5e),e(B5e,fQr),e(Kt,mQr),e(Kt,gf),e(gf,gQr),e(gf,I5e),e(I5e,hQr),e(gf,pQr),e(gf,cee),e(cee,_Qr),e(gf,uQr),e(Kt,bQr),M(L0,Kt,null),e(Mr,vQr),e(Mr,Jr),M(o$,Jr,null),e(Jr,FQr),e(Jr,N5e),e(N5e,TQr),e(Jr,MQr),e(Jr,wn),e(wn,EQr),e(wn,q5e),e(q5e,CQr),e(wn,wQr),e(wn,j5e),e(j5e,AQr),e(wn,LQr),e(wn,D5e),e(D5e,yQr),e(wn,xQr),e(Jr,$Qr),e(Jr,G5e),e(G5e,y0),e(y0,O5e),e(O5e,kQr),e(y0,SQr),e(y0,fee),e(fee,RQr),e(y0,PQr),e(Jr,BQr),M(x0,Jr,null),zGe=!0},p(f,[u]){const r$={};u&2&&(r$.$$scope={dirty:u,ctx:f}),Mf.$set(r$);const V5e={};u&2&&(V5e.$$scope={dirty:u,ctx:f}),xg.$set(V5e);const X5e={};u&2&&(X5e.$$scope={dirty:u,ctx:f}),fh.$set(X5e);const z5e={};u&2&&(z5e.$$scope={dirty:u,ctx:f}),Wh.$set(z5e);const t$={};u&2&&(t$.$$scope={dirty:u,ctx:f}),Qh.$set(t$);const W5e={};u&2&&(W5e.$$scope={dirty:u,ctx:f}),hp.$set(W5e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),pp.$set(An);const Q5e={};u&2&&(Q5e.$$scope={dirty:u,ctx:f}),bp.$set(Q5e);const H5e={};u&2&&(H5e.$$scope={dirty:u,ctx:f}),uu.$set(H5e);const U5e={};u&2&&(U5e.$$scope={dirty:u,ctx:f}),vu.$set(U5e);const a$={};u&2&&(a$.$$scope={dirty:u,ctx:f}),c1.$set(a$);const J5e={};u&2&&(J5e.$$scope={dirty:u,ctx:f}),m1.$set(J5e);const n$={};u&2&&(n$.$$scope={dirty:u,ctx:f}),K1.$set(n$);const Y5e={};u&2&&(Y5e.$$scope={dirty:u,ctx:f}),eb.$set(Y5e);const s$={};u&2&&(s$.$$scope={dirty:u,ctx:f}),qb.$set(s$);const K5e={};u&2&&(K5e.$$scope={dirty:u,ctx:f}),Db.$set(K5e);const Z5e={};u&2&&(Z5e.$$scope={dirty:u,ctx:f}),a2.$set(Z5e);const e3e={};u&2&&(e3e.$$scope={dirty:u,ctx:f}),s2.$set(e3e);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),o4.$set(hf);const o3e={};u&2&&(o3e.$$scope={dirty:u,ctx:f}),t4.$set(o3e);const r3e={};u&2&&(r3e.$$scope={dirty:u,ctx:f}),B4.$set(r3e);const t3e={};u&2&&(t3e.$$scope={dirty:u,ctx:f}),N4.$set(t3e);const l$={};u&2&&(l$.$$scope={dirty:u,ctx:f}),X4.$set(l$);const a3e={};u&2&&(a3e.$$scope={dirty:u,ctx:f}),W4.$set(a3e);const n3e={};u&2&&(n3e.$$scope={dirty:u,ctx:f}),yv.$set(n3e);const s3e={};u&2&&(s3e.$$scope={dirty:u,ctx:f}),$v.$set(s3e);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),bF.$set(et);const i$={};u&2&&(i$.$$scope={dirty:u,ctx:f}),FF.$set(i$);const l3e={};u&2&&(l3e.$$scope={dirty:u,ctx:f}),EF.$set(l3e);const d$={};u&2&&(d$.$$scope={dirty:u,ctx:f}),wF.$set(d$);const i3e={};u&2&&(i3e.$$scope={dirty:u,ctx:f}),jF.$set(i3e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),GF.$set(ot);const d3e={};u&2&&(d3e.$$scope={dirty:u,ctx:f}),XF.$set(d3e);const pf={};u&2&&(pf.$$scope={dirty:u,ctx:f}),WF.$set(pf);const c3e={};u&2&&(c3e.$$scope={dirty:u,ctx:f}),t6.$set(c3e);const f3e={};u&2&&(f3e.$$scope={dirty:u,ctx:f}),n6.$set(f3e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),m6.$set(L);const $0={};u&2&&($0.$$scope={dirty:u,ctx:f}),h6.$set($0);const m3e={};u&2&&(m3e.$$scope={dirty:u,ctx:f}),A6.$set(m3e);const g3e={};u&2&&(g3e.$$scope={dirty:u,ctx:f}),y6.$set(g3e);const k0={};u&2&&(k0.$$scope={dirty:u,ctx:f}),S6.$set(k0);const h3e={};u&2&&(h3e.$$scope={dirty:u,ctx:f}),P6.$set(h3e);const p3e={};u&2&&(p3e.$$scope={dirty:u,ctx:f}),G6.$set(p3e);const S0={};u&2&&(S0.$$scope={dirty:u,ctx:f}),V6.$set(S0);const _3e={};u&2&&(_3e.$$scope={dirty:u,ctx:f}),H6.$set(_3e);const u3e={};u&2&&(u3e.$$scope={dirty:u,ctx:f}),J6.$set(u3e);const R0={};u&2&&(R0.$$scope={dirty:u,ctx:f}),eT.$set(R0);const b3e={};u&2&&(b3e.$$scope={dirty:u,ctx:f}),rT.$set(b3e);const v3e={};u&2&&(v3e.$$scope={dirty:u,ctx:f}),nT.$set(v3e);const P0={};u&2&&(P0.$$scope={dirty:u,ctx:f}),lT.$set(P0);const F3e={};u&2&&(F3e.$$scope={dirty:u,ctx:f}),gT.$set(F3e);const T3e={};u&2&&(T3e.$$scope={dirty:u,ctx:f}),pT.$set(T3e);const B0={};u&2&&(B0.$$scope={dirty:u,ctx:f}),bT.$set(B0);const M3e={};u&2&&(M3e.$$scope={dirty:u,ctx:f}),FT.$set(M3e);const E3e={};u&2&&(E3e.$$scope={dirty:u,ctx:f}),g7.$set(E3e);const I0={};u&2&&(I0.$$scope={dirty:u,ctx:f}),p7.$set(I0);const C3e={};u&2&&(C3e.$$scope={dirty:u,ctx:f}),j7.$set(C3e);const w3e={};u&2&&(w3e.$$scope={dirty:u,ctx:f}),G7.$set(w3e);const N0={};u&2&&(N0.$$scope={dirty:u,ctx:f}),oM.$set(N0);const A3e={};u&2&&(A3e.$$scope={dirty:u,ctx:f}),tM.$set(A3e);const L3e={};u&2&&(L3e.$$scope={dirty:u,ctx:f}),iM.$set(L3e);const q0={};u&2&&(q0.$$scope={dirty:u,ctx:f}),cM.$set(q0);const y3e={};u&2&&(y3e.$$scope={dirty:u,ctx:f}),kM.$set(y3e);const x3e={};u&2&&(x3e.$$scope={dirty:u,ctx:f}),RM.$set(x3e);const j0={};u&2&&(j0.$$scope={dirty:u,ctx:f}),XM.$set(j0);const $3e={};u&2&&($3e.$$scope={dirty:u,ctx:f}),WM.$set($3e);const k3e={};u&2&&(k3e.$$scope={dirty:u,ctx:f}),vE.$set(k3e);const D0={};u&2&&(D0.$$scope={dirty:u,ctx:f}),TE.$set(D0);const S3e={};u&2&&(S3e.$$scope={dirty:u,ctx:f}),jE.$set(S3e);const R3e={};u&2&&(R3e.$$scope={dirty:u,ctx:f}),GE.$set(R3e);const G0={};u&2&&(G0.$$scope={dirty:u,ctx:f}),XE.$set(G0);const P3e={};u&2&&(P3e.$$scope={dirty:u,ctx:f}),WE.$set(P3e);const B3e={};u&2&&(B3e.$$scope={dirty:u,ctx:f}),HE.$set(B3e);const O0={};u&2&&(O0.$$scope={dirty:u,ctx:f}),JE.$set(O0);const I3e={};u&2&&(I3e.$$scope={dirty:u,ctx:f}),uC.$set(I3e);const N3e={};u&2&&(N3e.$$scope={dirty:u,ctx:f}),vC.$set(N3e);const V0={};u&2&&(V0.$$scope={dirty:u,ctx:f}),DC.$set(V0);const q3e={};u&2&&(q3e.$$scope={dirty:u,ctx:f}),OC.$set(q3e);const j3e={};u&2&&(j3e.$$scope={dirty:u,ctx:f}),XC.$set(j3e);const X0={};u&2&&(X0.$$scope={dirty:u,ctx:f}),WC.$set(X0);const D3e={};u&2&&(D3e.$$scope={dirty:u,ctx:f}),HC.$set(D3e);const G3e={};u&2&&(G3e.$$scope={dirty:u,ctx:f}),JC.$set(G3e);const z0={};u&2&&(z0.$$scope={dirty:u,ctx:f}),E5.$set(z0);const O3e={};u&2&&(O3e.$$scope={dirty:u,ctx:f}),w5.$set(O3e);const V3e={};u&2&&(V3e.$$scope={dirty:u,ctx:f}),I5.$set(V3e);const W0={};u&2&&(W0.$$scope={dirty:u,ctx:f}),q5.$set(W0);const X3e={};u&2&&(X3e.$$scope={dirty:u,ctx:f}),Y5.$set(X3e);const z3e={};u&2&&(z3e.$$scope={dirty:u,ctx:f}),Z5.$set(z3e);const Q0={};u&2&&(Q0.$$scope={dirty:u,ctx:f}),c3.$set(Q0);const W3e={};u&2&&(W3e.$$scope={dirty:u,ctx:f}),m3.$set(W3e);const Q3e={};u&2&&(Q3e.$$scope={dirty:u,ctx:f}),M3.$set(Q3e);const H0={};u&2&&(H0.$$scope={dirty:u,ctx:f}),C3.$set(H0);const H3e={};u&2&&(H3e.$$scope={dirty:u,ctx:f}),B3.$set(H3e);const U3e={};u&2&&(U3e.$$scope={dirty:u,ctx:f}),N3.$set(U3e);const U0={};u&2&&(U0.$$scope={dirty:u,ctx:f}),H3.$set(U0);const J3e={};u&2&&(J3e.$$scope={dirty:u,ctx:f}),J3.$set(J3e);const Y3e={};u&2&&(Y3e.$$scope={dirty:u,ctx:f}),n0.$set(Y3e);const J0={};u&2&&(J0.$$scope={dirty:u,ctx:f}),l0.$set(J0);const K3e={};u&2&&(K3e.$$scope={dirty:u,ctx:f}),_0.$set(K3e);const Z3e={};u&2&&(Z3e.$$scope={dirty:u,ctx:f}),b0.$set(Z3e);const Y0={};u&2&&(Y0.$$scope={dirty:u,ctx:f}),F0.$set(Y0);const e0e={};u&2&&(e0e.$$scope={dirty:u,ctx:f}),M0.$set(e0e);const o0e={};u&2&&(o0e.$$scope={dirty:u,ctx:f}),w0.$set(o0e);const K0={};u&2&&(K0.$$scope={dirty:u,ctx:f}),L0.$set(K0);const r0e={};u&2&&(r0e.$$scope={dirty:u,ctx:f}),x0.$set(r0e)},i(f){zGe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(Mf.$$.fragment,f),E(ZA.$$.fragment,f),E(eL.$$.fragment,f),E(tL.$$.fragment,f),E(xg.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(dL.$$.fragment,f),E(fh.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(pL.$$.fragment,f),E(Wh.$$.fragment,f),E(Qh.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(TL.$$.fragment,f),E(hp.$$.fragment,f),E(pp.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(bp.$$.fragment,f),E(LL.$$.fragment,f),E(uu.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(vu.$$.fragment,f),E(SL.$$.fragment,f),E(c1.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(m1.$$.fragment,f),E(NL.$$.fragment,f),E(K1.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(eb.$$.fragment,f),E(OL.$$.fragment,f),E(qb.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(WL.$$.fragment,f),E(Db.$$.fragment,f),E(QL.$$.fragment,f),E(a2.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(s2.$$.fragment,f),E(KL.$$.fragment,f),E(o4.$$.fragment,f),E(ZL.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(t4.$$.fragment,f),E(ty.$$.fragment,f),E(B4.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(N4.$$.fragment,f),E(iy.$$.fragment,f),E(X4.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(W4.$$.fragment,f),E(gy.$$.fragment,f),E(yv.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E($v.$$.fragment,f),E(by.$$.fragment,f),E(bF.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(FF.$$.fragment,f),E(Ey.$$.fragment,f),E(EF.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(Ly.$$.fragment,f),E(wF.$$.fragment,f),E(yy.$$.fragment,f),E(jF.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(GF.$$.fragment,f),E(Ry.$$.fragment,f),E(XF.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(WF.$$.fragment,f),E(qy.$$.fragment,f),E(t6.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(n6.$$.fragment,f),E(Vy.$$.fragment,f),E(m6.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(h6.$$.fragment,f),E(Hy.$$.fragment,f),E(A6.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(y6.$$.fragment,f),E(Zy.$$.fragment,f),E(S6.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(P6.$$.fragment,f),E(n8.$$.fragment,f),E(G6.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(V6.$$.fragment,f),E(c8.$$.fragment,f),E(H6.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(J6.$$.fragment,f),E(p8.$$.fragment,f),E(eT.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(rT.$$.fragment,f),E(T8.$$.fragment,f),E(nT.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(lT.$$.fragment,f),E(A8.$$.fragment,f),E(gT.$$.fragment,f),E(L8.$$.fragment,f),E(y8.$$.fragment,f),E($8.$$.fragment,f),E(pT.$$.fragment,f),E(k8.$$.fragment,f),E(bT.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(FT.$$.fragment,f),E(I8.$$.fragment,f),E(g7.$$.fragment,f),E(N8.$$.fragment,f),E(q8.$$.fragment,f),E(D8.$$.fragment,f),E(p7.$$.fragment,f),E(G8.$$.fragment,f),E(j7.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(G7.$$.fragment,f),E(W8.$$.fragment,f),E(oM.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(tM.$$.fragment,f),E(Y8.$$.fragment,f),E(iM.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(o9.$$.fragment,f),E(cM.$$.fragment,f),E(r9.$$.fragment,f),E(kM.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(RM.$$.fragment,f),E(l9.$$.fragment,f),E(XM.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(WM.$$.fragment,f),E(m9.$$.fragment,f),E(vE.$$.fragment,f),E(g9.$$.fragment,f),E(h9.$$.fragment,f),E(_9.$$.fragment,f),E(TE.$$.fragment,f),E(u9.$$.fragment,f),E(jE.$$.fragment,f),E(b9.$$.fragment,f),E(v9.$$.fragment,f),E(T9.$$.fragment,f),E(GE.$$.fragment,f),E(M9.$$.fragment,f),E(XE.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(WE.$$.fragment,f),E(y9.$$.fragment,f),E(HE.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(JE.$$.fragment,f),E(R9.$$.fragment,f),E(uC.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(vC.$$.fragment,f),E(q9.$$.fragment,f),E(DC.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(OC.$$.fragment,f),E(V9.$$.fragment,f),E(XC.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(WC.$$.fragment,f),E(H9.$$.fragment,f),E(HC.$$.fragment,f),E(U9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(JC.$$.fragment,f),E(Z9.$$.fragment,f),E(E5.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(w5.$$.fragment,f),E(ax.$$.fragment,f),E(I5.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(q5.$$.fragment,f),E(dx.$$.fragment,f),E(Y5.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(Z5.$$.fragment,f),E(hx.$$.fragment,f),E(c3.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(m3.$$.fragment,f),E(vx.$$.fragment,f),E(M3.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(C3.$$.fragment,f),E(Cx.$$.fragment,f),E(B3.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(N3.$$.fragment,f),E(xx.$$.fragment,f),E(H3.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(J3.$$.fragment,f),E(Px.$$.fragment,f),E(n0.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(l0.$$.fragment,f),E(jx.$$.fragment,f),E(_0.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(b0.$$.fragment,f),E(Xx.$$.fragment,f),E(F0.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(M0.$$.fragment,f),E(Ux.$$.fragment,f),E(w0.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e$.$$.fragment,f),E(L0.$$.fragment,f),E(o$.$$.fragment,f),E(x0.$$.fragment,f),zGe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(Mf.$$.fragment,f),C(ZA.$$.fragment,f),C(eL.$$.fragment,f),C(tL.$$.fragment,f),C(xg.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(dL.$$.fragment,f),C(fh.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(pL.$$.fragment,f),C(Wh.$$.fragment,f),C(Qh.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(TL.$$.fragment,f),C(hp.$$.fragment,f),C(pp.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(bp.$$.fragment,f),C(LL.$$.fragment,f),C(uu.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(vu.$$.fragment,f),C(SL.$$.fragment,f),C(c1.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(m1.$$.fragment,f),C(NL.$$.fragment,f),C(K1.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(eb.$$.fragment,f),C(OL.$$.fragment,f),C(qb.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(WL.$$.fragment,f),C(Db.$$.fragment,f),C(QL.$$.fragment,f),C(a2.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(s2.$$.fragment,f),C(KL.$$.fragment,f),C(o4.$$.fragment,f),C(ZL.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(t4.$$.fragment,f),C(ty.$$.fragment,f),C(B4.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(N4.$$.fragment,f),C(iy.$$.fragment,f),C(X4.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(W4.$$.fragment,f),C(gy.$$.fragment,f),C(yv.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C($v.$$.fragment,f),C(by.$$.fragment,f),C(bF.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(FF.$$.fragment,f),C(Ey.$$.fragment,f),C(EF.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(Ly.$$.fragment,f),C(wF.$$.fragment,f),C(yy.$$.fragment,f),C(jF.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(GF.$$.fragment,f),C(Ry.$$.fragment,f),C(XF.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(WF.$$.fragment,f),C(qy.$$.fragment,f),C(t6.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(n6.$$.fragment,f),C(Vy.$$.fragment,f),C(m6.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(h6.$$.fragment,f),C(Hy.$$.fragment,f),C(A6.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(y6.$$.fragment,f),C(Zy.$$.fragment,f),C(S6.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(P6.$$.fragment,f),C(n8.$$.fragment,f),C(G6.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(V6.$$.fragment,f),C(c8.$$.fragment,f),C(H6.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(J6.$$.fragment,f),C(p8.$$.fragment,f),C(eT.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(rT.$$.fragment,f),C(T8.$$.fragment,f),C(nT.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(lT.$$.fragment,f),C(A8.$$.fragment,f),C(gT.$$.fragment,f),C(L8.$$.fragment,f),C(y8.$$.fragment,f),C($8.$$.fragment,f),C(pT.$$.fragment,f),C(k8.$$.fragment,f),C(bT.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(FT.$$.fragment,f),C(I8.$$.fragment,f),C(g7.$$.fragment,f),C(N8.$$.fragment,f),C(q8.$$.fragment,f),C(D8.$$.fragment,f),C(p7.$$.fragment,f),C(G8.$$.fragment,f),C(j7.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(G7.$$.fragment,f),C(W8.$$.fragment,f),C(oM.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(tM.$$.fragment,f),C(Y8.$$.fragment,f),C(iM.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(o9.$$.fragment,f),C(cM.$$.fragment,f),C(r9.$$.fragment,f),C(kM.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(RM.$$.fragment,f),C(l9.$$.fragment,f),C(XM.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(WM.$$.fragment,f),C(m9.$$.fragment,f),C(vE.$$.fragment,f),C(g9.$$.fragment,f),C(h9.$$.fragment,f),C(_9.$$.fragment,f),C(TE.$$.fragment,f),C(u9.$$.fragment,f),C(jE.$$.fragment,f),C(b9.$$.fragment,f),C(v9.$$.fragment,f),C(T9.$$.fragment,f),C(GE.$$.fragment,f),C(M9.$$.fragment,f),C(XE.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(WE.$$.fragment,f),C(y9.$$.fragment,f),C(HE.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(JE.$$.fragment,f),C(R9.$$.fragment,f),C(uC.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(vC.$$.fragment,f),C(q9.$$.fragment,f),C(DC.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(OC.$$.fragment,f),C(V9.$$.fragment,f),C(XC.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(WC.$$.fragment,f),C(H9.$$.fragment,f),C(HC.$$.fragment,f),C(U9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(JC.$$.fragment,f),C(Z9.$$.fragment,f),C(E5.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(w5.$$.fragment,f),C(ax.$$.fragment,f),C(I5.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(q5.$$.fragment,f),C(dx.$$.fragment,f),C(Y5.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(Z5.$$.fragment,f),C(hx.$$.fragment,f),C(c3.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(m3.$$.fragment,f),C(vx.$$.fragment,f),C(M3.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(C3.$$.fragment,f),C(Cx.$$.fragment,f),C(B3.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(N3.$$.fragment,f),C(xx.$$.fragment,f),C(H3.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(J3.$$.fragment,f),C(Px.$$.fragment,f),C(n0.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(l0.$$.fragment,f),C(jx.$$.fragment,f),C(_0.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(b0.$$.fragment,f),C(Xx.$$.fragment,f),C(F0.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(M0.$$.fragment,f),C(Ux.$$.fragment,f),C(w0.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e$.$$.fragment,f),C(L0.$$.fragment,f),C(o$.$$.fragment,f),C(x0.$$.fragment,f),zGe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(uf),f&&t(rt),f&&t(Ge),f&&t(We),f&&t(vf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(Oje),f&&t(Fi),w(YA),f&&t(Vje),f&&t(kn),f&&t(Xje),w(KA,f),f&&t(zje),f&&t(Mk),f&&t(Wje),w(Mf,f),f&&t(Qje),f&&t(Ti),w(ZA),f&&t(Hje),f&&t(Co),w(eL),w(tL),w(xg),w(aL),f&&t(Uje),f&&t(Ei),w(nL),f&&t(Jje),f&&t(wo),w(sL),w(dL),w(fh),w(cL),f&&t(Yje),f&&t(Ci),w(fL),f&&t(Kje),f&&t(Ao),w(mL),w(pL),w(Wh),w(Qh),w(_L),f&&t(Zje),f&&t(wi),w(uL),f&&t(eDe),f&&t(Lo),w(bL),w(TL),w(hp),w(pp),w(ML),f&&t(oDe),f&&t(Li),w(EL),f&&t(rDe),f&&t(yo),w(CL),w(AL),w(bp),w(LL),w(uu),f&&t(tDe),f&&t($i),w(yL),f&&t(aDe),f&&t(xo),w(xL),w(kL),w(vu),w(SL),w(c1),f&&t(nDe),f&&t(Ri),w(RL),f&&t(sDe),f&&t($o),w(PL),w(IL),w(m1),w(NL),w(K1),f&&t(lDe),f&&t(Ii),w(qL),f&&t(iDe),f&&t(ko),w(jL),w(GL),w(eb),w(OL),w(qb),f&&t(dDe),f&&t(ji),w(VL),f&&t(cDe),f&&t(So),w(XL),w(WL),w(Db),w(QL),w(a2),f&&t(fDe),f&&t(Oi),w(HL),f&&t(mDe),f&&t(Ro),w(UL),w(YL),w(s2),w(KL),w(o4),f&&t(gDe),f&&t(zi),w(ZL),f&&t(hDe),f&&t(Po),w(ey),w(ry),w(t4),w(ty),w(B4),f&&t(pDe),f&&t(Hi),w(ay),f&&t(_De),f&&t(Bo),w(ny),w(ly),w(N4),w(iy),w(X4),f&&t(uDe),f&&t(Yi),w(dy),f&&t(bDe),f&&t(Io),w(cy),w(my),w(W4),w(gy),w(yv),f&&t(vDe),f&&t(ed),w(hy),f&&t(FDe),f&&t(No),w(py),w(uy),w($v),w(by),w(bF),f&&t(TDe),f&&t(td),w(vy),f&&t(MDe),f&&t(qo),w(Fy),w(My),w(FF),w(Ey),w(EF),f&&t(EDe),f&&t(sd),w(Cy),f&&t(CDe),f&&t(jo),w(wy),w(Ly),w(wF),w(yy),w(jF),f&&t(wDe),f&&t(dd),w(xy),f&&t(ADe),f&&t(Do),w($y),w(Sy),w(GF),w(Ry),w(XF),f&&t(LDe),f&&t(md),w(Py),f&&t(yDe),f&&t(Go),w(By),w(Ny),w(WF),w(qy),w(t6),f&&t(xDe),f&&t(pd),w(jy),f&&t($De),f&&t(Oo),w(Dy),w(Oy),w(n6),w(Vy),w(m6),f&&t(kDe),f&&t(bd),w(Xy),f&&t(SDe),f&&t(Vo),w(zy),w(Qy),w(h6),w(Hy),w(A6),f&&t(RDe),f&&t(Td),w(Uy),f&&t(PDe),f&&t(Xo),w(Jy),w(Ky),w(y6),w(Zy),w(S6),f&&t(BDe),f&&t(Cd),w(o8),f&&t(IDe),f&&t(zo),w(r8),w(a8),w(P6),w(n8),w(G6),f&&t(NDe),f&&t(Ld),w(s8),f&&t(qDe),f&&t(Wo),w(l8),w(d8),w(V6),w(c8),w(H6),f&&t(jDe),f&&t(kd),w(f8),f&&t(DDe),f&&t(Qo),w(m8),w(h8),w(J6),w(p8),w(eT),f&&t(GDe),f&&t(Pd),w(u8),f&&t(ODe),f&&t(Ho),w(b8),w(F8),w(rT),w(T8),w(nT),f&&t(VDe),f&&t(Nd),w(M8),f&&t(XDe),f&&t(Uo),w(E8),w(w8),w(lT),w(A8),w(gT),f&&t(zDe),f&&t(Dd),w(L8),f&&t(WDe),f&&t(Jo),w(y8),w($8),w(pT),w(k8),w(bT),f&&t(QDe),f&&t(Vd),w(S8),f&&t(HDe),f&&t(Yo),w(R8),w(B8),w(FT),w(I8),w(g7),f&&t(UDe),f&&t(Wd),w(N8),f&&t(JDe),f&&t(Ko),w(q8),w(D8),w(p7),w(G8),w(j7),f&&t(YDe),f&&t(Ud),w(O8),f&&t(KDe),f&&t(Zo),w(V8),w(z8),w(G7),w(W8),w(oM),f&&t(ZDe),f&&t(Kd),w(Q8),f&&t(eGe),f&&t(er),w(H8),w(J8),w(tM),w(Y8),w(iM),f&&t(oGe),f&&t(oc),w(K8),f&&t(rGe),f&&t(or),w(Z8),w(o9),w(cM),w(r9),w(kM),f&&t(tGe),f&&t(ac),w(t9),f&&t(aGe),f&&t(rr),w(a9),w(s9),w(RM),w(l9),w(XM),f&&t(nGe),f&&t(lc),w(i9),f&&t(sGe),f&&t(tr),w(d9),w(f9),w(WM),w(m9),w(vE),f&&t(lGe),f&&t(cc),w(g9),f&&t(iGe),f&&t(ar),w(h9),w(_9),w(TE),w(u9),w(jE),f&&t(dGe),f&&t(gc),w(b9),f&&t(cGe),f&&t(nr),w(v9),w(T9),w(GE),w(M9),w(XE),f&&t(fGe),f&&t(_c),w(C9),f&&t(mGe),f&&t(sr),w(w9),w(L9),w(WE),w(y9),w(HE),f&&t(gGe),f&&t(vc),w(x9),f&&t(hGe),f&&t(lr),w($9),w(S9),w(JE),w(R9),w(uC),f&&t(pGe),f&&t(Mc),w(P9),f&&t(_Ge),f&&t(ir),w(B9),w(N9),w(vC),w(q9),w(DC),f&&t(uGe),f&&t(wc),w(j9),f&&t(bGe),f&&t(dr),w(D9),w(O9),w(OC),w(V9),w(XC),f&&t(vGe),f&&t(yc),w(X9),f&&t(FGe),f&&t(cr),w(z9),w(Q9),w(WC),w(H9),w(HC),f&&t(TGe),f&&t(kc),w(U9),f&&t(MGe),f&&t(fr),w(J9),w(K9),w(JC),w(Z9),w(E5),f&&t(EGe),f&&t(Pc),w(ex),f&&t(CGe),f&&t(mr),w(ox),w(tx),w(w5),w(ax),w(I5),f&&t(wGe),f&&t(Nc),w(nx),f&&t(AGe),f&&t(gr),w(sx),w(ix),w(q5),w(dx),w(Y5),f&&t(LGe),f&&t(Dc),w(cx),f&&t(yGe),f&&t(hr),w(fx),w(gx),w(Z5),w(hx),w(c3),f&&t(xGe),f&&t(Vc),w(px),f&&t($Ge),f&&t(pr),w(_x),w(bx),w(m3),w(vx),w(M3),f&&t(kGe),f&&t(Wc),w(Fx),f&&t(SGe),f&&t(_r),w(Tx),w(Ex),w(C3),w(Cx),w(B3),f&&t(RGe),f&&t(Uc),w(wx),f&&t(PGe),f&&t(ur),w(Ax),w(yx),w(N3),w(xx),w(H3),f&&t(BGe),f&&t(Kc),w($x),f&&t(IGe),f&&t(br),w(kx),w(Rx),w(J3),w(Px),w(n0),f&&t(NGe),f&&t(of),w(Bx),f&&t(qGe),f&&t(vr),w(Ix),w(qx),w(l0),w(jx),w(_0),f&&t(jGe),f&&t(af),w(Dx),f&&t(DGe),f&&t(Fr),w(Gx),w(Vx),w(b0),w(Xx),w(F0),f&&t(GGe),f&&t(lf),w(zx),f&&t(OGe),f&&t(Tr),w(Wx),w(Hx),w(M0),w(Ux),w(w0),f&&t(VGe),f&&t(ff),w(Yx),f&&t(XGe),f&&t(Mr),w(Kx),w(e$),w(L0),w(o$),w(x0)}}}const fNt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function mNt(x){return mBt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class vNt extends iBt{constructor(g){super();dBt(this,g,mNt,cNt,cBt,{})}}export{vNt as default,fNt as metadata};
