import{S as uxt,i as _xt,s as bxt,e as a,k as l,w as F,t as o,M as vxt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Fxt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as HOr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Txt(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,vA,uf,je,We,hi,yn,FA,Ln,xn,TA,pi,$n,MA,ui,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),vA=o(")."),uf=l(),je=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),FA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),TA=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),MA=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var G$=s(p);m=r(G$,"NewModelConfig"),G$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var O$=s(fi);pf=r(O$,"model_type"),O$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var V$=s(mi);gi=r(V$,'"new-model"'),V$.forEach(t),vA=r(Ae,")."),Ae.forEach(t),uf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),FA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var X$=s(Ln);xn=r(X$,"PreTrainedModel"),X$.forEach(t),TA=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),MA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var z$=s(ui);_f=r(z$,"NewModelConfig"),z$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,vA),b(Qe,uf,Ae),b(Qe,je,Ae),e(je,We),e(je,hi),e(hi,yn),e(je,FA),e(je,Ln),e(Ln,xn),e(je,TA),e(je,pi),e(pi,$n),e(je,MA),e(je,ui),e(ui,_f),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(je)}}}function Mxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cxt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function wxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Axt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function yxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $xt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ixt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ekt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function okt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function akt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function skt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ikt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ckt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ukt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _kt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bkt(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,vA,uf,je,We,hi,yn,FA,Ln,xn,TA,pi,$n,MA,ui,_f,Ca,Qe,Ae,G$,_i,O$,V$,Eo,wa,X$,bf,z$,QGe,Iqe,bi,vf,Kee,EA,HGe,Zee,UGe,qqe,kn,JGe,eoe,YGe,KGe,ooe,ZGe,eOe,Nqe,CA,jqe,W$,oOe,Dqe,Ff,Gqe,vi,Tf,roe,wA,rOe,toe,tOe,Oqe,Co,AA,aOe,yA,nOe,Q$,sOe,lOe,iOe,LA,dOe,aoe,cOe,fOe,mOe,Er,xA,gOe,noe,hOe,pOe,Fi,uOe,soe,_Oe,bOe,loe,vOe,FOe,TOe,A,Mf,ioe,MOe,EOe,H$,COe,wOe,AOe,Ef,doe,yOe,LOe,U$,xOe,$Oe,kOe,Cf,coe,SOe,ROe,J$,POe,BOe,IOe,wf,foe,qOe,NOe,Y$,jOe,DOe,GOe,Af,moe,OOe,VOe,K$,XOe,zOe,WOe,yf,goe,QOe,HOe,Z$,UOe,JOe,YOe,Lf,hoe,KOe,ZOe,ek,eVe,oVe,rVe,xf,poe,tVe,aVe,ok,nVe,sVe,lVe,$f,uoe,iVe,dVe,rk,cVe,fVe,mVe,kf,_oe,gVe,hVe,tk,pVe,uVe,_Ve,Sf,boe,bVe,vVe,ak,FVe,TVe,MVe,Rf,voe,EVe,CVe,nk,wVe,AVe,yVe,Pf,Foe,LVe,xVe,sk,$Ve,kVe,SVe,Bf,Toe,RVe,PVe,lk,BVe,IVe,qVe,If,Moe,NVe,jVe,ik,DVe,GVe,OVe,qf,Eoe,VVe,XVe,dk,zVe,WVe,QVe,Nf,Coe,HVe,UVe,ck,JVe,YVe,KVe,jf,woe,ZVe,eXe,fk,oXe,rXe,tXe,Df,Aoe,aXe,nXe,mk,sXe,lXe,iXe,Gf,yoe,dXe,cXe,gk,fXe,mXe,gXe,Of,Loe,hXe,pXe,hk,uXe,_Xe,bXe,Vf,xoe,vXe,FXe,pk,TXe,MXe,EXe,Xf,$oe,CXe,wXe,uk,AXe,yXe,LXe,zf,koe,xXe,$Xe,_k,kXe,SXe,RXe,Wf,Soe,PXe,BXe,bk,IXe,qXe,NXe,Qf,Roe,jXe,DXe,vk,GXe,OXe,VXe,Hf,Poe,XXe,zXe,Fk,WXe,QXe,HXe,Uf,Boe,UXe,JXe,Tk,YXe,KXe,ZXe,Jf,Ioe,eze,oze,Mk,rze,tze,aze,Yf,qoe,nze,sze,Ek,lze,ize,dze,Kf,Noe,cze,fze,Ck,mze,gze,hze,Zf,joe,pze,uze,wk,_ze,bze,vze,em,Doe,Fze,Tze,Ak,Mze,Eze,Cze,om,Goe,wze,Aze,yk,yze,Lze,xze,rm,Ooe,$ze,kze,Lk,Sze,Rze,Pze,tm,Voe,Bze,Ize,xk,qze,Nze,jze,am,Xoe,Dze,Gze,$k,Oze,Vze,Xze,nm,zoe,zze,Wze,kk,Qze,Hze,Uze,sm,Woe,Jze,Yze,Sk,Kze,Zze,eWe,lm,Qoe,oWe,rWe,Rk,tWe,aWe,nWe,im,Hoe,sWe,lWe,Pk,iWe,dWe,cWe,dm,Uoe,fWe,mWe,Bk,gWe,hWe,pWe,cm,Joe,uWe,_We,Ik,bWe,vWe,FWe,fm,Yoe,TWe,MWe,qk,EWe,CWe,wWe,mm,Koe,AWe,yWe,Nk,LWe,xWe,$We,gm,Zoe,kWe,SWe,jk,RWe,PWe,BWe,hm,ere,IWe,qWe,Dk,NWe,jWe,DWe,pm,ore,GWe,OWe,Gk,VWe,XWe,zWe,um,rre,WWe,QWe,Ok,HWe,UWe,JWe,_m,tre,YWe,KWe,Vk,ZWe,eQe,oQe,bm,are,rQe,tQe,Xk,aQe,nQe,sQe,vm,nre,lQe,iQe,zk,dQe,cQe,fQe,Fm,sre,mQe,gQe,Wk,hQe,pQe,uQe,Tm,lre,_Qe,bQe,Qk,vQe,FQe,TQe,Mm,ire,MQe,EQe,Hk,CQe,wQe,AQe,Em,dre,yQe,LQe,Uk,xQe,$Qe,kQe,Cm,cre,SQe,RQe,Jk,PQe,BQe,IQe,wm,fre,qQe,NQe,Yk,jQe,DQe,GQe,Am,mre,OQe,VQe,Kk,XQe,zQe,WQe,ym,gre,QQe,HQe,Zk,UQe,JQe,YQe,Lm,hre,KQe,ZQe,eS,eHe,oHe,rHe,xm,pre,tHe,aHe,oS,nHe,sHe,lHe,$m,ure,iHe,dHe,rS,cHe,fHe,mHe,km,_re,gHe,hHe,tS,pHe,uHe,_He,Sm,bre,bHe,vHe,aS,FHe,THe,MHe,Rm,vre,EHe,CHe,nS,wHe,AHe,yHe,Pm,Fre,LHe,xHe,sS,$He,kHe,SHe,Bm,Tre,RHe,PHe,lS,BHe,IHe,qHe,Im,Mre,NHe,jHe,iS,DHe,GHe,OHe,qm,Ere,VHe,XHe,dS,zHe,WHe,QHe,Nm,Cre,HHe,UHe,cS,JHe,YHe,KHe,jm,wre,ZHe,eUe,fS,oUe,rUe,tUe,Dm,Are,aUe,nUe,mS,sUe,lUe,iUe,Gm,yre,dUe,cUe,gS,fUe,mUe,gUe,Om,Lre,hUe,pUe,hS,uUe,_Ue,bUe,Vm,xre,vUe,FUe,pS,TUe,MUe,EUe,Xm,$re,CUe,wUe,uS,AUe,yUe,LUe,zm,kre,xUe,$Ue,_S,kUe,SUe,RUe,Wm,Sre,PUe,BUe,bS,IUe,qUe,NUe,Qm,Rre,jUe,DUe,vS,GUe,OUe,VUe,Hm,Pre,XUe,zUe,FS,WUe,QUe,HUe,Um,Bre,UUe,JUe,TS,YUe,KUe,ZUe,Jm,Ire,eJe,oJe,MS,rJe,tJe,aJe,Ym,qre,nJe,sJe,ES,lJe,iJe,dJe,Km,Nre,cJe,fJe,CS,mJe,gJe,hJe,Zm,jre,pJe,uJe,wS,_Je,bJe,vJe,eg,Dre,FJe,TJe,AS,MJe,EJe,CJe,og,Gre,wJe,AJe,yS,yJe,LJe,xJe,rg,Ore,$Je,kJe,LS,SJe,RJe,PJe,tg,Vre,BJe,IJe,xS,qJe,NJe,jJe,ag,Xre,DJe,GJe,$S,OJe,VJe,XJe,ng,zre,zJe,WJe,kS,QJe,HJe,UJe,sg,Wre,JJe,YJe,SS,KJe,ZJe,eYe,lg,Qre,oYe,rYe,RS,tYe,aYe,nYe,ig,Hre,sYe,lYe,PS,iYe,dYe,cYe,dg,Ure,fYe,mYe,BS,gYe,hYe,pYe,cg,Jre,uYe,_Ye,IS,bYe,vYe,FYe,fg,Yre,TYe,MYe,qS,EYe,CYe,wYe,mg,Kre,AYe,yYe,NS,LYe,xYe,$Ye,gg,Zre,kYe,SYe,jS,RYe,PYe,BYe,hg,ete,IYe,qYe,DS,NYe,jYe,DYe,pg,ote,GYe,OYe,GS,VYe,XYe,zYe,ug,rte,WYe,QYe,OS,HYe,UYe,JYe,_g,tte,YYe,KYe,VS,ZYe,eKe,oKe,bg,ate,rKe,tKe,XS,aKe,nKe,sKe,vg,nte,lKe,iKe,zS,dKe,cKe,fKe,Fg,ste,mKe,gKe,WS,hKe,pKe,uKe,Tg,lte,_Ke,bKe,QS,vKe,FKe,TKe,Mg,MKe,Eg,$A,EKe,ite,CKe,Vqe,Ti,Cg,dte,kA,wKe,cte,AKe,Xqe,wo,SA,yKe,RA,LKe,HS,xKe,$Ke,kKe,PA,SKe,fte,RKe,PKe,BKe,Cr,BA,IKe,mte,qKe,NKe,Aa,jKe,gte,DKe,GKe,hte,OKe,VKe,pte,XKe,zKe,WKe,k,Sn,ute,QKe,HKe,US,UKe,JKe,JS,YKe,KKe,ZKe,Rn,_te,eZe,oZe,YS,rZe,tZe,KS,aZe,nZe,sZe,Pn,bte,lZe,iZe,ZS,dZe,cZe,eR,fZe,mZe,gZe,wg,vte,hZe,pZe,oR,uZe,_Ze,bZe,Bn,Fte,vZe,FZe,rR,TZe,MZe,tR,EZe,CZe,wZe,Ag,Tte,AZe,yZe,aR,LZe,xZe,$Ze,yg,Mte,kZe,SZe,nR,RZe,PZe,BZe,Lg,Ete,IZe,qZe,sR,NZe,jZe,DZe,In,Cte,GZe,OZe,lR,VZe,XZe,iR,zZe,WZe,QZe,qn,wte,HZe,UZe,dR,JZe,YZe,cR,KZe,ZZe,eeo,Nn,Ate,oeo,reo,fR,teo,aeo,mR,neo,seo,leo,xg,yte,ieo,deo,gR,ceo,feo,meo,$g,Lte,geo,heo,hR,peo,ueo,_eo,jn,xte,beo,veo,pR,Feo,Teo,uR,Meo,Eeo,Ceo,kg,$te,weo,Aeo,_R,yeo,Leo,xeo,Dn,kte,$eo,keo,bR,Seo,Reo,vR,Peo,Beo,Ieo,Gn,Ste,qeo,Neo,FR,jeo,Deo,TR,Geo,Oeo,Veo,On,Rte,Xeo,zeo,MR,Weo,Qeo,ER,Heo,Ueo,Jeo,Sg,Pte,Yeo,Keo,CR,Zeo,eoo,ooo,Vn,Bte,roo,too,wR,aoo,noo,AR,soo,loo,ioo,Xn,Ite,doo,coo,yR,foo,moo,LR,goo,hoo,poo,zn,qte,uoo,_oo,xR,boo,voo,$R,Foo,Too,Moo,Wn,Nte,Eoo,Coo,kR,woo,Aoo,SR,yoo,Loo,xoo,Qn,jte,$oo,koo,RR,Soo,Roo,PR,Poo,Boo,Ioo,Hn,Dte,qoo,Noo,BR,joo,Doo,IR,Goo,Ooo,Voo,Rg,Gte,Xoo,zoo,qR,Woo,Qoo,Hoo,Un,Ote,Uoo,Joo,NR,Yoo,Koo,jR,Zoo,ero,oro,Pg,Vte,rro,tro,DR,aro,nro,sro,Jn,Xte,lro,iro,GR,dro,cro,OR,fro,mro,gro,Yn,zte,hro,pro,VR,uro,_ro,XR,bro,vro,Fro,Kn,Wte,Tro,Mro,zR,Ero,Cro,WR,wro,Aro,yro,Zn,Qte,Lro,xro,QR,$ro,kro,HR,Sro,Rro,Pro,es,Hte,Bro,Iro,UR,qro,Nro,JR,jro,Dro,Gro,Bg,Ute,Oro,Vro,YR,Xro,zro,Wro,os,Jte,Qro,Hro,KR,Uro,Jro,ZR,Yro,Kro,Zro,rs,Yte,eto,oto,eP,rto,tto,oP,ato,nto,sto,ts,Kte,lto,ito,rP,dto,cto,tP,fto,mto,gto,as,Zte,hto,pto,aP,uto,_to,nP,bto,vto,Fto,ns,eae,Tto,Mto,sP,Eto,Cto,lP,wto,Ato,yto,ss,oae,Lto,xto,iP,$to,kto,dP,Sto,Rto,Pto,ls,rae,Bto,Ito,cP,qto,Nto,fP,jto,Dto,Gto,Ig,tae,Oto,Vto,mP,Xto,zto,Wto,is,aae,Qto,Hto,gP,Uto,Jto,hP,Yto,Kto,Zto,qg,nae,eao,oao,pP,rao,tao,aao,Ng,sae,nao,sao,uP,lao,iao,dao,ds,lae,cao,fao,_P,mao,gao,bP,hao,pao,uao,cs,iae,_ao,bao,vP,vao,Fao,FP,Tao,Mao,Eao,fs,dae,Cao,wao,TP,Aao,yao,MP,Lao,xao,$ao,jg,cae,kao,Sao,EP,Rao,Pao,Bao,ms,fae,Iao,qao,CP,Nao,jao,wP,Dao,Gao,Oao,gs,mae,Vao,Xao,AP,zao,Wao,yP,Qao,Hao,Uao,hs,gae,Jao,Yao,LP,Kao,Zao,xP,eno,ono,rno,ps,hae,tno,ano,$P,nno,sno,kP,lno,ino,dno,us,pae,cno,fno,SP,mno,gno,RP,hno,pno,uno,Dg,uae,_no,bno,PP,vno,Fno,Tno,_s,_ae,Mno,Eno,BP,Cno,wno,IP,Ano,yno,Lno,Gg,bae,xno,$no,qP,kno,Sno,Rno,Og,vae,Pno,Bno,NP,Ino,qno,Nno,Vg,Fae,jno,Dno,jP,Gno,Ono,Vno,Xg,Tae,Xno,zno,DP,Wno,Qno,Hno,bs,Mae,Uno,Jno,GP,Yno,Kno,OP,Zno,eso,oso,zg,Eae,rso,tso,VP,aso,nso,sso,vs,Cae,lso,iso,XP,dso,cso,zP,fso,mso,gso,Fs,wae,hso,pso,WP,uso,_so,QP,bso,vso,Fso,Ts,Aae,Tso,Mso,HP,Eso,Cso,UP,wso,Aso,yso,Ms,yae,Lso,xso,JP,$so,kso,YP,Sso,Rso,Pso,Es,Lae,Bso,Iso,KP,qso,Nso,ZP,jso,Dso,Gso,Cs,xae,Oso,Vso,eB,Xso,zso,oB,Wso,Qso,Hso,Wg,$ae,Uso,Jso,rB,Yso,Kso,Zso,Qg,kae,elo,olo,tB,rlo,tlo,alo,ws,Sae,nlo,slo,aB,llo,ilo,nB,dlo,clo,flo,As,Rae,mlo,glo,sB,hlo,plo,lB,ulo,_lo,blo,ys,Pae,vlo,Flo,iB,Tlo,Mlo,dB,Elo,Clo,wlo,Hg,Bae,Alo,ylo,cB,Llo,xlo,$lo,Ug,Iae,klo,Slo,fB,Rlo,Plo,Blo,Jg,qae,Ilo,qlo,mB,Nlo,jlo,Dlo,Ls,Nae,Glo,Olo,gB,Vlo,Xlo,hB,zlo,Wlo,Qlo,Yg,jae,Hlo,Ulo,pB,Jlo,Ylo,Klo,Kg,Dae,Zlo,eio,uB,oio,rio,tio,Zg,Gae,aio,nio,_B,sio,lio,iio,xs,Oae,dio,cio,bB,fio,mio,vB,gio,hio,pio,eh,Vae,uio,_io,FB,bio,vio,Fio,oh,Xae,Tio,Mio,TB,Eio,Cio,wio,$s,zae,Aio,yio,MB,Lio,xio,EB,$io,kio,Sio,ks,Wae,Rio,Pio,CB,Bio,Iio,wB,qio,Nio,jio,Ss,Qae,Dio,Gio,AB,Oio,Vio,yB,Xio,zio,Wio,Rs,Hae,Qio,Hio,LB,Uio,Jio,xB,Yio,Kio,Zio,rh,edo,th,IA,odo,Uae,rdo,zqe,Mi,ah,Jae,qA,tdo,Yae,ado,Wqe,Ao,NA,ndo,jA,sdo,$B,ldo,ido,ddo,DA,cdo,Kae,fdo,mdo,gdo,He,GA,hdo,Zae,pdo,udo,ya,_do,ene,bdo,vdo,one,Fdo,Tdo,rne,Mdo,Edo,Cdo,Y,nh,tne,wdo,Ado,kB,ydo,Ldo,xdo,sh,ane,$do,kdo,SB,Sdo,Rdo,Pdo,lh,nne,Bdo,Ido,RB,qdo,Ndo,jdo,ih,sne,Ddo,Gdo,PB,Odo,Vdo,Xdo,dh,lne,zdo,Wdo,BB,Qdo,Hdo,Udo,ch,ine,Jdo,Ydo,IB,Kdo,Zdo,eco,fh,dne,oco,rco,qB,tco,aco,nco,mh,cne,sco,lco,NB,ico,dco,cco,gh,fne,fco,mco,jB,gco,hco,pco,hh,mne,uco,_co,DB,bco,vco,Fco,ph,gne,Tco,Mco,GB,Eco,Cco,wco,uh,hne,Aco,yco,OB,Lco,xco,$co,_h,pne,kco,Sco,VB,Rco,Pco,Bco,bh,une,Ico,qco,XB,Nco,jco,Dco,vh,_ne,Gco,Oco,zB,Vco,Xco,zco,Fh,bne,Wco,Qco,WB,Hco,Uco,Jco,Th,vne,Yco,Kco,QB,Zco,efo,ofo,Mh,Fne,rfo,tfo,HB,afo,nfo,sfo,Eh,Tne,lfo,ifo,UB,dfo,cfo,ffo,Ch,Mne,mfo,gfo,JB,hfo,pfo,ufo,wh,Ene,_fo,bfo,YB,vfo,Ffo,Tfo,Ah,Cne,Mfo,Efo,KB,Cfo,wfo,Afo,yh,wne,yfo,Lfo,ZB,xfo,$fo,kfo,Lh,Ane,Sfo,Rfo,eI,Pfo,Bfo,Ifo,xh,yne,qfo,Nfo,oI,jfo,Dfo,Gfo,$h,Lne,Ofo,Vfo,rI,Xfo,zfo,Wfo,kh,xne,Qfo,Hfo,tI,Ufo,Jfo,Yfo,Sh,$ne,Kfo,Zfo,aI,emo,omo,rmo,Rh,kne,tmo,amo,nI,nmo,smo,lmo,Ph,imo,Bh,dmo,Ih,OA,cmo,Sne,fmo,Qqe,Ei,qh,Rne,VA,mmo,Pne,gmo,Hqe,yo,XA,hmo,zA,pmo,sI,umo,_mo,bmo,WA,vmo,Bne,Fmo,Tmo,Mmo,Ue,QA,Emo,Ine,Cmo,wmo,Ci,Amo,qne,ymo,Lmo,Nne,xmo,$mo,kmo,he,Nh,jne,Smo,Rmo,lI,Pmo,Bmo,Imo,jh,Dne,qmo,Nmo,Gne,jmo,Dmo,Gmo,Dh,One,Omo,Vmo,iI,Xmo,zmo,Wmo,Gh,Vne,Qmo,Hmo,dI,Umo,Jmo,Ymo,Oh,Xne,Kmo,Zmo,cI,ego,ogo,rgo,Vh,zne,tgo,ago,fI,ngo,sgo,lgo,Xh,Wne,igo,dgo,mI,cgo,fgo,mgo,zh,Qne,ggo,hgo,gI,pgo,ugo,_go,Wh,Hne,bgo,vgo,hI,Fgo,Tgo,Mgo,Qh,Une,Ego,Cgo,pI,wgo,Ago,ygo,Hh,Jne,Lgo,xgo,uI,$go,kgo,Sgo,Uh,Yne,Rgo,Pgo,_I,Bgo,Igo,qgo,Jh,Kne,Ngo,jgo,bI,Dgo,Ggo,Ogo,Yh,Zne,Vgo,Xgo,vI,zgo,Wgo,Qgo,Kh,ese,Hgo,Ugo,FI,Jgo,Ygo,Kgo,Zh,ose,Zgo,eho,TI,oho,rho,tho,ep,rse,aho,nho,MI,sho,lho,iho,op,dho,rp,cho,tp,HA,fho,tse,mho,Uqe,wi,ap,ase,UA,gho,nse,hho,Jqe,Lo,JA,pho,Ai,uho,EI,_ho,bho,CI,vho,Fho,Tho,YA,Mho,sse,Eho,Cho,who,tt,KA,Aho,lse,yho,Lho,yi,xho,ise,$ho,kho,wI,Sho,Rho,Pho,np,Bho,Je,ZA,Iho,dse,qho,Nho,La,jho,cse,Dho,Gho,fse,Oho,Vho,mse,Xho,zho,Who,x,sp,gse,Qho,Hho,AI,Uho,Jho,Yho,lp,hse,Kho,Zho,yI,epo,opo,rpo,ip,pse,tpo,apo,LI,npo,spo,lpo,dp,use,ipo,dpo,xI,cpo,fpo,mpo,cp,_se,gpo,hpo,$I,ppo,upo,_po,fp,bse,bpo,vpo,kI,Fpo,Tpo,Mpo,mp,vse,Epo,Cpo,SI,wpo,Apo,ypo,gp,Fse,Lpo,xpo,RI,$po,kpo,Spo,hp,Tse,Rpo,Ppo,PI,Bpo,Ipo,qpo,pp,Mse,Npo,jpo,BI,Dpo,Gpo,Opo,up,Ese,Vpo,Xpo,II,zpo,Wpo,Qpo,_p,Cse,Hpo,Upo,qI,Jpo,Ypo,Kpo,bp,wse,Zpo,euo,NI,ouo,ruo,tuo,vp,Ase,auo,nuo,jI,suo,luo,iuo,Fp,yse,duo,cuo,DI,fuo,muo,guo,Tp,Lse,huo,puo,GI,uuo,_uo,buo,Mp,xse,vuo,Fuo,OI,Tuo,Muo,Euo,Ep,$se,Cuo,wuo,VI,Auo,yuo,Luo,Cp,kse,xuo,$uo,XI,kuo,Suo,Ruo,wp,Sse,Puo,Buo,zI,Iuo,quo,Nuo,Ap,Rse,juo,Duo,WI,Guo,Ouo,Vuo,yp,Pse,Xuo,zuo,QI,Wuo,Quo,Huo,Lp,Bse,Uuo,Juo,HI,Yuo,Kuo,Zuo,xp,Ise,e_o,o_o,UI,r_o,t_o,a_o,$p,qse,n_o,s_o,JI,l_o,i_o,d_o,kp,Nse,c_o,f_o,YI,m_o,g_o,h_o,Sp,jse,p_o,u_o,KI,__o,b_o,v_o,Rp,Dse,F_o,T_o,ZI,M_o,E_o,C_o,Pp,Gse,w_o,A_o,eq,y_o,L_o,x_o,Bp,Ose,$_o,k_o,oq,S_o,R_o,P_o,Ip,Vse,B_o,I_o,rq,q_o,N_o,j_o,qp,Xse,D_o,G_o,tq,O_o,V_o,X_o,Ps,zse,z_o,W_o,aq,Q_o,H_o,nq,U_o,J_o,Y_o,Np,Wse,K_o,Z_o,sq,e3o,o3o,r3o,jp,Qse,t3o,a3o,lq,n3o,s3o,l3o,Dp,Hse,i3o,d3o,iq,c3o,f3o,m3o,Gp,Use,g3o,h3o,dq,p3o,u3o,_3o,Op,Jse,b3o,v3o,cq,F3o,T3o,M3o,Vp,Yse,E3o,C3o,fq,w3o,A3o,y3o,Xp,Kse,L3o,x3o,mq,$3o,k3o,S3o,zp,Zse,R3o,P3o,gq,B3o,I3o,q3o,Wp,ele,N3o,j3o,hq,D3o,G3o,O3o,Qp,ole,V3o,X3o,pq,z3o,W3o,Q3o,Hp,rle,H3o,U3o,uq,J3o,Y3o,K3o,Up,tle,Z3o,e1o,_q,o1o,r1o,t1o,Jp,ale,a1o,n1o,bq,s1o,l1o,i1o,Yp,nle,d1o,c1o,vq,f1o,m1o,g1o,Kp,sle,h1o,p1o,Fq,u1o,_1o,b1o,Zp,lle,v1o,F1o,Tq,T1o,M1o,E1o,eu,ile,C1o,w1o,Mq,A1o,y1o,L1o,ou,dle,x1o,$1o,Eq,k1o,S1o,R1o,ru,cle,P1o,B1o,Cq,I1o,q1o,N1o,tu,fle,j1o,D1o,wq,G1o,O1o,V1o,au,mle,X1o,z1o,Aq,W1o,Q1o,H1o,nu,gle,U1o,J1o,yq,Y1o,K1o,Z1o,su,hle,ebo,obo,Lq,rbo,tbo,abo,lu,ple,nbo,sbo,xq,lbo,ibo,dbo,iu,ule,cbo,fbo,$q,mbo,gbo,hbo,du,_le,pbo,ubo,kq,_bo,bbo,vbo,cu,ble,Fbo,Tbo,Sq,Mbo,Ebo,Cbo,fu,vle,wbo,Abo,Rq,ybo,Lbo,xbo,mu,Fle,$bo,kbo,Pq,Sbo,Rbo,Pbo,gu,Tle,Bbo,Ibo,Bq,qbo,Nbo,jbo,hu,Mle,Dbo,Gbo,Iq,Obo,Vbo,Xbo,pu,Ele,zbo,Wbo,qq,Qbo,Hbo,Ubo,uu,Cle,Jbo,Ybo,Nq,Kbo,Zbo,e2o,_u,wle,o2o,r2o,jq,t2o,a2o,n2o,bu,Ale,s2o,l2o,Dq,i2o,d2o,c2o,vu,yle,f2o,m2o,Gq,g2o,h2o,p2o,Fu,Lle,u2o,_2o,Oq,b2o,v2o,F2o,Tu,xle,T2o,M2o,Vq,E2o,C2o,w2o,Mu,$le,A2o,y2o,Xq,L2o,x2o,$2o,Eu,kle,k2o,S2o,zq,R2o,P2o,B2o,Cu,Sle,I2o,q2o,Wq,N2o,j2o,D2o,wu,Rle,G2o,O2o,Qq,V2o,X2o,z2o,Au,Ple,W2o,Q2o,Hq,H2o,U2o,J2o,yu,Ble,Y2o,K2o,Uq,Z2o,evo,ovo,Lu,Ile,rvo,tvo,Jq,avo,nvo,svo,xu,qle,lvo,ivo,Yq,dvo,cvo,fvo,$u,Nle,mvo,gvo,Kq,hvo,pvo,uvo,ku,jle,_vo,bvo,Zq,vvo,Fvo,Tvo,Su,Dle,Mvo,Evo,eN,Cvo,wvo,Avo,Ru,Gle,yvo,Lvo,oN,xvo,$vo,kvo,Pu,Ole,Svo,Rvo,rN,Pvo,Bvo,Ivo,Bu,Vle,qvo,Nvo,tN,jvo,Dvo,Gvo,Iu,Xle,Ovo,Vvo,aN,Xvo,zvo,Wvo,qu,zle,Qvo,Hvo,nN,Uvo,Jvo,Yvo,Nu,Wle,Kvo,Zvo,sN,eFo,oFo,rFo,ju,Qle,tFo,aFo,lN,nFo,sFo,lFo,Du,Hle,iFo,dFo,iN,cFo,fFo,mFo,Gu,Ule,gFo,hFo,dN,pFo,uFo,_Fo,Ou,Jle,bFo,vFo,cN,FFo,TFo,MFo,Vu,Yle,EFo,CFo,fN,wFo,AFo,yFo,Xu,Kle,LFo,xFo,mN,$Fo,kFo,SFo,zu,Zle,RFo,PFo,gN,BFo,IFo,qFo,Wu,eie,NFo,jFo,hN,DFo,GFo,OFo,Qu,oie,VFo,XFo,pN,zFo,WFo,QFo,Hu,rie,HFo,UFo,uN,JFo,YFo,KFo,Uu,tie,ZFo,eTo,_N,oTo,rTo,tTo,Ju,aie,aTo,nTo,bN,sTo,lTo,iTo,Yu,nie,dTo,cTo,vN,fTo,mTo,gTo,Ku,hTo,sie,pTo,uTo,lie,_To,bTo,Zu,Yqe,Li,e_,iie,e6,vTo,die,FTo,Kqe,xo,o6,TTo,xi,MTo,FN,ETo,CTo,TN,wTo,ATo,yTo,r6,LTo,cie,xTo,$To,kTo,at,t6,STo,fie,RTo,PTo,$i,BTo,mie,ITo,qTo,MN,NTo,jTo,DTo,o_,GTo,Ye,a6,OTo,gie,VTo,XTo,xa,zTo,hie,WTo,QTo,pie,HTo,UTo,uie,JTo,YTo,KTo,G,r_,_ie,ZTo,e7o,EN,o7o,r7o,t7o,t_,bie,a7o,n7o,CN,s7o,l7o,i7o,a_,vie,d7o,c7o,wN,f7o,m7o,g7o,n_,Fie,h7o,p7o,AN,u7o,_7o,b7o,s_,Tie,v7o,F7o,yN,T7o,M7o,E7o,l_,Mie,C7o,w7o,LN,A7o,y7o,L7o,i_,Eie,x7o,$7o,xN,k7o,S7o,R7o,d_,Cie,P7o,B7o,$N,I7o,q7o,N7o,c_,wie,j7o,D7o,kN,G7o,O7o,V7o,f_,Aie,X7o,z7o,SN,W7o,Q7o,H7o,m_,yie,U7o,J7o,RN,Y7o,K7o,Z7o,g_,Lie,e9o,o9o,PN,r9o,t9o,a9o,h_,xie,n9o,s9o,BN,l9o,i9o,d9o,p_,$ie,c9o,f9o,IN,m9o,g9o,h9o,u_,kie,p9o,u9o,qN,_9o,b9o,v9o,__,Sie,F9o,T9o,NN,M9o,E9o,C9o,b_,Rie,w9o,A9o,jN,y9o,L9o,x9o,v_,Pie,$9o,k9o,DN,S9o,R9o,P9o,F_,Bie,B9o,I9o,GN,q9o,N9o,j9o,T_,Iie,D9o,G9o,ON,O9o,V9o,X9o,M_,qie,z9o,W9o,VN,Q9o,H9o,U9o,E_,Nie,J9o,Y9o,XN,K9o,Z9o,eMo,C_,jie,oMo,rMo,zN,tMo,aMo,nMo,w_,Die,sMo,lMo,WN,iMo,dMo,cMo,A_,Gie,fMo,mMo,QN,gMo,hMo,pMo,y_,Oie,uMo,_Mo,HN,bMo,vMo,FMo,L_,Vie,TMo,MMo,UN,EMo,CMo,wMo,x_,Xie,AMo,yMo,JN,LMo,xMo,$Mo,$_,zie,kMo,SMo,YN,RMo,PMo,BMo,k_,Wie,IMo,qMo,KN,NMo,jMo,DMo,S_,Qie,GMo,OMo,ZN,VMo,XMo,zMo,R_,Hie,WMo,QMo,ej,HMo,UMo,JMo,P_,Uie,YMo,KMo,oj,ZMo,e4o,o4o,B_,Jie,r4o,t4o,rj,a4o,n4o,s4o,I_,Yie,l4o,i4o,tj,d4o,c4o,f4o,q_,Kie,m4o,g4o,aj,h4o,p4o,u4o,N_,Zie,_4o,b4o,nj,v4o,F4o,T4o,j_,ede,M4o,E4o,sj,C4o,w4o,A4o,D_,ode,y4o,L4o,lj,x4o,$4o,k4o,G_,rde,S4o,R4o,ij,P4o,B4o,I4o,O_,tde,q4o,N4o,dj,j4o,D4o,G4o,V_,ade,O4o,V4o,cj,X4o,z4o,W4o,X_,Q4o,nde,H4o,U4o,sde,J4o,Y4o,z_,Zqe,ki,W_,lde,n6,K4o,ide,Z4o,eNe,$o,s6,eEo,Si,oEo,fj,rEo,tEo,mj,aEo,nEo,sEo,l6,lEo,dde,iEo,dEo,cEo,nt,i6,fEo,cde,mEo,gEo,Ri,hEo,fde,pEo,uEo,gj,_Eo,bEo,vEo,Q_,FEo,Ke,d6,TEo,mde,MEo,EEo,$a,CEo,gde,wEo,AEo,hde,yEo,LEo,pde,xEo,$Eo,kEo,z,H_,ude,SEo,REo,hj,PEo,BEo,IEo,U_,_de,qEo,NEo,pj,jEo,DEo,GEo,J_,bde,OEo,VEo,uj,XEo,zEo,WEo,Y_,vde,QEo,HEo,_j,UEo,JEo,YEo,K_,Fde,KEo,ZEo,bj,eCo,oCo,rCo,Z_,Tde,tCo,aCo,vj,nCo,sCo,lCo,e3,Mde,iCo,dCo,Fj,cCo,fCo,mCo,o3,Ede,gCo,hCo,Tj,pCo,uCo,_Co,r3,Cde,bCo,vCo,Mj,FCo,TCo,MCo,t3,wde,ECo,CCo,Ej,wCo,ACo,yCo,a3,Ade,LCo,xCo,Cj,$Co,kCo,SCo,n3,yde,RCo,PCo,wj,BCo,ICo,qCo,s3,Lde,NCo,jCo,Aj,DCo,GCo,OCo,l3,xde,VCo,XCo,yj,zCo,WCo,QCo,i3,$de,HCo,UCo,Lj,JCo,YCo,KCo,d3,kde,ZCo,e5o,xj,o5o,r5o,t5o,c3,Sde,a5o,n5o,$j,s5o,l5o,i5o,f3,Rde,d5o,c5o,kj,f5o,m5o,g5o,m3,Pde,h5o,p5o,Sj,u5o,_5o,b5o,g3,Bde,v5o,F5o,Rj,T5o,M5o,E5o,h3,Ide,C5o,w5o,Pj,A5o,y5o,L5o,p3,qde,x5o,$5o,Bj,k5o,S5o,R5o,u3,Nde,P5o,B5o,Ij,I5o,q5o,N5o,_3,jde,j5o,D5o,qj,G5o,O5o,V5o,b3,Dde,X5o,z5o,Nj,W5o,Q5o,H5o,v3,Gde,U5o,J5o,jj,Y5o,K5o,Z5o,F3,Ode,ewo,owo,Dj,rwo,two,awo,T3,Vde,nwo,swo,Gj,lwo,iwo,dwo,M3,Xde,cwo,fwo,Oj,mwo,gwo,hwo,E3,zde,pwo,uwo,Vj,_wo,bwo,vwo,C3,Wde,Fwo,Two,Xj,Mwo,Ewo,Cwo,w3,Qde,wwo,Awo,zj,ywo,Lwo,xwo,A3,Hde,$wo,kwo,Wj,Swo,Rwo,Pwo,y3,Ude,Bwo,Iwo,Qj,qwo,Nwo,jwo,L3,Jde,Dwo,Gwo,Hj,Owo,Vwo,Xwo,x3,Yde,zwo,Wwo,Uj,Qwo,Hwo,Uwo,$3,Jwo,Kde,Ywo,Kwo,Zde,Zwo,e0o,k3,oNe,Pi,S3,ece,c6,o0o,oce,r0o,rNe,ko,f6,t0o,Bi,a0o,Jj,n0o,s0o,Yj,l0o,i0o,d0o,m6,c0o,rce,f0o,m0o,g0o,st,g6,h0o,tce,p0o,u0o,Ii,_0o,ace,b0o,v0o,Kj,F0o,T0o,M0o,R3,E0o,Ze,h6,C0o,nce,w0o,A0o,ka,y0o,sce,L0o,x0o,lce,$0o,k0o,ice,S0o,R0o,P0o,W,P3,dce,B0o,I0o,Zj,q0o,N0o,j0o,B3,cce,D0o,G0o,eD,O0o,V0o,X0o,I3,fce,z0o,W0o,oD,Q0o,H0o,U0o,q3,mce,J0o,Y0o,rD,K0o,Z0o,eAo,N3,gce,oAo,rAo,tD,tAo,aAo,nAo,j3,hce,sAo,lAo,aD,iAo,dAo,cAo,D3,pce,fAo,mAo,nD,gAo,hAo,pAo,G3,uce,uAo,_Ao,sD,bAo,vAo,FAo,O3,_ce,TAo,MAo,lD,EAo,CAo,wAo,V3,bce,AAo,yAo,iD,LAo,xAo,$Ao,X3,vce,kAo,SAo,dD,RAo,PAo,BAo,z3,Fce,IAo,qAo,cD,NAo,jAo,DAo,W3,Tce,GAo,OAo,fD,VAo,XAo,zAo,Q3,Mce,WAo,QAo,mD,HAo,UAo,JAo,H3,Ece,YAo,KAo,gD,ZAo,e6o,o6o,U3,Cce,r6o,t6o,hD,a6o,n6o,s6o,J3,wce,l6o,i6o,pD,d6o,c6o,f6o,Y3,Ace,m6o,g6o,uD,h6o,p6o,u6o,K3,yce,_6o,b6o,_D,v6o,F6o,T6o,Z3,Lce,M6o,E6o,bD,C6o,w6o,A6o,e1,xce,y6o,L6o,vD,x6o,$6o,k6o,o1,$ce,S6o,R6o,FD,P6o,B6o,I6o,r1,kce,q6o,N6o,TD,j6o,D6o,G6o,t1,Sce,O6o,V6o,MD,X6o,z6o,W6o,a1,Rce,Q6o,H6o,ED,U6o,J6o,Y6o,n1,Pce,K6o,Z6o,CD,eyo,oyo,ryo,s1,Bce,tyo,ayo,wD,nyo,syo,lyo,l1,Ice,iyo,dyo,AD,cyo,fyo,myo,i1,qce,gyo,hyo,yD,pyo,uyo,_yo,d1,Nce,byo,vyo,LD,Fyo,Tyo,Myo,c1,jce,Eyo,Cyo,Dce,wyo,Ayo,yyo,f1,Gce,Lyo,xyo,xD,$yo,kyo,Syo,m1,Oce,Ryo,Pyo,$D,Byo,Iyo,qyo,g1,Vce,Nyo,jyo,kD,Dyo,Gyo,Oyo,h1,Xce,Vyo,Xyo,SD,zyo,Wyo,Qyo,p1,Hyo,zce,Uyo,Jyo,Wce,Yyo,Kyo,u1,tNe,qi,_1,Qce,p6,Zyo,Hce,eLo,aNe,So,u6,oLo,Ni,rLo,RD,tLo,aLo,PD,nLo,sLo,lLo,_6,iLo,Uce,dLo,cLo,fLo,lt,b6,mLo,Jce,gLo,hLo,ji,pLo,Yce,uLo,_Lo,BD,bLo,vLo,FLo,b1,TLo,eo,v6,MLo,Kce,ELo,CLo,Sa,wLo,Zce,ALo,yLo,efe,LLo,xLo,ofe,$Lo,kLo,SLo,ue,v1,rfe,RLo,PLo,ID,BLo,ILo,qLo,F1,tfe,NLo,jLo,qD,DLo,GLo,OLo,T1,afe,VLo,XLo,ND,zLo,WLo,QLo,M1,nfe,HLo,ULo,jD,JLo,YLo,KLo,E1,sfe,ZLo,e8o,DD,o8o,r8o,t8o,C1,lfe,a8o,n8o,GD,s8o,l8o,i8o,w1,ife,d8o,c8o,OD,f8o,m8o,g8o,A1,dfe,h8o,p8o,VD,u8o,_8o,b8o,y1,cfe,v8o,F8o,XD,T8o,M8o,E8o,L1,ffe,C8o,w8o,zD,A8o,y8o,L8o,x1,mfe,x8o,$8o,WD,k8o,S8o,R8o,$1,gfe,P8o,B8o,QD,I8o,q8o,N8o,k1,hfe,j8o,D8o,HD,G8o,O8o,V8o,S1,pfe,X8o,z8o,UD,W8o,Q8o,H8o,R1,ufe,U8o,J8o,JD,Y8o,K8o,Z8o,P1,_fe,exo,oxo,YD,rxo,txo,axo,B1,nxo,bfe,sxo,lxo,vfe,ixo,dxo,I1,nNe,Di,q1,Ffe,F6,cxo,Tfe,fxo,sNe,Ro,T6,mxo,Gi,gxo,KD,hxo,pxo,ZD,uxo,_xo,bxo,M6,vxo,Mfe,Fxo,Txo,Mxo,it,E6,Exo,Efe,Cxo,wxo,Oi,Axo,Cfe,yxo,Lxo,eG,xxo,$xo,kxo,N1,Sxo,oo,C6,Rxo,wfe,Pxo,Bxo,Ra,Ixo,Afe,qxo,Nxo,yfe,jxo,Dxo,Lfe,Gxo,Oxo,Vxo,q,j1,xfe,Xxo,zxo,oG,Wxo,Qxo,Hxo,D1,$fe,Uxo,Jxo,rG,Yxo,Kxo,Zxo,G1,kfe,e$o,o$o,tG,r$o,t$o,a$o,O1,Sfe,n$o,s$o,aG,l$o,i$o,d$o,V1,Rfe,c$o,f$o,nG,m$o,g$o,h$o,X1,Pfe,p$o,u$o,sG,_$o,b$o,v$o,z1,Bfe,F$o,T$o,lG,M$o,E$o,C$o,W1,Ife,w$o,A$o,iG,y$o,L$o,x$o,Q1,qfe,$$o,k$o,dG,S$o,R$o,P$o,H1,Nfe,B$o,I$o,cG,q$o,N$o,j$o,U1,jfe,D$o,G$o,fG,O$o,V$o,X$o,J1,Dfe,z$o,W$o,mG,Q$o,H$o,U$o,Y1,Gfe,J$o,Y$o,gG,K$o,Z$o,eko,K1,Ofe,oko,rko,hG,tko,ako,nko,Z1,Vfe,sko,lko,pG,iko,dko,cko,eb,Xfe,fko,mko,uG,gko,hko,pko,ob,zfe,uko,_ko,_G,bko,vko,Fko,rb,Wfe,Tko,Mko,bG,Eko,Cko,wko,tb,Qfe,Ako,yko,vG,Lko,xko,$ko,ab,Hfe,kko,Sko,FG,Rko,Pko,Bko,nb,Ufe,Iko,qko,TG,Nko,jko,Dko,sb,Jfe,Gko,Oko,MG,Vko,Xko,zko,lb,Yfe,Wko,Qko,EG,Hko,Uko,Jko,ib,Kfe,Yko,Kko,CG,Zko,eSo,oSo,db,Zfe,rSo,tSo,wG,aSo,nSo,sSo,cb,eme,lSo,iSo,AG,dSo,cSo,fSo,fb,ome,mSo,gSo,yG,hSo,pSo,uSo,mb,rme,_So,bSo,LG,vSo,FSo,TSo,gb,tme,MSo,ESo,xG,CSo,wSo,ASo,hb,ame,ySo,LSo,$G,xSo,$So,kSo,pb,nme,SSo,RSo,kG,PSo,BSo,ISo,ub,sme,qSo,NSo,SG,jSo,DSo,GSo,_b,lme,OSo,VSo,RG,XSo,zSo,WSo,bb,ime,QSo,HSo,PG,USo,JSo,YSo,vb,dme,KSo,ZSo,BG,eRo,oRo,rRo,Fb,cme,tRo,aRo,IG,nRo,sRo,lRo,Tb,fme,iRo,dRo,qG,cRo,fRo,mRo,Mb,mme,gRo,hRo,NG,pRo,uRo,_Ro,Eb,gme,bRo,vRo,jG,FRo,TRo,MRo,Cb,hme,ERo,CRo,DG,wRo,ARo,yRo,wb,pme,LRo,xRo,GG,$Ro,kRo,SRo,Ab,ume,RRo,PRo,OG,BRo,IRo,qRo,yb,_me,NRo,jRo,VG,DRo,GRo,ORo,Lb,bme,VRo,XRo,XG,zRo,WRo,QRo,xb,vme,HRo,URo,zG,JRo,YRo,KRo,$b,Fme,ZRo,ePo,WG,oPo,rPo,tPo,kb,Tme,aPo,nPo,QG,sPo,lPo,iPo,Sb,dPo,Mme,cPo,fPo,Eme,mPo,gPo,Rb,lNe,Vi,Pb,Cme,w6,hPo,wme,pPo,iNe,Po,A6,uPo,Xi,_Po,HG,bPo,vPo,UG,FPo,TPo,MPo,y6,EPo,Ame,CPo,wPo,APo,dt,L6,yPo,yme,LPo,xPo,zi,$Po,Lme,kPo,SPo,JG,RPo,PPo,BPo,Bb,IPo,ro,x6,qPo,xme,NPo,jPo,Pa,DPo,$me,GPo,OPo,kme,VPo,XPo,Sme,zPo,WPo,QPo,K,Ib,Rme,HPo,UPo,YG,JPo,YPo,KPo,qb,Pme,ZPo,eBo,KG,oBo,rBo,tBo,Nb,Bme,aBo,nBo,ZG,sBo,lBo,iBo,jb,Ime,dBo,cBo,eO,fBo,mBo,gBo,Db,qme,hBo,pBo,oO,uBo,_Bo,bBo,Gb,Nme,vBo,FBo,rO,TBo,MBo,EBo,Ob,jme,CBo,wBo,tO,ABo,yBo,LBo,Vb,Dme,xBo,$Bo,aO,kBo,SBo,RBo,Xb,Gme,PBo,BBo,nO,IBo,qBo,NBo,zb,Ome,jBo,DBo,sO,GBo,OBo,VBo,Wb,Vme,XBo,zBo,lO,WBo,QBo,HBo,Qb,Xme,UBo,JBo,iO,YBo,KBo,ZBo,Hb,zme,eIo,oIo,dO,rIo,tIo,aIo,Ub,Wme,nIo,sIo,cO,lIo,iIo,dIo,Jb,Qme,cIo,fIo,fO,mIo,gIo,hIo,Yb,Hme,pIo,uIo,mO,_Io,bIo,vIo,Kb,Ume,FIo,TIo,gO,MIo,EIo,CIo,Zb,Jme,wIo,AIo,hO,yIo,LIo,xIo,e2,Yme,$Io,kIo,pO,SIo,RIo,PIo,o2,Kme,BIo,IIo,uO,qIo,NIo,jIo,r2,Zme,DIo,GIo,_O,OIo,VIo,XIo,t2,ege,zIo,WIo,bO,QIo,HIo,UIo,a2,oge,JIo,YIo,vO,KIo,ZIo,eqo,n2,rge,oqo,rqo,FO,tqo,aqo,nqo,s2,tge,sqo,lqo,TO,iqo,dqo,cqo,l2,age,fqo,mqo,MO,gqo,hqo,pqo,i2,nge,uqo,_qo,EO,bqo,vqo,Fqo,d2,sge,Tqo,Mqo,CO,Eqo,Cqo,wqo,c2,lge,Aqo,yqo,wO,Lqo,xqo,$qo,f2,kqo,ige,Sqo,Rqo,dge,Pqo,Bqo,m2,dNe,Wi,g2,cge,$6,Iqo,fge,qqo,cNe,Bo,k6,Nqo,Qi,jqo,AO,Dqo,Gqo,yO,Oqo,Vqo,Xqo,S6,zqo,mge,Wqo,Qqo,Hqo,ct,R6,Uqo,gge,Jqo,Yqo,Hi,Kqo,hge,Zqo,eNo,LO,oNo,rNo,tNo,h2,aNo,to,P6,nNo,pge,sNo,lNo,Ba,iNo,uge,dNo,cNo,_ge,fNo,mNo,bge,gNo,hNo,pNo,Yr,p2,vge,uNo,_No,xO,bNo,vNo,FNo,u2,Fge,TNo,MNo,$O,ENo,CNo,wNo,_2,Tge,ANo,yNo,kO,LNo,xNo,$No,b2,Mge,kNo,SNo,SO,RNo,PNo,BNo,v2,Ege,INo,qNo,RO,NNo,jNo,DNo,F2,GNo,Cge,ONo,VNo,wge,XNo,zNo,T2,fNe,Ui,M2,Age,B6,WNo,yge,QNo,mNe,Io,I6,HNo,Ji,UNo,PO,JNo,YNo,BO,KNo,ZNo,ejo,q6,ojo,Lge,rjo,tjo,ajo,ft,N6,njo,xge,sjo,ljo,Yi,ijo,$ge,djo,cjo,IO,fjo,mjo,gjo,E2,hjo,ao,j6,pjo,kge,ujo,_jo,Ia,bjo,Sge,vjo,Fjo,Rge,Tjo,Mjo,Pge,Ejo,Cjo,wjo,H,C2,Bge,Ajo,yjo,qO,Ljo,xjo,$jo,w2,Ige,kjo,Sjo,NO,Rjo,Pjo,Bjo,A2,qge,Ijo,qjo,jO,Njo,jjo,Djo,y2,Nge,Gjo,Ojo,DO,Vjo,Xjo,zjo,L2,jge,Wjo,Qjo,GO,Hjo,Ujo,Jjo,x2,Dge,Yjo,Kjo,OO,Zjo,eDo,oDo,$2,Gge,rDo,tDo,VO,aDo,nDo,sDo,k2,Oge,lDo,iDo,XO,dDo,cDo,fDo,S2,Vge,mDo,gDo,zO,hDo,pDo,uDo,R2,Xge,_Do,bDo,WO,vDo,FDo,TDo,P2,zge,MDo,EDo,QO,CDo,wDo,ADo,B2,Wge,yDo,LDo,HO,xDo,$Do,kDo,I2,Qge,SDo,RDo,UO,PDo,BDo,IDo,q2,Hge,qDo,NDo,JO,jDo,DDo,GDo,N2,Uge,ODo,VDo,YO,XDo,zDo,WDo,j2,Jge,QDo,HDo,KO,UDo,JDo,YDo,D2,Yge,KDo,ZDo,ZO,eGo,oGo,rGo,G2,Kge,tGo,aGo,eV,nGo,sGo,lGo,O2,Zge,iGo,dGo,oV,cGo,fGo,mGo,V2,ehe,gGo,hGo,rV,pGo,uGo,_Go,X2,ohe,bGo,vGo,tV,FGo,TGo,MGo,z2,rhe,EGo,CGo,aV,wGo,AGo,yGo,W2,the,LGo,xGo,nV,$Go,kGo,SGo,Q2,ahe,RGo,PGo,sV,BGo,IGo,qGo,H2,nhe,NGo,jGo,lV,DGo,GGo,OGo,U2,she,VGo,XGo,iV,zGo,WGo,QGo,J2,lhe,HGo,UGo,dV,JGo,YGo,KGo,Y2,ihe,ZGo,eOo,cV,oOo,rOo,tOo,K2,dhe,aOo,nOo,fV,sOo,lOo,iOo,Z2,che,dOo,cOo,mV,fOo,mOo,gOo,ev,fhe,hOo,pOo,gV,uOo,_Oo,bOo,ov,mhe,vOo,FOo,hV,TOo,MOo,EOo,rv,ghe,COo,wOo,pV,AOo,yOo,LOo,tv,hhe,xOo,$Oo,uV,kOo,SOo,ROo,av,POo,phe,BOo,IOo,uhe,qOo,NOo,nv,gNe,Ki,sv,_he,D6,jOo,bhe,DOo,hNe,qo,G6,GOo,Zi,OOo,_V,VOo,XOo,bV,zOo,WOo,QOo,O6,HOo,vhe,UOo,JOo,YOo,mt,V6,KOo,Fhe,ZOo,eVo,ed,oVo,The,rVo,tVo,vV,aVo,nVo,sVo,lv,lVo,no,X6,iVo,Mhe,dVo,cVo,qa,fVo,Ehe,mVo,gVo,Che,hVo,pVo,whe,uVo,_Vo,bVo,V,iv,Ahe,vVo,FVo,FV,TVo,MVo,EVo,dv,yhe,CVo,wVo,TV,AVo,yVo,LVo,cv,Lhe,xVo,$Vo,MV,kVo,SVo,RVo,fv,xhe,PVo,BVo,EV,IVo,qVo,NVo,mv,$he,jVo,DVo,CV,GVo,OVo,VVo,gv,khe,XVo,zVo,wV,WVo,QVo,HVo,hv,She,UVo,JVo,AV,YVo,KVo,ZVo,pv,Rhe,eXo,oXo,yV,rXo,tXo,aXo,uv,Phe,nXo,sXo,LV,lXo,iXo,dXo,_v,Bhe,cXo,fXo,xV,mXo,gXo,hXo,bv,Ihe,pXo,uXo,$V,_Xo,bXo,vXo,vv,qhe,FXo,TXo,kV,MXo,EXo,CXo,Fv,Nhe,wXo,AXo,SV,yXo,LXo,xXo,Tv,jhe,$Xo,kXo,RV,SXo,RXo,PXo,Mv,Dhe,BXo,IXo,PV,qXo,NXo,jXo,Ev,Ghe,DXo,GXo,BV,OXo,VXo,XXo,Cv,Ohe,zXo,WXo,IV,QXo,HXo,UXo,wv,Vhe,JXo,YXo,qV,KXo,ZXo,ezo,Av,Xhe,ozo,rzo,NV,tzo,azo,nzo,yv,zhe,szo,lzo,jV,izo,dzo,czo,Lv,Whe,fzo,mzo,DV,gzo,hzo,pzo,xv,Qhe,uzo,_zo,GV,bzo,vzo,Fzo,$v,Hhe,Tzo,Mzo,OV,Ezo,Czo,wzo,kv,Uhe,Azo,yzo,VV,Lzo,xzo,$zo,Sv,Jhe,kzo,Szo,XV,Rzo,Pzo,Bzo,Rv,Yhe,Izo,qzo,zV,Nzo,jzo,Dzo,Pv,Khe,Gzo,Ozo,WV,Vzo,Xzo,zzo,Bv,Zhe,Wzo,Qzo,QV,Hzo,Uzo,Jzo,Iv,epe,Yzo,Kzo,HV,Zzo,eWo,oWo,qv,ope,rWo,tWo,UV,aWo,nWo,sWo,Nv,rpe,lWo,iWo,JV,dWo,cWo,fWo,jv,tpe,mWo,gWo,YV,hWo,pWo,uWo,Dv,ape,_Wo,bWo,KV,vWo,FWo,TWo,Gv,npe,MWo,EWo,ZV,CWo,wWo,AWo,Ov,spe,yWo,LWo,eX,xWo,$Wo,kWo,Vv,lpe,SWo,RWo,oX,PWo,BWo,IWo,Xv,ipe,qWo,NWo,rX,jWo,DWo,GWo,zv,dpe,OWo,VWo,tX,XWo,zWo,WWo,Wv,cpe,QWo,HWo,aX,UWo,JWo,YWo,Qv,fpe,KWo,ZWo,nX,eQo,oQo,rQo,Hv,tQo,mpe,aQo,nQo,gpe,sQo,lQo,Uv,pNe,od,Jv,hpe,z6,iQo,ppe,dQo,uNe,No,W6,cQo,rd,fQo,sX,mQo,gQo,lX,hQo,pQo,uQo,Q6,_Qo,upe,bQo,vQo,FQo,gt,H6,TQo,_pe,MQo,EQo,td,CQo,bpe,wQo,AQo,iX,yQo,LQo,xQo,Yv,$Qo,so,U6,kQo,vpe,SQo,RQo,Na,PQo,Fpe,BQo,IQo,Tpe,qQo,NQo,Mpe,jQo,DQo,GQo,Epe,Kv,Cpe,OQo,VQo,dX,XQo,zQo,WQo,Zv,QQo,wpe,HQo,UQo,Ape,JQo,YQo,eF,_Ne,ad,oF,ype,J6,KQo,Lpe,ZQo,bNe,jo,Y6,eHo,nd,oHo,cX,rHo,tHo,fX,aHo,nHo,sHo,K6,lHo,xpe,iHo,dHo,cHo,ht,Z6,fHo,$pe,mHo,gHo,sd,hHo,kpe,pHo,uHo,mX,_Ho,bHo,vHo,rF,FHo,lo,ey,THo,Spe,MHo,EHo,ja,CHo,Rpe,wHo,AHo,Ppe,yHo,LHo,Bpe,xHo,$Ho,kHo,Fe,tF,Ipe,SHo,RHo,gX,PHo,BHo,IHo,aF,qpe,qHo,NHo,hX,jHo,DHo,GHo,nF,Npe,OHo,VHo,pX,XHo,zHo,WHo,sF,jpe,QHo,HHo,uX,UHo,JHo,YHo,Bs,Dpe,KHo,ZHo,_X,eUo,oUo,bX,rUo,tUo,aUo,lF,Gpe,nUo,sUo,vX,lUo,iUo,dUo,pt,Ope,cUo,fUo,FX,mUo,gUo,TX,hUo,pUo,MX,uUo,_Uo,bUo,iF,Vpe,vUo,FUo,EX,TUo,MUo,EUo,dF,Xpe,CUo,wUo,CX,AUo,yUo,LUo,cF,zpe,xUo,$Uo,wX,kUo,SUo,RUo,fF,Wpe,PUo,BUo,AX,IUo,qUo,NUo,mF,Qpe,jUo,DUo,yX,GUo,OUo,VUo,gF,Hpe,XUo,zUo,LX,WUo,QUo,HUo,hF,Upe,UUo,JUo,xX,YUo,KUo,ZUo,pF,eJo,Jpe,oJo,rJo,Ype,tJo,aJo,uF,vNe,ld,_F,Kpe,oy,nJo,Zpe,sJo,FNe,Do,ry,lJo,id,iJo,$X,dJo,cJo,kX,fJo,mJo,gJo,ty,hJo,eue,pJo,uJo,_Jo,ut,ay,bJo,oue,vJo,FJo,dd,TJo,rue,MJo,EJo,SX,CJo,wJo,AJo,bF,yJo,io,ny,LJo,tue,xJo,$Jo,Da,kJo,aue,SJo,RJo,nue,PJo,BJo,sue,IJo,qJo,NJo,lue,vF,iue,jJo,DJo,RX,GJo,OJo,VJo,FF,XJo,due,zJo,WJo,cue,QJo,HJo,TF,TNe,cd,MF,fue,sy,UJo,mue,JJo,MNe,Go,ly,YJo,fd,KJo,PX,ZJo,eYo,BX,oYo,rYo,tYo,iy,aYo,gue,nYo,sYo,lYo,_t,dy,iYo,hue,dYo,cYo,md,fYo,pue,mYo,gYo,IX,hYo,pYo,uYo,EF,_Yo,co,cy,bYo,uue,vYo,FYo,Ga,TYo,_ue,MYo,EYo,bue,CYo,wYo,vue,AYo,yYo,LYo,ke,CF,Fue,xYo,$Yo,qX,kYo,SYo,RYo,wF,Tue,PYo,BYo,NX,IYo,qYo,NYo,AF,Mue,jYo,DYo,jX,GYo,OYo,VYo,yF,Eue,XYo,zYo,DX,WYo,QYo,HYo,LF,Cue,UYo,JYo,GX,YYo,KYo,ZYo,xF,wue,eKo,oKo,OX,rKo,tKo,aKo,$F,Aue,nKo,sKo,VX,lKo,iKo,dKo,kF,yue,cKo,fKo,XX,mKo,gKo,hKo,SF,Lue,pKo,uKo,zX,_Ko,bKo,vKo,RF,FKo,xue,TKo,MKo,$ue,EKo,CKo,PF,ENe,gd,BF,kue,fy,wKo,Sue,AKo,CNe,Oo,my,yKo,hd,LKo,WX,xKo,$Ko,QX,kKo,SKo,RKo,gy,PKo,Rue,BKo,IKo,qKo,bt,hy,NKo,Pue,jKo,DKo,pd,GKo,Bue,OKo,VKo,HX,XKo,zKo,WKo,IF,QKo,fo,py,HKo,Iue,UKo,JKo,Oa,YKo,que,KKo,ZKo,Nue,eZo,oZo,jue,rZo,tZo,aZo,Kr,qF,Due,nZo,sZo,UX,lZo,iZo,dZo,NF,Gue,cZo,fZo,JX,mZo,gZo,hZo,jF,Oue,pZo,uZo,YX,_Zo,bZo,vZo,DF,Vue,FZo,TZo,KX,MZo,EZo,CZo,GF,Xue,wZo,AZo,ZX,yZo,LZo,xZo,OF,$Zo,zue,kZo,SZo,Wue,RZo,PZo,VF,wNe,ud,XF,Que,uy,BZo,Hue,IZo,ANe,Vo,_y,qZo,_d,NZo,ez,jZo,DZo,oz,GZo,OZo,VZo,by,XZo,Uue,zZo,WZo,QZo,vt,vy,HZo,Jue,UZo,JZo,bd,YZo,Yue,KZo,ZZo,rz,eer,oer,rer,zF,ter,mo,Fy,aer,Kue,ner,ser,Va,ler,Zue,ier,der,e_e,cer,fer,o_e,mer,ger,her,Se,WF,r_e,per,uer,tz,_er,ber,ver,QF,t_e,Fer,Ter,az,Mer,Eer,Cer,HF,a_e,wer,Aer,nz,yer,Ler,xer,UF,n_e,$er,ker,sz,Ser,Rer,Per,JF,s_e,Ber,Ier,lz,qer,Ner,jer,YF,l_e,Der,Ger,iz,Oer,Ver,Xer,KF,i_e,zer,Wer,dz,Qer,Her,Uer,ZF,d_e,Jer,Yer,cz,Ker,Zer,eor,eT,c_e,oor,ror,fz,tor,aor,nor,oT,sor,f_e,lor,ior,m_e,dor,cor,rT,yNe,vd,tT,g_e,Ty,mor,h_e,gor,LNe,Xo,My,hor,Fd,por,mz,uor,_or,gz,bor,vor,For,Ey,Tor,p_e,Mor,Eor,Cor,Ft,Cy,wor,u_e,Aor,yor,Td,Lor,__e,xor,$or,hz,kor,Sor,Ror,aT,Por,go,wy,Bor,b_e,Ior,qor,Xa,Nor,v_e,jor,Dor,F_e,Gor,Oor,T_e,Vor,Xor,zor,Ay,nT,M_e,Wor,Qor,pz,Hor,Uor,Jor,sT,E_e,Yor,Kor,uz,Zor,err,orr,lT,rrr,C_e,trr,arr,w_e,nrr,srr,iT,xNe,Md,dT,A_e,yy,lrr,y_e,irr,$Ne,zo,Ly,drr,Ed,crr,_z,frr,mrr,bz,grr,hrr,prr,xy,urr,L_e,_rr,brr,vrr,Tt,$y,Frr,x_e,Trr,Mrr,Cd,Err,$_e,Crr,wrr,vz,Arr,yrr,Lrr,cT,xrr,ho,ky,$rr,k_e,krr,Srr,za,Rrr,S_e,Prr,Brr,R_e,Irr,qrr,P_e,Nrr,jrr,Drr,Zr,fT,B_e,Grr,Orr,Fz,Vrr,Xrr,zrr,mT,I_e,Wrr,Qrr,Tz,Hrr,Urr,Jrr,gT,q_e,Yrr,Krr,Mz,Zrr,etr,otr,hT,N_e,rtr,ttr,Ez,atr,ntr,str,pT,j_e,ltr,itr,Cz,dtr,ctr,ftr,uT,mtr,D_e,gtr,htr,G_e,ptr,utr,_T,kNe,wd,bT,O_e,Sy,_tr,V_e,btr,SNe,Wo,Ry,vtr,Ad,Ftr,wz,Ttr,Mtr,Az,Etr,Ctr,wtr,Py,Atr,X_e,ytr,Ltr,xtr,Mt,By,$tr,z_e,ktr,Str,yd,Rtr,W_e,Ptr,Btr,yz,Itr,qtr,Ntr,vT,jtr,po,Iy,Dtr,Q_e,Gtr,Otr,Wa,Vtr,H_e,Xtr,ztr,U_e,Wtr,Qtr,J_e,Htr,Utr,Jtr,Ld,FT,Y_e,Ytr,Ktr,Lz,Ztr,ear,oar,TT,K_e,rar,tar,xz,aar,nar,sar,MT,Z_e,lar,iar,$z,dar,car,far,ET,mar,e3e,gar,har,o3e,par,uar,CT,RNe,xd,wT,r3e,qy,_ar,t3e,bar,PNe,Qo,Ny,Far,$d,Tar,kz,Mar,Ear,Sz,Car,war,Aar,jy,yar,a3e,Lar,xar,$ar,Et,Dy,kar,n3e,Sar,Rar,kd,Par,s3e,Bar,Iar,Rz,qar,Nar,jar,AT,Dar,uo,Gy,Gar,l3e,Oar,Var,Qa,Xar,i3e,zar,War,d3e,Qar,Har,c3e,Uar,Jar,Yar,Oy,yT,f3e,Kar,Zar,Pz,enr,onr,rnr,LT,m3e,tnr,anr,Bz,nnr,snr,lnr,xT,inr,g3e,dnr,cnr,h3e,fnr,mnr,$T,BNe,Sd,kT,p3e,Vy,gnr,u3e,hnr,INe,Ho,Xy,pnr,Rd,unr,Iz,_nr,bnr,qz,vnr,Fnr,Tnr,zy,Mnr,_3e,Enr,Cnr,wnr,Ct,Wy,Anr,b3e,ynr,Lnr,Pd,xnr,v3e,$nr,knr,Nz,Snr,Rnr,Pnr,ST,Bnr,_o,Qy,Inr,F3e,qnr,Nnr,Ha,jnr,T3e,Dnr,Gnr,M3e,Onr,Vnr,E3e,Xnr,znr,Wnr,C3e,RT,w3e,Qnr,Hnr,jz,Unr,Jnr,Ynr,PT,Knr,A3e,Znr,esr,y3e,osr,rsr,BT,qNe,Bd,IT,L3e,Hy,tsr,x3e,asr,NNe,Uo,Uy,nsr,Id,ssr,Dz,lsr,isr,Gz,dsr,csr,fsr,Jy,msr,$3e,gsr,hsr,psr,wt,Yy,usr,k3e,_sr,bsr,qd,vsr,S3e,Fsr,Tsr,Oz,Msr,Esr,Csr,qT,wsr,bo,Ky,Asr,R3e,ysr,Lsr,Ua,xsr,P3e,$sr,ksr,B3e,Ssr,Rsr,I3e,Psr,Bsr,Isr,Ja,NT,q3e,qsr,Nsr,Vz,jsr,Dsr,Gsr,jT,N3e,Osr,Vsr,Xz,Xsr,zsr,Wsr,DT,j3e,Qsr,Hsr,zz,Usr,Jsr,Ysr,GT,D3e,Ksr,Zsr,Wz,elr,olr,rlr,OT,tlr,G3e,alr,nlr,O3e,slr,llr,VT,jNe,Nd,XT,V3e,Zy,ilr,X3e,dlr,DNe,Jo,eL,clr,jd,flr,Qz,mlr,glr,Hz,hlr,plr,ulr,oL,_lr,z3e,blr,vlr,Flr,At,rL,Tlr,W3e,Mlr,Elr,Dd,Clr,Q3e,wlr,Alr,Uz,ylr,Llr,xlr,zT,$lr,vo,tL,klr,H3e,Slr,Rlr,Ya,Plr,U3e,Blr,Ilr,J3e,qlr,Nlr,Y3e,jlr,Dlr,Glr,K3e,WT,Z3e,Olr,Vlr,Jz,Xlr,zlr,Wlr,QT,Qlr,e1e,Hlr,Ulr,o1e,Jlr,Ylr,HT,GNe,Gd,UT,r1e,aL,Klr,t1e,Zlr,ONe,Yo,nL,eir,Od,oir,Yz,rir,tir,Kz,air,nir,sir,sL,lir,a1e,iir,dir,cir,yt,lL,fir,n1e,mir,gir,Vd,hir,s1e,pir,uir,Zz,_ir,bir,vir,JT,Fir,wr,iL,Tir,l1e,Mir,Eir,Ka,Cir,i1e,wir,Air,d1e,yir,Lir,c1e,xir,$ir,kir,N,YT,f1e,Sir,Rir,eW,Pir,Bir,Iir,KT,m1e,qir,Nir,oW,jir,Dir,Gir,ZT,g1e,Oir,Vir,rW,Xir,zir,Wir,e7,h1e,Qir,Hir,tW,Uir,Jir,Yir,o7,p1e,Kir,Zir,aW,edr,odr,rdr,r7,u1e,tdr,adr,nW,ndr,sdr,ldr,t7,_1e,idr,ddr,sW,cdr,fdr,mdr,a7,b1e,gdr,hdr,lW,pdr,udr,_dr,n7,v1e,bdr,vdr,iW,Fdr,Tdr,Mdr,s7,F1e,Edr,Cdr,dW,wdr,Adr,ydr,l7,T1e,Ldr,xdr,cW,$dr,kdr,Sdr,i7,M1e,Rdr,Pdr,fW,Bdr,Idr,qdr,d7,E1e,Ndr,jdr,mW,Ddr,Gdr,Odr,c7,C1e,Vdr,Xdr,gW,zdr,Wdr,Qdr,f7,w1e,Hdr,Udr,hW,Jdr,Ydr,Kdr,m7,A1e,Zdr,ecr,pW,ocr,rcr,tcr,g7,y1e,acr,ncr,uW,scr,lcr,icr,Is,L1e,dcr,ccr,_W,fcr,mcr,bW,gcr,hcr,pcr,h7,x1e,ucr,_cr,vW,bcr,vcr,Fcr,p7,$1e,Tcr,Mcr,FW,Ecr,Ccr,wcr,u7,k1e,Acr,ycr,TW,Lcr,xcr,$cr,_7,S1e,kcr,Scr,MW,Rcr,Pcr,Bcr,b7,R1e,Icr,qcr,EW,Ncr,jcr,Dcr,v7,P1e,Gcr,Ocr,CW,Vcr,Xcr,zcr,F7,B1e,Wcr,Qcr,wW,Hcr,Ucr,Jcr,T7,I1e,Ycr,Kcr,AW,Zcr,efr,ofr,M7,q1e,rfr,tfr,yW,afr,nfr,sfr,E7,N1e,lfr,ifr,LW,dfr,cfr,ffr,C7,j1e,mfr,gfr,xW,hfr,pfr,ufr,w7,D1e,_fr,bfr,$W,vfr,Ffr,Tfr,A7,G1e,Mfr,Efr,kW,Cfr,wfr,Afr,y7,O1e,yfr,Lfr,SW,xfr,$fr,kfr,L7,V1e,Sfr,Rfr,RW,Pfr,Bfr,Ifr,x7,X1e,qfr,Nfr,PW,jfr,Dfr,Gfr,$7,z1e,Ofr,Vfr,BW,Xfr,zfr,Wfr,k7,W1e,Qfr,Hfr,IW,Ufr,Jfr,Yfr,S7,Q1e,Kfr,Zfr,qW,emr,omr,rmr,R7,H1e,tmr,amr,NW,nmr,smr,lmr,P7,U1e,imr,dmr,jW,cmr,fmr,mmr,B7,J1e,gmr,hmr,DW,pmr,umr,_mr,I7,Y1e,bmr,vmr,GW,Fmr,Tmr,Mmr,q7,K1e,Emr,Cmr,OW,wmr,Amr,ymr,N7,Z1e,Lmr,xmr,VW,$mr,kmr,Smr,j7,ebe,Rmr,Pmr,XW,Bmr,Imr,qmr,D7,obe,Nmr,jmr,zW,Dmr,Gmr,Omr,G7,rbe,Vmr,Xmr,WW,zmr,Wmr,Qmr,O7,VNe,Xd,V7,tbe,dL,Hmr,abe,Umr,XNe,Ko,cL,Jmr,zd,Ymr,QW,Kmr,Zmr,HW,egr,ogr,rgr,fL,tgr,nbe,agr,ngr,sgr,Lt,mL,lgr,sbe,igr,dgr,Wd,cgr,lbe,fgr,mgr,UW,ggr,hgr,pgr,X7,ugr,Ar,gL,_gr,ibe,bgr,vgr,Za,Fgr,dbe,Tgr,Mgr,cbe,Egr,Cgr,fbe,wgr,Agr,ygr,se,z7,mbe,Lgr,xgr,JW,$gr,kgr,Sgr,W7,gbe,Rgr,Pgr,YW,Bgr,Igr,qgr,Q7,hbe,Ngr,jgr,KW,Dgr,Ggr,Ogr,H7,pbe,Vgr,Xgr,ZW,zgr,Wgr,Qgr,U7,ube,Hgr,Ugr,eQ,Jgr,Ygr,Kgr,J7,_be,Zgr,ehr,oQ,ohr,rhr,thr,Y7,bbe,ahr,nhr,rQ,shr,lhr,ihr,K7,vbe,dhr,chr,tQ,fhr,mhr,ghr,Z7,Fbe,hhr,phr,aQ,uhr,_hr,bhr,e9,Tbe,vhr,Fhr,nQ,Thr,Mhr,Ehr,o9,Mbe,Chr,whr,sQ,Ahr,yhr,Lhr,r9,Ebe,xhr,$hr,lQ,khr,Shr,Rhr,t9,Cbe,Phr,Bhr,iQ,Ihr,qhr,Nhr,a9,wbe,jhr,Dhr,dQ,Ghr,Ohr,Vhr,n9,Abe,Xhr,zhr,cQ,Whr,Qhr,Hhr,s9,ybe,Uhr,Jhr,fQ,Yhr,Khr,Zhr,l9,Lbe,epr,opr,mQ,rpr,tpr,apr,i9,xbe,npr,spr,gQ,lpr,ipr,dpr,d9,$be,cpr,fpr,hQ,mpr,gpr,hpr,c9,kbe,ppr,upr,pQ,_pr,bpr,vpr,f9,Sbe,Fpr,Tpr,uQ,Mpr,Epr,Cpr,m9,Rbe,wpr,Apr,_Q,ypr,Lpr,xpr,g9,Pbe,$pr,kpr,bQ,Spr,Rpr,Ppr,h9,zNe,Qd,p9,Bbe,hL,Bpr,Ibe,Ipr,WNe,Zo,pL,qpr,Hd,Npr,vQ,jpr,Dpr,FQ,Gpr,Opr,Vpr,uL,Xpr,qbe,zpr,Wpr,Qpr,xt,_L,Hpr,Nbe,Upr,Jpr,Ud,Ypr,jbe,Kpr,Zpr,TQ,eur,our,rur,u9,tur,yr,bL,aur,Dbe,nur,sur,en,lur,Gbe,iur,dur,Obe,cur,fur,Vbe,mur,gur,hur,Me,_9,Xbe,pur,uur,MQ,_ur,bur,vur,b9,zbe,Fur,Tur,EQ,Mur,Eur,Cur,v9,Wbe,wur,Aur,CQ,yur,Lur,xur,F9,Qbe,$ur,kur,wQ,Sur,Rur,Pur,T9,Hbe,Bur,Iur,AQ,qur,Nur,jur,M9,Ube,Dur,Gur,yQ,Our,Vur,Xur,E9,Jbe,zur,Wur,LQ,Qur,Hur,Uur,C9,Ybe,Jur,Yur,xQ,Kur,Zur,e_r,w9,Kbe,o_r,r_r,$Q,t_r,a_r,n_r,A9,Zbe,s_r,l_r,kQ,i_r,d_r,c_r,y9,e2e,f_r,m_r,SQ,g_r,h_r,p_r,L9,o2e,u_r,__r,RQ,b_r,v_r,F_r,x9,QNe,Jd,$9,r2e,vL,T_r,t2e,M_r,HNe,er,FL,E_r,Yd,C_r,PQ,w_r,A_r,BQ,y_r,L_r,x_r,TL,$_r,a2e,k_r,S_r,R_r,$t,ML,P_r,n2e,B_r,I_r,Kd,q_r,s2e,N_r,j_r,IQ,D_r,G_r,O_r,k9,V_r,Lr,EL,X_r,l2e,z_r,W_r,on,Q_r,i2e,H_r,U_r,d2e,J_r,Y_r,c2e,K_r,Z_r,e3r,rn,S9,f2e,o3r,r3r,qQ,t3r,a3r,n3r,R9,m2e,s3r,l3r,NQ,i3r,d3r,c3r,P9,g2e,f3r,m3r,jQ,g3r,h3r,p3r,B9,h2e,u3r,_3r,DQ,b3r,v3r,F3r,I9,UNe,Zd,q9,p2e,CL,T3r,u2e,M3r,JNe,or,wL,E3r,ec,C3r,GQ,w3r,A3r,OQ,y3r,L3r,x3r,AL,$3r,_2e,k3r,S3r,R3r,kt,yL,P3r,b2e,B3r,I3r,oc,q3r,v2e,N3r,j3r,VQ,D3r,G3r,O3r,N9,V3r,xr,LL,X3r,F2e,z3r,W3r,tn,Q3r,T2e,H3r,U3r,M2e,J3r,Y3r,E2e,K3r,Z3r,e1r,ie,j9,C2e,o1r,r1r,XQ,t1r,a1r,n1r,D9,w2e,s1r,l1r,zQ,i1r,d1r,c1r,G9,A2e,f1r,m1r,WQ,g1r,h1r,p1r,O9,y2e,u1r,_1r,QQ,b1r,v1r,F1r,V9,L2e,T1r,M1r,HQ,E1r,C1r,w1r,X9,x2e,A1r,y1r,UQ,L1r,x1r,$1r,z9,$2e,k1r,S1r,JQ,R1r,P1r,B1r,W9,k2e,I1r,q1r,YQ,N1r,j1r,D1r,Q9,S2e,G1r,O1r,KQ,V1r,X1r,z1r,H9,R2e,W1r,Q1r,ZQ,H1r,U1r,J1r,U9,P2e,Y1r,K1r,eH,Z1r,ebr,obr,J9,B2e,rbr,tbr,oH,abr,nbr,sbr,Y9,I2e,lbr,ibr,rH,dbr,cbr,fbr,K9,q2e,mbr,gbr,tH,hbr,pbr,ubr,Z9,N2e,_br,bbr,aH,vbr,Fbr,Tbr,eM,j2e,Mbr,Ebr,nH,Cbr,wbr,Abr,oM,D2e,ybr,Lbr,sH,xbr,$br,kbr,rM,G2e,Sbr,Rbr,lH,Pbr,Bbr,Ibr,tM,O2e,qbr,Nbr,iH,jbr,Dbr,Gbr,aM,V2e,Obr,Vbr,dH,Xbr,zbr,Wbr,nM,YNe,rc,sM,X2e,xL,Qbr,z2e,Hbr,KNe,rr,$L,Ubr,tc,Jbr,cH,Ybr,Kbr,fH,Zbr,e2r,o2r,kL,r2r,W2e,t2r,a2r,n2r,St,SL,s2r,Q2e,l2r,i2r,ac,d2r,H2e,c2r,f2r,mH,m2r,g2r,h2r,lM,p2r,$r,RL,u2r,U2e,_2r,b2r,an,v2r,J2e,F2r,T2r,Y2e,M2r,E2r,K2e,C2r,w2r,A2r,ye,iM,Z2e,y2r,L2r,gH,x2r,$2r,k2r,dM,eve,S2r,R2r,hH,P2r,B2r,I2r,cM,ove,q2r,N2r,pH,j2r,D2r,G2r,fM,rve,O2r,V2r,uH,X2r,z2r,W2r,mM,tve,Q2r,H2r,_H,U2r,J2r,Y2r,gM,ave,K2r,Z2r,bH,evr,ovr,rvr,hM,nve,tvr,avr,vH,nvr,svr,lvr,pM,sve,ivr,dvr,FH,cvr,fvr,mvr,uM,lve,gvr,hvr,TH,pvr,uvr,_vr,_M,ive,bvr,vvr,MH,Fvr,Tvr,Mvr,bM,ZNe,nc,vM,dve,PL,Evr,cve,Cvr,eje,tr,BL,wvr,sc,Avr,EH,yvr,Lvr,CH,xvr,$vr,kvr,IL,Svr,fve,Rvr,Pvr,Bvr,Rt,qL,Ivr,mve,qvr,Nvr,lc,jvr,gve,Dvr,Gvr,wH,Ovr,Vvr,Xvr,FM,zvr,kr,NL,Wvr,hve,Qvr,Hvr,nn,Uvr,pve,Jvr,Yvr,uve,Kvr,Zvr,_ve,eFr,oFr,rFr,oe,TM,bve,tFr,aFr,AH,nFr,sFr,lFr,MM,vve,iFr,dFr,yH,cFr,fFr,mFr,EM,Fve,gFr,hFr,LH,pFr,uFr,_Fr,CM,Tve,bFr,vFr,xH,FFr,TFr,MFr,wM,Mve,EFr,CFr,$H,wFr,AFr,yFr,AM,Eve,LFr,xFr,kH,$Fr,kFr,SFr,yM,Cve,RFr,PFr,SH,BFr,IFr,qFr,LM,wve,NFr,jFr,RH,DFr,GFr,OFr,xM,Ave,VFr,XFr,PH,zFr,WFr,QFr,$M,yve,HFr,UFr,BH,JFr,YFr,KFr,kM,Lve,ZFr,eTr,IH,oTr,rTr,tTr,SM,xve,aTr,nTr,qH,sTr,lTr,iTr,RM,$ve,dTr,cTr,NH,fTr,mTr,gTr,PM,kve,hTr,pTr,jH,uTr,_Tr,bTr,BM,Sve,vTr,FTr,DH,TTr,MTr,ETr,IM,Rve,CTr,wTr,GH,ATr,yTr,LTr,qM,Pve,xTr,$Tr,OH,kTr,STr,RTr,NM,Bve,PTr,BTr,VH,ITr,qTr,NTr,jM,Ive,jTr,DTr,XH,GTr,OTr,VTr,DM,qve,XTr,zTr,zH,WTr,QTr,HTr,GM,Nve,UTr,JTr,WH,YTr,KTr,ZTr,OM,jve,e7r,o7r,QH,r7r,t7r,a7r,VM,Dve,n7r,s7r,HH,l7r,i7r,d7r,XM,Gve,c7r,f7r,UH,m7r,g7r,h7r,zM,Ove,p7r,u7r,JH,_7r,b7r,v7r,WM,Vve,F7r,T7r,YH,M7r,E7r,C7r,QM,oje,ic,HM,Xve,jL,w7r,zve,A7r,rje,ar,DL,y7r,dc,L7r,KH,x7r,$7r,ZH,k7r,S7r,R7r,GL,P7r,Wve,B7r,I7r,q7r,Pt,OL,N7r,Qve,j7r,D7r,cc,G7r,Hve,O7r,V7r,eU,X7r,z7r,W7r,UM,Q7r,Sr,VL,H7r,Uve,U7r,J7r,sn,Y7r,Jve,K7r,Z7r,Yve,e9r,o9r,Kve,r9r,t9r,a9r,pe,JM,Zve,n9r,s9r,oU,l9r,i9r,d9r,YM,eFe,c9r,f9r,rU,m9r,g9r,h9r,KM,oFe,p9r,u9r,tU,_9r,b9r,v9r,ZM,rFe,F9r,T9r,aU,M9r,E9r,C9r,e4,tFe,w9r,A9r,nU,y9r,L9r,x9r,o4,aFe,$9r,k9r,sU,S9r,R9r,P9r,r4,nFe,B9r,I9r,lU,q9r,N9r,j9r,t4,sFe,D9r,G9r,iU,O9r,V9r,X9r,a4,lFe,z9r,W9r,dU,Q9r,H9r,U9r,n4,iFe,J9r,Y9r,cU,K9r,Z9r,eMr,s4,dFe,oMr,rMr,fU,tMr,aMr,nMr,l4,cFe,sMr,lMr,mU,iMr,dMr,cMr,i4,fFe,fMr,mMr,gU,gMr,hMr,pMr,d4,mFe,uMr,_Mr,hU,bMr,vMr,FMr,c4,gFe,TMr,MMr,pU,EMr,CMr,wMr,f4,hFe,AMr,yMr,uU,LMr,xMr,$Mr,m4,pFe,kMr,SMr,_U,RMr,PMr,BMr,g4,tje,fc,h4,uFe,XL,IMr,_Fe,qMr,aje,nr,zL,NMr,mc,jMr,bU,DMr,GMr,vU,OMr,VMr,XMr,WL,zMr,bFe,WMr,QMr,HMr,Bt,QL,UMr,vFe,JMr,YMr,gc,KMr,FFe,ZMr,e4r,FU,o4r,r4r,t4r,p4,a4r,Rr,HL,n4r,TFe,s4r,l4r,ln,i4r,MFe,d4r,c4r,EFe,f4r,m4r,CFe,g4r,h4r,p4r,UL,u4,wFe,u4r,_4r,TU,b4r,v4r,F4r,_4,AFe,T4r,M4r,MU,E4r,C4r,w4r,b4,nje,hc,v4,yFe,JL,A4r,LFe,y4r,sje,sr,YL,L4r,pc,x4r,EU,$4r,k4r,CU,S4r,R4r,P4r,KL,B4r,xFe,I4r,q4r,N4r,It,ZL,j4r,$Fe,D4r,G4r,uc,O4r,kFe,V4r,X4r,wU,z4r,W4r,Q4r,F4,H4r,Pr,e8,U4r,SFe,J4r,Y4r,dn,K4r,RFe,Z4r,eEr,PFe,oEr,rEr,BFe,tEr,aEr,nEr,IFe,T4,qFe,sEr,lEr,AU,iEr,dEr,cEr,M4,lje,_c,E4,NFe,o8,fEr,jFe,mEr,ije,lr,r8,gEr,bc,hEr,yU,pEr,uEr,LU,_Er,bEr,vEr,t8,FEr,DFe,TEr,MEr,EEr,qt,a8,CEr,GFe,wEr,AEr,vc,yEr,OFe,LEr,xEr,xU,$Er,kEr,SEr,C4,REr,Br,n8,PEr,VFe,BEr,IEr,cn,qEr,XFe,NEr,jEr,zFe,DEr,GEr,WFe,OEr,VEr,XEr,de,w4,QFe,zEr,WEr,$U,QEr,HEr,UEr,A4,HFe,JEr,YEr,kU,KEr,ZEr,eCr,y4,UFe,oCr,rCr,SU,tCr,aCr,nCr,L4,JFe,sCr,lCr,RU,iCr,dCr,cCr,x4,YFe,fCr,mCr,PU,gCr,hCr,pCr,$4,KFe,uCr,_Cr,BU,bCr,vCr,FCr,k4,ZFe,TCr,MCr,IU,ECr,CCr,wCr,S4,eTe,ACr,yCr,qU,LCr,xCr,$Cr,R4,oTe,kCr,SCr,NU,RCr,PCr,BCr,P4,rTe,ICr,qCr,jU,NCr,jCr,DCr,B4,tTe,GCr,OCr,DU,VCr,XCr,zCr,I4,aTe,WCr,QCr,GU,HCr,UCr,JCr,q4,nTe,YCr,KCr,OU,ZCr,e5r,o5r,N4,sTe,r5r,t5r,VU,a5r,n5r,s5r,j4,lTe,l5r,i5r,XU,d5r,c5r,f5r,D4,iTe,m5r,g5r,zU,h5r,p5r,u5r,G4,dTe,_5r,b5r,WU,v5r,F5r,T5r,O4,cTe,M5r,E5r,QU,C5r,w5r,A5r,V4,fTe,y5r,L5r,HU,x5r,$5r,k5r,X4,mTe,S5r,R5r,UU,P5r,B5r,I5r,z4,dje,Fc,W4,gTe,s8,q5r,hTe,N5r,cje,ir,l8,j5r,Tc,D5r,JU,G5r,O5r,YU,V5r,X5r,z5r,i8,W5r,pTe,Q5r,H5r,U5r,Nt,d8,J5r,uTe,Y5r,K5r,Mc,Z5r,_Te,ewr,owr,KU,rwr,twr,awr,Q4,nwr,Ir,c8,swr,bTe,lwr,iwr,fn,dwr,vTe,cwr,fwr,FTe,mwr,gwr,TTe,hwr,pwr,uwr,ce,H4,MTe,_wr,bwr,ZU,vwr,Fwr,Twr,U4,ETe,Mwr,Ewr,eJ,Cwr,wwr,Awr,J4,CTe,ywr,Lwr,oJ,xwr,$wr,kwr,Y4,wTe,Swr,Rwr,rJ,Pwr,Bwr,Iwr,K4,ATe,qwr,Nwr,tJ,jwr,Dwr,Gwr,Z4,yTe,Owr,Vwr,aJ,Xwr,zwr,Wwr,eE,LTe,Qwr,Hwr,nJ,Uwr,Jwr,Ywr,oE,xTe,Kwr,Zwr,sJ,e0r,o0r,r0r,rE,$Te,t0r,a0r,lJ,n0r,s0r,l0r,tE,kTe,i0r,d0r,iJ,c0r,f0r,m0r,aE,STe,g0r,h0r,dJ,p0r,u0r,_0r,nE,RTe,b0r,v0r,cJ,F0r,T0r,M0r,sE,PTe,E0r,C0r,fJ,w0r,A0r,y0r,lE,BTe,L0r,x0r,mJ,$0r,k0r,S0r,iE,ITe,R0r,P0r,gJ,B0r,I0r,q0r,dE,qTe,N0r,j0r,hJ,D0r,G0r,O0r,cE,NTe,V0r,X0r,pJ,z0r,W0r,Q0r,fE,jTe,H0r,U0r,uJ,J0r,Y0r,K0r,mE,DTe,Z0r,eAr,_J,oAr,rAr,tAr,gE,GTe,aAr,nAr,bJ,sAr,lAr,iAr,hE,fje,Ec,pE,OTe,f8,dAr,VTe,cAr,mje,dr,m8,fAr,Cc,mAr,vJ,gAr,hAr,FJ,pAr,uAr,_Ar,g8,bAr,XTe,vAr,FAr,TAr,jt,h8,MAr,zTe,EAr,CAr,wc,wAr,WTe,AAr,yAr,TJ,LAr,xAr,$Ar,uE,kAr,qr,p8,SAr,QTe,RAr,PAr,mn,BAr,HTe,IAr,qAr,UTe,NAr,jAr,JTe,DAr,GAr,OAr,YTe,_E,KTe,VAr,XAr,MJ,zAr,WAr,QAr,bE,gje,Ac,vE,ZTe,u8,HAr,e7e,UAr,hje,cr,_8,JAr,yc,YAr,EJ,KAr,ZAr,CJ,e6r,o6r,r6r,b8,t6r,o7e,a6r,n6r,s6r,Dt,v8,l6r,r7e,i6r,d6r,Lc,c6r,t7e,f6r,m6r,wJ,g6r,h6r,p6r,FE,u6r,Nr,F8,_6r,a7e,b6r,v6r,gn,F6r,n7e,T6r,M6r,s7e,E6r,C6r,l7e,w6r,A6r,y6r,i7e,TE,d7e,L6r,x6r,AJ,$6r,k6r,S6r,ME,pje,xc,EE,c7e,T8,R6r,f7e,P6r,uje,fr,M8,B6r,$c,I6r,yJ,q6r,N6r,LJ,j6r,D6r,G6r,E8,O6r,m7e,V6r,X6r,z6r,Gt,C8,W6r,g7e,Q6r,H6r,kc,U6r,h7e,J6r,Y6r,xJ,K6r,Z6r,eyr,CE,oyr,jr,w8,ryr,p7e,tyr,ayr,hn,nyr,u7e,syr,lyr,_7e,iyr,dyr,b7e,cyr,fyr,myr,te,wE,v7e,gyr,hyr,$J,pyr,uyr,_yr,AE,F7e,byr,vyr,kJ,Fyr,Tyr,Myr,yE,T7e,Eyr,Cyr,SJ,wyr,Ayr,yyr,LE,M7e,Lyr,xyr,RJ,$yr,kyr,Syr,xE,E7e,Ryr,Pyr,PJ,Byr,Iyr,qyr,$E,C7e,Nyr,jyr,BJ,Dyr,Gyr,Oyr,kE,w7e,Vyr,Xyr,IJ,zyr,Wyr,Qyr,SE,A7e,Hyr,Uyr,qJ,Jyr,Yyr,Kyr,RE,y7e,Zyr,eLr,NJ,oLr,rLr,tLr,PE,L7e,aLr,nLr,jJ,sLr,lLr,iLr,BE,x7e,dLr,cLr,DJ,fLr,mLr,gLr,IE,$7e,hLr,pLr,GJ,uLr,_Lr,bLr,qE,k7e,vLr,FLr,OJ,TLr,MLr,ELr,NE,S7e,CLr,wLr,VJ,ALr,yLr,LLr,jE,R7e,xLr,$Lr,XJ,kLr,SLr,RLr,DE,P7e,PLr,BLr,zJ,ILr,qLr,NLr,GE,B7e,jLr,DLr,WJ,GLr,OLr,VLr,OE,I7e,XLr,zLr,QJ,WLr,QLr,HLr,VE,q7e,ULr,JLr,HJ,YLr,KLr,ZLr,XE,N7e,e8r,o8r,UJ,r8r,t8r,a8r,zE,j7e,n8r,s8r,JJ,l8r,i8r,d8r,WE,D7e,c8r,f8r,YJ,m8r,g8r,h8r,QE,G7e,p8r,u8r,KJ,_8r,b8r,v8r,HE,O7e,F8r,T8r,ZJ,M8r,E8r,C8r,UE,V7e,w8r,A8r,eY,y8r,L8r,x8r,JE,_je,Sc,YE,X7e,A8,$8r,z7e,k8r,bje,mr,y8,S8r,Rc,R8r,oY,P8r,B8r,rY,I8r,q8r,N8r,L8,j8r,W7e,D8r,G8r,O8r,Ot,x8,V8r,Q7e,X8r,z8r,Pc,W8r,H7e,Q8r,H8r,tY,U8r,J8r,Y8r,KE,K8r,Dr,$8,Z8r,U7e,exr,oxr,pn,rxr,J7e,txr,axr,Y7e,nxr,sxr,K7e,lxr,ixr,dxr,Re,ZE,Z7e,cxr,fxr,aY,mxr,gxr,hxr,eC,e9e,pxr,uxr,nY,_xr,bxr,vxr,oC,o9e,Fxr,Txr,sY,Mxr,Exr,Cxr,rC,r9e,wxr,Axr,lY,yxr,Lxr,xxr,tC,t9e,$xr,kxr,iY,Sxr,Rxr,Pxr,aC,a9e,Bxr,Ixr,dY,qxr,Nxr,jxr,nC,n9e,Dxr,Gxr,cY,Oxr,Vxr,Xxr,sC,s9e,zxr,Wxr,fY,Qxr,Hxr,Uxr,lC,l9e,Jxr,Yxr,mY,Kxr,Zxr,e$r,iC,vje,Bc,dC,i9e,k8,o$r,d9e,r$r,Fje,gr,S8,t$r,Ic,a$r,gY,n$r,s$r,hY,l$r,i$r,d$r,R8,c$r,c9e,f$r,m$r,g$r,Vt,P8,h$r,f9e,p$r,u$r,qc,_$r,m9e,b$r,v$r,pY,F$r,T$r,M$r,cC,E$r,Gr,B8,C$r,g9e,w$r,A$r,un,y$r,h9e,L$r,x$r,p9e,$$r,k$r,u9e,S$r,R$r,P$r,Ee,fC,_9e,B$r,I$r,uY,q$r,N$r,j$r,mC,b9e,D$r,G$r,_Y,O$r,V$r,X$r,gC,v9e,z$r,W$r,bY,Q$r,H$r,U$r,hC,F9e,J$r,Y$r,vY,K$r,Z$r,ekr,pC,T9e,okr,rkr,FY,tkr,akr,nkr,uC,M9e,skr,lkr,TY,ikr,dkr,ckr,_C,E9e,fkr,mkr,MY,gkr,hkr,pkr,bC,C9e,ukr,_kr,EY,bkr,vkr,Fkr,vC,w9e,Tkr,Mkr,CY,Ekr,Ckr,wkr,FC,A9e,Akr,ykr,wY,Lkr,xkr,$kr,TC,y9e,kkr,Skr,AY,Rkr,Pkr,Bkr,MC,L9e,Ikr,qkr,yY,Nkr,jkr,Dkr,EC,Tje,Nc,CC,x9e,I8,Gkr,$9e,Okr,Mje,hr,q8,Vkr,jc,Xkr,LY,zkr,Wkr,xY,Qkr,Hkr,Ukr,N8,Jkr,k9e,Ykr,Kkr,Zkr,Xt,j8,eSr,S9e,oSr,rSr,Dc,tSr,R9e,aSr,nSr,$Y,sSr,lSr,iSr,wC,dSr,Or,D8,cSr,P9e,fSr,mSr,_n,gSr,B9e,hSr,pSr,I9e,uSr,_Sr,q9e,bSr,vSr,FSr,Le,AC,N9e,TSr,MSr,kY,ESr,CSr,wSr,yC,j9e,ASr,ySr,SY,LSr,xSr,$Sr,LC,D9e,kSr,SSr,RY,RSr,PSr,BSr,xC,G9e,ISr,qSr,PY,NSr,jSr,DSr,$C,O9e,GSr,OSr,BY,VSr,XSr,zSr,kC,V9e,WSr,QSr,IY,HSr,USr,JSr,SC,X9e,YSr,KSr,qY,ZSr,eRr,oRr,RC,z9e,rRr,tRr,NY,aRr,nRr,sRr,PC,W9e,lRr,iRr,jY,dRr,cRr,fRr,BC,Q9e,mRr,gRr,DY,hRr,pRr,uRr,IC,Eje,Gc,qC,H9e,G8,_Rr,U9e,bRr,Cje,pr,O8,vRr,Oc,FRr,GY,TRr,MRr,OY,ERr,CRr,wRr,V8,ARr,J9e,yRr,LRr,xRr,zt,X8,$Rr,Y9e,kRr,SRr,Vc,RRr,K9e,PRr,BRr,VY,IRr,qRr,NRr,NC,jRr,Vr,z8,DRr,Z9e,GRr,ORr,bn,VRr,eMe,XRr,zRr,oMe,WRr,QRr,rMe,HRr,URr,JRr,Pe,jC,tMe,YRr,KRr,XY,ZRr,ePr,oPr,DC,aMe,rPr,tPr,zY,aPr,nPr,sPr,GC,nMe,lPr,iPr,WY,dPr,cPr,fPr,OC,sMe,mPr,gPr,QY,hPr,pPr,uPr,VC,lMe,_Pr,bPr,HY,vPr,FPr,TPr,XC,iMe,MPr,EPr,UY,CPr,wPr,APr,zC,dMe,yPr,LPr,JY,xPr,$Pr,kPr,WC,cMe,SPr,RPr,YY,PPr,BPr,IPr,QC,fMe,qPr,NPr,KY,jPr,DPr,GPr,HC,wje,Xc,UC,mMe,W8,OPr,gMe,VPr,Aje,ur,Q8,XPr,zc,zPr,ZY,WPr,QPr,eK,HPr,UPr,JPr,H8,YPr,hMe,KPr,ZPr,eBr,Wt,U8,oBr,pMe,rBr,tBr,Wc,aBr,uMe,nBr,sBr,oK,lBr,iBr,dBr,JC,cBr,Xr,J8,fBr,_Me,mBr,gBr,vn,hBr,bMe,pBr,uBr,vMe,_Br,bBr,FMe,vBr,FBr,TBr,xe,YC,TMe,MBr,EBr,rK,CBr,wBr,ABr,KC,MMe,yBr,LBr,tK,xBr,$Br,kBr,ZC,EMe,SBr,RBr,aK,PBr,BBr,IBr,e5,CMe,qBr,NBr,nK,jBr,DBr,GBr,o5,wMe,OBr,VBr,sK,XBr,zBr,WBr,r5,AMe,QBr,HBr,lK,UBr,JBr,YBr,t5,yMe,KBr,ZBr,iK,eIr,oIr,rIr,a5,LMe,tIr,aIr,dK,nIr,sIr,lIr,n5,xMe,iIr,dIr,cK,cIr,fIr,mIr,s5,$Me,gIr,hIr,fK,pIr,uIr,_Ir,l5,yje,Qc,i5,kMe,Y8,bIr,SMe,vIr,Lje,_r,K8,FIr,Hc,TIr,mK,MIr,EIr,gK,CIr,wIr,AIr,Z8,yIr,RMe,LIr,xIr,$Ir,Qt,ex,kIr,PMe,SIr,RIr,Uc,PIr,BMe,BIr,IIr,hK,qIr,NIr,jIr,d5,DIr,zr,ox,GIr,IMe,OIr,VIr,Fn,XIr,qMe,zIr,WIr,NMe,QIr,HIr,jMe,UIr,JIr,YIr,$e,c5,DMe,KIr,ZIr,pK,eqr,oqr,rqr,f5,GMe,tqr,aqr,uK,nqr,sqr,lqr,m5,OMe,iqr,dqr,_K,cqr,fqr,mqr,g5,VMe,gqr,hqr,bK,pqr,uqr,_qr,h5,XMe,bqr,vqr,vK,Fqr,Tqr,Mqr,p5,zMe,Eqr,Cqr,FK,wqr,Aqr,yqr,u5,WMe,Lqr,xqr,TK,$qr,kqr,Sqr,_5,QMe,Rqr,Pqr,MK,Bqr,Iqr,qqr,b5,HMe,Nqr,jqr,EK,Dqr,Gqr,Oqr,v5,UMe,Vqr,Xqr,CK,zqr,Wqr,Qqr,F5,xje,Jc,T5,JMe,rx,Hqr,YMe,Uqr,$je,br,tx,Jqr,Yc,Yqr,wK,Kqr,Zqr,AK,eNr,oNr,rNr,ax,tNr,KMe,aNr,nNr,sNr,Ht,nx,lNr,ZMe,iNr,dNr,Kc,cNr,e4e,fNr,mNr,yK,gNr,hNr,pNr,M5,uNr,Wr,sx,_Nr,o4e,bNr,vNr,Tn,FNr,r4e,TNr,MNr,t4e,ENr,CNr,a4e,wNr,ANr,yNr,De,E5,n4e,LNr,xNr,LK,$Nr,kNr,SNr,C5,s4e,RNr,PNr,xK,BNr,INr,qNr,w5,l4e,NNr,jNr,$K,DNr,GNr,ONr,A5,i4e,VNr,XNr,kK,zNr,WNr,QNr,y5,d4e,HNr,UNr,SK,JNr,YNr,KNr,L5,c4e,ZNr,ejr,RK,ojr,rjr,tjr,x5,f4e,ajr,njr,PK,sjr,ljr,ijr,$5,m4e,djr,cjr,BK,fjr,mjr,gjr,k5,kje,Zc,S5,g4e,lx,hjr,h4e,pjr,Sje,vr,ix,ujr,ef,_jr,IK,bjr,vjr,qK,Fjr,Tjr,Mjr,dx,Ejr,p4e,Cjr,wjr,Ajr,Ut,cx,yjr,u4e,Ljr,xjr,of,$jr,_4e,kjr,Sjr,NK,Rjr,Pjr,Bjr,R5,Ijr,Qr,fx,qjr,b4e,Njr,jjr,Mn,Djr,v4e,Gjr,Ojr,F4e,Vjr,Xjr,T4e,zjr,Wjr,Qjr,Ge,P5,M4e,Hjr,Ujr,jK,Jjr,Yjr,Kjr,B5,E4e,Zjr,eDr,DK,oDr,rDr,tDr,I5,C4e,aDr,nDr,GK,sDr,lDr,iDr,q5,w4e,dDr,cDr,OK,fDr,mDr,gDr,N5,A4e,hDr,pDr,VK,uDr,_Dr,bDr,j5,y4e,vDr,FDr,XK,TDr,MDr,EDr,D5,L4e,CDr,wDr,zK,ADr,yDr,LDr,G5,x4e,xDr,$Dr,WK,kDr,SDr,RDr,O5,Rje,rf,V5,$4e,mx,PDr,k4e,BDr,Pje,Fr,gx,IDr,tf,qDr,QK,NDr,jDr,HK,DDr,GDr,ODr,hx,VDr,S4e,XDr,zDr,WDr,Jt,px,QDr,R4e,HDr,UDr,af,JDr,P4e,YDr,KDr,UK,ZDr,eGr,oGr,X5,rGr,Hr,ux,tGr,B4e,aGr,nGr,En,sGr,I4e,lGr,iGr,q4e,dGr,cGr,N4e,fGr,mGr,gGr,j4e,z5,D4e,hGr,pGr,JK,uGr,_Gr,bGr,W5,Bje,nf,Q5,G4e,_x,vGr,O4e,FGr,Ije,Tr,bx,TGr,sf,MGr,YK,EGr,CGr,KK,wGr,AGr,yGr,vx,LGr,V4e,xGr,$Gr,kGr,Yt,Fx,SGr,X4e,RGr,PGr,lf,BGr,z4e,IGr,qGr,ZK,NGr,jGr,DGr,H5,GGr,Ur,Tx,OGr,W4e,VGr,XGr,Cn,zGr,Q4e,WGr,QGr,H4e,HGr,UGr,U4e,JGr,YGr,KGr,Mx,U5,J4e,ZGr,eOr,eZ,oOr,rOr,tOr,J5,Y4e,aOr,nOr,oZ,sOr,lOr,iOr,Y5,qje,df,K5,K4e,Ex,dOr,Z4e,cOr,Nje,Mr,Cx,fOr,cf,mOr,rZ,gOr,hOr,tZ,pOr,uOr,_Or,wx,bOr,eEe,vOr,FOr,TOr,Kt,Ax,MOr,oEe,EOr,COr,ff,wOr,rEe,AOr,yOr,aZ,LOr,xOr,$Or,Z5,kOr,Jr,yx,SOr,tEe,ROr,POr,wn,BOr,aEe,IOr,qOr,nEe,NOr,jOr,sEe,DOr,GOr,OOr,lEe,ew,iEe,VOr,XOr,nZ,zOr,WOr,QOr,ow,jje;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),EA=new re({}),CA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new HOr({props:{warning:!0,$$slots:{default:[Txt]},$$scope:{ctx:L}}}),wA=new re({}),AA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/configuration_auto.py#L581"}}),xA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/configuration_auto.py#L604"}}),Mg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),$A=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/configuration_auto.py#L727"}}),kA=new re({}),SA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/tokenization_auto.py#L389"}}),BA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17393/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/tokenization_auto.py#L403"}}),rh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),IA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/tokenization_auto.py#L599"}}),qA=new re({}),NA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),GA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17393/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),Ph=new HOr({props:{$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),Bh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),OA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),VA=new re({}),XA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/processing_auto.py#L88"}}),QA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/processing_auto.py#L102"}}),op=new HOr({props:{$$slots:{default:[Axt]},$$scope:{ctx:L}}}),rp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),HA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/processing_auto.py#L255"}}),UA=new re({}),JA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L733"}}),KA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),np=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),ZA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),Zu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),e6=new re({}),o6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L740"}}),t6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),o_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),a6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),z_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),n6=new re({}),s6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L755"}}),i6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),Q_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),d6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),k3=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),c6=new re({}),f6=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L762"}}),g6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),R3=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Pxt]},$$scope:{ctx:L}}}),h6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),u1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Bxt]},$$scope:{ctx:L}}}),p6=new re({}),u6=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L769"}}),b6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),b1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Ixt]},$$scope:{ctx:L}}}),v6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),I1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[qxt]},$$scope:{ctx:L}}}),F6=new re({}),T6=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L778"}}),E6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),N1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Nxt]},$$scope:{ctx:L}}}),C6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),Rb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[jxt]},$$scope:{ctx:L}}}),w6=new re({}),A6=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L812"}}),L6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),Bb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Dxt]},$$scope:{ctx:L}}}),x6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),m2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Gxt]},$$scope:{ctx:L}}}),$6=new re({}),k6=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L819"}}),R6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),h2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Oxt]},$$scope:{ctx:L}}}),P6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),T2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Vxt]},$$scope:{ctx:L}}}),B6=new re({}),I6=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L805"}}),N6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),E2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Xxt]},$$scope:{ctx:L}}}),j6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),nv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[zxt]},$$scope:{ctx:L}}}),D6=new re({}),G6=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L787"}}),V6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),lv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Wxt]},$$scope:{ctx:L}}}),X6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),Uv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Qxt]},$$scope:{ctx:L}}}),z6=new re({}),W6=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L794"}}),H6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),Yv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Hxt]},$$scope:{ctx:L}}}),U6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),eF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Uxt]},$$scope:{ctx:L}}}),J6=new re({}),Y6=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L828"}}),Z6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17393/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17393/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17393/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),rF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Jxt]},$$scope:{ctx:L}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Yxt]},$$scope:{ctx:L}}}),oy=new re({}),ry=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L867"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),bF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Kxt]},$$scope:{ctx:L}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Zxt]},$$scope:{ctx:L}}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L874"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[e$t]},$$scope:{ctx:L}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[o$t]},$$scope:{ctx:L}}}),fy=new re({}),my=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L897"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[r$t]},$$scope:{ctx:L}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[t$t]},$$scope:{ctx:L}}}),uy=new re({}),_y=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L881"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[a$t]},$$scope:{ctx:L}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),rT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[n$t]},$$scope:{ctx:L}}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L888"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),aT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[s$t]},$$scope:{ctx:L}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),iT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[l$t]},$$scope:{ctx:L}}}),yy=new re({}),Ly=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L906"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),cT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[i$t]},$$scope:{ctx:L}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[d$t]},$$scope:{ctx:L}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L913"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[c$t]},$$scope:{ctx:L}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),CT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[f$t]},$$scope:{ctx:L}}}),qy=new re({}),Ny=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L860"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),AT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[m$t]},$$scope:{ctx:L}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),$T=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[g$t]},$$scope:{ctx:L}}}),Vy=new re({}),Xy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L835"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),ST=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[h$t]},$$scope:{ctx:L}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),BT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[p$t]},$$scope:{ctx:L}}}),Hy=new re({}),Uy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L842"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[u$t]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[_$t]},$$scope:{ctx:L}}}),Zy=new re({}),eL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_auto.py#L851"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[b$t]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[v$t]},$$scope:{ctx:L}}}),aL=new re({}),nL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),lL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[F$t]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),O7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[T$t]},$$scope:{ctx:L}}}),dL=new re({}),cL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),mL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),X7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[M$t]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),h9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[E$t]},$$scope:{ctx:L}}}),hL=new re({}),pL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),_L=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),u9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[C$t]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),x9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[w$t]},$$scope:{ctx:L}}}),vL=new re({}),FL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),ML=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),k9=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[A$t]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),I9=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[y$t]},$$scope:{ctx:L}}}),CL=new re({}),wL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),yL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),N9=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[L$t]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),nM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[x$t]},$$scope:{ctx:L}}}),xL=new re({}),$L=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),SL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),lM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[$$t]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[k$t]},$$scope:{ctx:L}}}),PL=new re({}),BL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),qL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[S$t]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),QM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[R$t]},$$scope:{ctx:L}}}),jL=new re({}),DL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),OL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),UM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[P$t]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[B$t]},$$scope:{ctx:L}}}),XL=new re({}),zL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),QL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[I$t]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[q$t]},$$scope:{ctx:L}}}),JL=new re({}),YL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[N$t]},$$scope:{ctx:L}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[j$t]},$$scope:{ctx:L}}}),o8=new re({}),r8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),a8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[D$t]},$$scope:{ctx:L}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[G$t]},$$scope:{ctx:L}}}),s8=new re({}),l8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),d8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[O$t]},$$scope:{ctx:L}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[V$t]},$$scope:{ctx:L}}}),f8=new re({}),m8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),h8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),uE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[X$t]},$$scope:{ctx:L}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[z$t]},$$scope:{ctx:L}}}),u8=new re({}),_8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),v8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),FE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[W$t]},$$scope:{ctx:L}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Q$t]},$$scope:{ctx:L}}}),T8=new re({}),M8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),C8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[H$t]},$$scope:{ctx:L}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[U$t]},$$scope:{ctx:L}}}),A8=new re({}),y8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),x8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[J$t]},$$scope:{ctx:L}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),iC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Y$t]},$$scope:{ctx:L}}}),k8=new re({}),S8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),P8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),cC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[K$t]},$$scope:{ctx:L}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Z$t]},$$scope:{ctx:L}}}),I8=new re({}),q8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),j8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[ekt]},$$scope:{ctx:L}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),IC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[okt]},$$scope:{ctx:L}}}),G8=new re({}),O8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),X8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),NC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[rkt]},$$scope:{ctx:L}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),HC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[tkt]},$$scope:{ctx:L}}}),W8=new re({}),Q8=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),U8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[akt]},$$scope:{ctx:L}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),l5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[nkt]},$$scope:{ctx:L}}}),Y8=new re({}),K8=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),d5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[skt]},$$scope:{ctx:L}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),F5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[lkt]},$$scope:{ctx:L}}}),rx=new re({}),tx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),M5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[ikt]},$$scope:{ctx:L}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[dkt]},$$scope:{ctx:L}}}),lx=new re({}),ix=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ckt]},$$scope:{ctx:L}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[fkt]},$$scope:{ctx:L}}}),mx=new re({}),gx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[mkt]},$$scope:{ctx:L}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),W5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),_x=new re({}),bx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17393/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),H5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[pkt]},$$scope:{ctx:L}}}),Ex=new re({}),Cx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17393/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17393/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L389"}}),Z5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[ukt]},$$scope:{ctx:L}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17393/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17393/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17393/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),vA=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),FA=o("AutoConfig"),Ln=o(", "),xn=a("a"),TA=o("AutoModel"),pi=o(`, and
`),$n=a("a"),MA=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),G$=o("will create a model that is an instance of "),_i=a("a"),O$=o("BertModel"),V$=o("."),Eo=l(),wa=a("p"),X$=o("There is one class of "),bf=a("code"),z$=o("AutoModel"),QGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Iqe=l(),bi=a("h2"),vf=a("a"),Kee=a("span"),F(EA.$$.fragment),HGe=l(),Zee=a("span"),UGe=o("Extending the Auto Classes"),qqe=l(),kn=a("p"),JGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),eoe=a("code"),YGe=o("NewModel"),KGe=o(", make sure you have a "),ooe=a("code"),ZGe=o("NewModelConfig"),eOe=o(` then you can add those to the auto
classes like this:`),Nqe=l(),F(CA.$$.fragment),jqe=l(),W$=a("p"),oOe=o("You will then be able to use the auto classes like you would usually do!"),Dqe=l(),F(Ff.$$.fragment),Gqe=l(),vi=a("h2"),Tf=a("a"),roe=a("span"),F(wA.$$.fragment),rOe=l(),toe=a("span"),tOe=o("AutoConfig"),Oqe=l(),Co=a("div"),F(AA.$$.fragment),aOe=l(),yA=a("p"),nOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Q$=a("a"),sOe=o("from_pretrained()"),lOe=o(" class method."),iOe=l(),LA=a("p"),dOe=o("This class cannot be instantiated directly using "),aoe=a("code"),cOe=o("__init__()"),fOe=o(" (throws an error)."),mOe=l(),Er=a("div"),F(xA.$$.fragment),gOe=l(),noe=a("p"),hOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),pOe=l(),Fi=a("p"),uOe=o("The configuration class to instantiate is selected based on the "),soe=a("code"),_Oe=o("model_type"),bOe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),loe=a("code"),vOe=o("pretrained_model_name_or_path"),FOe=o(":"),TOe=l(),A=a("ul"),Mf=a("li"),ioe=a("strong"),MOe=o("albert"),EOe=o(" \u2014 "),H$=a("a"),COe=o("AlbertConfig"),wOe=o(" (ALBERT model)"),AOe=l(),Ef=a("li"),doe=a("strong"),yOe=o("bart"),LOe=o(" \u2014 "),U$=a("a"),xOe=o("BartConfig"),$Oe=o(" (BART model)"),kOe=l(),Cf=a("li"),coe=a("strong"),SOe=o("beit"),ROe=o(" \u2014 "),J$=a("a"),POe=o("BeitConfig"),BOe=o(" (BEiT model)"),IOe=l(),wf=a("li"),foe=a("strong"),qOe=o("bert"),NOe=o(" \u2014 "),Y$=a("a"),jOe=o("BertConfig"),DOe=o(" (BERT model)"),GOe=l(),Af=a("li"),moe=a("strong"),OOe=o("bert-generation"),VOe=o(" \u2014 "),K$=a("a"),XOe=o("BertGenerationConfig"),zOe=o(" (Bert Generation model)"),WOe=l(),yf=a("li"),goe=a("strong"),QOe=o("big_bird"),HOe=o(" \u2014 "),Z$=a("a"),UOe=o("BigBirdConfig"),JOe=o(" (BigBird model)"),YOe=l(),Lf=a("li"),hoe=a("strong"),KOe=o("bigbird_pegasus"),ZOe=o(" \u2014 "),ek=a("a"),eVe=o("BigBirdPegasusConfig"),oVe=o(" (BigBirdPegasus model)"),rVe=l(),xf=a("li"),poe=a("strong"),tVe=o("blenderbot"),aVe=o(" \u2014 "),ok=a("a"),nVe=o("BlenderbotConfig"),sVe=o(" (Blenderbot model)"),lVe=l(),$f=a("li"),uoe=a("strong"),iVe=o("blenderbot-small"),dVe=o(" \u2014 "),rk=a("a"),cVe=o("BlenderbotSmallConfig"),fVe=o(" (BlenderbotSmall model)"),mVe=l(),kf=a("li"),_oe=a("strong"),gVe=o("camembert"),hVe=o(" \u2014 "),tk=a("a"),pVe=o("CamembertConfig"),uVe=o(" (CamemBERT model)"),_Ve=l(),Sf=a("li"),boe=a("strong"),bVe=o("canine"),vVe=o(" \u2014 "),ak=a("a"),FVe=o("CanineConfig"),TVe=o(" (Canine model)"),MVe=l(),Rf=a("li"),voe=a("strong"),EVe=o("clip"),CVe=o(" \u2014 "),nk=a("a"),wVe=o("CLIPConfig"),AVe=o(" (CLIP model)"),yVe=l(),Pf=a("li"),Foe=a("strong"),LVe=o("convbert"),xVe=o(" \u2014 "),sk=a("a"),$Ve=o("ConvBertConfig"),kVe=o(" (ConvBERT model)"),SVe=l(),Bf=a("li"),Toe=a("strong"),RVe=o("convnext"),PVe=o(" \u2014 "),lk=a("a"),BVe=o("ConvNextConfig"),IVe=o(" (ConvNext model)"),qVe=l(),If=a("li"),Moe=a("strong"),NVe=o("ctrl"),jVe=o(" \u2014 "),ik=a("a"),DVe=o("CTRLConfig"),GVe=o(" (CTRL model)"),OVe=l(),qf=a("li"),Eoe=a("strong"),VVe=o("cvt"),XVe=o(" \u2014 "),dk=a("a"),zVe=o("CvtConfig"),WVe=o(" (CvT model)"),QVe=l(),Nf=a("li"),Coe=a("strong"),HVe=o("data2vec-audio"),UVe=o(" \u2014 "),ck=a("a"),JVe=o("Data2VecAudioConfig"),YVe=o(" (Data2VecAudio model)"),KVe=l(),jf=a("li"),woe=a("strong"),ZVe=o("data2vec-text"),eXe=o(" \u2014 "),fk=a("a"),oXe=o("Data2VecTextConfig"),rXe=o(" (Data2VecText model)"),tXe=l(),Df=a("li"),Aoe=a("strong"),aXe=o("data2vec-vision"),nXe=o(" \u2014 "),mk=a("a"),sXe=o("Data2VecVisionConfig"),lXe=o(" (Data2VecVision model)"),iXe=l(),Gf=a("li"),yoe=a("strong"),dXe=o("deberta"),cXe=o(" \u2014 "),gk=a("a"),fXe=o("DebertaConfig"),mXe=o(" (DeBERTa model)"),gXe=l(),Of=a("li"),Loe=a("strong"),hXe=o("deberta-v2"),pXe=o(" \u2014 "),hk=a("a"),uXe=o("DebertaV2Config"),_Xe=o(" (DeBERTa-v2 model)"),bXe=l(),Vf=a("li"),xoe=a("strong"),vXe=o("decision_transformer"),FXe=o(" \u2014 "),pk=a("a"),TXe=o("DecisionTransformerConfig"),MXe=o(" (Decision Transformer model)"),EXe=l(),Xf=a("li"),$oe=a("strong"),CXe=o("deit"),wXe=o(" \u2014 "),uk=a("a"),AXe=o("DeiTConfig"),yXe=o(" (DeiT model)"),LXe=l(),zf=a("li"),koe=a("strong"),xXe=o("detr"),$Xe=o(" \u2014 "),_k=a("a"),kXe=o("DetrConfig"),SXe=o(" (DETR model)"),RXe=l(),Wf=a("li"),Soe=a("strong"),PXe=o("distilbert"),BXe=o(" \u2014 "),bk=a("a"),IXe=o("DistilBertConfig"),qXe=o(" (DistilBERT model)"),NXe=l(),Qf=a("li"),Roe=a("strong"),jXe=o("dpr"),DXe=o(" \u2014 "),vk=a("a"),GXe=o("DPRConfig"),OXe=o(" (DPR model)"),VXe=l(),Hf=a("li"),Poe=a("strong"),XXe=o("dpt"),zXe=o(" \u2014 "),Fk=a("a"),WXe=o("DPTConfig"),QXe=o(" (DPT model)"),HXe=l(),Uf=a("li"),Boe=a("strong"),UXe=o("electra"),JXe=o(" \u2014 "),Tk=a("a"),YXe=o("ElectraConfig"),KXe=o(" (ELECTRA model)"),ZXe=l(),Jf=a("li"),Ioe=a("strong"),eze=o("encoder-decoder"),oze=o(" \u2014 "),Mk=a("a"),rze=o("EncoderDecoderConfig"),tze=o(" (Encoder decoder model)"),aze=l(),Yf=a("li"),qoe=a("strong"),nze=o("flaubert"),sze=o(" \u2014 "),Ek=a("a"),lze=o("FlaubertConfig"),ize=o(" (FlauBERT model)"),dze=l(),Kf=a("li"),Noe=a("strong"),cze=o("flava"),fze=o(" \u2014 "),Ck=a("a"),mze=o("FlavaConfig"),gze=o(" (Flava model)"),hze=l(),Zf=a("li"),joe=a("strong"),pze=o("fnet"),uze=o(" \u2014 "),wk=a("a"),_ze=o("FNetConfig"),bze=o(" (FNet model)"),vze=l(),em=a("li"),Doe=a("strong"),Fze=o("fsmt"),Tze=o(" \u2014 "),Ak=a("a"),Mze=o("FSMTConfig"),Eze=o(" (FairSeq Machine-Translation model)"),Cze=l(),om=a("li"),Goe=a("strong"),wze=o("funnel"),Aze=o(" \u2014 "),yk=a("a"),yze=o("FunnelConfig"),Lze=o(" (Funnel Transformer model)"),xze=l(),rm=a("li"),Ooe=a("strong"),$ze=o("glpn"),kze=o(" \u2014 "),Lk=a("a"),Sze=o("GLPNConfig"),Rze=o(" (GLPN model)"),Pze=l(),tm=a("li"),Voe=a("strong"),Bze=o("gpt2"),Ize=o(" \u2014 "),xk=a("a"),qze=o("GPT2Config"),Nze=o(" (OpenAI GPT-2 model)"),jze=l(),am=a("li"),Xoe=a("strong"),Dze=o("gpt_neo"),Gze=o(" \u2014 "),$k=a("a"),Oze=o("GPTNeoConfig"),Vze=o(" (GPT Neo model)"),Xze=l(),nm=a("li"),zoe=a("strong"),zze=o("gptj"),Wze=o(" \u2014 "),kk=a("a"),Qze=o("GPTJConfig"),Hze=o(" (GPT-J model)"),Uze=l(),sm=a("li"),Woe=a("strong"),Jze=o("hubert"),Yze=o(" \u2014 "),Sk=a("a"),Kze=o("HubertConfig"),Zze=o(" (Hubert model)"),eWe=l(),lm=a("li"),Qoe=a("strong"),oWe=o("ibert"),rWe=o(" \u2014 "),Rk=a("a"),tWe=o("IBertConfig"),aWe=o(" (I-BERT model)"),nWe=l(),im=a("li"),Hoe=a("strong"),sWe=o("imagegpt"),lWe=o(" \u2014 "),Pk=a("a"),iWe=o("ImageGPTConfig"),dWe=o(" (ImageGPT model)"),cWe=l(),dm=a("li"),Uoe=a("strong"),fWe=o("layoutlm"),mWe=o(" \u2014 "),Bk=a("a"),gWe=o("LayoutLMConfig"),hWe=o(" (LayoutLM model)"),pWe=l(),cm=a("li"),Joe=a("strong"),uWe=o("layoutlmv2"),_We=o(" \u2014 "),Ik=a("a"),bWe=o("LayoutLMv2Config"),vWe=o(" (LayoutLMv2 model)"),FWe=l(),fm=a("li"),Yoe=a("strong"),TWe=o("layoutlmv3"),MWe=o(" \u2014 "),qk=a("a"),EWe=o("LayoutLMv3Config"),CWe=o(" (LayoutLMv3 model)"),wWe=l(),mm=a("li"),Koe=a("strong"),AWe=o("led"),yWe=o(" \u2014 "),Nk=a("a"),LWe=o("LEDConfig"),xWe=o(" (LED model)"),$We=l(),gm=a("li"),Zoe=a("strong"),kWe=o("longformer"),SWe=o(" \u2014 "),jk=a("a"),RWe=o("LongformerConfig"),PWe=o(" (Longformer model)"),BWe=l(),hm=a("li"),ere=a("strong"),IWe=o("luke"),qWe=o(" \u2014 "),Dk=a("a"),NWe=o("LukeConfig"),jWe=o(" (LUKE model)"),DWe=l(),pm=a("li"),ore=a("strong"),GWe=o("lxmert"),OWe=o(" \u2014 "),Gk=a("a"),VWe=o("LxmertConfig"),XWe=o(" (LXMERT model)"),zWe=l(),um=a("li"),rre=a("strong"),WWe=o("m2m_100"),QWe=o(" \u2014 "),Ok=a("a"),HWe=o("M2M100Config"),UWe=o(" (M2M100 model)"),JWe=l(),_m=a("li"),tre=a("strong"),YWe=o("marian"),KWe=o(" \u2014 "),Vk=a("a"),ZWe=o("MarianConfig"),eQe=o(" (Marian model)"),oQe=l(),bm=a("li"),are=a("strong"),rQe=o("maskformer"),tQe=o(" \u2014 "),Xk=a("a"),aQe=o("MaskFormerConfig"),nQe=o(" (MaskFormer model)"),sQe=l(),vm=a("li"),nre=a("strong"),lQe=o("mbart"),iQe=o(" \u2014 "),zk=a("a"),dQe=o("MBartConfig"),cQe=o(" (mBART model)"),fQe=l(),Fm=a("li"),sre=a("strong"),mQe=o("megatron-bert"),gQe=o(" \u2014 "),Wk=a("a"),hQe=o("MegatronBertConfig"),pQe=o(" (MegatronBert model)"),uQe=l(),Tm=a("li"),lre=a("strong"),_Qe=o("mobilebert"),bQe=o(" \u2014 "),Qk=a("a"),vQe=o("MobileBertConfig"),FQe=o(" (MobileBERT model)"),TQe=l(),Mm=a("li"),ire=a("strong"),MQe=o("mpnet"),EQe=o(" \u2014 "),Hk=a("a"),CQe=o("MPNetConfig"),wQe=o(" (MPNet model)"),AQe=l(),Em=a("li"),dre=a("strong"),yQe=o("mt5"),LQe=o(" \u2014 "),Uk=a("a"),xQe=o("MT5Config"),$Qe=o(" (mT5 model)"),kQe=l(),Cm=a("li"),cre=a("strong"),SQe=o("nystromformer"),RQe=o(" \u2014 "),Jk=a("a"),PQe=o("NystromformerConfig"),BQe=o(" (Nystromformer model)"),IQe=l(),wm=a("li"),fre=a("strong"),qQe=o("openai-gpt"),NQe=o(" \u2014 "),Yk=a("a"),jQe=o("OpenAIGPTConfig"),DQe=o(" (OpenAI GPT model)"),GQe=l(),Am=a("li"),mre=a("strong"),OQe=o("opt"),VQe=o(" \u2014 "),Kk=a("a"),XQe=o("OPTConfig"),zQe=o(" (OPT model)"),WQe=l(),ym=a("li"),gre=a("strong"),QQe=o("pegasus"),HQe=o(" \u2014 "),Zk=a("a"),UQe=o("PegasusConfig"),JQe=o(" (Pegasus model)"),YQe=l(),Lm=a("li"),hre=a("strong"),KQe=o("perceiver"),ZQe=o(" \u2014 "),eS=a("a"),eHe=o("PerceiverConfig"),oHe=o(" (Perceiver model)"),rHe=l(),xm=a("li"),pre=a("strong"),tHe=o("plbart"),aHe=o(" \u2014 "),oS=a("a"),nHe=o("PLBartConfig"),sHe=o(" (PLBart model)"),lHe=l(),$m=a("li"),ure=a("strong"),iHe=o("poolformer"),dHe=o(" \u2014 "),rS=a("a"),cHe=o("PoolFormerConfig"),fHe=o(" (PoolFormer model)"),mHe=l(),km=a("li"),_re=a("strong"),gHe=o("prophetnet"),hHe=o(" \u2014 "),tS=a("a"),pHe=o("ProphetNetConfig"),uHe=o(" (ProphetNet model)"),_He=l(),Sm=a("li"),bre=a("strong"),bHe=o("qdqbert"),vHe=o(" \u2014 "),aS=a("a"),FHe=o("QDQBertConfig"),THe=o(" (QDQBert model)"),MHe=l(),Rm=a("li"),vre=a("strong"),EHe=o("rag"),CHe=o(" \u2014 "),nS=a("a"),wHe=o("RagConfig"),AHe=o(" (RAG model)"),yHe=l(),Pm=a("li"),Fre=a("strong"),LHe=o("realm"),xHe=o(" \u2014 "),sS=a("a"),$He=o("RealmConfig"),kHe=o(" (Realm model)"),SHe=l(),Bm=a("li"),Tre=a("strong"),RHe=o("reformer"),PHe=o(" \u2014 "),lS=a("a"),BHe=o("ReformerConfig"),IHe=o(" (Reformer model)"),qHe=l(),Im=a("li"),Mre=a("strong"),NHe=o("regnet"),jHe=o(" \u2014 "),iS=a("a"),DHe=o("RegNetConfig"),GHe=o(" (RegNet model)"),OHe=l(),qm=a("li"),Ere=a("strong"),VHe=o("rembert"),XHe=o(" \u2014 "),dS=a("a"),zHe=o("RemBertConfig"),WHe=o(" (RemBERT model)"),QHe=l(),Nm=a("li"),Cre=a("strong"),HHe=o("resnet"),UHe=o(" \u2014 "),cS=a("a"),JHe=o("ResNetConfig"),YHe=o(" (ResNet model)"),KHe=l(),jm=a("li"),wre=a("strong"),ZHe=o("retribert"),eUe=o(" \u2014 "),fS=a("a"),oUe=o("RetriBertConfig"),rUe=o(" (RetriBERT model)"),tUe=l(),Dm=a("li"),Are=a("strong"),aUe=o("roberta"),nUe=o(" \u2014 "),mS=a("a"),sUe=o("RobertaConfig"),lUe=o(" (RoBERTa model)"),iUe=l(),Gm=a("li"),yre=a("strong"),dUe=o("roformer"),cUe=o(" \u2014 "),gS=a("a"),fUe=o("RoFormerConfig"),mUe=o(" (RoFormer model)"),gUe=l(),Om=a("li"),Lre=a("strong"),hUe=o("segformer"),pUe=o(" \u2014 "),hS=a("a"),uUe=o("SegformerConfig"),_Ue=o(" (SegFormer model)"),bUe=l(),Vm=a("li"),xre=a("strong"),vUe=o("sew"),FUe=o(" \u2014 "),pS=a("a"),TUe=o("SEWConfig"),MUe=o(" (SEW model)"),EUe=l(),Xm=a("li"),$re=a("strong"),CUe=o("sew-d"),wUe=o(" \u2014 "),uS=a("a"),AUe=o("SEWDConfig"),yUe=o(" (SEW-D model)"),LUe=l(),zm=a("li"),kre=a("strong"),xUe=o("speech-encoder-decoder"),$Ue=o(" \u2014 "),_S=a("a"),kUe=o("SpeechEncoderDecoderConfig"),SUe=o(" (Speech Encoder decoder model)"),RUe=l(),Wm=a("li"),Sre=a("strong"),PUe=o("speech_to_text"),BUe=o(" \u2014 "),bS=a("a"),IUe=o("Speech2TextConfig"),qUe=o(" (Speech2Text model)"),NUe=l(),Qm=a("li"),Rre=a("strong"),jUe=o("speech_to_text_2"),DUe=o(" \u2014 "),vS=a("a"),GUe=o("Speech2Text2Config"),OUe=o(" (Speech2Text2 model)"),VUe=l(),Hm=a("li"),Pre=a("strong"),XUe=o("splinter"),zUe=o(" \u2014 "),FS=a("a"),WUe=o("SplinterConfig"),QUe=o(" (Splinter model)"),HUe=l(),Um=a("li"),Bre=a("strong"),UUe=o("squeezebert"),JUe=o(" \u2014 "),TS=a("a"),YUe=o("SqueezeBertConfig"),KUe=o(" (SqueezeBERT model)"),ZUe=l(),Jm=a("li"),Ire=a("strong"),eJe=o("swin"),oJe=o(" \u2014 "),MS=a("a"),rJe=o("SwinConfig"),tJe=o(" (Swin model)"),aJe=l(),Ym=a("li"),qre=a("strong"),nJe=o("t5"),sJe=o(" \u2014 "),ES=a("a"),lJe=o("T5Config"),iJe=o(" (T5 model)"),dJe=l(),Km=a("li"),Nre=a("strong"),cJe=o("tapas"),fJe=o(" \u2014 "),CS=a("a"),mJe=o("TapasConfig"),gJe=o(" (TAPAS model)"),hJe=l(),Zm=a("li"),jre=a("strong"),pJe=o("trajectory_transformer"),uJe=o(" \u2014 "),wS=a("a"),_Je=o("TrajectoryTransformerConfig"),bJe=o(" (Trajectory Transformer model)"),vJe=l(),eg=a("li"),Dre=a("strong"),FJe=o("transfo-xl"),TJe=o(" \u2014 "),AS=a("a"),MJe=o("TransfoXLConfig"),EJe=o(" (Transformer-XL model)"),CJe=l(),og=a("li"),Gre=a("strong"),wJe=o("trocr"),AJe=o(" \u2014 "),yS=a("a"),yJe=o("TrOCRConfig"),LJe=o(" (TrOCR model)"),xJe=l(),rg=a("li"),Ore=a("strong"),$Je=o("unispeech"),kJe=o(" \u2014 "),LS=a("a"),SJe=o("UniSpeechConfig"),RJe=o(" (UniSpeech model)"),PJe=l(),tg=a("li"),Vre=a("strong"),BJe=o("unispeech-sat"),IJe=o(" \u2014 "),xS=a("a"),qJe=o("UniSpeechSatConfig"),NJe=o(" (UniSpeechSat model)"),jJe=l(),ag=a("li"),Xre=a("strong"),DJe=o("van"),GJe=o(" \u2014 "),$S=a("a"),OJe=o("VanConfig"),VJe=o(" (VAN model)"),XJe=l(),ng=a("li"),zre=a("strong"),zJe=o("vilt"),WJe=o(" \u2014 "),kS=a("a"),QJe=o("ViltConfig"),HJe=o(" (ViLT model)"),UJe=l(),sg=a("li"),Wre=a("strong"),JJe=o("vision-encoder-decoder"),YJe=o(" \u2014 "),SS=a("a"),KJe=o("VisionEncoderDecoderConfig"),ZJe=o(" (Vision Encoder decoder model)"),eYe=l(),lg=a("li"),Qre=a("strong"),oYe=o("vision-text-dual-encoder"),rYe=o(" \u2014 "),RS=a("a"),tYe=o("VisionTextDualEncoderConfig"),aYe=o(" (VisionTextDualEncoder model)"),nYe=l(),ig=a("li"),Hre=a("strong"),sYe=o("visual_bert"),lYe=o(" \u2014 "),PS=a("a"),iYe=o("VisualBertConfig"),dYe=o(" (VisualBert model)"),cYe=l(),dg=a("li"),Ure=a("strong"),fYe=o("vit"),mYe=o(" \u2014 "),BS=a("a"),gYe=o("ViTConfig"),hYe=o(" (ViT model)"),pYe=l(),cg=a("li"),Jre=a("strong"),uYe=o("vit_mae"),_Ye=o(" \u2014 "),IS=a("a"),bYe=o("ViTMAEConfig"),vYe=o(" (ViTMAE model)"),FYe=l(),fg=a("li"),Yre=a("strong"),TYe=o("wav2vec2"),MYe=o(" \u2014 "),qS=a("a"),EYe=o("Wav2Vec2Config"),CYe=o(" (Wav2Vec2 model)"),wYe=l(),mg=a("li"),Kre=a("strong"),AYe=o("wav2vec2-conformer"),yYe=o(" \u2014 "),NS=a("a"),LYe=o("Wav2Vec2ConformerConfig"),xYe=o(" (Wav2Vec2-Conformer model)"),$Ye=l(),gg=a("li"),Zre=a("strong"),kYe=o("wavlm"),SYe=o(" \u2014 "),jS=a("a"),RYe=o("WavLMConfig"),PYe=o(" (WavLM model)"),BYe=l(),hg=a("li"),ete=a("strong"),IYe=o("xglm"),qYe=o(" \u2014 "),DS=a("a"),NYe=o("XGLMConfig"),jYe=o(" (XGLM model)"),DYe=l(),pg=a("li"),ote=a("strong"),GYe=o("xlm"),OYe=o(" \u2014 "),GS=a("a"),VYe=o("XLMConfig"),XYe=o(" (XLM model)"),zYe=l(),ug=a("li"),rte=a("strong"),WYe=o("xlm-prophetnet"),QYe=o(" \u2014 "),OS=a("a"),HYe=o("XLMProphetNetConfig"),UYe=o(" (XLMProphetNet model)"),JYe=l(),_g=a("li"),tte=a("strong"),YYe=o("xlm-roberta"),KYe=o(" \u2014 "),VS=a("a"),ZYe=o("XLMRobertaConfig"),eKe=o(" (XLM-RoBERTa model)"),oKe=l(),bg=a("li"),ate=a("strong"),rKe=o("xlm-roberta-xl"),tKe=o(" \u2014 "),XS=a("a"),aKe=o("XLMRobertaXLConfig"),nKe=o(" (XLM-RoBERTa-XL model)"),sKe=l(),vg=a("li"),nte=a("strong"),lKe=o("xlnet"),iKe=o(" \u2014 "),zS=a("a"),dKe=o("XLNetConfig"),cKe=o(" (XLNet model)"),fKe=l(),Fg=a("li"),ste=a("strong"),mKe=o("yolos"),gKe=o(" \u2014 "),WS=a("a"),hKe=o("YolosConfig"),pKe=o(" (YOLOS model)"),uKe=l(),Tg=a("li"),lte=a("strong"),_Ke=o("yoso"),bKe=o(" \u2014 "),QS=a("a"),vKe=o("YosoConfig"),FKe=o(" (YOSO model)"),TKe=l(),F(Mg.$$.fragment),MKe=l(),Eg=a("div"),F($A.$$.fragment),EKe=l(),ite=a("p"),CKe=o("Register a new configuration for this class."),Vqe=l(),Ti=a("h2"),Cg=a("a"),dte=a("span"),F(kA.$$.fragment),wKe=l(),cte=a("span"),AKe=o("AutoTokenizer"),Xqe=l(),wo=a("div"),F(SA.$$.fragment),yKe=l(),RA=a("p"),LKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),HS=a("a"),xKe=o("AutoTokenizer.from_pretrained()"),$Ke=o(" class method."),kKe=l(),PA=a("p"),SKe=o("This class cannot be instantiated directly using "),fte=a("code"),RKe=o("__init__()"),PKe=o(" (throws an error)."),BKe=l(),Cr=a("div"),F(BA.$$.fragment),IKe=l(),mte=a("p"),qKe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),NKe=l(),Aa=a("p"),jKe=o("The tokenizer class to instantiate is selected based on the "),gte=a("code"),DKe=o("model_type"),GKe=o(` property of the config object (either
passed as an argument or loaded from `),hte=a("code"),OKe=o("pretrained_model_name_or_path"),VKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pte=a("code"),XKe=o("pretrained_model_name_or_path"),zKe=o(":"),WKe=l(),k=a("ul"),Sn=a("li"),ute=a("strong"),QKe=o("albert"),HKe=o(" \u2014 "),US=a("a"),UKe=o("AlbertTokenizer"),JKe=o(" or "),JS=a("a"),YKe=o("AlbertTokenizerFast"),KKe=o(" (ALBERT model)"),ZKe=l(),Rn=a("li"),_te=a("strong"),eZe=o("bart"),oZe=o(" \u2014 "),YS=a("a"),rZe=o("BartTokenizer"),tZe=o(" or "),KS=a("a"),aZe=o("BartTokenizerFast"),nZe=o(" (BART model)"),sZe=l(),Pn=a("li"),bte=a("strong"),lZe=o("barthez"),iZe=o(" \u2014 "),ZS=a("a"),dZe=o("BarthezTokenizer"),cZe=o(" or "),eR=a("a"),fZe=o("BarthezTokenizerFast"),mZe=o(" (BARThez model)"),gZe=l(),wg=a("li"),vte=a("strong"),hZe=o("bartpho"),pZe=o(" \u2014 "),oR=a("a"),uZe=o("BartphoTokenizer"),_Ze=o(" (BARTpho model)"),bZe=l(),Bn=a("li"),Fte=a("strong"),vZe=o("bert"),FZe=o(" \u2014 "),rR=a("a"),TZe=o("BertTokenizer"),MZe=o(" or "),tR=a("a"),EZe=o("BertTokenizerFast"),CZe=o(" (BERT model)"),wZe=l(),Ag=a("li"),Tte=a("strong"),AZe=o("bert-generation"),yZe=o(" \u2014 "),aR=a("a"),LZe=o("BertGenerationTokenizer"),xZe=o(" (Bert Generation model)"),$Ze=l(),yg=a("li"),Mte=a("strong"),kZe=o("bert-japanese"),SZe=o(" \u2014 "),nR=a("a"),RZe=o("BertJapaneseTokenizer"),PZe=o(" (BertJapanese model)"),BZe=l(),Lg=a("li"),Ete=a("strong"),IZe=o("bertweet"),qZe=o(" \u2014 "),sR=a("a"),NZe=o("BertweetTokenizer"),jZe=o(" (Bertweet model)"),DZe=l(),In=a("li"),Cte=a("strong"),GZe=o("big_bird"),OZe=o(" \u2014 "),lR=a("a"),VZe=o("BigBirdTokenizer"),XZe=o(" or "),iR=a("a"),zZe=o("BigBirdTokenizerFast"),WZe=o(" (BigBird model)"),QZe=l(),qn=a("li"),wte=a("strong"),HZe=o("bigbird_pegasus"),UZe=o(" \u2014 "),dR=a("a"),JZe=o("PegasusTokenizer"),YZe=o(" or "),cR=a("a"),KZe=o("PegasusTokenizerFast"),ZZe=o(" (BigBirdPegasus model)"),eeo=l(),Nn=a("li"),Ate=a("strong"),oeo=o("blenderbot"),reo=o(" \u2014 "),fR=a("a"),teo=o("BlenderbotTokenizer"),aeo=o(" or "),mR=a("a"),neo=o("BlenderbotTokenizerFast"),seo=o(" (Blenderbot model)"),leo=l(),xg=a("li"),yte=a("strong"),ieo=o("blenderbot-small"),deo=o(" \u2014 "),gR=a("a"),ceo=o("BlenderbotSmallTokenizer"),feo=o(" (BlenderbotSmall model)"),meo=l(),$g=a("li"),Lte=a("strong"),geo=o("byt5"),heo=o(" \u2014 "),hR=a("a"),peo=o("ByT5Tokenizer"),ueo=o(" (ByT5 model)"),_eo=l(),jn=a("li"),xte=a("strong"),beo=o("camembert"),veo=o(" \u2014 "),pR=a("a"),Feo=o("CamembertTokenizer"),Teo=o(" or "),uR=a("a"),Meo=o("CamembertTokenizerFast"),Eeo=o(" (CamemBERT model)"),Ceo=l(),kg=a("li"),$te=a("strong"),weo=o("canine"),Aeo=o(" \u2014 "),_R=a("a"),yeo=o("CanineTokenizer"),Leo=o(" (Canine model)"),xeo=l(),Dn=a("li"),kte=a("strong"),$eo=o("clip"),keo=o(" \u2014 "),bR=a("a"),Seo=o("CLIPTokenizer"),Reo=o(" or "),vR=a("a"),Peo=o("CLIPTokenizerFast"),Beo=o(" (CLIP model)"),Ieo=l(),Gn=a("li"),Ste=a("strong"),qeo=o("convbert"),Neo=o(" \u2014 "),FR=a("a"),jeo=o("ConvBertTokenizer"),Deo=o(" or "),TR=a("a"),Geo=o("ConvBertTokenizerFast"),Oeo=o(" (ConvBERT model)"),Veo=l(),On=a("li"),Rte=a("strong"),Xeo=o("cpm"),zeo=o(" \u2014 "),MR=a("a"),Weo=o("CpmTokenizer"),Qeo=o(" or "),ER=a("a"),Heo=o("CpmTokenizerFast"),Ueo=o(" (CPM model)"),Jeo=l(),Sg=a("li"),Pte=a("strong"),Yeo=o("ctrl"),Keo=o(" \u2014 "),CR=a("a"),Zeo=o("CTRLTokenizer"),eoo=o(" (CTRL model)"),ooo=l(),Vn=a("li"),Bte=a("strong"),roo=o("data2vec-text"),too=o(" \u2014 "),wR=a("a"),aoo=o("RobertaTokenizer"),noo=o(" or "),AR=a("a"),soo=o("RobertaTokenizerFast"),loo=o(" (Data2VecText model)"),ioo=l(),Xn=a("li"),Ite=a("strong"),doo=o("deberta"),coo=o(" \u2014 "),yR=a("a"),foo=o("DebertaTokenizer"),moo=o(" or "),LR=a("a"),goo=o("DebertaTokenizerFast"),hoo=o(" (DeBERTa model)"),poo=l(),zn=a("li"),qte=a("strong"),uoo=o("deberta-v2"),_oo=o(" \u2014 "),xR=a("a"),boo=o("DebertaV2Tokenizer"),voo=o(" or "),$R=a("a"),Foo=o("DebertaV2TokenizerFast"),Too=o(" (DeBERTa-v2 model)"),Moo=l(),Wn=a("li"),Nte=a("strong"),Eoo=o("distilbert"),Coo=o(" \u2014 "),kR=a("a"),woo=o("DistilBertTokenizer"),Aoo=o(" or "),SR=a("a"),yoo=o("DistilBertTokenizerFast"),Loo=o(" (DistilBERT model)"),xoo=l(),Qn=a("li"),jte=a("strong"),$oo=o("dpr"),koo=o(" \u2014 "),RR=a("a"),Soo=o("DPRQuestionEncoderTokenizer"),Roo=o(" or "),PR=a("a"),Poo=o("DPRQuestionEncoderTokenizerFast"),Boo=o(" (DPR model)"),Ioo=l(),Hn=a("li"),Dte=a("strong"),qoo=o("electra"),Noo=o(" \u2014 "),BR=a("a"),joo=o("ElectraTokenizer"),Doo=o(" or "),IR=a("a"),Goo=o("ElectraTokenizerFast"),Ooo=o(" (ELECTRA model)"),Voo=l(),Rg=a("li"),Gte=a("strong"),Xoo=o("flaubert"),zoo=o(" \u2014 "),qR=a("a"),Woo=o("FlaubertTokenizer"),Qoo=o(" (FlauBERT model)"),Hoo=l(),Un=a("li"),Ote=a("strong"),Uoo=o("fnet"),Joo=o(" \u2014 "),NR=a("a"),Yoo=o("FNetTokenizer"),Koo=o(" or "),jR=a("a"),Zoo=o("FNetTokenizerFast"),ero=o(" (FNet model)"),oro=l(),Pg=a("li"),Vte=a("strong"),rro=o("fsmt"),tro=o(" \u2014 "),DR=a("a"),aro=o("FSMTTokenizer"),nro=o(" (FairSeq Machine-Translation model)"),sro=l(),Jn=a("li"),Xte=a("strong"),lro=o("funnel"),iro=o(" \u2014 "),GR=a("a"),dro=o("FunnelTokenizer"),cro=o(" or "),OR=a("a"),fro=o("FunnelTokenizerFast"),mro=o(" (Funnel Transformer model)"),gro=l(),Yn=a("li"),zte=a("strong"),hro=o("gpt2"),pro=o(" \u2014 "),VR=a("a"),uro=o("GPT2Tokenizer"),_ro=o(" or "),XR=a("a"),bro=o("GPT2TokenizerFast"),vro=o(" (OpenAI GPT-2 model)"),Fro=l(),Kn=a("li"),Wte=a("strong"),Tro=o("gpt_neo"),Mro=o(" \u2014 "),zR=a("a"),Ero=o("GPT2Tokenizer"),Cro=o(" or "),WR=a("a"),wro=o("GPT2TokenizerFast"),Aro=o(" (GPT Neo model)"),yro=l(),Zn=a("li"),Qte=a("strong"),Lro=o("gptj"),xro=o(" \u2014 "),QR=a("a"),$ro=o("GPT2Tokenizer"),kro=o(" or "),HR=a("a"),Sro=o("GPT2TokenizerFast"),Rro=o(" (GPT-J model)"),Pro=l(),es=a("li"),Hte=a("strong"),Bro=o("herbert"),Iro=o(" \u2014 "),UR=a("a"),qro=o("HerbertTokenizer"),Nro=o(" or "),JR=a("a"),jro=o("HerbertTokenizerFast"),Dro=o(" (HerBERT model)"),Gro=l(),Bg=a("li"),Ute=a("strong"),Oro=o("hubert"),Vro=o(" \u2014 "),YR=a("a"),Xro=o("Wav2Vec2CTCTokenizer"),zro=o(" (Hubert model)"),Wro=l(),os=a("li"),Jte=a("strong"),Qro=o("ibert"),Hro=o(" \u2014 "),KR=a("a"),Uro=o("RobertaTokenizer"),Jro=o(" or "),ZR=a("a"),Yro=o("RobertaTokenizerFast"),Kro=o(" (I-BERT model)"),Zro=l(),rs=a("li"),Yte=a("strong"),eto=o("layoutlm"),oto=o(" \u2014 "),eP=a("a"),rto=o("LayoutLMTokenizer"),tto=o(" or "),oP=a("a"),ato=o("LayoutLMTokenizerFast"),nto=o(" (LayoutLM model)"),sto=l(),ts=a("li"),Kte=a("strong"),lto=o("layoutlmv2"),ito=o(" \u2014 "),rP=a("a"),dto=o("LayoutLMv2Tokenizer"),cto=o(" or "),tP=a("a"),fto=o("LayoutLMv2TokenizerFast"),mto=o(" (LayoutLMv2 model)"),gto=l(),as=a("li"),Zte=a("strong"),hto=o("layoutlmv3"),pto=o(" \u2014 "),aP=a("a"),uto=o("LayoutLMv3Tokenizer"),_to=o(" or "),nP=a("a"),bto=o("LayoutLMv3TokenizerFast"),vto=o(" (LayoutLMv3 model)"),Fto=l(),ns=a("li"),eae=a("strong"),Tto=o("layoutxlm"),Mto=o(" \u2014 "),sP=a("a"),Eto=o("LayoutXLMTokenizer"),Cto=o(" or "),lP=a("a"),wto=o("LayoutXLMTokenizerFast"),Ato=o(" (LayoutXLM model)"),yto=l(),ss=a("li"),oae=a("strong"),Lto=o("led"),xto=o(" \u2014 "),iP=a("a"),$to=o("LEDTokenizer"),kto=o(" or "),dP=a("a"),Sto=o("LEDTokenizerFast"),Rto=o(" (LED model)"),Pto=l(),ls=a("li"),rae=a("strong"),Bto=o("longformer"),Ito=o(" \u2014 "),cP=a("a"),qto=o("LongformerTokenizer"),Nto=o(" or "),fP=a("a"),jto=o("LongformerTokenizerFast"),Dto=o(" (Longformer model)"),Gto=l(),Ig=a("li"),tae=a("strong"),Oto=o("luke"),Vto=o(" \u2014 "),mP=a("a"),Xto=o("LukeTokenizer"),zto=o(" (LUKE model)"),Wto=l(),is=a("li"),aae=a("strong"),Qto=o("lxmert"),Hto=o(" \u2014 "),gP=a("a"),Uto=o("LxmertTokenizer"),Jto=o(" or "),hP=a("a"),Yto=o("LxmertTokenizerFast"),Kto=o(" (LXMERT model)"),Zto=l(),qg=a("li"),nae=a("strong"),eao=o("m2m_100"),oao=o(" \u2014 "),pP=a("a"),rao=o("M2M100Tokenizer"),tao=o(" (M2M100 model)"),aao=l(),Ng=a("li"),sae=a("strong"),nao=o("marian"),sao=o(" \u2014 "),uP=a("a"),lao=o("MarianTokenizer"),iao=o(" (Marian model)"),dao=l(),ds=a("li"),lae=a("strong"),cao=o("mbart"),fao=o(" \u2014 "),_P=a("a"),mao=o("MBartTokenizer"),gao=o(" or "),bP=a("a"),hao=o("MBartTokenizerFast"),pao=o(" (mBART model)"),uao=l(),cs=a("li"),iae=a("strong"),_ao=o("mbart50"),bao=o(" \u2014 "),vP=a("a"),vao=o("MBart50Tokenizer"),Fao=o(" or "),FP=a("a"),Tao=o("MBart50TokenizerFast"),Mao=o(" (mBART-50 model)"),Eao=l(),fs=a("li"),dae=a("strong"),Cao=o("megatron-bert"),wao=o(" \u2014 "),TP=a("a"),Aao=o("BertTokenizer"),yao=o(" or "),MP=a("a"),Lao=o("BertTokenizerFast"),xao=o(" (MegatronBert model)"),$ao=l(),jg=a("li"),cae=a("strong"),kao=o("mluke"),Sao=o(" \u2014 "),EP=a("a"),Rao=o("MLukeTokenizer"),Pao=o(" (mLUKE model)"),Bao=l(),ms=a("li"),fae=a("strong"),Iao=o("mobilebert"),qao=o(" \u2014 "),CP=a("a"),Nao=o("MobileBertTokenizer"),jao=o(" or "),wP=a("a"),Dao=o("MobileBertTokenizerFast"),Gao=o(" (MobileBERT model)"),Oao=l(),gs=a("li"),mae=a("strong"),Vao=o("mpnet"),Xao=o(" \u2014 "),AP=a("a"),zao=o("MPNetTokenizer"),Wao=o(" or "),yP=a("a"),Qao=o("MPNetTokenizerFast"),Hao=o(" (MPNet model)"),Uao=l(),hs=a("li"),gae=a("strong"),Jao=o("mt5"),Yao=o(" \u2014 "),LP=a("a"),Kao=o("MT5Tokenizer"),Zao=o(" or "),xP=a("a"),eno=o("MT5TokenizerFast"),ono=o(" (mT5 model)"),rno=l(),ps=a("li"),hae=a("strong"),tno=o("nystromformer"),ano=o(" \u2014 "),$P=a("a"),nno=o("AlbertTokenizer"),sno=o(" or "),kP=a("a"),lno=o("AlbertTokenizerFast"),ino=o(" (Nystromformer model)"),dno=l(),us=a("li"),pae=a("strong"),cno=o("openai-gpt"),fno=o(" \u2014 "),SP=a("a"),mno=o("OpenAIGPTTokenizer"),gno=o(" or "),RP=a("a"),hno=o("OpenAIGPTTokenizerFast"),pno=o(" (OpenAI GPT model)"),uno=l(),Dg=a("li"),uae=a("strong"),_no=o("opt"),bno=o(" \u2014 "),PP=a("a"),vno=o("GPT2Tokenizer"),Fno=o(" (OPT model)"),Tno=l(),_s=a("li"),_ae=a("strong"),Mno=o("pegasus"),Eno=o(" \u2014 "),BP=a("a"),Cno=o("PegasusTokenizer"),wno=o(" or "),IP=a("a"),Ano=o("PegasusTokenizerFast"),yno=o(" (Pegasus model)"),Lno=l(),Gg=a("li"),bae=a("strong"),xno=o("perceiver"),$no=o(" \u2014 "),qP=a("a"),kno=o("PerceiverTokenizer"),Sno=o(" (Perceiver model)"),Rno=l(),Og=a("li"),vae=a("strong"),Pno=o("phobert"),Bno=o(" \u2014 "),NP=a("a"),Ino=o("PhobertTokenizer"),qno=o(" (PhoBERT model)"),Nno=l(),Vg=a("li"),Fae=a("strong"),jno=o("plbart"),Dno=o(" \u2014 "),jP=a("a"),Gno=o("PLBartTokenizer"),Ono=o(" (PLBart model)"),Vno=l(),Xg=a("li"),Tae=a("strong"),Xno=o("prophetnet"),zno=o(" \u2014 "),DP=a("a"),Wno=o("ProphetNetTokenizer"),Qno=o(" (ProphetNet model)"),Hno=l(),bs=a("li"),Mae=a("strong"),Uno=o("qdqbert"),Jno=o(" \u2014 "),GP=a("a"),Yno=o("BertTokenizer"),Kno=o(" or "),OP=a("a"),Zno=o("BertTokenizerFast"),eso=o(" (QDQBert model)"),oso=l(),zg=a("li"),Eae=a("strong"),rso=o("rag"),tso=o(" \u2014 "),VP=a("a"),aso=o("RagTokenizer"),nso=o(" (RAG model)"),sso=l(),vs=a("li"),Cae=a("strong"),lso=o("realm"),iso=o(" \u2014 "),XP=a("a"),dso=o("RealmTokenizer"),cso=o(" or "),zP=a("a"),fso=o("RealmTokenizerFast"),mso=o(" (Realm model)"),gso=l(),Fs=a("li"),wae=a("strong"),hso=o("reformer"),pso=o(" \u2014 "),WP=a("a"),uso=o("ReformerTokenizer"),_so=o(" or "),QP=a("a"),bso=o("ReformerTokenizerFast"),vso=o(" (Reformer model)"),Fso=l(),Ts=a("li"),Aae=a("strong"),Tso=o("rembert"),Mso=o(" \u2014 "),HP=a("a"),Eso=o("RemBertTokenizer"),Cso=o(" or "),UP=a("a"),wso=o("RemBertTokenizerFast"),Aso=o(" (RemBERT model)"),yso=l(),Ms=a("li"),yae=a("strong"),Lso=o("retribert"),xso=o(" \u2014 "),JP=a("a"),$so=o("RetriBertTokenizer"),kso=o(" or "),YP=a("a"),Sso=o("RetriBertTokenizerFast"),Rso=o(" (RetriBERT model)"),Pso=l(),Es=a("li"),Lae=a("strong"),Bso=o("roberta"),Iso=o(" \u2014 "),KP=a("a"),qso=o("RobertaTokenizer"),Nso=o(" or "),ZP=a("a"),jso=o("RobertaTokenizerFast"),Dso=o(" (RoBERTa model)"),Gso=l(),Cs=a("li"),xae=a("strong"),Oso=o("roformer"),Vso=o(" \u2014 "),eB=a("a"),Xso=o("RoFormerTokenizer"),zso=o(" or "),oB=a("a"),Wso=o("RoFormerTokenizerFast"),Qso=o(" (RoFormer model)"),Hso=l(),Wg=a("li"),$ae=a("strong"),Uso=o("speech_to_text"),Jso=o(" \u2014 "),rB=a("a"),Yso=o("Speech2TextTokenizer"),Kso=o(" (Speech2Text model)"),Zso=l(),Qg=a("li"),kae=a("strong"),elo=o("speech_to_text_2"),olo=o(" \u2014 "),tB=a("a"),rlo=o("Speech2Text2Tokenizer"),tlo=o(" (Speech2Text2 model)"),alo=l(),ws=a("li"),Sae=a("strong"),nlo=o("splinter"),slo=o(" \u2014 "),aB=a("a"),llo=o("SplinterTokenizer"),ilo=o(" or "),nB=a("a"),dlo=o("SplinterTokenizerFast"),clo=o(" (Splinter model)"),flo=l(),As=a("li"),Rae=a("strong"),mlo=o("squeezebert"),glo=o(" \u2014 "),sB=a("a"),hlo=o("SqueezeBertTokenizer"),plo=o(" or "),lB=a("a"),ulo=o("SqueezeBertTokenizerFast"),_lo=o(" (SqueezeBERT model)"),blo=l(),ys=a("li"),Pae=a("strong"),vlo=o("t5"),Flo=o(" \u2014 "),iB=a("a"),Tlo=o("T5Tokenizer"),Mlo=o(" or "),dB=a("a"),Elo=o("T5TokenizerFast"),Clo=o(" (T5 model)"),wlo=l(),Hg=a("li"),Bae=a("strong"),Alo=o("tapas"),ylo=o(" \u2014 "),cB=a("a"),Llo=o("TapasTokenizer"),xlo=o(" (TAPAS model)"),$lo=l(),Ug=a("li"),Iae=a("strong"),klo=o("tapex"),Slo=o(" \u2014 "),fB=a("a"),Rlo=o("TapexTokenizer"),Plo=o(" (TAPEX model)"),Blo=l(),Jg=a("li"),qae=a("strong"),Ilo=o("transfo-xl"),qlo=o(" \u2014 "),mB=a("a"),Nlo=o("TransfoXLTokenizer"),jlo=o(" (Transformer-XL model)"),Dlo=l(),Ls=a("li"),Nae=a("strong"),Glo=o("visual_bert"),Olo=o(" \u2014 "),gB=a("a"),Vlo=o("BertTokenizer"),Xlo=o(" or "),hB=a("a"),zlo=o("BertTokenizerFast"),Wlo=o(" (VisualBert model)"),Qlo=l(),Yg=a("li"),jae=a("strong"),Hlo=o("wav2vec2"),Ulo=o(" \u2014 "),pB=a("a"),Jlo=o("Wav2Vec2CTCTokenizer"),Ylo=o(" (Wav2Vec2 model)"),Klo=l(),Kg=a("li"),Dae=a("strong"),Zlo=o("wav2vec2-conformer"),eio=o(" \u2014 "),uB=a("a"),oio=o("Wav2Vec2CTCTokenizer"),rio=o(" (Wav2Vec2-Conformer model)"),tio=l(),Zg=a("li"),Gae=a("strong"),aio=o("wav2vec2_phoneme"),nio=o(" \u2014 "),_B=a("a"),sio=o("Wav2Vec2PhonemeCTCTokenizer"),lio=o(" (Wav2Vec2Phoneme model)"),iio=l(),xs=a("li"),Oae=a("strong"),dio=o("xglm"),cio=o(" \u2014 "),bB=a("a"),fio=o("XGLMTokenizer"),mio=o(" or "),vB=a("a"),gio=o("XGLMTokenizerFast"),hio=o(" (XGLM model)"),pio=l(),eh=a("li"),Vae=a("strong"),uio=o("xlm"),_io=o(" \u2014 "),FB=a("a"),bio=o("XLMTokenizer"),vio=o(" (XLM model)"),Fio=l(),oh=a("li"),Xae=a("strong"),Tio=o("xlm-prophetnet"),Mio=o(" \u2014 "),TB=a("a"),Eio=o("XLMProphetNetTokenizer"),Cio=o(" (XLMProphetNet model)"),wio=l(),$s=a("li"),zae=a("strong"),Aio=o("xlm-roberta"),yio=o(" \u2014 "),MB=a("a"),Lio=o("XLMRobertaTokenizer"),xio=o(" or "),EB=a("a"),$io=o("XLMRobertaTokenizerFast"),kio=o(" (XLM-RoBERTa model)"),Sio=l(),ks=a("li"),Wae=a("strong"),Rio=o("xlm-roberta-xl"),Pio=o(" \u2014 "),CB=a("a"),Bio=o("RobertaTokenizer"),Iio=o(" or "),wB=a("a"),qio=o("RobertaTokenizerFast"),Nio=o(" (XLM-RoBERTa-XL model)"),jio=l(),Ss=a("li"),Qae=a("strong"),Dio=o("xlnet"),Gio=o(" \u2014 "),AB=a("a"),Oio=o("XLNetTokenizer"),Vio=o(" or "),yB=a("a"),Xio=o("XLNetTokenizerFast"),zio=o(" (XLNet model)"),Wio=l(),Rs=a("li"),Hae=a("strong"),Qio=o("yoso"),Hio=o(" \u2014 "),LB=a("a"),Uio=o("AlbertTokenizer"),Jio=o(" or "),xB=a("a"),Yio=o("AlbertTokenizerFast"),Kio=o(" (YOSO model)"),Zio=l(),F(rh.$$.fragment),edo=l(),th=a("div"),F(IA.$$.fragment),odo=l(),Uae=a("p"),rdo=o("Register a new tokenizer in this mapping."),zqe=l(),Mi=a("h2"),ah=a("a"),Jae=a("span"),F(qA.$$.fragment),tdo=l(),Yae=a("span"),ado=o("AutoFeatureExtractor"),Wqe=l(),Ao=a("div"),F(NA.$$.fragment),ndo=l(),jA=a("p"),sdo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),$B=a("a"),ldo=o("AutoFeatureExtractor.from_pretrained()"),ido=o(" class method."),ddo=l(),DA=a("p"),cdo=o("This class cannot be instantiated directly using "),Kae=a("code"),fdo=o("__init__()"),mdo=o(" (throws an error)."),gdo=l(),He=a("div"),F(GA.$$.fragment),hdo=l(),Zae=a("p"),pdo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),udo=l(),ya=a("p"),_do=o("The feature extractor class to instantiate is selected based on the "),ene=a("code"),bdo=o("model_type"),vdo=o(` property of the config object
(either passed as an argument or loaded from `),one=a("code"),Fdo=o("pretrained_model_name_or_path"),Tdo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),rne=a("code"),Mdo=o("pretrained_model_name_or_path"),Edo=o(":"),Cdo=l(),Y=a("ul"),nh=a("li"),tne=a("strong"),wdo=o("beit"),Ado=o(" \u2014 "),kB=a("a"),ydo=o("BeitFeatureExtractor"),Ldo=o(" (BEiT model)"),xdo=l(),sh=a("li"),ane=a("strong"),$do=o("clip"),kdo=o(" \u2014 "),SB=a("a"),Sdo=o("CLIPFeatureExtractor"),Rdo=o(" (CLIP model)"),Pdo=l(),lh=a("li"),nne=a("strong"),Bdo=o("convnext"),Ido=o(" \u2014 "),RB=a("a"),qdo=o("ConvNextFeatureExtractor"),Ndo=o(" (ConvNext model)"),jdo=l(),ih=a("li"),sne=a("strong"),Ddo=o("cvt"),Gdo=o(" \u2014 "),PB=a("a"),Odo=o("ConvNextFeatureExtractor"),Vdo=o(" (CvT model)"),Xdo=l(),dh=a("li"),lne=a("strong"),zdo=o("data2vec-audio"),Wdo=o(" \u2014 "),BB=a("a"),Qdo=o("Wav2Vec2FeatureExtractor"),Hdo=o(" (Data2VecAudio model)"),Udo=l(),ch=a("li"),ine=a("strong"),Jdo=o("data2vec-vision"),Ydo=o(" \u2014 "),IB=a("a"),Kdo=o("BeitFeatureExtractor"),Zdo=o(" (Data2VecVision model)"),eco=l(),fh=a("li"),dne=a("strong"),oco=o("deit"),rco=o(" \u2014 "),qB=a("a"),tco=o("DeiTFeatureExtractor"),aco=o(" (DeiT model)"),nco=l(),mh=a("li"),cne=a("strong"),sco=o("detr"),lco=o(" \u2014 "),NB=a("a"),ico=o("DetrFeatureExtractor"),dco=o(" (DETR model)"),cco=l(),gh=a("li"),fne=a("strong"),fco=o("dpt"),mco=o(" \u2014 "),jB=a("a"),gco=o("DPTFeatureExtractor"),hco=o(" (DPT model)"),pco=l(),hh=a("li"),mne=a("strong"),uco=o("flava"),_co=o(" \u2014 "),DB=a("a"),bco=o("FlavaFeatureExtractor"),vco=o(" (Flava model)"),Fco=l(),ph=a("li"),gne=a("strong"),Tco=o("glpn"),Mco=o(" \u2014 "),GB=a("a"),Eco=o("GLPNFeatureExtractor"),Cco=o(" (GLPN model)"),wco=l(),uh=a("li"),hne=a("strong"),Aco=o("hubert"),yco=o(" \u2014 "),OB=a("a"),Lco=o("Wav2Vec2FeatureExtractor"),xco=o(" (Hubert model)"),$co=l(),_h=a("li"),pne=a("strong"),kco=o("imagegpt"),Sco=o(" \u2014 "),VB=a("a"),Rco=o("ImageGPTFeatureExtractor"),Pco=o(" (ImageGPT model)"),Bco=l(),bh=a("li"),une=a("strong"),Ico=o("layoutlmv2"),qco=o(" \u2014 "),XB=a("a"),Nco=o("LayoutLMv2FeatureExtractor"),jco=o(" (LayoutLMv2 model)"),Dco=l(),vh=a("li"),_ne=a("strong"),Gco=o("layoutlmv3"),Oco=o(" \u2014 "),zB=a("a"),Vco=o("LayoutLMv3FeatureExtractor"),Xco=o(" (LayoutLMv3 model)"),zco=l(),Fh=a("li"),bne=a("strong"),Wco=o("maskformer"),Qco=o(" \u2014 "),WB=a("a"),Hco=o("MaskFormerFeatureExtractor"),Uco=o(" (MaskFormer model)"),Jco=l(),Th=a("li"),vne=a("strong"),Yco=o("perceiver"),Kco=o(" \u2014 "),QB=a("a"),Zco=o("PerceiverFeatureExtractor"),efo=o(" (Perceiver model)"),ofo=l(),Mh=a("li"),Fne=a("strong"),rfo=o("poolformer"),tfo=o(" \u2014 "),HB=a("a"),afo=o("PoolFormerFeatureExtractor"),nfo=o(" (PoolFormer model)"),sfo=l(),Eh=a("li"),Tne=a("strong"),lfo=o("regnet"),ifo=o(" \u2014 "),UB=a("a"),dfo=o("ConvNextFeatureExtractor"),cfo=o(" (RegNet model)"),ffo=l(),Ch=a("li"),Mne=a("strong"),mfo=o("resnet"),gfo=o(" \u2014 "),JB=a("a"),hfo=o("ConvNextFeatureExtractor"),pfo=o(" (ResNet model)"),ufo=l(),wh=a("li"),Ene=a("strong"),_fo=o("segformer"),bfo=o(" \u2014 "),YB=a("a"),vfo=o("SegformerFeatureExtractor"),Ffo=o(" (SegFormer model)"),Tfo=l(),Ah=a("li"),Cne=a("strong"),Mfo=o("speech_to_text"),Efo=o(" \u2014 "),KB=a("a"),Cfo=o("Speech2TextFeatureExtractor"),wfo=o(" (Speech2Text model)"),Afo=l(),yh=a("li"),wne=a("strong"),yfo=o("swin"),Lfo=o(" \u2014 "),ZB=a("a"),xfo=o("ViTFeatureExtractor"),$fo=o(" (Swin model)"),kfo=l(),Lh=a("li"),Ane=a("strong"),Sfo=o("van"),Rfo=o(" \u2014 "),eI=a("a"),Pfo=o("ConvNextFeatureExtractor"),Bfo=o(" (VAN model)"),Ifo=l(),xh=a("li"),yne=a("strong"),qfo=o("vit"),Nfo=o(" \u2014 "),oI=a("a"),jfo=o("ViTFeatureExtractor"),Dfo=o(" (ViT model)"),Gfo=l(),$h=a("li"),Lne=a("strong"),Ofo=o("vit_mae"),Vfo=o(" \u2014 "),rI=a("a"),Xfo=o("ViTFeatureExtractor"),zfo=o(" (ViTMAE model)"),Wfo=l(),kh=a("li"),xne=a("strong"),Qfo=o("wav2vec2"),Hfo=o(" \u2014 "),tI=a("a"),Ufo=o("Wav2Vec2FeatureExtractor"),Jfo=o(" (Wav2Vec2 model)"),Yfo=l(),Sh=a("li"),$ne=a("strong"),Kfo=o("wav2vec2-conformer"),Zfo=o(" \u2014 "),aI=a("a"),emo=o("Wav2Vec2FeatureExtractor"),omo=o(" (Wav2Vec2-Conformer model)"),rmo=l(),Rh=a("li"),kne=a("strong"),tmo=o("yolos"),amo=o(" \u2014 "),nI=a("a"),nmo=o("YolosFeatureExtractor"),smo=o(" (YOLOS model)"),lmo=l(),F(Ph.$$.fragment),imo=l(),F(Bh.$$.fragment),dmo=l(),Ih=a("div"),F(OA.$$.fragment),cmo=l(),Sne=a("p"),fmo=o("Register a new feature extractor for this class."),Qqe=l(),Ei=a("h2"),qh=a("a"),Rne=a("span"),F(VA.$$.fragment),mmo=l(),Pne=a("span"),gmo=o("AutoProcessor"),Hqe=l(),yo=a("div"),F(XA.$$.fragment),hmo=l(),zA=a("p"),pmo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),sI=a("a"),umo=o("AutoProcessor.from_pretrained()"),_mo=o(" class method."),bmo=l(),WA=a("p"),vmo=o("This class cannot be instantiated directly using "),Bne=a("code"),Fmo=o("__init__()"),Tmo=o(" (throws an error)."),Mmo=l(),Ue=a("div"),F(QA.$$.fragment),Emo=l(),Ine=a("p"),Cmo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),wmo=l(),Ci=a("p"),Amo=o("The processor class to instantiate is selected based on the "),qne=a("code"),ymo=o("model_type"),Lmo=o(` property of the config object (either
passed as an argument or loaded from `),Nne=a("code"),xmo=o("pretrained_model_name_or_path"),$mo=o(" if possible):"),kmo=l(),he=a("ul"),Nh=a("li"),jne=a("strong"),Smo=o("clip"),Rmo=o(" \u2014 "),lI=a("a"),Pmo=o("CLIPProcessor"),Bmo=o(" (CLIP model)"),Imo=l(),jh=a("li"),Dne=a("strong"),qmo=o("flava"),Nmo=o(" \u2014 "),Gne=a("code"),jmo=o("FLAVAProcessor"),Dmo=o(" (Flava model)"),Gmo=l(),Dh=a("li"),One=a("strong"),Omo=o("layoutlmv2"),Vmo=o(" \u2014 "),iI=a("a"),Xmo=o("LayoutLMv2Processor"),zmo=o(" (LayoutLMv2 model)"),Wmo=l(),Gh=a("li"),Vne=a("strong"),Qmo=o("layoutlmv3"),Hmo=o(" \u2014 "),dI=a("a"),Umo=o("LayoutLMv3Processor"),Jmo=o(" (LayoutLMv3 model)"),Ymo=l(),Oh=a("li"),Xne=a("strong"),Kmo=o("layoutxlm"),Zmo=o(" \u2014 "),cI=a("a"),ego=o("LayoutXLMProcessor"),ogo=o(" (LayoutXLM model)"),rgo=l(),Vh=a("li"),zne=a("strong"),tgo=o("sew"),ago=o(" \u2014 "),fI=a("a"),ngo=o("Wav2Vec2Processor"),sgo=o(" (SEW model)"),lgo=l(),Xh=a("li"),Wne=a("strong"),igo=o("sew-d"),dgo=o(" \u2014 "),mI=a("a"),cgo=o("Wav2Vec2Processor"),fgo=o(" (SEW-D model)"),mgo=l(),zh=a("li"),Qne=a("strong"),ggo=o("speech_to_text"),hgo=o(" \u2014 "),gI=a("a"),pgo=o("Speech2TextProcessor"),ugo=o(" (Speech2Text model)"),_go=l(),Wh=a("li"),Hne=a("strong"),bgo=o("speech_to_text_2"),vgo=o(" \u2014 "),hI=a("a"),Fgo=o("Speech2Text2Processor"),Tgo=o(" (Speech2Text2 model)"),Mgo=l(),Qh=a("li"),Une=a("strong"),Ego=o("trocr"),Cgo=o(" \u2014 "),pI=a("a"),wgo=o("TrOCRProcessor"),Ago=o(" (TrOCR model)"),ygo=l(),Hh=a("li"),Jne=a("strong"),Lgo=o("unispeech"),xgo=o(" \u2014 "),uI=a("a"),$go=o("Wav2Vec2Processor"),kgo=o(" (UniSpeech model)"),Sgo=l(),Uh=a("li"),Yne=a("strong"),Rgo=o("unispeech-sat"),Pgo=o(" \u2014 "),_I=a("a"),Bgo=o("Wav2Vec2Processor"),Igo=o(" (UniSpeechSat model)"),qgo=l(),Jh=a("li"),Kne=a("strong"),Ngo=o("vilt"),jgo=o(" \u2014 "),bI=a("a"),Dgo=o("ViltProcessor"),Ggo=o(" (ViLT model)"),Ogo=l(),Yh=a("li"),Zne=a("strong"),Vgo=o("vision-text-dual-encoder"),Xgo=o(" \u2014 "),vI=a("a"),zgo=o("VisionTextDualEncoderProcessor"),Wgo=o(" (VisionTextDualEncoder model)"),Qgo=l(),Kh=a("li"),ese=a("strong"),Hgo=o("wav2vec2"),Ugo=o(" \u2014 "),FI=a("a"),Jgo=o("Wav2Vec2Processor"),Ygo=o(" (Wav2Vec2 model)"),Kgo=l(),Zh=a("li"),ose=a("strong"),Zgo=o("wav2vec2-conformer"),eho=o(" \u2014 "),TI=a("a"),oho=o("Wav2Vec2Processor"),rho=o(" (Wav2Vec2-Conformer model)"),tho=l(),ep=a("li"),rse=a("strong"),aho=o("wavlm"),nho=o(" \u2014 "),MI=a("a"),sho=o("Wav2Vec2Processor"),lho=o(" (WavLM model)"),iho=l(),F(op.$$.fragment),dho=l(),F(rp.$$.fragment),cho=l(),tp=a("div"),F(HA.$$.fragment),fho=l(),tse=a("p"),mho=o("Register a new processor for this class."),Uqe=l(),wi=a("h2"),ap=a("a"),ase=a("span"),F(UA.$$.fragment),gho=l(),nse=a("span"),hho=o("AutoModel"),Jqe=l(),Lo=a("div"),F(JA.$$.fragment),pho=l(),Ai=a("p"),uho=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),EI=a("a"),_ho=o("from_pretrained()"),bho=o(" class method or the "),CI=a("a"),vho=o("from_config()"),Fho=o(` class
method.`),Tho=l(),YA=a("p"),Mho=o("This class cannot be instantiated directly using "),sse=a("code"),Eho=o("__init__()"),Cho=o(" (throws an error)."),who=l(),tt=a("div"),F(KA.$$.fragment),Aho=l(),lse=a("p"),yho=o("Instantiates one of the base model classes of the library from a configuration."),Lho=l(),yi=a("p"),xho=o(`Note:
Loading a model from its configuration file does `),ise=a("strong"),$ho=o("not"),kho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wI=a("a"),Sho=o("from_pretrained()"),Rho=o(" to load the model weights."),Pho=l(),F(np.$$.fragment),Bho=l(),Je=a("div"),F(ZA.$$.fragment),Iho=l(),dse=a("p"),qho=o("Instantiate one of the base model classes of the library from a pretrained model."),Nho=l(),La=a("p"),jho=o("The model class to instantiate is selected based on the "),cse=a("code"),Dho=o("model_type"),Gho=o(` property of the config object (either
passed as an argument or loaded from `),fse=a("code"),Oho=o("pretrained_model_name_or_path"),Vho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mse=a("code"),Xho=o("pretrained_model_name_or_path"),zho=o(":"),Who=l(),x=a("ul"),sp=a("li"),gse=a("strong"),Qho=o("albert"),Hho=o(" \u2014 "),AI=a("a"),Uho=o("AlbertModel"),Jho=o(" (ALBERT model)"),Yho=l(),lp=a("li"),hse=a("strong"),Kho=o("bart"),Zho=o(" \u2014 "),yI=a("a"),epo=o("BartModel"),opo=o(" (BART model)"),rpo=l(),ip=a("li"),pse=a("strong"),tpo=o("beit"),apo=o(" \u2014 "),LI=a("a"),npo=o("BeitModel"),spo=o(" (BEiT model)"),lpo=l(),dp=a("li"),use=a("strong"),ipo=o("bert"),dpo=o(" \u2014 "),xI=a("a"),cpo=o("BertModel"),fpo=o(" (BERT model)"),mpo=l(),cp=a("li"),_se=a("strong"),gpo=o("bert-generation"),hpo=o(" \u2014 "),$I=a("a"),ppo=o("BertGenerationEncoder"),upo=o(" (Bert Generation model)"),_po=l(),fp=a("li"),bse=a("strong"),bpo=o("big_bird"),vpo=o(" \u2014 "),kI=a("a"),Fpo=o("BigBirdModel"),Tpo=o(" (BigBird model)"),Mpo=l(),mp=a("li"),vse=a("strong"),Epo=o("bigbird_pegasus"),Cpo=o(" \u2014 "),SI=a("a"),wpo=o("BigBirdPegasusModel"),Apo=o(" (BigBirdPegasus model)"),ypo=l(),gp=a("li"),Fse=a("strong"),Lpo=o("blenderbot"),xpo=o(" \u2014 "),RI=a("a"),$po=o("BlenderbotModel"),kpo=o(" (Blenderbot model)"),Spo=l(),hp=a("li"),Tse=a("strong"),Rpo=o("blenderbot-small"),Ppo=o(" \u2014 "),PI=a("a"),Bpo=o("BlenderbotSmallModel"),Ipo=o(" (BlenderbotSmall model)"),qpo=l(),pp=a("li"),Mse=a("strong"),Npo=o("camembert"),jpo=o(" \u2014 "),BI=a("a"),Dpo=o("CamembertModel"),Gpo=o(" (CamemBERT model)"),Opo=l(),up=a("li"),Ese=a("strong"),Vpo=o("canine"),Xpo=o(" \u2014 "),II=a("a"),zpo=o("CanineModel"),Wpo=o(" (Canine model)"),Qpo=l(),_p=a("li"),Cse=a("strong"),Hpo=o("clip"),Upo=o(" \u2014 "),qI=a("a"),Jpo=o("CLIPModel"),Ypo=o(" (CLIP model)"),Kpo=l(),bp=a("li"),wse=a("strong"),Zpo=o("convbert"),euo=o(" \u2014 "),NI=a("a"),ouo=o("ConvBertModel"),ruo=o(" (ConvBERT model)"),tuo=l(),vp=a("li"),Ase=a("strong"),auo=o("convnext"),nuo=o(" \u2014 "),jI=a("a"),suo=o("ConvNextModel"),luo=o(" (ConvNext model)"),iuo=l(),Fp=a("li"),yse=a("strong"),duo=o("ctrl"),cuo=o(" \u2014 "),DI=a("a"),fuo=o("CTRLModel"),muo=o(" (CTRL model)"),guo=l(),Tp=a("li"),Lse=a("strong"),huo=o("cvt"),puo=o(" \u2014 "),GI=a("a"),uuo=o("CvtModel"),_uo=o(" (CvT model)"),buo=l(),Mp=a("li"),xse=a("strong"),vuo=o("data2vec-audio"),Fuo=o(" \u2014 "),OI=a("a"),Tuo=o("Data2VecAudioModel"),Muo=o(" (Data2VecAudio model)"),Euo=l(),Ep=a("li"),$se=a("strong"),Cuo=o("data2vec-text"),wuo=o(" \u2014 "),VI=a("a"),Auo=o("Data2VecTextModel"),yuo=o(" (Data2VecText model)"),Luo=l(),Cp=a("li"),kse=a("strong"),xuo=o("data2vec-vision"),$uo=o(" \u2014 "),XI=a("a"),kuo=o("Data2VecVisionModel"),Suo=o(" (Data2VecVision model)"),Ruo=l(),wp=a("li"),Sse=a("strong"),Puo=o("deberta"),Buo=o(" \u2014 "),zI=a("a"),Iuo=o("DebertaModel"),quo=o(" (DeBERTa model)"),Nuo=l(),Ap=a("li"),Rse=a("strong"),juo=o("deberta-v2"),Duo=o(" \u2014 "),WI=a("a"),Guo=o("DebertaV2Model"),Ouo=o(" (DeBERTa-v2 model)"),Vuo=l(),yp=a("li"),Pse=a("strong"),Xuo=o("decision_transformer"),zuo=o(" \u2014 "),QI=a("a"),Wuo=o("DecisionTransformerModel"),Quo=o(" (Decision Transformer model)"),Huo=l(),Lp=a("li"),Bse=a("strong"),Uuo=o("deit"),Juo=o(" \u2014 "),HI=a("a"),Yuo=o("DeiTModel"),Kuo=o(" (DeiT model)"),Zuo=l(),xp=a("li"),Ise=a("strong"),e_o=o("detr"),o_o=o(" \u2014 "),UI=a("a"),r_o=o("DetrModel"),t_o=o(" (DETR model)"),a_o=l(),$p=a("li"),qse=a("strong"),n_o=o("distilbert"),s_o=o(" \u2014 "),JI=a("a"),l_o=o("DistilBertModel"),i_o=o(" (DistilBERT model)"),d_o=l(),kp=a("li"),Nse=a("strong"),c_o=o("dpr"),f_o=o(" \u2014 "),YI=a("a"),m_o=o("DPRQuestionEncoder"),g_o=o(" (DPR model)"),h_o=l(),Sp=a("li"),jse=a("strong"),p_o=o("dpt"),u_o=o(" \u2014 "),KI=a("a"),__o=o("DPTModel"),b_o=o(" (DPT model)"),v_o=l(),Rp=a("li"),Dse=a("strong"),F_o=o("electra"),T_o=o(" \u2014 "),ZI=a("a"),M_o=o("ElectraModel"),E_o=o(" (ELECTRA model)"),C_o=l(),Pp=a("li"),Gse=a("strong"),w_o=o("flaubert"),A_o=o(" \u2014 "),eq=a("a"),y_o=o("FlaubertModel"),L_o=o(" (FlauBERT model)"),x_o=l(),Bp=a("li"),Ose=a("strong"),$_o=o("flava"),k_o=o(" \u2014 "),oq=a("a"),S_o=o("FlavaModel"),R_o=o(" (Flava model)"),P_o=l(),Ip=a("li"),Vse=a("strong"),B_o=o("fnet"),I_o=o(" \u2014 "),rq=a("a"),q_o=o("FNetModel"),N_o=o(" (FNet model)"),j_o=l(),qp=a("li"),Xse=a("strong"),D_o=o("fsmt"),G_o=o(" \u2014 "),tq=a("a"),O_o=o("FSMTModel"),V_o=o(" (FairSeq Machine-Translation model)"),X_o=l(),Ps=a("li"),zse=a("strong"),z_o=o("funnel"),W_o=o(" \u2014 "),aq=a("a"),Q_o=o("FunnelModel"),H_o=o(" or "),nq=a("a"),U_o=o("FunnelBaseModel"),J_o=o(" (Funnel Transformer model)"),Y_o=l(),Np=a("li"),Wse=a("strong"),K_o=o("glpn"),Z_o=o(" \u2014 "),sq=a("a"),e3o=o("GLPNModel"),o3o=o(" (GLPN model)"),r3o=l(),jp=a("li"),Qse=a("strong"),t3o=o("gpt2"),a3o=o(" \u2014 "),lq=a("a"),n3o=o("GPT2Model"),s3o=o(" (OpenAI GPT-2 model)"),l3o=l(),Dp=a("li"),Hse=a("strong"),i3o=o("gpt_neo"),d3o=o(" \u2014 "),iq=a("a"),c3o=o("GPTNeoModel"),f3o=o(" (GPT Neo model)"),m3o=l(),Gp=a("li"),Use=a("strong"),g3o=o("gptj"),h3o=o(" \u2014 "),dq=a("a"),p3o=o("GPTJModel"),u3o=o(" (GPT-J model)"),_3o=l(),Op=a("li"),Jse=a("strong"),b3o=o("hubert"),v3o=o(" \u2014 "),cq=a("a"),F3o=o("HubertModel"),T3o=o(" (Hubert model)"),M3o=l(),Vp=a("li"),Yse=a("strong"),E3o=o("ibert"),C3o=o(" \u2014 "),fq=a("a"),w3o=o("IBertModel"),A3o=o(" (I-BERT model)"),y3o=l(),Xp=a("li"),Kse=a("strong"),L3o=o("imagegpt"),x3o=o(" \u2014 "),mq=a("a"),$3o=o("ImageGPTModel"),k3o=o(" (ImageGPT model)"),S3o=l(),zp=a("li"),Zse=a("strong"),R3o=o("layoutlm"),P3o=o(" \u2014 "),gq=a("a"),B3o=o("LayoutLMModel"),I3o=o(" (LayoutLM model)"),q3o=l(),Wp=a("li"),ele=a("strong"),N3o=o("layoutlmv2"),j3o=o(" \u2014 "),hq=a("a"),D3o=o("LayoutLMv2Model"),G3o=o(" (LayoutLMv2 model)"),O3o=l(),Qp=a("li"),ole=a("strong"),V3o=o("layoutlmv3"),X3o=o(" \u2014 "),pq=a("a"),z3o=o("LayoutLMv3Model"),W3o=o(" (LayoutLMv3 model)"),Q3o=l(),Hp=a("li"),rle=a("strong"),H3o=o("led"),U3o=o(" \u2014 "),uq=a("a"),J3o=o("LEDModel"),Y3o=o(" (LED model)"),K3o=l(),Up=a("li"),tle=a("strong"),Z3o=o("longformer"),e1o=o(" \u2014 "),_q=a("a"),o1o=o("LongformerModel"),r1o=o(" (Longformer model)"),t1o=l(),Jp=a("li"),ale=a("strong"),a1o=o("luke"),n1o=o(" \u2014 "),bq=a("a"),s1o=o("LukeModel"),l1o=o(" (LUKE model)"),i1o=l(),Yp=a("li"),nle=a("strong"),d1o=o("lxmert"),c1o=o(" \u2014 "),vq=a("a"),f1o=o("LxmertModel"),m1o=o(" (LXMERT model)"),g1o=l(),Kp=a("li"),sle=a("strong"),h1o=o("m2m_100"),p1o=o(" \u2014 "),Fq=a("a"),u1o=o("M2M100Model"),_1o=o(" (M2M100 model)"),b1o=l(),Zp=a("li"),lle=a("strong"),v1o=o("marian"),F1o=o(" \u2014 "),Tq=a("a"),T1o=o("MarianModel"),M1o=o(" (Marian model)"),E1o=l(),eu=a("li"),ile=a("strong"),C1o=o("maskformer"),w1o=o(" \u2014 "),Mq=a("a"),A1o=o("MaskFormerModel"),y1o=o(" (MaskFormer model)"),L1o=l(),ou=a("li"),dle=a("strong"),x1o=o("mbart"),$1o=o(" \u2014 "),Eq=a("a"),k1o=o("MBartModel"),S1o=o(" (mBART model)"),R1o=l(),ru=a("li"),cle=a("strong"),P1o=o("megatron-bert"),B1o=o(" \u2014 "),Cq=a("a"),I1o=o("MegatronBertModel"),q1o=o(" (MegatronBert model)"),N1o=l(),tu=a("li"),fle=a("strong"),j1o=o("mobilebert"),D1o=o(" \u2014 "),wq=a("a"),G1o=o("MobileBertModel"),O1o=o(" (MobileBERT model)"),V1o=l(),au=a("li"),mle=a("strong"),X1o=o("mpnet"),z1o=o(" \u2014 "),Aq=a("a"),W1o=o("MPNetModel"),Q1o=o(" (MPNet model)"),H1o=l(),nu=a("li"),gle=a("strong"),U1o=o("mt5"),J1o=o(" \u2014 "),yq=a("a"),Y1o=o("MT5Model"),K1o=o(" (mT5 model)"),Z1o=l(),su=a("li"),hle=a("strong"),ebo=o("nystromformer"),obo=o(" \u2014 "),Lq=a("a"),rbo=o("NystromformerModel"),tbo=o(" (Nystromformer model)"),abo=l(),lu=a("li"),ple=a("strong"),nbo=o("openai-gpt"),sbo=o(" \u2014 "),xq=a("a"),lbo=o("OpenAIGPTModel"),ibo=o(" (OpenAI GPT model)"),dbo=l(),iu=a("li"),ule=a("strong"),cbo=o("opt"),fbo=o(" \u2014 "),$q=a("a"),mbo=o("OPTModel"),gbo=o(" (OPT model)"),hbo=l(),du=a("li"),_le=a("strong"),pbo=o("pegasus"),ubo=o(" \u2014 "),kq=a("a"),_bo=o("PegasusModel"),bbo=o(" (Pegasus model)"),vbo=l(),cu=a("li"),ble=a("strong"),Fbo=o("perceiver"),Tbo=o(" \u2014 "),Sq=a("a"),Mbo=o("PerceiverModel"),Ebo=o(" (Perceiver model)"),Cbo=l(),fu=a("li"),vle=a("strong"),wbo=o("plbart"),Abo=o(" \u2014 "),Rq=a("a"),ybo=o("PLBartModel"),Lbo=o(" (PLBart model)"),xbo=l(),mu=a("li"),Fle=a("strong"),$bo=o("poolformer"),kbo=o(" \u2014 "),Pq=a("a"),Sbo=o("PoolFormerModel"),Rbo=o(" (PoolFormer model)"),Pbo=l(),gu=a("li"),Tle=a("strong"),Bbo=o("prophetnet"),Ibo=o(" \u2014 "),Bq=a("a"),qbo=o("ProphetNetModel"),Nbo=o(" (ProphetNet model)"),jbo=l(),hu=a("li"),Mle=a("strong"),Dbo=o("qdqbert"),Gbo=o(" \u2014 "),Iq=a("a"),Obo=o("QDQBertModel"),Vbo=o(" (QDQBert model)"),Xbo=l(),pu=a("li"),Ele=a("strong"),zbo=o("reformer"),Wbo=o(" \u2014 "),qq=a("a"),Qbo=o("ReformerModel"),Hbo=o(" (Reformer model)"),Ubo=l(),uu=a("li"),Cle=a("strong"),Jbo=o("regnet"),Ybo=o(" \u2014 "),Nq=a("a"),Kbo=o("RegNetModel"),Zbo=o(" (RegNet model)"),e2o=l(),_u=a("li"),wle=a("strong"),o2o=o("rembert"),r2o=o(" \u2014 "),jq=a("a"),t2o=o("RemBertModel"),a2o=o(" (RemBERT model)"),n2o=l(),bu=a("li"),Ale=a("strong"),s2o=o("resnet"),l2o=o(" \u2014 "),Dq=a("a"),i2o=o("ResNetModel"),d2o=o(" (ResNet model)"),c2o=l(),vu=a("li"),yle=a("strong"),f2o=o("retribert"),m2o=o(" \u2014 "),Gq=a("a"),g2o=o("RetriBertModel"),h2o=o(" (RetriBERT model)"),p2o=l(),Fu=a("li"),Lle=a("strong"),u2o=o("roberta"),_2o=o(" \u2014 "),Oq=a("a"),b2o=o("RobertaModel"),v2o=o(" (RoBERTa model)"),F2o=l(),Tu=a("li"),xle=a("strong"),T2o=o("roformer"),M2o=o(" \u2014 "),Vq=a("a"),E2o=o("RoFormerModel"),C2o=o(" (RoFormer model)"),w2o=l(),Mu=a("li"),$le=a("strong"),A2o=o("segformer"),y2o=o(" \u2014 "),Xq=a("a"),L2o=o("SegformerModel"),x2o=o(" (SegFormer model)"),$2o=l(),Eu=a("li"),kle=a("strong"),k2o=o("sew"),S2o=o(" \u2014 "),zq=a("a"),R2o=o("SEWModel"),P2o=o(" (SEW model)"),B2o=l(),Cu=a("li"),Sle=a("strong"),I2o=o("sew-d"),q2o=o(" \u2014 "),Wq=a("a"),N2o=o("SEWDModel"),j2o=o(" (SEW-D model)"),D2o=l(),wu=a("li"),Rle=a("strong"),G2o=o("speech_to_text"),O2o=o(" \u2014 "),Qq=a("a"),V2o=o("Speech2TextModel"),X2o=o(" (Speech2Text model)"),z2o=l(),Au=a("li"),Ple=a("strong"),W2o=o("splinter"),Q2o=o(" \u2014 "),Hq=a("a"),H2o=o("SplinterModel"),U2o=o(" (Splinter model)"),J2o=l(),yu=a("li"),Ble=a("strong"),Y2o=o("squeezebert"),K2o=o(" \u2014 "),Uq=a("a"),Z2o=o("SqueezeBertModel"),evo=o(" (SqueezeBERT model)"),ovo=l(),Lu=a("li"),Ile=a("strong"),rvo=o("swin"),tvo=o(" \u2014 "),Jq=a("a"),avo=o("SwinModel"),nvo=o(" (Swin model)"),svo=l(),xu=a("li"),qle=a("strong"),lvo=o("t5"),ivo=o(" \u2014 "),Yq=a("a"),dvo=o("T5Model"),cvo=o(" (T5 model)"),fvo=l(),$u=a("li"),Nle=a("strong"),mvo=o("tapas"),gvo=o(" \u2014 "),Kq=a("a"),hvo=o("TapasModel"),pvo=o(" (TAPAS model)"),uvo=l(),ku=a("li"),jle=a("strong"),_vo=o("trajectory_transformer"),bvo=o(" \u2014 "),Zq=a("a"),vvo=o("TrajectoryTransformerModel"),Fvo=o(" (Trajectory Transformer model)"),Tvo=l(),Su=a("li"),Dle=a("strong"),Mvo=o("transfo-xl"),Evo=o(" \u2014 "),eN=a("a"),Cvo=o("TransfoXLModel"),wvo=o(" (Transformer-XL model)"),Avo=l(),Ru=a("li"),Gle=a("strong"),yvo=o("unispeech"),Lvo=o(" \u2014 "),oN=a("a"),xvo=o("UniSpeechModel"),$vo=o(" (UniSpeech model)"),kvo=l(),Pu=a("li"),Ole=a("strong"),Svo=o("unispeech-sat"),Rvo=o(" \u2014 "),rN=a("a"),Pvo=o("UniSpeechSatModel"),Bvo=o(" (UniSpeechSat model)"),Ivo=l(),Bu=a("li"),Vle=a("strong"),qvo=o("van"),Nvo=o(" \u2014 "),tN=a("a"),jvo=o("VanModel"),Dvo=o(" (VAN model)"),Gvo=l(),Iu=a("li"),Xle=a("strong"),Ovo=o("vilt"),Vvo=o(" \u2014 "),aN=a("a"),Xvo=o("ViltModel"),zvo=o(" (ViLT model)"),Wvo=l(),qu=a("li"),zle=a("strong"),Qvo=o("vision-text-dual-encoder"),Hvo=o(" \u2014 "),nN=a("a"),Uvo=o("VisionTextDualEncoderModel"),Jvo=o(" (VisionTextDualEncoder model)"),Yvo=l(),Nu=a("li"),Wle=a("strong"),Kvo=o("visual_bert"),Zvo=o(" \u2014 "),sN=a("a"),eFo=o("VisualBertModel"),oFo=o(" (VisualBert model)"),rFo=l(),ju=a("li"),Qle=a("strong"),tFo=o("vit"),aFo=o(" \u2014 "),lN=a("a"),nFo=o("ViTModel"),sFo=o(" (ViT model)"),lFo=l(),Du=a("li"),Hle=a("strong"),iFo=o("vit_mae"),dFo=o(" \u2014 "),iN=a("a"),cFo=o("ViTMAEModel"),fFo=o(" (ViTMAE model)"),mFo=l(),Gu=a("li"),Ule=a("strong"),gFo=o("wav2vec2"),hFo=o(" \u2014 "),dN=a("a"),pFo=o("Wav2Vec2Model"),uFo=o(" (Wav2Vec2 model)"),_Fo=l(),Ou=a("li"),Jle=a("strong"),bFo=o("wav2vec2-conformer"),vFo=o(" \u2014 "),cN=a("a"),FFo=o("Wav2Vec2ConformerModel"),TFo=o(" (Wav2Vec2-Conformer model)"),MFo=l(),Vu=a("li"),Yle=a("strong"),EFo=o("wavlm"),CFo=o(" \u2014 "),fN=a("a"),wFo=o("WavLMModel"),AFo=o(" (WavLM model)"),yFo=l(),Xu=a("li"),Kle=a("strong"),LFo=o("xglm"),xFo=o(" \u2014 "),mN=a("a"),$Fo=o("XGLMModel"),kFo=o(" (XGLM model)"),SFo=l(),zu=a("li"),Zle=a("strong"),RFo=o("xlm"),PFo=o(" \u2014 "),gN=a("a"),BFo=o("XLMModel"),IFo=o(" (XLM model)"),qFo=l(),Wu=a("li"),eie=a("strong"),NFo=o("xlm-prophetnet"),jFo=o(" \u2014 "),hN=a("a"),DFo=o("XLMProphetNetModel"),GFo=o(" (XLMProphetNet model)"),OFo=l(),Qu=a("li"),oie=a("strong"),VFo=o("xlm-roberta"),XFo=o(" \u2014 "),pN=a("a"),zFo=o("XLMRobertaModel"),WFo=o(" (XLM-RoBERTa model)"),QFo=l(),Hu=a("li"),rie=a("strong"),HFo=o("xlm-roberta-xl"),UFo=o(" \u2014 "),uN=a("a"),JFo=o("XLMRobertaXLModel"),YFo=o(" (XLM-RoBERTa-XL model)"),KFo=l(),Uu=a("li"),tie=a("strong"),ZFo=o("xlnet"),eTo=o(" \u2014 "),_N=a("a"),oTo=o("XLNetModel"),rTo=o(" (XLNet model)"),tTo=l(),Ju=a("li"),aie=a("strong"),aTo=o("yolos"),nTo=o(" \u2014 "),bN=a("a"),sTo=o("YolosModel"),lTo=o(" (YOLOS model)"),iTo=l(),Yu=a("li"),nie=a("strong"),dTo=o("yoso"),cTo=o(" \u2014 "),vN=a("a"),fTo=o("YosoModel"),mTo=o(" (YOSO model)"),gTo=l(),Ku=a("p"),hTo=o("The model is set in evaluation mode by default using "),sie=a("code"),pTo=o("model.eval()"),uTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lie=a("code"),_To=o("model.train()"),bTo=l(),F(Zu.$$.fragment),Yqe=l(),Li=a("h2"),e_=a("a"),iie=a("span"),F(e6.$$.fragment),vTo=l(),die=a("span"),FTo=o("AutoModelForPreTraining"),Kqe=l(),xo=a("div"),F(o6.$$.fragment),TTo=l(),xi=a("p"),MTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FN=a("a"),ETo=o("from_pretrained()"),CTo=o(" class method or the "),TN=a("a"),wTo=o("from_config()"),ATo=o(` class
method.`),yTo=l(),r6=a("p"),LTo=o("This class cannot be instantiated directly using "),cie=a("code"),xTo=o("__init__()"),$To=o(" (throws an error)."),kTo=l(),at=a("div"),F(t6.$$.fragment),STo=l(),fie=a("p"),RTo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),PTo=l(),$i=a("p"),BTo=o(`Note:
Loading a model from its configuration file does `),mie=a("strong"),ITo=o("not"),qTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MN=a("a"),NTo=o("from_pretrained()"),jTo=o(" to load the model weights."),DTo=l(),F(o_.$$.fragment),GTo=l(),Ye=a("div"),F(a6.$$.fragment),OTo=l(),gie=a("p"),VTo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),XTo=l(),xa=a("p"),zTo=o("The model class to instantiate is selected based on the "),hie=a("code"),WTo=o("model_type"),QTo=o(` property of the config object (either
passed as an argument or loaded from `),pie=a("code"),HTo=o("pretrained_model_name_or_path"),UTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uie=a("code"),JTo=o("pretrained_model_name_or_path"),YTo=o(":"),KTo=l(),G=a("ul"),r_=a("li"),_ie=a("strong"),ZTo=o("albert"),e7o=o(" \u2014 "),EN=a("a"),o7o=o("AlbertForPreTraining"),r7o=o(" (ALBERT model)"),t7o=l(),t_=a("li"),bie=a("strong"),a7o=o("bart"),n7o=o(" \u2014 "),CN=a("a"),s7o=o("BartForConditionalGeneration"),l7o=o(" (BART model)"),i7o=l(),a_=a("li"),vie=a("strong"),d7o=o("bert"),c7o=o(" \u2014 "),wN=a("a"),f7o=o("BertForPreTraining"),m7o=o(" (BERT model)"),g7o=l(),n_=a("li"),Fie=a("strong"),h7o=o("big_bird"),p7o=o(" \u2014 "),AN=a("a"),u7o=o("BigBirdForPreTraining"),_7o=o(" (BigBird model)"),b7o=l(),s_=a("li"),Tie=a("strong"),v7o=o("camembert"),F7o=o(" \u2014 "),yN=a("a"),T7o=o("CamembertForMaskedLM"),M7o=o(" (CamemBERT model)"),E7o=l(),l_=a("li"),Mie=a("strong"),C7o=o("ctrl"),w7o=o(" \u2014 "),LN=a("a"),A7o=o("CTRLLMHeadModel"),y7o=o(" (CTRL model)"),L7o=l(),i_=a("li"),Eie=a("strong"),x7o=o("data2vec-text"),$7o=o(" \u2014 "),xN=a("a"),k7o=o("Data2VecTextForMaskedLM"),S7o=o(" (Data2VecText model)"),R7o=l(),d_=a("li"),Cie=a("strong"),P7o=o("deberta"),B7o=o(" \u2014 "),$N=a("a"),I7o=o("DebertaForMaskedLM"),q7o=o(" (DeBERTa model)"),N7o=l(),c_=a("li"),wie=a("strong"),j7o=o("deberta-v2"),D7o=o(" \u2014 "),kN=a("a"),G7o=o("DebertaV2ForMaskedLM"),O7o=o(" (DeBERTa-v2 model)"),V7o=l(),f_=a("li"),Aie=a("strong"),X7o=o("distilbert"),z7o=o(" \u2014 "),SN=a("a"),W7o=o("DistilBertForMaskedLM"),Q7o=o(" (DistilBERT model)"),H7o=l(),m_=a("li"),yie=a("strong"),U7o=o("electra"),J7o=o(" \u2014 "),RN=a("a"),Y7o=o("ElectraForPreTraining"),K7o=o(" (ELECTRA model)"),Z7o=l(),g_=a("li"),Lie=a("strong"),e9o=o("flaubert"),o9o=o(" \u2014 "),PN=a("a"),r9o=o("FlaubertWithLMHeadModel"),t9o=o(" (FlauBERT model)"),a9o=l(),h_=a("li"),xie=a("strong"),n9o=o("flava"),s9o=o(" \u2014 "),BN=a("a"),l9o=o("FlavaForPreTraining"),i9o=o(" (Flava model)"),d9o=l(),p_=a("li"),$ie=a("strong"),c9o=o("fnet"),f9o=o(" \u2014 "),IN=a("a"),m9o=o("FNetForPreTraining"),g9o=o(" (FNet model)"),h9o=l(),u_=a("li"),kie=a("strong"),p9o=o("fsmt"),u9o=o(" \u2014 "),qN=a("a"),_9o=o("FSMTForConditionalGeneration"),b9o=o(" (FairSeq Machine-Translation model)"),v9o=l(),__=a("li"),Sie=a("strong"),F9o=o("funnel"),T9o=o(" \u2014 "),NN=a("a"),M9o=o("FunnelForPreTraining"),E9o=o(" (Funnel Transformer model)"),C9o=l(),b_=a("li"),Rie=a("strong"),w9o=o("gpt2"),A9o=o(" \u2014 "),jN=a("a"),y9o=o("GPT2LMHeadModel"),L9o=o(" (OpenAI GPT-2 model)"),x9o=l(),v_=a("li"),Pie=a("strong"),$9o=o("ibert"),k9o=o(" \u2014 "),DN=a("a"),S9o=o("IBertForMaskedLM"),R9o=o(" (I-BERT model)"),P9o=l(),F_=a("li"),Bie=a("strong"),B9o=o("layoutlm"),I9o=o(" \u2014 "),GN=a("a"),q9o=o("LayoutLMForMaskedLM"),N9o=o(" (LayoutLM model)"),j9o=l(),T_=a("li"),Iie=a("strong"),D9o=o("longformer"),G9o=o(" \u2014 "),ON=a("a"),O9o=o("LongformerForMaskedLM"),V9o=o(" (Longformer model)"),X9o=l(),M_=a("li"),qie=a("strong"),z9o=o("lxmert"),W9o=o(" \u2014 "),VN=a("a"),Q9o=o("LxmertForPreTraining"),H9o=o(" (LXMERT model)"),U9o=l(),E_=a("li"),Nie=a("strong"),J9o=o("megatron-bert"),Y9o=o(" \u2014 "),XN=a("a"),K9o=o("MegatronBertForPreTraining"),Z9o=o(" (MegatronBert model)"),eMo=l(),C_=a("li"),jie=a("strong"),oMo=o("mobilebert"),rMo=o(" \u2014 "),zN=a("a"),tMo=o("MobileBertForPreTraining"),aMo=o(" (MobileBERT model)"),nMo=l(),w_=a("li"),Die=a("strong"),sMo=o("mpnet"),lMo=o(" \u2014 "),WN=a("a"),iMo=o("MPNetForMaskedLM"),dMo=o(" (MPNet model)"),cMo=l(),A_=a("li"),Gie=a("strong"),fMo=o("openai-gpt"),mMo=o(" \u2014 "),QN=a("a"),gMo=o("OpenAIGPTLMHeadModel"),hMo=o(" (OpenAI GPT model)"),pMo=l(),y_=a("li"),Oie=a("strong"),uMo=o("retribert"),_Mo=o(" \u2014 "),HN=a("a"),bMo=o("RetriBertModel"),vMo=o(" (RetriBERT model)"),FMo=l(),L_=a("li"),Vie=a("strong"),TMo=o("roberta"),MMo=o(" \u2014 "),UN=a("a"),EMo=o("RobertaForMaskedLM"),CMo=o(" (RoBERTa model)"),wMo=l(),x_=a("li"),Xie=a("strong"),AMo=o("splinter"),yMo=o(" \u2014 "),JN=a("a"),LMo=o("SplinterForPreTraining"),xMo=o(" (Splinter model)"),$Mo=l(),$_=a("li"),zie=a("strong"),kMo=o("squeezebert"),SMo=o(" \u2014 "),YN=a("a"),RMo=o("SqueezeBertForMaskedLM"),PMo=o(" (SqueezeBERT model)"),BMo=l(),k_=a("li"),Wie=a("strong"),IMo=o("t5"),qMo=o(" \u2014 "),KN=a("a"),NMo=o("T5ForConditionalGeneration"),jMo=o(" (T5 model)"),DMo=l(),S_=a("li"),Qie=a("strong"),GMo=o("tapas"),OMo=o(" \u2014 "),ZN=a("a"),VMo=o("TapasForMaskedLM"),XMo=o(" (TAPAS model)"),zMo=l(),R_=a("li"),Hie=a("strong"),WMo=o("transfo-xl"),QMo=o(" \u2014 "),ej=a("a"),HMo=o("TransfoXLLMHeadModel"),UMo=o(" (Transformer-XL model)"),JMo=l(),P_=a("li"),Uie=a("strong"),YMo=o("unispeech"),KMo=o(" \u2014 "),oj=a("a"),ZMo=o("UniSpeechForPreTraining"),e4o=o(" (UniSpeech model)"),o4o=l(),B_=a("li"),Jie=a("strong"),r4o=o("unispeech-sat"),t4o=o(" \u2014 "),rj=a("a"),a4o=o("UniSpeechSatForPreTraining"),n4o=o(" (UniSpeechSat model)"),s4o=l(),I_=a("li"),Yie=a("strong"),l4o=o("visual_bert"),i4o=o(" \u2014 "),tj=a("a"),d4o=o("VisualBertForPreTraining"),c4o=o(" (VisualBert model)"),f4o=l(),q_=a("li"),Kie=a("strong"),m4o=o("vit_mae"),g4o=o(" \u2014 "),aj=a("a"),h4o=o("ViTMAEForPreTraining"),p4o=o(" (ViTMAE model)"),u4o=l(),N_=a("li"),Zie=a("strong"),_4o=o("wav2vec2"),b4o=o(" \u2014 "),nj=a("a"),v4o=o("Wav2Vec2ForPreTraining"),F4o=o(" (Wav2Vec2 model)"),T4o=l(),j_=a("li"),ede=a("strong"),M4o=o("wav2vec2-conformer"),E4o=o(" \u2014 "),sj=a("a"),C4o=o("Wav2Vec2ConformerForPreTraining"),w4o=o(" (Wav2Vec2-Conformer model)"),A4o=l(),D_=a("li"),ode=a("strong"),y4o=o("xlm"),L4o=o(" \u2014 "),lj=a("a"),x4o=o("XLMWithLMHeadModel"),$4o=o(" (XLM model)"),k4o=l(),G_=a("li"),rde=a("strong"),S4o=o("xlm-roberta"),R4o=o(" \u2014 "),ij=a("a"),P4o=o("XLMRobertaForMaskedLM"),B4o=o(" (XLM-RoBERTa model)"),I4o=l(),O_=a("li"),tde=a("strong"),q4o=o("xlm-roberta-xl"),N4o=o(" \u2014 "),dj=a("a"),j4o=o("XLMRobertaXLForMaskedLM"),D4o=o(" (XLM-RoBERTa-XL model)"),G4o=l(),V_=a("li"),ade=a("strong"),O4o=o("xlnet"),V4o=o(" \u2014 "),cj=a("a"),X4o=o("XLNetLMHeadModel"),z4o=o(" (XLNet model)"),W4o=l(),X_=a("p"),Q4o=o("The model is set in evaluation mode by default using "),nde=a("code"),H4o=o("model.eval()"),U4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sde=a("code"),J4o=o("model.train()"),Y4o=l(),F(z_.$$.fragment),Zqe=l(),ki=a("h2"),W_=a("a"),lde=a("span"),F(n6.$$.fragment),K4o=l(),ide=a("span"),Z4o=o("AutoModelForCausalLM"),eNe=l(),$o=a("div"),F(s6.$$.fragment),eEo=l(),Si=a("p"),oEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fj=a("a"),rEo=o("from_pretrained()"),tEo=o(" class method or the "),mj=a("a"),aEo=o("from_config()"),nEo=o(` class
method.`),sEo=l(),l6=a("p"),lEo=o("This class cannot be instantiated directly using "),dde=a("code"),iEo=o("__init__()"),dEo=o(" (throws an error)."),cEo=l(),nt=a("div"),F(i6.$$.fragment),fEo=l(),cde=a("p"),mEo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gEo=l(),Ri=a("p"),hEo=o(`Note:
Loading a model from its configuration file does `),fde=a("strong"),pEo=o("not"),uEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gj=a("a"),_Eo=o("from_pretrained()"),bEo=o(" to load the model weights."),vEo=l(),F(Q_.$$.fragment),FEo=l(),Ke=a("div"),F(d6.$$.fragment),TEo=l(),mde=a("p"),MEo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),EEo=l(),$a=a("p"),CEo=o("The model class to instantiate is selected based on the "),gde=a("code"),wEo=o("model_type"),AEo=o(` property of the config object (either
passed as an argument or loaded from `),hde=a("code"),yEo=o("pretrained_model_name_or_path"),LEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=a("code"),xEo=o("pretrained_model_name_or_path"),$Eo=o(":"),kEo=l(),z=a("ul"),H_=a("li"),ude=a("strong"),SEo=o("bart"),REo=o(" \u2014 "),hj=a("a"),PEo=o("BartForCausalLM"),BEo=o(" (BART model)"),IEo=l(),U_=a("li"),_de=a("strong"),qEo=o("bert"),NEo=o(" \u2014 "),pj=a("a"),jEo=o("BertLMHeadModel"),DEo=o(" (BERT model)"),GEo=l(),J_=a("li"),bde=a("strong"),OEo=o("bert-generation"),VEo=o(" \u2014 "),uj=a("a"),XEo=o("BertGenerationDecoder"),zEo=o(" (Bert Generation model)"),WEo=l(),Y_=a("li"),vde=a("strong"),QEo=o("big_bird"),HEo=o(" \u2014 "),_j=a("a"),UEo=o("BigBirdForCausalLM"),JEo=o(" (BigBird model)"),YEo=l(),K_=a("li"),Fde=a("strong"),KEo=o("bigbird_pegasus"),ZEo=o(" \u2014 "),bj=a("a"),eCo=o("BigBirdPegasusForCausalLM"),oCo=o(" (BigBirdPegasus model)"),rCo=l(),Z_=a("li"),Tde=a("strong"),tCo=o("blenderbot"),aCo=o(" \u2014 "),vj=a("a"),nCo=o("BlenderbotForCausalLM"),sCo=o(" (Blenderbot model)"),lCo=l(),e3=a("li"),Mde=a("strong"),iCo=o("blenderbot-small"),dCo=o(" \u2014 "),Fj=a("a"),cCo=o("BlenderbotSmallForCausalLM"),fCo=o(" (BlenderbotSmall model)"),mCo=l(),o3=a("li"),Ede=a("strong"),gCo=o("camembert"),hCo=o(" \u2014 "),Tj=a("a"),pCo=o("CamembertForCausalLM"),uCo=o(" (CamemBERT model)"),_Co=l(),r3=a("li"),Cde=a("strong"),bCo=o("ctrl"),vCo=o(" \u2014 "),Mj=a("a"),FCo=o("CTRLLMHeadModel"),TCo=o(" (CTRL model)"),MCo=l(),t3=a("li"),wde=a("strong"),ECo=o("data2vec-text"),CCo=o(" \u2014 "),Ej=a("a"),wCo=o("Data2VecTextForCausalLM"),ACo=o(" (Data2VecText model)"),yCo=l(),a3=a("li"),Ade=a("strong"),LCo=o("electra"),xCo=o(" \u2014 "),Cj=a("a"),$Co=o("ElectraForCausalLM"),kCo=o(" (ELECTRA model)"),SCo=l(),n3=a("li"),yde=a("strong"),RCo=o("gpt2"),PCo=o(" \u2014 "),wj=a("a"),BCo=o("GPT2LMHeadModel"),ICo=o(" (OpenAI GPT-2 model)"),qCo=l(),s3=a("li"),Lde=a("strong"),NCo=o("gpt_neo"),jCo=o(" \u2014 "),Aj=a("a"),DCo=o("GPTNeoForCausalLM"),GCo=o(" (GPT Neo model)"),OCo=l(),l3=a("li"),xde=a("strong"),VCo=o("gptj"),XCo=o(" \u2014 "),yj=a("a"),zCo=o("GPTJForCausalLM"),WCo=o(" (GPT-J model)"),QCo=l(),i3=a("li"),$de=a("strong"),HCo=o("marian"),UCo=o(" \u2014 "),Lj=a("a"),JCo=o("MarianForCausalLM"),YCo=o(" (Marian model)"),KCo=l(),d3=a("li"),kde=a("strong"),ZCo=o("mbart"),e5o=o(" \u2014 "),xj=a("a"),o5o=o("MBartForCausalLM"),r5o=o(" (mBART model)"),t5o=l(),c3=a("li"),Sde=a("strong"),a5o=o("megatron-bert"),n5o=o(" \u2014 "),$j=a("a"),s5o=o("MegatronBertForCausalLM"),l5o=o(" (MegatronBert model)"),i5o=l(),f3=a("li"),Rde=a("strong"),d5o=o("openai-gpt"),c5o=o(" \u2014 "),kj=a("a"),f5o=o("OpenAIGPTLMHeadModel"),m5o=o(" (OpenAI GPT model)"),g5o=l(),m3=a("li"),Pde=a("strong"),h5o=o("opt"),p5o=o(" \u2014 "),Sj=a("a"),u5o=o("OPTForCausalLM"),_5o=o(" (OPT model)"),b5o=l(),g3=a("li"),Bde=a("strong"),v5o=o("pegasus"),F5o=o(" \u2014 "),Rj=a("a"),T5o=o("PegasusForCausalLM"),M5o=o(" (Pegasus model)"),E5o=l(),h3=a("li"),Ide=a("strong"),C5o=o("plbart"),w5o=o(" \u2014 "),Pj=a("a"),A5o=o("PLBartForCausalLM"),y5o=o(" (PLBart model)"),L5o=l(),p3=a("li"),qde=a("strong"),x5o=o("prophetnet"),$5o=o(" \u2014 "),Bj=a("a"),k5o=o("ProphetNetForCausalLM"),S5o=o(" (ProphetNet model)"),R5o=l(),u3=a("li"),Nde=a("strong"),P5o=o("qdqbert"),B5o=o(" \u2014 "),Ij=a("a"),I5o=o("QDQBertLMHeadModel"),q5o=o(" (QDQBert model)"),N5o=l(),_3=a("li"),jde=a("strong"),j5o=o("reformer"),D5o=o(" \u2014 "),qj=a("a"),G5o=o("ReformerModelWithLMHead"),O5o=o(" (Reformer model)"),V5o=l(),b3=a("li"),Dde=a("strong"),X5o=o("rembert"),z5o=o(" \u2014 "),Nj=a("a"),W5o=o("RemBertForCausalLM"),Q5o=o(" (RemBERT model)"),H5o=l(),v3=a("li"),Gde=a("strong"),U5o=o("roberta"),J5o=o(" \u2014 "),jj=a("a"),Y5o=o("RobertaForCausalLM"),K5o=o(" (RoBERTa model)"),Z5o=l(),F3=a("li"),Ode=a("strong"),ewo=o("roformer"),owo=o(" \u2014 "),Dj=a("a"),rwo=o("RoFormerForCausalLM"),two=o(" (RoFormer model)"),awo=l(),T3=a("li"),Vde=a("strong"),nwo=o("speech_to_text_2"),swo=o(" \u2014 "),Gj=a("a"),lwo=o("Speech2Text2ForCausalLM"),iwo=o(" (Speech2Text2 model)"),dwo=l(),M3=a("li"),Xde=a("strong"),cwo=o("transfo-xl"),fwo=o(" \u2014 "),Oj=a("a"),mwo=o("TransfoXLLMHeadModel"),gwo=o(" (Transformer-XL model)"),hwo=l(),E3=a("li"),zde=a("strong"),pwo=o("trocr"),uwo=o(" \u2014 "),Vj=a("a"),_wo=o("TrOCRForCausalLM"),bwo=o(" (TrOCR model)"),vwo=l(),C3=a("li"),Wde=a("strong"),Fwo=o("xglm"),Two=o(" \u2014 "),Xj=a("a"),Mwo=o("XGLMForCausalLM"),Ewo=o(" (XGLM model)"),Cwo=l(),w3=a("li"),Qde=a("strong"),wwo=o("xlm"),Awo=o(" \u2014 "),zj=a("a"),ywo=o("XLMWithLMHeadModel"),Lwo=o(" (XLM model)"),xwo=l(),A3=a("li"),Hde=a("strong"),$wo=o("xlm-prophetnet"),kwo=o(" \u2014 "),Wj=a("a"),Swo=o("XLMProphetNetForCausalLM"),Rwo=o(" (XLMProphetNet model)"),Pwo=l(),y3=a("li"),Ude=a("strong"),Bwo=o("xlm-roberta"),Iwo=o(" \u2014 "),Qj=a("a"),qwo=o("XLMRobertaForCausalLM"),Nwo=o(" (XLM-RoBERTa model)"),jwo=l(),L3=a("li"),Jde=a("strong"),Dwo=o("xlm-roberta-xl"),Gwo=o(" \u2014 "),Hj=a("a"),Owo=o("XLMRobertaXLForCausalLM"),Vwo=o(" (XLM-RoBERTa-XL model)"),Xwo=l(),x3=a("li"),Yde=a("strong"),zwo=o("xlnet"),Wwo=o(" \u2014 "),Uj=a("a"),Qwo=o("XLNetLMHeadModel"),Hwo=o(" (XLNet model)"),Uwo=l(),$3=a("p"),Jwo=o("The model is set in evaluation mode by default using "),Kde=a("code"),Ywo=o("model.eval()"),Kwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zde=a("code"),Zwo=o("model.train()"),e0o=l(),F(k3.$$.fragment),oNe=l(),Pi=a("h2"),S3=a("a"),ece=a("span"),F(c6.$$.fragment),o0o=l(),oce=a("span"),r0o=o("AutoModelForMaskedLM"),rNe=l(),ko=a("div"),F(f6.$$.fragment),t0o=l(),Bi=a("p"),a0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Jj=a("a"),n0o=o("from_pretrained()"),s0o=o(" class method or the "),Yj=a("a"),l0o=o("from_config()"),i0o=o(` class
method.`),d0o=l(),m6=a("p"),c0o=o("This class cannot be instantiated directly using "),rce=a("code"),f0o=o("__init__()"),m0o=o(" (throws an error)."),g0o=l(),st=a("div"),F(g6.$$.fragment),h0o=l(),tce=a("p"),p0o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),u0o=l(),Ii=a("p"),_0o=o(`Note:
Loading a model from its configuration file does `),ace=a("strong"),b0o=o("not"),v0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kj=a("a"),F0o=o("from_pretrained()"),T0o=o(" to load the model weights."),M0o=l(),F(R3.$$.fragment),E0o=l(),Ze=a("div"),F(h6.$$.fragment),C0o=l(),nce=a("p"),w0o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),A0o=l(),ka=a("p"),y0o=o("The model class to instantiate is selected based on the "),sce=a("code"),L0o=o("model_type"),x0o=o(` property of the config object (either
passed as an argument or loaded from `),lce=a("code"),$0o=o("pretrained_model_name_or_path"),k0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=a("code"),S0o=o("pretrained_model_name_or_path"),R0o=o(":"),P0o=l(),W=a("ul"),P3=a("li"),dce=a("strong"),B0o=o("albert"),I0o=o(" \u2014 "),Zj=a("a"),q0o=o("AlbertForMaskedLM"),N0o=o(" (ALBERT model)"),j0o=l(),B3=a("li"),cce=a("strong"),D0o=o("bart"),G0o=o(" \u2014 "),eD=a("a"),O0o=o("BartForConditionalGeneration"),V0o=o(" (BART model)"),X0o=l(),I3=a("li"),fce=a("strong"),z0o=o("bert"),W0o=o(" \u2014 "),oD=a("a"),Q0o=o("BertForMaskedLM"),H0o=o(" (BERT model)"),U0o=l(),q3=a("li"),mce=a("strong"),J0o=o("big_bird"),Y0o=o(" \u2014 "),rD=a("a"),K0o=o("BigBirdForMaskedLM"),Z0o=o(" (BigBird model)"),eAo=l(),N3=a("li"),gce=a("strong"),oAo=o("camembert"),rAo=o(" \u2014 "),tD=a("a"),tAo=o("CamembertForMaskedLM"),aAo=o(" (CamemBERT model)"),nAo=l(),j3=a("li"),hce=a("strong"),sAo=o("convbert"),lAo=o(" \u2014 "),aD=a("a"),iAo=o("ConvBertForMaskedLM"),dAo=o(" (ConvBERT model)"),cAo=l(),D3=a("li"),pce=a("strong"),fAo=o("data2vec-text"),mAo=o(" \u2014 "),nD=a("a"),gAo=o("Data2VecTextForMaskedLM"),hAo=o(" (Data2VecText model)"),pAo=l(),G3=a("li"),uce=a("strong"),uAo=o("deberta"),_Ao=o(" \u2014 "),sD=a("a"),bAo=o("DebertaForMaskedLM"),vAo=o(" (DeBERTa model)"),FAo=l(),O3=a("li"),_ce=a("strong"),TAo=o("deberta-v2"),MAo=o(" \u2014 "),lD=a("a"),EAo=o("DebertaV2ForMaskedLM"),CAo=o(" (DeBERTa-v2 model)"),wAo=l(),V3=a("li"),bce=a("strong"),AAo=o("distilbert"),yAo=o(" \u2014 "),iD=a("a"),LAo=o("DistilBertForMaskedLM"),xAo=o(" (DistilBERT model)"),$Ao=l(),X3=a("li"),vce=a("strong"),kAo=o("electra"),SAo=o(" \u2014 "),dD=a("a"),RAo=o("ElectraForMaskedLM"),PAo=o(" (ELECTRA model)"),BAo=l(),z3=a("li"),Fce=a("strong"),IAo=o("flaubert"),qAo=o(" \u2014 "),cD=a("a"),NAo=o("FlaubertWithLMHeadModel"),jAo=o(" (FlauBERT model)"),DAo=l(),W3=a("li"),Tce=a("strong"),GAo=o("fnet"),OAo=o(" \u2014 "),fD=a("a"),VAo=o("FNetForMaskedLM"),XAo=o(" (FNet model)"),zAo=l(),Q3=a("li"),Mce=a("strong"),WAo=o("funnel"),QAo=o(" \u2014 "),mD=a("a"),HAo=o("FunnelForMaskedLM"),UAo=o(" (Funnel Transformer model)"),JAo=l(),H3=a("li"),Ece=a("strong"),YAo=o("ibert"),KAo=o(" \u2014 "),gD=a("a"),ZAo=o("IBertForMaskedLM"),e6o=o(" (I-BERT model)"),o6o=l(),U3=a("li"),Cce=a("strong"),r6o=o("layoutlm"),t6o=o(" \u2014 "),hD=a("a"),a6o=o("LayoutLMForMaskedLM"),n6o=o(" (LayoutLM model)"),s6o=l(),J3=a("li"),wce=a("strong"),l6o=o("longformer"),i6o=o(" \u2014 "),pD=a("a"),d6o=o("LongformerForMaskedLM"),c6o=o(" (Longformer model)"),f6o=l(),Y3=a("li"),Ace=a("strong"),m6o=o("mbart"),g6o=o(" \u2014 "),uD=a("a"),h6o=o("MBartForConditionalGeneration"),p6o=o(" (mBART model)"),u6o=l(),K3=a("li"),yce=a("strong"),_6o=o("megatron-bert"),b6o=o(" \u2014 "),_D=a("a"),v6o=o("MegatronBertForMaskedLM"),F6o=o(" (MegatronBert model)"),T6o=l(),Z3=a("li"),Lce=a("strong"),M6o=o("mobilebert"),E6o=o(" \u2014 "),bD=a("a"),C6o=o("MobileBertForMaskedLM"),w6o=o(" (MobileBERT model)"),A6o=l(),e1=a("li"),xce=a("strong"),y6o=o("mpnet"),L6o=o(" \u2014 "),vD=a("a"),x6o=o("MPNetForMaskedLM"),$6o=o(" (MPNet model)"),k6o=l(),o1=a("li"),$ce=a("strong"),S6o=o("nystromformer"),R6o=o(" \u2014 "),FD=a("a"),P6o=o("NystromformerForMaskedLM"),B6o=o(" (Nystromformer model)"),I6o=l(),r1=a("li"),kce=a("strong"),q6o=o("perceiver"),N6o=o(" \u2014 "),TD=a("a"),j6o=o("PerceiverForMaskedLM"),D6o=o(" (Perceiver model)"),G6o=l(),t1=a("li"),Sce=a("strong"),O6o=o("qdqbert"),V6o=o(" \u2014 "),MD=a("a"),X6o=o("QDQBertForMaskedLM"),z6o=o(" (QDQBert model)"),W6o=l(),a1=a("li"),Rce=a("strong"),Q6o=o("reformer"),H6o=o(" \u2014 "),ED=a("a"),U6o=o("ReformerForMaskedLM"),J6o=o(" (Reformer model)"),Y6o=l(),n1=a("li"),Pce=a("strong"),K6o=o("rembert"),Z6o=o(" \u2014 "),CD=a("a"),eyo=o("RemBertForMaskedLM"),oyo=o(" (RemBERT model)"),ryo=l(),s1=a("li"),Bce=a("strong"),tyo=o("roberta"),ayo=o(" \u2014 "),wD=a("a"),nyo=o("RobertaForMaskedLM"),syo=o(" (RoBERTa model)"),lyo=l(),l1=a("li"),Ice=a("strong"),iyo=o("roformer"),dyo=o(" \u2014 "),AD=a("a"),cyo=o("RoFormerForMaskedLM"),fyo=o(" (RoFormer model)"),myo=l(),i1=a("li"),qce=a("strong"),gyo=o("squeezebert"),hyo=o(" \u2014 "),yD=a("a"),pyo=o("SqueezeBertForMaskedLM"),uyo=o(" (SqueezeBERT model)"),_yo=l(),d1=a("li"),Nce=a("strong"),byo=o("tapas"),vyo=o(" \u2014 "),LD=a("a"),Fyo=o("TapasForMaskedLM"),Tyo=o(" (TAPAS model)"),Myo=l(),c1=a("li"),jce=a("strong"),Eyo=o("wav2vec2"),Cyo=o(" \u2014 "),Dce=a("code"),wyo=o("Wav2Vec2ForMaskedLM"),Ayo=o(" (Wav2Vec2 model)"),yyo=l(),f1=a("li"),Gce=a("strong"),Lyo=o("xlm"),xyo=o(" \u2014 "),xD=a("a"),$yo=o("XLMWithLMHeadModel"),kyo=o(" (XLM model)"),Syo=l(),m1=a("li"),Oce=a("strong"),Ryo=o("xlm-roberta"),Pyo=o(" \u2014 "),$D=a("a"),Byo=o("XLMRobertaForMaskedLM"),Iyo=o(" (XLM-RoBERTa model)"),qyo=l(),g1=a("li"),Vce=a("strong"),Nyo=o("xlm-roberta-xl"),jyo=o(" \u2014 "),kD=a("a"),Dyo=o("XLMRobertaXLForMaskedLM"),Gyo=o(" (XLM-RoBERTa-XL model)"),Oyo=l(),h1=a("li"),Xce=a("strong"),Vyo=o("yoso"),Xyo=o(" \u2014 "),SD=a("a"),zyo=o("YosoForMaskedLM"),Wyo=o(" (YOSO model)"),Qyo=l(),p1=a("p"),Hyo=o("The model is set in evaluation mode by default using "),zce=a("code"),Uyo=o("model.eval()"),Jyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wce=a("code"),Yyo=o("model.train()"),Kyo=l(),F(u1.$$.fragment),tNe=l(),qi=a("h2"),_1=a("a"),Qce=a("span"),F(p6.$$.fragment),Zyo=l(),Hce=a("span"),eLo=o("AutoModelForSeq2SeqLM"),aNe=l(),So=a("div"),F(u6.$$.fragment),oLo=l(),Ni=a("p"),rLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RD=a("a"),tLo=o("from_pretrained()"),aLo=o(" class method or the "),PD=a("a"),nLo=o("from_config()"),sLo=o(` class
method.`),lLo=l(),_6=a("p"),iLo=o("This class cannot be instantiated directly using "),Uce=a("code"),dLo=o("__init__()"),cLo=o(" (throws an error)."),fLo=l(),lt=a("div"),F(b6.$$.fragment),mLo=l(),Jce=a("p"),gLo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hLo=l(),ji=a("p"),pLo=o(`Note:
Loading a model from its configuration file does `),Yce=a("strong"),uLo=o("not"),_Lo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BD=a("a"),bLo=o("from_pretrained()"),vLo=o(" to load the model weights."),FLo=l(),F(b1.$$.fragment),TLo=l(),eo=a("div"),F(v6.$$.fragment),MLo=l(),Kce=a("p"),ELo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),CLo=l(),Sa=a("p"),wLo=o("The model class to instantiate is selected based on the "),Zce=a("code"),ALo=o("model_type"),yLo=o(` property of the config object (either
passed as an argument or loaded from `),efe=a("code"),LLo=o("pretrained_model_name_or_path"),xLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ofe=a("code"),$Lo=o("pretrained_model_name_or_path"),kLo=o(":"),SLo=l(),ue=a("ul"),v1=a("li"),rfe=a("strong"),RLo=o("bart"),PLo=o(" \u2014 "),ID=a("a"),BLo=o("BartForConditionalGeneration"),ILo=o(" (BART model)"),qLo=l(),F1=a("li"),tfe=a("strong"),NLo=o("bigbird_pegasus"),jLo=o(" \u2014 "),qD=a("a"),DLo=o("BigBirdPegasusForConditionalGeneration"),GLo=o(" (BigBirdPegasus model)"),OLo=l(),T1=a("li"),afe=a("strong"),VLo=o("blenderbot"),XLo=o(" \u2014 "),ND=a("a"),zLo=o("BlenderbotForConditionalGeneration"),WLo=o(" (Blenderbot model)"),QLo=l(),M1=a("li"),nfe=a("strong"),HLo=o("blenderbot-small"),ULo=o(" \u2014 "),jD=a("a"),JLo=o("BlenderbotSmallForConditionalGeneration"),YLo=o(" (BlenderbotSmall model)"),KLo=l(),E1=a("li"),sfe=a("strong"),ZLo=o("encoder-decoder"),e8o=o(" \u2014 "),DD=a("a"),o8o=o("EncoderDecoderModel"),r8o=o(" (Encoder decoder model)"),t8o=l(),C1=a("li"),lfe=a("strong"),a8o=o("fsmt"),n8o=o(" \u2014 "),GD=a("a"),s8o=o("FSMTForConditionalGeneration"),l8o=o(" (FairSeq Machine-Translation model)"),i8o=l(),w1=a("li"),ife=a("strong"),d8o=o("led"),c8o=o(" \u2014 "),OD=a("a"),f8o=o("LEDForConditionalGeneration"),m8o=o(" (LED model)"),g8o=l(),A1=a("li"),dfe=a("strong"),h8o=o("m2m_100"),p8o=o(" \u2014 "),VD=a("a"),u8o=o("M2M100ForConditionalGeneration"),_8o=o(" (M2M100 model)"),b8o=l(),y1=a("li"),cfe=a("strong"),v8o=o("marian"),F8o=o(" \u2014 "),XD=a("a"),T8o=o("MarianMTModel"),M8o=o(" (Marian model)"),E8o=l(),L1=a("li"),ffe=a("strong"),C8o=o("mbart"),w8o=o(" \u2014 "),zD=a("a"),A8o=o("MBartForConditionalGeneration"),y8o=o(" (mBART model)"),L8o=l(),x1=a("li"),mfe=a("strong"),x8o=o("mt5"),$8o=o(" \u2014 "),WD=a("a"),k8o=o("MT5ForConditionalGeneration"),S8o=o(" (mT5 model)"),R8o=l(),$1=a("li"),gfe=a("strong"),P8o=o("pegasus"),B8o=o(" \u2014 "),QD=a("a"),I8o=o("PegasusForConditionalGeneration"),q8o=o(" (Pegasus model)"),N8o=l(),k1=a("li"),hfe=a("strong"),j8o=o("plbart"),D8o=o(" \u2014 "),HD=a("a"),G8o=o("PLBartForConditionalGeneration"),O8o=o(" (PLBart model)"),V8o=l(),S1=a("li"),pfe=a("strong"),X8o=o("prophetnet"),z8o=o(" \u2014 "),UD=a("a"),W8o=o("ProphetNetForConditionalGeneration"),Q8o=o(" (ProphetNet model)"),H8o=l(),R1=a("li"),ufe=a("strong"),U8o=o("t5"),J8o=o(" \u2014 "),JD=a("a"),Y8o=o("T5ForConditionalGeneration"),K8o=o(" (T5 model)"),Z8o=l(),P1=a("li"),_fe=a("strong"),exo=o("xlm-prophetnet"),oxo=o(" \u2014 "),YD=a("a"),rxo=o("XLMProphetNetForConditionalGeneration"),txo=o(" (XLMProphetNet model)"),axo=l(),B1=a("p"),nxo=o("The model is set in evaluation mode by default using "),bfe=a("code"),sxo=o("model.eval()"),lxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=a("code"),ixo=o("model.train()"),dxo=l(),F(I1.$$.fragment),nNe=l(),Di=a("h2"),q1=a("a"),Ffe=a("span"),F(F6.$$.fragment),cxo=l(),Tfe=a("span"),fxo=o("AutoModelForSequenceClassification"),sNe=l(),Ro=a("div"),F(T6.$$.fragment),mxo=l(),Gi=a("p"),gxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KD=a("a"),hxo=o("from_pretrained()"),pxo=o(" class method or the "),ZD=a("a"),uxo=o("from_config()"),_xo=o(` class
method.`),bxo=l(),M6=a("p"),vxo=o("This class cannot be instantiated directly using "),Mfe=a("code"),Fxo=o("__init__()"),Txo=o(" (throws an error)."),Mxo=l(),it=a("div"),F(E6.$$.fragment),Exo=l(),Efe=a("p"),Cxo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wxo=l(),Oi=a("p"),Axo=o(`Note:
Loading a model from its configuration file does `),Cfe=a("strong"),yxo=o("not"),Lxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eG=a("a"),xxo=o("from_pretrained()"),$xo=o(" to load the model weights."),kxo=l(),F(N1.$$.fragment),Sxo=l(),oo=a("div"),F(C6.$$.fragment),Rxo=l(),wfe=a("p"),Pxo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Bxo=l(),Ra=a("p"),Ixo=o("The model class to instantiate is selected based on the "),Afe=a("code"),qxo=o("model_type"),Nxo=o(` property of the config object (either
passed as an argument or loaded from `),yfe=a("code"),jxo=o("pretrained_model_name_or_path"),Dxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=a("code"),Gxo=o("pretrained_model_name_or_path"),Oxo=o(":"),Vxo=l(),q=a("ul"),j1=a("li"),xfe=a("strong"),Xxo=o("albert"),zxo=o(" \u2014 "),oG=a("a"),Wxo=o("AlbertForSequenceClassification"),Qxo=o(" (ALBERT model)"),Hxo=l(),D1=a("li"),$fe=a("strong"),Uxo=o("bart"),Jxo=o(" \u2014 "),rG=a("a"),Yxo=o("BartForSequenceClassification"),Kxo=o(" (BART model)"),Zxo=l(),G1=a("li"),kfe=a("strong"),e$o=o("bert"),o$o=o(" \u2014 "),tG=a("a"),r$o=o("BertForSequenceClassification"),t$o=o(" (BERT model)"),a$o=l(),O1=a("li"),Sfe=a("strong"),n$o=o("big_bird"),s$o=o(" \u2014 "),aG=a("a"),l$o=o("BigBirdForSequenceClassification"),i$o=o(" (BigBird model)"),d$o=l(),V1=a("li"),Rfe=a("strong"),c$o=o("bigbird_pegasus"),f$o=o(" \u2014 "),nG=a("a"),m$o=o("BigBirdPegasusForSequenceClassification"),g$o=o(" (BigBirdPegasus model)"),h$o=l(),X1=a("li"),Pfe=a("strong"),p$o=o("camembert"),u$o=o(" \u2014 "),sG=a("a"),_$o=o("CamembertForSequenceClassification"),b$o=o(" (CamemBERT model)"),v$o=l(),z1=a("li"),Bfe=a("strong"),F$o=o("canine"),T$o=o(" \u2014 "),lG=a("a"),M$o=o("CanineForSequenceClassification"),E$o=o(" (Canine model)"),C$o=l(),W1=a("li"),Ife=a("strong"),w$o=o("convbert"),A$o=o(" \u2014 "),iG=a("a"),y$o=o("ConvBertForSequenceClassification"),L$o=o(" (ConvBERT model)"),x$o=l(),Q1=a("li"),qfe=a("strong"),$$o=o("ctrl"),k$o=o(" \u2014 "),dG=a("a"),S$o=o("CTRLForSequenceClassification"),R$o=o(" (CTRL model)"),P$o=l(),H1=a("li"),Nfe=a("strong"),B$o=o("data2vec-text"),I$o=o(" \u2014 "),cG=a("a"),q$o=o("Data2VecTextForSequenceClassification"),N$o=o(" (Data2VecText model)"),j$o=l(),U1=a("li"),jfe=a("strong"),D$o=o("deberta"),G$o=o(" \u2014 "),fG=a("a"),O$o=o("DebertaForSequenceClassification"),V$o=o(" (DeBERTa model)"),X$o=l(),J1=a("li"),Dfe=a("strong"),z$o=o("deberta-v2"),W$o=o(" \u2014 "),mG=a("a"),Q$o=o("DebertaV2ForSequenceClassification"),H$o=o(" (DeBERTa-v2 model)"),U$o=l(),Y1=a("li"),Gfe=a("strong"),J$o=o("distilbert"),Y$o=o(" \u2014 "),gG=a("a"),K$o=o("DistilBertForSequenceClassification"),Z$o=o(" (DistilBERT model)"),eko=l(),K1=a("li"),Ofe=a("strong"),oko=o("electra"),rko=o(" \u2014 "),hG=a("a"),tko=o("ElectraForSequenceClassification"),ako=o(" (ELECTRA model)"),nko=l(),Z1=a("li"),Vfe=a("strong"),sko=o("flaubert"),lko=o(" \u2014 "),pG=a("a"),iko=o("FlaubertForSequenceClassification"),dko=o(" (FlauBERT model)"),cko=l(),eb=a("li"),Xfe=a("strong"),fko=o("fnet"),mko=o(" \u2014 "),uG=a("a"),gko=o("FNetForSequenceClassification"),hko=o(" (FNet model)"),pko=l(),ob=a("li"),zfe=a("strong"),uko=o("funnel"),_ko=o(" \u2014 "),_G=a("a"),bko=o("FunnelForSequenceClassification"),vko=o(" (Funnel Transformer model)"),Fko=l(),rb=a("li"),Wfe=a("strong"),Tko=o("gpt2"),Mko=o(" \u2014 "),bG=a("a"),Eko=o("GPT2ForSequenceClassification"),Cko=o(" (OpenAI GPT-2 model)"),wko=l(),tb=a("li"),Qfe=a("strong"),Ako=o("gpt_neo"),yko=o(" \u2014 "),vG=a("a"),Lko=o("GPTNeoForSequenceClassification"),xko=o(" (GPT Neo model)"),$ko=l(),ab=a("li"),Hfe=a("strong"),kko=o("gptj"),Sko=o(" \u2014 "),FG=a("a"),Rko=o("GPTJForSequenceClassification"),Pko=o(" (GPT-J model)"),Bko=l(),nb=a("li"),Ufe=a("strong"),Iko=o("ibert"),qko=o(" \u2014 "),TG=a("a"),Nko=o("IBertForSequenceClassification"),jko=o(" (I-BERT model)"),Dko=l(),sb=a("li"),Jfe=a("strong"),Gko=o("layoutlm"),Oko=o(" \u2014 "),MG=a("a"),Vko=o("LayoutLMForSequenceClassification"),Xko=o(" (LayoutLM model)"),zko=l(),lb=a("li"),Yfe=a("strong"),Wko=o("layoutlmv2"),Qko=o(" \u2014 "),EG=a("a"),Hko=o("LayoutLMv2ForSequenceClassification"),Uko=o(" (LayoutLMv2 model)"),Jko=l(),ib=a("li"),Kfe=a("strong"),Yko=o("layoutlmv3"),Kko=o(" \u2014 "),CG=a("a"),Zko=o("LayoutLMv3ForSequenceClassification"),eSo=o(" (LayoutLMv3 model)"),oSo=l(),db=a("li"),Zfe=a("strong"),rSo=o("led"),tSo=o(" \u2014 "),wG=a("a"),aSo=o("LEDForSequenceClassification"),nSo=o(" (LED model)"),sSo=l(),cb=a("li"),eme=a("strong"),lSo=o("longformer"),iSo=o(" \u2014 "),AG=a("a"),dSo=o("LongformerForSequenceClassification"),cSo=o(" (Longformer model)"),fSo=l(),fb=a("li"),ome=a("strong"),mSo=o("mbart"),gSo=o(" \u2014 "),yG=a("a"),hSo=o("MBartForSequenceClassification"),pSo=o(" (mBART model)"),uSo=l(),mb=a("li"),rme=a("strong"),_So=o("megatron-bert"),bSo=o(" \u2014 "),LG=a("a"),vSo=o("MegatronBertForSequenceClassification"),FSo=o(" (MegatronBert model)"),TSo=l(),gb=a("li"),tme=a("strong"),MSo=o("mobilebert"),ESo=o(" \u2014 "),xG=a("a"),CSo=o("MobileBertForSequenceClassification"),wSo=o(" (MobileBERT model)"),ASo=l(),hb=a("li"),ame=a("strong"),ySo=o("mpnet"),LSo=o(" \u2014 "),$G=a("a"),xSo=o("MPNetForSequenceClassification"),$So=o(" (MPNet model)"),kSo=l(),pb=a("li"),nme=a("strong"),SSo=o("nystromformer"),RSo=o(" \u2014 "),kG=a("a"),PSo=o("NystromformerForSequenceClassification"),BSo=o(" (Nystromformer model)"),ISo=l(),ub=a("li"),sme=a("strong"),qSo=o("openai-gpt"),NSo=o(" \u2014 "),SG=a("a"),jSo=o("OpenAIGPTForSequenceClassification"),DSo=o(" (OpenAI GPT model)"),GSo=l(),_b=a("li"),lme=a("strong"),OSo=o("perceiver"),VSo=o(" \u2014 "),RG=a("a"),XSo=o("PerceiverForSequenceClassification"),zSo=o(" (Perceiver model)"),WSo=l(),bb=a("li"),ime=a("strong"),QSo=o("plbart"),HSo=o(" \u2014 "),PG=a("a"),USo=o("PLBartForSequenceClassification"),JSo=o(" (PLBart model)"),YSo=l(),vb=a("li"),dme=a("strong"),KSo=o("qdqbert"),ZSo=o(" \u2014 "),BG=a("a"),eRo=o("QDQBertForSequenceClassification"),oRo=o(" (QDQBert model)"),rRo=l(),Fb=a("li"),cme=a("strong"),tRo=o("reformer"),aRo=o(" \u2014 "),IG=a("a"),nRo=o("ReformerForSequenceClassification"),sRo=o(" (Reformer model)"),lRo=l(),Tb=a("li"),fme=a("strong"),iRo=o("rembert"),dRo=o(" \u2014 "),qG=a("a"),cRo=o("RemBertForSequenceClassification"),fRo=o(" (RemBERT model)"),mRo=l(),Mb=a("li"),mme=a("strong"),gRo=o("roberta"),hRo=o(" \u2014 "),NG=a("a"),pRo=o("RobertaForSequenceClassification"),uRo=o(" (RoBERTa model)"),_Ro=l(),Eb=a("li"),gme=a("strong"),bRo=o("roformer"),vRo=o(" \u2014 "),jG=a("a"),FRo=o("RoFormerForSequenceClassification"),TRo=o(" (RoFormer model)"),MRo=l(),Cb=a("li"),hme=a("strong"),ERo=o("squeezebert"),CRo=o(" \u2014 "),DG=a("a"),wRo=o("SqueezeBertForSequenceClassification"),ARo=o(" (SqueezeBERT model)"),yRo=l(),wb=a("li"),pme=a("strong"),LRo=o("tapas"),xRo=o(" \u2014 "),GG=a("a"),$Ro=o("TapasForSequenceClassification"),kRo=o(" (TAPAS model)"),SRo=l(),Ab=a("li"),ume=a("strong"),RRo=o("transfo-xl"),PRo=o(" \u2014 "),OG=a("a"),BRo=o("TransfoXLForSequenceClassification"),IRo=o(" (Transformer-XL model)"),qRo=l(),yb=a("li"),_me=a("strong"),NRo=o("xlm"),jRo=o(" \u2014 "),VG=a("a"),DRo=o("XLMForSequenceClassification"),GRo=o(" (XLM model)"),ORo=l(),Lb=a("li"),bme=a("strong"),VRo=o("xlm-roberta"),XRo=o(" \u2014 "),XG=a("a"),zRo=o("XLMRobertaForSequenceClassification"),WRo=o(" (XLM-RoBERTa model)"),QRo=l(),xb=a("li"),vme=a("strong"),HRo=o("xlm-roberta-xl"),URo=o(" \u2014 "),zG=a("a"),JRo=o("XLMRobertaXLForSequenceClassification"),YRo=o(" (XLM-RoBERTa-XL model)"),KRo=l(),$b=a("li"),Fme=a("strong"),ZRo=o("xlnet"),ePo=o(" \u2014 "),WG=a("a"),oPo=o("XLNetForSequenceClassification"),rPo=o(" (XLNet model)"),tPo=l(),kb=a("li"),Tme=a("strong"),aPo=o("yoso"),nPo=o(" \u2014 "),QG=a("a"),sPo=o("YosoForSequenceClassification"),lPo=o(" (YOSO model)"),iPo=l(),Sb=a("p"),dPo=o("The model is set in evaluation mode by default using "),Mme=a("code"),cPo=o("model.eval()"),fPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eme=a("code"),mPo=o("model.train()"),gPo=l(),F(Rb.$$.fragment),lNe=l(),Vi=a("h2"),Pb=a("a"),Cme=a("span"),F(w6.$$.fragment),hPo=l(),wme=a("span"),pPo=o("AutoModelForMultipleChoice"),iNe=l(),Po=a("div"),F(A6.$$.fragment),uPo=l(),Xi=a("p"),_Po=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HG=a("a"),bPo=o("from_pretrained()"),vPo=o(" class method or the "),UG=a("a"),FPo=o("from_config()"),TPo=o(` class
method.`),MPo=l(),y6=a("p"),EPo=o("This class cannot be instantiated directly using "),Ame=a("code"),CPo=o("__init__()"),wPo=o(" (throws an error)."),APo=l(),dt=a("div"),F(L6.$$.fragment),yPo=l(),yme=a("p"),LPo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xPo=l(),zi=a("p"),$Po=o(`Note:
Loading a model from its configuration file does `),Lme=a("strong"),kPo=o("not"),SPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),RPo=o("from_pretrained()"),PPo=o(" to load the model weights."),BPo=l(),F(Bb.$$.fragment),IPo=l(),ro=a("div"),F(x6.$$.fragment),qPo=l(),xme=a("p"),NPo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jPo=l(),Pa=a("p"),DPo=o("The model class to instantiate is selected based on the "),$me=a("code"),GPo=o("model_type"),OPo=o(` property of the config object (either
passed as an argument or loaded from `),kme=a("code"),VPo=o("pretrained_model_name_or_path"),XPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sme=a("code"),zPo=o("pretrained_model_name_or_path"),WPo=o(":"),QPo=l(),K=a("ul"),Ib=a("li"),Rme=a("strong"),HPo=o("albert"),UPo=o(" \u2014 "),YG=a("a"),JPo=o("AlbertForMultipleChoice"),YPo=o(" (ALBERT model)"),KPo=l(),qb=a("li"),Pme=a("strong"),ZPo=o("bert"),eBo=o(" \u2014 "),KG=a("a"),oBo=o("BertForMultipleChoice"),rBo=o(" (BERT model)"),tBo=l(),Nb=a("li"),Bme=a("strong"),aBo=o("big_bird"),nBo=o(" \u2014 "),ZG=a("a"),sBo=o("BigBirdForMultipleChoice"),lBo=o(" (BigBird model)"),iBo=l(),jb=a("li"),Ime=a("strong"),dBo=o("camembert"),cBo=o(" \u2014 "),eO=a("a"),fBo=o("CamembertForMultipleChoice"),mBo=o(" (CamemBERT model)"),gBo=l(),Db=a("li"),qme=a("strong"),hBo=o("canine"),pBo=o(" \u2014 "),oO=a("a"),uBo=o("CanineForMultipleChoice"),_Bo=o(" (Canine model)"),bBo=l(),Gb=a("li"),Nme=a("strong"),vBo=o("convbert"),FBo=o(" \u2014 "),rO=a("a"),TBo=o("ConvBertForMultipleChoice"),MBo=o(" (ConvBERT model)"),EBo=l(),Ob=a("li"),jme=a("strong"),CBo=o("data2vec-text"),wBo=o(" \u2014 "),tO=a("a"),ABo=o("Data2VecTextForMultipleChoice"),yBo=o(" (Data2VecText model)"),LBo=l(),Vb=a("li"),Dme=a("strong"),xBo=o("deberta-v2"),$Bo=o(" \u2014 "),aO=a("a"),kBo=o("DebertaV2ForMultipleChoice"),SBo=o(" (DeBERTa-v2 model)"),RBo=l(),Xb=a("li"),Gme=a("strong"),PBo=o("distilbert"),BBo=o(" \u2014 "),nO=a("a"),IBo=o("DistilBertForMultipleChoice"),qBo=o(" (DistilBERT model)"),NBo=l(),zb=a("li"),Ome=a("strong"),jBo=o("electra"),DBo=o(" \u2014 "),sO=a("a"),GBo=o("ElectraForMultipleChoice"),OBo=o(" (ELECTRA model)"),VBo=l(),Wb=a("li"),Vme=a("strong"),XBo=o("flaubert"),zBo=o(" \u2014 "),lO=a("a"),WBo=o("FlaubertForMultipleChoice"),QBo=o(" (FlauBERT model)"),HBo=l(),Qb=a("li"),Xme=a("strong"),UBo=o("fnet"),JBo=o(" \u2014 "),iO=a("a"),YBo=o("FNetForMultipleChoice"),KBo=o(" (FNet model)"),ZBo=l(),Hb=a("li"),zme=a("strong"),eIo=o("funnel"),oIo=o(" \u2014 "),dO=a("a"),rIo=o("FunnelForMultipleChoice"),tIo=o(" (Funnel Transformer model)"),aIo=l(),Ub=a("li"),Wme=a("strong"),nIo=o("ibert"),sIo=o(" \u2014 "),cO=a("a"),lIo=o("IBertForMultipleChoice"),iIo=o(" (I-BERT model)"),dIo=l(),Jb=a("li"),Qme=a("strong"),cIo=o("longformer"),fIo=o(" \u2014 "),fO=a("a"),mIo=o("LongformerForMultipleChoice"),gIo=o(" (Longformer model)"),hIo=l(),Yb=a("li"),Hme=a("strong"),pIo=o("megatron-bert"),uIo=o(" \u2014 "),mO=a("a"),_Io=o("MegatronBertForMultipleChoice"),bIo=o(" (MegatronBert model)"),vIo=l(),Kb=a("li"),Ume=a("strong"),FIo=o("mobilebert"),TIo=o(" \u2014 "),gO=a("a"),MIo=o("MobileBertForMultipleChoice"),EIo=o(" (MobileBERT model)"),CIo=l(),Zb=a("li"),Jme=a("strong"),wIo=o("mpnet"),AIo=o(" \u2014 "),hO=a("a"),yIo=o("MPNetForMultipleChoice"),LIo=o(" (MPNet model)"),xIo=l(),e2=a("li"),Yme=a("strong"),$Io=o("nystromformer"),kIo=o(" \u2014 "),pO=a("a"),SIo=o("NystromformerForMultipleChoice"),RIo=o(" (Nystromformer model)"),PIo=l(),o2=a("li"),Kme=a("strong"),BIo=o("qdqbert"),IIo=o(" \u2014 "),uO=a("a"),qIo=o("QDQBertForMultipleChoice"),NIo=o(" (QDQBert model)"),jIo=l(),r2=a("li"),Zme=a("strong"),DIo=o("rembert"),GIo=o(" \u2014 "),_O=a("a"),OIo=o("RemBertForMultipleChoice"),VIo=o(" (RemBERT model)"),XIo=l(),t2=a("li"),ege=a("strong"),zIo=o("roberta"),WIo=o(" \u2014 "),bO=a("a"),QIo=o("RobertaForMultipleChoice"),HIo=o(" (RoBERTa model)"),UIo=l(),a2=a("li"),oge=a("strong"),JIo=o("roformer"),YIo=o(" \u2014 "),vO=a("a"),KIo=o("RoFormerForMultipleChoice"),ZIo=o(" (RoFormer model)"),eqo=l(),n2=a("li"),rge=a("strong"),oqo=o("squeezebert"),rqo=o(" \u2014 "),FO=a("a"),tqo=o("SqueezeBertForMultipleChoice"),aqo=o(" (SqueezeBERT model)"),nqo=l(),s2=a("li"),tge=a("strong"),sqo=o("xlm"),lqo=o(" \u2014 "),TO=a("a"),iqo=o("XLMForMultipleChoice"),dqo=o(" (XLM model)"),cqo=l(),l2=a("li"),age=a("strong"),fqo=o("xlm-roberta"),mqo=o(" \u2014 "),MO=a("a"),gqo=o("XLMRobertaForMultipleChoice"),hqo=o(" (XLM-RoBERTa model)"),pqo=l(),i2=a("li"),nge=a("strong"),uqo=o("xlm-roberta-xl"),_qo=o(" \u2014 "),EO=a("a"),bqo=o("XLMRobertaXLForMultipleChoice"),vqo=o(" (XLM-RoBERTa-XL model)"),Fqo=l(),d2=a("li"),sge=a("strong"),Tqo=o("xlnet"),Mqo=o(" \u2014 "),CO=a("a"),Eqo=o("XLNetForMultipleChoice"),Cqo=o(" (XLNet model)"),wqo=l(),c2=a("li"),lge=a("strong"),Aqo=o("yoso"),yqo=o(" \u2014 "),wO=a("a"),Lqo=o("YosoForMultipleChoice"),xqo=o(" (YOSO model)"),$qo=l(),f2=a("p"),kqo=o("The model is set in evaluation mode by default using "),ige=a("code"),Sqo=o("model.eval()"),Rqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=a("code"),Pqo=o("model.train()"),Bqo=l(),F(m2.$$.fragment),dNe=l(),Wi=a("h2"),g2=a("a"),cge=a("span"),F($6.$$.fragment),Iqo=l(),fge=a("span"),qqo=o("AutoModelForNextSentencePrediction"),cNe=l(),Bo=a("div"),F(k6.$$.fragment),Nqo=l(),Qi=a("p"),jqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),AO=a("a"),Dqo=o("from_pretrained()"),Gqo=o(" class method or the "),yO=a("a"),Oqo=o("from_config()"),Vqo=o(` class
method.`),Xqo=l(),S6=a("p"),zqo=o("This class cannot be instantiated directly using "),mge=a("code"),Wqo=o("__init__()"),Qqo=o(" (throws an error)."),Hqo=l(),ct=a("div"),F(R6.$$.fragment),Uqo=l(),gge=a("p"),Jqo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Yqo=l(),Hi=a("p"),Kqo=o(`Note:
Loading a model from its configuration file does `),hge=a("strong"),Zqo=o("not"),eNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LO=a("a"),oNo=o("from_pretrained()"),rNo=o(" to load the model weights."),tNo=l(),F(h2.$$.fragment),aNo=l(),to=a("div"),F(P6.$$.fragment),nNo=l(),pge=a("p"),sNo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lNo=l(),Ba=a("p"),iNo=o("The model class to instantiate is selected based on the "),uge=a("code"),dNo=o("model_type"),cNo=o(` property of the config object (either
passed as an argument or loaded from `),_ge=a("code"),fNo=o("pretrained_model_name_or_path"),mNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=a("code"),gNo=o("pretrained_model_name_or_path"),hNo=o(":"),pNo=l(),Yr=a("ul"),p2=a("li"),vge=a("strong"),uNo=o("bert"),_No=o(" \u2014 "),xO=a("a"),bNo=o("BertForNextSentencePrediction"),vNo=o(" (BERT model)"),FNo=l(),u2=a("li"),Fge=a("strong"),TNo=o("fnet"),MNo=o(" \u2014 "),$O=a("a"),ENo=o("FNetForNextSentencePrediction"),CNo=o(" (FNet model)"),wNo=l(),_2=a("li"),Tge=a("strong"),ANo=o("megatron-bert"),yNo=o(" \u2014 "),kO=a("a"),LNo=o("MegatronBertForNextSentencePrediction"),xNo=o(" (MegatronBert model)"),$No=l(),b2=a("li"),Mge=a("strong"),kNo=o("mobilebert"),SNo=o(" \u2014 "),SO=a("a"),RNo=o("MobileBertForNextSentencePrediction"),PNo=o(" (MobileBERT model)"),BNo=l(),v2=a("li"),Ege=a("strong"),INo=o("qdqbert"),qNo=o(" \u2014 "),RO=a("a"),NNo=o("QDQBertForNextSentencePrediction"),jNo=o(" (QDQBert model)"),DNo=l(),F2=a("p"),GNo=o("The model is set in evaluation mode by default using "),Cge=a("code"),ONo=o("model.eval()"),VNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=a("code"),XNo=o("model.train()"),zNo=l(),F(T2.$$.fragment),fNe=l(),Ui=a("h2"),M2=a("a"),Age=a("span"),F(B6.$$.fragment),WNo=l(),yge=a("span"),QNo=o("AutoModelForTokenClassification"),mNe=l(),Io=a("div"),F(I6.$$.fragment),HNo=l(),Ji=a("p"),UNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),PO=a("a"),JNo=o("from_pretrained()"),YNo=o(" class method or the "),BO=a("a"),KNo=o("from_config()"),ZNo=o(` class
method.`),ejo=l(),q6=a("p"),ojo=o("This class cannot be instantiated directly using "),Lge=a("code"),rjo=o("__init__()"),tjo=o(" (throws an error)."),ajo=l(),ft=a("div"),F(N6.$$.fragment),njo=l(),xge=a("p"),sjo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ljo=l(),Yi=a("p"),ijo=o(`Note:
Loading a model from its configuration file does `),$ge=a("strong"),djo=o("not"),cjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=a("a"),fjo=o("from_pretrained()"),mjo=o(" to load the model weights."),gjo=l(),F(E2.$$.fragment),hjo=l(),ao=a("div"),F(j6.$$.fragment),pjo=l(),kge=a("p"),ujo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_jo=l(),Ia=a("p"),bjo=o("The model class to instantiate is selected based on the "),Sge=a("code"),vjo=o("model_type"),Fjo=o(` property of the config object (either
passed as an argument or loaded from `),Rge=a("code"),Tjo=o("pretrained_model_name_or_path"),Mjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=a("code"),Ejo=o("pretrained_model_name_or_path"),Cjo=o(":"),wjo=l(),H=a("ul"),C2=a("li"),Bge=a("strong"),Ajo=o("albert"),yjo=o(" \u2014 "),qO=a("a"),Ljo=o("AlbertForTokenClassification"),xjo=o(" (ALBERT model)"),$jo=l(),w2=a("li"),Ige=a("strong"),kjo=o("bert"),Sjo=o(" \u2014 "),NO=a("a"),Rjo=o("BertForTokenClassification"),Pjo=o(" (BERT model)"),Bjo=l(),A2=a("li"),qge=a("strong"),Ijo=o("big_bird"),qjo=o(" \u2014 "),jO=a("a"),Njo=o("BigBirdForTokenClassification"),jjo=o(" (BigBird model)"),Djo=l(),y2=a("li"),Nge=a("strong"),Gjo=o("camembert"),Ojo=o(" \u2014 "),DO=a("a"),Vjo=o("CamembertForTokenClassification"),Xjo=o(" (CamemBERT model)"),zjo=l(),L2=a("li"),jge=a("strong"),Wjo=o("canine"),Qjo=o(" \u2014 "),GO=a("a"),Hjo=o("CanineForTokenClassification"),Ujo=o(" (Canine model)"),Jjo=l(),x2=a("li"),Dge=a("strong"),Yjo=o("convbert"),Kjo=o(" \u2014 "),OO=a("a"),Zjo=o("ConvBertForTokenClassification"),eDo=o(" (ConvBERT model)"),oDo=l(),$2=a("li"),Gge=a("strong"),rDo=o("data2vec-text"),tDo=o(" \u2014 "),VO=a("a"),aDo=o("Data2VecTextForTokenClassification"),nDo=o(" (Data2VecText model)"),sDo=l(),k2=a("li"),Oge=a("strong"),lDo=o("deberta"),iDo=o(" \u2014 "),XO=a("a"),dDo=o("DebertaForTokenClassification"),cDo=o(" (DeBERTa model)"),fDo=l(),S2=a("li"),Vge=a("strong"),mDo=o("deberta-v2"),gDo=o(" \u2014 "),zO=a("a"),hDo=o("DebertaV2ForTokenClassification"),pDo=o(" (DeBERTa-v2 model)"),uDo=l(),R2=a("li"),Xge=a("strong"),_Do=o("distilbert"),bDo=o(" \u2014 "),WO=a("a"),vDo=o("DistilBertForTokenClassification"),FDo=o(" (DistilBERT model)"),TDo=l(),P2=a("li"),zge=a("strong"),MDo=o("electra"),EDo=o(" \u2014 "),QO=a("a"),CDo=o("ElectraForTokenClassification"),wDo=o(" (ELECTRA model)"),ADo=l(),B2=a("li"),Wge=a("strong"),yDo=o("flaubert"),LDo=o(" \u2014 "),HO=a("a"),xDo=o("FlaubertForTokenClassification"),$Do=o(" (FlauBERT model)"),kDo=l(),I2=a("li"),Qge=a("strong"),SDo=o("fnet"),RDo=o(" \u2014 "),UO=a("a"),PDo=o("FNetForTokenClassification"),BDo=o(" (FNet model)"),IDo=l(),q2=a("li"),Hge=a("strong"),qDo=o("funnel"),NDo=o(" \u2014 "),JO=a("a"),jDo=o("FunnelForTokenClassification"),DDo=o(" (Funnel Transformer model)"),GDo=l(),N2=a("li"),Uge=a("strong"),ODo=o("gpt2"),VDo=o(" \u2014 "),YO=a("a"),XDo=o("GPT2ForTokenClassification"),zDo=o(" (OpenAI GPT-2 model)"),WDo=l(),j2=a("li"),Jge=a("strong"),QDo=o("ibert"),HDo=o(" \u2014 "),KO=a("a"),UDo=o("IBertForTokenClassification"),JDo=o(" (I-BERT model)"),YDo=l(),D2=a("li"),Yge=a("strong"),KDo=o("layoutlm"),ZDo=o(" \u2014 "),ZO=a("a"),eGo=o("LayoutLMForTokenClassification"),oGo=o(" (LayoutLM model)"),rGo=l(),G2=a("li"),Kge=a("strong"),tGo=o("layoutlmv2"),aGo=o(" \u2014 "),eV=a("a"),nGo=o("LayoutLMv2ForTokenClassification"),sGo=o(" (LayoutLMv2 model)"),lGo=l(),O2=a("li"),Zge=a("strong"),iGo=o("layoutlmv3"),dGo=o(" \u2014 "),oV=a("a"),cGo=o("LayoutLMv3ForTokenClassification"),fGo=o(" (LayoutLMv3 model)"),mGo=l(),V2=a("li"),ehe=a("strong"),gGo=o("longformer"),hGo=o(" \u2014 "),rV=a("a"),pGo=o("LongformerForTokenClassification"),uGo=o(" (Longformer model)"),_Go=l(),X2=a("li"),ohe=a("strong"),bGo=o("megatron-bert"),vGo=o(" \u2014 "),tV=a("a"),FGo=o("MegatronBertForTokenClassification"),TGo=o(" (MegatronBert model)"),MGo=l(),z2=a("li"),rhe=a("strong"),EGo=o("mobilebert"),CGo=o(" \u2014 "),aV=a("a"),wGo=o("MobileBertForTokenClassification"),AGo=o(" (MobileBERT model)"),yGo=l(),W2=a("li"),the=a("strong"),LGo=o("mpnet"),xGo=o(" \u2014 "),nV=a("a"),$Go=o("MPNetForTokenClassification"),kGo=o(" (MPNet model)"),SGo=l(),Q2=a("li"),ahe=a("strong"),RGo=o("nystromformer"),PGo=o(" \u2014 "),sV=a("a"),BGo=o("NystromformerForTokenClassification"),IGo=o(" (Nystromformer model)"),qGo=l(),H2=a("li"),nhe=a("strong"),NGo=o("qdqbert"),jGo=o(" \u2014 "),lV=a("a"),DGo=o("QDQBertForTokenClassification"),GGo=o(" (QDQBert model)"),OGo=l(),U2=a("li"),she=a("strong"),VGo=o("rembert"),XGo=o(" \u2014 "),iV=a("a"),zGo=o("RemBertForTokenClassification"),WGo=o(" (RemBERT model)"),QGo=l(),J2=a("li"),lhe=a("strong"),HGo=o("roberta"),UGo=o(" \u2014 "),dV=a("a"),JGo=o("RobertaForTokenClassification"),YGo=o(" (RoBERTa model)"),KGo=l(),Y2=a("li"),ihe=a("strong"),ZGo=o("roformer"),eOo=o(" \u2014 "),cV=a("a"),oOo=o("RoFormerForTokenClassification"),rOo=o(" (RoFormer model)"),tOo=l(),K2=a("li"),dhe=a("strong"),aOo=o("squeezebert"),nOo=o(" \u2014 "),fV=a("a"),sOo=o("SqueezeBertForTokenClassification"),lOo=o(" (SqueezeBERT model)"),iOo=l(),Z2=a("li"),che=a("strong"),dOo=o("xlm"),cOo=o(" \u2014 "),mV=a("a"),fOo=o("XLMForTokenClassification"),mOo=o(" (XLM model)"),gOo=l(),ev=a("li"),fhe=a("strong"),hOo=o("xlm-roberta"),pOo=o(" \u2014 "),gV=a("a"),uOo=o("XLMRobertaForTokenClassification"),_Oo=o(" (XLM-RoBERTa model)"),bOo=l(),ov=a("li"),mhe=a("strong"),vOo=o("xlm-roberta-xl"),FOo=o(" \u2014 "),hV=a("a"),TOo=o("XLMRobertaXLForTokenClassification"),MOo=o(" (XLM-RoBERTa-XL model)"),EOo=l(),rv=a("li"),ghe=a("strong"),COo=o("xlnet"),wOo=o(" \u2014 "),pV=a("a"),AOo=o("XLNetForTokenClassification"),yOo=o(" (XLNet model)"),LOo=l(),tv=a("li"),hhe=a("strong"),xOo=o("yoso"),$Oo=o(" \u2014 "),uV=a("a"),kOo=o("YosoForTokenClassification"),SOo=o(" (YOSO model)"),ROo=l(),av=a("p"),POo=o("The model is set in evaluation mode by default using "),phe=a("code"),BOo=o("model.eval()"),IOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uhe=a("code"),qOo=o("model.train()"),NOo=l(),F(nv.$$.fragment),gNe=l(),Ki=a("h2"),sv=a("a"),_he=a("span"),F(D6.$$.fragment),jOo=l(),bhe=a("span"),DOo=o("AutoModelForQuestionAnswering"),hNe=l(),qo=a("div"),F(G6.$$.fragment),GOo=l(),Zi=a("p"),OOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_V=a("a"),VOo=o("from_pretrained()"),XOo=o(" class method or the "),bV=a("a"),zOo=o("from_config()"),WOo=o(` class
method.`),QOo=l(),O6=a("p"),HOo=o("This class cannot be instantiated directly using "),vhe=a("code"),UOo=o("__init__()"),JOo=o(" (throws an error)."),YOo=l(),mt=a("div"),F(V6.$$.fragment),KOo=l(),Fhe=a("p"),ZOo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),eVo=l(),ed=a("p"),oVo=o(`Note:
Loading a model from its configuration file does `),The=a("strong"),rVo=o("not"),tVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=a("a"),aVo=o("from_pretrained()"),nVo=o(" to load the model weights."),sVo=l(),F(lv.$$.fragment),lVo=l(),no=a("div"),F(X6.$$.fragment),iVo=l(),Mhe=a("p"),dVo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),cVo=l(),qa=a("p"),fVo=o("The model class to instantiate is selected based on the "),Ehe=a("code"),mVo=o("model_type"),gVo=o(` property of the config object (either
passed as an argument or loaded from `),Che=a("code"),hVo=o("pretrained_model_name_or_path"),pVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),whe=a("code"),uVo=o("pretrained_model_name_or_path"),_Vo=o(":"),bVo=l(),V=a("ul"),iv=a("li"),Ahe=a("strong"),vVo=o("albert"),FVo=o(" \u2014 "),FV=a("a"),TVo=o("AlbertForQuestionAnswering"),MVo=o(" (ALBERT model)"),EVo=l(),dv=a("li"),yhe=a("strong"),CVo=o("bart"),wVo=o(" \u2014 "),TV=a("a"),AVo=o("BartForQuestionAnswering"),yVo=o(" (BART model)"),LVo=l(),cv=a("li"),Lhe=a("strong"),xVo=o("bert"),$Vo=o(" \u2014 "),MV=a("a"),kVo=o("BertForQuestionAnswering"),SVo=o(" (BERT model)"),RVo=l(),fv=a("li"),xhe=a("strong"),PVo=o("big_bird"),BVo=o(" \u2014 "),EV=a("a"),IVo=o("BigBirdForQuestionAnswering"),qVo=o(" (BigBird model)"),NVo=l(),mv=a("li"),$he=a("strong"),jVo=o("bigbird_pegasus"),DVo=o(" \u2014 "),CV=a("a"),GVo=o("BigBirdPegasusForQuestionAnswering"),OVo=o(" (BigBirdPegasus model)"),VVo=l(),gv=a("li"),khe=a("strong"),XVo=o("camembert"),zVo=o(" \u2014 "),wV=a("a"),WVo=o("CamembertForQuestionAnswering"),QVo=o(" (CamemBERT model)"),HVo=l(),hv=a("li"),She=a("strong"),UVo=o("canine"),JVo=o(" \u2014 "),AV=a("a"),YVo=o("CanineForQuestionAnswering"),KVo=o(" (Canine model)"),ZVo=l(),pv=a("li"),Rhe=a("strong"),eXo=o("convbert"),oXo=o(" \u2014 "),yV=a("a"),rXo=o("ConvBertForQuestionAnswering"),tXo=o(" (ConvBERT model)"),aXo=l(),uv=a("li"),Phe=a("strong"),nXo=o("data2vec-text"),sXo=o(" \u2014 "),LV=a("a"),lXo=o("Data2VecTextForQuestionAnswering"),iXo=o(" (Data2VecText model)"),dXo=l(),_v=a("li"),Bhe=a("strong"),cXo=o("deberta"),fXo=o(" \u2014 "),xV=a("a"),mXo=o("DebertaForQuestionAnswering"),gXo=o(" (DeBERTa model)"),hXo=l(),bv=a("li"),Ihe=a("strong"),pXo=o("deberta-v2"),uXo=o(" \u2014 "),$V=a("a"),_Xo=o("DebertaV2ForQuestionAnswering"),bXo=o(" (DeBERTa-v2 model)"),vXo=l(),vv=a("li"),qhe=a("strong"),FXo=o("distilbert"),TXo=o(" \u2014 "),kV=a("a"),MXo=o("DistilBertForQuestionAnswering"),EXo=o(" (DistilBERT model)"),CXo=l(),Fv=a("li"),Nhe=a("strong"),wXo=o("electra"),AXo=o(" \u2014 "),SV=a("a"),yXo=o("ElectraForQuestionAnswering"),LXo=o(" (ELECTRA model)"),xXo=l(),Tv=a("li"),jhe=a("strong"),$Xo=o("flaubert"),kXo=o(" \u2014 "),RV=a("a"),SXo=o("FlaubertForQuestionAnsweringSimple"),RXo=o(" (FlauBERT model)"),PXo=l(),Mv=a("li"),Dhe=a("strong"),BXo=o("fnet"),IXo=o(" \u2014 "),PV=a("a"),qXo=o("FNetForQuestionAnswering"),NXo=o(" (FNet model)"),jXo=l(),Ev=a("li"),Ghe=a("strong"),DXo=o("funnel"),GXo=o(" \u2014 "),BV=a("a"),OXo=o("FunnelForQuestionAnswering"),VXo=o(" (Funnel Transformer model)"),XXo=l(),Cv=a("li"),Ohe=a("strong"),zXo=o("gptj"),WXo=o(" \u2014 "),IV=a("a"),QXo=o("GPTJForQuestionAnswering"),HXo=o(" (GPT-J model)"),UXo=l(),wv=a("li"),Vhe=a("strong"),JXo=o("ibert"),YXo=o(" \u2014 "),qV=a("a"),KXo=o("IBertForQuestionAnswering"),ZXo=o(" (I-BERT model)"),ezo=l(),Av=a("li"),Xhe=a("strong"),ozo=o("layoutlmv2"),rzo=o(" \u2014 "),NV=a("a"),tzo=o("LayoutLMv2ForQuestionAnswering"),azo=o(" (LayoutLMv2 model)"),nzo=l(),yv=a("li"),zhe=a("strong"),szo=o("layoutlmv3"),lzo=o(" \u2014 "),jV=a("a"),izo=o("LayoutLMv3ForQuestionAnswering"),dzo=o(" (LayoutLMv3 model)"),czo=l(),Lv=a("li"),Whe=a("strong"),fzo=o("led"),mzo=o(" \u2014 "),DV=a("a"),gzo=o("LEDForQuestionAnswering"),hzo=o(" (LED model)"),pzo=l(),xv=a("li"),Qhe=a("strong"),uzo=o("longformer"),_zo=o(" \u2014 "),GV=a("a"),bzo=o("LongformerForQuestionAnswering"),vzo=o(" (Longformer model)"),Fzo=l(),$v=a("li"),Hhe=a("strong"),Tzo=o("lxmert"),Mzo=o(" \u2014 "),OV=a("a"),Ezo=o("LxmertForQuestionAnswering"),Czo=o(" (LXMERT model)"),wzo=l(),kv=a("li"),Uhe=a("strong"),Azo=o("mbart"),yzo=o(" \u2014 "),VV=a("a"),Lzo=o("MBartForQuestionAnswering"),xzo=o(" (mBART model)"),$zo=l(),Sv=a("li"),Jhe=a("strong"),kzo=o("megatron-bert"),Szo=o(" \u2014 "),XV=a("a"),Rzo=o("MegatronBertForQuestionAnswering"),Pzo=o(" (MegatronBert model)"),Bzo=l(),Rv=a("li"),Yhe=a("strong"),Izo=o("mobilebert"),qzo=o(" \u2014 "),zV=a("a"),Nzo=o("MobileBertForQuestionAnswering"),jzo=o(" (MobileBERT model)"),Dzo=l(),Pv=a("li"),Khe=a("strong"),Gzo=o("mpnet"),Ozo=o(" \u2014 "),WV=a("a"),Vzo=o("MPNetForQuestionAnswering"),Xzo=o(" (MPNet model)"),zzo=l(),Bv=a("li"),Zhe=a("strong"),Wzo=o("nystromformer"),Qzo=o(" \u2014 "),QV=a("a"),Hzo=o("NystromformerForQuestionAnswering"),Uzo=o(" (Nystromformer model)"),Jzo=l(),Iv=a("li"),epe=a("strong"),Yzo=o("qdqbert"),Kzo=o(" \u2014 "),HV=a("a"),Zzo=o("QDQBertForQuestionAnswering"),eWo=o(" (QDQBert model)"),oWo=l(),qv=a("li"),ope=a("strong"),rWo=o("reformer"),tWo=o(" \u2014 "),UV=a("a"),aWo=o("ReformerForQuestionAnswering"),nWo=o(" (Reformer model)"),sWo=l(),Nv=a("li"),rpe=a("strong"),lWo=o("rembert"),iWo=o(" \u2014 "),JV=a("a"),dWo=o("RemBertForQuestionAnswering"),cWo=o(" (RemBERT model)"),fWo=l(),jv=a("li"),tpe=a("strong"),mWo=o("roberta"),gWo=o(" \u2014 "),YV=a("a"),hWo=o("RobertaForQuestionAnswering"),pWo=o(" (RoBERTa model)"),uWo=l(),Dv=a("li"),ape=a("strong"),_Wo=o("roformer"),bWo=o(" \u2014 "),KV=a("a"),vWo=o("RoFormerForQuestionAnswering"),FWo=o(" (RoFormer model)"),TWo=l(),Gv=a("li"),npe=a("strong"),MWo=o("splinter"),EWo=o(" \u2014 "),ZV=a("a"),CWo=o("SplinterForQuestionAnswering"),wWo=o(" (Splinter model)"),AWo=l(),Ov=a("li"),spe=a("strong"),yWo=o("squeezebert"),LWo=o(" \u2014 "),eX=a("a"),xWo=o("SqueezeBertForQuestionAnswering"),$Wo=o(" (SqueezeBERT model)"),kWo=l(),Vv=a("li"),lpe=a("strong"),SWo=o("xlm"),RWo=o(" \u2014 "),oX=a("a"),PWo=o("XLMForQuestionAnsweringSimple"),BWo=o(" (XLM model)"),IWo=l(),Xv=a("li"),ipe=a("strong"),qWo=o("xlm-roberta"),NWo=o(" \u2014 "),rX=a("a"),jWo=o("XLMRobertaForQuestionAnswering"),DWo=o(" (XLM-RoBERTa model)"),GWo=l(),zv=a("li"),dpe=a("strong"),OWo=o("xlm-roberta-xl"),VWo=o(" \u2014 "),tX=a("a"),XWo=o("XLMRobertaXLForQuestionAnswering"),zWo=o(" (XLM-RoBERTa-XL model)"),WWo=l(),Wv=a("li"),cpe=a("strong"),QWo=o("xlnet"),HWo=o(" \u2014 "),aX=a("a"),UWo=o("XLNetForQuestionAnsweringSimple"),JWo=o(" (XLNet model)"),YWo=l(),Qv=a("li"),fpe=a("strong"),KWo=o("yoso"),ZWo=o(" \u2014 "),nX=a("a"),eQo=o("YosoForQuestionAnswering"),oQo=o(" (YOSO model)"),rQo=l(),Hv=a("p"),tQo=o("The model is set in evaluation mode by default using "),mpe=a("code"),aQo=o("model.eval()"),nQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gpe=a("code"),sQo=o("model.train()"),lQo=l(),F(Uv.$$.fragment),pNe=l(),od=a("h2"),Jv=a("a"),hpe=a("span"),F(z6.$$.fragment),iQo=l(),ppe=a("span"),dQo=o("AutoModelForTableQuestionAnswering"),uNe=l(),No=a("div"),F(W6.$$.fragment),cQo=l(),rd=a("p"),fQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sX=a("a"),mQo=o("from_pretrained()"),gQo=o(" class method or the "),lX=a("a"),hQo=o("from_config()"),pQo=o(` class
method.`),uQo=l(),Q6=a("p"),_Qo=o("This class cannot be instantiated directly using "),upe=a("code"),bQo=o("__init__()"),vQo=o(" (throws an error)."),FQo=l(),gt=a("div"),F(H6.$$.fragment),TQo=l(),_pe=a("p"),MQo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),EQo=l(),td=a("p"),CQo=o(`Note:
Loading a model from its configuration file does `),bpe=a("strong"),wQo=o("not"),AQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=a("a"),yQo=o("from_pretrained()"),LQo=o(" to load the model weights."),xQo=l(),F(Yv.$$.fragment),$Qo=l(),so=a("div"),F(U6.$$.fragment),kQo=l(),vpe=a("p"),SQo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),RQo=l(),Na=a("p"),PQo=o("The model class to instantiate is selected based on the "),Fpe=a("code"),BQo=o("model_type"),IQo=o(` property of the config object (either
passed as an argument or loaded from `),Tpe=a("code"),qQo=o("pretrained_model_name_or_path"),NQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mpe=a("code"),jQo=o("pretrained_model_name_or_path"),DQo=o(":"),GQo=l(),Epe=a("ul"),Kv=a("li"),Cpe=a("strong"),OQo=o("tapas"),VQo=o(" \u2014 "),dX=a("a"),XQo=o("TapasForQuestionAnswering"),zQo=o(" (TAPAS model)"),WQo=l(),Zv=a("p"),QQo=o("The model is set in evaluation mode by default using "),wpe=a("code"),HQo=o("model.eval()"),UQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=a("code"),JQo=o("model.train()"),YQo=l(),F(eF.$$.fragment),_Ne=l(),ad=a("h2"),oF=a("a"),ype=a("span"),F(J6.$$.fragment),KQo=l(),Lpe=a("span"),ZQo=o("AutoModelForImageClassification"),bNe=l(),jo=a("div"),F(Y6.$$.fragment),eHo=l(),nd=a("p"),oHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cX=a("a"),rHo=o("from_pretrained()"),tHo=o(" class method or the "),fX=a("a"),aHo=o("from_config()"),nHo=o(` class
method.`),sHo=l(),K6=a("p"),lHo=o("This class cannot be instantiated directly using "),xpe=a("code"),iHo=o("__init__()"),dHo=o(" (throws an error)."),cHo=l(),ht=a("div"),F(Z6.$$.fragment),fHo=l(),$pe=a("p"),mHo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gHo=l(),sd=a("p"),hHo=o(`Note:
Loading a model from its configuration file does `),kpe=a("strong"),pHo=o("not"),uHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=a("a"),_Ho=o("from_pretrained()"),bHo=o(" to load the model weights."),vHo=l(),F(rF.$$.fragment),FHo=l(),lo=a("div"),F(ey.$$.fragment),THo=l(),Spe=a("p"),MHo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),EHo=l(),ja=a("p"),CHo=o("The model class to instantiate is selected based on the "),Rpe=a("code"),wHo=o("model_type"),AHo=o(` property of the config object (either
passed as an argument or loaded from `),Ppe=a("code"),yHo=o("pretrained_model_name_or_path"),LHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=a("code"),xHo=o("pretrained_model_name_or_path"),$Ho=o(":"),kHo=l(),Fe=a("ul"),tF=a("li"),Ipe=a("strong"),SHo=o("beit"),RHo=o(" \u2014 "),gX=a("a"),PHo=o("BeitForImageClassification"),BHo=o(" (BEiT model)"),IHo=l(),aF=a("li"),qpe=a("strong"),qHo=o("convnext"),NHo=o(" \u2014 "),hX=a("a"),jHo=o("ConvNextForImageClassification"),DHo=o(" (ConvNext model)"),GHo=l(),nF=a("li"),Npe=a("strong"),OHo=o("cvt"),VHo=o(" \u2014 "),pX=a("a"),XHo=o("CvtForImageClassification"),zHo=o(" (CvT model)"),WHo=l(),sF=a("li"),jpe=a("strong"),QHo=o("data2vec-vision"),HHo=o(" \u2014 "),uX=a("a"),UHo=o("Data2VecVisionForImageClassification"),JHo=o(" (Data2VecVision model)"),YHo=l(),Bs=a("li"),Dpe=a("strong"),KHo=o("deit"),ZHo=o(" \u2014 "),_X=a("a"),eUo=o("DeiTForImageClassification"),oUo=o(" or "),bX=a("a"),rUo=o("DeiTForImageClassificationWithTeacher"),tUo=o(" (DeiT model)"),aUo=l(),lF=a("li"),Gpe=a("strong"),nUo=o("imagegpt"),sUo=o(" \u2014 "),vX=a("a"),lUo=o("ImageGPTForImageClassification"),iUo=o(" (ImageGPT model)"),dUo=l(),pt=a("li"),Ope=a("strong"),cUo=o("perceiver"),fUo=o(" \u2014 "),FX=a("a"),mUo=o("PerceiverForImageClassificationLearned"),gUo=o(" or "),TX=a("a"),hUo=o("PerceiverForImageClassificationFourier"),pUo=o(" or "),MX=a("a"),uUo=o("PerceiverForImageClassificationConvProcessing"),_Uo=o(" (Perceiver model)"),bUo=l(),iF=a("li"),Vpe=a("strong"),vUo=o("poolformer"),FUo=o(" \u2014 "),EX=a("a"),TUo=o("PoolFormerForImageClassification"),MUo=o(" (PoolFormer model)"),EUo=l(),dF=a("li"),Xpe=a("strong"),CUo=o("regnet"),wUo=o(" \u2014 "),CX=a("a"),AUo=o("RegNetForImageClassification"),yUo=o(" (RegNet model)"),LUo=l(),cF=a("li"),zpe=a("strong"),xUo=o("resnet"),$Uo=o(" \u2014 "),wX=a("a"),kUo=o("ResNetForImageClassification"),SUo=o(" (ResNet model)"),RUo=l(),fF=a("li"),Wpe=a("strong"),PUo=o("segformer"),BUo=o(" \u2014 "),AX=a("a"),IUo=o("SegformerForImageClassification"),qUo=o(" (SegFormer model)"),NUo=l(),mF=a("li"),Qpe=a("strong"),jUo=o("swin"),DUo=o(" \u2014 "),yX=a("a"),GUo=o("SwinForImageClassification"),OUo=o(" (Swin model)"),VUo=l(),gF=a("li"),Hpe=a("strong"),XUo=o("van"),zUo=o(" \u2014 "),LX=a("a"),WUo=o("VanForImageClassification"),QUo=o(" (VAN model)"),HUo=l(),hF=a("li"),Upe=a("strong"),UUo=o("vit"),JUo=o(" \u2014 "),xX=a("a"),YUo=o("ViTForImageClassification"),KUo=o(" (ViT model)"),ZUo=l(),pF=a("p"),eJo=o("The model is set in evaluation mode by default using "),Jpe=a("code"),oJo=o("model.eval()"),rJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ype=a("code"),tJo=o("model.train()"),aJo=l(),F(uF.$$.fragment),vNe=l(),ld=a("h2"),_F=a("a"),Kpe=a("span"),F(oy.$$.fragment),nJo=l(),Zpe=a("span"),sJo=o("AutoModelForVision2Seq"),FNe=l(),Do=a("div"),F(ry.$$.fragment),lJo=l(),id=a("p"),iJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$X=a("a"),dJo=o("from_pretrained()"),cJo=o(" class method or the "),kX=a("a"),fJo=o("from_config()"),mJo=o(` class
method.`),gJo=l(),ty=a("p"),hJo=o("This class cannot be instantiated directly using "),eue=a("code"),pJo=o("__init__()"),uJo=o(" (throws an error)."),_Jo=l(),ut=a("div"),F(ay.$$.fragment),bJo=l(),oue=a("p"),vJo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FJo=l(),dd=a("p"),TJo=o(`Note:
Loading a model from its configuration file does `),rue=a("strong"),MJo=o("not"),EJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),CJo=o("from_pretrained()"),wJo=o(" to load the model weights."),AJo=l(),F(bF.$$.fragment),yJo=l(),io=a("div"),F(ny.$$.fragment),LJo=l(),tue=a("p"),xJo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$Jo=l(),Da=a("p"),kJo=o("The model class to instantiate is selected based on the "),aue=a("code"),SJo=o("model_type"),RJo=o(` property of the config object (either
passed as an argument or loaded from `),nue=a("code"),PJo=o("pretrained_model_name_or_path"),BJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=a("code"),IJo=o("pretrained_model_name_or_path"),qJo=o(":"),NJo=l(),lue=a("ul"),vF=a("li"),iue=a("strong"),jJo=o("vision-encoder-decoder"),DJo=o(" \u2014 "),RX=a("a"),GJo=o("VisionEncoderDecoderModel"),OJo=o(" (Vision Encoder decoder model)"),VJo=l(),FF=a("p"),XJo=o("The model is set in evaluation mode by default using "),due=a("code"),zJo=o("model.eval()"),WJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=a("code"),QJo=o("model.train()"),HJo=l(),F(TF.$$.fragment),TNe=l(),cd=a("h2"),MF=a("a"),fue=a("span"),F(sy.$$.fragment),UJo=l(),mue=a("span"),JJo=o("AutoModelForAudioClassification"),MNe=l(),Go=a("div"),F(ly.$$.fragment),YJo=l(),fd=a("p"),KJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),PX=a("a"),ZJo=o("from_pretrained()"),eYo=o(" class method or the "),BX=a("a"),oYo=o("from_config()"),rYo=o(` class
method.`),tYo=l(),iy=a("p"),aYo=o("This class cannot be instantiated directly using "),gue=a("code"),nYo=o("__init__()"),sYo=o(" (throws an error)."),lYo=l(),_t=a("div"),F(dy.$$.fragment),iYo=l(),hue=a("p"),dYo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),cYo=l(),md=a("p"),fYo=o(`Note:
Loading a model from its configuration file does `),pue=a("strong"),mYo=o("not"),gYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=a("a"),hYo=o("from_pretrained()"),pYo=o(" to load the model weights."),uYo=l(),F(EF.$$.fragment),_Yo=l(),co=a("div"),F(cy.$$.fragment),bYo=l(),uue=a("p"),vYo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),FYo=l(),Ga=a("p"),TYo=o("The model class to instantiate is selected based on the "),_ue=a("code"),MYo=o("model_type"),EYo=o(` property of the config object (either
passed as an argument or loaded from `),bue=a("code"),CYo=o("pretrained_model_name_or_path"),wYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=a("code"),AYo=o("pretrained_model_name_or_path"),yYo=o(":"),LYo=l(),ke=a("ul"),CF=a("li"),Fue=a("strong"),xYo=o("data2vec-audio"),$Yo=o(" \u2014 "),qX=a("a"),kYo=o("Data2VecAudioForSequenceClassification"),SYo=o(" (Data2VecAudio model)"),RYo=l(),wF=a("li"),Tue=a("strong"),PYo=o("hubert"),BYo=o(" \u2014 "),NX=a("a"),IYo=o("HubertForSequenceClassification"),qYo=o(" (Hubert model)"),NYo=l(),AF=a("li"),Mue=a("strong"),jYo=o("sew"),DYo=o(" \u2014 "),jX=a("a"),GYo=o("SEWForSequenceClassification"),OYo=o(" (SEW model)"),VYo=l(),yF=a("li"),Eue=a("strong"),XYo=o("sew-d"),zYo=o(" \u2014 "),DX=a("a"),WYo=o("SEWDForSequenceClassification"),QYo=o(" (SEW-D model)"),HYo=l(),LF=a("li"),Cue=a("strong"),UYo=o("unispeech"),JYo=o(" \u2014 "),GX=a("a"),YYo=o("UniSpeechForSequenceClassification"),KYo=o(" (UniSpeech model)"),ZYo=l(),xF=a("li"),wue=a("strong"),eKo=o("unispeech-sat"),oKo=o(" \u2014 "),OX=a("a"),rKo=o("UniSpeechSatForSequenceClassification"),tKo=o(" (UniSpeechSat model)"),aKo=l(),$F=a("li"),Aue=a("strong"),nKo=o("wav2vec2"),sKo=o(" \u2014 "),VX=a("a"),lKo=o("Wav2Vec2ForSequenceClassification"),iKo=o(" (Wav2Vec2 model)"),dKo=l(),kF=a("li"),yue=a("strong"),cKo=o("wav2vec2-conformer"),fKo=o(" \u2014 "),XX=a("a"),mKo=o("Wav2Vec2ConformerForSequenceClassification"),gKo=o(" (Wav2Vec2-Conformer model)"),hKo=l(),SF=a("li"),Lue=a("strong"),pKo=o("wavlm"),uKo=o(" \u2014 "),zX=a("a"),_Ko=o("WavLMForSequenceClassification"),bKo=o(" (WavLM model)"),vKo=l(),RF=a("p"),FKo=o("The model is set in evaluation mode by default using "),xue=a("code"),TKo=o("model.eval()"),MKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=a("code"),EKo=o("model.train()"),CKo=l(),F(PF.$$.fragment),ENe=l(),gd=a("h2"),BF=a("a"),kue=a("span"),F(fy.$$.fragment),wKo=l(),Sue=a("span"),AKo=o("AutoModelForAudioFrameClassification"),CNe=l(),Oo=a("div"),F(my.$$.fragment),yKo=l(),hd=a("p"),LKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),WX=a("a"),xKo=o("from_pretrained()"),$Ko=o(" class method or the "),QX=a("a"),kKo=o("from_config()"),SKo=o(` class
method.`),RKo=l(),gy=a("p"),PKo=o("This class cannot be instantiated directly using "),Rue=a("code"),BKo=o("__init__()"),IKo=o(" (throws an error)."),qKo=l(),bt=a("div"),F(hy.$$.fragment),NKo=l(),Pue=a("p"),jKo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),DKo=l(),pd=a("p"),GKo=o(`Note:
Loading a model from its configuration file does `),Bue=a("strong"),OKo=o("not"),VKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=a("a"),XKo=o("from_pretrained()"),zKo=o(" to load the model weights."),WKo=l(),F(IF.$$.fragment),QKo=l(),fo=a("div"),F(py.$$.fragment),HKo=l(),Iue=a("p"),UKo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),JKo=l(),Oa=a("p"),YKo=o("The model class to instantiate is selected based on the "),que=a("code"),KKo=o("model_type"),ZKo=o(` property of the config object (either
passed as an argument or loaded from `),Nue=a("code"),eZo=o("pretrained_model_name_or_path"),oZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=a("code"),rZo=o("pretrained_model_name_or_path"),tZo=o(":"),aZo=l(),Kr=a("ul"),qF=a("li"),Due=a("strong"),nZo=o("data2vec-audio"),sZo=o(" \u2014 "),UX=a("a"),lZo=o("Data2VecAudioForAudioFrameClassification"),iZo=o(" (Data2VecAudio model)"),dZo=l(),NF=a("li"),Gue=a("strong"),cZo=o("unispeech-sat"),fZo=o(" \u2014 "),JX=a("a"),mZo=o("UniSpeechSatForAudioFrameClassification"),gZo=o(" (UniSpeechSat model)"),hZo=l(),jF=a("li"),Oue=a("strong"),pZo=o("wav2vec2"),uZo=o(" \u2014 "),YX=a("a"),_Zo=o("Wav2Vec2ForAudioFrameClassification"),bZo=o(" (Wav2Vec2 model)"),vZo=l(),DF=a("li"),Vue=a("strong"),FZo=o("wav2vec2-conformer"),TZo=o(" \u2014 "),KX=a("a"),MZo=o("Wav2Vec2ConformerForAudioFrameClassification"),EZo=o(" (Wav2Vec2-Conformer model)"),CZo=l(),GF=a("li"),Xue=a("strong"),wZo=o("wavlm"),AZo=o(" \u2014 "),ZX=a("a"),yZo=o("WavLMForAudioFrameClassification"),LZo=o(" (WavLM model)"),xZo=l(),OF=a("p"),$Zo=o("The model is set in evaluation mode by default using "),zue=a("code"),kZo=o("model.eval()"),SZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=a("code"),RZo=o("model.train()"),PZo=l(),F(VF.$$.fragment),wNe=l(),ud=a("h2"),XF=a("a"),Que=a("span"),F(uy.$$.fragment),BZo=l(),Hue=a("span"),IZo=o("AutoModelForCTC"),ANe=l(),Vo=a("div"),F(_y.$$.fragment),qZo=l(),_d=a("p"),NZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ez=a("a"),jZo=o("from_pretrained()"),DZo=o(" class method or the "),oz=a("a"),GZo=o("from_config()"),OZo=o(` class
method.`),VZo=l(),by=a("p"),XZo=o("This class cannot be instantiated directly using "),Uue=a("code"),zZo=o("__init__()"),WZo=o(" (throws an error)."),QZo=l(),vt=a("div"),F(vy.$$.fragment),HZo=l(),Jue=a("p"),UZo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),JZo=l(),bd=a("p"),YZo=o(`Note:
Loading a model from its configuration file does `),Yue=a("strong"),KZo=o("not"),ZZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=a("a"),eer=o("from_pretrained()"),oer=o(" to load the model weights."),rer=l(),F(zF.$$.fragment),ter=l(),mo=a("div"),F(Fy.$$.fragment),aer=l(),Kue=a("p"),ner=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ser=l(),Va=a("p"),ler=o("The model class to instantiate is selected based on the "),Zue=a("code"),ier=o("model_type"),der=o(` property of the config object (either
passed as an argument or loaded from `),e_e=a("code"),cer=o("pretrained_model_name_or_path"),fer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=a("code"),mer=o("pretrained_model_name_or_path"),ger=o(":"),her=l(),Se=a("ul"),WF=a("li"),r_e=a("strong"),per=o("data2vec-audio"),uer=o(" \u2014 "),tz=a("a"),_er=o("Data2VecAudioForCTC"),ber=o(" (Data2VecAudio model)"),ver=l(),QF=a("li"),t_e=a("strong"),Fer=o("hubert"),Ter=o(" \u2014 "),az=a("a"),Mer=o("HubertForCTC"),Eer=o(" (Hubert model)"),Cer=l(),HF=a("li"),a_e=a("strong"),wer=o("sew"),Aer=o(" \u2014 "),nz=a("a"),yer=o("SEWForCTC"),Ler=o(" (SEW model)"),xer=l(),UF=a("li"),n_e=a("strong"),$er=o("sew-d"),ker=o(" \u2014 "),sz=a("a"),Ser=o("SEWDForCTC"),Rer=o(" (SEW-D model)"),Per=l(),JF=a("li"),s_e=a("strong"),Ber=o("unispeech"),Ier=o(" \u2014 "),lz=a("a"),qer=o("UniSpeechForCTC"),Ner=o(" (UniSpeech model)"),jer=l(),YF=a("li"),l_e=a("strong"),Der=o("unispeech-sat"),Ger=o(" \u2014 "),iz=a("a"),Oer=o("UniSpeechSatForCTC"),Ver=o(" (UniSpeechSat model)"),Xer=l(),KF=a("li"),i_e=a("strong"),zer=o("wav2vec2"),Wer=o(" \u2014 "),dz=a("a"),Qer=o("Wav2Vec2ForCTC"),Her=o(" (Wav2Vec2 model)"),Uer=l(),ZF=a("li"),d_e=a("strong"),Jer=o("wav2vec2-conformer"),Yer=o(" \u2014 "),cz=a("a"),Ker=o("Wav2Vec2ConformerForCTC"),Zer=o(" (Wav2Vec2-Conformer model)"),eor=l(),eT=a("li"),c_e=a("strong"),oor=o("wavlm"),ror=o(" \u2014 "),fz=a("a"),tor=o("WavLMForCTC"),aor=o(" (WavLM model)"),nor=l(),oT=a("p"),sor=o("The model is set in evaluation mode by default using "),f_e=a("code"),lor=o("model.eval()"),ior=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m_e=a("code"),dor=o("model.train()"),cor=l(),F(rT.$$.fragment),yNe=l(),vd=a("h2"),tT=a("a"),g_e=a("span"),F(Ty.$$.fragment),mor=l(),h_e=a("span"),gor=o("AutoModelForSpeechSeq2Seq"),LNe=l(),Xo=a("div"),F(My.$$.fragment),hor=l(),Fd=a("p"),por=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),mz=a("a"),uor=o("from_pretrained()"),_or=o(" class method or the "),gz=a("a"),bor=o("from_config()"),vor=o(` class
method.`),For=l(),Ey=a("p"),Tor=o("This class cannot be instantiated directly using "),p_e=a("code"),Mor=o("__init__()"),Eor=o(" (throws an error)."),Cor=l(),Ft=a("div"),F(Cy.$$.fragment),wor=l(),u_e=a("p"),Aor=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),yor=l(),Td=a("p"),Lor=o(`Note:
Loading a model from its configuration file does `),__e=a("strong"),xor=o("not"),$or=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=a("a"),kor=o("from_pretrained()"),Sor=o(" to load the model weights."),Ror=l(),F(aT.$$.fragment),Por=l(),go=a("div"),F(wy.$$.fragment),Bor=l(),b_e=a("p"),Ior=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qor=l(),Xa=a("p"),Nor=o("The model class to instantiate is selected based on the "),v_e=a("code"),jor=o("model_type"),Dor=o(` property of the config object (either
passed as an argument or loaded from `),F_e=a("code"),Gor=o("pretrained_model_name_or_path"),Oor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=a("code"),Vor=o("pretrained_model_name_or_path"),Xor=o(":"),zor=l(),Ay=a("ul"),nT=a("li"),M_e=a("strong"),Wor=o("speech-encoder-decoder"),Qor=o(" \u2014 "),pz=a("a"),Hor=o("SpeechEncoderDecoderModel"),Uor=o(" (Speech Encoder decoder model)"),Jor=l(),sT=a("li"),E_e=a("strong"),Yor=o("speech_to_text"),Kor=o(" \u2014 "),uz=a("a"),Zor=o("Speech2TextForConditionalGeneration"),err=o(" (Speech2Text model)"),orr=l(),lT=a("p"),rrr=o("The model is set in evaluation mode by default using "),C_e=a("code"),trr=o("model.eval()"),arr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=a("code"),nrr=o("model.train()"),srr=l(),F(iT.$$.fragment),xNe=l(),Md=a("h2"),dT=a("a"),A_e=a("span"),F(yy.$$.fragment),lrr=l(),y_e=a("span"),irr=o("AutoModelForAudioXVector"),$Ne=l(),zo=a("div"),F(Ly.$$.fragment),drr=l(),Ed=a("p"),crr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),_z=a("a"),frr=o("from_pretrained()"),mrr=o(" class method or the "),bz=a("a"),grr=o("from_config()"),hrr=o(` class
method.`),prr=l(),xy=a("p"),urr=o("This class cannot be instantiated directly using "),L_e=a("code"),_rr=o("__init__()"),brr=o(" (throws an error)."),vrr=l(),Tt=a("div"),F($y.$$.fragment),Frr=l(),x_e=a("p"),Trr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Mrr=l(),Cd=a("p"),Err=o(`Note:
Loading a model from its configuration file does `),$_e=a("strong"),Crr=o("not"),wrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=a("a"),Arr=o("from_pretrained()"),yrr=o(" to load the model weights."),Lrr=l(),F(cT.$$.fragment),xrr=l(),ho=a("div"),F(ky.$$.fragment),$rr=l(),k_e=a("p"),krr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Srr=l(),za=a("p"),Rrr=o("The model class to instantiate is selected based on the "),S_e=a("code"),Prr=o("model_type"),Brr=o(` property of the config object (either
passed as an argument or loaded from `),R_e=a("code"),Irr=o("pretrained_model_name_or_path"),qrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P_e=a("code"),Nrr=o("pretrained_model_name_or_path"),jrr=o(":"),Drr=l(),Zr=a("ul"),fT=a("li"),B_e=a("strong"),Grr=o("data2vec-audio"),Orr=o(" \u2014 "),Fz=a("a"),Vrr=o("Data2VecAudioForXVector"),Xrr=o(" (Data2VecAudio model)"),zrr=l(),mT=a("li"),I_e=a("strong"),Wrr=o("unispeech-sat"),Qrr=o(" \u2014 "),Tz=a("a"),Hrr=o("UniSpeechSatForXVector"),Urr=o(" (UniSpeechSat model)"),Jrr=l(),gT=a("li"),q_e=a("strong"),Yrr=o("wav2vec2"),Krr=o(" \u2014 "),Mz=a("a"),Zrr=o("Wav2Vec2ForXVector"),etr=o(" (Wav2Vec2 model)"),otr=l(),hT=a("li"),N_e=a("strong"),rtr=o("wav2vec2-conformer"),ttr=o(" \u2014 "),Ez=a("a"),atr=o("Wav2Vec2ConformerForXVector"),ntr=o(" (Wav2Vec2-Conformer model)"),str=l(),pT=a("li"),j_e=a("strong"),ltr=o("wavlm"),itr=o(" \u2014 "),Cz=a("a"),dtr=o("WavLMForXVector"),ctr=o(" (WavLM model)"),ftr=l(),uT=a("p"),mtr=o("The model is set in evaluation mode by default using "),D_e=a("code"),gtr=o("model.eval()"),htr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=a("code"),ptr=o("model.train()"),utr=l(),F(_T.$$.fragment),kNe=l(),wd=a("h2"),bT=a("a"),O_e=a("span"),F(Sy.$$.fragment),_tr=l(),V_e=a("span"),btr=o("AutoModelForMaskedImageModeling"),SNe=l(),Wo=a("div"),F(Ry.$$.fragment),vtr=l(),Ad=a("p"),Ftr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wz=a("a"),Ttr=o("from_pretrained()"),Mtr=o(" class method or the "),Az=a("a"),Etr=o("from_config()"),Ctr=o(` class
method.`),wtr=l(),Py=a("p"),Atr=o("This class cannot be instantiated directly using "),X_e=a("code"),ytr=o("__init__()"),Ltr=o(" (throws an error)."),xtr=l(),Mt=a("div"),F(By.$$.fragment),$tr=l(),z_e=a("p"),ktr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Str=l(),yd=a("p"),Rtr=o(`Note:
Loading a model from its configuration file does `),W_e=a("strong"),Ptr=o("not"),Btr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),Itr=o("from_pretrained()"),qtr=o(" to load the model weights."),Ntr=l(),F(vT.$$.fragment),jtr=l(),po=a("div"),F(Iy.$$.fragment),Dtr=l(),Q_e=a("p"),Gtr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Otr=l(),Wa=a("p"),Vtr=o("The model class to instantiate is selected based on the "),H_e=a("code"),Xtr=o("model_type"),ztr=o(` property of the config object (either
passed as an argument or loaded from `),U_e=a("code"),Wtr=o("pretrained_model_name_or_path"),Qtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=a("code"),Htr=o("pretrained_model_name_or_path"),Utr=o(":"),Jtr=l(),Ld=a("ul"),FT=a("li"),Y_e=a("strong"),Ytr=o("deit"),Ktr=o(" \u2014 "),Lz=a("a"),Ztr=o("DeiTForMaskedImageModeling"),ear=o(" (DeiT model)"),oar=l(),TT=a("li"),K_e=a("strong"),rar=o("swin"),tar=o(" \u2014 "),xz=a("a"),aar=o("SwinForMaskedImageModeling"),nar=o(" (Swin model)"),sar=l(),MT=a("li"),Z_e=a("strong"),lar=o("vit"),iar=o(" \u2014 "),$z=a("a"),dar=o("ViTForMaskedImageModeling"),car=o(" (ViT model)"),far=l(),ET=a("p"),mar=o("The model is set in evaluation mode by default using "),e3e=a("code"),gar=o("model.eval()"),har=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o3e=a("code"),par=o("model.train()"),uar=l(),F(CT.$$.fragment),RNe=l(),xd=a("h2"),wT=a("a"),r3e=a("span"),F(qy.$$.fragment),_ar=l(),t3e=a("span"),bar=o("AutoModelForObjectDetection"),PNe=l(),Qo=a("div"),F(Ny.$$.fragment),Far=l(),$d=a("p"),Tar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),kz=a("a"),Mar=o("from_pretrained()"),Ear=o(" class method or the "),Sz=a("a"),Car=o("from_config()"),war=o(` class
method.`),Aar=l(),jy=a("p"),yar=o("This class cannot be instantiated directly using "),a3e=a("code"),Lar=o("__init__()"),xar=o(" (throws an error)."),$ar=l(),Et=a("div"),F(Dy.$$.fragment),kar=l(),n3e=a("p"),Sar=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Rar=l(),kd=a("p"),Par=o(`Note:
Loading a model from its configuration file does `),s3e=a("strong"),Bar=o("not"),Iar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=a("a"),qar=o("from_pretrained()"),Nar=o(" to load the model weights."),jar=l(),F(AT.$$.fragment),Dar=l(),uo=a("div"),F(Gy.$$.fragment),Gar=l(),l3e=a("p"),Oar=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Var=l(),Qa=a("p"),Xar=o("The model class to instantiate is selected based on the "),i3e=a("code"),zar=o("model_type"),War=o(` property of the config object (either
passed as an argument or loaded from `),d3e=a("code"),Qar=o("pretrained_model_name_or_path"),Har=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=a("code"),Uar=o("pretrained_model_name_or_path"),Jar=o(":"),Yar=l(),Oy=a("ul"),yT=a("li"),f3e=a("strong"),Kar=o("detr"),Zar=o(" \u2014 "),Pz=a("a"),enr=o("DetrForObjectDetection"),onr=o(" (DETR model)"),rnr=l(),LT=a("li"),m3e=a("strong"),tnr=o("yolos"),anr=o(" \u2014 "),Bz=a("a"),nnr=o("YolosForObjectDetection"),snr=o(" (YOLOS model)"),lnr=l(),xT=a("p"),inr=o("The model is set in evaluation mode by default using "),g3e=a("code"),dnr=o("model.eval()"),cnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h3e=a("code"),fnr=o("model.train()"),mnr=l(),F($T.$$.fragment),BNe=l(),Sd=a("h2"),kT=a("a"),p3e=a("span"),F(Vy.$$.fragment),gnr=l(),u3e=a("span"),hnr=o("AutoModelForImageSegmentation"),INe=l(),Ho=a("div"),F(Xy.$$.fragment),pnr=l(),Rd=a("p"),unr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Iz=a("a"),_nr=o("from_pretrained()"),bnr=o(" class method or the "),qz=a("a"),vnr=o("from_config()"),Fnr=o(` class
method.`),Tnr=l(),zy=a("p"),Mnr=o("This class cannot be instantiated directly using "),_3e=a("code"),Enr=o("__init__()"),Cnr=o(" (throws an error)."),wnr=l(),Ct=a("div"),F(Wy.$$.fragment),Anr=l(),b3e=a("p"),ynr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Lnr=l(),Pd=a("p"),xnr=o(`Note:
Loading a model from its configuration file does `),v3e=a("strong"),$nr=o("not"),knr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),Snr=o("from_pretrained()"),Rnr=o(" to load the model weights."),Pnr=l(),F(ST.$$.fragment),Bnr=l(),_o=a("div"),F(Qy.$$.fragment),Inr=l(),F3e=a("p"),qnr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Nnr=l(),Ha=a("p"),jnr=o("The model class to instantiate is selected based on the "),T3e=a("code"),Dnr=o("model_type"),Gnr=o(` property of the config object (either
passed as an argument or loaded from `),M3e=a("code"),Onr=o("pretrained_model_name_or_path"),Vnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E3e=a("code"),Xnr=o("pretrained_model_name_or_path"),znr=o(":"),Wnr=l(),C3e=a("ul"),RT=a("li"),w3e=a("strong"),Qnr=o("detr"),Hnr=o(" \u2014 "),jz=a("a"),Unr=o("DetrForSegmentation"),Jnr=o(" (DETR model)"),Ynr=l(),PT=a("p"),Knr=o("The model is set in evaluation mode by default using "),A3e=a("code"),Znr=o("model.eval()"),esr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y3e=a("code"),osr=o("model.train()"),rsr=l(),F(BT.$$.fragment),qNe=l(),Bd=a("h2"),IT=a("a"),L3e=a("span"),F(Hy.$$.fragment),tsr=l(),x3e=a("span"),asr=o("AutoModelForSemanticSegmentation"),NNe=l(),Uo=a("div"),F(Uy.$$.fragment),nsr=l(),Id=a("p"),ssr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Dz=a("a"),lsr=o("from_pretrained()"),isr=o(" class method or the "),Gz=a("a"),dsr=o("from_config()"),csr=o(` class
method.`),fsr=l(),Jy=a("p"),msr=o("This class cannot be instantiated directly using "),$3e=a("code"),gsr=o("__init__()"),hsr=o(" (throws an error)."),psr=l(),wt=a("div"),F(Yy.$$.fragment),usr=l(),k3e=a("p"),_sr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),bsr=l(),qd=a("p"),vsr=o(`Note:
Loading a model from its configuration file does `),S3e=a("strong"),Fsr=o("not"),Tsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=a("a"),Msr=o("from_pretrained()"),Esr=o(" to load the model weights."),Csr=l(),F(qT.$$.fragment),wsr=l(),bo=a("div"),F(Ky.$$.fragment),Asr=l(),R3e=a("p"),ysr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Lsr=l(),Ua=a("p"),xsr=o("The model class to instantiate is selected based on the "),P3e=a("code"),$sr=o("model_type"),ksr=o(` property of the config object (either
passed as an argument or loaded from `),B3e=a("code"),Ssr=o("pretrained_model_name_or_path"),Rsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I3e=a("code"),Psr=o("pretrained_model_name_or_path"),Bsr=o(":"),Isr=l(),Ja=a("ul"),NT=a("li"),q3e=a("strong"),qsr=o("beit"),Nsr=o(" \u2014 "),Vz=a("a"),jsr=o("BeitForSemanticSegmentation"),Dsr=o(" (BEiT model)"),Gsr=l(),jT=a("li"),N3e=a("strong"),Osr=o("data2vec-vision"),Vsr=o(" \u2014 "),Xz=a("a"),Xsr=o("Data2VecVisionForSemanticSegmentation"),zsr=o(" (Data2VecVision model)"),Wsr=l(),DT=a("li"),j3e=a("strong"),Qsr=o("dpt"),Hsr=o(" \u2014 "),zz=a("a"),Usr=o("DPTForSemanticSegmentation"),Jsr=o(" (DPT model)"),Ysr=l(),GT=a("li"),D3e=a("strong"),Ksr=o("segformer"),Zsr=o(" \u2014 "),Wz=a("a"),elr=o("SegformerForSemanticSegmentation"),olr=o(" (SegFormer model)"),rlr=l(),OT=a("p"),tlr=o("The model is set in evaluation mode by default using "),G3e=a("code"),alr=o("model.eval()"),nlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O3e=a("code"),slr=o("model.train()"),llr=l(),F(VT.$$.fragment),jNe=l(),Nd=a("h2"),XT=a("a"),V3e=a("span"),F(Zy.$$.fragment),ilr=l(),X3e=a("span"),dlr=o("AutoModelForInstanceSegmentation"),DNe=l(),Jo=a("div"),F(eL.$$.fragment),clr=l(),jd=a("p"),flr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Qz=a("a"),mlr=o("from_pretrained()"),glr=o(" class method or the "),Hz=a("a"),hlr=o("from_config()"),plr=o(` class
method.`),ulr=l(),oL=a("p"),_lr=o("This class cannot be instantiated directly using "),z3e=a("code"),blr=o("__init__()"),vlr=o(" (throws an error)."),Flr=l(),At=a("div"),F(rL.$$.fragment),Tlr=l(),W3e=a("p"),Mlr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Elr=l(),Dd=a("p"),Clr=o(`Note:
Loading a model from its configuration file does `),Q3e=a("strong"),wlr=o("not"),Alr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=a("a"),ylr=o("from_pretrained()"),Llr=o(" to load the model weights."),xlr=l(),F(zT.$$.fragment),$lr=l(),vo=a("div"),F(tL.$$.fragment),klr=l(),H3e=a("p"),Slr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Rlr=l(),Ya=a("p"),Plr=o("The model class to instantiate is selected based on the "),U3e=a("code"),Blr=o("model_type"),Ilr=o(` property of the config object (either
passed as an argument or loaded from `),J3e=a("code"),qlr=o("pretrained_model_name_or_path"),Nlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y3e=a("code"),jlr=o("pretrained_model_name_or_path"),Dlr=o(":"),Glr=l(),K3e=a("ul"),WT=a("li"),Z3e=a("strong"),Olr=o("maskformer"),Vlr=o(" \u2014 "),Jz=a("a"),Xlr=o("MaskFormerForInstanceSegmentation"),zlr=o(" (MaskFormer model)"),Wlr=l(),QT=a("p"),Qlr=o("The model is set in evaluation mode by default using "),e1e=a("code"),Hlr=o("model.eval()"),Ulr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=a("code"),Jlr=o("model.train()"),Ylr=l(),F(HT.$$.fragment),GNe=l(),Gd=a("h2"),UT=a("a"),r1e=a("span"),F(aL.$$.fragment),Klr=l(),t1e=a("span"),Zlr=o("TFAutoModel"),ONe=l(),Yo=a("div"),F(nL.$$.fragment),eir=l(),Od=a("p"),oir=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Yz=a("a"),rir=o("from_pretrained()"),tir=o(" class method or the "),Kz=a("a"),air=o("from_config()"),nir=o(` class
method.`),sir=l(),sL=a("p"),lir=o("This class cannot be instantiated directly using "),a1e=a("code"),iir=o("__init__()"),dir=o(" (throws an error)."),cir=l(),yt=a("div"),F(lL.$$.fragment),fir=l(),n1e=a("p"),mir=o("Instantiates one of the base model classes of the library from a configuration."),gir=l(),Vd=a("p"),hir=o(`Note:
Loading a model from its configuration file does `),s1e=a("strong"),pir=o("not"),uir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=a("a"),_ir=o("from_pretrained()"),bir=o(" to load the model weights."),vir=l(),F(JT.$$.fragment),Fir=l(),wr=a("div"),F(iL.$$.fragment),Tir=l(),l1e=a("p"),Mir=o("Instantiate one of the base model classes of the library from a pretrained model."),Eir=l(),Ka=a("p"),Cir=o("The model class to instantiate is selected based on the "),i1e=a("code"),wir=o("model_type"),Air=o(` property of the config object (either
passed as an argument or loaded from `),d1e=a("code"),yir=o("pretrained_model_name_or_path"),Lir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=a("code"),xir=o("pretrained_model_name_or_path"),$ir=o(":"),kir=l(),N=a("ul"),YT=a("li"),f1e=a("strong"),Sir=o("albert"),Rir=o(" \u2014 "),eW=a("a"),Pir=o("TFAlbertModel"),Bir=o(" (ALBERT model)"),Iir=l(),KT=a("li"),m1e=a("strong"),qir=o("bart"),Nir=o(" \u2014 "),oW=a("a"),jir=o("TFBartModel"),Dir=o(" (BART model)"),Gir=l(),ZT=a("li"),g1e=a("strong"),Oir=o("bert"),Vir=o(" \u2014 "),rW=a("a"),Xir=o("TFBertModel"),zir=o(" (BERT model)"),Wir=l(),e7=a("li"),h1e=a("strong"),Qir=o("blenderbot"),Hir=o(" \u2014 "),tW=a("a"),Uir=o("TFBlenderbotModel"),Jir=o(" (Blenderbot model)"),Yir=l(),o7=a("li"),p1e=a("strong"),Kir=o("blenderbot-small"),Zir=o(" \u2014 "),aW=a("a"),edr=o("TFBlenderbotSmallModel"),odr=o(" (BlenderbotSmall model)"),rdr=l(),r7=a("li"),u1e=a("strong"),tdr=o("camembert"),adr=o(" \u2014 "),nW=a("a"),ndr=o("TFCamembertModel"),sdr=o(" (CamemBERT model)"),ldr=l(),t7=a("li"),_1e=a("strong"),idr=o("clip"),ddr=o(" \u2014 "),sW=a("a"),cdr=o("TFCLIPModel"),fdr=o(" (CLIP model)"),mdr=l(),a7=a("li"),b1e=a("strong"),gdr=o("convbert"),hdr=o(" \u2014 "),lW=a("a"),pdr=o("TFConvBertModel"),udr=o(" (ConvBERT model)"),_dr=l(),n7=a("li"),v1e=a("strong"),bdr=o("convnext"),vdr=o(" \u2014 "),iW=a("a"),Fdr=o("TFConvNextModel"),Tdr=o(" (ConvNext model)"),Mdr=l(),s7=a("li"),F1e=a("strong"),Edr=o("ctrl"),Cdr=o(" \u2014 "),dW=a("a"),wdr=o("TFCTRLModel"),Adr=o(" (CTRL model)"),ydr=l(),l7=a("li"),T1e=a("strong"),Ldr=o("data2vec-vision"),xdr=o(" \u2014 "),cW=a("a"),$dr=o("TFData2VecVisionModel"),kdr=o(" (Data2VecVision model)"),Sdr=l(),i7=a("li"),M1e=a("strong"),Rdr=o("deberta"),Pdr=o(" \u2014 "),fW=a("a"),Bdr=o("TFDebertaModel"),Idr=o(" (DeBERTa model)"),qdr=l(),d7=a("li"),E1e=a("strong"),Ndr=o("deberta-v2"),jdr=o(" \u2014 "),mW=a("a"),Ddr=o("TFDebertaV2Model"),Gdr=o(" (DeBERTa-v2 model)"),Odr=l(),c7=a("li"),C1e=a("strong"),Vdr=o("distilbert"),Xdr=o(" \u2014 "),gW=a("a"),zdr=o("TFDistilBertModel"),Wdr=o(" (DistilBERT model)"),Qdr=l(),f7=a("li"),w1e=a("strong"),Hdr=o("dpr"),Udr=o(" \u2014 "),hW=a("a"),Jdr=o("TFDPRQuestionEncoder"),Ydr=o(" (DPR model)"),Kdr=l(),m7=a("li"),A1e=a("strong"),Zdr=o("electra"),ecr=o(" \u2014 "),pW=a("a"),ocr=o("TFElectraModel"),rcr=o(" (ELECTRA model)"),tcr=l(),g7=a("li"),y1e=a("strong"),acr=o("flaubert"),ncr=o(" \u2014 "),uW=a("a"),scr=o("TFFlaubertModel"),lcr=o(" (FlauBERT model)"),icr=l(),Is=a("li"),L1e=a("strong"),dcr=o("funnel"),ccr=o(" \u2014 "),_W=a("a"),fcr=o("TFFunnelModel"),mcr=o(" or "),bW=a("a"),gcr=o("TFFunnelBaseModel"),hcr=o(" (Funnel Transformer model)"),pcr=l(),h7=a("li"),x1e=a("strong"),ucr=o("gpt2"),_cr=o(" \u2014 "),vW=a("a"),bcr=o("TFGPT2Model"),vcr=o(" (OpenAI GPT-2 model)"),Fcr=l(),p7=a("li"),$1e=a("strong"),Tcr=o("gptj"),Mcr=o(" \u2014 "),FW=a("a"),Ecr=o("TFGPTJModel"),Ccr=o(" (GPT-J model)"),wcr=l(),u7=a("li"),k1e=a("strong"),Acr=o("hubert"),ycr=o(" \u2014 "),TW=a("a"),Lcr=o("TFHubertModel"),xcr=o(" (Hubert model)"),$cr=l(),_7=a("li"),S1e=a("strong"),kcr=o("layoutlm"),Scr=o(" \u2014 "),MW=a("a"),Rcr=o("TFLayoutLMModel"),Pcr=o(" (LayoutLM model)"),Bcr=l(),b7=a("li"),R1e=a("strong"),Icr=o("led"),qcr=o(" \u2014 "),EW=a("a"),Ncr=o("TFLEDModel"),jcr=o(" (LED model)"),Dcr=l(),v7=a("li"),P1e=a("strong"),Gcr=o("longformer"),Ocr=o(" \u2014 "),CW=a("a"),Vcr=o("TFLongformerModel"),Xcr=o(" (Longformer model)"),zcr=l(),F7=a("li"),B1e=a("strong"),Wcr=o("lxmert"),Qcr=o(" \u2014 "),wW=a("a"),Hcr=o("TFLxmertModel"),Ucr=o(" (LXMERT model)"),Jcr=l(),T7=a("li"),I1e=a("strong"),Ycr=o("marian"),Kcr=o(" \u2014 "),AW=a("a"),Zcr=o("TFMarianModel"),efr=o(" (Marian model)"),ofr=l(),M7=a("li"),q1e=a("strong"),rfr=o("mbart"),tfr=o(" \u2014 "),yW=a("a"),afr=o("TFMBartModel"),nfr=o(" (mBART model)"),sfr=l(),E7=a("li"),N1e=a("strong"),lfr=o("mobilebert"),ifr=o(" \u2014 "),LW=a("a"),dfr=o("TFMobileBertModel"),cfr=o(" (MobileBERT model)"),ffr=l(),C7=a("li"),j1e=a("strong"),mfr=o("mpnet"),gfr=o(" \u2014 "),xW=a("a"),hfr=o("TFMPNetModel"),pfr=o(" (MPNet model)"),ufr=l(),w7=a("li"),D1e=a("strong"),_fr=o("mt5"),bfr=o(" \u2014 "),$W=a("a"),vfr=o("TFMT5Model"),Ffr=o(" (mT5 model)"),Tfr=l(),A7=a("li"),G1e=a("strong"),Mfr=o("openai-gpt"),Efr=o(" \u2014 "),kW=a("a"),Cfr=o("TFOpenAIGPTModel"),wfr=o(" (OpenAI GPT model)"),Afr=l(),y7=a("li"),O1e=a("strong"),yfr=o("pegasus"),Lfr=o(" \u2014 "),SW=a("a"),xfr=o("TFPegasusModel"),$fr=o(" (Pegasus model)"),kfr=l(),L7=a("li"),V1e=a("strong"),Sfr=o("rembert"),Rfr=o(" \u2014 "),RW=a("a"),Pfr=o("TFRemBertModel"),Bfr=o(" (RemBERT model)"),Ifr=l(),x7=a("li"),X1e=a("strong"),qfr=o("roberta"),Nfr=o(" \u2014 "),PW=a("a"),jfr=o("TFRobertaModel"),Dfr=o(" (RoBERTa model)"),Gfr=l(),$7=a("li"),z1e=a("strong"),Ofr=o("roformer"),Vfr=o(" \u2014 "),BW=a("a"),Xfr=o("TFRoFormerModel"),zfr=o(" (RoFormer model)"),Wfr=l(),k7=a("li"),W1e=a("strong"),Qfr=o("speech_to_text"),Hfr=o(" \u2014 "),IW=a("a"),Ufr=o("TFSpeech2TextModel"),Jfr=o(" (Speech2Text model)"),Yfr=l(),S7=a("li"),Q1e=a("strong"),Kfr=o("swin"),Zfr=o(" \u2014 "),qW=a("a"),emr=o("TFSwinModel"),omr=o(" (Swin model)"),rmr=l(),R7=a("li"),H1e=a("strong"),tmr=o("t5"),amr=o(" \u2014 "),NW=a("a"),nmr=o("TFT5Model"),smr=o(" (T5 model)"),lmr=l(),P7=a("li"),U1e=a("strong"),imr=o("tapas"),dmr=o(" \u2014 "),jW=a("a"),cmr=o("TFTapasModel"),fmr=o(" (TAPAS model)"),mmr=l(),B7=a("li"),J1e=a("strong"),gmr=o("transfo-xl"),hmr=o(" \u2014 "),DW=a("a"),pmr=o("TFTransfoXLModel"),umr=o(" (Transformer-XL model)"),_mr=l(),I7=a("li"),Y1e=a("strong"),bmr=o("vit"),vmr=o(" \u2014 "),GW=a("a"),Fmr=o("TFViTModel"),Tmr=o(" (ViT model)"),Mmr=l(),q7=a("li"),K1e=a("strong"),Emr=o("vit_mae"),Cmr=o(" \u2014 "),OW=a("a"),wmr=o("TFViTMAEModel"),Amr=o(" (ViTMAE model)"),ymr=l(),N7=a("li"),Z1e=a("strong"),Lmr=o("wav2vec2"),xmr=o(" \u2014 "),VW=a("a"),$mr=o("TFWav2Vec2Model"),kmr=o(" (Wav2Vec2 model)"),Smr=l(),j7=a("li"),ebe=a("strong"),Rmr=o("xlm"),Pmr=o(" \u2014 "),XW=a("a"),Bmr=o("TFXLMModel"),Imr=o(" (XLM model)"),qmr=l(),D7=a("li"),obe=a("strong"),Nmr=o("xlm-roberta"),jmr=o(" \u2014 "),zW=a("a"),Dmr=o("TFXLMRobertaModel"),Gmr=o(" (XLM-RoBERTa model)"),Omr=l(),G7=a("li"),rbe=a("strong"),Vmr=o("xlnet"),Xmr=o(" \u2014 "),WW=a("a"),zmr=o("TFXLNetModel"),Wmr=o(" (XLNet model)"),Qmr=l(),F(O7.$$.fragment),VNe=l(),Xd=a("h2"),V7=a("a"),tbe=a("span"),F(dL.$$.fragment),Hmr=l(),abe=a("span"),Umr=o("TFAutoModelForPreTraining"),XNe=l(),Ko=a("div"),F(cL.$$.fragment),Jmr=l(),zd=a("p"),Ymr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),QW=a("a"),Kmr=o("from_pretrained()"),Zmr=o(" class method or the "),HW=a("a"),egr=o("from_config()"),ogr=o(` class
method.`),rgr=l(),fL=a("p"),tgr=o("This class cannot be instantiated directly using "),nbe=a("code"),agr=o("__init__()"),ngr=o(" (throws an error)."),sgr=l(),Lt=a("div"),F(mL.$$.fragment),lgr=l(),sbe=a("p"),igr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dgr=l(),Wd=a("p"),cgr=o(`Note:
Loading a model from its configuration file does `),lbe=a("strong"),fgr=o("not"),mgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),ggr=o("from_pretrained()"),hgr=o(" to load the model weights."),pgr=l(),F(X7.$$.fragment),ugr=l(),Ar=a("div"),F(gL.$$.fragment),_gr=l(),ibe=a("p"),bgr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vgr=l(),Za=a("p"),Fgr=o("The model class to instantiate is selected based on the "),dbe=a("code"),Tgr=o("model_type"),Mgr=o(` property of the config object (either
passed as an argument or loaded from `),cbe=a("code"),Egr=o("pretrained_model_name_or_path"),Cgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=a("code"),wgr=o("pretrained_model_name_or_path"),Agr=o(":"),ygr=l(),se=a("ul"),z7=a("li"),mbe=a("strong"),Lgr=o("albert"),xgr=o(" \u2014 "),JW=a("a"),$gr=o("TFAlbertForPreTraining"),kgr=o(" (ALBERT model)"),Sgr=l(),W7=a("li"),gbe=a("strong"),Rgr=o("bart"),Pgr=o(" \u2014 "),YW=a("a"),Bgr=o("TFBartForConditionalGeneration"),Igr=o(" (BART model)"),qgr=l(),Q7=a("li"),hbe=a("strong"),Ngr=o("bert"),jgr=o(" \u2014 "),KW=a("a"),Dgr=o("TFBertForPreTraining"),Ggr=o(" (BERT model)"),Ogr=l(),H7=a("li"),pbe=a("strong"),Vgr=o("camembert"),Xgr=o(" \u2014 "),ZW=a("a"),zgr=o("TFCamembertForMaskedLM"),Wgr=o(" (CamemBERT model)"),Qgr=l(),U7=a("li"),ube=a("strong"),Hgr=o("ctrl"),Ugr=o(" \u2014 "),eQ=a("a"),Jgr=o("TFCTRLLMHeadModel"),Ygr=o(" (CTRL model)"),Kgr=l(),J7=a("li"),_be=a("strong"),Zgr=o("distilbert"),ehr=o(" \u2014 "),oQ=a("a"),ohr=o("TFDistilBertForMaskedLM"),rhr=o(" (DistilBERT model)"),thr=l(),Y7=a("li"),bbe=a("strong"),ahr=o("electra"),nhr=o(" \u2014 "),rQ=a("a"),shr=o("TFElectraForPreTraining"),lhr=o(" (ELECTRA model)"),ihr=l(),K7=a("li"),vbe=a("strong"),dhr=o("flaubert"),chr=o(" \u2014 "),tQ=a("a"),fhr=o("TFFlaubertWithLMHeadModel"),mhr=o(" (FlauBERT model)"),ghr=l(),Z7=a("li"),Fbe=a("strong"),hhr=o("funnel"),phr=o(" \u2014 "),aQ=a("a"),uhr=o("TFFunnelForPreTraining"),_hr=o(" (Funnel Transformer model)"),bhr=l(),e9=a("li"),Tbe=a("strong"),vhr=o("gpt2"),Fhr=o(" \u2014 "),nQ=a("a"),Thr=o("TFGPT2LMHeadModel"),Mhr=o(" (OpenAI GPT-2 model)"),Ehr=l(),o9=a("li"),Mbe=a("strong"),Chr=o("layoutlm"),whr=o(" \u2014 "),sQ=a("a"),Ahr=o("TFLayoutLMForMaskedLM"),yhr=o(" (LayoutLM model)"),Lhr=l(),r9=a("li"),Ebe=a("strong"),xhr=o("lxmert"),$hr=o(" \u2014 "),lQ=a("a"),khr=o("TFLxmertForPreTraining"),Shr=o(" (LXMERT model)"),Rhr=l(),t9=a("li"),Cbe=a("strong"),Phr=o("mobilebert"),Bhr=o(" \u2014 "),iQ=a("a"),Ihr=o("TFMobileBertForPreTraining"),qhr=o(" (MobileBERT model)"),Nhr=l(),a9=a("li"),wbe=a("strong"),jhr=o("mpnet"),Dhr=o(" \u2014 "),dQ=a("a"),Ghr=o("TFMPNetForMaskedLM"),Ohr=o(" (MPNet model)"),Vhr=l(),n9=a("li"),Abe=a("strong"),Xhr=o("openai-gpt"),zhr=o(" \u2014 "),cQ=a("a"),Whr=o("TFOpenAIGPTLMHeadModel"),Qhr=o(" (OpenAI GPT model)"),Hhr=l(),s9=a("li"),ybe=a("strong"),Uhr=o("roberta"),Jhr=o(" \u2014 "),fQ=a("a"),Yhr=o("TFRobertaForMaskedLM"),Khr=o(" (RoBERTa model)"),Zhr=l(),l9=a("li"),Lbe=a("strong"),epr=o("t5"),opr=o(" \u2014 "),mQ=a("a"),rpr=o("TFT5ForConditionalGeneration"),tpr=o(" (T5 model)"),apr=l(),i9=a("li"),xbe=a("strong"),npr=o("tapas"),spr=o(" \u2014 "),gQ=a("a"),lpr=o("TFTapasForMaskedLM"),ipr=o(" (TAPAS model)"),dpr=l(),d9=a("li"),$be=a("strong"),cpr=o("transfo-xl"),fpr=o(" \u2014 "),hQ=a("a"),mpr=o("TFTransfoXLLMHeadModel"),gpr=o(" (Transformer-XL model)"),hpr=l(),c9=a("li"),kbe=a("strong"),ppr=o("vit_mae"),upr=o(" \u2014 "),pQ=a("a"),_pr=o("TFViTMAEForPreTraining"),bpr=o(" (ViTMAE model)"),vpr=l(),f9=a("li"),Sbe=a("strong"),Fpr=o("xlm"),Tpr=o(" \u2014 "),uQ=a("a"),Mpr=o("TFXLMWithLMHeadModel"),Epr=o(" (XLM model)"),Cpr=l(),m9=a("li"),Rbe=a("strong"),wpr=o("xlm-roberta"),Apr=o(" \u2014 "),_Q=a("a"),ypr=o("TFXLMRobertaForMaskedLM"),Lpr=o(" (XLM-RoBERTa model)"),xpr=l(),g9=a("li"),Pbe=a("strong"),$pr=o("xlnet"),kpr=o(" \u2014 "),bQ=a("a"),Spr=o("TFXLNetLMHeadModel"),Rpr=o(" (XLNet model)"),Ppr=l(),F(h9.$$.fragment),zNe=l(),Qd=a("h2"),p9=a("a"),Bbe=a("span"),F(hL.$$.fragment),Bpr=l(),Ibe=a("span"),Ipr=o("TFAutoModelForCausalLM"),WNe=l(),Zo=a("div"),F(pL.$$.fragment),qpr=l(),Hd=a("p"),Npr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vQ=a("a"),jpr=o("from_pretrained()"),Dpr=o(" class method or the "),FQ=a("a"),Gpr=o("from_config()"),Opr=o(` class
method.`),Vpr=l(),uL=a("p"),Xpr=o("This class cannot be instantiated directly using "),qbe=a("code"),zpr=o("__init__()"),Wpr=o(" (throws an error)."),Qpr=l(),xt=a("div"),F(_L.$$.fragment),Hpr=l(),Nbe=a("p"),Upr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Jpr=l(),Ud=a("p"),Ypr=o(`Note:
Loading a model from its configuration file does `),jbe=a("strong"),Kpr=o("not"),Zpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),eur=o("from_pretrained()"),our=o(" to load the model weights."),rur=l(),F(u9.$$.fragment),tur=l(),yr=a("div"),F(bL.$$.fragment),aur=l(),Dbe=a("p"),nur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sur=l(),en=a("p"),lur=o("The model class to instantiate is selected based on the "),Gbe=a("code"),iur=o("model_type"),dur=o(` property of the config object (either
passed as an argument or loaded from `),Obe=a("code"),cur=o("pretrained_model_name_or_path"),fur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=a("code"),mur=o("pretrained_model_name_or_path"),gur=o(":"),hur=l(),Me=a("ul"),_9=a("li"),Xbe=a("strong"),pur=o("bert"),uur=o(" \u2014 "),MQ=a("a"),_ur=o("TFBertLMHeadModel"),bur=o(" (BERT model)"),vur=l(),b9=a("li"),zbe=a("strong"),Fur=o("camembert"),Tur=o(" \u2014 "),EQ=a("a"),Mur=o("TFCamembertForCausalLM"),Eur=o(" (CamemBERT model)"),Cur=l(),v9=a("li"),Wbe=a("strong"),wur=o("ctrl"),Aur=o(" \u2014 "),CQ=a("a"),yur=o("TFCTRLLMHeadModel"),Lur=o(" (CTRL model)"),xur=l(),F9=a("li"),Qbe=a("strong"),$ur=o("gpt2"),kur=o(" \u2014 "),wQ=a("a"),Sur=o("TFGPT2LMHeadModel"),Rur=o(" (OpenAI GPT-2 model)"),Pur=l(),T9=a("li"),Hbe=a("strong"),Bur=o("gptj"),Iur=o(" \u2014 "),AQ=a("a"),qur=o("TFGPTJForCausalLM"),Nur=o(" (GPT-J model)"),jur=l(),M9=a("li"),Ube=a("strong"),Dur=o("openai-gpt"),Gur=o(" \u2014 "),yQ=a("a"),Our=o("TFOpenAIGPTLMHeadModel"),Vur=o(" (OpenAI GPT model)"),Xur=l(),E9=a("li"),Jbe=a("strong"),zur=o("rembert"),Wur=o(" \u2014 "),LQ=a("a"),Qur=o("TFRemBertForCausalLM"),Hur=o(" (RemBERT model)"),Uur=l(),C9=a("li"),Ybe=a("strong"),Jur=o("roberta"),Yur=o(" \u2014 "),xQ=a("a"),Kur=o("TFRobertaForCausalLM"),Zur=o(" (RoBERTa model)"),e_r=l(),w9=a("li"),Kbe=a("strong"),o_r=o("roformer"),r_r=o(" \u2014 "),$Q=a("a"),t_r=o("TFRoFormerForCausalLM"),a_r=o(" (RoFormer model)"),n_r=l(),A9=a("li"),Zbe=a("strong"),s_r=o("transfo-xl"),l_r=o(" \u2014 "),kQ=a("a"),i_r=o("TFTransfoXLLMHeadModel"),d_r=o(" (Transformer-XL model)"),c_r=l(),y9=a("li"),e2e=a("strong"),f_r=o("xlm"),m_r=o(" \u2014 "),SQ=a("a"),g_r=o("TFXLMWithLMHeadModel"),h_r=o(" (XLM model)"),p_r=l(),L9=a("li"),o2e=a("strong"),u_r=o("xlnet"),__r=o(" \u2014 "),RQ=a("a"),b_r=o("TFXLNetLMHeadModel"),v_r=o(" (XLNet model)"),F_r=l(),F(x9.$$.fragment),QNe=l(),Jd=a("h2"),$9=a("a"),r2e=a("span"),F(vL.$$.fragment),T_r=l(),t2e=a("span"),M_r=o("TFAutoModelForImageClassification"),HNe=l(),er=a("div"),F(FL.$$.fragment),E_r=l(),Yd=a("p"),C_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PQ=a("a"),w_r=o("from_pretrained()"),A_r=o(" class method or the "),BQ=a("a"),y_r=o("from_config()"),L_r=o(` class
method.`),x_r=l(),TL=a("p"),$_r=o("This class cannot be instantiated directly using "),a2e=a("code"),k_r=o("__init__()"),S_r=o(" (throws an error)."),R_r=l(),$t=a("div"),F(ML.$$.fragment),P_r=l(),n2e=a("p"),B_r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),I_r=l(),Kd=a("p"),q_r=o(`Note:
Loading a model from its configuration file does `),s2e=a("strong"),N_r=o("not"),j_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),D_r=o("from_pretrained()"),G_r=o(" to load the model weights."),O_r=l(),F(k9.$$.fragment),V_r=l(),Lr=a("div"),F(EL.$$.fragment),X_r=l(),l2e=a("p"),z_r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),W_r=l(),on=a("p"),Q_r=o("The model class to instantiate is selected based on the "),i2e=a("code"),H_r=o("model_type"),U_r=o(` property of the config object (either
passed as an argument or loaded from `),d2e=a("code"),J_r=o("pretrained_model_name_or_path"),Y_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=a("code"),K_r=o("pretrained_model_name_or_path"),Z_r=o(":"),e3r=l(),rn=a("ul"),S9=a("li"),f2e=a("strong"),o3r=o("convnext"),r3r=o(" \u2014 "),qQ=a("a"),t3r=o("TFConvNextForImageClassification"),a3r=o(" (ConvNext model)"),n3r=l(),R9=a("li"),m2e=a("strong"),s3r=o("data2vec-vision"),l3r=o(" \u2014 "),NQ=a("a"),i3r=o("TFData2VecVisionForImageClassification"),d3r=o(" (Data2VecVision model)"),c3r=l(),P9=a("li"),g2e=a("strong"),f3r=o("swin"),m3r=o(" \u2014 "),jQ=a("a"),g3r=o("TFSwinForImageClassification"),h3r=o(" (Swin model)"),p3r=l(),B9=a("li"),h2e=a("strong"),u3r=o("vit"),_3r=o(" \u2014 "),DQ=a("a"),b3r=o("TFViTForImageClassification"),v3r=o(" (ViT model)"),F3r=l(),F(I9.$$.fragment),UNe=l(),Zd=a("h2"),q9=a("a"),p2e=a("span"),F(CL.$$.fragment),T3r=l(),u2e=a("span"),M3r=o("TFAutoModelForMaskedLM"),JNe=l(),or=a("div"),F(wL.$$.fragment),E3r=l(),ec=a("p"),C3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GQ=a("a"),w3r=o("from_pretrained()"),A3r=o(" class method or the "),OQ=a("a"),y3r=o("from_config()"),L3r=o(` class
method.`),x3r=l(),AL=a("p"),$3r=o("This class cannot be instantiated directly using "),_2e=a("code"),k3r=o("__init__()"),S3r=o(" (throws an error)."),R3r=l(),kt=a("div"),F(yL.$$.fragment),P3r=l(),b2e=a("p"),B3r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),I3r=l(),oc=a("p"),q3r=o(`Note:
Loading a model from its configuration file does `),v2e=a("strong"),N3r=o("not"),j3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=a("a"),D3r=o("from_pretrained()"),G3r=o(" to load the model weights."),O3r=l(),F(N9.$$.fragment),V3r=l(),xr=a("div"),F(LL.$$.fragment),X3r=l(),F2e=a("p"),z3r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),W3r=l(),tn=a("p"),Q3r=o("The model class to instantiate is selected based on the "),T2e=a("code"),H3r=o("model_type"),U3r=o(` property of the config object (either
passed as an argument or loaded from `),M2e=a("code"),J3r=o("pretrained_model_name_or_path"),Y3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=a("code"),K3r=o("pretrained_model_name_or_path"),Z3r=o(":"),e1r=l(),ie=a("ul"),j9=a("li"),C2e=a("strong"),o1r=o("albert"),r1r=o(" \u2014 "),XQ=a("a"),t1r=o("TFAlbertForMaskedLM"),a1r=o(" (ALBERT model)"),n1r=l(),D9=a("li"),w2e=a("strong"),s1r=o("bert"),l1r=o(" \u2014 "),zQ=a("a"),i1r=o("TFBertForMaskedLM"),d1r=o(" (BERT model)"),c1r=l(),G9=a("li"),A2e=a("strong"),f1r=o("camembert"),m1r=o(" \u2014 "),WQ=a("a"),g1r=o("TFCamembertForMaskedLM"),h1r=o(" (CamemBERT model)"),p1r=l(),O9=a("li"),y2e=a("strong"),u1r=o("convbert"),_1r=o(" \u2014 "),QQ=a("a"),b1r=o("TFConvBertForMaskedLM"),v1r=o(" (ConvBERT model)"),F1r=l(),V9=a("li"),L2e=a("strong"),T1r=o("deberta"),M1r=o(" \u2014 "),HQ=a("a"),E1r=o("TFDebertaForMaskedLM"),C1r=o(" (DeBERTa model)"),w1r=l(),X9=a("li"),x2e=a("strong"),A1r=o("deberta-v2"),y1r=o(" \u2014 "),UQ=a("a"),L1r=o("TFDebertaV2ForMaskedLM"),x1r=o(" (DeBERTa-v2 model)"),$1r=l(),z9=a("li"),$2e=a("strong"),k1r=o("distilbert"),S1r=o(" \u2014 "),JQ=a("a"),R1r=o("TFDistilBertForMaskedLM"),P1r=o(" (DistilBERT model)"),B1r=l(),W9=a("li"),k2e=a("strong"),I1r=o("electra"),q1r=o(" \u2014 "),YQ=a("a"),N1r=o("TFElectraForMaskedLM"),j1r=o(" (ELECTRA model)"),D1r=l(),Q9=a("li"),S2e=a("strong"),G1r=o("flaubert"),O1r=o(" \u2014 "),KQ=a("a"),V1r=o("TFFlaubertWithLMHeadModel"),X1r=o(" (FlauBERT model)"),z1r=l(),H9=a("li"),R2e=a("strong"),W1r=o("funnel"),Q1r=o(" \u2014 "),ZQ=a("a"),H1r=o("TFFunnelForMaskedLM"),U1r=o(" (Funnel Transformer model)"),J1r=l(),U9=a("li"),P2e=a("strong"),Y1r=o("layoutlm"),K1r=o(" \u2014 "),eH=a("a"),Z1r=o("TFLayoutLMForMaskedLM"),ebr=o(" (LayoutLM model)"),obr=l(),J9=a("li"),B2e=a("strong"),rbr=o("longformer"),tbr=o(" \u2014 "),oH=a("a"),abr=o("TFLongformerForMaskedLM"),nbr=o(" (Longformer model)"),sbr=l(),Y9=a("li"),I2e=a("strong"),lbr=o("mobilebert"),ibr=o(" \u2014 "),rH=a("a"),dbr=o("TFMobileBertForMaskedLM"),cbr=o(" (MobileBERT model)"),fbr=l(),K9=a("li"),q2e=a("strong"),mbr=o("mpnet"),gbr=o(" \u2014 "),tH=a("a"),hbr=o("TFMPNetForMaskedLM"),pbr=o(" (MPNet model)"),ubr=l(),Z9=a("li"),N2e=a("strong"),_br=o("rembert"),bbr=o(" \u2014 "),aH=a("a"),vbr=o("TFRemBertForMaskedLM"),Fbr=o(" (RemBERT model)"),Tbr=l(),eM=a("li"),j2e=a("strong"),Mbr=o("roberta"),Ebr=o(" \u2014 "),nH=a("a"),Cbr=o("TFRobertaForMaskedLM"),wbr=o(" (RoBERTa model)"),Abr=l(),oM=a("li"),D2e=a("strong"),ybr=o("roformer"),Lbr=o(" \u2014 "),sH=a("a"),xbr=o("TFRoFormerForMaskedLM"),$br=o(" (RoFormer model)"),kbr=l(),rM=a("li"),G2e=a("strong"),Sbr=o("tapas"),Rbr=o(" \u2014 "),lH=a("a"),Pbr=o("TFTapasForMaskedLM"),Bbr=o(" (TAPAS model)"),Ibr=l(),tM=a("li"),O2e=a("strong"),qbr=o("xlm"),Nbr=o(" \u2014 "),iH=a("a"),jbr=o("TFXLMWithLMHeadModel"),Dbr=o(" (XLM model)"),Gbr=l(),aM=a("li"),V2e=a("strong"),Obr=o("xlm-roberta"),Vbr=o(" \u2014 "),dH=a("a"),Xbr=o("TFXLMRobertaForMaskedLM"),zbr=o(" (XLM-RoBERTa model)"),Wbr=l(),F(nM.$$.fragment),YNe=l(),rc=a("h2"),sM=a("a"),X2e=a("span"),F(xL.$$.fragment),Qbr=l(),z2e=a("span"),Hbr=o("TFAutoModelForSeq2SeqLM"),KNe=l(),rr=a("div"),F($L.$$.fragment),Ubr=l(),tc=a("p"),Jbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cH=a("a"),Ybr=o("from_pretrained()"),Kbr=o(" class method or the "),fH=a("a"),Zbr=o("from_config()"),e2r=o(` class
method.`),o2r=l(),kL=a("p"),r2r=o("This class cannot be instantiated directly using "),W2e=a("code"),t2r=o("__init__()"),a2r=o(" (throws an error)."),n2r=l(),St=a("div"),F(SL.$$.fragment),s2r=l(),Q2e=a("p"),l2r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),i2r=l(),ac=a("p"),d2r=o(`Note:
Loading a model from its configuration file does `),H2e=a("strong"),c2r=o("not"),f2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),m2r=o("from_pretrained()"),g2r=o(" to load the model weights."),h2r=l(),F(lM.$$.fragment),p2r=l(),$r=a("div"),F(RL.$$.fragment),u2r=l(),U2e=a("p"),_2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),b2r=l(),an=a("p"),v2r=o("The model class to instantiate is selected based on the "),J2e=a("code"),F2r=o("model_type"),T2r=o(` property of the config object (either
passed as an argument or loaded from `),Y2e=a("code"),M2r=o("pretrained_model_name_or_path"),E2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=a("code"),C2r=o("pretrained_model_name_or_path"),w2r=o(":"),A2r=l(),ye=a("ul"),iM=a("li"),Z2e=a("strong"),y2r=o("bart"),L2r=o(" \u2014 "),gH=a("a"),x2r=o("TFBartForConditionalGeneration"),$2r=o(" (BART model)"),k2r=l(),dM=a("li"),eve=a("strong"),S2r=o("blenderbot"),R2r=o(" \u2014 "),hH=a("a"),P2r=o("TFBlenderbotForConditionalGeneration"),B2r=o(" (Blenderbot model)"),I2r=l(),cM=a("li"),ove=a("strong"),q2r=o("blenderbot-small"),N2r=o(" \u2014 "),pH=a("a"),j2r=o("TFBlenderbotSmallForConditionalGeneration"),D2r=o(" (BlenderbotSmall model)"),G2r=l(),fM=a("li"),rve=a("strong"),O2r=o("encoder-decoder"),V2r=o(" \u2014 "),uH=a("a"),X2r=o("TFEncoderDecoderModel"),z2r=o(" (Encoder decoder model)"),W2r=l(),mM=a("li"),tve=a("strong"),Q2r=o("led"),H2r=o(" \u2014 "),_H=a("a"),U2r=o("TFLEDForConditionalGeneration"),J2r=o(" (LED model)"),Y2r=l(),gM=a("li"),ave=a("strong"),K2r=o("marian"),Z2r=o(" \u2014 "),bH=a("a"),evr=o("TFMarianMTModel"),ovr=o(" (Marian model)"),rvr=l(),hM=a("li"),nve=a("strong"),tvr=o("mbart"),avr=o(" \u2014 "),vH=a("a"),nvr=o("TFMBartForConditionalGeneration"),svr=o(" (mBART model)"),lvr=l(),pM=a("li"),sve=a("strong"),ivr=o("mt5"),dvr=o(" \u2014 "),FH=a("a"),cvr=o("TFMT5ForConditionalGeneration"),fvr=o(" (mT5 model)"),mvr=l(),uM=a("li"),lve=a("strong"),gvr=o("pegasus"),hvr=o(" \u2014 "),TH=a("a"),pvr=o("TFPegasusForConditionalGeneration"),uvr=o(" (Pegasus model)"),_vr=l(),_M=a("li"),ive=a("strong"),bvr=o("t5"),vvr=o(" \u2014 "),MH=a("a"),Fvr=o("TFT5ForConditionalGeneration"),Tvr=o(" (T5 model)"),Mvr=l(),F(bM.$$.fragment),ZNe=l(),nc=a("h2"),vM=a("a"),dve=a("span"),F(PL.$$.fragment),Evr=l(),cve=a("span"),Cvr=o("TFAutoModelForSequenceClassification"),eje=l(),tr=a("div"),F(BL.$$.fragment),wvr=l(),sc=a("p"),Avr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EH=a("a"),yvr=o("from_pretrained()"),Lvr=o(" class method or the "),CH=a("a"),xvr=o("from_config()"),$vr=o(` class
method.`),kvr=l(),IL=a("p"),Svr=o("This class cannot be instantiated directly using "),fve=a("code"),Rvr=o("__init__()"),Pvr=o(" (throws an error)."),Bvr=l(),Rt=a("div"),F(qL.$$.fragment),Ivr=l(),mve=a("p"),qvr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Nvr=l(),lc=a("p"),jvr=o(`Note:
Loading a model from its configuration file does `),gve=a("strong"),Dvr=o("not"),Gvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),Ovr=o("from_pretrained()"),Vvr=o(" to load the model weights."),Xvr=l(),F(FM.$$.fragment),zvr=l(),kr=a("div"),F(NL.$$.fragment),Wvr=l(),hve=a("p"),Qvr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Hvr=l(),nn=a("p"),Uvr=o("The model class to instantiate is selected based on the "),pve=a("code"),Jvr=o("model_type"),Yvr=o(` property of the config object (either
passed as an argument or loaded from `),uve=a("code"),Kvr=o("pretrained_model_name_or_path"),Zvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=a("code"),eFr=o("pretrained_model_name_or_path"),oFr=o(":"),rFr=l(),oe=a("ul"),TM=a("li"),bve=a("strong"),tFr=o("albert"),aFr=o(" \u2014 "),AH=a("a"),nFr=o("TFAlbertForSequenceClassification"),sFr=o(" (ALBERT model)"),lFr=l(),MM=a("li"),vve=a("strong"),iFr=o("bert"),dFr=o(" \u2014 "),yH=a("a"),cFr=o("TFBertForSequenceClassification"),fFr=o(" (BERT model)"),mFr=l(),EM=a("li"),Fve=a("strong"),gFr=o("camembert"),hFr=o(" \u2014 "),LH=a("a"),pFr=o("TFCamembertForSequenceClassification"),uFr=o(" (CamemBERT model)"),_Fr=l(),CM=a("li"),Tve=a("strong"),bFr=o("convbert"),vFr=o(" \u2014 "),xH=a("a"),FFr=o("TFConvBertForSequenceClassification"),TFr=o(" (ConvBERT model)"),MFr=l(),wM=a("li"),Mve=a("strong"),EFr=o("ctrl"),CFr=o(" \u2014 "),$H=a("a"),wFr=o("TFCTRLForSequenceClassification"),AFr=o(" (CTRL model)"),yFr=l(),AM=a("li"),Eve=a("strong"),LFr=o("deberta"),xFr=o(" \u2014 "),kH=a("a"),$Fr=o("TFDebertaForSequenceClassification"),kFr=o(" (DeBERTa model)"),SFr=l(),yM=a("li"),Cve=a("strong"),RFr=o("deberta-v2"),PFr=o(" \u2014 "),SH=a("a"),BFr=o("TFDebertaV2ForSequenceClassification"),IFr=o(" (DeBERTa-v2 model)"),qFr=l(),LM=a("li"),wve=a("strong"),NFr=o("distilbert"),jFr=o(" \u2014 "),RH=a("a"),DFr=o("TFDistilBertForSequenceClassification"),GFr=o(" (DistilBERT model)"),OFr=l(),xM=a("li"),Ave=a("strong"),VFr=o("electra"),XFr=o(" \u2014 "),PH=a("a"),zFr=o("TFElectraForSequenceClassification"),WFr=o(" (ELECTRA model)"),QFr=l(),$M=a("li"),yve=a("strong"),HFr=o("flaubert"),UFr=o(" \u2014 "),BH=a("a"),JFr=o("TFFlaubertForSequenceClassification"),YFr=o(" (FlauBERT model)"),KFr=l(),kM=a("li"),Lve=a("strong"),ZFr=o("funnel"),eTr=o(" \u2014 "),IH=a("a"),oTr=o("TFFunnelForSequenceClassification"),rTr=o(" (Funnel Transformer model)"),tTr=l(),SM=a("li"),xve=a("strong"),aTr=o("gpt2"),nTr=o(" \u2014 "),qH=a("a"),sTr=o("TFGPT2ForSequenceClassification"),lTr=o(" (OpenAI GPT-2 model)"),iTr=l(),RM=a("li"),$ve=a("strong"),dTr=o("gptj"),cTr=o(" \u2014 "),NH=a("a"),fTr=o("TFGPTJForSequenceClassification"),mTr=o(" (GPT-J model)"),gTr=l(),PM=a("li"),kve=a("strong"),hTr=o("layoutlm"),pTr=o(" \u2014 "),jH=a("a"),uTr=o("TFLayoutLMForSequenceClassification"),_Tr=o(" (LayoutLM model)"),bTr=l(),BM=a("li"),Sve=a("strong"),vTr=o("longformer"),FTr=o(" \u2014 "),DH=a("a"),TTr=o("TFLongformerForSequenceClassification"),MTr=o(" (Longformer model)"),ETr=l(),IM=a("li"),Rve=a("strong"),CTr=o("mobilebert"),wTr=o(" \u2014 "),GH=a("a"),ATr=o("TFMobileBertForSequenceClassification"),yTr=o(" (MobileBERT model)"),LTr=l(),qM=a("li"),Pve=a("strong"),xTr=o("mpnet"),$Tr=o(" \u2014 "),OH=a("a"),kTr=o("TFMPNetForSequenceClassification"),STr=o(" (MPNet model)"),RTr=l(),NM=a("li"),Bve=a("strong"),PTr=o("openai-gpt"),BTr=o(" \u2014 "),VH=a("a"),ITr=o("TFOpenAIGPTForSequenceClassification"),qTr=o(" (OpenAI GPT model)"),NTr=l(),jM=a("li"),Ive=a("strong"),jTr=o("rembert"),DTr=o(" \u2014 "),XH=a("a"),GTr=o("TFRemBertForSequenceClassification"),OTr=o(" (RemBERT model)"),VTr=l(),DM=a("li"),qve=a("strong"),XTr=o("roberta"),zTr=o(" \u2014 "),zH=a("a"),WTr=o("TFRobertaForSequenceClassification"),QTr=o(" (RoBERTa model)"),HTr=l(),GM=a("li"),Nve=a("strong"),UTr=o("roformer"),JTr=o(" \u2014 "),WH=a("a"),YTr=o("TFRoFormerForSequenceClassification"),KTr=o(" (RoFormer model)"),ZTr=l(),OM=a("li"),jve=a("strong"),e7r=o("tapas"),o7r=o(" \u2014 "),QH=a("a"),r7r=o("TFTapasForSequenceClassification"),t7r=o(" (TAPAS model)"),a7r=l(),VM=a("li"),Dve=a("strong"),n7r=o("transfo-xl"),s7r=o(" \u2014 "),HH=a("a"),l7r=o("TFTransfoXLForSequenceClassification"),i7r=o(" (Transformer-XL model)"),d7r=l(),XM=a("li"),Gve=a("strong"),c7r=o("xlm"),f7r=o(" \u2014 "),UH=a("a"),m7r=o("TFXLMForSequenceClassification"),g7r=o(" (XLM model)"),h7r=l(),zM=a("li"),Ove=a("strong"),p7r=o("xlm-roberta"),u7r=o(" \u2014 "),JH=a("a"),_7r=o("TFXLMRobertaForSequenceClassification"),b7r=o(" (XLM-RoBERTa model)"),v7r=l(),WM=a("li"),Vve=a("strong"),F7r=o("xlnet"),T7r=o(" \u2014 "),YH=a("a"),M7r=o("TFXLNetForSequenceClassification"),E7r=o(" (XLNet model)"),C7r=l(),F(QM.$$.fragment),oje=l(),ic=a("h2"),HM=a("a"),Xve=a("span"),F(jL.$$.fragment),w7r=l(),zve=a("span"),A7r=o("TFAutoModelForMultipleChoice"),rje=l(),ar=a("div"),F(DL.$$.fragment),y7r=l(),dc=a("p"),L7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KH=a("a"),x7r=o("from_pretrained()"),$7r=o(" class method or the "),ZH=a("a"),k7r=o("from_config()"),S7r=o(` class
method.`),R7r=l(),GL=a("p"),P7r=o("This class cannot be instantiated directly using "),Wve=a("code"),B7r=o("__init__()"),I7r=o(" (throws an error)."),q7r=l(),Pt=a("div"),F(OL.$$.fragment),N7r=l(),Qve=a("p"),j7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),D7r=l(),cc=a("p"),G7r=o(`Note:
Loading a model from its configuration file does `),Hve=a("strong"),O7r=o("not"),V7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=a("a"),X7r=o("from_pretrained()"),z7r=o(" to load the model weights."),W7r=l(),F(UM.$$.fragment),Q7r=l(),Sr=a("div"),F(VL.$$.fragment),H7r=l(),Uve=a("p"),U7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),J7r=l(),sn=a("p"),Y7r=o("The model class to instantiate is selected based on the "),Jve=a("code"),K7r=o("model_type"),Z7r=o(` property of the config object (either
passed as an argument or loaded from `),Yve=a("code"),e9r=o("pretrained_model_name_or_path"),o9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=a("code"),r9r=o("pretrained_model_name_or_path"),t9r=o(":"),a9r=l(),pe=a("ul"),JM=a("li"),Zve=a("strong"),n9r=o("albert"),s9r=o(" \u2014 "),oU=a("a"),l9r=o("TFAlbertForMultipleChoice"),i9r=o(" (ALBERT model)"),d9r=l(),YM=a("li"),eFe=a("strong"),c9r=o("bert"),f9r=o(" \u2014 "),rU=a("a"),m9r=o("TFBertForMultipleChoice"),g9r=o(" (BERT model)"),h9r=l(),KM=a("li"),oFe=a("strong"),p9r=o("camembert"),u9r=o(" \u2014 "),tU=a("a"),_9r=o("TFCamembertForMultipleChoice"),b9r=o(" (CamemBERT model)"),v9r=l(),ZM=a("li"),rFe=a("strong"),F9r=o("convbert"),T9r=o(" \u2014 "),aU=a("a"),M9r=o("TFConvBertForMultipleChoice"),E9r=o(" (ConvBERT model)"),C9r=l(),e4=a("li"),tFe=a("strong"),w9r=o("distilbert"),A9r=o(" \u2014 "),nU=a("a"),y9r=o("TFDistilBertForMultipleChoice"),L9r=o(" (DistilBERT model)"),x9r=l(),o4=a("li"),aFe=a("strong"),$9r=o("electra"),k9r=o(" \u2014 "),sU=a("a"),S9r=o("TFElectraForMultipleChoice"),R9r=o(" (ELECTRA model)"),P9r=l(),r4=a("li"),nFe=a("strong"),B9r=o("flaubert"),I9r=o(" \u2014 "),lU=a("a"),q9r=o("TFFlaubertForMultipleChoice"),N9r=o(" (FlauBERT model)"),j9r=l(),t4=a("li"),sFe=a("strong"),D9r=o("funnel"),G9r=o(" \u2014 "),iU=a("a"),O9r=o("TFFunnelForMultipleChoice"),V9r=o(" (Funnel Transformer model)"),X9r=l(),a4=a("li"),lFe=a("strong"),z9r=o("longformer"),W9r=o(" \u2014 "),dU=a("a"),Q9r=o("TFLongformerForMultipleChoice"),H9r=o(" (Longformer model)"),U9r=l(),n4=a("li"),iFe=a("strong"),J9r=o("mobilebert"),Y9r=o(" \u2014 "),cU=a("a"),K9r=o("TFMobileBertForMultipleChoice"),Z9r=o(" (MobileBERT model)"),eMr=l(),s4=a("li"),dFe=a("strong"),oMr=o("mpnet"),rMr=o(" \u2014 "),fU=a("a"),tMr=o("TFMPNetForMultipleChoice"),aMr=o(" (MPNet model)"),nMr=l(),l4=a("li"),cFe=a("strong"),sMr=o("rembert"),lMr=o(" \u2014 "),mU=a("a"),iMr=o("TFRemBertForMultipleChoice"),dMr=o(" (RemBERT model)"),cMr=l(),i4=a("li"),fFe=a("strong"),fMr=o("roberta"),mMr=o(" \u2014 "),gU=a("a"),gMr=o("TFRobertaForMultipleChoice"),hMr=o(" (RoBERTa model)"),pMr=l(),d4=a("li"),mFe=a("strong"),uMr=o("roformer"),_Mr=o(" \u2014 "),hU=a("a"),bMr=o("TFRoFormerForMultipleChoice"),vMr=o(" (RoFormer model)"),FMr=l(),c4=a("li"),gFe=a("strong"),TMr=o("xlm"),MMr=o(" \u2014 "),pU=a("a"),EMr=o("TFXLMForMultipleChoice"),CMr=o(" (XLM model)"),wMr=l(),f4=a("li"),hFe=a("strong"),AMr=o("xlm-roberta"),yMr=o(" \u2014 "),uU=a("a"),LMr=o("TFXLMRobertaForMultipleChoice"),xMr=o(" (XLM-RoBERTa model)"),$Mr=l(),m4=a("li"),pFe=a("strong"),kMr=o("xlnet"),SMr=o(" \u2014 "),_U=a("a"),RMr=o("TFXLNetForMultipleChoice"),PMr=o(" (XLNet model)"),BMr=l(),F(g4.$$.fragment),tje=l(),fc=a("h2"),h4=a("a"),uFe=a("span"),F(XL.$$.fragment),IMr=l(),_Fe=a("span"),qMr=o("TFAutoModelForNextSentencePrediction"),aje=l(),nr=a("div"),F(zL.$$.fragment),NMr=l(),mc=a("p"),jMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bU=a("a"),DMr=o("from_pretrained()"),GMr=o(" class method or the "),vU=a("a"),OMr=o("from_config()"),VMr=o(` class
method.`),XMr=l(),WL=a("p"),zMr=o("This class cannot be instantiated directly using "),bFe=a("code"),WMr=o("__init__()"),QMr=o(" (throws an error)."),HMr=l(),Bt=a("div"),F(QL.$$.fragment),UMr=l(),vFe=a("p"),JMr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),YMr=l(),gc=a("p"),KMr=o(`Note:
Loading a model from its configuration file does `),FFe=a("strong"),ZMr=o("not"),e4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=a("a"),o4r=o("from_pretrained()"),r4r=o(" to load the model weights."),t4r=l(),F(p4.$$.fragment),a4r=l(),Rr=a("div"),F(HL.$$.fragment),n4r=l(),TFe=a("p"),s4r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),l4r=l(),ln=a("p"),i4r=o("The model class to instantiate is selected based on the "),MFe=a("code"),d4r=o("model_type"),c4r=o(` property of the config object (either
passed as an argument or loaded from `),EFe=a("code"),f4r=o("pretrained_model_name_or_path"),m4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=a("code"),g4r=o("pretrained_model_name_or_path"),h4r=o(":"),p4r=l(),UL=a("ul"),u4=a("li"),wFe=a("strong"),u4r=o("bert"),_4r=o(" \u2014 "),TU=a("a"),b4r=o("TFBertForNextSentencePrediction"),v4r=o(" (BERT model)"),F4r=l(),_4=a("li"),AFe=a("strong"),T4r=o("mobilebert"),M4r=o(" \u2014 "),MU=a("a"),E4r=o("TFMobileBertForNextSentencePrediction"),C4r=o(" (MobileBERT model)"),w4r=l(),F(b4.$$.fragment),nje=l(),hc=a("h2"),v4=a("a"),yFe=a("span"),F(JL.$$.fragment),A4r=l(),LFe=a("span"),y4r=o("TFAutoModelForTableQuestionAnswering"),sje=l(),sr=a("div"),F(YL.$$.fragment),L4r=l(),pc=a("p"),x4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),EU=a("a"),$4r=o("from_pretrained()"),k4r=o(" class method or the "),CU=a("a"),S4r=o("from_config()"),R4r=o(` class
method.`),P4r=l(),KL=a("p"),B4r=o("This class cannot be instantiated directly using "),xFe=a("code"),I4r=o("__init__()"),q4r=o(" (throws an error)."),N4r=l(),It=a("div"),F(ZL.$$.fragment),j4r=l(),$Fe=a("p"),D4r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),G4r=l(),uc=a("p"),O4r=o(`Note:
Loading a model from its configuration file does `),kFe=a("strong"),V4r=o("not"),X4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=a("a"),z4r=o("from_pretrained()"),W4r=o(" to load the model weights."),Q4r=l(),F(F4.$$.fragment),H4r=l(),Pr=a("div"),F(e8.$$.fragment),U4r=l(),SFe=a("p"),J4r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Y4r=l(),dn=a("p"),K4r=o("The model class to instantiate is selected based on the "),RFe=a("code"),Z4r=o("model_type"),eEr=o(` property of the config object (either
passed as an argument or loaded from `),PFe=a("code"),oEr=o("pretrained_model_name_or_path"),rEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),tEr=o("pretrained_model_name_or_path"),aEr=o(":"),nEr=l(),IFe=a("ul"),T4=a("li"),qFe=a("strong"),sEr=o("tapas"),lEr=o(" \u2014 "),AU=a("a"),iEr=o("TFTapasForQuestionAnswering"),dEr=o(" (TAPAS model)"),cEr=l(),F(M4.$$.fragment),lje=l(),_c=a("h2"),E4=a("a"),NFe=a("span"),F(o8.$$.fragment),fEr=l(),jFe=a("span"),mEr=o("TFAutoModelForTokenClassification"),ije=l(),lr=a("div"),F(r8.$$.fragment),gEr=l(),bc=a("p"),hEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yU=a("a"),pEr=o("from_pretrained()"),uEr=o(" class method or the "),LU=a("a"),_Er=o("from_config()"),bEr=o(` class
method.`),vEr=l(),t8=a("p"),FEr=o("This class cannot be instantiated directly using "),DFe=a("code"),TEr=o("__init__()"),MEr=o(" (throws an error)."),EEr=l(),qt=a("div"),F(a8.$$.fragment),CEr=l(),GFe=a("p"),wEr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),AEr=l(),vc=a("p"),yEr=o(`Note:
Loading a model from its configuration file does `),OFe=a("strong"),LEr=o("not"),xEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=a("a"),$Er=o("from_pretrained()"),kEr=o(" to load the model weights."),SEr=l(),F(C4.$$.fragment),REr=l(),Br=a("div"),F(n8.$$.fragment),PEr=l(),VFe=a("p"),BEr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),IEr=l(),cn=a("p"),qEr=o("The model class to instantiate is selected based on the "),XFe=a("code"),NEr=o("model_type"),jEr=o(` property of the config object (either
passed as an argument or loaded from `),zFe=a("code"),DEr=o("pretrained_model_name_or_path"),GEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=a("code"),OEr=o("pretrained_model_name_or_path"),VEr=o(":"),XEr=l(),de=a("ul"),w4=a("li"),QFe=a("strong"),zEr=o("albert"),WEr=o(" \u2014 "),$U=a("a"),QEr=o("TFAlbertForTokenClassification"),HEr=o(" (ALBERT model)"),UEr=l(),A4=a("li"),HFe=a("strong"),JEr=o("bert"),YEr=o(" \u2014 "),kU=a("a"),KEr=o("TFBertForTokenClassification"),ZEr=o(" (BERT model)"),eCr=l(),y4=a("li"),UFe=a("strong"),oCr=o("camembert"),rCr=o(" \u2014 "),SU=a("a"),tCr=o("TFCamembertForTokenClassification"),aCr=o(" (CamemBERT model)"),nCr=l(),L4=a("li"),JFe=a("strong"),sCr=o("convbert"),lCr=o(" \u2014 "),RU=a("a"),iCr=o("TFConvBertForTokenClassification"),dCr=o(" (ConvBERT model)"),cCr=l(),x4=a("li"),YFe=a("strong"),fCr=o("deberta"),mCr=o(" \u2014 "),PU=a("a"),gCr=o("TFDebertaForTokenClassification"),hCr=o(" (DeBERTa model)"),pCr=l(),$4=a("li"),KFe=a("strong"),uCr=o("deberta-v2"),_Cr=o(" \u2014 "),BU=a("a"),bCr=o("TFDebertaV2ForTokenClassification"),vCr=o(" (DeBERTa-v2 model)"),FCr=l(),k4=a("li"),ZFe=a("strong"),TCr=o("distilbert"),MCr=o(" \u2014 "),IU=a("a"),ECr=o("TFDistilBertForTokenClassification"),CCr=o(" (DistilBERT model)"),wCr=l(),S4=a("li"),eTe=a("strong"),ACr=o("electra"),yCr=o(" \u2014 "),qU=a("a"),LCr=o("TFElectraForTokenClassification"),xCr=o(" (ELECTRA model)"),$Cr=l(),R4=a("li"),oTe=a("strong"),kCr=o("flaubert"),SCr=o(" \u2014 "),NU=a("a"),RCr=o("TFFlaubertForTokenClassification"),PCr=o(" (FlauBERT model)"),BCr=l(),P4=a("li"),rTe=a("strong"),ICr=o("funnel"),qCr=o(" \u2014 "),jU=a("a"),NCr=o("TFFunnelForTokenClassification"),jCr=o(" (Funnel Transformer model)"),DCr=l(),B4=a("li"),tTe=a("strong"),GCr=o("layoutlm"),OCr=o(" \u2014 "),DU=a("a"),VCr=o("TFLayoutLMForTokenClassification"),XCr=o(" (LayoutLM model)"),zCr=l(),I4=a("li"),aTe=a("strong"),WCr=o("longformer"),QCr=o(" \u2014 "),GU=a("a"),HCr=o("TFLongformerForTokenClassification"),UCr=o(" (Longformer model)"),JCr=l(),q4=a("li"),nTe=a("strong"),YCr=o("mobilebert"),KCr=o(" \u2014 "),OU=a("a"),ZCr=o("TFMobileBertForTokenClassification"),e5r=o(" (MobileBERT model)"),o5r=l(),N4=a("li"),sTe=a("strong"),r5r=o("mpnet"),t5r=o(" \u2014 "),VU=a("a"),a5r=o("TFMPNetForTokenClassification"),n5r=o(" (MPNet model)"),s5r=l(),j4=a("li"),lTe=a("strong"),l5r=o("rembert"),i5r=o(" \u2014 "),XU=a("a"),d5r=o("TFRemBertForTokenClassification"),c5r=o(" (RemBERT model)"),f5r=l(),D4=a("li"),iTe=a("strong"),m5r=o("roberta"),g5r=o(" \u2014 "),zU=a("a"),h5r=o("TFRobertaForTokenClassification"),p5r=o(" (RoBERTa model)"),u5r=l(),G4=a("li"),dTe=a("strong"),_5r=o("roformer"),b5r=o(" \u2014 "),WU=a("a"),v5r=o("TFRoFormerForTokenClassification"),F5r=o(" (RoFormer model)"),T5r=l(),O4=a("li"),cTe=a("strong"),M5r=o("xlm"),E5r=o(" \u2014 "),QU=a("a"),C5r=o("TFXLMForTokenClassification"),w5r=o(" (XLM model)"),A5r=l(),V4=a("li"),fTe=a("strong"),y5r=o("xlm-roberta"),L5r=o(" \u2014 "),HU=a("a"),x5r=o("TFXLMRobertaForTokenClassification"),$5r=o(" (XLM-RoBERTa model)"),k5r=l(),X4=a("li"),mTe=a("strong"),S5r=o("xlnet"),R5r=o(" \u2014 "),UU=a("a"),P5r=o("TFXLNetForTokenClassification"),B5r=o(" (XLNet model)"),I5r=l(),F(z4.$$.fragment),dje=l(),Fc=a("h2"),W4=a("a"),gTe=a("span"),F(s8.$$.fragment),q5r=l(),hTe=a("span"),N5r=o("TFAutoModelForQuestionAnswering"),cje=l(),ir=a("div"),F(l8.$$.fragment),j5r=l(),Tc=a("p"),D5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JU=a("a"),G5r=o("from_pretrained()"),O5r=o(" class method or the "),YU=a("a"),V5r=o("from_config()"),X5r=o(` class
method.`),z5r=l(),i8=a("p"),W5r=o("This class cannot be instantiated directly using "),pTe=a("code"),Q5r=o("__init__()"),H5r=o(" (throws an error)."),U5r=l(),Nt=a("div"),F(d8.$$.fragment),J5r=l(),uTe=a("p"),Y5r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),K5r=l(),Mc=a("p"),Z5r=o(`Note:
Loading a model from its configuration file does `),_Te=a("strong"),ewr=o("not"),owr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=a("a"),rwr=o("from_pretrained()"),twr=o(" to load the model weights."),awr=l(),F(Q4.$$.fragment),nwr=l(),Ir=a("div"),F(c8.$$.fragment),swr=l(),bTe=a("p"),lwr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iwr=l(),fn=a("p"),dwr=o("The model class to instantiate is selected based on the "),vTe=a("code"),cwr=o("model_type"),fwr=o(` property of the config object (either
passed as an argument or loaded from `),FTe=a("code"),mwr=o("pretrained_model_name_or_path"),gwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=a("code"),hwr=o("pretrained_model_name_or_path"),pwr=o(":"),uwr=l(),ce=a("ul"),H4=a("li"),MTe=a("strong"),_wr=o("albert"),bwr=o(" \u2014 "),ZU=a("a"),vwr=o("TFAlbertForQuestionAnswering"),Fwr=o(" (ALBERT model)"),Twr=l(),U4=a("li"),ETe=a("strong"),Mwr=o("bert"),Ewr=o(" \u2014 "),eJ=a("a"),Cwr=o("TFBertForQuestionAnswering"),wwr=o(" (BERT model)"),Awr=l(),J4=a("li"),CTe=a("strong"),ywr=o("camembert"),Lwr=o(" \u2014 "),oJ=a("a"),xwr=o("TFCamembertForQuestionAnswering"),$wr=o(" (CamemBERT model)"),kwr=l(),Y4=a("li"),wTe=a("strong"),Swr=o("convbert"),Rwr=o(" \u2014 "),rJ=a("a"),Pwr=o("TFConvBertForQuestionAnswering"),Bwr=o(" (ConvBERT model)"),Iwr=l(),K4=a("li"),ATe=a("strong"),qwr=o("deberta"),Nwr=o(" \u2014 "),tJ=a("a"),jwr=o("TFDebertaForQuestionAnswering"),Dwr=o(" (DeBERTa model)"),Gwr=l(),Z4=a("li"),yTe=a("strong"),Owr=o("deberta-v2"),Vwr=o(" \u2014 "),aJ=a("a"),Xwr=o("TFDebertaV2ForQuestionAnswering"),zwr=o(" (DeBERTa-v2 model)"),Wwr=l(),eE=a("li"),LTe=a("strong"),Qwr=o("distilbert"),Hwr=o(" \u2014 "),nJ=a("a"),Uwr=o("TFDistilBertForQuestionAnswering"),Jwr=o(" (DistilBERT model)"),Ywr=l(),oE=a("li"),xTe=a("strong"),Kwr=o("electra"),Zwr=o(" \u2014 "),sJ=a("a"),e0r=o("TFElectraForQuestionAnswering"),o0r=o(" (ELECTRA model)"),r0r=l(),rE=a("li"),$Te=a("strong"),t0r=o("flaubert"),a0r=o(" \u2014 "),lJ=a("a"),n0r=o("TFFlaubertForQuestionAnsweringSimple"),s0r=o(" (FlauBERT model)"),l0r=l(),tE=a("li"),kTe=a("strong"),i0r=o("funnel"),d0r=o(" \u2014 "),iJ=a("a"),c0r=o("TFFunnelForQuestionAnswering"),f0r=o(" (Funnel Transformer model)"),m0r=l(),aE=a("li"),STe=a("strong"),g0r=o("gptj"),h0r=o(" \u2014 "),dJ=a("a"),p0r=o("TFGPTJForQuestionAnswering"),u0r=o(" (GPT-J model)"),_0r=l(),nE=a("li"),RTe=a("strong"),b0r=o("longformer"),v0r=o(" \u2014 "),cJ=a("a"),F0r=o("TFLongformerForQuestionAnswering"),T0r=o(" (Longformer model)"),M0r=l(),sE=a("li"),PTe=a("strong"),E0r=o("mobilebert"),C0r=o(" \u2014 "),fJ=a("a"),w0r=o("TFMobileBertForQuestionAnswering"),A0r=o(" (MobileBERT model)"),y0r=l(),lE=a("li"),BTe=a("strong"),L0r=o("mpnet"),x0r=o(" \u2014 "),mJ=a("a"),$0r=o("TFMPNetForQuestionAnswering"),k0r=o(" (MPNet model)"),S0r=l(),iE=a("li"),ITe=a("strong"),R0r=o("rembert"),P0r=o(" \u2014 "),gJ=a("a"),B0r=o("TFRemBertForQuestionAnswering"),I0r=o(" (RemBERT model)"),q0r=l(),dE=a("li"),qTe=a("strong"),N0r=o("roberta"),j0r=o(" \u2014 "),hJ=a("a"),D0r=o("TFRobertaForQuestionAnswering"),G0r=o(" (RoBERTa model)"),O0r=l(),cE=a("li"),NTe=a("strong"),V0r=o("roformer"),X0r=o(" \u2014 "),pJ=a("a"),z0r=o("TFRoFormerForQuestionAnswering"),W0r=o(" (RoFormer model)"),Q0r=l(),fE=a("li"),jTe=a("strong"),H0r=o("xlm"),U0r=o(" \u2014 "),uJ=a("a"),J0r=o("TFXLMForQuestionAnsweringSimple"),Y0r=o(" (XLM model)"),K0r=l(),mE=a("li"),DTe=a("strong"),Z0r=o("xlm-roberta"),eAr=o(" \u2014 "),_J=a("a"),oAr=o("TFXLMRobertaForQuestionAnswering"),rAr=o(" (XLM-RoBERTa model)"),tAr=l(),gE=a("li"),GTe=a("strong"),aAr=o("xlnet"),nAr=o(" \u2014 "),bJ=a("a"),sAr=o("TFXLNetForQuestionAnsweringSimple"),lAr=o(" (XLNet model)"),iAr=l(),F(hE.$$.fragment),fje=l(),Ec=a("h2"),pE=a("a"),OTe=a("span"),F(f8.$$.fragment),dAr=l(),VTe=a("span"),cAr=o("TFAutoModelForVision2Seq"),mje=l(),dr=a("div"),F(m8.$$.fragment),fAr=l(),Cc=a("p"),mAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vJ=a("a"),gAr=o("from_pretrained()"),hAr=o(" class method or the "),FJ=a("a"),pAr=o("from_config()"),uAr=o(` class
method.`),_Ar=l(),g8=a("p"),bAr=o("This class cannot be instantiated directly using "),XTe=a("code"),vAr=o("__init__()"),FAr=o(" (throws an error)."),TAr=l(),jt=a("div"),F(h8.$$.fragment),MAr=l(),zTe=a("p"),EAr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),CAr=l(),wc=a("p"),wAr=o(`Note:
Loading a model from its configuration file does `),WTe=a("strong"),AAr=o("not"),yAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=a("a"),LAr=o("from_pretrained()"),xAr=o(" to load the model weights."),$Ar=l(),F(uE.$$.fragment),kAr=l(),qr=a("div"),F(p8.$$.fragment),SAr=l(),QTe=a("p"),RAr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),PAr=l(),mn=a("p"),BAr=o("The model class to instantiate is selected based on the "),HTe=a("code"),IAr=o("model_type"),qAr=o(` property of the config object (either
passed as an argument or loaded from `),UTe=a("code"),NAr=o("pretrained_model_name_or_path"),jAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=a("code"),DAr=o("pretrained_model_name_or_path"),GAr=o(":"),OAr=l(),YTe=a("ul"),_E=a("li"),KTe=a("strong"),VAr=o("vision-encoder-decoder"),XAr=o(" \u2014 "),MJ=a("a"),zAr=o("TFVisionEncoderDecoderModel"),WAr=o(" (Vision Encoder decoder model)"),QAr=l(),F(bE.$$.fragment),gje=l(),Ac=a("h2"),vE=a("a"),ZTe=a("span"),F(u8.$$.fragment),HAr=l(),e7e=a("span"),UAr=o("TFAutoModelForSpeechSeq2Seq"),hje=l(),cr=a("div"),F(_8.$$.fragment),JAr=l(),yc=a("p"),YAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EJ=a("a"),KAr=o("from_pretrained()"),ZAr=o(" class method or the "),CJ=a("a"),e6r=o("from_config()"),o6r=o(` class
method.`),r6r=l(),b8=a("p"),t6r=o("This class cannot be instantiated directly using "),o7e=a("code"),a6r=o("__init__()"),n6r=o(" (throws an error)."),s6r=l(),Dt=a("div"),F(v8.$$.fragment),l6r=l(),r7e=a("p"),i6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),d6r=l(),Lc=a("p"),c6r=o(`Note:
Loading a model from its configuration file does `),t7e=a("strong"),f6r=o("not"),m6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=a("a"),g6r=o("from_pretrained()"),h6r=o(" to load the model weights."),p6r=l(),F(FE.$$.fragment),u6r=l(),Nr=a("div"),F(F8.$$.fragment),_6r=l(),a7e=a("p"),b6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),v6r=l(),gn=a("p"),F6r=o("The model class to instantiate is selected based on the "),n7e=a("code"),T6r=o("model_type"),M6r=o(` property of the config object (either
passed as an argument or loaded from `),s7e=a("code"),E6r=o("pretrained_model_name_or_path"),C6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=a("code"),w6r=o("pretrained_model_name_or_path"),A6r=o(":"),y6r=l(),i7e=a("ul"),TE=a("li"),d7e=a("strong"),L6r=o("speech_to_text"),x6r=o(" \u2014 "),AJ=a("a"),$6r=o("TFSpeech2TextForConditionalGeneration"),k6r=o(" (Speech2Text model)"),S6r=l(),F(ME.$$.fragment),pje=l(),xc=a("h2"),EE=a("a"),c7e=a("span"),F(T8.$$.fragment),R6r=l(),f7e=a("span"),P6r=o("FlaxAutoModel"),uje=l(),fr=a("div"),F(M8.$$.fragment),B6r=l(),$c=a("p"),I6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yJ=a("a"),q6r=o("from_pretrained()"),N6r=o(" class method or the "),LJ=a("a"),j6r=o("from_config()"),D6r=o(` class
method.`),G6r=l(),E8=a("p"),O6r=o("This class cannot be instantiated directly using "),m7e=a("code"),V6r=o("__init__()"),X6r=o(" (throws an error)."),z6r=l(),Gt=a("div"),F(C8.$$.fragment),W6r=l(),g7e=a("p"),Q6r=o("Instantiates one of the base model classes of the library from a configuration."),H6r=l(),kc=a("p"),U6r=o(`Note:
Loading a model from its configuration file does `),h7e=a("strong"),J6r=o("not"),Y6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=a("a"),K6r=o("from_pretrained()"),Z6r=o(" to load the model weights."),eyr=l(),F(CE.$$.fragment),oyr=l(),jr=a("div"),F(w8.$$.fragment),ryr=l(),p7e=a("p"),tyr=o("Instantiate one of the base model classes of the library from a pretrained model."),ayr=l(),hn=a("p"),nyr=o("The model class to instantiate is selected based on the "),u7e=a("code"),syr=o("model_type"),lyr=o(` property of the config object (either
passed as an argument or loaded from `),_7e=a("code"),iyr=o("pretrained_model_name_or_path"),dyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=a("code"),cyr=o("pretrained_model_name_or_path"),fyr=o(":"),myr=l(),te=a("ul"),wE=a("li"),v7e=a("strong"),gyr=o("albert"),hyr=o(" \u2014 "),$J=a("a"),pyr=o("FlaxAlbertModel"),uyr=o(" (ALBERT model)"),_yr=l(),AE=a("li"),F7e=a("strong"),byr=o("bart"),vyr=o(" \u2014 "),kJ=a("a"),Fyr=o("FlaxBartModel"),Tyr=o(" (BART model)"),Myr=l(),yE=a("li"),T7e=a("strong"),Eyr=o("beit"),Cyr=o(" \u2014 "),SJ=a("a"),wyr=o("FlaxBeitModel"),Ayr=o(" (BEiT model)"),yyr=l(),LE=a("li"),M7e=a("strong"),Lyr=o("bert"),xyr=o(" \u2014 "),RJ=a("a"),$yr=o("FlaxBertModel"),kyr=o(" (BERT model)"),Syr=l(),xE=a("li"),E7e=a("strong"),Ryr=o("big_bird"),Pyr=o(" \u2014 "),PJ=a("a"),Byr=o("FlaxBigBirdModel"),Iyr=o(" (BigBird model)"),qyr=l(),$E=a("li"),C7e=a("strong"),Nyr=o("blenderbot"),jyr=o(" \u2014 "),BJ=a("a"),Dyr=o("FlaxBlenderbotModel"),Gyr=o(" (Blenderbot model)"),Oyr=l(),kE=a("li"),w7e=a("strong"),Vyr=o("blenderbot-small"),Xyr=o(" \u2014 "),IJ=a("a"),zyr=o("FlaxBlenderbotSmallModel"),Wyr=o(" (BlenderbotSmall model)"),Qyr=l(),SE=a("li"),A7e=a("strong"),Hyr=o("clip"),Uyr=o(" \u2014 "),qJ=a("a"),Jyr=o("FlaxCLIPModel"),Yyr=o(" (CLIP model)"),Kyr=l(),RE=a("li"),y7e=a("strong"),Zyr=o("distilbert"),eLr=o(" \u2014 "),NJ=a("a"),oLr=o("FlaxDistilBertModel"),rLr=o(" (DistilBERT model)"),tLr=l(),PE=a("li"),L7e=a("strong"),aLr=o("electra"),nLr=o(" \u2014 "),jJ=a("a"),sLr=o("FlaxElectraModel"),lLr=o(" (ELECTRA model)"),iLr=l(),BE=a("li"),x7e=a("strong"),dLr=o("gpt2"),cLr=o(" \u2014 "),DJ=a("a"),fLr=o("FlaxGPT2Model"),mLr=o(" (OpenAI GPT-2 model)"),gLr=l(),IE=a("li"),$7e=a("strong"),hLr=o("gpt_neo"),pLr=o(" \u2014 "),GJ=a("a"),uLr=o("FlaxGPTNeoModel"),_Lr=o(" (GPT Neo model)"),bLr=l(),qE=a("li"),k7e=a("strong"),vLr=o("gptj"),FLr=o(" \u2014 "),OJ=a("a"),TLr=o("FlaxGPTJModel"),MLr=o(" (GPT-J model)"),ELr=l(),NE=a("li"),S7e=a("strong"),CLr=o("marian"),wLr=o(" \u2014 "),VJ=a("a"),ALr=o("FlaxMarianModel"),yLr=o(" (Marian model)"),LLr=l(),jE=a("li"),R7e=a("strong"),xLr=o("mbart"),$Lr=o(" \u2014 "),XJ=a("a"),kLr=o("FlaxMBartModel"),SLr=o(" (mBART model)"),RLr=l(),DE=a("li"),P7e=a("strong"),PLr=o("mt5"),BLr=o(" \u2014 "),zJ=a("a"),ILr=o("FlaxMT5Model"),qLr=o(" (mT5 model)"),NLr=l(),GE=a("li"),B7e=a("strong"),jLr=o("pegasus"),DLr=o(" \u2014 "),WJ=a("a"),GLr=o("FlaxPegasusModel"),OLr=o(" (Pegasus model)"),VLr=l(),OE=a("li"),I7e=a("strong"),XLr=o("roberta"),zLr=o(" \u2014 "),QJ=a("a"),WLr=o("FlaxRobertaModel"),QLr=o(" (RoBERTa model)"),HLr=l(),VE=a("li"),q7e=a("strong"),ULr=o("roformer"),JLr=o(" \u2014 "),HJ=a("a"),YLr=o("FlaxRoFormerModel"),KLr=o(" (RoFormer model)"),ZLr=l(),XE=a("li"),N7e=a("strong"),e8r=o("t5"),o8r=o(" \u2014 "),UJ=a("a"),r8r=o("FlaxT5Model"),t8r=o(" (T5 model)"),a8r=l(),zE=a("li"),j7e=a("strong"),n8r=o("vision-text-dual-encoder"),s8r=o(" \u2014 "),JJ=a("a"),l8r=o("FlaxVisionTextDualEncoderModel"),i8r=o(" (VisionTextDualEncoder model)"),d8r=l(),WE=a("li"),D7e=a("strong"),c8r=o("vit"),f8r=o(" \u2014 "),YJ=a("a"),m8r=o("FlaxViTModel"),g8r=o(" (ViT model)"),h8r=l(),QE=a("li"),G7e=a("strong"),p8r=o("wav2vec2"),u8r=o(" \u2014 "),KJ=a("a"),_8r=o("FlaxWav2Vec2Model"),b8r=o(" (Wav2Vec2 model)"),v8r=l(),HE=a("li"),O7e=a("strong"),F8r=o("xglm"),T8r=o(" \u2014 "),ZJ=a("a"),M8r=o("FlaxXGLMModel"),E8r=o(" (XGLM model)"),C8r=l(),UE=a("li"),V7e=a("strong"),w8r=o("xlm-roberta"),A8r=o(" \u2014 "),eY=a("a"),y8r=o("FlaxXLMRobertaModel"),L8r=o(" (XLM-RoBERTa model)"),x8r=l(),F(JE.$$.fragment),_je=l(),Sc=a("h2"),YE=a("a"),X7e=a("span"),F(A8.$$.fragment),$8r=l(),z7e=a("span"),k8r=o("FlaxAutoModelForCausalLM"),bje=l(),mr=a("div"),F(y8.$$.fragment),S8r=l(),Rc=a("p"),R8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oY=a("a"),P8r=o("from_pretrained()"),B8r=o(" class method or the "),rY=a("a"),I8r=o("from_config()"),q8r=o(` class
method.`),N8r=l(),L8=a("p"),j8r=o("This class cannot be instantiated directly using "),W7e=a("code"),D8r=o("__init__()"),G8r=o(" (throws an error)."),O8r=l(),Ot=a("div"),F(x8.$$.fragment),V8r=l(),Q7e=a("p"),X8r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),z8r=l(),Pc=a("p"),W8r=o(`Note:
Loading a model from its configuration file does `),H7e=a("strong"),Q8r=o("not"),H8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=a("a"),U8r=o("from_pretrained()"),J8r=o(" to load the model weights."),Y8r=l(),F(KE.$$.fragment),K8r=l(),Dr=a("div"),F($8.$$.fragment),Z8r=l(),U7e=a("p"),exr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oxr=l(),pn=a("p"),rxr=o("The model class to instantiate is selected based on the "),J7e=a("code"),txr=o("model_type"),axr=o(` property of the config object (either
passed as an argument or loaded from `),Y7e=a("code"),nxr=o("pretrained_model_name_or_path"),sxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=a("code"),lxr=o("pretrained_model_name_or_path"),ixr=o(":"),dxr=l(),Re=a("ul"),ZE=a("li"),Z7e=a("strong"),cxr=o("bart"),fxr=o(" \u2014 "),aY=a("a"),mxr=o("FlaxBartForCausalLM"),gxr=o(" (BART model)"),hxr=l(),eC=a("li"),e9e=a("strong"),pxr=o("bert"),uxr=o(" \u2014 "),nY=a("a"),_xr=o("FlaxBertForCausalLM"),bxr=o(" (BERT model)"),vxr=l(),oC=a("li"),o9e=a("strong"),Fxr=o("big_bird"),Txr=o(" \u2014 "),sY=a("a"),Mxr=o("FlaxBigBirdForCausalLM"),Exr=o(" (BigBird model)"),Cxr=l(),rC=a("li"),r9e=a("strong"),wxr=o("electra"),Axr=o(" \u2014 "),lY=a("a"),yxr=o("FlaxElectraForCausalLM"),Lxr=o(" (ELECTRA model)"),xxr=l(),tC=a("li"),t9e=a("strong"),$xr=o("gpt2"),kxr=o(" \u2014 "),iY=a("a"),Sxr=o("FlaxGPT2LMHeadModel"),Rxr=o(" (OpenAI GPT-2 model)"),Pxr=l(),aC=a("li"),a9e=a("strong"),Bxr=o("gpt_neo"),Ixr=o(" \u2014 "),dY=a("a"),qxr=o("FlaxGPTNeoForCausalLM"),Nxr=o(" (GPT Neo model)"),jxr=l(),nC=a("li"),n9e=a("strong"),Dxr=o("gptj"),Gxr=o(" \u2014 "),cY=a("a"),Oxr=o("FlaxGPTJForCausalLM"),Vxr=o(" (GPT-J model)"),Xxr=l(),sC=a("li"),s9e=a("strong"),zxr=o("roberta"),Wxr=o(" \u2014 "),fY=a("a"),Qxr=o("FlaxRobertaForCausalLM"),Hxr=o(" (RoBERTa model)"),Uxr=l(),lC=a("li"),l9e=a("strong"),Jxr=o("xglm"),Yxr=o(" \u2014 "),mY=a("a"),Kxr=o("FlaxXGLMForCausalLM"),Zxr=o(" (XGLM model)"),e$r=l(),F(iC.$$.fragment),vje=l(),Bc=a("h2"),dC=a("a"),i9e=a("span"),F(k8.$$.fragment),o$r=l(),d9e=a("span"),r$r=o("FlaxAutoModelForPreTraining"),Fje=l(),gr=a("div"),F(S8.$$.fragment),t$r=l(),Ic=a("p"),a$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gY=a("a"),n$r=o("from_pretrained()"),s$r=o(" class method or the "),hY=a("a"),l$r=o("from_config()"),i$r=o(` class
method.`),d$r=l(),R8=a("p"),c$r=o("This class cannot be instantiated directly using "),c9e=a("code"),f$r=o("__init__()"),m$r=o(" (throws an error)."),g$r=l(),Vt=a("div"),F(P8.$$.fragment),h$r=l(),f9e=a("p"),p$r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),u$r=l(),qc=a("p"),_$r=o(`Note:
Loading a model from its configuration file does `),m9e=a("strong"),b$r=o("not"),v$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=a("a"),F$r=o("from_pretrained()"),T$r=o(" to load the model weights."),M$r=l(),F(cC.$$.fragment),E$r=l(),Gr=a("div"),F(B8.$$.fragment),C$r=l(),g9e=a("p"),w$r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),A$r=l(),un=a("p"),y$r=o("The model class to instantiate is selected based on the "),h9e=a("code"),L$r=o("model_type"),x$r=o(` property of the config object (either
passed as an argument or loaded from `),p9e=a("code"),$$r=o("pretrained_model_name_or_path"),k$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u9e=a("code"),S$r=o("pretrained_model_name_or_path"),R$r=o(":"),P$r=l(),Ee=a("ul"),fC=a("li"),_9e=a("strong"),B$r=o("albert"),I$r=o(" \u2014 "),uY=a("a"),q$r=o("FlaxAlbertForPreTraining"),N$r=o(" (ALBERT model)"),j$r=l(),mC=a("li"),b9e=a("strong"),D$r=o("bart"),G$r=o(" \u2014 "),_Y=a("a"),O$r=o("FlaxBartForConditionalGeneration"),V$r=o(" (BART model)"),X$r=l(),gC=a("li"),v9e=a("strong"),z$r=o("bert"),W$r=o(" \u2014 "),bY=a("a"),Q$r=o("FlaxBertForPreTraining"),H$r=o(" (BERT model)"),U$r=l(),hC=a("li"),F9e=a("strong"),J$r=o("big_bird"),Y$r=o(" \u2014 "),vY=a("a"),K$r=o("FlaxBigBirdForPreTraining"),Z$r=o(" (BigBird model)"),ekr=l(),pC=a("li"),T9e=a("strong"),okr=o("electra"),rkr=o(" \u2014 "),FY=a("a"),tkr=o("FlaxElectraForPreTraining"),akr=o(" (ELECTRA model)"),nkr=l(),uC=a("li"),M9e=a("strong"),skr=o("mbart"),lkr=o(" \u2014 "),TY=a("a"),ikr=o("FlaxMBartForConditionalGeneration"),dkr=o(" (mBART model)"),ckr=l(),_C=a("li"),E9e=a("strong"),fkr=o("mt5"),mkr=o(" \u2014 "),MY=a("a"),gkr=o("FlaxMT5ForConditionalGeneration"),hkr=o(" (mT5 model)"),pkr=l(),bC=a("li"),C9e=a("strong"),ukr=o("roberta"),_kr=o(" \u2014 "),EY=a("a"),bkr=o("FlaxRobertaForMaskedLM"),vkr=o(" (RoBERTa model)"),Fkr=l(),vC=a("li"),w9e=a("strong"),Tkr=o("roformer"),Mkr=o(" \u2014 "),CY=a("a"),Ekr=o("FlaxRoFormerForMaskedLM"),Ckr=o(" (RoFormer model)"),wkr=l(),FC=a("li"),A9e=a("strong"),Akr=o("t5"),ykr=o(" \u2014 "),wY=a("a"),Lkr=o("FlaxT5ForConditionalGeneration"),xkr=o(" (T5 model)"),$kr=l(),TC=a("li"),y9e=a("strong"),kkr=o("wav2vec2"),Skr=o(" \u2014 "),AY=a("a"),Rkr=o("FlaxWav2Vec2ForPreTraining"),Pkr=o(" (Wav2Vec2 model)"),Bkr=l(),MC=a("li"),L9e=a("strong"),Ikr=o("xlm-roberta"),qkr=o(" \u2014 "),yY=a("a"),Nkr=o("FlaxXLMRobertaForMaskedLM"),jkr=o(" (XLM-RoBERTa model)"),Dkr=l(),F(EC.$$.fragment),Tje=l(),Nc=a("h2"),CC=a("a"),x9e=a("span"),F(I8.$$.fragment),Gkr=l(),$9e=a("span"),Okr=o("FlaxAutoModelForMaskedLM"),Mje=l(),hr=a("div"),F(q8.$$.fragment),Vkr=l(),jc=a("p"),Xkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LY=a("a"),zkr=o("from_pretrained()"),Wkr=o(" class method or the "),xY=a("a"),Qkr=o("from_config()"),Hkr=o(` class
method.`),Ukr=l(),N8=a("p"),Jkr=o("This class cannot be instantiated directly using "),k9e=a("code"),Ykr=o("__init__()"),Kkr=o(" (throws an error)."),Zkr=l(),Xt=a("div"),F(j8.$$.fragment),eSr=l(),S9e=a("p"),oSr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rSr=l(),Dc=a("p"),tSr=o(`Note:
Loading a model from its configuration file does `),R9e=a("strong"),aSr=o("not"),nSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=a("a"),sSr=o("from_pretrained()"),lSr=o(" to load the model weights."),iSr=l(),F(wC.$$.fragment),dSr=l(),Or=a("div"),F(D8.$$.fragment),cSr=l(),P9e=a("p"),fSr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mSr=l(),_n=a("p"),gSr=o("The model class to instantiate is selected based on the "),B9e=a("code"),hSr=o("model_type"),pSr=o(` property of the config object (either
passed as an argument or loaded from `),I9e=a("code"),uSr=o("pretrained_model_name_or_path"),_Sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q9e=a("code"),bSr=o("pretrained_model_name_or_path"),vSr=o(":"),FSr=l(),Le=a("ul"),AC=a("li"),N9e=a("strong"),TSr=o("albert"),MSr=o(" \u2014 "),kY=a("a"),ESr=o("FlaxAlbertForMaskedLM"),CSr=o(" (ALBERT model)"),wSr=l(),yC=a("li"),j9e=a("strong"),ASr=o("bart"),ySr=o(" \u2014 "),SY=a("a"),LSr=o("FlaxBartForConditionalGeneration"),xSr=o(" (BART model)"),$Sr=l(),LC=a("li"),D9e=a("strong"),kSr=o("bert"),SSr=o(" \u2014 "),RY=a("a"),RSr=o("FlaxBertForMaskedLM"),PSr=o(" (BERT model)"),BSr=l(),xC=a("li"),G9e=a("strong"),ISr=o("big_bird"),qSr=o(" \u2014 "),PY=a("a"),NSr=o("FlaxBigBirdForMaskedLM"),jSr=o(" (BigBird model)"),DSr=l(),$C=a("li"),O9e=a("strong"),GSr=o("distilbert"),OSr=o(" \u2014 "),BY=a("a"),VSr=o("FlaxDistilBertForMaskedLM"),XSr=o(" (DistilBERT model)"),zSr=l(),kC=a("li"),V9e=a("strong"),WSr=o("electra"),QSr=o(" \u2014 "),IY=a("a"),HSr=o("FlaxElectraForMaskedLM"),USr=o(" (ELECTRA model)"),JSr=l(),SC=a("li"),X9e=a("strong"),YSr=o("mbart"),KSr=o(" \u2014 "),qY=a("a"),ZSr=o("FlaxMBartForConditionalGeneration"),eRr=o(" (mBART model)"),oRr=l(),RC=a("li"),z9e=a("strong"),rRr=o("roberta"),tRr=o(" \u2014 "),NY=a("a"),aRr=o("FlaxRobertaForMaskedLM"),nRr=o(" (RoBERTa model)"),sRr=l(),PC=a("li"),W9e=a("strong"),lRr=o("roformer"),iRr=o(" \u2014 "),jY=a("a"),dRr=o("FlaxRoFormerForMaskedLM"),cRr=o(" (RoFormer model)"),fRr=l(),BC=a("li"),Q9e=a("strong"),mRr=o("xlm-roberta"),gRr=o(" \u2014 "),DY=a("a"),hRr=o("FlaxXLMRobertaForMaskedLM"),pRr=o(" (XLM-RoBERTa model)"),uRr=l(),F(IC.$$.fragment),Eje=l(),Gc=a("h2"),qC=a("a"),H9e=a("span"),F(G8.$$.fragment),_Rr=l(),U9e=a("span"),bRr=o("FlaxAutoModelForSeq2SeqLM"),Cje=l(),pr=a("div"),F(O8.$$.fragment),vRr=l(),Oc=a("p"),FRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GY=a("a"),TRr=o("from_pretrained()"),MRr=o(" class method or the "),OY=a("a"),ERr=o("from_config()"),CRr=o(` class
method.`),wRr=l(),V8=a("p"),ARr=o("This class cannot be instantiated directly using "),J9e=a("code"),yRr=o("__init__()"),LRr=o(" (throws an error)."),xRr=l(),zt=a("div"),F(X8.$$.fragment),$Rr=l(),Y9e=a("p"),kRr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SRr=l(),Vc=a("p"),RRr=o(`Note:
Loading a model from its configuration file does `),K9e=a("strong"),PRr=o("not"),BRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=a("a"),IRr=o("from_pretrained()"),qRr=o(" to load the model weights."),NRr=l(),F(NC.$$.fragment),jRr=l(),Vr=a("div"),F(z8.$$.fragment),DRr=l(),Z9e=a("p"),GRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ORr=l(),bn=a("p"),VRr=o("The model class to instantiate is selected based on the "),eMe=a("code"),XRr=o("model_type"),zRr=o(` property of the config object (either
passed as an argument or loaded from `),oMe=a("code"),WRr=o("pretrained_model_name_or_path"),QRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=a("code"),HRr=o("pretrained_model_name_or_path"),URr=o(":"),JRr=l(),Pe=a("ul"),jC=a("li"),tMe=a("strong"),YRr=o("bart"),KRr=o(" \u2014 "),XY=a("a"),ZRr=o("FlaxBartForConditionalGeneration"),ePr=o(" (BART model)"),oPr=l(),DC=a("li"),aMe=a("strong"),rPr=o("blenderbot"),tPr=o(" \u2014 "),zY=a("a"),aPr=o("FlaxBlenderbotForConditionalGeneration"),nPr=o(" (Blenderbot model)"),sPr=l(),GC=a("li"),nMe=a("strong"),lPr=o("blenderbot-small"),iPr=o(" \u2014 "),WY=a("a"),dPr=o("FlaxBlenderbotSmallForConditionalGeneration"),cPr=o(" (BlenderbotSmall model)"),fPr=l(),OC=a("li"),sMe=a("strong"),mPr=o("encoder-decoder"),gPr=o(" \u2014 "),QY=a("a"),hPr=o("FlaxEncoderDecoderModel"),pPr=o(" (Encoder decoder model)"),uPr=l(),VC=a("li"),lMe=a("strong"),_Pr=o("marian"),bPr=o(" \u2014 "),HY=a("a"),vPr=o("FlaxMarianMTModel"),FPr=o(" (Marian model)"),TPr=l(),XC=a("li"),iMe=a("strong"),MPr=o("mbart"),EPr=o(" \u2014 "),UY=a("a"),CPr=o("FlaxMBartForConditionalGeneration"),wPr=o(" (mBART model)"),APr=l(),zC=a("li"),dMe=a("strong"),yPr=o("mt5"),LPr=o(" \u2014 "),JY=a("a"),xPr=o("FlaxMT5ForConditionalGeneration"),$Pr=o(" (mT5 model)"),kPr=l(),WC=a("li"),cMe=a("strong"),SPr=o("pegasus"),RPr=o(" \u2014 "),YY=a("a"),PPr=o("FlaxPegasusForConditionalGeneration"),BPr=o(" (Pegasus model)"),IPr=l(),QC=a("li"),fMe=a("strong"),qPr=o("t5"),NPr=o(" \u2014 "),KY=a("a"),jPr=o("FlaxT5ForConditionalGeneration"),DPr=o(" (T5 model)"),GPr=l(),F(HC.$$.fragment),wje=l(),Xc=a("h2"),UC=a("a"),mMe=a("span"),F(W8.$$.fragment),OPr=l(),gMe=a("span"),VPr=o("FlaxAutoModelForSequenceClassification"),Aje=l(),ur=a("div"),F(Q8.$$.fragment),XPr=l(),zc=a("p"),zPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZY=a("a"),WPr=o("from_pretrained()"),QPr=o(" class method or the "),eK=a("a"),HPr=o("from_config()"),UPr=o(` class
method.`),JPr=l(),H8=a("p"),YPr=o("This class cannot be instantiated directly using "),hMe=a("code"),KPr=o("__init__()"),ZPr=o(" (throws an error)."),eBr=l(),Wt=a("div"),F(U8.$$.fragment),oBr=l(),pMe=a("p"),rBr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tBr=l(),Wc=a("p"),aBr=o(`Note:
Loading a model from its configuration file does `),uMe=a("strong"),nBr=o("not"),sBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=a("a"),lBr=o("from_pretrained()"),iBr=o(" to load the model weights."),dBr=l(),F(JC.$$.fragment),cBr=l(),Xr=a("div"),F(J8.$$.fragment),fBr=l(),_Me=a("p"),mBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gBr=l(),vn=a("p"),hBr=o("The model class to instantiate is selected based on the "),bMe=a("code"),pBr=o("model_type"),uBr=o(` property of the config object (either
passed as an argument or loaded from `),vMe=a("code"),_Br=o("pretrained_model_name_or_path"),bBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=a("code"),vBr=o("pretrained_model_name_or_path"),FBr=o(":"),TBr=l(),xe=a("ul"),YC=a("li"),TMe=a("strong"),MBr=o("albert"),EBr=o(" \u2014 "),rK=a("a"),CBr=o("FlaxAlbertForSequenceClassification"),wBr=o(" (ALBERT model)"),ABr=l(),KC=a("li"),MMe=a("strong"),yBr=o("bart"),LBr=o(" \u2014 "),tK=a("a"),xBr=o("FlaxBartForSequenceClassification"),$Br=o(" (BART model)"),kBr=l(),ZC=a("li"),EMe=a("strong"),SBr=o("bert"),RBr=o(" \u2014 "),aK=a("a"),PBr=o("FlaxBertForSequenceClassification"),BBr=o(" (BERT model)"),IBr=l(),e5=a("li"),CMe=a("strong"),qBr=o("big_bird"),NBr=o(" \u2014 "),nK=a("a"),jBr=o("FlaxBigBirdForSequenceClassification"),DBr=o(" (BigBird model)"),GBr=l(),o5=a("li"),wMe=a("strong"),OBr=o("distilbert"),VBr=o(" \u2014 "),sK=a("a"),XBr=o("FlaxDistilBertForSequenceClassification"),zBr=o(" (DistilBERT model)"),WBr=l(),r5=a("li"),AMe=a("strong"),QBr=o("electra"),HBr=o(" \u2014 "),lK=a("a"),UBr=o("FlaxElectraForSequenceClassification"),JBr=o(" (ELECTRA model)"),YBr=l(),t5=a("li"),yMe=a("strong"),KBr=o("mbart"),ZBr=o(" \u2014 "),iK=a("a"),eIr=o("FlaxMBartForSequenceClassification"),oIr=o(" (mBART model)"),rIr=l(),a5=a("li"),LMe=a("strong"),tIr=o("roberta"),aIr=o(" \u2014 "),dK=a("a"),nIr=o("FlaxRobertaForSequenceClassification"),sIr=o(" (RoBERTa model)"),lIr=l(),n5=a("li"),xMe=a("strong"),iIr=o("roformer"),dIr=o(" \u2014 "),cK=a("a"),cIr=o("FlaxRoFormerForSequenceClassification"),fIr=o(" (RoFormer model)"),mIr=l(),s5=a("li"),$Me=a("strong"),gIr=o("xlm-roberta"),hIr=o(" \u2014 "),fK=a("a"),pIr=o("FlaxXLMRobertaForSequenceClassification"),uIr=o(" (XLM-RoBERTa model)"),_Ir=l(),F(l5.$$.fragment),yje=l(),Qc=a("h2"),i5=a("a"),kMe=a("span"),F(Y8.$$.fragment),bIr=l(),SMe=a("span"),vIr=o("FlaxAutoModelForQuestionAnswering"),Lje=l(),_r=a("div"),F(K8.$$.fragment),FIr=l(),Hc=a("p"),TIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mK=a("a"),MIr=o("from_pretrained()"),EIr=o(" class method or the "),gK=a("a"),CIr=o("from_config()"),wIr=o(` class
method.`),AIr=l(),Z8=a("p"),yIr=o("This class cannot be instantiated directly using "),RMe=a("code"),LIr=o("__init__()"),xIr=o(" (throws an error)."),$Ir=l(),Qt=a("div"),F(ex.$$.fragment),kIr=l(),PMe=a("p"),SIr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RIr=l(),Uc=a("p"),PIr=o(`Note:
Loading a model from its configuration file does `),BMe=a("strong"),BIr=o("not"),IIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),qIr=o("from_pretrained()"),NIr=o(" to load the model weights."),jIr=l(),F(d5.$$.fragment),DIr=l(),zr=a("div"),F(ox.$$.fragment),GIr=l(),IMe=a("p"),OIr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),VIr=l(),Fn=a("p"),XIr=o("The model class to instantiate is selected based on the "),qMe=a("code"),zIr=o("model_type"),WIr=o(` property of the config object (either
passed as an argument or loaded from `),NMe=a("code"),QIr=o("pretrained_model_name_or_path"),HIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jMe=a("code"),UIr=o("pretrained_model_name_or_path"),JIr=o(":"),YIr=l(),$e=a("ul"),c5=a("li"),DMe=a("strong"),KIr=o("albert"),ZIr=o(" \u2014 "),pK=a("a"),eqr=o("FlaxAlbertForQuestionAnswering"),oqr=o(" (ALBERT model)"),rqr=l(),f5=a("li"),GMe=a("strong"),tqr=o("bart"),aqr=o(" \u2014 "),uK=a("a"),nqr=o("FlaxBartForQuestionAnswering"),sqr=o(" (BART model)"),lqr=l(),m5=a("li"),OMe=a("strong"),iqr=o("bert"),dqr=o(" \u2014 "),_K=a("a"),cqr=o("FlaxBertForQuestionAnswering"),fqr=o(" (BERT model)"),mqr=l(),g5=a("li"),VMe=a("strong"),gqr=o("big_bird"),hqr=o(" \u2014 "),bK=a("a"),pqr=o("FlaxBigBirdForQuestionAnswering"),uqr=o(" (BigBird model)"),_qr=l(),h5=a("li"),XMe=a("strong"),bqr=o("distilbert"),vqr=o(" \u2014 "),vK=a("a"),Fqr=o("FlaxDistilBertForQuestionAnswering"),Tqr=o(" (DistilBERT model)"),Mqr=l(),p5=a("li"),zMe=a("strong"),Eqr=o("electra"),Cqr=o(" \u2014 "),FK=a("a"),wqr=o("FlaxElectraForQuestionAnswering"),Aqr=o(" (ELECTRA model)"),yqr=l(),u5=a("li"),WMe=a("strong"),Lqr=o("mbart"),xqr=o(" \u2014 "),TK=a("a"),$qr=o("FlaxMBartForQuestionAnswering"),kqr=o(" (mBART model)"),Sqr=l(),_5=a("li"),QMe=a("strong"),Rqr=o("roberta"),Pqr=o(" \u2014 "),MK=a("a"),Bqr=o("FlaxRobertaForQuestionAnswering"),Iqr=o(" (RoBERTa model)"),qqr=l(),b5=a("li"),HMe=a("strong"),Nqr=o("roformer"),jqr=o(" \u2014 "),EK=a("a"),Dqr=o("FlaxRoFormerForQuestionAnswering"),Gqr=o(" (RoFormer model)"),Oqr=l(),v5=a("li"),UMe=a("strong"),Vqr=o("xlm-roberta"),Xqr=o(" \u2014 "),CK=a("a"),zqr=o("FlaxXLMRobertaForQuestionAnswering"),Wqr=o(" (XLM-RoBERTa model)"),Qqr=l(),F(F5.$$.fragment),xje=l(),Jc=a("h2"),T5=a("a"),JMe=a("span"),F(rx.$$.fragment),Hqr=l(),YMe=a("span"),Uqr=o("FlaxAutoModelForTokenClassification"),$je=l(),br=a("div"),F(tx.$$.fragment),Jqr=l(),Yc=a("p"),Yqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wK=a("a"),Kqr=o("from_pretrained()"),Zqr=o(" class method or the "),AK=a("a"),eNr=o("from_config()"),oNr=o(` class
method.`),rNr=l(),ax=a("p"),tNr=o("This class cannot be instantiated directly using "),KMe=a("code"),aNr=o("__init__()"),nNr=o(" (throws an error)."),sNr=l(),Ht=a("div"),F(nx.$$.fragment),lNr=l(),ZMe=a("p"),iNr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dNr=l(),Kc=a("p"),cNr=o(`Note:
Loading a model from its configuration file does `),e4e=a("strong"),fNr=o("not"),mNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=a("a"),gNr=o("from_pretrained()"),hNr=o(" to load the model weights."),pNr=l(),F(M5.$$.fragment),uNr=l(),Wr=a("div"),F(sx.$$.fragment),_Nr=l(),o4e=a("p"),bNr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vNr=l(),Tn=a("p"),FNr=o("The model class to instantiate is selected based on the "),r4e=a("code"),TNr=o("model_type"),MNr=o(` property of the config object (either
passed as an argument or loaded from `),t4e=a("code"),ENr=o("pretrained_model_name_or_path"),CNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=a("code"),wNr=o("pretrained_model_name_or_path"),ANr=o(":"),yNr=l(),De=a("ul"),E5=a("li"),n4e=a("strong"),LNr=o("albert"),xNr=o(" \u2014 "),LK=a("a"),$Nr=o("FlaxAlbertForTokenClassification"),kNr=o(" (ALBERT model)"),SNr=l(),C5=a("li"),s4e=a("strong"),RNr=o("bert"),PNr=o(" \u2014 "),xK=a("a"),BNr=o("FlaxBertForTokenClassification"),INr=o(" (BERT model)"),qNr=l(),w5=a("li"),l4e=a("strong"),NNr=o("big_bird"),jNr=o(" \u2014 "),$K=a("a"),DNr=o("FlaxBigBirdForTokenClassification"),GNr=o(" (BigBird model)"),ONr=l(),A5=a("li"),i4e=a("strong"),VNr=o("distilbert"),XNr=o(" \u2014 "),kK=a("a"),zNr=o("FlaxDistilBertForTokenClassification"),WNr=o(" (DistilBERT model)"),QNr=l(),y5=a("li"),d4e=a("strong"),HNr=o("electra"),UNr=o(" \u2014 "),SK=a("a"),JNr=o("FlaxElectraForTokenClassification"),YNr=o(" (ELECTRA model)"),KNr=l(),L5=a("li"),c4e=a("strong"),ZNr=o("roberta"),ejr=o(" \u2014 "),RK=a("a"),ojr=o("FlaxRobertaForTokenClassification"),rjr=o(" (RoBERTa model)"),tjr=l(),x5=a("li"),f4e=a("strong"),ajr=o("roformer"),njr=o(" \u2014 "),PK=a("a"),sjr=o("FlaxRoFormerForTokenClassification"),ljr=o(" (RoFormer model)"),ijr=l(),$5=a("li"),m4e=a("strong"),djr=o("xlm-roberta"),cjr=o(" \u2014 "),BK=a("a"),fjr=o("FlaxXLMRobertaForTokenClassification"),mjr=o(" (XLM-RoBERTa model)"),gjr=l(),F(k5.$$.fragment),kje=l(),Zc=a("h2"),S5=a("a"),g4e=a("span"),F(lx.$$.fragment),hjr=l(),h4e=a("span"),pjr=o("FlaxAutoModelForMultipleChoice"),Sje=l(),vr=a("div"),F(ix.$$.fragment),ujr=l(),ef=a("p"),_jr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IK=a("a"),bjr=o("from_pretrained()"),vjr=o(" class method or the "),qK=a("a"),Fjr=o("from_config()"),Tjr=o(` class
method.`),Mjr=l(),dx=a("p"),Ejr=o("This class cannot be instantiated directly using "),p4e=a("code"),Cjr=o("__init__()"),wjr=o(" (throws an error)."),Ajr=l(),Ut=a("div"),F(cx.$$.fragment),yjr=l(),u4e=a("p"),Ljr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xjr=l(),of=a("p"),$jr=o(`Note:
Loading a model from its configuration file does `),_4e=a("strong"),kjr=o("not"),Sjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=a("a"),Rjr=o("from_pretrained()"),Pjr=o(" to load the model weights."),Bjr=l(),F(R5.$$.fragment),Ijr=l(),Qr=a("div"),F(fx.$$.fragment),qjr=l(),b4e=a("p"),Njr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jjr=l(),Mn=a("p"),Djr=o("The model class to instantiate is selected based on the "),v4e=a("code"),Gjr=o("model_type"),Ojr=o(` property of the config object (either
passed as an argument or loaded from `),F4e=a("code"),Vjr=o("pretrained_model_name_or_path"),Xjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=a("code"),zjr=o("pretrained_model_name_or_path"),Wjr=o(":"),Qjr=l(),Ge=a("ul"),P5=a("li"),M4e=a("strong"),Hjr=o("albert"),Ujr=o(" \u2014 "),jK=a("a"),Jjr=o("FlaxAlbertForMultipleChoice"),Yjr=o(" (ALBERT model)"),Kjr=l(),B5=a("li"),E4e=a("strong"),Zjr=o("bert"),eDr=o(" \u2014 "),DK=a("a"),oDr=o("FlaxBertForMultipleChoice"),rDr=o(" (BERT model)"),tDr=l(),I5=a("li"),C4e=a("strong"),aDr=o("big_bird"),nDr=o(" \u2014 "),GK=a("a"),sDr=o("FlaxBigBirdForMultipleChoice"),lDr=o(" (BigBird model)"),iDr=l(),q5=a("li"),w4e=a("strong"),dDr=o("distilbert"),cDr=o(" \u2014 "),OK=a("a"),fDr=o("FlaxDistilBertForMultipleChoice"),mDr=o(" (DistilBERT model)"),gDr=l(),N5=a("li"),A4e=a("strong"),hDr=o("electra"),pDr=o(" \u2014 "),VK=a("a"),uDr=o("FlaxElectraForMultipleChoice"),_Dr=o(" (ELECTRA model)"),bDr=l(),j5=a("li"),y4e=a("strong"),vDr=o("roberta"),FDr=o(" \u2014 "),XK=a("a"),TDr=o("FlaxRobertaForMultipleChoice"),MDr=o(" (RoBERTa model)"),EDr=l(),D5=a("li"),L4e=a("strong"),CDr=o("roformer"),wDr=o(" \u2014 "),zK=a("a"),ADr=o("FlaxRoFormerForMultipleChoice"),yDr=o(" (RoFormer model)"),LDr=l(),G5=a("li"),x4e=a("strong"),xDr=o("xlm-roberta"),$Dr=o(" \u2014 "),WK=a("a"),kDr=o("FlaxXLMRobertaForMultipleChoice"),SDr=o(" (XLM-RoBERTa model)"),RDr=l(),F(O5.$$.fragment),Rje=l(),rf=a("h2"),V5=a("a"),$4e=a("span"),F(mx.$$.fragment),PDr=l(),k4e=a("span"),BDr=o("FlaxAutoModelForNextSentencePrediction"),Pje=l(),Fr=a("div"),F(gx.$$.fragment),IDr=l(),tf=a("p"),qDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),QK=a("a"),NDr=o("from_pretrained()"),jDr=o(" class method or the "),HK=a("a"),DDr=o("from_config()"),GDr=o(` class
method.`),ODr=l(),hx=a("p"),VDr=o("This class cannot be instantiated directly using "),S4e=a("code"),XDr=o("__init__()"),zDr=o(" (throws an error)."),WDr=l(),Jt=a("div"),F(px.$$.fragment),QDr=l(),R4e=a("p"),HDr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),UDr=l(),af=a("p"),JDr=o(`Note:
Loading a model from its configuration file does `),P4e=a("strong"),YDr=o("not"),KDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UK=a("a"),ZDr=o("from_pretrained()"),eGr=o(" to load the model weights."),oGr=l(),F(X5.$$.fragment),rGr=l(),Hr=a("div"),F(ux.$$.fragment),tGr=l(),B4e=a("p"),aGr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nGr=l(),En=a("p"),sGr=o("The model class to instantiate is selected based on the "),I4e=a("code"),lGr=o("model_type"),iGr=o(` property of the config object (either
passed as an argument or loaded from `),q4e=a("code"),dGr=o("pretrained_model_name_or_path"),cGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=a("code"),fGr=o("pretrained_model_name_or_path"),mGr=o(":"),gGr=l(),j4e=a("ul"),z5=a("li"),D4e=a("strong"),hGr=o("bert"),pGr=o(" \u2014 "),JK=a("a"),uGr=o("FlaxBertForNextSentencePrediction"),_Gr=o(" (BERT model)"),bGr=l(),F(W5.$$.fragment),Bje=l(),nf=a("h2"),Q5=a("a"),G4e=a("span"),F(_x.$$.fragment),vGr=l(),O4e=a("span"),FGr=o("FlaxAutoModelForImageClassification"),Ije=l(),Tr=a("div"),F(bx.$$.fragment),TGr=l(),sf=a("p"),MGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YK=a("a"),EGr=o("from_pretrained()"),CGr=o(" class method or the "),KK=a("a"),wGr=o("from_config()"),AGr=o(` class
method.`),yGr=l(),vx=a("p"),LGr=o("This class cannot be instantiated directly using "),V4e=a("code"),xGr=o("__init__()"),$Gr=o(" (throws an error)."),kGr=l(),Yt=a("div"),F(Fx.$$.fragment),SGr=l(),X4e=a("p"),RGr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),PGr=l(),lf=a("p"),BGr=o(`Note:
Loading a model from its configuration file does `),z4e=a("strong"),IGr=o("not"),qGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=a("a"),NGr=o("from_pretrained()"),jGr=o(" to load the model weights."),DGr=l(),F(H5.$$.fragment),GGr=l(),Ur=a("div"),F(Tx.$$.fragment),OGr=l(),W4e=a("p"),VGr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XGr=l(),Cn=a("p"),zGr=o("The model class to instantiate is selected based on the "),Q4e=a("code"),WGr=o("model_type"),QGr=o(` property of the config object (either
passed as an argument or loaded from `),H4e=a("code"),HGr=o("pretrained_model_name_or_path"),UGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U4e=a("code"),JGr=o("pretrained_model_name_or_path"),YGr=o(":"),KGr=l(),Mx=a("ul"),U5=a("li"),J4e=a("strong"),ZGr=o("beit"),eOr=o(" \u2014 "),eZ=a("a"),oOr=o("FlaxBeitForImageClassification"),rOr=o(" (BEiT model)"),tOr=l(),J5=a("li"),Y4e=a("strong"),aOr=o("vit"),nOr=o(" \u2014 "),oZ=a("a"),sOr=o("FlaxViTForImageClassification"),lOr=o(" (ViT model)"),iOr=l(),F(Y5.$$.fragment),qje=l(),df=a("h2"),K5=a("a"),K4e=a("span"),F(Ex.$$.fragment),dOr=l(),Z4e=a("span"),cOr=o("FlaxAutoModelForVision2Seq"),Nje=l(),Mr=a("div"),F(Cx.$$.fragment),fOr=l(),cf=a("p"),mOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rZ=a("a"),gOr=o("from_pretrained()"),hOr=o(" class method or the "),tZ=a("a"),pOr=o("from_config()"),uOr=o(` class
method.`),_Or=l(),wx=a("p"),bOr=o("This class cannot be instantiated directly using "),eEe=a("code"),vOr=o("__init__()"),FOr=o(" (throws an error)."),TOr=l(),Kt=a("div"),F(Ax.$$.fragment),MOr=l(),oEe=a("p"),EOr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),COr=l(),ff=a("p"),wOr=o(`Note:
Loading a model from its configuration file does `),rEe=a("strong"),AOr=o("not"),yOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),LOr=o("from_pretrained()"),xOr=o(" to load the model weights."),$Or=l(),F(Z5.$$.fragment),kOr=l(),Jr=a("div"),F(yx.$$.fragment),SOr=l(),tEe=a("p"),ROr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),POr=l(),wn=a("p"),BOr=o("The model class to instantiate is selected based on the "),aEe=a("code"),IOr=o("model_type"),qOr=o(` property of the config object (either
passed as an argument or loaded from `),nEe=a("code"),NOr=o("pretrained_model_name_or_path"),jOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sEe=a("code"),DOr=o("pretrained_model_name_or_path"),GOr=o(":"),OOr=l(),lEe=a("ul"),ew=a("li"),iEe=a("strong"),VOr=o("vision-encoder-decoder"),XOr=o(" \u2014 "),nZ=a("a"),zOr=o("FlaxVisionEncoderDecoderModel"),WOr=o(" (Vision Encoder decoder model)"),QOr=l(),F(ow.$$.fragment),this.h()},l(f){const _=vxt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Lx=s(p);m=n(Lx,"A",{id:!0,class:!0,href:!0});var dEe=s(m);u=n(dEe,"SPAN",{});var cEe=s(u);T(d.$$.fragment,cEe),cEe.forEach(t),dEe.forEach(t),h=i(Lx),Mo=n(Lx,"SPAN",{});var fEe=s(Mo);fi=r(fEe,"Auto Classes"),fEe.forEach(t),Lx.forEach(t),pf=i(f),rt=n(f,"P",{});var xx=s(rt);mi=r(xx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(xx,"CODE",{});var mEe=s(gi);vA=r(mEe,"from_pretrained()"),mEe.forEach(t),uf=r(xx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var gEe=s(yn);FA=r(gEe,"AutoConfig"),gEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var hEe=s(xn);TA=r(hEe,"AutoModel"),hEe.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var pEe=s($n);MA=r(pEe,"AutoTokenizer"),pEe.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var $x=s(Ae);G$=r($x,"will create a model that is an instance of "),_i=n($x,"A",{href:!0});var uEe=s(_i);O$=r(uEe,"BertModel"),uEe.forEach(t),V$=r($x,"."),$x.forEach(t),Eo=i(f),wa=n(f,"P",{});var kx=s(wa);X$=r(kx,"There is one class of "),bf=n(kx,"CODE",{});var _Ee=s(bf);z$=r(_Ee,"AutoModel"),_Ee.forEach(t),QGe=r(kx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),kx.forEach(t),Iqe=i(f),bi=n(f,"H2",{class:!0});var Sx=s(bi);vf=n(Sx,"A",{id:!0,class:!0,href:!0});var bEe=s(vf);Kee=n(bEe,"SPAN",{});var vEe=s(Kee);T(EA.$$.fragment,vEe),vEe.forEach(t),bEe.forEach(t),HGe=i(Sx),Zee=n(Sx,"SPAN",{});var FEe=s(Zee);UGe=r(FEe,"Extending the Auto Classes"),FEe.forEach(t),Sx.forEach(t),qqe=i(f),kn=n(f,"P",{});var mf=s(kn);JGe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),eoe=n(mf,"CODE",{});var TEe=s(eoe);YGe=r(TEe,"NewModel"),TEe.forEach(t),KGe=r(mf,", make sure you have a "),ooe=n(mf,"CODE",{});var MEe=s(ooe);ZGe=r(MEe,"NewModelConfig"),MEe.forEach(t),eOe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),Nqe=i(f),T(CA.$$.fragment,f),jqe=i(f),W$=n(f,"P",{});var EEe=s(W$);oOe=r(EEe,"You will then be able to use the auto classes like you would usually do!"),EEe.forEach(t),Dqe=i(f),T(Ff.$$.fragment,f),Gqe=i(f),vi=n(f,"H2",{class:!0});var Rx=s(vi);Tf=n(Rx,"A",{id:!0,class:!0,href:!0});var CEe=s(Tf);roe=n(CEe,"SPAN",{});var wEe=s(roe);T(wA.$$.fragment,wEe),wEe.forEach(t),CEe.forEach(t),rOe=i(Rx),toe=n(Rx,"SPAN",{});var AEe=s(toe);tOe=r(AEe,"AutoConfig"),AEe.forEach(t),Rx.forEach(t),Oqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(AA.$$.fragment,et),aOe=i(et),yA=n(et,"P",{});var Px=s(yA);nOe=r(Px,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Q$=n(Px,"A",{href:!0});var yEe=s(Q$);sOe=r(yEe,"from_pretrained()"),yEe.forEach(t),lOe=r(Px," class method."),Px.forEach(t),iOe=i(et),LA=n(et,"P",{});var Bx=s(LA);dOe=r(Bx,"This class cannot be instantiated directly using "),aoe=n(Bx,"CODE",{});var LEe=s(aoe);cOe=r(LEe,"__init__()"),LEe.forEach(t),fOe=r(Bx," (throws an error)."),Bx.forEach(t),mOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(xA.$$.fragment,ot),gOe=i(ot),noe=n(ot,"P",{});var xEe=s(noe);hOe=r(xEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),xEe.forEach(t),pOe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);uOe=r(gf,"The configuration class to instantiate is selected based on the "),soe=n(gf,"CODE",{});var $Ee=s(soe);_Oe=r($Ee,"model_type"),$Ee.forEach(t),bOe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),loe=n(gf,"CODE",{});var kEe=s(loe);vOe=r(kEe,"pretrained_model_name_or_path"),kEe.forEach(t),FOe=r(gf,":"),gf.forEach(t),TOe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var rw=s(Mf);ioe=n(rw,"STRONG",{});var SEe=s(ioe);MOe=r(SEe,"albert"),SEe.forEach(t),EOe=r(rw," \u2014 "),H$=n(rw,"A",{href:!0});var REe=s(H$);COe=r(REe,"AlbertConfig"),REe.forEach(t),wOe=r(rw," (ALBERT model)"),rw.forEach(t),AOe=i(y),Ef=n(y,"LI",{});var tw=s(Ef);doe=n(tw,"STRONG",{});var PEe=s(doe);yOe=r(PEe,"bart"),PEe.forEach(t),LOe=r(tw," \u2014 "),U$=n(tw,"A",{href:!0});var BEe=s(U$);xOe=r(BEe,"BartConfig"),BEe.forEach(t),$Oe=r(tw," (BART model)"),tw.forEach(t),kOe=i(y),Cf=n(y,"LI",{});var aw=s(Cf);coe=n(aw,"STRONG",{});var IEe=s(coe);SOe=r(IEe,"beit"),IEe.forEach(t),ROe=r(aw," \u2014 "),J$=n(aw,"A",{href:!0});var qEe=s(J$);POe=r(qEe,"BeitConfig"),qEe.forEach(t),BOe=r(aw," (BEiT model)"),aw.forEach(t),IOe=i(y),wf=n(y,"LI",{});var nw=s(wf);foe=n(nw,"STRONG",{});var NEe=s(foe);qOe=r(NEe,"bert"),NEe.forEach(t),NOe=r(nw," \u2014 "),Y$=n(nw,"A",{href:!0});var jEe=s(Y$);jOe=r(jEe,"BertConfig"),jEe.forEach(t),DOe=r(nw," (BERT model)"),nw.forEach(t),GOe=i(y),Af=n(y,"LI",{});var sw=s(Af);moe=n(sw,"STRONG",{});var DEe=s(moe);OOe=r(DEe,"bert-generation"),DEe.forEach(t),VOe=r(sw," \u2014 "),K$=n(sw,"A",{href:!0});var GEe=s(K$);XOe=r(GEe,"BertGenerationConfig"),GEe.forEach(t),zOe=r(sw," (Bert Generation model)"),sw.forEach(t),WOe=i(y),yf=n(y,"LI",{});var lw=s(yf);goe=n(lw,"STRONG",{});var OEe=s(goe);QOe=r(OEe,"big_bird"),OEe.forEach(t),HOe=r(lw," \u2014 "),Z$=n(lw,"A",{href:!0});var VEe=s(Z$);UOe=r(VEe,"BigBirdConfig"),VEe.forEach(t),JOe=r(lw," (BigBird model)"),lw.forEach(t),YOe=i(y),Lf=n(y,"LI",{});var iw=s(Lf);hoe=n(iw,"STRONG",{});var XEe=s(hoe);KOe=r(XEe,"bigbird_pegasus"),XEe.forEach(t),ZOe=r(iw," \u2014 "),ek=n(iw,"A",{href:!0});var zEe=s(ek);eVe=r(zEe,"BigBirdPegasusConfig"),zEe.forEach(t),oVe=r(iw," (BigBirdPegasus model)"),iw.forEach(t),rVe=i(y),xf=n(y,"LI",{});var dw=s(xf);poe=n(dw,"STRONG",{});var WEe=s(poe);tVe=r(WEe,"blenderbot"),WEe.forEach(t),aVe=r(dw," \u2014 "),ok=n(dw,"A",{href:!0});var QEe=s(ok);nVe=r(QEe,"BlenderbotConfig"),QEe.forEach(t),sVe=r(dw," (Blenderbot model)"),dw.forEach(t),lVe=i(y),$f=n(y,"LI",{});var cw=s($f);uoe=n(cw,"STRONG",{});var HEe=s(uoe);iVe=r(HEe,"blenderbot-small"),HEe.forEach(t),dVe=r(cw," \u2014 "),rk=n(cw,"A",{href:!0});var UEe=s(rk);cVe=r(UEe,"BlenderbotSmallConfig"),UEe.forEach(t),fVe=r(cw," (BlenderbotSmall model)"),cw.forEach(t),mVe=i(y),kf=n(y,"LI",{});var fw=s(kf);_oe=n(fw,"STRONG",{});var JEe=s(_oe);gVe=r(JEe,"camembert"),JEe.forEach(t),hVe=r(fw," \u2014 "),tk=n(fw,"A",{href:!0});var YEe=s(tk);pVe=r(YEe,"CamembertConfig"),YEe.forEach(t),uVe=r(fw," (CamemBERT model)"),fw.forEach(t),_Ve=i(y),Sf=n(y,"LI",{});var mw=s(Sf);boe=n(mw,"STRONG",{});var KEe=s(boe);bVe=r(KEe,"canine"),KEe.forEach(t),vVe=r(mw," \u2014 "),ak=n(mw,"A",{href:!0});var ZEe=s(ak);FVe=r(ZEe,"CanineConfig"),ZEe.forEach(t),TVe=r(mw," (Canine model)"),mw.forEach(t),MVe=i(y),Rf=n(y,"LI",{});var gw=s(Rf);voe=n(gw,"STRONG",{});var eCe=s(voe);EVe=r(eCe,"clip"),eCe.forEach(t),CVe=r(gw," \u2014 "),nk=n(gw,"A",{href:!0});var oCe=s(nk);wVe=r(oCe,"CLIPConfig"),oCe.forEach(t),AVe=r(gw," (CLIP model)"),gw.forEach(t),yVe=i(y),Pf=n(y,"LI",{});var hw=s(Pf);Foe=n(hw,"STRONG",{});var rCe=s(Foe);LVe=r(rCe,"convbert"),rCe.forEach(t),xVe=r(hw," \u2014 "),sk=n(hw,"A",{href:!0});var tCe=s(sk);$Ve=r(tCe,"ConvBertConfig"),tCe.forEach(t),kVe=r(hw," (ConvBERT model)"),hw.forEach(t),SVe=i(y),Bf=n(y,"LI",{});var pw=s(Bf);Toe=n(pw,"STRONG",{});var aCe=s(Toe);RVe=r(aCe,"convnext"),aCe.forEach(t),PVe=r(pw," \u2014 "),lk=n(pw,"A",{href:!0});var nCe=s(lk);BVe=r(nCe,"ConvNextConfig"),nCe.forEach(t),IVe=r(pw," (ConvNext model)"),pw.forEach(t),qVe=i(y),If=n(y,"LI",{});var uw=s(If);Moe=n(uw,"STRONG",{});var sCe=s(Moe);NVe=r(sCe,"ctrl"),sCe.forEach(t),jVe=r(uw," \u2014 "),ik=n(uw,"A",{href:!0});var lCe=s(ik);DVe=r(lCe,"CTRLConfig"),lCe.forEach(t),GVe=r(uw," (CTRL model)"),uw.forEach(t),OVe=i(y),qf=n(y,"LI",{});var _w=s(qf);Eoe=n(_w,"STRONG",{});var iCe=s(Eoe);VVe=r(iCe,"cvt"),iCe.forEach(t),XVe=r(_w," \u2014 "),dk=n(_w,"A",{href:!0});var dCe=s(dk);zVe=r(dCe,"CvtConfig"),dCe.forEach(t),WVe=r(_w," (CvT model)"),_w.forEach(t),QVe=i(y),Nf=n(y,"LI",{});var bw=s(Nf);Coe=n(bw,"STRONG",{});var cCe=s(Coe);HVe=r(cCe,"data2vec-audio"),cCe.forEach(t),UVe=r(bw," \u2014 "),ck=n(bw,"A",{href:!0});var fCe=s(ck);JVe=r(fCe,"Data2VecAudioConfig"),fCe.forEach(t),YVe=r(bw," (Data2VecAudio model)"),bw.forEach(t),KVe=i(y),jf=n(y,"LI",{});var vw=s(jf);woe=n(vw,"STRONG",{});var mCe=s(woe);ZVe=r(mCe,"data2vec-text"),mCe.forEach(t),eXe=r(vw," \u2014 "),fk=n(vw,"A",{href:!0});var gCe=s(fk);oXe=r(gCe,"Data2VecTextConfig"),gCe.forEach(t),rXe=r(vw," (Data2VecText model)"),vw.forEach(t),tXe=i(y),Df=n(y,"LI",{});var Fw=s(Df);Aoe=n(Fw,"STRONG",{});var hCe=s(Aoe);aXe=r(hCe,"data2vec-vision"),hCe.forEach(t),nXe=r(Fw," \u2014 "),mk=n(Fw,"A",{href:!0});var pCe=s(mk);sXe=r(pCe,"Data2VecVisionConfig"),pCe.forEach(t),lXe=r(Fw," (Data2VecVision model)"),Fw.forEach(t),iXe=i(y),Gf=n(y,"LI",{});var Tw=s(Gf);yoe=n(Tw,"STRONG",{});var uCe=s(yoe);dXe=r(uCe,"deberta"),uCe.forEach(t),cXe=r(Tw," \u2014 "),gk=n(Tw,"A",{href:!0});var _Ce=s(gk);fXe=r(_Ce,"DebertaConfig"),_Ce.forEach(t),mXe=r(Tw," (DeBERTa model)"),Tw.forEach(t),gXe=i(y),Of=n(y,"LI",{});var Mw=s(Of);Loe=n(Mw,"STRONG",{});var bCe=s(Loe);hXe=r(bCe,"deberta-v2"),bCe.forEach(t),pXe=r(Mw," \u2014 "),hk=n(Mw,"A",{href:!0});var vCe=s(hk);uXe=r(vCe,"DebertaV2Config"),vCe.forEach(t),_Xe=r(Mw," (DeBERTa-v2 model)"),Mw.forEach(t),bXe=i(y),Vf=n(y,"LI",{});var Ew=s(Vf);xoe=n(Ew,"STRONG",{});var FCe=s(xoe);vXe=r(FCe,"decision_transformer"),FCe.forEach(t),FXe=r(Ew," \u2014 "),pk=n(Ew,"A",{href:!0});var TCe=s(pk);TXe=r(TCe,"DecisionTransformerConfig"),TCe.forEach(t),MXe=r(Ew," (Decision Transformer model)"),Ew.forEach(t),EXe=i(y),Xf=n(y,"LI",{});var Cw=s(Xf);$oe=n(Cw,"STRONG",{});var MCe=s($oe);CXe=r(MCe,"deit"),MCe.forEach(t),wXe=r(Cw," \u2014 "),uk=n(Cw,"A",{href:!0});var UOr=s(uk);AXe=r(UOr,"DeiTConfig"),UOr.forEach(t),yXe=r(Cw," (DeiT model)"),Cw.forEach(t),LXe=i(y),zf=n(y,"LI",{});var ECe=s(zf);koe=n(ECe,"STRONG",{});var JOr=s(koe);xXe=r(JOr,"detr"),JOr.forEach(t),$Xe=r(ECe," \u2014 "),_k=n(ECe,"A",{href:!0});var YOr=s(_k);kXe=r(YOr,"DetrConfig"),YOr.forEach(t),SXe=r(ECe," (DETR model)"),ECe.forEach(t),RXe=i(y),Wf=n(y,"LI",{});var CCe=s(Wf);Soe=n(CCe,"STRONG",{});var KOr=s(Soe);PXe=r(KOr,"distilbert"),KOr.forEach(t),BXe=r(CCe," \u2014 "),bk=n(CCe,"A",{href:!0});var ZOr=s(bk);IXe=r(ZOr,"DistilBertConfig"),ZOr.forEach(t),qXe=r(CCe," (DistilBERT model)"),CCe.forEach(t),NXe=i(y),Qf=n(y,"LI",{});var wCe=s(Qf);Roe=n(wCe,"STRONG",{});var eVr=s(Roe);jXe=r(eVr,"dpr"),eVr.forEach(t),DXe=r(wCe," \u2014 "),vk=n(wCe,"A",{href:!0});var oVr=s(vk);GXe=r(oVr,"DPRConfig"),oVr.forEach(t),OXe=r(wCe," (DPR model)"),wCe.forEach(t),VXe=i(y),Hf=n(y,"LI",{});var ACe=s(Hf);Poe=n(ACe,"STRONG",{});var rVr=s(Poe);XXe=r(rVr,"dpt"),rVr.forEach(t),zXe=r(ACe," \u2014 "),Fk=n(ACe,"A",{href:!0});var tVr=s(Fk);WXe=r(tVr,"DPTConfig"),tVr.forEach(t),QXe=r(ACe," (DPT model)"),ACe.forEach(t),HXe=i(y),Uf=n(y,"LI",{});var yCe=s(Uf);Boe=n(yCe,"STRONG",{});var aVr=s(Boe);UXe=r(aVr,"electra"),aVr.forEach(t),JXe=r(yCe," \u2014 "),Tk=n(yCe,"A",{href:!0});var nVr=s(Tk);YXe=r(nVr,"ElectraConfig"),nVr.forEach(t),KXe=r(yCe," (ELECTRA model)"),yCe.forEach(t),ZXe=i(y),Jf=n(y,"LI",{});var LCe=s(Jf);Ioe=n(LCe,"STRONG",{});var sVr=s(Ioe);eze=r(sVr,"encoder-decoder"),sVr.forEach(t),oze=r(LCe," \u2014 "),Mk=n(LCe,"A",{href:!0});var lVr=s(Mk);rze=r(lVr,"EncoderDecoderConfig"),lVr.forEach(t),tze=r(LCe," (Encoder decoder model)"),LCe.forEach(t),aze=i(y),Yf=n(y,"LI",{});var xCe=s(Yf);qoe=n(xCe,"STRONG",{});var iVr=s(qoe);nze=r(iVr,"flaubert"),iVr.forEach(t),sze=r(xCe," \u2014 "),Ek=n(xCe,"A",{href:!0});var dVr=s(Ek);lze=r(dVr,"FlaubertConfig"),dVr.forEach(t),ize=r(xCe," (FlauBERT model)"),xCe.forEach(t),dze=i(y),Kf=n(y,"LI",{});var $Ce=s(Kf);Noe=n($Ce,"STRONG",{});var cVr=s(Noe);cze=r(cVr,"flava"),cVr.forEach(t),fze=r($Ce," \u2014 "),Ck=n($Ce,"A",{href:!0});var fVr=s(Ck);mze=r(fVr,"FlavaConfig"),fVr.forEach(t),gze=r($Ce," (Flava model)"),$Ce.forEach(t),hze=i(y),Zf=n(y,"LI",{});var kCe=s(Zf);joe=n(kCe,"STRONG",{});var mVr=s(joe);pze=r(mVr,"fnet"),mVr.forEach(t),uze=r(kCe," \u2014 "),wk=n(kCe,"A",{href:!0});var gVr=s(wk);_ze=r(gVr,"FNetConfig"),gVr.forEach(t),bze=r(kCe," (FNet model)"),kCe.forEach(t),vze=i(y),em=n(y,"LI",{});var SCe=s(em);Doe=n(SCe,"STRONG",{});var hVr=s(Doe);Fze=r(hVr,"fsmt"),hVr.forEach(t),Tze=r(SCe," \u2014 "),Ak=n(SCe,"A",{href:!0});var pVr=s(Ak);Mze=r(pVr,"FSMTConfig"),pVr.forEach(t),Eze=r(SCe," (FairSeq Machine-Translation model)"),SCe.forEach(t),Cze=i(y),om=n(y,"LI",{});var RCe=s(om);Goe=n(RCe,"STRONG",{});var uVr=s(Goe);wze=r(uVr,"funnel"),uVr.forEach(t),Aze=r(RCe," \u2014 "),yk=n(RCe,"A",{href:!0});var _Vr=s(yk);yze=r(_Vr,"FunnelConfig"),_Vr.forEach(t),Lze=r(RCe," (Funnel Transformer model)"),RCe.forEach(t),xze=i(y),rm=n(y,"LI",{});var PCe=s(rm);Ooe=n(PCe,"STRONG",{});var bVr=s(Ooe);$ze=r(bVr,"glpn"),bVr.forEach(t),kze=r(PCe," \u2014 "),Lk=n(PCe,"A",{href:!0});var vVr=s(Lk);Sze=r(vVr,"GLPNConfig"),vVr.forEach(t),Rze=r(PCe," (GLPN model)"),PCe.forEach(t),Pze=i(y),tm=n(y,"LI",{});var BCe=s(tm);Voe=n(BCe,"STRONG",{});var FVr=s(Voe);Bze=r(FVr,"gpt2"),FVr.forEach(t),Ize=r(BCe," \u2014 "),xk=n(BCe,"A",{href:!0});var TVr=s(xk);qze=r(TVr,"GPT2Config"),TVr.forEach(t),Nze=r(BCe," (OpenAI GPT-2 model)"),BCe.forEach(t),jze=i(y),am=n(y,"LI",{});var ICe=s(am);Xoe=n(ICe,"STRONG",{});var MVr=s(Xoe);Dze=r(MVr,"gpt_neo"),MVr.forEach(t),Gze=r(ICe," \u2014 "),$k=n(ICe,"A",{href:!0});var EVr=s($k);Oze=r(EVr,"GPTNeoConfig"),EVr.forEach(t),Vze=r(ICe," (GPT Neo model)"),ICe.forEach(t),Xze=i(y),nm=n(y,"LI",{});var qCe=s(nm);zoe=n(qCe,"STRONG",{});var CVr=s(zoe);zze=r(CVr,"gptj"),CVr.forEach(t),Wze=r(qCe," \u2014 "),kk=n(qCe,"A",{href:!0});var wVr=s(kk);Qze=r(wVr,"GPTJConfig"),wVr.forEach(t),Hze=r(qCe," (GPT-J model)"),qCe.forEach(t),Uze=i(y),sm=n(y,"LI",{});var NCe=s(sm);Woe=n(NCe,"STRONG",{});var AVr=s(Woe);Jze=r(AVr,"hubert"),AVr.forEach(t),Yze=r(NCe," \u2014 "),Sk=n(NCe,"A",{href:!0});var yVr=s(Sk);Kze=r(yVr,"HubertConfig"),yVr.forEach(t),Zze=r(NCe," (Hubert model)"),NCe.forEach(t),eWe=i(y),lm=n(y,"LI",{});var jCe=s(lm);Qoe=n(jCe,"STRONG",{});var LVr=s(Qoe);oWe=r(LVr,"ibert"),LVr.forEach(t),rWe=r(jCe," \u2014 "),Rk=n(jCe,"A",{href:!0});var xVr=s(Rk);tWe=r(xVr,"IBertConfig"),xVr.forEach(t),aWe=r(jCe," (I-BERT model)"),jCe.forEach(t),nWe=i(y),im=n(y,"LI",{});var DCe=s(im);Hoe=n(DCe,"STRONG",{});var $Vr=s(Hoe);sWe=r($Vr,"imagegpt"),$Vr.forEach(t),lWe=r(DCe," \u2014 "),Pk=n(DCe,"A",{href:!0});var kVr=s(Pk);iWe=r(kVr,"ImageGPTConfig"),kVr.forEach(t),dWe=r(DCe," (ImageGPT model)"),DCe.forEach(t),cWe=i(y),dm=n(y,"LI",{});var GCe=s(dm);Uoe=n(GCe,"STRONG",{});var SVr=s(Uoe);fWe=r(SVr,"layoutlm"),SVr.forEach(t),mWe=r(GCe," \u2014 "),Bk=n(GCe,"A",{href:!0});var RVr=s(Bk);gWe=r(RVr,"LayoutLMConfig"),RVr.forEach(t),hWe=r(GCe," (LayoutLM model)"),GCe.forEach(t),pWe=i(y),cm=n(y,"LI",{});var OCe=s(cm);Joe=n(OCe,"STRONG",{});var PVr=s(Joe);uWe=r(PVr,"layoutlmv2"),PVr.forEach(t),_We=r(OCe," \u2014 "),Ik=n(OCe,"A",{href:!0});var BVr=s(Ik);bWe=r(BVr,"LayoutLMv2Config"),BVr.forEach(t),vWe=r(OCe," (LayoutLMv2 model)"),OCe.forEach(t),FWe=i(y),fm=n(y,"LI",{});var VCe=s(fm);Yoe=n(VCe,"STRONG",{});var IVr=s(Yoe);TWe=r(IVr,"layoutlmv3"),IVr.forEach(t),MWe=r(VCe," \u2014 "),qk=n(VCe,"A",{href:!0});var qVr=s(qk);EWe=r(qVr,"LayoutLMv3Config"),qVr.forEach(t),CWe=r(VCe," (LayoutLMv3 model)"),VCe.forEach(t),wWe=i(y),mm=n(y,"LI",{});var XCe=s(mm);Koe=n(XCe,"STRONG",{});var NVr=s(Koe);AWe=r(NVr,"led"),NVr.forEach(t),yWe=r(XCe," \u2014 "),Nk=n(XCe,"A",{href:!0});var jVr=s(Nk);LWe=r(jVr,"LEDConfig"),jVr.forEach(t),xWe=r(XCe," (LED model)"),XCe.forEach(t),$We=i(y),gm=n(y,"LI",{});var zCe=s(gm);Zoe=n(zCe,"STRONG",{});var DVr=s(Zoe);kWe=r(DVr,"longformer"),DVr.forEach(t),SWe=r(zCe," \u2014 "),jk=n(zCe,"A",{href:!0});var GVr=s(jk);RWe=r(GVr,"LongformerConfig"),GVr.forEach(t),PWe=r(zCe," (Longformer model)"),zCe.forEach(t),BWe=i(y),hm=n(y,"LI",{});var WCe=s(hm);ere=n(WCe,"STRONG",{});var OVr=s(ere);IWe=r(OVr,"luke"),OVr.forEach(t),qWe=r(WCe," \u2014 "),Dk=n(WCe,"A",{href:!0});var VVr=s(Dk);NWe=r(VVr,"LukeConfig"),VVr.forEach(t),jWe=r(WCe," (LUKE model)"),WCe.forEach(t),DWe=i(y),pm=n(y,"LI",{});var QCe=s(pm);ore=n(QCe,"STRONG",{});var XVr=s(ore);GWe=r(XVr,"lxmert"),XVr.forEach(t),OWe=r(QCe," \u2014 "),Gk=n(QCe,"A",{href:!0});var zVr=s(Gk);VWe=r(zVr,"LxmertConfig"),zVr.forEach(t),XWe=r(QCe," (LXMERT model)"),QCe.forEach(t),zWe=i(y),um=n(y,"LI",{});var HCe=s(um);rre=n(HCe,"STRONG",{});var WVr=s(rre);WWe=r(WVr,"m2m_100"),WVr.forEach(t),QWe=r(HCe," \u2014 "),Ok=n(HCe,"A",{href:!0});var QVr=s(Ok);HWe=r(QVr,"M2M100Config"),QVr.forEach(t),UWe=r(HCe," (M2M100 model)"),HCe.forEach(t),JWe=i(y),_m=n(y,"LI",{});var UCe=s(_m);tre=n(UCe,"STRONG",{});var HVr=s(tre);YWe=r(HVr,"marian"),HVr.forEach(t),KWe=r(UCe," \u2014 "),Vk=n(UCe,"A",{href:!0});var UVr=s(Vk);ZWe=r(UVr,"MarianConfig"),UVr.forEach(t),eQe=r(UCe," (Marian model)"),UCe.forEach(t),oQe=i(y),bm=n(y,"LI",{});var JCe=s(bm);are=n(JCe,"STRONG",{});var JVr=s(are);rQe=r(JVr,"maskformer"),JVr.forEach(t),tQe=r(JCe," \u2014 "),Xk=n(JCe,"A",{href:!0});var YVr=s(Xk);aQe=r(YVr,"MaskFormerConfig"),YVr.forEach(t),nQe=r(JCe," (MaskFormer model)"),JCe.forEach(t),sQe=i(y),vm=n(y,"LI",{});var YCe=s(vm);nre=n(YCe,"STRONG",{});var KVr=s(nre);lQe=r(KVr,"mbart"),KVr.forEach(t),iQe=r(YCe," \u2014 "),zk=n(YCe,"A",{href:!0});var ZVr=s(zk);dQe=r(ZVr,"MBartConfig"),ZVr.forEach(t),cQe=r(YCe," (mBART model)"),YCe.forEach(t),fQe=i(y),Fm=n(y,"LI",{});var KCe=s(Fm);sre=n(KCe,"STRONG",{});var eXr=s(sre);mQe=r(eXr,"megatron-bert"),eXr.forEach(t),gQe=r(KCe," \u2014 "),Wk=n(KCe,"A",{href:!0});var oXr=s(Wk);hQe=r(oXr,"MegatronBertConfig"),oXr.forEach(t),pQe=r(KCe," (MegatronBert model)"),KCe.forEach(t),uQe=i(y),Tm=n(y,"LI",{});var ZCe=s(Tm);lre=n(ZCe,"STRONG",{});var rXr=s(lre);_Qe=r(rXr,"mobilebert"),rXr.forEach(t),bQe=r(ZCe," \u2014 "),Qk=n(ZCe,"A",{href:!0});var tXr=s(Qk);vQe=r(tXr,"MobileBertConfig"),tXr.forEach(t),FQe=r(ZCe," (MobileBERT model)"),ZCe.forEach(t),TQe=i(y),Mm=n(y,"LI",{});var e5e=s(Mm);ire=n(e5e,"STRONG",{});var aXr=s(ire);MQe=r(aXr,"mpnet"),aXr.forEach(t),EQe=r(e5e," \u2014 "),Hk=n(e5e,"A",{href:!0});var nXr=s(Hk);CQe=r(nXr,"MPNetConfig"),nXr.forEach(t),wQe=r(e5e," (MPNet model)"),e5e.forEach(t),AQe=i(y),Em=n(y,"LI",{});var o5e=s(Em);dre=n(o5e,"STRONG",{});var sXr=s(dre);yQe=r(sXr,"mt5"),sXr.forEach(t),LQe=r(o5e," \u2014 "),Uk=n(o5e,"A",{href:!0});var lXr=s(Uk);xQe=r(lXr,"MT5Config"),lXr.forEach(t),$Qe=r(o5e," (mT5 model)"),o5e.forEach(t),kQe=i(y),Cm=n(y,"LI",{});var r5e=s(Cm);cre=n(r5e,"STRONG",{});var iXr=s(cre);SQe=r(iXr,"nystromformer"),iXr.forEach(t),RQe=r(r5e," \u2014 "),Jk=n(r5e,"A",{href:!0});var dXr=s(Jk);PQe=r(dXr,"NystromformerConfig"),dXr.forEach(t),BQe=r(r5e," (Nystromformer model)"),r5e.forEach(t),IQe=i(y),wm=n(y,"LI",{});var t5e=s(wm);fre=n(t5e,"STRONG",{});var cXr=s(fre);qQe=r(cXr,"openai-gpt"),cXr.forEach(t),NQe=r(t5e," \u2014 "),Yk=n(t5e,"A",{href:!0});var fXr=s(Yk);jQe=r(fXr,"OpenAIGPTConfig"),fXr.forEach(t),DQe=r(t5e," (OpenAI GPT model)"),t5e.forEach(t),GQe=i(y),Am=n(y,"LI",{});var a5e=s(Am);mre=n(a5e,"STRONG",{});var mXr=s(mre);OQe=r(mXr,"opt"),mXr.forEach(t),VQe=r(a5e," \u2014 "),Kk=n(a5e,"A",{href:!0});var gXr=s(Kk);XQe=r(gXr,"OPTConfig"),gXr.forEach(t),zQe=r(a5e," (OPT model)"),a5e.forEach(t),WQe=i(y),ym=n(y,"LI",{});var n5e=s(ym);gre=n(n5e,"STRONG",{});var hXr=s(gre);QQe=r(hXr,"pegasus"),hXr.forEach(t),HQe=r(n5e," \u2014 "),Zk=n(n5e,"A",{href:!0});var pXr=s(Zk);UQe=r(pXr,"PegasusConfig"),pXr.forEach(t),JQe=r(n5e," (Pegasus model)"),n5e.forEach(t),YQe=i(y),Lm=n(y,"LI",{});var s5e=s(Lm);hre=n(s5e,"STRONG",{});var uXr=s(hre);KQe=r(uXr,"perceiver"),uXr.forEach(t),ZQe=r(s5e," \u2014 "),eS=n(s5e,"A",{href:!0});var _Xr=s(eS);eHe=r(_Xr,"PerceiverConfig"),_Xr.forEach(t),oHe=r(s5e," (Perceiver model)"),s5e.forEach(t),rHe=i(y),xm=n(y,"LI",{});var l5e=s(xm);pre=n(l5e,"STRONG",{});var bXr=s(pre);tHe=r(bXr,"plbart"),bXr.forEach(t),aHe=r(l5e," \u2014 "),oS=n(l5e,"A",{href:!0});var vXr=s(oS);nHe=r(vXr,"PLBartConfig"),vXr.forEach(t),sHe=r(l5e," (PLBart model)"),l5e.forEach(t),lHe=i(y),$m=n(y,"LI",{});var i5e=s($m);ure=n(i5e,"STRONG",{});var FXr=s(ure);iHe=r(FXr,"poolformer"),FXr.forEach(t),dHe=r(i5e," \u2014 "),rS=n(i5e,"A",{href:!0});var TXr=s(rS);cHe=r(TXr,"PoolFormerConfig"),TXr.forEach(t),fHe=r(i5e," (PoolFormer model)"),i5e.forEach(t),mHe=i(y),km=n(y,"LI",{});var d5e=s(km);_re=n(d5e,"STRONG",{});var MXr=s(_re);gHe=r(MXr,"prophetnet"),MXr.forEach(t),hHe=r(d5e," \u2014 "),tS=n(d5e,"A",{href:!0});var EXr=s(tS);pHe=r(EXr,"ProphetNetConfig"),EXr.forEach(t),uHe=r(d5e," (ProphetNet model)"),d5e.forEach(t),_He=i(y),Sm=n(y,"LI",{});var c5e=s(Sm);bre=n(c5e,"STRONG",{});var CXr=s(bre);bHe=r(CXr,"qdqbert"),CXr.forEach(t),vHe=r(c5e," \u2014 "),aS=n(c5e,"A",{href:!0});var wXr=s(aS);FHe=r(wXr,"QDQBertConfig"),wXr.forEach(t),THe=r(c5e," (QDQBert model)"),c5e.forEach(t),MHe=i(y),Rm=n(y,"LI",{});var f5e=s(Rm);vre=n(f5e,"STRONG",{});var AXr=s(vre);EHe=r(AXr,"rag"),AXr.forEach(t),CHe=r(f5e," \u2014 "),nS=n(f5e,"A",{href:!0});var yXr=s(nS);wHe=r(yXr,"RagConfig"),yXr.forEach(t),AHe=r(f5e," (RAG model)"),f5e.forEach(t),yHe=i(y),Pm=n(y,"LI",{});var m5e=s(Pm);Fre=n(m5e,"STRONG",{});var LXr=s(Fre);LHe=r(LXr,"realm"),LXr.forEach(t),xHe=r(m5e," \u2014 "),sS=n(m5e,"A",{href:!0});var xXr=s(sS);$He=r(xXr,"RealmConfig"),xXr.forEach(t),kHe=r(m5e," (Realm model)"),m5e.forEach(t),SHe=i(y),Bm=n(y,"LI",{});var g5e=s(Bm);Tre=n(g5e,"STRONG",{});var $Xr=s(Tre);RHe=r($Xr,"reformer"),$Xr.forEach(t),PHe=r(g5e," \u2014 "),lS=n(g5e,"A",{href:!0});var kXr=s(lS);BHe=r(kXr,"ReformerConfig"),kXr.forEach(t),IHe=r(g5e," (Reformer model)"),g5e.forEach(t),qHe=i(y),Im=n(y,"LI",{});var h5e=s(Im);Mre=n(h5e,"STRONG",{});var SXr=s(Mre);NHe=r(SXr,"regnet"),SXr.forEach(t),jHe=r(h5e," \u2014 "),iS=n(h5e,"A",{href:!0});var RXr=s(iS);DHe=r(RXr,"RegNetConfig"),RXr.forEach(t),GHe=r(h5e," (RegNet model)"),h5e.forEach(t),OHe=i(y),qm=n(y,"LI",{});var p5e=s(qm);Ere=n(p5e,"STRONG",{});var PXr=s(Ere);VHe=r(PXr,"rembert"),PXr.forEach(t),XHe=r(p5e," \u2014 "),dS=n(p5e,"A",{href:!0});var BXr=s(dS);zHe=r(BXr,"RemBertConfig"),BXr.forEach(t),WHe=r(p5e," (RemBERT model)"),p5e.forEach(t),QHe=i(y),Nm=n(y,"LI",{});var u5e=s(Nm);Cre=n(u5e,"STRONG",{});var IXr=s(Cre);HHe=r(IXr,"resnet"),IXr.forEach(t),UHe=r(u5e," \u2014 "),cS=n(u5e,"A",{href:!0});var qXr=s(cS);JHe=r(qXr,"ResNetConfig"),qXr.forEach(t),YHe=r(u5e," (ResNet model)"),u5e.forEach(t),KHe=i(y),jm=n(y,"LI",{});var _5e=s(jm);wre=n(_5e,"STRONG",{});var NXr=s(wre);ZHe=r(NXr,"retribert"),NXr.forEach(t),eUe=r(_5e," \u2014 "),fS=n(_5e,"A",{href:!0});var jXr=s(fS);oUe=r(jXr,"RetriBertConfig"),jXr.forEach(t),rUe=r(_5e," (RetriBERT model)"),_5e.forEach(t),tUe=i(y),Dm=n(y,"LI",{});var b5e=s(Dm);Are=n(b5e,"STRONG",{});var DXr=s(Are);aUe=r(DXr,"roberta"),DXr.forEach(t),nUe=r(b5e," \u2014 "),mS=n(b5e,"A",{href:!0});var GXr=s(mS);sUe=r(GXr,"RobertaConfig"),GXr.forEach(t),lUe=r(b5e," (RoBERTa model)"),b5e.forEach(t),iUe=i(y),Gm=n(y,"LI",{});var v5e=s(Gm);yre=n(v5e,"STRONG",{});var OXr=s(yre);dUe=r(OXr,"roformer"),OXr.forEach(t),cUe=r(v5e," \u2014 "),gS=n(v5e,"A",{href:!0});var VXr=s(gS);fUe=r(VXr,"RoFormerConfig"),VXr.forEach(t),mUe=r(v5e," (RoFormer model)"),v5e.forEach(t),gUe=i(y),Om=n(y,"LI",{});var F5e=s(Om);Lre=n(F5e,"STRONG",{});var XXr=s(Lre);hUe=r(XXr,"segformer"),XXr.forEach(t),pUe=r(F5e," \u2014 "),hS=n(F5e,"A",{href:!0});var zXr=s(hS);uUe=r(zXr,"SegformerConfig"),zXr.forEach(t),_Ue=r(F5e," (SegFormer model)"),F5e.forEach(t),bUe=i(y),Vm=n(y,"LI",{});var T5e=s(Vm);xre=n(T5e,"STRONG",{});var WXr=s(xre);vUe=r(WXr,"sew"),WXr.forEach(t),FUe=r(T5e," \u2014 "),pS=n(T5e,"A",{href:!0});var QXr=s(pS);TUe=r(QXr,"SEWConfig"),QXr.forEach(t),MUe=r(T5e," (SEW model)"),T5e.forEach(t),EUe=i(y),Xm=n(y,"LI",{});var M5e=s(Xm);$re=n(M5e,"STRONG",{});var HXr=s($re);CUe=r(HXr,"sew-d"),HXr.forEach(t),wUe=r(M5e," \u2014 "),uS=n(M5e,"A",{href:!0});var UXr=s(uS);AUe=r(UXr,"SEWDConfig"),UXr.forEach(t),yUe=r(M5e," (SEW-D model)"),M5e.forEach(t),LUe=i(y),zm=n(y,"LI",{});var E5e=s(zm);kre=n(E5e,"STRONG",{});var JXr=s(kre);xUe=r(JXr,"speech-encoder-decoder"),JXr.forEach(t),$Ue=r(E5e," \u2014 "),_S=n(E5e,"A",{href:!0});var YXr=s(_S);kUe=r(YXr,"SpeechEncoderDecoderConfig"),YXr.forEach(t),SUe=r(E5e," (Speech Encoder decoder model)"),E5e.forEach(t),RUe=i(y),Wm=n(y,"LI",{});var C5e=s(Wm);Sre=n(C5e,"STRONG",{});var KXr=s(Sre);PUe=r(KXr,"speech_to_text"),KXr.forEach(t),BUe=r(C5e," \u2014 "),bS=n(C5e,"A",{href:!0});var ZXr=s(bS);IUe=r(ZXr,"Speech2TextConfig"),ZXr.forEach(t),qUe=r(C5e," (Speech2Text model)"),C5e.forEach(t),NUe=i(y),Qm=n(y,"LI",{});var w5e=s(Qm);Rre=n(w5e,"STRONG",{});var ezr=s(Rre);jUe=r(ezr,"speech_to_text_2"),ezr.forEach(t),DUe=r(w5e," \u2014 "),vS=n(w5e,"A",{href:!0});var ozr=s(vS);GUe=r(ozr,"Speech2Text2Config"),ozr.forEach(t),OUe=r(w5e," (Speech2Text2 model)"),w5e.forEach(t),VUe=i(y),Hm=n(y,"LI",{});var A5e=s(Hm);Pre=n(A5e,"STRONG",{});var rzr=s(Pre);XUe=r(rzr,"splinter"),rzr.forEach(t),zUe=r(A5e," \u2014 "),FS=n(A5e,"A",{href:!0});var tzr=s(FS);WUe=r(tzr,"SplinterConfig"),tzr.forEach(t),QUe=r(A5e," (Splinter model)"),A5e.forEach(t),HUe=i(y),Um=n(y,"LI",{});var y5e=s(Um);Bre=n(y5e,"STRONG",{});var azr=s(Bre);UUe=r(azr,"squeezebert"),azr.forEach(t),JUe=r(y5e," \u2014 "),TS=n(y5e,"A",{href:!0});var nzr=s(TS);YUe=r(nzr,"SqueezeBertConfig"),nzr.forEach(t),KUe=r(y5e," (SqueezeBERT model)"),y5e.forEach(t),ZUe=i(y),Jm=n(y,"LI",{});var L5e=s(Jm);Ire=n(L5e,"STRONG",{});var szr=s(Ire);eJe=r(szr,"swin"),szr.forEach(t),oJe=r(L5e," \u2014 "),MS=n(L5e,"A",{href:!0});var lzr=s(MS);rJe=r(lzr,"SwinConfig"),lzr.forEach(t),tJe=r(L5e," (Swin model)"),L5e.forEach(t),aJe=i(y),Ym=n(y,"LI",{});var x5e=s(Ym);qre=n(x5e,"STRONG",{});var izr=s(qre);nJe=r(izr,"t5"),izr.forEach(t),sJe=r(x5e," \u2014 "),ES=n(x5e,"A",{href:!0});var dzr=s(ES);lJe=r(dzr,"T5Config"),dzr.forEach(t),iJe=r(x5e," (T5 model)"),x5e.forEach(t),dJe=i(y),Km=n(y,"LI",{});var $5e=s(Km);Nre=n($5e,"STRONG",{});var czr=s(Nre);cJe=r(czr,"tapas"),czr.forEach(t),fJe=r($5e," \u2014 "),CS=n($5e,"A",{href:!0});var fzr=s(CS);mJe=r(fzr,"TapasConfig"),fzr.forEach(t),gJe=r($5e," (TAPAS model)"),$5e.forEach(t),hJe=i(y),Zm=n(y,"LI",{});var k5e=s(Zm);jre=n(k5e,"STRONG",{});var mzr=s(jre);pJe=r(mzr,"trajectory_transformer"),mzr.forEach(t),uJe=r(k5e," \u2014 "),wS=n(k5e,"A",{href:!0});var gzr=s(wS);_Je=r(gzr,"TrajectoryTransformerConfig"),gzr.forEach(t),bJe=r(k5e," (Trajectory Transformer model)"),k5e.forEach(t),vJe=i(y),eg=n(y,"LI",{});var S5e=s(eg);Dre=n(S5e,"STRONG",{});var hzr=s(Dre);FJe=r(hzr,"transfo-xl"),hzr.forEach(t),TJe=r(S5e," \u2014 "),AS=n(S5e,"A",{href:!0});var pzr=s(AS);MJe=r(pzr,"TransfoXLConfig"),pzr.forEach(t),EJe=r(S5e," (Transformer-XL model)"),S5e.forEach(t),CJe=i(y),og=n(y,"LI",{});var R5e=s(og);Gre=n(R5e,"STRONG",{});var uzr=s(Gre);wJe=r(uzr,"trocr"),uzr.forEach(t),AJe=r(R5e," \u2014 "),yS=n(R5e,"A",{href:!0});var _zr=s(yS);yJe=r(_zr,"TrOCRConfig"),_zr.forEach(t),LJe=r(R5e," (TrOCR model)"),R5e.forEach(t),xJe=i(y),rg=n(y,"LI",{});var P5e=s(rg);Ore=n(P5e,"STRONG",{});var bzr=s(Ore);$Je=r(bzr,"unispeech"),bzr.forEach(t),kJe=r(P5e," \u2014 "),LS=n(P5e,"A",{href:!0});var vzr=s(LS);SJe=r(vzr,"UniSpeechConfig"),vzr.forEach(t),RJe=r(P5e," (UniSpeech model)"),P5e.forEach(t),PJe=i(y),tg=n(y,"LI",{});var B5e=s(tg);Vre=n(B5e,"STRONG",{});var Fzr=s(Vre);BJe=r(Fzr,"unispeech-sat"),Fzr.forEach(t),IJe=r(B5e," \u2014 "),xS=n(B5e,"A",{href:!0});var Tzr=s(xS);qJe=r(Tzr,"UniSpeechSatConfig"),Tzr.forEach(t),NJe=r(B5e," (UniSpeechSat model)"),B5e.forEach(t),jJe=i(y),ag=n(y,"LI",{});var I5e=s(ag);Xre=n(I5e,"STRONG",{});var Mzr=s(Xre);DJe=r(Mzr,"van"),Mzr.forEach(t),GJe=r(I5e," \u2014 "),$S=n(I5e,"A",{href:!0});var Ezr=s($S);OJe=r(Ezr,"VanConfig"),Ezr.forEach(t),VJe=r(I5e," (VAN model)"),I5e.forEach(t),XJe=i(y),ng=n(y,"LI",{});var q5e=s(ng);zre=n(q5e,"STRONG",{});var Czr=s(zre);zJe=r(Czr,"vilt"),Czr.forEach(t),WJe=r(q5e," \u2014 "),kS=n(q5e,"A",{href:!0});var wzr=s(kS);QJe=r(wzr,"ViltConfig"),wzr.forEach(t),HJe=r(q5e," (ViLT model)"),q5e.forEach(t),UJe=i(y),sg=n(y,"LI",{});var N5e=s(sg);Wre=n(N5e,"STRONG",{});var Azr=s(Wre);JJe=r(Azr,"vision-encoder-decoder"),Azr.forEach(t),YJe=r(N5e," \u2014 "),SS=n(N5e,"A",{href:!0});var yzr=s(SS);KJe=r(yzr,"VisionEncoderDecoderConfig"),yzr.forEach(t),ZJe=r(N5e," (Vision Encoder decoder model)"),N5e.forEach(t),eYe=i(y),lg=n(y,"LI",{});var j5e=s(lg);Qre=n(j5e,"STRONG",{});var Lzr=s(Qre);oYe=r(Lzr,"vision-text-dual-encoder"),Lzr.forEach(t),rYe=r(j5e," \u2014 "),RS=n(j5e,"A",{href:!0});var xzr=s(RS);tYe=r(xzr,"VisionTextDualEncoderConfig"),xzr.forEach(t),aYe=r(j5e," (VisionTextDualEncoder model)"),j5e.forEach(t),nYe=i(y),ig=n(y,"LI",{});var D5e=s(ig);Hre=n(D5e,"STRONG",{});var $zr=s(Hre);sYe=r($zr,"visual_bert"),$zr.forEach(t),lYe=r(D5e," \u2014 "),PS=n(D5e,"A",{href:!0});var kzr=s(PS);iYe=r(kzr,"VisualBertConfig"),kzr.forEach(t),dYe=r(D5e," (VisualBert model)"),D5e.forEach(t),cYe=i(y),dg=n(y,"LI",{});var G5e=s(dg);Ure=n(G5e,"STRONG",{});var Szr=s(Ure);fYe=r(Szr,"vit"),Szr.forEach(t),mYe=r(G5e," \u2014 "),BS=n(G5e,"A",{href:!0});var Rzr=s(BS);gYe=r(Rzr,"ViTConfig"),Rzr.forEach(t),hYe=r(G5e," (ViT model)"),G5e.forEach(t),pYe=i(y),cg=n(y,"LI",{});var O5e=s(cg);Jre=n(O5e,"STRONG",{});var Pzr=s(Jre);uYe=r(Pzr,"vit_mae"),Pzr.forEach(t),_Ye=r(O5e," \u2014 "),IS=n(O5e,"A",{href:!0});var Bzr=s(IS);bYe=r(Bzr,"ViTMAEConfig"),Bzr.forEach(t),vYe=r(O5e," (ViTMAE model)"),O5e.forEach(t),FYe=i(y),fg=n(y,"LI",{});var V5e=s(fg);Yre=n(V5e,"STRONG",{});var Izr=s(Yre);TYe=r(Izr,"wav2vec2"),Izr.forEach(t),MYe=r(V5e," \u2014 "),qS=n(V5e,"A",{href:!0});var qzr=s(qS);EYe=r(qzr,"Wav2Vec2Config"),qzr.forEach(t),CYe=r(V5e," (Wav2Vec2 model)"),V5e.forEach(t),wYe=i(y),mg=n(y,"LI",{});var X5e=s(mg);Kre=n(X5e,"STRONG",{});var Nzr=s(Kre);AYe=r(Nzr,"wav2vec2-conformer"),Nzr.forEach(t),yYe=r(X5e," \u2014 "),NS=n(X5e,"A",{href:!0});var jzr=s(NS);LYe=r(jzr,"Wav2Vec2ConformerConfig"),jzr.forEach(t),xYe=r(X5e," (Wav2Vec2-Conformer model)"),X5e.forEach(t),$Ye=i(y),gg=n(y,"LI",{});var z5e=s(gg);Zre=n(z5e,"STRONG",{});var Dzr=s(Zre);kYe=r(Dzr,"wavlm"),Dzr.forEach(t),SYe=r(z5e," \u2014 "),jS=n(z5e,"A",{href:!0});var Gzr=s(jS);RYe=r(Gzr,"WavLMConfig"),Gzr.forEach(t),PYe=r(z5e," (WavLM model)"),z5e.forEach(t),BYe=i(y),hg=n(y,"LI",{});var W5e=s(hg);ete=n(W5e,"STRONG",{});var Ozr=s(ete);IYe=r(Ozr,"xglm"),Ozr.forEach(t),qYe=r(W5e," \u2014 "),DS=n(W5e,"A",{href:!0});var Vzr=s(DS);NYe=r(Vzr,"XGLMConfig"),Vzr.forEach(t),jYe=r(W5e," (XGLM model)"),W5e.forEach(t),DYe=i(y),pg=n(y,"LI",{});var Q5e=s(pg);ote=n(Q5e,"STRONG",{});var Xzr=s(ote);GYe=r(Xzr,"xlm"),Xzr.forEach(t),OYe=r(Q5e," \u2014 "),GS=n(Q5e,"A",{href:!0});var zzr=s(GS);VYe=r(zzr,"XLMConfig"),zzr.forEach(t),XYe=r(Q5e," (XLM model)"),Q5e.forEach(t),zYe=i(y),ug=n(y,"LI",{});var H5e=s(ug);rte=n(H5e,"STRONG",{});var Wzr=s(rte);WYe=r(Wzr,"xlm-prophetnet"),Wzr.forEach(t),QYe=r(H5e," \u2014 "),OS=n(H5e,"A",{href:!0});var Qzr=s(OS);HYe=r(Qzr,"XLMProphetNetConfig"),Qzr.forEach(t),UYe=r(H5e," (XLMProphetNet model)"),H5e.forEach(t),JYe=i(y),_g=n(y,"LI",{});var U5e=s(_g);tte=n(U5e,"STRONG",{});var Hzr=s(tte);YYe=r(Hzr,"xlm-roberta"),Hzr.forEach(t),KYe=r(U5e," \u2014 "),VS=n(U5e,"A",{href:!0});var Uzr=s(VS);ZYe=r(Uzr,"XLMRobertaConfig"),Uzr.forEach(t),eKe=r(U5e," (XLM-RoBERTa model)"),U5e.forEach(t),oKe=i(y),bg=n(y,"LI",{});var J5e=s(bg);ate=n(J5e,"STRONG",{});var Jzr=s(ate);rKe=r(Jzr,"xlm-roberta-xl"),Jzr.forEach(t),tKe=r(J5e," \u2014 "),XS=n(J5e,"A",{href:!0});var Yzr=s(XS);aKe=r(Yzr,"XLMRobertaXLConfig"),Yzr.forEach(t),nKe=r(J5e," (XLM-RoBERTa-XL model)"),J5e.forEach(t),sKe=i(y),vg=n(y,"LI",{});var Y5e=s(vg);nte=n(Y5e,"STRONG",{});var Kzr=s(nte);lKe=r(Kzr,"xlnet"),Kzr.forEach(t),iKe=r(Y5e," \u2014 "),zS=n(Y5e,"A",{href:!0});var Zzr=s(zS);dKe=r(Zzr,"XLNetConfig"),Zzr.forEach(t),cKe=r(Y5e," (XLNet model)"),Y5e.forEach(t),fKe=i(y),Fg=n(y,"LI",{});var K5e=s(Fg);ste=n(K5e,"STRONG",{});var eWr=s(ste);mKe=r(eWr,"yolos"),eWr.forEach(t),gKe=r(K5e," \u2014 "),WS=n(K5e,"A",{href:!0});var oWr=s(WS);hKe=r(oWr,"YolosConfig"),oWr.forEach(t),pKe=r(K5e," (YOLOS model)"),K5e.forEach(t),uKe=i(y),Tg=n(y,"LI",{});var Z5e=s(Tg);lte=n(Z5e,"STRONG",{});var rWr=s(lte);_Ke=r(rWr,"yoso"),rWr.forEach(t),bKe=r(Z5e," \u2014 "),QS=n(Z5e,"A",{href:!0});var tWr=s(QS);vKe=r(tWr,"YosoConfig"),tWr.forEach(t),FKe=r(Z5e," (YOSO model)"),Z5e.forEach(t),y.forEach(t),TKe=i(ot),T(Mg.$$.fragment,ot),ot.forEach(t),MKe=i(et),Eg=n(et,"DIV",{class:!0});var Dje=s(Eg);T($A.$$.fragment,Dje),EKe=i(Dje),ite=n(Dje,"P",{});var aWr=s(ite);CKe=r(aWr,"Register a new configuration for this class."),aWr.forEach(t),Dje.forEach(t),et.forEach(t),Vqe=i(f),Ti=n(f,"H2",{class:!0});var Gje=s(Ti);Cg=n(Gje,"A",{id:!0,class:!0,href:!0});var nWr=s(Cg);dte=n(nWr,"SPAN",{});var sWr=s(dte);T(kA.$$.fragment,sWr),sWr.forEach(t),nWr.forEach(t),wKe=i(Gje),cte=n(Gje,"SPAN",{});var lWr=s(cte);AKe=r(lWr,"AutoTokenizer"),lWr.forEach(t),Gje.forEach(t),Xqe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(SA.$$.fragment,qs),yKe=i(qs),RA=n(qs,"P",{});var Oje=s(RA);LKe=r(Oje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),HS=n(Oje,"A",{href:!0});var iWr=s(HS);xKe=r(iWr,"AutoTokenizer.from_pretrained()"),iWr.forEach(t),$Ke=r(Oje," class method."),Oje.forEach(t),kKe=i(qs),PA=n(qs,"P",{});var Vje=s(PA);SKe=r(Vje,"This class cannot be instantiated directly using "),fte=n(Vje,"CODE",{});var dWr=s(fte);RKe=r(dWr,"__init__()"),dWr.forEach(t),PKe=r(Vje," (throws an error)."),Vje.forEach(t),BKe=i(qs),Cr=n(qs,"DIV",{class:!0});var Ns=s(Cr);T(BA.$$.fragment,Ns),IKe=i(Ns),mte=n(Ns,"P",{});var cWr=s(mte);qKe=r(cWr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),cWr.forEach(t),NKe=i(Ns),Aa=n(Ns,"P",{});var ww=s(Aa);jKe=r(ww,"The tokenizer class to instantiate is selected based on the "),gte=n(ww,"CODE",{});var fWr=s(gte);DKe=r(fWr,"model_type"),fWr.forEach(t),GKe=r(ww,` property of the config object (either
passed as an argument or loaded from `),hte=n(ww,"CODE",{});var mWr=s(hte);OKe=r(mWr,"pretrained_model_name_or_path"),mWr.forEach(t),VKe=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pte=n(ww,"CODE",{});var gWr=s(pte);XKe=r(gWr,"pretrained_model_name_or_path"),gWr.forEach(t),zKe=r(ww,":"),ww.forEach(t),WKe=i(Ns),k=n(Ns,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Ix=s(Sn);ute=n(Ix,"STRONG",{});var hWr=s(ute);QKe=r(hWr,"albert"),hWr.forEach(t),HKe=r(Ix," \u2014 "),US=n(Ix,"A",{href:!0});var pWr=s(US);UKe=r(pWr,"AlbertTokenizer"),pWr.forEach(t),JKe=r(Ix," or "),JS=n(Ix,"A",{href:!0});var uWr=s(JS);YKe=r(uWr,"AlbertTokenizerFast"),uWr.forEach(t),KKe=r(Ix," (ALBERT model)"),Ix.forEach(t),ZKe=i(S),Rn=n(S,"LI",{});var qx=s(Rn);_te=n(qx,"STRONG",{});var _Wr=s(_te);eZe=r(_Wr,"bart"),_Wr.forEach(t),oZe=r(qx," \u2014 "),YS=n(qx,"A",{href:!0});var bWr=s(YS);rZe=r(bWr,"BartTokenizer"),bWr.forEach(t),tZe=r(qx," or "),KS=n(qx,"A",{href:!0});var vWr=s(KS);aZe=r(vWr,"BartTokenizerFast"),vWr.forEach(t),nZe=r(qx," (BART model)"),qx.forEach(t),sZe=i(S),Pn=n(S,"LI",{});var Nx=s(Pn);bte=n(Nx,"STRONG",{});var FWr=s(bte);lZe=r(FWr,"barthez"),FWr.forEach(t),iZe=r(Nx," \u2014 "),ZS=n(Nx,"A",{href:!0});var TWr=s(ZS);dZe=r(TWr,"BarthezTokenizer"),TWr.forEach(t),cZe=r(Nx," or "),eR=n(Nx,"A",{href:!0});var MWr=s(eR);fZe=r(MWr,"BarthezTokenizerFast"),MWr.forEach(t),mZe=r(Nx," (BARThez model)"),Nx.forEach(t),gZe=i(S),wg=n(S,"LI",{});var ewe=s(wg);vte=n(ewe,"STRONG",{});var EWr=s(vte);hZe=r(EWr,"bartpho"),EWr.forEach(t),pZe=r(ewe," \u2014 "),oR=n(ewe,"A",{href:!0});var CWr=s(oR);uZe=r(CWr,"BartphoTokenizer"),CWr.forEach(t),_Ze=r(ewe," (BARTpho model)"),ewe.forEach(t),bZe=i(S),Bn=n(S,"LI",{});var jx=s(Bn);Fte=n(jx,"STRONG",{});var wWr=s(Fte);vZe=r(wWr,"bert"),wWr.forEach(t),FZe=r(jx," \u2014 "),rR=n(jx,"A",{href:!0});var AWr=s(rR);TZe=r(AWr,"BertTokenizer"),AWr.forEach(t),MZe=r(jx," or "),tR=n(jx,"A",{href:!0});var yWr=s(tR);EZe=r(yWr,"BertTokenizerFast"),yWr.forEach(t),CZe=r(jx," (BERT model)"),jx.forEach(t),wZe=i(S),Ag=n(S,"LI",{});var owe=s(Ag);Tte=n(owe,"STRONG",{});var LWr=s(Tte);AZe=r(LWr,"bert-generation"),LWr.forEach(t),yZe=r(owe," \u2014 "),aR=n(owe,"A",{href:!0});var xWr=s(aR);LZe=r(xWr,"BertGenerationTokenizer"),xWr.forEach(t),xZe=r(owe," (Bert Generation model)"),owe.forEach(t),$Ze=i(S),yg=n(S,"LI",{});var rwe=s(yg);Mte=n(rwe,"STRONG",{});var $Wr=s(Mte);kZe=r($Wr,"bert-japanese"),$Wr.forEach(t),SZe=r(rwe," \u2014 "),nR=n(rwe,"A",{href:!0});var kWr=s(nR);RZe=r(kWr,"BertJapaneseTokenizer"),kWr.forEach(t),PZe=r(rwe," (BertJapanese model)"),rwe.forEach(t),BZe=i(S),Lg=n(S,"LI",{});var twe=s(Lg);Ete=n(twe,"STRONG",{});var SWr=s(Ete);IZe=r(SWr,"bertweet"),SWr.forEach(t),qZe=r(twe," \u2014 "),sR=n(twe,"A",{href:!0});var RWr=s(sR);NZe=r(RWr,"BertweetTokenizer"),RWr.forEach(t),jZe=r(twe," (Bertweet model)"),twe.forEach(t),DZe=i(S),In=n(S,"LI",{});var Dx=s(In);Cte=n(Dx,"STRONG",{});var PWr=s(Cte);GZe=r(PWr,"big_bird"),PWr.forEach(t),OZe=r(Dx," \u2014 "),lR=n(Dx,"A",{href:!0});var BWr=s(lR);VZe=r(BWr,"BigBirdTokenizer"),BWr.forEach(t),XZe=r(Dx," or "),iR=n(Dx,"A",{href:!0});var IWr=s(iR);zZe=r(IWr,"BigBirdTokenizerFast"),IWr.forEach(t),WZe=r(Dx," (BigBird model)"),Dx.forEach(t),QZe=i(S),qn=n(S,"LI",{});var Gx=s(qn);wte=n(Gx,"STRONG",{});var qWr=s(wte);HZe=r(qWr,"bigbird_pegasus"),qWr.forEach(t),UZe=r(Gx," \u2014 "),dR=n(Gx,"A",{href:!0});var NWr=s(dR);JZe=r(NWr,"PegasusTokenizer"),NWr.forEach(t),YZe=r(Gx," or "),cR=n(Gx,"A",{href:!0});var jWr=s(cR);KZe=r(jWr,"PegasusTokenizerFast"),jWr.forEach(t),ZZe=r(Gx," (BigBirdPegasus model)"),Gx.forEach(t),eeo=i(S),Nn=n(S,"LI",{});var Ox=s(Nn);Ate=n(Ox,"STRONG",{});var DWr=s(Ate);oeo=r(DWr,"blenderbot"),DWr.forEach(t),reo=r(Ox," \u2014 "),fR=n(Ox,"A",{href:!0});var GWr=s(fR);teo=r(GWr,"BlenderbotTokenizer"),GWr.forEach(t),aeo=r(Ox," or "),mR=n(Ox,"A",{href:!0});var OWr=s(mR);neo=r(OWr,"BlenderbotTokenizerFast"),OWr.forEach(t),seo=r(Ox," (Blenderbot model)"),Ox.forEach(t),leo=i(S),xg=n(S,"LI",{});var awe=s(xg);yte=n(awe,"STRONG",{});var VWr=s(yte);ieo=r(VWr,"blenderbot-small"),VWr.forEach(t),deo=r(awe," \u2014 "),gR=n(awe,"A",{href:!0});var XWr=s(gR);ceo=r(XWr,"BlenderbotSmallTokenizer"),XWr.forEach(t),feo=r(awe," (BlenderbotSmall model)"),awe.forEach(t),meo=i(S),$g=n(S,"LI",{});var nwe=s($g);Lte=n(nwe,"STRONG",{});var zWr=s(Lte);geo=r(zWr,"byt5"),zWr.forEach(t),heo=r(nwe," \u2014 "),hR=n(nwe,"A",{href:!0});var WWr=s(hR);peo=r(WWr,"ByT5Tokenizer"),WWr.forEach(t),ueo=r(nwe," (ByT5 model)"),nwe.forEach(t),_eo=i(S),jn=n(S,"LI",{});var Vx=s(jn);xte=n(Vx,"STRONG",{});var QWr=s(xte);beo=r(QWr,"camembert"),QWr.forEach(t),veo=r(Vx," \u2014 "),pR=n(Vx,"A",{href:!0});var HWr=s(pR);Feo=r(HWr,"CamembertTokenizer"),HWr.forEach(t),Teo=r(Vx," or "),uR=n(Vx,"A",{href:!0});var UWr=s(uR);Meo=r(UWr,"CamembertTokenizerFast"),UWr.forEach(t),Eeo=r(Vx," (CamemBERT model)"),Vx.forEach(t),Ceo=i(S),kg=n(S,"LI",{});var swe=s(kg);$te=n(swe,"STRONG",{});var JWr=s($te);weo=r(JWr,"canine"),JWr.forEach(t),Aeo=r(swe," \u2014 "),_R=n(swe,"A",{href:!0});var YWr=s(_R);yeo=r(YWr,"CanineTokenizer"),YWr.forEach(t),Leo=r(swe," (Canine model)"),swe.forEach(t),xeo=i(S),Dn=n(S,"LI",{});var Xx=s(Dn);kte=n(Xx,"STRONG",{});var KWr=s(kte);$eo=r(KWr,"clip"),KWr.forEach(t),keo=r(Xx," \u2014 "),bR=n(Xx,"A",{href:!0});var ZWr=s(bR);Seo=r(ZWr,"CLIPTokenizer"),ZWr.forEach(t),Reo=r(Xx," or "),vR=n(Xx,"A",{href:!0});var eQr=s(vR);Peo=r(eQr,"CLIPTokenizerFast"),eQr.forEach(t),Beo=r(Xx," (CLIP model)"),Xx.forEach(t),Ieo=i(S),Gn=n(S,"LI",{});var zx=s(Gn);Ste=n(zx,"STRONG",{});var oQr=s(Ste);qeo=r(oQr,"convbert"),oQr.forEach(t),Neo=r(zx," \u2014 "),FR=n(zx,"A",{href:!0});var rQr=s(FR);jeo=r(rQr,"ConvBertTokenizer"),rQr.forEach(t),Deo=r(zx," or "),TR=n(zx,"A",{href:!0});var tQr=s(TR);Geo=r(tQr,"ConvBertTokenizerFast"),tQr.forEach(t),Oeo=r(zx," (ConvBERT model)"),zx.forEach(t),Veo=i(S),On=n(S,"LI",{});var Wx=s(On);Rte=n(Wx,"STRONG",{});var aQr=s(Rte);Xeo=r(aQr,"cpm"),aQr.forEach(t),zeo=r(Wx," \u2014 "),MR=n(Wx,"A",{href:!0});var nQr=s(MR);Weo=r(nQr,"CpmTokenizer"),nQr.forEach(t),Qeo=r(Wx," or "),ER=n(Wx,"A",{href:!0});var sQr=s(ER);Heo=r(sQr,"CpmTokenizerFast"),sQr.forEach(t),Ueo=r(Wx," (CPM model)"),Wx.forEach(t),Jeo=i(S),Sg=n(S,"LI",{});var lwe=s(Sg);Pte=n(lwe,"STRONG",{});var lQr=s(Pte);Yeo=r(lQr,"ctrl"),lQr.forEach(t),Keo=r(lwe," \u2014 "),CR=n(lwe,"A",{href:!0});var iQr=s(CR);Zeo=r(iQr,"CTRLTokenizer"),iQr.forEach(t),eoo=r(lwe," (CTRL model)"),lwe.forEach(t),ooo=i(S),Vn=n(S,"LI",{});var Qx=s(Vn);Bte=n(Qx,"STRONG",{});var dQr=s(Bte);roo=r(dQr,"data2vec-text"),dQr.forEach(t),too=r(Qx," \u2014 "),wR=n(Qx,"A",{href:!0});var cQr=s(wR);aoo=r(cQr,"RobertaTokenizer"),cQr.forEach(t),noo=r(Qx," or "),AR=n(Qx,"A",{href:!0});var fQr=s(AR);soo=r(fQr,"RobertaTokenizerFast"),fQr.forEach(t),loo=r(Qx," (Data2VecText model)"),Qx.forEach(t),ioo=i(S),Xn=n(S,"LI",{});var Hx=s(Xn);Ite=n(Hx,"STRONG",{});var mQr=s(Ite);doo=r(mQr,"deberta"),mQr.forEach(t),coo=r(Hx," \u2014 "),yR=n(Hx,"A",{href:!0});var gQr=s(yR);foo=r(gQr,"DebertaTokenizer"),gQr.forEach(t),moo=r(Hx," or "),LR=n(Hx,"A",{href:!0});var hQr=s(LR);goo=r(hQr,"DebertaTokenizerFast"),hQr.forEach(t),hoo=r(Hx," (DeBERTa model)"),Hx.forEach(t),poo=i(S),zn=n(S,"LI",{});var Ux=s(zn);qte=n(Ux,"STRONG",{});var pQr=s(qte);uoo=r(pQr,"deberta-v2"),pQr.forEach(t),_oo=r(Ux," \u2014 "),xR=n(Ux,"A",{href:!0});var uQr=s(xR);boo=r(uQr,"DebertaV2Tokenizer"),uQr.forEach(t),voo=r(Ux," or "),$R=n(Ux,"A",{href:!0});var _Qr=s($R);Foo=r(_Qr,"DebertaV2TokenizerFast"),_Qr.forEach(t),Too=r(Ux," (DeBERTa-v2 model)"),Ux.forEach(t),Moo=i(S),Wn=n(S,"LI",{});var Jx=s(Wn);Nte=n(Jx,"STRONG",{});var bQr=s(Nte);Eoo=r(bQr,"distilbert"),bQr.forEach(t),Coo=r(Jx," \u2014 "),kR=n(Jx,"A",{href:!0});var vQr=s(kR);woo=r(vQr,"DistilBertTokenizer"),vQr.forEach(t),Aoo=r(Jx," or "),SR=n(Jx,"A",{href:!0});var FQr=s(SR);yoo=r(FQr,"DistilBertTokenizerFast"),FQr.forEach(t),Loo=r(Jx," (DistilBERT model)"),Jx.forEach(t),xoo=i(S),Qn=n(S,"LI",{});var Yx=s(Qn);jte=n(Yx,"STRONG",{});var TQr=s(jte);$oo=r(TQr,"dpr"),TQr.forEach(t),koo=r(Yx," \u2014 "),RR=n(Yx,"A",{href:!0});var MQr=s(RR);Soo=r(MQr,"DPRQuestionEncoderTokenizer"),MQr.forEach(t),Roo=r(Yx," or "),PR=n(Yx,"A",{href:!0});var EQr=s(PR);Poo=r(EQr,"DPRQuestionEncoderTokenizerFast"),EQr.forEach(t),Boo=r(Yx," (DPR model)"),Yx.forEach(t),Ioo=i(S),Hn=n(S,"LI",{});var Kx=s(Hn);Dte=n(Kx,"STRONG",{});var CQr=s(Dte);qoo=r(CQr,"electra"),CQr.forEach(t),Noo=r(Kx," \u2014 "),BR=n(Kx,"A",{href:!0});var wQr=s(BR);joo=r(wQr,"ElectraTokenizer"),wQr.forEach(t),Doo=r(Kx," or "),IR=n(Kx,"A",{href:!0});var AQr=s(IR);Goo=r(AQr,"ElectraTokenizerFast"),AQr.forEach(t),Ooo=r(Kx," (ELECTRA model)"),Kx.forEach(t),Voo=i(S),Rg=n(S,"LI",{});var iwe=s(Rg);Gte=n(iwe,"STRONG",{});var yQr=s(Gte);Xoo=r(yQr,"flaubert"),yQr.forEach(t),zoo=r(iwe," \u2014 "),qR=n(iwe,"A",{href:!0});var LQr=s(qR);Woo=r(LQr,"FlaubertTokenizer"),LQr.forEach(t),Qoo=r(iwe," (FlauBERT model)"),iwe.forEach(t),Hoo=i(S),Un=n(S,"LI",{});var Zx=s(Un);Ote=n(Zx,"STRONG",{});var xQr=s(Ote);Uoo=r(xQr,"fnet"),xQr.forEach(t),Joo=r(Zx," \u2014 "),NR=n(Zx,"A",{href:!0});var $Qr=s(NR);Yoo=r($Qr,"FNetTokenizer"),$Qr.forEach(t),Koo=r(Zx," or "),jR=n(Zx,"A",{href:!0});var kQr=s(jR);Zoo=r(kQr,"FNetTokenizerFast"),kQr.forEach(t),ero=r(Zx," (FNet model)"),Zx.forEach(t),oro=i(S),Pg=n(S,"LI",{});var dwe=s(Pg);Vte=n(dwe,"STRONG",{});var SQr=s(Vte);rro=r(SQr,"fsmt"),SQr.forEach(t),tro=r(dwe," \u2014 "),DR=n(dwe,"A",{href:!0});var RQr=s(DR);aro=r(RQr,"FSMTTokenizer"),RQr.forEach(t),nro=r(dwe," (FairSeq Machine-Translation model)"),dwe.forEach(t),sro=i(S),Jn=n(S,"LI",{});var e$=s(Jn);Xte=n(e$,"STRONG",{});var PQr=s(Xte);lro=r(PQr,"funnel"),PQr.forEach(t),iro=r(e$," \u2014 "),GR=n(e$,"A",{href:!0});var BQr=s(GR);dro=r(BQr,"FunnelTokenizer"),BQr.forEach(t),cro=r(e$," or "),OR=n(e$,"A",{href:!0});var IQr=s(OR);fro=r(IQr,"FunnelTokenizerFast"),IQr.forEach(t),mro=r(e$," (Funnel Transformer model)"),e$.forEach(t),gro=i(S),Yn=n(S,"LI",{});var o$=s(Yn);zte=n(o$,"STRONG",{});var qQr=s(zte);hro=r(qQr,"gpt2"),qQr.forEach(t),pro=r(o$," \u2014 "),VR=n(o$,"A",{href:!0});var NQr=s(VR);uro=r(NQr,"GPT2Tokenizer"),NQr.forEach(t),_ro=r(o$," or "),XR=n(o$,"A",{href:!0});var jQr=s(XR);bro=r(jQr,"GPT2TokenizerFast"),jQr.forEach(t),vro=r(o$," (OpenAI GPT-2 model)"),o$.forEach(t),Fro=i(S),Kn=n(S,"LI",{});var r$=s(Kn);Wte=n(r$,"STRONG",{});var DQr=s(Wte);Tro=r(DQr,"gpt_neo"),DQr.forEach(t),Mro=r(r$," \u2014 "),zR=n(r$,"A",{href:!0});var GQr=s(zR);Ero=r(GQr,"GPT2Tokenizer"),GQr.forEach(t),Cro=r(r$," or "),WR=n(r$,"A",{href:!0});var OQr=s(WR);wro=r(OQr,"GPT2TokenizerFast"),OQr.forEach(t),Aro=r(r$," (GPT Neo model)"),r$.forEach(t),yro=i(S),Zn=n(S,"LI",{});var t$=s(Zn);Qte=n(t$,"STRONG",{});var VQr=s(Qte);Lro=r(VQr,"gptj"),VQr.forEach(t),xro=r(t$," \u2014 "),QR=n(t$,"A",{href:!0});var XQr=s(QR);$ro=r(XQr,"GPT2Tokenizer"),XQr.forEach(t),kro=r(t$," or "),HR=n(t$,"A",{href:!0});var zQr=s(HR);Sro=r(zQr,"GPT2TokenizerFast"),zQr.forEach(t),Rro=r(t$," (GPT-J model)"),t$.forEach(t),Pro=i(S),es=n(S,"LI",{});var a$=s(es);Hte=n(a$,"STRONG",{});var WQr=s(Hte);Bro=r(WQr,"herbert"),WQr.forEach(t),Iro=r(a$," \u2014 "),UR=n(a$,"A",{href:!0});var QQr=s(UR);qro=r(QQr,"HerbertTokenizer"),QQr.forEach(t),Nro=r(a$," or "),JR=n(a$,"A",{href:!0});var HQr=s(JR);jro=r(HQr,"HerbertTokenizerFast"),HQr.forEach(t),Dro=r(a$," (HerBERT model)"),a$.forEach(t),Gro=i(S),Bg=n(S,"LI",{});var cwe=s(Bg);Ute=n(cwe,"STRONG",{});var UQr=s(Ute);Oro=r(UQr,"hubert"),UQr.forEach(t),Vro=r(cwe," \u2014 "),YR=n(cwe,"A",{href:!0});var JQr=s(YR);Xro=r(JQr,"Wav2Vec2CTCTokenizer"),JQr.forEach(t),zro=r(cwe," (Hubert model)"),cwe.forEach(t),Wro=i(S),os=n(S,"LI",{});var n$=s(os);Jte=n(n$,"STRONG",{});var YQr=s(Jte);Qro=r(YQr,"ibert"),YQr.forEach(t),Hro=r(n$," \u2014 "),KR=n(n$,"A",{href:!0});var KQr=s(KR);Uro=r(KQr,"RobertaTokenizer"),KQr.forEach(t),Jro=r(n$," or "),ZR=n(n$,"A",{href:!0});var ZQr=s(ZR);Yro=r(ZQr,"RobertaTokenizerFast"),ZQr.forEach(t),Kro=r(n$," (I-BERT model)"),n$.forEach(t),Zro=i(S),rs=n(S,"LI",{});var s$=s(rs);Yte=n(s$,"STRONG",{});var eHr=s(Yte);eto=r(eHr,"layoutlm"),eHr.forEach(t),oto=r(s$," \u2014 "),eP=n(s$,"A",{href:!0});var oHr=s(eP);rto=r(oHr,"LayoutLMTokenizer"),oHr.forEach(t),tto=r(s$," or "),oP=n(s$,"A",{href:!0});var rHr=s(oP);ato=r(rHr,"LayoutLMTokenizerFast"),rHr.forEach(t),nto=r(s$," (LayoutLM model)"),s$.forEach(t),sto=i(S),ts=n(S,"LI",{});var l$=s(ts);Kte=n(l$,"STRONG",{});var tHr=s(Kte);lto=r(tHr,"layoutlmv2"),tHr.forEach(t),ito=r(l$," \u2014 "),rP=n(l$,"A",{href:!0});var aHr=s(rP);dto=r(aHr,"LayoutLMv2Tokenizer"),aHr.forEach(t),cto=r(l$," or "),tP=n(l$,"A",{href:!0});var nHr=s(tP);fto=r(nHr,"LayoutLMv2TokenizerFast"),nHr.forEach(t),mto=r(l$," (LayoutLMv2 model)"),l$.forEach(t),gto=i(S),as=n(S,"LI",{});var i$=s(as);Zte=n(i$,"STRONG",{});var sHr=s(Zte);hto=r(sHr,"layoutlmv3"),sHr.forEach(t),pto=r(i$," \u2014 "),aP=n(i$,"A",{href:!0});var lHr=s(aP);uto=r(lHr,"LayoutLMv3Tokenizer"),lHr.forEach(t),_to=r(i$," or "),nP=n(i$,"A",{href:!0});var iHr=s(nP);bto=r(iHr,"LayoutLMv3TokenizerFast"),iHr.forEach(t),vto=r(i$," (LayoutLMv3 model)"),i$.forEach(t),Fto=i(S),ns=n(S,"LI",{});var d$=s(ns);eae=n(d$,"STRONG",{});var dHr=s(eae);Tto=r(dHr,"layoutxlm"),dHr.forEach(t),Mto=r(d$," \u2014 "),sP=n(d$,"A",{href:!0});var cHr=s(sP);Eto=r(cHr,"LayoutXLMTokenizer"),cHr.forEach(t),Cto=r(d$," or "),lP=n(d$,"A",{href:!0});var fHr=s(lP);wto=r(fHr,"LayoutXLMTokenizerFast"),fHr.forEach(t),Ato=r(d$," (LayoutXLM model)"),d$.forEach(t),yto=i(S),ss=n(S,"LI",{});var c$=s(ss);oae=n(c$,"STRONG",{});var mHr=s(oae);Lto=r(mHr,"led"),mHr.forEach(t),xto=r(c$," \u2014 "),iP=n(c$,"A",{href:!0});var gHr=s(iP);$to=r(gHr,"LEDTokenizer"),gHr.forEach(t),kto=r(c$," or "),dP=n(c$,"A",{href:!0});var hHr=s(dP);Sto=r(hHr,"LEDTokenizerFast"),hHr.forEach(t),Rto=r(c$," (LED model)"),c$.forEach(t),Pto=i(S),ls=n(S,"LI",{});var f$=s(ls);rae=n(f$,"STRONG",{});var pHr=s(rae);Bto=r(pHr,"longformer"),pHr.forEach(t),Ito=r(f$," \u2014 "),cP=n(f$,"A",{href:!0});var uHr=s(cP);qto=r(uHr,"LongformerTokenizer"),uHr.forEach(t),Nto=r(f$," or "),fP=n(f$,"A",{href:!0});var _Hr=s(fP);jto=r(_Hr,"LongformerTokenizerFast"),_Hr.forEach(t),Dto=r(f$," (Longformer model)"),f$.forEach(t),Gto=i(S),Ig=n(S,"LI",{});var fwe=s(Ig);tae=n(fwe,"STRONG",{});var bHr=s(tae);Oto=r(bHr,"luke"),bHr.forEach(t),Vto=r(fwe," \u2014 "),mP=n(fwe,"A",{href:!0});var vHr=s(mP);Xto=r(vHr,"LukeTokenizer"),vHr.forEach(t),zto=r(fwe," (LUKE model)"),fwe.forEach(t),Wto=i(S),is=n(S,"LI",{});var m$=s(is);aae=n(m$,"STRONG",{});var FHr=s(aae);Qto=r(FHr,"lxmert"),FHr.forEach(t),Hto=r(m$," \u2014 "),gP=n(m$,"A",{href:!0});var THr=s(gP);Uto=r(THr,"LxmertTokenizer"),THr.forEach(t),Jto=r(m$," or "),hP=n(m$,"A",{href:!0});var MHr=s(hP);Yto=r(MHr,"LxmertTokenizerFast"),MHr.forEach(t),Kto=r(m$," (LXMERT model)"),m$.forEach(t),Zto=i(S),qg=n(S,"LI",{});var mwe=s(qg);nae=n(mwe,"STRONG",{});var EHr=s(nae);eao=r(EHr,"m2m_100"),EHr.forEach(t),oao=r(mwe," \u2014 "),pP=n(mwe,"A",{href:!0});var CHr=s(pP);rao=r(CHr,"M2M100Tokenizer"),CHr.forEach(t),tao=r(mwe," (M2M100 model)"),mwe.forEach(t),aao=i(S),Ng=n(S,"LI",{});var gwe=s(Ng);sae=n(gwe,"STRONG",{});var wHr=s(sae);nao=r(wHr,"marian"),wHr.forEach(t),sao=r(gwe," \u2014 "),uP=n(gwe,"A",{href:!0});var AHr=s(uP);lao=r(AHr,"MarianTokenizer"),AHr.forEach(t),iao=r(gwe," (Marian model)"),gwe.forEach(t),dao=i(S),ds=n(S,"LI",{});var g$=s(ds);lae=n(g$,"STRONG",{});var yHr=s(lae);cao=r(yHr,"mbart"),yHr.forEach(t),fao=r(g$," \u2014 "),_P=n(g$,"A",{href:!0});var LHr=s(_P);mao=r(LHr,"MBartTokenizer"),LHr.forEach(t),gao=r(g$," or "),bP=n(g$,"A",{href:!0});var xHr=s(bP);hao=r(xHr,"MBartTokenizerFast"),xHr.forEach(t),pao=r(g$," (mBART model)"),g$.forEach(t),uao=i(S),cs=n(S,"LI",{});var h$=s(cs);iae=n(h$,"STRONG",{});var $Hr=s(iae);_ao=r($Hr,"mbart50"),$Hr.forEach(t),bao=r(h$," \u2014 "),vP=n(h$,"A",{href:!0});var kHr=s(vP);vao=r(kHr,"MBart50Tokenizer"),kHr.forEach(t),Fao=r(h$," or "),FP=n(h$,"A",{href:!0});var SHr=s(FP);Tao=r(SHr,"MBart50TokenizerFast"),SHr.forEach(t),Mao=r(h$," (mBART-50 model)"),h$.forEach(t),Eao=i(S),fs=n(S,"LI",{});var p$=s(fs);dae=n(p$,"STRONG",{});var RHr=s(dae);Cao=r(RHr,"megatron-bert"),RHr.forEach(t),wao=r(p$," \u2014 "),TP=n(p$,"A",{href:!0});var PHr=s(TP);Aao=r(PHr,"BertTokenizer"),PHr.forEach(t),yao=r(p$," or "),MP=n(p$,"A",{href:!0});var BHr=s(MP);Lao=r(BHr,"BertTokenizerFast"),BHr.forEach(t),xao=r(p$," (MegatronBert model)"),p$.forEach(t),$ao=i(S),jg=n(S,"LI",{});var hwe=s(jg);cae=n(hwe,"STRONG",{});var IHr=s(cae);kao=r(IHr,"mluke"),IHr.forEach(t),Sao=r(hwe," \u2014 "),EP=n(hwe,"A",{href:!0});var qHr=s(EP);Rao=r(qHr,"MLukeTokenizer"),qHr.forEach(t),Pao=r(hwe," (mLUKE model)"),hwe.forEach(t),Bao=i(S),ms=n(S,"LI",{});var u$=s(ms);fae=n(u$,"STRONG",{});var NHr=s(fae);Iao=r(NHr,"mobilebert"),NHr.forEach(t),qao=r(u$," \u2014 "),CP=n(u$,"A",{href:!0});var jHr=s(CP);Nao=r(jHr,"MobileBertTokenizer"),jHr.forEach(t),jao=r(u$," or "),wP=n(u$,"A",{href:!0});var DHr=s(wP);Dao=r(DHr,"MobileBertTokenizerFast"),DHr.forEach(t),Gao=r(u$," (MobileBERT model)"),u$.forEach(t),Oao=i(S),gs=n(S,"LI",{});var _$=s(gs);mae=n(_$,"STRONG",{});var GHr=s(mae);Vao=r(GHr,"mpnet"),GHr.forEach(t),Xao=r(_$," \u2014 "),AP=n(_$,"A",{href:!0});var OHr=s(AP);zao=r(OHr,"MPNetTokenizer"),OHr.forEach(t),Wao=r(_$," or "),yP=n(_$,"A",{href:!0});var VHr=s(yP);Qao=r(VHr,"MPNetTokenizerFast"),VHr.forEach(t),Hao=r(_$," (MPNet model)"),_$.forEach(t),Uao=i(S),hs=n(S,"LI",{});var b$=s(hs);gae=n(b$,"STRONG",{});var XHr=s(gae);Jao=r(XHr,"mt5"),XHr.forEach(t),Yao=r(b$," \u2014 "),LP=n(b$,"A",{href:!0});var zHr=s(LP);Kao=r(zHr,"MT5Tokenizer"),zHr.forEach(t),Zao=r(b$," or "),xP=n(b$,"A",{href:!0});var WHr=s(xP);eno=r(WHr,"MT5TokenizerFast"),WHr.forEach(t),ono=r(b$," (mT5 model)"),b$.forEach(t),rno=i(S),ps=n(S,"LI",{});var v$=s(ps);hae=n(v$,"STRONG",{});var QHr=s(hae);tno=r(QHr,"nystromformer"),QHr.forEach(t),ano=r(v$," \u2014 "),$P=n(v$,"A",{href:!0});var HHr=s($P);nno=r(HHr,"AlbertTokenizer"),HHr.forEach(t),sno=r(v$," or "),kP=n(v$,"A",{href:!0});var UHr=s(kP);lno=r(UHr,"AlbertTokenizerFast"),UHr.forEach(t),ino=r(v$," (Nystromformer model)"),v$.forEach(t),dno=i(S),us=n(S,"LI",{});var F$=s(us);pae=n(F$,"STRONG",{});var JHr=s(pae);cno=r(JHr,"openai-gpt"),JHr.forEach(t),fno=r(F$," \u2014 "),SP=n(F$,"A",{href:!0});var YHr=s(SP);mno=r(YHr,"OpenAIGPTTokenizer"),YHr.forEach(t),gno=r(F$," or "),RP=n(F$,"A",{href:!0});var KHr=s(RP);hno=r(KHr,"OpenAIGPTTokenizerFast"),KHr.forEach(t),pno=r(F$," (OpenAI GPT model)"),F$.forEach(t),uno=i(S),Dg=n(S,"LI",{});var pwe=s(Dg);uae=n(pwe,"STRONG",{});var ZHr=s(uae);_no=r(ZHr,"opt"),ZHr.forEach(t),bno=r(pwe," \u2014 "),PP=n(pwe,"A",{href:!0});var eUr=s(PP);vno=r(eUr,"GPT2Tokenizer"),eUr.forEach(t),Fno=r(pwe," (OPT model)"),pwe.forEach(t),Tno=i(S),_s=n(S,"LI",{});var T$=s(_s);_ae=n(T$,"STRONG",{});var oUr=s(_ae);Mno=r(oUr,"pegasus"),oUr.forEach(t),Eno=r(T$," \u2014 "),BP=n(T$,"A",{href:!0});var rUr=s(BP);Cno=r(rUr,"PegasusTokenizer"),rUr.forEach(t),wno=r(T$," or "),IP=n(T$,"A",{href:!0});var tUr=s(IP);Ano=r(tUr,"PegasusTokenizerFast"),tUr.forEach(t),yno=r(T$," (Pegasus model)"),T$.forEach(t),Lno=i(S),Gg=n(S,"LI",{});var uwe=s(Gg);bae=n(uwe,"STRONG",{});var aUr=s(bae);xno=r(aUr,"perceiver"),aUr.forEach(t),$no=r(uwe," \u2014 "),qP=n(uwe,"A",{href:!0});var nUr=s(qP);kno=r(nUr,"PerceiverTokenizer"),nUr.forEach(t),Sno=r(uwe," (Perceiver model)"),uwe.forEach(t),Rno=i(S),Og=n(S,"LI",{});var _we=s(Og);vae=n(_we,"STRONG",{});var sUr=s(vae);Pno=r(sUr,"phobert"),sUr.forEach(t),Bno=r(_we," \u2014 "),NP=n(_we,"A",{href:!0});var lUr=s(NP);Ino=r(lUr,"PhobertTokenizer"),lUr.forEach(t),qno=r(_we," (PhoBERT model)"),_we.forEach(t),Nno=i(S),Vg=n(S,"LI",{});var bwe=s(Vg);Fae=n(bwe,"STRONG",{});var iUr=s(Fae);jno=r(iUr,"plbart"),iUr.forEach(t),Dno=r(bwe," \u2014 "),jP=n(bwe,"A",{href:!0});var dUr=s(jP);Gno=r(dUr,"PLBartTokenizer"),dUr.forEach(t),Ono=r(bwe," (PLBart model)"),bwe.forEach(t),Vno=i(S),Xg=n(S,"LI",{});var vwe=s(Xg);Tae=n(vwe,"STRONG",{});var cUr=s(Tae);Xno=r(cUr,"prophetnet"),cUr.forEach(t),zno=r(vwe," \u2014 "),DP=n(vwe,"A",{href:!0});var fUr=s(DP);Wno=r(fUr,"ProphetNetTokenizer"),fUr.forEach(t),Qno=r(vwe," (ProphetNet model)"),vwe.forEach(t),Hno=i(S),bs=n(S,"LI",{});var M$=s(bs);Mae=n(M$,"STRONG",{});var mUr=s(Mae);Uno=r(mUr,"qdqbert"),mUr.forEach(t),Jno=r(M$," \u2014 "),GP=n(M$,"A",{href:!0});var gUr=s(GP);Yno=r(gUr,"BertTokenizer"),gUr.forEach(t),Kno=r(M$," or "),OP=n(M$,"A",{href:!0});var hUr=s(OP);Zno=r(hUr,"BertTokenizerFast"),hUr.forEach(t),eso=r(M$," (QDQBert model)"),M$.forEach(t),oso=i(S),zg=n(S,"LI",{});var Fwe=s(zg);Eae=n(Fwe,"STRONG",{});var pUr=s(Eae);rso=r(pUr,"rag"),pUr.forEach(t),tso=r(Fwe," \u2014 "),VP=n(Fwe,"A",{href:!0});var uUr=s(VP);aso=r(uUr,"RagTokenizer"),uUr.forEach(t),nso=r(Fwe," (RAG model)"),Fwe.forEach(t),sso=i(S),vs=n(S,"LI",{});var E$=s(vs);Cae=n(E$,"STRONG",{});var _Ur=s(Cae);lso=r(_Ur,"realm"),_Ur.forEach(t),iso=r(E$," \u2014 "),XP=n(E$,"A",{href:!0});var bUr=s(XP);dso=r(bUr,"RealmTokenizer"),bUr.forEach(t),cso=r(E$," or "),zP=n(E$,"A",{href:!0});var vUr=s(zP);fso=r(vUr,"RealmTokenizerFast"),vUr.forEach(t),mso=r(E$," (Realm model)"),E$.forEach(t),gso=i(S),Fs=n(S,"LI",{});var C$=s(Fs);wae=n(C$,"STRONG",{});var FUr=s(wae);hso=r(FUr,"reformer"),FUr.forEach(t),pso=r(C$," \u2014 "),WP=n(C$,"A",{href:!0});var TUr=s(WP);uso=r(TUr,"ReformerTokenizer"),TUr.forEach(t),_so=r(C$," or "),QP=n(C$,"A",{href:!0});var MUr=s(QP);bso=r(MUr,"ReformerTokenizerFast"),MUr.forEach(t),vso=r(C$," (Reformer model)"),C$.forEach(t),Fso=i(S),Ts=n(S,"LI",{});var w$=s(Ts);Aae=n(w$,"STRONG",{});var EUr=s(Aae);Tso=r(EUr,"rembert"),EUr.forEach(t),Mso=r(w$," \u2014 "),HP=n(w$,"A",{href:!0});var CUr=s(HP);Eso=r(CUr,"RemBertTokenizer"),CUr.forEach(t),Cso=r(w$," or "),UP=n(w$,"A",{href:!0});var wUr=s(UP);wso=r(wUr,"RemBertTokenizerFast"),wUr.forEach(t),Aso=r(w$," (RemBERT model)"),w$.forEach(t),yso=i(S),Ms=n(S,"LI",{});var A$=s(Ms);yae=n(A$,"STRONG",{});var AUr=s(yae);Lso=r(AUr,"retribert"),AUr.forEach(t),xso=r(A$," \u2014 "),JP=n(A$,"A",{href:!0});var yUr=s(JP);$so=r(yUr,"RetriBertTokenizer"),yUr.forEach(t),kso=r(A$," or "),YP=n(A$,"A",{href:!0});var LUr=s(YP);Sso=r(LUr,"RetriBertTokenizerFast"),LUr.forEach(t),Rso=r(A$," (RetriBERT model)"),A$.forEach(t),Pso=i(S),Es=n(S,"LI",{});var y$=s(Es);Lae=n(y$,"STRONG",{});var xUr=s(Lae);Bso=r(xUr,"roberta"),xUr.forEach(t),Iso=r(y$," \u2014 "),KP=n(y$,"A",{href:!0});var $Ur=s(KP);qso=r($Ur,"RobertaTokenizer"),$Ur.forEach(t),Nso=r(y$," or "),ZP=n(y$,"A",{href:!0});var kUr=s(ZP);jso=r(kUr,"RobertaTokenizerFast"),kUr.forEach(t),Dso=r(y$," (RoBERTa model)"),y$.forEach(t),Gso=i(S),Cs=n(S,"LI",{});var L$=s(Cs);xae=n(L$,"STRONG",{});var SUr=s(xae);Oso=r(SUr,"roformer"),SUr.forEach(t),Vso=r(L$," \u2014 "),eB=n(L$,"A",{href:!0});var RUr=s(eB);Xso=r(RUr,"RoFormerTokenizer"),RUr.forEach(t),zso=r(L$," or "),oB=n(L$,"A",{href:!0});var PUr=s(oB);Wso=r(PUr,"RoFormerTokenizerFast"),PUr.forEach(t),Qso=r(L$," (RoFormer model)"),L$.forEach(t),Hso=i(S),Wg=n(S,"LI",{});var Twe=s(Wg);$ae=n(Twe,"STRONG",{});var BUr=s($ae);Uso=r(BUr,"speech_to_text"),BUr.forEach(t),Jso=r(Twe," \u2014 "),rB=n(Twe,"A",{href:!0});var IUr=s(rB);Yso=r(IUr,"Speech2TextTokenizer"),IUr.forEach(t),Kso=r(Twe," (Speech2Text model)"),Twe.forEach(t),Zso=i(S),Qg=n(S,"LI",{});var Mwe=s(Qg);kae=n(Mwe,"STRONG",{});var qUr=s(kae);elo=r(qUr,"speech_to_text_2"),qUr.forEach(t),olo=r(Mwe," \u2014 "),tB=n(Mwe,"A",{href:!0});var NUr=s(tB);rlo=r(NUr,"Speech2Text2Tokenizer"),NUr.forEach(t),tlo=r(Mwe," (Speech2Text2 model)"),Mwe.forEach(t),alo=i(S),ws=n(S,"LI",{});var x$=s(ws);Sae=n(x$,"STRONG",{});var jUr=s(Sae);nlo=r(jUr,"splinter"),jUr.forEach(t),slo=r(x$," \u2014 "),aB=n(x$,"A",{href:!0});var DUr=s(aB);llo=r(DUr,"SplinterTokenizer"),DUr.forEach(t),ilo=r(x$," or "),nB=n(x$,"A",{href:!0});var GUr=s(nB);dlo=r(GUr,"SplinterTokenizerFast"),GUr.forEach(t),clo=r(x$," (Splinter model)"),x$.forEach(t),flo=i(S),As=n(S,"LI",{});var $$=s(As);Rae=n($$,"STRONG",{});var OUr=s(Rae);mlo=r(OUr,"squeezebert"),OUr.forEach(t),glo=r($$," \u2014 "),sB=n($$,"A",{href:!0});var VUr=s(sB);hlo=r(VUr,"SqueezeBertTokenizer"),VUr.forEach(t),plo=r($$," or "),lB=n($$,"A",{href:!0});var XUr=s(lB);ulo=r(XUr,"SqueezeBertTokenizerFast"),XUr.forEach(t),_lo=r($$," (SqueezeBERT model)"),$$.forEach(t),blo=i(S),ys=n(S,"LI",{});var k$=s(ys);Pae=n(k$,"STRONG",{});var zUr=s(Pae);vlo=r(zUr,"t5"),zUr.forEach(t),Flo=r(k$," \u2014 "),iB=n(k$,"A",{href:!0});var WUr=s(iB);Tlo=r(WUr,"T5Tokenizer"),WUr.forEach(t),Mlo=r(k$," or "),dB=n(k$,"A",{href:!0});var QUr=s(dB);Elo=r(QUr,"T5TokenizerFast"),QUr.forEach(t),Clo=r(k$," (T5 model)"),k$.forEach(t),wlo=i(S),Hg=n(S,"LI",{});var Ewe=s(Hg);Bae=n(Ewe,"STRONG",{});var HUr=s(Bae);Alo=r(HUr,"tapas"),HUr.forEach(t),ylo=r(Ewe," \u2014 "),cB=n(Ewe,"A",{href:!0});var UUr=s(cB);Llo=r(UUr,"TapasTokenizer"),UUr.forEach(t),xlo=r(Ewe," (TAPAS model)"),Ewe.forEach(t),$lo=i(S),Ug=n(S,"LI",{});var Cwe=s(Ug);Iae=n(Cwe,"STRONG",{});var JUr=s(Iae);klo=r(JUr,"tapex"),JUr.forEach(t),Slo=r(Cwe," \u2014 "),fB=n(Cwe,"A",{href:!0});var YUr=s(fB);Rlo=r(YUr,"TapexTokenizer"),YUr.forEach(t),Plo=r(Cwe," (TAPEX model)"),Cwe.forEach(t),Blo=i(S),Jg=n(S,"LI",{});var wwe=s(Jg);qae=n(wwe,"STRONG",{});var KUr=s(qae);Ilo=r(KUr,"transfo-xl"),KUr.forEach(t),qlo=r(wwe," \u2014 "),mB=n(wwe,"A",{href:!0});var ZUr=s(mB);Nlo=r(ZUr,"TransfoXLTokenizer"),ZUr.forEach(t),jlo=r(wwe," (Transformer-XL model)"),wwe.forEach(t),Dlo=i(S),Ls=n(S,"LI",{});var S$=s(Ls);Nae=n(S$,"STRONG",{});var eJr=s(Nae);Glo=r(eJr,"visual_bert"),eJr.forEach(t),Olo=r(S$," \u2014 "),gB=n(S$,"A",{href:!0});var oJr=s(gB);Vlo=r(oJr,"BertTokenizer"),oJr.forEach(t),Xlo=r(S$," or "),hB=n(S$,"A",{href:!0});var rJr=s(hB);zlo=r(rJr,"BertTokenizerFast"),rJr.forEach(t),Wlo=r(S$," (VisualBert model)"),S$.forEach(t),Qlo=i(S),Yg=n(S,"LI",{});var Awe=s(Yg);jae=n(Awe,"STRONG",{});var tJr=s(jae);Hlo=r(tJr,"wav2vec2"),tJr.forEach(t),Ulo=r(Awe," \u2014 "),pB=n(Awe,"A",{href:!0});var aJr=s(pB);Jlo=r(aJr,"Wav2Vec2CTCTokenizer"),aJr.forEach(t),Ylo=r(Awe," (Wav2Vec2 model)"),Awe.forEach(t),Klo=i(S),Kg=n(S,"LI",{});var ywe=s(Kg);Dae=n(ywe,"STRONG",{});var nJr=s(Dae);Zlo=r(nJr,"wav2vec2-conformer"),nJr.forEach(t),eio=r(ywe," \u2014 "),uB=n(ywe,"A",{href:!0});var sJr=s(uB);oio=r(sJr,"Wav2Vec2CTCTokenizer"),sJr.forEach(t),rio=r(ywe," (Wav2Vec2-Conformer model)"),ywe.forEach(t),tio=i(S),Zg=n(S,"LI",{});var Lwe=s(Zg);Gae=n(Lwe,"STRONG",{});var lJr=s(Gae);aio=r(lJr,"wav2vec2_phoneme"),lJr.forEach(t),nio=r(Lwe," \u2014 "),_B=n(Lwe,"A",{href:!0});var iJr=s(_B);sio=r(iJr,"Wav2Vec2PhonemeCTCTokenizer"),iJr.forEach(t),lio=r(Lwe," (Wav2Vec2Phoneme model)"),Lwe.forEach(t),iio=i(S),xs=n(S,"LI",{});var R$=s(xs);Oae=n(R$,"STRONG",{});var dJr=s(Oae);dio=r(dJr,"xglm"),dJr.forEach(t),cio=r(R$," \u2014 "),bB=n(R$,"A",{href:!0});var cJr=s(bB);fio=r(cJr,"XGLMTokenizer"),cJr.forEach(t),mio=r(R$," or "),vB=n(R$,"A",{href:!0});var fJr=s(vB);gio=r(fJr,"XGLMTokenizerFast"),fJr.forEach(t),hio=r(R$," (XGLM model)"),R$.forEach(t),pio=i(S),eh=n(S,"LI",{});var xwe=s(eh);Vae=n(xwe,"STRONG",{});var mJr=s(Vae);uio=r(mJr,"xlm"),mJr.forEach(t),_io=r(xwe," \u2014 "),FB=n(xwe,"A",{href:!0});var gJr=s(FB);bio=r(gJr,"XLMTokenizer"),gJr.forEach(t),vio=r(xwe," (XLM model)"),xwe.forEach(t),Fio=i(S),oh=n(S,"LI",{});var $we=s(oh);Xae=n($we,"STRONG",{});var hJr=s(Xae);Tio=r(hJr,"xlm-prophetnet"),hJr.forEach(t),Mio=r($we," \u2014 "),TB=n($we,"A",{href:!0});var pJr=s(TB);Eio=r(pJr,"XLMProphetNetTokenizer"),pJr.forEach(t),Cio=r($we," (XLMProphetNet model)"),$we.forEach(t),wio=i(S),$s=n(S,"LI",{});var P$=s($s);zae=n(P$,"STRONG",{});var uJr=s(zae);Aio=r(uJr,"xlm-roberta"),uJr.forEach(t),yio=r(P$," \u2014 "),MB=n(P$,"A",{href:!0});var _Jr=s(MB);Lio=r(_Jr,"XLMRobertaTokenizer"),_Jr.forEach(t),xio=r(P$," or "),EB=n(P$,"A",{href:!0});var bJr=s(EB);$io=r(bJr,"XLMRobertaTokenizerFast"),bJr.forEach(t),kio=r(P$," (XLM-RoBERTa model)"),P$.forEach(t),Sio=i(S),ks=n(S,"LI",{});var B$=s(ks);Wae=n(B$,"STRONG",{});var vJr=s(Wae);Rio=r(vJr,"xlm-roberta-xl"),vJr.forEach(t),Pio=r(B$," \u2014 "),CB=n(B$,"A",{href:!0});var FJr=s(CB);Bio=r(FJr,"RobertaTokenizer"),FJr.forEach(t),Iio=r(B$," or "),wB=n(B$,"A",{href:!0});var TJr=s(wB);qio=r(TJr,"RobertaTokenizerFast"),TJr.forEach(t),Nio=r(B$," (XLM-RoBERTa-XL model)"),B$.forEach(t),jio=i(S),Ss=n(S,"LI",{});var I$=s(Ss);Qae=n(I$,"STRONG",{});var MJr=s(Qae);Dio=r(MJr,"xlnet"),MJr.forEach(t),Gio=r(I$," \u2014 "),AB=n(I$,"A",{href:!0});var EJr=s(AB);Oio=r(EJr,"XLNetTokenizer"),EJr.forEach(t),Vio=r(I$," or "),yB=n(I$,"A",{href:!0});var CJr=s(yB);Xio=r(CJr,"XLNetTokenizerFast"),CJr.forEach(t),zio=r(I$," (XLNet model)"),I$.forEach(t),Wio=i(S),Rs=n(S,"LI",{});var q$=s(Rs);Hae=n(q$,"STRONG",{});var wJr=s(Hae);Qio=r(wJr,"yoso"),wJr.forEach(t),Hio=r(q$," \u2014 "),LB=n(q$,"A",{href:!0});var AJr=s(LB);Uio=r(AJr,"AlbertTokenizer"),AJr.forEach(t),Jio=r(q$," or "),xB=n(q$,"A",{href:!0});var yJr=s(xB);Yio=r(yJr,"AlbertTokenizerFast"),yJr.forEach(t),Kio=r(q$," (YOSO model)"),q$.forEach(t),S.forEach(t),Zio=i(Ns),T(rh.$$.fragment,Ns),Ns.forEach(t),edo=i(qs),th=n(qs,"DIV",{class:!0});var Xje=s(th);T(IA.$$.fragment,Xje),odo=i(Xje),Uae=n(Xje,"P",{});var LJr=s(Uae);rdo=r(LJr,"Register a new tokenizer in this mapping."),LJr.forEach(t),Xje.forEach(t),qs.forEach(t),zqe=i(f),Mi=n(f,"H2",{class:!0});var zje=s(Mi);ah=n(zje,"A",{id:!0,class:!0,href:!0});var xJr=s(ah);Jae=n(xJr,"SPAN",{});var $Jr=s(Jae);T(qA.$$.fragment,$Jr),$Jr.forEach(t),xJr.forEach(t),tdo=i(zje),Yae=n(zje,"SPAN",{});var kJr=s(Yae);ado=r(kJr,"AutoFeatureExtractor"),kJr.forEach(t),zje.forEach(t),Wqe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(NA.$$.fragment,js),ndo=i(js),jA=n(js,"P",{});var Wje=s(jA);sdo=r(Wje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),$B=n(Wje,"A",{href:!0});var SJr=s($B);ldo=r(SJr,"AutoFeatureExtractor.from_pretrained()"),SJr.forEach(t),ido=r(Wje," class method."),Wje.forEach(t),ddo=i(js),DA=n(js,"P",{});var Qje=s(DA);cdo=r(Qje,"This class cannot be instantiated directly using "),Kae=n(Qje,"CODE",{});var RJr=s(Kae);fdo=r(RJr,"__init__()"),RJr.forEach(t),mdo=r(Qje," (throws an error)."),Qje.forEach(t),gdo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(GA.$$.fragment,Zt),hdo=i(Zt),Zae=n(Zt,"P",{});var PJr=s(Zae);pdo=r(PJr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),PJr.forEach(t),udo=i(Zt),ya=n(Zt,"P",{});var Aw=s(ya);_do=r(Aw,"The feature extractor class to instantiate is selected based on the "),ene=n(Aw,"CODE",{});var BJr=s(ene);bdo=r(BJr,"model_type"),BJr.forEach(t),vdo=r(Aw,` property of the config object
(either passed as an argument or loaded from `),one=n(Aw,"CODE",{});var IJr=s(one);Fdo=r(IJr,"pretrained_model_name_or_path"),IJr.forEach(t),Tdo=r(Aw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),rne=n(Aw,"CODE",{});var qJr=s(rne);Mdo=r(qJr,"pretrained_model_name_or_path"),qJr.forEach(t),Edo=r(Aw,":"),Aw.forEach(t),Cdo=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);nh=n(Z,"LI",{});var kwe=s(nh);tne=n(kwe,"STRONG",{});var NJr=s(tne);wdo=r(NJr,"beit"),NJr.forEach(t),Ado=r(kwe," \u2014 "),kB=n(kwe,"A",{href:!0});var jJr=s(kB);ydo=r(jJr,"BeitFeatureExtractor"),jJr.forEach(t),Ldo=r(kwe," (BEiT model)"),kwe.forEach(t),xdo=i(Z),sh=n(Z,"LI",{});var Swe=s(sh);ane=n(Swe,"STRONG",{});var DJr=s(ane);$do=r(DJr,"clip"),DJr.forEach(t),kdo=r(Swe," \u2014 "),SB=n(Swe,"A",{href:!0});var GJr=s(SB);Sdo=r(GJr,"CLIPFeatureExtractor"),GJr.forEach(t),Rdo=r(Swe," (CLIP model)"),Swe.forEach(t),Pdo=i(Z),lh=n(Z,"LI",{});var Rwe=s(lh);nne=n(Rwe,"STRONG",{});var OJr=s(nne);Bdo=r(OJr,"convnext"),OJr.forEach(t),Ido=r(Rwe," \u2014 "),RB=n(Rwe,"A",{href:!0});var VJr=s(RB);qdo=r(VJr,"ConvNextFeatureExtractor"),VJr.forEach(t),Ndo=r(Rwe," (ConvNext model)"),Rwe.forEach(t),jdo=i(Z),ih=n(Z,"LI",{});var Pwe=s(ih);sne=n(Pwe,"STRONG",{});var XJr=s(sne);Ddo=r(XJr,"cvt"),XJr.forEach(t),Gdo=r(Pwe," \u2014 "),PB=n(Pwe,"A",{href:!0});var zJr=s(PB);Odo=r(zJr,"ConvNextFeatureExtractor"),zJr.forEach(t),Vdo=r(Pwe," (CvT model)"),Pwe.forEach(t),Xdo=i(Z),dh=n(Z,"LI",{});var Bwe=s(dh);lne=n(Bwe,"STRONG",{});var WJr=s(lne);zdo=r(WJr,"data2vec-audio"),WJr.forEach(t),Wdo=r(Bwe," \u2014 "),BB=n(Bwe,"A",{href:!0});var QJr=s(BB);Qdo=r(QJr,"Wav2Vec2FeatureExtractor"),QJr.forEach(t),Hdo=r(Bwe," (Data2VecAudio model)"),Bwe.forEach(t),Udo=i(Z),ch=n(Z,"LI",{});var Iwe=s(ch);ine=n(Iwe,"STRONG",{});var HJr=s(ine);Jdo=r(HJr,"data2vec-vision"),HJr.forEach(t),Ydo=r(Iwe," \u2014 "),IB=n(Iwe,"A",{href:!0});var UJr=s(IB);Kdo=r(UJr,"BeitFeatureExtractor"),UJr.forEach(t),Zdo=r(Iwe," (Data2VecVision model)"),Iwe.forEach(t),eco=i(Z),fh=n(Z,"LI",{});var qwe=s(fh);dne=n(qwe,"STRONG",{});var JJr=s(dne);oco=r(JJr,"deit"),JJr.forEach(t),rco=r(qwe," \u2014 "),qB=n(qwe,"A",{href:!0});var YJr=s(qB);tco=r(YJr,"DeiTFeatureExtractor"),YJr.forEach(t),aco=r(qwe," (DeiT model)"),qwe.forEach(t),nco=i(Z),mh=n(Z,"LI",{});var Nwe=s(mh);cne=n(Nwe,"STRONG",{});var KJr=s(cne);sco=r(KJr,"detr"),KJr.forEach(t),lco=r(Nwe," \u2014 "),NB=n(Nwe,"A",{href:!0});var ZJr=s(NB);ico=r(ZJr,"DetrFeatureExtractor"),ZJr.forEach(t),dco=r(Nwe," (DETR model)"),Nwe.forEach(t),cco=i(Z),gh=n(Z,"LI",{});var jwe=s(gh);fne=n(jwe,"STRONG",{});var eYr=s(fne);fco=r(eYr,"dpt"),eYr.forEach(t),mco=r(jwe," \u2014 "),jB=n(jwe,"A",{href:!0});var oYr=s(jB);gco=r(oYr,"DPTFeatureExtractor"),oYr.forEach(t),hco=r(jwe," (DPT model)"),jwe.forEach(t),pco=i(Z),hh=n(Z,"LI",{});var Dwe=s(hh);mne=n(Dwe,"STRONG",{});var rYr=s(mne);uco=r(rYr,"flava"),rYr.forEach(t),_co=r(Dwe," \u2014 "),DB=n(Dwe,"A",{href:!0});var tYr=s(DB);bco=r(tYr,"FlavaFeatureExtractor"),tYr.forEach(t),vco=r(Dwe," (Flava model)"),Dwe.forEach(t),Fco=i(Z),ph=n(Z,"LI",{});var Gwe=s(ph);gne=n(Gwe,"STRONG",{});var aYr=s(gne);Tco=r(aYr,"glpn"),aYr.forEach(t),Mco=r(Gwe," \u2014 "),GB=n(Gwe,"A",{href:!0});var nYr=s(GB);Eco=r(nYr,"GLPNFeatureExtractor"),nYr.forEach(t),Cco=r(Gwe," (GLPN model)"),Gwe.forEach(t),wco=i(Z),uh=n(Z,"LI",{});var Owe=s(uh);hne=n(Owe,"STRONG",{});var sYr=s(hne);Aco=r(sYr,"hubert"),sYr.forEach(t),yco=r(Owe," \u2014 "),OB=n(Owe,"A",{href:!0});var lYr=s(OB);Lco=r(lYr,"Wav2Vec2FeatureExtractor"),lYr.forEach(t),xco=r(Owe," (Hubert model)"),Owe.forEach(t),$co=i(Z),_h=n(Z,"LI",{});var Vwe=s(_h);pne=n(Vwe,"STRONG",{});var iYr=s(pne);kco=r(iYr,"imagegpt"),iYr.forEach(t),Sco=r(Vwe," \u2014 "),VB=n(Vwe,"A",{href:!0});var dYr=s(VB);Rco=r(dYr,"ImageGPTFeatureExtractor"),dYr.forEach(t),Pco=r(Vwe," (ImageGPT model)"),Vwe.forEach(t),Bco=i(Z),bh=n(Z,"LI",{});var Xwe=s(bh);une=n(Xwe,"STRONG",{});var cYr=s(une);Ico=r(cYr,"layoutlmv2"),cYr.forEach(t),qco=r(Xwe," \u2014 "),XB=n(Xwe,"A",{href:!0});var fYr=s(XB);Nco=r(fYr,"LayoutLMv2FeatureExtractor"),fYr.forEach(t),jco=r(Xwe," (LayoutLMv2 model)"),Xwe.forEach(t),Dco=i(Z),vh=n(Z,"LI",{});var zwe=s(vh);_ne=n(zwe,"STRONG",{});var mYr=s(_ne);Gco=r(mYr,"layoutlmv3"),mYr.forEach(t),Oco=r(zwe," \u2014 "),zB=n(zwe,"A",{href:!0});var gYr=s(zB);Vco=r(gYr,"LayoutLMv3FeatureExtractor"),gYr.forEach(t),Xco=r(zwe," (LayoutLMv3 model)"),zwe.forEach(t),zco=i(Z),Fh=n(Z,"LI",{});var Wwe=s(Fh);bne=n(Wwe,"STRONG",{});var hYr=s(bne);Wco=r(hYr,"maskformer"),hYr.forEach(t),Qco=r(Wwe," \u2014 "),WB=n(Wwe,"A",{href:!0});var pYr=s(WB);Hco=r(pYr,"MaskFormerFeatureExtractor"),pYr.forEach(t),Uco=r(Wwe," (MaskFormer model)"),Wwe.forEach(t),Jco=i(Z),Th=n(Z,"LI",{});var Qwe=s(Th);vne=n(Qwe,"STRONG",{});var uYr=s(vne);Yco=r(uYr,"perceiver"),uYr.forEach(t),Kco=r(Qwe," \u2014 "),QB=n(Qwe,"A",{href:!0});var _Yr=s(QB);Zco=r(_Yr,"PerceiverFeatureExtractor"),_Yr.forEach(t),efo=r(Qwe," (Perceiver model)"),Qwe.forEach(t),ofo=i(Z),Mh=n(Z,"LI",{});var Hwe=s(Mh);Fne=n(Hwe,"STRONG",{});var bYr=s(Fne);rfo=r(bYr,"poolformer"),bYr.forEach(t),tfo=r(Hwe," \u2014 "),HB=n(Hwe,"A",{href:!0});var vYr=s(HB);afo=r(vYr,"PoolFormerFeatureExtractor"),vYr.forEach(t),nfo=r(Hwe," (PoolFormer model)"),Hwe.forEach(t),sfo=i(Z),Eh=n(Z,"LI",{});var Uwe=s(Eh);Tne=n(Uwe,"STRONG",{});var FYr=s(Tne);lfo=r(FYr,"regnet"),FYr.forEach(t),ifo=r(Uwe," \u2014 "),UB=n(Uwe,"A",{href:!0});var TYr=s(UB);dfo=r(TYr,"ConvNextFeatureExtractor"),TYr.forEach(t),cfo=r(Uwe," (RegNet model)"),Uwe.forEach(t),ffo=i(Z),Ch=n(Z,"LI",{});var Jwe=s(Ch);Mne=n(Jwe,"STRONG",{});var MYr=s(Mne);mfo=r(MYr,"resnet"),MYr.forEach(t),gfo=r(Jwe," \u2014 "),JB=n(Jwe,"A",{href:!0});var EYr=s(JB);hfo=r(EYr,"ConvNextFeatureExtractor"),EYr.forEach(t),pfo=r(Jwe," (ResNet model)"),Jwe.forEach(t),ufo=i(Z),wh=n(Z,"LI",{});var Ywe=s(wh);Ene=n(Ywe,"STRONG",{});var CYr=s(Ene);_fo=r(CYr,"segformer"),CYr.forEach(t),bfo=r(Ywe," \u2014 "),YB=n(Ywe,"A",{href:!0});var wYr=s(YB);vfo=r(wYr,"SegformerFeatureExtractor"),wYr.forEach(t),Ffo=r(Ywe," (SegFormer model)"),Ywe.forEach(t),Tfo=i(Z),Ah=n(Z,"LI",{});var Kwe=s(Ah);Cne=n(Kwe,"STRONG",{});var AYr=s(Cne);Mfo=r(AYr,"speech_to_text"),AYr.forEach(t),Efo=r(Kwe," \u2014 "),KB=n(Kwe,"A",{href:!0});var yYr=s(KB);Cfo=r(yYr,"Speech2TextFeatureExtractor"),yYr.forEach(t),wfo=r(Kwe," (Speech2Text model)"),Kwe.forEach(t),Afo=i(Z),yh=n(Z,"LI",{});var Zwe=s(yh);wne=n(Zwe,"STRONG",{});var LYr=s(wne);yfo=r(LYr,"swin"),LYr.forEach(t),Lfo=r(Zwe," \u2014 "),ZB=n(Zwe,"A",{href:!0});var xYr=s(ZB);xfo=r(xYr,"ViTFeatureExtractor"),xYr.forEach(t),$fo=r(Zwe," (Swin model)"),Zwe.forEach(t),kfo=i(Z),Lh=n(Z,"LI",{});var e0e=s(Lh);Ane=n(e0e,"STRONG",{});var $Yr=s(Ane);Sfo=r($Yr,"van"),$Yr.forEach(t),Rfo=r(e0e," \u2014 "),eI=n(e0e,"A",{href:!0});var kYr=s(eI);Pfo=r(kYr,"ConvNextFeatureExtractor"),kYr.forEach(t),Bfo=r(e0e," (VAN model)"),e0e.forEach(t),Ifo=i(Z),xh=n(Z,"LI",{});var o0e=s(xh);yne=n(o0e,"STRONG",{});var SYr=s(yne);qfo=r(SYr,"vit"),SYr.forEach(t),Nfo=r(o0e," \u2014 "),oI=n(o0e,"A",{href:!0});var RYr=s(oI);jfo=r(RYr,"ViTFeatureExtractor"),RYr.forEach(t),Dfo=r(o0e," (ViT model)"),o0e.forEach(t),Gfo=i(Z),$h=n(Z,"LI",{});var r0e=s($h);Lne=n(r0e,"STRONG",{});var PYr=s(Lne);Ofo=r(PYr,"vit_mae"),PYr.forEach(t),Vfo=r(r0e," \u2014 "),rI=n(r0e,"A",{href:!0});var BYr=s(rI);Xfo=r(BYr,"ViTFeatureExtractor"),BYr.forEach(t),zfo=r(r0e," (ViTMAE model)"),r0e.forEach(t),Wfo=i(Z),kh=n(Z,"LI",{});var t0e=s(kh);xne=n(t0e,"STRONG",{});var IYr=s(xne);Qfo=r(IYr,"wav2vec2"),IYr.forEach(t),Hfo=r(t0e," \u2014 "),tI=n(t0e,"A",{href:!0});var qYr=s(tI);Ufo=r(qYr,"Wav2Vec2FeatureExtractor"),qYr.forEach(t),Jfo=r(t0e," (Wav2Vec2 model)"),t0e.forEach(t),Yfo=i(Z),Sh=n(Z,"LI",{});var a0e=s(Sh);$ne=n(a0e,"STRONG",{});var NYr=s($ne);Kfo=r(NYr,"wav2vec2-conformer"),NYr.forEach(t),Zfo=r(a0e," \u2014 "),aI=n(a0e,"A",{href:!0});var jYr=s(aI);emo=r(jYr,"Wav2Vec2FeatureExtractor"),jYr.forEach(t),omo=r(a0e," (Wav2Vec2-Conformer model)"),a0e.forEach(t),rmo=i(Z),Rh=n(Z,"LI",{});var n0e=s(Rh);kne=n(n0e,"STRONG",{});var DYr=s(kne);tmo=r(DYr,"yolos"),DYr.forEach(t),amo=r(n0e," \u2014 "),nI=n(n0e,"A",{href:!0});var GYr=s(nI);nmo=r(GYr,"YolosFeatureExtractor"),GYr.forEach(t),smo=r(n0e," (YOLOS model)"),n0e.forEach(t),Z.forEach(t),lmo=i(Zt),T(Ph.$$.fragment,Zt),imo=i(Zt),T(Bh.$$.fragment,Zt),Zt.forEach(t),dmo=i(js),Ih=n(js,"DIV",{class:!0});var Hje=s(Ih);T(OA.$$.fragment,Hje),cmo=i(Hje),Sne=n(Hje,"P",{});var OYr=s(Sne);fmo=r(OYr,"Register a new feature extractor for this class."),OYr.forEach(t),Hje.forEach(t),js.forEach(t),Qqe=i(f),Ei=n(f,"H2",{class:!0});var Uje=s(Ei);qh=n(Uje,"A",{id:!0,class:!0,href:!0});var VYr=s(qh);Rne=n(VYr,"SPAN",{});var XYr=s(Rne);T(VA.$$.fragment,XYr),XYr.forEach(t),VYr.forEach(t),mmo=i(Uje),Pne=n(Uje,"SPAN",{});var zYr=s(Pne);gmo=r(zYr,"AutoProcessor"),zYr.forEach(t),Uje.forEach(t),Hqe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(XA.$$.fragment,Ds),hmo=i(Ds),zA=n(Ds,"P",{});var Jje=s(zA);pmo=r(Jje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),sI=n(Jje,"A",{href:!0});var WYr=s(sI);umo=r(WYr,"AutoProcessor.from_pretrained()"),WYr.forEach(t),_mo=r(Jje," class method."),Jje.forEach(t),bmo=i(Ds),WA=n(Ds,"P",{});var Yje=s(WA);vmo=r(Yje,"This class cannot be instantiated directly using "),Bne=n(Yje,"CODE",{});var QYr=s(Bne);Fmo=r(QYr,"__init__()"),QYr.forEach(t),Tmo=r(Yje," (throws an error)."),Yje.forEach(t),Mmo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(QA.$$.fragment,ea),Emo=i(ea),Ine=n(ea,"P",{});var HYr=s(Ine);Cmo=r(HYr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),HYr.forEach(t),wmo=i(ea),Ci=n(ea,"P",{});var sZ=s(Ci);Amo=r(sZ,"The processor class to instantiate is selected based on the "),qne=n(sZ,"CODE",{});var UYr=s(qne);ymo=r(UYr,"model_type"),UYr.forEach(t),Lmo=r(sZ,` property of the config object (either
passed as an argument or loaded from `),Nne=n(sZ,"CODE",{});var JYr=s(Nne);xmo=r(JYr,"pretrained_model_name_or_path"),JYr.forEach(t),$mo=r(sZ," if possible):"),sZ.forEach(t),kmo=i(ea),he=n(ea,"UL",{});var _e=s(he);Nh=n(_e,"LI",{});var s0e=s(Nh);jne=n(s0e,"STRONG",{});var YYr=s(jne);Smo=r(YYr,"clip"),YYr.forEach(t),Rmo=r(s0e," \u2014 "),lI=n(s0e,"A",{href:!0});var KYr=s(lI);Pmo=r(KYr,"CLIPProcessor"),KYr.forEach(t),Bmo=r(s0e," (CLIP model)"),s0e.forEach(t),Imo=i(_e),jh=n(_e,"LI",{});var l0e=s(jh);Dne=n(l0e,"STRONG",{});var ZYr=s(Dne);qmo=r(ZYr,"flava"),ZYr.forEach(t),Nmo=r(l0e," \u2014 "),Gne=n(l0e,"CODE",{});var eKr=s(Gne);jmo=r(eKr,"FLAVAProcessor"),eKr.forEach(t),Dmo=r(l0e," (Flava model)"),l0e.forEach(t),Gmo=i(_e),Dh=n(_e,"LI",{});var i0e=s(Dh);One=n(i0e,"STRONG",{});var oKr=s(One);Omo=r(oKr,"layoutlmv2"),oKr.forEach(t),Vmo=r(i0e," \u2014 "),iI=n(i0e,"A",{href:!0});var rKr=s(iI);Xmo=r(rKr,"LayoutLMv2Processor"),rKr.forEach(t),zmo=r(i0e," (LayoutLMv2 model)"),i0e.forEach(t),Wmo=i(_e),Gh=n(_e,"LI",{});var d0e=s(Gh);Vne=n(d0e,"STRONG",{});var tKr=s(Vne);Qmo=r(tKr,"layoutlmv3"),tKr.forEach(t),Hmo=r(d0e," \u2014 "),dI=n(d0e,"A",{href:!0});var aKr=s(dI);Umo=r(aKr,"LayoutLMv3Processor"),aKr.forEach(t),Jmo=r(d0e," (LayoutLMv3 model)"),d0e.forEach(t),Ymo=i(_e),Oh=n(_e,"LI",{});var c0e=s(Oh);Xne=n(c0e,"STRONG",{});var nKr=s(Xne);Kmo=r(nKr,"layoutxlm"),nKr.forEach(t),Zmo=r(c0e," \u2014 "),cI=n(c0e,"A",{href:!0});var sKr=s(cI);ego=r(sKr,"LayoutXLMProcessor"),sKr.forEach(t),ogo=r(c0e," (LayoutXLM model)"),c0e.forEach(t),rgo=i(_e),Vh=n(_e,"LI",{});var f0e=s(Vh);zne=n(f0e,"STRONG",{});var lKr=s(zne);tgo=r(lKr,"sew"),lKr.forEach(t),ago=r(f0e," \u2014 "),fI=n(f0e,"A",{href:!0});var iKr=s(fI);ngo=r(iKr,"Wav2Vec2Processor"),iKr.forEach(t),sgo=r(f0e," (SEW model)"),f0e.forEach(t),lgo=i(_e),Xh=n(_e,"LI",{});var m0e=s(Xh);Wne=n(m0e,"STRONG",{});var dKr=s(Wne);igo=r(dKr,"sew-d"),dKr.forEach(t),dgo=r(m0e," \u2014 "),mI=n(m0e,"A",{href:!0});var cKr=s(mI);cgo=r(cKr,"Wav2Vec2Processor"),cKr.forEach(t),fgo=r(m0e," (SEW-D model)"),m0e.forEach(t),mgo=i(_e),zh=n(_e,"LI",{});var g0e=s(zh);Qne=n(g0e,"STRONG",{});var fKr=s(Qne);ggo=r(fKr,"speech_to_text"),fKr.forEach(t),hgo=r(g0e," \u2014 "),gI=n(g0e,"A",{href:!0});var mKr=s(gI);pgo=r(mKr,"Speech2TextProcessor"),mKr.forEach(t),ugo=r(g0e," (Speech2Text model)"),g0e.forEach(t),_go=i(_e),Wh=n(_e,"LI",{});var h0e=s(Wh);Hne=n(h0e,"STRONG",{});var gKr=s(Hne);bgo=r(gKr,"speech_to_text_2"),gKr.forEach(t),vgo=r(h0e," \u2014 "),hI=n(h0e,"A",{href:!0});var hKr=s(hI);Fgo=r(hKr,"Speech2Text2Processor"),hKr.forEach(t),Tgo=r(h0e," (Speech2Text2 model)"),h0e.forEach(t),Mgo=i(_e),Qh=n(_e,"LI",{});var p0e=s(Qh);Une=n(p0e,"STRONG",{});var pKr=s(Une);Ego=r(pKr,"trocr"),pKr.forEach(t),Cgo=r(p0e," \u2014 "),pI=n(p0e,"A",{href:!0});var uKr=s(pI);wgo=r(uKr,"TrOCRProcessor"),uKr.forEach(t),Ago=r(p0e," (TrOCR model)"),p0e.forEach(t),ygo=i(_e),Hh=n(_e,"LI",{});var u0e=s(Hh);Jne=n(u0e,"STRONG",{});var _Kr=s(Jne);Lgo=r(_Kr,"unispeech"),_Kr.forEach(t),xgo=r(u0e," \u2014 "),uI=n(u0e,"A",{href:!0});var bKr=s(uI);$go=r(bKr,"Wav2Vec2Processor"),bKr.forEach(t),kgo=r(u0e," (UniSpeech model)"),u0e.forEach(t),Sgo=i(_e),Uh=n(_e,"LI",{});var _0e=s(Uh);Yne=n(_0e,"STRONG",{});var vKr=s(Yne);Rgo=r(vKr,"unispeech-sat"),vKr.forEach(t),Pgo=r(_0e," \u2014 "),_I=n(_0e,"A",{href:!0});var FKr=s(_I);Bgo=r(FKr,"Wav2Vec2Processor"),FKr.forEach(t),Igo=r(_0e," (UniSpeechSat model)"),_0e.forEach(t),qgo=i(_e),Jh=n(_e,"LI",{});var b0e=s(Jh);Kne=n(b0e,"STRONG",{});var TKr=s(Kne);Ngo=r(TKr,"vilt"),TKr.forEach(t),jgo=r(b0e," \u2014 "),bI=n(b0e,"A",{href:!0});var MKr=s(bI);Dgo=r(MKr,"ViltProcessor"),MKr.forEach(t),Ggo=r(b0e," (ViLT model)"),b0e.forEach(t),Ogo=i(_e),Yh=n(_e,"LI",{});var v0e=s(Yh);Zne=n(v0e,"STRONG",{});var EKr=s(Zne);Vgo=r(EKr,"vision-text-dual-encoder"),EKr.forEach(t),Xgo=r(v0e," \u2014 "),vI=n(v0e,"A",{href:!0});var CKr=s(vI);zgo=r(CKr,"VisionTextDualEncoderProcessor"),CKr.forEach(t),Wgo=r(v0e," (VisionTextDualEncoder model)"),v0e.forEach(t),Qgo=i(_e),Kh=n(_e,"LI",{});var F0e=s(Kh);ese=n(F0e,"STRONG",{});var wKr=s(ese);Hgo=r(wKr,"wav2vec2"),wKr.forEach(t),Ugo=r(F0e," \u2014 "),FI=n(F0e,"A",{href:!0});var AKr=s(FI);Jgo=r(AKr,"Wav2Vec2Processor"),AKr.forEach(t),Ygo=r(F0e," (Wav2Vec2 model)"),F0e.forEach(t),Kgo=i(_e),Zh=n(_e,"LI",{});var T0e=s(Zh);ose=n(T0e,"STRONG",{});var yKr=s(ose);Zgo=r(yKr,"wav2vec2-conformer"),yKr.forEach(t),eho=r(T0e," \u2014 "),TI=n(T0e,"A",{href:!0});var LKr=s(TI);oho=r(LKr,"Wav2Vec2Processor"),LKr.forEach(t),rho=r(T0e," (Wav2Vec2-Conformer model)"),T0e.forEach(t),tho=i(_e),ep=n(_e,"LI",{});var M0e=s(ep);rse=n(M0e,"STRONG",{});var xKr=s(rse);aho=r(xKr,"wavlm"),xKr.forEach(t),nho=r(M0e," \u2014 "),MI=n(M0e,"A",{href:!0});var $Kr=s(MI);sho=r($Kr,"Wav2Vec2Processor"),$Kr.forEach(t),lho=r(M0e," (WavLM model)"),M0e.forEach(t),_e.forEach(t),iho=i(ea),T(op.$$.fragment,ea),dho=i(ea),T(rp.$$.fragment,ea),ea.forEach(t),cho=i(Ds),tp=n(Ds,"DIV",{class:!0});var Kje=s(tp);T(HA.$$.fragment,Kje),fho=i(Kje),tse=n(Kje,"P",{});var kKr=s(tse);mho=r(kKr,"Register a new processor for this class."),kKr.forEach(t),Kje.forEach(t),Ds.forEach(t),Uqe=i(f),wi=n(f,"H2",{class:!0});var Zje=s(wi);ap=n(Zje,"A",{id:!0,class:!0,href:!0});var SKr=s(ap);ase=n(SKr,"SPAN",{});var RKr=s(ase);T(UA.$$.fragment,RKr),RKr.forEach(t),SKr.forEach(t),gho=i(Zje),nse=n(Zje,"SPAN",{});var PKr=s(nse);hho=r(PKr,"AutoModel"),PKr.forEach(t),Zje.forEach(t),Jqe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(JA.$$.fragment,Gs),pho=i(Gs),Ai=n(Gs,"P",{});var lZ=s(Ai);uho=r(lZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),EI=n(lZ,"A",{href:!0});var BKr=s(EI);_ho=r(BKr,"from_pretrained()"),BKr.forEach(t),bho=r(lZ," class method or the "),CI=n(lZ,"A",{href:!0});var IKr=s(CI);vho=r(IKr,"from_config()"),IKr.forEach(t),Fho=r(lZ,` class
method.`),lZ.forEach(t),Tho=i(Gs),YA=n(Gs,"P",{});var eDe=s(YA);Mho=r(eDe,"This class cannot be instantiated directly using "),sse=n(eDe,"CODE",{});var qKr=s(sse);Eho=r(qKr,"__init__()"),qKr.forEach(t),Cho=r(eDe," (throws an error)."),eDe.forEach(t),who=i(Gs),tt=n(Gs,"DIV",{class:!0});var yw=s(tt);T(KA.$$.fragment,yw),Aho=i(yw),lse=n(yw,"P",{});var NKr=s(lse);yho=r(NKr,"Instantiates one of the base model classes of the library from a configuration."),NKr.forEach(t),Lho=i(yw),yi=n(yw,"P",{});var iZ=s(yi);xho=r(iZ,`Note:
Loading a model from its configuration file does `),ise=n(iZ,"STRONG",{});var jKr=s(ise);$ho=r(jKr,"not"),jKr.forEach(t),kho=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wI=n(iZ,"A",{href:!0});var DKr=s(wI);Sho=r(DKr,"from_pretrained()"),DKr.forEach(t),Rho=r(iZ," to load the model weights."),iZ.forEach(t),Pho=i(yw),T(np.$$.fragment,yw),yw.forEach(t),Bho=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(ZA.$$.fragment,oa),Iho=i(oa),dse=n(oa,"P",{});var GKr=s(dse);qho=r(GKr,"Instantiate one of the base model classes of the library from a pretrained model."),GKr.forEach(t),Nho=i(oa),La=n(oa,"P",{});var Lw=s(La);jho=r(Lw,"The model class to instantiate is selected based on the "),cse=n(Lw,"CODE",{});var OKr=s(cse);Dho=r(OKr,"model_type"),OKr.forEach(t),Gho=r(Lw,` property of the config object (either
passed as an argument or loaded from `),fse=n(Lw,"CODE",{});var VKr=s(fse);Oho=r(VKr,"pretrained_model_name_or_path"),VKr.forEach(t),Vho=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mse=n(Lw,"CODE",{});var XKr=s(mse);Xho=r(XKr,"pretrained_model_name_or_path"),XKr.forEach(t),zho=r(Lw,":"),Lw.forEach(t),Who=i(oa),x=n(oa,"UL",{});var $=s(x);sp=n($,"LI",{});var E0e=s(sp);gse=n(E0e,"STRONG",{});var zKr=s(gse);Qho=r(zKr,"albert"),zKr.forEach(t),Hho=r(E0e," \u2014 "),AI=n(E0e,"A",{href:!0});var WKr=s(AI);Uho=r(WKr,"AlbertModel"),WKr.forEach(t),Jho=r(E0e," (ALBERT model)"),E0e.forEach(t),Yho=i($),lp=n($,"LI",{});var C0e=s(lp);hse=n(C0e,"STRONG",{});var QKr=s(hse);Kho=r(QKr,"bart"),QKr.forEach(t),Zho=r(C0e," \u2014 "),yI=n(C0e,"A",{href:!0});var HKr=s(yI);epo=r(HKr,"BartModel"),HKr.forEach(t),opo=r(C0e," (BART model)"),C0e.forEach(t),rpo=i($),ip=n($,"LI",{});var w0e=s(ip);pse=n(w0e,"STRONG",{});var UKr=s(pse);tpo=r(UKr,"beit"),UKr.forEach(t),apo=r(w0e," \u2014 "),LI=n(w0e,"A",{href:!0});var JKr=s(LI);npo=r(JKr,"BeitModel"),JKr.forEach(t),spo=r(w0e," (BEiT model)"),w0e.forEach(t),lpo=i($),dp=n($,"LI",{});var A0e=s(dp);use=n(A0e,"STRONG",{});var YKr=s(use);ipo=r(YKr,"bert"),YKr.forEach(t),dpo=r(A0e," \u2014 "),xI=n(A0e,"A",{href:!0});var KKr=s(xI);cpo=r(KKr,"BertModel"),KKr.forEach(t),fpo=r(A0e," (BERT model)"),A0e.forEach(t),mpo=i($),cp=n($,"LI",{});var y0e=s(cp);_se=n(y0e,"STRONG",{});var ZKr=s(_se);gpo=r(ZKr,"bert-generation"),ZKr.forEach(t),hpo=r(y0e," \u2014 "),$I=n(y0e,"A",{href:!0});var eZr=s($I);ppo=r(eZr,"BertGenerationEncoder"),eZr.forEach(t),upo=r(y0e," (Bert Generation model)"),y0e.forEach(t),_po=i($),fp=n($,"LI",{});var L0e=s(fp);bse=n(L0e,"STRONG",{});var oZr=s(bse);bpo=r(oZr,"big_bird"),oZr.forEach(t),vpo=r(L0e," \u2014 "),kI=n(L0e,"A",{href:!0});var rZr=s(kI);Fpo=r(rZr,"BigBirdModel"),rZr.forEach(t),Tpo=r(L0e," (BigBird model)"),L0e.forEach(t),Mpo=i($),mp=n($,"LI",{});var x0e=s(mp);vse=n(x0e,"STRONG",{});var tZr=s(vse);Epo=r(tZr,"bigbird_pegasus"),tZr.forEach(t),Cpo=r(x0e," \u2014 "),SI=n(x0e,"A",{href:!0});var aZr=s(SI);wpo=r(aZr,"BigBirdPegasusModel"),aZr.forEach(t),Apo=r(x0e," (BigBirdPegasus model)"),x0e.forEach(t),ypo=i($),gp=n($,"LI",{});var $0e=s(gp);Fse=n($0e,"STRONG",{});var nZr=s(Fse);Lpo=r(nZr,"blenderbot"),nZr.forEach(t),xpo=r($0e," \u2014 "),RI=n($0e,"A",{href:!0});var sZr=s(RI);$po=r(sZr,"BlenderbotModel"),sZr.forEach(t),kpo=r($0e," (Blenderbot model)"),$0e.forEach(t),Spo=i($),hp=n($,"LI",{});var k0e=s(hp);Tse=n(k0e,"STRONG",{});var lZr=s(Tse);Rpo=r(lZr,"blenderbot-small"),lZr.forEach(t),Ppo=r(k0e," \u2014 "),PI=n(k0e,"A",{href:!0});var iZr=s(PI);Bpo=r(iZr,"BlenderbotSmallModel"),iZr.forEach(t),Ipo=r(k0e," (BlenderbotSmall model)"),k0e.forEach(t),qpo=i($),pp=n($,"LI",{});var S0e=s(pp);Mse=n(S0e,"STRONG",{});var dZr=s(Mse);Npo=r(dZr,"camembert"),dZr.forEach(t),jpo=r(S0e," \u2014 "),BI=n(S0e,"A",{href:!0});var cZr=s(BI);Dpo=r(cZr,"CamembertModel"),cZr.forEach(t),Gpo=r(S0e," (CamemBERT model)"),S0e.forEach(t),Opo=i($),up=n($,"LI",{});var R0e=s(up);Ese=n(R0e,"STRONG",{});var fZr=s(Ese);Vpo=r(fZr,"canine"),fZr.forEach(t),Xpo=r(R0e," \u2014 "),II=n(R0e,"A",{href:!0});var mZr=s(II);zpo=r(mZr,"CanineModel"),mZr.forEach(t),Wpo=r(R0e," (Canine model)"),R0e.forEach(t),Qpo=i($),_p=n($,"LI",{});var P0e=s(_p);Cse=n(P0e,"STRONG",{});var gZr=s(Cse);Hpo=r(gZr,"clip"),gZr.forEach(t),Upo=r(P0e," \u2014 "),qI=n(P0e,"A",{href:!0});var hZr=s(qI);Jpo=r(hZr,"CLIPModel"),hZr.forEach(t),Ypo=r(P0e," (CLIP model)"),P0e.forEach(t),Kpo=i($),bp=n($,"LI",{});var B0e=s(bp);wse=n(B0e,"STRONG",{});var pZr=s(wse);Zpo=r(pZr,"convbert"),pZr.forEach(t),euo=r(B0e," \u2014 "),NI=n(B0e,"A",{href:!0});var uZr=s(NI);ouo=r(uZr,"ConvBertModel"),uZr.forEach(t),ruo=r(B0e," (ConvBERT model)"),B0e.forEach(t),tuo=i($),vp=n($,"LI",{});var I0e=s(vp);Ase=n(I0e,"STRONG",{});var _Zr=s(Ase);auo=r(_Zr,"convnext"),_Zr.forEach(t),nuo=r(I0e," \u2014 "),jI=n(I0e,"A",{href:!0});var bZr=s(jI);suo=r(bZr,"ConvNextModel"),bZr.forEach(t),luo=r(I0e," (ConvNext model)"),I0e.forEach(t),iuo=i($),Fp=n($,"LI",{});var q0e=s(Fp);yse=n(q0e,"STRONG",{});var vZr=s(yse);duo=r(vZr,"ctrl"),vZr.forEach(t),cuo=r(q0e," \u2014 "),DI=n(q0e,"A",{href:!0});var FZr=s(DI);fuo=r(FZr,"CTRLModel"),FZr.forEach(t),muo=r(q0e," (CTRL model)"),q0e.forEach(t),guo=i($),Tp=n($,"LI",{});var N0e=s(Tp);Lse=n(N0e,"STRONG",{});var TZr=s(Lse);huo=r(TZr,"cvt"),TZr.forEach(t),puo=r(N0e," \u2014 "),GI=n(N0e,"A",{href:!0});var MZr=s(GI);uuo=r(MZr,"CvtModel"),MZr.forEach(t),_uo=r(N0e," (CvT model)"),N0e.forEach(t),buo=i($),Mp=n($,"LI",{});var j0e=s(Mp);xse=n(j0e,"STRONG",{});var EZr=s(xse);vuo=r(EZr,"data2vec-audio"),EZr.forEach(t),Fuo=r(j0e," \u2014 "),OI=n(j0e,"A",{href:!0});var CZr=s(OI);Tuo=r(CZr,"Data2VecAudioModel"),CZr.forEach(t),Muo=r(j0e," (Data2VecAudio model)"),j0e.forEach(t),Euo=i($),Ep=n($,"LI",{});var D0e=s(Ep);$se=n(D0e,"STRONG",{});var wZr=s($se);Cuo=r(wZr,"data2vec-text"),wZr.forEach(t),wuo=r(D0e," \u2014 "),VI=n(D0e,"A",{href:!0});var AZr=s(VI);Auo=r(AZr,"Data2VecTextModel"),AZr.forEach(t),yuo=r(D0e," (Data2VecText model)"),D0e.forEach(t),Luo=i($),Cp=n($,"LI",{});var G0e=s(Cp);kse=n(G0e,"STRONG",{});var yZr=s(kse);xuo=r(yZr,"data2vec-vision"),yZr.forEach(t),$uo=r(G0e," \u2014 "),XI=n(G0e,"A",{href:!0});var LZr=s(XI);kuo=r(LZr,"Data2VecVisionModel"),LZr.forEach(t),Suo=r(G0e," (Data2VecVision model)"),G0e.forEach(t),Ruo=i($),wp=n($,"LI",{});var O0e=s(wp);Sse=n(O0e,"STRONG",{});var xZr=s(Sse);Puo=r(xZr,"deberta"),xZr.forEach(t),Buo=r(O0e," \u2014 "),zI=n(O0e,"A",{href:!0});var $Zr=s(zI);Iuo=r($Zr,"DebertaModel"),$Zr.forEach(t),quo=r(O0e," (DeBERTa model)"),O0e.forEach(t),Nuo=i($),Ap=n($,"LI",{});var V0e=s(Ap);Rse=n(V0e,"STRONG",{});var kZr=s(Rse);juo=r(kZr,"deberta-v2"),kZr.forEach(t),Duo=r(V0e," \u2014 "),WI=n(V0e,"A",{href:!0});var SZr=s(WI);Guo=r(SZr,"DebertaV2Model"),SZr.forEach(t),Ouo=r(V0e," (DeBERTa-v2 model)"),V0e.forEach(t),Vuo=i($),yp=n($,"LI",{});var X0e=s(yp);Pse=n(X0e,"STRONG",{});var RZr=s(Pse);Xuo=r(RZr,"decision_transformer"),RZr.forEach(t),zuo=r(X0e," \u2014 "),QI=n(X0e,"A",{href:!0});var PZr=s(QI);Wuo=r(PZr,"DecisionTransformerModel"),PZr.forEach(t),Quo=r(X0e," (Decision Transformer model)"),X0e.forEach(t),Huo=i($),Lp=n($,"LI",{});var z0e=s(Lp);Bse=n(z0e,"STRONG",{});var BZr=s(Bse);Uuo=r(BZr,"deit"),BZr.forEach(t),Juo=r(z0e," \u2014 "),HI=n(z0e,"A",{href:!0});var IZr=s(HI);Yuo=r(IZr,"DeiTModel"),IZr.forEach(t),Kuo=r(z0e," (DeiT model)"),z0e.forEach(t),Zuo=i($),xp=n($,"LI",{});var W0e=s(xp);Ise=n(W0e,"STRONG",{});var qZr=s(Ise);e_o=r(qZr,"detr"),qZr.forEach(t),o_o=r(W0e," \u2014 "),UI=n(W0e,"A",{href:!0});var NZr=s(UI);r_o=r(NZr,"DetrModel"),NZr.forEach(t),t_o=r(W0e," (DETR model)"),W0e.forEach(t),a_o=i($),$p=n($,"LI",{});var Q0e=s($p);qse=n(Q0e,"STRONG",{});var jZr=s(qse);n_o=r(jZr,"distilbert"),jZr.forEach(t),s_o=r(Q0e," \u2014 "),JI=n(Q0e,"A",{href:!0});var DZr=s(JI);l_o=r(DZr,"DistilBertModel"),DZr.forEach(t),i_o=r(Q0e," (DistilBERT model)"),Q0e.forEach(t),d_o=i($),kp=n($,"LI",{});var H0e=s(kp);Nse=n(H0e,"STRONG",{});var GZr=s(Nse);c_o=r(GZr,"dpr"),GZr.forEach(t),f_o=r(H0e," \u2014 "),YI=n(H0e,"A",{href:!0});var OZr=s(YI);m_o=r(OZr,"DPRQuestionEncoder"),OZr.forEach(t),g_o=r(H0e," (DPR model)"),H0e.forEach(t),h_o=i($),Sp=n($,"LI",{});var U0e=s(Sp);jse=n(U0e,"STRONG",{});var VZr=s(jse);p_o=r(VZr,"dpt"),VZr.forEach(t),u_o=r(U0e," \u2014 "),KI=n(U0e,"A",{href:!0});var XZr=s(KI);__o=r(XZr,"DPTModel"),XZr.forEach(t),b_o=r(U0e," (DPT model)"),U0e.forEach(t),v_o=i($),Rp=n($,"LI",{});var J0e=s(Rp);Dse=n(J0e,"STRONG",{});var zZr=s(Dse);F_o=r(zZr,"electra"),zZr.forEach(t),T_o=r(J0e," \u2014 "),ZI=n(J0e,"A",{href:!0});var WZr=s(ZI);M_o=r(WZr,"ElectraModel"),WZr.forEach(t),E_o=r(J0e," (ELECTRA model)"),J0e.forEach(t),C_o=i($),Pp=n($,"LI",{});var Y0e=s(Pp);Gse=n(Y0e,"STRONG",{});var QZr=s(Gse);w_o=r(QZr,"flaubert"),QZr.forEach(t),A_o=r(Y0e," \u2014 "),eq=n(Y0e,"A",{href:!0});var HZr=s(eq);y_o=r(HZr,"FlaubertModel"),HZr.forEach(t),L_o=r(Y0e," (FlauBERT model)"),Y0e.forEach(t),x_o=i($),Bp=n($,"LI",{});var K0e=s(Bp);Ose=n(K0e,"STRONG",{});var UZr=s(Ose);$_o=r(UZr,"flava"),UZr.forEach(t),k_o=r(K0e," \u2014 "),oq=n(K0e,"A",{href:!0});var JZr=s(oq);S_o=r(JZr,"FlavaModel"),JZr.forEach(t),R_o=r(K0e," (Flava model)"),K0e.forEach(t),P_o=i($),Ip=n($,"LI",{});var Z0e=s(Ip);Vse=n(Z0e,"STRONG",{});var YZr=s(Vse);B_o=r(YZr,"fnet"),YZr.forEach(t),I_o=r(Z0e," \u2014 "),rq=n(Z0e,"A",{href:!0});var KZr=s(rq);q_o=r(KZr,"FNetModel"),KZr.forEach(t),N_o=r(Z0e," (FNet model)"),Z0e.forEach(t),j_o=i($),qp=n($,"LI",{});var eAe=s(qp);Xse=n(eAe,"STRONG",{});var ZZr=s(Xse);D_o=r(ZZr,"fsmt"),ZZr.forEach(t),G_o=r(eAe," \u2014 "),tq=n(eAe,"A",{href:!0});var eet=s(tq);O_o=r(eet,"FSMTModel"),eet.forEach(t),V_o=r(eAe," (FairSeq Machine-Translation model)"),eAe.forEach(t),X_o=i($),Ps=n($,"LI",{});var N$=s(Ps);zse=n(N$,"STRONG",{});var oet=s(zse);z_o=r(oet,"funnel"),oet.forEach(t),W_o=r(N$," \u2014 "),aq=n(N$,"A",{href:!0});var ret=s(aq);Q_o=r(ret,"FunnelModel"),ret.forEach(t),H_o=r(N$," or "),nq=n(N$,"A",{href:!0});var tet=s(nq);U_o=r(tet,"FunnelBaseModel"),tet.forEach(t),J_o=r(N$," (Funnel Transformer model)"),N$.forEach(t),Y_o=i($),Np=n($,"LI",{});var oAe=s(Np);Wse=n(oAe,"STRONG",{});var aet=s(Wse);K_o=r(aet,"glpn"),aet.forEach(t),Z_o=r(oAe," \u2014 "),sq=n(oAe,"A",{href:!0});var net=s(sq);e3o=r(net,"GLPNModel"),net.forEach(t),o3o=r(oAe," (GLPN model)"),oAe.forEach(t),r3o=i($),jp=n($,"LI",{});var rAe=s(jp);Qse=n(rAe,"STRONG",{});var set=s(Qse);t3o=r(set,"gpt2"),set.forEach(t),a3o=r(rAe," \u2014 "),lq=n(rAe,"A",{href:!0});var iet=s(lq);n3o=r(iet,"GPT2Model"),iet.forEach(t),s3o=r(rAe," (OpenAI GPT-2 model)"),rAe.forEach(t),l3o=i($),Dp=n($,"LI",{});var tAe=s(Dp);Hse=n(tAe,"STRONG",{});var det=s(Hse);i3o=r(det,"gpt_neo"),det.forEach(t),d3o=r(tAe," \u2014 "),iq=n(tAe,"A",{href:!0});var cet=s(iq);c3o=r(cet,"GPTNeoModel"),cet.forEach(t),f3o=r(tAe," (GPT Neo model)"),tAe.forEach(t),m3o=i($),Gp=n($,"LI",{});var aAe=s(Gp);Use=n(aAe,"STRONG",{});var fet=s(Use);g3o=r(fet,"gptj"),fet.forEach(t),h3o=r(aAe," \u2014 "),dq=n(aAe,"A",{href:!0});var met=s(dq);p3o=r(met,"GPTJModel"),met.forEach(t),u3o=r(aAe," (GPT-J model)"),aAe.forEach(t),_3o=i($),Op=n($,"LI",{});var nAe=s(Op);Jse=n(nAe,"STRONG",{});var get=s(Jse);b3o=r(get,"hubert"),get.forEach(t),v3o=r(nAe," \u2014 "),cq=n(nAe,"A",{href:!0});var het=s(cq);F3o=r(het,"HubertModel"),het.forEach(t),T3o=r(nAe," (Hubert model)"),nAe.forEach(t),M3o=i($),Vp=n($,"LI",{});var sAe=s(Vp);Yse=n(sAe,"STRONG",{});var pet=s(Yse);E3o=r(pet,"ibert"),pet.forEach(t),C3o=r(sAe," \u2014 "),fq=n(sAe,"A",{href:!0});var uet=s(fq);w3o=r(uet,"IBertModel"),uet.forEach(t),A3o=r(sAe," (I-BERT model)"),sAe.forEach(t),y3o=i($),Xp=n($,"LI",{});var lAe=s(Xp);Kse=n(lAe,"STRONG",{});var _et=s(Kse);L3o=r(_et,"imagegpt"),_et.forEach(t),x3o=r(lAe," \u2014 "),mq=n(lAe,"A",{href:!0});var bet=s(mq);$3o=r(bet,"ImageGPTModel"),bet.forEach(t),k3o=r(lAe," (ImageGPT model)"),lAe.forEach(t),S3o=i($),zp=n($,"LI",{});var iAe=s(zp);Zse=n(iAe,"STRONG",{});var vet=s(Zse);R3o=r(vet,"layoutlm"),vet.forEach(t),P3o=r(iAe," \u2014 "),gq=n(iAe,"A",{href:!0});var Fet=s(gq);B3o=r(Fet,"LayoutLMModel"),Fet.forEach(t),I3o=r(iAe," (LayoutLM model)"),iAe.forEach(t),q3o=i($),Wp=n($,"LI",{});var dAe=s(Wp);ele=n(dAe,"STRONG",{});var Tet=s(ele);N3o=r(Tet,"layoutlmv2"),Tet.forEach(t),j3o=r(dAe," \u2014 "),hq=n(dAe,"A",{href:!0});var Met=s(hq);D3o=r(Met,"LayoutLMv2Model"),Met.forEach(t),G3o=r(dAe," (LayoutLMv2 model)"),dAe.forEach(t),O3o=i($),Qp=n($,"LI",{});var cAe=s(Qp);ole=n(cAe,"STRONG",{});var Eet=s(ole);V3o=r(Eet,"layoutlmv3"),Eet.forEach(t),X3o=r(cAe," \u2014 "),pq=n(cAe,"A",{href:!0});var Cet=s(pq);z3o=r(Cet,"LayoutLMv3Model"),Cet.forEach(t),W3o=r(cAe," (LayoutLMv3 model)"),cAe.forEach(t),Q3o=i($),Hp=n($,"LI",{});var fAe=s(Hp);rle=n(fAe,"STRONG",{});var wet=s(rle);H3o=r(wet,"led"),wet.forEach(t),U3o=r(fAe," \u2014 "),uq=n(fAe,"A",{href:!0});var Aet=s(uq);J3o=r(Aet,"LEDModel"),Aet.forEach(t),Y3o=r(fAe," (LED model)"),fAe.forEach(t),K3o=i($),Up=n($,"LI",{});var mAe=s(Up);tle=n(mAe,"STRONG",{});var yet=s(tle);Z3o=r(yet,"longformer"),yet.forEach(t),e1o=r(mAe," \u2014 "),_q=n(mAe,"A",{href:!0});var Let=s(_q);o1o=r(Let,"LongformerModel"),Let.forEach(t),r1o=r(mAe," (Longformer model)"),mAe.forEach(t),t1o=i($),Jp=n($,"LI",{});var gAe=s(Jp);ale=n(gAe,"STRONG",{});var xet=s(ale);a1o=r(xet,"luke"),xet.forEach(t),n1o=r(gAe," \u2014 "),bq=n(gAe,"A",{href:!0});var $et=s(bq);s1o=r($et,"LukeModel"),$et.forEach(t),l1o=r(gAe," (LUKE model)"),gAe.forEach(t),i1o=i($),Yp=n($,"LI",{});var hAe=s(Yp);nle=n(hAe,"STRONG",{});var ket=s(nle);d1o=r(ket,"lxmert"),ket.forEach(t),c1o=r(hAe," \u2014 "),vq=n(hAe,"A",{href:!0});var Set=s(vq);f1o=r(Set,"LxmertModel"),Set.forEach(t),m1o=r(hAe," (LXMERT model)"),hAe.forEach(t),g1o=i($),Kp=n($,"LI",{});var pAe=s(Kp);sle=n(pAe,"STRONG",{});var Ret=s(sle);h1o=r(Ret,"m2m_100"),Ret.forEach(t),p1o=r(pAe," \u2014 "),Fq=n(pAe,"A",{href:!0});var Pet=s(Fq);u1o=r(Pet,"M2M100Model"),Pet.forEach(t),_1o=r(pAe," (M2M100 model)"),pAe.forEach(t),b1o=i($),Zp=n($,"LI",{});var uAe=s(Zp);lle=n(uAe,"STRONG",{});var Bet=s(lle);v1o=r(Bet,"marian"),Bet.forEach(t),F1o=r(uAe," \u2014 "),Tq=n(uAe,"A",{href:!0});var Iet=s(Tq);T1o=r(Iet,"MarianModel"),Iet.forEach(t),M1o=r(uAe," (Marian model)"),uAe.forEach(t),E1o=i($),eu=n($,"LI",{});var _Ae=s(eu);ile=n(_Ae,"STRONG",{});var qet=s(ile);C1o=r(qet,"maskformer"),qet.forEach(t),w1o=r(_Ae," \u2014 "),Mq=n(_Ae,"A",{href:!0});var Net=s(Mq);A1o=r(Net,"MaskFormerModel"),Net.forEach(t),y1o=r(_Ae," (MaskFormer model)"),_Ae.forEach(t),L1o=i($),ou=n($,"LI",{});var bAe=s(ou);dle=n(bAe,"STRONG",{});var jet=s(dle);x1o=r(jet,"mbart"),jet.forEach(t),$1o=r(bAe," \u2014 "),Eq=n(bAe,"A",{href:!0});var Det=s(Eq);k1o=r(Det,"MBartModel"),Det.forEach(t),S1o=r(bAe," (mBART model)"),bAe.forEach(t),R1o=i($),ru=n($,"LI",{});var vAe=s(ru);cle=n(vAe,"STRONG",{});var Get=s(cle);P1o=r(Get,"megatron-bert"),Get.forEach(t),B1o=r(vAe," \u2014 "),Cq=n(vAe,"A",{href:!0});var Oet=s(Cq);I1o=r(Oet,"MegatronBertModel"),Oet.forEach(t),q1o=r(vAe," (MegatronBert model)"),vAe.forEach(t),N1o=i($),tu=n($,"LI",{});var FAe=s(tu);fle=n(FAe,"STRONG",{});var Vet=s(fle);j1o=r(Vet,"mobilebert"),Vet.forEach(t),D1o=r(FAe," \u2014 "),wq=n(FAe,"A",{href:!0});var Xet=s(wq);G1o=r(Xet,"MobileBertModel"),Xet.forEach(t),O1o=r(FAe," (MobileBERT model)"),FAe.forEach(t),V1o=i($),au=n($,"LI",{});var TAe=s(au);mle=n(TAe,"STRONG",{});var zet=s(mle);X1o=r(zet,"mpnet"),zet.forEach(t),z1o=r(TAe," \u2014 "),Aq=n(TAe,"A",{href:!0});var Wet=s(Aq);W1o=r(Wet,"MPNetModel"),Wet.forEach(t),Q1o=r(TAe," (MPNet model)"),TAe.forEach(t),H1o=i($),nu=n($,"LI",{});var MAe=s(nu);gle=n(MAe,"STRONG",{});var Qet=s(gle);U1o=r(Qet,"mt5"),Qet.forEach(t),J1o=r(MAe," \u2014 "),yq=n(MAe,"A",{href:!0});var Het=s(yq);Y1o=r(Het,"MT5Model"),Het.forEach(t),K1o=r(MAe," (mT5 model)"),MAe.forEach(t),Z1o=i($),su=n($,"LI",{});var EAe=s(su);hle=n(EAe,"STRONG",{});var Uet=s(hle);ebo=r(Uet,"nystromformer"),Uet.forEach(t),obo=r(EAe," \u2014 "),Lq=n(EAe,"A",{href:!0});var Jet=s(Lq);rbo=r(Jet,"NystromformerModel"),Jet.forEach(t),tbo=r(EAe," (Nystromformer model)"),EAe.forEach(t),abo=i($),lu=n($,"LI",{});var CAe=s(lu);ple=n(CAe,"STRONG",{});var Yet=s(ple);nbo=r(Yet,"openai-gpt"),Yet.forEach(t),sbo=r(CAe," \u2014 "),xq=n(CAe,"A",{href:!0});var Ket=s(xq);lbo=r(Ket,"OpenAIGPTModel"),Ket.forEach(t),ibo=r(CAe," (OpenAI GPT model)"),CAe.forEach(t),dbo=i($),iu=n($,"LI",{});var wAe=s(iu);ule=n(wAe,"STRONG",{});var Zet=s(ule);cbo=r(Zet,"opt"),Zet.forEach(t),fbo=r(wAe," \u2014 "),$q=n(wAe,"A",{href:!0});var eot=s($q);mbo=r(eot,"OPTModel"),eot.forEach(t),gbo=r(wAe," (OPT model)"),wAe.forEach(t),hbo=i($),du=n($,"LI",{});var AAe=s(du);_le=n(AAe,"STRONG",{});var oot=s(_le);pbo=r(oot,"pegasus"),oot.forEach(t),ubo=r(AAe," \u2014 "),kq=n(AAe,"A",{href:!0});var rot=s(kq);_bo=r(rot,"PegasusModel"),rot.forEach(t),bbo=r(AAe," (Pegasus model)"),AAe.forEach(t),vbo=i($),cu=n($,"LI",{});var yAe=s(cu);ble=n(yAe,"STRONG",{});var tot=s(ble);Fbo=r(tot,"perceiver"),tot.forEach(t),Tbo=r(yAe," \u2014 "),Sq=n(yAe,"A",{href:!0});var aot=s(Sq);Mbo=r(aot,"PerceiverModel"),aot.forEach(t),Ebo=r(yAe," (Perceiver model)"),yAe.forEach(t),Cbo=i($),fu=n($,"LI",{});var LAe=s(fu);vle=n(LAe,"STRONG",{});var not=s(vle);wbo=r(not,"plbart"),not.forEach(t),Abo=r(LAe," \u2014 "),Rq=n(LAe,"A",{href:!0});var sot=s(Rq);ybo=r(sot,"PLBartModel"),sot.forEach(t),Lbo=r(LAe," (PLBart model)"),LAe.forEach(t),xbo=i($),mu=n($,"LI",{});var xAe=s(mu);Fle=n(xAe,"STRONG",{});var lot=s(Fle);$bo=r(lot,"poolformer"),lot.forEach(t),kbo=r(xAe," \u2014 "),Pq=n(xAe,"A",{href:!0});var iot=s(Pq);Sbo=r(iot,"PoolFormerModel"),iot.forEach(t),Rbo=r(xAe," (PoolFormer model)"),xAe.forEach(t),Pbo=i($),gu=n($,"LI",{});var $Ae=s(gu);Tle=n($Ae,"STRONG",{});var dot=s(Tle);Bbo=r(dot,"prophetnet"),dot.forEach(t),Ibo=r($Ae," \u2014 "),Bq=n($Ae,"A",{href:!0});var cot=s(Bq);qbo=r(cot,"ProphetNetModel"),cot.forEach(t),Nbo=r($Ae," (ProphetNet model)"),$Ae.forEach(t),jbo=i($),hu=n($,"LI",{});var kAe=s(hu);Mle=n(kAe,"STRONG",{});var fot=s(Mle);Dbo=r(fot,"qdqbert"),fot.forEach(t),Gbo=r(kAe," \u2014 "),Iq=n(kAe,"A",{href:!0});var mot=s(Iq);Obo=r(mot,"QDQBertModel"),mot.forEach(t),Vbo=r(kAe," (QDQBert model)"),kAe.forEach(t),Xbo=i($),pu=n($,"LI",{});var SAe=s(pu);Ele=n(SAe,"STRONG",{});var got=s(Ele);zbo=r(got,"reformer"),got.forEach(t),Wbo=r(SAe," \u2014 "),qq=n(SAe,"A",{href:!0});var hot=s(qq);Qbo=r(hot,"ReformerModel"),hot.forEach(t),Hbo=r(SAe," (Reformer model)"),SAe.forEach(t),Ubo=i($),uu=n($,"LI",{});var RAe=s(uu);Cle=n(RAe,"STRONG",{});var pot=s(Cle);Jbo=r(pot,"regnet"),pot.forEach(t),Ybo=r(RAe," \u2014 "),Nq=n(RAe,"A",{href:!0});var uot=s(Nq);Kbo=r(uot,"RegNetModel"),uot.forEach(t),Zbo=r(RAe," (RegNet model)"),RAe.forEach(t),e2o=i($),_u=n($,"LI",{});var PAe=s(_u);wle=n(PAe,"STRONG",{});var _ot=s(wle);o2o=r(_ot,"rembert"),_ot.forEach(t),r2o=r(PAe," \u2014 "),jq=n(PAe,"A",{href:!0});var bot=s(jq);t2o=r(bot,"RemBertModel"),bot.forEach(t),a2o=r(PAe," (RemBERT model)"),PAe.forEach(t),n2o=i($),bu=n($,"LI",{});var BAe=s(bu);Ale=n(BAe,"STRONG",{});var vot=s(Ale);s2o=r(vot,"resnet"),vot.forEach(t),l2o=r(BAe," \u2014 "),Dq=n(BAe,"A",{href:!0});var Fot=s(Dq);i2o=r(Fot,"ResNetModel"),Fot.forEach(t),d2o=r(BAe," (ResNet model)"),BAe.forEach(t),c2o=i($),vu=n($,"LI",{});var IAe=s(vu);yle=n(IAe,"STRONG",{});var Tot=s(yle);f2o=r(Tot,"retribert"),Tot.forEach(t),m2o=r(IAe," \u2014 "),Gq=n(IAe,"A",{href:!0});var Mot=s(Gq);g2o=r(Mot,"RetriBertModel"),Mot.forEach(t),h2o=r(IAe," (RetriBERT model)"),IAe.forEach(t),p2o=i($),Fu=n($,"LI",{});var qAe=s(Fu);Lle=n(qAe,"STRONG",{});var Eot=s(Lle);u2o=r(Eot,"roberta"),Eot.forEach(t),_2o=r(qAe," \u2014 "),Oq=n(qAe,"A",{href:!0});var Cot=s(Oq);b2o=r(Cot,"RobertaModel"),Cot.forEach(t),v2o=r(qAe," (RoBERTa model)"),qAe.forEach(t),F2o=i($),Tu=n($,"LI",{});var NAe=s(Tu);xle=n(NAe,"STRONG",{});var wot=s(xle);T2o=r(wot,"roformer"),wot.forEach(t),M2o=r(NAe," \u2014 "),Vq=n(NAe,"A",{href:!0});var Aot=s(Vq);E2o=r(Aot,"RoFormerModel"),Aot.forEach(t),C2o=r(NAe," (RoFormer model)"),NAe.forEach(t),w2o=i($),Mu=n($,"LI",{});var jAe=s(Mu);$le=n(jAe,"STRONG",{});var yot=s($le);A2o=r(yot,"segformer"),yot.forEach(t),y2o=r(jAe," \u2014 "),Xq=n(jAe,"A",{href:!0});var Lot=s(Xq);L2o=r(Lot,"SegformerModel"),Lot.forEach(t),x2o=r(jAe," (SegFormer model)"),jAe.forEach(t),$2o=i($),Eu=n($,"LI",{});var DAe=s(Eu);kle=n(DAe,"STRONG",{});var xot=s(kle);k2o=r(xot,"sew"),xot.forEach(t),S2o=r(DAe," \u2014 "),zq=n(DAe,"A",{href:!0});var $ot=s(zq);R2o=r($ot,"SEWModel"),$ot.forEach(t),P2o=r(DAe," (SEW model)"),DAe.forEach(t),B2o=i($),Cu=n($,"LI",{});var GAe=s(Cu);Sle=n(GAe,"STRONG",{});var kot=s(Sle);I2o=r(kot,"sew-d"),kot.forEach(t),q2o=r(GAe," \u2014 "),Wq=n(GAe,"A",{href:!0});var Sot=s(Wq);N2o=r(Sot,"SEWDModel"),Sot.forEach(t),j2o=r(GAe," (SEW-D model)"),GAe.forEach(t),D2o=i($),wu=n($,"LI",{});var OAe=s(wu);Rle=n(OAe,"STRONG",{});var Rot=s(Rle);G2o=r(Rot,"speech_to_text"),Rot.forEach(t),O2o=r(OAe," \u2014 "),Qq=n(OAe,"A",{href:!0});var Pot=s(Qq);V2o=r(Pot,"Speech2TextModel"),Pot.forEach(t),X2o=r(OAe," (Speech2Text model)"),OAe.forEach(t),z2o=i($),Au=n($,"LI",{});var VAe=s(Au);Ple=n(VAe,"STRONG",{});var Bot=s(Ple);W2o=r(Bot,"splinter"),Bot.forEach(t),Q2o=r(VAe," \u2014 "),Hq=n(VAe,"A",{href:!0});var Iot=s(Hq);H2o=r(Iot,"SplinterModel"),Iot.forEach(t),U2o=r(VAe," (Splinter model)"),VAe.forEach(t),J2o=i($),yu=n($,"LI",{});var XAe=s(yu);Ble=n(XAe,"STRONG",{});var qot=s(Ble);Y2o=r(qot,"squeezebert"),qot.forEach(t),K2o=r(XAe," \u2014 "),Uq=n(XAe,"A",{href:!0});var Not=s(Uq);Z2o=r(Not,"SqueezeBertModel"),Not.forEach(t),evo=r(XAe," (SqueezeBERT model)"),XAe.forEach(t),ovo=i($),Lu=n($,"LI",{});var zAe=s(Lu);Ile=n(zAe,"STRONG",{});var jot=s(Ile);rvo=r(jot,"swin"),jot.forEach(t),tvo=r(zAe," \u2014 "),Jq=n(zAe,"A",{href:!0});var Dot=s(Jq);avo=r(Dot,"SwinModel"),Dot.forEach(t),nvo=r(zAe," (Swin model)"),zAe.forEach(t),svo=i($),xu=n($,"LI",{});var WAe=s(xu);qle=n(WAe,"STRONG",{});var Got=s(qle);lvo=r(Got,"t5"),Got.forEach(t),ivo=r(WAe," \u2014 "),Yq=n(WAe,"A",{href:!0});var Oot=s(Yq);dvo=r(Oot,"T5Model"),Oot.forEach(t),cvo=r(WAe," (T5 model)"),WAe.forEach(t),fvo=i($),$u=n($,"LI",{});var QAe=s($u);Nle=n(QAe,"STRONG",{});var Vot=s(Nle);mvo=r(Vot,"tapas"),Vot.forEach(t),gvo=r(QAe," \u2014 "),Kq=n(QAe,"A",{href:!0});var Xot=s(Kq);hvo=r(Xot,"TapasModel"),Xot.forEach(t),pvo=r(QAe," (TAPAS model)"),QAe.forEach(t),uvo=i($),ku=n($,"LI",{});var HAe=s(ku);jle=n(HAe,"STRONG",{});var zot=s(jle);_vo=r(zot,"trajectory_transformer"),zot.forEach(t),bvo=r(HAe," \u2014 "),Zq=n(HAe,"A",{href:!0});var Wot=s(Zq);vvo=r(Wot,"TrajectoryTransformerModel"),Wot.forEach(t),Fvo=r(HAe," (Trajectory Transformer model)"),HAe.forEach(t),Tvo=i($),Su=n($,"LI",{});var UAe=s(Su);Dle=n(UAe,"STRONG",{});var Qot=s(Dle);Mvo=r(Qot,"transfo-xl"),Qot.forEach(t),Evo=r(UAe," \u2014 "),eN=n(UAe,"A",{href:!0});var Hot=s(eN);Cvo=r(Hot,"TransfoXLModel"),Hot.forEach(t),wvo=r(UAe," (Transformer-XL model)"),UAe.forEach(t),Avo=i($),Ru=n($,"LI",{});var JAe=s(Ru);Gle=n(JAe,"STRONG",{});var Uot=s(Gle);yvo=r(Uot,"unispeech"),Uot.forEach(t),Lvo=r(JAe," \u2014 "),oN=n(JAe,"A",{href:!0});var Jot=s(oN);xvo=r(Jot,"UniSpeechModel"),Jot.forEach(t),$vo=r(JAe," (UniSpeech model)"),JAe.forEach(t),kvo=i($),Pu=n($,"LI",{});var YAe=s(Pu);Ole=n(YAe,"STRONG",{});var Yot=s(Ole);Svo=r(Yot,"unispeech-sat"),Yot.forEach(t),Rvo=r(YAe," \u2014 "),rN=n(YAe,"A",{href:!0});var Kot=s(rN);Pvo=r(Kot,"UniSpeechSatModel"),Kot.forEach(t),Bvo=r(YAe," (UniSpeechSat model)"),YAe.forEach(t),Ivo=i($),Bu=n($,"LI",{});var KAe=s(Bu);Vle=n(KAe,"STRONG",{});var Zot=s(Vle);qvo=r(Zot,"van"),Zot.forEach(t),Nvo=r(KAe," \u2014 "),tN=n(KAe,"A",{href:!0});var ert=s(tN);jvo=r(ert,"VanModel"),ert.forEach(t),Dvo=r(KAe," (VAN model)"),KAe.forEach(t),Gvo=i($),Iu=n($,"LI",{});var ZAe=s(Iu);Xle=n(ZAe,"STRONG",{});var ort=s(Xle);Ovo=r(ort,"vilt"),ort.forEach(t),Vvo=r(ZAe," \u2014 "),aN=n(ZAe,"A",{href:!0});var rrt=s(aN);Xvo=r(rrt,"ViltModel"),rrt.forEach(t),zvo=r(ZAe," (ViLT model)"),ZAe.forEach(t),Wvo=i($),qu=n($,"LI",{});var e6e=s(qu);zle=n(e6e,"STRONG",{});var trt=s(zle);Qvo=r(trt,"vision-text-dual-encoder"),trt.forEach(t),Hvo=r(e6e," \u2014 "),nN=n(e6e,"A",{href:!0});var art=s(nN);Uvo=r(art,"VisionTextDualEncoderModel"),art.forEach(t),Jvo=r(e6e," (VisionTextDualEncoder model)"),e6e.forEach(t),Yvo=i($),Nu=n($,"LI",{});var o6e=s(Nu);Wle=n(o6e,"STRONG",{});var nrt=s(Wle);Kvo=r(nrt,"visual_bert"),nrt.forEach(t),Zvo=r(o6e," \u2014 "),sN=n(o6e,"A",{href:!0});var srt=s(sN);eFo=r(srt,"VisualBertModel"),srt.forEach(t),oFo=r(o6e," (VisualBert model)"),o6e.forEach(t),rFo=i($),ju=n($,"LI",{});var r6e=s(ju);Qle=n(r6e,"STRONG",{});var lrt=s(Qle);tFo=r(lrt,"vit"),lrt.forEach(t),aFo=r(r6e," \u2014 "),lN=n(r6e,"A",{href:!0});var irt=s(lN);nFo=r(irt,"ViTModel"),irt.forEach(t),sFo=r(r6e," (ViT model)"),r6e.forEach(t),lFo=i($),Du=n($,"LI",{});var t6e=s(Du);Hle=n(t6e,"STRONG",{});var drt=s(Hle);iFo=r(drt,"vit_mae"),drt.forEach(t),dFo=r(t6e," \u2014 "),iN=n(t6e,"A",{href:!0});var crt=s(iN);cFo=r(crt,"ViTMAEModel"),crt.forEach(t),fFo=r(t6e," (ViTMAE model)"),t6e.forEach(t),mFo=i($),Gu=n($,"LI",{});var a6e=s(Gu);Ule=n(a6e,"STRONG",{});var frt=s(Ule);gFo=r(frt,"wav2vec2"),frt.forEach(t),hFo=r(a6e," \u2014 "),dN=n(a6e,"A",{href:!0});var mrt=s(dN);pFo=r(mrt,"Wav2Vec2Model"),mrt.forEach(t),uFo=r(a6e," (Wav2Vec2 model)"),a6e.forEach(t),_Fo=i($),Ou=n($,"LI",{});var n6e=s(Ou);Jle=n(n6e,"STRONG",{});var grt=s(Jle);bFo=r(grt,"wav2vec2-conformer"),grt.forEach(t),vFo=r(n6e," \u2014 "),cN=n(n6e,"A",{href:!0});var hrt=s(cN);FFo=r(hrt,"Wav2Vec2ConformerModel"),hrt.forEach(t),TFo=r(n6e," (Wav2Vec2-Conformer model)"),n6e.forEach(t),MFo=i($),Vu=n($,"LI",{});var s6e=s(Vu);Yle=n(s6e,"STRONG",{});var prt=s(Yle);EFo=r(prt,"wavlm"),prt.forEach(t),CFo=r(s6e," \u2014 "),fN=n(s6e,"A",{href:!0});var urt=s(fN);wFo=r(urt,"WavLMModel"),urt.forEach(t),AFo=r(s6e," (WavLM model)"),s6e.forEach(t),yFo=i($),Xu=n($,"LI",{});var l6e=s(Xu);Kle=n(l6e,"STRONG",{});var _rt=s(Kle);LFo=r(_rt,"xglm"),_rt.forEach(t),xFo=r(l6e," \u2014 "),mN=n(l6e,"A",{href:!0});var brt=s(mN);$Fo=r(brt,"XGLMModel"),brt.forEach(t),kFo=r(l6e," (XGLM model)"),l6e.forEach(t),SFo=i($),zu=n($,"LI",{});var i6e=s(zu);Zle=n(i6e,"STRONG",{});var vrt=s(Zle);RFo=r(vrt,"xlm"),vrt.forEach(t),PFo=r(i6e," \u2014 "),gN=n(i6e,"A",{href:!0});var Frt=s(gN);BFo=r(Frt,"XLMModel"),Frt.forEach(t),IFo=r(i6e," (XLM model)"),i6e.forEach(t),qFo=i($),Wu=n($,"LI",{});var d6e=s(Wu);eie=n(d6e,"STRONG",{});var Trt=s(eie);NFo=r(Trt,"xlm-prophetnet"),Trt.forEach(t),jFo=r(d6e," \u2014 "),hN=n(d6e,"A",{href:!0});var Mrt=s(hN);DFo=r(Mrt,"XLMProphetNetModel"),Mrt.forEach(t),GFo=r(d6e," (XLMProphetNet model)"),d6e.forEach(t),OFo=i($),Qu=n($,"LI",{});var c6e=s(Qu);oie=n(c6e,"STRONG",{});var Ert=s(oie);VFo=r(Ert,"xlm-roberta"),Ert.forEach(t),XFo=r(c6e," \u2014 "),pN=n(c6e,"A",{href:!0});var Crt=s(pN);zFo=r(Crt,"XLMRobertaModel"),Crt.forEach(t),WFo=r(c6e," (XLM-RoBERTa model)"),c6e.forEach(t),QFo=i($),Hu=n($,"LI",{});var f6e=s(Hu);rie=n(f6e,"STRONG",{});var wrt=s(rie);HFo=r(wrt,"xlm-roberta-xl"),wrt.forEach(t),UFo=r(f6e," \u2014 "),uN=n(f6e,"A",{href:!0});var Art=s(uN);JFo=r(Art,"XLMRobertaXLModel"),Art.forEach(t),YFo=r(f6e," (XLM-RoBERTa-XL model)"),f6e.forEach(t),KFo=i($),Uu=n($,"LI",{});var m6e=s(Uu);tie=n(m6e,"STRONG",{});var yrt=s(tie);ZFo=r(yrt,"xlnet"),yrt.forEach(t),eTo=r(m6e," \u2014 "),_N=n(m6e,"A",{href:!0});var Lrt=s(_N);oTo=r(Lrt,"XLNetModel"),Lrt.forEach(t),rTo=r(m6e," (XLNet model)"),m6e.forEach(t),tTo=i($),Ju=n($,"LI",{});var g6e=s(Ju);aie=n(g6e,"STRONG",{});var xrt=s(aie);aTo=r(xrt,"yolos"),xrt.forEach(t),nTo=r(g6e," \u2014 "),bN=n(g6e,"A",{href:!0});var $rt=s(bN);sTo=r($rt,"YolosModel"),$rt.forEach(t),lTo=r(g6e," (YOLOS model)"),g6e.forEach(t),iTo=i($),Yu=n($,"LI",{});var h6e=s(Yu);nie=n(h6e,"STRONG",{});var krt=s(nie);dTo=r(krt,"yoso"),krt.forEach(t),cTo=r(h6e," \u2014 "),vN=n(h6e,"A",{href:!0});var Srt=s(vN);fTo=r(Srt,"YosoModel"),Srt.forEach(t),mTo=r(h6e," (YOSO model)"),h6e.forEach(t),$.forEach(t),gTo=i(oa),Ku=n(oa,"P",{});var p6e=s(Ku);hTo=r(p6e,"The model is set in evaluation mode by default using "),sie=n(p6e,"CODE",{});var Rrt=s(sie);pTo=r(Rrt,"model.eval()"),Rrt.forEach(t),uTo=r(p6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lie=n(p6e,"CODE",{});var Prt=s(lie);_To=r(Prt,"model.train()"),Prt.forEach(t),p6e.forEach(t),bTo=i(oa),T(Zu.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),Yqe=i(f),Li=n(f,"H2",{class:!0});var oDe=s(Li);e_=n(oDe,"A",{id:!0,class:!0,href:!0});var Brt=s(e_);iie=n(Brt,"SPAN",{});var Irt=s(iie);T(e6.$$.fragment,Irt),Irt.forEach(t),Brt.forEach(t),vTo=i(oDe),die=n(oDe,"SPAN",{});var qrt=s(die);FTo=r(qrt,"AutoModelForPreTraining"),qrt.forEach(t),oDe.forEach(t),Kqe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(o6.$$.fragment,Os),TTo=i(Os),xi=n(Os,"P",{});var dZ=s(xi);MTo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FN=n(dZ,"A",{href:!0});var Nrt=s(FN);ETo=r(Nrt,"from_pretrained()"),Nrt.forEach(t),CTo=r(dZ," class method or the "),TN=n(dZ,"A",{href:!0});var jrt=s(TN);wTo=r(jrt,"from_config()"),jrt.forEach(t),ATo=r(dZ,` class
method.`),dZ.forEach(t),yTo=i(Os),r6=n(Os,"P",{});var rDe=s(r6);LTo=r(rDe,"This class cannot be instantiated directly using "),cie=n(rDe,"CODE",{});var Drt=s(cie);xTo=r(Drt,"__init__()"),Drt.forEach(t),$To=r(rDe," (throws an error)."),rDe.forEach(t),kTo=i(Os),at=n(Os,"DIV",{class:!0});var xw=s(at);T(t6.$$.fragment,xw),STo=i(xw),fie=n(xw,"P",{});var Grt=s(fie);RTo=r(Grt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Grt.forEach(t),PTo=i(xw),$i=n(xw,"P",{});var cZ=s($i);BTo=r(cZ,`Note:
Loading a model from its configuration file does `),mie=n(cZ,"STRONG",{});var Ort=s(mie);ITo=r(Ort,"not"),Ort.forEach(t),qTo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MN=n(cZ,"A",{href:!0});var Vrt=s(MN);NTo=r(Vrt,"from_pretrained()"),Vrt.forEach(t),jTo=r(cZ," to load the model weights."),cZ.forEach(t),DTo=i(xw),T(o_.$$.fragment,xw),xw.forEach(t),GTo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(a6.$$.fragment,ra),OTo=i(ra),gie=n(ra,"P",{});var Xrt=s(gie);VTo=r(Xrt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xrt.forEach(t),XTo=i(ra),xa=n(ra,"P",{});var $w=s(xa);zTo=r($w,"The model class to instantiate is selected based on the "),hie=n($w,"CODE",{});var zrt=s(hie);WTo=r(zrt,"model_type"),zrt.forEach(t),QTo=r($w,` property of the config object (either
passed as an argument or loaded from `),pie=n($w,"CODE",{});var Wrt=s(pie);HTo=r(Wrt,"pretrained_model_name_or_path"),Wrt.forEach(t),UTo=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uie=n($w,"CODE",{});var Qrt=s(uie);JTo=r(Qrt,"pretrained_model_name_or_path"),Qrt.forEach(t),YTo=r($w,":"),$w.forEach(t),KTo=i(ra),G=n(ra,"UL",{});var O=s(G);r_=n(O,"LI",{});var u6e=s(r_);_ie=n(u6e,"STRONG",{});var Hrt=s(_ie);ZTo=r(Hrt,"albert"),Hrt.forEach(t),e7o=r(u6e," \u2014 "),EN=n(u6e,"A",{href:!0});var Urt=s(EN);o7o=r(Urt,"AlbertForPreTraining"),Urt.forEach(t),r7o=r(u6e," (ALBERT model)"),u6e.forEach(t),t7o=i(O),t_=n(O,"LI",{});var _6e=s(t_);bie=n(_6e,"STRONG",{});var Jrt=s(bie);a7o=r(Jrt,"bart"),Jrt.forEach(t),n7o=r(_6e," \u2014 "),CN=n(_6e,"A",{href:!0});var Yrt=s(CN);s7o=r(Yrt,"BartForConditionalGeneration"),Yrt.forEach(t),l7o=r(_6e," (BART model)"),_6e.forEach(t),i7o=i(O),a_=n(O,"LI",{});var b6e=s(a_);vie=n(b6e,"STRONG",{});var Krt=s(vie);d7o=r(Krt,"bert"),Krt.forEach(t),c7o=r(b6e," \u2014 "),wN=n(b6e,"A",{href:!0});var Zrt=s(wN);f7o=r(Zrt,"BertForPreTraining"),Zrt.forEach(t),m7o=r(b6e," (BERT model)"),b6e.forEach(t),g7o=i(O),n_=n(O,"LI",{});var v6e=s(n_);Fie=n(v6e,"STRONG",{});var ett=s(Fie);h7o=r(ett,"big_bird"),ett.forEach(t),p7o=r(v6e," \u2014 "),AN=n(v6e,"A",{href:!0});var ott=s(AN);u7o=r(ott,"BigBirdForPreTraining"),ott.forEach(t),_7o=r(v6e," (BigBird model)"),v6e.forEach(t),b7o=i(O),s_=n(O,"LI",{});var F6e=s(s_);Tie=n(F6e,"STRONG",{});var rtt=s(Tie);v7o=r(rtt,"camembert"),rtt.forEach(t),F7o=r(F6e," \u2014 "),yN=n(F6e,"A",{href:!0});var ttt=s(yN);T7o=r(ttt,"CamembertForMaskedLM"),ttt.forEach(t),M7o=r(F6e," (CamemBERT model)"),F6e.forEach(t),E7o=i(O),l_=n(O,"LI",{});var T6e=s(l_);Mie=n(T6e,"STRONG",{});var att=s(Mie);C7o=r(att,"ctrl"),att.forEach(t),w7o=r(T6e," \u2014 "),LN=n(T6e,"A",{href:!0});var ntt=s(LN);A7o=r(ntt,"CTRLLMHeadModel"),ntt.forEach(t),y7o=r(T6e," (CTRL model)"),T6e.forEach(t),L7o=i(O),i_=n(O,"LI",{});var M6e=s(i_);Eie=n(M6e,"STRONG",{});var stt=s(Eie);x7o=r(stt,"data2vec-text"),stt.forEach(t),$7o=r(M6e," \u2014 "),xN=n(M6e,"A",{href:!0});var ltt=s(xN);k7o=r(ltt,"Data2VecTextForMaskedLM"),ltt.forEach(t),S7o=r(M6e," (Data2VecText model)"),M6e.forEach(t),R7o=i(O),d_=n(O,"LI",{});var E6e=s(d_);Cie=n(E6e,"STRONG",{});var itt=s(Cie);P7o=r(itt,"deberta"),itt.forEach(t),B7o=r(E6e," \u2014 "),$N=n(E6e,"A",{href:!0});var dtt=s($N);I7o=r(dtt,"DebertaForMaskedLM"),dtt.forEach(t),q7o=r(E6e," (DeBERTa model)"),E6e.forEach(t),N7o=i(O),c_=n(O,"LI",{});var C6e=s(c_);wie=n(C6e,"STRONG",{});var ctt=s(wie);j7o=r(ctt,"deberta-v2"),ctt.forEach(t),D7o=r(C6e," \u2014 "),kN=n(C6e,"A",{href:!0});var ftt=s(kN);G7o=r(ftt,"DebertaV2ForMaskedLM"),ftt.forEach(t),O7o=r(C6e," (DeBERTa-v2 model)"),C6e.forEach(t),V7o=i(O),f_=n(O,"LI",{});var w6e=s(f_);Aie=n(w6e,"STRONG",{});var mtt=s(Aie);X7o=r(mtt,"distilbert"),mtt.forEach(t),z7o=r(w6e," \u2014 "),SN=n(w6e,"A",{href:!0});var gtt=s(SN);W7o=r(gtt,"DistilBertForMaskedLM"),gtt.forEach(t),Q7o=r(w6e," (DistilBERT model)"),w6e.forEach(t),H7o=i(O),m_=n(O,"LI",{});var A6e=s(m_);yie=n(A6e,"STRONG",{});var htt=s(yie);U7o=r(htt,"electra"),htt.forEach(t),J7o=r(A6e," \u2014 "),RN=n(A6e,"A",{href:!0});var ptt=s(RN);Y7o=r(ptt,"ElectraForPreTraining"),ptt.forEach(t),K7o=r(A6e," (ELECTRA model)"),A6e.forEach(t),Z7o=i(O),g_=n(O,"LI",{});var y6e=s(g_);Lie=n(y6e,"STRONG",{});var utt=s(Lie);e9o=r(utt,"flaubert"),utt.forEach(t),o9o=r(y6e," \u2014 "),PN=n(y6e,"A",{href:!0});var _tt=s(PN);r9o=r(_tt,"FlaubertWithLMHeadModel"),_tt.forEach(t),t9o=r(y6e," (FlauBERT model)"),y6e.forEach(t),a9o=i(O),h_=n(O,"LI",{});var L6e=s(h_);xie=n(L6e,"STRONG",{});var btt=s(xie);n9o=r(btt,"flava"),btt.forEach(t),s9o=r(L6e," \u2014 "),BN=n(L6e,"A",{href:!0});var vtt=s(BN);l9o=r(vtt,"FlavaForPreTraining"),vtt.forEach(t),i9o=r(L6e," (Flava model)"),L6e.forEach(t),d9o=i(O),p_=n(O,"LI",{});var x6e=s(p_);$ie=n(x6e,"STRONG",{});var Ftt=s($ie);c9o=r(Ftt,"fnet"),Ftt.forEach(t),f9o=r(x6e," \u2014 "),IN=n(x6e,"A",{href:!0});var Ttt=s(IN);m9o=r(Ttt,"FNetForPreTraining"),Ttt.forEach(t),g9o=r(x6e," (FNet model)"),x6e.forEach(t),h9o=i(O),u_=n(O,"LI",{});var $6e=s(u_);kie=n($6e,"STRONG",{});var Mtt=s(kie);p9o=r(Mtt,"fsmt"),Mtt.forEach(t),u9o=r($6e," \u2014 "),qN=n($6e,"A",{href:!0});var Ett=s(qN);_9o=r(Ett,"FSMTForConditionalGeneration"),Ett.forEach(t),b9o=r($6e," (FairSeq Machine-Translation model)"),$6e.forEach(t),v9o=i(O),__=n(O,"LI",{});var k6e=s(__);Sie=n(k6e,"STRONG",{});var Ctt=s(Sie);F9o=r(Ctt,"funnel"),Ctt.forEach(t),T9o=r(k6e," \u2014 "),NN=n(k6e,"A",{href:!0});var wtt=s(NN);M9o=r(wtt,"FunnelForPreTraining"),wtt.forEach(t),E9o=r(k6e," (Funnel Transformer model)"),k6e.forEach(t),C9o=i(O),b_=n(O,"LI",{});var S6e=s(b_);Rie=n(S6e,"STRONG",{});var Att=s(Rie);w9o=r(Att,"gpt2"),Att.forEach(t),A9o=r(S6e," \u2014 "),jN=n(S6e,"A",{href:!0});var ytt=s(jN);y9o=r(ytt,"GPT2LMHeadModel"),ytt.forEach(t),L9o=r(S6e," (OpenAI GPT-2 model)"),S6e.forEach(t),x9o=i(O),v_=n(O,"LI",{});var R6e=s(v_);Pie=n(R6e,"STRONG",{});var Ltt=s(Pie);$9o=r(Ltt,"ibert"),Ltt.forEach(t),k9o=r(R6e," \u2014 "),DN=n(R6e,"A",{href:!0});var xtt=s(DN);S9o=r(xtt,"IBertForMaskedLM"),xtt.forEach(t),R9o=r(R6e," (I-BERT model)"),R6e.forEach(t),P9o=i(O),F_=n(O,"LI",{});var P6e=s(F_);Bie=n(P6e,"STRONG",{});var $tt=s(Bie);B9o=r($tt,"layoutlm"),$tt.forEach(t),I9o=r(P6e," \u2014 "),GN=n(P6e,"A",{href:!0});var ktt=s(GN);q9o=r(ktt,"LayoutLMForMaskedLM"),ktt.forEach(t),N9o=r(P6e," (LayoutLM model)"),P6e.forEach(t),j9o=i(O),T_=n(O,"LI",{});var B6e=s(T_);Iie=n(B6e,"STRONG",{});var Stt=s(Iie);D9o=r(Stt,"longformer"),Stt.forEach(t),G9o=r(B6e," \u2014 "),ON=n(B6e,"A",{href:!0});var Rtt=s(ON);O9o=r(Rtt,"LongformerForMaskedLM"),Rtt.forEach(t),V9o=r(B6e," (Longformer model)"),B6e.forEach(t),X9o=i(O),M_=n(O,"LI",{});var I6e=s(M_);qie=n(I6e,"STRONG",{});var Ptt=s(qie);z9o=r(Ptt,"lxmert"),Ptt.forEach(t),W9o=r(I6e," \u2014 "),VN=n(I6e,"A",{href:!0});var Btt=s(VN);Q9o=r(Btt,"LxmertForPreTraining"),Btt.forEach(t),H9o=r(I6e," (LXMERT model)"),I6e.forEach(t),U9o=i(O),E_=n(O,"LI",{});var q6e=s(E_);Nie=n(q6e,"STRONG",{});var Itt=s(Nie);J9o=r(Itt,"megatron-bert"),Itt.forEach(t),Y9o=r(q6e," \u2014 "),XN=n(q6e,"A",{href:!0});var qtt=s(XN);K9o=r(qtt,"MegatronBertForPreTraining"),qtt.forEach(t),Z9o=r(q6e," (MegatronBert model)"),q6e.forEach(t),eMo=i(O),C_=n(O,"LI",{});var N6e=s(C_);jie=n(N6e,"STRONG",{});var Ntt=s(jie);oMo=r(Ntt,"mobilebert"),Ntt.forEach(t),rMo=r(N6e," \u2014 "),zN=n(N6e,"A",{href:!0});var jtt=s(zN);tMo=r(jtt,"MobileBertForPreTraining"),jtt.forEach(t),aMo=r(N6e," (MobileBERT model)"),N6e.forEach(t),nMo=i(O),w_=n(O,"LI",{});var j6e=s(w_);Die=n(j6e,"STRONG",{});var Dtt=s(Die);sMo=r(Dtt,"mpnet"),Dtt.forEach(t),lMo=r(j6e," \u2014 "),WN=n(j6e,"A",{href:!0});var Gtt=s(WN);iMo=r(Gtt,"MPNetForMaskedLM"),Gtt.forEach(t),dMo=r(j6e," (MPNet model)"),j6e.forEach(t),cMo=i(O),A_=n(O,"LI",{});var D6e=s(A_);Gie=n(D6e,"STRONG",{});var Ott=s(Gie);fMo=r(Ott,"openai-gpt"),Ott.forEach(t),mMo=r(D6e," \u2014 "),QN=n(D6e,"A",{href:!0});var Vtt=s(QN);gMo=r(Vtt,"OpenAIGPTLMHeadModel"),Vtt.forEach(t),hMo=r(D6e," (OpenAI GPT model)"),D6e.forEach(t),pMo=i(O),y_=n(O,"LI",{});var G6e=s(y_);Oie=n(G6e,"STRONG",{});var Xtt=s(Oie);uMo=r(Xtt,"retribert"),Xtt.forEach(t),_Mo=r(G6e," \u2014 "),HN=n(G6e,"A",{href:!0});var ztt=s(HN);bMo=r(ztt,"RetriBertModel"),ztt.forEach(t),vMo=r(G6e," (RetriBERT model)"),G6e.forEach(t),FMo=i(O),L_=n(O,"LI",{});var O6e=s(L_);Vie=n(O6e,"STRONG",{});var Wtt=s(Vie);TMo=r(Wtt,"roberta"),Wtt.forEach(t),MMo=r(O6e," \u2014 "),UN=n(O6e,"A",{href:!0});var Qtt=s(UN);EMo=r(Qtt,"RobertaForMaskedLM"),Qtt.forEach(t),CMo=r(O6e," (RoBERTa model)"),O6e.forEach(t),wMo=i(O),x_=n(O,"LI",{});var V6e=s(x_);Xie=n(V6e,"STRONG",{});var Htt=s(Xie);AMo=r(Htt,"splinter"),Htt.forEach(t),yMo=r(V6e," \u2014 "),JN=n(V6e,"A",{href:!0});var Utt=s(JN);LMo=r(Utt,"SplinterForPreTraining"),Utt.forEach(t),xMo=r(V6e," (Splinter model)"),V6e.forEach(t),$Mo=i(O),$_=n(O,"LI",{});var X6e=s($_);zie=n(X6e,"STRONG",{});var Jtt=s(zie);kMo=r(Jtt,"squeezebert"),Jtt.forEach(t),SMo=r(X6e," \u2014 "),YN=n(X6e,"A",{href:!0});var Ytt=s(YN);RMo=r(Ytt,"SqueezeBertForMaskedLM"),Ytt.forEach(t),PMo=r(X6e," (SqueezeBERT model)"),X6e.forEach(t),BMo=i(O),k_=n(O,"LI",{});var z6e=s(k_);Wie=n(z6e,"STRONG",{});var Ktt=s(Wie);IMo=r(Ktt,"t5"),Ktt.forEach(t),qMo=r(z6e," \u2014 "),KN=n(z6e,"A",{href:!0});var Ztt=s(KN);NMo=r(Ztt,"T5ForConditionalGeneration"),Ztt.forEach(t),jMo=r(z6e," (T5 model)"),z6e.forEach(t),DMo=i(O),S_=n(O,"LI",{});var W6e=s(S_);Qie=n(W6e,"STRONG",{});var eat=s(Qie);GMo=r(eat,"tapas"),eat.forEach(t),OMo=r(W6e," \u2014 "),ZN=n(W6e,"A",{href:!0});var oat=s(ZN);VMo=r(oat,"TapasForMaskedLM"),oat.forEach(t),XMo=r(W6e," (TAPAS model)"),W6e.forEach(t),zMo=i(O),R_=n(O,"LI",{});var Q6e=s(R_);Hie=n(Q6e,"STRONG",{});var rat=s(Hie);WMo=r(rat,"transfo-xl"),rat.forEach(t),QMo=r(Q6e," \u2014 "),ej=n(Q6e,"A",{href:!0});var tat=s(ej);HMo=r(tat,"TransfoXLLMHeadModel"),tat.forEach(t),UMo=r(Q6e," (Transformer-XL model)"),Q6e.forEach(t),JMo=i(O),P_=n(O,"LI",{});var H6e=s(P_);Uie=n(H6e,"STRONG",{});var aat=s(Uie);YMo=r(aat,"unispeech"),aat.forEach(t),KMo=r(H6e," \u2014 "),oj=n(H6e,"A",{href:!0});var nat=s(oj);ZMo=r(nat,"UniSpeechForPreTraining"),nat.forEach(t),e4o=r(H6e," (UniSpeech model)"),H6e.forEach(t),o4o=i(O),B_=n(O,"LI",{});var U6e=s(B_);Jie=n(U6e,"STRONG",{});var sat=s(Jie);r4o=r(sat,"unispeech-sat"),sat.forEach(t),t4o=r(U6e," \u2014 "),rj=n(U6e,"A",{href:!0});var lat=s(rj);a4o=r(lat,"UniSpeechSatForPreTraining"),lat.forEach(t),n4o=r(U6e," (UniSpeechSat model)"),U6e.forEach(t),s4o=i(O),I_=n(O,"LI",{});var J6e=s(I_);Yie=n(J6e,"STRONG",{});var iat=s(Yie);l4o=r(iat,"visual_bert"),iat.forEach(t),i4o=r(J6e," \u2014 "),tj=n(J6e,"A",{href:!0});var dat=s(tj);d4o=r(dat,"VisualBertForPreTraining"),dat.forEach(t),c4o=r(J6e," (VisualBert model)"),J6e.forEach(t),f4o=i(O),q_=n(O,"LI",{});var Y6e=s(q_);Kie=n(Y6e,"STRONG",{});var cat=s(Kie);m4o=r(cat,"vit_mae"),cat.forEach(t),g4o=r(Y6e," \u2014 "),aj=n(Y6e,"A",{href:!0});var fat=s(aj);h4o=r(fat,"ViTMAEForPreTraining"),fat.forEach(t),p4o=r(Y6e," (ViTMAE model)"),Y6e.forEach(t),u4o=i(O),N_=n(O,"LI",{});var K6e=s(N_);Zie=n(K6e,"STRONG",{});var mat=s(Zie);_4o=r(mat,"wav2vec2"),mat.forEach(t),b4o=r(K6e," \u2014 "),nj=n(K6e,"A",{href:!0});var gat=s(nj);v4o=r(gat,"Wav2Vec2ForPreTraining"),gat.forEach(t),F4o=r(K6e," (Wav2Vec2 model)"),K6e.forEach(t),T4o=i(O),j_=n(O,"LI",{});var Z6e=s(j_);ede=n(Z6e,"STRONG",{});var hat=s(ede);M4o=r(hat,"wav2vec2-conformer"),hat.forEach(t),E4o=r(Z6e," \u2014 "),sj=n(Z6e,"A",{href:!0});var pat=s(sj);C4o=r(pat,"Wav2Vec2ConformerForPreTraining"),pat.forEach(t),w4o=r(Z6e," (Wav2Vec2-Conformer model)"),Z6e.forEach(t),A4o=i(O),D_=n(O,"LI",{});var eye=s(D_);ode=n(eye,"STRONG",{});var uat=s(ode);y4o=r(uat,"xlm"),uat.forEach(t),L4o=r(eye," \u2014 "),lj=n(eye,"A",{href:!0});var _at=s(lj);x4o=r(_at,"XLMWithLMHeadModel"),_at.forEach(t),$4o=r(eye," (XLM model)"),eye.forEach(t),k4o=i(O),G_=n(O,"LI",{});var oye=s(G_);rde=n(oye,"STRONG",{});var bat=s(rde);S4o=r(bat,"xlm-roberta"),bat.forEach(t),R4o=r(oye," \u2014 "),ij=n(oye,"A",{href:!0});var vat=s(ij);P4o=r(vat,"XLMRobertaForMaskedLM"),vat.forEach(t),B4o=r(oye," (XLM-RoBERTa model)"),oye.forEach(t),I4o=i(O),O_=n(O,"LI",{});var rye=s(O_);tde=n(rye,"STRONG",{});var Fat=s(tde);q4o=r(Fat,"xlm-roberta-xl"),Fat.forEach(t),N4o=r(rye," \u2014 "),dj=n(rye,"A",{href:!0});var Tat=s(dj);j4o=r(Tat,"XLMRobertaXLForMaskedLM"),Tat.forEach(t),D4o=r(rye," (XLM-RoBERTa-XL model)"),rye.forEach(t),G4o=i(O),V_=n(O,"LI",{});var tye=s(V_);ade=n(tye,"STRONG",{});var Mat=s(ade);O4o=r(Mat,"xlnet"),Mat.forEach(t),V4o=r(tye," \u2014 "),cj=n(tye,"A",{href:!0});var Eat=s(cj);X4o=r(Eat,"XLNetLMHeadModel"),Eat.forEach(t),z4o=r(tye," (XLNet model)"),tye.forEach(t),O.forEach(t),W4o=i(ra),X_=n(ra,"P",{});var aye=s(X_);Q4o=r(aye,"The model is set in evaluation mode by default using "),nde=n(aye,"CODE",{});var Cat=s(nde);H4o=r(Cat,"model.eval()"),Cat.forEach(t),U4o=r(aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sde=n(aye,"CODE",{});var wat=s(sde);J4o=r(wat,"model.train()"),wat.forEach(t),aye.forEach(t),Y4o=i(ra),T(z_.$$.fragment,ra),ra.forEach(t),Os.forEach(t),Zqe=i(f),ki=n(f,"H2",{class:!0});var tDe=s(ki);W_=n(tDe,"A",{id:!0,class:!0,href:!0});var Aat=s(W_);lde=n(Aat,"SPAN",{});var yat=s(lde);T(n6.$$.fragment,yat),yat.forEach(t),Aat.forEach(t),K4o=i(tDe),ide=n(tDe,"SPAN",{});var Lat=s(ide);Z4o=r(Lat,"AutoModelForCausalLM"),Lat.forEach(t),tDe.forEach(t),eNe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(s6.$$.fragment,Vs),eEo=i(Vs),Si=n(Vs,"P",{});var fZ=s(Si);oEo=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fj=n(fZ,"A",{href:!0});var xat=s(fj);rEo=r(xat,"from_pretrained()"),xat.forEach(t),tEo=r(fZ," class method or the "),mj=n(fZ,"A",{href:!0});var $at=s(mj);aEo=r($at,"from_config()"),$at.forEach(t),nEo=r(fZ,` class
method.`),fZ.forEach(t),sEo=i(Vs),l6=n(Vs,"P",{});var aDe=s(l6);lEo=r(aDe,"This class cannot be instantiated directly using "),dde=n(aDe,"CODE",{});var kat=s(dde);iEo=r(kat,"__init__()"),kat.forEach(t),dEo=r(aDe," (throws an error)."),aDe.forEach(t),cEo=i(Vs),nt=n(Vs,"DIV",{class:!0});var kw=s(nt);T(i6.$$.fragment,kw),fEo=i(kw),cde=n(kw,"P",{});var Sat=s(cde);mEo=r(Sat,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Sat.forEach(t),gEo=i(kw),Ri=n(kw,"P",{});var mZ=s(Ri);hEo=r(mZ,`Note:
Loading a model from its configuration file does `),fde=n(mZ,"STRONG",{});var Rat=s(fde);pEo=r(Rat,"not"),Rat.forEach(t),uEo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gj=n(mZ,"A",{href:!0});var Pat=s(gj);_Eo=r(Pat,"from_pretrained()"),Pat.forEach(t),bEo=r(mZ," to load the model weights."),mZ.forEach(t),vEo=i(kw),T(Q_.$$.fragment,kw),kw.forEach(t),FEo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(d6.$$.fragment,ta),TEo=i(ta),mde=n(ta,"P",{});var Bat=s(mde);MEo=r(Bat,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Bat.forEach(t),EEo=i(ta),$a=n(ta,"P",{});var Sw=s($a);CEo=r(Sw,"The model class to instantiate is selected based on the "),gde=n(Sw,"CODE",{});var Iat=s(gde);wEo=r(Iat,"model_type"),Iat.forEach(t),AEo=r(Sw,` property of the config object (either
passed as an argument or loaded from `),hde=n(Sw,"CODE",{});var qat=s(hde);yEo=r(qat,"pretrained_model_name_or_path"),qat.forEach(t),LEo=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=n(Sw,"CODE",{});var Nat=s(pde);xEo=r(Nat,"pretrained_model_name_or_path"),Nat.forEach(t),$Eo=r(Sw,":"),Sw.forEach(t),kEo=i(ta),z=n(ta,"UL",{});var Q=s(z);H_=n(Q,"LI",{});var nye=s(H_);ude=n(nye,"STRONG",{});var jat=s(ude);SEo=r(jat,"bart"),jat.forEach(t),REo=r(nye," \u2014 "),hj=n(nye,"A",{href:!0});var Dat=s(hj);PEo=r(Dat,"BartForCausalLM"),Dat.forEach(t),BEo=r(nye," (BART model)"),nye.forEach(t),IEo=i(Q),U_=n(Q,"LI",{});var sye=s(U_);_de=n(sye,"STRONG",{});var Gat=s(_de);qEo=r(Gat,"bert"),Gat.forEach(t),NEo=r(sye," \u2014 "),pj=n(sye,"A",{href:!0});var Oat=s(pj);jEo=r(Oat,"BertLMHeadModel"),Oat.forEach(t),DEo=r(sye," (BERT model)"),sye.forEach(t),GEo=i(Q),J_=n(Q,"LI",{});var lye=s(J_);bde=n(lye,"STRONG",{});var Vat=s(bde);OEo=r(Vat,"bert-generation"),Vat.forEach(t),VEo=r(lye," \u2014 "),uj=n(lye,"A",{href:!0});var Xat=s(uj);XEo=r(Xat,"BertGenerationDecoder"),Xat.forEach(t),zEo=r(lye," (Bert Generation model)"),lye.forEach(t),WEo=i(Q),Y_=n(Q,"LI",{});var iye=s(Y_);vde=n(iye,"STRONG",{});var zat=s(vde);QEo=r(zat,"big_bird"),zat.forEach(t),HEo=r(iye," \u2014 "),_j=n(iye,"A",{href:!0});var Wat=s(_j);UEo=r(Wat,"BigBirdForCausalLM"),Wat.forEach(t),JEo=r(iye," (BigBird model)"),iye.forEach(t),YEo=i(Q),K_=n(Q,"LI",{});var dye=s(K_);Fde=n(dye,"STRONG",{});var Qat=s(Fde);KEo=r(Qat,"bigbird_pegasus"),Qat.forEach(t),ZEo=r(dye," \u2014 "),bj=n(dye,"A",{href:!0});var Hat=s(bj);eCo=r(Hat,"BigBirdPegasusForCausalLM"),Hat.forEach(t),oCo=r(dye," (BigBirdPegasus model)"),dye.forEach(t),rCo=i(Q),Z_=n(Q,"LI",{});var cye=s(Z_);Tde=n(cye,"STRONG",{});var Uat=s(Tde);tCo=r(Uat,"blenderbot"),Uat.forEach(t),aCo=r(cye," \u2014 "),vj=n(cye,"A",{href:!0});var Jat=s(vj);nCo=r(Jat,"BlenderbotForCausalLM"),Jat.forEach(t),sCo=r(cye," (Blenderbot model)"),cye.forEach(t),lCo=i(Q),e3=n(Q,"LI",{});var fye=s(e3);Mde=n(fye,"STRONG",{});var Yat=s(Mde);iCo=r(Yat,"blenderbot-small"),Yat.forEach(t),dCo=r(fye," \u2014 "),Fj=n(fye,"A",{href:!0});var Kat=s(Fj);cCo=r(Kat,"BlenderbotSmallForCausalLM"),Kat.forEach(t),fCo=r(fye," (BlenderbotSmall model)"),fye.forEach(t),mCo=i(Q),o3=n(Q,"LI",{});var mye=s(o3);Ede=n(mye,"STRONG",{});var Zat=s(Ede);gCo=r(Zat,"camembert"),Zat.forEach(t),hCo=r(mye," \u2014 "),Tj=n(mye,"A",{href:!0});var ent=s(Tj);pCo=r(ent,"CamembertForCausalLM"),ent.forEach(t),uCo=r(mye," (CamemBERT model)"),mye.forEach(t),_Co=i(Q),r3=n(Q,"LI",{});var gye=s(r3);Cde=n(gye,"STRONG",{});var ont=s(Cde);bCo=r(ont,"ctrl"),ont.forEach(t),vCo=r(gye," \u2014 "),Mj=n(gye,"A",{href:!0});var rnt=s(Mj);FCo=r(rnt,"CTRLLMHeadModel"),rnt.forEach(t),TCo=r(gye," (CTRL model)"),gye.forEach(t),MCo=i(Q),t3=n(Q,"LI",{});var hye=s(t3);wde=n(hye,"STRONG",{});var tnt=s(wde);ECo=r(tnt,"data2vec-text"),tnt.forEach(t),CCo=r(hye," \u2014 "),Ej=n(hye,"A",{href:!0});var ant=s(Ej);wCo=r(ant,"Data2VecTextForCausalLM"),ant.forEach(t),ACo=r(hye," (Data2VecText model)"),hye.forEach(t),yCo=i(Q),a3=n(Q,"LI",{});var pye=s(a3);Ade=n(pye,"STRONG",{});var nnt=s(Ade);LCo=r(nnt,"electra"),nnt.forEach(t),xCo=r(pye," \u2014 "),Cj=n(pye,"A",{href:!0});var snt=s(Cj);$Co=r(snt,"ElectraForCausalLM"),snt.forEach(t),kCo=r(pye," (ELECTRA model)"),pye.forEach(t),SCo=i(Q),n3=n(Q,"LI",{});var uye=s(n3);yde=n(uye,"STRONG",{});var lnt=s(yde);RCo=r(lnt,"gpt2"),lnt.forEach(t),PCo=r(uye," \u2014 "),wj=n(uye,"A",{href:!0});var int=s(wj);BCo=r(int,"GPT2LMHeadModel"),int.forEach(t),ICo=r(uye," (OpenAI GPT-2 model)"),uye.forEach(t),qCo=i(Q),s3=n(Q,"LI",{});var _ye=s(s3);Lde=n(_ye,"STRONG",{});var dnt=s(Lde);NCo=r(dnt,"gpt_neo"),dnt.forEach(t),jCo=r(_ye," \u2014 "),Aj=n(_ye,"A",{href:!0});var cnt=s(Aj);DCo=r(cnt,"GPTNeoForCausalLM"),cnt.forEach(t),GCo=r(_ye," (GPT Neo model)"),_ye.forEach(t),OCo=i(Q),l3=n(Q,"LI",{});var bye=s(l3);xde=n(bye,"STRONG",{});var fnt=s(xde);VCo=r(fnt,"gptj"),fnt.forEach(t),XCo=r(bye," \u2014 "),yj=n(bye,"A",{href:!0});var mnt=s(yj);zCo=r(mnt,"GPTJForCausalLM"),mnt.forEach(t),WCo=r(bye," (GPT-J model)"),bye.forEach(t),QCo=i(Q),i3=n(Q,"LI",{});var vye=s(i3);$de=n(vye,"STRONG",{});var gnt=s($de);HCo=r(gnt,"marian"),gnt.forEach(t),UCo=r(vye," \u2014 "),Lj=n(vye,"A",{href:!0});var hnt=s(Lj);JCo=r(hnt,"MarianForCausalLM"),hnt.forEach(t),YCo=r(vye," (Marian model)"),vye.forEach(t),KCo=i(Q),d3=n(Q,"LI",{});var Fye=s(d3);kde=n(Fye,"STRONG",{});var pnt=s(kde);ZCo=r(pnt,"mbart"),pnt.forEach(t),e5o=r(Fye," \u2014 "),xj=n(Fye,"A",{href:!0});var unt=s(xj);o5o=r(unt,"MBartForCausalLM"),unt.forEach(t),r5o=r(Fye," (mBART model)"),Fye.forEach(t),t5o=i(Q),c3=n(Q,"LI",{});var Tye=s(c3);Sde=n(Tye,"STRONG",{});var _nt=s(Sde);a5o=r(_nt,"megatron-bert"),_nt.forEach(t),n5o=r(Tye," \u2014 "),$j=n(Tye,"A",{href:!0});var bnt=s($j);s5o=r(bnt,"MegatronBertForCausalLM"),bnt.forEach(t),l5o=r(Tye," (MegatronBert model)"),Tye.forEach(t),i5o=i(Q),f3=n(Q,"LI",{});var Mye=s(f3);Rde=n(Mye,"STRONG",{});var vnt=s(Rde);d5o=r(vnt,"openai-gpt"),vnt.forEach(t),c5o=r(Mye," \u2014 "),kj=n(Mye,"A",{href:!0});var Fnt=s(kj);f5o=r(Fnt,"OpenAIGPTLMHeadModel"),Fnt.forEach(t),m5o=r(Mye," (OpenAI GPT model)"),Mye.forEach(t),g5o=i(Q),m3=n(Q,"LI",{});var Eye=s(m3);Pde=n(Eye,"STRONG",{});var Tnt=s(Pde);h5o=r(Tnt,"opt"),Tnt.forEach(t),p5o=r(Eye," \u2014 "),Sj=n(Eye,"A",{href:!0});var Mnt=s(Sj);u5o=r(Mnt,"OPTForCausalLM"),Mnt.forEach(t),_5o=r(Eye," (OPT model)"),Eye.forEach(t),b5o=i(Q),g3=n(Q,"LI",{});var Cye=s(g3);Bde=n(Cye,"STRONG",{});var Ent=s(Bde);v5o=r(Ent,"pegasus"),Ent.forEach(t),F5o=r(Cye," \u2014 "),Rj=n(Cye,"A",{href:!0});var Cnt=s(Rj);T5o=r(Cnt,"PegasusForCausalLM"),Cnt.forEach(t),M5o=r(Cye," (Pegasus model)"),Cye.forEach(t),E5o=i(Q),h3=n(Q,"LI",{});var wye=s(h3);Ide=n(wye,"STRONG",{});var wnt=s(Ide);C5o=r(wnt,"plbart"),wnt.forEach(t),w5o=r(wye," \u2014 "),Pj=n(wye,"A",{href:!0});var Ant=s(Pj);A5o=r(Ant,"PLBartForCausalLM"),Ant.forEach(t),y5o=r(wye," (PLBart model)"),wye.forEach(t),L5o=i(Q),p3=n(Q,"LI",{});var Aye=s(p3);qde=n(Aye,"STRONG",{});var ynt=s(qde);x5o=r(ynt,"prophetnet"),ynt.forEach(t),$5o=r(Aye," \u2014 "),Bj=n(Aye,"A",{href:!0});var Lnt=s(Bj);k5o=r(Lnt,"ProphetNetForCausalLM"),Lnt.forEach(t),S5o=r(Aye," (ProphetNet model)"),Aye.forEach(t),R5o=i(Q),u3=n(Q,"LI",{});var yye=s(u3);Nde=n(yye,"STRONG",{});var xnt=s(Nde);P5o=r(xnt,"qdqbert"),xnt.forEach(t),B5o=r(yye," \u2014 "),Ij=n(yye,"A",{href:!0});var $nt=s(Ij);I5o=r($nt,"QDQBertLMHeadModel"),$nt.forEach(t),q5o=r(yye," (QDQBert model)"),yye.forEach(t),N5o=i(Q),_3=n(Q,"LI",{});var Lye=s(_3);jde=n(Lye,"STRONG",{});var knt=s(jde);j5o=r(knt,"reformer"),knt.forEach(t),D5o=r(Lye," \u2014 "),qj=n(Lye,"A",{href:!0});var Snt=s(qj);G5o=r(Snt,"ReformerModelWithLMHead"),Snt.forEach(t),O5o=r(Lye," (Reformer model)"),Lye.forEach(t),V5o=i(Q),b3=n(Q,"LI",{});var xye=s(b3);Dde=n(xye,"STRONG",{});var Rnt=s(Dde);X5o=r(Rnt,"rembert"),Rnt.forEach(t),z5o=r(xye," \u2014 "),Nj=n(xye,"A",{href:!0});var Pnt=s(Nj);W5o=r(Pnt,"RemBertForCausalLM"),Pnt.forEach(t),Q5o=r(xye," (RemBERT model)"),xye.forEach(t),H5o=i(Q),v3=n(Q,"LI",{});var $ye=s(v3);Gde=n($ye,"STRONG",{});var Bnt=s(Gde);U5o=r(Bnt,"roberta"),Bnt.forEach(t),J5o=r($ye," \u2014 "),jj=n($ye,"A",{href:!0});var Int=s(jj);Y5o=r(Int,"RobertaForCausalLM"),Int.forEach(t),K5o=r($ye," (RoBERTa model)"),$ye.forEach(t),Z5o=i(Q),F3=n(Q,"LI",{});var kye=s(F3);Ode=n(kye,"STRONG",{});var qnt=s(Ode);ewo=r(qnt,"roformer"),qnt.forEach(t),owo=r(kye," \u2014 "),Dj=n(kye,"A",{href:!0});var Nnt=s(Dj);rwo=r(Nnt,"RoFormerForCausalLM"),Nnt.forEach(t),two=r(kye," (RoFormer model)"),kye.forEach(t),awo=i(Q),T3=n(Q,"LI",{});var Sye=s(T3);Vde=n(Sye,"STRONG",{});var jnt=s(Vde);nwo=r(jnt,"speech_to_text_2"),jnt.forEach(t),swo=r(Sye," \u2014 "),Gj=n(Sye,"A",{href:!0});var Dnt=s(Gj);lwo=r(Dnt,"Speech2Text2ForCausalLM"),Dnt.forEach(t),iwo=r(Sye," (Speech2Text2 model)"),Sye.forEach(t),dwo=i(Q),M3=n(Q,"LI",{});var Rye=s(M3);Xde=n(Rye,"STRONG",{});var Gnt=s(Xde);cwo=r(Gnt,"transfo-xl"),Gnt.forEach(t),fwo=r(Rye," \u2014 "),Oj=n(Rye,"A",{href:!0});var Ont=s(Oj);mwo=r(Ont,"TransfoXLLMHeadModel"),Ont.forEach(t),gwo=r(Rye," (Transformer-XL model)"),Rye.forEach(t),hwo=i(Q),E3=n(Q,"LI",{});var Pye=s(E3);zde=n(Pye,"STRONG",{});var Vnt=s(zde);pwo=r(Vnt,"trocr"),Vnt.forEach(t),uwo=r(Pye," \u2014 "),Vj=n(Pye,"A",{href:!0});var Xnt=s(Vj);_wo=r(Xnt,"TrOCRForCausalLM"),Xnt.forEach(t),bwo=r(Pye," (TrOCR model)"),Pye.forEach(t),vwo=i(Q),C3=n(Q,"LI",{});var Bye=s(C3);Wde=n(Bye,"STRONG",{});var znt=s(Wde);Fwo=r(znt,"xglm"),znt.forEach(t),Two=r(Bye," \u2014 "),Xj=n(Bye,"A",{href:!0});var Wnt=s(Xj);Mwo=r(Wnt,"XGLMForCausalLM"),Wnt.forEach(t),Ewo=r(Bye," (XGLM model)"),Bye.forEach(t),Cwo=i(Q),w3=n(Q,"LI",{});var Iye=s(w3);Qde=n(Iye,"STRONG",{});var Qnt=s(Qde);wwo=r(Qnt,"xlm"),Qnt.forEach(t),Awo=r(Iye," \u2014 "),zj=n(Iye,"A",{href:!0});var Hnt=s(zj);ywo=r(Hnt,"XLMWithLMHeadModel"),Hnt.forEach(t),Lwo=r(Iye," (XLM model)"),Iye.forEach(t),xwo=i(Q),A3=n(Q,"LI",{});var qye=s(A3);Hde=n(qye,"STRONG",{});var Unt=s(Hde);$wo=r(Unt,"xlm-prophetnet"),Unt.forEach(t),kwo=r(qye," \u2014 "),Wj=n(qye,"A",{href:!0});var Jnt=s(Wj);Swo=r(Jnt,"XLMProphetNetForCausalLM"),Jnt.forEach(t),Rwo=r(qye," (XLMProphetNet model)"),qye.forEach(t),Pwo=i(Q),y3=n(Q,"LI",{});var Nye=s(y3);Ude=n(Nye,"STRONG",{});var Ynt=s(Ude);Bwo=r(Ynt,"xlm-roberta"),Ynt.forEach(t),Iwo=r(Nye," \u2014 "),Qj=n(Nye,"A",{href:!0});var Knt=s(Qj);qwo=r(Knt,"XLMRobertaForCausalLM"),Knt.forEach(t),Nwo=r(Nye," (XLM-RoBERTa model)"),Nye.forEach(t),jwo=i(Q),L3=n(Q,"LI",{});var jye=s(L3);Jde=n(jye,"STRONG",{});var Znt=s(Jde);Dwo=r(Znt,"xlm-roberta-xl"),Znt.forEach(t),Gwo=r(jye," \u2014 "),Hj=n(jye,"A",{href:!0});var est=s(Hj);Owo=r(est,"XLMRobertaXLForCausalLM"),est.forEach(t),Vwo=r(jye," (XLM-RoBERTa-XL model)"),jye.forEach(t),Xwo=i(Q),x3=n(Q,"LI",{});var Dye=s(x3);Yde=n(Dye,"STRONG",{});var ost=s(Yde);zwo=r(ost,"xlnet"),ost.forEach(t),Wwo=r(Dye," \u2014 "),Uj=n(Dye,"A",{href:!0});var rst=s(Uj);Qwo=r(rst,"XLNetLMHeadModel"),rst.forEach(t),Hwo=r(Dye," (XLNet model)"),Dye.forEach(t),Q.forEach(t),Uwo=i(ta),$3=n(ta,"P",{});var Gye=s($3);Jwo=r(Gye,"The model is set in evaluation mode by default using "),Kde=n(Gye,"CODE",{});var tst=s(Kde);Ywo=r(tst,"model.eval()"),tst.forEach(t),Kwo=r(Gye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zde=n(Gye,"CODE",{});var ast=s(Zde);Zwo=r(ast,"model.train()"),ast.forEach(t),Gye.forEach(t),e0o=i(ta),T(k3.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),oNe=i(f),Pi=n(f,"H2",{class:!0});var nDe=s(Pi);S3=n(nDe,"A",{id:!0,class:!0,href:!0});var nst=s(S3);ece=n(nst,"SPAN",{});var sst=s(ece);T(c6.$$.fragment,sst),sst.forEach(t),nst.forEach(t),o0o=i(nDe),oce=n(nDe,"SPAN",{});var lst=s(oce);r0o=r(lst,"AutoModelForMaskedLM"),lst.forEach(t),nDe.forEach(t),rNe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(f6.$$.fragment,Xs),t0o=i(Xs),Bi=n(Xs,"P",{});var gZ=s(Bi);a0o=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Jj=n(gZ,"A",{href:!0});var ist=s(Jj);n0o=r(ist,"from_pretrained()"),ist.forEach(t),s0o=r(gZ," class method or the "),Yj=n(gZ,"A",{href:!0});var dst=s(Yj);l0o=r(dst,"from_config()"),dst.forEach(t),i0o=r(gZ,` class
method.`),gZ.forEach(t),d0o=i(Xs),m6=n(Xs,"P",{});var sDe=s(m6);c0o=r(sDe,"This class cannot be instantiated directly using "),rce=n(sDe,"CODE",{});var cst=s(rce);f0o=r(cst,"__init__()"),cst.forEach(t),m0o=r(sDe," (throws an error)."),sDe.forEach(t),g0o=i(Xs),st=n(Xs,"DIV",{class:!0});var Rw=s(st);T(g6.$$.fragment,Rw),h0o=i(Rw),tce=n(Rw,"P",{});var fst=s(tce);p0o=r(fst,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),fst.forEach(t),u0o=i(Rw),Ii=n(Rw,"P",{});var hZ=s(Ii);_0o=r(hZ,`Note:
Loading a model from its configuration file does `),ace=n(hZ,"STRONG",{});var mst=s(ace);b0o=r(mst,"not"),mst.forEach(t),v0o=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kj=n(hZ,"A",{href:!0});var gst=s(Kj);F0o=r(gst,"from_pretrained()"),gst.forEach(t),T0o=r(hZ," to load the model weights."),hZ.forEach(t),M0o=i(Rw),T(R3.$$.fragment,Rw),Rw.forEach(t),E0o=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(h6.$$.fragment,aa),C0o=i(aa),nce=n(aa,"P",{});var hst=s(nce);w0o=r(hst,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),hst.forEach(t),A0o=i(aa),ka=n(aa,"P",{});var Pw=s(ka);y0o=r(Pw,"The model class to instantiate is selected based on the "),sce=n(Pw,"CODE",{});var pst=s(sce);L0o=r(pst,"model_type"),pst.forEach(t),x0o=r(Pw,` property of the config object (either
passed as an argument or loaded from `),lce=n(Pw,"CODE",{});var ust=s(lce);$0o=r(ust,"pretrained_model_name_or_path"),ust.forEach(t),k0o=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=n(Pw,"CODE",{});var _st=s(ice);S0o=r(_st,"pretrained_model_name_or_path"),_st.forEach(t),R0o=r(Pw,":"),Pw.forEach(t),P0o=i(aa),W=n(aa,"UL",{});var U=s(W);P3=n(U,"LI",{});var Oye=s(P3);dce=n(Oye,"STRONG",{});var bst=s(dce);B0o=r(bst,"albert"),bst.forEach(t),I0o=r(Oye," \u2014 "),Zj=n(Oye,"A",{href:!0});var vst=s(Zj);q0o=r(vst,"AlbertForMaskedLM"),vst.forEach(t),N0o=r(Oye," (ALBERT model)"),Oye.forEach(t),j0o=i(U),B3=n(U,"LI",{});var Vye=s(B3);cce=n(Vye,"STRONG",{});var Fst=s(cce);D0o=r(Fst,"bart"),Fst.forEach(t),G0o=r(Vye," \u2014 "),eD=n(Vye,"A",{href:!0});var Tst=s(eD);O0o=r(Tst,"BartForConditionalGeneration"),Tst.forEach(t),V0o=r(Vye," (BART model)"),Vye.forEach(t),X0o=i(U),I3=n(U,"LI",{});var Xye=s(I3);fce=n(Xye,"STRONG",{});var Mst=s(fce);z0o=r(Mst,"bert"),Mst.forEach(t),W0o=r(Xye," \u2014 "),oD=n(Xye,"A",{href:!0});var Est=s(oD);Q0o=r(Est,"BertForMaskedLM"),Est.forEach(t),H0o=r(Xye," (BERT model)"),Xye.forEach(t),U0o=i(U),q3=n(U,"LI",{});var zye=s(q3);mce=n(zye,"STRONG",{});var Cst=s(mce);J0o=r(Cst,"big_bird"),Cst.forEach(t),Y0o=r(zye," \u2014 "),rD=n(zye,"A",{href:!0});var wst=s(rD);K0o=r(wst,"BigBirdForMaskedLM"),wst.forEach(t),Z0o=r(zye," (BigBird model)"),zye.forEach(t),eAo=i(U),N3=n(U,"LI",{});var Wye=s(N3);gce=n(Wye,"STRONG",{});var Ast=s(gce);oAo=r(Ast,"camembert"),Ast.forEach(t),rAo=r(Wye," \u2014 "),tD=n(Wye,"A",{href:!0});var yst=s(tD);tAo=r(yst,"CamembertForMaskedLM"),yst.forEach(t),aAo=r(Wye," (CamemBERT model)"),Wye.forEach(t),nAo=i(U),j3=n(U,"LI",{});var Qye=s(j3);hce=n(Qye,"STRONG",{});var Lst=s(hce);sAo=r(Lst,"convbert"),Lst.forEach(t),lAo=r(Qye," \u2014 "),aD=n(Qye,"A",{href:!0});var xst=s(aD);iAo=r(xst,"ConvBertForMaskedLM"),xst.forEach(t),dAo=r(Qye," (ConvBERT model)"),Qye.forEach(t),cAo=i(U),D3=n(U,"LI",{});var Hye=s(D3);pce=n(Hye,"STRONG",{});var $st=s(pce);fAo=r($st,"data2vec-text"),$st.forEach(t),mAo=r(Hye," \u2014 "),nD=n(Hye,"A",{href:!0});var kst=s(nD);gAo=r(kst,"Data2VecTextForMaskedLM"),kst.forEach(t),hAo=r(Hye," (Data2VecText model)"),Hye.forEach(t),pAo=i(U),G3=n(U,"LI",{});var Uye=s(G3);uce=n(Uye,"STRONG",{});var Sst=s(uce);uAo=r(Sst,"deberta"),Sst.forEach(t),_Ao=r(Uye," \u2014 "),sD=n(Uye,"A",{href:!0});var Rst=s(sD);bAo=r(Rst,"DebertaForMaskedLM"),Rst.forEach(t),vAo=r(Uye," (DeBERTa model)"),Uye.forEach(t),FAo=i(U),O3=n(U,"LI",{});var Jye=s(O3);_ce=n(Jye,"STRONG",{});var Pst=s(_ce);TAo=r(Pst,"deberta-v2"),Pst.forEach(t),MAo=r(Jye," \u2014 "),lD=n(Jye,"A",{href:!0});var Bst=s(lD);EAo=r(Bst,"DebertaV2ForMaskedLM"),Bst.forEach(t),CAo=r(Jye," (DeBERTa-v2 model)"),Jye.forEach(t),wAo=i(U),V3=n(U,"LI",{});var Yye=s(V3);bce=n(Yye,"STRONG",{});var Ist=s(bce);AAo=r(Ist,"distilbert"),Ist.forEach(t),yAo=r(Yye," \u2014 "),iD=n(Yye,"A",{href:!0});var qst=s(iD);LAo=r(qst,"DistilBertForMaskedLM"),qst.forEach(t),xAo=r(Yye," (DistilBERT model)"),Yye.forEach(t),$Ao=i(U),X3=n(U,"LI",{});var Kye=s(X3);vce=n(Kye,"STRONG",{});var Nst=s(vce);kAo=r(Nst,"electra"),Nst.forEach(t),SAo=r(Kye," \u2014 "),dD=n(Kye,"A",{href:!0});var jst=s(dD);RAo=r(jst,"ElectraForMaskedLM"),jst.forEach(t),PAo=r(Kye," (ELECTRA model)"),Kye.forEach(t),BAo=i(U),z3=n(U,"LI",{});var Zye=s(z3);Fce=n(Zye,"STRONG",{});var Dst=s(Fce);IAo=r(Dst,"flaubert"),Dst.forEach(t),qAo=r(Zye," \u2014 "),cD=n(Zye,"A",{href:!0});var Gst=s(cD);NAo=r(Gst,"FlaubertWithLMHeadModel"),Gst.forEach(t),jAo=r(Zye," (FlauBERT model)"),Zye.forEach(t),DAo=i(U),W3=n(U,"LI",{});var eLe=s(W3);Tce=n(eLe,"STRONG",{});var Ost=s(Tce);GAo=r(Ost,"fnet"),Ost.forEach(t),OAo=r(eLe," \u2014 "),fD=n(eLe,"A",{href:!0});var Vst=s(fD);VAo=r(Vst,"FNetForMaskedLM"),Vst.forEach(t),XAo=r(eLe," (FNet model)"),eLe.forEach(t),zAo=i(U),Q3=n(U,"LI",{});var oLe=s(Q3);Mce=n(oLe,"STRONG",{});var Xst=s(Mce);WAo=r(Xst,"funnel"),Xst.forEach(t),QAo=r(oLe," \u2014 "),mD=n(oLe,"A",{href:!0});var zst=s(mD);HAo=r(zst,"FunnelForMaskedLM"),zst.forEach(t),UAo=r(oLe," (Funnel Transformer model)"),oLe.forEach(t),JAo=i(U),H3=n(U,"LI",{});var rLe=s(H3);Ece=n(rLe,"STRONG",{});var Wst=s(Ece);YAo=r(Wst,"ibert"),Wst.forEach(t),KAo=r(rLe," \u2014 "),gD=n(rLe,"A",{href:!0});var Qst=s(gD);ZAo=r(Qst,"IBertForMaskedLM"),Qst.forEach(t),e6o=r(rLe," (I-BERT model)"),rLe.forEach(t),o6o=i(U),U3=n(U,"LI",{});var tLe=s(U3);Cce=n(tLe,"STRONG",{});var Hst=s(Cce);r6o=r(Hst,"layoutlm"),Hst.forEach(t),t6o=r(tLe," \u2014 "),hD=n(tLe,"A",{href:!0});var Ust=s(hD);a6o=r(Ust,"LayoutLMForMaskedLM"),Ust.forEach(t),n6o=r(tLe," (LayoutLM model)"),tLe.forEach(t),s6o=i(U),J3=n(U,"LI",{});var aLe=s(J3);wce=n(aLe,"STRONG",{});var Jst=s(wce);l6o=r(Jst,"longformer"),Jst.forEach(t),i6o=r(aLe," \u2014 "),pD=n(aLe,"A",{href:!0});var Yst=s(pD);d6o=r(Yst,"LongformerForMaskedLM"),Yst.forEach(t),c6o=r(aLe," (Longformer model)"),aLe.forEach(t),f6o=i(U),Y3=n(U,"LI",{});var nLe=s(Y3);Ace=n(nLe,"STRONG",{});var Kst=s(Ace);m6o=r(Kst,"mbart"),Kst.forEach(t),g6o=r(nLe," \u2014 "),uD=n(nLe,"A",{href:!0});var Zst=s(uD);h6o=r(Zst,"MBartForConditionalGeneration"),Zst.forEach(t),p6o=r(nLe," (mBART model)"),nLe.forEach(t),u6o=i(U),K3=n(U,"LI",{});var sLe=s(K3);yce=n(sLe,"STRONG",{});var elt=s(yce);_6o=r(elt,"megatron-bert"),elt.forEach(t),b6o=r(sLe," \u2014 "),_D=n(sLe,"A",{href:!0});var olt=s(_D);v6o=r(olt,"MegatronBertForMaskedLM"),olt.forEach(t),F6o=r(sLe," (MegatronBert model)"),sLe.forEach(t),T6o=i(U),Z3=n(U,"LI",{});var lLe=s(Z3);Lce=n(lLe,"STRONG",{});var rlt=s(Lce);M6o=r(rlt,"mobilebert"),rlt.forEach(t),E6o=r(lLe," \u2014 "),bD=n(lLe,"A",{href:!0});var tlt=s(bD);C6o=r(tlt,"MobileBertForMaskedLM"),tlt.forEach(t),w6o=r(lLe," (MobileBERT model)"),lLe.forEach(t),A6o=i(U),e1=n(U,"LI",{});var iLe=s(e1);xce=n(iLe,"STRONG",{});var alt=s(xce);y6o=r(alt,"mpnet"),alt.forEach(t),L6o=r(iLe," \u2014 "),vD=n(iLe,"A",{href:!0});var nlt=s(vD);x6o=r(nlt,"MPNetForMaskedLM"),nlt.forEach(t),$6o=r(iLe," (MPNet model)"),iLe.forEach(t),k6o=i(U),o1=n(U,"LI",{});var dLe=s(o1);$ce=n(dLe,"STRONG",{});var slt=s($ce);S6o=r(slt,"nystromformer"),slt.forEach(t),R6o=r(dLe," \u2014 "),FD=n(dLe,"A",{href:!0});var llt=s(FD);P6o=r(llt,"NystromformerForMaskedLM"),llt.forEach(t),B6o=r(dLe," (Nystromformer model)"),dLe.forEach(t),I6o=i(U),r1=n(U,"LI",{});var cLe=s(r1);kce=n(cLe,"STRONG",{});var ilt=s(kce);q6o=r(ilt,"perceiver"),ilt.forEach(t),N6o=r(cLe," \u2014 "),TD=n(cLe,"A",{href:!0});var dlt=s(TD);j6o=r(dlt,"PerceiverForMaskedLM"),dlt.forEach(t),D6o=r(cLe," (Perceiver model)"),cLe.forEach(t),G6o=i(U),t1=n(U,"LI",{});var fLe=s(t1);Sce=n(fLe,"STRONG",{});var clt=s(Sce);O6o=r(clt,"qdqbert"),clt.forEach(t),V6o=r(fLe," \u2014 "),MD=n(fLe,"A",{href:!0});var flt=s(MD);X6o=r(flt,"QDQBertForMaskedLM"),flt.forEach(t),z6o=r(fLe," (QDQBert model)"),fLe.forEach(t),W6o=i(U),a1=n(U,"LI",{});var mLe=s(a1);Rce=n(mLe,"STRONG",{});var mlt=s(Rce);Q6o=r(mlt,"reformer"),mlt.forEach(t),H6o=r(mLe," \u2014 "),ED=n(mLe,"A",{href:!0});var glt=s(ED);U6o=r(glt,"ReformerForMaskedLM"),glt.forEach(t),J6o=r(mLe," (Reformer model)"),mLe.forEach(t),Y6o=i(U),n1=n(U,"LI",{});var gLe=s(n1);Pce=n(gLe,"STRONG",{});var hlt=s(Pce);K6o=r(hlt,"rembert"),hlt.forEach(t),Z6o=r(gLe," \u2014 "),CD=n(gLe,"A",{href:!0});var plt=s(CD);eyo=r(plt,"RemBertForMaskedLM"),plt.forEach(t),oyo=r(gLe," (RemBERT model)"),gLe.forEach(t),ryo=i(U),s1=n(U,"LI",{});var hLe=s(s1);Bce=n(hLe,"STRONG",{});var ult=s(Bce);tyo=r(ult,"roberta"),ult.forEach(t),ayo=r(hLe," \u2014 "),wD=n(hLe,"A",{href:!0});var _lt=s(wD);nyo=r(_lt,"RobertaForMaskedLM"),_lt.forEach(t),syo=r(hLe," (RoBERTa model)"),hLe.forEach(t),lyo=i(U),l1=n(U,"LI",{});var pLe=s(l1);Ice=n(pLe,"STRONG",{});var blt=s(Ice);iyo=r(blt,"roformer"),blt.forEach(t),dyo=r(pLe," \u2014 "),AD=n(pLe,"A",{href:!0});var vlt=s(AD);cyo=r(vlt,"RoFormerForMaskedLM"),vlt.forEach(t),fyo=r(pLe," (RoFormer model)"),pLe.forEach(t),myo=i(U),i1=n(U,"LI",{});var uLe=s(i1);qce=n(uLe,"STRONG",{});var Flt=s(qce);gyo=r(Flt,"squeezebert"),Flt.forEach(t),hyo=r(uLe," \u2014 "),yD=n(uLe,"A",{href:!0});var Tlt=s(yD);pyo=r(Tlt,"SqueezeBertForMaskedLM"),Tlt.forEach(t),uyo=r(uLe," (SqueezeBERT model)"),uLe.forEach(t),_yo=i(U),d1=n(U,"LI",{});var _Le=s(d1);Nce=n(_Le,"STRONG",{});var Mlt=s(Nce);byo=r(Mlt,"tapas"),Mlt.forEach(t),vyo=r(_Le," \u2014 "),LD=n(_Le,"A",{href:!0});var Elt=s(LD);Fyo=r(Elt,"TapasForMaskedLM"),Elt.forEach(t),Tyo=r(_Le," (TAPAS model)"),_Le.forEach(t),Myo=i(U),c1=n(U,"LI",{});var bLe=s(c1);jce=n(bLe,"STRONG",{});var Clt=s(jce);Eyo=r(Clt,"wav2vec2"),Clt.forEach(t),Cyo=r(bLe," \u2014 "),Dce=n(bLe,"CODE",{});var wlt=s(Dce);wyo=r(wlt,"Wav2Vec2ForMaskedLM"),wlt.forEach(t),Ayo=r(bLe," (Wav2Vec2 model)"),bLe.forEach(t),yyo=i(U),f1=n(U,"LI",{});var vLe=s(f1);Gce=n(vLe,"STRONG",{});var Alt=s(Gce);Lyo=r(Alt,"xlm"),Alt.forEach(t),xyo=r(vLe," \u2014 "),xD=n(vLe,"A",{href:!0});var ylt=s(xD);$yo=r(ylt,"XLMWithLMHeadModel"),ylt.forEach(t),kyo=r(vLe," (XLM model)"),vLe.forEach(t),Syo=i(U),m1=n(U,"LI",{});var FLe=s(m1);Oce=n(FLe,"STRONG",{});var Llt=s(Oce);Ryo=r(Llt,"xlm-roberta"),Llt.forEach(t),Pyo=r(FLe," \u2014 "),$D=n(FLe,"A",{href:!0});var xlt=s($D);Byo=r(xlt,"XLMRobertaForMaskedLM"),xlt.forEach(t),Iyo=r(FLe," (XLM-RoBERTa model)"),FLe.forEach(t),qyo=i(U),g1=n(U,"LI",{});var TLe=s(g1);Vce=n(TLe,"STRONG",{});var $lt=s(Vce);Nyo=r($lt,"xlm-roberta-xl"),$lt.forEach(t),jyo=r(TLe," \u2014 "),kD=n(TLe,"A",{href:!0});var klt=s(kD);Dyo=r(klt,"XLMRobertaXLForMaskedLM"),klt.forEach(t),Gyo=r(TLe," (XLM-RoBERTa-XL model)"),TLe.forEach(t),Oyo=i(U),h1=n(U,"LI",{});var MLe=s(h1);Xce=n(MLe,"STRONG",{});var Slt=s(Xce);Vyo=r(Slt,"yoso"),Slt.forEach(t),Xyo=r(MLe," \u2014 "),SD=n(MLe,"A",{href:!0});var Rlt=s(SD);zyo=r(Rlt,"YosoForMaskedLM"),Rlt.forEach(t),Wyo=r(MLe," (YOSO model)"),MLe.forEach(t),U.forEach(t),Qyo=i(aa),p1=n(aa,"P",{});var ELe=s(p1);Hyo=r(ELe,"The model is set in evaluation mode by default using "),zce=n(ELe,"CODE",{});var Plt=s(zce);Uyo=r(Plt,"model.eval()"),Plt.forEach(t),Jyo=r(ELe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wce=n(ELe,"CODE",{});var Blt=s(Wce);Yyo=r(Blt,"model.train()"),Blt.forEach(t),ELe.forEach(t),Kyo=i(aa),T(u1.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),tNe=i(f),qi=n(f,"H2",{class:!0});var lDe=s(qi);_1=n(lDe,"A",{id:!0,class:!0,href:!0});var Ilt=s(_1);Qce=n(Ilt,"SPAN",{});var qlt=s(Qce);T(p6.$$.fragment,qlt),qlt.forEach(t),Ilt.forEach(t),Zyo=i(lDe),Hce=n(lDe,"SPAN",{});var Nlt=s(Hce);eLo=r(Nlt,"AutoModelForSeq2SeqLM"),Nlt.forEach(t),lDe.forEach(t),aNe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(u6.$$.fragment,zs),oLo=i(zs),Ni=n(zs,"P",{});var pZ=s(Ni);rLo=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RD=n(pZ,"A",{href:!0});var jlt=s(RD);tLo=r(jlt,"from_pretrained()"),jlt.forEach(t),aLo=r(pZ," class method or the "),PD=n(pZ,"A",{href:!0});var Dlt=s(PD);nLo=r(Dlt,"from_config()"),Dlt.forEach(t),sLo=r(pZ,` class
method.`),pZ.forEach(t),lLo=i(zs),_6=n(zs,"P",{});var iDe=s(_6);iLo=r(iDe,"This class cannot be instantiated directly using "),Uce=n(iDe,"CODE",{});var Glt=s(Uce);dLo=r(Glt,"__init__()"),Glt.forEach(t),cLo=r(iDe," (throws an error)."),iDe.forEach(t),fLo=i(zs),lt=n(zs,"DIV",{class:!0});var Bw=s(lt);T(b6.$$.fragment,Bw),mLo=i(Bw),Jce=n(Bw,"P",{});var Olt=s(Jce);gLo=r(Olt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Olt.forEach(t),hLo=i(Bw),ji=n(Bw,"P",{});var uZ=s(ji);pLo=r(uZ,`Note:
Loading a model from its configuration file does `),Yce=n(uZ,"STRONG",{});var Vlt=s(Yce);uLo=r(Vlt,"not"),Vlt.forEach(t),_Lo=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BD=n(uZ,"A",{href:!0});var Xlt=s(BD);bLo=r(Xlt,"from_pretrained()"),Xlt.forEach(t),vLo=r(uZ," to load the model weights."),uZ.forEach(t),FLo=i(Bw),T(b1.$$.fragment,Bw),Bw.forEach(t),TLo=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(v6.$$.fragment,na),MLo=i(na),Kce=n(na,"P",{});var zlt=s(Kce);ELo=r(zlt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zlt.forEach(t),CLo=i(na),Sa=n(na,"P",{});var Iw=s(Sa);wLo=r(Iw,"The model class to instantiate is selected based on the "),Zce=n(Iw,"CODE",{});var Wlt=s(Zce);ALo=r(Wlt,"model_type"),Wlt.forEach(t),yLo=r(Iw,` property of the config object (either
passed as an argument or loaded from `),efe=n(Iw,"CODE",{});var Qlt=s(efe);LLo=r(Qlt,"pretrained_model_name_or_path"),Qlt.forEach(t),xLo=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ofe=n(Iw,"CODE",{});var Hlt=s(ofe);$Lo=r(Hlt,"pretrained_model_name_or_path"),Hlt.forEach(t),kLo=r(Iw,":"),Iw.forEach(t),SLo=i(na),ue=n(na,"UL",{});var ve=s(ue);v1=n(ve,"LI",{});var CLe=s(v1);rfe=n(CLe,"STRONG",{});var Ult=s(rfe);RLo=r(Ult,"bart"),Ult.forEach(t),PLo=r(CLe," \u2014 "),ID=n(CLe,"A",{href:!0});var Jlt=s(ID);BLo=r(Jlt,"BartForConditionalGeneration"),Jlt.forEach(t),ILo=r(CLe," (BART model)"),CLe.forEach(t),qLo=i(ve),F1=n(ve,"LI",{});var wLe=s(F1);tfe=n(wLe,"STRONG",{});var Ylt=s(tfe);NLo=r(Ylt,"bigbird_pegasus"),Ylt.forEach(t),jLo=r(wLe," \u2014 "),qD=n(wLe,"A",{href:!0});var Klt=s(qD);DLo=r(Klt,"BigBirdPegasusForConditionalGeneration"),Klt.forEach(t),GLo=r(wLe," (BigBirdPegasus model)"),wLe.forEach(t),OLo=i(ve),T1=n(ve,"LI",{});var ALe=s(T1);afe=n(ALe,"STRONG",{});var Zlt=s(afe);VLo=r(Zlt,"blenderbot"),Zlt.forEach(t),XLo=r(ALe," \u2014 "),ND=n(ALe,"A",{href:!0});var eit=s(ND);zLo=r(eit,"BlenderbotForConditionalGeneration"),eit.forEach(t),WLo=r(ALe," (Blenderbot model)"),ALe.forEach(t),QLo=i(ve),M1=n(ve,"LI",{});var yLe=s(M1);nfe=n(yLe,"STRONG",{});var oit=s(nfe);HLo=r(oit,"blenderbot-small"),oit.forEach(t),ULo=r(yLe," \u2014 "),jD=n(yLe,"A",{href:!0});var rit=s(jD);JLo=r(rit,"BlenderbotSmallForConditionalGeneration"),rit.forEach(t),YLo=r(yLe," (BlenderbotSmall model)"),yLe.forEach(t),KLo=i(ve),E1=n(ve,"LI",{});var LLe=s(E1);sfe=n(LLe,"STRONG",{});var tit=s(sfe);ZLo=r(tit,"encoder-decoder"),tit.forEach(t),e8o=r(LLe," \u2014 "),DD=n(LLe,"A",{href:!0});var ait=s(DD);o8o=r(ait,"EncoderDecoderModel"),ait.forEach(t),r8o=r(LLe," (Encoder decoder model)"),LLe.forEach(t),t8o=i(ve),C1=n(ve,"LI",{});var xLe=s(C1);lfe=n(xLe,"STRONG",{});var nit=s(lfe);a8o=r(nit,"fsmt"),nit.forEach(t),n8o=r(xLe," \u2014 "),GD=n(xLe,"A",{href:!0});var sit=s(GD);s8o=r(sit,"FSMTForConditionalGeneration"),sit.forEach(t),l8o=r(xLe," (FairSeq Machine-Translation model)"),xLe.forEach(t),i8o=i(ve),w1=n(ve,"LI",{});var $Le=s(w1);ife=n($Le,"STRONG",{});var lit=s(ife);d8o=r(lit,"led"),lit.forEach(t),c8o=r($Le," \u2014 "),OD=n($Le,"A",{href:!0});var iit=s(OD);f8o=r(iit,"LEDForConditionalGeneration"),iit.forEach(t),m8o=r($Le," (LED model)"),$Le.forEach(t),g8o=i(ve),A1=n(ve,"LI",{});var kLe=s(A1);dfe=n(kLe,"STRONG",{});var dit=s(dfe);h8o=r(dit,"m2m_100"),dit.forEach(t),p8o=r(kLe," \u2014 "),VD=n(kLe,"A",{href:!0});var cit=s(VD);u8o=r(cit,"M2M100ForConditionalGeneration"),cit.forEach(t),_8o=r(kLe," (M2M100 model)"),kLe.forEach(t),b8o=i(ve),y1=n(ve,"LI",{});var SLe=s(y1);cfe=n(SLe,"STRONG",{});var fit=s(cfe);v8o=r(fit,"marian"),fit.forEach(t),F8o=r(SLe," \u2014 "),XD=n(SLe,"A",{href:!0});var mit=s(XD);T8o=r(mit,"MarianMTModel"),mit.forEach(t),M8o=r(SLe," (Marian model)"),SLe.forEach(t),E8o=i(ve),L1=n(ve,"LI",{});var RLe=s(L1);ffe=n(RLe,"STRONG",{});var git=s(ffe);C8o=r(git,"mbart"),git.forEach(t),w8o=r(RLe," \u2014 "),zD=n(RLe,"A",{href:!0});var hit=s(zD);A8o=r(hit,"MBartForConditionalGeneration"),hit.forEach(t),y8o=r(RLe," (mBART model)"),RLe.forEach(t),L8o=i(ve),x1=n(ve,"LI",{});var PLe=s(x1);mfe=n(PLe,"STRONG",{});var pit=s(mfe);x8o=r(pit,"mt5"),pit.forEach(t),$8o=r(PLe," \u2014 "),WD=n(PLe,"A",{href:!0});var uit=s(WD);k8o=r(uit,"MT5ForConditionalGeneration"),uit.forEach(t),S8o=r(PLe," (mT5 model)"),PLe.forEach(t),R8o=i(ve),$1=n(ve,"LI",{});var BLe=s($1);gfe=n(BLe,"STRONG",{});var _it=s(gfe);P8o=r(_it,"pegasus"),_it.forEach(t),B8o=r(BLe," \u2014 "),QD=n(BLe,"A",{href:!0});var bit=s(QD);I8o=r(bit,"PegasusForConditionalGeneration"),bit.forEach(t),q8o=r(BLe," (Pegasus model)"),BLe.forEach(t),N8o=i(ve),k1=n(ve,"LI",{});var ILe=s(k1);hfe=n(ILe,"STRONG",{});var vit=s(hfe);j8o=r(vit,"plbart"),vit.forEach(t),D8o=r(ILe," \u2014 "),HD=n(ILe,"A",{href:!0});var Fit=s(HD);G8o=r(Fit,"PLBartForConditionalGeneration"),Fit.forEach(t),O8o=r(ILe," (PLBart model)"),ILe.forEach(t),V8o=i(ve),S1=n(ve,"LI",{});var qLe=s(S1);pfe=n(qLe,"STRONG",{});var Tit=s(pfe);X8o=r(Tit,"prophetnet"),Tit.forEach(t),z8o=r(qLe," \u2014 "),UD=n(qLe,"A",{href:!0});var Mit=s(UD);W8o=r(Mit,"ProphetNetForConditionalGeneration"),Mit.forEach(t),Q8o=r(qLe," (ProphetNet model)"),qLe.forEach(t),H8o=i(ve),R1=n(ve,"LI",{});var NLe=s(R1);ufe=n(NLe,"STRONG",{});var Eit=s(ufe);U8o=r(Eit,"t5"),Eit.forEach(t),J8o=r(NLe," \u2014 "),JD=n(NLe,"A",{href:!0});var Cit=s(JD);Y8o=r(Cit,"T5ForConditionalGeneration"),Cit.forEach(t),K8o=r(NLe," (T5 model)"),NLe.forEach(t),Z8o=i(ve),P1=n(ve,"LI",{});var jLe=s(P1);_fe=n(jLe,"STRONG",{});var wit=s(_fe);exo=r(wit,"xlm-prophetnet"),wit.forEach(t),oxo=r(jLe," \u2014 "),YD=n(jLe,"A",{href:!0});var Ait=s(YD);rxo=r(Ait,"XLMProphetNetForConditionalGeneration"),Ait.forEach(t),txo=r(jLe," (XLMProphetNet model)"),jLe.forEach(t),ve.forEach(t),axo=i(na),B1=n(na,"P",{});var DLe=s(B1);nxo=r(DLe,"The model is set in evaluation mode by default using "),bfe=n(DLe,"CODE",{});var yit=s(bfe);sxo=r(yit,"model.eval()"),yit.forEach(t),lxo=r(DLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=n(DLe,"CODE",{});var Lit=s(vfe);ixo=r(Lit,"model.train()"),Lit.forEach(t),DLe.forEach(t),dxo=i(na),T(I1.$$.fragment,na),na.forEach(t),zs.forEach(t),nNe=i(f),Di=n(f,"H2",{class:!0});var dDe=s(Di);q1=n(dDe,"A",{id:!0,class:!0,href:!0});var xit=s(q1);Ffe=n(xit,"SPAN",{});var $it=s(Ffe);T(F6.$$.fragment,$it),$it.forEach(t),xit.forEach(t),cxo=i(dDe),Tfe=n(dDe,"SPAN",{});var kit=s(Tfe);fxo=r(kit,"AutoModelForSequenceClassification"),kit.forEach(t),dDe.forEach(t),sNe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(T6.$$.fragment,Ws),mxo=i(Ws),Gi=n(Ws,"P",{});var _Z=s(Gi);gxo=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KD=n(_Z,"A",{href:!0});var Sit=s(KD);hxo=r(Sit,"from_pretrained()"),Sit.forEach(t),pxo=r(_Z," class method or the "),ZD=n(_Z,"A",{href:!0});var Rit=s(ZD);uxo=r(Rit,"from_config()"),Rit.forEach(t),_xo=r(_Z,` class
method.`),_Z.forEach(t),bxo=i(Ws),M6=n(Ws,"P",{});var cDe=s(M6);vxo=r(cDe,"This class cannot be instantiated directly using "),Mfe=n(cDe,"CODE",{});var Pit=s(Mfe);Fxo=r(Pit,"__init__()"),Pit.forEach(t),Txo=r(cDe," (throws an error)."),cDe.forEach(t),Mxo=i(Ws),it=n(Ws,"DIV",{class:!0});var qw=s(it);T(E6.$$.fragment,qw),Exo=i(qw),Efe=n(qw,"P",{});var Bit=s(Efe);Cxo=r(Bit,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Bit.forEach(t),wxo=i(qw),Oi=n(qw,"P",{});var bZ=s(Oi);Axo=r(bZ,`Note:
Loading a model from its configuration file does `),Cfe=n(bZ,"STRONG",{});var Iit=s(Cfe);yxo=r(Iit,"not"),Iit.forEach(t),Lxo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eG=n(bZ,"A",{href:!0});var qit=s(eG);xxo=r(qit,"from_pretrained()"),qit.forEach(t),$xo=r(bZ," to load the model weights."),bZ.forEach(t),kxo=i(qw),T(N1.$$.fragment,qw),qw.forEach(t),Sxo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(C6.$$.fragment,sa),Rxo=i(sa),wfe=n(sa,"P",{});var Nit=s(wfe);Pxo=r(Nit,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Nit.forEach(t),Bxo=i(sa),Ra=n(sa,"P",{});var Nw=s(Ra);Ixo=r(Nw,"The model class to instantiate is selected based on the "),Afe=n(Nw,"CODE",{});var jit=s(Afe);qxo=r(jit,"model_type"),jit.forEach(t),Nxo=r(Nw,` property of the config object (either
passed as an argument or loaded from `),yfe=n(Nw,"CODE",{});var Dit=s(yfe);jxo=r(Dit,"pretrained_model_name_or_path"),Dit.forEach(t),Dxo=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=n(Nw,"CODE",{});var Git=s(Lfe);Gxo=r(Git,"pretrained_model_name_or_path"),Git.forEach(t),Oxo=r(Nw,":"),Nw.forEach(t),Vxo=i(sa),q=n(sa,"UL",{});var j=s(q);j1=n(j,"LI",{});var GLe=s(j1);xfe=n(GLe,"STRONG",{});var Oit=s(xfe);Xxo=r(Oit,"albert"),Oit.forEach(t),zxo=r(GLe," \u2014 "),oG=n(GLe,"A",{href:!0});var Vit=s(oG);Wxo=r(Vit,"AlbertForSequenceClassification"),Vit.forEach(t),Qxo=r(GLe," (ALBERT model)"),GLe.forEach(t),Hxo=i(j),D1=n(j,"LI",{});var OLe=s(D1);$fe=n(OLe,"STRONG",{});var Xit=s($fe);Uxo=r(Xit,"bart"),Xit.forEach(t),Jxo=r(OLe," \u2014 "),rG=n(OLe,"A",{href:!0});var zit=s(rG);Yxo=r(zit,"BartForSequenceClassification"),zit.forEach(t),Kxo=r(OLe," (BART model)"),OLe.forEach(t),Zxo=i(j),G1=n(j,"LI",{});var VLe=s(G1);kfe=n(VLe,"STRONG",{});var Wit=s(kfe);e$o=r(Wit,"bert"),Wit.forEach(t),o$o=r(VLe," \u2014 "),tG=n(VLe,"A",{href:!0});var Qit=s(tG);r$o=r(Qit,"BertForSequenceClassification"),Qit.forEach(t),t$o=r(VLe," (BERT model)"),VLe.forEach(t),a$o=i(j),O1=n(j,"LI",{});var XLe=s(O1);Sfe=n(XLe,"STRONG",{});var Hit=s(Sfe);n$o=r(Hit,"big_bird"),Hit.forEach(t),s$o=r(XLe," \u2014 "),aG=n(XLe,"A",{href:!0});var Uit=s(aG);l$o=r(Uit,"BigBirdForSequenceClassification"),Uit.forEach(t),i$o=r(XLe," (BigBird model)"),XLe.forEach(t),d$o=i(j),V1=n(j,"LI",{});var zLe=s(V1);Rfe=n(zLe,"STRONG",{});var Jit=s(Rfe);c$o=r(Jit,"bigbird_pegasus"),Jit.forEach(t),f$o=r(zLe," \u2014 "),nG=n(zLe,"A",{href:!0});var Yit=s(nG);m$o=r(Yit,"BigBirdPegasusForSequenceClassification"),Yit.forEach(t),g$o=r(zLe," (BigBirdPegasus model)"),zLe.forEach(t),h$o=i(j),X1=n(j,"LI",{});var WLe=s(X1);Pfe=n(WLe,"STRONG",{});var Kit=s(Pfe);p$o=r(Kit,"camembert"),Kit.forEach(t),u$o=r(WLe," \u2014 "),sG=n(WLe,"A",{href:!0});var Zit=s(sG);_$o=r(Zit,"CamembertForSequenceClassification"),Zit.forEach(t),b$o=r(WLe," (CamemBERT model)"),WLe.forEach(t),v$o=i(j),z1=n(j,"LI",{});var QLe=s(z1);Bfe=n(QLe,"STRONG",{});var edt=s(Bfe);F$o=r(edt,"canine"),edt.forEach(t),T$o=r(QLe," \u2014 "),lG=n(QLe,"A",{href:!0});var odt=s(lG);M$o=r(odt,"CanineForSequenceClassification"),odt.forEach(t),E$o=r(QLe," (Canine model)"),QLe.forEach(t),C$o=i(j),W1=n(j,"LI",{});var HLe=s(W1);Ife=n(HLe,"STRONG",{});var rdt=s(Ife);w$o=r(rdt,"convbert"),rdt.forEach(t),A$o=r(HLe," \u2014 "),iG=n(HLe,"A",{href:!0});var tdt=s(iG);y$o=r(tdt,"ConvBertForSequenceClassification"),tdt.forEach(t),L$o=r(HLe," (ConvBERT model)"),HLe.forEach(t),x$o=i(j),Q1=n(j,"LI",{});var ULe=s(Q1);qfe=n(ULe,"STRONG",{});var adt=s(qfe);$$o=r(adt,"ctrl"),adt.forEach(t),k$o=r(ULe," \u2014 "),dG=n(ULe,"A",{href:!0});var ndt=s(dG);S$o=r(ndt,"CTRLForSequenceClassification"),ndt.forEach(t),R$o=r(ULe," (CTRL model)"),ULe.forEach(t),P$o=i(j),H1=n(j,"LI",{});var JLe=s(H1);Nfe=n(JLe,"STRONG",{});var sdt=s(Nfe);B$o=r(sdt,"data2vec-text"),sdt.forEach(t),I$o=r(JLe," \u2014 "),cG=n(JLe,"A",{href:!0});var ldt=s(cG);q$o=r(ldt,"Data2VecTextForSequenceClassification"),ldt.forEach(t),N$o=r(JLe," (Data2VecText model)"),JLe.forEach(t),j$o=i(j),U1=n(j,"LI",{});var YLe=s(U1);jfe=n(YLe,"STRONG",{});var idt=s(jfe);D$o=r(idt,"deberta"),idt.forEach(t),G$o=r(YLe," \u2014 "),fG=n(YLe,"A",{href:!0});var ddt=s(fG);O$o=r(ddt,"DebertaForSequenceClassification"),ddt.forEach(t),V$o=r(YLe," (DeBERTa model)"),YLe.forEach(t),X$o=i(j),J1=n(j,"LI",{});var KLe=s(J1);Dfe=n(KLe,"STRONG",{});var cdt=s(Dfe);z$o=r(cdt,"deberta-v2"),cdt.forEach(t),W$o=r(KLe," \u2014 "),mG=n(KLe,"A",{href:!0});var fdt=s(mG);Q$o=r(fdt,"DebertaV2ForSequenceClassification"),fdt.forEach(t),H$o=r(KLe," (DeBERTa-v2 model)"),KLe.forEach(t),U$o=i(j),Y1=n(j,"LI",{});var ZLe=s(Y1);Gfe=n(ZLe,"STRONG",{});var mdt=s(Gfe);J$o=r(mdt,"distilbert"),mdt.forEach(t),Y$o=r(ZLe," \u2014 "),gG=n(ZLe,"A",{href:!0});var gdt=s(gG);K$o=r(gdt,"DistilBertForSequenceClassification"),gdt.forEach(t),Z$o=r(ZLe," (DistilBERT model)"),ZLe.forEach(t),eko=i(j),K1=n(j,"LI",{});var e8e=s(K1);Ofe=n(e8e,"STRONG",{});var hdt=s(Ofe);oko=r(hdt,"electra"),hdt.forEach(t),rko=r(e8e," \u2014 "),hG=n(e8e,"A",{href:!0});var pdt=s(hG);tko=r(pdt,"ElectraForSequenceClassification"),pdt.forEach(t),ako=r(e8e," (ELECTRA model)"),e8e.forEach(t),nko=i(j),Z1=n(j,"LI",{});var o8e=s(Z1);Vfe=n(o8e,"STRONG",{});var udt=s(Vfe);sko=r(udt,"flaubert"),udt.forEach(t),lko=r(o8e," \u2014 "),pG=n(o8e,"A",{href:!0});var _dt=s(pG);iko=r(_dt,"FlaubertForSequenceClassification"),_dt.forEach(t),dko=r(o8e," (FlauBERT model)"),o8e.forEach(t),cko=i(j),eb=n(j,"LI",{});var r8e=s(eb);Xfe=n(r8e,"STRONG",{});var bdt=s(Xfe);fko=r(bdt,"fnet"),bdt.forEach(t),mko=r(r8e," \u2014 "),uG=n(r8e,"A",{href:!0});var vdt=s(uG);gko=r(vdt,"FNetForSequenceClassification"),vdt.forEach(t),hko=r(r8e," (FNet model)"),r8e.forEach(t),pko=i(j),ob=n(j,"LI",{});var t8e=s(ob);zfe=n(t8e,"STRONG",{});var Fdt=s(zfe);uko=r(Fdt,"funnel"),Fdt.forEach(t),_ko=r(t8e," \u2014 "),_G=n(t8e,"A",{href:!0});var Tdt=s(_G);bko=r(Tdt,"FunnelForSequenceClassification"),Tdt.forEach(t),vko=r(t8e," (Funnel Transformer model)"),t8e.forEach(t),Fko=i(j),rb=n(j,"LI",{});var a8e=s(rb);Wfe=n(a8e,"STRONG",{});var Mdt=s(Wfe);Tko=r(Mdt,"gpt2"),Mdt.forEach(t),Mko=r(a8e," \u2014 "),bG=n(a8e,"A",{href:!0});var Edt=s(bG);Eko=r(Edt,"GPT2ForSequenceClassification"),Edt.forEach(t),Cko=r(a8e," (OpenAI GPT-2 model)"),a8e.forEach(t),wko=i(j),tb=n(j,"LI",{});var n8e=s(tb);Qfe=n(n8e,"STRONG",{});var Cdt=s(Qfe);Ako=r(Cdt,"gpt_neo"),Cdt.forEach(t),yko=r(n8e," \u2014 "),vG=n(n8e,"A",{href:!0});var wdt=s(vG);Lko=r(wdt,"GPTNeoForSequenceClassification"),wdt.forEach(t),xko=r(n8e," (GPT Neo model)"),n8e.forEach(t),$ko=i(j),ab=n(j,"LI",{});var s8e=s(ab);Hfe=n(s8e,"STRONG",{});var Adt=s(Hfe);kko=r(Adt,"gptj"),Adt.forEach(t),Sko=r(s8e," \u2014 "),FG=n(s8e,"A",{href:!0});var ydt=s(FG);Rko=r(ydt,"GPTJForSequenceClassification"),ydt.forEach(t),Pko=r(s8e," (GPT-J model)"),s8e.forEach(t),Bko=i(j),nb=n(j,"LI",{});var l8e=s(nb);Ufe=n(l8e,"STRONG",{});var Ldt=s(Ufe);Iko=r(Ldt,"ibert"),Ldt.forEach(t),qko=r(l8e," \u2014 "),TG=n(l8e,"A",{href:!0});var xdt=s(TG);Nko=r(xdt,"IBertForSequenceClassification"),xdt.forEach(t),jko=r(l8e," (I-BERT model)"),l8e.forEach(t),Dko=i(j),sb=n(j,"LI",{});var i8e=s(sb);Jfe=n(i8e,"STRONG",{});var $dt=s(Jfe);Gko=r($dt,"layoutlm"),$dt.forEach(t),Oko=r(i8e," \u2014 "),MG=n(i8e,"A",{href:!0});var kdt=s(MG);Vko=r(kdt,"LayoutLMForSequenceClassification"),kdt.forEach(t),Xko=r(i8e," (LayoutLM model)"),i8e.forEach(t),zko=i(j),lb=n(j,"LI",{});var d8e=s(lb);Yfe=n(d8e,"STRONG",{});var Sdt=s(Yfe);Wko=r(Sdt,"layoutlmv2"),Sdt.forEach(t),Qko=r(d8e," \u2014 "),EG=n(d8e,"A",{href:!0});var Rdt=s(EG);Hko=r(Rdt,"LayoutLMv2ForSequenceClassification"),Rdt.forEach(t),Uko=r(d8e," (LayoutLMv2 model)"),d8e.forEach(t),Jko=i(j),ib=n(j,"LI",{});var c8e=s(ib);Kfe=n(c8e,"STRONG",{});var Pdt=s(Kfe);Yko=r(Pdt,"layoutlmv3"),Pdt.forEach(t),Kko=r(c8e," \u2014 "),CG=n(c8e,"A",{href:!0});var Bdt=s(CG);Zko=r(Bdt,"LayoutLMv3ForSequenceClassification"),Bdt.forEach(t),eSo=r(c8e," (LayoutLMv3 model)"),c8e.forEach(t),oSo=i(j),db=n(j,"LI",{});var f8e=s(db);Zfe=n(f8e,"STRONG",{});var Idt=s(Zfe);rSo=r(Idt,"led"),Idt.forEach(t),tSo=r(f8e," \u2014 "),wG=n(f8e,"A",{href:!0});var qdt=s(wG);aSo=r(qdt,"LEDForSequenceClassification"),qdt.forEach(t),nSo=r(f8e," (LED model)"),f8e.forEach(t),sSo=i(j),cb=n(j,"LI",{});var m8e=s(cb);eme=n(m8e,"STRONG",{});var Ndt=s(eme);lSo=r(Ndt,"longformer"),Ndt.forEach(t),iSo=r(m8e," \u2014 "),AG=n(m8e,"A",{href:!0});var jdt=s(AG);dSo=r(jdt,"LongformerForSequenceClassification"),jdt.forEach(t),cSo=r(m8e," (Longformer model)"),m8e.forEach(t),fSo=i(j),fb=n(j,"LI",{});var g8e=s(fb);ome=n(g8e,"STRONG",{});var Ddt=s(ome);mSo=r(Ddt,"mbart"),Ddt.forEach(t),gSo=r(g8e," \u2014 "),yG=n(g8e,"A",{href:!0});var Gdt=s(yG);hSo=r(Gdt,"MBartForSequenceClassification"),Gdt.forEach(t),pSo=r(g8e," (mBART model)"),g8e.forEach(t),uSo=i(j),mb=n(j,"LI",{});var h8e=s(mb);rme=n(h8e,"STRONG",{});var Odt=s(rme);_So=r(Odt,"megatron-bert"),Odt.forEach(t),bSo=r(h8e," \u2014 "),LG=n(h8e,"A",{href:!0});var Vdt=s(LG);vSo=r(Vdt,"MegatronBertForSequenceClassification"),Vdt.forEach(t),FSo=r(h8e," (MegatronBert model)"),h8e.forEach(t),TSo=i(j),gb=n(j,"LI",{});var p8e=s(gb);tme=n(p8e,"STRONG",{});var Xdt=s(tme);MSo=r(Xdt,"mobilebert"),Xdt.forEach(t),ESo=r(p8e," \u2014 "),xG=n(p8e,"A",{href:!0});var zdt=s(xG);CSo=r(zdt,"MobileBertForSequenceClassification"),zdt.forEach(t),wSo=r(p8e," (MobileBERT model)"),p8e.forEach(t),ASo=i(j),hb=n(j,"LI",{});var u8e=s(hb);ame=n(u8e,"STRONG",{});var Wdt=s(ame);ySo=r(Wdt,"mpnet"),Wdt.forEach(t),LSo=r(u8e," \u2014 "),$G=n(u8e,"A",{href:!0});var Qdt=s($G);xSo=r(Qdt,"MPNetForSequenceClassification"),Qdt.forEach(t),$So=r(u8e," (MPNet model)"),u8e.forEach(t),kSo=i(j),pb=n(j,"LI",{});var _8e=s(pb);nme=n(_8e,"STRONG",{});var Hdt=s(nme);SSo=r(Hdt,"nystromformer"),Hdt.forEach(t),RSo=r(_8e," \u2014 "),kG=n(_8e,"A",{href:!0});var Udt=s(kG);PSo=r(Udt,"NystromformerForSequenceClassification"),Udt.forEach(t),BSo=r(_8e," (Nystromformer model)"),_8e.forEach(t),ISo=i(j),ub=n(j,"LI",{});var b8e=s(ub);sme=n(b8e,"STRONG",{});var Jdt=s(sme);qSo=r(Jdt,"openai-gpt"),Jdt.forEach(t),NSo=r(b8e," \u2014 "),SG=n(b8e,"A",{href:!0});var Ydt=s(SG);jSo=r(Ydt,"OpenAIGPTForSequenceClassification"),Ydt.forEach(t),DSo=r(b8e," (OpenAI GPT model)"),b8e.forEach(t),GSo=i(j),_b=n(j,"LI",{});var v8e=s(_b);lme=n(v8e,"STRONG",{});var Kdt=s(lme);OSo=r(Kdt,"perceiver"),Kdt.forEach(t),VSo=r(v8e," \u2014 "),RG=n(v8e,"A",{href:!0});var Zdt=s(RG);XSo=r(Zdt,"PerceiverForSequenceClassification"),Zdt.forEach(t),zSo=r(v8e," (Perceiver model)"),v8e.forEach(t),WSo=i(j),bb=n(j,"LI",{});var F8e=s(bb);ime=n(F8e,"STRONG",{});var ect=s(ime);QSo=r(ect,"plbart"),ect.forEach(t),HSo=r(F8e," \u2014 "),PG=n(F8e,"A",{href:!0});var oct=s(PG);USo=r(oct,"PLBartForSequenceClassification"),oct.forEach(t),JSo=r(F8e," (PLBart model)"),F8e.forEach(t),YSo=i(j),vb=n(j,"LI",{});var T8e=s(vb);dme=n(T8e,"STRONG",{});var rct=s(dme);KSo=r(rct,"qdqbert"),rct.forEach(t),ZSo=r(T8e," \u2014 "),BG=n(T8e,"A",{href:!0});var tct=s(BG);eRo=r(tct,"QDQBertForSequenceClassification"),tct.forEach(t),oRo=r(T8e," (QDQBert model)"),T8e.forEach(t),rRo=i(j),Fb=n(j,"LI",{});var M8e=s(Fb);cme=n(M8e,"STRONG",{});var act=s(cme);tRo=r(act,"reformer"),act.forEach(t),aRo=r(M8e," \u2014 "),IG=n(M8e,"A",{href:!0});var nct=s(IG);nRo=r(nct,"ReformerForSequenceClassification"),nct.forEach(t),sRo=r(M8e," (Reformer model)"),M8e.forEach(t),lRo=i(j),Tb=n(j,"LI",{});var E8e=s(Tb);fme=n(E8e,"STRONG",{});var sct=s(fme);iRo=r(sct,"rembert"),sct.forEach(t),dRo=r(E8e," \u2014 "),qG=n(E8e,"A",{href:!0});var lct=s(qG);cRo=r(lct,"RemBertForSequenceClassification"),lct.forEach(t),fRo=r(E8e," (RemBERT model)"),E8e.forEach(t),mRo=i(j),Mb=n(j,"LI",{});var C8e=s(Mb);mme=n(C8e,"STRONG",{});var ict=s(mme);gRo=r(ict,"roberta"),ict.forEach(t),hRo=r(C8e," \u2014 "),NG=n(C8e,"A",{href:!0});var dct=s(NG);pRo=r(dct,"RobertaForSequenceClassification"),dct.forEach(t),uRo=r(C8e," (RoBERTa model)"),C8e.forEach(t),_Ro=i(j),Eb=n(j,"LI",{});var w8e=s(Eb);gme=n(w8e,"STRONG",{});var cct=s(gme);bRo=r(cct,"roformer"),cct.forEach(t),vRo=r(w8e," \u2014 "),jG=n(w8e,"A",{href:!0});var fct=s(jG);FRo=r(fct,"RoFormerForSequenceClassification"),fct.forEach(t),TRo=r(w8e," (RoFormer model)"),w8e.forEach(t),MRo=i(j),Cb=n(j,"LI",{});var A8e=s(Cb);hme=n(A8e,"STRONG",{});var mct=s(hme);ERo=r(mct,"squeezebert"),mct.forEach(t),CRo=r(A8e," \u2014 "),DG=n(A8e,"A",{href:!0});var gct=s(DG);wRo=r(gct,"SqueezeBertForSequenceClassification"),gct.forEach(t),ARo=r(A8e," (SqueezeBERT model)"),A8e.forEach(t),yRo=i(j),wb=n(j,"LI",{});var y8e=s(wb);pme=n(y8e,"STRONG",{});var hct=s(pme);LRo=r(hct,"tapas"),hct.forEach(t),xRo=r(y8e," \u2014 "),GG=n(y8e,"A",{href:!0});var pct=s(GG);$Ro=r(pct,"TapasForSequenceClassification"),pct.forEach(t),kRo=r(y8e," (TAPAS model)"),y8e.forEach(t),SRo=i(j),Ab=n(j,"LI",{});var L8e=s(Ab);ume=n(L8e,"STRONG",{});var uct=s(ume);RRo=r(uct,"transfo-xl"),uct.forEach(t),PRo=r(L8e," \u2014 "),OG=n(L8e,"A",{href:!0});var _ct=s(OG);BRo=r(_ct,"TransfoXLForSequenceClassification"),_ct.forEach(t),IRo=r(L8e," (Transformer-XL model)"),L8e.forEach(t),qRo=i(j),yb=n(j,"LI",{});var x8e=s(yb);_me=n(x8e,"STRONG",{});var bct=s(_me);NRo=r(bct,"xlm"),bct.forEach(t),jRo=r(x8e," \u2014 "),VG=n(x8e,"A",{href:!0});var vct=s(VG);DRo=r(vct,"XLMForSequenceClassification"),vct.forEach(t),GRo=r(x8e," (XLM model)"),x8e.forEach(t),ORo=i(j),Lb=n(j,"LI",{});var $8e=s(Lb);bme=n($8e,"STRONG",{});var Fct=s(bme);VRo=r(Fct,"xlm-roberta"),Fct.forEach(t),XRo=r($8e," \u2014 "),XG=n($8e,"A",{href:!0});var Tct=s(XG);zRo=r(Tct,"XLMRobertaForSequenceClassification"),Tct.forEach(t),WRo=r($8e," (XLM-RoBERTa model)"),$8e.forEach(t),QRo=i(j),xb=n(j,"LI",{});var k8e=s(xb);vme=n(k8e,"STRONG",{});var Mct=s(vme);HRo=r(Mct,"xlm-roberta-xl"),Mct.forEach(t),URo=r(k8e," \u2014 "),zG=n(k8e,"A",{href:!0});var Ect=s(zG);JRo=r(Ect,"XLMRobertaXLForSequenceClassification"),Ect.forEach(t),YRo=r(k8e," (XLM-RoBERTa-XL model)"),k8e.forEach(t),KRo=i(j),$b=n(j,"LI",{});var S8e=s($b);Fme=n(S8e,"STRONG",{});var Cct=s(Fme);ZRo=r(Cct,"xlnet"),Cct.forEach(t),ePo=r(S8e," \u2014 "),WG=n(S8e,"A",{href:!0});var wct=s(WG);oPo=r(wct,"XLNetForSequenceClassification"),wct.forEach(t),rPo=r(S8e," (XLNet model)"),S8e.forEach(t),tPo=i(j),kb=n(j,"LI",{});var R8e=s(kb);Tme=n(R8e,"STRONG",{});var Act=s(Tme);aPo=r(Act,"yoso"),Act.forEach(t),nPo=r(R8e," \u2014 "),QG=n(R8e,"A",{href:!0});var yct=s(QG);sPo=r(yct,"YosoForSequenceClassification"),yct.forEach(t),lPo=r(R8e," (YOSO model)"),R8e.forEach(t),j.forEach(t),iPo=i(sa),Sb=n(sa,"P",{});var P8e=s(Sb);dPo=r(P8e,"The model is set in evaluation mode by default using "),Mme=n(P8e,"CODE",{});var Lct=s(Mme);cPo=r(Lct,"model.eval()"),Lct.forEach(t),fPo=r(P8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eme=n(P8e,"CODE",{});var xct=s(Eme);mPo=r(xct,"model.train()"),xct.forEach(t),P8e.forEach(t),gPo=i(sa),T(Rb.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),lNe=i(f),Vi=n(f,"H2",{class:!0});var fDe=s(Vi);Pb=n(fDe,"A",{id:!0,class:!0,href:!0});var $ct=s(Pb);Cme=n($ct,"SPAN",{});var kct=s(Cme);T(w6.$$.fragment,kct),kct.forEach(t),$ct.forEach(t),hPo=i(fDe),wme=n(fDe,"SPAN",{});var Sct=s(wme);pPo=r(Sct,"AutoModelForMultipleChoice"),Sct.forEach(t),fDe.forEach(t),iNe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(A6.$$.fragment,Qs),uPo=i(Qs),Xi=n(Qs,"P",{});var vZ=s(Xi);_Po=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HG=n(vZ,"A",{href:!0});var Rct=s(HG);bPo=r(Rct,"from_pretrained()"),Rct.forEach(t),vPo=r(vZ," class method or the "),UG=n(vZ,"A",{href:!0});var Pct=s(UG);FPo=r(Pct,"from_config()"),Pct.forEach(t),TPo=r(vZ,` class
method.`),vZ.forEach(t),MPo=i(Qs),y6=n(Qs,"P",{});var mDe=s(y6);EPo=r(mDe,"This class cannot be instantiated directly using "),Ame=n(mDe,"CODE",{});var Bct=s(Ame);CPo=r(Bct,"__init__()"),Bct.forEach(t),wPo=r(mDe," (throws an error)."),mDe.forEach(t),APo=i(Qs),dt=n(Qs,"DIV",{class:!0});var jw=s(dt);T(L6.$$.fragment,jw),yPo=i(jw),yme=n(jw,"P",{});var Ict=s(yme);LPo=r(Ict,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ict.forEach(t),xPo=i(jw),zi=n(jw,"P",{});var FZ=s(zi);$Po=r(FZ,`Note:
Loading a model from its configuration file does `),Lme=n(FZ,"STRONG",{});var qct=s(Lme);kPo=r(qct,"not"),qct.forEach(t),SPo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(FZ,"A",{href:!0});var Nct=s(JG);RPo=r(Nct,"from_pretrained()"),Nct.forEach(t),PPo=r(FZ," to load the model weights."),FZ.forEach(t),BPo=i(jw),T(Bb.$$.fragment,jw),jw.forEach(t),IPo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(x6.$$.fragment,la),qPo=i(la),xme=n(la,"P",{});var jct=s(xme);NPo=r(jct,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jct.forEach(t),jPo=i(la),Pa=n(la,"P",{});var Dw=s(Pa);DPo=r(Dw,"The model class to instantiate is selected based on the "),$me=n(Dw,"CODE",{});var Dct=s($me);GPo=r(Dct,"model_type"),Dct.forEach(t),OPo=r(Dw,` property of the config object (either
passed as an argument or loaded from `),kme=n(Dw,"CODE",{});var Gct=s(kme);VPo=r(Gct,"pretrained_model_name_or_path"),Gct.forEach(t),XPo=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sme=n(Dw,"CODE",{});var Oct=s(Sme);zPo=r(Oct,"pretrained_model_name_or_path"),Oct.forEach(t),WPo=r(Dw,":"),Dw.forEach(t),QPo=i(la),K=n(la,"UL",{});var ee=s(K);Ib=n(ee,"LI",{});var B8e=s(Ib);Rme=n(B8e,"STRONG",{});var Vct=s(Rme);HPo=r(Vct,"albert"),Vct.forEach(t),UPo=r(B8e," \u2014 "),YG=n(B8e,"A",{href:!0});var Xct=s(YG);JPo=r(Xct,"AlbertForMultipleChoice"),Xct.forEach(t),YPo=r(B8e," (ALBERT model)"),B8e.forEach(t),KPo=i(ee),qb=n(ee,"LI",{});var I8e=s(qb);Pme=n(I8e,"STRONG",{});var zct=s(Pme);ZPo=r(zct,"bert"),zct.forEach(t),eBo=r(I8e," \u2014 "),KG=n(I8e,"A",{href:!0});var Wct=s(KG);oBo=r(Wct,"BertForMultipleChoice"),Wct.forEach(t),rBo=r(I8e," (BERT model)"),I8e.forEach(t),tBo=i(ee),Nb=n(ee,"LI",{});var q8e=s(Nb);Bme=n(q8e,"STRONG",{});var Qct=s(Bme);aBo=r(Qct,"big_bird"),Qct.forEach(t),nBo=r(q8e," \u2014 "),ZG=n(q8e,"A",{href:!0});var Hct=s(ZG);sBo=r(Hct,"BigBirdForMultipleChoice"),Hct.forEach(t),lBo=r(q8e," (BigBird model)"),q8e.forEach(t),iBo=i(ee),jb=n(ee,"LI",{});var N8e=s(jb);Ime=n(N8e,"STRONG",{});var Uct=s(Ime);dBo=r(Uct,"camembert"),Uct.forEach(t),cBo=r(N8e," \u2014 "),eO=n(N8e,"A",{href:!0});var Jct=s(eO);fBo=r(Jct,"CamembertForMultipleChoice"),Jct.forEach(t),mBo=r(N8e," (CamemBERT model)"),N8e.forEach(t),gBo=i(ee),Db=n(ee,"LI",{});var j8e=s(Db);qme=n(j8e,"STRONG",{});var Yct=s(qme);hBo=r(Yct,"canine"),Yct.forEach(t),pBo=r(j8e," \u2014 "),oO=n(j8e,"A",{href:!0});var Kct=s(oO);uBo=r(Kct,"CanineForMultipleChoice"),Kct.forEach(t),_Bo=r(j8e," (Canine model)"),j8e.forEach(t),bBo=i(ee),Gb=n(ee,"LI",{});var D8e=s(Gb);Nme=n(D8e,"STRONG",{});var Zct=s(Nme);vBo=r(Zct,"convbert"),Zct.forEach(t),FBo=r(D8e," \u2014 "),rO=n(D8e,"A",{href:!0});var eft=s(rO);TBo=r(eft,"ConvBertForMultipleChoice"),eft.forEach(t),MBo=r(D8e," (ConvBERT model)"),D8e.forEach(t),EBo=i(ee),Ob=n(ee,"LI",{});var G8e=s(Ob);jme=n(G8e,"STRONG",{});var oft=s(jme);CBo=r(oft,"data2vec-text"),oft.forEach(t),wBo=r(G8e," \u2014 "),tO=n(G8e,"A",{href:!0});var rft=s(tO);ABo=r(rft,"Data2VecTextForMultipleChoice"),rft.forEach(t),yBo=r(G8e," (Data2VecText model)"),G8e.forEach(t),LBo=i(ee),Vb=n(ee,"LI",{});var O8e=s(Vb);Dme=n(O8e,"STRONG",{});var tft=s(Dme);xBo=r(tft,"deberta-v2"),tft.forEach(t),$Bo=r(O8e," \u2014 "),aO=n(O8e,"A",{href:!0});var aft=s(aO);kBo=r(aft,"DebertaV2ForMultipleChoice"),aft.forEach(t),SBo=r(O8e," (DeBERTa-v2 model)"),O8e.forEach(t),RBo=i(ee),Xb=n(ee,"LI",{});var V8e=s(Xb);Gme=n(V8e,"STRONG",{});var nft=s(Gme);PBo=r(nft,"distilbert"),nft.forEach(t),BBo=r(V8e," \u2014 "),nO=n(V8e,"A",{href:!0});var sft=s(nO);IBo=r(sft,"DistilBertForMultipleChoice"),sft.forEach(t),qBo=r(V8e," (DistilBERT model)"),V8e.forEach(t),NBo=i(ee),zb=n(ee,"LI",{});var X8e=s(zb);Ome=n(X8e,"STRONG",{});var lft=s(Ome);jBo=r(lft,"electra"),lft.forEach(t),DBo=r(X8e," \u2014 "),sO=n(X8e,"A",{href:!0});var ift=s(sO);GBo=r(ift,"ElectraForMultipleChoice"),ift.forEach(t),OBo=r(X8e," (ELECTRA model)"),X8e.forEach(t),VBo=i(ee),Wb=n(ee,"LI",{});var z8e=s(Wb);Vme=n(z8e,"STRONG",{});var dft=s(Vme);XBo=r(dft,"flaubert"),dft.forEach(t),zBo=r(z8e," \u2014 "),lO=n(z8e,"A",{href:!0});var cft=s(lO);WBo=r(cft,"FlaubertForMultipleChoice"),cft.forEach(t),QBo=r(z8e," (FlauBERT model)"),z8e.forEach(t),HBo=i(ee),Qb=n(ee,"LI",{});var W8e=s(Qb);Xme=n(W8e,"STRONG",{});var fft=s(Xme);UBo=r(fft,"fnet"),fft.forEach(t),JBo=r(W8e," \u2014 "),iO=n(W8e,"A",{href:!0});var mft=s(iO);YBo=r(mft,"FNetForMultipleChoice"),mft.forEach(t),KBo=r(W8e," (FNet model)"),W8e.forEach(t),ZBo=i(ee),Hb=n(ee,"LI",{});var Q8e=s(Hb);zme=n(Q8e,"STRONG",{});var gft=s(zme);eIo=r(gft,"funnel"),gft.forEach(t),oIo=r(Q8e," \u2014 "),dO=n(Q8e,"A",{href:!0});var hft=s(dO);rIo=r(hft,"FunnelForMultipleChoice"),hft.forEach(t),tIo=r(Q8e," (Funnel Transformer model)"),Q8e.forEach(t),aIo=i(ee),Ub=n(ee,"LI",{});var H8e=s(Ub);Wme=n(H8e,"STRONG",{});var pft=s(Wme);nIo=r(pft,"ibert"),pft.forEach(t),sIo=r(H8e," \u2014 "),cO=n(H8e,"A",{href:!0});var uft=s(cO);lIo=r(uft,"IBertForMultipleChoice"),uft.forEach(t),iIo=r(H8e," (I-BERT model)"),H8e.forEach(t),dIo=i(ee),Jb=n(ee,"LI",{});var U8e=s(Jb);Qme=n(U8e,"STRONG",{});var _ft=s(Qme);cIo=r(_ft,"longformer"),_ft.forEach(t),fIo=r(U8e," \u2014 "),fO=n(U8e,"A",{href:!0});var bft=s(fO);mIo=r(bft,"LongformerForMultipleChoice"),bft.forEach(t),gIo=r(U8e," (Longformer model)"),U8e.forEach(t),hIo=i(ee),Yb=n(ee,"LI",{});var J8e=s(Yb);Hme=n(J8e,"STRONG",{});var vft=s(Hme);pIo=r(vft,"megatron-bert"),vft.forEach(t),uIo=r(J8e," \u2014 "),mO=n(J8e,"A",{href:!0});var Fft=s(mO);_Io=r(Fft,"MegatronBertForMultipleChoice"),Fft.forEach(t),bIo=r(J8e," (MegatronBert model)"),J8e.forEach(t),vIo=i(ee),Kb=n(ee,"LI",{});var Y8e=s(Kb);Ume=n(Y8e,"STRONG",{});var Tft=s(Ume);FIo=r(Tft,"mobilebert"),Tft.forEach(t),TIo=r(Y8e," \u2014 "),gO=n(Y8e,"A",{href:!0});var Mft=s(gO);MIo=r(Mft,"MobileBertForMultipleChoice"),Mft.forEach(t),EIo=r(Y8e," (MobileBERT model)"),Y8e.forEach(t),CIo=i(ee),Zb=n(ee,"LI",{});var K8e=s(Zb);Jme=n(K8e,"STRONG",{});var Eft=s(Jme);wIo=r(Eft,"mpnet"),Eft.forEach(t),AIo=r(K8e," \u2014 "),hO=n(K8e,"A",{href:!0});var Cft=s(hO);yIo=r(Cft,"MPNetForMultipleChoice"),Cft.forEach(t),LIo=r(K8e," (MPNet model)"),K8e.forEach(t),xIo=i(ee),e2=n(ee,"LI",{});var Z8e=s(e2);Yme=n(Z8e,"STRONG",{});var wft=s(Yme);$Io=r(wft,"nystromformer"),wft.forEach(t),kIo=r(Z8e," \u2014 "),pO=n(Z8e,"A",{href:!0});var Aft=s(pO);SIo=r(Aft,"NystromformerForMultipleChoice"),Aft.forEach(t),RIo=r(Z8e," (Nystromformer model)"),Z8e.forEach(t),PIo=i(ee),o2=n(ee,"LI",{});var exe=s(o2);Kme=n(exe,"STRONG",{});var yft=s(Kme);BIo=r(yft,"qdqbert"),yft.forEach(t),IIo=r(exe," \u2014 "),uO=n(exe,"A",{href:!0});var Lft=s(uO);qIo=r(Lft,"QDQBertForMultipleChoice"),Lft.forEach(t),NIo=r(exe," (QDQBert model)"),exe.forEach(t),jIo=i(ee),r2=n(ee,"LI",{});var oxe=s(r2);Zme=n(oxe,"STRONG",{});var xft=s(Zme);DIo=r(xft,"rembert"),xft.forEach(t),GIo=r(oxe," \u2014 "),_O=n(oxe,"A",{href:!0});var $ft=s(_O);OIo=r($ft,"RemBertForMultipleChoice"),$ft.forEach(t),VIo=r(oxe," (RemBERT model)"),oxe.forEach(t),XIo=i(ee),t2=n(ee,"LI",{});var rxe=s(t2);ege=n(rxe,"STRONG",{});var kft=s(ege);zIo=r(kft,"roberta"),kft.forEach(t),WIo=r(rxe," \u2014 "),bO=n(rxe,"A",{href:!0});var Sft=s(bO);QIo=r(Sft,"RobertaForMultipleChoice"),Sft.forEach(t),HIo=r(rxe," (RoBERTa model)"),rxe.forEach(t),UIo=i(ee),a2=n(ee,"LI",{});var txe=s(a2);oge=n(txe,"STRONG",{});var Rft=s(oge);JIo=r(Rft,"roformer"),Rft.forEach(t),YIo=r(txe," \u2014 "),vO=n(txe,"A",{href:!0});var Pft=s(vO);KIo=r(Pft,"RoFormerForMultipleChoice"),Pft.forEach(t),ZIo=r(txe," (RoFormer model)"),txe.forEach(t),eqo=i(ee),n2=n(ee,"LI",{});var axe=s(n2);rge=n(axe,"STRONG",{});var Bft=s(rge);oqo=r(Bft,"squeezebert"),Bft.forEach(t),rqo=r(axe," \u2014 "),FO=n(axe,"A",{href:!0});var Ift=s(FO);tqo=r(Ift,"SqueezeBertForMultipleChoice"),Ift.forEach(t),aqo=r(axe," (SqueezeBERT model)"),axe.forEach(t),nqo=i(ee),s2=n(ee,"LI",{});var nxe=s(s2);tge=n(nxe,"STRONG",{});var qft=s(tge);sqo=r(qft,"xlm"),qft.forEach(t),lqo=r(nxe," \u2014 "),TO=n(nxe,"A",{href:!0});var Nft=s(TO);iqo=r(Nft,"XLMForMultipleChoice"),Nft.forEach(t),dqo=r(nxe," (XLM model)"),nxe.forEach(t),cqo=i(ee),l2=n(ee,"LI",{});var sxe=s(l2);age=n(sxe,"STRONG",{});var jft=s(age);fqo=r(jft,"xlm-roberta"),jft.forEach(t),mqo=r(sxe," \u2014 "),MO=n(sxe,"A",{href:!0});var Dft=s(MO);gqo=r(Dft,"XLMRobertaForMultipleChoice"),Dft.forEach(t),hqo=r(sxe," (XLM-RoBERTa model)"),sxe.forEach(t),pqo=i(ee),i2=n(ee,"LI",{});var lxe=s(i2);nge=n(lxe,"STRONG",{});var Gft=s(nge);uqo=r(Gft,"xlm-roberta-xl"),Gft.forEach(t),_qo=r(lxe," \u2014 "),EO=n(lxe,"A",{href:!0});var Oft=s(EO);bqo=r(Oft,"XLMRobertaXLForMultipleChoice"),Oft.forEach(t),vqo=r(lxe," (XLM-RoBERTa-XL model)"),lxe.forEach(t),Fqo=i(ee),d2=n(ee,"LI",{});var ixe=s(d2);sge=n(ixe,"STRONG",{});var Vft=s(sge);Tqo=r(Vft,"xlnet"),Vft.forEach(t),Mqo=r(ixe," \u2014 "),CO=n(ixe,"A",{href:!0});var Xft=s(CO);Eqo=r(Xft,"XLNetForMultipleChoice"),Xft.forEach(t),Cqo=r(ixe," (XLNet model)"),ixe.forEach(t),wqo=i(ee),c2=n(ee,"LI",{});var dxe=s(c2);lge=n(dxe,"STRONG",{});var zft=s(lge);Aqo=r(zft,"yoso"),zft.forEach(t),yqo=r(dxe," \u2014 "),wO=n(dxe,"A",{href:!0});var Wft=s(wO);Lqo=r(Wft,"YosoForMultipleChoice"),Wft.forEach(t),xqo=r(dxe," (YOSO model)"),dxe.forEach(t),ee.forEach(t),$qo=i(la),f2=n(la,"P",{});var cxe=s(f2);kqo=r(cxe,"The model is set in evaluation mode by default using "),ige=n(cxe,"CODE",{});var Qft=s(ige);Sqo=r(Qft,"model.eval()"),Qft.forEach(t),Rqo=r(cxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=n(cxe,"CODE",{});var Hft=s(dge);Pqo=r(Hft,"model.train()"),Hft.forEach(t),cxe.forEach(t),Bqo=i(la),T(m2.$$.fragment,la),la.forEach(t),Qs.forEach(t),dNe=i(f),Wi=n(f,"H2",{class:!0});var gDe=s(Wi);g2=n(gDe,"A",{id:!0,class:!0,href:!0});var Uft=s(g2);cge=n(Uft,"SPAN",{});var Jft=s(cge);T($6.$$.fragment,Jft),Jft.forEach(t),Uft.forEach(t),Iqo=i(gDe),fge=n(gDe,"SPAN",{});var Yft=s(fge);qqo=r(Yft,"AutoModelForNextSentencePrediction"),Yft.forEach(t),gDe.forEach(t),cNe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(k6.$$.fragment,Hs),Nqo=i(Hs),Qi=n(Hs,"P",{});var TZ=s(Qi);jqo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),AO=n(TZ,"A",{href:!0});var Kft=s(AO);Dqo=r(Kft,"from_pretrained()"),Kft.forEach(t),Gqo=r(TZ," class method or the "),yO=n(TZ,"A",{href:!0});var Zft=s(yO);Oqo=r(Zft,"from_config()"),Zft.forEach(t),Vqo=r(TZ,` class
method.`),TZ.forEach(t),Xqo=i(Hs),S6=n(Hs,"P",{});var hDe=s(S6);zqo=r(hDe,"This class cannot be instantiated directly using "),mge=n(hDe,"CODE",{});var emt=s(mge);Wqo=r(emt,"__init__()"),emt.forEach(t),Qqo=r(hDe," (throws an error)."),hDe.forEach(t),Hqo=i(Hs),ct=n(Hs,"DIV",{class:!0});var Gw=s(ct);T(R6.$$.fragment,Gw),Uqo=i(Gw),gge=n(Gw,"P",{});var omt=s(gge);Jqo=r(omt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),omt.forEach(t),Yqo=i(Gw),Hi=n(Gw,"P",{});var MZ=s(Hi);Kqo=r(MZ,`Note:
Loading a model from its configuration file does `),hge=n(MZ,"STRONG",{});var rmt=s(hge);Zqo=r(rmt,"not"),rmt.forEach(t),eNo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LO=n(MZ,"A",{href:!0});var tmt=s(LO);oNo=r(tmt,"from_pretrained()"),tmt.forEach(t),rNo=r(MZ," to load the model weights."),MZ.forEach(t),tNo=i(Gw),T(h2.$$.fragment,Gw),Gw.forEach(t),aNo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(P6.$$.fragment,ia),nNo=i(ia),pge=n(ia,"P",{});var amt=s(pge);sNo=r(amt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),amt.forEach(t),lNo=i(ia),Ba=n(ia,"P",{});var Ow=s(Ba);iNo=r(Ow,"The model class to instantiate is selected based on the "),uge=n(Ow,"CODE",{});var nmt=s(uge);dNo=r(nmt,"model_type"),nmt.forEach(t),cNo=r(Ow,` property of the config object (either
passed as an argument or loaded from `),_ge=n(Ow,"CODE",{});var smt=s(_ge);fNo=r(smt,"pretrained_model_name_or_path"),smt.forEach(t),mNo=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=n(Ow,"CODE",{});var lmt=s(bge);gNo=r(lmt,"pretrained_model_name_or_path"),lmt.forEach(t),hNo=r(Ow,":"),Ow.forEach(t),pNo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);p2=n(Us,"LI",{});var fxe=s(p2);vge=n(fxe,"STRONG",{});var imt=s(vge);uNo=r(imt,"bert"),imt.forEach(t),_No=r(fxe," \u2014 "),xO=n(fxe,"A",{href:!0});var dmt=s(xO);bNo=r(dmt,"BertForNextSentencePrediction"),dmt.forEach(t),vNo=r(fxe," (BERT model)"),fxe.forEach(t),FNo=i(Us),u2=n(Us,"LI",{});var mxe=s(u2);Fge=n(mxe,"STRONG",{});var cmt=s(Fge);TNo=r(cmt,"fnet"),cmt.forEach(t),MNo=r(mxe," \u2014 "),$O=n(mxe,"A",{href:!0});var fmt=s($O);ENo=r(fmt,"FNetForNextSentencePrediction"),fmt.forEach(t),CNo=r(mxe," (FNet model)"),mxe.forEach(t),wNo=i(Us),_2=n(Us,"LI",{});var gxe=s(_2);Tge=n(gxe,"STRONG",{});var mmt=s(Tge);ANo=r(mmt,"megatron-bert"),mmt.forEach(t),yNo=r(gxe," \u2014 "),kO=n(gxe,"A",{href:!0});var gmt=s(kO);LNo=r(gmt,"MegatronBertForNextSentencePrediction"),gmt.forEach(t),xNo=r(gxe," (MegatronBert model)"),gxe.forEach(t),$No=i(Us),b2=n(Us,"LI",{});var hxe=s(b2);Mge=n(hxe,"STRONG",{});var hmt=s(Mge);kNo=r(hmt,"mobilebert"),hmt.forEach(t),SNo=r(hxe," \u2014 "),SO=n(hxe,"A",{href:!0});var pmt=s(SO);RNo=r(pmt,"MobileBertForNextSentencePrediction"),pmt.forEach(t),PNo=r(hxe," (MobileBERT model)"),hxe.forEach(t),BNo=i(Us),v2=n(Us,"LI",{});var pxe=s(v2);Ege=n(pxe,"STRONG",{});var umt=s(Ege);INo=r(umt,"qdqbert"),umt.forEach(t),qNo=r(pxe," \u2014 "),RO=n(pxe,"A",{href:!0});var _mt=s(RO);NNo=r(_mt,"QDQBertForNextSentencePrediction"),_mt.forEach(t),jNo=r(pxe," (QDQBert model)"),pxe.forEach(t),Us.forEach(t),DNo=i(ia),F2=n(ia,"P",{});var uxe=s(F2);GNo=r(uxe,"The model is set in evaluation mode by default using "),Cge=n(uxe,"CODE",{});var bmt=s(Cge);ONo=r(bmt,"model.eval()"),bmt.forEach(t),VNo=r(uxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=n(uxe,"CODE",{});var vmt=s(wge);XNo=r(vmt,"model.train()"),vmt.forEach(t),uxe.forEach(t),zNo=i(ia),T(T2.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),fNe=i(f),Ui=n(f,"H2",{class:!0});var pDe=s(Ui);M2=n(pDe,"A",{id:!0,class:!0,href:!0});var Fmt=s(M2);Age=n(Fmt,"SPAN",{});var Tmt=s(Age);T(B6.$$.fragment,Tmt),Tmt.forEach(t),Fmt.forEach(t),WNo=i(pDe),yge=n(pDe,"SPAN",{});var Mmt=s(yge);QNo=r(Mmt,"AutoModelForTokenClassification"),Mmt.forEach(t),pDe.forEach(t),mNe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(I6.$$.fragment,Js),HNo=i(Js),Ji=n(Js,"P",{});var EZ=s(Ji);UNo=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),PO=n(EZ,"A",{href:!0});var Emt=s(PO);JNo=r(Emt,"from_pretrained()"),Emt.forEach(t),YNo=r(EZ," class method or the "),BO=n(EZ,"A",{href:!0});var Cmt=s(BO);KNo=r(Cmt,"from_config()"),Cmt.forEach(t),ZNo=r(EZ,` class
method.`),EZ.forEach(t),ejo=i(Js),q6=n(Js,"P",{});var uDe=s(q6);ojo=r(uDe,"This class cannot be instantiated directly using "),Lge=n(uDe,"CODE",{});var wmt=s(Lge);rjo=r(wmt,"__init__()"),wmt.forEach(t),tjo=r(uDe," (throws an error)."),uDe.forEach(t),ajo=i(Js),ft=n(Js,"DIV",{class:!0});var Vw=s(ft);T(N6.$$.fragment,Vw),njo=i(Vw),xge=n(Vw,"P",{});var Amt=s(xge);sjo=r(Amt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Amt.forEach(t),ljo=i(Vw),Yi=n(Vw,"P",{});var CZ=s(Yi);ijo=r(CZ,`Note:
Loading a model from its configuration file does `),$ge=n(CZ,"STRONG",{});var ymt=s($ge);djo=r(ymt,"not"),ymt.forEach(t),cjo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=n(CZ,"A",{href:!0});var Lmt=s(IO);fjo=r(Lmt,"from_pretrained()"),Lmt.forEach(t),mjo=r(CZ," to load the model weights."),CZ.forEach(t),gjo=i(Vw),T(E2.$$.fragment,Vw),Vw.forEach(t),hjo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(j6.$$.fragment,da),pjo=i(da),kge=n(da,"P",{});var xmt=s(kge);ujo=r(xmt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xmt.forEach(t),_jo=i(da),Ia=n(da,"P",{});var Xw=s(Ia);bjo=r(Xw,"The model class to instantiate is selected based on the "),Sge=n(Xw,"CODE",{});var $mt=s(Sge);vjo=r($mt,"model_type"),$mt.forEach(t),Fjo=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Rge=n(Xw,"CODE",{});var kmt=s(Rge);Tjo=r(kmt,"pretrained_model_name_or_path"),kmt.forEach(t),Mjo=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=n(Xw,"CODE",{});var Smt=s(Pge);Ejo=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),Cjo=r(Xw,":"),Xw.forEach(t),wjo=i(da),H=n(da,"UL",{});var J=s(H);C2=n(J,"LI",{});var _xe=s(C2);Bge=n(_xe,"STRONG",{});var Rmt=s(Bge);Ajo=r(Rmt,"albert"),Rmt.forEach(t),yjo=r(_xe," \u2014 "),qO=n(_xe,"A",{href:!0});var Pmt=s(qO);Ljo=r(Pmt,"AlbertForTokenClassification"),Pmt.forEach(t),xjo=r(_xe," (ALBERT model)"),_xe.forEach(t),$jo=i(J),w2=n(J,"LI",{});var bxe=s(w2);Ige=n(bxe,"STRONG",{});var Bmt=s(Ige);kjo=r(Bmt,"bert"),Bmt.forEach(t),Sjo=r(bxe," \u2014 "),NO=n(bxe,"A",{href:!0});var Imt=s(NO);Rjo=r(Imt,"BertForTokenClassification"),Imt.forEach(t),Pjo=r(bxe," (BERT model)"),bxe.forEach(t),Bjo=i(J),A2=n(J,"LI",{});var vxe=s(A2);qge=n(vxe,"STRONG",{});var qmt=s(qge);Ijo=r(qmt,"big_bird"),qmt.forEach(t),qjo=r(vxe," \u2014 "),jO=n(vxe,"A",{href:!0});var Nmt=s(jO);Njo=r(Nmt,"BigBirdForTokenClassification"),Nmt.forEach(t),jjo=r(vxe," (BigBird model)"),vxe.forEach(t),Djo=i(J),y2=n(J,"LI",{});var Fxe=s(y2);Nge=n(Fxe,"STRONG",{});var jmt=s(Nge);Gjo=r(jmt,"camembert"),jmt.forEach(t),Ojo=r(Fxe," \u2014 "),DO=n(Fxe,"A",{href:!0});var Dmt=s(DO);Vjo=r(Dmt,"CamembertForTokenClassification"),Dmt.forEach(t),Xjo=r(Fxe," (CamemBERT model)"),Fxe.forEach(t),zjo=i(J),L2=n(J,"LI",{});var Txe=s(L2);jge=n(Txe,"STRONG",{});var Gmt=s(jge);Wjo=r(Gmt,"canine"),Gmt.forEach(t),Qjo=r(Txe," \u2014 "),GO=n(Txe,"A",{href:!0});var Omt=s(GO);Hjo=r(Omt,"CanineForTokenClassification"),Omt.forEach(t),Ujo=r(Txe," (Canine model)"),Txe.forEach(t),Jjo=i(J),x2=n(J,"LI",{});var Mxe=s(x2);Dge=n(Mxe,"STRONG",{});var Vmt=s(Dge);Yjo=r(Vmt,"convbert"),Vmt.forEach(t),Kjo=r(Mxe," \u2014 "),OO=n(Mxe,"A",{href:!0});var Xmt=s(OO);Zjo=r(Xmt,"ConvBertForTokenClassification"),Xmt.forEach(t),eDo=r(Mxe," (ConvBERT model)"),Mxe.forEach(t),oDo=i(J),$2=n(J,"LI",{});var Exe=s($2);Gge=n(Exe,"STRONG",{});var zmt=s(Gge);rDo=r(zmt,"data2vec-text"),zmt.forEach(t),tDo=r(Exe," \u2014 "),VO=n(Exe,"A",{href:!0});var Wmt=s(VO);aDo=r(Wmt,"Data2VecTextForTokenClassification"),Wmt.forEach(t),nDo=r(Exe," (Data2VecText model)"),Exe.forEach(t),sDo=i(J),k2=n(J,"LI",{});var Cxe=s(k2);Oge=n(Cxe,"STRONG",{});var Qmt=s(Oge);lDo=r(Qmt,"deberta"),Qmt.forEach(t),iDo=r(Cxe," \u2014 "),XO=n(Cxe,"A",{href:!0});var Hmt=s(XO);dDo=r(Hmt,"DebertaForTokenClassification"),Hmt.forEach(t),cDo=r(Cxe," (DeBERTa model)"),Cxe.forEach(t),fDo=i(J),S2=n(J,"LI",{});var wxe=s(S2);Vge=n(wxe,"STRONG",{});var Umt=s(Vge);mDo=r(Umt,"deberta-v2"),Umt.forEach(t),gDo=r(wxe," \u2014 "),zO=n(wxe,"A",{href:!0});var Jmt=s(zO);hDo=r(Jmt,"DebertaV2ForTokenClassification"),Jmt.forEach(t),pDo=r(wxe," (DeBERTa-v2 model)"),wxe.forEach(t),uDo=i(J),R2=n(J,"LI",{});var Axe=s(R2);Xge=n(Axe,"STRONG",{});var Ymt=s(Xge);_Do=r(Ymt,"distilbert"),Ymt.forEach(t),bDo=r(Axe," \u2014 "),WO=n(Axe,"A",{href:!0});var Kmt=s(WO);vDo=r(Kmt,"DistilBertForTokenClassification"),Kmt.forEach(t),FDo=r(Axe," (DistilBERT model)"),Axe.forEach(t),TDo=i(J),P2=n(J,"LI",{});var yxe=s(P2);zge=n(yxe,"STRONG",{});var Zmt=s(zge);MDo=r(Zmt,"electra"),Zmt.forEach(t),EDo=r(yxe," \u2014 "),QO=n(yxe,"A",{href:!0});var egt=s(QO);CDo=r(egt,"ElectraForTokenClassification"),egt.forEach(t),wDo=r(yxe," (ELECTRA model)"),yxe.forEach(t),ADo=i(J),B2=n(J,"LI",{});var Lxe=s(B2);Wge=n(Lxe,"STRONG",{});var ogt=s(Wge);yDo=r(ogt,"flaubert"),ogt.forEach(t),LDo=r(Lxe," \u2014 "),HO=n(Lxe,"A",{href:!0});var rgt=s(HO);xDo=r(rgt,"FlaubertForTokenClassification"),rgt.forEach(t),$Do=r(Lxe," (FlauBERT model)"),Lxe.forEach(t),kDo=i(J),I2=n(J,"LI",{});var xxe=s(I2);Qge=n(xxe,"STRONG",{});var tgt=s(Qge);SDo=r(tgt,"fnet"),tgt.forEach(t),RDo=r(xxe," \u2014 "),UO=n(xxe,"A",{href:!0});var agt=s(UO);PDo=r(agt,"FNetForTokenClassification"),agt.forEach(t),BDo=r(xxe," (FNet model)"),xxe.forEach(t),IDo=i(J),q2=n(J,"LI",{});var $xe=s(q2);Hge=n($xe,"STRONG",{});var ngt=s(Hge);qDo=r(ngt,"funnel"),ngt.forEach(t),NDo=r($xe," \u2014 "),JO=n($xe,"A",{href:!0});var sgt=s(JO);jDo=r(sgt,"FunnelForTokenClassification"),sgt.forEach(t),DDo=r($xe," (Funnel Transformer model)"),$xe.forEach(t),GDo=i(J),N2=n(J,"LI",{});var kxe=s(N2);Uge=n(kxe,"STRONG",{});var lgt=s(Uge);ODo=r(lgt,"gpt2"),lgt.forEach(t),VDo=r(kxe," \u2014 "),YO=n(kxe,"A",{href:!0});var igt=s(YO);XDo=r(igt,"GPT2ForTokenClassification"),igt.forEach(t),zDo=r(kxe," (OpenAI GPT-2 model)"),kxe.forEach(t),WDo=i(J),j2=n(J,"LI",{});var Sxe=s(j2);Jge=n(Sxe,"STRONG",{});var dgt=s(Jge);QDo=r(dgt,"ibert"),dgt.forEach(t),HDo=r(Sxe," \u2014 "),KO=n(Sxe,"A",{href:!0});var cgt=s(KO);UDo=r(cgt,"IBertForTokenClassification"),cgt.forEach(t),JDo=r(Sxe," (I-BERT model)"),Sxe.forEach(t),YDo=i(J),D2=n(J,"LI",{});var Rxe=s(D2);Yge=n(Rxe,"STRONG",{});var fgt=s(Yge);KDo=r(fgt,"layoutlm"),fgt.forEach(t),ZDo=r(Rxe," \u2014 "),ZO=n(Rxe,"A",{href:!0});var mgt=s(ZO);eGo=r(mgt,"LayoutLMForTokenClassification"),mgt.forEach(t),oGo=r(Rxe," (LayoutLM model)"),Rxe.forEach(t),rGo=i(J),G2=n(J,"LI",{});var Pxe=s(G2);Kge=n(Pxe,"STRONG",{});var ggt=s(Kge);tGo=r(ggt,"layoutlmv2"),ggt.forEach(t),aGo=r(Pxe," \u2014 "),eV=n(Pxe,"A",{href:!0});var hgt=s(eV);nGo=r(hgt,"LayoutLMv2ForTokenClassification"),hgt.forEach(t),sGo=r(Pxe," (LayoutLMv2 model)"),Pxe.forEach(t),lGo=i(J),O2=n(J,"LI",{});var Bxe=s(O2);Zge=n(Bxe,"STRONG",{});var pgt=s(Zge);iGo=r(pgt,"layoutlmv3"),pgt.forEach(t),dGo=r(Bxe," \u2014 "),oV=n(Bxe,"A",{href:!0});var ugt=s(oV);cGo=r(ugt,"LayoutLMv3ForTokenClassification"),ugt.forEach(t),fGo=r(Bxe," (LayoutLMv3 model)"),Bxe.forEach(t),mGo=i(J),V2=n(J,"LI",{});var Ixe=s(V2);ehe=n(Ixe,"STRONG",{});var _gt=s(ehe);gGo=r(_gt,"longformer"),_gt.forEach(t),hGo=r(Ixe," \u2014 "),rV=n(Ixe,"A",{href:!0});var bgt=s(rV);pGo=r(bgt,"LongformerForTokenClassification"),bgt.forEach(t),uGo=r(Ixe," (Longformer model)"),Ixe.forEach(t),_Go=i(J),X2=n(J,"LI",{});var qxe=s(X2);ohe=n(qxe,"STRONG",{});var vgt=s(ohe);bGo=r(vgt,"megatron-bert"),vgt.forEach(t),vGo=r(qxe," \u2014 "),tV=n(qxe,"A",{href:!0});var Fgt=s(tV);FGo=r(Fgt,"MegatronBertForTokenClassification"),Fgt.forEach(t),TGo=r(qxe," (MegatronBert model)"),qxe.forEach(t),MGo=i(J),z2=n(J,"LI",{});var Nxe=s(z2);rhe=n(Nxe,"STRONG",{});var Tgt=s(rhe);EGo=r(Tgt,"mobilebert"),Tgt.forEach(t),CGo=r(Nxe," \u2014 "),aV=n(Nxe,"A",{href:!0});var Mgt=s(aV);wGo=r(Mgt,"MobileBertForTokenClassification"),Mgt.forEach(t),AGo=r(Nxe," (MobileBERT model)"),Nxe.forEach(t),yGo=i(J),W2=n(J,"LI",{});var jxe=s(W2);the=n(jxe,"STRONG",{});var Egt=s(the);LGo=r(Egt,"mpnet"),Egt.forEach(t),xGo=r(jxe," \u2014 "),nV=n(jxe,"A",{href:!0});var Cgt=s(nV);$Go=r(Cgt,"MPNetForTokenClassification"),Cgt.forEach(t),kGo=r(jxe," (MPNet model)"),jxe.forEach(t),SGo=i(J),Q2=n(J,"LI",{});var Dxe=s(Q2);ahe=n(Dxe,"STRONG",{});var wgt=s(ahe);RGo=r(wgt,"nystromformer"),wgt.forEach(t),PGo=r(Dxe," \u2014 "),sV=n(Dxe,"A",{href:!0});var Agt=s(sV);BGo=r(Agt,"NystromformerForTokenClassification"),Agt.forEach(t),IGo=r(Dxe," (Nystromformer model)"),Dxe.forEach(t),qGo=i(J),H2=n(J,"LI",{});var Gxe=s(H2);nhe=n(Gxe,"STRONG",{});var ygt=s(nhe);NGo=r(ygt,"qdqbert"),ygt.forEach(t),jGo=r(Gxe," \u2014 "),lV=n(Gxe,"A",{href:!0});var Lgt=s(lV);DGo=r(Lgt,"QDQBertForTokenClassification"),Lgt.forEach(t),GGo=r(Gxe," (QDQBert model)"),Gxe.forEach(t),OGo=i(J),U2=n(J,"LI",{});var Oxe=s(U2);she=n(Oxe,"STRONG",{});var xgt=s(she);VGo=r(xgt,"rembert"),xgt.forEach(t),XGo=r(Oxe," \u2014 "),iV=n(Oxe,"A",{href:!0});var $gt=s(iV);zGo=r($gt,"RemBertForTokenClassification"),$gt.forEach(t),WGo=r(Oxe," (RemBERT model)"),Oxe.forEach(t),QGo=i(J),J2=n(J,"LI",{});var Vxe=s(J2);lhe=n(Vxe,"STRONG",{});var kgt=s(lhe);HGo=r(kgt,"roberta"),kgt.forEach(t),UGo=r(Vxe," \u2014 "),dV=n(Vxe,"A",{href:!0});var Sgt=s(dV);JGo=r(Sgt,"RobertaForTokenClassification"),Sgt.forEach(t),YGo=r(Vxe," (RoBERTa model)"),Vxe.forEach(t),KGo=i(J),Y2=n(J,"LI",{});var Xxe=s(Y2);ihe=n(Xxe,"STRONG",{});var Rgt=s(ihe);ZGo=r(Rgt,"roformer"),Rgt.forEach(t),eOo=r(Xxe," \u2014 "),cV=n(Xxe,"A",{href:!0});var Pgt=s(cV);oOo=r(Pgt,"RoFormerForTokenClassification"),Pgt.forEach(t),rOo=r(Xxe," (RoFormer model)"),Xxe.forEach(t),tOo=i(J),K2=n(J,"LI",{});var zxe=s(K2);dhe=n(zxe,"STRONG",{});var Bgt=s(dhe);aOo=r(Bgt,"squeezebert"),Bgt.forEach(t),nOo=r(zxe," \u2014 "),fV=n(zxe,"A",{href:!0});var Igt=s(fV);sOo=r(Igt,"SqueezeBertForTokenClassification"),Igt.forEach(t),lOo=r(zxe," (SqueezeBERT model)"),zxe.forEach(t),iOo=i(J),Z2=n(J,"LI",{});var Wxe=s(Z2);che=n(Wxe,"STRONG",{});var qgt=s(che);dOo=r(qgt,"xlm"),qgt.forEach(t),cOo=r(Wxe," \u2014 "),mV=n(Wxe,"A",{href:!0});var Ngt=s(mV);fOo=r(Ngt,"XLMForTokenClassification"),Ngt.forEach(t),mOo=r(Wxe," (XLM model)"),Wxe.forEach(t),gOo=i(J),ev=n(J,"LI",{});var Qxe=s(ev);fhe=n(Qxe,"STRONG",{});var jgt=s(fhe);hOo=r(jgt,"xlm-roberta"),jgt.forEach(t),pOo=r(Qxe," \u2014 "),gV=n(Qxe,"A",{href:!0});var Dgt=s(gV);uOo=r(Dgt,"XLMRobertaForTokenClassification"),Dgt.forEach(t),_Oo=r(Qxe," (XLM-RoBERTa model)"),Qxe.forEach(t),bOo=i(J),ov=n(J,"LI",{});var Hxe=s(ov);mhe=n(Hxe,"STRONG",{});var Ggt=s(mhe);vOo=r(Ggt,"xlm-roberta-xl"),Ggt.forEach(t),FOo=r(Hxe," \u2014 "),hV=n(Hxe,"A",{href:!0});var Ogt=s(hV);TOo=r(Ogt,"XLMRobertaXLForTokenClassification"),Ogt.forEach(t),MOo=r(Hxe," (XLM-RoBERTa-XL model)"),Hxe.forEach(t),EOo=i(J),rv=n(J,"LI",{});var Uxe=s(rv);ghe=n(Uxe,"STRONG",{});var Vgt=s(ghe);COo=r(Vgt,"xlnet"),Vgt.forEach(t),wOo=r(Uxe," \u2014 "),pV=n(Uxe,"A",{href:!0});var Xgt=s(pV);AOo=r(Xgt,"XLNetForTokenClassification"),Xgt.forEach(t),yOo=r(Uxe," (XLNet model)"),Uxe.forEach(t),LOo=i(J),tv=n(J,"LI",{});var Jxe=s(tv);hhe=n(Jxe,"STRONG",{});var zgt=s(hhe);xOo=r(zgt,"yoso"),zgt.forEach(t),$Oo=r(Jxe," \u2014 "),uV=n(Jxe,"A",{href:!0});var Wgt=s(uV);kOo=r(Wgt,"YosoForTokenClassification"),Wgt.forEach(t),SOo=r(Jxe," (YOSO model)"),Jxe.forEach(t),J.forEach(t),ROo=i(da),av=n(da,"P",{});var Yxe=s(av);POo=r(Yxe,"The model is set in evaluation mode by default using "),phe=n(Yxe,"CODE",{});var Qgt=s(phe);BOo=r(Qgt,"model.eval()"),Qgt.forEach(t),IOo=r(Yxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uhe=n(Yxe,"CODE",{});var Hgt=s(uhe);qOo=r(Hgt,"model.train()"),Hgt.forEach(t),Yxe.forEach(t),NOo=i(da),T(nv.$$.fragment,da),da.forEach(t),Js.forEach(t),gNe=i(f),Ki=n(f,"H2",{class:!0});var _De=s(Ki);sv=n(_De,"A",{id:!0,class:!0,href:!0});var Ugt=s(sv);_he=n(Ugt,"SPAN",{});var Jgt=s(_he);T(D6.$$.fragment,Jgt),Jgt.forEach(t),Ugt.forEach(t),jOo=i(_De),bhe=n(_De,"SPAN",{});var Ygt=s(bhe);DOo=r(Ygt,"AutoModelForQuestionAnswering"),Ygt.forEach(t),_De.forEach(t),hNe=i(f),qo=n(f,"DIV",{class:!0});var Ys=s(qo);T(G6.$$.fragment,Ys),GOo=i(Ys),Zi=n(Ys,"P",{});var wZ=s(Zi);OOo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_V=n(wZ,"A",{href:!0});var Kgt=s(_V);VOo=r(Kgt,"from_pretrained()"),Kgt.forEach(t),XOo=r(wZ," class method or the "),bV=n(wZ,"A",{href:!0});var Zgt=s(bV);zOo=r(Zgt,"from_config()"),Zgt.forEach(t),WOo=r(wZ,` class
method.`),wZ.forEach(t),QOo=i(Ys),O6=n(Ys,"P",{});var bDe=s(O6);HOo=r(bDe,"This class cannot be instantiated directly using "),vhe=n(bDe,"CODE",{});var eht=s(vhe);UOo=r(eht,"__init__()"),eht.forEach(t),JOo=r(bDe," (throws an error)."),bDe.forEach(t),YOo=i(Ys),mt=n(Ys,"DIV",{class:!0});var zw=s(mt);T(V6.$$.fragment,zw),KOo=i(zw),Fhe=n(zw,"P",{});var oht=s(Fhe);ZOo=r(oht,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oht.forEach(t),eVo=i(zw),ed=n(zw,"P",{});var AZ=s(ed);oVo=r(AZ,`Note:
Loading a model from its configuration file does `),The=n(AZ,"STRONG",{});var rht=s(The);rVo=r(rht,"not"),rht.forEach(t),tVo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=n(AZ,"A",{href:!0});var tht=s(vV);aVo=r(tht,"from_pretrained()"),tht.forEach(t),nVo=r(AZ," to load the model weights."),AZ.forEach(t),sVo=i(zw),T(lv.$$.fragment,zw),zw.forEach(t),lVo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(X6.$$.fragment,ca),iVo=i(ca),Mhe=n(ca,"P",{});var aht=s(Mhe);dVo=r(aht,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aht.forEach(t),cVo=i(ca),qa=n(ca,"P",{});var Ww=s(qa);fVo=r(Ww,"The model class to instantiate is selected based on the "),Ehe=n(Ww,"CODE",{});var nht=s(Ehe);mVo=r(nht,"model_type"),nht.forEach(t),gVo=r(Ww,` property of the config object (either
passed as an argument or loaded from `),Che=n(Ww,"CODE",{});var sht=s(Che);hVo=r(sht,"pretrained_model_name_or_path"),sht.forEach(t),pVo=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),whe=n(Ww,"CODE",{});var lht=s(whe);uVo=r(lht,"pretrained_model_name_or_path"),lht.forEach(t),_Vo=r(Ww,":"),Ww.forEach(t),bVo=i(ca),V=n(ca,"UL",{});var X=s(V);iv=n(X,"LI",{});var Kxe=s(iv);Ahe=n(Kxe,"STRONG",{});var iht=s(Ahe);vVo=r(iht,"albert"),iht.forEach(t),FVo=r(Kxe," \u2014 "),FV=n(Kxe,"A",{href:!0});var dht=s(FV);TVo=r(dht,"AlbertForQuestionAnswering"),dht.forEach(t),MVo=r(Kxe," (ALBERT model)"),Kxe.forEach(t),EVo=i(X),dv=n(X,"LI",{});var Zxe=s(dv);yhe=n(Zxe,"STRONG",{});var cht=s(yhe);CVo=r(cht,"bart"),cht.forEach(t),wVo=r(Zxe," \u2014 "),TV=n(Zxe,"A",{href:!0});var fht=s(TV);AVo=r(fht,"BartForQuestionAnswering"),fht.forEach(t),yVo=r(Zxe," (BART model)"),Zxe.forEach(t),LVo=i(X),cv=n(X,"LI",{});var e$e=s(cv);Lhe=n(e$e,"STRONG",{});var mht=s(Lhe);xVo=r(mht,"bert"),mht.forEach(t),$Vo=r(e$e," \u2014 "),MV=n(e$e,"A",{href:!0});var ght=s(MV);kVo=r(ght,"BertForQuestionAnswering"),ght.forEach(t),SVo=r(e$e," (BERT model)"),e$e.forEach(t),RVo=i(X),fv=n(X,"LI",{});var o$e=s(fv);xhe=n(o$e,"STRONG",{});var hht=s(xhe);PVo=r(hht,"big_bird"),hht.forEach(t),BVo=r(o$e," \u2014 "),EV=n(o$e,"A",{href:!0});var pht=s(EV);IVo=r(pht,"BigBirdForQuestionAnswering"),pht.forEach(t),qVo=r(o$e," (BigBird model)"),o$e.forEach(t),NVo=i(X),mv=n(X,"LI",{});var r$e=s(mv);$he=n(r$e,"STRONG",{});var uht=s($he);jVo=r(uht,"bigbird_pegasus"),uht.forEach(t),DVo=r(r$e," \u2014 "),CV=n(r$e,"A",{href:!0});var _ht=s(CV);GVo=r(_ht,"BigBirdPegasusForQuestionAnswering"),_ht.forEach(t),OVo=r(r$e," (BigBirdPegasus model)"),r$e.forEach(t),VVo=i(X),gv=n(X,"LI",{});var t$e=s(gv);khe=n(t$e,"STRONG",{});var bht=s(khe);XVo=r(bht,"camembert"),bht.forEach(t),zVo=r(t$e," \u2014 "),wV=n(t$e,"A",{href:!0});var vht=s(wV);WVo=r(vht,"CamembertForQuestionAnswering"),vht.forEach(t),QVo=r(t$e," (CamemBERT model)"),t$e.forEach(t),HVo=i(X),hv=n(X,"LI",{});var a$e=s(hv);She=n(a$e,"STRONG",{});var Fht=s(She);UVo=r(Fht,"canine"),Fht.forEach(t),JVo=r(a$e," \u2014 "),AV=n(a$e,"A",{href:!0});var Tht=s(AV);YVo=r(Tht,"CanineForQuestionAnswering"),Tht.forEach(t),KVo=r(a$e," (Canine model)"),a$e.forEach(t),ZVo=i(X),pv=n(X,"LI",{});var n$e=s(pv);Rhe=n(n$e,"STRONG",{});var Mht=s(Rhe);eXo=r(Mht,"convbert"),Mht.forEach(t),oXo=r(n$e," \u2014 "),yV=n(n$e,"A",{href:!0});var Eht=s(yV);rXo=r(Eht,"ConvBertForQuestionAnswering"),Eht.forEach(t),tXo=r(n$e," (ConvBERT model)"),n$e.forEach(t),aXo=i(X),uv=n(X,"LI",{});var s$e=s(uv);Phe=n(s$e,"STRONG",{});var Cht=s(Phe);nXo=r(Cht,"data2vec-text"),Cht.forEach(t),sXo=r(s$e," \u2014 "),LV=n(s$e,"A",{href:!0});var wht=s(LV);lXo=r(wht,"Data2VecTextForQuestionAnswering"),wht.forEach(t),iXo=r(s$e," (Data2VecText model)"),s$e.forEach(t),dXo=i(X),_v=n(X,"LI",{});var l$e=s(_v);Bhe=n(l$e,"STRONG",{});var Aht=s(Bhe);cXo=r(Aht,"deberta"),Aht.forEach(t),fXo=r(l$e," \u2014 "),xV=n(l$e,"A",{href:!0});var yht=s(xV);mXo=r(yht,"DebertaForQuestionAnswering"),yht.forEach(t),gXo=r(l$e," (DeBERTa model)"),l$e.forEach(t),hXo=i(X),bv=n(X,"LI",{});var i$e=s(bv);Ihe=n(i$e,"STRONG",{});var Lht=s(Ihe);pXo=r(Lht,"deberta-v2"),Lht.forEach(t),uXo=r(i$e," \u2014 "),$V=n(i$e,"A",{href:!0});var xht=s($V);_Xo=r(xht,"DebertaV2ForQuestionAnswering"),xht.forEach(t),bXo=r(i$e," (DeBERTa-v2 model)"),i$e.forEach(t),vXo=i(X),vv=n(X,"LI",{});var d$e=s(vv);qhe=n(d$e,"STRONG",{});var $ht=s(qhe);FXo=r($ht,"distilbert"),$ht.forEach(t),TXo=r(d$e," \u2014 "),kV=n(d$e,"A",{href:!0});var kht=s(kV);MXo=r(kht,"DistilBertForQuestionAnswering"),kht.forEach(t),EXo=r(d$e," (DistilBERT model)"),d$e.forEach(t),CXo=i(X),Fv=n(X,"LI",{});var c$e=s(Fv);Nhe=n(c$e,"STRONG",{});var Sht=s(Nhe);wXo=r(Sht,"electra"),Sht.forEach(t),AXo=r(c$e," \u2014 "),SV=n(c$e,"A",{href:!0});var Rht=s(SV);yXo=r(Rht,"ElectraForQuestionAnswering"),Rht.forEach(t),LXo=r(c$e," (ELECTRA model)"),c$e.forEach(t),xXo=i(X),Tv=n(X,"LI",{});var f$e=s(Tv);jhe=n(f$e,"STRONG",{});var Pht=s(jhe);$Xo=r(Pht,"flaubert"),Pht.forEach(t),kXo=r(f$e," \u2014 "),RV=n(f$e,"A",{href:!0});var Bht=s(RV);SXo=r(Bht,"FlaubertForQuestionAnsweringSimple"),Bht.forEach(t),RXo=r(f$e," (FlauBERT model)"),f$e.forEach(t),PXo=i(X),Mv=n(X,"LI",{});var m$e=s(Mv);Dhe=n(m$e,"STRONG",{});var Iht=s(Dhe);BXo=r(Iht,"fnet"),Iht.forEach(t),IXo=r(m$e," \u2014 "),PV=n(m$e,"A",{href:!0});var qht=s(PV);qXo=r(qht,"FNetForQuestionAnswering"),qht.forEach(t),NXo=r(m$e," (FNet model)"),m$e.forEach(t),jXo=i(X),Ev=n(X,"LI",{});var g$e=s(Ev);Ghe=n(g$e,"STRONG",{});var Nht=s(Ghe);DXo=r(Nht,"funnel"),Nht.forEach(t),GXo=r(g$e," \u2014 "),BV=n(g$e,"A",{href:!0});var jht=s(BV);OXo=r(jht,"FunnelForQuestionAnswering"),jht.forEach(t),VXo=r(g$e," (Funnel Transformer model)"),g$e.forEach(t),XXo=i(X),Cv=n(X,"LI",{});var h$e=s(Cv);Ohe=n(h$e,"STRONG",{});var Dht=s(Ohe);zXo=r(Dht,"gptj"),Dht.forEach(t),WXo=r(h$e," \u2014 "),IV=n(h$e,"A",{href:!0});var Ght=s(IV);QXo=r(Ght,"GPTJForQuestionAnswering"),Ght.forEach(t),HXo=r(h$e," (GPT-J model)"),h$e.forEach(t),UXo=i(X),wv=n(X,"LI",{});var p$e=s(wv);Vhe=n(p$e,"STRONG",{});var Oht=s(Vhe);JXo=r(Oht,"ibert"),Oht.forEach(t),YXo=r(p$e," \u2014 "),qV=n(p$e,"A",{href:!0});var Vht=s(qV);KXo=r(Vht,"IBertForQuestionAnswering"),Vht.forEach(t),ZXo=r(p$e," (I-BERT model)"),p$e.forEach(t),ezo=i(X),Av=n(X,"LI",{});var u$e=s(Av);Xhe=n(u$e,"STRONG",{});var Xht=s(Xhe);ozo=r(Xht,"layoutlmv2"),Xht.forEach(t),rzo=r(u$e," \u2014 "),NV=n(u$e,"A",{href:!0});var zht=s(NV);tzo=r(zht,"LayoutLMv2ForQuestionAnswering"),zht.forEach(t),azo=r(u$e," (LayoutLMv2 model)"),u$e.forEach(t),nzo=i(X),yv=n(X,"LI",{});var _$e=s(yv);zhe=n(_$e,"STRONG",{});var Wht=s(zhe);szo=r(Wht,"layoutlmv3"),Wht.forEach(t),lzo=r(_$e," \u2014 "),jV=n(_$e,"A",{href:!0});var Qht=s(jV);izo=r(Qht,"LayoutLMv3ForQuestionAnswering"),Qht.forEach(t),dzo=r(_$e," (LayoutLMv3 model)"),_$e.forEach(t),czo=i(X),Lv=n(X,"LI",{});var b$e=s(Lv);Whe=n(b$e,"STRONG",{});var Hht=s(Whe);fzo=r(Hht,"led"),Hht.forEach(t),mzo=r(b$e," \u2014 "),DV=n(b$e,"A",{href:!0});var Uht=s(DV);gzo=r(Uht,"LEDForQuestionAnswering"),Uht.forEach(t),hzo=r(b$e," (LED model)"),b$e.forEach(t),pzo=i(X),xv=n(X,"LI",{});var v$e=s(xv);Qhe=n(v$e,"STRONG",{});var Jht=s(Qhe);uzo=r(Jht,"longformer"),Jht.forEach(t),_zo=r(v$e," \u2014 "),GV=n(v$e,"A",{href:!0});var Yht=s(GV);bzo=r(Yht,"LongformerForQuestionAnswering"),Yht.forEach(t),vzo=r(v$e," (Longformer model)"),v$e.forEach(t),Fzo=i(X),$v=n(X,"LI",{});var F$e=s($v);Hhe=n(F$e,"STRONG",{});var Kht=s(Hhe);Tzo=r(Kht,"lxmert"),Kht.forEach(t),Mzo=r(F$e," \u2014 "),OV=n(F$e,"A",{href:!0});var Zht=s(OV);Ezo=r(Zht,"LxmertForQuestionAnswering"),Zht.forEach(t),Czo=r(F$e," (LXMERT model)"),F$e.forEach(t),wzo=i(X),kv=n(X,"LI",{});var T$e=s(kv);Uhe=n(T$e,"STRONG",{});var ept=s(Uhe);Azo=r(ept,"mbart"),ept.forEach(t),yzo=r(T$e," \u2014 "),VV=n(T$e,"A",{href:!0});var opt=s(VV);Lzo=r(opt,"MBartForQuestionAnswering"),opt.forEach(t),xzo=r(T$e," (mBART model)"),T$e.forEach(t),$zo=i(X),Sv=n(X,"LI",{});var M$e=s(Sv);Jhe=n(M$e,"STRONG",{});var rpt=s(Jhe);kzo=r(rpt,"megatron-bert"),rpt.forEach(t),Szo=r(M$e," \u2014 "),XV=n(M$e,"A",{href:!0});var tpt=s(XV);Rzo=r(tpt,"MegatronBertForQuestionAnswering"),tpt.forEach(t),Pzo=r(M$e," (MegatronBert model)"),M$e.forEach(t),Bzo=i(X),Rv=n(X,"LI",{});var E$e=s(Rv);Yhe=n(E$e,"STRONG",{});var apt=s(Yhe);Izo=r(apt,"mobilebert"),apt.forEach(t),qzo=r(E$e," \u2014 "),zV=n(E$e,"A",{href:!0});var npt=s(zV);Nzo=r(npt,"MobileBertForQuestionAnswering"),npt.forEach(t),jzo=r(E$e," (MobileBERT model)"),E$e.forEach(t),Dzo=i(X),Pv=n(X,"LI",{});var C$e=s(Pv);Khe=n(C$e,"STRONG",{});var spt=s(Khe);Gzo=r(spt,"mpnet"),spt.forEach(t),Ozo=r(C$e," \u2014 "),WV=n(C$e,"A",{href:!0});var lpt=s(WV);Vzo=r(lpt,"MPNetForQuestionAnswering"),lpt.forEach(t),Xzo=r(C$e," (MPNet model)"),C$e.forEach(t),zzo=i(X),Bv=n(X,"LI",{});var w$e=s(Bv);Zhe=n(w$e,"STRONG",{});var ipt=s(Zhe);Wzo=r(ipt,"nystromformer"),ipt.forEach(t),Qzo=r(w$e," \u2014 "),QV=n(w$e,"A",{href:!0});var dpt=s(QV);Hzo=r(dpt,"NystromformerForQuestionAnswering"),dpt.forEach(t),Uzo=r(w$e," (Nystromformer model)"),w$e.forEach(t),Jzo=i(X),Iv=n(X,"LI",{});var A$e=s(Iv);epe=n(A$e,"STRONG",{});var cpt=s(epe);Yzo=r(cpt,"qdqbert"),cpt.forEach(t),Kzo=r(A$e," \u2014 "),HV=n(A$e,"A",{href:!0});var fpt=s(HV);Zzo=r(fpt,"QDQBertForQuestionAnswering"),fpt.forEach(t),eWo=r(A$e," (QDQBert model)"),A$e.forEach(t),oWo=i(X),qv=n(X,"LI",{});var y$e=s(qv);ope=n(y$e,"STRONG",{});var mpt=s(ope);rWo=r(mpt,"reformer"),mpt.forEach(t),tWo=r(y$e," \u2014 "),UV=n(y$e,"A",{href:!0});var gpt=s(UV);aWo=r(gpt,"ReformerForQuestionAnswering"),gpt.forEach(t),nWo=r(y$e," (Reformer model)"),y$e.forEach(t),sWo=i(X),Nv=n(X,"LI",{});var L$e=s(Nv);rpe=n(L$e,"STRONG",{});var hpt=s(rpe);lWo=r(hpt,"rembert"),hpt.forEach(t),iWo=r(L$e," \u2014 "),JV=n(L$e,"A",{href:!0});var ppt=s(JV);dWo=r(ppt,"RemBertForQuestionAnswering"),ppt.forEach(t),cWo=r(L$e," (RemBERT model)"),L$e.forEach(t),fWo=i(X),jv=n(X,"LI",{});var x$e=s(jv);tpe=n(x$e,"STRONG",{});var upt=s(tpe);mWo=r(upt,"roberta"),upt.forEach(t),gWo=r(x$e," \u2014 "),YV=n(x$e,"A",{href:!0});var _pt=s(YV);hWo=r(_pt,"RobertaForQuestionAnswering"),_pt.forEach(t),pWo=r(x$e," (RoBERTa model)"),x$e.forEach(t),uWo=i(X),Dv=n(X,"LI",{});var $$e=s(Dv);ape=n($$e,"STRONG",{});var bpt=s(ape);_Wo=r(bpt,"roformer"),bpt.forEach(t),bWo=r($$e," \u2014 "),KV=n($$e,"A",{href:!0});var vpt=s(KV);vWo=r(vpt,"RoFormerForQuestionAnswering"),vpt.forEach(t),FWo=r($$e," (RoFormer model)"),$$e.forEach(t),TWo=i(X),Gv=n(X,"LI",{});var k$e=s(Gv);npe=n(k$e,"STRONG",{});var Fpt=s(npe);MWo=r(Fpt,"splinter"),Fpt.forEach(t),EWo=r(k$e," \u2014 "),ZV=n(k$e,"A",{href:!0});var Tpt=s(ZV);CWo=r(Tpt,"SplinterForQuestionAnswering"),Tpt.forEach(t),wWo=r(k$e," (Splinter model)"),k$e.forEach(t),AWo=i(X),Ov=n(X,"LI",{});var S$e=s(Ov);spe=n(S$e,"STRONG",{});var Mpt=s(spe);yWo=r(Mpt,"squeezebert"),Mpt.forEach(t),LWo=r(S$e," \u2014 "),eX=n(S$e,"A",{href:!0});var Ept=s(eX);xWo=r(Ept,"SqueezeBertForQuestionAnswering"),Ept.forEach(t),$Wo=r(S$e," (SqueezeBERT model)"),S$e.forEach(t),kWo=i(X),Vv=n(X,"LI",{});var R$e=s(Vv);lpe=n(R$e,"STRONG",{});var Cpt=s(lpe);SWo=r(Cpt,"xlm"),Cpt.forEach(t),RWo=r(R$e," \u2014 "),oX=n(R$e,"A",{href:!0});var wpt=s(oX);PWo=r(wpt,"XLMForQuestionAnsweringSimple"),wpt.forEach(t),BWo=r(R$e," (XLM model)"),R$e.forEach(t),IWo=i(X),Xv=n(X,"LI",{});var P$e=s(Xv);ipe=n(P$e,"STRONG",{});var Apt=s(ipe);qWo=r(Apt,"xlm-roberta"),Apt.forEach(t),NWo=r(P$e," \u2014 "),rX=n(P$e,"A",{href:!0});var ypt=s(rX);jWo=r(ypt,"XLMRobertaForQuestionAnswering"),ypt.forEach(t),DWo=r(P$e," (XLM-RoBERTa model)"),P$e.forEach(t),GWo=i(X),zv=n(X,"LI",{});var B$e=s(zv);dpe=n(B$e,"STRONG",{});var Lpt=s(dpe);OWo=r(Lpt,"xlm-roberta-xl"),Lpt.forEach(t),VWo=r(B$e," \u2014 "),tX=n(B$e,"A",{href:!0});var xpt=s(tX);XWo=r(xpt,"XLMRobertaXLForQuestionAnswering"),xpt.forEach(t),zWo=r(B$e," (XLM-RoBERTa-XL model)"),B$e.forEach(t),WWo=i(X),Wv=n(X,"LI",{});var I$e=s(Wv);cpe=n(I$e,"STRONG",{});var $pt=s(cpe);QWo=r($pt,"xlnet"),$pt.forEach(t),HWo=r(I$e," \u2014 "),aX=n(I$e,"A",{href:!0});var kpt=s(aX);UWo=r(kpt,"XLNetForQuestionAnsweringSimple"),kpt.forEach(t),JWo=r(I$e," (XLNet model)"),I$e.forEach(t),YWo=i(X),Qv=n(X,"LI",{});var q$e=s(Qv);fpe=n(q$e,"STRONG",{});var Spt=s(fpe);KWo=r(Spt,"yoso"),Spt.forEach(t),ZWo=r(q$e," \u2014 "),nX=n(q$e,"A",{href:!0});var Rpt=s(nX);eQo=r(Rpt,"YosoForQuestionAnswering"),Rpt.forEach(t),oQo=r(q$e," (YOSO model)"),q$e.forEach(t),X.forEach(t),rQo=i(ca),Hv=n(ca,"P",{});var N$e=s(Hv);tQo=r(N$e,"The model is set in evaluation mode by default using "),mpe=n(N$e,"CODE",{});var Ppt=s(mpe);aQo=r(Ppt,"model.eval()"),Ppt.forEach(t),nQo=r(N$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gpe=n(N$e,"CODE",{});var Bpt=s(gpe);sQo=r(Bpt,"model.train()"),Bpt.forEach(t),N$e.forEach(t),lQo=i(ca),T(Uv.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),pNe=i(f),od=n(f,"H2",{class:!0});var vDe=s(od);Jv=n(vDe,"A",{id:!0,class:!0,href:!0});var Ipt=s(Jv);hpe=n(Ipt,"SPAN",{});var qpt=s(hpe);T(z6.$$.fragment,qpt),qpt.forEach(t),Ipt.forEach(t),iQo=i(vDe),ppe=n(vDe,"SPAN",{});var Npt=s(ppe);dQo=r(Npt,"AutoModelForTableQuestionAnswering"),Npt.forEach(t),vDe.forEach(t),uNe=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(W6.$$.fragment,Ks),cQo=i(Ks),rd=n(Ks,"P",{});var yZ=s(rd);fQo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sX=n(yZ,"A",{href:!0});var jpt=s(sX);mQo=r(jpt,"from_pretrained()"),jpt.forEach(t),gQo=r(yZ," class method or the "),lX=n(yZ,"A",{href:!0});var Dpt=s(lX);hQo=r(Dpt,"from_config()"),Dpt.forEach(t),pQo=r(yZ,` class
method.`),yZ.forEach(t),uQo=i(Ks),Q6=n(Ks,"P",{});var FDe=s(Q6);_Qo=r(FDe,"This class cannot be instantiated directly using "),upe=n(FDe,"CODE",{});var Gpt=s(upe);bQo=r(Gpt,"__init__()"),Gpt.forEach(t),vQo=r(FDe," (throws an error)."),FDe.forEach(t),FQo=i(Ks),gt=n(Ks,"DIV",{class:!0});var Qw=s(gt);T(H6.$$.fragment,Qw),TQo=i(Qw),_pe=n(Qw,"P",{});var Opt=s(_pe);MQo=r(Opt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Opt.forEach(t),EQo=i(Qw),td=n(Qw,"P",{});var LZ=s(td);CQo=r(LZ,`Note:
Loading a model from its configuration file does `),bpe=n(LZ,"STRONG",{});var Vpt=s(bpe);wQo=r(Vpt,"not"),Vpt.forEach(t),AQo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=n(LZ,"A",{href:!0});var Xpt=s(iX);yQo=r(Xpt,"from_pretrained()"),Xpt.forEach(t),LQo=r(LZ," to load the model weights."),LZ.forEach(t),xQo=i(Qw),T(Yv.$$.fragment,Qw),Qw.forEach(t),$Qo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(U6.$$.fragment,fa),kQo=i(fa),vpe=n(fa,"P",{});var zpt=s(vpe);SQo=r(zpt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zpt.forEach(t),RQo=i(fa),Na=n(fa,"P",{});var Hw=s(Na);PQo=r(Hw,"The model class to instantiate is selected based on the "),Fpe=n(Hw,"CODE",{});var Wpt=s(Fpe);BQo=r(Wpt,"model_type"),Wpt.forEach(t),IQo=r(Hw,` property of the config object (either
passed as an argument or loaded from `),Tpe=n(Hw,"CODE",{});var Qpt=s(Tpe);qQo=r(Qpt,"pretrained_model_name_or_path"),Qpt.forEach(t),NQo=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mpe=n(Hw,"CODE",{});var Hpt=s(Mpe);jQo=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),DQo=r(Hw,":"),Hw.forEach(t),GQo=i(fa),Epe=n(fa,"UL",{});var Upt=s(Epe);Kv=n(Upt,"LI",{});var j$e=s(Kv);Cpe=n(j$e,"STRONG",{});var Jpt=s(Cpe);OQo=r(Jpt,"tapas"),Jpt.forEach(t),VQo=r(j$e," \u2014 "),dX=n(j$e,"A",{href:!0});var Ypt=s(dX);XQo=r(Ypt,"TapasForQuestionAnswering"),Ypt.forEach(t),zQo=r(j$e," (TAPAS model)"),j$e.forEach(t),Upt.forEach(t),WQo=i(fa),Zv=n(fa,"P",{});var D$e=s(Zv);QQo=r(D$e,"The model is set in evaluation mode by default using "),wpe=n(D$e,"CODE",{});var Kpt=s(wpe);HQo=r(Kpt,"model.eval()"),Kpt.forEach(t),UQo=r(D$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=n(D$e,"CODE",{});var Zpt=s(Ape);JQo=r(Zpt,"model.train()"),Zpt.forEach(t),D$e.forEach(t),YQo=i(fa),T(eF.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),_Ne=i(f),ad=n(f,"H2",{class:!0});var TDe=s(ad);oF=n(TDe,"A",{id:!0,class:!0,href:!0});var eut=s(oF);ype=n(eut,"SPAN",{});var out=s(ype);T(J6.$$.fragment,out),out.forEach(t),eut.forEach(t),KQo=i(TDe),Lpe=n(TDe,"SPAN",{});var rut=s(Lpe);ZQo=r(rut,"AutoModelForImageClassification"),rut.forEach(t),TDe.forEach(t),bNe=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(Y6.$$.fragment,Zs),eHo=i(Zs),nd=n(Zs,"P",{});var xZ=s(nd);oHo=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cX=n(xZ,"A",{href:!0});var tut=s(cX);rHo=r(tut,"from_pretrained()"),tut.forEach(t),tHo=r(xZ," class method or the "),fX=n(xZ,"A",{href:!0});var aut=s(fX);aHo=r(aut,"from_config()"),aut.forEach(t),nHo=r(xZ,` class
method.`),xZ.forEach(t),sHo=i(Zs),K6=n(Zs,"P",{});var MDe=s(K6);lHo=r(MDe,"This class cannot be instantiated directly using "),xpe=n(MDe,"CODE",{});var nut=s(xpe);iHo=r(nut,"__init__()"),nut.forEach(t),dHo=r(MDe," (throws an error)."),MDe.forEach(t),cHo=i(Zs),ht=n(Zs,"DIV",{class:!0});var Uw=s(ht);T(Z6.$$.fragment,Uw),fHo=i(Uw),$pe=n(Uw,"P",{});var sut=s($pe);mHo=r(sut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),sut.forEach(t),gHo=i(Uw),sd=n(Uw,"P",{});var $Z=s(sd);hHo=r($Z,`Note:
Loading a model from its configuration file does `),kpe=n($Z,"STRONG",{});var lut=s(kpe);pHo=r(lut,"not"),lut.forEach(t),uHo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=n($Z,"A",{href:!0});var iut=s(mX);_Ho=r(iut,"from_pretrained()"),iut.forEach(t),bHo=r($Z," to load the model weights."),$Z.forEach(t),vHo=i(Uw),T(rF.$$.fragment,Uw),Uw.forEach(t),FHo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(ey.$$.fragment,ma),THo=i(ma),Spe=n(ma,"P",{});var dut=s(Spe);MHo=r(dut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dut.forEach(t),EHo=i(ma),ja=n(ma,"P",{});var Jw=s(ja);CHo=r(Jw,"The model class to instantiate is selected based on the "),Rpe=n(Jw,"CODE",{});var cut=s(Rpe);wHo=r(cut,"model_type"),cut.forEach(t),AHo=r(Jw,` property of the config object (either
passed as an argument or loaded from `),Ppe=n(Jw,"CODE",{});var fut=s(Ppe);yHo=r(fut,"pretrained_model_name_or_path"),fut.forEach(t),LHo=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=n(Jw,"CODE",{});var mut=s(Bpe);xHo=r(mut,"pretrained_model_name_or_path"),mut.forEach(t),$Ho=r(Jw,":"),Jw.forEach(t),kHo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);tF=n(Te,"LI",{});var G$e=s(tF);Ipe=n(G$e,"STRONG",{});var gut=s(Ipe);SHo=r(gut,"beit"),gut.forEach(t),RHo=r(G$e," \u2014 "),gX=n(G$e,"A",{href:!0});var hut=s(gX);PHo=r(hut,"BeitForImageClassification"),hut.forEach(t),BHo=r(G$e," (BEiT model)"),G$e.forEach(t),IHo=i(Te),aF=n(Te,"LI",{});var O$e=s(aF);qpe=n(O$e,"STRONG",{});var put=s(qpe);qHo=r(put,"convnext"),put.forEach(t),NHo=r(O$e," \u2014 "),hX=n(O$e,"A",{href:!0});var uut=s(hX);jHo=r(uut,"ConvNextForImageClassification"),uut.forEach(t),DHo=r(O$e," (ConvNext model)"),O$e.forEach(t),GHo=i(Te),nF=n(Te,"LI",{});var V$e=s(nF);Npe=n(V$e,"STRONG",{});var _ut=s(Npe);OHo=r(_ut,"cvt"),_ut.forEach(t),VHo=r(V$e," \u2014 "),pX=n(V$e,"A",{href:!0});var but=s(pX);XHo=r(but,"CvtForImageClassification"),but.forEach(t),zHo=r(V$e," (CvT model)"),V$e.forEach(t),WHo=i(Te),sF=n(Te,"LI",{});var X$e=s(sF);jpe=n(X$e,"STRONG",{});var vut=s(jpe);QHo=r(vut,"data2vec-vision"),vut.forEach(t),HHo=r(X$e," \u2014 "),uX=n(X$e,"A",{href:!0});var Fut=s(uX);UHo=r(Fut,"Data2VecVisionForImageClassification"),Fut.forEach(t),JHo=r(X$e," (Data2VecVision model)"),X$e.forEach(t),YHo=i(Te),Bs=n(Te,"LI",{});var j$=s(Bs);Dpe=n(j$,"STRONG",{});var Tut=s(Dpe);KHo=r(Tut,"deit"),Tut.forEach(t),ZHo=r(j$," \u2014 "),_X=n(j$,"A",{href:!0});var Mut=s(_X);eUo=r(Mut,"DeiTForImageClassification"),Mut.forEach(t),oUo=r(j$," or "),bX=n(j$,"A",{href:!0});var Eut=s(bX);rUo=r(Eut,"DeiTForImageClassificationWithTeacher"),Eut.forEach(t),tUo=r(j$," (DeiT model)"),j$.forEach(t),aUo=i(Te),lF=n(Te,"LI",{});var z$e=s(lF);Gpe=n(z$e,"STRONG",{});var Cut=s(Gpe);nUo=r(Cut,"imagegpt"),Cut.forEach(t),sUo=r(z$e," \u2014 "),vX=n(z$e,"A",{href:!0});var wut=s(vX);lUo=r(wut,"ImageGPTForImageClassification"),wut.forEach(t),iUo=r(z$e," (ImageGPT model)"),z$e.forEach(t),dUo=i(Te),pt=n(Te,"LI",{});var hf=s(pt);Ope=n(hf,"STRONG",{});var Aut=s(Ope);cUo=r(Aut,"perceiver"),Aut.forEach(t),fUo=r(hf," \u2014 "),FX=n(hf,"A",{href:!0});var yut=s(FX);mUo=r(yut,"PerceiverForImageClassificationLearned"),yut.forEach(t),gUo=r(hf," or "),TX=n(hf,"A",{href:!0});var Lut=s(TX);hUo=r(Lut,"PerceiverForImageClassificationFourier"),Lut.forEach(t),pUo=r(hf," or "),MX=n(hf,"A",{href:!0});var xut=s(MX);uUo=r(xut,"PerceiverForImageClassificationConvProcessing"),xut.forEach(t),_Uo=r(hf," (Perceiver model)"),hf.forEach(t),bUo=i(Te),iF=n(Te,"LI",{});var W$e=s(iF);Vpe=n(W$e,"STRONG",{});var $ut=s(Vpe);vUo=r($ut,"poolformer"),$ut.forEach(t),FUo=r(W$e," \u2014 "),EX=n(W$e,"A",{href:!0});var kut=s(EX);TUo=r(kut,"PoolFormerForImageClassification"),kut.forEach(t),MUo=r(W$e," (PoolFormer model)"),W$e.forEach(t),EUo=i(Te),dF=n(Te,"LI",{});var Q$e=s(dF);Xpe=n(Q$e,"STRONG",{});var Sut=s(Xpe);CUo=r(Sut,"regnet"),Sut.forEach(t),wUo=r(Q$e," \u2014 "),CX=n(Q$e,"A",{href:!0});var Rut=s(CX);AUo=r(Rut,"RegNetForImageClassification"),Rut.forEach(t),yUo=r(Q$e," (RegNet model)"),Q$e.forEach(t),LUo=i(Te),cF=n(Te,"LI",{});var H$e=s(cF);zpe=n(H$e,"STRONG",{});var Put=s(zpe);xUo=r(Put,"resnet"),Put.forEach(t),$Uo=r(H$e," \u2014 "),wX=n(H$e,"A",{href:!0});var But=s(wX);kUo=r(But,"ResNetForImageClassification"),But.forEach(t),SUo=r(H$e," (ResNet model)"),H$e.forEach(t),RUo=i(Te),fF=n(Te,"LI",{});var U$e=s(fF);Wpe=n(U$e,"STRONG",{});var Iut=s(Wpe);PUo=r(Iut,"segformer"),Iut.forEach(t),BUo=r(U$e," \u2014 "),AX=n(U$e,"A",{href:!0});var qut=s(AX);IUo=r(qut,"SegformerForImageClassification"),qut.forEach(t),qUo=r(U$e," (SegFormer model)"),U$e.forEach(t),NUo=i(Te),mF=n(Te,"LI",{});var J$e=s(mF);Qpe=n(J$e,"STRONG",{});var Nut=s(Qpe);jUo=r(Nut,"swin"),Nut.forEach(t),DUo=r(J$e," \u2014 "),yX=n(J$e,"A",{href:!0});var jut=s(yX);GUo=r(jut,"SwinForImageClassification"),jut.forEach(t),OUo=r(J$e," (Swin model)"),J$e.forEach(t),VUo=i(Te),gF=n(Te,"LI",{});var Y$e=s(gF);Hpe=n(Y$e,"STRONG",{});var Dut=s(Hpe);XUo=r(Dut,"van"),Dut.forEach(t),zUo=r(Y$e," \u2014 "),LX=n(Y$e,"A",{href:!0});var Gut=s(LX);WUo=r(Gut,"VanForImageClassification"),Gut.forEach(t),QUo=r(Y$e," (VAN model)"),Y$e.forEach(t),HUo=i(Te),hF=n(Te,"LI",{});var K$e=s(hF);Upe=n(K$e,"STRONG",{});var Out=s(Upe);UUo=r(Out,"vit"),Out.forEach(t),JUo=r(K$e," \u2014 "),xX=n(K$e,"A",{href:!0});var Vut=s(xX);YUo=r(Vut,"ViTForImageClassification"),Vut.forEach(t),KUo=r(K$e," (ViT model)"),K$e.forEach(t),Te.forEach(t),ZUo=i(ma),pF=n(ma,"P",{});var Z$e=s(pF);eJo=r(Z$e,"The model is set in evaluation mode by default using "),Jpe=n(Z$e,"CODE",{});var Xut=s(Jpe);oJo=r(Xut,"model.eval()"),Xut.forEach(t),rJo=r(Z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ype=n(Z$e,"CODE",{});var zut=s(Ype);tJo=r(zut,"model.train()"),zut.forEach(t),Z$e.forEach(t),aJo=i(ma),T(uF.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),vNe=i(f),ld=n(f,"H2",{class:!0});var EDe=s(ld);_F=n(EDe,"A",{id:!0,class:!0,href:!0});var Wut=s(_F);Kpe=n(Wut,"SPAN",{});var Qut=s(Kpe);T(oy.$$.fragment,Qut),Qut.forEach(t),Wut.forEach(t),nJo=i(EDe),Zpe=n(EDe,"SPAN",{});var Hut=s(Zpe);sJo=r(Hut,"AutoModelForVision2Seq"),Hut.forEach(t),EDe.forEach(t),FNe=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(ry.$$.fragment,el),lJo=i(el),id=n(el,"P",{});var kZ=s(id);iJo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$X=n(kZ,"A",{href:!0});var Uut=s($X);dJo=r(Uut,"from_pretrained()"),Uut.forEach(t),cJo=r(kZ," class method or the "),kX=n(kZ,"A",{href:!0});var Jut=s(kX);fJo=r(Jut,"from_config()"),Jut.forEach(t),mJo=r(kZ,` class
method.`),kZ.forEach(t),gJo=i(el),ty=n(el,"P",{});var CDe=s(ty);hJo=r(CDe,"This class cannot be instantiated directly using "),eue=n(CDe,"CODE",{});var Yut=s(eue);pJo=r(Yut,"__init__()"),Yut.forEach(t),uJo=r(CDe," (throws an error)."),CDe.forEach(t),_Jo=i(el),ut=n(el,"DIV",{class:!0});var Yw=s(ut);T(ay.$$.fragment,Yw),bJo=i(Yw),oue=n(Yw,"P",{});var Kut=s(oue);vJo=r(Kut,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Kut.forEach(t),FJo=i(Yw),dd=n(Yw,"P",{});var SZ=s(dd);TJo=r(SZ,`Note:
Loading a model from its configuration file does `),rue=n(SZ,"STRONG",{});var Zut=s(rue);MJo=r(Zut,"not"),Zut.forEach(t),EJo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(SZ,"A",{href:!0});var e_t=s(SX);CJo=r(e_t,"from_pretrained()"),e_t.forEach(t),wJo=r(SZ," to load the model weights."),SZ.forEach(t),AJo=i(Yw),T(bF.$$.fragment,Yw),Yw.forEach(t),yJo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(ny.$$.fragment,ga),LJo=i(ga),tue=n(ga,"P",{});var o_t=s(tue);xJo=r(o_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),o_t.forEach(t),$Jo=i(ga),Da=n(ga,"P",{});var Kw=s(Da);kJo=r(Kw,"The model class to instantiate is selected based on the "),aue=n(Kw,"CODE",{});var r_t=s(aue);SJo=r(r_t,"model_type"),r_t.forEach(t),RJo=r(Kw,` property of the config object (either
passed as an argument or loaded from `),nue=n(Kw,"CODE",{});var t_t=s(nue);PJo=r(t_t,"pretrained_model_name_or_path"),t_t.forEach(t),BJo=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=n(Kw,"CODE",{});var a_t=s(sue);IJo=r(a_t,"pretrained_model_name_or_path"),a_t.forEach(t),qJo=r(Kw,":"),Kw.forEach(t),NJo=i(ga),lue=n(ga,"UL",{});var n_t=s(lue);vF=n(n_t,"LI",{});var eke=s(vF);iue=n(eke,"STRONG",{});var s_t=s(iue);jJo=r(s_t,"vision-encoder-decoder"),s_t.forEach(t),DJo=r(eke," \u2014 "),RX=n(eke,"A",{href:!0});var l_t=s(RX);GJo=r(l_t,"VisionEncoderDecoderModel"),l_t.forEach(t),OJo=r(eke," (Vision Encoder decoder model)"),eke.forEach(t),n_t.forEach(t),VJo=i(ga),FF=n(ga,"P",{});var oke=s(FF);XJo=r(oke,"The model is set in evaluation mode by default using "),due=n(oke,"CODE",{});var i_t=s(due);zJo=r(i_t,"model.eval()"),i_t.forEach(t),WJo=r(oke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=n(oke,"CODE",{});var d_t=s(cue);QJo=r(d_t,"model.train()"),d_t.forEach(t),oke.forEach(t),HJo=i(ga),T(TF.$$.fragment,ga),ga.forEach(t),el.forEach(t),TNe=i(f),cd=n(f,"H2",{class:!0});var wDe=s(cd);MF=n(wDe,"A",{id:!0,class:!0,href:!0});var c_t=s(MF);fue=n(c_t,"SPAN",{});var f_t=s(fue);T(sy.$$.fragment,f_t),f_t.forEach(t),c_t.forEach(t),UJo=i(wDe),mue=n(wDe,"SPAN",{});var m_t=s(mue);JJo=r(m_t,"AutoModelForAudioClassification"),m_t.forEach(t),wDe.forEach(t),MNe=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(ly.$$.fragment,ol),YJo=i(ol),fd=n(ol,"P",{});var RZ=s(fd);KJo=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),PX=n(RZ,"A",{href:!0});var g_t=s(PX);ZJo=r(g_t,"from_pretrained()"),g_t.forEach(t),eYo=r(RZ," class method or the "),BX=n(RZ,"A",{href:!0});var h_t=s(BX);oYo=r(h_t,"from_config()"),h_t.forEach(t),rYo=r(RZ,` class
method.`),RZ.forEach(t),tYo=i(ol),iy=n(ol,"P",{});var ADe=s(iy);aYo=r(ADe,"This class cannot be instantiated directly using "),gue=n(ADe,"CODE",{});var p_t=s(gue);nYo=r(p_t,"__init__()"),p_t.forEach(t),sYo=r(ADe," (throws an error)."),ADe.forEach(t),lYo=i(ol),_t=n(ol,"DIV",{class:!0});var Zw=s(_t);T(dy.$$.fragment,Zw),iYo=i(Zw),hue=n(Zw,"P",{});var u_t=s(hue);dYo=r(u_t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),u_t.forEach(t),cYo=i(Zw),md=n(Zw,"P",{});var PZ=s(md);fYo=r(PZ,`Note:
Loading a model from its configuration file does `),pue=n(PZ,"STRONG",{});var __t=s(pue);mYo=r(__t,"not"),__t.forEach(t),gYo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=n(PZ,"A",{href:!0});var b_t=s(IX);hYo=r(b_t,"from_pretrained()"),b_t.forEach(t),pYo=r(PZ," to load the model weights."),PZ.forEach(t),uYo=i(Zw),T(EF.$$.fragment,Zw),Zw.forEach(t),_Yo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(cy.$$.fragment,ha),bYo=i(ha),uue=n(ha,"P",{});var v_t=s(uue);vYo=r(v_t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),v_t.forEach(t),FYo=i(ha),Ga=n(ha,"P",{});var e0=s(Ga);TYo=r(e0,"The model class to instantiate is selected based on the "),_ue=n(e0,"CODE",{});var F_t=s(_ue);MYo=r(F_t,"model_type"),F_t.forEach(t),EYo=r(e0,` property of the config object (either
passed as an argument or loaded from `),bue=n(e0,"CODE",{});var T_t=s(bue);CYo=r(T_t,"pretrained_model_name_or_path"),T_t.forEach(t),wYo=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=n(e0,"CODE",{});var M_t=s(vue);AYo=r(M_t,"pretrained_model_name_or_path"),M_t.forEach(t),yYo=r(e0,":"),e0.forEach(t),LYo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);CF=n(Oe,"LI",{});var rke=s(CF);Fue=n(rke,"STRONG",{});var E_t=s(Fue);xYo=r(E_t,"data2vec-audio"),E_t.forEach(t),$Yo=r(rke," \u2014 "),qX=n(rke,"A",{href:!0});var C_t=s(qX);kYo=r(C_t,"Data2VecAudioForSequenceClassification"),C_t.forEach(t),SYo=r(rke," (Data2VecAudio model)"),rke.forEach(t),RYo=i(Oe),wF=n(Oe,"LI",{});var tke=s(wF);Tue=n(tke,"STRONG",{});var w_t=s(Tue);PYo=r(w_t,"hubert"),w_t.forEach(t),BYo=r(tke," \u2014 "),NX=n(tke,"A",{href:!0});var A_t=s(NX);IYo=r(A_t,"HubertForSequenceClassification"),A_t.forEach(t),qYo=r(tke," (Hubert model)"),tke.forEach(t),NYo=i(Oe),AF=n(Oe,"LI",{});var ake=s(AF);Mue=n(ake,"STRONG",{});var y_t=s(Mue);jYo=r(y_t,"sew"),y_t.forEach(t),DYo=r(ake," \u2014 "),jX=n(ake,"A",{href:!0});var L_t=s(jX);GYo=r(L_t,"SEWForSequenceClassification"),L_t.forEach(t),OYo=r(ake," (SEW model)"),ake.forEach(t),VYo=i(Oe),yF=n(Oe,"LI",{});var nke=s(yF);Eue=n(nke,"STRONG",{});var x_t=s(Eue);XYo=r(x_t,"sew-d"),x_t.forEach(t),zYo=r(nke," \u2014 "),DX=n(nke,"A",{href:!0});var $_t=s(DX);WYo=r($_t,"SEWDForSequenceClassification"),$_t.forEach(t),QYo=r(nke," (SEW-D model)"),nke.forEach(t),HYo=i(Oe),LF=n(Oe,"LI",{});var ske=s(LF);Cue=n(ske,"STRONG",{});var k_t=s(Cue);UYo=r(k_t,"unispeech"),k_t.forEach(t),JYo=r(ske," \u2014 "),GX=n(ske,"A",{href:!0});var S_t=s(GX);YYo=r(S_t,"UniSpeechForSequenceClassification"),S_t.forEach(t),KYo=r(ske," (UniSpeech model)"),ske.forEach(t),ZYo=i(Oe),xF=n(Oe,"LI",{});var lke=s(xF);wue=n(lke,"STRONG",{});var R_t=s(wue);eKo=r(R_t,"unispeech-sat"),R_t.forEach(t),oKo=r(lke," \u2014 "),OX=n(lke,"A",{href:!0});var P_t=s(OX);rKo=r(P_t,"UniSpeechSatForSequenceClassification"),P_t.forEach(t),tKo=r(lke," (UniSpeechSat model)"),lke.forEach(t),aKo=i(Oe),$F=n(Oe,"LI",{});var ike=s($F);Aue=n(ike,"STRONG",{});var B_t=s(Aue);nKo=r(B_t,"wav2vec2"),B_t.forEach(t),sKo=r(ike," \u2014 "),VX=n(ike,"A",{href:!0});var I_t=s(VX);lKo=r(I_t,"Wav2Vec2ForSequenceClassification"),I_t.forEach(t),iKo=r(ike," (Wav2Vec2 model)"),ike.forEach(t),dKo=i(Oe),kF=n(Oe,"LI",{});var dke=s(kF);yue=n(dke,"STRONG",{});var q_t=s(yue);cKo=r(q_t,"wav2vec2-conformer"),q_t.forEach(t),fKo=r(dke," \u2014 "),XX=n(dke,"A",{href:!0});var N_t=s(XX);mKo=r(N_t,"Wav2Vec2ConformerForSequenceClassification"),N_t.forEach(t),gKo=r(dke," (Wav2Vec2-Conformer model)"),dke.forEach(t),hKo=i(Oe),SF=n(Oe,"LI",{});var cke=s(SF);Lue=n(cke,"STRONG",{});var j_t=s(Lue);pKo=r(j_t,"wavlm"),j_t.forEach(t),uKo=r(cke," \u2014 "),zX=n(cke,"A",{href:!0});var D_t=s(zX);_Ko=r(D_t,"WavLMForSequenceClassification"),D_t.forEach(t),bKo=r(cke," (WavLM model)"),cke.forEach(t),Oe.forEach(t),vKo=i(ha),RF=n(ha,"P",{});var fke=s(RF);FKo=r(fke,"The model is set in evaluation mode by default using "),xue=n(fke,"CODE",{});var G_t=s(xue);TKo=r(G_t,"model.eval()"),G_t.forEach(t),MKo=r(fke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=n(fke,"CODE",{});var O_t=s($ue);EKo=r(O_t,"model.train()"),O_t.forEach(t),fke.forEach(t),CKo=i(ha),T(PF.$$.fragment,ha),ha.forEach(t),ol.forEach(t),ENe=i(f),gd=n(f,"H2",{class:!0});var yDe=s(gd);BF=n(yDe,"A",{id:!0,class:!0,href:!0});var V_t=s(BF);kue=n(V_t,"SPAN",{});var X_t=s(kue);T(fy.$$.fragment,X_t),X_t.forEach(t),V_t.forEach(t),wKo=i(yDe),Sue=n(yDe,"SPAN",{});var z_t=s(Sue);AKo=r(z_t,"AutoModelForAudioFrameClassification"),z_t.forEach(t),yDe.forEach(t),CNe=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(my.$$.fragment,rl),yKo=i(rl),hd=n(rl,"P",{});var BZ=s(hd);LKo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),WX=n(BZ,"A",{href:!0});var W_t=s(WX);xKo=r(W_t,"from_pretrained()"),W_t.forEach(t),$Ko=r(BZ," class method or the "),QX=n(BZ,"A",{href:!0});var Q_t=s(QX);kKo=r(Q_t,"from_config()"),Q_t.forEach(t),SKo=r(BZ,` class
method.`),BZ.forEach(t),RKo=i(rl),gy=n(rl,"P",{});var LDe=s(gy);PKo=r(LDe,"This class cannot be instantiated directly using "),Rue=n(LDe,"CODE",{});var H_t=s(Rue);BKo=r(H_t,"__init__()"),H_t.forEach(t),IKo=r(LDe," (throws an error)."),LDe.forEach(t),qKo=i(rl),bt=n(rl,"DIV",{class:!0});var o0=s(bt);T(hy.$$.fragment,o0),NKo=i(o0),Pue=n(o0,"P",{});var U_t=s(Pue);jKo=r(U_t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),U_t.forEach(t),DKo=i(o0),pd=n(o0,"P",{});var IZ=s(pd);GKo=r(IZ,`Note:
Loading a model from its configuration file does `),Bue=n(IZ,"STRONG",{});var J_t=s(Bue);OKo=r(J_t,"not"),J_t.forEach(t),VKo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=n(IZ,"A",{href:!0});var Y_t=s(HX);XKo=r(Y_t,"from_pretrained()"),Y_t.forEach(t),zKo=r(IZ," to load the model weights."),IZ.forEach(t),WKo=i(o0),T(IF.$$.fragment,o0),o0.forEach(t),QKo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(py.$$.fragment,pa),HKo=i(pa),Iue=n(pa,"P",{});var K_t=s(Iue);UKo=r(K_t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),K_t.forEach(t),JKo=i(pa),Oa=n(pa,"P",{});var r0=s(Oa);YKo=r(r0,"The model class to instantiate is selected based on the "),que=n(r0,"CODE",{});var Z_t=s(que);KKo=r(Z_t,"model_type"),Z_t.forEach(t),ZKo=r(r0,` property of the config object (either
passed as an argument or loaded from `),Nue=n(r0,"CODE",{});var e3t=s(Nue);eZo=r(e3t,"pretrained_model_name_or_path"),e3t.forEach(t),oZo=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=n(r0,"CODE",{});var o3t=s(jue);rZo=r(o3t,"pretrained_model_name_or_path"),o3t.forEach(t),tZo=r(r0,":"),r0.forEach(t),aZo=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);qF=n(tl,"LI",{});var mke=s(qF);Due=n(mke,"STRONG",{});var r3t=s(Due);nZo=r(r3t,"data2vec-audio"),r3t.forEach(t),sZo=r(mke," \u2014 "),UX=n(mke,"A",{href:!0});var t3t=s(UX);lZo=r(t3t,"Data2VecAudioForAudioFrameClassification"),t3t.forEach(t),iZo=r(mke," (Data2VecAudio model)"),mke.forEach(t),dZo=i(tl),NF=n(tl,"LI",{});var gke=s(NF);Gue=n(gke,"STRONG",{});var a3t=s(Gue);cZo=r(a3t,"unispeech-sat"),a3t.forEach(t),fZo=r(gke," \u2014 "),JX=n(gke,"A",{href:!0});var n3t=s(JX);mZo=r(n3t,"UniSpeechSatForAudioFrameClassification"),n3t.forEach(t),gZo=r(gke," (UniSpeechSat model)"),gke.forEach(t),hZo=i(tl),jF=n(tl,"LI",{});var hke=s(jF);Oue=n(hke,"STRONG",{});var s3t=s(Oue);pZo=r(s3t,"wav2vec2"),s3t.forEach(t),uZo=r(hke," \u2014 "),YX=n(hke,"A",{href:!0});var l3t=s(YX);_Zo=r(l3t,"Wav2Vec2ForAudioFrameClassification"),l3t.forEach(t),bZo=r(hke," (Wav2Vec2 model)"),hke.forEach(t),vZo=i(tl),DF=n(tl,"LI",{});var pke=s(DF);Vue=n(pke,"STRONG",{});var i3t=s(Vue);FZo=r(i3t,"wav2vec2-conformer"),i3t.forEach(t),TZo=r(pke," \u2014 "),KX=n(pke,"A",{href:!0});var d3t=s(KX);MZo=r(d3t,"Wav2Vec2ConformerForAudioFrameClassification"),d3t.forEach(t),EZo=r(pke," (Wav2Vec2-Conformer model)"),pke.forEach(t),CZo=i(tl),GF=n(tl,"LI",{});var uke=s(GF);Xue=n(uke,"STRONG",{});var c3t=s(Xue);wZo=r(c3t,"wavlm"),c3t.forEach(t),AZo=r(uke," \u2014 "),ZX=n(uke,"A",{href:!0});var f3t=s(ZX);yZo=r(f3t,"WavLMForAudioFrameClassification"),f3t.forEach(t),LZo=r(uke," (WavLM model)"),uke.forEach(t),tl.forEach(t),xZo=i(pa),OF=n(pa,"P",{});var _ke=s(OF);$Zo=r(_ke,"The model is set in evaluation mode by default using "),zue=n(_ke,"CODE",{});var m3t=s(zue);kZo=r(m3t,"model.eval()"),m3t.forEach(t),SZo=r(_ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=n(_ke,"CODE",{});var g3t=s(Wue);RZo=r(g3t,"model.train()"),g3t.forEach(t),_ke.forEach(t),PZo=i(pa),T(VF.$$.fragment,pa),pa.forEach(t),rl.forEach(t),wNe=i(f),ud=n(f,"H2",{class:!0});var xDe=s(ud);XF=n(xDe,"A",{id:!0,class:!0,href:!0});var h3t=s(XF);Que=n(h3t,"SPAN",{});var p3t=s(Que);T(uy.$$.fragment,p3t),p3t.forEach(t),h3t.forEach(t),BZo=i(xDe),Hue=n(xDe,"SPAN",{});var u3t=s(Hue);IZo=r(u3t,"AutoModelForCTC"),u3t.forEach(t),xDe.forEach(t),ANe=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(_y.$$.fragment,al),qZo=i(al),_d=n(al,"P",{});var qZ=s(_d);NZo=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ez=n(qZ,"A",{href:!0});var _3t=s(ez);jZo=r(_3t,"from_pretrained()"),_3t.forEach(t),DZo=r(qZ," class method or the "),oz=n(qZ,"A",{href:!0});var b3t=s(oz);GZo=r(b3t,"from_config()"),b3t.forEach(t),OZo=r(qZ,` class
method.`),qZ.forEach(t),VZo=i(al),by=n(al,"P",{});var $De=s(by);XZo=r($De,"This class cannot be instantiated directly using "),Uue=n($De,"CODE",{});var v3t=s(Uue);zZo=r(v3t,"__init__()"),v3t.forEach(t),WZo=r($De," (throws an error)."),$De.forEach(t),QZo=i(al),vt=n(al,"DIV",{class:!0});var t0=s(vt);T(vy.$$.fragment,t0),HZo=i(t0),Jue=n(t0,"P",{});var F3t=s(Jue);UZo=r(F3t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),F3t.forEach(t),JZo=i(t0),bd=n(t0,"P",{});var NZ=s(bd);YZo=r(NZ,`Note:
Loading a model from its configuration file does `),Yue=n(NZ,"STRONG",{});var T3t=s(Yue);KZo=r(T3t,"not"),T3t.forEach(t),ZZo=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=n(NZ,"A",{href:!0});var M3t=s(rz);eer=r(M3t,"from_pretrained()"),M3t.forEach(t),oer=r(NZ," to load the model weights."),NZ.forEach(t),rer=i(t0),T(zF.$$.fragment,t0),t0.forEach(t),ter=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(Fy.$$.fragment,ua),aer=i(ua),Kue=n(ua,"P",{});var E3t=s(Kue);ner=r(E3t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),E3t.forEach(t),ser=i(ua),Va=n(ua,"P",{});var a0=s(Va);ler=r(a0,"The model class to instantiate is selected based on the "),Zue=n(a0,"CODE",{});var C3t=s(Zue);ier=r(C3t,"model_type"),C3t.forEach(t),der=r(a0,` property of the config object (either
passed as an argument or loaded from `),e_e=n(a0,"CODE",{});var w3t=s(e_e);cer=r(w3t,"pretrained_model_name_or_path"),w3t.forEach(t),fer=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=n(a0,"CODE",{});var A3t=s(o_e);mer=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),ger=r(a0,":"),a0.forEach(t),her=i(ua),Se=n(ua,"UL",{});var Ve=s(Se);WF=n(Ve,"LI",{});var bke=s(WF);r_e=n(bke,"STRONG",{});var y3t=s(r_e);per=r(y3t,"data2vec-audio"),y3t.forEach(t),uer=r(bke," \u2014 "),tz=n(bke,"A",{href:!0});var L3t=s(tz);_er=r(L3t,"Data2VecAudioForCTC"),L3t.forEach(t),ber=r(bke," (Data2VecAudio model)"),bke.forEach(t),ver=i(Ve),QF=n(Ve,"LI",{});var vke=s(QF);t_e=n(vke,"STRONG",{});var x3t=s(t_e);Fer=r(x3t,"hubert"),x3t.forEach(t),Ter=r(vke," \u2014 "),az=n(vke,"A",{href:!0});var $3t=s(az);Mer=r($3t,"HubertForCTC"),$3t.forEach(t),Eer=r(vke," (Hubert model)"),vke.forEach(t),Cer=i(Ve),HF=n(Ve,"LI",{});var Fke=s(HF);a_e=n(Fke,"STRONG",{});var k3t=s(a_e);wer=r(k3t,"sew"),k3t.forEach(t),Aer=r(Fke," \u2014 "),nz=n(Fke,"A",{href:!0});var S3t=s(nz);yer=r(S3t,"SEWForCTC"),S3t.forEach(t),Ler=r(Fke," (SEW model)"),Fke.forEach(t),xer=i(Ve),UF=n(Ve,"LI",{});var Tke=s(UF);n_e=n(Tke,"STRONG",{});var R3t=s(n_e);$er=r(R3t,"sew-d"),R3t.forEach(t),ker=r(Tke," \u2014 "),sz=n(Tke,"A",{href:!0});var P3t=s(sz);Ser=r(P3t,"SEWDForCTC"),P3t.forEach(t),Rer=r(Tke," (SEW-D model)"),Tke.forEach(t),Per=i(Ve),JF=n(Ve,"LI",{});var Mke=s(JF);s_e=n(Mke,"STRONG",{});var B3t=s(s_e);Ber=r(B3t,"unispeech"),B3t.forEach(t),Ier=r(Mke," \u2014 "),lz=n(Mke,"A",{href:!0});var I3t=s(lz);qer=r(I3t,"UniSpeechForCTC"),I3t.forEach(t),Ner=r(Mke," (UniSpeech model)"),Mke.forEach(t),jer=i(Ve),YF=n(Ve,"LI",{});var Eke=s(YF);l_e=n(Eke,"STRONG",{});var q3t=s(l_e);Der=r(q3t,"unispeech-sat"),q3t.forEach(t),Ger=r(Eke," \u2014 "),iz=n(Eke,"A",{href:!0});var N3t=s(iz);Oer=r(N3t,"UniSpeechSatForCTC"),N3t.forEach(t),Ver=r(Eke," (UniSpeechSat model)"),Eke.forEach(t),Xer=i(Ve),KF=n(Ve,"LI",{});var Cke=s(KF);i_e=n(Cke,"STRONG",{});var j3t=s(i_e);zer=r(j3t,"wav2vec2"),j3t.forEach(t),Wer=r(Cke," \u2014 "),dz=n(Cke,"A",{href:!0});var D3t=s(dz);Qer=r(D3t,"Wav2Vec2ForCTC"),D3t.forEach(t),Her=r(Cke," (Wav2Vec2 model)"),Cke.forEach(t),Uer=i(Ve),ZF=n(Ve,"LI",{});var wke=s(ZF);d_e=n(wke,"STRONG",{});var G3t=s(d_e);Jer=r(G3t,"wav2vec2-conformer"),G3t.forEach(t),Yer=r(wke," \u2014 "),cz=n(wke,"A",{href:!0});var O3t=s(cz);Ker=r(O3t,"Wav2Vec2ConformerForCTC"),O3t.forEach(t),Zer=r(wke," (Wav2Vec2-Conformer model)"),wke.forEach(t),eor=i(Ve),eT=n(Ve,"LI",{});var Ake=s(eT);c_e=n(Ake,"STRONG",{});var V3t=s(c_e);oor=r(V3t,"wavlm"),V3t.forEach(t),ror=r(Ake," \u2014 "),fz=n(Ake,"A",{href:!0});var X3t=s(fz);tor=r(X3t,"WavLMForCTC"),X3t.forEach(t),aor=r(Ake," (WavLM model)"),Ake.forEach(t),Ve.forEach(t),nor=i(ua),oT=n(ua,"P",{});var yke=s(oT);sor=r(yke,"The model is set in evaluation mode by default using "),f_e=n(yke,"CODE",{});var z3t=s(f_e);lor=r(z3t,"model.eval()"),z3t.forEach(t),ior=r(yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m_e=n(yke,"CODE",{});var W3t=s(m_e);dor=r(W3t,"model.train()"),W3t.forEach(t),yke.forEach(t),cor=i(ua),T(rT.$$.fragment,ua),ua.forEach(t),al.forEach(t),yNe=i(f),vd=n(f,"H2",{class:!0});var kDe=s(vd);tT=n(kDe,"A",{id:!0,class:!0,href:!0});var Q3t=s(tT);g_e=n(Q3t,"SPAN",{});var H3t=s(g_e);T(Ty.$$.fragment,H3t),H3t.forEach(t),Q3t.forEach(t),mor=i(kDe),h_e=n(kDe,"SPAN",{});var U3t=s(h_e);gor=r(U3t,"AutoModelForSpeechSeq2Seq"),U3t.forEach(t),kDe.forEach(t),LNe=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(My.$$.fragment,nl),hor=i(nl),Fd=n(nl,"P",{});var jZ=s(Fd);por=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),mz=n(jZ,"A",{href:!0});var J3t=s(mz);uor=r(J3t,"from_pretrained()"),J3t.forEach(t),_or=r(jZ," class method or the "),gz=n(jZ,"A",{href:!0});var Y3t=s(gz);bor=r(Y3t,"from_config()"),Y3t.forEach(t),vor=r(jZ,` class
method.`),jZ.forEach(t),For=i(nl),Ey=n(nl,"P",{});var SDe=s(Ey);Tor=r(SDe,"This class cannot be instantiated directly using "),p_e=n(SDe,"CODE",{});var K3t=s(p_e);Mor=r(K3t,"__init__()"),K3t.forEach(t),Eor=r(SDe," (throws an error)."),SDe.forEach(t),Cor=i(nl),Ft=n(nl,"DIV",{class:!0});var n0=s(Ft);T(Cy.$$.fragment,n0),wor=i(n0),u_e=n(n0,"P",{});var Z3t=s(u_e);Aor=r(Z3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Z3t.forEach(t),yor=i(n0),Td=n(n0,"P",{});var DZ=s(Td);Lor=r(DZ,`Note:
Loading a model from its configuration file does `),__e=n(DZ,"STRONG",{});var e1t=s(__e);xor=r(e1t,"not"),e1t.forEach(t),$or=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=n(DZ,"A",{href:!0});var o1t=s(hz);kor=r(o1t,"from_pretrained()"),o1t.forEach(t),Sor=r(DZ," to load the model weights."),DZ.forEach(t),Ror=i(n0),T(aT.$$.fragment,n0),n0.forEach(t),Por=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(wy.$$.fragment,_a),Bor=i(_a),b_e=n(_a,"P",{});var r1t=s(b_e);Ior=r(r1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),r1t.forEach(t),qor=i(_a),Xa=n(_a,"P",{});var s0=s(Xa);Nor=r(s0,"The model class to instantiate is selected based on the "),v_e=n(s0,"CODE",{});var t1t=s(v_e);jor=r(t1t,"model_type"),t1t.forEach(t),Dor=r(s0,` property of the config object (either
passed as an argument or loaded from `),F_e=n(s0,"CODE",{});var a1t=s(F_e);Gor=r(a1t,"pretrained_model_name_or_path"),a1t.forEach(t),Oor=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=n(s0,"CODE",{});var n1t=s(T_e);Vor=r(n1t,"pretrained_model_name_or_path"),n1t.forEach(t),Xor=r(s0,":"),s0.forEach(t),zor=i(_a),Ay=n(_a,"UL",{});var RDe=s(Ay);nT=n(RDe,"LI",{});var Lke=s(nT);M_e=n(Lke,"STRONG",{});var s1t=s(M_e);Wor=r(s1t,"speech-encoder-decoder"),s1t.forEach(t),Qor=r(Lke," \u2014 "),pz=n(Lke,"A",{href:!0});var l1t=s(pz);Hor=r(l1t,"SpeechEncoderDecoderModel"),l1t.forEach(t),Uor=r(Lke," (Speech Encoder decoder model)"),Lke.forEach(t),Jor=i(RDe),sT=n(RDe,"LI",{});var xke=s(sT);E_e=n(xke,"STRONG",{});var i1t=s(E_e);Yor=r(i1t,"speech_to_text"),i1t.forEach(t),Kor=r(xke," \u2014 "),uz=n(xke,"A",{href:!0});var d1t=s(uz);Zor=r(d1t,"Speech2TextForConditionalGeneration"),d1t.forEach(t),err=r(xke," (Speech2Text model)"),xke.forEach(t),RDe.forEach(t),orr=i(_a),lT=n(_a,"P",{});var $ke=s(lT);rrr=r($ke,"The model is set in evaluation mode by default using "),C_e=n($ke,"CODE",{});var c1t=s(C_e);trr=r(c1t,"model.eval()"),c1t.forEach(t),arr=r($ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=n($ke,"CODE",{});var f1t=s(w_e);nrr=r(f1t,"model.train()"),f1t.forEach(t),$ke.forEach(t),srr=i(_a),T(iT.$$.fragment,_a),_a.forEach(t),nl.forEach(t),xNe=i(f),Md=n(f,"H2",{class:!0});var PDe=s(Md);dT=n(PDe,"A",{id:!0,class:!0,href:!0});var m1t=s(dT);A_e=n(m1t,"SPAN",{});var g1t=s(A_e);T(yy.$$.fragment,g1t),g1t.forEach(t),m1t.forEach(t),lrr=i(PDe),y_e=n(PDe,"SPAN",{});var h1t=s(y_e);irr=r(h1t,"AutoModelForAudioXVector"),h1t.forEach(t),PDe.forEach(t),$Ne=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(Ly.$$.fragment,sl),drr=i(sl),Ed=n(sl,"P",{});var GZ=s(Ed);crr=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),_z=n(GZ,"A",{href:!0});var p1t=s(_z);frr=r(p1t,"from_pretrained()"),p1t.forEach(t),mrr=r(GZ," class method or the "),bz=n(GZ,"A",{href:!0});var u1t=s(bz);grr=r(u1t,"from_config()"),u1t.forEach(t),hrr=r(GZ,` class
method.`),GZ.forEach(t),prr=i(sl),xy=n(sl,"P",{});var BDe=s(xy);urr=r(BDe,"This class cannot be instantiated directly using "),L_e=n(BDe,"CODE",{});var _1t=s(L_e);_rr=r(_1t,"__init__()"),_1t.forEach(t),brr=r(BDe," (throws an error)."),BDe.forEach(t),vrr=i(sl),Tt=n(sl,"DIV",{class:!0});var l0=s(Tt);T($y.$$.fragment,l0),Frr=i(l0),x_e=n(l0,"P",{});var b1t=s(x_e);Trr=r(b1t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),b1t.forEach(t),Mrr=i(l0),Cd=n(l0,"P",{});var OZ=s(Cd);Err=r(OZ,`Note:
Loading a model from its configuration file does `),$_e=n(OZ,"STRONG",{});var v1t=s($_e);Crr=r(v1t,"not"),v1t.forEach(t),wrr=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=n(OZ,"A",{href:!0});var F1t=s(vz);Arr=r(F1t,"from_pretrained()"),F1t.forEach(t),yrr=r(OZ," to load the model weights."),OZ.forEach(t),Lrr=i(l0),T(cT.$$.fragment,l0),l0.forEach(t),xrr=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(ky.$$.fragment,ba),$rr=i(ba),k_e=n(ba,"P",{});var T1t=s(k_e);krr=r(T1t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),T1t.forEach(t),Srr=i(ba),za=n(ba,"P",{});var i0=s(za);Rrr=r(i0,"The model class to instantiate is selected based on the "),S_e=n(i0,"CODE",{});var M1t=s(S_e);Prr=r(M1t,"model_type"),M1t.forEach(t),Brr=r(i0,` property of the config object (either
passed as an argument or loaded from `),R_e=n(i0,"CODE",{});var E1t=s(R_e);Irr=r(E1t,"pretrained_model_name_or_path"),E1t.forEach(t),qrr=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P_e=n(i0,"CODE",{});var C1t=s(P_e);Nrr=r(C1t,"pretrained_model_name_or_path"),C1t.forEach(t),jrr=r(i0,":"),i0.forEach(t),Drr=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);fT=n(ll,"LI",{});var kke=s(fT);B_e=n(kke,"STRONG",{});var w1t=s(B_e);Grr=r(w1t,"data2vec-audio"),w1t.forEach(t),Orr=r(kke," \u2014 "),Fz=n(kke,"A",{href:!0});var A1t=s(Fz);Vrr=r(A1t,"Data2VecAudioForXVector"),A1t.forEach(t),Xrr=r(kke," (Data2VecAudio model)"),kke.forEach(t),zrr=i(ll),mT=n(ll,"LI",{});var Ske=s(mT);I_e=n(Ske,"STRONG",{});var y1t=s(I_e);Wrr=r(y1t,"unispeech-sat"),y1t.forEach(t),Qrr=r(Ske," \u2014 "),Tz=n(Ske,"A",{href:!0});var L1t=s(Tz);Hrr=r(L1t,"UniSpeechSatForXVector"),L1t.forEach(t),Urr=r(Ske," (UniSpeechSat model)"),Ske.forEach(t),Jrr=i(ll),gT=n(ll,"LI",{});var Rke=s(gT);q_e=n(Rke,"STRONG",{});var x1t=s(q_e);Yrr=r(x1t,"wav2vec2"),x1t.forEach(t),Krr=r(Rke," \u2014 "),Mz=n(Rke,"A",{href:!0});var $1t=s(Mz);Zrr=r($1t,"Wav2Vec2ForXVector"),$1t.forEach(t),etr=r(Rke," (Wav2Vec2 model)"),Rke.forEach(t),otr=i(ll),hT=n(ll,"LI",{});var Pke=s(hT);N_e=n(Pke,"STRONG",{});var k1t=s(N_e);rtr=r(k1t,"wav2vec2-conformer"),k1t.forEach(t),ttr=r(Pke," \u2014 "),Ez=n(Pke,"A",{href:!0});var S1t=s(Ez);atr=r(S1t,"Wav2Vec2ConformerForXVector"),S1t.forEach(t),ntr=r(Pke," (Wav2Vec2-Conformer model)"),Pke.forEach(t),str=i(ll),pT=n(ll,"LI",{});var Bke=s(pT);j_e=n(Bke,"STRONG",{});var R1t=s(j_e);ltr=r(R1t,"wavlm"),R1t.forEach(t),itr=r(Bke," \u2014 "),Cz=n(Bke,"A",{href:!0});var P1t=s(Cz);dtr=r(P1t,"WavLMForXVector"),P1t.forEach(t),ctr=r(Bke," (WavLM model)"),Bke.forEach(t),ll.forEach(t),ftr=i(ba),uT=n(ba,"P",{});var Ike=s(uT);mtr=r(Ike,"The model is set in evaluation mode by default using "),D_e=n(Ike,"CODE",{});var B1t=s(D_e);gtr=r(B1t,"model.eval()"),B1t.forEach(t),htr=r(Ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=n(Ike,"CODE",{});var I1t=s(G_e);ptr=r(I1t,"model.train()"),I1t.forEach(t),Ike.forEach(t),utr=i(ba),T(_T.$$.fragment,ba),ba.forEach(t),sl.forEach(t),kNe=i(f),wd=n(f,"H2",{class:!0});var IDe=s(wd);bT=n(IDe,"A",{id:!0,class:!0,href:!0});var q1t=s(bT);O_e=n(q1t,"SPAN",{});var N1t=s(O_e);T(Sy.$$.fragment,N1t),N1t.forEach(t),q1t.forEach(t),_tr=i(IDe),V_e=n(IDe,"SPAN",{});var j1t=s(V_e);btr=r(j1t,"AutoModelForMaskedImageModeling"),j1t.forEach(t),IDe.forEach(t),SNe=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(Ry.$$.fragment,il),vtr=i(il),Ad=n(il,"P",{});var VZ=s(Ad);Ftr=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wz=n(VZ,"A",{href:!0});var D1t=s(wz);Ttr=r(D1t,"from_pretrained()"),D1t.forEach(t),Mtr=r(VZ," class method or the "),Az=n(VZ,"A",{href:!0});var G1t=s(Az);Etr=r(G1t,"from_config()"),G1t.forEach(t),Ctr=r(VZ,` class
method.`),VZ.forEach(t),wtr=i(il),Py=n(il,"P",{});var qDe=s(Py);Atr=r(qDe,"This class cannot be instantiated directly using "),X_e=n(qDe,"CODE",{});var O1t=s(X_e);ytr=r(O1t,"__init__()"),O1t.forEach(t),Ltr=r(qDe," (throws an error)."),qDe.forEach(t),xtr=i(il),Mt=n(il,"DIV",{class:!0});var d0=s(Mt);T(By.$$.fragment,d0),$tr=i(d0),z_e=n(d0,"P",{});var V1t=s(z_e);ktr=r(V1t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),V1t.forEach(t),Str=i(d0),yd=n(d0,"P",{});var XZ=s(yd);Rtr=r(XZ,`Note:
Loading a model from its configuration file does `),W_e=n(XZ,"STRONG",{});var X1t=s(W_e);Ptr=r(X1t,"not"),X1t.forEach(t),Btr=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(XZ,"A",{href:!0});var z1t=s(yz);Itr=r(z1t,"from_pretrained()"),z1t.forEach(t),qtr=r(XZ," to load the model weights."),XZ.forEach(t),Ntr=i(d0),T(vT.$$.fragment,d0),d0.forEach(t),jtr=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(Iy.$$.fragment,va),Dtr=i(va),Q_e=n(va,"P",{});var W1t=s(Q_e);Gtr=r(W1t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),W1t.forEach(t),Otr=i(va),Wa=n(va,"P",{});var c0=s(Wa);Vtr=r(c0,"The model class to instantiate is selected based on the "),H_e=n(c0,"CODE",{});var Q1t=s(H_e);Xtr=r(Q1t,"model_type"),Q1t.forEach(t),ztr=r(c0,` property of the config object (either
passed as an argument or loaded from `),U_e=n(c0,"CODE",{});var H1t=s(U_e);Wtr=r(H1t,"pretrained_model_name_or_path"),H1t.forEach(t),Qtr=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=n(c0,"CODE",{});var U1t=s(J_e);Htr=r(U1t,"pretrained_model_name_or_path"),U1t.forEach(t),Utr=r(c0,":"),c0.forEach(t),Jtr=i(va),Ld=n(va,"UL",{});var zZ=s(Ld);FT=n(zZ,"LI",{});var qke=s(FT);Y_e=n(qke,"STRONG",{});var J1t=s(Y_e);Ytr=r(J1t,"deit"),J1t.forEach(t),Ktr=r(qke," \u2014 "),Lz=n(qke,"A",{href:!0});var Y1t=s(Lz);Ztr=r(Y1t,"DeiTForMaskedImageModeling"),Y1t.forEach(t),ear=r(qke," (DeiT model)"),qke.forEach(t),oar=i(zZ),TT=n(zZ,"LI",{});var Nke=s(TT);K_e=n(Nke,"STRONG",{});var K1t=s(K_e);rar=r(K1t,"swin"),K1t.forEach(t),tar=r(Nke," \u2014 "),xz=n(Nke,"A",{href:!0});var Z1t=s(xz);aar=r(Z1t,"SwinForMaskedImageModeling"),Z1t.forEach(t),nar=r(Nke," (Swin model)"),Nke.forEach(t),sar=i(zZ),MT=n(zZ,"LI",{});var jke=s(MT);Z_e=n(jke,"STRONG",{});var ebt=s(Z_e);lar=r(ebt,"vit"),ebt.forEach(t),iar=r(jke," \u2014 "),$z=n(jke,"A",{href:!0});var obt=s($z);dar=r(obt,"ViTForMaskedImageModeling"),obt.forEach(t),car=r(jke," (ViT model)"),jke.forEach(t),zZ.forEach(t),far=i(va),ET=n(va,"P",{});var Dke=s(ET);mar=r(Dke,"The model is set in evaluation mode by default using "),e3e=n(Dke,"CODE",{});var rbt=s(e3e);gar=r(rbt,"model.eval()"),rbt.forEach(t),har=r(Dke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o3e=n(Dke,"CODE",{});var tbt=s(o3e);par=r(tbt,"model.train()"),tbt.forEach(t),Dke.forEach(t),uar=i(va),T(CT.$$.fragment,va),va.forEach(t),il.forEach(t),RNe=i(f),xd=n(f,"H2",{class:!0});var NDe=s(xd);wT=n(NDe,"A",{id:!0,class:!0,href:!0});var abt=s(wT);r3e=n(abt,"SPAN",{});var nbt=s(r3e);T(qy.$$.fragment,nbt),nbt.forEach(t),abt.forEach(t),_ar=i(NDe),t3e=n(NDe,"SPAN",{});var sbt=s(t3e);bar=r(sbt,"AutoModelForObjectDetection"),sbt.forEach(t),NDe.forEach(t),PNe=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(Ny.$$.fragment,dl),Far=i(dl),$d=n(dl,"P",{});var WZ=s($d);Tar=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),kz=n(WZ,"A",{href:!0});var lbt=s(kz);Mar=r(lbt,"from_pretrained()"),lbt.forEach(t),Ear=r(WZ," class method or the "),Sz=n(WZ,"A",{href:!0});var ibt=s(Sz);Car=r(ibt,"from_config()"),ibt.forEach(t),war=r(WZ,` class
method.`),WZ.forEach(t),Aar=i(dl),jy=n(dl,"P",{});var jDe=s(jy);yar=r(jDe,"This class cannot be instantiated directly using "),a3e=n(jDe,"CODE",{});var dbt=s(a3e);Lar=r(dbt,"__init__()"),dbt.forEach(t),xar=r(jDe," (throws an error)."),jDe.forEach(t),$ar=i(dl),Et=n(dl,"DIV",{class:!0});var f0=s(Et);T(Dy.$$.fragment,f0),kar=i(f0),n3e=n(f0,"P",{});var cbt=s(n3e);Sar=r(cbt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),cbt.forEach(t),Rar=i(f0),kd=n(f0,"P",{});var QZ=s(kd);Par=r(QZ,`Note:
Loading a model from its configuration file does `),s3e=n(QZ,"STRONG",{});var fbt=s(s3e);Bar=r(fbt,"not"),fbt.forEach(t),Iar=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=n(QZ,"A",{href:!0});var mbt=s(Rz);qar=r(mbt,"from_pretrained()"),mbt.forEach(t),Nar=r(QZ," to load the model weights."),QZ.forEach(t),jar=i(f0),T(AT.$$.fragment,f0),f0.forEach(t),Dar=i(dl),uo=n(dl,"DIV",{class:!0});var Fa=s(uo);T(Gy.$$.fragment,Fa),Gar=i(Fa),l3e=n(Fa,"P",{});var gbt=s(l3e);Oar=r(gbt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),gbt.forEach(t),Var=i(Fa),Qa=n(Fa,"P",{});var m0=s(Qa);Xar=r(m0,"The model class to instantiate is selected based on the "),i3e=n(m0,"CODE",{});var hbt=s(i3e);zar=r(hbt,"model_type"),hbt.forEach(t),War=r(m0,` property of the config object (either
passed as an argument or loaded from `),d3e=n(m0,"CODE",{});var pbt=s(d3e);Qar=r(pbt,"pretrained_model_name_or_path"),pbt.forEach(t),Har=r(m0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=n(m0,"CODE",{});var ubt=s(c3e);Uar=r(ubt,"pretrained_model_name_or_path"),ubt.forEach(t),Jar=r(m0,":"),m0.forEach(t),Yar=i(Fa),Oy=n(Fa,"UL",{});var DDe=s(Oy);yT=n(DDe,"LI",{});var Gke=s(yT);f3e=n(Gke,"STRONG",{});var _bt=s(f3e);Kar=r(_bt,"detr"),_bt.forEach(t),Zar=r(Gke," \u2014 "),Pz=n(Gke,"A",{href:!0});var bbt=s(Pz);enr=r(bbt,"DetrForObjectDetection"),bbt.forEach(t),onr=r(Gke," (DETR model)"),Gke.forEach(t),rnr=i(DDe),LT=n(DDe,"LI",{});var Oke=s(LT);m3e=n(Oke,"STRONG",{});var vbt=s(m3e);tnr=r(vbt,"yolos"),vbt.forEach(t),anr=r(Oke," \u2014 "),Bz=n(Oke,"A",{href:!0});var Fbt=s(Bz);nnr=r(Fbt,"YolosForObjectDetection"),Fbt.forEach(t),snr=r(Oke," (YOLOS model)"),Oke.forEach(t),DDe.forEach(t),lnr=i(Fa),xT=n(Fa,"P",{});var Vke=s(xT);inr=r(Vke,"The model is set in evaluation mode by default using "),g3e=n(Vke,"CODE",{});var Tbt=s(g3e);dnr=r(Tbt,"model.eval()"),Tbt.forEach(t),cnr=r(Vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h3e=n(Vke,"CODE",{});var Mbt=s(h3e);fnr=r(Mbt,"model.train()"),Mbt.forEach(t),Vke.forEach(t),mnr=i(Fa),T($T.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),BNe=i(f),Sd=n(f,"H2",{class:!0});var GDe=s(Sd);kT=n(GDe,"A",{id:!0,class:!0,href:!0});var Ebt=s(kT);p3e=n(Ebt,"SPAN",{});var Cbt=s(p3e);T(Vy.$$.fragment,Cbt),Cbt.forEach(t),Ebt.forEach(t),gnr=i(GDe),u3e=n(GDe,"SPAN",{});var wbt=s(u3e);hnr=r(wbt,"AutoModelForImageSegmentation"),wbt.forEach(t),GDe.forEach(t),INe=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(Xy.$$.fragment,cl),pnr=i(cl),Rd=n(cl,"P",{});var HZ=s(Rd);unr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Iz=n(HZ,"A",{href:!0});var Abt=s(Iz);_nr=r(Abt,"from_pretrained()"),Abt.forEach(t),bnr=r(HZ," class method or the "),qz=n(HZ,"A",{href:!0});var ybt=s(qz);vnr=r(ybt,"from_config()"),ybt.forEach(t),Fnr=r(HZ,` class
method.`),HZ.forEach(t),Tnr=i(cl),zy=n(cl,"P",{});var ODe=s(zy);Mnr=r(ODe,"This class cannot be instantiated directly using "),_3e=n(ODe,"CODE",{});var Lbt=s(_3e);Enr=r(Lbt,"__init__()"),Lbt.forEach(t),Cnr=r(ODe," (throws an error)."),ODe.forEach(t),wnr=i(cl),Ct=n(cl,"DIV",{class:!0});var g0=s(Ct);T(Wy.$$.fragment,g0),Anr=i(g0),b3e=n(g0,"P",{});var xbt=s(b3e);ynr=r(xbt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),xbt.forEach(t),Lnr=i(g0),Pd=n(g0,"P",{});var UZ=s(Pd);xnr=r(UZ,`Note:
Loading a model from its configuration file does `),v3e=n(UZ,"STRONG",{});var $bt=s(v3e);$nr=r($bt,"not"),$bt.forEach(t),knr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(UZ,"A",{href:!0});var kbt=s(Nz);Snr=r(kbt,"from_pretrained()"),kbt.forEach(t),Rnr=r(UZ," to load the model weights."),UZ.forEach(t),Pnr=i(g0),T(ST.$$.fragment,g0),g0.forEach(t),Bnr=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(Qy.$$.fragment,Ta),Inr=i(Ta),F3e=n(Ta,"P",{});var Sbt=s(F3e);qnr=r(Sbt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Sbt.forEach(t),Nnr=i(Ta),Ha=n(Ta,"P",{});var h0=s(Ha);jnr=r(h0,"The model class to instantiate is selected based on the "),T3e=n(h0,"CODE",{});var Rbt=s(T3e);Dnr=r(Rbt,"model_type"),Rbt.forEach(t),Gnr=r(h0,` property of the config object (either
passed as an argument or loaded from `),M3e=n(h0,"CODE",{});var Pbt=s(M3e);Onr=r(Pbt,"pretrained_model_name_or_path"),Pbt.forEach(t),Vnr=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E3e=n(h0,"CODE",{});var Bbt=s(E3e);Xnr=r(Bbt,"pretrained_model_name_or_path"),Bbt.forEach(t),znr=r(h0,":"),h0.forEach(t),Wnr=i(Ta),C3e=n(Ta,"UL",{});var Ibt=s(C3e);RT=n(Ibt,"LI",{});var Xke=s(RT);w3e=n(Xke,"STRONG",{});var qbt=s(w3e);Qnr=r(qbt,"detr"),qbt.forEach(t),Hnr=r(Xke," \u2014 "),jz=n(Xke,"A",{href:!0});var Nbt=s(jz);Unr=r(Nbt,"DetrForSegmentation"),Nbt.forEach(t),Jnr=r(Xke," (DETR model)"),Xke.forEach(t),Ibt.forEach(t),Ynr=i(Ta),PT=n(Ta,"P",{});var zke=s(PT);Knr=r(zke,"The model is set in evaluation mode by default using "),A3e=n(zke,"CODE",{});var jbt=s(A3e);Znr=r(jbt,"model.eval()"),jbt.forEach(t),esr=r(zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y3e=n(zke,"CODE",{});var Dbt=s(y3e);osr=r(Dbt,"model.train()"),Dbt.forEach(t),zke.forEach(t),rsr=i(Ta),T(BT.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),qNe=i(f),Bd=n(f,"H2",{class:!0});var VDe=s(Bd);IT=n(VDe,"A",{id:!0,class:!0,href:!0});var Gbt=s(IT);L3e=n(Gbt,"SPAN",{});var Obt=s(L3e);T(Hy.$$.fragment,Obt),Obt.forEach(t),Gbt.forEach(t),tsr=i(VDe),x3e=n(VDe,"SPAN",{});var Vbt=s(x3e);asr=r(Vbt,"AutoModelForSemanticSegmentation"),Vbt.forEach(t),VDe.forEach(t),NNe=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(Uy.$$.fragment,fl),nsr=i(fl),Id=n(fl,"P",{});var JZ=s(Id);ssr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Dz=n(JZ,"A",{href:!0});var Xbt=s(Dz);lsr=r(Xbt,"from_pretrained()"),Xbt.forEach(t),isr=r(JZ," class method or the "),Gz=n(JZ,"A",{href:!0});var zbt=s(Gz);dsr=r(zbt,"from_config()"),zbt.forEach(t),csr=r(JZ,` class
method.`),JZ.forEach(t),fsr=i(fl),Jy=n(fl,"P",{});var XDe=s(Jy);msr=r(XDe,"This class cannot be instantiated directly using "),$3e=n(XDe,"CODE",{});var Wbt=s($3e);gsr=r(Wbt,"__init__()"),Wbt.forEach(t),hsr=r(XDe," (throws an error)."),XDe.forEach(t),psr=i(fl),wt=n(fl,"DIV",{class:!0});var p0=s(wt);T(Yy.$$.fragment,p0),usr=i(p0),k3e=n(p0,"P",{});var Qbt=s(k3e);_sr=r(Qbt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Qbt.forEach(t),bsr=i(p0),qd=n(p0,"P",{});var YZ=s(qd);vsr=r(YZ,`Note:
Loading a model from its configuration file does `),S3e=n(YZ,"STRONG",{});var Hbt=s(S3e);Fsr=r(Hbt,"not"),Hbt.forEach(t),Tsr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=n(YZ,"A",{href:!0});var Ubt=s(Oz);Msr=r(Ubt,"from_pretrained()"),Ubt.forEach(t),Esr=r(YZ," to load the model weights."),YZ.forEach(t),Csr=i(p0),T(qT.$$.fragment,p0),p0.forEach(t),wsr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(Ky.$$.fragment,Ma),Asr=i(Ma),R3e=n(Ma,"P",{});var Jbt=s(R3e);ysr=r(Jbt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Jbt.forEach(t),Lsr=i(Ma),Ua=n(Ma,"P",{});var u0=s(Ua);xsr=r(u0,"The model class to instantiate is selected based on the "),P3e=n(u0,"CODE",{});var Ybt=s(P3e);$sr=r(Ybt,"model_type"),Ybt.forEach(t),ksr=r(u0,` property of the config object (either
passed as an argument or loaded from `),B3e=n(u0,"CODE",{});var Kbt=s(B3e);Ssr=r(Kbt,"pretrained_model_name_or_path"),Kbt.forEach(t),Rsr=r(u0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I3e=n(u0,"CODE",{});var Zbt=s(I3e);Psr=r(Zbt,"pretrained_model_name_or_path"),Zbt.forEach(t),Bsr=r(u0,":"),u0.forEach(t),Isr=i(Ma),Ja=n(Ma,"UL",{});var _0=s(Ja);NT=n(_0,"LI",{});var Wke=s(NT);q3e=n(Wke,"STRONG",{});var e2t=s(q3e);qsr=r(e2t,"beit"),e2t.forEach(t),Nsr=r(Wke," \u2014 "),Vz=n(Wke,"A",{href:!0});var o2t=s(Vz);jsr=r(o2t,"BeitForSemanticSegmentation"),o2t.forEach(t),Dsr=r(Wke," (BEiT model)"),Wke.forEach(t),Gsr=i(_0),jT=n(_0,"LI",{});var Qke=s(jT);N3e=n(Qke,"STRONG",{});var r2t=s(N3e);Osr=r(r2t,"data2vec-vision"),r2t.forEach(t),Vsr=r(Qke," \u2014 "),Xz=n(Qke,"A",{href:!0});var t2t=s(Xz);Xsr=r(t2t,"Data2VecVisionForSemanticSegmentation"),t2t.forEach(t),zsr=r(Qke," (Data2VecVision model)"),Qke.forEach(t),Wsr=i(_0),DT=n(_0,"LI",{});var Hke=s(DT);j3e=n(Hke,"STRONG",{});var a2t=s(j3e);Qsr=r(a2t,"dpt"),a2t.forEach(t),Hsr=r(Hke," \u2014 "),zz=n(Hke,"A",{href:!0});var n2t=s(zz);Usr=r(n2t,"DPTForSemanticSegmentation"),n2t.forEach(t),Jsr=r(Hke," (DPT model)"),Hke.forEach(t),Ysr=i(_0),GT=n(_0,"LI",{});var Uke=s(GT);D3e=n(Uke,"STRONG",{});var s2t=s(D3e);Ksr=r(s2t,"segformer"),s2t.forEach(t),Zsr=r(Uke," \u2014 "),Wz=n(Uke,"A",{href:!0});var l2t=s(Wz);elr=r(l2t,"SegformerForSemanticSegmentation"),l2t.forEach(t),olr=r(Uke," (SegFormer model)"),Uke.forEach(t),_0.forEach(t),rlr=i(Ma),OT=n(Ma,"P",{});var Jke=s(OT);tlr=r(Jke,"The model is set in evaluation mode by default using "),G3e=n(Jke,"CODE",{});var i2t=s(G3e);alr=r(i2t,"model.eval()"),i2t.forEach(t),nlr=r(Jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O3e=n(Jke,"CODE",{});var d2t=s(O3e);slr=r(d2t,"model.train()"),d2t.forEach(t),Jke.forEach(t),llr=i(Ma),T(VT.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),jNe=i(f),Nd=n(f,"H2",{class:!0});var zDe=s(Nd);XT=n(zDe,"A",{id:!0,class:!0,href:!0});var c2t=s(XT);V3e=n(c2t,"SPAN",{});var f2t=s(V3e);T(Zy.$$.fragment,f2t),f2t.forEach(t),c2t.forEach(t),ilr=i(zDe),X3e=n(zDe,"SPAN",{});var m2t=s(X3e);dlr=r(m2t,"AutoModelForInstanceSegmentation"),m2t.forEach(t),zDe.forEach(t),DNe=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(eL.$$.fragment,ml),clr=i(ml),jd=n(ml,"P",{});var KZ=s(jd);flr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Qz=n(KZ,"A",{href:!0});var g2t=s(Qz);mlr=r(g2t,"from_pretrained()"),g2t.forEach(t),glr=r(KZ," class method or the "),Hz=n(KZ,"A",{href:!0});var h2t=s(Hz);hlr=r(h2t,"from_config()"),h2t.forEach(t),plr=r(KZ,` class
method.`),KZ.forEach(t),ulr=i(ml),oL=n(ml,"P",{});var WDe=s(oL);_lr=r(WDe,"This class cannot be instantiated directly using "),z3e=n(WDe,"CODE",{});var p2t=s(z3e);blr=r(p2t,"__init__()"),p2t.forEach(t),vlr=r(WDe," (throws an error)."),WDe.forEach(t),Flr=i(ml),At=n(ml,"DIV",{class:!0});var b0=s(At);T(rL.$$.fragment,b0),Tlr=i(b0),W3e=n(b0,"P",{});var u2t=s(W3e);Mlr=r(u2t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),u2t.forEach(t),Elr=i(b0),Dd=n(b0,"P",{});var ZZ=s(Dd);Clr=r(ZZ,`Note:
Loading a model from its configuration file does `),Q3e=n(ZZ,"STRONG",{});var _2t=s(Q3e);wlr=r(_2t,"not"),_2t.forEach(t),Alr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=n(ZZ,"A",{href:!0});var b2t=s(Uz);ylr=r(b2t,"from_pretrained()"),b2t.forEach(t),Llr=r(ZZ," to load the model weights."),ZZ.forEach(t),xlr=i(b0),T(zT.$$.fragment,b0),b0.forEach(t),$lr=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(tL.$$.fragment,Ea),klr=i(Ea),H3e=n(Ea,"P",{});var v2t=s(H3e);Slr=r(v2t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),v2t.forEach(t),Rlr=i(Ea),Ya=n(Ea,"P",{});var v0=s(Ya);Plr=r(v0,"The model class to instantiate is selected based on the "),U3e=n(v0,"CODE",{});var F2t=s(U3e);Blr=r(F2t,"model_type"),F2t.forEach(t),Ilr=r(v0,` property of the config object (either
passed as an argument or loaded from `),J3e=n(v0,"CODE",{});var T2t=s(J3e);qlr=r(T2t,"pretrained_model_name_or_path"),T2t.forEach(t),Nlr=r(v0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y3e=n(v0,"CODE",{});var M2t=s(Y3e);jlr=r(M2t,"pretrained_model_name_or_path"),M2t.forEach(t),Dlr=r(v0,":"),v0.forEach(t),Glr=i(Ea),K3e=n(Ea,"UL",{});var E2t=s(K3e);WT=n(E2t,"LI",{});var Yke=s(WT);Z3e=n(Yke,"STRONG",{});var C2t=s(Z3e);Olr=r(C2t,"maskformer"),C2t.forEach(t),Vlr=r(Yke," \u2014 "),Jz=n(Yke,"A",{href:!0});var w2t=s(Jz);Xlr=r(w2t,"MaskFormerForInstanceSegmentation"),w2t.forEach(t),zlr=r(Yke," (MaskFormer model)"),Yke.forEach(t),E2t.forEach(t),Wlr=i(Ea),QT=n(Ea,"P",{});var Kke=s(QT);Qlr=r(Kke,"The model is set in evaluation mode by default using "),e1e=n(Kke,"CODE",{});var A2t=s(e1e);Hlr=r(A2t,"model.eval()"),A2t.forEach(t),Ulr=r(Kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=n(Kke,"CODE",{});var y2t=s(o1e);Jlr=r(y2t,"model.train()"),y2t.forEach(t),Kke.forEach(t),Ylr=i(Ea),T(HT.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),GNe=i(f),Gd=n(f,"H2",{class:!0});var QDe=s(Gd);UT=n(QDe,"A",{id:!0,class:!0,href:!0});var L2t=s(UT);r1e=n(L2t,"SPAN",{});var x2t=s(r1e);T(aL.$$.fragment,x2t),x2t.forEach(t),L2t.forEach(t),Klr=i(QDe),t1e=n(QDe,"SPAN",{});var $2t=s(t1e);Zlr=r($2t,"TFAutoModel"),$2t.forEach(t),QDe.forEach(t),ONe=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(nL.$$.fragment,gl),eir=i(gl),Od=n(gl,"P",{});var eee=s(Od);oir=r(eee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Yz=n(eee,"A",{href:!0});var k2t=s(Yz);rir=r(k2t,"from_pretrained()"),k2t.forEach(t),tir=r(eee," class method or the "),Kz=n(eee,"A",{href:!0});var S2t=s(Kz);air=r(S2t,"from_config()"),S2t.forEach(t),nir=r(eee,` class
method.`),eee.forEach(t),sir=i(gl),sL=n(gl,"P",{});var HDe=s(sL);lir=r(HDe,"This class cannot be instantiated directly using "),a1e=n(HDe,"CODE",{});var R2t=s(a1e);iir=r(R2t,"__init__()"),R2t.forEach(t),dir=r(HDe," (throws an error)."),HDe.forEach(t),cir=i(gl),yt=n(gl,"DIV",{class:!0});var F0=s(yt);T(lL.$$.fragment,F0),fir=i(F0),n1e=n(F0,"P",{});var P2t=s(n1e);mir=r(P2t,"Instantiates one of the base model classes of the library from a configuration."),P2t.forEach(t),gir=i(F0),Vd=n(F0,"P",{});var oee=s(Vd);hir=r(oee,`Note:
Loading a model from its configuration file does `),s1e=n(oee,"STRONG",{});var B2t=s(s1e);pir=r(B2t,"not"),B2t.forEach(t),uir=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=n(oee,"A",{href:!0});var I2t=s(Zz);_ir=r(I2t,"from_pretrained()"),I2t.forEach(t),bir=r(oee," to load the model weights."),oee.forEach(t),vir=i(F0),T(JT.$$.fragment,F0),F0.forEach(t),Fir=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(iL.$$.fragment,hl),Tir=i(hl),l1e=n(hl,"P",{});var q2t=s(l1e);Mir=r(q2t,"Instantiate one of the base model classes of the library from a pretrained model."),q2t.forEach(t),Eir=i(hl),Ka=n(hl,"P",{});var T0=s(Ka);Cir=r(T0,"The model class to instantiate is selected based on the "),i1e=n(T0,"CODE",{});var N2t=s(i1e);wir=r(N2t,"model_type"),N2t.forEach(t),Air=r(T0,` property of the config object (either
passed as an argument or loaded from `),d1e=n(T0,"CODE",{});var j2t=s(d1e);yir=r(j2t,"pretrained_model_name_or_path"),j2t.forEach(t),Lir=r(T0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=n(T0,"CODE",{});var D2t=s(c1e);xir=r(D2t,"pretrained_model_name_or_path"),D2t.forEach(t),$ir=r(T0,":"),T0.forEach(t),kir=i(hl),N=n(hl,"UL",{});var D=s(N);YT=n(D,"LI",{});var Zke=s(YT);f1e=n(Zke,"STRONG",{});var G2t=s(f1e);Sir=r(G2t,"albert"),G2t.forEach(t),Rir=r(Zke," \u2014 "),eW=n(Zke,"A",{href:!0});var O2t=s(eW);Pir=r(O2t,"TFAlbertModel"),O2t.forEach(t),Bir=r(Zke," (ALBERT model)"),Zke.forEach(t),Iir=i(D),KT=n(D,"LI",{});var eSe=s(KT);m1e=n(eSe,"STRONG",{});var V2t=s(m1e);qir=r(V2t,"bart"),V2t.forEach(t),Nir=r(eSe," \u2014 "),oW=n(eSe,"A",{href:!0});var X2t=s(oW);jir=r(X2t,"TFBartModel"),X2t.forEach(t),Dir=r(eSe," (BART model)"),eSe.forEach(t),Gir=i(D),ZT=n(D,"LI",{});var oSe=s(ZT);g1e=n(oSe,"STRONG",{});var z2t=s(g1e);Oir=r(z2t,"bert"),z2t.forEach(t),Vir=r(oSe," \u2014 "),rW=n(oSe,"A",{href:!0});var W2t=s(rW);Xir=r(W2t,"TFBertModel"),W2t.forEach(t),zir=r(oSe," (BERT model)"),oSe.forEach(t),Wir=i(D),e7=n(D,"LI",{});var rSe=s(e7);h1e=n(rSe,"STRONG",{});var Q2t=s(h1e);Qir=r(Q2t,"blenderbot"),Q2t.forEach(t),Hir=r(rSe," \u2014 "),tW=n(rSe,"A",{href:!0});var H2t=s(tW);Uir=r(H2t,"TFBlenderbotModel"),H2t.forEach(t),Jir=r(rSe," (Blenderbot model)"),rSe.forEach(t),Yir=i(D),o7=n(D,"LI",{});var tSe=s(o7);p1e=n(tSe,"STRONG",{});var U2t=s(p1e);Kir=r(U2t,"blenderbot-small"),U2t.forEach(t),Zir=r(tSe," \u2014 "),aW=n(tSe,"A",{href:!0});var J2t=s(aW);edr=r(J2t,"TFBlenderbotSmallModel"),J2t.forEach(t),odr=r(tSe," (BlenderbotSmall model)"),tSe.forEach(t),rdr=i(D),r7=n(D,"LI",{});var aSe=s(r7);u1e=n(aSe,"STRONG",{});var Y2t=s(u1e);tdr=r(Y2t,"camembert"),Y2t.forEach(t),adr=r(aSe," \u2014 "),nW=n(aSe,"A",{href:!0});var K2t=s(nW);ndr=r(K2t,"TFCamembertModel"),K2t.forEach(t),sdr=r(aSe," (CamemBERT model)"),aSe.forEach(t),ldr=i(D),t7=n(D,"LI",{});var nSe=s(t7);_1e=n(nSe,"STRONG",{});var Z2t=s(_1e);idr=r(Z2t,"clip"),Z2t.forEach(t),ddr=r(nSe," \u2014 "),sW=n(nSe,"A",{href:!0});var evt=s(sW);cdr=r(evt,"TFCLIPModel"),evt.forEach(t),fdr=r(nSe," (CLIP model)"),nSe.forEach(t),mdr=i(D),a7=n(D,"LI",{});var sSe=s(a7);b1e=n(sSe,"STRONG",{});var ovt=s(b1e);gdr=r(ovt,"convbert"),ovt.forEach(t),hdr=r(sSe," \u2014 "),lW=n(sSe,"A",{href:!0});var rvt=s(lW);pdr=r(rvt,"TFConvBertModel"),rvt.forEach(t),udr=r(sSe," (ConvBERT model)"),sSe.forEach(t),_dr=i(D),n7=n(D,"LI",{});var lSe=s(n7);v1e=n(lSe,"STRONG",{});var tvt=s(v1e);bdr=r(tvt,"convnext"),tvt.forEach(t),vdr=r(lSe," \u2014 "),iW=n(lSe,"A",{href:!0});var avt=s(iW);Fdr=r(avt,"TFConvNextModel"),avt.forEach(t),Tdr=r(lSe," (ConvNext model)"),lSe.forEach(t),Mdr=i(D),s7=n(D,"LI",{});var iSe=s(s7);F1e=n(iSe,"STRONG",{});var nvt=s(F1e);Edr=r(nvt,"ctrl"),nvt.forEach(t),Cdr=r(iSe," \u2014 "),dW=n(iSe,"A",{href:!0});var svt=s(dW);wdr=r(svt,"TFCTRLModel"),svt.forEach(t),Adr=r(iSe," (CTRL model)"),iSe.forEach(t),ydr=i(D),l7=n(D,"LI",{});var dSe=s(l7);T1e=n(dSe,"STRONG",{});var lvt=s(T1e);Ldr=r(lvt,"data2vec-vision"),lvt.forEach(t),xdr=r(dSe," \u2014 "),cW=n(dSe,"A",{href:!0});var ivt=s(cW);$dr=r(ivt,"TFData2VecVisionModel"),ivt.forEach(t),kdr=r(dSe," (Data2VecVision model)"),dSe.forEach(t),Sdr=i(D),i7=n(D,"LI",{});var cSe=s(i7);M1e=n(cSe,"STRONG",{});var dvt=s(M1e);Rdr=r(dvt,"deberta"),dvt.forEach(t),Pdr=r(cSe," \u2014 "),fW=n(cSe,"A",{href:!0});var cvt=s(fW);Bdr=r(cvt,"TFDebertaModel"),cvt.forEach(t),Idr=r(cSe," (DeBERTa model)"),cSe.forEach(t),qdr=i(D),d7=n(D,"LI",{});var fSe=s(d7);E1e=n(fSe,"STRONG",{});var fvt=s(E1e);Ndr=r(fvt,"deberta-v2"),fvt.forEach(t),jdr=r(fSe," \u2014 "),mW=n(fSe,"A",{href:!0});var mvt=s(mW);Ddr=r(mvt,"TFDebertaV2Model"),mvt.forEach(t),Gdr=r(fSe," (DeBERTa-v2 model)"),fSe.forEach(t),Odr=i(D),c7=n(D,"LI",{});var mSe=s(c7);C1e=n(mSe,"STRONG",{});var gvt=s(C1e);Vdr=r(gvt,"distilbert"),gvt.forEach(t),Xdr=r(mSe," \u2014 "),gW=n(mSe,"A",{href:!0});var hvt=s(gW);zdr=r(hvt,"TFDistilBertModel"),hvt.forEach(t),Wdr=r(mSe," (DistilBERT model)"),mSe.forEach(t),Qdr=i(D),f7=n(D,"LI",{});var gSe=s(f7);w1e=n(gSe,"STRONG",{});var pvt=s(w1e);Hdr=r(pvt,"dpr"),pvt.forEach(t),Udr=r(gSe," \u2014 "),hW=n(gSe,"A",{href:!0});var uvt=s(hW);Jdr=r(uvt,"TFDPRQuestionEncoder"),uvt.forEach(t),Ydr=r(gSe," (DPR model)"),gSe.forEach(t),Kdr=i(D),m7=n(D,"LI",{});var hSe=s(m7);A1e=n(hSe,"STRONG",{});var _vt=s(A1e);Zdr=r(_vt,"electra"),_vt.forEach(t),ecr=r(hSe," \u2014 "),pW=n(hSe,"A",{href:!0});var bvt=s(pW);ocr=r(bvt,"TFElectraModel"),bvt.forEach(t),rcr=r(hSe," (ELECTRA model)"),hSe.forEach(t),tcr=i(D),g7=n(D,"LI",{});var pSe=s(g7);y1e=n(pSe,"STRONG",{});var vvt=s(y1e);acr=r(vvt,"flaubert"),vvt.forEach(t),ncr=r(pSe," \u2014 "),uW=n(pSe,"A",{href:!0});var Fvt=s(uW);scr=r(Fvt,"TFFlaubertModel"),Fvt.forEach(t),lcr=r(pSe," (FlauBERT model)"),pSe.forEach(t),icr=i(D),Is=n(D,"LI",{});var D$=s(Is);L1e=n(D$,"STRONG",{});var Tvt=s(L1e);dcr=r(Tvt,"funnel"),Tvt.forEach(t),ccr=r(D$," \u2014 "),_W=n(D$,"A",{href:!0});var Mvt=s(_W);fcr=r(Mvt,"TFFunnelModel"),Mvt.forEach(t),mcr=r(D$," or "),bW=n(D$,"A",{href:!0});var Evt=s(bW);gcr=r(Evt,"TFFunnelBaseModel"),Evt.forEach(t),hcr=r(D$," (Funnel Transformer model)"),D$.forEach(t),pcr=i(D),h7=n(D,"LI",{});var uSe=s(h7);x1e=n(uSe,"STRONG",{});var Cvt=s(x1e);ucr=r(Cvt,"gpt2"),Cvt.forEach(t),_cr=r(uSe," \u2014 "),vW=n(uSe,"A",{href:!0});var wvt=s(vW);bcr=r(wvt,"TFGPT2Model"),wvt.forEach(t),vcr=r(uSe," (OpenAI GPT-2 model)"),uSe.forEach(t),Fcr=i(D),p7=n(D,"LI",{});var _Se=s(p7);$1e=n(_Se,"STRONG",{});var Avt=s($1e);Tcr=r(Avt,"gptj"),Avt.forEach(t),Mcr=r(_Se," \u2014 "),FW=n(_Se,"A",{href:!0});var yvt=s(FW);Ecr=r(yvt,"TFGPTJModel"),yvt.forEach(t),Ccr=r(_Se," (GPT-J model)"),_Se.forEach(t),wcr=i(D),u7=n(D,"LI",{});var bSe=s(u7);k1e=n(bSe,"STRONG",{});var Lvt=s(k1e);Acr=r(Lvt,"hubert"),Lvt.forEach(t),ycr=r(bSe," \u2014 "),TW=n(bSe,"A",{href:!0});var xvt=s(TW);Lcr=r(xvt,"TFHubertModel"),xvt.forEach(t),xcr=r(bSe," (Hubert model)"),bSe.forEach(t),$cr=i(D),_7=n(D,"LI",{});var vSe=s(_7);S1e=n(vSe,"STRONG",{});var $vt=s(S1e);kcr=r($vt,"layoutlm"),$vt.forEach(t),Scr=r(vSe," \u2014 "),MW=n(vSe,"A",{href:!0});var kvt=s(MW);Rcr=r(kvt,"TFLayoutLMModel"),kvt.forEach(t),Pcr=r(vSe," (LayoutLM model)"),vSe.forEach(t),Bcr=i(D),b7=n(D,"LI",{});var FSe=s(b7);R1e=n(FSe,"STRONG",{});var Svt=s(R1e);Icr=r(Svt,"led"),Svt.forEach(t),qcr=r(FSe," \u2014 "),EW=n(FSe,"A",{href:!0});var Rvt=s(EW);Ncr=r(Rvt,"TFLEDModel"),Rvt.forEach(t),jcr=r(FSe," (LED model)"),FSe.forEach(t),Dcr=i(D),v7=n(D,"LI",{});var TSe=s(v7);P1e=n(TSe,"STRONG",{});var Pvt=s(P1e);Gcr=r(Pvt,"longformer"),Pvt.forEach(t),Ocr=r(TSe," \u2014 "),CW=n(TSe,"A",{href:!0});var Bvt=s(CW);Vcr=r(Bvt,"TFLongformerModel"),Bvt.forEach(t),Xcr=r(TSe," (Longformer model)"),TSe.forEach(t),zcr=i(D),F7=n(D,"LI",{});var MSe=s(F7);B1e=n(MSe,"STRONG",{});var Ivt=s(B1e);Wcr=r(Ivt,"lxmert"),Ivt.forEach(t),Qcr=r(MSe," \u2014 "),wW=n(MSe,"A",{href:!0});var qvt=s(wW);Hcr=r(qvt,"TFLxmertModel"),qvt.forEach(t),Ucr=r(MSe," (LXMERT model)"),MSe.forEach(t),Jcr=i(D),T7=n(D,"LI",{});var ESe=s(T7);I1e=n(ESe,"STRONG",{});var Nvt=s(I1e);Ycr=r(Nvt,"marian"),Nvt.forEach(t),Kcr=r(ESe," \u2014 "),AW=n(ESe,"A",{href:!0});var jvt=s(AW);Zcr=r(jvt,"TFMarianModel"),jvt.forEach(t),efr=r(ESe," (Marian model)"),ESe.forEach(t),ofr=i(D),M7=n(D,"LI",{});var CSe=s(M7);q1e=n(CSe,"STRONG",{});var Dvt=s(q1e);rfr=r(Dvt,"mbart"),Dvt.forEach(t),tfr=r(CSe," \u2014 "),yW=n(CSe,"A",{href:!0});var Gvt=s(yW);afr=r(Gvt,"TFMBartModel"),Gvt.forEach(t),nfr=r(CSe," (mBART model)"),CSe.forEach(t),sfr=i(D),E7=n(D,"LI",{});var wSe=s(E7);N1e=n(wSe,"STRONG",{});var Ovt=s(N1e);lfr=r(Ovt,"mobilebert"),Ovt.forEach(t),ifr=r(wSe," \u2014 "),LW=n(wSe,"A",{href:!0});var Vvt=s(LW);dfr=r(Vvt,"TFMobileBertModel"),Vvt.forEach(t),cfr=r(wSe," (MobileBERT model)"),wSe.forEach(t),ffr=i(D),C7=n(D,"LI",{});var ASe=s(C7);j1e=n(ASe,"STRONG",{});var Xvt=s(j1e);mfr=r(Xvt,"mpnet"),Xvt.forEach(t),gfr=r(ASe," \u2014 "),xW=n(ASe,"A",{href:!0});var zvt=s(xW);hfr=r(zvt,"TFMPNetModel"),zvt.forEach(t),pfr=r(ASe," (MPNet model)"),ASe.forEach(t),ufr=i(D),w7=n(D,"LI",{});var ySe=s(w7);D1e=n(ySe,"STRONG",{});var Wvt=s(D1e);_fr=r(Wvt,"mt5"),Wvt.forEach(t),bfr=r(ySe," \u2014 "),$W=n(ySe,"A",{href:!0});var Qvt=s($W);vfr=r(Qvt,"TFMT5Model"),Qvt.forEach(t),Ffr=r(ySe," (mT5 model)"),ySe.forEach(t),Tfr=i(D),A7=n(D,"LI",{});var LSe=s(A7);G1e=n(LSe,"STRONG",{});var Hvt=s(G1e);Mfr=r(Hvt,"openai-gpt"),Hvt.forEach(t),Efr=r(LSe," \u2014 "),kW=n(LSe,"A",{href:!0});var Uvt=s(kW);Cfr=r(Uvt,"TFOpenAIGPTModel"),Uvt.forEach(t),wfr=r(LSe," (OpenAI GPT model)"),LSe.forEach(t),Afr=i(D),y7=n(D,"LI",{});var xSe=s(y7);O1e=n(xSe,"STRONG",{});var Jvt=s(O1e);yfr=r(Jvt,"pegasus"),Jvt.forEach(t),Lfr=r(xSe," \u2014 "),SW=n(xSe,"A",{href:!0});var Yvt=s(SW);xfr=r(Yvt,"TFPegasusModel"),Yvt.forEach(t),$fr=r(xSe," (Pegasus model)"),xSe.forEach(t),kfr=i(D),L7=n(D,"LI",{});var $Se=s(L7);V1e=n($Se,"STRONG",{});var Kvt=s(V1e);Sfr=r(Kvt,"rembert"),Kvt.forEach(t),Rfr=r($Se," \u2014 "),RW=n($Se,"A",{href:!0});var Zvt=s(RW);Pfr=r(Zvt,"TFRemBertModel"),Zvt.forEach(t),Bfr=r($Se," (RemBERT model)"),$Se.forEach(t),Ifr=i(D),x7=n(D,"LI",{});var kSe=s(x7);X1e=n(kSe,"STRONG",{});var eFt=s(X1e);qfr=r(eFt,"roberta"),eFt.forEach(t),Nfr=r(kSe," \u2014 "),PW=n(kSe,"A",{href:!0});var oFt=s(PW);jfr=r(oFt,"TFRobertaModel"),oFt.forEach(t),Dfr=r(kSe," (RoBERTa model)"),kSe.forEach(t),Gfr=i(D),$7=n(D,"LI",{});var SSe=s($7);z1e=n(SSe,"STRONG",{});var rFt=s(z1e);Ofr=r(rFt,"roformer"),rFt.forEach(t),Vfr=r(SSe," \u2014 "),BW=n(SSe,"A",{href:!0});var tFt=s(BW);Xfr=r(tFt,"TFRoFormerModel"),tFt.forEach(t),zfr=r(SSe," (RoFormer model)"),SSe.forEach(t),Wfr=i(D),k7=n(D,"LI",{});var RSe=s(k7);W1e=n(RSe,"STRONG",{});var aFt=s(W1e);Qfr=r(aFt,"speech_to_text"),aFt.forEach(t),Hfr=r(RSe," \u2014 "),IW=n(RSe,"A",{href:!0});var nFt=s(IW);Ufr=r(nFt,"TFSpeech2TextModel"),nFt.forEach(t),Jfr=r(RSe," (Speech2Text model)"),RSe.forEach(t),Yfr=i(D),S7=n(D,"LI",{});var PSe=s(S7);Q1e=n(PSe,"STRONG",{});var sFt=s(Q1e);Kfr=r(sFt,"swin"),sFt.forEach(t),Zfr=r(PSe," \u2014 "),qW=n(PSe,"A",{href:!0});var lFt=s(qW);emr=r(lFt,"TFSwinModel"),lFt.forEach(t),omr=r(PSe," (Swin model)"),PSe.forEach(t),rmr=i(D),R7=n(D,"LI",{});var BSe=s(R7);H1e=n(BSe,"STRONG",{});var iFt=s(H1e);tmr=r(iFt,"t5"),iFt.forEach(t),amr=r(BSe," \u2014 "),NW=n(BSe,"A",{href:!0});var dFt=s(NW);nmr=r(dFt,"TFT5Model"),dFt.forEach(t),smr=r(BSe," (T5 model)"),BSe.forEach(t),lmr=i(D),P7=n(D,"LI",{});var ISe=s(P7);U1e=n(ISe,"STRONG",{});var cFt=s(U1e);imr=r(cFt,"tapas"),cFt.forEach(t),dmr=r(ISe," \u2014 "),jW=n(ISe,"A",{href:!0});var fFt=s(jW);cmr=r(fFt,"TFTapasModel"),fFt.forEach(t),fmr=r(ISe," (TAPAS model)"),ISe.forEach(t),mmr=i(D),B7=n(D,"LI",{});var qSe=s(B7);J1e=n(qSe,"STRONG",{});var mFt=s(J1e);gmr=r(mFt,"transfo-xl"),mFt.forEach(t),hmr=r(qSe," \u2014 "),DW=n(qSe,"A",{href:!0});var gFt=s(DW);pmr=r(gFt,"TFTransfoXLModel"),gFt.forEach(t),umr=r(qSe," (Transformer-XL model)"),qSe.forEach(t),_mr=i(D),I7=n(D,"LI",{});var NSe=s(I7);Y1e=n(NSe,"STRONG",{});var hFt=s(Y1e);bmr=r(hFt,"vit"),hFt.forEach(t),vmr=r(NSe," \u2014 "),GW=n(NSe,"A",{href:!0});var pFt=s(GW);Fmr=r(pFt,"TFViTModel"),pFt.forEach(t),Tmr=r(NSe," (ViT model)"),NSe.forEach(t),Mmr=i(D),q7=n(D,"LI",{});var jSe=s(q7);K1e=n(jSe,"STRONG",{});var uFt=s(K1e);Emr=r(uFt,"vit_mae"),uFt.forEach(t),Cmr=r(jSe," \u2014 "),OW=n(jSe,"A",{href:!0});var _Ft=s(OW);wmr=r(_Ft,"TFViTMAEModel"),_Ft.forEach(t),Amr=r(jSe," (ViTMAE model)"),jSe.forEach(t),ymr=i(D),N7=n(D,"LI",{});var DSe=s(N7);Z1e=n(DSe,"STRONG",{});var bFt=s(Z1e);Lmr=r(bFt,"wav2vec2"),bFt.forEach(t),xmr=r(DSe," \u2014 "),VW=n(DSe,"A",{href:!0});var vFt=s(VW);$mr=r(vFt,"TFWav2Vec2Model"),vFt.forEach(t),kmr=r(DSe," (Wav2Vec2 model)"),DSe.forEach(t),Smr=i(D),j7=n(D,"LI",{});var GSe=s(j7);ebe=n(GSe,"STRONG",{});var FFt=s(ebe);Rmr=r(FFt,"xlm"),FFt.forEach(t),Pmr=r(GSe," \u2014 "),XW=n(GSe,"A",{href:!0});var TFt=s(XW);Bmr=r(TFt,"TFXLMModel"),TFt.forEach(t),Imr=r(GSe," (XLM model)"),GSe.forEach(t),qmr=i(D),D7=n(D,"LI",{});var OSe=s(D7);obe=n(OSe,"STRONG",{});var MFt=s(obe);Nmr=r(MFt,"xlm-roberta"),MFt.forEach(t),jmr=r(OSe," \u2014 "),zW=n(OSe,"A",{href:!0});var EFt=s(zW);Dmr=r(EFt,"TFXLMRobertaModel"),EFt.forEach(t),Gmr=r(OSe," (XLM-RoBERTa model)"),OSe.forEach(t),Omr=i(D),G7=n(D,"LI",{});var VSe=s(G7);rbe=n(VSe,"STRONG",{});var CFt=s(rbe);Vmr=r(CFt,"xlnet"),CFt.forEach(t),Xmr=r(VSe," \u2014 "),WW=n(VSe,"A",{href:!0});var wFt=s(WW);zmr=r(wFt,"TFXLNetModel"),wFt.forEach(t),Wmr=r(VSe," (XLNet model)"),VSe.forEach(t),D.forEach(t),Qmr=i(hl),T(O7.$$.fragment,hl),hl.forEach(t),gl.forEach(t),VNe=i(f),Xd=n(f,"H2",{class:!0});var UDe=s(Xd);V7=n(UDe,"A",{id:!0,class:!0,href:!0});var AFt=s(V7);tbe=n(AFt,"SPAN",{});var yFt=s(tbe);T(dL.$$.fragment,yFt),yFt.forEach(t),AFt.forEach(t),Hmr=i(UDe),abe=n(UDe,"SPAN",{});var LFt=s(abe);Umr=r(LFt,"TFAutoModelForPreTraining"),LFt.forEach(t),UDe.forEach(t),XNe=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(cL.$$.fragment,pl),Jmr=i(pl),zd=n(pl,"P",{});var ree=s(zd);Ymr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),QW=n(ree,"A",{href:!0});var xFt=s(QW);Kmr=r(xFt,"from_pretrained()"),xFt.forEach(t),Zmr=r(ree," class method or the "),HW=n(ree,"A",{href:!0});var $Ft=s(HW);egr=r($Ft,"from_config()"),$Ft.forEach(t),ogr=r(ree,` class
method.`),ree.forEach(t),rgr=i(pl),fL=n(pl,"P",{});var JDe=s(fL);tgr=r(JDe,"This class cannot be instantiated directly using "),nbe=n(JDe,"CODE",{});var kFt=s(nbe);agr=r(kFt,"__init__()"),kFt.forEach(t),ngr=r(JDe," (throws an error)."),JDe.forEach(t),sgr=i(pl),Lt=n(pl,"DIV",{class:!0});var M0=s(Lt);T(mL.$$.fragment,M0),lgr=i(M0),sbe=n(M0,"P",{});var SFt=s(sbe);igr=r(SFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),SFt.forEach(t),dgr=i(M0),Wd=n(M0,"P",{});var tee=s(Wd);cgr=r(tee,`Note:
Loading a model from its configuration file does `),lbe=n(tee,"STRONG",{});var RFt=s(lbe);fgr=r(RFt,"not"),RFt.forEach(t),mgr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(tee,"A",{href:!0});var PFt=s(UW);ggr=r(PFt,"from_pretrained()"),PFt.forEach(t),hgr=r(tee," to load the model weights."),tee.forEach(t),pgr=i(M0),T(X7.$$.fragment,M0),M0.forEach(t),ugr=i(pl),Ar=n(pl,"DIV",{class:!0});var ul=s(Ar);T(gL.$$.fragment,ul),_gr=i(ul),ibe=n(ul,"P",{});var BFt=s(ibe);bgr=r(BFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BFt.forEach(t),vgr=i(ul),Za=n(ul,"P",{});var E0=s(Za);Fgr=r(E0,"The model class to instantiate is selected based on the "),dbe=n(E0,"CODE",{});var IFt=s(dbe);Tgr=r(IFt,"model_type"),IFt.forEach(t),Mgr=r(E0,` property of the config object (either
passed as an argument or loaded from `),cbe=n(E0,"CODE",{});var qFt=s(cbe);Egr=r(qFt,"pretrained_model_name_or_path"),qFt.forEach(t),Cgr=r(E0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=n(E0,"CODE",{});var NFt=s(fbe);wgr=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),Agr=r(E0,":"),E0.forEach(t),ygr=i(ul),se=n(ul,"UL",{});var le=s(se);z7=n(le,"LI",{});var XSe=s(z7);mbe=n(XSe,"STRONG",{});var jFt=s(mbe);Lgr=r(jFt,"albert"),jFt.forEach(t),xgr=r(XSe," \u2014 "),JW=n(XSe,"A",{href:!0});var DFt=s(JW);$gr=r(DFt,"TFAlbertForPreTraining"),DFt.forEach(t),kgr=r(XSe," (ALBERT model)"),XSe.forEach(t),Sgr=i(le),W7=n(le,"LI",{});var zSe=s(W7);gbe=n(zSe,"STRONG",{});var GFt=s(gbe);Rgr=r(GFt,"bart"),GFt.forEach(t),Pgr=r(zSe," \u2014 "),YW=n(zSe,"A",{href:!0});var OFt=s(YW);Bgr=r(OFt,"TFBartForConditionalGeneration"),OFt.forEach(t),Igr=r(zSe," (BART model)"),zSe.forEach(t),qgr=i(le),Q7=n(le,"LI",{});var WSe=s(Q7);hbe=n(WSe,"STRONG",{});var VFt=s(hbe);Ngr=r(VFt,"bert"),VFt.forEach(t),jgr=r(WSe," \u2014 "),KW=n(WSe,"A",{href:!0});var XFt=s(KW);Dgr=r(XFt,"TFBertForPreTraining"),XFt.forEach(t),Ggr=r(WSe," (BERT model)"),WSe.forEach(t),Ogr=i(le),H7=n(le,"LI",{});var QSe=s(H7);pbe=n(QSe,"STRONG",{});var zFt=s(pbe);Vgr=r(zFt,"camembert"),zFt.forEach(t),Xgr=r(QSe," \u2014 "),ZW=n(QSe,"A",{href:!0});var WFt=s(ZW);zgr=r(WFt,"TFCamembertForMaskedLM"),WFt.forEach(t),Wgr=r(QSe," (CamemBERT model)"),QSe.forEach(t),Qgr=i(le),U7=n(le,"LI",{});var HSe=s(U7);ube=n(HSe,"STRONG",{});var QFt=s(ube);Hgr=r(QFt,"ctrl"),QFt.forEach(t),Ugr=r(HSe," \u2014 "),eQ=n(HSe,"A",{href:!0});var HFt=s(eQ);Jgr=r(HFt,"TFCTRLLMHeadModel"),HFt.forEach(t),Ygr=r(HSe," (CTRL model)"),HSe.forEach(t),Kgr=i(le),J7=n(le,"LI",{});var USe=s(J7);_be=n(USe,"STRONG",{});var UFt=s(_be);Zgr=r(UFt,"distilbert"),UFt.forEach(t),ehr=r(USe," \u2014 "),oQ=n(USe,"A",{href:!0});var JFt=s(oQ);ohr=r(JFt,"TFDistilBertForMaskedLM"),JFt.forEach(t),rhr=r(USe," (DistilBERT model)"),USe.forEach(t),thr=i(le),Y7=n(le,"LI",{});var JSe=s(Y7);bbe=n(JSe,"STRONG",{});var YFt=s(bbe);ahr=r(YFt,"electra"),YFt.forEach(t),nhr=r(JSe," \u2014 "),rQ=n(JSe,"A",{href:!0});var KFt=s(rQ);shr=r(KFt,"TFElectraForPreTraining"),KFt.forEach(t),lhr=r(JSe," (ELECTRA model)"),JSe.forEach(t),ihr=i(le),K7=n(le,"LI",{});var YSe=s(K7);vbe=n(YSe,"STRONG",{});var ZFt=s(vbe);dhr=r(ZFt,"flaubert"),ZFt.forEach(t),chr=r(YSe," \u2014 "),tQ=n(YSe,"A",{href:!0});var eTt=s(tQ);fhr=r(eTt,"TFFlaubertWithLMHeadModel"),eTt.forEach(t),mhr=r(YSe," (FlauBERT model)"),YSe.forEach(t),ghr=i(le),Z7=n(le,"LI",{});var KSe=s(Z7);Fbe=n(KSe,"STRONG",{});var oTt=s(Fbe);hhr=r(oTt,"funnel"),oTt.forEach(t),phr=r(KSe," \u2014 "),aQ=n(KSe,"A",{href:!0});var rTt=s(aQ);uhr=r(rTt,"TFFunnelForPreTraining"),rTt.forEach(t),_hr=r(KSe," (Funnel Transformer model)"),KSe.forEach(t),bhr=i(le),e9=n(le,"LI",{});var ZSe=s(e9);Tbe=n(ZSe,"STRONG",{});var tTt=s(Tbe);vhr=r(tTt,"gpt2"),tTt.forEach(t),Fhr=r(ZSe," \u2014 "),nQ=n(ZSe,"A",{href:!0});var aTt=s(nQ);Thr=r(aTt,"TFGPT2LMHeadModel"),aTt.forEach(t),Mhr=r(ZSe," (OpenAI GPT-2 model)"),ZSe.forEach(t),Ehr=i(le),o9=n(le,"LI",{});var eRe=s(o9);Mbe=n(eRe,"STRONG",{});var nTt=s(Mbe);Chr=r(nTt,"layoutlm"),nTt.forEach(t),whr=r(eRe," \u2014 "),sQ=n(eRe,"A",{href:!0});var sTt=s(sQ);Ahr=r(sTt,"TFLayoutLMForMaskedLM"),sTt.forEach(t),yhr=r(eRe," (LayoutLM model)"),eRe.forEach(t),Lhr=i(le),r9=n(le,"LI",{});var oRe=s(r9);Ebe=n(oRe,"STRONG",{});var lTt=s(Ebe);xhr=r(lTt,"lxmert"),lTt.forEach(t),$hr=r(oRe," \u2014 "),lQ=n(oRe,"A",{href:!0});var iTt=s(lQ);khr=r(iTt,"TFLxmertForPreTraining"),iTt.forEach(t),Shr=r(oRe," (LXMERT model)"),oRe.forEach(t),Rhr=i(le),t9=n(le,"LI",{});var rRe=s(t9);Cbe=n(rRe,"STRONG",{});var dTt=s(Cbe);Phr=r(dTt,"mobilebert"),dTt.forEach(t),Bhr=r(rRe," \u2014 "),iQ=n(rRe,"A",{href:!0});var cTt=s(iQ);Ihr=r(cTt,"TFMobileBertForPreTraining"),cTt.forEach(t),qhr=r(rRe," (MobileBERT model)"),rRe.forEach(t),Nhr=i(le),a9=n(le,"LI",{});var tRe=s(a9);wbe=n(tRe,"STRONG",{});var fTt=s(wbe);jhr=r(fTt,"mpnet"),fTt.forEach(t),Dhr=r(tRe," \u2014 "),dQ=n(tRe,"A",{href:!0});var mTt=s(dQ);Ghr=r(mTt,"TFMPNetForMaskedLM"),mTt.forEach(t),Ohr=r(tRe," (MPNet model)"),tRe.forEach(t),Vhr=i(le),n9=n(le,"LI",{});var aRe=s(n9);Abe=n(aRe,"STRONG",{});var gTt=s(Abe);Xhr=r(gTt,"openai-gpt"),gTt.forEach(t),zhr=r(aRe," \u2014 "),cQ=n(aRe,"A",{href:!0});var hTt=s(cQ);Whr=r(hTt,"TFOpenAIGPTLMHeadModel"),hTt.forEach(t),Qhr=r(aRe," (OpenAI GPT model)"),aRe.forEach(t),Hhr=i(le),s9=n(le,"LI",{});var nRe=s(s9);ybe=n(nRe,"STRONG",{});var pTt=s(ybe);Uhr=r(pTt,"roberta"),pTt.forEach(t),Jhr=r(nRe," \u2014 "),fQ=n(nRe,"A",{href:!0});var uTt=s(fQ);Yhr=r(uTt,"TFRobertaForMaskedLM"),uTt.forEach(t),Khr=r(nRe," (RoBERTa model)"),nRe.forEach(t),Zhr=i(le),l9=n(le,"LI",{});var sRe=s(l9);Lbe=n(sRe,"STRONG",{});var _Tt=s(Lbe);epr=r(_Tt,"t5"),_Tt.forEach(t),opr=r(sRe," \u2014 "),mQ=n(sRe,"A",{href:!0});var bTt=s(mQ);rpr=r(bTt,"TFT5ForConditionalGeneration"),bTt.forEach(t),tpr=r(sRe," (T5 model)"),sRe.forEach(t),apr=i(le),i9=n(le,"LI",{});var lRe=s(i9);xbe=n(lRe,"STRONG",{});var vTt=s(xbe);npr=r(vTt,"tapas"),vTt.forEach(t),spr=r(lRe," \u2014 "),gQ=n(lRe,"A",{href:!0});var FTt=s(gQ);lpr=r(FTt,"TFTapasForMaskedLM"),FTt.forEach(t),ipr=r(lRe," (TAPAS model)"),lRe.forEach(t),dpr=i(le),d9=n(le,"LI",{});var iRe=s(d9);$be=n(iRe,"STRONG",{});var TTt=s($be);cpr=r(TTt,"transfo-xl"),TTt.forEach(t),fpr=r(iRe," \u2014 "),hQ=n(iRe,"A",{href:!0});var MTt=s(hQ);mpr=r(MTt,"TFTransfoXLLMHeadModel"),MTt.forEach(t),gpr=r(iRe," (Transformer-XL model)"),iRe.forEach(t),hpr=i(le),c9=n(le,"LI",{});var dRe=s(c9);kbe=n(dRe,"STRONG",{});var ETt=s(kbe);ppr=r(ETt,"vit_mae"),ETt.forEach(t),upr=r(dRe," \u2014 "),pQ=n(dRe,"A",{href:!0});var CTt=s(pQ);_pr=r(CTt,"TFViTMAEForPreTraining"),CTt.forEach(t),bpr=r(dRe," (ViTMAE model)"),dRe.forEach(t),vpr=i(le),f9=n(le,"LI",{});var cRe=s(f9);Sbe=n(cRe,"STRONG",{});var wTt=s(Sbe);Fpr=r(wTt,"xlm"),wTt.forEach(t),Tpr=r(cRe," \u2014 "),uQ=n(cRe,"A",{href:!0});var ATt=s(uQ);Mpr=r(ATt,"TFXLMWithLMHeadModel"),ATt.forEach(t),Epr=r(cRe," (XLM model)"),cRe.forEach(t),Cpr=i(le),m9=n(le,"LI",{});var fRe=s(m9);Rbe=n(fRe,"STRONG",{});var yTt=s(Rbe);wpr=r(yTt,"xlm-roberta"),yTt.forEach(t),Apr=r(fRe," \u2014 "),_Q=n(fRe,"A",{href:!0});var LTt=s(_Q);ypr=r(LTt,"TFXLMRobertaForMaskedLM"),LTt.forEach(t),Lpr=r(fRe," (XLM-RoBERTa model)"),fRe.forEach(t),xpr=i(le),g9=n(le,"LI",{});var mRe=s(g9);Pbe=n(mRe,"STRONG",{});var xTt=s(Pbe);$pr=r(xTt,"xlnet"),xTt.forEach(t),kpr=r(mRe," \u2014 "),bQ=n(mRe,"A",{href:!0});var $Tt=s(bQ);Spr=r($Tt,"TFXLNetLMHeadModel"),$Tt.forEach(t),Rpr=r(mRe," (XLNet model)"),mRe.forEach(t),le.forEach(t),Ppr=i(ul),T(h9.$$.fragment,ul),ul.forEach(t),pl.forEach(t),zNe=i(f),Qd=n(f,"H2",{class:!0});var YDe=s(Qd);p9=n(YDe,"A",{id:!0,class:!0,href:!0});var kTt=s(p9);Bbe=n(kTt,"SPAN",{});var STt=s(Bbe);T(hL.$$.fragment,STt),STt.forEach(t),kTt.forEach(t),Bpr=i(YDe),Ibe=n(YDe,"SPAN",{});var RTt=s(Ibe);Ipr=r(RTt,"TFAutoModelForCausalLM"),RTt.forEach(t),YDe.forEach(t),WNe=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(pL.$$.fragment,_l),qpr=i(_l),Hd=n(_l,"P",{});var aee=s(Hd);Npr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vQ=n(aee,"A",{href:!0});var PTt=s(vQ);jpr=r(PTt,"from_pretrained()"),PTt.forEach(t),Dpr=r(aee," class method or the "),FQ=n(aee,"A",{href:!0});var BTt=s(FQ);Gpr=r(BTt,"from_config()"),BTt.forEach(t),Opr=r(aee,` class
method.`),aee.forEach(t),Vpr=i(_l),uL=n(_l,"P",{});var KDe=s(uL);Xpr=r(KDe,"This class cannot be instantiated directly using "),qbe=n(KDe,"CODE",{});var ITt=s(qbe);zpr=r(ITt,"__init__()"),ITt.forEach(t),Wpr=r(KDe," (throws an error)."),KDe.forEach(t),Qpr=i(_l),xt=n(_l,"DIV",{class:!0});var C0=s(xt);T(_L.$$.fragment,C0),Hpr=i(C0),Nbe=n(C0,"P",{});var qTt=s(Nbe);Upr=r(qTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qTt.forEach(t),Jpr=i(C0),Ud=n(C0,"P",{});var nee=s(Ud);Ypr=r(nee,`Note:
Loading a model from its configuration file does `),jbe=n(nee,"STRONG",{});var NTt=s(jbe);Kpr=r(NTt,"not"),NTt.forEach(t),Zpr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(nee,"A",{href:!0});var jTt=s(TQ);eur=r(jTt,"from_pretrained()"),jTt.forEach(t),our=r(nee," to load the model weights."),nee.forEach(t),rur=i(C0),T(u9.$$.fragment,C0),C0.forEach(t),tur=i(_l),yr=n(_l,"DIV",{class:!0});var bl=s(yr);T(bL.$$.fragment,bl),aur=i(bl),Dbe=n(bl,"P",{});var DTt=s(Dbe);nur=r(DTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),DTt.forEach(t),sur=i(bl),en=n(bl,"P",{});var w0=s(en);lur=r(w0,"The model class to instantiate is selected based on the "),Gbe=n(w0,"CODE",{});var GTt=s(Gbe);iur=r(GTt,"model_type"),GTt.forEach(t),dur=r(w0,` property of the config object (either
passed as an argument or loaded from `),Obe=n(w0,"CODE",{});var OTt=s(Obe);cur=r(OTt,"pretrained_model_name_or_path"),OTt.forEach(t),fur=r(w0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=n(w0,"CODE",{});var VTt=s(Vbe);mur=r(VTt,"pretrained_model_name_or_path"),VTt.forEach(t),gur=r(w0,":"),w0.forEach(t),hur=i(bl),Me=n(bl,"UL",{});var Ce=s(Me);_9=n(Ce,"LI",{});var gRe=s(_9);Xbe=n(gRe,"STRONG",{});var XTt=s(Xbe);pur=r(XTt,"bert"),XTt.forEach(t),uur=r(gRe," \u2014 "),MQ=n(gRe,"A",{href:!0});var zTt=s(MQ);_ur=r(zTt,"TFBertLMHeadModel"),zTt.forEach(t),bur=r(gRe," (BERT model)"),gRe.forEach(t),vur=i(Ce),b9=n(Ce,"LI",{});var hRe=s(b9);zbe=n(hRe,"STRONG",{});var WTt=s(zbe);Fur=r(WTt,"camembert"),WTt.forEach(t),Tur=r(hRe," \u2014 "),EQ=n(hRe,"A",{href:!0});var QTt=s(EQ);Mur=r(QTt,"TFCamembertForCausalLM"),QTt.forEach(t),Eur=r(hRe," (CamemBERT model)"),hRe.forEach(t),Cur=i(Ce),v9=n(Ce,"LI",{});var pRe=s(v9);Wbe=n(pRe,"STRONG",{});var HTt=s(Wbe);wur=r(HTt,"ctrl"),HTt.forEach(t),Aur=r(pRe," \u2014 "),CQ=n(pRe,"A",{href:!0});var UTt=s(CQ);yur=r(UTt,"TFCTRLLMHeadModel"),UTt.forEach(t),Lur=r(pRe," (CTRL model)"),pRe.forEach(t),xur=i(Ce),F9=n(Ce,"LI",{});var uRe=s(F9);Qbe=n(uRe,"STRONG",{});var JTt=s(Qbe);$ur=r(JTt,"gpt2"),JTt.forEach(t),kur=r(uRe," \u2014 "),wQ=n(uRe,"A",{href:!0});var YTt=s(wQ);Sur=r(YTt,"TFGPT2LMHeadModel"),YTt.forEach(t),Rur=r(uRe," (OpenAI GPT-2 model)"),uRe.forEach(t),Pur=i(Ce),T9=n(Ce,"LI",{});var _Re=s(T9);Hbe=n(_Re,"STRONG",{});var KTt=s(Hbe);Bur=r(KTt,"gptj"),KTt.forEach(t),Iur=r(_Re," \u2014 "),AQ=n(_Re,"A",{href:!0});var ZTt=s(AQ);qur=r(ZTt,"TFGPTJForCausalLM"),ZTt.forEach(t),Nur=r(_Re," (GPT-J model)"),_Re.forEach(t),jur=i(Ce),M9=n(Ce,"LI",{});var bRe=s(M9);Ube=n(bRe,"STRONG",{});var e7t=s(Ube);Dur=r(e7t,"openai-gpt"),e7t.forEach(t),Gur=r(bRe," \u2014 "),yQ=n(bRe,"A",{href:!0});var o7t=s(yQ);Our=r(o7t,"TFOpenAIGPTLMHeadModel"),o7t.forEach(t),Vur=r(bRe," (OpenAI GPT model)"),bRe.forEach(t),Xur=i(Ce),E9=n(Ce,"LI",{});var vRe=s(E9);Jbe=n(vRe,"STRONG",{});var r7t=s(Jbe);zur=r(r7t,"rembert"),r7t.forEach(t),Wur=r(vRe," \u2014 "),LQ=n(vRe,"A",{href:!0});var t7t=s(LQ);Qur=r(t7t,"TFRemBertForCausalLM"),t7t.forEach(t),Hur=r(vRe," (RemBERT model)"),vRe.forEach(t),Uur=i(Ce),C9=n(Ce,"LI",{});var FRe=s(C9);Ybe=n(FRe,"STRONG",{});var a7t=s(Ybe);Jur=r(a7t,"roberta"),a7t.forEach(t),Yur=r(FRe," \u2014 "),xQ=n(FRe,"A",{href:!0});var n7t=s(xQ);Kur=r(n7t,"TFRobertaForCausalLM"),n7t.forEach(t),Zur=r(FRe," (RoBERTa model)"),FRe.forEach(t),e_r=i(Ce),w9=n(Ce,"LI",{});var TRe=s(w9);Kbe=n(TRe,"STRONG",{});var s7t=s(Kbe);o_r=r(s7t,"roformer"),s7t.forEach(t),r_r=r(TRe," \u2014 "),$Q=n(TRe,"A",{href:!0});var l7t=s($Q);t_r=r(l7t,"TFRoFormerForCausalLM"),l7t.forEach(t),a_r=r(TRe," (RoFormer model)"),TRe.forEach(t),n_r=i(Ce),A9=n(Ce,"LI",{});var MRe=s(A9);Zbe=n(MRe,"STRONG",{});var i7t=s(Zbe);s_r=r(i7t,"transfo-xl"),i7t.forEach(t),l_r=r(MRe," \u2014 "),kQ=n(MRe,"A",{href:!0});var d7t=s(kQ);i_r=r(d7t,"TFTransfoXLLMHeadModel"),d7t.forEach(t),d_r=r(MRe," (Transformer-XL model)"),MRe.forEach(t),c_r=i(Ce),y9=n(Ce,"LI",{});var ERe=s(y9);e2e=n(ERe,"STRONG",{});var c7t=s(e2e);f_r=r(c7t,"xlm"),c7t.forEach(t),m_r=r(ERe," \u2014 "),SQ=n(ERe,"A",{href:!0});var f7t=s(SQ);g_r=r(f7t,"TFXLMWithLMHeadModel"),f7t.forEach(t),h_r=r(ERe," (XLM model)"),ERe.forEach(t),p_r=i(Ce),L9=n(Ce,"LI",{});var CRe=s(L9);o2e=n(CRe,"STRONG",{});var m7t=s(o2e);u_r=r(m7t,"xlnet"),m7t.forEach(t),__r=r(CRe," \u2014 "),RQ=n(CRe,"A",{href:!0});var g7t=s(RQ);b_r=r(g7t,"TFXLNetLMHeadModel"),g7t.forEach(t),v_r=r(CRe," (XLNet model)"),CRe.forEach(t),Ce.forEach(t),F_r=i(bl),T(x9.$$.fragment,bl),bl.forEach(t),_l.forEach(t),QNe=i(f),Jd=n(f,"H2",{class:!0});var ZDe=s(Jd);$9=n(ZDe,"A",{id:!0,class:!0,href:!0});var h7t=s($9);r2e=n(h7t,"SPAN",{});var p7t=s(r2e);T(vL.$$.fragment,p7t),p7t.forEach(t),h7t.forEach(t),T_r=i(ZDe),t2e=n(ZDe,"SPAN",{});var u7t=s(t2e);M_r=r(u7t,"TFAutoModelForImageClassification"),u7t.forEach(t),ZDe.forEach(t),HNe=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(FL.$$.fragment,vl),E_r=i(vl),Yd=n(vl,"P",{});var see=s(Yd);C_r=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PQ=n(see,"A",{href:!0});var _7t=s(PQ);w_r=r(_7t,"from_pretrained()"),_7t.forEach(t),A_r=r(see," class method or the "),BQ=n(see,"A",{href:!0});var b7t=s(BQ);y_r=r(b7t,"from_config()"),b7t.forEach(t),L_r=r(see,` class
method.`),see.forEach(t),x_r=i(vl),TL=n(vl,"P",{});var eGe=s(TL);$_r=r(eGe,"This class cannot be instantiated directly using "),a2e=n(eGe,"CODE",{});var v7t=s(a2e);k_r=r(v7t,"__init__()"),v7t.forEach(t),S_r=r(eGe," (throws an error)."),eGe.forEach(t),R_r=i(vl),$t=n(vl,"DIV",{class:!0});var A0=s($t);T(ML.$$.fragment,A0),P_r=i(A0),n2e=n(A0,"P",{});var F7t=s(n2e);B_r=r(F7t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),F7t.forEach(t),I_r=i(A0),Kd=n(A0,"P",{});var lee=s(Kd);q_r=r(lee,`Note:
Loading a model from its configuration file does `),s2e=n(lee,"STRONG",{});var T7t=s(s2e);N_r=r(T7t,"not"),T7t.forEach(t),j_r=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(lee,"A",{href:!0});var M7t=s(IQ);D_r=r(M7t,"from_pretrained()"),M7t.forEach(t),G_r=r(lee," to load the model weights."),lee.forEach(t),O_r=i(A0),T(k9.$$.fragment,A0),A0.forEach(t),V_r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(EL.$$.fragment,Fl),X_r=i(Fl),l2e=n(Fl,"P",{});var E7t=s(l2e);z_r=r(E7t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),E7t.forEach(t),W_r=i(Fl),on=n(Fl,"P",{});var y0=s(on);Q_r=r(y0,"The model class to instantiate is selected based on the "),i2e=n(y0,"CODE",{});var C7t=s(i2e);H_r=r(C7t,"model_type"),C7t.forEach(t),U_r=r(y0,` property of the config object (either
passed as an argument or loaded from `),d2e=n(y0,"CODE",{});var w7t=s(d2e);J_r=r(w7t,"pretrained_model_name_or_path"),w7t.forEach(t),Y_r=r(y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=n(y0,"CODE",{});var A7t=s(c2e);K_r=r(A7t,"pretrained_model_name_or_path"),A7t.forEach(t),Z_r=r(y0,":"),y0.forEach(t),e3r=i(Fl),rn=n(Fl,"UL",{});var L0=s(rn);S9=n(L0,"LI",{});var wRe=s(S9);f2e=n(wRe,"STRONG",{});var y7t=s(f2e);o3r=r(y7t,"convnext"),y7t.forEach(t),r3r=r(wRe," \u2014 "),qQ=n(wRe,"A",{href:!0});var L7t=s(qQ);t3r=r(L7t,"TFConvNextForImageClassification"),L7t.forEach(t),a3r=r(wRe," (ConvNext model)"),wRe.forEach(t),n3r=i(L0),R9=n(L0,"LI",{});var ARe=s(R9);m2e=n(ARe,"STRONG",{});var x7t=s(m2e);s3r=r(x7t,"data2vec-vision"),x7t.forEach(t),l3r=r(ARe," \u2014 "),NQ=n(ARe,"A",{href:!0});var $7t=s(NQ);i3r=r($7t,"TFData2VecVisionForImageClassification"),$7t.forEach(t),d3r=r(ARe," (Data2VecVision model)"),ARe.forEach(t),c3r=i(L0),P9=n(L0,"LI",{});var yRe=s(P9);g2e=n(yRe,"STRONG",{});var k7t=s(g2e);f3r=r(k7t,"swin"),k7t.forEach(t),m3r=r(yRe," \u2014 "),jQ=n(yRe,"A",{href:!0});var S7t=s(jQ);g3r=r(S7t,"TFSwinForImageClassification"),S7t.forEach(t),h3r=r(yRe," (Swin model)"),yRe.forEach(t),p3r=i(L0),B9=n(L0,"LI",{});var LRe=s(B9);h2e=n(LRe,"STRONG",{});var R7t=s(h2e);u3r=r(R7t,"vit"),R7t.forEach(t),_3r=r(LRe," \u2014 "),DQ=n(LRe,"A",{href:!0});var P7t=s(DQ);b3r=r(P7t,"TFViTForImageClassification"),P7t.forEach(t),v3r=r(LRe," (ViT model)"),LRe.forEach(t),L0.forEach(t),F3r=i(Fl),T(I9.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),UNe=i(f),Zd=n(f,"H2",{class:!0});var oGe=s(Zd);q9=n(oGe,"A",{id:!0,class:!0,href:!0});var B7t=s(q9);p2e=n(B7t,"SPAN",{});var I7t=s(p2e);T(CL.$$.fragment,I7t),I7t.forEach(t),B7t.forEach(t),T3r=i(oGe),u2e=n(oGe,"SPAN",{});var q7t=s(u2e);M3r=r(q7t,"TFAutoModelForMaskedLM"),q7t.forEach(t),oGe.forEach(t),JNe=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(wL.$$.fragment,Tl),E3r=i(Tl),ec=n(Tl,"P",{});var iee=s(ec);C3r=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GQ=n(iee,"A",{href:!0});var N7t=s(GQ);w3r=r(N7t,"from_pretrained()"),N7t.forEach(t),A3r=r(iee," class method or the "),OQ=n(iee,"A",{href:!0});var j7t=s(OQ);y3r=r(j7t,"from_config()"),j7t.forEach(t),L3r=r(iee,` class
method.`),iee.forEach(t),x3r=i(Tl),AL=n(Tl,"P",{});var rGe=s(AL);$3r=r(rGe,"This class cannot be instantiated directly using "),_2e=n(rGe,"CODE",{});var D7t=s(_2e);k3r=r(D7t,"__init__()"),D7t.forEach(t),S3r=r(rGe," (throws an error)."),rGe.forEach(t),R3r=i(Tl),kt=n(Tl,"DIV",{class:!0});var x0=s(kt);T(yL.$$.fragment,x0),P3r=i(x0),b2e=n(x0,"P",{});var G7t=s(b2e);B3r=r(G7t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),G7t.forEach(t),I3r=i(x0),oc=n(x0,"P",{});var dee=s(oc);q3r=r(dee,`Note:
Loading a model from its configuration file does `),v2e=n(dee,"STRONG",{});var O7t=s(v2e);N3r=r(O7t,"not"),O7t.forEach(t),j3r=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=n(dee,"A",{href:!0});var V7t=s(VQ);D3r=r(V7t,"from_pretrained()"),V7t.forEach(t),G3r=r(dee," to load the model weights."),dee.forEach(t),O3r=i(x0),T(N9.$$.fragment,x0),x0.forEach(t),V3r=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(LL.$$.fragment,Ml),X3r=i(Ml),F2e=n(Ml,"P",{});var X7t=s(F2e);z3r=r(X7t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),X7t.forEach(t),W3r=i(Ml),tn=n(Ml,"P",{});var $0=s(tn);Q3r=r($0,"The model class to instantiate is selected based on the "),T2e=n($0,"CODE",{});var z7t=s(T2e);H3r=r(z7t,"model_type"),z7t.forEach(t),U3r=r($0,` property of the config object (either
passed as an argument or loaded from `),M2e=n($0,"CODE",{});var W7t=s(M2e);J3r=r(W7t,"pretrained_model_name_or_path"),W7t.forEach(t),Y3r=r($0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=n($0,"CODE",{});var Q7t=s(E2e);K3r=r(Q7t,"pretrained_model_name_or_path"),Q7t.forEach(t),Z3r=r($0,":"),$0.forEach(t),e1r=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);j9=n(fe,"LI",{});var xRe=s(j9);C2e=n(xRe,"STRONG",{});var H7t=s(C2e);o1r=r(H7t,"albert"),H7t.forEach(t),r1r=r(xRe," \u2014 "),XQ=n(xRe,"A",{href:!0});var U7t=s(XQ);t1r=r(U7t,"TFAlbertForMaskedLM"),U7t.forEach(t),a1r=r(xRe," (ALBERT model)"),xRe.forEach(t),n1r=i(fe),D9=n(fe,"LI",{});var $Re=s(D9);w2e=n($Re,"STRONG",{});var J7t=s(w2e);s1r=r(J7t,"bert"),J7t.forEach(t),l1r=r($Re," \u2014 "),zQ=n($Re,"A",{href:!0});var Y7t=s(zQ);i1r=r(Y7t,"TFBertForMaskedLM"),Y7t.forEach(t),d1r=r($Re," (BERT model)"),$Re.forEach(t),c1r=i(fe),G9=n(fe,"LI",{});var kRe=s(G9);A2e=n(kRe,"STRONG",{});var K7t=s(A2e);f1r=r(K7t,"camembert"),K7t.forEach(t),m1r=r(kRe," \u2014 "),WQ=n(kRe,"A",{href:!0});var Z7t=s(WQ);g1r=r(Z7t,"TFCamembertForMaskedLM"),Z7t.forEach(t),h1r=r(kRe," (CamemBERT model)"),kRe.forEach(t),p1r=i(fe),O9=n(fe,"LI",{});var SRe=s(O9);y2e=n(SRe,"STRONG",{});var e9t=s(y2e);u1r=r(e9t,"convbert"),e9t.forEach(t),_1r=r(SRe," \u2014 "),QQ=n(SRe,"A",{href:!0});var o9t=s(QQ);b1r=r(o9t,"TFConvBertForMaskedLM"),o9t.forEach(t),v1r=r(SRe," (ConvBERT model)"),SRe.forEach(t),F1r=i(fe),V9=n(fe,"LI",{});var RRe=s(V9);L2e=n(RRe,"STRONG",{});var r9t=s(L2e);T1r=r(r9t,"deberta"),r9t.forEach(t),M1r=r(RRe," \u2014 "),HQ=n(RRe,"A",{href:!0});var t9t=s(HQ);E1r=r(t9t,"TFDebertaForMaskedLM"),t9t.forEach(t),C1r=r(RRe," (DeBERTa model)"),RRe.forEach(t),w1r=i(fe),X9=n(fe,"LI",{});var PRe=s(X9);x2e=n(PRe,"STRONG",{});var a9t=s(x2e);A1r=r(a9t,"deberta-v2"),a9t.forEach(t),y1r=r(PRe," \u2014 "),UQ=n(PRe,"A",{href:!0});var n9t=s(UQ);L1r=r(n9t,"TFDebertaV2ForMaskedLM"),n9t.forEach(t),x1r=r(PRe," (DeBERTa-v2 model)"),PRe.forEach(t),$1r=i(fe),z9=n(fe,"LI",{});var BRe=s(z9);$2e=n(BRe,"STRONG",{});var s9t=s($2e);k1r=r(s9t,"distilbert"),s9t.forEach(t),S1r=r(BRe," \u2014 "),JQ=n(BRe,"A",{href:!0});var l9t=s(JQ);R1r=r(l9t,"TFDistilBertForMaskedLM"),l9t.forEach(t),P1r=r(BRe," (DistilBERT model)"),BRe.forEach(t),B1r=i(fe),W9=n(fe,"LI",{});var IRe=s(W9);k2e=n(IRe,"STRONG",{});var i9t=s(k2e);I1r=r(i9t,"electra"),i9t.forEach(t),q1r=r(IRe," \u2014 "),YQ=n(IRe,"A",{href:!0});var d9t=s(YQ);N1r=r(d9t,"TFElectraForMaskedLM"),d9t.forEach(t),j1r=r(IRe," (ELECTRA model)"),IRe.forEach(t),D1r=i(fe),Q9=n(fe,"LI",{});var qRe=s(Q9);S2e=n(qRe,"STRONG",{});var c9t=s(S2e);G1r=r(c9t,"flaubert"),c9t.forEach(t),O1r=r(qRe," \u2014 "),KQ=n(qRe,"A",{href:!0});var f9t=s(KQ);V1r=r(f9t,"TFFlaubertWithLMHeadModel"),f9t.forEach(t),X1r=r(qRe," (FlauBERT model)"),qRe.forEach(t),z1r=i(fe),H9=n(fe,"LI",{});var NRe=s(H9);R2e=n(NRe,"STRONG",{});var m9t=s(R2e);W1r=r(m9t,"funnel"),m9t.forEach(t),Q1r=r(NRe," \u2014 "),ZQ=n(NRe,"A",{href:!0});var g9t=s(ZQ);H1r=r(g9t,"TFFunnelForMaskedLM"),g9t.forEach(t),U1r=r(NRe," (Funnel Transformer model)"),NRe.forEach(t),J1r=i(fe),U9=n(fe,"LI",{});var jRe=s(U9);P2e=n(jRe,"STRONG",{});var h9t=s(P2e);Y1r=r(h9t,"layoutlm"),h9t.forEach(t),K1r=r(jRe," \u2014 "),eH=n(jRe,"A",{href:!0});var p9t=s(eH);Z1r=r(p9t,"TFLayoutLMForMaskedLM"),p9t.forEach(t),ebr=r(jRe," (LayoutLM model)"),jRe.forEach(t),obr=i(fe),J9=n(fe,"LI",{});var DRe=s(J9);B2e=n(DRe,"STRONG",{});var u9t=s(B2e);rbr=r(u9t,"longformer"),u9t.forEach(t),tbr=r(DRe," \u2014 "),oH=n(DRe,"A",{href:!0});var _9t=s(oH);abr=r(_9t,"TFLongformerForMaskedLM"),_9t.forEach(t),nbr=r(DRe," (Longformer model)"),DRe.forEach(t),sbr=i(fe),Y9=n(fe,"LI",{});var GRe=s(Y9);I2e=n(GRe,"STRONG",{});var b9t=s(I2e);lbr=r(b9t,"mobilebert"),b9t.forEach(t),ibr=r(GRe," \u2014 "),rH=n(GRe,"A",{href:!0});var v9t=s(rH);dbr=r(v9t,"TFMobileBertForMaskedLM"),v9t.forEach(t),cbr=r(GRe," (MobileBERT model)"),GRe.forEach(t),fbr=i(fe),K9=n(fe,"LI",{});var ORe=s(K9);q2e=n(ORe,"STRONG",{});var F9t=s(q2e);mbr=r(F9t,"mpnet"),F9t.forEach(t),gbr=r(ORe," \u2014 "),tH=n(ORe,"A",{href:!0});var T9t=s(tH);hbr=r(T9t,"TFMPNetForMaskedLM"),T9t.forEach(t),pbr=r(ORe," (MPNet model)"),ORe.forEach(t),ubr=i(fe),Z9=n(fe,"LI",{});var VRe=s(Z9);N2e=n(VRe,"STRONG",{});var M9t=s(N2e);_br=r(M9t,"rembert"),M9t.forEach(t),bbr=r(VRe," \u2014 "),aH=n(VRe,"A",{href:!0});var E9t=s(aH);vbr=r(E9t,"TFRemBertForMaskedLM"),E9t.forEach(t),Fbr=r(VRe," (RemBERT model)"),VRe.forEach(t),Tbr=i(fe),eM=n(fe,"LI",{});var XRe=s(eM);j2e=n(XRe,"STRONG",{});var C9t=s(j2e);Mbr=r(C9t,"roberta"),C9t.forEach(t),Ebr=r(XRe," \u2014 "),nH=n(XRe,"A",{href:!0});var w9t=s(nH);Cbr=r(w9t,"TFRobertaForMaskedLM"),w9t.forEach(t),wbr=r(XRe," (RoBERTa model)"),XRe.forEach(t),Abr=i(fe),oM=n(fe,"LI",{});var zRe=s(oM);D2e=n(zRe,"STRONG",{});var A9t=s(D2e);ybr=r(A9t,"roformer"),A9t.forEach(t),Lbr=r(zRe," \u2014 "),sH=n(zRe,"A",{href:!0});var y9t=s(sH);xbr=r(y9t,"TFRoFormerForMaskedLM"),y9t.forEach(t),$br=r(zRe," (RoFormer model)"),zRe.forEach(t),kbr=i(fe),rM=n(fe,"LI",{});var WRe=s(rM);G2e=n(WRe,"STRONG",{});var L9t=s(G2e);Sbr=r(L9t,"tapas"),L9t.forEach(t),Rbr=r(WRe," \u2014 "),lH=n(WRe,"A",{href:!0});var x9t=s(lH);Pbr=r(x9t,"TFTapasForMaskedLM"),x9t.forEach(t),Bbr=r(WRe," (TAPAS model)"),WRe.forEach(t),Ibr=i(fe),tM=n(fe,"LI",{});var QRe=s(tM);O2e=n(QRe,"STRONG",{});var $9t=s(O2e);qbr=r($9t,"xlm"),$9t.forEach(t),Nbr=r(QRe," \u2014 "),iH=n(QRe,"A",{href:!0});var k9t=s(iH);jbr=r(k9t,"TFXLMWithLMHeadModel"),k9t.forEach(t),Dbr=r(QRe," (XLM model)"),QRe.forEach(t),Gbr=i(fe),aM=n(fe,"LI",{});var HRe=s(aM);V2e=n(HRe,"STRONG",{});var S9t=s(V2e);Obr=r(S9t,"xlm-roberta"),S9t.forEach(t),Vbr=r(HRe," \u2014 "),dH=n(HRe,"A",{href:!0});var R9t=s(dH);Xbr=r(R9t,"TFXLMRobertaForMaskedLM"),R9t.forEach(t),zbr=r(HRe," (XLM-RoBERTa model)"),HRe.forEach(t),fe.forEach(t),Wbr=i(Ml),T(nM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),YNe=i(f),rc=n(f,"H2",{class:!0});var tGe=s(rc);sM=n(tGe,"A",{id:!0,class:!0,href:!0});var P9t=s(sM);X2e=n(P9t,"SPAN",{});var B9t=s(X2e);T(xL.$$.fragment,B9t),B9t.forEach(t),P9t.forEach(t),Qbr=i(tGe),z2e=n(tGe,"SPAN",{});var I9t=s(z2e);Hbr=r(I9t,"TFAutoModelForSeq2SeqLM"),I9t.forEach(t),tGe.forEach(t),KNe=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T($L.$$.fragment,El),Ubr=i(El),tc=n(El,"P",{});var cee=s(tc);Jbr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cH=n(cee,"A",{href:!0});var q9t=s(cH);Ybr=r(q9t,"from_pretrained()"),q9t.forEach(t),Kbr=r(cee," class method or the "),fH=n(cee,"A",{href:!0});var N9t=s(fH);Zbr=r(N9t,"from_config()"),N9t.forEach(t),e2r=r(cee,` class
method.`),cee.forEach(t),o2r=i(El),kL=n(El,"P",{});var aGe=s(kL);r2r=r(aGe,"This class cannot be instantiated directly using "),W2e=n(aGe,"CODE",{});var j9t=s(W2e);t2r=r(j9t,"__init__()"),j9t.forEach(t),a2r=r(aGe," (throws an error)."),aGe.forEach(t),n2r=i(El),St=n(El,"DIV",{class:!0});var k0=s(St);T(SL.$$.fragment,k0),s2r=i(k0),Q2e=n(k0,"P",{});var D9t=s(Q2e);l2r=r(D9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),D9t.forEach(t),i2r=i(k0),ac=n(k0,"P",{});var fee=s(ac);d2r=r(fee,`Note:
Loading a model from its configuration file does `),H2e=n(fee,"STRONG",{});var G9t=s(H2e);c2r=r(G9t,"not"),G9t.forEach(t),f2r=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(fee,"A",{href:!0});var O9t=s(mH);m2r=r(O9t,"from_pretrained()"),O9t.forEach(t),g2r=r(fee," to load the model weights."),fee.forEach(t),h2r=i(k0),T(lM.$$.fragment,k0),k0.forEach(t),p2r=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(RL.$$.fragment,Cl),u2r=i(Cl),U2e=n(Cl,"P",{});var V9t=s(U2e);_2r=r(V9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),V9t.forEach(t),b2r=i(Cl),an=n(Cl,"P",{});var S0=s(an);v2r=r(S0,"The model class to instantiate is selected based on the "),J2e=n(S0,"CODE",{});var X9t=s(J2e);F2r=r(X9t,"model_type"),X9t.forEach(t),T2r=r(S0,` property of the config object (either
passed as an argument or loaded from `),Y2e=n(S0,"CODE",{});var z9t=s(Y2e);M2r=r(z9t,"pretrained_model_name_or_path"),z9t.forEach(t),E2r=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=n(S0,"CODE",{});var W9t=s(K2e);C2r=r(W9t,"pretrained_model_name_or_path"),W9t.forEach(t),w2r=r(S0,":"),S0.forEach(t),A2r=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);iM=n(Be,"LI",{});var URe=s(iM);Z2e=n(URe,"STRONG",{});var Q9t=s(Z2e);y2r=r(Q9t,"bart"),Q9t.forEach(t),L2r=r(URe," \u2014 "),gH=n(URe,"A",{href:!0});var H9t=s(gH);x2r=r(H9t,"TFBartForConditionalGeneration"),H9t.forEach(t),$2r=r(URe," (BART model)"),URe.forEach(t),k2r=i(Be),dM=n(Be,"LI",{});var JRe=s(dM);eve=n(JRe,"STRONG",{});var U9t=s(eve);S2r=r(U9t,"blenderbot"),U9t.forEach(t),R2r=r(JRe," \u2014 "),hH=n(JRe,"A",{href:!0});var J9t=s(hH);P2r=r(J9t,"TFBlenderbotForConditionalGeneration"),J9t.forEach(t),B2r=r(JRe," (Blenderbot model)"),JRe.forEach(t),I2r=i(Be),cM=n(Be,"LI",{});var YRe=s(cM);ove=n(YRe,"STRONG",{});var Y9t=s(ove);q2r=r(Y9t,"blenderbot-small"),Y9t.forEach(t),N2r=r(YRe," \u2014 "),pH=n(YRe,"A",{href:!0});var K9t=s(pH);j2r=r(K9t,"TFBlenderbotSmallForConditionalGeneration"),K9t.forEach(t),D2r=r(YRe," (BlenderbotSmall model)"),YRe.forEach(t),G2r=i(Be),fM=n(Be,"LI",{});var KRe=s(fM);rve=n(KRe,"STRONG",{});var Z9t=s(rve);O2r=r(Z9t,"encoder-decoder"),Z9t.forEach(t),V2r=r(KRe," \u2014 "),uH=n(KRe,"A",{href:!0});var eMt=s(uH);X2r=r(eMt,"TFEncoderDecoderModel"),eMt.forEach(t),z2r=r(KRe," (Encoder decoder model)"),KRe.forEach(t),W2r=i(Be),mM=n(Be,"LI",{});var ZRe=s(mM);tve=n(ZRe,"STRONG",{});var oMt=s(tve);Q2r=r(oMt,"led"),oMt.forEach(t),H2r=r(ZRe," \u2014 "),_H=n(ZRe,"A",{href:!0});var rMt=s(_H);U2r=r(rMt,"TFLEDForConditionalGeneration"),rMt.forEach(t),J2r=r(ZRe," (LED model)"),ZRe.forEach(t),Y2r=i(Be),gM=n(Be,"LI",{});var ePe=s(gM);ave=n(ePe,"STRONG",{});var tMt=s(ave);K2r=r(tMt,"marian"),tMt.forEach(t),Z2r=r(ePe," \u2014 "),bH=n(ePe,"A",{href:!0});var aMt=s(bH);evr=r(aMt,"TFMarianMTModel"),aMt.forEach(t),ovr=r(ePe," (Marian model)"),ePe.forEach(t),rvr=i(Be),hM=n(Be,"LI",{});var oPe=s(hM);nve=n(oPe,"STRONG",{});var nMt=s(nve);tvr=r(nMt,"mbart"),nMt.forEach(t),avr=r(oPe," \u2014 "),vH=n(oPe,"A",{href:!0});var sMt=s(vH);nvr=r(sMt,"TFMBartForConditionalGeneration"),sMt.forEach(t),svr=r(oPe," (mBART model)"),oPe.forEach(t),lvr=i(Be),pM=n(Be,"LI",{});var rPe=s(pM);sve=n(rPe,"STRONG",{});var lMt=s(sve);ivr=r(lMt,"mt5"),lMt.forEach(t),dvr=r(rPe," \u2014 "),FH=n(rPe,"A",{href:!0});var iMt=s(FH);cvr=r(iMt,"TFMT5ForConditionalGeneration"),iMt.forEach(t),fvr=r(rPe," (mT5 model)"),rPe.forEach(t),mvr=i(Be),uM=n(Be,"LI",{});var tPe=s(uM);lve=n(tPe,"STRONG",{});var dMt=s(lve);gvr=r(dMt,"pegasus"),dMt.forEach(t),hvr=r(tPe," \u2014 "),TH=n(tPe,"A",{href:!0});var cMt=s(TH);pvr=r(cMt,"TFPegasusForConditionalGeneration"),cMt.forEach(t),uvr=r(tPe," (Pegasus model)"),tPe.forEach(t),_vr=i(Be),_M=n(Be,"LI",{});var aPe=s(_M);ive=n(aPe,"STRONG",{});var fMt=s(ive);bvr=r(fMt,"t5"),fMt.forEach(t),vvr=r(aPe," \u2014 "),MH=n(aPe,"A",{href:!0});var mMt=s(MH);Fvr=r(mMt,"TFT5ForConditionalGeneration"),mMt.forEach(t),Tvr=r(aPe," (T5 model)"),aPe.forEach(t),Be.forEach(t),Mvr=i(Cl),T(bM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),ZNe=i(f),nc=n(f,"H2",{class:!0});var nGe=s(nc);vM=n(nGe,"A",{id:!0,class:!0,href:!0});var gMt=s(vM);dve=n(gMt,"SPAN",{});var hMt=s(dve);T(PL.$$.fragment,hMt),hMt.forEach(t),gMt.forEach(t),Evr=i(nGe),cve=n(nGe,"SPAN",{});var pMt=s(cve);Cvr=r(pMt,"TFAutoModelForSequenceClassification"),pMt.forEach(t),nGe.forEach(t),eje=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(BL.$$.fragment,wl),wvr=i(wl),sc=n(wl,"P",{});var mee=s(sc);Avr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EH=n(mee,"A",{href:!0});var uMt=s(EH);yvr=r(uMt,"from_pretrained()"),uMt.forEach(t),Lvr=r(mee," class method or the "),CH=n(mee,"A",{href:!0});var _Mt=s(CH);xvr=r(_Mt,"from_config()"),_Mt.forEach(t),$vr=r(mee,` class
method.`),mee.forEach(t),kvr=i(wl),IL=n(wl,"P",{});var sGe=s(IL);Svr=r(sGe,"This class cannot be instantiated directly using "),fve=n(sGe,"CODE",{});var bMt=s(fve);Rvr=r(bMt,"__init__()"),bMt.forEach(t),Pvr=r(sGe," (throws an error)."),sGe.forEach(t),Bvr=i(wl),Rt=n(wl,"DIV",{class:!0});var R0=s(Rt);T(qL.$$.fragment,R0),Ivr=i(R0),mve=n(R0,"P",{});var vMt=s(mve);qvr=r(vMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vMt.forEach(t),Nvr=i(R0),lc=n(R0,"P",{});var gee=s(lc);jvr=r(gee,`Note:
Loading a model from its configuration file does `),gve=n(gee,"STRONG",{});var FMt=s(gve);Dvr=r(FMt,"not"),FMt.forEach(t),Gvr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(gee,"A",{href:!0});var TMt=s(wH);Ovr=r(TMt,"from_pretrained()"),TMt.forEach(t),Vvr=r(gee," to load the model weights."),gee.forEach(t),Xvr=i(R0),T(FM.$$.fragment,R0),R0.forEach(t),zvr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(NL.$$.fragment,Al),Wvr=i(Al),hve=n(Al,"P",{});var MMt=s(hve);Qvr=r(MMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),MMt.forEach(t),Hvr=i(Al),nn=n(Al,"P",{});var P0=s(nn);Uvr=r(P0,"The model class to instantiate is selected based on the "),pve=n(P0,"CODE",{});var EMt=s(pve);Jvr=r(EMt,"model_type"),EMt.forEach(t),Yvr=r(P0,` property of the config object (either
passed as an argument or loaded from `),uve=n(P0,"CODE",{});var CMt=s(uve);Kvr=r(CMt,"pretrained_model_name_or_path"),CMt.forEach(t),Zvr=r(P0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=n(P0,"CODE",{});var wMt=s(_ve);eFr=r(wMt,"pretrained_model_name_or_path"),wMt.forEach(t),oFr=r(P0,":"),P0.forEach(t),rFr=i(Al),oe=n(Al,"UL",{});var ae=s(oe);TM=n(ae,"LI",{});var nPe=s(TM);bve=n(nPe,"STRONG",{});var AMt=s(bve);tFr=r(AMt,"albert"),AMt.forEach(t),aFr=r(nPe," \u2014 "),AH=n(nPe,"A",{href:!0});var yMt=s(AH);nFr=r(yMt,"TFAlbertForSequenceClassification"),yMt.forEach(t),sFr=r(nPe," (ALBERT model)"),nPe.forEach(t),lFr=i(ae),MM=n(ae,"LI",{});var sPe=s(MM);vve=n(sPe,"STRONG",{});var LMt=s(vve);iFr=r(LMt,"bert"),LMt.forEach(t),dFr=r(sPe," \u2014 "),yH=n(sPe,"A",{href:!0});var xMt=s(yH);cFr=r(xMt,"TFBertForSequenceClassification"),xMt.forEach(t),fFr=r(sPe," (BERT model)"),sPe.forEach(t),mFr=i(ae),EM=n(ae,"LI",{});var lPe=s(EM);Fve=n(lPe,"STRONG",{});var $Mt=s(Fve);gFr=r($Mt,"camembert"),$Mt.forEach(t),hFr=r(lPe," \u2014 "),LH=n(lPe,"A",{href:!0});var kMt=s(LH);pFr=r(kMt,"TFCamembertForSequenceClassification"),kMt.forEach(t),uFr=r(lPe," (CamemBERT model)"),lPe.forEach(t),_Fr=i(ae),CM=n(ae,"LI",{});var iPe=s(CM);Tve=n(iPe,"STRONG",{});var SMt=s(Tve);bFr=r(SMt,"convbert"),SMt.forEach(t),vFr=r(iPe," \u2014 "),xH=n(iPe,"A",{href:!0});var RMt=s(xH);FFr=r(RMt,"TFConvBertForSequenceClassification"),RMt.forEach(t),TFr=r(iPe," (ConvBERT model)"),iPe.forEach(t),MFr=i(ae),wM=n(ae,"LI",{});var dPe=s(wM);Mve=n(dPe,"STRONG",{});var PMt=s(Mve);EFr=r(PMt,"ctrl"),PMt.forEach(t),CFr=r(dPe," \u2014 "),$H=n(dPe,"A",{href:!0});var BMt=s($H);wFr=r(BMt,"TFCTRLForSequenceClassification"),BMt.forEach(t),AFr=r(dPe," (CTRL model)"),dPe.forEach(t),yFr=i(ae),AM=n(ae,"LI",{});var cPe=s(AM);Eve=n(cPe,"STRONG",{});var IMt=s(Eve);LFr=r(IMt,"deberta"),IMt.forEach(t),xFr=r(cPe," \u2014 "),kH=n(cPe,"A",{href:!0});var qMt=s(kH);$Fr=r(qMt,"TFDebertaForSequenceClassification"),qMt.forEach(t),kFr=r(cPe," (DeBERTa model)"),cPe.forEach(t),SFr=i(ae),yM=n(ae,"LI",{});var fPe=s(yM);Cve=n(fPe,"STRONG",{});var NMt=s(Cve);RFr=r(NMt,"deberta-v2"),NMt.forEach(t),PFr=r(fPe," \u2014 "),SH=n(fPe,"A",{href:!0});var jMt=s(SH);BFr=r(jMt,"TFDebertaV2ForSequenceClassification"),jMt.forEach(t),IFr=r(fPe," (DeBERTa-v2 model)"),fPe.forEach(t),qFr=i(ae),LM=n(ae,"LI",{});var mPe=s(LM);wve=n(mPe,"STRONG",{});var DMt=s(wve);NFr=r(DMt,"distilbert"),DMt.forEach(t),jFr=r(mPe," \u2014 "),RH=n(mPe,"A",{href:!0});var GMt=s(RH);DFr=r(GMt,"TFDistilBertForSequenceClassification"),GMt.forEach(t),GFr=r(mPe," (DistilBERT model)"),mPe.forEach(t),OFr=i(ae),xM=n(ae,"LI",{});var gPe=s(xM);Ave=n(gPe,"STRONG",{});var OMt=s(Ave);VFr=r(OMt,"electra"),OMt.forEach(t),XFr=r(gPe," \u2014 "),PH=n(gPe,"A",{href:!0});var VMt=s(PH);zFr=r(VMt,"TFElectraForSequenceClassification"),VMt.forEach(t),WFr=r(gPe," (ELECTRA model)"),gPe.forEach(t),QFr=i(ae),$M=n(ae,"LI",{});var hPe=s($M);yve=n(hPe,"STRONG",{});var XMt=s(yve);HFr=r(XMt,"flaubert"),XMt.forEach(t),UFr=r(hPe," \u2014 "),BH=n(hPe,"A",{href:!0});var zMt=s(BH);JFr=r(zMt,"TFFlaubertForSequenceClassification"),zMt.forEach(t),YFr=r(hPe," (FlauBERT model)"),hPe.forEach(t),KFr=i(ae),kM=n(ae,"LI",{});var pPe=s(kM);Lve=n(pPe,"STRONG",{});var WMt=s(Lve);ZFr=r(WMt,"funnel"),WMt.forEach(t),eTr=r(pPe," \u2014 "),IH=n(pPe,"A",{href:!0});var QMt=s(IH);oTr=r(QMt,"TFFunnelForSequenceClassification"),QMt.forEach(t),rTr=r(pPe," (Funnel Transformer model)"),pPe.forEach(t),tTr=i(ae),SM=n(ae,"LI",{});var uPe=s(SM);xve=n(uPe,"STRONG",{});var HMt=s(xve);aTr=r(HMt,"gpt2"),HMt.forEach(t),nTr=r(uPe," \u2014 "),qH=n(uPe,"A",{href:!0});var UMt=s(qH);sTr=r(UMt,"TFGPT2ForSequenceClassification"),UMt.forEach(t),lTr=r(uPe," (OpenAI GPT-2 model)"),uPe.forEach(t),iTr=i(ae),RM=n(ae,"LI",{});var _Pe=s(RM);$ve=n(_Pe,"STRONG",{});var JMt=s($ve);dTr=r(JMt,"gptj"),JMt.forEach(t),cTr=r(_Pe," \u2014 "),NH=n(_Pe,"A",{href:!0});var YMt=s(NH);fTr=r(YMt,"TFGPTJForSequenceClassification"),YMt.forEach(t),mTr=r(_Pe," (GPT-J model)"),_Pe.forEach(t),gTr=i(ae),PM=n(ae,"LI",{});var bPe=s(PM);kve=n(bPe,"STRONG",{});var KMt=s(kve);hTr=r(KMt,"layoutlm"),KMt.forEach(t),pTr=r(bPe," \u2014 "),jH=n(bPe,"A",{href:!0});var ZMt=s(jH);uTr=r(ZMt,"TFLayoutLMForSequenceClassification"),ZMt.forEach(t),_Tr=r(bPe," (LayoutLM model)"),bPe.forEach(t),bTr=i(ae),BM=n(ae,"LI",{});var vPe=s(BM);Sve=n(vPe,"STRONG",{});var e4t=s(Sve);vTr=r(e4t,"longformer"),e4t.forEach(t),FTr=r(vPe," \u2014 "),DH=n(vPe,"A",{href:!0});var o4t=s(DH);TTr=r(o4t,"TFLongformerForSequenceClassification"),o4t.forEach(t),MTr=r(vPe," (Longformer model)"),vPe.forEach(t),ETr=i(ae),IM=n(ae,"LI",{});var FPe=s(IM);Rve=n(FPe,"STRONG",{});var r4t=s(Rve);CTr=r(r4t,"mobilebert"),r4t.forEach(t),wTr=r(FPe," \u2014 "),GH=n(FPe,"A",{href:!0});var t4t=s(GH);ATr=r(t4t,"TFMobileBertForSequenceClassification"),t4t.forEach(t),yTr=r(FPe," (MobileBERT model)"),FPe.forEach(t),LTr=i(ae),qM=n(ae,"LI",{});var TPe=s(qM);Pve=n(TPe,"STRONG",{});var a4t=s(Pve);xTr=r(a4t,"mpnet"),a4t.forEach(t),$Tr=r(TPe," \u2014 "),OH=n(TPe,"A",{href:!0});var n4t=s(OH);kTr=r(n4t,"TFMPNetForSequenceClassification"),n4t.forEach(t),STr=r(TPe," (MPNet model)"),TPe.forEach(t),RTr=i(ae),NM=n(ae,"LI",{});var MPe=s(NM);Bve=n(MPe,"STRONG",{});var s4t=s(Bve);PTr=r(s4t,"openai-gpt"),s4t.forEach(t),BTr=r(MPe," \u2014 "),VH=n(MPe,"A",{href:!0});var l4t=s(VH);ITr=r(l4t,"TFOpenAIGPTForSequenceClassification"),l4t.forEach(t),qTr=r(MPe," (OpenAI GPT model)"),MPe.forEach(t),NTr=i(ae),jM=n(ae,"LI",{});var EPe=s(jM);Ive=n(EPe,"STRONG",{});var i4t=s(Ive);jTr=r(i4t,"rembert"),i4t.forEach(t),DTr=r(EPe," \u2014 "),XH=n(EPe,"A",{href:!0});var d4t=s(XH);GTr=r(d4t,"TFRemBertForSequenceClassification"),d4t.forEach(t),OTr=r(EPe," (RemBERT model)"),EPe.forEach(t),VTr=i(ae),DM=n(ae,"LI",{});var CPe=s(DM);qve=n(CPe,"STRONG",{});var c4t=s(qve);XTr=r(c4t,"roberta"),c4t.forEach(t),zTr=r(CPe," \u2014 "),zH=n(CPe,"A",{href:!0});var f4t=s(zH);WTr=r(f4t,"TFRobertaForSequenceClassification"),f4t.forEach(t),QTr=r(CPe," (RoBERTa model)"),CPe.forEach(t),HTr=i(ae),GM=n(ae,"LI",{});var wPe=s(GM);Nve=n(wPe,"STRONG",{});var m4t=s(Nve);UTr=r(m4t,"roformer"),m4t.forEach(t),JTr=r(wPe," \u2014 "),WH=n(wPe,"A",{href:!0});var g4t=s(WH);YTr=r(g4t,"TFRoFormerForSequenceClassification"),g4t.forEach(t),KTr=r(wPe," (RoFormer model)"),wPe.forEach(t),ZTr=i(ae),OM=n(ae,"LI",{});var APe=s(OM);jve=n(APe,"STRONG",{});var h4t=s(jve);e7r=r(h4t,"tapas"),h4t.forEach(t),o7r=r(APe," \u2014 "),QH=n(APe,"A",{href:!0});var p4t=s(QH);r7r=r(p4t,"TFTapasForSequenceClassification"),p4t.forEach(t),t7r=r(APe," (TAPAS model)"),APe.forEach(t),a7r=i(ae),VM=n(ae,"LI",{});var yPe=s(VM);Dve=n(yPe,"STRONG",{});var u4t=s(Dve);n7r=r(u4t,"transfo-xl"),u4t.forEach(t),s7r=r(yPe," \u2014 "),HH=n(yPe,"A",{href:!0});var _4t=s(HH);l7r=r(_4t,"TFTransfoXLForSequenceClassification"),_4t.forEach(t),i7r=r(yPe," (Transformer-XL model)"),yPe.forEach(t),d7r=i(ae),XM=n(ae,"LI",{});var LPe=s(XM);Gve=n(LPe,"STRONG",{});var b4t=s(Gve);c7r=r(b4t,"xlm"),b4t.forEach(t),f7r=r(LPe," \u2014 "),UH=n(LPe,"A",{href:!0});var v4t=s(UH);m7r=r(v4t,"TFXLMForSequenceClassification"),v4t.forEach(t),g7r=r(LPe," (XLM model)"),LPe.forEach(t),h7r=i(ae),zM=n(ae,"LI",{});var xPe=s(zM);Ove=n(xPe,"STRONG",{});var F4t=s(Ove);p7r=r(F4t,"xlm-roberta"),F4t.forEach(t),u7r=r(xPe," \u2014 "),JH=n(xPe,"A",{href:!0});var T4t=s(JH);_7r=r(T4t,"TFXLMRobertaForSequenceClassification"),T4t.forEach(t),b7r=r(xPe," (XLM-RoBERTa model)"),xPe.forEach(t),v7r=i(ae),WM=n(ae,"LI",{});var $Pe=s(WM);Vve=n($Pe,"STRONG",{});var M4t=s(Vve);F7r=r(M4t,"xlnet"),M4t.forEach(t),T7r=r($Pe," \u2014 "),YH=n($Pe,"A",{href:!0});var E4t=s(YH);M7r=r(E4t,"TFXLNetForSequenceClassification"),E4t.forEach(t),E7r=r($Pe," (XLNet model)"),$Pe.forEach(t),ae.forEach(t),C7r=i(Al),T(QM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),oje=i(f),ic=n(f,"H2",{class:!0});var lGe=s(ic);HM=n(lGe,"A",{id:!0,class:!0,href:!0});var C4t=s(HM);Xve=n(C4t,"SPAN",{});var w4t=s(Xve);T(jL.$$.fragment,w4t),w4t.forEach(t),C4t.forEach(t),w7r=i(lGe),zve=n(lGe,"SPAN",{});var A4t=s(zve);A7r=r(A4t,"TFAutoModelForMultipleChoice"),A4t.forEach(t),lGe.forEach(t),rje=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(DL.$$.fragment,yl),y7r=i(yl),dc=n(yl,"P",{});var hee=s(dc);L7r=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KH=n(hee,"A",{href:!0});var y4t=s(KH);x7r=r(y4t,"from_pretrained()"),y4t.forEach(t),$7r=r(hee," class method or the "),ZH=n(hee,"A",{href:!0});var L4t=s(ZH);k7r=r(L4t,"from_config()"),L4t.forEach(t),S7r=r(hee,` class
method.`),hee.forEach(t),R7r=i(yl),GL=n(yl,"P",{});var iGe=s(GL);P7r=r(iGe,"This class cannot be instantiated directly using "),Wve=n(iGe,"CODE",{});var x4t=s(Wve);B7r=r(x4t,"__init__()"),x4t.forEach(t),I7r=r(iGe," (throws an error)."),iGe.forEach(t),q7r=i(yl),Pt=n(yl,"DIV",{class:!0});var B0=s(Pt);T(OL.$$.fragment,B0),N7r=i(B0),Qve=n(B0,"P",{});var $4t=s(Qve);j7r=r($4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$4t.forEach(t),D7r=i(B0),cc=n(B0,"P",{});var pee=s(cc);G7r=r(pee,`Note:
Loading a model from its configuration file does `),Hve=n(pee,"STRONG",{});var k4t=s(Hve);O7r=r(k4t,"not"),k4t.forEach(t),V7r=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=n(pee,"A",{href:!0});var S4t=s(eU);X7r=r(S4t,"from_pretrained()"),S4t.forEach(t),z7r=r(pee," to load the model weights."),pee.forEach(t),W7r=i(B0),T(UM.$$.fragment,B0),B0.forEach(t),Q7r=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(VL.$$.fragment,Ll),H7r=i(Ll),Uve=n(Ll,"P",{});var R4t=s(Uve);U7r=r(R4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),R4t.forEach(t),J7r=i(Ll),sn=n(Ll,"P",{});var I0=s(sn);Y7r=r(I0,"The model class to instantiate is selected based on the "),Jve=n(I0,"CODE",{});var P4t=s(Jve);K7r=r(P4t,"model_type"),P4t.forEach(t),Z7r=r(I0,` property of the config object (either
passed as an argument or loaded from `),Yve=n(I0,"CODE",{});var B4t=s(Yve);e9r=r(B4t,"pretrained_model_name_or_path"),B4t.forEach(t),o9r=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=n(I0,"CODE",{});var I4t=s(Kve);r9r=r(I4t,"pretrained_model_name_or_path"),I4t.forEach(t),t9r=r(I0,":"),I0.forEach(t),a9r=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);JM=n(be,"LI",{});var kPe=s(JM);Zve=n(kPe,"STRONG",{});var q4t=s(Zve);n9r=r(q4t,"albert"),q4t.forEach(t),s9r=r(kPe," \u2014 "),oU=n(kPe,"A",{href:!0});var N4t=s(oU);l9r=r(N4t,"TFAlbertForMultipleChoice"),N4t.forEach(t),i9r=r(kPe," (ALBERT model)"),kPe.forEach(t),d9r=i(be),YM=n(be,"LI",{});var SPe=s(YM);eFe=n(SPe,"STRONG",{});var j4t=s(eFe);c9r=r(j4t,"bert"),j4t.forEach(t),f9r=r(SPe," \u2014 "),rU=n(SPe,"A",{href:!0});var D4t=s(rU);m9r=r(D4t,"TFBertForMultipleChoice"),D4t.forEach(t),g9r=r(SPe," (BERT model)"),SPe.forEach(t),h9r=i(be),KM=n(be,"LI",{});var RPe=s(KM);oFe=n(RPe,"STRONG",{});var G4t=s(oFe);p9r=r(G4t,"camembert"),G4t.forEach(t),u9r=r(RPe," \u2014 "),tU=n(RPe,"A",{href:!0});var O4t=s(tU);_9r=r(O4t,"TFCamembertForMultipleChoice"),O4t.forEach(t),b9r=r(RPe," (CamemBERT model)"),RPe.forEach(t),v9r=i(be),ZM=n(be,"LI",{});var PPe=s(ZM);rFe=n(PPe,"STRONG",{});var V4t=s(rFe);F9r=r(V4t,"convbert"),V4t.forEach(t),T9r=r(PPe," \u2014 "),aU=n(PPe,"A",{href:!0});var X4t=s(aU);M9r=r(X4t,"TFConvBertForMultipleChoice"),X4t.forEach(t),E9r=r(PPe," (ConvBERT model)"),PPe.forEach(t),C9r=i(be),e4=n(be,"LI",{});var BPe=s(e4);tFe=n(BPe,"STRONG",{});var z4t=s(tFe);w9r=r(z4t,"distilbert"),z4t.forEach(t),A9r=r(BPe," \u2014 "),nU=n(BPe,"A",{href:!0});var W4t=s(nU);y9r=r(W4t,"TFDistilBertForMultipleChoice"),W4t.forEach(t),L9r=r(BPe," (DistilBERT model)"),BPe.forEach(t),x9r=i(be),o4=n(be,"LI",{});var IPe=s(o4);aFe=n(IPe,"STRONG",{});var Q4t=s(aFe);$9r=r(Q4t,"electra"),Q4t.forEach(t),k9r=r(IPe," \u2014 "),sU=n(IPe,"A",{href:!0});var H4t=s(sU);S9r=r(H4t,"TFElectraForMultipleChoice"),H4t.forEach(t),R9r=r(IPe," (ELECTRA model)"),IPe.forEach(t),P9r=i(be),r4=n(be,"LI",{});var qPe=s(r4);nFe=n(qPe,"STRONG",{});var U4t=s(nFe);B9r=r(U4t,"flaubert"),U4t.forEach(t),I9r=r(qPe," \u2014 "),lU=n(qPe,"A",{href:!0});var J4t=s(lU);q9r=r(J4t,"TFFlaubertForMultipleChoice"),J4t.forEach(t),N9r=r(qPe," (FlauBERT model)"),qPe.forEach(t),j9r=i(be),t4=n(be,"LI",{});var NPe=s(t4);sFe=n(NPe,"STRONG",{});var Y4t=s(sFe);D9r=r(Y4t,"funnel"),Y4t.forEach(t),G9r=r(NPe," \u2014 "),iU=n(NPe,"A",{href:!0});var K4t=s(iU);O9r=r(K4t,"TFFunnelForMultipleChoice"),K4t.forEach(t),V9r=r(NPe," (Funnel Transformer model)"),NPe.forEach(t),X9r=i(be),a4=n(be,"LI",{});var jPe=s(a4);lFe=n(jPe,"STRONG",{});var Z4t=s(lFe);z9r=r(Z4t,"longformer"),Z4t.forEach(t),W9r=r(jPe," \u2014 "),dU=n(jPe,"A",{href:!0});var eEt=s(dU);Q9r=r(eEt,"TFLongformerForMultipleChoice"),eEt.forEach(t),H9r=r(jPe," (Longformer model)"),jPe.forEach(t),U9r=i(be),n4=n(be,"LI",{});var DPe=s(n4);iFe=n(DPe,"STRONG",{});var oEt=s(iFe);J9r=r(oEt,"mobilebert"),oEt.forEach(t),Y9r=r(DPe," \u2014 "),cU=n(DPe,"A",{href:!0});var rEt=s(cU);K9r=r(rEt,"TFMobileBertForMultipleChoice"),rEt.forEach(t),Z9r=r(DPe," (MobileBERT model)"),DPe.forEach(t),eMr=i(be),s4=n(be,"LI",{});var GPe=s(s4);dFe=n(GPe,"STRONG",{});var tEt=s(dFe);oMr=r(tEt,"mpnet"),tEt.forEach(t),rMr=r(GPe," \u2014 "),fU=n(GPe,"A",{href:!0});var aEt=s(fU);tMr=r(aEt,"TFMPNetForMultipleChoice"),aEt.forEach(t),aMr=r(GPe," (MPNet model)"),GPe.forEach(t),nMr=i(be),l4=n(be,"LI",{});var OPe=s(l4);cFe=n(OPe,"STRONG",{});var nEt=s(cFe);sMr=r(nEt,"rembert"),nEt.forEach(t),lMr=r(OPe," \u2014 "),mU=n(OPe,"A",{href:!0});var sEt=s(mU);iMr=r(sEt,"TFRemBertForMultipleChoice"),sEt.forEach(t),dMr=r(OPe," (RemBERT model)"),OPe.forEach(t),cMr=i(be),i4=n(be,"LI",{});var VPe=s(i4);fFe=n(VPe,"STRONG",{});var lEt=s(fFe);fMr=r(lEt,"roberta"),lEt.forEach(t),mMr=r(VPe," \u2014 "),gU=n(VPe,"A",{href:!0});var iEt=s(gU);gMr=r(iEt,"TFRobertaForMultipleChoice"),iEt.forEach(t),hMr=r(VPe," (RoBERTa model)"),VPe.forEach(t),pMr=i(be),d4=n(be,"LI",{});var XPe=s(d4);mFe=n(XPe,"STRONG",{});var dEt=s(mFe);uMr=r(dEt,"roformer"),dEt.forEach(t),_Mr=r(XPe," \u2014 "),hU=n(XPe,"A",{href:!0});var cEt=s(hU);bMr=r(cEt,"TFRoFormerForMultipleChoice"),cEt.forEach(t),vMr=r(XPe," (RoFormer model)"),XPe.forEach(t),FMr=i(be),c4=n(be,"LI",{});var zPe=s(c4);gFe=n(zPe,"STRONG",{});var fEt=s(gFe);TMr=r(fEt,"xlm"),fEt.forEach(t),MMr=r(zPe," \u2014 "),pU=n(zPe,"A",{href:!0});var mEt=s(pU);EMr=r(mEt,"TFXLMForMultipleChoice"),mEt.forEach(t),CMr=r(zPe," (XLM model)"),zPe.forEach(t),wMr=i(be),f4=n(be,"LI",{});var WPe=s(f4);hFe=n(WPe,"STRONG",{});var gEt=s(hFe);AMr=r(gEt,"xlm-roberta"),gEt.forEach(t),yMr=r(WPe," \u2014 "),uU=n(WPe,"A",{href:!0});var hEt=s(uU);LMr=r(hEt,"TFXLMRobertaForMultipleChoice"),hEt.forEach(t),xMr=r(WPe," (XLM-RoBERTa model)"),WPe.forEach(t),$Mr=i(be),m4=n(be,"LI",{});var QPe=s(m4);pFe=n(QPe,"STRONG",{});var pEt=s(pFe);kMr=r(pEt,"xlnet"),pEt.forEach(t),SMr=r(QPe," \u2014 "),_U=n(QPe,"A",{href:!0});var uEt=s(_U);RMr=r(uEt,"TFXLNetForMultipleChoice"),uEt.forEach(t),PMr=r(QPe," (XLNet model)"),QPe.forEach(t),be.forEach(t),BMr=i(Ll),T(g4.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),tje=i(f),fc=n(f,"H2",{class:!0});var dGe=s(fc);h4=n(dGe,"A",{id:!0,class:!0,href:!0});var _Et=s(h4);uFe=n(_Et,"SPAN",{});var bEt=s(uFe);T(XL.$$.fragment,bEt),bEt.forEach(t),_Et.forEach(t),IMr=i(dGe),_Fe=n(dGe,"SPAN",{});var vEt=s(_Fe);qMr=r(vEt,"TFAutoModelForNextSentencePrediction"),vEt.forEach(t),dGe.forEach(t),aje=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(zL.$$.fragment,xl),NMr=i(xl),mc=n(xl,"P",{});var uee=s(mc);jMr=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bU=n(uee,"A",{href:!0});var FEt=s(bU);DMr=r(FEt,"from_pretrained()"),FEt.forEach(t),GMr=r(uee," class method or the "),vU=n(uee,"A",{href:!0});var TEt=s(vU);OMr=r(TEt,"from_config()"),TEt.forEach(t),VMr=r(uee,` class
method.`),uee.forEach(t),XMr=i(xl),WL=n(xl,"P",{});var cGe=s(WL);zMr=r(cGe,"This class cannot be instantiated directly using "),bFe=n(cGe,"CODE",{});var MEt=s(bFe);WMr=r(MEt,"__init__()"),MEt.forEach(t),QMr=r(cGe," (throws an error)."),cGe.forEach(t),HMr=i(xl),Bt=n(xl,"DIV",{class:!0});var q0=s(Bt);T(QL.$$.fragment,q0),UMr=i(q0),vFe=n(q0,"P",{});var EEt=s(vFe);JMr=r(EEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),EEt.forEach(t),YMr=i(q0),gc=n(q0,"P",{});var _ee=s(gc);KMr=r(_ee,`Note:
Loading a model from its configuration file does `),FFe=n(_ee,"STRONG",{});var CEt=s(FFe);ZMr=r(CEt,"not"),CEt.forEach(t),e4r=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=n(_ee,"A",{href:!0});var wEt=s(FU);o4r=r(wEt,"from_pretrained()"),wEt.forEach(t),r4r=r(_ee," to load the model weights."),_ee.forEach(t),t4r=i(q0),T(p4.$$.fragment,q0),q0.forEach(t),a4r=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(HL.$$.fragment,$l),n4r=i($l),TFe=n($l,"P",{});var AEt=s(TFe);s4r=r(AEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),AEt.forEach(t),l4r=i($l),ln=n($l,"P",{});var N0=s(ln);i4r=r(N0,"The model class to instantiate is selected based on the "),MFe=n(N0,"CODE",{});var yEt=s(MFe);d4r=r(yEt,"model_type"),yEt.forEach(t),c4r=r(N0,` property of the config object (either
passed as an argument or loaded from `),EFe=n(N0,"CODE",{});var LEt=s(EFe);f4r=r(LEt,"pretrained_model_name_or_path"),LEt.forEach(t),m4r=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=n(N0,"CODE",{});var xEt=s(CFe);g4r=r(xEt,"pretrained_model_name_or_path"),xEt.forEach(t),h4r=r(N0,":"),N0.forEach(t),p4r=i($l),UL=n($l,"UL",{});var fGe=s(UL);u4=n(fGe,"LI",{});var HPe=s(u4);wFe=n(HPe,"STRONG",{});var $Et=s(wFe);u4r=r($Et,"bert"),$Et.forEach(t),_4r=r(HPe," \u2014 "),TU=n(HPe,"A",{href:!0});var kEt=s(TU);b4r=r(kEt,"TFBertForNextSentencePrediction"),kEt.forEach(t),v4r=r(HPe," (BERT model)"),HPe.forEach(t),F4r=i(fGe),_4=n(fGe,"LI",{});var UPe=s(_4);AFe=n(UPe,"STRONG",{});var SEt=s(AFe);T4r=r(SEt,"mobilebert"),SEt.forEach(t),M4r=r(UPe," \u2014 "),MU=n(UPe,"A",{href:!0});var REt=s(MU);E4r=r(REt,"TFMobileBertForNextSentencePrediction"),REt.forEach(t),C4r=r(UPe," (MobileBERT model)"),UPe.forEach(t),fGe.forEach(t),w4r=i($l),T(b4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),nje=i(f),hc=n(f,"H2",{class:!0});var mGe=s(hc);v4=n(mGe,"A",{id:!0,class:!0,href:!0});var PEt=s(v4);yFe=n(PEt,"SPAN",{});var BEt=s(yFe);T(JL.$$.fragment,BEt),BEt.forEach(t),PEt.forEach(t),A4r=i(mGe),LFe=n(mGe,"SPAN",{});var IEt=s(LFe);y4r=r(IEt,"TFAutoModelForTableQuestionAnswering"),IEt.forEach(t),mGe.forEach(t),sje=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(YL.$$.fragment,kl),L4r=i(kl),pc=n(kl,"P",{});var bee=s(pc);x4r=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),EU=n(bee,"A",{href:!0});var qEt=s(EU);$4r=r(qEt,"from_pretrained()"),qEt.forEach(t),k4r=r(bee," class method or the "),CU=n(bee,"A",{href:!0});var NEt=s(CU);S4r=r(NEt,"from_config()"),NEt.forEach(t),R4r=r(bee,` class
method.`),bee.forEach(t),P4r=i(kl),KL=n(kl,"P",{});var gGe=s(KL);B4r=r(gGe,"This class cannot be instantiated directly using "),xFe=n(gGe,"CODE",{});var jEt=s(xFe);I4r=r(jEt,"__init__()"),jEt.forEach(t),q4r=r(gGe," (throws an error)."),gGe.forEach(t),N4r=i(kl),It=n(kl,"DIV",{class:!0});var j0=s(It);T(ZL.$$.fragment,j0),j4r=i(j0),$Fe=n(j0,"P",{});var DEt=s($Fe);D4r=r(DEt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),DEt.forEach(t),G4r=i(j0),uc=n(j0,"P",{});var vee=s(uc);O4r=r(vee,`Note:
Loading a model from its configuration file does `),kFe=n(vee,"STRONG",{});var GEt=s(kFe);V4r=r(GEt,"not"),GEt.forEach(t),X4r=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=n(vee,"A",{href:!0});var OEt=s(wU);z4r=r(OEt,"from_pretrained()"),OEt.forEach(t),W4r=r(vee," to load the model weights."),vee.forEach(t),Q4r=i(j0),T(F4.$$.fragment,j0),j0.forEach(t),H4r=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(e8.$$.fragment,Sl),U4r=i(Sl),SFe=n(Sl,"P",{});var VEt=s(SFe);J4r=r(VEt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),VEt.forEach(t),Y4r=i(Sl),dn=n(Sl,"P",{});var D0=s(dn);K4r=r(D0,"The model class to instantiate is selected based on the "),RFe=n(D0,"CODE",{});var XEt=s(RFe);Z4r=r(XEt,"model_type"),XEt.forEach(t),eEr=r(D0,` property of the config object (either
passed as an argument or loaded from `),PFe=n(D0,"CODE",{});var zEt=s(PFe);oEr=r(zEt,"pretrained_model_name_or_path"),zEt.forEach(t),rEr=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(D0,"CODE",{});var WEt=s(BFe);tEr=r(WEt,"pretrained_model_name_or_path"),WEt.forEach(t),aEr=r(D0,":"),D0.forEach(t),nEr=i(Sl),IFe=n(Sl,"UL",{});var QEt=s(IFe);T4=n(QEt,"LI",{});var JPe=s(T4);qFe=n(JPe,"STRONG",{});var HEt=s(qFe);sEr=r(HEt,"tapas"),HEt.forEach(t),lEr=r(JPe," \u2014 "),AU=n(JPe,"A",{href:!0});var UEt=s(AU);iEr=r(UEt,"TFTapasForQuestionAnswering"),UEt.forEach(t),dEr=r(JPe," (TAPAS model)"),JPe.forEach(t),QEt.forEach(t),cEr=i(Sl),T(M4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),lje=i(f),_c=n(f,"H2",{class:!0});var hGe=s(_c);E4=n(hGe,"A",{id:!0,class:!0,href:!0});var JEt=s(E4);NFe=n(JEt,"SPAN",{});var YEt=s(NFe);T(o8.$$.fragment,YEt),YEt.forEach(t),JEt.forEach(t),fEr=i(hGe),jFe=n(hGe,"SPAN",{});var KEt=s(jFe);mEr=r(KEt,"TFAutoModelForTokenClassification"),KEt.forEach(t),hGe.forEach(t),ije=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(r8.$$.fragment,Rl),gEr=i(Rl),bc=n(Rl,"P",{});var Fee=s(bc);hEr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yU=n(Fee,"A",{href:!0});var ZEt=s(yU);pEr=r(ZEt,"from_pretrained()"),ZEt.forEach(t),uEr=r(Fee," class method or the "),LU=n(Fee,"A",{href:!0});var eCt=s(LU);_Er=r(eCt,"from_config()"),eCt.forEach(t),bEr=r(Fee,` class
method.`),Fee.forEach(t),vEr=i(Rl),t8=n(Rl,"P",{});var pGe=s(t8);FEr=r(pGe,"This class cannot be instantiated directly using "),DFe=n(pGe,"CODE",{});var oCt=s(DFe);TEr=r(oCt,"__init__()"),oCt.forEach(t),MEr=r(pGe," (throws an error)."),pGe.forEach(t),EEr=i(Rl),qt=n(Rl,"DIV",{class:!0});var G0=s(qt);T(a8.$$.fragment,G0),CEr=i(G0),GFe=n(G0,"P",{});var rCt=s(GFe);wEr=r(rCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rCt.forEach(t),AEr=i(G0),vc=n(G0,"P",{});var Tee=s(vc);yEr=r(Tee,`Note:
Loading a model from its configuration file does `),OFe=n(Tee,"STRONG",{});var tCt=s(OFe);LEr=r(tCt,"not"),tCt.forEach(t),xEr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=n(Tee,"A",{href:!0});var aCt=s(xU);$Er=r(aCt,"from_pretrained()"),aCt.forEach(t),kEr=r(Tee," to load the model weights."),Tee.forEach(t),SEr=i(G0),T(C4.$$.fragment,G0),G0.forEach(t),REr=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(n8.$$.fragment,Pl),PEr=i(Pl),VFe=n(Pl,"P",{});var nCt=s(VFe);BEr=r(nCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nCt.forEach(t),IEr=i(Pl),cn=n(Pl,"P",{});var O0=s(cn);qEr=r(O0,"The model class to instantiate is selected based on the "),XFe=n(O0,"CODE",{});var sCt=s(XFe);NEr=r(sCt,"model_type"),sCt.forEach(t),jEr=r(O0,` property of the config object (either
passed as an argument or loaded from `),zFe=n(O0,"CODE",{});var lCt=s(zFe);DEr=r(lCt,"pretrained_model_name_or_path"),lCt.forEach(t),GEr=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=n(O0,"CODE",{});var iCt=s(WFe);OEr=r(iCt,"pretrained_model_name_or_path"),iCt.forEach(t),VEr=r(O0,":"),O0.forEach(t),XEr=i(Pl),de=n(Pl,"UL",{});var me=s(de);w4=n(me,"LI",{});var YPe=s(w4);QFe=n(YPe,"STRONG",{});var dCt=s(QFe);zEr=r(dCt,"albert"),dCt.forEach(t),WEr=r(YPe," \u2014 "),$U=n(YPe,"A",{href:!0});var cCt=s($U);QEr=r(cCt,"TFAlbertForTokenClassification"),cCt.forEach(t),HEr=r(YPe," (ALBERT model)"),YPe.forEach(t),UEr=i(me),A4=n(me,"LI",{});var KPe=s(A4);HFe=n(KPe,"STRONG",{});var fCt=s(HFe);JEr=r(fCt,"bert"),fCt.forEach(t),YEr=r(KPe," \u2014 "),kU=n(KPe,"A",{href:!0});var mCt=s(kU);KEr=r(mCt,"TFBertForTokenClassification"),mCt.forEach(t),ZEr=r(KPe," (BERT model)"),KPe.forEach(t),eCr=i(me),y4=n(me,"LI",{});var ZPe=s(y4);UFe=n(ZPe,"STRONG",{});var gCt=s(UFe);oCr=r(gCt,"camembert"),gCt.forEach(t),rCr=r(ZPe," \u2014 "),SU=n(ZPe,"A",{href:!0});var hCt=s(SU);tCr=r(hCt,"TFCamembertForTokenClassification"),hCt.forEach(t),aCr=r(ZPe," (CamemBERT model)"),ZPe.forEach(t),nCr=i(me),L4=n(me,"LI",{});var eBe=s(L4);JFe=n(eBe,"STRONG",{});var pCt=s(JFe);sCr=r(pCt,"convbert"),pCt.forEach(t),lCr=r(eBe," \u2014 "),RU=n(eBe,"A",{href:!0});var uCt=s(RU);iCr=r(uCt,"TFConvBertForTokenClassification"),uCt.forEach(t),dCr=r(eBe," (ConvBERT model)"),eBe.forEach(t),cCr=i(me),x4=n(me,"LI",{});var oBe=s(x4);YFe=n(oBe,"STRONG",{});var _Ct=s(YFe);fCr=r(_Ct,"deberta"),_Ct.forEach(t),mCr=r(oBe," \u2014 "),PU=n(oBe,"A",{href:!0});var bCt=s(PU);gCr=r(bCt,"TFDebertaForTokenClassification"),bCt.forEach(t),hCr=r(oBe," (DeBERTa model)"),oBe.forEach(t),pCr=i(me),$4=n(me,"LI",{});var rBe=s($4);KFe=n(rBe,"STRONG",{});var vCt=s(KFe);uCr=r(vCt,"deberta-v2"),vCt.forEach(t),_Cr=r(rBe," \u2014 "),BU=n(rBe,"A",{href:!0});var FCt=s(BU);bCr=r(FCt,"TFDebertaV2ForTokenClassification"),FCt.forEach(t),vCr=r(rBe," (DeBERTa-v2 model)"),rBe.forEach(t),FCr=i(me),k4=n(me,"LI",{});var tBe=s(k4);ZFe=n(tBe,"STRONG",{});var TCt=s(ZFe);TCr=r(TCt,"distilbert"),TCt.forEach(t),MCr=r(tBe," \u2014 "),IU=n(tBe,"A",{href:!0});var MCt=s(IU);ECr=r(MCt,"TFDistilBertForTokenClassification"),MCt.forEach(t),CCr=r(tBe," (DistilBERT model)"),tBe.forEach(t),wCr=i(me),S4=n(me,"LI",{});var aBe=s(S4);eTe=n(aBe,"STRONG",{});var ECt=s(eTe);ACr=r(ECt,"electra"),ECt.forEach(t),yCr=r(aBe," \u2014 "),qU=n(aBe,"A",{href:!0});var CCt=s(qU);LCr=r(CCt,"TFElectraForTokenClassification"),CCt.forEach(t),xCr=r(aBe," (ELECTRA model)"),aBe.forEach(t),$Cr=i(me),R4=n(me,"LI",{});var nBe=s(R4);oTe=n(nBe,"STRONG",{});var wCt=s(oTe);kCr=r(wCt,"flaubert"),wCt.forEach(t),SCr=r(nBe," \u2014 "),NU=n(nBe,"A",{href:!0});var ACt=s(NU);RCr=r(ACt,"TFFlaubertForTokenClassification"),ACt.forEach(t),PCr=r(nBe," (FlauBERT model)"),nBe.forEach(t),BCr=i(me),P4=n(me,"LI",{});var sBe=s(P4);rTe=n(sBe,"STRONG",{});var yCt=s(rTe);ICr=r(yCt,"funnel"),yCt.forEach(t),qCr=r(sBe," \u2014 "),jU=n(sBe,"A",{href:!0});var LCt=s(jU);NCr=r(LCt,"TFFunnelForTokenClassification"),LCt.forEach(t),jCr=r(sBe," (Funnel Transformer model)"),sBe.forEach(t),DCr=i(me),B4=n(me,"LI",{});var lBe=s(B4);tTe=n(lBe,"STRONG",{});var xCt=s(tTe);GCr=r(xCt,"layoutlm"),xCt.forEach(t),OCr=r(lBe," \u2014 "),DU=n(lBe,"A",{href:!0});var $Ct=s(DU);VCr=r($Ct,"TFLayoutLMForTokenClassification"),$Ct.forEach(t),XCr=r(lBe," (LayoutLM model)"),lBe.forEach(t),zCr=i(me),I4=n(me,"LI",{});var iBe=s(I4);aTe=n(iBe,"STRONG",{});var kCt=s(aTe);WCr=r(kCt,"longformer"),kCt.forEach(t),QCr=r(iBe," \u2014 "),GU=n(iBe,"A",{href:!0});var SCt=s(GU);HCr=r(SCt,"TFLongformerForTokenClassification"),SCt.forEach(t),UCr=r(iBe," (Longformer model)"),iBe.forEach(t),JCr=i(me),q4=n(me,"LI",{});var dBe=s(q4);nTe=n(dBe,"STRONG",{});var RCt=s(nTe);YCr=r(RCt,"mobilebert"),RCt.forEach(t),KCr=r(dBe," \u2014 "),OU=n(dBe,"A",{href:!0});var PCt=s(OU);ZCr=r(PCt,"TFMobileBertForTokenClassification"),PCt.forEach(t),e5r=r(dBe," (MobileBERT model)"),dBe.forEach(t),o5r=i(me),N4=n(me,"LI",{});var cBe=s(N4);sTe=n(cBe,"STRONG",{});var BCt=s(sTe);r5r=r(BCt,"mpnet"),BCt.forEach(t),t5r=r(cBe," \u2014 "),VU=n(cBe,"A",{href:!0});var ICt=s(VU);a5r=r(ICt,"TFMPNetForTokenClassification"),ICt.forEach(t),n5r=r(cBe," (MPNet model)"),cBe.forEach(t),s5r=i(me),j4=n(me,"LI",{});var fBe=s(j4);lTe=n(fBe,"STRONG",{});var qCt=s(lTe);l5r=r(qCt,"rembert"),qCt.forEach(t),i5r=r(fBe," \u2014 "),XU=n(fBe,"A",{href:!0});var NCt=s(XU);d5r=r(NCt,"TFRemBertForTokenClassification"),NCt.forEach(t),c5r=r(fBe," (RemBERT model)"),fBe.forEach(t),f5r=i(me),D4=n(me,"LI",{});var mBe=s(D4);iTe=n(mBe,"STRONG",{});var jCt=s(iTe);m5r=r(jCt,"roberta"),jCt.forEach(t),g5r=r(mBe," \u2014 "),zU=n(mBe,"A",{href:!0});var DCt=s(zU);h5r=r(DCt,"TFRobertaForTokenClassification"),DCt.forEach(t),p5r=r(mBe," (RoBERTa model)"),mBe.forEach(t),u5r=i(me),G4=n(me,"LI",{});var gBe=s(G4);dTe=n(gBe,"STRONG",{});var GCt=s(dTe);_5r=r(GCt,"roformer"),GCt.forEach(t),b5r=r(gBe," \u2014 "),WU=n(gBe,"A",{href:!0});var OCt=s(WU);v5r=r(OCt,"TFRoFormerForTokenClassification"),OCt.forEach(t),F5r=r(gBe," (RoFormer model)"),gBe.forEach(t),T5r=i(me),O4=n(me,"LI",{});var hBe=s(O4);cTe=n(hBe,"STRONG",{});var VCt=s(cTe);M5r=r(VCt,"xlm"),VCt.forEach(t),E5r=r(hBe," \u2014 "),QU=n(hBe,"A",{href:!0});var XCt=s(QU);C5r=r(XCt,"TFXLMForTokenClassification"),XCt.forEach(t),w5r=r(hBe," (XLM model)"),hBe.forEach(t),A5r=i(me),V4=n(me,"LI",{});var pBe=s(V4);fTe=n(pBe,"STRONG",{});var zCt=s(fTe);y5r=r(zCt,"xlm-roberta"),zCt.forEach(t),L5r=r(pBe," \u2014 "),HU=n(pBe,"A",{href:!0});var WCt=s(HU);x5r=r(WCt,"TFXLMRobertaForTokenClassification"),WCt.forEach(t),$5r=r(pBe," (XLM-RoBERTa model)"),pBe.forEach(t),k5r=i(me),X4=n(me,"LI",{});var uBe=s(X4);mTe=n(uBe,"STRONG",{});var QCt=s(mTe);S5r=r(QCt,"xlnet"),QCt.forEach(t),R5r=r(uBe," \u2014 "),UU=n(uBe,"A",{href:!0});var HCt=s(UU);P5r=r(HCt,"TFXLNetForTokenClassification"),HCt.forEach(t),B5r=r(uBe," (XLNet model)"),uBe.forEach(t),me.forEach(t),I5r=i(Pl),T(z4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),dje=i(f),Fc=n(f,"H2",{class:!0});var uGe=s(Fc);W4=n(uGe,"A",{id:!0,class:!0,href:!0});var UCt=s(W4);gTe=n(UCt,"SPAN",{});var JCt=s(gTe);T(s8.$$.fragment,JCt),JCt.forEach(t),UCt.forEach(t),q5r=i(uGe),hTe=n(uGe,"SPAN",{});var YCt=s(hTe);N5r=r(YCt,"TFAutoModelForQuestionAnswering"),YCt.forEach(t),uGe.forEach(t),cje=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(l8.$$.fragment,Bl),j5r=i(Bl),Tc=n(Bl,"P",{});var Mee=s(Tc);D5r=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JU=n(Mee,"A",{href:!0});var KCt=s(JU);G5r=r(KCt,"from_pretrained()"),KCt.forEach(t),O5r=r(Mee," class method or the "),YU=n(Mee,"A",{href:!0});var ZCt=s(YU);V5r=r(ZCt,"from_config()"),ZCt.forEach(t),X5r=r(Mee,` class
method.`),Mee.forEach(t),z5r=i(Bl),i8=n(Bl,"P",{});var _Ge=s(i8);W5r=r(_Ge,"This class cannot be instantiated directly using "),pTe=n(_Ge,"CODE",{});var e5t=s(pTe);Q5r=r(e5t,"__init__()"),e5t.forEach(t),H5r=r(_Ge," (throws an error)."),_Ge.forEach(t),U5r=i(Bl),Nt=n(Bl,"DIV",{class:!0});var V0=s(Nt);T(d8.$$.fragment,V0),J5r=i(V0),uTe=n(V0,"P",{});var o5t=s(uTe);Y5r=r(o5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),o5t.forEach(t),K5r=i(V0),Mc=n(V0,"P",{});var Eee=s(Mc);Z5r=r(Eee,`Note:
Loading a model from its configuration file does `),_Te=n(Eee,"STRONG",{});var r5t=s(_Te);ewr=r(r5t,"not"),r5t.forEach(t),owr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=n(Eee,"A",{href:!0});var t5t=s(KU);rwr=r(t5t,"from_pretrained()"),t5t.forEach(t),twr=r(Eee," to load the model weights."),Eee.forEach(t),awr=i(V0),T(Q4.$$.fragment,V0),V0.forEach(t),nwr=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(c8.$$.fragment,Il),swr=i(Il),bTe=n(Il,"P",{});var a5t=s(bTe);lwr=r(a5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),a5t.forEach(t),iwr=i(Il),fn=n(Il,"P",{});var X0=s(fn);dwr=r(X0,"The model class to instantiate is selected based on the "),vTe=n(X0,"CODE",{});var n5t=s(vTe);cwr=r(n5t,"model_type"),n5t.forEach(t),fwr=r(X0,` property of the config object (either
passed as an argument or loaded from `),FTe=n(X0,"CODE",{});var s5t=s(FTe);mwr=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),gwr=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=n(X0,"CODE",{});var l5t=s(TTe);hwr=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),pwr=r(X0,":"),X0.forEach(t),uwr=i(Il),ce=n(Il,"UL",{});var ge=s(ce);H4=n(ge,"LI",{});var _Be=s(H4);MTe=n(_Be,"STRONG",{});var i5t=s(MTe);_wr=r(i5t,"albert"),i5t.forEach(t),bwr=r(_Be," \u2014 "),ZU=n(_Be,"A",{href:!0});var d5t=s(ZU);vwr=r(d5t,"TFAlbertForQuestionAnswering"),d5t.forEach(t),Fwr=r(_Be," (ALBERT model)"),_Be.forEach(t),Twr=i(ge),U4=n(ge,"LI",{});var bBe=s(U4);ETe=n(bBe,"STRONG",{});var c5t=s(ETe);Mwr=r(c5t,"bert"),c5t.forEach(t),Ewr=r(bBe," \u2014 "),eJ=n(bBe,"A",{href:!0});var f5t=s(eJ);Cwr=r(f5t,"TFBertForQuestionAnswering"),f5t.forEach(t),wwr=r(bBe," (BERT model)"),bBe.forEach(t),Awr=i(ge),J4=n(ge,"LI",{});var vBe=s(J4);CTe=n(vBe,"STRONG",{});var m5t=s(CTe);ywr=r(m5t,"camembert"),m5t.forEach(t),Lwr=r(vBe," \u2014 "),oJ=n(vBe,"A",{href:!0});var g5t=s(oJ);xwr=r(g5t,"TFCamembertForQuestionAnswering"),g5t.forEach(t),$wr=r(vBe," (CamemBERT model)"),vBe.forEach(t),kwr=i(ge),Y4=n(ge,"LI",{});var FBe=s(Y4);wTe=n(FBe,"STRONG",{});var h5t=s(wTe);Swr=r(h5t,"convbert"),h5t.forEach(t),Rwr=r(FBe," \u2014 "),rJ=n(FBe,"A",{href:!0});var p5t=s(rJ);Pwr=r(p5t,"TFConvBertForQuestionAnswering"),p5t.forEach(t),Bwr=r(FBe," (ConvBERT model)"),FBe.forEach(t),Iwr=i(ge),K4=n(ge,"LI",{});var TBe=s(K4);ATe=n(TBe,"STRONG",{});var u5t=s(ATe);qwr=r(u5t,"deberta"),u5t.forEach(t),Nwr=r(TBe," \u2014 "),tJ=n(TBe,"A",{href:!0});var _5t=s(tJ);jwr=r(_5t,"TFDebertaForQuestionAnswering"),_5t.forEach(t),Dwr=r(TBe," (DeBERTa model)"),TBe.forEach(t),Gwr=i(ge),Z4=n(ge,"LI",{});var MBe=s(Z4);yTe=n(MBe,"STRONG",{});var b5t=s(yTe);Owr=r(b5t,"deberta-v2"),b5t.forEach(t),Vwr=r(MBe," \u2014 "),aJ=n(MBe,"A",{href:!0});var v5t=s(aJ);Xwr=r(v5t,"TFDebertaV2ForQuestionAnswering"),v5t.forEach(t),zwr=r(MBe," (DeBERTa-v2 model)"),MBe.forEach(t),Wwr=i(ge),eE=n(ge,"LI",{});var EBe=s(eE);LTe=n(EBe,"STRONG",{});var F5t=s(LTe);Qwr=r(F5t,"distilbert"),F5t.forEach(t),Hwr=r(EBe," \u2014 "),nJ=n(EBe,"A",{href:!0});var T5t=s(nJ);Uwr=r(T5t,"TFDistilBertForQuestionAnswering"),T5t.forEach(t),Jwr=r(EBe," (DistilBERT model)"),EBe.forEach(t),Ywr=i(ge),oE=n(ge,"LI",{});var CBe=s(oE);xTe=n(CBe,"STRONG",{});var M5t=s(xTe);Kwr=r(M5t,"electra"),M5t.forEach(t),Zwr=r(CBe," \u2014 "),sJ=n(CBe,"A",{href:!0});var E5t=s(sJ);e0r=r(E5t,"TFElectraForQuestionAnswering"),E5t.forEach(t),o0r=r(CBe," (ELECTRA model)"),CBe.forEach(t),r0r=i(ge),rE=n(ge,"LI",{});var wBe=s(rE);$Te=n(wBe,"STRONG",{});var C5t=s($Te);t0r=r(C5t,"flaubert"),C5t.forEach(t),a0r=r(wBe," \u2014 "),lJ=n(wBe,"A",{href:!0});var w5t=s(lJ);n0r=r(w5t,"TFFlaubertForQuestionAnsweringSimple"),w5t.forEach(t),s0r=r(wBe," (FlauBERT model)"),wBe.forEach(t),l0r=i(ge),tE=n(ge,"LI",{});var ABe=s(tE);kTe=n(ABe,"STRONG",{});var A5t=s(kTe);i0r=r(A5t,"funnel"),A5t.forEach(t),d0r=r(ABe," \u2014 "),iJ=n(ABe,"A",{href:!0});var y5t=s(iJ);c0r=r(y5t,"TFFunnelForQuestionAnswering"),y5t.forEach(t),f0r=r(ABe," (Funnel Transformer model)"),ABe.forEach(t),m0r=i(ge),aE=n(ge,"LI",{});var yBe=s(aE);STe=n(yBe,"STRONG",{});var L5t=s(STe);g0r=r(L5t,"gptj"),L5t.forEach(t),h0r=r(yBe," \u2014 "),dJ=n(yBe,"A",{href:!0});var x5t=s(dJ);p0r=r(x5t,"TFGPTJForQuestionAnswering"),x5t.forEach(t),u0r=r(yBe," (GPT-J model)"),yBe.forEach(t),_0r=i(ge),nE=n(ge,"LI",{});var LBe=s(nE);RTe=n(LBe,"STRONG",{});var $5t=s(RTe);b0r=r($5t,"longformer"),$5t.forEach(t),v0r=r(LBe," \u2014 "),cJ=n(LBe,"A",{href:!0});var k5t=s(cJ);F0r=r(k5t,"TFLongformerForQuestionAnswering"),k5t.forEach(t),T0r=r(LBe," (Longformer model)"),LBe.forEach(t),M0r=i(ge),sE=n(ge,"LI",{});var xBe=s(sE);PTe=n(xBe,"STRONG",{});var S5t=s(PTe);E0r=r(S5t,"mobilebert"),S5t.forEach(t),C0r=r(xBe," \u2014 "),fJ=n(xBe,"A",{href:!0});var R5t=s(fJ);w0r=r(R5t,"TFMobileBertForQuestionAnswering"),R5t.forEach(t),A0r=r(xBe," (MobileBERT model)"),xBe.forEach(t),y0r=i(ge),lE=n(ge,"LI",{});var $Be=s(lE);BTe=n($Be,"STRONG",{});var P5t=s(BTe);L0r=r(P5t,"mpnet"),P5t.forEach(t),x0r=r($Be," \u2014 "),mJ=n($Be,"A",{href:!0});var B5t=s(mJ);$0r=r(B5t,"TFMPNetForQuestionAnswering"),B5t.forEach(t),k0r=r($Be," (MPNet model)"),$Be.forEach(t),S0r=i(ge),iE=n(ge,"LI",{});var kBe=s(iE);ITe=n(kBe,"STRONG",{});var I5t=s(ITe);R0r=r(I5t,"rembert"),I5t.forEach(t),P0r=r(kBe," \u2014 "),gJ=n(kBe,"A",{href:!0});var q5t=s(gJ);B0r=r(q5t,"TFRemBertForQuestionAnswering"),q5t.forEach(t),I0r=r(kBe," (RemBERT model)"),kBe.forEach(t),q0r=i(ge),dE=n(ge,"LI",{});var SBe=s(dE);qTe=n(SBe,"STRONG",{});var N5t=s(qTe);N0r=r(N5t,"roberta"),N5t.forEach(t),j0r=r(SBe," \u2014 "),hJ=n(SBe,"A",{href:!0});var j5t=s(hJ);D0r=r(j5t,"TFRobertaForQuestionAnswering"),j5t.forEach(t),G0r=r(SBe," (RoBERTa model)"),SBe.forEach(t),O0r=i(ge),cE=n(ge,"LI",{});var RBe=s(cE);NTe=n(RBe,"STRONG",{});var D5t=s(NTe);V0r=r(D5t,"roformer"),D5t.forEach(t),X0r=r(RBe," \u2014 "),pJ=n(RBe,"A",{href:!0});var G5t=s(pJ);z0r=r(G5t,"TFRoFormerForQuestionAnswering"),G5t.forEach(t),W0r=r(RBe," (RoFormer model)"),RBe.forEach(t),Q0r=i(ge),fE=n(ge,"LI",{});var PBe=s(fE);jTe=n(PBe,"STRONG",{});var O5t=s(jTe);H0r=r(O5t,"xlm"),O5t.forEach(t),U0r=r(PBe," \u2014 "),uJ=n(PBe,"A",{href:!0});var V5t=s(uJ);J0r=r(V5t,"TFXLMForQuestionAnsweringSimple"),V5t.forEach(t),Y0r=r(PBe," (XLM model)"),PBe.forEach(t),K0r=i(ge),mE=n(ge,"LI",{});var BBe=s(mE);DTe=n(BBe,"STRONG",{});var X5t=s(DTe);Z0r=r(X5t,"xlm-roberta"),X5t.forEach(t),eAr=r(BBe," \u2014 "),_J=n(BBe,"A",{href:!0});var z5t=s(_J);oAr=r(z5t,"TFXLMRobertaForQuestionAnswering"),z5t.forEach(t),rAr=r(BBe," (XLM-RoBERTa model)"),BBe.forEach(t),tAr=i(ge),gE=n(ge,"LI",{});var IBe=s(gE);GTe=n(IBe,"STRONG",{});var W5t=s(GTe);aAr=r(W5t,"xlnet"),W5t.forEach(t),nAr=r(IBe," \u2014 "),bJ=n(IBe,"A",{href:!0});var Q5t=s(bJ);sAr=r(Q5t,"TFXLNetForQuestionAnsweringSimple"),Q5t.forEach(t),lAr=r(IBe," (XLNet model)"),IBe.forEach(t),ge.forEach(t),iAr=i(Il),T(hE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),fje=i(f),Ec=n(f,"H2",{class:!0});var bGe=s(Ec);pE=n(bGe,"A",{id:!0,class:!0,href:!0});var H5t=s(pE);OTe=n(H5t,"SPAN",{});var U5t=s(OTe);T(f8.$$.fragment,U5t),U5t.forEach(t),H5t.forEach(t),dAr=i(bGe),VTe=n(bGe,"SPAN",{});var J5t=s(VTe);cAr=r(J5t,"TFAutoModelForVision2Seq"),J5t.forEach(t),bGe.forEach(t),mje=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(m8.$$.fragment,ql),fAr=i(ql),Cc=n(ql,"P",{});var Cee=s(Cc);mAr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vJ=n(Cee,"A",{href:!0});var Y5t=s(vJ);gAr=r(Y5t,"from_pretrained()"),Y5t.forEach(t),hAr=r(Cee," class method or the "),FJ=n(Cee,"A",{href:!0});var K5t=s(FJ);pAr=r(K5t,"from_config()"),K5t.forEach(t),uAr=r(Cee,` class
method.`),Cee.forEach(t),_Ar=i(ql),g8=n(ql,"P",{});var vGe=s(g8);bAr=r(vGe,"This class cannot be instantiated directly using "),XTe=n(vGe,"CODE",{});var Z5t=s(XTe);vAr=r(Z5t,"__init__()"),Z5t.forEach(t),FAr=r(vGe," (throws an error)."),vGe.forEach(t),TAr=i(ql),jt=n(ql,"DIV",{class:!0});var z0=s(jt);T(h8.$$.fragment,z0),MAr=i(z0),zTe=n(z0,"P",{});var ewt=s(zTe);EAr=r(ewt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ewt.forEach(t),CAr=i(z0),wc=n(z0,"P",{});var wee=s(wc);wAr=r(wee,`Note:
Loading a model from its configuration file does `),WTe=n(wee,"STRONG",{});var owt=s(WTe);AAr=r(owt,"not"),owt.forEach(t),yAr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=n(wee,"A",{href:!0});var rwt=s(TJ);LAr=r(rwt,"from_pretrained()"),rwt.forEach(t),xAr=r(wee," to load the model weights."),wee.forEach(t),$Ar=i(z0),T(uE.$$.fragment,z0),z0.forEach(t),kAr=i(ql),qr=n(ql,"DIV",{class:!0});var Nl=s(qr);T(p8.$$.fragment,Nl),SAr=i(Nl),QTe=n(Nl,"P",{});var twt=s(QTe);RAr=r(twt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),twt.forEach(t),PAr=i(Nl),mn=n(Nl,"P",{});var W0=s(mn);BAr=r(W0,"The model class to instantiate is selected based on the "),HTe=n(W0,"CODE",{});var awt=s(HTe);IAr=r(awt,"model_type"),awt.forEach(t),qAr=r(W0,` property of the config object (either
passed as an argument or loaded from `),UTe=n(W0,"CODE",{});var nwt=s(UTe);NAr=r(nwt,"pretrained_model_name_or_path"),nwt.forEach(t),jAr=r(W0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=n(W0,"CODE",{});var swt=s(JTe);DAr=r(swt,"pretrained_model_name_or_path"),swt.forEach(t),GAr=r(W0,":"),W0.forEach(t),OAr=i(Nl),YTe=n(Nl,"UL",{});var lwt=s(YTe);_E=n(lwt,"LI",{});var qBe=s(_E);KTe=n(qBe,"STRONG",{});var iwt=s(KTe);VAr=r(iwt,"vision-encoder-decoder"),iwt.forEach(t),XAr=r(qBe," \u2014 "),MJ=n(qBe,"A",{href:!0});var dwt=s(MJ);zAr=r(dwt,"TFVisionEncoderDecoderModel"),dwt.forEach(t),WAr=r(qBe," (Vision Encoder decoder model)"),qBe.forEach(t),lwt.forEach(t),QAr=i(Nl),T(bE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),gje=i(f),Ac=n(f,"H2",{class:!0});var FGe=s(Ac);vE=n(FGe,"A",{id:!0,class:!0,href:!0});var cwt=s(vE);ZTe=n(cwt,"SPAN",{});var fwt=s(ZTe);T(u8.$$.fragment,fwt),fwt.forEach(t),cwt.forEach(t),HAr=i(FGe),e7e=n(FGe,"SPAN",{});var mwt=s(e7e);UAr=r(mwt,"TFAutoModelForSpeechSeq2Seq"),mwt.forEach(t),FGe.forEach(t),hje=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(_8.$$.fragment,jl),JAr=i(jl),yc=n(jl,"P",{});var Aee=s(yc);YAr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EJ=n(Aee,"A",{href:!0});var gwt=s(EJ);KAr=r(gwt,"from_pretrained()"),gwt.forEach(t),ZAr=r(Aee," class method or the "),CJ=n(Aee,"A",{href:!0});var hwt=s(CJ);e6r=r(hwt,"from_config()"),hwt.forEach(t),o6r=r(Aee,` class
method.`),Aee.forEach(t),r6r=i(jl),b8=n(jl,"P",{});var TGe=s(b8);t6r=r(TGe,"This class cannot be instantiated directly using "),o7e=n(TGe,"CODE",{});var pwt=s(o7e);a6r=r(pwt,"__init__()"),pwt.forEach(t),n6r=r(TGe," (throws an error)."),TGe.forEach(t),s6r=i(jl),Dt=n(jl,"DIV",{class:!0});var Q0=s(Dt);T(v8.$$.fragment,Q0),l6r=i(Q0),r7e=n(Q0,"P",{});var uwt=s(r7e);i6r=r(uwt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),uwt.forEach(t),d6r=i(Q0),Lc=n(Q0,"P",{});var yee=s(Lc);c6r=r(yee,`Note:
Loading a model from its configuration file does `),t7e=n(yee,"STRONG",{});var _wt=s(t7e);f6r=r(_wt,"not"),_wt.forEach(t),m6r=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=n(yee,"A",{href:!0});var bwt=s(wJ);g6r=r(bwt,"from_pretrained()"),bwt.forEach(t),h6r=r(yee," to load the model weights."),yee.forEach(t),p6r=i(Q0),T(FE.$$.fragment,Q0),Q0.forEach(t),u6r=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(F8.$$.fragment,Dl),_6r=i(Dl),a7e=n(Dl,"P",{});var vwt=s(a7e);b6r=r(vwt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vwt.forEach(t),v6r=i(Dl),gn=n(Dl,"P",{});var H0=s(gn);F6r=r(H0,"The model class to instantiate is selected based on the "),n7e=n(H0,"CODE",{});var Fwt=s(n7e);T6r=r(Fwt,"model_type"),Fwt.forEach(t),M6r=r(H0,` property of the config object (either
passed as an argument or loaded from `),s7e=n(H0,"CODE",{});var Twt=s(s7e);E6r=r(Twt,"pretrained_model_name_or_path"),Twt.forEach(t),C6r=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=n(H0,"CODE",{});var Mwt=s(l7e);w6r=r(Mwt,"pretrained_model_name_or_path"),Mwt.forEach(t),A6r=r(H0,":"),H0.forEach(t),y6r=i(Dl),i7e=n(Dl,"UL",{});var Ewt=s(i7e);TE=n(Ewt,"LI",{});var NBe=s(TE);d7e=n(NBe,"STRONG",{});var Cwt=s(d7e);L6r=r(Cwt,"speech_to_text"),Cwt.forEach(t),x6r=r(NBe," \u2014 "),AJ=n(NBe,"A",{href:!0});var wwt=s(AJ);$6r=r(wwt,"TFSpeech2TextForConditionalGeneration"),wwt.forEach(t),k6r=r(NBe," (Speech2Text model)"),NBe.forEach(t),Ewt.forEach(t),S6r=i(Dl),T(ME.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),pje=i(f),xc=n(f,"H2",{class:!0});var MGe=s(xc);EE=n(MGe,"A",{id:!0,class:!0,href:!0});var Awt=s(EE);c7e=n(Awt,"SPAN",{});var ywt=s(c7e);T(T8.$$.fragment,ywt),ywt.forEach(t),Awt.forEach(t),R6r=i(MGe),f7e=n(MGe,"SPAN",{});var Lwt=s(f7e);P6r=r(Lwt,"FlaxAutoModel"),Lwt.forEach(t),MGe.forEach(t),uje=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(M8.$$.fragment,Gl),B6r=i(Gl),$c=n(Gl,"P",{});var Lee=s($c);I6r=r(Lee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yJ=n(Lee,"A",{href:!0});var xwt=s(yJ);q6r=r(xwt,"from_pretrained()"),xwt.forEach(t),N6r=r(Lee," class method or the "),LJ=n(Lee,"A",{href:!0});var $wt=s(LJ);j6r=r($wt,"from_config()"),$wt.forEach(t),D6r=r(Lee,` class
method.`),Lee.forEach(t),G6r=i(Gl),E8=n(Gl,"P",{});var EGe=s(E8);O6r=r(EGe,"This class cannot be instantiated directly using "),m7e=n(EGe,"CODE",{});var kwt=s(m7e);V6r=r(kwt,"__init__()"),kwt.forEach(t),X6r=r(EGe," (throws an error)."),EGe.forEach(t),z6r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var U0=s(Gt);T(C8.$$.fragment,U0),W6r=i(U0),g7e=n(U0,"P",{});var Swt=s(g7e);Q6r=r(Swt,"Instantiates one of the base model classes of the library from a configuration."),Swt.forEach(t),H6r=i(U0),kc=n(U0,"P",{});var xee=s(kc);U6r=r(xee,`Note:
Loading a model from its configuration file does `),h7e=n(xee,"STRONG",{});var Rwt=s(h7e);J6r=r(Rwt,"not"),Rwt.forEach(t),Y6r=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=n(xee,"A",{href:!0});var Pwt=s(xJ);K6r=r(Pwt,"from_pretrained()"),Pwt.forEach(t),Z6r=r(xee," to load the model weights."),xee.forEach(t),eyr=i(U0),T(CE.$$.fragment,U0),U0.forEach(t),oyr=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(w8.$$.fragment,Ol),ryr=i(Ol),p7e=n(Ol,"P",{});var Bwt=s(p7e);tyr=r(Bwt,"Instantiate one of the base model classes of the library from a pretrained model."),Bwt.forEach(t),ayr=i(Ol),hn=n(Ol,"P",{});var J0=s(hn);nyr=r(J0,"The model class to instantiate is selected based on the "),u7e=n(J0,"CODE",{});var Iwt=s(u7e);syr=r(Iwt,"model_type"),Iwt.forEach(t),lyr=r(J0,` property of the config object (either
passed as an argument or loaded from `),_7e=n(J0,"CODE",{});var qwt=s(_7e);iyr=r(qwt,"pretrained_model_name_or_path"),qwt.forEach(t),dyr=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=n(J0,"CODE",{});var Nwt=s(b7e);cyr=r(Nwt,"pretrained_model_name_or_path"),Nwt.forEach(t),fyr=r(J0,":"),J0.forEach(t),myr=i(Ol),te=n(Ol,"UL",{});var ne=s(te);wE=n(ne,"LI",{});var jBe=s(wE);v7e=n(jBe,"STRONG",{});var jwt=s(v7e);gyr=r(jwt,"albert"),jwt.forEach(t),hyr=r(jBe," \u2014 "),$J=n(jBe,"A",{href:!0});var Dwt=s($J);pyr=r(Dwt,"FlaxAlbertModel"),Dwt.forEach(t),uyr=r(jBe," (ALBERT model)"),jBe.forEach(t),_yr=i(ne),AE=n(ne,"LI",{});var DBe=s(AE);F7e=n(DBe,"STRONG",{});var Gwt=s(F7e);byr=r(Gwt,"bart"),Gwt.forEach(t),vyr=r(DBe," \u2014 "),kJ=n(DBe,"A",{href:!0});var Owt=s(kJ);Fyr=r(Owt,"FlaxBartModel"),Owt.forEach(t),Tyr=r(DBe," (BART model)"),DBe.forEach(t),Myr=i(ne),yE=n(ne,"LI",{});var GBe=s(yE);T7e=n(GBe,"STRONG",{});var Vwt=s(T7e);Eyr=r(Vwt,"beit"),Vwt.forEach(t),Cyr=r(GBe," \u2014 "),SJ=n(GBe,"A",{href:!0});var Xwt=s(SJ);wyr=r(Xwt,"FlaxBeitModel"),Xwt.forEach(t),Ayr=r(GBe," (BEiT model)"),GBe.forEach(t),yyr=i(ne),LE=n(ne,"LI",{});var OBe=s(LE);M7e=n(OBe,"STRONG",{});var zwt=s(M7e);Lyr=r(zwt,"bert"),zwt.forEach(t),xyr=r(OBe," \u2014 "),RJ=n(OBe,"A",{href:!0});var Wwt=s(RJ);$yr=r(Wwt,"FlaxBertModel"),Wwt.forEach(t),kyr=r(OBe," (BERT model)"),OBe.forEach(t),Syr=i(ne),xE=n(ne,"LI",{});var VBe=s(xE);E7e=n(VBe,"STRONG",{});var Qwt=s(E7e);Ryr=r(Qwt,"big_bird"),Qwt.forEach(t),Pyr=r(VBe," \u2014 "),PJ=n(VBe,"A",{href:!0});var Hwt=s(PJ);Byr=r(Hwt,"FlaxBigBirdModel"),Hwt.forEach(t),Iyr=r(VBe," (BigBird model)"),VBe.forEach(t),qyr=i(ne),$E=n(ne,"LI",{});var XBe=s($E);C7e=n(XBe,"STRONG",{});var Uwt=s(C7e);Nyr=r(Uwt,"blenderbot"),Uwt.forEach(t),jyr=r(XBe," \u2014 "),BJ=n(XBe,"A",{href:!0});var Jwt=s(BJ);Dyr=r(Jwt,"FlaxBlenderbotModel"),Jwt.forEach(t),Gyr=r(XBe," (Blenderbot model)"),XBe.forEach(t),Oyr=i(ne),kE=n(ne,"LI",{});var zBe=s(kE);w7e=n(zBe,"STRONG",{});var Ywt=s(w7e);Vyr=r(Ywt,"blenderbot-small"),Ywt.forEach(t),Xyr=r(zBe," \u2014 "),IJ=n(zBe,"A",{href:!0});var Kwt=s(IJ);zyr=r(Kwt,"FlaxBlenderbotSmallModel"),Kwt.forEach(t),Wyr=r(zBe," (BlenderbotSmall model)"),zBe.forEach(t),Qyr=i(ne),SE=n(ne,"LI",{});var WBe=s(SE);A7e=n(WBe,"STRONG",{});var Zwt=s(A7e);Hyr=r(Zwt,"clip"),Zwt.forEach(t),Uyr=r(WBe," \u2014 "),qJ=n(WBe,"A",{href:!0});var e0t=s(qJ);Jyr=r(e0t,"FlaxCLIPModel"),e0t.forEach(t),Yyr=r(WBe," (CLIP model)"),WBe.forEach(t),Kyr=i(ne),RE=n(ne,"LI",{});var QBe=s(RE);y7e=n(QBe,"STRONG",{});var o0t=s(y7e);Zyr=r(o0t,"distilbert"),o0t.forEach(t),eLr=r(QBe," \u2014 "),NJ=n(QBe,"A",{href:!0});var r0t=s(NJ);oLr=r(r0t,"FlaxDistilBertModel"),r0t.forEach(t),rLr=r(QBe," (DistilBERT model)"),QBe.forEach(t),tLr=i(ne),PE=n(ne,"LI",{});var HBe=s(PE);L7e=n(HBe,"STRONG",{});var t0t=s(L7e);aLr=r(t0t,"electra"),t0t.forEach(t),nLr=r(HBe," \u2014 "),jJ=n(HBe,"A",{href:!0});var a0t=s(jJ);sLr=r(a0t,"FlaxElectraModel"),a0t.forEach(t),lLr=r(HBe," (ELECTRA model)"),HBe.forEach(t),iLr=i(ne),BE=n(ne,"LI",{});var UBe=s(BE);x7e=n(UBe,"STRONG",{});var n0t=s(x7e);dLr=r(n0t,"gpt2"),n0t.forEach(t),cLr=r(UBe," \u2014 "),DJ=n(UBe,"A",{href:!0});var s0t=s(DJ);fLr=r(s0t,"FlaxGPT2Model"),s0t.forEach(t),mLr=r(UBe," (OpenAI GPT-2 model)"),UBe.forEach(t),gLr=i(ne),IE=n(ne,"LI",{});var JBe=s(IE);$7e=n(JBe,"STRONG",{});var l0t=s($7e);hLr=r(l0t,"gpt_neo"),l0t.forEach(t),pLr=r(JBe," \u2014 "),GJ=n(JBe,"A",{href:!0});var i0t=s(GJ);uLr=r(i0t,"FlaxGPTNeoModel"),i0t.forEach(t),_Lr=r(JBe," (GPT Neo model)"),JBe.forEach(t),bLr=i(ne),qE=n(ne,"LI",{});var YBe=s(qE);k7e=n(YBe,"STRONG",{});var d0t=s(k7e);vLr=r(d0t,"gptj"),d0t.forEach(t),FLr=r(YBe," \u2014 "),OJ=n(YBe,"A",{href:!0});var c0t=s(OJ);TLr=r(c0t,"FlaxGPTJModel"),c0t.forEach(t),MLr=r(YBe," (GPT-J model)"),YBe.forEach(t),ELr=i(ne),NE=n(ne,"LI",{});var KBe=s(NE);S7e=n(KBe,"STRONG",{});var f0t=s(S7e);CLr=r(f0t,"marian"),f0t.forEach(t),wLr=r(KBe," \u2014 "),VJ=n(KBe,"A",{href:!0});var m0t=s(VJ);ALr=r(m0t,"FlaxMarianModel"),m0t.forEach(t),yLr=r(KBe," (Marian model)"),KBe.forEach(t),LLr=i(ne),jE=n(ne,"LI",{});var ZBe=s(jE);R7e=n(ZBe,"STRONG",{});var g0t=s(R7e);xLr=r(g0t,"mbart"),g0t.forEach(t),$Lr=r(ZBe," \u2014 "),XJ=n(ZBe,"A",{href:!0});var h0t=s(XJ);kLr=r(h0t,"FlaxMBartModel"),h0t.forEach(t),SLr=r(ZBe," (mBART model)"),ZBe.forEach(t),RLr=i(ne),DE=n(ne,"LI",{});var eIe=s(DE);P7e=n(eIe,"STRONG",{});var p0t=s(P7e);PLr=r(p0t,"mt5"),p0t.forEach(t),BLr=r(eIe," \u2014 "),zJ=n(eIe,"A",{href:!0});var u0t=s(zJ);ILr=r(u0t,"FlaxMT5Model"),u0t.forEach(t),qLr=r(eIe," (mT5 model)"),eIe.forEach(t),NLr=i(ne),GE=n(ne,"LI",{});var oIe=s(GE);B7e=n(oIe,"STRONG",{});var _0t=s(B7e);jLr=r(_0t,"pegasus"),_0t.forEach(t),DLr=r(oIe," \u2014 "),WJ=n(oIe,"A",{href:!0});var b0t=s(WJ);GLr=r(b0t,"FlaxPegasusModel"),b0t.forEach(t),OLr=r(oIe," (Pegasus model)"),oIe.forEach(t),VLr=i(ne),OE=n(ne,"LI",{});var rIe=s(OE);I7e=n(rIe,"STRONG",{});var v0t=s(I7e);XLr=r(v0t,"roberta"),v0t.forEach(t),zLr=r(rIe," \u2014 "),QJ=n(rIe,"A",{href:!0});var F0t=s(QJ);WLr=r(F0t,"FlaxRobertaModel"),F0t.forEach(t),QLr=r(rIe," (RoBERTa model)"),rIe.forEach(t),HLr=i(ne),VE=n(ne,"LI",{});var tIe=s(VE);q7e=n(tIe,"STRONG",{});var T0t=s(q7e);ULr=r(T0t,"roformer"),T0t.forEach(t),JLr=r(tIe," \u2014 "),HJ=n(tIe,"A",{href:!0});var M0t=s(HJ);YLr=r(M0t,"FlaxRoFormerModel"),M0t.forEach(t),KLr=r(tIe," (RoFormer model)"),tIe.forEach(t),ZLr=i(ne),XE=n(ne,"LI",{});var aIe=s(XE);N7e=n(aIe,"STRONG",{});var E0t=s(N7e);e8r=r(E0t,"t5"),E0t.forEach(t),o8r=r(aIe," \u2014 "),UJ=n(aIe,"A",{href:!0});var C0t=s(UJ);r8r=r(C0t,"FlaxT5Model"),C0t.forEach(t),t8r=r(aIe," (T5 model)"),aIe.forEach(t),a8r=i(ne),zE=n(ne,"LI",{});var nIe=s(zE);j7e=n(nIe,"STRONG",{});var w0t=s(j7e);n8r=r(w0t,"vision-text-dual-encoder"),w0t.forEach(t),s8r=r(nIe," \u2014 "),JJ=n(nIe,"A",{href:!0});var A0t=s(JJ);l8r=r(A0t,"FlaxVisionTextDualEncoderModel"),A0t.forEach(t),i8r=r(nIe," (VisionTextDualEncoder model)"),nIe.forEach(t),d8r=i(ne),WE=n(ne,"LI",{});var sIe=s(WE);D7e=n(sIe,"STRONG",{});var y0t=s(D7e);c8r=r(y0t,"vit"),y0t.forEach(t),f8r=r(sIe," \u2014 "),YJ=n(sIe,"A",{href:!0});var L0t=s(YJ);m8r=r(L0t,"FlaxViTModel"),L0t.forEach(t),g8r=r(sIe," (ViT model)"),sIe.forEach(t),h8r=i(ne),QE=n(ne,"LI",{});var lIe=s(QE);G7e=n(lIe,"STRONG",{});var x0t=s(G7e);p8r=r(x0t,"wav2vec2"),x0t.forEach(t),u8r=r(lIe," \u2014 "),KJ=n(lIe,"A",{href:!0});var $0t=s(KJ);_8r=r($0t,"FlaxWav2Vec2Model"),$0t.forEach(t),b8r=r(lIe," (Wav2Vec2 model)"),lIe.forEach(t),v8r=i(ne),HE=n(ne,"LI",{});var iIe=s(HE);O7e=n(iIe,"STRONG",{});var k0t=s(O7e);F8r=r(k0t,"xglm"),k0t.forEach(t),T8r=r(iIe," \u2014 "),ZJ=n(iIe,"A",{href:!0});var S0t=s(ZJ);M8r=r(S0t,"FlaxXGLMModel"),S0t.forEach(t),E8r=r(iIe," (XGLM model)"),iIe.forEach(t),C8r=i(ne),UE=n(ne,"LI",{});var dIe=s(UE);V7e=n(dIe,"STRONG",{});var R0t=s(V7e);w8r=r(R0t,"xlm-roberta"),R0t.forEach(t),A8r=r(dIe," \u2014 "),eY=n(dIe,"A",{href:!0});var P0t=s(eY);y8r=r(P0t,"FlaxXLMRobertaModel"),P0t.forEach(t),L8r=r(dIe," (XLM-RoBERTa model)"),dIe.forEach(t),ne.forEach(t),x8r=i(Ol),T(JE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),_je=i(f),Sc=n(f,"H2",{class:!0});var CGe=s(Sc);YE=n(CGe,"A",{id:!0,class:!0,href:!0});var B0t=s(YE);X7e=n(B0t,"SPAN",{});var I0t=s(X7e);T(A8.$$.fragment,I0t),I0t.forEach(t),B0t.forEach(t),$8r=i(CGe),z7e=n(CGe,"SPAN",{});var q0t=s(z7e);k8r=r(q0t,"FlaxAutoModelForCausalLM"),q0t.forEach(t),CGe.forEach(t),bje=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(y8.$$.fragment,Vl),S8r=i(Vl),Rc=n(Vl,"P",{});var $ee=s(Rc);R8r=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oY=n($ee,"A",{href:!0});var N0t=s(oY);P8r=r(N0t,"from_pretrained()"),N0t.forEach(t),B8r=r($ee," class method or the "),rY=n($ee,"A",{href:!0});var j0t=s(rY);I8r=r(j0t,"from_config()"),j0t.forEach(t),q8r=r($ee,` class
method.`),$ee.forEach(t),N8r=i(Vl),L8=n(Vl,"P",{});var wGe=s(L8);j8r=r(wGe,"This class cannot be instantiated directly using "),W7e=n(wGe,"CODE",{});var D0t=s(W7e);D8r=r(D0t,"__init__()"),D0t.forEach(t),G8r=r(wGe," (throws an error)."),wGe.forEach(t),O8r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var Y0=s(Ot);T(x8.$$.fragment,Y0),V8r=i(Y0),Q7e=n(Y0,"P",{});var G0t=s(Q7e);X8r=r(G0t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),G0t.forEach(t),z8r=i(Y0),Pc=n(Y0,"P",{});var kee=s(Pc);W8r=r(kee,`Note:
Loading a model from its configuration file does `),H7e=n(kee,"STRONG",{});var O0t=s(H7e);Q8r=r(O0t,"not"),O0t.forEach(t),H8r=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=n(kee,"A",{href:!0});var V0t=s(tY);U8r=r(V0t,"from_pretrained()"),V0t.forEach(t),J8r=r(kee," to load the model weights."),kee.forEach(t),Y8r=i(Y0),T(KE.$$.fragment,Y0),Y0.forEach(t),K8r=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T($8.$$.fragment,Xl),Z8r=i(Xl),U7e=n(Xl,"P",{});var X0t=s(U7e);exr=r(X0t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),X0t.forEach(t),oxr=i(Xl),pn=n(Xl,"P",{});var K0=s(pn);rxr=r(K0,"The model class to instantiate is selected based on the "),J7e=n(K0,"CODE",{});var z0t=s(J7e);txr=r(z0t,"model_type"),z0t.forEach(t),axr=r(K0,` property of the config object (either
passed as an argument or loaded from `),Y7e=n(K0,"CODE",{});var W0t=s(Y7e);nxr=r(W0t,"pretrained_model_name_or_path"),W0t.forEach(t),sxr=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=n(K0,"CODE",{});var Q0t=s(K7e);lxr=r(Q0t,"pretrained_model_name_or_path"),Q0t.forEach(t),ixr=r(K0,":"),K0.forEach(t),dxr=i(Xl),Re=n(Xl,"UL",{});var Xe=s(Re);ZE=n(Xe,"LI",{});var cIe=s(ZE);Z7e=n(cIe,"STRONG",{});var H0t=s(Z7e);cxr=r(H0t,"bart"),H0t.forEach(t),fxr=r(cIe," \u2014 "),aY=n(cIe,"A",{href:!0});var U0t=s(aY);mxr=r(U0t,"FlaxBartForCausalLM"),U0t.forEach(t),gxr=r(cIe," (BART model)"),cIe.forEach(t),hxr=i(Xe),eC=n(Xe,"LI",{});var fIe=s(eC);e9e=n(fIe,"STRONG",{});var J0t=s(e9e);pxr=r(J0t,"bert"),J0t.forEach(t),uxr=r(fIe," \u2014 "),nY=n(fIe,"A",{href:!0});var Y0t=s(nY);_xr=r(Y0t,"FlaxBertForCausalLM"),Y0t.forEach(t),bxr=r(fIe," (BERT model)"),fIe.forEach(t),vxr=i(Xe),oC=n(Xe,"LI",{});var mIe=s(oC);o9e=n(mIe,"STRONG",{});var K0t=s(o9e);Fxr=r(K0t,"big_bird"),K0t.forEach(t),Txr=r(mIe," \u2014 "),sY=n(mIe,"A",{href:!0});var Z0t=s(sY);Mxr=r(Z0t,"FlaxBigBirdForCausalLM"),Z0t.forEach(t),Exr=r(mIe," (BigBird model)"),mIe.forEach(t),Cxr=i(Xe),rC=n(Xe,"LI",{});var gIe=s(rC);r9e=n(gIe,"STRONG",{});var eAt=s(r9e);wxr=r(eAt,"electra"),eAt.forEach(t),Axr=r(gIe," \u2014 "),lY=n(gIe,"A",{href:!0});var oAt=s(lY);yxr=r(oAt,"FlaxElectraForCausalLM"),oAt.forEach(t),Lxr=r(gIe," (ELECTRA model)"),gIe.forEach(t),xxr=i(Xe),tC=n(Xe,"LI",{});var hIe=s(tC);t9e=n(hIe,"STRONG",{});var rAt=s(t9e);$xr=r(rAt,"gpt2"),rAt.forEach(t),kxr=r(hIe," \u2014 "),iY=n(hIe,"A",{href:!0});var tAt=s(iY);Sxr=r(tAt,"FlaxGPT2LMHeadModel"),tAt.forEach(t),Rxr=r(hIe," (OpenAI GPT-2 model)"),hIe.forEach(t),Pxr=i(Xe),aC=n(Xe,"LI",{});var pIe=s(aC);a9e=n(pIe,"STRONG",{});var aAt=s(a9e);Bxr=r(aAt,"gpt_neo"),aAt.forEach(t),Ixr=r(pIe," \u2014 "),dY=n(pIe,"A",{href:!0});var nAt=s(dY);qxr=r(nAt,"FlaxGPTNeoForCausalLM"),nAt.forEach(t),Nxr=r(pIe," (GPT Neo model)"),pIe.forEach(t),jxr=i(Xe),nC=n(Xe,"LI",{});var uIe=s(nC);n9e=n(uIe,"STRONG",{});var sAt=s(n9e);Dxr=r(sAt,"gptj"),sAt.forEach(t),Gxr=r(uIe," \u2014 "),cY=n(uIe,"A",{href:!0});var lAt=s(cY);Oxr=r(lAt,"FlaxGPTJForCausalLM"),lAt.forEach(t),Vxr=r(uIe," (GPT-J model)"),uIe.forEach(t),Xxr=i(Xe),sC=n(Xe,"LI",{});var _Ie=s(sC);s9e=n(_Ie,"STRONG",{});var iAt=s(s9e);zxr=r(iAt,"roberta"),iAt.forEach(t),Wxr=r(_Ie," \u2014 "),fY=n(_Ie,"A",{href:!0});var dAt=s(fY);Qxr=r(dAt,"FlaxRobertaForCausalLM"),dAt.forEach(t),Hxr=r(_Ie," (RoBERTa model)"),_Ie.forEach(t),Uxr=i(Xe),lC=n(Xe,"LI",{});var bIe=s(lC);l9e=n(bIe,"STRONG",{});var cAt=s(l9e);Jxr=r(cAt,"xglm"),cAt.forEach(t),Yxr=r(bIe," \u2014 "),mY=n(bIe,"A",{href:!0});var fAt=s(mY);Kxr=r(fAt,"FlaxXGLMForCausalLM"),fAt.forEach(t),Zxr=r(bIe," (XGLM model)"),bIe.forEach(t),Xe.forEach(t),e$r=i(Xl),T(iC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),vje=i(f),Bc=n(f,"H2",{class:!0});var AGe=s(Bc);dC=n(AGe,"A",{id:!0,class:!0,href:!0});var mAt=s(dC);i9e=n(mAt,"SPAN",{});var gAt=s(i9e);T(k8.$$.fragment,gAt),gAt.forEach(t),mAt.forEach(t),o$r=i(AGe),d9e=n(AGe,"SPAN",{});var hAt=s(d9e);r$r=r(hAt,"FlaxAutoModelForPreTraining"),hAt.forEach(t),AGe.forEach(t),Fje=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(S8.$$.fragment,zl),t$r=i(zl),Ic=n(zl,"P",{});var See=s(Ic);a$r=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gY=n(See,"A",{href:!0});var pAt=s(gY);n$r=r(pAt,"from_pretrained()"),pAt.forEach(t),s$r=r(See," class method or the "),hY=n(See,"A",{href:!0});var uAt=s(hY);l$r=r(uAt,"from_config()"),uAt.forEach(t),i$r=r(See,` class
method.`),See.forEach(t),d$r=i(zl),R8=n(zl,"P",{});var yGe=s(R8);c$r=r(yGe,"This class cannot be instantiated directly using "),c9e=n(yGe,"CODE",{});var _At=s(c9e);f$r=r(_At,"__init__()"),_At.forEach(t),m$r=r(yGe," (throws an error)."),yGe.forEach(t),g$r=i(zl),Vt=n(zl,"DIV",{class:!0});var Z0=s(Vt);T(P8.$$.fragment,Z0),h$r=i(Z0),f9e=n(Z0,"P",{});var bAt=s(f9e);p$r=r(bAt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),bAt.forEach(t),u$r=i(Z0),qc=n(Z0,"P",{});var Ree=s(qc);_$r=r(Ree,`Note:
Loading a model from its configuration file does `),m9e=n(Ree,"STRONG",{});var vAt=s(m9e);b$r=r(vAt,"not"),vAt.forEach(t),v$r=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=n(Ree,"A",{href:!0});var FAt=s(pY);F$r=r(FAt,"from_pretrained()"),FAt.forEach(t),T$r=r(Ree," to load the model weights."),Ree.forEach(t),M$r=i(Z0),T(cC.$$.fragment,Z0),Z0.forEach(t),E$r=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(B8.$$.fragment,Wl),C$r=i(Wl),g9e=n(Wl,"P",{});var TAt=s(g9e);w$r=r(TAt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),TAt.forEach(t),A$r=i(Wl),un=n(Wl,"P",{});var eA=s(un);y$r=r(eA,"The model class to instantiate is selected based on the "),h9e=n(eA,"CODE",{});var MAt=s(h9e);L$r=r(MAt,"model_type"),MAt.forEach(t),x$r=r(eA,` property of the config object (either
passed as an argument or loaded from `),p9e=n(eA,"CODE",{});var EAt=s(p9e);$$r=r(EAt,"pretrained_model_name_or_path"),EAt.forEach(t),k$r=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u9e=n(eA,"CODE",{});var CAt=s(u9e);S$r=r(CAt,"pretrained_model_name_or_path"),CAt.forEach(t),R$r=r(eA,":"),eA.forEach(t),P$r=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);fC=n(we,"LI",{});var vIe=s(fC);_9e=n(vIe,"STRONG",{});var wAt=s(_9e);B$r=r(wAt,"albert"),wAt.forEach(t),I$r=r(vIe," \u2014 "),uY=n(vIe,"A",{href:!0});var AAt=s(uY);q$r=r(AAt,"FlaxAlbertForPreTraining"),AAt.forEach(t),N$r=r(vIe," (ALBERT model)"),vIe.forEach(t),j$r=i(we),mC=n(we,"LI",{});var FIe=s(mC);b9e=n(FIe,"STRONG",{});var yAt=s(b9e);D$r=r(yAt,"bart"),yAt.forEach(t),G$r=r(FIe," \u2014 "),_Y=n(FIe,"A",{href:!0});var LAt=s(_Y);O$r=r(LAt,"FlaxBartForConditionalGeneration"),LAt.forEach(t),V$r=r(FIe," (BART model)"),FIe.forEach(t),X$r=i(we),gC=n(we,"LI",{});var TIe=s(gC);v9e=n(TIe,"STRONG",{});var xAt=s(v9e);z$r=r(xAt,"bert"),xAt.forEach(t),W$r=r(TIe," \u2014 "),bY=n(TIe,"A",{href:!0});var $At=s(bY);Q$r=r($At,"FlaxBertForPreTraining"),$At.forEach(t),H$r=r(TIe," (BERT model)"),TIe.forEach(t),U$r=i(we),hC=n(we,"LI",{});var MIe=s(hC);F9e=n(MIe,"STRONG",{});var kAt=s(F9e);J$r=r(kAt,"big_bird"),kAt.forEach(t),Y$r=r(MIe," \u2014 "),vY=n(MIe,"A",{href:!0});var SAt=s(vY);K$r=r(SAt,"FlaxBigBirdForPreTraining"),SAt.forEach(t),Z$r=r(MIe," (BigBird model)"),MIe.forEach(t),ekr=i(we),pC=n(we,"LI",{});var EIe=s(pC);T9e=n(EIe,"STRONG",{});var RAt=s(T9e);okr=r(RAt,"electra"),RAt.forEach(t),rkr=r(EIe," \u2014 "),FY=n(EIe,"A",{href:!0});var PAt=s(FY);tkr=r(PAt,"FlaxElectraForPreTraining"),PAt.forEach(t),akr=r(EIe," (ELECTRA model)"),EIe.forEach(t),nkr=i(we),uC=n(we,"LI",{});var CIe=s(uC);M9e=n(CIe,"STRONG",{});var BAt=s(M9e);skr=r(BAt,"mbart"),BAt.forEach(t),lkr=r(CIe," \u2014 "),TY=n(CIe,"A",{href:!0});var IAt=s(TY);ikr=r(IAt,"FlaxMBartForConditionalGeneration"),IAt.forEach(t),dkr=r(CIe," (mBART model)"),CIe.forEach(t),ckr=i(we),_C=n(we,"LI",{});var wIe=s(_C);E9e=n(wIe,"STRONG",{});var qAt=s(E9e);fkr=r(qAt,"mt5"),qAt.forEach(t),mkr=r(wIe," \u2014 "),MY=n(wIe,"A",{href:!0});var NAt=s(MY);gkr=r(NAt,"FlaxMT5ForConditionalGeneration"),NAt.forEach(t),hkr=r(wIe," (mT5 model)"),wIe.forEach(t),pkr=i(we),bC=n(we,"LI",{});var AIe=s(bC);C9e=n(AIe,"STRONG",{});var jAt=s(C9e);ukr=r(jAt,"roberta"),jAt.forEach(t),_kr=r(AIe," \u2014 "),EY=n(AIe,"A",{href:!0});var DAt=s(EY);bkr=r(DAt,"FlaxRobertaForMaskedLM"),DAt.forEach(t),vkr=r(AIe," (RoBERTa model)"),AIe.forEach(t),Fkr=i(we),vC=n(we,"LI",{});var yIe=s(vC);w9e=n(yIe,"STRONG",{});var GAt=s(w9e);Tkr=r(GAt,"roformer"),GAt.forEach(t),Mkr=r(yIe," \u2014 "),CY=n(yIe,"A",{href:!0});var OAt=s(CY);Ekr=r(OAt,"FlaxRoFormerForMaskedLM"),OAt.forEach(t),Ckr=r(yIe," (RoFormer model)"),yIe.forEach(t),wkr=i(we),FC=n(we,"LI",{});var LIe=s(FC);A9e=n(LIe,"STRONG",{});var VAt=s(A9e);Akr=r(VAt,"t5"),VAt.forEach(t),ykr=r(LIe," \u2014 "),wY=n(LIe,"A",{href:!0});var XAt=s(wY);Lkr=r(XAt,"FlaxT5ForConditionalGeneration"),XAt.forEach(t),xkr=r(LIe," (T5 model)"),LIe.forEach(t),$kr=i(we),TC=n(we,"LI",{});var xIe=s(TC);y9e=n(xIe,"STRONG",{});var zAt=s(y9e);kkr=r(zAt,"wav2vec2"),zAt.forEach(t),Skr=r(xIe," \u2014 "),AY=n(xIe,"A",{href:!0});var WAt=s(AY);Rkr=r(WAt,"FlaxWav2Vec2ForPreTraining"),WAt.forEach(t),Pkr=r(xIe," (Wav2Vec2 model)"),xIe.forEach(t),Bkr=i(we),MC=n(we,"LI",{});var $Ie=s(MC);L9e=n($Ie,"STRONG",{});var QAt=s(L9e);Ikr=r(QAt,"xlm-roberta"),QAt.forEach(t),qkr=r($Ie," \u2014 "),yY=n($Ie,"A",{href:!0});var HAt=s(yY);Nkr=r(HAt,"FlaxXLMRobertaForMaskedLM"),HAt.forEach(t),jkr=r($Ie," (XLM-RoBERTa model)"),$Ie.forEach(t),we.forEach(t),Dkr=i(Wl),T(EC.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),Tje=i(f),Nc=n(f,"H2",{class:!0});var LGe=s(Nc);CC=n(LGe,"A",{id:!0,class:!0,href:!0});var UAt=s(CC);x9e=n(UAt,"SPAN",{});var JAt=s(x9e);T(I8.$$.fragment,JAt),JAt.forEach(t),UAt.forEach(t),Gkr=i(LGe),$9e=n(LGe,"SPAN",{});var YAt=s($9e);Okr=r(YAt,"FlaxAutoModelForMaskedLM"),YAt.forEach(t),LGe.forEach(t),Mje=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(q8.$$.fragment,Ql),Vkr=i(Ql),jc=n(Ql,"P",{});var Pee=s(jc);Xkr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LY=n(Pee,"A",{href:!0});var KAt=s(LY);zkr=r(KAt,"from_pretrained()"),KAt.forEach(t),Wkr=r(Pee," class method or the "),xY=n(Pee,"A",{href:!0});var ZAt=s(xY);Qkr=r(ZAt,"from_config()"),ZAt.forEach(t),Hkr=r(Pee,` class
method.`),Pee.forEach(t),Ukr=i(Ql),N8=n(Ql,"P",{});var xGe=s(N8);Jkr=r(xGe,"This class cannot be instantiated directly using "),k9e=n(xGe,"CODE",{});var e6t=s(k9e);Ykr=r(e6t,"__init__()"),e6t.forEach(t),Kkr=r(xGe," (throws an error)."),xGe.forEach(t),Zkr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var oA=s(Xt);T(j8.$$.fragment,oA),eSr=i(oA),S9e=n(oA,"P",{});var o6t=s(S9e);oSr=r(o6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),o6t.forEach(t),rSr=i(oA),Dc=n(oA,"P",{});var Bee=s(Dc);tSr=r(Bee,`Note:
Loading a model from its configuration file does `),R9e=n(Bee,"STRONG",{});var r6t=s(R9e);aSr=r(r6t,"not"),r6t.forEach(t),nSr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=n(Bee,"A",{href:!0});var t6t=s($Y);sSr=r(t6t,"from_pretrained()"),t6t.forEach(t),lSr=r(Bee," to load the model weights."),Bee.forEach(t),iSr=i(oA),T(wC.$$.fragment,oA),oA.forEach(t),dSr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(D8.$$.fragment,Hl),cSr=i(Hl),P9e=n(Hl,"P",{});var a6t=s(P9e);fSr=r(a6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),a6t.forEach(t),mSr=i(Hl),_n=n(Hl,"P",{});var rA=s(_n);gSr=r(rA,"The model class to instantiate is selected based on the "),B9e=n(rA,"CODE",{});var n6t=s(B9e);hSr=r(n6t,"model_type"),n6t.forEach(t),pSr=r(rA,` property of the config object (either
passed as an argument or loaded from `),I9e=n(rA,"CODE",{});var s6t=s(I9e);uSr=r(s6t,"pretrained_model_name_or_path"),s6t.forEach(t),_Sr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q9e=n(rA,"CODE",{});var l6t=s(q9e);bSr=r(l6t,"pretrained_model_name_or_path"),l6t.forEach(t),vSr=r(rA,":"),rA.forEach(t),FSr=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);AC=n(Ie,"LI",{});var kIe=s(AC);N9e=n(kIe,"STRONG",{});var i6t=s(N9e);TSr=r(i6t,"albert"),i6t.forEach(t),MSr=r(kIe," \u2014 "),kY=n(kIe,"A",{href:!0});var d6t=s(kY);ESr=r(d6t,"FlaxAlbertForMaskedLM"),d6t.forEach(t),CSr=r(kIe," (ALBERT model)"),kIe.forEach(t),wSr=i(Ie),yC=n(Ie,"LI",{});var SIe=s(yC);j9e=n(SIe,"STRONG",{});var c6t=s(j9e);ASr=r(c6t,"bart"),c6t.forEach(t),ySr=r(SIe," \u2014 "),SY=n(SIe,"A",{href:!0});var f6t=s(SY);LSr=r(f6t,"FlaxBartForConditionalGeneration"),f6t.forEach(t),xSr=r(SIe," (BART model)"),SIe.forEach(t),$Sr=i(Ie),LC=n(Ie,"LI",{});var RIe=s(LC);D9e=n(RIe,"STRONG",{});var m6t=s(D9e);kSr=r(m6t,"bert"),m6t.forEach(t),SSr=r(RIe," \u2014 "),RY=n(RIe,"A",{href:!0});var g6t=s(RY);RSr=r(g6t,"FlaxBertForMaskedLM"),g6t.forEach(t),PSr=r(RIe," (BERT model)"),RIe.forEach(t),BSr=i(Ie),xC=n(Ie,"LI",{});var PIe=s(xC);G9e=n(PIe,"STRONG",{});var h6t=s(G9e);ISr=r(h6t,"big_bird"),h6t.forEach(t),qSr=r(PIe," \u2014 "),PY=n(PIe,"A",{href:!0});var p6t=s(PY);NSr=r(p6t,"FlaxBigBirdForMaskedLM"),p6t.forEach(t),jSr=r(PIe," (BigBird model)"),PIe.forEach(t),DSr=i(Ie),$C=n(Ie,"LI",{});var BIe=s($C);O9e=n(BIe,"STRONG",{});var u6t=s(O9e);GSr=r(u6t,"distilbert"),u6t.forEach(t),OSr=r(BIe," \u2014 "),BY=n(BIe,"A",{href:!0});var _6t=s(BY);VSr=r(_6t,"FlaxDistilBertForMaskedLM"),_6t.forEach(t),XSr=r(BIe," (DistilBERT model)"),BIe.forEach(t),zSr=i(Ie),kC=n(Ie,"LI",{});var IIe=s(kC);V9e=n(IIe,"STRONG",{});var b6t=s(V9e);WSr=r(b6t,"electra"),b6t.forEach(t),QSr=r(IIe," \u2014 "),IY=n(IIe,"A",{href:!0});var v6t=s(IY);HSr=r(v6t,"FlaxElectraForMaskedLM"),v6t.forEach(t),USr=r(IIe," (ELECTRA model)"),IIe.forEach(t),JSr=i(Ie),SC=n(Ie,"LI",{});var qIe=s(SC);X9e=n(qIe,"STRONG",{});var F6t=s(X9e);YSr=r(F6t,"mbart"),F6t.forEach(t),KSr=r(qIe," \u2014 "),qY=n(qIe,"A",{href:!0});var T6t=s(qY);ZSr=r(T6t,"FlaxMBartForConditionalGeneration"),T6t.forEach(t),eRr=r(qIe," (mBART model)"),qIe.forEach(t),oRr=i(Ie),RC=n(Ie,"LI",{});var NIe=s(RC);z9e=n(NIe,"STRONG",{});var M6t=s(z9e);rRr=r(M6t,"roberta"),M6t.forEach(t),tRr=r(NIe," \u2014 "),NY=n(NIe,"A",{href:!0});var E6t=s(NY);aRr=r(E6t,"FlaxRobertaForMaskedLM"),E6t.forEach(t),nRr=r(NIe," (RoBERTa model)"),NIe.forEach(t),sRr=i(Ie),PC=n(Ie,"LI",{});var jIe=s(PC);W9e=n(jIe,"STRONG",{});var C6t=s(W9e);lRr=r(C6t,"roformer"),C6t.forEach(t),iRr=r(jIe," \u2014 "),jY=n(jIe,"A",{href:!0});var w6t=s(jY);dRr=r(w6t,"FlaxRoFormerForMaskedLM"),w6t.forEach(t),cRr=r(jIe," (RoFormer model)"),jIe.forEach(t),fRr=i(Ie),BC=n(Ie,"LI",{});var DIe=s(BC);Q9e=n(DIe,"STRONG",{});var A6t=s(Q9e);mRr=r(A6t,"xlm-roberta"),A6t.forEach(t),gRr=r(DIe," \u2014 "),DY=n(DIe,"A",{href:!0});var y6t=s(DY);hRr=r(y6t,"FlaxXLMRobertaForMaskedLM"),y6t.forEach(t),pRr=r(DIe," (XLM-RoBERTa model)"),DIe.forEach(t),Ie.forEach(t),uRr=i(Hl),T(IC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),Eje=i(f),Gc=n(f,"H2",{class:!0});var $Ge=s(Gc);qC=n($Ge,"A",{id:!0,class:!0,href:!0});var L6t=s(qC);H9e=n(L6t,"SPAN",{});var x6t=s(H9e);T(G8.$$.fragment,x6t),x6t.forEach(t),L6t.forEach(t),_Rr=i($Ge),U9e=n($Ge,"SPAN",{});var $6t=s(U9e);bRr=r($6t,"FlaxAutoModelForSeq2SeqLM"),$6t.forEach(t),$Ge.forEach(t),Cje=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(O8.$$.fragment,Ul),vRr=i(Ul),Oc=n(Ul,"P",{});var Iee=s(Oc);FRr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GY=n(Iee,"A",{href:!0});var k6t=s(GY);TRr=r(k6t,"from_pretrained()"),k6t.forEach(t),MRr=r(Iee," class method or the "),OY=n(Iee,"A",{href:!0});var S6t=s(OY);ERr=r(S6t,"from_config()"),S6t.forEach(t),CRr=r(Iee,` class
method.`),Iee.forEach(t),wRr=i(Ul),V8=n(Ul,"P",{});var kGe=s(V8);ARr=r(kGe,"This class cannot be instantiated directly using "),J9e=n(kGe,"CODE",{});var R6t=s(J9e);yRr=r(R6t,"__init__()"),R6t.forEach(t),LRr=r(kGe," (throws an error)."),kGe.forEach(t),xRr=i(Ul),zt=n(Ul,"DIV",{class:!0});var tA=s(zt);T(X8.$$.fragment,tA),$Rr=i(tA),Y9e=n(tA,"P",{});var P6t=s(Y9e);kRr=r(P6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),P6t.forEach(t),SRr=i(tA),Vc=n(tA,"P",{});var qee=s(Vc);RRr=r(qee,`Note:
Loading a model from its configuration file does `),K9e=n(qee,"STRONG",{});var B6t=s(K9e);PRr=r(B6t,"not"),B6t.forEach(t),BRr=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=n(qee,"A",{href:!0});var I6t=s(VY);IRr=r(I6t,"from_pretrained()"),I6t.forEach(t),qRr=r(qee," to load the model weights."),qee.forEach(t),NRr=i(tA),T(NC.$$.fragment,tA),tA.forEach(t),jRr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(z8.$$.fragment,Jl),DRr=i(Jl),Z9e=n(Jl,"P",{});var q6t=s(Z9e);GRr=r(q6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),q6t.forEach(t),ORr=i(Jl),bn=n(Jl,"P",{});var aA=s(bn);VRr=r(aA,"The model class to instantiate is selected based on the "),eMe=n(aA,"CODE",{});var N6t=s(eMe);XRr=r(N6t,"model_type"),N6t.forEach(t),zRr=r(aA,` property of the config object (either
passed as an argument or loaded from `),oMe=n(aA,"CODE",{});var j6t=s(oMe);WRr=r(j6t,"pretrained_model_name_or_path"),j6t.forEach(t),QRr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=n(aA,"CODE",{});var D6t=s(rMe);HRr=r(D6t,"pretrained_model_name_or_path"),D6t.forEach(t),URr=r(aA,":"),aA.forEach(t),JRr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);jC=n(ze,"LI",{});var GIe=s(jC);tMe=n(GIe,"STRONG",{});var G6t=s(tMe);YRr=r(G6t,"bart"),G6t.forEach(t),KRr=r(GIe," \u2014 "),XY=n(GIe,"A",{href:!0});var O6t=s(XY);ZRr=r(O6t,"FlaxBartForConditionalGeneration"),O6t.forEach(t),ePr=r(GIe," (BART model)"),GIe.forEach(t),oPr=i(ze),DC=n(ze,"LI",{});var OIe=s(DC);aMe=n(OIe,"STRONG",{});var V6t=s(aMe);rPr=r(V6t,"blenderbot"),V6t.forEach(t),tPr=r(OIe," \u2014 "),zY=n(OIe,"A",{href:!0});var X6t=s(zY);aPr=r(X6t,"FlaxBlenderbotForConditionalGeneration"),X6t.forEach(t),nPr=r(OIe," (Blenderbot model)"),OIe.forEach(t),sPr=i(ze),GC=n(ze,"LI",{});var VIe=s(GC);nMe=n(VIe,"STRONG",{});var z6t=s(nMe);lPr=r(z6t,"blenderbot-small"),z6t.forEach(t),iPr=r(VIe," \u2014 "),WY=n(VIe,"A",{href:!0});var W6t=s(WY);dPr=r(W6t,"FlaxBlenderbotSmallForConditionalGeneration"),W6t.forEach(t),cPr=r(VIe," (BlenderbotSmall model)"),VIe.forEach(t),fPr=i(ze),OC=n(ze,"LI",{});var XIe=s(OC);sMe=n(XIe,"STRONG",{});var Q6t=s(sMe);mPr=r(Q6t,"encoder-decoder"),Q6t.forEach(t),gPr=r(XIe," \u2014 "),QY=n(XIe,"A",{href:!0});var H6t=s(QY);hPr=r(H6t,"FlaxEncoderDecoderModel"),H6t.forEach(t),pPr=r(XIe," (Encoder decoder model)"),XIe.forEach(t),uPr=i(ze),VC=n(ze,"LI",{});var zIe=s(VC);lMe=n(zIe,"STRONG",{});var U6t=s(lMe);_Pr=r(U6t,"marian"),U6t.forEach(t),bPr=r(zIe," \u2014 "),HY=n(zIe,"A",{href:!0});var J6t=s(HY);vPr=r(J6t,"FlaxMarianMTModel"),J6t.forEach(t),FPr=r(zIe," (Marian model)"),zIe.forEach(t),TPr=i(ze),XC=n(ze,"LI",{});var WIe=s(XC);iMe=n(WIe,"STRONG",{});var Y6t=s(iMe);MPr=r(Y6t,"mbart"),Y6t.forEach(t),EPr=r(WIe," \u2014 "),UY=n(WIe,"A",{href:!0});var K6t=s(UY);CPr=r(K6t,"FlaxMBartForConditionalGeneration"),K6t.forEach(t),wPr=r(WIe," (mBART model)"),WIe.forEach(t),APr=i(ze),zC=n(ze,"LI",{});var QIe=s(zC);dMe=n(QIe,"STRONG",{});var Z6t=s(dMe);yPr=r(Z6t,"mt5"),Z6t.forEach(t),LPr=r(QIe," \u2014 "),JY=n(QIe,"A",{href:!0});var eyt=s(JY);xPr=r(eyt,"FlaxMT5ForConditionalGeneration"),eyt.forEach(t),$Pr=r(QIe," (mT5 model)"),QIe.forEach(t),kPr=i(ze),WC=n(ze,"LI",{});var HIe=s(WC);cMe=n(HIe,"STRONG",{});var oyt=s(cMe);SPr=r(oyt,"pegasus"),oyt.forEach(t),RPr=r(HIe," \u2014 "),YY=n(HIe,"A",{href:!0});var ryt=s(YY);PPr=r(ryt,"FlaxPegasusForConditionalGeneration"),ryt.forEach(t),BPr=r(HIe," (Pegasus model)"),HIe.forEach(t),IPr=i(ze),QC=n(ze,"LI",{});var UIe=s(QC);fMe=n(UIe,"STRONG",{});var tyt=s(fMe);qPr=r(tyt,"t5"),tyt.forEach(t),NPr=r(UIe," \u2014 "),KY=n(UIe,"A",{href:!0});var ayt=s(KY);jPr=r(ayt,"FlaxT5ForConditionalGeneration"),ayt.forEach(t),DPr=r(UIe," (T5 model)"),UIe.forEach(t),ze.forEach(t),GPr=i(Jl),T(HC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),wje=i(f),Xc=n(f,"H2",{class:!0});var SGe=s(Xc);UC=n(SGe,"A",{id:!0,class:!0,href:!0});var nyt=s(UC);mMe=n(nyt,"SPAN",{});var syt=s(mMe);T(W8.$$.fragment,syt),syt.forEach(t),nyt.forEach(t),OPr=i(SGe),gMe=n(SGe,"SPAN",{});var lyt=s(gMe);VPr=r(lyt,"FlaxAutoModelForSequenceClassification"),lyt.forEach(t),SGe.forEach(t),Aje=i(f),ur=n(f,"DIV",{class:!0});var Yl=s(ur);T(Q8.$$.fragment,Yl),XPr=i(Yl),zc=n(Yl,"P",{});var Nee=s(zc);zPr=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZY=n(Nee,"A",{href:!0});var iyt=s(ZY);WPr=r(iyt,"from_pretrained()"),iyt.forEach(t),QPr=r(Nee," class method or the "),eK=n(Nee,"A",{href:!0});var dyt=s(eK);HPr=r(dyt,"from_config()"),dyt.forEach(t),UPr=r(Nee,` class
method.`),Nee.forEach(t),JPr=i(Yl),H8=n(Yl,"P",{});var RGe=s(H8);YPr=r(RGe,"This class cannot be instantiated directly using "),hMe=n(RGe,"CODE",{});var cyt=s(hMe);KPr=r(cyt,"__init__()"),cyt.forEach(t),ZPr=r(RGe," (throws an error)."),RGe.forEach(t),eBr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var nA=s(Wt);T(U8.$$.fragment,nA),oBr=i(nA),pMe=n(nA,"P",{});var fyt=s(pMe);rBr=r(fyt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),fyt.forEach(t),tBr=i(nA),Wc=n(nA,"P",{});var jee=s(Wc);aBr=r(jee,`Note:
Loading a model from its configuration file does `),uMe=n(jee,"STRONG",{});var myt=s(uMe);nBr=r(myt,"not"),myt.forEach(t),sBr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=n(jee,"A",{href:!0});var gyt=s(oK);lBr=r(gyt,"from_pretrained()"),gyt.forEach(t),iBr=r(jee," to load the model weights."),jee.forEach(t),dBr=i(nA),T(JC.$$.fragment,nA),nA.forEach(t),cBr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(J8.$$.fragment,Kl),fBr=i(Kl),_Me=n(Kl,"P",{});var hyt=s(_Me);mBr=r(hyt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hyt.forEach(t),gBr=i(Kl),vn=n(Kl,"P",{});var sA=s(vn);hBr=r(sA,"The model class to instantiate is selected based on the "),bMe=n(sA,"CODE",{});var pyt=s(bMe);pBr=r(pyt,"model_type"),pyt.forEach(t),uBr=r(sA,` property of the config object (either
passed as an argument or loaded from `),vMe=n(sA,"CODE",{});var uyt=s(vMe);_Br=r(uyt,"pretrained_model_name_or_path"),uyt.forEach(t),bBr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=n(sA,"CODE",{});var _yt=s(FMe);vBr=r(_yt,"pretrained_model_name_or_path"),_yt.forEach(t),FBr=r(sA,":"),sA.forEach(t),TBr=i(Kl),xe=n(Kl,"UL",{});var qe=s(xe);YC=n(qe,"LI",{});var JIe=s(YC);TMe=n(JIe,"STRONG",{});var byt=s(TMe);MBr=r(byt,"albert"),byt.forEach(t),EBr=r(JIe," \u2014 "),rK=n(JIe,"A",{href:!0});var vyt=s(rK);CBr=r(vyt,"FlaxAlbertForSequenceClassification"),vyt.forEach(t),wBr=r(JIe," (ALBERT model)"),JIe.forEach(t),ABr=i(qe),KC=n(qe,"LI",{});var YIe=s(KC);MMe=n(YIe,"STRONG",{});var Fyt=s(MMe);yBr=r(Fyt,"bart"),Fyt.forEach(t),LBr=r(YIe," \u2014 "),tK=n(YIe,"A",{href:!0});var Tyt=s(tK);xBr=r(Tyt,"FlaxBartForSequenceClassification"),Tyt.forEach(t),$Br=r(YIe," (BART model)"),YIe.forEach(t),kBr=i(qe),ZC=n(qe,"LI",{});var KIe=s(ZC);EMe=n(KIe,"STRONG",{});var Myt=s(EMe);SBr=r(Myt,"bert"),Myt.forEach(t),RBr=r(KIe," \u2014 "),aK=n(KIe,"A",{href:!0});var Eyt=s(aK);PBr=r(Eyt,"FlaxBertForSequenceClassification"),Eyt.forEach(t),BBr=r(KIe," (BERT model)"),KIe.forEach(t),IBr=i(qe),e5=n(qe,"LI",{});var ZIe=s(e5);CMe=n(ZIe,"STRONG",{});var Cyt=s(CMe);qBr=r(Cyt,"big_bird"),Cyt.forEach(t),NBr=r(ZIe," \u2014 "),nK=n(ZIe,"A",{href:!0});var wyt=s(nK);jBr=r(wyt,"FlaxBigBirdForSequenceClassification"),wyt.forEach(t),DBr=r(ZIe," (BigBird model)"),ZIe.forEach(t),GBr=i(qe),o5=n(qe,"LI",{});var eqe=s(o5);wMe=n(eqe,"STRONG",{});var Ayt=s(wMe);OBr=r(Ayt,"distilbert"),Ayt.forEach(t),VBr=r(eqe," \u2014 "),sK=n(eqe,"A",{href:!0});var yyt=s(sK);XBr=r(yyt,"FlaxDistilBertForSequenceClassification"),yyt.forEach(t),zBr=r(eqe," (DistilBERT model)"),eqe.forEach(t),WBr=i(qe),r5=n(qe,"LI",{});var oqe=s(r5);AMe=n(oqe,"STRONG",{});var Lyt=s(AMe);QBr=r(Lyt,"electra"),Lyt.forEach(t),HBr=r(oqe," \u2014 "),lK=n(oqe,"A",{href:!0});var xyt=s(lK);UBr=r(xyt,"FlaxElectraForSequenceClassification"),xyt.forEach(t),JBr=r(oqe," (ELECTRA model)"),oqe.forEach(t),YBr=i(qe),t5=n(qe,"LI",{});var rqe=s(t5);yMe=n(rqe,"STRONG",{});var $yt=s(yMe);KBr=r($yt,"mbart"),$yt.forEach(t),ZBr=r(rqe," \u2014 "),iK=n(rqe,"A",{href:!0});var kyt=s(iK);eIr=r(kyt,"FlaxMBartForSequenceClassification"),kyt.forEach(t),oIr=r(rqe," (mBART model)"),rqe.forEach(t),rIr=i(qe),a5=n(qe,"LI",{});var tqe=s(a5);LMe=n(tqe,"STRONG",{});var Syt=s(LMe);tIr=r(Syt,"roberta"),Syt.forEach(t),aIr=r(tqe," \u2014 "),dK=n(tqe,"A",{href:!0});var Ryt=s(dK);nIr=r(Ryt,"FlaxRobertaForSequenceClassification"),Ryt.forEach(t),sIr=r(tqe," (RoBERTa model)"),tqe.forEach(t),lIr=i(qe),n5=n(qe,"LI",{});var aqe=s(n5);xMe=n(aqe,"STRONG",{});var Pyt=s(xMe);iIr=r(Pyt,"roformer"),Pyt.forEach(t),dIr=r(aqe," \u2014 "),cK=n(aqe,"A",{href:!0});var Byt=s(cK);cIr=r(Byt,"FlaxRoFormerForSequenceClassification"),Byt.forEach(t),fIr=r(aqe," (RoFormer model)"),aqe.forEach(t),mIr=i(qe),s5=n(qe,"LI",{});var nqe=s(s5);$Me=n(nqe,"STRONG",{});var Iyt=s($Me);gIr=r(Iyt,"xlm-roberta"),Iyt.forEach(t),hIr=r(nqe," \u2014 "),fK=n(nqe,"A",{href:!0});var qyt=s(fK);pIr=r(qyt,"FlaxXLMRobertaForSequenceClassification"),qyt.forEach(t),uIr=r(nqe," (XLM-RoBERTa model)"),nqe.forEach(t),qe.forEach(t),_Ir=i(Kl),T(l5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),yje=i(f),Qc=n(f,"H2",{class:!0});var PGe=s(Qc);i5=n(PGe,"A",{id:!0,class:!0,href:!0});var Nyt=s(i5);kMe=n(Nyt,"SPAN",{});var jyt=s(kMe);T(Y8.$$.fragment,jyt),jyt.forEach(t),Nyt.forEach(t),bIr=i(PGe),SMe=n(PGe,"SPAN",{});var Dyt=s(SMe);vIr=r(Dyt,"FlaxAutoModelForQuestionAnswering"),Dyt.forEach(t),PGe.forEach(t),Lje=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(K8.$$.fragment,Zl),FIr=i(Zl),Hc=n(Zl,"P",{});var Dee=s(Hc);TIr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mK=n(Dee,"A",{href:!0});var Gyt=s(mK);MIr=r(Gyt,"from_pretrained()"),Gyt.forEach(t),EIr=r(Dee," class method or the "),gK=n(Dee,"A",{href:!0});var Oyt=s(gK);CIr=r(Oyt,"from_config()"),Oyt.forEach(t),wIr=r(Dee,` class
method.`),Dee.forEach(t),AIr=i(Zl),Z8=n(Zl,"P",{});var BGe=s(Z8);yIr=r(BGe,"This class cannot be instantiated directly using "),RMe=n(BGe,"CODE",{});var Vyt=s(RMe);LIr=r(Vyt,"__init__()"),Vyt.forEach(t),xIr=r(BGe," (throws an error)."),BGe.forEach(t),$Ir=i(Zl),Qt=n(Zl,"DIV",{class:!0});var lA=s(Qt);T(ex.$$.fragment,lA),kIr=i(lA),PMe=n(lA,"P",{});var Xyt=s(PMe);SIr=r(Xyt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Xyt.forEach(t),RIr=i(lA),Uc=n(lA,"P",{});var Gee=s(Uc);PIr=r(Gee,`Note:
Loading a model from its configuration file does `),BMe=n(Gee,"STRONG",{});var zyt=s(BMe);BIr=r(zyt,"not"),zyt.forEach(t),IIr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(Gee,"A",{href:!0});var Wyt=s(hK);qIr=r(Wyt,"from_pretrained()"),Wyt.forEach(t),NIr=r(Gee," to load the model weights."),Gee.forEach(t),jIr=i(lA),T(d5.$$.fragment,lA),lA.forEach(t),DIr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(ox.$$.fragment,ei),GIr=i(ei),IMe=n(ei,"P",{});var Qyt=s(IMe);OIr=r(Qyt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qyt.forEach(t),VIr=i(ei),Fn=n(ei,"P",{});var iA=s(Fn);XIr=r(iA,"The model class to instantiate is selected based on the "),qMe=n(iA,"CODE",{});var Hyt=s(qMe);zIr=r(Hyt,"model_type"),Hyt.forEach(t),WIr=r(iA,` property of the config object (either
passed as an argument or loaded from `),NMe=n(iA,"CODE",{});var Uyt=s(NMe);QIr=r(Uyt,"pretrained_model_name_or_path"),Uyt.forEach(t),HIr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jMe=n(iA,"CODE",{});var Jyt=s(jMe);UIr=r(Jyt,"pretrained_model_name_or_path"),Jyt.forEach(t),JIr=r(iA,":"),iA.forEach(t),YIr=i(ei),$e=n(ei,"UL",{});var Ne=s($e);c5=n(Ne,"LI",{});var sqe=s(c5);DMe=n(sqe,"STRONG",{});var Yyt=s(DMe);KIr=r(Yyt,"albert"),Yyt.forEach(t),ZIr=r(sqe," \u2014 "),pK=n(sqe,"A",{href:!0});var Kyt=s(pK);eqr=r(Kyt,"FlaxAlbertForQuestionAnswering"),Kyt.forEach(t),oqr=r(sqe," (ALBERT model)"),sqe.forEach(t),rqr=i(Ne),f5=n(Ne,"LI",{});var lqe=s(f5);GMe=n(lqe,"STRONG",{});var Zyt=s(GMe);tqr=r(Zyt,"bart"),Zyt.forEach(t),aqr=r(lqe," \u2014 "),uK=n(lqe,"A",{href:!0});var eLt=s(uK);nqr=r(eLt,"FlaxBartForQuestionAnswering"),eLt.forEach(t),sqr=r(lqe," (BART model)"),lqe.forEach(t),lqr=i(Ne),m5=n(Ne,"LI",{});var iqe=s(m5);OMe=n(iqe,"STRONG",{});var oLt=s(OMe);iqr=r(oLt,"bert"),oLt.forEach(t),dqr=r(iqe," \u2014 "),_K=n(iqe,"A",{href:!0});var rLt=s(_K);cqr=r(rLt,"FlaxBertForQuestionAnswering"),rLt.forEach(t),fqr=r(iqe," (BERT model)"),iqe.forEach(t),mqr=i(Ne),g5=n(Ne,"LI",{});var dqe=s(g5);VMe=n(dqe,"STRONG",{});var tLt=s(VMe);gqr=r(tLt,"big_bird"),tLt.forEach(t),hqr=r(dqe," \u2014 "),bK=n(dqe,"A",{href:!0});var aLt=s(bK);pqr=r(aLt,"FlaxBigBirdForQuestionAnswering"),aLt.forEach(t),uqr=r(dqe," (BigBird model)"),dqe.forEach(t),_qr=i(Ne),h5=n(Ne,"LI",{});var cqe=s(h5);XMe=n(cqe,"STRONG",{});var nLt=s(XMe);bqr=r(nLt,"distilbert"),nLt.forEach(t),vqr=r(cqe," \u2014 "),vK=n(cqe,"A",{href:!0});var sLt=s(vK);Fqr=r(sLt,"FlaxDistilBertForQuestionAnswering"),sLt.forEach(t),Tqr=r(cqe," (DistilBERT model)"),cqe.forEach(t),Mqr=i(Ne),p5=n(Ne,"LI",{});var fqe=s(p5);zMe=n(fqe,"STRONG",{});var lLt=s(zMe);Eqr=r(lLt,"electra"),lLt.forEach(t),Cqr=r(fqe," \u2014 "),FK=n(fqe,"A",{href:!0});var iLt=s(FK);wqr=r(iLt,"FlaxElectraForQuestionAnswering"),iLt.forEach(t),Aqr=r(fqe," (ELECTRA model)"),fqe.forEach(t),yqr=i(Ne),u5=n(Ne,"LI",{});var mqe=s(u5);WMe=n(mqe,"STRONG",{});var dLt=s(WMe);Lqr=r(dLt,"mbart"),dLt.forEach(t),xqr=r(mqe," \u2014 "),TK=n(mqe,"A",{href:!0});var cLt=s(TK);$qr=r(cLt,"FlaxMBartForQuestionAnswering"),cLt.forEach(t),kqr=r(mqe," (mBART model)"),mqe.forEach(t),Sqr=i(Ne),_5=n(Ne,"LI",{});var gqe=s(_5);QMe=n(gqe,"STRONG",{});var fLt=s(QMe);Rqr=r(fLt,"roberta"),fLt.forEach(t),Pqr=r(gqe," \u2014 "),MK=n(gqe,"A",{href:!0});var mLt=s(MK);Bqr=r(mLt,"FlaxRobertaForQuestionAnswering"),mLt.forEach(t),Iqr=r(gqe," (RoBERTa model)"),gqe.forEach(t),qqr=i(Ne),b5=n(Ne,"LI",{});var hqe=s(b5);HMe=n(hqe,"STRONG",{});var gLt=s(HMe);Nqr=r(gLt,"roformer"),gLt.forEach(t),jqr=r(hqe," \u2014 "),EK=n(hqe,"A",{href:!0});var hLt=s(EK);Dqr=r(hLt,"FlaxRoFormerForQuestionAnswering"),hLt.forEach(t),Gqr=r(hqe," (RoFormer model)"),hqe.forEach(t),Oqr=i(Ne),v5=n(Ne,"LI",{});var pqe=s(v5);UMe=n(pqe,"STRONG",{});var pLt=s(UMe);Vqr=r(pLt,"xlm-roberta"),pLt.forEach(t),Xqr=r(pqe," \u2014 "),CK=n(pqe,"A",{href:!0});var uLt=s(CK);zqr=r(uLt,"FlaxXLMRobertaForQuestionAnswering"),uLt.forEach(t),Wqr=r(pqe," (XLM-RoBERTa model)"),pqe.forEach(t),Ne.forEach(t),Qqr=i(ei),T(F5.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),xje=i(f),Jc=n(f,"H2",{class:!0});var IGe=s(Jc);T5=n(IGe,"A",{id:!0,class:!0,href:!0});var _Lt=s(T5);JMe=n(_Lt,"SPAN",{});var bLt=s(JMe);T(rx.$$.fragment,bLt),bLt.forEach(t),_Lt.forEach(t),Hqr=i(IGe),YMe=n(IGe,"SPAN",{});var vLt=s(YMe);Uqr=r(vLt,"FlaxAutoModelForTokenClassification"),vLt.forEach(t),IGe.forEach(t),$je=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(tx.$$.fragment,oi),Jqr=i(oi),Yc=n(oi,"P",{});var Oee=s(Yc);Yqr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wK=n(Oee,"A",{href:!0});var FLt=s(wK);Kqr=r(FLt,"from_pretrained()"),FLt.forEach(t),Zqr=r(Oee," class method or the "),AK=n(Oee,"A",{href:!0});var TLt=s(AK);eNr=r(TLt,"from_config()"),TLt.forEach(t),oNr=r(Oee,` class
method.`),Oee.forEach(t),rNr=i(oi),ax=n(oi,"P",{});var qGe=s(ax);tNr=r(qGe,"This class cannot be instantiated directly using "),KMe=n(qGe,"CODE",{});var MLt=s(KMe);aNr=r(MLt,"__init__()"),MLt.forEach(t),nNr=r(qGe," (throws an error)."),qGe.forEach(t),sNr=i(oi),Ht=n(oi,"DIV",{class:!0});var dA=s(Ht);T(nx.$$.fragment,dA),lNr=i(dA),ZMe=n(dA,"P",{});var ELt=s(ZMe);iNr=r(ELt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ELt.forEach(t),dNr=i(dA),Kc=n(dA,"P",{});var Vee=s(Kc);cNr=r(Vee,`Note:
Loading a model from its configuration file does `),e4e=n(Vee,"STRONG",{});var CLt=s(e4e);fNr=r(CLt,"not"),CLt.forEach(t),mNr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=n(Vee,"A",{href:!0});var wLt=s(yK);gNr=r(wLt,"from_pretrained()"),wLt.forEach(t),hNr=r(Vee," to load the model weights."),Vee.forEach(t),pNr=i(dA),T(M5.$$.fragment,dA),dA.forEach(t),uNr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(sx.$$.fragment,ri),_Nr=i(ri),o4e=n(ri,"P",{});var ALt=s(o4e);bNr=r(ALt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ALt.forEach(t),vNr=i(ri),Tn=n(ri,"P",{});var cA=s(Tn);FNr=r(cA,"The model class to instantiate is selected based on the "),r4e=n(cA,"CODE",{});var yLt=s(r4e);TNr=r(yLt,"model_type"),yLt.forEach(t),MNr=r(cA,` property of the config object (either
passed as an argument or loaded from `),t4e=n(cA,"CODE",{});var LLt=s(t4e);ENr=r(LLt,"pretrained_model_name_or_path"),LLt.forEach(t),CNr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=n(cA,"CODE",{});var xLt=s(a4e);wNr=r(xLt,"pretrained_model_name_or_path"),xLt.forEach(t),ANr=r(cA,":"),cA.forEach(t),yNr=i(ri),De=n(ri,"UL",{});var Fo=s(De);E5=n(Fo,"LI",{});var uqe=s(E5);n4e=n(uqe,"STRONG",{});var $Lt=s(n4e);LNr=r($Lt,"albert"),$Lt.forEach(t),xNr=r(uqe," \u2014 "),LK=n(uqe,"A",{href:!0});var kLt=s(LK);$Nr=r(kLt,"FlaxAlbertForTokenClassification"),kLt.forEach(t),kNr=r(uqe," (ALBERT model)"),uqe.forEach(t),SNr=i(Fo),C5=n(Fo,"LI",{});var _qe=s(C5);s4e=n(_qe,"STRONG",{});var SLt=s(s4e);RNr=r(SLt,"bert"),SLt.forEach(t),PNr=r(_qe," \u2014 "),xK=n(_qe,"A",{href:!0});var RLt=s(xK);BNr=r(RLt,"FlaxBertForTokenClassification"),RLt.forEach(t),INr=r(_qe," (BERT model)"),_qe.forEach(t),qNr=i(Fo),w5=n(Fo,"LI",{});var bqe=s(w5);l4e=n(bqe,"STRONG",{});var PLt=s(l4e);NNr=r(PLt,"big_bird"),PLt.forEach(t),jNr=r(bqe," \u2014 "),$K=n(bqe,"A",{href:!0});var BLt=s($K);DNr=r(BLt,"FlaxBigBirdForTokenClassification"),BLt.forEach(t),GNr=r(bqe," (BigBird model)"),bqe.forEach(t),ONr=i(Fo),A5=n(Fo,"LI",{});var vqe=s(A5);i4e=n(vqe,"STRONG",{});var ILt=s(i4e);VNr=r(ILt,"distilbert"),ILt.forEach(t),XNr=r(vqe," \u2014 "),kK=n(vqe,"A",{href:!0});var qLt=s(kK);zNr=r(qLt,"FlaxDistilBertForTokenClassification"),qLt.forEach(t),WNr=r(vqe," (DistilBERT model)"),vqe.forEach(t),QNr=i(Fo),y5=n(Fo,"LI",{});var Fqe=s(y5);d4e=n(Fqe,"STRONG",{});var NLt=s(d4e);HNr=r(NLt,"electra"),NLt.forEach(t),UNr=r(Fqe," \u2014 "),SK=n(Fqe,"A",{href:!0});var jLt=s(SK);JNr=r(jLt,"FlaxElectraForTokenClassification"),jLt.forEach(t),YNr=r(Fqe," (ELECTRA model)"),Fqe.forEach(t),KNr=i(Fo),L5=n(Fo,"LI",{});var Tqe=s(L5);c4e=n(Tqe,"STRONG",{});var DLt=s(c4e);ZNr=r(DLt,"roberta"),DLt.forEach(t),ejr=r(Tqe," \u2014 "),RK=n(Tqe,"A",{href:!0});var GLt=s(RK);ojr=r(GLt,"FlaxRobertaForTokenClassification"),GLt.forEach(t),rjr=r(Tqe," (RoBERTa model)"),Tqe.forEach(t),tjr=i(Fo),x5=n(Fo,"LI",{});var Mqe=s(x5);f4e=n(Mqe,"STRONG",{});var OLt=s(f4e);ajr=r(OLt,"roformer"),OLt.forEach(t),njr=r(Mqe," \u2014 "),PK=n(Mqe,"A",{href:!0});var VLt=s(PK);sjr=r(VLt,"FlaxRoFormerForTokenClassification"),VLt.forEach(t),ljr=r(Mqe," (RoFormer model)"),Mqe.forEach(t),ijr=i(Fo),$5=n(Fo,"LI",{});var Eqe=s($5);m4e=n(Eqe,"STRONG",{});var XLt=s(m4e);djr=r(XLt,"xlm-roberta"),XLt.forEach(t),cjr=r(Eqe," \u2014 "),BK=n(Eqe,"A",{href:!0});var zLt=s(BK);fjr=r(zLt,"FlaxXLMRobertaForTokenClassification"),zLt.forEach(t),mjr=r(Eqe," (XLM-RoBERTa model)"),Eqe.forEach(t),Fo.forEach(t),gjr=i(ri),T(k5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),kje=i(f),Zc=n(f,"H2",{class:!0});var NGe=s(Zc);S5=n(NGe,"A",{id:!0,class:!0,href:!0});var WLt=s(S5);g4e=n(WLt,"SPAN",{});var QLt=s(g4e);T(lx.$$.fragment,QLt),QLt.forEach(t),WLt.forEach(t),hjr=i(NGe),h4e=n(NGe,"SPAN",{});var HLt=s(h4e);pjr=r(HLt,"FlaxAutoModelForMultipleChoice"),HLt.forEach(t),NGe.forEach(t),Sje=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(ix.$$.fragment,ti),ujr=i(ti),ef=n(ti,"P",{});var Xee=s(ef);_jr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IK=n(Xee,"A",{href:!0});var ULt=s(IK);bjr=r(ULt,"from_pretrained()"),ULt.forEach(t),vjr=r(Xee," class method or the "),qK=n(Xee,"A",{href:!0});var JLt=s(qK);Fjr=r(JLt,"from_config()"),JLt.forEach(t),Tjr=r(Xee,` class
method.`),Xee.forEach(t),Mjr=i(ti),dx=n(ti,"P",{});var jGe=s(dx);Ejr=r(jGe,"This class cannot be instantiated directly using "),p4e=n(jGe,"CODE",{});var YLt=s(p4e);Cjr=r(YLt,"__init__()"),YLt.forEach(t),wjr=r(jGe," (throws an error)."),jGe.forEach(t),Ajr=i(ti),Ut=n(ti,"DIV",{class:!0});var fA=s(Ut);T(cx.$$.fragment,fA),yjr=i(fA),u4e=n(fA,"P",{});var KLt=s(u4e);Ljr=r(KLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),KLt.forEach(t),xjr=i(fA),of=n(fA,"P",{});var zee=s(of);$jr=r(zee,`Note:
Loading a model from its configuration file does `),_4e=n(zee,"STRONG",{});var ZLt=s(_4e);kjr=r(ZLt,"not"),ZLt.forEach(t),Sjr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=n(zee,"A",{href:!0});var e8t=s(NK);Rjr=r(e8t,"from_pretrained()"),e8t.forEach(t),Pjr=r(zee," to load the model weights."),zee.forEach(t),Bjr=i(fA),T(R5.$$.fragment,fA),fA.forEach(t),Ijr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(fx.$$.fragment,ai),qjr=i(ai),b4e=n(ai,"P",{});var o8t=s(b4e);Njr=r(o8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),o8t.forEach(t),jjr=i(ai),Mn=n(ai,"P",{});var mA=s(Mn);Djr=r(mA,"The model class to instantiate is selected based on the "),v4e=n(mA,"CODE",{});var r8t=s(v4e);Gjr=r(r8t,"model_type"),r8t.forEach(t),Ojr=r(mA,` property of the config object (either
passed as an argument or loaded from `),F4e=n(mA,"CODE",{});var t8t=s(F4e);Vjr=r(t8t,"pretrained_model_name_or_path"),t8t.forEach(t),Xjr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=n(mA,"CODE",{});var a8t=s(T4e);zjr=r(a8t,"pretrained_model_name_or_path"),a8t.forEach(t),Wjr=r(mA,":"),mA.forEach(t),Qjr=i(ai),Ge=n(ai,"UL",{});var To=s(Ge);P5=n(To,"LI",{});var Cqe=s(P5);M4e=n(Cqe,"STRONG",{});var n8t=s(M4e);Hjr=r(n8t,"albert"),n8t.forEach(t),Ujr=r(Cqe," \u2014 "),jK=n(Cqe,"A",{href:!0});var s8t=s(jK);Jjr=r(s8t,"FlaxAlbertForMultipleChoice"),s8t.forEach(t),Yjr=r(Cqe," (ALBERT model)"),Cqe.forEach(t),Kjr=i(To),B5=n(To,"LI",{});var wqe=s(B5);E4e=n(wqe,"STRONG",{});var l8t=s(E4e);Zjr=r(l8t,"bert"),l8t.forEach(t),eDr=r(wqe," \u2014 "),DK=n(wqe,"A",{href:!0});var i8t=s(DK);oDr=r(i8t,"FlaxBertForMultipleChoice"),i8t.forEach(t),rDr=r(wqe," (BERT model)"),wqe.forEach(t),tDr=i(To),I5=n(To,"LI",{});var Aqe=s(I5);C4e=n(Aqe,"STRONG",{});var d8t=s(C4e);aDr=r(d8t,"big_bird"),d8t.forEach(t),nDr=r(Aqe," \u2014 "),GK=n(Aqe,"A",{href:!0});var c8t=s(GK);sDr=r(c8t,"FlaxBigBirdForMultipleChoice"),c8t.forEach(t),lDr=r(Aqe," (BigBird model)"),Aqe.forEach(t),iDr=i(To),q5=n(To,"LI",{});var yqe=s(q5);w4e=n(yqe,"STRONG",{});var f8t=s(w4e);dDr=r(f8t,"distilbert"),f8t.forEach(t),cDr=r(yqe," \u2014 "),OK=n(yqe,"A",{href:!0});var m8t=s(OK);fDr=r(m8t,"FlaxDistilBertForMultipleChoice"),m8t.forEach(t),mDr=r(yqe," (DistilBERT model)"),yqe.forEach(t),gDr=i(To),N5=n(To,"LI",{});var Lqe=s(N5);A4e=n(Lqe,"STRONG",{});var g8t=s(A4e);hDr=r(g8t,"electra"),g8t.forEach(t),pDr=r(Lqe," \u2014 "),VK=n(Lqe,"A",{href:!0});var h8t=s(VK);uDr=r(h8t,"FlaxElectraForMultipleChoice"),h8t.forEach(t),_Dr=r(Lqe," (ELECTRA model)"),Lqe.forEach(t),bDr=i(To),j5=n(To,"LI",{});var xqe=s(j5);y4e=n(xqe,"STRONG",{});var p8t=s(y4e);vDr=r(p8t,"roberta"),p8t.forEach(t),FDr=r(xqe," \u2014 "),XK=n(xqe,"A",{href:!0});var u8t=s(XK);TDr=r(u8t,"FlaxRobertaForMultipleChoice"),u8t.forEach(t),MDr=r(xqe," (RoBERTa model)"),xqe.forEach(t),EDr=i(To),D5=n(To,"LI",{});var $qe=s(D5);L4e=n($qe,"STRONG",{});var _8t=s(L4e);CDr=r(_8t,"roformer"),_8t.forEach(t),wDr=r($qe," \u2014 "),zK=n($qe,"A",{href:!0});var b8t=s(zK);ADr=r(b8t,"FlaxRoFormerForMultipleChoice"),b8t.forEach(t),yDr=r($qe," (RoFormer model)"),$qe.forEach(t),LDr=i(To),G5=n(To,"LI",{});var kqe=s(G5);x4e=n(kqe,"STRONG",{});var v8t=s(x4e);xDr=r(v8t,"xlm-roberta"),v8t.forEach(t),$Dr=r(kqe," \u2014 "),WK=n(kqe,"A",{href:!0});var F8t=s(WK);kDr=r(F8t,"FlaxXLMRobertaForMultipleChoice"),F8t.forEach(t),SDr=r(kqe," (XLM-RoBERTa model)"),kqe.forEach(t),To.forEach(t),RDr=i(ai),T(O5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Rje=i(f),rf=n(f,"H2",{class:!0});var DGe=s(rf);V5=n(DGe,"A",{id:!0,class:!0,href:!0});var T8t=s(V5);$4e=n(T8t,"SPAN",{});var M8t=s($4e);T(mx.$$.fragment,M8t),M8t.forEach(t),T8t.forEach(t),PDr=i(DGe),k4e=n(DGe,"SPAN",{});var E8t=s(k4e);BDr=r(E8t,"FlaxAutoModelForNextSentencePrediction"),E8t.forEach(t),DGe.forEach(t),Pje=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(gx.$$.fragment,ni),IDr=i(ni),tf=n(ni,"P",{});var Wee=s(tf);qDr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),QK=n(Wee,"A",{href:!0});var C8t=s(QK);NDr=r(C8t,"from_pretrained()"),C8t.forEach(t),jDr=r(Wee," class method or the "),HK=n(Wee,"A",{href:!0});var w8t=s(HK);DDr=r(w8t,"from_config()"),w8t.forEach(t),GDr=r(Wee,` class
method.`),Wee.forEach(t),ODr=i(ni),hx=n(ni,"P",{});var GGe=s(hx);VDr=r(GGe,"This class cannot be instantiated directly using "),S4e=n(GGe,"CODE",{});var A8t=s(S4e);XDr=r(A8t,"__init__()"),A8t.forEach(t),zDr=r(GGe," (throws an error)."),GGe.forEach(t),WDr=i(ni),Jt=n(ni,"DIV",{class:!0});var gA=s(Jt);T(px.$$.fragment,gA),QDr=i(gA),R4e=n(gA,"P",{});var y8t=s(R4e);HDr=r(y8t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),y8t.forEach(t),UDr=i(gA),af=n(gA,"P",{});var Qee=s(af);JDr=r(Qee,`Note:
Loading a model from its configuration file does `),P4e=n(Qee,"STRONG",{});var L8t=s(P4e);YDr=r(L8t,"not"),L8t.forEach(t),KDr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UK=n(Qee,"A",{href:!0});var x8t=s(UK);ZDr=r(x8t,"from_pretrained()"),x8t.forEach(t),eGr=r(Qee," to load the model weights."),Qee.forEach(t),oGr=i(gA),T(X5.$$.fragment,gA),gA.forEach(t),rGr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(ux.$$.fragment,si),tGr=i(si),B4e=n(si,"P",{});var $8t=s(B4e);aGr=r($8t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$8t.forEach(t),nGr=i(si),En=n(si,"P",{});var hA=s(En);sGr=r(hA,"The model class to instantiate is selected based on the "),I4e=n(hA,"CODE",{});var k8t=s(I4e);lGr=r(k8t,"model_type"),k8t.forEach(t),iGr=r(hA,` property of the config object (either
passed as an argument or loaded from `),q4e=n(hA,"CODE",{});var S8t=s(q4e);dGr=r(S8t,"pretrained_model_name_or_path"),S8t.forEach(t),cGr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=n(hA,"CODE",{});var R8t=s(N4e);fGr=r(R8t,"pretrained_model_name_or_path"),R8t.forEach(t),mGr=r(hA,":"),hA.forEach(t),gGr=i(si),j4e=n(si,"UL",{});var P8t=s(j4e);z5=n(P8t,"LI",{});var Sqe=s(z5);D4e=n(Sqe,"STRONG",{});var B8t=s(D4e);hGr=r(B8t,"bert"),B8t.forEach(t),pGr=r(Sqe," \u2014 "),JK=n(Sqe,"A",{href:!0});var I8t=s(JK);uGr=r(I8t,"FlaxBertForNextSentencePrediction"),I8t.forEach(t),_Gr=r(Sqe," (BERT model)"),Sqe.forEach(t),P8t.forEach(t),bGr=i(si),T(W5.$$.fragment,si),si.forEach(t),ni.forEach(t),Bje=i(f),nf=n(f,"H2",{class:!0});var OGe=s(nf);Q5=n(OGe,"A",{id:!0,class:!0,href:!0});var q8t=s(Q5);G4e=n(q8t,"SPAN",{});var N8t=s(G4e);T(_x.$$.fragment,N8t),N8t.forEach(t),q8t.forEach(t),vGr=i(OGe),O4e=n(OGe,"SPAN",{});var j8t=s(O4e);FGr=r(j8t,"FlaxAutoModelForImageClassification"),j8t.forEach(t),OGe.forEach(t),Ije=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(bx.$$.fragment,li),TGr=i(li),sf=n(li,"P",{});var Hee=s(sf);MGr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YK=n(Hee,"A",{href:!0});var D8t=s(YK);EGr=r(D8t,"from_pretrained()"),D8t.forEach(t),CGr=r(Hee," class method or the "),KK=n(Hee,"A",{href:!0});var G8t=s(KK);wGr=r(G8t,"from_config()"),G8t.forEach(t),AGr=r(Hee,` class
method.`),Hee.forEach(t),yGr=i(li),vx=n(li,"P",{});var VGe=s(vx);LGr=r(VGe,"This class cannot be instantiated directly using "),V4e=n(VGe,"CODE",{});var O8t=s(V4e);xGr=r(O8t,"__init__()"),O8t.forEach(t),$Gr=r(VGe," (throws an error)."),VGe.forEach(t),kGr=i(li),Yt=n(li,"DIV",{class:!0});var pA=s(Yt);T(Fx.$$.fragment,pA),SGr=i(pA),X4e=n(pA,"P",{});var V8t=s(X4e);RGr=r(V8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),V8t.forEach(t),PGr=i(pA),lf=n(pA,"P",{});var Uee=s(lf);BGr=r(Uee,`Note:
Loading a model from its configuration file does `),z4e=n(Uee,"STRONG",{});var X8t=s(z4e);IGr=r(X8t,"not"),X8t.forEach(t),qGr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=n(Uee,"A",{href:!0});var z8t=s(ZK);NGr=r(z8t,"from_pretrained()"),z8t.forEach(t),jGr=r(Uee," to load the model weights."),Uee.forEach(t),DGr=i(pA),T(H5.$$.fragment,pA),pA.forEach(t),GGr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(Tx.$$.fragment,ii),OGr=i(ii),W4e=n(ii,"P",{});var W8t=s(W4e);VGr=r(W8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),W8t.forEach(t),XGr=i(ii),Cn=n(ii,"P",{});var uA=s(Cn);zGr=r(uA,"The model class to instantiate is selected based on the "),Q4e=n(uA,"CODE",{});var Q8t=s(Q4e);WGr=r(Q8t,"model_type"),Q8t.forEach(t),QGr=r(uA,` property of the config object (either
passed as an argument or loaded from `),H4e=n(uA,"CODE",{});var H8t=s(H4e);HGr=r(H8t,"pretrained_model_name_or_path"),H8t.forEach(t),UGr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U4e=n(uA,"CODE",{});var U8t=s(U4e);JGr=r(U8t,"pretrained_model_name_or_path"),U8t.forEach(t),YGr=r(uA,":"),uA.forEach(t),KGr=i(ii),Mx=n(ii,"UL",{});var XGe=s(Mx);U5=n(XGe,"LI",{});var Rqe=s(U5);J4e=n(Rqe,"STRONG",{});var J8t=s(J4e);ZGr=r(J8t,"beit"),J8t.forEach(t),eOr=r(Rqe," \u2014 "),eZ=n(Rqe,"A",{href:!0});var Y8t=s(eZ);oOr=r(Y8t,"FlaxBeitForImageClassification"),Y8t.forEach(t),rOr=r(Rqe," (BEiT model)"),Rqe.forEach(t),tOr=i(XGe),J5=n(XGe,"LI",{});var Pqe=s(J5);Y4e=n(Pqe,"STRONG",{});var K8t=s(Y4e);aOr=r(K8t,"vit"),K8t.forEach(t),nOr=r(Pqe," \u2014 "),oZ=n(Pqe,"A",{href:!0});var Z8t=s(oZ);sOr=r(Z8t,"FlaxViTForImageClassification"),Z8t.forEach(t),lOr=r(Pqe," (ViT model)"),Pqe.forEach(t),XGe.forEach(t),iOr=i(ii),T(Y5.$$.fragment,ii),ii.forEach(t),li.forEach(t),qje=i(f),df=n(f,"H2",{class:!0});var zGe=s(df);K5=n(zGe,"A",{id:!0,class:!0,href:!0});var ext=s(K5);K4e=n(ext,"SPAN",{});var oxt=s(K4e);T(Ex.$$.fragment,oxt),oxt.forEach(t),ext.forEach(t),dOr=i(zGe),Z4e=n(zGe,"SPAN",{});var rxt=s(Z4e);cOr=r(rxt,"FlaxAutoModelForVision2Seq"),rxt.forEach(t),zGe.forEach(t),Nje=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(Cx.$$.fragment,di),fOr=i(di),cf=n(di,"P",{});var Jee=s(cf);mOr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rZ=n(Jee,"A",{href:!0});var txt=s(rZ);gOr=r(txt,"from_pretrained()"),txt.forEach(t),hOr=r(Jee," class method or the "),tZ=n(Jee,"A",{href:!0});var axt=s(tZ);pOr=r(axt,"from_config()"),axt.forEach(t),uOr=r(Jee,` class
method.`),Jee.forEach(t),_Or=i(di),wx=n(di,"P",{});var WGe=s(wx);bOr=r(WGe,"This class cannot be instantiated directly using "),eEe=n(WGe,"CODE",{});var nxt=s(eEe);vOr=r(nxt,"__init__()"),nxt.forEach(t),FOr=r(WGe," (throws an error)."),WGe.forEach(t),TOr=i(di),Kt=n(di,"DIV",{class:!0});var _A=s(Kt);T(Ax.$$.fragment,_A),MOr=i(_A),oEe=n(_A,"P",{});var sxt=s(oEe);EOr=r(sxt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sxt.forEach(t),COr=i(_A),ff=n(_A,"P",{});var Yee=s(ff);wOr=r(Yee,`Note:
Loading a model from its configuration file does `),rEe=n(Yee,"STRONG",{});var lxt=s(rEe);AOr=r(lxt,"not"),lxt.forEach(t),yOr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(Yee,"A",{href:!0});var ixt=s(aZ);LOr=r(ixt,"from_pretrained()"),ixt.forEach(t),xOr=r(Yee," to load the model weights."),Yee.forEach(t),$Or=i(_A),T(Z5.$$.fragment,_A),_A.forEach(t),kOr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(yx.$$.fragment,ci),SOr=i(ci),tEe=n(ci,"P",{});var dxt=s(tEe);ROr=r(dxt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dxt.forEach(t),POr=i(ci),wn=n(ci,"P",{});var bA=s(wn);BOr=r(bA,"The model class to instantiate is selected based on the "),aEe=n(bA,"CODE",{});var cxt=s(aEe);IOr=r(cxt,"model_type"),cxt.forEach(t),qOr=r(bA,` property of the config object (either
passed as an argument or loaded from `),nEe=n(bA,"CODE",{});var fxt=s(nEe);NOr=r(fxt,"pretrained_model_name_or_path"),fxt.forEach(t),jOr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sEe=n(bA,"CODE",{});var mxt=s(sEe);DOr=r(mxt,"pretrained_model_name_or_path"),mxt.forEach(t),GOr=r(bA,":"),bA.forEach(t),OOr=i(ci),lEe=n(ci,"UL",{});var gxt=s(lEe);ew=n(gxt,"LI",{});var Bqe=s(ew);iEe=n(Bqe,"STRONG",{});var hxt=s(iEe);VOr=r(hxt,"vision-encoder-decoder"),hxt.forEach(t),XOr=r(Bqe," \u2014 "),nZ=n(Bqe,"A",{href:!0});var pxt=s(nZ);zOr=r(pxt,"FlaxVisionEncoderDecoderModel"),pxt.forEach(t),WOr=r(Bqe," (Vision Encoder decoder model)"),Bqe.forEach(t),gxt.forEach(t),QOr=i(ci),T(ow.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(vkt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(Q$,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(H$,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertConfig"),c(U$,"href","/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartConfig"),c(J$,"href","/docs/transformers/pr_17393/en/model_doc/beit#transformers.BeitConfig"),c(Y$,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertConfig"),c(K$,"href","/docs/transformers/pr_17393/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Z$,"href","/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdConfig"),c(ek,"href","/docs/transformers/pr_17393/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(ok,"href","/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(rk,"href","/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(tk,"href","/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertConfig"),c(ak,"href","/docs/transformers/pr_17393/en/model_doc/canine#transformers.CanineConfig"),c(nk,"href","/docs/transformers/pr_17393/en/model_doc/clip#transformers.CLIPConfig"),c(sk,"href","/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertConfig"),c(lk,"href","/docs/transformers/pr_17393/en/model_doc/convnext#transformers.ConvNextConfig"),c(ik,"href","/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.CTRLConfig"),c(dk,"href","/docs/transformers/pr_17393/en/model_doc/cvt#transformers.CvtConfig"),c(ck,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(fk,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(mk,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(gk,"href","/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaConfig"),c(hk,"href","/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(pk,"href","/docs/transformers/pr_17393/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(uk,"href","/docs/transformers/pr_17393/en/model_doc/deit#transformers.DeiTConfig"),c(_k,"href","/docs/transformers/pr_17393/en/model_doc/detr#transformers.DetrConfig"),c(bk,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertConfig"),c(vk,"href","/docs/transformers/pr_17393/en/model_doc/dpr#transformers.DPRConfig"),c(Fk,"href","/docs/transformers/pr_17393/en/model_doc/dpt#transformers.DPTConfig"),c(Tk,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraConfig"),c(Mk,"href","/docs/transformers/pr_17393/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Ek,"href","/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Ck,"href","/docs/transformers/pr_17393/en/model_doc/flava#transformers.FlavaConfig"),c(wk,"href","/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetConfig"),c(Ak,"href","/docs/transformers/pr_17393/en/model_doc/fsmt#transformers.FSMTConfig"),c(yk,"href","/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelConfig"),c(Lk,"href","/docs/transformers/pr_17393/en/model_doc/glpn#transformers.GLPNConfig"),c(xk,"href","/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2Config"),c($k,"href","/docs/transformers/pr_17393/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(kk,"href","/docs/transformers/pr_17393/en/model_doc/gptj#transformers.GPTJConfig"),c(Sk,"href","/docs/transformers/pr_17393/en/model_doc/hubert#transformers.HubertConfig"),c(Rk,"href","/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertConfig"),c(Pk,"href","/docs/transformers/pr_17393/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Bk,"href","/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Ik,"href","/docs/transformers/pr_17393/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(qk,"href","/docs/transformers/pr_17393/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Nk,"href","/docs/transformers/pr_17393/en/model_doc/led#transformers.LEDConfig"),c(jk,"href","/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerConfig"),c(Dk,"href","/docs/transformers/pr_17393/en/model_doc/luke#transformers.LukeConfig"),c(Gk,"href","/docs/transformers/pr_17393/en/model_doc/lxmert#transformers.LxmertConfig"),c(Ok,"href","/docs/transformers/pr_17393/en/model_doc/m2m_100#transformers.M2M100Config"),c(Vk,"href","/docs/transformers/pr_17393/en/model_doc/marian#transformers.MarianConfig"),c(Xk,"href","/docs/transformers/pr_17393/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(zk,"href","/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartConfig"),c(Wk,"href","/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Qk,"href","/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Hk,"href","/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetConfig"),c(Uk,"href","/docs/transformers/pr_17393/en/model_doc/mt5#transformers.MT5Config"),c(Jk,"href","/docs/transformers/pr_17393/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Yk,"href","/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Kk,"href","/docs/transformers/pr_17393/en/model_doc/opt#transformers.OPTConfig"),c(Zk,"href","/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.PegasusConfig"),c(eS,"href","/docs/transformers/pr_17393/en/model_doc/perceiver#transformers.PerceiverConfig"),c(oS,"href","/docs/transformers/pr_17393/en/model_doc/plbart#transformers.PLBartConfig"),c(rS,"href","/docs/transformers/pr_17393/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(tS,"href","/docs/transformers/pr_17393/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(aS,"href","/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(nS,"href","/docs/transformers/pr_17393/en/model_doc/rag#transformers.RagConfig"),c(sS,"href","/docs/transformers/pr_17393/en/model_doc/realm#transformers.RealmConfig"),c(lS,"href","/docs/transformers/pr_17393/en/model_doc/reformer#transformers.ReformerConfig"),c(iS,"href","/docs/transformers/pr_17393/en/model_doc/regnet#transformers.RegNetConfig"),c(dS,"href","/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertConfig"),c(cS,"href","/docs/transformers/pr_17393/en/model_doc/resnet#transformers.ResNetConfig"),c(fS,"href","/docs/transformers/pr_17393/en/model_doc/retribert#transformers.RetriBertConfig"),c(mS,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaConfig"),c(gS,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerConfig"),c(hS,"href","/docs/transformers/pr_17393/en/model_doc/segformer#transformers.SegformerConfig"),c(pS,"href","/docs/transformers/pr_17393/en/model_doc/sew#transformers.SEWConfig"),c(uS,"href","/docs/transformers/pr_17393/en/model_doc/sew-d#transformers.SEWDConfig"),c(_S,"href","/docs/transformers/pr_17393/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(bS,"href","/docs/transformers/pr_17393/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(vS,"href","/docs/transformers/pr_17393/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(FS,"href","/docs/transformers/pr_17393/en/model_doc/splinter#transformers.SplinterConfig"),c(TS,"href","/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(MS,"href","/docs/transformers/pr_17393/en/model_doc/swin#transformers.SwinConfig"),c(ES,"href","/docs/transformers/pr_17393/en/model_doc/t5#transformers.T5Config"),c(CS,"href","/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasConfig"),c(wS,"href","/docs/transformers/pr_17393/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(AS,"href","/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(yS,"href","/docs/transformers/pr_17393/en/model_doc/trocr#transformers.TrOCRConfig"),c(LS,"href","/docs/transformers/pr_17393/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(xS,"href","/docs/transformers/pr_17393/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c($S,"href","/docs/transformers/pr_17393/en/model_doc/van#transformers.VanConfig"),c(kS,"href","/docs/transformers/pr_17393/en/model_doc/vilt#transformers.ViltConfig"),c(SS,"href","/docs/transformers/pr_17393/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(RS,"href","/docs/transformers/pr_17393/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(PS,"href","/docs/transformers/pr_17393/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(BS,"href","/docs/transformers/pr_17393/en/model_doc/vit#transformers.ViTConfig"),c(IS,"href","/docs/transformers/pr_17393/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(qS,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(NS,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(jS,"href","/docs/transformers/pr_17393/en/model_doc/wavlm#transformers.WavLMConfig"),c(DS,"href","/docs/transformers/pr_17393/en/model_doc/xglm#transformers.XGLMConfig"),c(GS,"href","/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMConfig"),c(OS,"href","/docs/transformers/pr_17393/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(VS,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(XS,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(zS,"href","/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetConfig"),c(WS,"href","/docs/transformers/pr_17393/en/model_doc/yolos#transformers.YolosConfig"),c(QS,"href","/docs/transformers/pr_17393/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"id","transformers.AutoTokenizer"),c(Cg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(HS,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(US,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertTokenizer"),c(JS,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(YS,"href","/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartTokenizer"),c(KS,"href","/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17393/en/model_doc/barthez#transformers.BarthezTokenizer"),c(eR,"href","/docs/transformers/pr_17393/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(oR,"href","/docs/transformers/pr_17393/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(rR,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertTokenizer"),c(tR,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertTokenizerFast"),c(aR,"href","/docs/transformers/pr_17393/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(nR,"href","/docs/transformers/pr_17393/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(sR,"href","/docs/transformers/pr_17393/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(lR,"href","/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(iR,"href","/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(dR,"href","/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(cR,"href","/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(fR,"href","/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(mR,"href","/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(gR,"href","/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(hR,"href","/docs/transformers/pr_17393/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(pR,"href","/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertTokenizer"),c(uR,"href","/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(_R,"href","/docs/transformers/pr_17393/en/model_doc/canine#transformers.CanineTokenizer"),c(bR,"href","/docs/transformers/pr_17393/en/model_doc/clip#transformers.CLIPTokenizer"),c(vR,"href","/docs/transformers/pr_17393/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(FR,"href","/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(TR,"href","/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(MR,"href","/docs/transformers/pr_17393/en/model_doc/cpm#transformers.CpmTokenizer"),c(ER,"href","/docs/transformers/pr_17393/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(CR,"href","/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(wR,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaTokenizer"),c(AR,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(yR,"href","/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaTokenizer"),c(LR,"href","/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(xR,"href","/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c($R,"href","/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(kR,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(SR,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(RR,"href","/docs/transformers/pr_17393/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(PR,"href","/docs/transformers/pr_17393/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(BR,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraTokenizer"),c(IR,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(qR,"href","/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(NR,"href","/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetTokenizer"),c(jR,"href","/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(DR,"href","/docs/transformers/pr_17393/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(GR,"href","/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelTokenizer"),c(OR,"href","/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(VR,"href","/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(XR,"href","/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(zR,"href","/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(WR,"href","/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(QR,"href","/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(HR,"href","/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(UR,"href","/docs/transformers/pr_17393/en/model_doc/herbert#transformers.HerbertTokenizer"),c(JR,"href","/docs/transformers/pr_17393/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(YR,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(KR,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ZR,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(eP,"href","/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(oP,"href","/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(rP,"href","/docs/transformers/pr_17393/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(tP,"href","/docs/transformers/pr_17393/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(aP,"href","/docs/transformers/pr_17393/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(nP,"href","/docs/transformers/pr_17393/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(sP,"href","/docs/transformers/pr_17393/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(lP,"href","/docs/transformers/pr_17393/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(iP,"href","/docs/transformers/pr_17393/en/model_doc/led#transformers.LEDTokenizer"),c(dP,"href","/docs/transformers/pr_17393/en/model_doc/led#transformers.LEDTokenizerFast"),c(cP,"href","/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerTokenizer"),c(fP,"href","/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(mP,"href","/docs/transformers/pr_17393/en/model_doc/luke#transformers.LukeTokenizer"),c(gP,"href","/docs/transformers/pr_17393/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(hP,"href","/docs/transformers/pr_17393/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(pP,"href","/docs/transformers/pr_17393/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(uP,"href","/docs/transformers/pr_17393/en/model_doc/marian#transformers.MarianTokenizer"),c(_P,"href","/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartTokenizer"),c(bP,"href","/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(vP,"href","/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(FP,"href","/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(TP,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertTokenizer"),c(MP,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertTokenizerFast"),c(EP,"href","/docs/transformers/pr_17393/en/model_doc/mluke#transformers.MLukeTokenizer"),c(CP,"href","/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(wP,"href","/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(AP,"href","/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(yP,"href","/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(LP,"href","/docs/transformers/pr_17393/en/model_doc/t5#transformers.T5Tokenizer"),c(xP,"href","/docs/transformers/pr_17393/en/model_doc/t5#transformers.T5TokenizerFast"),c($P,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertTokenizer"),c(kP,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(SP,"href","/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(RP,"href","/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(PP,"href","/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(BP,"href","/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(IP,"href","/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(qP,"href","/docs/transformers/pr_17393/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(NP,"href","/docs/transformers/pr_17393/en/model_doc/phobert#transformers.PhobertTokenizer"),c(jP,"href","/docs/transformers/pr_17393/en/model_doc/plbart#transformers.PLBartTokenizer"),c(DP,"href","/docs/transformers/pr_17393/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(GP,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertTokenizer"),c(OP,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertTokenizerFast"),c(VP,"href","/docs/transformers/pr_17393/en/model_doc/rag#transformers.RagTokenizer"),c(XP,"href","/docs/transformers/pr_17393/en/model_doc/realm#transformers.RealmTokenizer"),c(zP,"href","/docs/transformers/pr_17393/en/model_doc/realm#transformers.RealmTokenizerFast"),c(WP,"href","/docs/transformers/pr_17393/en/model_doc/reformer#transformers.ReformerTokenizer"),c(QP,"href","/docs/transformers/pr_17393/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(HP,"href","/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertTokenizer"),c(UP,"href","/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(JP,"href","/docs/transformers/pr_17393/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(YP,"href","/docs/transformers/pr_17393/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(KP,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ZP,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(eB,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(oB,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(rB,"href","/docs/transformers/pr_17393/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(tB,"href","/docs/transformers/pr_17393/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(aB,"href","/docs/transformers/pr_17393/en/model_doc/splinter#transformers.SplinterTokenizer"),c(nB,"href","/docs/transformers/pr_17393/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(sB,"href","/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(lB,"href","/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(iB,"href","/docs/transformers/pr_17393/en/model_doc/t5#transformers.T5Tokenizer"),c(dB,"href","/docs/transformers/pr_17393/en/model_doc/t5#transformers.T5TokenizerFast"),c(cB,"href","/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasTokenizer"),c(fB,"href","/docs/transformers/pr_17393/en/model_doc/tapex#transformers.TapexTokenizer"),c(mB,"href","/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(gB,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertTokenizer"),c(hB,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertTokenizerFast"),c(pB,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(uB,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(_B,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(bB,"href","/docs/transformers/pr_17393/en/model_doc/xglm#transformers.XGLMTokenizer"),c(vB,"href","/docs/transformers/pr_17393/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(FB,"href","/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMTokenizer"),c(TB,"href","/docs/transformers/pr_17393/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(MB,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(EB,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(CB,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wB,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(AB,"href","/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(yB,"href","/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(LB,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertTokenizer"),c(xB,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(th,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ah,"id","transformers.AutoFeatureExtractor"),c(ah,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ah,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c($B,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(kB,"href","/docs/transformers/pr_17393/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17393/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(RB,"href","/docs/transformers/pr_17393/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(PB,"href","/docs/transformers/pr_17393/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(BB,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(IB,"href","/docs/transformers/pr_17393/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(qB,"href","/docs/transformers/pr_17393/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(NB,"href","/docs/transformers/pr_17393/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17393/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17393/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17393/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(VB,"href","/docs/transformers/pr_17393/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17393/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(zB,"href","/docs/transformers/pr_17393/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(WB,"href","/docs/transformers/pr_17393/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17393/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17393/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17393/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17393/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17393/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17393/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17393/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17393/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17393/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17393/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(aI,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(nI,"href","/docs/transformers/pr_17393/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ih,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qh,"id","transformers.AutoProcessor"),c(qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(sI,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(lI,"href","/docs/transformers/pr_17393/en/model_doc/clip#transformers.CLIPProcessor"),c(iI,"href","/docs/transformers/pr_17393/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(dI,"href","/docs/transformers/pr_17393/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(cI,"href","/docs/transformers/pr_17393/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(fI,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(mI,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(gI,"href","/docs/transformers/pr_17393/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(hI,"href","/docs/transformers/pr_17393/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(pI,"href","/docs/transformers/pr_17393/en/model_doc/trocr#transformers.TrOCRProcessor"),c(uI,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(_I,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(bI,"href","/docs/transformers/pr_17393/en/model_doc/vilt#transformers.ViltProcessor"),c(vI,"href","/docs/transformers/pr_17393/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(FI,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(TI,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(MI,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ap,"id","transformers.AutoModel"),c(ap,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ap,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(EI,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CI,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wI,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AI,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertModel"),c(yI,"href","/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartModel"),c(LI,"href","/docs/transformers/pr_17393/en/model_doc/beit#transformers.BeitModel"),c(xI,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertModel"),c($I,"href","/docs/transformers/pr_17393/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(kI,"href","/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdModel"),c(SI,"href","/docs/transformers/pr_17393/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(RI,"href","/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(PI,"href","/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(BI,"href","/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertModel"),c(II,"href","/docs/transformers/pr_17393/en/model_doc/canine#transformers.CanineModel"),c(qI,"href","/docs/transformers/pr_17393/en/model_doc/clip#transformers.CLIPModel"),c(NI,"href","/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertModel"),c(jI,"href","/docs/transformers/pr_17393/en/model_doc/convnext#transformers.ConvNextModel"),c(DI,"href","/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.CTRLModel"),c(GI,"href","/docs/transformers/pr_17393/en/model_doc/cvt#transformers.CvtModel"),c(OI,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(VI,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(XI,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(zI,"href","/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaModel"),c(WI,"href","/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(QI,"href","/docs/transformers/pr_17393/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(HI,"href","/docs/transformers/pr_17393/en/model_doc/deit#transformers.DeiTModel"),c(UI,"href","/docs/transformers/pr_17393/en/model_doc/detr#transformers.DetrModel"),c(JI,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertModel"),c(YI,"href","/docs/transformers/pr_17393/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(KI,"href","/docs/transformers/pr_17393/en/model_doc/dpt#transformers.DPTModel"),c(ZI,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraModel"),c(eq,"href","/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertModel"),c(oq,"href","/docs/transformers/pr_17393/en/model_doc/flava#transformers.FlavaModel"),c(rq,"href","/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetModel"),c(tq,"href","/docs/transformers/pr_17393/en/model_doc/fsmt#transformers.FSMTModel"),c(aq,"href","/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelModel"),c(nq,"href","/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelBaseModel"),c(sq,"href","/docs/transformers/pr_17393/en/model_doc/glpn#transformers.GLPNModel"),c(lq,"href","/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2Model"),c(iq,"href","/docs/transformers/pr_17393/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(dq,"href","/docs/transformers/pr_17393/en/model_doc/gptj#transformers.GPTJModel"),c(cq,"href","/docs/transformers/pr_17393/en/model_doc/hubert#transformers.HubertModel"),c(fq,"href","/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertModel"),c(mq,"href","/docs/transformers/pr_17393/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(gq,"href","/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(hq,"href","/docs/transformers/pr_17393/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(pq,"href","/docs/transformers/pr_17393/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(uq,"href","/docs/transformers/pr_17393/en/model_doc/led#transformers.LEDModel"),c(_q,"href","/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerModel"),c(bq,"href","/docs/transformers/pr_17393/en/model_doc/luke#transformers.LukeModel"),c(vq,"href","/docs/transformers/pr_17393/en/model_doc/lxmert#transformers.LxmertModel"),c(Fq,"href","/docs/transformers/pr_17393/en/model_doc/m2m_100#transformers.M2M100Model"),c(Tq,"href","/docs/transformers/pr_17393/en/model_doc/marian#transformers.MarianModel"),c(Mq,"href","/docs/transformers/pr_17393/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Eq,"href","/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartModel"),c(Cq,"href","/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(wq,"href","/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Aq,"href","/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetModel"),c(yq,"href","/docs/transformers/pr_17393/en/model_doc/mt5#transformers.MT5Model"),c(Lq,"href","/docs/transformers/pr_17393/en/model_doc/nystromformer#transformers.NystromformerModel"),c(xq,"href","/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c($q,"href","/docs/transformers/pr_17393/en/model_doc/opt#transformers.OPTModel"),c(kq,"href","/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.PegasusModel"),c(Sq,"href","/docs/transformers/pr_17393/en/model_doc/perceiver#transformers.PerceiverModel"),c(Rq,"href","/docs/transformers/pr_17393/en/model_doc/plbart#transformers.PLBartModel"),c(Pq,"href","/docs/transformers/pr_17393/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Bq,"href","/docs/transformers/pr_17393/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Iq,"href","/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertModel"),c(qq,"href","/docs/transformers/pr_17393/en/model_doc/reformer#transformers.ReformerModel"),c(Nq,"href","/docs/transformers/pr_17393/en/model_doc/regnet#transformers.RegNetModel"),c(jq,"href","/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertModel"),c(Dq,"href","/docs/transformers/pr_17393/en/model_doc/resnet#transformers.ResNetModel"),c(Gq,"href","/docs/transformers/pr_17393/en/model_doc/retribert#transformers.RetriBertModel"),c(Oq,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaModel"),c(Vq,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerModel"),c(Xq,"href","/docs/transformers/pr_17393/en/model_doc/segformer#transformers.SegformerModel"),c(zq,"href","/docs/transformers/pr_17393/en/model_doc/sew#transformers.SEWModel"),c(Wq,"href","/docs/transformers/pr_17393/en/model_doc/sew-d#transformers.SEWDModel"),c(Qq,"href","/docs/transformers/pr_17393/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Hq,"href","/docs/transformers/pr_17393/en/model_doc/splinter#transformers.SplinterModel"),c(Uq,"href","/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Jq,"href","/docs/transformers/pr_17393/en/model_doc/swin#transformers.SwinModel"),c(Yq,"href","/docs/transformers/pr_17393/en/model_doc/t5#transformers.T5Model"),c(Kq,"href","/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasModel"),c(Zq,"href","/docs/transformers/pr_17393/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(eN,"href","/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(oN,"href","/docs/transformers/pr_17393/en/model_doc/unispeech#transformers.UniSpeechModel"),c(rN,"href","/docs/transformers/pr_17393/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(tN,"href","/docs/transformers/pr_17393/en/model_doc/van#transformers.VanModel"),c(aN,"href","/docs/transformers/pr_17393/en/model_doc/vilt#transformers.ViltModel"),c(nN,"href","/docs/transformers/pr_17393/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(sN,"href","/docs/transformers/pr_17393/en/model_doc/visual_bert#transformers.VisualBertModel"),c(lN,"href","/docs/transformers/pr_17393/en/model_doc/vit#transformers.ViTModel"),c(iN,"href","/docs/transformers/pr_17393/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(dN,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(cN,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(fN,"href","/docs/transformers/pr_17393/en/model_doc/wavlm#transformers.WavLMModel"),c(mN,"href","/docs/transformers/pr_17393/en/model_doc/xglm#transformers.XGLMModel"),c(gN,"href","/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMModel"),c(hN,"href","/docs/transformers/pr_17393/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(pN,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(uN,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(_N,"href","/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetModel"),c(bN,"href","/docs/transformers/pr_17393/en/model_doc/yolos#transformers.YolosModel"),c(vN,"href","/docs/transformers/pr_17393/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e_,"id","transformers.AutoModelForPreTraining"),c(e_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e_,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(FN,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TN,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MN,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EN,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertForPreTraining"),c(CN,"href","/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(wN,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertForPreTraining"),c(AN,"href","/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(yN,"href","/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(LN,"href","/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(xN,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c($N,"href","/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(kN,"href","/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(SN,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(RN,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraForPreTraining"),c(PN,"href","/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(BN,"href","/docs/transformers/pr_17393/en/model_doc/flava#transformers.FlavaForPreTraining"),c(IN,"href","/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetForPreTraining"),c(qN,"href","/docs/transformers/pr_17393/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(NN,"href","/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(jN,"href","/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(DN,"href","/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(GN,"href","/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ON,"href","/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(VN,"href","/docs/transformers/pr_17393/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(XN,"href","/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(zN,"href","/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(WN,"href","/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(QN,"href","/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(HN,"href","/docs/transformers/pr_17393/en/model_doc/retribert#transformers.RetriBertModel"),c(UN,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(JN,"href","/docs/transformers/pr_17393/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(YN,"href","/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(KN,"href","/docs/transformers/pr_17393/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ZN,"href","/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(ej,"href","/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(oj,"href","/docs/transformers/pr_17393/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(rj,"href","/docs/transformers/pr_17393/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(tj,"href","/docs/transformers/pr_17393/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(aj,"href","/docs/transformers/pr_17393/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(nj,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(sj,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(lj,"href","/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ij,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(dj,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(cj,"href","/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W_,"id","transformers.AutoModelForCausalLM"),c(W_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W_,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(fj,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mj,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gj,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hj,"href","/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartForCausalLM"),c(pj,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertLMHeadModel"),c(uj,"href","/docs/transformers/pr_17393/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(_j,"href","/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(bj,"href","/docs/transformers/pr_17393/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(vj,"href","/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Fj,"href","/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Tj,"href","/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Mj,"href","/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Ej,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Cj,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraForCausalLM"),c(wj,"href","/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Aj,"href","/docs/transformers/pr_17393/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(yj,"href","/docs/transformers/pr_17393/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Lj,"href","/docs/transformers/pr_17393/en/model_doc/marian#transformers.MarianForCausalLM"),c(xj,"href","/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartForCausalLM"),c($j,"href","/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(kj,"href","/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Sj,"href","/docs/transformers/pr_17393/en/model_doc/opt#transformers.OPTForCausalLM"),c(Rj,"href","/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Pj,"href","/docs/transformers/pr_17393/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Bj,"href","/docs/transformers/pr_17393/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Ij,"href","/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(qj,"href","/docs/transformers/pr_17393/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Nj,"href","/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(jj,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Dj,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Gj,"href","/docs/transformers/pr_17393/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Oj,"href","/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Vj,"href","/docs/transformers/pr_17393/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Xj,"href","/docs/transformers/pr_17393/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(zj,"href","/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Wj,"href","/docs/transformers/pr_17393/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Qj,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Hj,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Uj,"href","/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S3,"id","transformers.AutoModelForMaskedLM"),c(S3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S3,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(Jj,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yj,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kj,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zj,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(eD,"href","/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(oD,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertForMaskedLM"),c(rD,"href","/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(tD,"href","/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(aD,"href","/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(nD,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(sD,"href","/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(lD,"href","/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(iD,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(dD,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(cD,"href","/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(fD,"href","/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(mD,"href","/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(gD,"href","/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(hD,"href","/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(pD,"href","/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(uD,"href","/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(_D,"href","/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(bD,"href","/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(vD,"href","/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(FD,"href","/docs/transformers/pr_17393/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(TD,"href","/docs/transformers/pr_17393/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(MD,"href","/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(ED,"href","/docs/transformers/pr_17393/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(CD,"href","/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(wD,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(AD,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(yD,"href","/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(LD,"href","/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(xD,"href","/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($D,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(kD,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(SD,"href","/docs/transformers/pr_17393/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_1,"id","transformers.AutoModelForSeq2SeqLM"),c(_1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_1,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(RD,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PD,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BD,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ID,"href","/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(qD,"href","/docs/transformers/pr_17393/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(ND,"href","/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(jD,"href","/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(DD,"href","/docs/transformers/pr_17393/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(GD,"href","/docs/transformers/pr_17393/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(OD,"href","/docs/transformers/pr_17393/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(VD,"href","/docs/transformers/pr_17393/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(XD,"href","/docs/transformers/pr_17393/en/model_doc/marian#transformers.MarianMTModel"),c(zD,"href","/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(WD,"href","/docs/transformers/pr_17393/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(QD,"href","/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(HD,"href","/docs/transformers/pr_17393/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(UD,"href","/docs/transformers/pr_17393/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(JD,"href","/docs/transformers/pr_17393/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(YD,"href","/docs/transformers/pr_17393/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q1,"id","transformers.AutoModelForSequenceClassification"),c(q1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q1,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(KD,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZD,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eG,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oG,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17393/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17393/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17393/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17393/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17393/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17393/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17393/en/model_doc/led#transformers.LEDForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c($G,"href","/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17393/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17393/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17393/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17393/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17393/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pb,"id","transformers.AutoModelForMultipleChoice"),c(Pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pb,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(HG,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UG,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JG,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YG,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(KG,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(eO,"href","/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(oO,"href","/docs/transformers/pr_17393/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(rO,"href","/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(tO,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(aO,"href","/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(nO,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(sO,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(lO,"href","/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(iO,"href","/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(dO,"href","/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(fO,"href","/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(mO,"href","/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(gO,"href","/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(hO,"href","/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(pO,"href","/docs/transformers/pr_17393/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(uO,"href","/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(_O,"href","/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(bO,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17393/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g2,"id","transformers.AutoModelForNextSentencePrediction"),c(g2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g2,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(AO,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yO,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LO,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xO,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c($O,"href","/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(kO,"href","/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(SO,"href","/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(RO,"href","/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M2,"id","transformers.AutoModelForTokenClassification"),c(M2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M2,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(PO,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BO,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IO,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qO,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(NO,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertForTokenClassification"),c(jO,"href","/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(DO,"href","/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(GO,"href","/docs/transformers/pr_17393/en/model_doc/canine#transformers.CanineForTokenClassification"),c(OO,"href","/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(VO,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(XO,"href","/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(zO,"href","/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(WO,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(QO,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(HO,"href","/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(UO,"href","/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(JO,"href","/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(YO,"href","/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(KO,"href","/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(eV,"href","/docs/transformers/pr_17393/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(oV,"href","/docs/transformers/pr_17393/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(rV,"href","/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(tV,"href","/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(aV,"href","/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(nV,"href","/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(sV,"href","/docs/transformers/pr_17393/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(lV,"href","/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(iV,"href","/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(dV,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(cV,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(fV,"href","/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(mV,"href","/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(gV,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(hV,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(pV,"href","/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(uV,"href","/docs/transformers/pr_17393/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sv,"id","transformers.AutoModelForQuestionAnswering"),c(sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sv,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(_V,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bV,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vV,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FV,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17393/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17393/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_17393/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17393/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17393/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17393/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c($V,"href","/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(PV,"href","/docs/transformers/pr_17393/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17393/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17393/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17393/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17393/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17393/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17393/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17393/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17393/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17393/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17393/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17393/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17393/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17393/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17393/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17393/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17393/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17393/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(rX,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(nX,"href","/docs/transformers/pr_17393/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(sX,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lX,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iX,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dX,"href","/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oF,"id","transformers.AutoModelForImageClassification"),c(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oF,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(cX,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fX,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mX,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/pr_17393/en/model_doc/beit#transformers.BeitForImageClassification"),c(hX,"href","/docs/transformers/pr_17393/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(pX,"href","/docs/transformers/pr_17393/en/model_doc/cvt#transformers.CvtForImageClassification"),c(uX,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(_X,"href","/docs/transformers/pr_17393/en/model_doc/deit#transformers.DeiTForImageClassification"),c(bX,"href","/docs/transformers/pr_17393/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(vX,"href","/docs/transformers/pr_17393/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(FX,"href","/docs/transformers/pr_17393/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(TX,"href","/docs/transformers/pr_17393/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(MX,"href","/docs/transformers/pr_17393/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(EX,"href","/docs/transformers/pr_17393/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(CX,"href","/docs/transformers/pr_17393/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(wX,"href","/docs/transformers/pr_17393/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(AX,"href","/docs/transformers/pr_17393/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(yX,"href","/docs/transformers/pr_17393/en/model_doc/swin#transformers.SwinForImageClassification"),c(LX,"href","/docs/transformers/pr_17393/en/model_doc/van#transformers.VanForImageClassification"),c(xX,"href","/docs/transformers/pr_17393/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_F,"id","transformers.AutoModelForVision2Seq"),c(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_F,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c($X,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/pr_17393/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForAudioClassification"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(PX,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IX,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qX,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(NX,"href","/docs/transformers/pr_17393/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(jX,"href","/docs/transformers/pr_17393/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(DX,"href","/docs/transformers/pr_17393/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(GX,"href","/docs/transformers/pr_17393/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(OX,"href","/docs/transformers/pr_17393/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(VX,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(XX,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(zX,"href","/docs/transformers/pr_17393/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForAudioFrameClassification"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(WX,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QX,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HX,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UX,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(JX,"href","/docs/transformers/pr_17393/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(YX,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(KX,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(ZX,"href","/docs/transformers/pr_17393/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForCTC"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(ez,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tz,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(az,"href","/docs/transformers/pr_17393/en/model_doc/hubert#transformers.HubertForCTC"),c(nz,"href","/docs/transformers/pr_17393/en/model_doc/sew#transformers.SEWForCTC"),c(sz,"href","/docs/transformers/pr_17393/en/model_doc/sew-d#transformers.SEWDForCTC"),c(lz,"href","/docs/transformers/pr_17393/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(iz,"href","/docs/transformers/pr_17393/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(dz,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(cz,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(fz,"href","/docs/transformers/pr_17393/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(tT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(mz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pz,"href","/docs/transformers/pr_17393/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(uz,"href","/docs/transformers/pr_17393/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dT,"id","transformers.AutoModelForAudioXVector"),c(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dT,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(_z,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fz,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Tz,"href","/docs/transformers/pr_17393/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Mz,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Ez,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Cz,"href","/docs/transformers/pr_17393/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForMaskedImageModeling"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(wz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Az,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lz,"href","/docs/transformers/pr_17393/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(xz,"href","/docs/transformers/pr_17393/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c($z,"href","/docs/transformers/pr_17393/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wT,"id","transformers.AutoModelForObjectDetection"),c(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wT,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(kz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pz,"href","/docs/transformers/pr_17393/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Bz,"href","/docs/transformers/pr_17393/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kT,"id","transformers.AutoModelForImageSegmentation"),c(kT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kT,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(Iz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jz,"href","/docs/transformers/pr_17393/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IT,"id","transformers.AutoModelForSemanticSegmentation"),c(IT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Dz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vz,"href","/docs/transformers/pr_17393/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Xz,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(zz,"href","/docs/transformers/pr_17393/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Wz,"href","/docs/transformers/pr_17393/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.AutoModelForInstanceSegmentation"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Nd,"class","relative group"),c(Qz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jz,"href","/docs/transformers/pr_17393/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.TFAutoModel"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(Yz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zz,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eW,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.TFAlbertModel"),c(oW,"href","/docs/transformers/pr_17393/en/model_doc/bart#transformers.TFBartModel"),c(rW,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.TFBertModel"),c(tW,"href","/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(aW,"href","/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(nW,"href","/docs/transformers/pr_17393/en/model_doc/camembert#transformers.TFCamembertModel"),c(sW,"href","/docs/transformers/pr_17393/en/model_doc/clip#transformers.TFCLIPModel"),c(lW,"href","/docs/transformers/pr_17393/en/model_doc/convbert#transformers.TFConvBertModel"),c(iW,"href","/docs/transformers/pr_17393/en/model_doc/convnext#transformers.TFConvNextModel"),c(dW,"href","/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.TFCTRLModel"),c(cW,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(fW,"href","/docs/transformers/pr_17393/en/model_doc/deberta#transformers.TFDebertaModel"),c(mW,"href","/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(gW,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(hW,"href","/docs/transformers/pr_17393/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(pW,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.TFElectraModel"),c(uW,"href","/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(_W,"href","/docs/transformers/pr_17393/en/model_doc/funnel#transformers.TFFunnelModel"),c(bW,"href","/docs/transformers/pr_17393/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(vW,"href","/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.TFGPT2Model"),c(FW,"href","/docs/transformers/pr_17393/en/model_doc/gptj#transformers.TFGPTJModel"),c(TW,"href","/docs/transformers/pr_17393/en/model_doc/hubert#transformers.TFHubertModel"),c(MW,"href","/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(EW,"href","/docs/transformers/pr_17393/en/model_doc/led#transformers.TFLEDModel"),c(CW,"href","/docs/transformers/pr_17393/en/model_doc/longformer#transformers.TFLongformerModel"),c(wW,"href","/docs/transformers/pr_17393/en/model_doc/lxmert#transformers.TFLxmertModel"),c(AW,"href","/docs/transformers/pr_17393/en/model_doc/marian#transformers.TFMarianModel"),c(yW,"href","/docs/transformers/pr_17393/en/model_doc/mbart#transformers.TFMBartModel"),c(LW,"href","/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(xW,"href","/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.TFMPNetModel"),c($W,"href","/docs/transformers/pr_17393/en/model_doc/mt5#transformers.TFMT5Model"),c(kW,"href","/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(SW,"href","/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.TFPegasusModel"),c(RW,"href","/docs/transformers/pr_17393/en/model_doc/rembert#transformers.TFRemBertModel"),c(PW,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.TFRobertaModel"),c(BW,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.TFRoFormerModel"),c(IW,"href","/docs/transformers/pr_17393/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(qW,"href","/docs/transformers/pr_17393/en/model_doc/swin#transformers.TFSwinModel"),c(NW,"href","/docs/transformers/pr_17393/en/model_doc/t5#transformers.TFT5Model"),c(jW,"href","/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TFTapasModel"),c(DW,"href","/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(GW,"href","/docs/transformers/pr_17393/en/model_doc/vit#transformers.TFViTModel"),c(OW,"href","/docs/transformers/pr_17393/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(VW,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(XW,"href","/docs/transformers/pr_17393/en/model_doc/xlm#transformers.TFXLMModel"),c(zW,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(WW,"href","/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V7,"id","transformers.TFAutoModelForPreTraining"),c(V7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V7,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(QW,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HW,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UW,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JW,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(YW,"href","/docs/transformers/pr_17393/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(KW,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.TFBertForPreTraining"),c(ZW,"href","/docs/transformers/pr_17393/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(eQ,"href","/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(oQ,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(rQ,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(tQ,"href","/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(aQ,"href","/docs/transformers/pr_17393/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(nQ,"href","/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(sQ,"href","/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(lQ,"href","/docs/transformers/pr_17393/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(iQ,"href","/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(dQ,"href","/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(cQ,"href","/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(fQ,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17393/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(gQ,"href","/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(hQ,"href","/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(pQ,"href","/docs/transformers/pr_17393/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(uQ,"href","/docs/transformers/pr_17393/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(_Q,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p9,"id","transformers.TFAutoModelForCausalLM"),c(p9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p9,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(vQ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(EQ,"href","/docs/transformers/pr_17393/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(CQ,"href","/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(wQ,"href","/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(AQ,"href","/docs/transformers/pr_17393/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(yQ,"href","/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(LQ,"href","/docs/transformers/pr_17393/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(xQ,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c($Q,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(kQ,"href","/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(SQ,"href","/docs/transformers/pr_17393/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(RQ,"href","/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($9,"id","transformers.TFAutoModelForImageClassification"),c($9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($9,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(PQ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BQ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IQ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qQ,"href","/docs/transformers/pr_17393/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(NQ,"href","/docs/transformers/pr_17393/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(jQ,"href","/docs/transformers/pr_17393/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(DQ,"href","/docs/transformers/pr_17393/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q9,"id","transformers.TFAutoModelForMaskedLM"),c(q9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q9,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(GQ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OQ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VQ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XQ,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17393/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17393/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17393/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(ZQ,"href","/docs/transformers/pr_17393/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(eH,"href","/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(oH,"href","/docs/transformers/pr_17393/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(rH,"href","/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(tH,"href","/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(aH,"href","/docs/transformers/pr_17393/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(nH,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(sH,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(lH,"href","/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(iH,"href","/docs/transformers/pr_17393/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(dH,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(cH,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/pr_17393/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(hH,"href","/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(pH,"href","/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(uH,"href","/docs/transformers/pr_17393/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(_H,"href","/docs/transformers/pr_17393/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(bH,"href","/docs/transformers/pr_17393/en/model_doc/marian#transformers.TFMarianMTModel"),c(vH,"href","/docs/transformers/pr_17393/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(FH,"href","/docs/transformers/pr_17393/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(TH,"href","/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(MH,"href","/docs/transformers/pr_17393/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.TFAutoModelForSequenceClassification"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(EH,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(yH,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(LH,"href","/docs/transformers/pr_17393/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(xH,"href","/docs/transformers/pr_17393/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c($H,"href","/docs/transformers/pr_17393/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(kH,"href","/docs/transformers/pr_17393/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(SH,"href","/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(RH,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(PH,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(BH,"href","/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(IH,"href","/docs/transformers/pr_17393/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(qH,"href","/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(NH,"href","/docs/transformers/pr_17393/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(jH,"href","/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(DH,"href","/docs/transformers/pr_17393/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(GH,"href","/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(OH,"href","/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(VH,"href","/docs/transformers/pr_17393/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(XH,"href","/docs/transformers/pr_17393/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(zH,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(WH,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(QH,"href","/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(HH,"href","/docs/transformers/pr_17393/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(UH,"href","/docs/transformers/pr_17393/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(JH,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(YH,"href","/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HM,"id","transformers.TFAutoModelForMultipleChoice"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(KH,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZH,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eU,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oU,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(rU,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(tU,"href","/docs/transformers/pr_17393/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(aU,"href","/docs/transformers/pr_17393/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(nU,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(sU,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(lU,"href","/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(iU,"href","/docs/transformers/pr_17393/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(dU,"href","/docs/transformers/pr_17393/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(cU,"href","/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(fU,"href","/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(mU,"href","/docs/transformers/pr_17393/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(gU,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(hU,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(pU,"href","/docs/transformers/pr_17393/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(uU,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(_U,"href","/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(bU,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vU,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FU,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TU,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(MU,"href","/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(EU,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CU,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wU,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AU,"href","/docs/transformers/pr_17393/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.TFAutoModelForTokenClassification"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(yU,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LU,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xU,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($U,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(kU,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(SU,"href","/docs/transformers/pr_17393/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(RU,"href","/docs/transformers/pr_17393/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(PU,"href","/docs/transformers/pr_17393/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(BU,"href","/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(IU,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(qU,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(NU,"href","/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(jU,"href","/docs/transformers/pr_17393/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(DU,"href","/docs/transformers/pr_17393/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(GU,"href","/docs/transformers/pr_17393/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(OU,"href","/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(VU,"href","/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(XU,"href","/docs/transformers/pr_17393/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(zU,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(WU,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(QU,"href","/docs/transformers/pr_17393/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(HU,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(UU,"href","/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W4,"id","transformers.TFAutoModelForQuestionAnswering"),c(W4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(JU,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YU,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KU,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZU,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(eJ,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(oJ,"href","/docs/transformers/pr_17393/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(rJ,"href","/docs/transformers/pr_17393/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(tJ,"href","/docs/transformers/pr_17393/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(aJ,"href","/docs/transformers/pr_17393/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(nJ,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(sJ,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(lJ,"href","/docs/transformers/pr_17393/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(iJ,"href","/docs/transformers/pr_17393/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(dJ,"href","/docs/transformers/pr_17393/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(cJ,"href","/docs/transformers/pr_17393/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(fJ,"href","/docs/transformers/pr_17393/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(mJ,"href","/docs/transformers/pr_17393/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_17393/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(hJ,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(pJ,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(uJ,"href","/docs/transformers/pr_17393/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(_J,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(bJ,"href","/docs/transformers/pr_17393/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.TFAutoModelForVision2Seq"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(vJ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FJ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TJ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MJ,"href","/docs/transformers/pr_17393/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(EJ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CJ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wJ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AJ,"href","/docs/transformers/pr_17393/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.FlaxAutoModel"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(yJ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LJ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xJ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($J,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.FlaxAlbertModel"),c(kJ,"href","/docs/transformers/pr_17393/en/model_doc/bart#transformers.FlaxBartModel"),c(SJ,"href","/docs/transformers/pr_17393/en/model_doc/beit#transformers.FlaxBeitModel"),c(RJ,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.FlaxBertModel"),c(PJ,"href","/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(BJ,"href","/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(IJ,"href","/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(qJ,"href","/docs/transformers/pr_17393/en/model_doc/clip#transformers.FlaxCLIPModel"),c(NJ,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(jJ,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.FlaxElectraModel"),c(DJ,"href","/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(GJ,"href","/docs/transformers/pr_17393/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(OJ,"href","/docs/transformers/pr_17393/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(VJ,"href","/docs/transformers/pr_17393/en/model_doc/marian#transformers.FlaxMarianModel"),c(XJ,"href","/docs/transformers/pr_17393/en/model_doc/mbart#transformers.FlaxMBartModel"),c(zJ,"href","/docs/transformers/pr_17393/en/model_doc/mt5#transformers.FlaxMT5Model"),c(WJ,"href","/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(QJ,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(HJ,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(UJ,"href","/docs/transformers/pr_17393/en/model_doc/t5#transformers.FlaxT5Model"),c(JJ,"href","/docs/transformers/pr_17393/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(YJ,"href","/docs/transformers/pr_17393/en/model_doc/vit#transformers.FlaxViTModel"),c(KJ,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(ZJ,"href","/docs/transformers/pr_17393/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(eY,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.FlaxAutoModelForCausalLM"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(oY,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rY,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tY,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aY,"href","/docs/transformers/pr_17393/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(nY,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(sY,"href","/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(lY,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(iY,"href","/docs/transformers/pr_17393/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(dY,"href","/docs/transformers/pr_17393/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(cY,"href","/docs/transformers/pr_17393/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(fY,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(mY,"href","/docs/transformers/pr_17393/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dC,"id","transformers.FlaxAutoModelForPreTraining"),c(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(gY,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pY,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uY,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(_Y,"href","/docs/transformers/pr_17393/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(bY,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(vY,"href","/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(FY,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(TY,"href","/docs/transformers/pr_17393/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MY,"href","/docs/transformers/pr_17393/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(EY,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(CY,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(wY,"href","/docs/transformers/pr_17393/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(AY,"href","/docs/transformers/pr_17393/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(yY,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.FlaxAutoModelForMaskedLM"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Nc,"class","relative group"),c(LY,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xY,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Y,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kY,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(SY,"href","/docs/transformers/pr_17393/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(RY,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(PY,"href","/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(BY,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(IY,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(qY,"href","/docs/transformers/pr_17393/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(NY,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(jY,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(DY,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(GY,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OY,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VY,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XY,"href","/docs/transformers/pr_17393/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(zY,"href","/docs/transformers/pr_17393/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(WY,"href","/docs/transformers/pr_17393/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(QY,"href","/docs/transformers/pr_17393/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(HY,"href","/docs/transformers/pr_17393/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(UY,"href","/docs/transformers/pr_17393/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(JY,"href","/docs/transformers/pr_17393/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(YY,"href","/docs/transformers/pr_17393/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(KY,"href","/docs/transformers/pr_17393/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(ZY,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eK,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oK,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rK,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(tK,"href","/docs/transformers/pr_17393/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(aK,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(nK,"href","/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(sK,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(lK,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(iK,"href","/docs/transformers/pr_17393/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(dK,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(cK,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(fK,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(i5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(mK,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(uK,"href","/docs/transformers/pr_17393/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(_K,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(bK,"href","/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(vK,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(FK,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(TK,"href","/docs/transformers/pr_17393/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(MK,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(EK,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(CK,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T5,"id","transformers.FlaxAutoModelForTokenClassification"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(wK,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AK,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yK,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LK,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(xK,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c($K,"href","/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(kK,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(SK,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(RK,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(PK,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(BK,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(IK,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NK,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jK,"href","/docs/transformers/pr_17393/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(DK,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(GK,"href","/docs/transformers/pr_17393/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(OK,"href","/docs/transformers/pr_17393/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(VK,"href","/docs/transformers/pr_17393/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(XK,"href","/docs/transformers/pr_17393/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(zK,"href","/docs/transformers/pr_17393/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(WK,"href","/docs/transformers/pr_17393/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(QK,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HK,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UK,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JK,"href","/docs/transformers/pr_17393/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q5,"id","transformers.FlaxAutoModelForImageClassification"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(YK,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KK,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZK,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eZ,"href","/docs/transformers/pr_17393/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(oZ,"href","/docs/transformers/pr_17393/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K5,"id","transformers.FlaxAutoModelForVision2Seq"),c(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K5,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(rZ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/pr_17393/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/pr_17393/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,_),b(f,rt,_),e(rt,mi),e(rt,gi),e(gi,vA),e(rt,uf),b(f,je,_),b(f,We,_),e(We,hi),e(We,yn),e(yn,FA),e(We,Ln),e(We,xn),e(xn,TA),e(We,pi),e(We,$n),e($n,MA),e(We,ui),b(f,_f,_),M(Ca,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,G$),e(Ae,_i),e(_i,O$),e(Ae,V$),b(f,Eo,_),b(f,wa,_),e(wa,X$),e(wa,bf),e(bf,z$),e(wa,QGe),b(f,Iqe,_),b(f,bi,_),e(bi,vf),e(vf,Kee),M(EA,Kee,null),e(bi,HGe),e(bi,Zee),e(Zee,UGe),b(f,qqe,_),b(f,kn,_),e(kn,JGe),e(kn,eoe),e(eoe,YGe),e(kn,KGe),e(kn,ooe),e(ooe,ZGe),e(kn,eOe),b(f,Nqe,_),M(CA,f,_),b(f,jqe,_),b(f,W$,_),e(W$,oOe),b(f,Dqe,_),M(Ff,f,_),b(f,Gqe,_),b(f,vi,_),e(vi,Tf),e(Tf,roe),M(wA,roe,null),e(vi,rOe),e(vi,toe),e(toe,tOe),b(f,Oqe,_),b(f,Co,_),M(AA,Co,null),e(Co,aOe),e(Co,yA),e(yA,nOe),e(yA,Q$),e(Q$,sOe),e(yA,lOe),e(Co,iOe),e(Co,LA),e(LA,dOe),e(LA,aoe),e(aoe,cOe),e(LA,fOe),e(Co,mOe),e(Co,Er),M(xA,Er,null),e(Er,gOe),e(Er,noe),e(noe,hOe),e(Er,pOe),e(Er,Fi),e(Fi,uOe),e(Fi,soe),e(soe,_Oe),e(Fi,bOe),e(Fi,loe),e(loe,vOe),e(Fi,FOe),e(Er,TOe),e(Er,A),e(A,Mf),e(Mf,ioe),e(ioe,MOe),e(Mf,EOe),e(Mf,H$),e(H$,COe),e(Mf,wOe),e(A,AOe),e(A,Ef),e(Ef,doe),e(doe,yOe),e(Ef,LOe),e(Ef,U$),e(U$,xOe),e(Ef,$Oe),e(A,kOe),e(A,Cf),e(Cf,coe),e(coe,SOe),e(Cf,ROe),e(Cf,J$),e(J$,POe),e(Cf,BOe),e(A,IOe),e(A,wf),e(wf,foe),e(foe,qOe),e(wf,NOe),e(wf,Y$),e(Y$,jOe),e(wf,DOe),e(A,GOe),e(A,Af),e(Af,moe),e(moe,OOe),e(Af,VOe),e(Af,K$),e(K$,XOe),e(Af,zOe),e(A,WOe),e(A,yf),e(yf,goe),e(goe,QOe),e(yf,HOe),e(yf,Z$),e(Z$,UOe),e(yf,JOe),e(A,YOe),e(A,Lf),e(Lf,hoe),e(hoe,KOe),e(Lf,ZOe),e(Lf,ek),e(ek,eVe),e(Lf,oVe),e(A,rVe),e(A,xf),e(xf,poe),e(poe,tVe),e(xf,aVe),e(xf,ok),e(ok,nVe),e(xf,sVe),e(A,lVe),e(A,$f),e($f,uoe),e(uoe,iVe),e($f,dVe),e($f,rk),e(rk,cVe),e($f,fVe),e(A,mVe),e(A,kf),e(kf,_oe),e(_oe,gVe),e(kf,hVe),e(kf,tk),e(tk,pVe),e(kf,uVe),e(A,_Ve),e(A,Sf),e(Sf,boe),e(boe,bVe),e(Sf,vVe),e(Sf,ak),e(ak,FVe),e(Sf,TVe),e(A,MVe),e(A,Rf),e(Rf,voe),e(voe,EVe),e(Rf,CVe),e(Rf,nk),e(nk,wVe),e(Rf,AVe),e(A,yVe),e(A,Pf),e(Pf,Foe),e(Foe,LVe),e(Pf,xVe),e(Pf,sk),e(sk,$Ve),e(Pf,kVe),e(A,SVe),e(A,Bf),e(Bf,Toe),e(Toe,RVe),e(Bf,PVe),e(Bf,lk),e(lk,BVe),e(Bf,IVe),e(A,qVe),e(A,If),e(If,Moe),e(Moe,NVe),e(If,jVe),e(If,ik),e(ik,DVe),e(If,GVe),e(A,OVe),e(A,qf),e(qf,Eoe),e(Eoe,VVe),e(qf,XVe),e(qf,dk),e(dk,zVe),e(qf,WVe),e(A,QVe),e(A,Nf),e(Nf,Coe),e(Coe,HVe),e(Nf,UVe),e(Nf,ck),e(ck,JVe),e(Nf,YVe),e(A,KVe),e(A,jf),e(jf,woe),e(woe,ZVe),e(jf,eXe),e(jf,fk),e(fk,oXe),e(jf,rXe),e(A,tXe),e(A,Df),e(Df,Aoe),e(Aoe,aXe),e(Df,nXe),e(Df,mk),e(mk,sXe),e(Df,lXe),e(A,iXe),e(A,Gf),e(Gf,yoe),e(yoe,dXe),e(Gf,cXe),e(Gf,gk),e(gk,fXe),e(Gf,mXe),e(A,gXe),e(A,Of),e(Of,Loe),e(Loe,hXe),e(Of,pXe),e(Of,hk),e(hk,uXe),e(Of,_Xe),e(A,bXe),e(A,Vf),e(Vf,xoe),e(xoe,vXe),e(Vf,FXe),e(Vf,pk),e(pk,TXe),e(Vf,MXe),e(A,EXe),e(A,Xf),e(Xf,$oe),e($oe,CXe),e(Xf,wXe),e(Xf,uk),e(uk,AXe),e(Xf,yXe),e(A,LXe),e(A,zf),e(zf,koe),e(koe,xXe),e(zf,$Xe),e(zf,_k),e(_k,kXe),e(zf,SXe),e(A,RXe),e(A,Wf),e(Wf,Soe),e(Soe,PXe),e(Wf,BXe),e(Wf,bk),e(bk,IXe),e(Wf,qXe),e(A,NXe),e(A,Qf),e(Qf,Roe),e(Roe,jXe),e(Qf,DXe),e(Qf,vk),e(vk,GXe),e(Qf,OXe),e(A,VXe),e(A,Hf),e(Hf,Poe),e(Poe,XXe),e(Hf,zXe),e(Hf,Fk),e(Fk,WXe),e(Hf,QXe),e(A,HXe),e(A,Uf),e(Uf,Boe),e(Boe,UXe),e(Uf,JXe),e(Uf,Tk),e(Tk,YXe),e(Uf,KXe),e(A,ZXe),e(A,Jf),e(Jf,Ioe),e(Ioe,eze),e(Jf,oze),e(Jf,Mk),e(Mk,rze),e(Jf,tze),e(A,aze),e(A,Yf),e(Yf,qoe),e(qoe,nze),e(Yf,sze),e(Yf,Ek),e(Ek,lze),e(Yf,ize),e(A,dze),e(A,Kf),e(Kf,Noe),e(Noe,cze),e(Kf,fze),e(Kf,Ck),e(Ck,mze),e(Kf,gze),e(A,hze),e(A,Zf),e(Zf,joe),e(joe,pze),e(Zf,uze),e(Zf,wk),e(wk,_ze),e(Zf,bze),e(A,vze),e(A,em),e(em,Doe),e(Doe,Fze),e(em,Tze),e(em,Ak),e(Ak,Mze),e(em,Eze),e(A,Cze),e(A,om),e(om,Goe),e(Goe,wze),e(om,Aze),e(om,yk),e(yk,yze),e(om,Lze),e(A,xze),e(A,rm),e(rm,Ooe),e(Ooe,$ze),e(rm,kze),e(rm,Lk),e(Lk,Sze),e(rm,Rze),e(A,Pze),e(A,tm),e(tm,Voe),e(Voe,Bze),e(tm,Ize),e(tm,xk),e(xk,qze),e(tm,Nze),e(A,jze),e(A,am),e(am,Xoe),e(Xoe,Dze),e(am,Gze),e(am,$k),e($k,Oze),e(am,Vze),e(A,Xze),e(A,nm),e(nm,zoe),e(zoe,zze),e(nm,Wze),e(nm,kk),e(kk,Qze),e(nm,Hze),e(A,Uze),e(A,sm),e(sm,Woe),e(Woe,Jze),e(sm,Yze),e(sm,Sk),e(Sk,Kze),e(sm,Zze),e(A,eWe),e(A,lm),e(lm,Qoe),e(Qoe,oWe),e(lm,rWe),e(lm,Rk),e(Rk,tWe),e(lm,aWe),e(A,nWe),e(A,im),e(im,Hoe),e(Hoe,sWe),e(im,lWe),e(im,Pk),e(Pk,iWe),e(im,dWe),e(A,cWe),e(A,dm),e(dm,Uoe),e(Uoe,fWe),e(dm,mWe),e(dm,Bk),e(Bk,gWe),e(dm,hWe),e(A,pWe),e(A,cm),e(cm,Joe),e(Joe,uWe),e(cm,_We),e(cm,Ik),e(Ik,bWe),e(cm,vWe),e(A,FWe),e(A,fm),e(fm,Yoe),e(Yoe,TWe),e(fm,MWe),e(fm,qk),e(qk,EWe),e(fm,CWe),e(A,wWe),e(A,mm),e(mm,Koe),e(Koe,AWe),e(mm,yWe),e(mm,Nk),e(Nk,LWe),e(mm,xWe),e(A,$We),e(A,gm),e(gm,Zoe),e(Zoe,kWe),e(gm,SWe),e(gm,jk),e(jk,RWe),e(gm,PWe),e(A,BWe),e(A,hm),e(hm,ere),e(ere,IWe),e(hm,qWe),e(hm,Dk),e(Dk,NWe),e(hm,jWe),e(A,DWe),e(A,pm),e(pm,ore),e(ore,GWe),e(pm,OWe),e(pm,Gk),e(Gk,VWe),e(pm,XWe),e(A,zWe),e(A,um),e(um,rre),e(rre,WWe),e(um,QWe),e(um,Ok),e(Ok,HWe),e(um,UWe),e(A,JWe),e(A,_m),e(_m,tre),e(tre,YWe),e(_m,KWe),e(_m,Vk),e(Vk,ZWe),e(_m,eQe),e(A,oQe),e(A,bm),e(bm,are),e(are,rQe),e(bm,tQe),e(bm,Xk),e(Xk,aQe),e(bm,nQe),e(A,sQe),e(A,vm),e(vm,nre),e(nre,lQe),e(vm,iQe),e(vm,zk),e(zk,dQe),e(vm,cQe),e(A,fQe),e(A,Fm),e(Fm,sre),e(sre,mQe),e(Fm,gQe),e(Fm,Wk),e(Wk,hQe),e(Fm,pQe),e(A,uQe),e(A,Tm),e(Tm,lre),e(lre,_Qe),e(Tm,bQe),e(Tm,Qk),e(Qk,vQe),e(Tm,FQe),e(A,TQe),e(A,Mm),e(Mm,ire),e(ire,MQe),e(Mm,EQe),e(Mm,Hk),e(Hk,CQe),e(Mm,wQe),e(A,AQe),e(A,Em),e(Em,dre),e(dre,yQe),e(Em,LQe),e(Em,Uk),e(Uk,xQe),e(Em,$Qe),e(A,kQe),e(A,Cm),e(Cm,cre),e(cre,SQe),e(Cm,RQe),e(Cm,Jk),e(Jk,PQe),e(Cm,BQe),e(A,IQe),e(A,wm),e(wm,fre),e(fre,qQe),e(wm,NQe),e(wm,Yk),e(Yk,jQe),e(wm,DQe),e(A,GQe),e(A,Am),e(Am,mre),e(mre,OQe),e(Am,VQe),e(Am,Kk),e(Kk,XQe),e(Am,zQe),e(A,WQe),e(A,ym),e(ym,gre),e(gre,QQe),e(ym,HQe),e(ym,Zk),e(Zk,UQe),e(ym,JQe),e(A,YQe),e(A,Lm),e(Lm,hre),e(hre,KQe),e(Lm,ZQe),e(Lm,eS),e(eS,eHe),e(Lm,oHe),e(A,rHe),e(A,xm),e(xm,pre),e(pre,tHe),e(xm,aHe),e(xm,oS),e(oS,nHe),e(xm,sHe),e(A,lHe),e(A,$m),e($m,ure),e(ure,iHe),e($m,dHe),e($m,rS),e(rS,cHe),e($m,fHe),e(A,mHe),e(A,km),e(km,_re),e(_re,gHe),e(km,hHe),e(km,tS),e(tS,pHe),e(km,uHe),e(A,_He),e(A,Sm),e(Sm,bre),e(bre,bHe),e(Sm,vHe),e(Sm,aS),e(aS,FHe),e(Sm,THe),e(A,MHe),e(A,Rm),e(Rm,vre),e(vre,EHe),e(Rm,CHe),e(Rm,nS),e(nS,wHe),e(Rm,AHe),e(A,yHe),e(A,Pm),e(Pm,Fre),e(Fre,LHe),e(Pm,xHe),e(Pm,sS),e(sS,$He),e(Pm,kHe),e(A,SHe),e(A,Bm),e(Bm,Tre),e(Tre,RHe),e(Bm,PHe),e(Bm,lS),e(lS,BHe),e(Bm,IHe),e(A,qHe),e(A,Im),e(Im,Mre),e(Mre,NHe),e(Im,jHe),e(Im,iS),e(iS,DHe),e(Im,GHe),e(A,OHe),e(A,qm),e(qm,Ere),e(Ere,VHe),e(qm,XHe),e(qm,dS),e(dS,zHe),e(qm,WHe),e(A,QHe),e(A,Nm),e(Nm,Cre),e(Cre,HHe),e(Nm,UHe),e(Nm,cS),e(cS,JHe),e(Nm,YHe),e(A,KHe),e(A,jm),e(jm,wre),e(wre,ZHe),e(jm,eUe),e(jm,fS),e(fS,oUe),e(jm,rUe),e(A,tUe),e(A,Dm),e(Dm,Are),e(Are,aUe),e(Dm,nUe),e(Dm,mS),e(mS,sUe),e(Dm,lUe),e(A,iUe),e(A,Gm),e(Gm,yre),e(yre,dUe),e(Gm,cUe),e(Gm,gS),e(gS,fUe),e(Gm,mUe),e(A,gUe),e(A,Om),e(Om,Lre),e(Lre,hUe),e(Om,pUe),e(Om,hS),e(hS,uUe),e(Om,_Ue),e(A,bUe),e(A,Vm),e(Vm,xre),e(xre,vUe),e(Vm,FUe),e(Vm,pS),e(pS,TUe),e(Vm,MUe),e(A,EUe),e(A,Xm),e(Xm,$re),e($re,CUe),e(Xm,wUe),e(Xm,uS),e(uS,AUe),e(Xm,yUe),e(A,LUe),e(A,zm),e(zm,kre),e(kre,xUe),e(zm,$Ue),e(zm,_S),e(_S,kUe),e(zm,SUe),e(A,RUe),e(A,Wm),e(Wm,Sre),e(Sre,PUe),e(Wm,BUe),e(Wm,bS),e(bS,IUe),e(Wm,qUe),e(A,NUe),e(A,Qm),e(Qm,Rre),e(Rre,jUe),e(Qm,DUe),e(Qm,vS),e(vS,GUe),e(Qm,OUe),e(A,VUe),e(A,Hm),e(Hm,Pre),e(Pre,XUe),e(Hm,zUe),e(Hm,FS),e(FS,WUe),e(Hm,QUe),e(A,HUe),e(A,Um),e(Um,Bre),e(Bre,UUe),e(Um,JUe),e(Um,TS),e(TS,YUe),e(Um,KUe),e(A,ZUe),e(A,Jm),e(Jm,Ire),e(Ire,eJe),e(Jm,oJe),e(Jm,MS),e(MS,rJe),e(Jm,tJe),e(A,aJe),e(A,Ym),e(Ym,qre),e(qre,nJe),e(Ym,sJe),e(Ym,ES),e(ES,lJe),e(Ym,iJe),e(A,dJe),e(A,Km),e(Km,Nre),e(Nre,cJe),e(Km,fJe),e(Km,CS),e(CS,mJe),e(Km,gJe),e(A,hJe),e(A,Zm),e(Zm,jre),e(jre,pJe),e(Zm,uJe),e(Zm,wS),e(wS,_Je),e(Zm,bJe),e(A,vJe),e(A,eg),e(eg,Dre),e(Dre,FJe),e(eg,TJe),e(eg,AS),e(AS,MJe),e(eg,EJe),e(A,CJe),e(A,og),e(og,Gre),e(Gre,wJe),e(og,AJe),e(og,yS),e(yS,yJe),e(og,LJe),e(A,xJe),e(A,rg),e(rg,Ore),e(Ore,$Je),e(rg,kJe),e(rg,LS),e(LS,SJe),e(rg,RJe),e(A,PJe),e(A,tg),e(tg,Vre),e(Vre,BJe),e(tg,IJe),e(tg,xS),e(xS,qJe),e(tg,NJe),e(A,jJe),e(A,ag),e(ag,Xre),e(Xre,DJe),e(ag,GJe),e(ag,$S),e($S,OJe),e(ag,VJe),e(A,XJe),e(A,ng),e(ng,zre),e(zre,zJe),e(ng,WJe),e(ng,kS),e(kS,QJe),e(ng,HJe),e(A,UJe),e(A,sg),e(sg,Wre),e(Wre,JJe),e(sg,YJe),e(sg,SS),e(SS,KJe),e(sg,ZJe),e(A,eYe),e(A,lg),e(lg,Qre),e(Qre,oYe),e(lg,rYe),e(lg,RS),e(RS,tYe),e(lg,aYe),e(A,nYe),e(A,ig),e(ig,Hre),e(Hre,sYe),e(ig,lYe),e(ig,PS),e(PS,iYe),e(ig,dYe),e(A,cYe),e(A,dg),e(dg,Ure),e(Ure,fYe),e(dg,mYe),e(dg,BS),e(BS,gYe),e(dg,hYe),e(A,pYe),e(A,cg),e(cg,Jre),e(Jre,uYe),e(cg,_Ye),e(cg,IS),e(IS,bYe),e(cg,vYe),e(A,FYe),e(A,fg),e(fg,Yre),e(Yre,TYe),e(fg,MYe),e(fg,qS),e(qS,EYe),e(fg,CYe),e(A,wYe),e(A,mg),e(mg,Kre),e(Kre,AYe),e(mg,yYe),e(mg,NS),e(NS,LYe),e(mg,xYe),e(A,$Ye),e(A,gg),e(gg,Zre),e(Zre,kYe),e(gg,SYe),e(gg,jS),e(jS,RYe),e(gg,PYe),e(A,BYe),e(A,hg),e(hg,ete),e(ete,IYe),e(hg,qYe),e(hg,DS),e(DS,NYe),e(hg,jYe),e(A,DYe),e(A,pg),e(pg,ote),e(ote,GYe),e(pg,OYe),e(pg,GS),e(GS,VYe),e(pg,XYe),e(A,zYe),e(A,ug),e(ug,rte),e(rte,WYe),e(ug,QYe),e(ug,OS),e(OS,HYe),e(ug,UYe),e(A,JYe),e(A,_g),e(_g,tte),e(tte,YYe),e(_g,KYe),e(_g,VS),e(VS,ZYe),e(_g,eKe),e(A,oKe),e(A,bg),e(bg,ate),e(ate,rKe),e(bg,tKe),e(bg,XS),e(XS,aKe),e(bg,nKe),e(A,sKe),e(A,vg),e(vg,nte),e(nte,lKe),e(vg,iKe),e(vg,zS),e(zS,dKe),e(vg,cKe),e(A,fKe),e(A,Fg),e(Fg,ste),e(ste,mKe),e(Fg,gKe),e(Fg,WS),e(WS,hKe),e(Fg,pKe),e(A,uKe),e(A,Tg),e(Tg,lte),e(lte,_Ke),e(Tg,bKe),e(Tg,QS),e(QS,vKe),e(Tg,FKe),e(Er,TKe),M(Mg,Er,null),e(Co,MKe),e(Co,Eg),M($A,Eg,null),e(Eg,EKe),e(Eg,ite),e(ite,CKe),b(f,Vqe,_),b(f,Ti,_),e(Ti,Cg),e(Cg,dte),M(kA,dte,null),e(Ti,wKe),e(Ti,cte),e(cte,AKe),b(f,Xqe,_),b(f,wo,_),M(SA,wo,null),e(wo,yKe),e(wo,RA),e(RA,LKe),e(RA,HS),e(HS,xKe),e(RA,$Ke),e(wo,kKe),e(wo,PA),e(PA,SKe),e(PA,fte),e(fte,RKe),e(PA,PKe),e(wo,BKe),e(wo,Cr),M(BA,Cr,null),e(Cr,IKe),e(Cr,mte),e(mte,qKe),e(Cr,NKe),e(Cr,Aa),e(Aa,jKe),e(Aa,gte),e(gte,DKe),e(Aa,GKe),e(Aa,hte),e(hte,OKe),e(Aa,VKe),e(Aa,pte),e(pte,XKe),e(Aa,zKe),e(Cr,WKe),e(Cr,k),e(k,Sn),e(Sn,ute),e(ute,QKe),e(Sn,HKe),e(Sn,US),e(US,UKe),e(Sn,JKe),e(Sn,JS),e(JS,YKe),e(Sn,KKe),e(k,ZKe),e(k,Rn),e(Rn,_te),e(_te,eZe),e(Rn,oZe),e(Rn,YS),e(YS,rZe),e(Rn,tZe),e(Rn,KS),e(KS,aZe),e(Rn,nZe),e(k,sZe),e(k,Pn),e(Pn,bte),e(bte,lZe),e(Pn,iZe),e(Pn,ZS),e(ZS,dZe),e(Pn,cZe),e(Pn,eR),e(eR,fZe),e(Pn,mZe),e(k,gZe),e(k,wg),e(wg,vte),e(vte,hZe),e(wg,pZe),e(wg,oR),e(oR,uZe),e(wg,_Ze),e(k,bZe),e(k,Bn),e(Bn,Fte),e(Fte,vZe),e(Bn,FZe),e(Bn,rR),e(rR,TZe),e(Bn,MZe),e(Bn,tR),e(tR,EZe),e(Bn,CZe),e(k,wZe),e(k,Ag),e(Ag,Tte),e(Tte,AZe),e(Ag,yZe),e(Ag,aR),e(aR,LZe),e(Ag,xZe),e(k,$Ze),e(k,yg),e(yg,Mte),e(Mte,kZe),e(yg,SZe),e(yg,nR),e(nR,RZe),e(yg,PZe),e(k,BZe),e(k,Lg),e(Lg,Ete),e(Ete,IZe),e(Lg,qZe),e(Lg,sR),e(sR,NZe),e(Lg,jZe),e(k,DZe),e(k,In),e(In,Cte),e(Cte,GZe),e(In,OZe),e(In,lR),e(lR,VZe),e(In,XZe),e(In,iR),e(iR,zZe),e(In,WZe),e(k,QZe),e(k,qn),e(qn,wte),e(wte,HZe),e(qn,UZe),e(qn,dR),e(dR,JZe),e(qn,YZe),e(qn,cR),e(cR,KZe),e(qn,ZZe),e(k,eeo),e(k,Nn),e(Nn,Ate),e(Ate,oeo),e(Nn,reo),e(Nn,fR),e(fR,teo),e(Nn,aeo),e(Nn,mR),e(mR,neo),e(Nn,seo),e(k,leo),e(k,xg),e(xg,yte),e(yte,ieo),e(xg,deo),e(xg,gR),e(gR,ceo),e(xg,feo),e(k,meo),e(k,$g),e($g,Lte),e(Lte,geo),e($g,heo),e($g,hR),e(hR,peo),e($g,ueo),e(k,_eo),e(k,jn),e(jn,xte),e(xte,beo),e(jn,veo),e(jn,pR),e(pR,Feo),e(jn,Teo),e(jn,uR),e(uR,Meo),e(jn,Eeo),e(k,Ceo),e(k,kg),e(kg,$te),e($te,weo),e(kg,Aeo),e(kg,_R),e(_R,yeo),e(kg,Leo),e(k,xeo),e(k,Dn),e(Dn,kte),e(kte,$eo),e(Dn,keo),e(Dn,bR),e(bR,Seo),e(Dn,Reo),e(Dn,vR),e(vR,Peo),e(Dn,Beo),e(k,Ieo),e(k,Gn),e(Gn,Ste),e(Ste,qeo),e(Gn,Neo),e(Gn,FR),e(FR,jeo),e(Gn,Deo),e(Gn,TR),e(TR,Geo),e(Gn,Oeo),e(k,Veo),e(k,On),e(On,Rte),e(Rte,Xeo),e(On,zeo),e(On,MR),e(MR,Weo),e(On,Qeo),e(On,ER),e(ER,Heo),e(On,Ueo),e(k,Jeo),e(k,Sg),e(Sg,Pte),e(Pte,Yeo),e(Sg,Keo),e(Sg,CR),e(CR,Zeo),e(Sg,eoo),e(k,ooo),e(k,Vn),e(Vn,Bte),e(Bte,roo),e(Vn,too),e(Vn,wR),e(wR,aoo),e(Vn,noo),e(Vn,AR),e(AR,soo),e(Vn,loo),e(k,ioo),e(k,Xn),e(Xn,Ite),e(Ite,doo),e(Xn,coo),e(Xn,yR),e(yR,foo),e(Xn,moo),e(Xn,LR),e(LR,goo),e(Xn,hoo),e(k,poo),e(k,zn),e(zn,qte),e(qte,uoo),e(zn,_oo),e(zn,xR),e(xR,boo),e(zn,voo),e(zn,$R),e($R,Foo),e(zn,Too),e(k,Moo),e(k,Wn),e(Wn,Nte),e(Nte,Eoo),e(Wn,Coo),e(Wn,kR),e(kR,woo),e(Wn,Aoo),e(Wn,SR),e(SR,yoo),e(Wn,Loo),e(k,xoo),e(k,Qn),e(Qn,jte),e(jte,$oo),e(Qn,koo),e(Qn,RR),e(RR,Soo),e(Qn,Roo),e(Qn,PR),e(PR,Poo),e(Qn,Boo),e(k,Ioo),e(k,Hn),e(Hn,Dte),e(Dte,qoo),e(Hn,Noo),e(Hn,BR),e(BR,joo),e(Hn,Doo),e(Hn,IR),e(IR,Goo),e(Hn,Ooo),e(k,Voo),e(k,Rg),e(Rg,Gte),e(Gte,Xoo),e(Rg,zoo),e(Rg,qR),e(qR,Woo),e(Rg,Qoo),e(k,Hoo),e(k,Un),e(Un,Ote),e(Ote,Uoo),e(Un,Joo),e(Un,NR),e(NR,Yoo),e(Un,Koo),e(Un,jR),e(jR,Zoo),e(Un,ero),e(k,oro),e(k,Pg),e(Pg,Vte),e(Vte,rro),e(Pg,tro),e(Pg,DR),e(DR,aro),e(Pg,nro),e(k,sro),e(k,Jn),e(Jn,Xte),e(Xte,lro),e(Jn,iro),e(Jn,GR),e(GR,dro),e(Jn,cro),e(Jn,OR),e(OR,fro),e(Jn,mro),e(k,gro),e(k,Yn),e(Yn,zte),e(zte,hro),e(Yn,pro),e(Yn,VR),e(VR,uro),e(Yn,_ro),e(Yn,XR),e(XR,bro),e(Yn,vro),e(k,Fro),e(k,Kn),e(Kn,Wte),e(Wte,Tro),e(Kn,Mro),e(Kn,zR),e(zR,Ero),e(Kn,Cro),e(Kn,WR),e(WR,wro),e(Kn,Aro),e(k,yro),e(k,Zn),e(Zn,Qte),e(Qte,Lro),e(Zn,xro),e(Zn,QR),e(QR,$ro),e(Zn,kro),e(Zn,HR),e(HR,Sro),e(Zn,Rro),e(k,Pro),e(k,es),e(es,Hte),e(Hte,Bro),e(es,Iro),e(es,UR),e(UR,qro),e(es,Nro),e(es,JR),e(JR,jro),e(es,Dro),e(k,Gro),e(k,Bg),e(Bg,Ute),e(Ute,Oro),e(Bg,Vro),e(Bg,YR),e(YR,Xro),e(Bg,zro),e(k,Wro),e(k,os),e(os,Jte),e(Jte,Qro),e(os,Hro),e(os,KR),e(KR,Uro),e(os,Jro),e(os,ZR),e(ZR,Yro),e(os,Kro),e(k,Zro),e(k,rs),e(rs,Yte),e(Yte,eto),e(rs,oto),e(rs,eP),e(eP,rto),e(rs,tto),e(rs,oP),e(oP,ato),e(rs,nto),e(k,sto),e(k,ts),e(ts,Kte),e(Kte,lto),e(ts,ito),e(ts,rP),e(rP,dto),e(ts,cto),e(ts,tP),e(tP,fto),e(ts,mto),e(k,gto),e(k,as),e(as,Zte),e(Zte,hto),e(as,pto),e(as,aP),e(aP,uto),e(as,_to),e(as,nP),e(nP,bto),e(as,vto),e(k,Fto),e(k,ns),e(ns,eae),e(eae,Tto),e(ns,Mto),e(ns,sP),e(sP,Eto),e(ns,Cto),e(ns,lP),e(lP,wto),e(ns,Ato),e(k,yto),e(k,ss),e(ss,oae),e(oae,Lto),e(ss,xto),e(ss,iP),e(iP,$to),e(ss,kto),e(ss,dP),e(dP,Sto),e(ss,Rto),e(k,Pto),e(k,ls),e(ls,rae),e(rae,Bto),e(ls,Ito),e(ls,cP),e(cP,qto),e(ls,Nto),e(ls,fP),e(fP,jto),e(ls,Dto),e(k,Gto),e(k,Ig),e(Ig,tae),e(tae,Oto),e(Ig,Vto),e(Ig,mP),e(mP,Xto),e(Ig,zto),e(k,Wto),e(k,is),e(is,aae),e(aae,Qto),e(is,Hto),e(is,gP),e(gP,Uto),e(is,Jto),e(is,hP),e(hP,Yto),e(is,Kto),e(k,Zto),e(k,qg),e(qg,nae),e(nae,eao),e(qg,oao),e(qg,pP),e(pP,rao),e(qg,tao),e(k,aao),e(k,Ng),e(Ng,sae),e(sae,nao),e(Ng,sao),e(Ng,uP),e(uP,lao),e(Ng,iao),e(k,dao),e(k,ds),e(ds,lae),e(lae,cao),e(ds,fao),e(ds,_P),e(_P,mao),e(ds,gao),e(ds,bP),e(bP,hao),e(ds,pao),e(k,uao),e(k,cs),e(cs,iae),e(iae,_ao),e(cs,bao),e(cs,vP),e(vP,vao),e(cs,Fao),e(cs,FP),e(FP,Tao),e(cs,Mao),e(k,Eao),e(k,fs),e(fs,dae),e(dae,Cao),e(fs,wao),e(fs,TP),e(TP,Aao),e(fs,yao),e(fs,MP),e(MP,Lao),e(fs,xao),e(k,$ao),e(k,jg),e(jg,cae),e(cae,kao),e(jg,Sao),e(jg,EP),e(EP,Rao),e(jg,Pao),e(k,Bao),e(k,ms),e(ms,fae),e(fae,Iao),e(ms,qao),e(ms,CP),e(CP,Nao),e(ms,jao),e(ms,wP),e(wP,Dao),e(ms,Gao),e(k,Oao),e(k,gs),e(gs,mae),e(mae,Vao),e(gs,Xao),e(gs,AP),e(AP,zao),e(gs,Wao),e(gs,yP),e(yP,Qao),e(gs,Hao),e(k,Uao),e(k,hs),e(hs,gae),e(gae,Jao),e(hs,Yao),e(hs,LP),e(LP,Kao),e(hs,Zao),e(hs,xP),e(xP,eno),e(hs,ono),e(k,rno),e(k,ps),e(ps,hae),e(hae,tno),e(ps,ano),e(ps,$P),e($P,nno),e(ps,sno),e(ps,kP),e(kP,lno),e(ps,ino),e(k,dno),e(k,us),e(us,pae),e(pae,cno),e(us,fno),e(us,SP),e(SP,mno),e(us,gno),e(us,RP),e(RP,hno),e(us,pno),e(k,uno),e(k,Dg),e(Dg,uae),e(uae,_no),e(Dg,bno),e(Dg,PP),e(PP,vno),e(Dg,Fno),e(k,Tno),e(k,_s),e(_s,_ae),e(_ae,Mno),e(_s,Eno),e(_s,BP),e(BP,Cno),e(_s,wno),e(_s,IP),e(IP,Ano),e(_s,yno),e(k,Lno),e(k,Gg),e(Gg,bae),e(bae,xno),e(Gg,$no),e(Gg,qP),e(qP,kno),e(Gg,Sno),e(k,Rno),e(k,Og),e(Og,vae),e(vae,Pno),e(Og,Bno),e(Og,NP),e(NP,Ino),e(Og,qno),e(k,Nno),e(k,Vg),e(Vg,Fae),e(Fae,jno),e(Vg,Dno),e(Vg,jP),e(jP,Gno),e(Vg,Ono),e(k,Vno),e(k,Xg),e(Xg,Tae),e(Tae,Xno),e(Xg,zno),e(Xg,DP),e(DP,Wno),e(Xg,Qno),e(k,Hno),e(k,bs),e(bs,Mae),e(Mae,Uno),e(bs,Jno),e(bs,GP),e(GP,Yno),e(bs,Kno),e(bs,OP),e(OP,Zno),e(bs,eso),e(k,oso),e(k,zg),e(zg,Eae),e(Eae,rso),e(zg,tso),e(zg,VP),e(VP,aso),e(zg,nso),e(k,sso),e(k,vs),e(vs,Cae),e(Cae,lso),e(vs,iso),e(vs,XP),e(XP,dso),e(vs,cso),e(vs,zP),e(zP,fso),e(vs,mso),e(k,gso),e(k,Fs),e(Fs,wae),e(wae,hso),e(Fs,pso),e(Fs,WP),e(WP,uso),e(Fs,_so),e(Fs,QP),e(QP,bso),e(Fs,vso),e(k,Fso),e(k,Ts),e(Ts,Aae),e(Aae,Tso),e(Ts,Mso),e(Ts,HP),e(HP,Eso),e(Ts,Cso),e(Ts,UP),e(UP,wso),e(Ts,Aso),e(k,yso),e(k,Ms),e(Ms,yae),e(yae,Lso),e(Ms,xso),e(Ms,JP),e(JP,$so),e(Ms,kso),e(Ms,YP),e(YP,Sso),e(Ms,Rso),e(k,Pso),e(k,Es),e(Es,Lae),e(Lae,Bso),e(Es,Iso),e(Es,KP),e(KP,qso),e(Es,Nso),e(Es,ZP),e(ZP,jso),e(Es,Dso),e(k,Gso),e(k,Cs),e(Cs,xae),e(xae,Oso),e(Cs,Vso),e(Cs,eB),e(eB,Xso),e(Cs,zso),e(Cs,oB),e(oB,Wso),e(Cs,Qso),e(k,Hso),e(k,Wg),e(Wg,$ae),e($ae,Uso),e(Wg,Jso),e(Wg,rB),e(rB,Yso),e(Wg,Kso),e(k,Zso),e(k,Qg),e(Qg,kae),e(kae,elo),e(Qg,olo),e(Qg,tB),e(tB,rlo),e(Qg,tlo),e(k,alo),e(k,ws),e(ws,Sae),e(Sae,nlo),e(ws,slo),e(ws,aB),e(aB,llo),e(ws,ilo),e(ws,nB),e(nB,dlo),e(ws,clo),e(k,flo),e(k,As),e(As,Rae),e(Rae,mlo),e(As,glo),e(As,sB),e(sB,hlo),e(As,plo),e(As,lB),e(lB,ulo),e(As,_lo),e(k,blo),e(k,ys),e(ys,Pae),e(Pae,vlo),e(ys,Flo),e(ys,iB),e(iB,Tlo),e(ys,Mlo),e(ys,dB),e(dB,Elo),e(ys,Clo),e(k,wlo),e(k,Hg),e(Hg,Bae),e(Bae,Alo),e(Hg,ylo),e(Hg,cB),e(cB,Llo),e(Hg,xlo),e(k,$lo),e(k,Ug),e(Ug,Iae),e(Iae,klo),e(Ug,Slo),e(Ug,fB),e(fB,Rlo),e(Ug,Plo),e(k,Blo),e(k,Jg),e(Jg,qae),e(qae,Ilo),e(Jg,qlo),e(Jg,mB),e(mB,Nlo),e(Jg,jlo),e(k,Dlo),e(k,Ls),e(Ls,Nae),e(Nae,Glo),e(Ls,Olo),e(Ls,gB),e(gB,Vlo),e(Ls,Xlo),e(Ls,hB),e(hB,zlo),e(Ls,Wlo),e(k,Qlo),e(k,Yg),e(Yg,jae),e(jae,Hlo),e(Yg,Ulo),e(Yg,pB),e(pB,Jlo),e(Yg,Ylo),e(k,Klo),e(k,Kg),e(Kg,Dae),e(Dae,Zlo),e(Kg,eio),e(Kg,uB),e(uB,oio),e(Kg,rio),e(k,tio),e(k,Zg),e(Zg,Gae),e(Gae,aio),e(Zg,nio),e(Zg,_B),e(_B,sio),e(Zg,lio),e(k,iio),e(k,xs),e(xs,Oae),e(Oae,dio),e(xs,cio),e(xs,bB),e(bB,fio),e(xs,mio),e(xs,vB),e(vB,gio),e(xs,hio),e(k,pio),e(k,eh),e(eh,Vae),e(Vae,uio),e(eh,_io),e(eh,FB),e(FB,bio),e(eh,vio),e(k,Fio),e(k,oh),e(oh,Xae),e(Xae,Tio),e(oh,Mio),e(oh,TB),e(TB,Eio),e(oh,Cio),e(k,wio),e(k,$s),e($s,zae),e(zae,Aio),e($s,yio),e($s,MB),e(MB,Lio),e($s,xio),e($s,EB),e(EB,$io),e($s,kio),e(k,Sio),e(k,ks),e(ks,Wae),e(Wae,Rio),e(ks,Pio),e(ks,CB),e(CB,Bio),e(ks,Iio),e(ks,wB),e(wB,qio),e(ks,Nio),e(k,jio),e(k,Ss),e(Ss,Qae),e(Qae,Dio),e(Ss,Gio),e(Ss,AB),e(AB,Oio),e(Ss,Vio),e(Ss,yB),e(yB,Xio),e(Ss,zio),e(k,Wio),e(k,Rs),e(Rs,Hae),e(Hae,Qio),e(Rs,Hio),e(Rs,LB),e(LB,Uio),e(Rs,Jio),e(Rs,xB),e(xB,Yio),e(Rs,Kio),e(Cr,Zio),M(rh,Cr,null),e(wo,edo),e(wo,th),M(IA,th,null),e(th,odo),e(th,Uae),e(Uae,rdo),b(f,zqe,_),b(f,Mi,_),e(Mi,ah),e(ah,Jae),M(qA,Jae,null),e(Mi,tdo),e(Mi,Yae),e(Yae,ado),b(f,Wqe,_),b(f,Ao,_),M(NA,Ao,null),e(Ao,ndo),e(Ao,jA),e(jA,sdo),e(jA,$B),e($B,ldo),e(jA,ido),e(Ao,ddo),e(Ao,DA),e(DA,cdo),e(DA,Kae),e(Kae,fdo),e(DA,mdo),e(Ao,gdo),e(Ao,He),M(GA,He,null),e(He,hdo),e(He,Zae),e(Zae,pdo),e(He,udo),e(He,ya),e(ya,_do),e(ya,ene),e(ene,bdo),e(ya,vdo),e(ya,one),e(one,Fdo),e(ya,Tdo),e(ya,rne),e(rne,Mdo),e(ya,Edo),e(He,Cdo),e(He,Y),e(Y,nh),e(nh,tne),e(tne,wdo),e(nh,Ado),e(nh,kB),e(kB,ydo),e(nh,Ldo),e(Y,xdo),e(Y,sh),e(sh,ane),e(ane,$do),e(sh,kdo),e(sh,SB),e(SB,Sdo),e(sh,Rdo),e(Y,Pdo),e(Y,lh),e(lh,nne),e(nne,Bdo),e(lh,Ido),e(lh,RB),e(RB,qdo),e(lh,Ndo),e(Y,jdo),e(Y,ih),e(ih,sne),e(sne,Ddo),e(ih,Gdo),e(ih,PB),e(PB,Odo),e(ih,Vdo),e(Y,Xdo),e(Y,dh),e(dh,lne),e(lne,zdo),e(dh,Wdo),e(dh,BB),e(BB,Qdo),e(dh,Hdo),e(Y,Udo),e(Y,ch),e(ch,ine),e(ine,Jdo),e(ch,Ydo),e(ch,IB),e(IB,Kdo),e(ch,Zdo),e(Y,eco),e(Y,fh),e(fh,dne),e(dne,oco),e(fh,rco),e(fh,qB),e(qB,tco),e(fh,aco),e(Y,nco),e(Y,mh),e(mh,cne),e(cne,sco),e(mh,lco),e(mh,NB),e(NB,ico),e(mh,dco),e(Y,cco),e(Y,gh),e(gh,fne),e(fne,fco),e(gh,mco),e(gh,jB),e(jB,gco),e(gh,hco),e(Y,pco),e(Y,hh),e(hh,mne),e(mne,uco),e(hh,_co),e(hh,DB),e(DB,bco),e(hh,vco),e(Y,Fco),e(Y,ph),e(ph,gne),e(gne,Tco),e(ph,Mco),e(ph,GB),e(GB,Eco),e(ph,Cco),e(Y,wco),e(Y,uh),e(uh,hne),e(hne,Aco),e(uh,yco),e(uh,OB),e(OB,Lco),e(uh,xco),e(Y,$co),e(Y,_h),e(_h,pne),e(pne,kco),e(_h,Sco),e(_h,VB),e(VB,Rco),e(_h,Pco),e(Y,Bco),e(Y,bh),e(bh,une),e(une,Ico),e(bh,qco),e(bh,XB),e(XB,Nco),e(bh,jco),e(Y,Dco),e(Y,vh),e(vh,_ne),e(_ne,Gco),e(vh,Oco),e(vh,zB),e(zB,Vco),e(vh,Xco),e(Y,zco),e(Y,Fh),e(Fh,bne),e(bne,Wco),e(Fh,Qco),e(Fh,WB),e(WB,Hco),e(Fh,Uco),e(Y,Jco),e(Y,Th),e(Th,vne),e(vne,Yco),e(Th,Kco),e(Th,QB),e(QB,Zco),e(Th,efo),e(Y,ofo),e(Y,Mh),e(Mh,Fne),e(Fne,rfo),e(Mh,tfo),e(Mh,HB),e(HB,afo),e(Mh,nfo),e(Y,sfo),e(Y,Eh),e(Eh,Tne),e(Tne,lfo),e(Eh,ifo),e(Eh,UB),e(UB,dfo),e(Eh,cfo),e(Y,ffo),e(Y,Ch),e(Ch,Mne),e(Mne,mfo),e(Ch,gfo),e(Ch,JB),e(JB,hfo),e(Ch,pfo),e(Y,ufo),e(Y,wh),e(wh,Ene),e(Ene,_fo),e(wh,bfo),e(wh,YB),e(YB,vfo),e(wh,Ffo),e(Y,Tfo),e(Y,Ah),e(Ah,Cne),e(Cne,Mfo),e(Ah,Efo),e(Ah,KB),e(KB,Cfo),e(Ah,wfo),e(Y,Afo),e(Y,yh),e(yh,wne),e(wne,yfo),e(yh,Lfo),e(yh,ZB),e(ZB,xfo),e(yh,$fo),e(Y,kfo),e(Y,Lh),e(Lh,Ane),e(Ane,Sfo),e(Lh,Rfo),e(Lh,eI),e(eI,Pfo),e(Lh,Bfo),e(Y,Ifo),e(Y,xh),e(xh,yne),e(yne,qfo),e(xh,Nfo),e(xh,oI),e(oI,jfo),e(xh,Dfo),e(Y,Gfo),e(Y,$h),e($h,Lne),e(Lne,Ofo),e($h,Vfo),e($h,rI),e(rI,Xfo),e($h,zfo),e(Y,Wfo),e(Y,kh),e(kh,xne),e(xne,Qfo),e(kh,Hfo),e(kh,tI),e(tI,Ufo),e(kh,Jfo),e(Y,Yfo),e(Y,Sh),e(Sh,$ne),e($ne,Kfo),e(Sh,Zfo),e(Sh,aI),e(aI,emo),e(Sh,omo),e(Y,rmo),e(Y,Rh),e(Rh,kne),e(kne,tmo),e(Rh,amo),e(Rh,nI),e(nI,nmo),e(Rh,smo),e(He,lmo),M(Ph,He,null),e(He,imo),M(Bh,He,null),e(Ao,dmo),e(Ao,Ih),M(OA,Ih,null),e(Ih,cmo),e(Ih,Sne),e(Sne,fmo),b(f,Qqe,_),b(f,Ei,_),e(Ei,qh),e(qh,Rne),M(VA,Rne,null),e(Ei,mmo),e(Ei,Pne),e(Pne,gmo),b(f,Hqe,_),b(f,yo,_),M(XA,yo,null),e(yo,hmo),e(yo,zA),e(zA,pmo),e(zA,sI),e(sI,umo),e(zA,_mo),e(yo,bmo),e(yo,WA),e(WA,vmo),e(WA,Bne),e(Bne,Fmo),e(WA,Tmo),e(yo,Mmo),e(yo,Ue),M(QA,Ue,null),e(Ue,Emo),e(Ue,Ine),e(Ine,Cmo),e(Ue,wmo),e(Ue,Ci),e(Ci,Amo),e(Ci,qne),e(qne,ymo),e(Ci,Lmo),e(Ci,Nne),e(Nne,xmo),e(Ci,$mo),e(Ue,kmo),e(Ue,he),e(he,Nh),e(Nh,jne),e(jne,Smo),e(Nh,Rmo),e(Nh,lI),e(lI,Pmo),e(Nh,Bmo),e(he,Imo),e(he,jh),e(jh,Dne),e(Dne,qmo),e(jh,Nmo),e(jh,Gne),e(Gne,jmo),e(jh,Dmo),e(he,Gmo),e(he,Dh),e(Dh,One),e(One,Omo),e(Dh,Vmo),e(Dh,iI),e(iI,Xmo),e(Dh,zmo),e(he,Wmo),e(he,Gh),e(Gh,Vne),e(Vne,Qmo),e(Gh,Hmo),e(Gh,dI),e(dI,Umo),e(Gh,Jmo),e(he,Ymo),e(he,Oh),e(Oh,Xne),e(Xne,Kmo),e(Oh,Zmo),e(Oh,cI),e(cI,ego),e(Oh,ogo),e(he,rgo),e(he,Vh),e(Vh,zne),e(zne,tgo),e(Vh,ago),e(Vh,fI),e(fI,ngo),e(Vh,sgo),e(he,lgo),e(he,Xh),e(Xh,Wne),e(Wne,igo),e(Xh,dgo),e(Xh,mI),e(mI,cgo),e(Xh,fgo),e(he,mgo),e(he,zh),e(zh,Qne),e(Qne,ggo),e(zh,hgo),e(zh,gI),e(gI,pgo),e(zh,ugo),e(he,_go),e(he,Wh),e(Wh,Hne),e(Hne,bgo),e(Wh,vgo),e(Wh,hI),e(hI,Fgo),e(Wh,Tgo),e(he,Mgo),e(he,Qh),e(Qh,Une),e(Une,Ego),e(Qh,Cgo),e(Qh,pI),e(pI,wgo),e(Qh,Ago),e(he,ygo),e(he,Hh),e(Hh,Jne),e(Jne,Lgo),e(Hh,xgo),e(Hh,uI),e(uI,$go),e(Hh,kgo),e(he,Sgo),e(he,Uh),e(Uh,Yne),e(Yne,Rgo),e(Uh,Pgo),e(Uh,_I),e(_I,Bgo),e(Uh,Igo),e(he,qgo),e(he,Jh),e(Jh,Kne),e(Kne,Ngo),e(Jh,jgo),e(Jh,bI),e(bI,Dgo),e(Jh,Ggo),e(he,Ogo),e(he,Yh),e(Yh,Zne),e(Zne,Vgo),e(Yh,Xgo),e(Yh,vI),e(vI,zgo),e(Yh,Wgo),e(he,Qgo),e(he,Kh),e(Kh,ese),e(ese,Hgo),e(Kh,Ugo),e(Kh,FI),e(FI,Jgo),e(Kh,Ygo),e(he,Kgo),e(he,Zh),e(Zh,ose),e(ose,Zgo),e(Zh,eho),e(Zh,TI),e(TI,oho),e(Zh,rho),e(he,tho),e(he,ep),e(ep,rse),e(rse,aho),e(ep,nho),e(ep,MI),e(MI,sho),e(ep,lho),e(Ue,iho),M(op,Ue,null),e(Ue,dho),M(rp,Ue,null),e(yo,cho),e(yo,tp),M(HA,tp,null),e(tp,fho),e(tp,tse),e(tse,mho),b(f,Uqe,_),b(f,wi,_),e(wi,ap),e(ap,ase),M(UA,ase,null),e(wi,gho),e(wi,nse),e(nse,hho),b(f,Jqe,_),b(f,Lo,_),M(JA,Lo,null),e(Lo,pho),e(Lo,Ai),e(Ai,uho),e(Ai,EI),e(EI,_ho),e(Ai,bho),e(Ai,CI),e(CI,vho),e(Ai,Fho),e(Lo,Tho),e(Lo,YA),e(YA,Mho),e(YA,sse),e(sse,Eho),e(YA,Cho),e(Lo,who),e(Lo,tt),M(KA,tt,null),e(tt,Aho),e(tt,lse),e(lse,yho),e(tt,Lho),e(tt,yi),e(yi,xho),e(yi,ise),e(ise,$ho),e(yi,kho),e(yi,wI),e(wI,Sho),e(yi,Rho),e(tt,Pho),M(np,tt,null),e(Lo,Bho),e(Lo,Je),M(ZA,Je,null),e(Je,Iho),e(Je,dse),e(dse,qho),e(Je,Nho),e(Je,La),e(La,jho),e(La,cse),e(cse,Dho),e(La,Gho),e(La,fse),e(fse,Oho),e(La,Vho),e(La,mse),e(mse,Xho),e(La,zho),e(Je,Who),e(Je,x),e(x,sp),e(sp,gse),e(gse,Qho),e(sp,Hho),e(sp,AI),e(AI,Uho),e(sp,Jho),e(x,Yho),e(x,lp),e(lp,hse),e(hse,Kho),e(lp,Zho),e(lp,yI),e(yI,epo),e(lp,opo),e(x,rpo),e(x,ip),e(ip,pse),e(pse,tpo),e(ip,apo),e(ip,LI),e(LI,npo),e(ip,spo),e(x,lpo),e(x,dp),e(dp,use),e(use,ipo),e(dp,dpo),e(dp,xI),e(xI,cpo),e(dp,fpo),e(x,mpo),e(x,cp),e(cp,_se),e(_se,gpo),e(cp,hpo),e(cp,$I),e($I,ppo),e(cp,upo),e(x,_po),e(x,fp),e(fp,bse),e(bse,bpo),e(fp,vpo),e(fp,kI),e(kI,Fpo),e(fp,Tpo),e(x,Mpo),e(x,mp),e(mp,vse),e(vse,Epo),e(mp,Cpo),e(mp,SI),e(SI,wpo),e(mp,Apo),e(x,ypo),e(x,gp),e(gp,Fse),e(Fse,Lpo),e(gp,xpo),e(gp,RI),e(RI,$po),e(gp,kpo),e(x,Spo),e(x,hp),e(hp,Tse),e(Tse,Rpo),e(hp,Ppo),e(hp,PI),e(PI,Bpo),e(hp,Ipo),e(x,qpo),e(x,pp),e(pp,Mse),e(Mse,Npo),e(pp,jpo),e(pp,BI),e(BI,Dpo),e(pp,Gpo),e(x,Opo),e(x,up),e(up,Ese),e(Ese,Vpo),e(up,Xpo),e(up,II),e(II,zpo),e(up,Wpo),e(x,Qpo),e(x,_p),e(_p,Cse),e(Cse,Hpo),e(_p,Upo),e(_p,qI),e(qI,Jpo),e(_p,Ypo),e(x,Kpo),e(x,bp),e(bp,wse),e(wse,Zpo),e(bp,euo),e(bp,NI),e(NI,ouo),e(bp,ruo),e(x,tuo),e(x,vp),e(vp,Ase),e(Ase,auo),e(vp,nuo),e(vp,jI),e(jI,suo),e(vp,luo),e(x,iuo),e(x,Fp),e(Fp,yse),e(yse,duo),e(Fp,cuo),e(Fp,DI),e(DI,fuo),e(Fp,muo),e(x,guo),e(x,Tp),e(Tp,Lse),e(Lse,huo),e(Tp,puo),e(Tp,GI),e(GI,uuo),e(Tp,_uo),e(x,buo),e(x,Mp),e(Mp,xse),e(xse,vuo),e(Mp,Fuo),e(Mp,OI),e(OI,Tuo),e(Mp,Muo),e(x,Euo),e(x,Ep),e(Ep,$se),e($se,Cuo),e(Ep,wuo),e(Ep,VI),e(VI,Auo),e(Ep,yuo),e(x,Luo),e(x,Cp),e(Cp,kse),e(kse,xuo),e(Cp,$uo),e(Cp,XI),e(XI,kuo),e(Cp,Suo),e(x,Ruo),e(x,wp),e(wp,Sse),e(Sse,Puo),e(wp,Buo),e(wp,zI),e(zI,Iuo),e(wp,quo),e(x,Nuo),e(x,Ap),e(Ap,Rse),e(Rse,juo),e(Ap,Duo),e(Ap,WI),e(WI,Guo),e(Ap,Ouo),e(x,Vuo),e(x,yp),e(yp,Pse),e(Pse,Xuo),e(yp,zuo),e(yp,QI),e(QI,Wuo),e(yp,Quo),e(x,Huo),e(x,Lp),e(Lp,Bse),e(Bse,Uuo),e(Lp,Juo),e(Lp,HI),e(HI,Yuo),e(Lp,Kuo),e(x,Zuo),e(x,xp),e(xp,Ise),e(Ise,e_o),e(xp,o_o),e(xp,UI),e(UI,r_o),e(xp,t_o),e(x,a_o),e(x,$p),e($p,qse),e(qse,n_o),e($p,s_o),e($p,JI),e(JI,l_o),e($p,i_o),e(x,d_o),e(x,kp),e(kp,Nse),e(Nse,c_o),e(kp,f_o),e(kp,YI),e(YI,m_o),e(kp,g_o),e(x,h_o),e(x,Sp),e(Sp,jse),e(jse,p_o),e(Sp,u_o),e(Sp,KI),e(KI,__o),e(Sp,b_o),e(x,v_o),e(x,Rp),e(Rp,Dse),e(Dse,F_o),e(Rp,T_o),e(Rp,ZI),e(ZI,M_o),e(Rp,E_o),e(x,C_o),e(x,Pp),e(Pp,Gse),e(Gse,w_o),e(Pp,A_o),e(Pp,eq),e(eq,y_o),e(Pp,L_o),e(x,x_o),e(x,Bp),e(Bp,Ose),e(Ose,$_o),e(Bp,k_o),e(Bp,oq),e(oq,S_o),e(Bp,R_o),e(x,P_o),e(x,Ip),e(Ip,Vse),e(Vse,B_o),e(Ip,I_o),e(Ip,rq),e(rq,q_o),e(Ip,N_o),e(x,j_o),e(x,qp),e(qp,Xse),e(Xse,D_o),e(qp,G_o),e(qp,tq),e(tq,O_o),e(qp,V_o),e(x,X_o),e(x,Ps),e(Ps,zse),e(zse,z_o),e(Ps,W_o),e(Ps,aq),e(aq,Q_o),e(Ps,H_o),e(Ps,nq),e(nq,U_o),e(Ps,J_o),e(x,Y_o),e(x,Np),e(Np,Wse),e(Wse,K_o),e(Np,Z_o),e(Np,sq),e(sq,e3o),e(Np,o3o),e(x,r3o),e(x,jp),e(jp,Qse),e(Qse,t3o),e(jp,a3o),e(jp,lq),e(lq,n3o),e(jp,s3o),e(x,l3o),e(x,Dp),e(Dp,Hse),e(Hse,i3o),e(Dp,d3o),e(Dp,iq),e(iq,c3o),e(Dp,f3o),e(x,m3o),e(x,Gp),e(Gp,Use),e(Use,g3o),e(Gp,h3o),e(Gp,dq),e(dq,p3o),e(Gp,u3o),e(x,_3o),e(x,Op),e(Op,Jse),e(Jse,b3o),e(Op,v3o),e(Op,cq),e(cq,F3o),e(Op,T3o),e(x,M3o),e(x,Vp),e(Vp,Yse),e(Yse,E3o),e(Vp,C3o),e(Vp,fq),e(fq,w3o),e(Vp,A3o),e(x,y3o),e(x,Xp),e(Xp,Kse),e(Kse,L3o),e(Xp,x3o),e(Xp,mq),e(mq,$3o),e(Xp,k3o),e(x,S3o),e(x,zp),e(zp,Zse),e(Zse,R3o),e(zp,P3o),e(zp,gq),e(gq,B3o),e(zp,I3o),e(x,q3o),e(x,Wp),e(Wp,ele),e(ele,N3o),e(Wp,j3o),e(Wp,hq),e(hq,D3o),e(Wp,G3o),e(x,O3o),e(x,Qp),e(Qp,ole),e(ole,V3o),e(Qp,X3o),e(Qp,pq),e(pq,z3o),e(Qp,W3o),e(x,Q3o),e(x,Hp),e(Hp,rle),e(rle,H3o),e(Hp,U3o),e(Hp,uq),e(uq,J3o),e(Hp,Y3o),e(x,K3o),e(x,Up),e(Up,tle),e(tle,Z3o),e(Up,e1o),e(Up,_q),e(_q,o1o),e(Up,r1o),e(x,t1o),e(x,Jp),e(Jp,ale),e(ale,a1o),e(Jp,n1o),e(Jp,bq),e(bq,s1o),e(Jp,l1o),e(x,i1o),e(x,Yp),e(Yp,nle),e(nle,d1o),e(Yp,c1o),e(Yp,vq),e(vq,f1o),e(Yp,m1o),e(x,g1o),e(x,Kp),e(Kp,sle),e(sle,h1o),e(Kp,p1o),e(Kp,Fq),e(Fq,u1o),e(Kp,_1o),e(x,b1o),e(x,Zp),e(Zp,lle),e(lle,v1o),e(Zp,F1o),e(Zp,Tq),e(Tq,T1o),e(Zp,M1o),e(x,E1o),e(x,eu),e(eu,ile),e(ile,C1o),e(eu,w1o),e(eu,Mq),e(Mq,A1o),e(eu,y1o),e(x,L1o),e(x,ou),e(ou,dle),e(dle,x1o),e(ou,$1o),e(ou,Eq),e(Eq,k1o),e(ou,S1o),e(x,R1o),e(x,ru),e(ru,cle),e(cle,P1o),e(ru,B1o),e(ru,Cq),e(Cq,I1o),e(ru,q1o),e(x,N1o),e(x,tu),e(tu,fle),e(fle,j1o),e(tu,D1o),e(tu,wq),e(wq,G1o),e(tu,O1o),e(x,V1o),e(x,au),e(au,mle),e(mle,X1o),e(au,z1o),e(au,Aq),e(Aq,W1o),e(au,Q1o),e(x,H1o),e(x,nu),e(nu,gle),e(gle,U1o),e(nu,J1o),e(nu,yq),e(yq,Y1o),e(nu,K1o),e(x,Z1o),e(x,su),e(su,hle),e(hle,ebo),e(su,obo),e(su,Lq),e(Lq,rbo),e(su,tbo),e(x,abo),e(x,lu),e(lu,ple),e(ple,nbo),e(lu,sbo),e(lu,xq),e(xq,lbo),e(lu,ibo),e(x,dbo),e(x,iu),e(iu,ule),e(ule,cbo),e(iu,fbo),e(iu,$q),e($q,mbo),e(iu,gbo),e(x,hbo),e(x,du),e(du,_le),e(_le,pbo),e(du,ubo),e(du,kq),e(kq,_bo),e(du,bbo),e(x,vbo),e(x,cu),e(cu,ble),e(ble,Fbo),e(cu,Tbo),e(cu,Sq),e(Sq,Mbo),e(cu,Ebo),e(x,Cbo),e(x,fu),e(fu,vle),e(vle,wbo),e(fu,Abo),e(fu,Rq),e(Rq,ybo),e(fu,Lbo),e(x,xbo),e(x,mu),e(mu,Fle),e(Fle,$bo),e(mu,kbo),e(mu,Pq),e(Pq,Sbo),e(mu,Rbo),e(x,Pbo),e(x,gu),e(gu,Tle),e(Tle,Bbo),e(gu,Ibo),e(gu,Bq),e(Bq,qbo),e(gu,Nbo),e(x,jbo),e(x,hu),e(hu,Mle),e(Mle,Dbo),e(hu,Gbo),e(hu,Iq),e(Iq,Obo),e(hu,Vbo),e(x,Xbo),e(x,pu),e(pu,Ele),e(Ele,zbo),e(pu,Wbo),e(pu,qq),e(qq,Qbo),e(pu,Hbo),e(x,Ubo),e(x,uu),e(uu,Cle),e(Cle,Jbo),e(uu,Ybo),e(uu,Nq),e(Nq,Kbo),e(uu,Zbo),e(x,e2o),e(x,_u),e(_u,wle),e(wle,o2o),e(_u,r2o),e(_u,jq),e(jq,t2o),e(_u,a2o),e(x,n2o),e(x,bu),e(bu,Ale),e(Ale,s2o),e(bu,l2o),e(bu,Dq),e(Dq,i2o),e(bu,d2o),e(x,c2o),e(x,vu),e(vu,yle),e(yle,f2o),e(vu,m2o),e(vu,Gq),e(Gq,g2o),e(vu,h2o),e(x,p2o),e(x,Fu),e(Fu,Lle),e(Lle,u2o),e(Fu,_2o),e(Fu,Oq),e(Oq,b2o),e(Fu,v2o),e(x,F2o),e(x,Tu),e(Tu,xle),e(xle,T2o),e(Tu,M2o),e(Tu,Vq),e(Vq,E2o),e(Tu,C2o),e(x,w2o),e(x,Mu),e(Mu,$le),e($le,A2o),e(Mu,y2o),e(Mu,Xq),e(Xq,L2o),e(Mu,x2o),e(x,$2o),e(x,Eu),e(Eu,kle),e(kle,k2o),e(Eu,S2o),e(Eu,zq),e(zq,R2o),e(Eu,P2o),e(x,B2o),e(x,Cu),e(Cu,Sle),e(Sle,I2o),e(Cu,q2o),e(Cu,Wq),e(Wq,N2o),e(Cu,j2o),e(x,D2o),e(x,wu),e(wu,Rle),e(Rle,G2o),e(wu,O2o),e(wu,Qq),e(Qq,V2o),e(wu,X2o),e(x,z2o),e(x,Au),e(Au,Ple),e(Ple,W2o),e(Au,Q2o),e(Au,Hq),e(Hq,H2o),e(Au,U2o),e(x,J2o),e(x,yu),e(yu,Ble),e(Ble,Y2o),e(yu,K2o),e(yu,Uq),e(Uq,Z2o),e(yu,evo),e(x,ovo),e(x,Lu),e(Lu,Ile),e(Ile,rvo),e(Lu,tvo),e(Lu,Jq),e(Jq,avo),e(Lu,nvo),e(x,svo),e(x,xu),e(xu,qle),e(qle,lvo),e(xu,ivo),e(xu,Yq),e(Yq,dvo),e(xu,cvo),e(x,fvo),e(x,$u),e($u,Nle),e(Nle,mvo),e($u,gvo),e($u,Kq),e(Kq,hvo),e($u,pvo),e(x,uvo),e(x,ku),e(ku,jle),e(jle,_vo),e(ku,bvo),e(ku,Zq),e(Zq,vvo),e(ku,Fvo),e(x,Tvo),e(x,Su),e(Su,Dle),e(Dle,Mvo),e(Su,Evo),e(Su,eN),e(eN,Cvo),e(Su,wvo),e(x,Avo),e(x,Ru),e(Ru,Gle),e(Gle,yvo),e(Ru,Lvo),e(Ru,oN),e(oN,xvo),e(Ru,$vo),e(x,kvo),e(x,Pu),e(Pu,Ole),e(Ole,Svo),e(Pu,Rvo),e(Pu,rN),e(rN,Pvo),e(Pu,Bvo),e(x,Ivo),e(x,Bu),e(Bu,Vle),e(Vle,qvo),e(Bu,Nvo),e(Bu,tN),e(tN,jvo),e(Bu,Dvo),e(x,Gvo),e(x,Iu),e(Iu,Xle),e(Xle,Ovo),e(Iu,Vvo),e(Iu,aN),e(aN,Xvo),e(Iu,zvo),e(x,Wvo),e(x,qu),e(qu,zle),e(zle,Qvo),e(qu,Hvo),e(qu,nN),e(nN,Uvo),e(qu,Jvo),e(x,Yvo),e(x,Nu),e(Nu,Wle),e(Wle,Kvo),e(Nu,Zvo),e(Nu,sN),e(sN,eFo),e(Nu,oFo),e(x,rFo),e(x,ju),e(ju,Qle),e(Qle,tFo),e(ju,aFo),e(ju,lN),e(lN,nFo),e(ju,sFo),e(x,lFo),e(x,Du),e(Du,Hle),e(Hle,iFo),e(Du,dFo),e(Du,iN),e(iN,cFo),e(Du,fFo),e(x,mFo),e(x,Gu),e(Gu,Ule),e(Ule,gFo),e(Gu,hFo),e(Gu,dN),e(dN,pFo),e(Gu,uFo),e(x,_Fo),e(x,Ou),e(Ou,Jle),e(Jle,bFo),e(Ou,vFo),e(Ou,cN),e(cN,FFo),e(Ou,TFo),e(x,MFo),e(x,Vu),e(Vu,Yle),e(Yle,EFo),e(Vu,CFo),e(Vu,fN),e(fN,wFo),e(Vu,AFo),e(x,yFo),e(x,Xu),e(Xu,Kle),e(Kle,LFo),e(Xu,xFo),e(Xu,mN),e(mN,$Fo),e(Xu,kFo),e(x,SFo),e(x,zu),e(zu,Zle),e(Zle,RFo),e(zu,PFo),e(zu,gN),e(gN,BFo),e(zu,IFo),e(x,qFo),e(x,Wu),e(Wu,eie),e(eie,NFo),e(Wu,jFo),e(Wu,hN),e(hN,DFo),e(Wu,GFo),e(x,OFo),e(x,Qu),e(Qu,oie),e(oie,VFo),e(Qu,XFo),e(Qu,pN),e(pN,zFo),e(Qu,WFo),e(x,QFo),e(x,Hu),e(Hu,rie),e(rie,HFo),e(Hu,UFo),e(Hu,uN),e(uN,JFo),e(Hu,YFo),e(x,KFo),e(x,Uu),e(Uu,tie),e(tie,ZFo),e(Uu,eTo),e(Uu,_N),e(_N,oTo),e(Uu,rTo),e(x,tTo),e(x,Ju),e(Ju,aie),e(aie,aTo),e(Ju,nTo),e(Ju,bN),e(bN,sTo),e(Ju,lTo),e(x,iTo),e(x,Yu),e(Yu,nie),e(nie,dTo),e(Yu,cTo),e(Yu,vN),e(vN,fTo),e(Yu,mTo),e(Je,gTo),e(Je,Ku),e(Ku,hTo),e(Ku,sie),e(sie,pTo),e(Ku,uTo),e(Ku,lie),e(lie,_To),e(Je,bTo),M(Zu,Je,null),b(f,Yqe,_),b(f,Li,_),e(Li,e_),e(e_,iie),M(e6,iie,null),e(Li,vTo),e(Li,die),e(die,FTo),b(f,Kqe,_),b(f,xo,_),M(o6,xo,null),e(xo,TTo),e(xo,xi),e(xi,MTo),e(xi,FN),e(FN,ETo),e(xi,CTo),e(xi,TN),e(TN,wTo),e(xi,ATo),e(xo,yTo),e(xo,r6),e(r6,LTo),e(r6,cie),e(cie,xTo),e(r6,$To),e(xo,kTo),e(xo,at),M(t6,at,null),e(at,STo),e(at,fie),e(fie,RTo),e(at,PTo),e(at,$i),e($i,BTo),e($i,mie),e(mie,ITo),e($i,qTo),e($i,MN),e(MN,NTo),e($i,jTo),e(at,DTo),M(o_,at,null),e(xo,GTo),e(xo,Ye),M(a6,Ye,null),e(Ye,OTo),e(Ye,gie),e(gie,VTo),e(Ye,XTo),e(Ye,xa),e(xa,zTo),e(xa,hie),e(hie,WTo),e(xa,QTo),e(xa,pie),e(pie,HTo),e(xa,UTo),e(xa,uie),e(uie,JTo),e(xa,YTo),e(Ye,KTo),e(Ye,G),e(G,r_),e(r_,_ie),e(_ie,ZTo),e(r_,e7o),e(r_,EN),e(EN,o7o),e(r_,r7o),e(G,t7o),e(G,t_),e(t_,bie),e(bie,a7o),e(t_,n7o),e(t_,CN),e(CN,s7o),e(t_,l7o),e(G,i7o),e(G,a_),e(a_,vie),e(vie,d7o),e(a_,c7o),e(a_,wN),e(wN,f7o),e(a_,m7o),e(G,g7o),e(G,n_),e(n_,Fie),e(Fie,h7o),e(n_,p7o),e(n_,AN),e(AN,u7o),e(n_,_7o),e(G,b7o),e(G,s_),e(s_,Tie),e(Tie,v7o),e(s_,F7o),e(s_,yN),e(yN,T7o),e(s_,M7o),e(G,E7o),e(G,l_),e(l_,Mie),e(Mie,C7o),e(l_,w7o),e(l_,LN),e(LN,A7o),e(l_,y7o),e(G,L7o),e(G,i_),e(i_,Eie),e(Eie,x7o),e(i_,$7o),e(i_,xN),e(xN,k7o),e(i_,S7o),e(G,R7o),e(G,d_),e(d_,Cie),e(Cie,P7o),e(d_,B7o),e(d_,$N),e($N,I7o),e(d_,q7o),e(G,N7o),e(G,c_),e(c_,wie),e(wie,j7o),e(c_,D7o),e(c_,kN),e(kN,G7o),e(c_,O7o),e(G,V7o),e(G,f_),e(f_,Aie),e(Aie,X7o),e(f_,z7o),e(f_,SN),e(SN,W7o),e(f_,Q7o),e(G,H7o),e(G,m_),e(m_,yie),e(yie,U7o),e(m_,J7o),e(m_,RN),e(RN,Y7o),e(m_,K7o),e(G,Z7o),e(G,g_),e(g_,Lie),e(Lie,e9o),e(g_,o9o),e(g_,PN),e(PN,r9o),e(g_,t9o),e(G,a9o),e(G,h_),e(h_,xie),e(xie,n9o),e(h_,s9o),e(h_,BN),e(BN,l9o),e(h_,i9o),e(G,d9o),e(G,p_),e(p_,$ie),e($ie,c9o),e(p_,f9o),e(p_,IN),e(IN,m9o),e(p_,g9o),e(G,h9o),e(G,u_),e(u_,kie),e(kie,p9o),e(u_,u9o),e(u_,qN),e(qN,_9o),e(u_,b9o),e(G,v9o),e(G,__),e(__,Sie),e(Sie,F9o),e(__,T9o),e(__,NN),e(NN,M9o),e(__,E9o),e(G,C9o),e(G,b_),e(b_,Rie),e(Rie,w9o),e(b_,A9o),e(b_,jN),e(jN,y9o),e(b_,L9o),e(G,x9o),e(G,v_),e(v_,Pie),e(Pie,$9o),e(v_,k9o),e(v_,DN),e(DN,S9o),e(v_,R9o),e(G,P9o),e(G,F_),e(F_,Bie),e(Bie,B9o),e(F_,I9o),e(F_,GN),e(GN,q9o),e(F_,N9o),e(G,j9o),e(G,T_),e(T_,Iie),e(Iie,D9o),e(T_,G9o),e(T_,ON),e(ON,O9o),e(T_,V9o),e(G,X9o),e(G,M_),e(M_,qie),e(qie,z9o),e(M_,W9o),e(M_,VN),e(VN,Q9o),e(M_,H9o),e(G,U9o),e(G,E_),e(E_,Nie),e(Nie,J9o),e(E_,Y9o),e(E_,XN),e(XN,K9o),e(E_,Z9o),e(G,eMo),e(G,C_),e(C_,jie),e(jie,oMo),e(C_,rMo),e(C_,zN),e(zN,tMo),e(C_,aMo),e(G,nMo),e(G,w_),e(w_,Die),e(Die,sMo),e(w_,lMo),e(w_,WN),e(WN,iMo),e(w_,dMo),e(G,cMo),e(G,A_),e(A_,Gie),e(Gie,fMo),e(A_,mMo),e(A_,QN),e(QN,gMo),e(A_,hMo),e(G,pMo),e(G,y_),e(y_,Oie),e(Oie,uMo),e(y_,_Mo),e(y_,HN),e(HN,bMo),e(y_,vMo),e(G,FMo),e(G,L_),e(L_,Vie),e(Vie,TMo),e(L_,MMo),e(L_,UN),e(UN,EMo),e(L_,CMo),e(G,wMo),e(G,x_),e(x_,Xie),e(Xie,AMo),e(x_,yMo),e(x_,JN),e(JN,LMo),e(x_,xMo),e(G,$Mo),e(G,$_),e($_,zie),e(zie,kMo),e($_,SMo),e($_,YN),e(YN,RMo),e($_,PMo),e(G,BMo),e(G,k_),e(k_,Wie),e(Wie,IMo),e(k_,qMo),e(k_,KN),e(KN,NMo),e(k_,jMo),e(G,DMo),e(G,S_),e(S_,Qie),e(Qie,GMo),e(S_,OMo),e(S_,ZN),e(ZN,VMo),e(S_,XMo),e(G,zMo),e(G,R_),e(R_,Hie),e(Hie,WMo),e(R_,QMo),e(R_,ej),e(ej,HMo),e(R_,UMo),e(G,JMo),e(G,P_),e(P_,Uie),e(Uie,YMo),e(P_,KMo),e(P_,oj),e(oj,ZMo),e(P_,e4o),e(G,o4o),e(G,B_),e(B_,Jie),e(Jie,r4o),e(B_,t4o),e(B_,rj),e(rj,a4o),e(B_,n4o),e(G,s4o),e(G,I_),e(I_,Yie),e(Yie,l4o),e(I_,i4o),e(I_,tj),e(tj,d4o),e(I_,c4o),e(G,f4o),e(G,q_),e(q_,Kie),e(Kie,m4o),e(q_,g4o),e(q_,aj),e(aj,h4o),e(q_,p4o),e(G,u4o),e(G,N_),e(N_,Zie),e(Zie,_4o),e(N_,b4o),e(N_,nj),e(nj,v4o),e(N_,F4o),e(G,T4o),e(G,j_),e(j_,ede),e(ede,M4o),e(j_,E4o),e(j_,sj),e(sj,C4o),e(j_,w4o),e(G,A4o),e(G,D_),e(D_,ode),e(ode,y4o),e(D_,L4o),e(D_,lj),e(lj,x4o),e(D_,$4o),e(G,k4o),e(G,G_),e(G_,rde),e(rde,S4o),e(G_,R4o),e(G_,ij),e(ij,P4o),e(G_,B4o),e(G,I4o),e(G,O_),e(O_,tde),e(tde,q4o),e(O_,N4o),e(O_,dj),e(dj,j4o),e(O_,D4o),e(G,G4o),e(G,V_),e(V_,ade),e(ade,O4o),e(V_,V4o),e(V_,cj),e(cj,X4o),e(V_,z4o),e(Ye,W4o),e(Ye,X_),e(X_,Q4o),e(X_,nde),e(nde,H4o),e(X_,U4o),e(X_,sde),e(sde,J4o),e(Ye,Y4o),M(z_,Ye,null),b(f,Zqe,_),b(f,ki,_),e(ki,W_),e(W_,lde),M(n6,lde,null),e(ki,K4o),e(ki,ide),e(ide,Z4o),b(f,eNe,_),b(f,$o,_),M(s6,$o,null),e($o,eEo),e($o,Si),e(Si,oEo),e(Si,fj),e(fj,rEo),e(Si,tEo),e(Si,mj),e(mj,aEo),e(Si,nEo),e($o,sEo),e($o,l6),e(l6,lEo),e(l6,dde),e(dde,iEo),e(l6,dEo),e($o,cEo),e($o,nt),M(i6,nt,null),e(nt,fEo),e(nt,cde),e(cde,mEo),e(nt,gEo),e(nt,Ri),e(Ri,hEo),e(Ri,fde),e(fde,pEo),e(Ri,uEo),e(Ri,gj),e(gj,_Eo),e(Ri,bEo),e(nt,vEo),M(Q_,nt,null),e($o,FEo),e($o,Ke),M(d6,Ke,null),e(Ke,TEo),e(Ke,mde),e(mde,MEo),e(Ke,EEo),e(Ke,$a),e($a,CEo),e($a,gde),e(gde,wEo),e($a,AEo),e($a,hde),e(hde,yEo),e($a,LEo),e($a,pde),e(pde,xEo),e($a,$Eo),e(Ke,kEo),e(Ke,z),e(z,H_),e(H_,ude),e(ude,SEo),e(H_,REo),e(H_,hj),e(hj,PEo),e(H_,BEo),e(z,IEo),e(z,U_),e(U_,_de),e(_de,qEo),e(U_,NEo),e(U_,pj),e(pj,jEo),e(U_,DEo),e(z,GEo),e(z,J_),e(J_,bde),e(bde,OEo),e(J_,VEo),e(J_,uj),e(uj,XEo),e(J_,zEo),e(z,WEo),e(z,Y_),e(Y_,vde),e(vde,QEo),e(Y_,HEo),e(Y_,_j),e(_j,UEo),e(Y_,JEo),e(z,YEo),e(z,K_),e(K_,Fde),e(Fde,KEo),e(K_,ZEo),e(K_,bj),e(bj,eCo),e(K_,oCo),e(z,rCo),e(z,Z_),e(Z_,Tde),e(Tde,tCo),e(Z_,aCo),e(Z_,vj),e(vj,nCo),e(Z_,sCo),e(z,lCo),e(z,e3),e(e3,Mde),e(Mde,iCo),e(e3,dCo),e(e3,Fj),e(Fj,cCo),e(e3,fCo),e(z,mCo),e(z,o3),e(o3,Ede),e(Ede,gCo),e(o3,hCo),e(o3,Tj),e(Tj,pCo),e(o3,uCo),e(z,_Co),e(z,r3),e(r3,Cde),e(Cde,bCo),e(r3,vCo),e(r3,Mj),e(Mj,FCo),e(r3,TCo),e(z,MCo),e(z,t3),e(t3,wde),e(wde,ECo),e(t3,CCo),e(t3,Ej),e(Ej,wCo),e(t3,ACo),e(z,yCo),e(z,a3),e(a3,Ade),e(Ade,LCo),e(a3,xCo),e(a3,Cj),e(Cj,$Co),e(a3,kCo),e(z,SCo),e(z,n3),e(n3,yde),e(yde,RCo),e(n3,PCo),e(n3,wj),e(wj,BCo),e(n3,ICo),e(z,qCo),e(z,s3),e(s3,Lde),e(Lde,NCo),e(s3,jCo),e(s3,Aj),e(Aj,DCo),e(s3,GCo),e(z,OCo),e(z,l3),e(l3,xde),e(xde,VCo),e(l3,XCo),e(l3,yj),e(yj,zCo),e(l3,WCo),e(z,QCo),e(z,i3),e(i3,$de),e($de,HCo),e(i3,UCo),e(i3,Lj),e(Lj,JCo),e(i3,YCo),e(z,KCo),e(z,d3),e(d3,kde),e(kde,ZCo),e(d3,e5o),e(d3,xj),e(xj,o5o),e(d3,r5o),e(z,t5o),e(z,c3),e(c3,Sde),e(Sde,a5o),e(c3,n5o),e(c3,$j),e($j,s5o),e(c3,l5o),e(z,i5o),e(z,f3),e(f3,Rde),e(Rde,d5o),e(f3,c5o),e(f3,kj),e(kj,f5o),e(f3,m5o),e(z,g5o),e(z,m3),e(m3,Pde),e(Pde,h5o),e(m3,p5o),e(m3,Sj),e(Sj,u5o),e(m3,_5o),e(z,b5o),e(z,g3),e(g3,Bde),e(Bde,v5o),e(g3,F5o),e(g3,Rj),e(Rj,T5o),e(g3,M5o),e(z,E5o),e(z,h3),e(h3,Ide),e(Ide,C5o),e(h3,w5o),e(h3,Pj),e(Pj,A5o),e(h3,y5o),e(z,L5o),e(z,p3),e(p3,qde),e(qde,x5o),e(p3,$5o),e(p3,Bj),e(Bj,k5o),e(p3,S5o),e(z,R5o),e(z,u3),e(u3,Nde),e(Nde,P5o),e(u3,B5o),e(u3,Ij),e(Ij,I5o),e(u3,q5o),e(z,N5o),e(z,_3),e(_3,jde),e(jde,j5o),e(_3,D5o),e(_3,qj),e(qj,G5o),e(_3,O5o),e(z,V5o),e(z,b3),e(b3,Dde),e(Dde,X5o),e(b3,z5o),e(b3,Nj),e(Nj,W5o),e(b3,Q5o),e(z,H5o),e(z,v3),e(v3,Gde),e(Gde,U5o),e(v3,J5o),e(v3,jj),e(jj,Y5o),e(v3,K5o),e(z,Z5o),e(z,F3),e(F3,Ode),e(Ode,ewo),e(F3,owo),e(F3,Dj),e(Dj,rwo),e(F3,two),e(z,awo),e(z,T3),e(T3,Vde),e(Vde,nwo),e(T3,swo),e(T3,Gj),e(Gj,lwo),e(T3,iwo),e(z,dwo),e(z,M3),e(M3,Xde),e(Xde,cwo),e(M3,fwo),e(M3,Oj),e(Oj,mwo),e(M3,gwo),e(z,hwo),e(z,E3),e(E3,zde),e(zde,pwo),e(E3,uwo),e(E3,Vj),e(Vj,_wo),e(E3,bwo),e(z,vwo),e(z,C3),e(C3,Wde),e(Wde,Fwo),e(C3,Two),e(C3,Xj),e(Xj,Mwo),e(C3,Ewo),e(z,Cwo),e(z,w3),e(w3,Qde),e(Qde,wwo),e(w3,Awo),e(w3,zj),e(zj,ywo),e(w3,Lwo),e(z,xwo),e(z,A3),e(A3,Hde),e(Hde,$wo),e(A3,kwo),e(A3,Wj),e(Wj,Swo),e(A3,Rwo),e(z,Pwo),e(z,y3),e(y3,Ude),e(Ude,Bwo),e(y3,Iwo),e(y3,Qj),e(Qj,qwo),e(y3,Nwo),e(z,jwo),e(z,L3),e(L3,Jde),e(Jde,Dwo),e(L3,Gwo),e(L3,Hj),e(Hj,Owo),e(L3,Vwo),e(z,Xwo),e(z,x3),e(x3,Yde),e(Yde,zwo),e(x3,Wwo),e(x3,Uj),e(Uj,Qwo),e(x3,Hwo),e(Ke,Uwo),e(Ke,$3),e($3,Jwo),e($3,Kde),e(Kde,Ywo),e($3,Kwo),e($3,Zde),e(Zde,Zwo),e(Ke,e0o),M(k3,Ke,null),b(f,oNe,_),b(f,Pi,_),e(Pi,S3),e(S3,ece),M(c6,ece,null),e(Pi,o0o),e(Pi,oce),e(oce,r0o),b(f,rNe,_),b(f,ko,_),M(f6,ko,null),e(ko,t0o),e(ko,Bi),e(Bi,a0o),e(Bi,Jj),e(Jj,n0o),e(Bi,s0o),e(Bi,Yj),e(Yj,l0o),e(Bi,i0o),e(ko,d0o),e(ko,m6),e(m6,c0o),e(m6,rce),e(rce,f0o),e(m6,m0o),e(ko,g0o),e(ko,st),M(g6,st,null),e(st,h0o),e(st,tce),e(tce,p0o),e(st,u0o),e(st,Ii),e(Ii,_0o),e(Ii,ace),e(ace,b0o),e(Ii,v0o),e(Ii,Kj),e(Kj,F0o),e(Ii,T0o),e(st,M0o),M(R3,st,null),e(ko,E0o),e(ko,Ze),M(h6,Ze,null),e(Ze,C0o),e(Ze,nce),e(nce,w0o),e(Ze,A0o),e(Ze,ka),e(ka,y0o),e(ka,sce),e(sce,L0o),e(ka,x0o),e(ka,lce),e(lce,$0o),e(ka,k0o),e(ka,ice),e(ice,S0o),e(ka,R0o),e(Ze,P0o),e(Ze,W),e(W,P3),e(P3,dce),e(dce,B0o),e(P3,I0o),e(P3,Zj),e(Zj,q0o),e(P3,N0o),e(W,j0o),e(W,B3),e(B3,cce),e(cce,D0o),e(B3,G0o),e(B3,eD),e(eD,O0o),e(B3,V0o),e(W,X0o),e(W,I3),e(I3,fce),e(fce,z0o),e(I3,W0o),e(I3,oD),e(oD,Q0o),e(I3,H0o),e(W,U0o),e(W,q3),e(q3,mce),e(mce,J0o),e(q3,Y0o),e(q3,rD),e(rD,K0o),e(q3,Z0o),e(W,eAo),e(W,N3),e(N3,gce),e(gce,oAo),e(N3,rAo),e(N3,tD),e(tD,tAo),e(N3,aAo),e(W,nAo),e(W,j3),e(j3,hce),e(hce,sAo),e(j3,lAo),e(j3,aD),e(aD,iAo),e(j3,dAo),e(W,cAo),e(W,D3),e(D3,pce),e(pce,fAo),e(D3,mAo),e(D3,nD),e(nD,gAo),e(D3,hAo),e(W,pAo),e(W,G3),e(G3,uce),e(uce,uAo),e(G3,_Ao),e(G3,sD),e(sD,bAo),e(G3,vAo),e(W,FAo),e(W,O3),e(O3,_ce),e(_ce,TAo),e(O3,MAo),e(O3,lD),e(lD,EAo),e(O3,CAo),e(W,wAo),e(W,V3),e(V3,bce),e(bce,AAo),e(V3,yAo),e(V3,iD),e(iD,LAo),e(V3,xAo),e(W,$Ao),e(W,X3),e(X3,vce),e(vce,kAo),e(X3,SAo),e(X3,dD),e(dD,RAo),e(X3,PAo),e(W,BAo),e(W,z3),e(z3,Fce),e(Fce,IAo),e(z3,qAo),e(z3,cD),e(cD,NAo),e(z3,jAo),e(W,DAo),e(W,W3),e(W3,Tce),e(Tce,GAo),e(W3,OAo),e(W3,fD),e(fD,VAo),e(W3,XAo),e(W,zAo),e(W,Q3),e(Q3,Mce),e(Mce,WAo),e(Q3,QAo),e(Q3,mD),e(mD,HAo),e(Q3,UAo),e(W,JAo),e(W,H3),e(H3,Ece),e(Ece,YAo),e(H3,KAo),e(H3,gD),e(gD,ZAo),e(H3,e6o),e(W,o6o),e(W,U3),e(U3,Cce),e(Cce,r6o),e(U3,t6o),e(U3,hD),e(hD,a6o),e(U3,n6o),e(W,s6o),e(W,J3),e(J3,wce),e(wce,l6o),e(J3,i6o),e(J3,pD),e(pD,d6o),e(J3,c6o),e(W,f6o),e(W,Y3),e(Y3,Ace),e(Ace,m6o),e(Y3,g6o),e(Y3,uD),e(uD,h6o),e(Y3,p6o),e(W,u6o),e(W,K3),e(K3,yce),e(yce,_6o),e(K3,b6o),e(K3,_D),e(_D,v6o),e(K3,F6o),e(W,T6o),e(W,Z3),e(Z3,Lce),e(Lce,M6o),e(Z3,E6o),e(Z3,bD),e(bD,C6o),e(Z3,w6o),e(W,A6o),e(W,e1),e(e1,xce),e(xce,y6o),e(e1,L6o),e(e1,vD),e(vD,x6o),e(e1,$6o),e(W,k6o),e(W,o1),e(o1,$ce),e($ce,S6o),e(o1,R6o),e(o1,FD),e(FD,P6o),e(o1,B6o),e(W,I6o),e(W,r1),e(r1,kce),e(kce,q6o),e(r1,N6o),e(r1,TD),e(TD,j6o),e(r1,D6o),e(W,G6o),e(W,t1),e(t1,Sce),e(Sce,O6o),e(t1,V6o),e(t1,MD),e(MD,X6o),e(t1,z6o),e(W,W6o),e(W,a1),e(a1,Rce),e(Rce,Q6o),e(a1,H6o),e(a1,ED),e(ED,U6o),e(a1,J6o),e(W,Y6o),e(W,n1),e(n1,Pce),e(Pce,K6o),e(n1,Z6o),e(n1,CD),e(CD,eyo),e(n1,oyo),e(W,ryo),e(W,s1),e(s1,Bce),e(Bce,tyo),e(s1,ayo),e(s1,wD),e(wD,nyo),e(s1,syo),e(W,lyo),e(W,l1),e(l1,Ice),e(Ice,iyo),e(l1,dyo),e(l1,AD),e(AD,cyo),e(l1,fyo),e(W,myo),e(W,i1),e(i1,qce),e(qce,gyo),e(i1,hyo),e(i1,yD),e(yD,pyo),e(i1,uyo),e(W,_yo),e(W,d1),e(d1,Nce),e(Nce,byo),e(d1,vyo),e(d1,LD),e(LD,Fyo),e(d1,Tyo),e(W,Myo),e(W,c1),e(c1,jce),e(jce,Eyo),e(c1,Cyo),e(c1,Dce),e(Dce,wyo),e(c1,Ayo),e(W,yyo),e(W,f1),e(f1,Gce),e(Gce,Lyo),e(f1,xyo),e(f1,xD),e(xD,$yo),e(f1,kyo),e(W,Syo),e(W,m1),e(m1,Oce),e(Oce,Ryo),e(m1,Pyo),e(m1,$D),e($D,Byo),e(m1,Iyo),e(W,qyo),e(W,g1),e(g1,Vce),e(Vce,Nyo),e(g1,jyo),e(g1,kD),e(kD,Dyo),e(g1,Gyo),e(W,Oyo),e(W,h1),e(h1,Xce),e(Xce,Vyo),e(h1,Xyo),e(h1,SD),e(SD,zyo),e(h1,Wyo),e(Ze,Qyo),e(Ze,p1),e(p1,Hyo),e(p1,zce),e(zce,Uyo),e(p1,Jyo),e(p1,Wce),e(Wce,Yyo),e(Ze,Kyo),M(u1,Ze,null),b(f,tNe,_),b(f,qi,_),e(qi,_1),e(_1,Qce),M(p6,Qce,null),e(qi,Zyo),e(qi,Hce),e(Hce,eLo),b(f,aNe,_),b(f,So,_),M(u6,So,null),e(So,oLo),e(So,Ni),e(Ni,rLo),e(Ni,RD),e(RD,tLo),e(Ni,aLo),e(Ni,PD),e(PD,nLo),e(Ni,sLo),e(So,lLo),e(So,_6),e(_6,iLo),e(_6,Uce),e(Uce,dLo),e(_6,cLo),e(So,fLo),e(So,lt),M(b6,lt,null),e(lt,mLo),e(lt,Jce),e(Jce,gLo),e(lt,hLo),e(lt,ji),e(ji,pLo),e(ji,Yce),e(Yce,uLo),e(ji,_Lo),e(ji,BD),e(BD,bLo),e(ji,vLo),e(lt,FLo),M(b1,lt,null),e(So,TLo),e(So,eo),M(v6,eo,null),e(eo,MLo),e(eo,Kce),e(Kce,ELo),e(eo,CLo),e(eo,Sa),e(Sa,wLo),e(Sa,Zce),e(Zce,ALo),e(Sa,yLo),e(Sa,efe),e(efe,LLo),e(Sa,xLo),e(Sa,ofe),e(ofe,$Lo),e(Sa,kLo),e(eo,SLo),e(eo,ue),e(ue,v1),e(v1,rfe),e(rfe,RLo),e(v1,PLo),e(v1,ID),e(ID,BLo),e(v1,ILo),e(ue,qLo),e(ue,F1),e(F1,tfe),e(tfe,NLo),e(F1,jLo),e(F1,qD),e(qD,DLo),e(F1,GLo),e(ue,OLo),e(ue,T1),e(T1,afe),e(afe,VLo),e(T1,XLo),e(T1,ND),e(ND,zLo),e(T1,WLo),e(ue,QLo),e(ue,M1),e(M1,nfe),e(nfe,HLo),e(M1,ULo),e(M1,jD),e(jD,JLo),e(M1,YLo),e(ue,KLo),e(ue,E1),e(E1,sfe),e(sfe,ZLo),e(E1,e8o),e(E1,DD),e(DD,o8o),e(E1,r8o),e(ue,t8o),e(ue,C1),e(C1,lfe),e(lfe,a8o),e(C1,n8o),e(C1,GD),e(GD,s8o),e(C1,l8o),e(ue,i8o),e(ue,w1),e(w1,ife),e(ife,d8o),e(w1,c8o),e(w1,OD),e(OD,f8o),e(w1,m8o),e(ue,g8o),e(ue,A1),e(A1,dfe),e(dfe,h8o),e(A1,p8o),e(A1,VD),e(VD,u8o),e(A1,_8o),e(ue,b8o),e(ue,y1),e(y1,cfe),e(cfe,v8o),e(y1,F8o),e(y1,XD),e(XD,T8o),e(y1,M8o),e(ue,E8o),e(ue,L1),e(L1,ffe),e(ffe,C8o),e(L1,w8o),e(L1,zD),e(zD,A8o),e(L1,y8o),e(ue,L8o),e(ue,x1),e(x1,mfe),e(mfe,x8o),e(x1,$8o),e(x1,WD),e(WD,k8o),e(x1,S8o),e(ue,R8o),e(ue,$1),e($1,gfe),e(gfe,P8o),e($1,B8o),e($1,QD),e(QD,I8o),e($1,q8o),e(ue,N8o),e(ue,k1),e(k1,hfe),e(hfe,j8o),e(k1,D8o),e(k1,HD),e(HD,G8o),e(k1,O8o),e(ue,V8o),e(ue,S1),e(S1,pfe),e(pfe,X8o),e(S1,z8o),e(S1,UD),e(UD,W8o),e(S1,Q8o),e(ue,H8o),e(ue,R1),e(R1,ufe),e(ufe,U8o),e(R1,J8o),e(R1,JD),e(JD,Y8o),e(R1,K8o),e(ue,Z8o),e(ue,P1),e(P1,_fe),e(_fe,exo),e(P1,oxo),e(P1,YD),e(YD,rxo),e(P1,txo),e(eo,axo),e(eo,B1),e(B1,nxo),e(B1,bfe),e(bfe,sxo),e(B1,lxo),e(B1,vfe),e(vfe,ixo),e(eo,dxo),M(I1,eo,null),b(f,nNe,_),b(f,Di,_),e(Di,q1),e(q1,Ffe),M(F6,Ffe,null),e(Di,cxo),e(Di,Tfe),e(Tfe,fxo),b(f,sNe,_),b(f,Ro,_),M(T6,Ro,null),e(Ro,mxo),e(Ro,Gi),e(Gi,gxo),e(Gi,KD),e(KD,hxo),e(Gi,pxo),e(Gi,ZD),e(ZD,uxo),e(Gi,_xo),e(Ro,bxo),e(Ro,M6),e(M6,vxo),e(M6,Mfe),e(Mfe,Fxo),e(M6,Txo),e(Ro,Mxo),e(Ro,it),M(E6,it,null),e(it,Exo),e(it,Efe),e(Efe,Cxo),e(it,wxo),e(it,Oi),e(Oi,Axo),e(Oi,Cfe),e(Cfe,yxo),e(Oi,Lxo),e(Oi,eG),e(eG,xxo),e(Oi,$xo),e(it,kxo),M(N1,it,null),e(Ro,Sxo),e(Ro,oo),M(C6,oo,null),e(oo,Rxo),e(oo,wfe),e(wfe,Pxo),e(oo,Bxo),e(oo,Ra),e(Ra,Ixo),e(Ra,Afe),e(Afe,qxo),e(Ra,Nxo),e(Ra,yfe),e(yfe,jxo),e(Ra,Dxo),e(Ra,Lfe),e(Lfe,Gxo),e(Ra,Oxo),e(oo,Vxo),e(oo,q),e(q,j1),e(j1,xfe),e(xfe,Xxo),e(j1,zxo),e(j1,oG),e(oG,Wxo),e(j1,Qxo),e(q,Hxo),e(q,D1),e(D1,$fe),e($fe,Uxo),e(D1,Jxo),e(D1,rG),e(rG,Yxo),e(D1,Kxo),e(q,Zxo),e(q,G1),e(G1,kfe),e(kfe,e$o),e(G1,o$o),e(G1,tG),e(tG,r$o),e(G1,t$o),e(q,a$o),e(q,O1),e(O1,Sfe),e(Sfe,n$o),e(O1,s$o),e(O1,aG),e(aG,l$o),e(O1,i$o),e(q,d$o),e(q,V1),e(V1,Rfe),e(Rfe,c$o),e(V1,f$o),e(V1,nG),e(nG,m$o),e(V1,g$o),e(q,h$o),e(q,X1),e(X1,Pfe),e(Pfe,p$o),e(X1,u$o),e(X1,sG),e(sG,_$o),e(X1,b$o),e(q,v$o),e(q,z1),e(z1,Bfe),e(Bfe,F$o),e(z1,T$o),e(z1,lG),e(lG,M$o),e(z1,E$o),e(q,C$o),e(q,W1),e(W1,Ife),e(Ife,w$o),e(W1,A$o),e(W1,iG),e(iG,y$o),e(W1,L$o),e(q,x$o),e(q,Q1),e(Q1,qfe),e(qfe,$$o),e(Q1,k$o),e(Q1,dG),e(dG,S$o),e(Q1,R$o),e(q,P$o),e(q,H1),e(H1,Nfe),e(Nfe,B$o),e(H1,I$o),e(H1,cG),e(cG,q$o),e(H1,N$o),e(q,j$o),e(q,U1),e(U1,jfe),e(jfe,D$o),e(U1,G$o),e(U1,fG),e(fG,O$o),e(U1,V$o),e(q,X$o),e(q,J1),e(J1,Dfe),e(Dfe,z$o),e(J1,W$o),e(J1,mG),e(mG,Q$o),e(J1,H$o),e(q,U$o),e(q,Y1),e(Y1,Gfe),e(Gfe,J$o),e(Y1,Y$o),e(Y1,gG),e(gG,K$o),e(Y1,Z$o),e(q,eko),e(q,K1),e(K1,Ofe),e(Ofe,oko),e(K1,rko),e(K1,hG),e(hG,tko),e(K1,ako),e(q,nko),e(q,Z1),e(Z1,Vfe),e(Vfe,sko),e(Z1,lko),e(Z1,pG),e(pG,iko),e(Z1,dko),e(q,cko),e(q,eb),e(eb,Xfe),e(Xfe,fko),e(eb,mko),e(eb,uG),e(uG,gko),e(eb,hko),e(q,pko),e(q,ob),e(ob,zfe),e(zfe,uko),e(ob,_ko),e(ob,_G),e(_G,bko),e(ob,vko),e(q,Fko),e(q,rb),e(rb,Wfe),e(Wfe,Tko),e(rb,Mko),e(rb,bG),e(bG,Eko),e(rb,Cko),e(q,wko),e(q,tb),e(tb,Qfe),e(Qfe,Ako),e(tb,yko),e(tb,vG),e(vG,Lko),e(tb,xko),e(q,$ko),e(q,ab),e(ab,Hfe),e(Hfe,kko),e(ab,Sko),e(ab,FG),e(FG,Rko),e(ab,Pko),e(q,Bko),e(q,nb),e(nb,Ufe),e(Ufe,Iko),e(nb,qko),e(nb,TG),e(TG,Nko),e(nb,jko),e(q,Dko),e(q,sb),e(sb,Jfe),e(Jfe,Gko),e(sb,Oko),e(sb,MG),e(MG,Vko),e(sb,Xko),e(q,zko),e(q,lb),e(lb,Yfe),e(Yfe,Wko),e(lb,Qko),e(lb,EG),e(EG,Hko),e(lb,Uko),e(q,Jko),e(q,ib),e(ib,Kfe),e(Kfe,Yko),e(ib,Kko),e(ib,CG),e(CG,Zko),e(ib,eSo),e(q,oSo),e(q,db),e(db,Zfe),e(Zfe,rSo),e(db,tSo),e(db,wG),e(wG,aSo),e(db,nSo),e(q,sSo),e(q,cb),e(cb,eme),e(eme,lSo),e(cb,iSo),e(cb,AG),e(AG,dSo),e(cb,cSo),e(q,fSo),e(q,fb),e(fb,ome),e(ome,mSo),e(fb,gSo),e(fb,yG),e(yG,hSo),e(fb,pSo),e(q,uSo),e(q,mb),e(mb,rme),e(rme,_So),e(mb,bSo),e(mb,LG),e(LG,vSo),e(mb,FSo),e(q,TSo),e(q,gb),e(gb,tme),e(tme,MSo),e(gb,ESo),e(gb,xG),e(xG,CSo),e(gb,wSo),e(q,ASo),e(q,hb),e(hb,ame),e(ame,ySo),e(hb,LSo),e(hb,$G),e($G,xSo),e(hb,$So),e(q,kSo),e(q,pb),e(pb,nme),e(nme,SSo),e(pb,RSo),e(pb,kG),e(kG,PSo),e(pb,BSo),e(q,ISo),e(q,ub),e(ub,sme),e(sme,qSo),e(ub,NSo),e(ub,SG),e(SG,jSo),e(ub,DSo),e(q,GSo),e(q,_b),e(_b,lme),e(lme,OSo),e(_b,VSo),e(_b,RG),e(RG,XSo),e(_b,zSo),e(q,WSo),e(q,bb),e(bb,ime),e(ime,QSo),e(bb,HSo),e(bb,PG),e(PG,USo),e(bb,JSo),e(q,YSo),e(q,vb),e(vb,dme),e(dme,KSo),e(vb,ZSo),e(vb,BG),e(BG,eRo),e(vb,oRo),e(q,rRo),e(q,Fb),e(Fb,cme),e(cme,tRo),e(Fb,aRo),e(Fb,IG),e(IG,nRo),e(Fb,sRo),e(q,lRo),e(q,Tb),e(Tb,fme),e(fme,iRo),e(Tb,dRo),e(Tb,qG),e(qG,cRo),e(Tb,fRo),e(q,mRo),e(q,Mb),e(Mb,mme),e(mme,gRo),e(Mb,hRo),e(Mb,NG),e(NG,pRo),e(Mb,uRo),e(q,_Ro),e(q,Eb),e(Eb,gme),e(gme,bRo),e(Eb,vRo),e(Eb,jG),e(jG,FRo),e(Eb,TRo),e(q,MRo),e(q,Cb),e(Cb,hme),e(hme,ERo),e(Cb,CRo),e(Cb,DG),e(DG,wRo),e(Cb,ARo),e(q,yRo),e(q,wb),e(wb,pme),e(pme,LRo),e(wb,xRo),e(wb,GG),e(GG,$Ro),e(wb,kRo),e(q,SRo),e(q,Ab),e(Ab,ume),e(ume,RRo),e(Ab,PRo),e(Ab,OG),e(OG,BRo),e(Ab,IRo),e(q,qRo),e(q,yb),e(yb,_me),e(_me,NRo),e(yb,jRo),e(yb,VG),e(VG,DRo),e(yb,GRo),e(q,ORo),e(q,Lb),e(Lb,bme),e(bme,VRo),e(Lb,XRo),e(Lb,XG),e(XG,zRo),e(Lb,WRo),e(q,QRo),e(q,xb),e(xb,vme),e(vme,HRo),e(xb,URo),e(xb,zG),e(zG,JRo),e(xb,YRo),e(q,KRo),e(q,$b),e($b,Fme),e(Fme,ZRo),e($b,ePo),e($b,WG),e(WG,oPo),e($b,rPo),e(q,tPo),e(q,kb),e(kb,Tme),e(Tme,aPo),e(kb,nPo),e(kb,QG),e(QG,sPo),e(kb,lPo),e(oo,iPo),e(oo,Sb),e(Sb,dPo),e(Sb,Mme),e(Mme,cPo),e(Sb,fPo),e(Sb,Eme),e(Eme,mPo),e(oo,gPo),M(Rb,oo,null),b(f,lNe,_),b(f,Vi,_),e(Vi,Pb),e(Pb,Cme),M(w6,Cme,null),e(Vi,hPo),e(Vi,wme),e(wme,pPo),b(f,iNe,_),b(f,Po,_),M(A6,Po,null),e(Po,uPo),e(Po,Xi),e(Xi,_Po),e(Xi,HG),e(HG,bPo),e(Xi,vPo),e(Xi,UG),e(UG,FPo),e(Xi,TPo),e(Po,MPo),e(Po,y6),e(y6,EPo),e(y6,Ame),e(Ame,CPo),e(y6,wPo),e(Po,APo),e(Po,dt),M(L6,dt,null),e(dt,yPo),e(dt,yme),e(yme,LPo),e(dt,xPo),e(dt,zi),e(zi,$Po),e(zi,Lme),e(Lme,kPo),e(zi,SPo),e(zi,JG),e(JG,RPo),e(zi,PPo),e(dt,BPo),M(Bb,dt,null),e(Po,IPo),e(Po,ro),M(x6,ro,null),e(ro,qPo),e(ro,xme),e(xme,NPo),e(ro,jPo),e(ro,Pa),e(Pa,DPo),e(Pa,$me),e($me,GPo),e(Pa,OPo),e(Pa,kme),e(kme,VPo),e(Pa,XPo),e(Pa,Sme),e(Sme,zPo),e(Pa,WPo),e(ro,QPo),e(ro,K),e(K,Ib),e(Ib,Rme),e(Rme,HPo),e(Ib,UPo),e(Ib,YG),e(YG,JPo),e(Ib,YPo),e(K,KPo),e(K,qb),e(qb,Pme),e(Pme,ZPo),e(qb,eBo),e(qb,KG),e(KG,oBo),e(qb,rBo),e(K,tBo),e(K,Nb),e(Nb,Bme),e(Bme,aBo),e(Nb,nBo),e(Nb,ZG),e(ZG,sBo),e(Nb,lBo),e(K,iBo),e(K,jb),e(jb,Ime),e(Ime,dBo),e(jb,cBo),e(jb,eO),e(eO,fBo),e(jb,mBo),e(K,gBo),e(K,Db),e(Db,qme),e(qme,hBo),e(Db,pBo),e(Db,oO),e(oO,uBo),e(Db,_Bo),e(K,bBo),e(K,Gb),e(Gb,Nme),e(Nme,vBo),e(Gb,FBo),e(Gb,rO),e(rO,TBo),e(Gb,MBo),e(K,EBo),e(K,Ob),e(Ob,jme),e(jme,CBo),e(Ob,wBo),e(Ob,tO),e(tO,ABo),e(Ob,yBo),e(K,LBo),e(K,Vb),e(Vb,Dme),e(Dme,xBo),e(Vb,$Bo),e(Vb,aO),e(aO,kBo),e(Vb,SBo),e(K,RBo),e(K,Xb),e(Xb,Gme),e(Gme,PBo),e(Xb,BBo),e(Xb,nO),e(nO,IBo),e(Xb,qBo),e(K,NBo),e(K,zb),e(zb,Ome),e(Ome,jBo),e(zb,DBo),e(zb,sO),e(sO,GBo),e(zb,OBo),e(K,VBo),e(K,Wb),e(Wb,Vme),e(Vme,XBo),e(Wb,zBo),e(Wb,lO),e(lO,WBo),e(Wb,QBo),e(K,HBo),e(K,Qb),e(Qb,Xme),e(Xme,UBo),e(Qb,JBo),e(Qb,iO),e(iO,YBo),e(Qb,KBo),e(K,ZBo),e(K,Hb),e(Hb,zme),e(zme,eIo),e(Hb,oIo),e(Hb,dO),e(dO,rIo),e(Hb,tIo),e(K,aIo),e(K,Ub),e(Ub,Wme),e(Wme,nIo),e(Ub,sIo),e(Ub,cO),e(cO,lIo),e(Ub,iIo),e(K,dIo),e(K,Jb),e(Jb,Qme),e(Qme,cIo),e(Jb,fIo),e(Jb,fO),e(fO,mIo),e(Jb,gIo),e(K,hIo),e(K,Yb),e(Yb,Hme),e(Hme,pIo),e(Yb,uIo),e(Yb,mO),e(mO,_Io),e(Yb,bIo),e(K,vIo),e(K,Kb),e(Kb,Ume),e(Ume,FIo),e(Kb,TIo),e(Kb,gO),e(gO,MIo),e(Kb,EIo),e(K,CIo),e(K,Zb),e(Zb,Jme),e(Jme,wIo),e(Zb,AIo),e(Zb,hO),e(hO,yIo),e(Zb,LIo),e(K,xIo),e(K,e2),e(e2,Yme),e(Yme,$Io),e(e2,kIo),e(e2,pO),e(pO,SIo),e(e2,RIo),e(K,PIo),e(K,o2),e(o2,Kme),e(Kme,BIo),e(o2,IIo),e(o2,uO),e(uO,qIo),e(o2,NIo),e(K,jIo),e(K,r2),e(r2,Zme),e(Zme,DIo),e(r2,GIo),e(r2,_O),e(_O,OIo),e(r2,VIo),e(K,XIo),e(K,t2),e(t2,ege),e(ege,zIo),e(t2,WIo),e(t2,bO),e(bO,QIo),e(t2,HIo),e(K,UIo),e(K,a2),e(a2,oge),e(oge,JIo),e(a2,YIo),e(a2,vO),e(vO,KIo),e(a2,ZIo),e(K,eqo),e(K,n2),e(n2,rge),e(rge,oqo),e(n2,rqo),e(n2,FO),e(FO,tqo),e(n2,aqo),e(K,nqo),e(K,s2),e(s2,tge),e(tge,sqo),e(s2,lqo),e(s2,TO),e(TO,iqo),e(s2,dqo),e(K,cqo),e(K,l2),e(l2,age),e(age,fqo),e(l2,mqo),e(l2,MO),e(MO,gqo),e(l2,hqo),e(K,pqo),e(K,i2),e(i2,nge),e(nge,uqo),e(i2,_qo),e(i2,EO),e(EO,bqo),e(i2,vqo),e(K,Fqo),e(K,d2),e(d2,sge),e(sge,Tqo),e(d2,Mqo),e(d2,CO),e(CO,Eqo),e(d2,Cqo),e(K,wqo),e(K,c2),e(c2,lge),e(lge,Aqo),e(c2,yqo),e(c2,wO),e(wO,Lqo),e(c2,xqo),e(ro,$qo),e(ro,f2),e(f2,kqo),e(f2,ige),e(ige,Sqo),e(f2,Rqo),e(f2,dge),e(dge,Pqo),e(ro,Bqo),M(m2,ro,null),b(f,dNe,_),b(f,Wi,_),e(Wi,g2),e(g2,cge),M($6,cge,null),e(Wi,Iqo),e(Wi,fge),e(fge,qqo),b(f,cNe,_),b(f,Bo,_),M(k6,Bo,null),e(Bo,Nqo),e(Bo,Qi),e(Qi,jqo),e(Qi,AO),e(AO,Dqo),e(Qi,Gqo),e(Qi,yO),e(yO,Oqo),e(Qi,Vqo),e(Bo,Xqo),e(Bo,S6),e(S6,zqo),e(S6,mge),e(mge,Wqo),e(S6,Qqo),e(Bo,Hqo),e(Bo,ct),M(R6,ct,null),e(ct,Uqo),e(ct,gge),e(gge,Jqo),e(ct,Yqo),e(ct,Hi),e(Hi,Kqo),e(Hi,hge),e(hge,Zqo),e(Hi,eNo),e(Hi,LO),e(LO,oNo),e(Hi,rNo),e(ct,tNo),M(h2,ct,null),e(Bo,aNo),e(Bo,to),M(P6,to,null),e(to,nNo),e(to,pge),e(pge,sNo),e(to,lNo),e(to,Ba),e(Ba,iNo),e(Ba,uge),e(uge,dNo),e(Ba,cNo),e(Ba,_ge),e(_ge,fNo),e(Ba,mNo),e(Ba,bge),e(bge,gNo),e(Ba,hNo),e(to,pNo),e(to,Yr),e(Yr,p2),e(p2,vge),e(vge,uNo),e(p2,_No),e(p2,xO),e(xO,bNo),e(p2,vNo),e(Yr,FNo),e(Yr,u2),e(u2,Fge),e(Fge,TNo),e(u2,MNo),e(u2,$O),e($O,ENo),e(u2,CNo),e(Yr,wNo),e(Yr,_2),e(_2,Tge),e(Tge,ANo),e(_2,yNo),e(_2,kO),e(kO,LNo),e(_2,xNo),e(Yr,$No),e(Yr,b2),e(b2,Mge),e(Mge,kNo),e(b2,SNo),e(b2,SO),e(SO,RNo),e(b2,PNo),e(Yr,BNo),e(Yr,v2),e(v2,Ege),e(Ege,INo),e(v2,qNo),e(v2,RO),e(RO,NNo),e(v2,jNo),e(to,DNo),e(to,F2),e(F2,GNo),e(F2,Cge),e(Cge,ONo),e(F2,VNo),e(F2,wge),e(wge,XNo),e(to,zNo),M(T2,to,null),b(f,fNe,_),b(f,Ui,_),e(Ui,M2),e(M2,Age),M(B6,Age,null),e(Ui,WNo),e(Ui,yge),e(yge,QNo),b(f,mNe,_),b(f,Io,_),M(I6,Io,null),e(Io,HNo),e(Io,Ji),e(Ji,UNo),e(Ji,PO),e(PO,JNo),e(Ji,YNo),e(Ji,BO),e(BO,KNo),e(Ji,ZNo),e(Io,ejo),e(Io,q6),e(q6,ojo),e(q6,Lge),e(Lge,rjo),e(q6,tjo),e(Io,ajo),e(Io,ft),M(N6,ft,null),e(ft,njo),e(ft,xge),e(xge,sjo),e(ft,ljo),e(ft,Yi),e(Yi,ijo),e(Yi,$ge),e($ge,djo),e(Yi,cjo),e(Yi,IO),e(IO,fjo),e(Yi,mjo),e(ft,gjo),M(E2,ft,null),e(Io,hjo),e(Io,ao),M(j6,ao,null),e(ao,pjo),e(ao,kge),e(kge,ujo),e(ao,_jo),e(ao,Ia),e(Ia,bjo),e(Ia,Sge),e(Sge,vjo),e(Ia,Fjo),e(Ia,Rge),e(Rge,Tjo),e(Ia,Mjo),e(Ia,Pge),e(Pge,Ejo),e(Ia,Cjo),e(ao,wjo),e(ao,H),e(H,C2),e(C2,Bge),e(Bge,Ajo),e(C2,yjo),e(C2,qO),e(qO,Ljo),e(C2,xjo),e(H,$jo),e(H,w2),e(w2,Ige),e(Ige,kjo),e(w2,Sjo),e(w2,NO),e(NO,Rjo),e(w2,Pjo),e(H,Bjo),e(H,A2),e(A2,qge),e(qge,Ijo),e(A2,qjo),e(A2,jO),e(jO,Njo),e(A2,jjo),e(H,Djo),e(H,y2),e(y2,Nge),e(Nge,Gjo),e(y2,Ojo),e(y2,DO),e(DO,Vjo),e(y2,Xjo),e(H,zjo),e(H,L2),e(L2,jge),e(jge,Wjo),e(L2,Qjo),e(L2,GO),e(GO,Hjo),e(L2,Ujo),e(H,Jjo),e(H,x2),e(x2,Dge),e(Dge,Yjo),e(x2,Kjo),e(x2,OO),e(OO,Zjo),e(x2,eDo),e(H,oDo),e(H,$2),e($2,Gge),e(Gge,rDo),e($2,tDo),e($2,VO),e(VO,aDo),e($2,nDo),e(H,sDo),e(H,k2),e(k2,Oge),e(Oge,lDo),e(k2,iDo),e(k2,XO),e(XO,dDo),e(k2,cDo),e(H,fDo),e(H,S2),e(S2,Vge),e(Vge,mDo),e(S2,gDo),e(S2,zO),e(zO,hDo),e(S2,pDo),e(H,uDo),e(H,R2),e(R2,Xge),e(Xge,_Do),e(R2,bDo),e(R2,WO),e(WO,vDo),e(R2,FDo),e(H,TDo),e(H,P2),e(P2,zge),e(zge,MDo),e(P2,EDo),e(P2,QO),e(QO,CDo),e(P2,wDo),e(H,ADo),e(H,B2),e(B2,Wge),e(Wge,yDo),e(B2,LDo),e(B2,HO),e(HO,xDo),e(B2,$Do),e(H,kDo),e(H,I2),e(I2,Qge),e(Qge,SDo),e(I2,RDo),e(I2,UO),e(UO,PDo),e(I2,BDo),e(H,IDo),e(H,q2),e(q2,Hge),e(Hge,qDo),e(q2,NDo),e(q2,JO),e(JO,jDo),e(q2,DDo),e(H,GDo),e(H,N2),e(N2,Uge),e(Uge,ODo),e(N2,VDo),e(N2,YO),e(YO,XDo),e(N2,zDo),e(H,WDo),e(H,j2),e(j2,Jge),e(Jge,QDo),e(j2,HDo),e(j2,KO),e(KO,UDo),e(j2,JDo),e(H,YDo),e(H,D2),e(D2,Yge),e(Yge,KDo),e(D2,ZDo),e(D2,ZO),e(ZO,eGo),e(D2,oGo),e(H,rGo),e(H,G2),e(G2,Kge),e(Kge,tGo),e(G2,aGo),e(G2,eV),e(eV,nGo),e(G2,sGo),e(H,lGo),e(H,O2),e(O2,Zge),e(Zge,iGo),e(O2,dGo),e(O2,oV),e(oV,cGo),e(O2,fGo),e(H,mGo),e(H,V2),e(V2,ehe),e(ehe,gGo),e(V2,hGo),e(V2,rV),e(rV,pGo),e(V2,uGo),e(H,_Go),e(H,X2),e(X2,ohe),e(ohe,bGo),e(X2,vGo),e(X2,tV),e(tV,FGo),e(X2,TGo),e(H,MGo),e(H,z2),e(z2,rhe),e(rhe,EGo),e(z2,CGo),e(z2,aV),e(aV,wGo),e(z2,AGo),e(H,yGo),e(H,W2),e(W2,the),e(the,LGo),e(W2,xGo),e(W2,nV),e(nV,$Go),e(W2,kGo),e(H,SGo),e(H,Q2),e(Q2,ahe),e(ahe,RGo),e(Q2,PGo),e(Q2,sV),e(sV,BGo),e(Q2,IGo),e(H,qGo),e(H,H2),e(H2,nhe),e(nhe,NGo),e(H2,jGo),e(H2,lV),e(lV,DGo),e(H2,GGo),e(H,OGo),e(H,U2),e(U2,she),e(she,VGo),e(U2,XGo),e(U2,iV),e(iV,zGo),e(U2,WGo),e(H,QGo),e(H,J2),e(J2,lhe),e(lhe,HGo),e(J2,UGo),e(J2,dV),e(dV,JGo),e(J2,YGo),e(H,KGo),e(H,Y2),e(Y2,ihe),e(ihe,ZGo),e(Y2,eOo),e(Y2,cV),e(cV,oOo),e(Y2,rOo),e(H,tOo),e(H,K2),e(K2,dhe),e(dhe,aOo),e(K2,nOo),e(K2,fV),e(fV,sOo),e(K2,lOo),e(H,iOo),e(H,Z2),e(Z2,che),e(che,dOo),e(Z2,cOo),e(Z2,mV),e(mV,fOo),e(Z2,mOo),e(H,gOo),e(H,ev),e(ev,fhe),e(fhe,hOo),e(ev,pOo),e(ev,gV),e(gV,uOo),e(ev,_Oo),e(H,bOo),e(H,ov),e(ov,mhe),e(mhe,vOo),e(ov,FOo),e(ov,hV),e(hV,TOo),e(ov,MOo),e(H,EOo),e(H,rv),e(rv,ghe),e(ghe,COo),e(rv,wOo),e(rv,pV),e(pV,AOo),e(rv,yOo),e(H,LOo),e(H,tv),e(tv,hhe),e(hhe,xOo),e(tv,$Oo),e(tv,uV),e(uV,kOo),e(tv,SOo),e(ao,ROo),e(ao,av),e(av,POo),e(av,phe),e(phe,BOo),e(av,IOo),e(av,uhe),e(uhe,qOo),e(ao,NOo),M(nv,ao,null),b(f,gNe,_),b(f,Ki,_),e(Ki,sv),e(sv,_he),M(D6,_he,null),e(Ki,jOo),e(Ki,bhe),e(bhe,DOo),b(f,hNe,_),b(f,qo,_),M(G6,qo,null),e(qo,GOo),e(qo,Zi),e(Zi,OOo),e(Zi,_V),e(_V,VOo),e(Zi,XOo),e(Zi,bV),e(bV,zOo),e(Zi,WOo),e(qo,QOo),e(qo,O6),e(O6,HOo),e(O6,vhe),e(vhe,UOo),e(O6,JOo),e(qo,YOo),e(qo,mt),M(V6,mt,null),e(mt,KOo),e(mt,Fhe),e(Fhe,ZOo),e(mt,eVo),e(mt,ed),e(ed,oVo),e(ed,The),e(The,rVo),e(ed,tVo),e(ed,vV),e(vV,aVo),e(ed,nVo),e(mt,sVo),M(lv,mt,null),e(qo,lVo),e(qo,no),M(X6,no,null),e(no,iVo),e(no,Mhe),e(Mhe,dVo),e(no,cVo),e(no,qa),e(qa,fVo),e(qa,Ehe),e(Ehe,mVo),e(qa,gVo),e(qa,Che),e(Che,hVo),e(qa,pVo),e(qa,whe),e(whe,uVo),e(qa,_Vo),e(no,bVo),e(no,V),e(V,iv),e(iv,Ahe),e(Ahe,vVo),e(iv,FVo),e(iv,FV),e(FV,TVo),e(iv,MVo),e(V,EVo),e(V,dv),e(dv,yhe),e(yhe,CVo),e(dv,wVo),e(dv,TV),e(TV,AVo),e(dv,yVo),e(V,LVo),e(V,cv),e(cv,Lhe),e(Lhe,xVo),e(cv,$Vo),e(cv,MV),e(MV,kVo),e(cv,SVo),e(V,RVo),e(V,fv),e(fv,xhe),e(xhe,PVo),e(fv,BVo),e(fv,EV),e(EV,IVo),e(fv,qVo),e(V,NVo),e(V,mv),e(mv,$he),e($he,jVo),e(mv,DVo),e(mv,CV),e(CV,GVo),e(mv,OVo),e(V,VVo),e(V,gv),e(gv,khe),e(khe,XVo),e(gv,zVo),e(gv,wV),e(wV,WVo),e(gv,QVo),e(V,HVo),e(V,hv),e(hv,She),e(She,UVo),e(hv,JVo),e(hv,AV),e(AV,YVo),e(hv,KVo),e(V,ZVo),e(V,pv),e(pv,Rhe),e(Rhe,eXo),e(pv,oXo),e(pv,yV),e(yV,rXo),e(pv,tXo),e(V,aXo),e(V,uv),e(uv,Phe),e(Phe,nXo),e(uv,sXo),e(uv,LV),e(LV,lXo),e(uv,iXo),e(V,dXo),e(V,_v),e(_v,Bhe),e(Bhe,cXo),e(_v,fXo),e(_v,xV),e(xV,mXo),e(_v,gXo),e(V,hXo),e(V,bv),e(bv,Ihe),e(Ihe,pXo),e(bv,uXo),e(bv,$V),e($V,_Xo),e(bv,bXo),e(V,vXo),e(V,vv),e(vv,qhe),e(qhe,FXo),e(vv,TXo),e(vv,kV),e(kV,MXo),e(vv,EXo),e(V,CXo),e(V,Fv),e(Fv,Nhe),e(Nhe,wXo),e(Fv,AXo),e(Fv,SV),e(SV,yXo),e(Fv,LXo),e(V,xXo),e(V,Tv),e(Tv,jhe),e(jhe,$Xo),e(Tv,kXo),e(Tv,RV),e(RV,SXo),e(Tv,RXo),e(V,PXo),e(V,Mv),e(Mv,Dhe),e(Dhe,BXo),e(Mv,IXo),e(Mv,PV),e(PV,qXo),e(Mv,NXo),e(V,jXo),e(V,Ev),e(Ev,Ghe),e(Ghe,DXo),e(Ev,GXo),e(Ev,BV),e(BV,OXo),e(Ev,VXo),e(V,XXo),e(V,Cv),e(Cv,Ohe),e(Ohe,zXo),e(Cv,WXo),e(Cv,IV),e(IV,QXo),e(Cv,HXo),e(V,UXo),e(V,wv),e(wv,Vhe),e(Vhe,JXo),e(wv,YXo),e(wv,qV),e(qV,KXo),e(wv,ZXo),e(V,ezo),e(V,Av),e(Av,Xhe),e(Xhe,ozo),e(Av,rzo),e(Av,NV),e(NV,tzo),e(Av,azo),e(V,nzo),e(V,yv),e(yv,zhe),e(zhe,szo),e(yv,lzo),e(yv,jV),e(jV,izo),e(yv,dzo),e(V,czo),e(V,Lv),e(Lv,Whe),e(Whe,fzo),e(Lv,mzo),e(Lv,DV),e(DV,gzo),e(Lv,hzo),e(V,pzo),e(V,xv),e(xv,Qhe),e(Qhe,uzo),e(xv,_zo),e(xv,GV),e(GV,bzo),e(xv,vzo),e(V,Fzo),e(V,$v),e($v,Hhe),e(Hhe,Tzo),e($v,Mzo),e($v,OV),e(OV,Ezo),e($v,Czo),e(V,wzo),e(V,kv),e(kv,Uhe),e(Uhe,Azo),e(kv,yzo),e(kv,VV),e(VV,Lzo),e(kv,xzo),e(V,$zo),e(V,Sv),e(Sv,Jhe),e(Jhe,kzo),e(Sv,Szo),e(Sv,XV),e(XV,Rzo),e(Sv,Pzo),e(V,Bzo),e(V,Rv),e(Rv,Yhe),e(Yhe,Izo),e(Rv,qzo),e(Rv,zV),e(zV,Nzo),e(Rv,jzo),e(V,Dzo),e(V,Pv),e(Pv,Khe),e(Khe,Gzo),e(Pv,Ozo),e(Pv,WV),e(WV,Vzo),e(Pv,Xzo),e(V,zzo),e(V,Bv),e(Bv,Zhe),e(Zhe,Wzo),e(Bv,Qzo),e(Bv,QV),e(QV,Hzo),e(Bv,Uzo),e(V,Jzo),e(V,Iv),e(Iv,epe),e(epe,Yzo),e(Iv,Kzo),e(Iv,HV),e(HV,Zzo),e(Iv,eWo),e(V,oWo),e(V,qv),e(qv,ope),e(ope,rWo),e(qv,tWo),e(qv,UV),e(UV,aWo),e(qv,nWo),e(V,sWo),e(V,Nv),e(Nv,rpe),e(rpe,lWo),e(Nv,iWo),e(Nv,JV),e(JV,dWo),e(Nv,cWo),e(V,fWo),e(V,jv),e(jv,tpe),e(tpe,mWo),e(jv,gWo),e(jv,YV),e(YV,hWo),e(jv,pWo),e(V,uWo),e(V,Dv),e(Dv,ape),e(ape,_Wo),e(Dv,bWo),e(Dv,KV),e(KV,vWo),e(Dv,FWo),e(V,TWo),e(V,Gv),e(Gv,npe),e(npe,MWo),e(Gv,EWo),e(Gv,ZV),e(ZV,CWo),e(Gv,wWo),e(V,AWo),e(V,Ov),e(Ov,spe),e(spe,yWo),e(Ov,LWo),e(Ov,eX),e(eX,xWo),e(Ov,$Wo),e(V,kWo),e(V,Vv),e(Vv,lpe),e(lpe,SWo),e(Vv,RWo),e(Vv,oX),e(oX,PWo),e(Vv,BWo),e(V,IWo),e(V,Xv),e(Xv,ipe),e(ipe,qWo),e(Xv,NWo),e(Xv,rX),e(rX,jWo),e(Xv,DWo),e(V,GWo),e(V,zv),e(zv,dpe),e(dpe,OWo),e(zv,VWo),e(zv,tX),e(tX,XWo),e(zv,zWo),e(V,WWo),e(V,Wv),e(Wv,cpe),e(cpe,QWo),e(Wv,HWo),e(Wv,aX),e(aX,UWo),e(Wv,JWo),e(V,YWo),e(V,Qv),e(Qv,fpe),e(fpe,KWo),e(Qv,ZWo),e(Qv,nX),e(nX,eQo),e(Qv,oQo),e(no,rQo),e(no,Hv),e(Hv,tQo),e(Hv,mpe),e(mpe,aQo),e(Hv,nQo),e(Hv,gpe),e(gpe,sQo),e(no,lQo),M(Uv,no,null),b(f,pNe,_),b(f,od,_),e(od,Jv),e(Jv,hpe),M(z6,hpe,null),e(od,iQo),e(od,ppe),e(ppe,dQo),b(f,uNe,_),b(f,No,_),M(W6,No,null),e(No,cQo),e(No,rd),e(rd,fQo),e(rd,sX),e(sX,mQo),e(rd,gQo),e(rd,lX),e(lX,hQo),e(rd,pQo),e(No,uQo),e(No,Q6),e(Q6,_Qo),e(Q6,upe),e(upe,bQo),e(Q6,vQo),e(No,FQo),e(No,gt),M(H6,gt,null),e(gt,TQo),e(gt,_pe),e(_pe,MQo),e(gt,EQo),e(gt,td),e(td,CQo),e(td,bpe),e(bpe,wQo),e(td,AQo),e(td,iX),e(iX,yQo),e(td,LQo),e(gt,xQo),M(Yv,gt,null),e(No,$Qo),e(No,so),M(U6,so,null),e(so,kQo),e(so,vpe),e(vpe,SQo),e(so,RQo),e(so,Na),e(Na,PQo),e(Na,Fpe),e(Fpe,BQo),e(Na,IQo),e(Na,Tpe),e(Tpe,qQo),e(Na,NQo),e(Na,Mpe),e(Mpe,jQo),e(Na,DQo),e(so,GQo),e(so,Epe),e(Epe,Kv),e(Kv,Cpe),e(Cpe,OQo),e(Kv,VQo),e(Kv,dX),e(dX,XQo),e(Kv,zQo),e(so,WQo),e(so,Zv),e(Zv,QQo),e(Zv,wpe),e(wpe,HQo),e(Zv,UQo),e(Zv,Ape),e(Ape,JQo),e(so,YQo),M(eF,so,null),b(f,_Ne,_),b(f,ad,_),e(ad,oF),e(oF,ype),M(J6,ype,null),e(ad,KQo),e(ad,Lpe),e(Lpe,ZQo),b(f,bNe,_),b(f,jo,_),M(Y6,jo,null),e(jo,eHo),e(jo,nd),e(nd,oHo),e(nd,cX),e(cX,rHo),e(nd,tHo),e(nd,fX),e(fX,aHo),e(nd,nHo),e(jo,sHo),e(jo,K6),e(K6,lHo),e(K6,xpe),e(xpe,iHo),e(K6,dHo),e(jo,cHo),e(jo,ht),M(Z6,ht,null),e(ht,fHo),e(ht,$pe),e($pe,mHo),e(ht,gHo),e(ht,sd),e(sd,hHo),e(sd,kpe),e(kpe,pHo),e(sd,uHo),e(sd,mX),e(mX,_Ho),e(sd,bHo),e(ht,vHo),M(rF,ht,null),e(jo,FHo),e(jo,lo),M(ey,lo,null),e(lo,THo),e(lo,Spe),e(Spe,MHo),e(lo,EHo),e(lo,ja),e(ja,CHo),e(ja,Rpe),e(Rpe,wHo),e(ja,AHo),e(ja,Ppe),e(Ppe,yHo),e(ja,LHo),e(ja,Bpe),e(Bpe,xHo),e(ja,$Ho),e(lo,kHo),e(lo,Fe),e(Fe,tF),e(tF,Ipe),e(Ipe,SHo),e(tF,RHo),e(tF,gX),e(gX,PHo),e(tF,BHo),e(Fe,IHo),e(Fe,aF),e(aF,qpe),e(qpe,qHo),e(aF,NHo),e(aF,hX),e(hX,jHo),e(aF,DHo),e(Fe,GHo),e(Fe,nF),e(nF,Npe),e(Npe,OHo),e(nF,VHo),e(nF,pX),e(pX,XHo),e(nF,zHo),e(Fe,WHo),e(Fe,sF),e(sF,jpe),e(jpe,QHo),e(sF,HHo),e(sF,uX),e(uX,UHo),e(sF,JHo),e(Fe,YHo),e(Fe,Bs),e(Bs,Dpe),e(Dpe,KHo),e(Bs,ZHo),e(Bs,_X),e(_X,eUo),e(Bs,oUo),e(Bs,bX),e(bX,rUo),e(Bs,tUo),e(Fe,aUo),e(Fe,lF),e(lF,Gpe),e(Gpe,nUo),e(lF,sUo),e(lF,vX),e(vX,lUo),e(lF,iUo),e(Fe,dUo),e(Fe,pt),e(pt,Ope),e(Ope,cUo),e(pt,fUo),e(pt,FX),e(FX,mUo),e(pt,gUo),e(pt,TX),e(TX,hUo),e(pt,pUo),e(pt,MX),e(MX,uUo),e(pt,_Uo),e(Fe,bUo),e(Fe,iF),e(iF,Vpe),e(Vpe,vUo),e(iF,FUo),e(iF,EX),e(EX,TUo),e(iF,MUo),e(Fe,EUo),e(Fe,dF),e(dF,Xpe),e(Xpe,CUo),e(dF,wUo),e(dF,CX),e(CX,AUo),e(dF,yUo),e(Fe,LUo),e(Fe,cF),e(cF,zpe),e(zpe,xUo),e(cF,$Uo),e(cF,wX),e(wX,kUo),e(cF,SUo),e(Fe,RUo),e(Fe,fF),e(fF,Wpe),e(Wpe,PUo),e(fF,BUo),e(fF,AX),e(AX,IUo),e(fF,qUo),e(Fe,NUo),e(Fe,mF),e(mF,Qpe),e(Qpe,jUo),e(mF,DUo),e(mF,yX),e(yX,GUo),e(mF,OUo),e(Fe,VUo),e(Fe,gF),e(gF,Hpe),e(Hpe,XUo),e(gF,zUo),e(gF,LX),e(LX,WUo),e(gF,QUo),e(Fe,HUo),e(Fe,hF),e(hF,Upe),e(Upe,UUo),e(hF,JUo),e(hF,xX),e(xX,YUo),e(hF,KUo),e(lo,ZUo),e(lo,pF),e(pF,eJo),e(pF,Jpe),e(Jpe,oJo),e(pF,rJo),e(pF,Ype),e(Ype,tJo),e(lo,aJo),M(uF,lo,null),b(f,vNe,_),b(f,ld,_),e(ld,_F),e(_F,Kpe),M(oy,Kpe,null),e(ld,nJo),e(ld,Zpe),e(Zpe,sJo),b(f,FNe,_),b(f,Do,_),M(ry,Do,null),e(Do,lJo),e(Do,id),e(id,iJo),e(id,$X),e($X,dJo),e(id,cJo),e(id,kX),e(kX,fJo),e(id,mJo),e(Do,gJo),e(Do,ty),e(ty,hJo),e(ty,eue),e(eue,pJo),e(ty,uJo),e(Do,_Jo),e(Do,ut),M(ay,ut,null),e(ut,bJo),e(ut,oue),e(oue,vJo),e(ut,FJo),e(ut,dd),e(dd,TJo),e(dd,rue),e(rue,MJo),e(dd,EJo),e(dd,SX),e(SX,CJo),e(dd,wJo),e(ut,AJo),M(bF,ut,null),e(Do,yJo),e(Do,io),M(ny,io,null),e(io,LJo),e(io,tue),e(tue,xJo),e(io,$Jo),e(io,Da),e(Da,kJo),e(Da,aue),e(aue,SJo),e(Da,RJo),e(Da,nue),e(nue,PJo),e(Da,BJo),e(Da,sue),e(sue,IJo),e(Da,qJo),e(io,NJo),e(io,lue),e(lue,vF),e(vF,iue),e(iue,jJo),e(vF,DJo),e(vF,RX),e(RX,GJo),e(vF,OJo),e(io,VJo),e(io,FF),e(FF,XJo),e(FF,due),e(due,zJo),e(FF,WJo),e(FF,cue),e(cue,QJo),e(io,HJo),M(TF,io,null),b(f,TNe,_),b(f,cd,_),e(cd,MF),e(MF,fue),M(sy,fue,null),e(cd,UJo),e(cd,mue),e(mue,JJo),b(f,MNe,_),b(f,Go,_),M(ly,Go,null),e(Go,YJo),e(Go,fd),e(fd,KJo),e(fd,PX),e(PX,ZJo),e(fd,eYo),e(fd,BX),e(BX,oYo),e(fd,rYo),e(Go,tYo),e(Go,iy),e(iy,aYo),e(iy,gue),e(gue,nYo),e(iy,sYo),e(Go,lYo),e(Go,_t),M(dy,_t,null),e(_t,iYo),e(_t,hue),e(hue,dYo),e(_t,cYo),e(_t,md),e(md,fYo),e(md,pue),e(pue,mYo),e(md,gYo),e(md,IX),e(IX,hYo),e(md,pYo),e(_t,uYo),M(EF,_t,null),e(Go,_Yo),e(Go,co),M(cy,co,null),e(co,bYo),e(co,uue),e(uue,vYo),e(co,FYo),e(co,Ga),e(Ga,TYo),e(Ga,_ue),e(_ue,MYo),e(Ga,EYo),e(Ga,bue),e(bue,CYo),e(Ga,wYo),e(Ga,vue),e(vue,AYo),e(Ga,yYo),e(co,LYo),e(co,ke),e(ke,CF),e(CF,Fue),e(Fue,xYo),e(CF,$Yo),e(CF,qX),e(qX,kYo),e(CF,SYo),e(ke,RYo),e(ke,wF),e(wF,Tue),e(Tue,PYo),e(wF,BYo),e(wF,NX),e(NX,IYo),e(wF,qYo),e(ke,NYo),e(ke,AF),e(AF,Mue),e(Mue,jYo),e(AF,DYo),e(AF,jX),e(jX,GYo),e(AF,OYo),e(ke,VYo),e(ke,yF),e(yF,Eue),e(Eue,XYo),e(yF,zYo),e(yF,DX),e(DX,WYo),e(yF,QYo),e(ke,HYo),e(ke,LF),e(LF,Cue),e(Cue,UYo),e(LF,JYo),e(LF,GX),e(GX,YYo),e(LF,KYo),e(ke,ZYo),e(ke,xF),e(xF,wue),e(wue,eKo),e(xF,oKo),e(xF,OX),e(OX,rKo),e(xF,tKo),e(ke,aKo),e(ke,$F),e($F,Aue),e(Aue,nKo),e($F,sKo),e($F,VX),e(VX,lKo),e($F,iKo),e(ke,dKo),e(ke,kF),e(kF,yue),e(yue,cKo),e(kF,fKo),e(kF,XX),e(XX,mKo),e(kF,gKo),e(ke,hKo),e(ke,SF),e(SF,Lue),e(Lue,pKo),e(SF,uKo),e(SF,zX),e(zX,_Ko),e(SF,bKo),e(co,vKo),e(co,RF),e(RF,FKo),e(RF,xue),e(xue,TKo),e(RF,MKo),e(RF,$ue),e($ue,EKo),e(co,CKo),M(PF,co,null),b(f,ENe,_),b(f,gd,_),e(gd,BF),e(BF,kue),M(fy,kue,null),e(gd,wKo),e(gd,Sue),e(Sue,AKo),b(f,CNe,_),b(f,Oo,_),M(my,Oo,null),e(Oo,yKo),e(Oo,hd),e(hd,LKo),e(hd,WX),e(WX,xKo),e(hd,$Ko),e(hd,QX),e(QX,kKo),e(hd,SKo),e(Oo,RKo),e(Oo,gy),e(gy,PKo),e(gy,Rue),e(Rue,BKo),e(gy,IKo),e(Oo,qKo),e(Oo,bt),M(hy,bt,null),e(bt,NKo),e(bt,Pue),e(Pue,jKo),e(bt,DKo),e(bt,pd),e(pd,GKo),e(pd,Bue),e(Bue,OKo),e(pd,VKo),e(pd,HX),e(HX,XKo),e(pd,zKo),e(bt,WKo),M(IF,bt,null),e(Oo,QKo),e(Oo,fo),M(py,fo,null),e(fo,HKo),e(fo,Iue),e(Iue,UKo),e(fo,JKo),e(fo,Oa),e(Oa,YKo),e(Oa,que),e(que,KKo),e(Oa,ZKo),e(Oa,Nue),e(Nue,eZo),e(Oa,oZo),e(Oa,jue),e(jue,rZo),e(Oa,tZo),e(fo,aZo),e(fo,Kr),e(Kr,qF),e(qF,Due),e(Due,nZo),e(qF,sZo),e(qF,UX),e(UX,lZo),e(qF,iZo),e(Kr,dZo),e(Kr,NF),e(NF,Gue),e(Gue,cZo),e(NF,fZo),e(NF,JX),e(JX,mZo),e(NF,gZo),e(Kr,hZo),e(Kr,jF),e(jF,Oue),e(Oue,pZo),e(jF,uZo),e(jF,YX),e(YX,_Zo),e(jF,bZo),e(Kr,vZo),e(Kr,DF),e(DF,Vue),e(Vue,FZo),e(DF,TZo),e(DF,KX),e(KX,MZo),e(DF,EZo),e(Kr,CZo),e(Kr,GF),e(GF,Xue),e(Xue,wZo),e(GF,AZo),e(GF,ZX),e(ZX,yZo),e(GF,LZo),e(fo,xZo),e(fo,OF),e(OF,$Zo),e(OF,zue),e(zue,kZo),e(OF,SZo),e(OF,Wue),e(Wue,RZo),e(fo,PZo),M(VF,fo,null),b(f,wNe,_),b(f,ud,_),e(ud,XF),e(XF,Que),M(uy,Que,null),e(ud,BZo),e(ud,Hue),e(Hue,IZo),b(f,ANe,_),b(f,Vo,_),M(_y,Vo,null),e(Vo,qZo),e(Vo,_d),e(_d,NZo),e(_d,ez),e(ez,jZo),e(_d,DZo),e(_d,oz),e(oz,GZo),e(_d,OZo),e(Vo,VZo),e(Vo,by),e(by,XZo),e(by,Uue),e(Uue,zZo),e(by,WZo),e(Vo,QZo),e(Vo,vt),M(vy,vt,null),e(vt,HZo),e(vt,Jue),e(Jue,UZo),e(vt,JZo),e(vt,bd),e(bd,YZo),e(bd,Yue),e(Yue,KZo),e(bd,ZZo),e(bd,rz),e(rz,eer),e(bd,oer),e(vt,rer),M(zF,vt,null),e(Vo,ter),e(Vo,mo),M(Fy,mo,null),e(mo,aer),e(mo,Kue),e(Kue,ner),e(mo,ser),e(mo,Va),e(Va,ler),e(Va,Zue),e(Zue,ier),e(Va,der),e(Va,e_e),e(e_e,cer),e(Va,fer),e(Va,o_e),e(o_e,mer),e(Va,ger),e(mo,her),e(mo,Se),e(Se,WF),e(WF,r_e),e(r_e,per),e(WF,uer),e(WF,tz),e(tz,_er),e(WF,ber),e(Se,ver),e(Se,QF),e(QF,t_e),e(t_e,Fer),e(QF,Ter),e(QF,az),e(az,Mer),e(QF,Eer),e(Se,Cer),e(Se,HF),e(HF,a_e),e(a_e,wer),e(HF,Aer),e(HF,nz),e(nz,yer),e(HF,Ler),e(Se,xer),e(Se,UF),e(UF,n_e),e(n_e,$er),e(UF,ker),e(UF,sz),e(sz,Ser),e(UF,Rer),e(Se,Per),e(Se,JF),e(JF,s_e),e(s_e,Ber),e(JF,Ier),e(JF,lz),e(lz,qer),e(JF,Ner),e(Se,jer),e(Se,YF),e(YF,l_e),e(l_e,Der),e(YF,Ger),e(YF,iz),e(iz,Oer),e(YF,Ver),e(Se,Xer),e(Se,KF),e(KF,i_e),e(i_e,zer),e(KF,Wer),e(KF,dz),e(dz,Qer),e(KF,Her),e(Se,Uer),e(Se,ZF),e(ZF,d_e),e(d_e,Jer),e(ZF,Yer),e(ZF,cz),e(cz,Ker),e(ZF,Zer),e(Se,eor),e(Se,eT),e(eT,c_e),e(c_e,oor),e(eT,ror),e(eT,fz),e(fz,tor),e(eT,aor),e(mo,nor),e(mo,oT),e(oT,sor),e(oT,f_e),e(f_e,lor),e(oT,ior),e(oT,m_e),e(m_e,dor),e(mo,cor),M(rT,mo,null),b(f,yNe,_),b(f,vd,_),e(vd,tT),e(tT,g_e),M(Ty,g_e,null),e(vd,mor),e(vd,h_e),e(h_e,gor),b(f,LNe,_),b(f,Xo,_),M(My,Xo,null),e(Xo,hor),e(Xo,Fd),e(Fd,por),e(Fd,mz),e(mz,uor),e(Fd,_or),e(Fd,gz),e(gz,bor),e(Fd,vor),e(Xo,For),e(Xo,Ey),e(Ey,Tor),e(Ey,p_e),e(p_e,Mor),e(Ey,Eor),e(Xo,Cor),e(Xo,Ft),M(Cy,Ft,null),e(Ft,wor),e(Ft,u_e),e(u_e,Aor),e(Ft,yor),e(Ft,Td),e(Td,Lor),e(Td,__e),e(__e,xor),e(Td,$or),e(Td,hz),e(hz,kor),e(Td,Sor),e(Ft,Ror),M(aT,Ft,null),e(Xo,Por),e(Xo,go),M(wy,go,null),e(go,Bor),e(go,b_e),e(b_e,Ior),e(go,qor),e(go,Xa),e(Xa,Nor),e(Xa,v_e),e(v_e,jor),e(Xa,Dor),e(Xa,F_e),e(F_e,Gor),e(Xa,Oor),e(Xa,T_e),e(T_e,Vor),e(Xa,Xor),e(go,zor),e(go,Ay),e(Ay,nT),e(nT,M_e),e(M_e,Wor),e(nT,Qor),e(nT,pz),e(pz,Hor),e(nT,Uor),e(Ay,Jor),e(Ay,sT),e(sT,E_e),e(E_e,Yor),e(sT,Kor),e(sT,uz),e(uz,Zor),e(sT,err),e(go,orr),e(go,lT),e(lT,rrr),e(lT,C_e),e(C_e,trr),e(lT,arr),e(lT,w_e),e(w_e,nrr),e(go,srr),M(iT,go,null),b(f,xNe,_),b(f,Md,_),e(Md,dT),e(dT,A_e),M(yy,A_e,null),e(Md,lrr),e(Md,y_e),e(y_e,irr),b(f,$Ne,_),b(f,zo,_),M(Ly,zo,null),e(zo,drr),e(zo,Ed),e(Ed,crr),e(Ed,_z),e(_z,frr),e(Ed,mrr),e(Ed,bz),e(bz,grr),e(Ed,hrr),e(zo,prr),e(zo,xy),e(xy,urr),e(xy,L_e),e(L_e,_rr),e(xy,brr),e(zo,vrr),e(zo,Tt),M($y,Tt,null),e(Tt,Frr),e(Tt,x_e),e(x_e,Trr),e(Tt,Mrr),e(Tt,Cd),e(Cd,Err),e(Cd,$_e),e($_e,Crr),e(Cd,wrr),e(Cd,vz),e(vz,Arr),e(Cd,yrr),e(Tt,Lrr),M(cT,Tt,null),e(zo,xrr),e(zo,ho),M(ky,ho,null),e(ho,$rr),e(ho,k_e),e(k_e,krr),e(ho,Srr),e(ho,za),e(za,Rrr),e(za,S_e),e(S_e,Prr),e(za,Brr),e(za,R_e),e(R_e,Irr),e(za,qrr),e(za,P_e),e(P_e,Nrr),e(za,jrr),e(ho,Drr),e(ho,Zr),e(Zr,fT),e(fT,B_e),e(B_e,Grr),e(fT,Orr),e(fT,Fz),e(Fz,Vrr),e(fT,Xrr),e(Zr,zrr),e(Zr,mT),e(mT,I_e),e(I_e,Wrr),e(mT,Qrr),e(mT,Tz),e(Tz,Hrr),e(mT,Urr),e(Zr,Jrr),e(Zr,gT),e(gT,q_e),e(q_e,Yrr),e(gT,Krr),e(gT,Mz),e(Mz,Zrr),e(gT,etr),e(Zr,otr),e(Zr,hT),e(hT,N_e),e(N_e,rtr),e(hT,ttr),e(hT,Ez),e(Ez,atr),e(hT,ntr),e(Zr,str),e(Zr,pT),e(pT,j_e),e(j_e,ltr),e(pT,itr),e(pT,Cz),e(Cz,dtr),e(pT,ctr),e(ho,ftr),e(ho,uT),e(uT,mtr),e(uT,D_e),e(D_e,gtr),e(uT,htr),e(uT,G_e),e(G_e,ptr),e(ho,utr),M(_T,ho,null),b(f,kNe,_),b(f,wd,_),e(wd,bT),e(bT,O_e),M(Sy,O_e,null),e(wd,_tr),e(wd,V_e),e(V_e,btr),b(f,SNe,_),b(f,Wo,_),M(Ry,Wo,null),e(Wo,vtr),e(Wo,Ad),e(Ad,Ftr),e(Ad,wz),e(wz,Ttr),e(Ad,Mtr),e(Ad,Az),e(Az,Etr),e(Ad,Ctr),e(Wo,wtr),e(Wo,Py),e(Py,Atr),e(Py,X_e),e(X_e,ytr),e(Py,Ltr),e(Wo,xtr),e(Wo,Mt),M(By,Mt,null),e(Mt,$tr),e(Mt,z_e),e(z_e,ktr),e(Mt,Str),e(Mt,yd),e(yd,Rtr),e(yd,W_e),e(W_e,Ptr),e(yd,Btr),e(yd,yz),e(yz,Itr),e(yd,qtr),e(Mt,Ntr),M(vT,Mt,null),e(Wo,jtr),e(Wo,po),M(Iy,po,null),e(po,Dtr),e(po,Q_e),e(Q_e,Gtr),e(po,Otr),e(po,Wa),e(Wa,Vtr),e(Wa,H_e),e(H_e,Xtr),e(Wa,ztr),e(Wa,U_e),e(U_e,Wtr),e(Wa,Qtr),e(Wa,J_e),e(J_e,Htr),e(Wa,Utr),e(po,Jtr),e(po,Ld),e(Ld,FT),e(FT,Y_e),e(Y_e,Ytr),e(FT,Ktr),e(FT,Lz),e(Lz,Ztr),e(FT,ear),e(Ld,oar),e(Ld,TT),e(TT,K_e),e(K_e,rar),e(TT,tar),e(TT,xz),e(xz,aar),e(TT,nar),e(Ld,sar),e(Ld,MT),e(MT,Z_e),e(Z_e,lar),e(MT,iar),e(MT,$z),e($z,dar),e(MT,car),e(po,far),e(po,ET),e(ET,mar),e(ET,e3e),e(e3e,gar),e(ET,har),e(ET,o3e),e(o3e,par),e(po,uar),M(CT,po,null),b(f,RNe,_),b(f,xd,_),e(xd,wT),e(wT,r3e),M(qy,r3e,null),e(xd,_ar),e(xd,t3e),e(t3e,bar),b(f,PNe,_),b(f,Qo,_),M(Ny,Qo,null),e(Qo,Far),e(Qo,$d),e($d,Tar),e($d,kz),e(kz,Mar),e($d,Ear),e($d,Sz),e(Sz,Car),e($d,war),e(Qo,Aar),e(Qo,jy),e(jy,yar),e(jy,a3e),e(a3e,Lar),e(jy,xar),e(Qo,$ar),e(Qo,Et),M(Dy,Et,null),e(Et,kar),e(Et,n3e),e(n3e,Sar),e(Et,Rar),e(Et,kd),e(kd,Par),e(kd,s3e),e(s3e,Bar),e(kd,Iar),e(kd,Rz),e(Rz,qar),e(kd,Nar),e(Et,jar),M(AT,Et,null),e(Qo,Dar),e(Qo,uo),M(Gy,uo,null),e(uo,Gar),e(uo,l3e),e(l3e,Oar),e(uo,Var),e(uo,Qa),e(Qa,Xar),e(Qa,i3e),e(i3e,zar),e(Qa,War),e(Qa,d3e),e(d3e,Qar),e(Qa,Har),e(Qa,c3e),e(c3e,Uar),e(Qa,Jar),e(uo,Yar),e(uo,Oy),e(Oy,yT),e(yT,f3e),e(f3e,Kar),e(yT,Zar),e(yT,Pz),e(Pz,enr),e(yT,onr),e(Oy,rnr),e(Oy,LT),e(LT,m3e),e(m3e,tnr),e(LT,anr),e(LT,Bz),e(Bz,nnr),e(LT,snr),e(uo,lnr),e(uo,xT),e(xT,inr),e(xT,g3e),e(g3e,dnr),e(xT,cnr),e(xT,h3e),e(h3e,fnr),e(uo,mnr),M($T,uo,null),b(f,BNe,_),b(f,Sd,_),e(Sd,kT),e(kT,p3e),M(Vy,p3e,null),e(Sd,gnr),e(Sd,u3e),e(u3e,hnr),b(f,INe,_),b(f,Ho,_),M(Xy,Ho,null),e(Ho,pnr),e(Ho,Rd),e(Rd,unr),e(Rd,Iz),e(Iz,_nr),e(Rd,bnr),e(Rd,qz),e(qz,vnr),e(Rd,Fnr),e(Ho,Tnr),e(Ho,zy),e(zy,Mnr),e(zy,_3e),e(_3e,Enr),e(zy,Cnr),e(Ho,wnr),e(Ho,Ct),M(Wy,Ct,null),e(Ct,Anr),e(Ct,b3e),e(b3e,ynr),e(Ct,Lnr),e(Ct,Pd),e(Pd,xnr),e(Pd,v3e),e(v3e,$nr),e(Pd,knr),e(Pd,Nz),e(Nz,Snr),e(Pd,Rnr),e(Ct,Pnr),M(ST,Ct,null),e(Ho,Bnr),e(Ho,_o),M(Qy,_o,null),e(_o,Inr),e(_o,F3e),e(F3e,qnr),e(_o,Nnr),e(_o,Ha),e(Ha,jnr),e(Ha,T3e),e(T3e,Dnr),e(Ha,Gnr),e(Ha,M3e),e(M3e,Onr),e(Ha,Vnr),e(Ha,E3e),e(E3e,Xnr),e(Ha,znr),e(_o,Wnr),e(_o,C3e),e(C3e,RT),e(RT,w3e),e(w3e,Qnr),e(RT,Hnr),e(RT,jz),e(jz,Unr),e(RT,Jnr),e(_o,Ynr),e(_o,PT),e(PT,Knr),e(PT,A3e),e(A3e,Znr),e(PT,esr),e(PT,y3e),e(y3e,osr),e(_o,rsr),M(BT,_o,null),b(f,qNe,_),b(f,Bd,_),e(Bd,IT),e(IT,L3e),M(Hy,L3e,null),e(Bd,tsr),e(Bd,x3e),e(x3e,asr),b(f,NNe,_),b(f,Uo,_),M(Uy,Uo,null),e(Uo,nsr),e(Uo,Id),e(Id,ssr),e(Id,Dz),e(Dz,lsr),e(Id,isr),e(Id,Gz),e(Gz,dsr),e(Id,csr),e(Uo,fsr),e(Uo,Jy),e(Jy,msr),e(Jy,$3e),e($3e,gsr),e(Jy,hsr),e(Uo,psr),e(Uo,wt),M(Yy,wt,null),e(wt,usr),e(wt,k3e),e(k3e,_sr),e(wt,bsr),e(wt,qd),e(qd,vsr),e(qd,S3e),e(S3e,Fsr),e(qd,Tsr),e(qd,Oz),e(Oz,Msr),e(qd,Esr),e(wt,Csr),M(qT,wt,null),e(Uo,wsr),e(Uo,bo),M(Ky,bo,null),e(bo,Asr),e(bo,R3e),e(R3e,ysr),e(bo,Lsr),e(bo,Ua),e(Ua,xsr),e(Ua,P3e),e(P3e,$sr),e(Ua,ksr),e(Ua,B3e),e(B3e,Ssr),e(Ua,Rsr),e(Ua,I3e),e(I3e,Psr),e(Ua,Bsr),e(bo,Isr),e(bo,Ja),e(Ja,NT),e(NT,q3e),e(q3e,qsr),e(NT,Nsr),e(NT,Vz),e(Vz,jsr),e(NT,Dsr),e(Ja,Gsr),e(Ja,jT),e(jT,N3e),e(N3e,Osr),e(jT,Vsr),e(jT,Xz),e(Xz,Xsr),e(jT,zsr),e(Ja,Wsr),e(Ja,DT),e(DT,j3e),e(j3e,Qsr),e(DT,Hsr),e(DT,zz),e(zz,Usr),e(DT,Jsr),e(Ja,Ysr),e(Ja,GT),e(GT,D3e),e(D3e,Ksr),e(GT,Zsr),e(GT,Wz),e(Wz,elr),e(GT,olr),e(bo,rlr),e(bo,OT),e(OT,tlr),e(OT,G3e),e(G3e,alr),e(OT,nlr),e(OT,O3e),e(O3e,slr),e(bo,llr),M(VT,bo,null),b(f,jNe,_),b(f,Nd,_),e(Nd,XT),e(XT,V3e),M(Zy,V3e,null),e(Nd,ilr),e(Nd,X3e),e(X3e,dlr),b(f,DNe,_),b(f,Jo,_),M(eL,Jo,null),e(Jo,clr),e(Jo,jd),e(jd,flr),e(jd,Qz),e(Qz,mlr),e(jd,glr),e(jd,Hz),e(Hz,hlr),e(jd,plr),e(Jo,ulr),e(Jo,oL),e(oL,_lr),e(oL,z3e),e(z3e,blr),e(oL,vlr),e(Jo,Flr),e(Jo,At),M(rL,At,null),e(At,Tlr),e(At,W3e),e(W3e,Mlr),e(At,Elr),e(At,Dd),e(Dd,Clr),e(Dd,Q3e),e(Q3e,wlr),e(Dd,Alr),e(Dd,Uz),e(Uz,ylr),e(Dd,Llr),e(At,xlr),M(zT,At,null),e(Jo,$lr),e(Jo,vo),M(tL,vo,null),e(vo,klr),e(vo,H3e),e(H3e,Slr),e(vo,Rlr),e(vo,Ya),e(Ya,Plr),e(Ya,U3e),e(U3e,Blr),e(Ya,Ilr),e(Ya,J3e),e(J3e,qlr),e(Ya,Nlr),e(Ya,Y3e),e(Y3e,jlr),e(Ya,Dlr),e(vo,Glr),e(vo,K3e),e(K3e,WT),e(WT,Z3e),e(Z3e,Olr),e(WT,Vlr),e(WT,Jz),e(Jz,Xlr),e(WT,zlr),e(vo,Wlr),e(vo,QT),e(QT,Qlr),e(QT,e1e),e(e1e,Hlr),e(QT,Ulr),e(QT,o1e),e(o1e,Jlr),e(vo,Ylr),M(HT,vo,null),b(f,GNe,_),b(f,Gd,_),e(Gd,UT),e(UT,r1e),M(aL,r1e,null),e(Gd,Klr),e(Gd,t1e),e(t1e,Zlr),b(f,ONe,_),b(f,Yo,_),M(nL,Yo,null),e(Yo,eir),e(Yo,Od),e(Od,oir),e(Od,Yz),e(Yz,rir),e(Od,tir),e(Od,Kz),e(Kz,air),e(Od,nir),e(Yo,sir),e(Yo,sL),e(sL,lir),e(sL,a1e),e(a1e,iir),e(sL,dir),e(Yo,cir),e(Yo,yt),M(lL,yt,null),e(yt,fir),e(yt,n1e),e(n1e,mir),e(yt,gir),e(yt,Vd),e(Vd,hir),e(Vd,s1e),e(s1e,pir),e(Vd,uir),e(Vd,Zz),e(Zz,_ir),e(Vd,bir),e(yt,vir),M(JT,yt,null),e(Yo,Fir),e(Yo,wr),M(iL,wr,null),e(wr,Tir),e(wr,l1e),e(l1e,Mir),e(wr,Eir),e(wr,Ka),e(Ka,Cir),e(Ka,i1e),e(i1e,wir),e(Ka,Air),e(Ka,d1e),e(d1e,yir),e(Ka,Lir),e(Ka,c1e),e(c1e,xir),e(Ka,$ir),e(wr,kir),e(wr,N),e(N,YT),e(YT,f1e),e(f1e,Sir),e(YT,Rir),e(YT,eW),e(eW,Pir),e(YT,Bir),e(N,Iir),e(N,KT),e(KT,m1e),e(m1e,qir),e(KT,Nir),e(KT,oW),e(oW,jir),e(KT,Dir),e(N,Gir),e(N,ZT),e(ZT,g1e),e(g1e,Oir),e(ZT,Vir),e(ZT,rW),e(rW,Xir),e(ZT,zir),e(N,Wir),e(N,e7),e(e7,h1e),e(h1e,Qir),e(e7,Hir),e(e7,tW),e(tW,Uir),e(e7,Jir),e(N,Yir),e(N,o7),e(o7,p1e),e(p1e,Kir),e(o7,Zir),e(o7,aW),e(aW,edr),e(o7,odr),e(N,rdr),e(N,r7),e(r7,u1e),e(u1e,tdr),e(r7,adr),e(r7,nW),e(nW,ndr),e(r7,sdr),e(N,ldr),e(N,t7),e(t7,_1e),e(_1e,idr),e(t7,ddr),e(t7,sW),e(sW,cdr),e(t7,fdr),e(N,mdr),e(N,a7),e(a7,b1e),e(b1e,gdr),e(a7,hdr),e(a7,lW),e(lW,pdr),e(a7,udr),e(N,_dr),e(N,n7),e(n7,v1e),e(v1e,bdr),e(n7,vdr),e(n7,iW),e(iW,Fdr),e(n7,Tdr),e(N,Mdr),e(N,s7),e(s7,F1e),e(F1e,Edr),e(s7,Cdr),e(s7,dW),e(dW,wdr),e(s7,Adr),e(N,ydr),e(N,l7),e(l7,T1e),e(T1e,Ldr),e(l7,xdr),e(l7,cW),e(cW,$dr),e(l7,kdr),e(N,Sdr),e(N,i7),e(i7,M1e),e(M1e,Rdr),e(i7,Pdr),e(i7,fW),e(fW,Bdr),e(i7,Idr),e(N,qdr),e(N,d7),e(d7,E1e),e(E1e,Ndr),e(d7,jdr),e(d7,mW),e(mW,Ddr),e(d7,Gdr),e(N,Odr),e(N,c7),e(c7,C1e),e(C1e,Vdr),e(c7,Xdr),e(c7,gW),e(gW,zdr),e(c7,Wdr),e(N,Qdr),e(N,f7),e(f7,w1e),e(w1e,Hdr),e(f7,Udr),e(f7,hW),e(hW,Jdr),e(f7,Ydr),e(N,Kdr),e(N,m7),e(m7,A1e),e(A1e,Zdr),e(m7,ecr),e(m7,pW),e(pW,ocr),e(m7,rcr),e(N,tcr),e(N,g7),e(g7,y1e),e(y1e,acr),e(g7,ncr),e(g7,uW),e(uW,scr),e(g7,lcr),e(N,icr),e(N,Is),e(Is,L1e),e(L1e,dcr),e(Is,ccr),e(Is,_W),e(_W,fcr),e(Is,mcr),e(Is,bW),e(bW,gcr),e(Is,hcr),e(N,pcr),e(N,h7),e(h7,x1e),e(x1e,ucr),e(h7,_cr),e(h7,vW),e(vW,bcr),e(h7,vcr),e(N,Fcr),e(N,p7),e(p7,$1e),e($1e,Tcr),e(p7,Mcr),e(p7,FW),e(FW,Ecr),e(p7,Ccr),e(N,wcr),e(N,u7),e(u7,k1e),e(k1e,Acr),e(u7,ycr),e(u7,TW),e(TW,Lcr),e(u7,xcr),e(N,$cr),e(N,_7),e(_7,S1e),e(S1e,kcr),e(_7,Scr),e(_7,MW),e(MW,Rcr),e(_7,Pcr),e(N,Bcr),e(N,b7),e(b7,R1e),e(R1e,Icr),e(b7,qcr),e(b7,EW),e(EW,Ncr),e(b7,jcr),e(N,Dcr),e(N,v7),e(v7,P1e),e(P1e,Gcr),e(v7,Ocr),e(v7,CW),e(CW,Vcr),e(v7,Xcr),e(N,zcr),e(N,F7),e(F7,B1e),e(B1e,Wcr),e(F7,Qcr),e(F7,wW),e(wW,Hcr),e(F7,Ucr),e(N,Jcr),e(N,T7),e(T7,I1e),e(I1e,Ycr),e(T7,Kcr),e(T7,AW),e(AW,Zcr),e(T7,efr),e(N,ofr),e(N,M7),e(M7,q1e),e(q1e,rfr),e(M7,tfr),e(M7,yW),e(yW,afr),e(M7,nfr),e(N,sfr),e(N,E7),e(E7,N1e),e(N1e,lfr),e(E7,ifr),e(E7,LW),e(LW,dfr),e(E7,cfr),e(N,ffr),e(N,C7),e(C7,j1e),e(j1e,mfr),e(C7,gfr),e(C7,xW),e(xW,hfr),e(C7,pfr),e(N,ufr),e(N,w7),e(w7,D1e),e(D1e,_fr),e(w7,bfr),e(w7,$W),e($W,vfr),e(w7,Ffr),e(N,Tfr),e(N,A7),e(A7,G1e),e(G1e,Mfr),e(A7,Efr),e(A7,kW),e(kW,Cfr),e(A7,wfr),e(N,Afr),e(N,y7),e(y7,O1e),e(O1e,yfr),e(y7,Lfr),e(y7,SW),e(SW,xfr),e(y7,$fr),e(N,kfr),e(N,L7),e(L7,V1e),e(V1e,Sfr),e(L7,Rfr),e(L7,RW),e(RW,Pfr),e(L7,Bfr),e(N,Ifr),e(N,x7),e(x7,X1e),e(X1e,qfr),e(x7,Nfr),e(x7,PW),e(PW,jfr),e(x7,Dfr),e(N,Gfr),e(N,$7),e($7,z1e),e(z1e,Ofr),e($7,Vfr),e($7,BW),e(BW,Xfr),e($7,zfr),e(N,Wfr),e(N,k7),e(k7,W1e),e(W1e,Qfr),e(k7,Hfr),e(k7,IW),e(IW,Ufr),e(k7,Jfr),e(N,Yfr),e(N,S7),e(S7,Q1e),e(Q1e,Kfr),e(S7,Zfr),e(S7,qW),e(qW,emr),e(S7,omr),e(N,rmr),e(N,R7),e(R7,H1e),e(H1e,tmr),e(R7,amr),e(R7,NW),e(NW,nmr),e(R7,smr),e(N,lmr),e(N,P7),e(P7,U1e),e(U1e,imr),e(P7,dmr),e(P7,jW),e(jW,cmr),e(P7,fmr),e(N,mmr),e(N,B7),e(B7,J1e),e(J1e,gmr),e(B7,hmr),e(B7,DW),e(DW,pmr),e(B7,umr),e(N,_mr),e(N,I7),e(I7,Y1e),e(Y1e,bmr),e(I7,vmr),e(I7,GW),e(GW,Fmr),e(I7,Tmr),e(N,Mmr),e(N,q7),e(q7,K1e),e(K1e,Emr),e(q7,Cmr),e(q7,OW),e(OW,wmr),e(q7,Amr),e(N,ymr),e(N,N7),e(N7,Z1e),e(Z1e,Lmr),e(N7,xmr),e(N7,VW),e(VW,$mr),e(N7,kmr),e(N,Smr),e(N,j7),e(j7,ebe),e(ebe,Rmr),e(j7,Pmr),e(j7,XW),e(XW,Bmr),e(j7,Imr),e(N,qmr),e(N,D7),e(D7,obe),e(obe,Nmr),e(D7,jmr),e(D7,zW),e(zW,Dmr),e(D7,Gmr),e(N,Omr),e(N,G7),e(G7,rbe),e(rbe,Vmr),e(G7,Xmr),e(G7,WW),e(WW,zmr),e(G7,Wmr),e(wr,Qmr),M(O7,wr,null),b(f,VNe,_),b(f,Xd,_),e(Xd,V7),e(V7,tbe),M(dL,tbe,null),e(Xd,Hmr),e(Xd,abe),e(abe,Umr),b(f,XNe,_),b(f,Ko,_),M(cL,Ko,null),e(Ko,Jmr),e(Ko,zd),e(zd,Ymr),e(zd,QW),e(QW,Kmr),e(zd,Zmr),e(zd,HW),e(HW,egr),e(zd,ogr),e(Ko,rgr),e(Ko,fL),e(fL,tgr),e(fL,nbe),e(nbe,agr),e(fL,ngr),e(Ko,sgr),e(Ko,Lt),M(mL,Lt,null),e(Lt,lgr),e(Lt,sbe),e(sbe,igr),e(Lt,dgr),e(Lt,Wd),e(Wd,cgr),e(Wd,lbe),e(lbe,fgr),e(Wd,mgr),e(Wd,UW),e(UW,ggr),e(Wd,hgr),e(Lt,pgr),M(X7,Lt,null),e(Ko,ugr),e(Ko,Ar),M(gL,Ar,null),e(Ar,_gr),e(Ar,ibe),e(ibe,bgr),e(Ar,vgr),e(Ar,Za),e(Za,Fgr),e(Za,dbe),e(dbe,Tgr),e(Za,Mgr),e(Za,cbe),e(cbe,Egr),e(Za,Cgr),e(Za,fbe),e(fbe,wgr),e(Za,Agr),e(Ar,ygr),e(Ar,se),e(se,z7),e(z7,mbe),e(mbe,Lgr),e(z7,xgr),e(z7,JW),e(JW,$gr),e(z7,kgr),e(se,Sgr),e(se,W7),e(W7,gbe),e(gbe,Rgr),e(W7,Pgr),e(W7,YW),e(YW,Bgr),e(W7,Igr),e(se,qgr),e(se,Q7),e(Q7,hbe),e(hbe,Ngr),e(Q7,jgr),e(Q7,KW),e(KW,Dgr),e(Q7,Ggr),e(se,Ogr),e(se,H7),e(H7,pbe),e(pbe,Vgr),e(H7,Xgr),e(H7,ZW),e(ZW,zgr),e(H7,Wgr),e(se,Qgr),e(se,U7),e(U7,ube),e(ube,Hgr),e(U7,Ugr),e(U7,eQ),e(eQ,Jgr),e(U7,Ygr),e(se,Kgr),e(se,J7),e(J7,_be),e(_be,Zgr),e(J7,ehr),e(J7,oQ),e(oQ,ohr),e(J7,rhr),e(se,thr),e(se,Y7),e(Y7,bbe),e(bbe,ahr),e(Y7,nhr),e(Y7,rQ),e(rQ,shr),e(Y7,lhr),e(se,ihr),e(se,K7),e(K7,vbe),e(vbe,dhr),e(K7,chr),e(K7,tQ),e(tQ,fhr),e(K7,mhr),e(se,ghr),e(se,Z7),e(Z7,Fbe),e(Fbe,hhr),e(Z7,phr),e(Z7,aQ),e(aQ,uhr),e(Z7,_hr),e(se,bhr),e(se,e9),e(e9,Tbe),e(Tbe,vhr),e(e9,Fhr),e(e9,nQ),e(nQ,Thr),e(e9,Mhr),e(se,Ehr),e(se,o9),e(o9,Mbe),e(Mbe,Chr),e(o9,whr),e(o9,sQ),e(sQ,Ahr),e(o9,yhr),e(se,Lhr),e(se,r9),e(r9,Ebe),e(Ebe,xhr),e(r9,$hr),e(r9,lQ),e(lQ,khr),e(r9,Shr),e(se,Rhr),e(se,t9),e(t9,Cbe),e(Cbe,Phr),e(t9,Bhr),e(t9,iQ),e(iQ,Ihr),e(t9,qhr),e(se,Nhr),e(se,a9),e(a9,wbe),e(wbe,jhr),e(a9,Dhr),e(a9,dQ),e(dQ,Ghr),e(a9,Ohr),e(se,Vhr),e(se,n9),e(n9,Abe),e(Abe,Xhr),e(n9,zhr),e(n9,cQ),e(cQ,Whr),e(n9,Qhr),e(se,Hhr),e(se,s9),e(s9,ybe),e(ybe,Uhr),e(s9,Jhr),e(s9,fQ),e(fQ,Yhr),e(s9,Khr),e(se,Zhr),e(se,l9),e(l9,Lbe),e(Lbe,epr),e(l9,opr),e(l9,mQ),e(mQ,rpr),e(l9,tpr),e(se,apr),e(se,i9),e(i9,xbe),e(xbe,npr),e(i9,spr),e(i9,gQ),e(gQ,lpr),e(i9,ipr),e(se,dpr),e(se,d9),e(d9,$be),e($be,cpr),e(d9,fpr),e(d9,hQ),e(hQ,mpr),e(d9,gpr),e(se,hpr),e(se,c9),e(c9,kbe),e(kbe,ppr),e(c9,upr),e(c9,pQ),e(pQ,_pr),e(c9,bpr),e(se,vpr),e(se,f9),e(f9,Sbe),e(Sbe,Fpr),e(f9,Tpr),e(f9,uQ),e(uQ,Mpr),e(f9,Epr),e(se,Cpr),e(se,m9),e(m9,Rbe),e(Rbe,wpr),e(m9,Apr),e(m9,_Q),e(_Q,ypr),e(m9,Lpr),e(se,xpr),e(se,g9),e(g9,Pbe),e(Pbe,$pr),e(g9,kpr),e(g9,bQ),e(bQ,Spr),e(g9,Rpr),e(Ar,Ppr),M(h9,Ar,null),b(f,zNe,_),b(f,Qd,_),e(Qd,p9),e(p9,Bbe),M(hL,Bbe,null),e(Qd,Bpr),e(Qd,Ibe),e(Ibe,Ipr),b(f,WNe,_),b(f,Zo,_),M(pL,Zo,null),e(Zo,qpr),e(Zo,Hd),e(Hd,Npr),e(Hd,vQ),e(vQ,jpr),e(Hd,Dpr),e(Hd,FQ),e(FQ,Gpr),e(Hd,Opr),e(Zo,Vpr),e(Zo,uL),e(uL,Xpr),e(uL,qbe),e(qbe,zpr),e(uL,Wpr),e(Zo,Qpr),e(Zo,xt),M(_L,xt,null),e(xt,Hpr),e(xt,Nbe),e(Nbe,Upr),e(xt,Jpr),e(xt,Ud),e(Ud,Ypr),e(Ud,jbe),e(jbe,Kpr),e(Ud,Zpr),e(Ud,TQ),e(TQ,eur),e(Ud,our),e(xt,rur),M(u9,xt,null),e(Zo,tur),e(Zo,yr),M(bL,yr,null),e(yr,aur),e(yr,Dbe),e(Dbe,nur),e(yr,sur),e(yr,en),e(en,lur),e(en,Gbe),e(Gbe,iur),e(en,dur),e(en,Obe),e(Obe,cur),e(en,fur),e(en,Vbe),e(Vbe,mur),e(en,gur),e(yr,hur),e(yr,Me),e(Me,_9),e(_9,Xbe),e(Xbe,pur),e(_9,uur),e(_9,MQ),e(MQ,_ur),e(_9,bur),e(Me,vur),e(Me,b9),e(b9,zbe),e(zbe,Fur),e(b9,Tur),e(b9,EQ),e(EQ,Mur),e(b9,Eur),e(Me,Cur),e(Me,v9),e(v9,Wbe),e(Wbe,wur),e(v9,Aur),e(v9,CQ),e(CQ,yur),e(v9,Lur),e(Me,xur),e(Me,F9),e(F9,Qbe),e(Qbe,$ur),e(F9,kur),e(F9,wQ),e(wQ,Sur),e(F9,Rur),e(Me,Pur),e(Me,T9),e(T9,Hbe),e(Hbe,Bur),e(T9,Iur),e(T9,AQ),e(AQ,qur),e(T9,Nur),e(Me,jur),e(Me,M9),e(M9,Ube),e(Ube,Dur),e(M9,Gur),e(M9,yQ),e(yQ,Our),e(M9,Vur),e(Me,Xur),e(Me,E9),e(E9,Jbe),e(Jbe,zur),e(E9,Wur),e(E9,LQ),e(LQ,Qur),e(E9,Hur),e(Me,Uur),e(Me,C9),e(C9,Ybe),e(Ybe,Jur),e(C9,Yur),e(C9,xQ),e(xQ,Kur),e(C9,Zur),e(Me,e_r),e(Me,w9),e(w9,Kbe),e(Kbe,o_r),e(w9,r_r),e(w9,$Q),e($Q,t_r),e(w9,a_r),e(Me,n_r),e(Me,A9),e(A9,Zbe),e(Zbe,s_r),e(A9,l_r),e(A9,kQ),e(kQ,i_r),e(A9,d_r),e(Me,c_r),e(Me,y9),e(y9,e2e),e(e2e,f_r),e(y9,m_r),e(y9,SQ),e(SQ,g_r),e(y9,h_r),e(Me,p_r),e(Me,L9),e(L9,o2e),e(o2e,u_r),e(L9,__r),e(L9,RQ),e(RQ,b_r),e(L9,v_r),e(yr,F_r),M(x9,yr,null),b(f,QNe,_),b(f,Jd,_),e(Jd,$9),e($9,r2e),M(vL,r2e,null),e(Jd,T_r),e(Jd,t2e),e(t2e,M_r),b(f,HNe,_),b(f,er,_),M(FL,er,null),e(er,E_r),e(er,Yd),e(Yd,C_r),e(Yd,PQ),e(PQ,w_r),e(Yd,A_r),e(Yd,BQ),e(BQ,y_r),e(Yd,L_r),e(er,x_r),e(er,TL),e(TL,$_r),e(TL,a2e),e(a2e,k_r),e(TL,S_r),e(er,R_r),e(er,$t),M(ML,$t,null),e($t,P_r),e($t,n2e),e(n2e,B_r),e($t,I_r),e($t,Kd),e(Kd,q_r),e(Kd,s2e),e(s2e,N_r),e(Kd,j_r),e(Kd,IQ),e(IQ,D_r),e(Kd,G_r),e($t,O_r),M(k9,$t,null),e(er,V_r),e(er,Lr),M(EL,Lr,null),e(Lr,X_r),e(Lr,l2e),e(l2e,z_r),e(Lr,W_r),e(Lr,on),e(on,Q_r),e(on,i2e),e(i2e,H_r),e(on,U_r),e(on,d2e),e(d2e,J_r),e(on,Y_r),e(on,c2e),e(c2e,K_r),e(on,Z_r),e(Lr,e3r),e(Lr,rn),e(rn,S9),e(S9,f2e),e(f2e,o3r),e(S9,r3r),e(S9,qQ),e(qQ,t3r),e(S9,a3r),e(rn,n3r),e(rn,R9),e(R9,m2e),e(m2e,s3r),e(R9,l3r),e(R9,NQ),e(NQ,i3r),e(R9,d3r),e(rn,c3r),e(rn,P9),e(P9,g2e),e(g2e,f3r),e(P9,m3r),e(P9,jQ),e(jQ,g3r),e(P9,h3r),e(rn,p3r),e(rn,B9),e(B9,h2e),e(h2e,u3r),e(B9,_3r),e(B9,DQ),e(DQ,b3r),e(B9,v3r),e(Lr,F3r),M(I9,Lr,null),b(f,UNe,_),b(f,Zd,_),e(Zd,q9),e(q9,p2e),M(CL,p2e,null),e(Zd,T3r),e(Zd,u2e),e(u2e,M3r),b(f,JNe,_),b(f,or,_),M(wL,or,null),e(or,E3r),e(or,ec),e(ec,C3r),e(ec,GQ),e(GQ,w3r),e(ec,A3r),e(ec,OQ),e(OQ,y3r),e(ec,L3r),e(or,x3r),e(or,AL),e(AL,$3r),e(AL,_2e),e(_2e,k3r),e(AL,S3r),e(or,R3r),e(or,kt),M(yL,kt,null),e(kt,P3r),e(kt,b2e),e(b2e,B3r),e(kt,I3r),e(kt,oc),e(oc,q3r),e(oc,v2e),e(v2e,N3r),e(oc,j3r),e(oc,VQ),e(VQ,D3r),e(oc,G3r),e(kt,O3r),M(N9,kt,null),e(or,V3r),e(or,xr),M(LL,xr,null),e(xr,X3r),e(xr,F2e),e(F2e,z3r),e(xr,W3r),e(xr,tn),e(tn,Q3r),e(tn,T2e),e(T2e,H3r),e(tn,U3r),e(tn,M2e),e(M2e,J3r),e(tn,Y3r),e(tn,E2e),e(E2e,K3r),e(tn,Z3r),e(xr,e1r),e(xr,ie),e(ie,j9),e(j9,C2e),e(C2e,o1r),e(j9,r1r),e(j9,XQ),e(XQ,t1r),e(j9,a1r),e(ie,n1r),e(ie,D9),e(D9,w2e),e(w2e,s1r),e(D9,l1r),e(D9,zQ),e(zQ,i1r),e(D9,d1r),e(ie,c1r),e(ie,G9),e(G9,A2e),e(A2e,f1r),e(G9,m1r),e(G9,WQ),e(WQ,g1r),e(G9,h1r),e(ie,p1r),e(ie,O9),e(O9,y2e),e(y2e,u1r),e(O9,_1r),e(O9,QQ),e(QQ,b1r),e(O9,v1r),e(ie,F1r),e(ie,V9),e(V9,L2e),e(L2e,T1r),e(V9,M1r),e(V9,HQ),e(HQ,E1r),e(V9,C1r),e(ie,w1r),e(ie,X9),e(X9,x2e),e(x2e,A1r),e(X9,y1r),e(X9,UQ),e(UQ,L1r),e(X9,x1r),e(ie,$1r),e(ie,z9),e(z9,$2e),e($2e,k1r),e(z9,S1r),e(z9,JQ),e(JQ,R1r),e(z9,P1r),e(ie,B1r),e(ie,W9),e(W9,k2e),e(k2e,I1r),e(W9,q1r),e(W9,YQ),e(YQ,N1r),e(W9,j1r),e(ie,D1r),e(ie,Q9),e(Q9,S2e),e(S2e,G1r),e(Q9,O1r),e(Q9,KQ),e(KQ,V1r),e(Q9,X1r),e(ie,z1r),e(ie,H9),e(H9,R2e),e(R2e,W1r),e(H9,Q1r),e(H9,ZQ),e(ZQ,H1r),e(H9,U1r),e(ie,J1r),e(ie,U9),e(U9,P2e),e(P2e,Y1r),e(U9,K1r),e(U9,eH),e(eH,Z1r),e(U9,ebr),e(ie,obr),e(ie,J9),e(J9,B2e),e(B2e,rbr),e(J9,tbr),e(J9,oH),e(oH,abr),e(J9,nbr),e(ie,sbr),e(ie,Y9),e(Y9,I2e),e(I2e,lbr),e(Y9,ibr),e(Y9,rH),e(rH,dbr),e(Y9,cbr),e(ie,fbr),e(ie,K9),e(K9,q2e),e(q2e,mbr),e(K9,gbr),e(K9,tH),e(tH,hbr),e(K9,pbr),e(ie,ubr),e(ie,Z9),e(Z9,N2e),e(N2e,_br),e(Z9,bbr),e(Z9,aH),e(aH,vbr),e(Z9,Fbr),e(ie,Tbr),e(ie,eM),e(eM,j2e),e(j2e,Mbr),e(eM,Ebr),e(eM,nH),e(nH,Cbr),e(eM,wbr),e(ie,Abr),e(ie,oM),e(oM,D2e),e(D2e,ybr),e(oM,Lbr),e(oM,sH),e(sH,xbr),e(oM,$br),e(ie,kbr),e(ie,rM),e(rM,G2e),e(G2e,Sbr),e(rM,Rbr),e(rM,lH),e(lH,Pbr),e(rM,Bbr),e(ie,Ibr),e(ie,tM),e(tM,O2e),e(O2e,qbr),e(tM,Nbr),e(tM,iH),e(iH,jbr),e(tM,Dbr),e(ie,Gbr),e(ie,aM),e(aM,V2e),e(V2e,Obr),e(aM,Vbr),e(aM,dH),e(dH,Xbr),e(aM,zbr),e(xr,Wbr),M(nM,xr,null),b(f,YNe,_),b(f,rc,_),e(rc,sM),e(sM,X2e),M(xL,X2e,null),e(rc,Qbr),e(rc,z2e),e(z2e,Hbr),b(f,KNe,_),b(f,rr,_),M($L,rr,null),e(rr,Ubr),e(rr,tc),e(tc,Jbr),e(tc,cH),e(cH,Ybr),e(tc,Kbr),e(tc,fH),e(fH,Zbr),e(tc,e2r),e(rr,o2r),e(rr,kL),e(kL,r2r),e(kL,W2e),e(W2e,t2r),e(kL,a2r),e(rr,n2r),e(rr,St),M(SL,St,null),e(St,s2r),e(St,Q2e),e(Q2e,l2r),e(St,i2r),e(St,ac),e(ac,d2r),e(ac,H2e),e(H2e,c2r),e(ac,f2r),e(ac,mH),e(mH,m2r),e(ac,g2r),e(St,h2r),M(lM,St,null),e(rr,p2r),e(rr,$r),M(RL,$r,null),e($r,u2r),e($r,U2e),e(U2e,_2r),e($r,b2r),e($r,an),e(an,v2r),e(an,J2e),e(J2e,F2r),e(an,T2r),e(an,Y2e),e(Y2e,M2r),e(an,E2r),e(an,K2e),e(K2e,C2r),e(an,w2r),e($r,A2r),e($r,ye),e(ye,iM),e(iM,Z2e),e(Z2e,y2r),e(iM,L2r),e(iM,gH),e(gH,x2r),e(iM,$2r),e(ye,k2r),e(ye,dM),e(dM,eve),e(eve,S2r),e(dM,R2r),e(dM,hH),e(hH,P2r),e(dM,B2r),e(ye,I2r),e(ye,cM),e(cM,ove),e(ove,q2r),e(cM,N2r),e(cM,pH),e(pH,j2r),e(cM,D2r),e(ye,G2r),e(ye,fM),e(fM,rve),e(rve,O2r),e(fM,V2r),e(fM,uH),e(uH,X2r),e(fM,z2r),e(ye,W2r),e(ye,mM),e(mM,tve),e(tve,Q2r),e(mM,H2r),e(mM,_H),e(_H,U2r),e(mM,J2r),e(ye,Y2r),e(ye,gM),e(gM,ave),e(ave,K2r),e(gM,Z2r),e(gM,bH),e(bH,evr),e(gM,ovr),e(ye,rvr),e(ye,hM),e(hM,nve),e(nve,tvr),e(hM,avr),e(hM,vH),e(vH,nvr),e(hM,svr),e(ye,lvr),e(ye,pM),e(pM,sve),e(sve,ivr),e(pM,dvr),e(pM,FH),e(FH,cvr),e(pM,fvr),e(ye,mvr),e(ye,uM),e(uM,lve),e(lve,gvr),e(uM,hvr),e(uM,TH),e(TH,pvr),e(uM,uvr),e(ye,_vr),e(ye,_M),e(_M,ive),e(ive,bvr),e(_M,vvr),e(_M,MH),e(MH,Fvr),e(_M,Tvr),e($r,Mvr),M(bM,$r,null),b(f,ZNe,_),b(f,nc,_),e(nc,vM),e(vM,dve),M(PL,dve,null),e(nc,Evr),e(nc,cve),e(cve,Cvr),b(f,eje,_),b(f,tr,_),M(BL,tr,null),e(tr,wvr),e(tr,sc),e(sc,Avr),e(sc,EH),e(EH,yvr),e(sc,Lvr),e(sc,CH),e(CH,xvr),e(sc,$vr),e(tr,kvr),e(tr,IL),e(IL,Svr),e(IL,fve),e(fve,Rvr),e(IL,Pvr),e(tr,Bvr),e(tr,Rt),M(qL,Rt,null),e(Rt,Ivr),e(Rt,mve),e(mve,qvr),e(Rt,Nvr),e(Rt,lc),e(lc,jvr),e(lc,gve),e(gve,Dvr),e(lc,Gvr),e(lc,wH),e(wH,Ovr),e(lc,Vvr),e(Rt,Xvr),M(FM,Rt,null),e(tr,zvr),e(tr,kr),M(NL,kr,null),e(kr,Wvr),e(kr,hve),e(hve,Qvr),e(kr,Hvr),e(kr,nn),e(nn,Uvr),e(nn,pve),e(pve,Jvr),e(nn,Yvr),e(nn,uve),e(uve,Kvr),e(nn,Zvr),e(nn,_ve),e(_ve,eFr),e(nn,oFr),e(kr,rFr),e(kr,oe),e(oe,TM),e(TM,bve),e(bve,tFr),e(TM,aFr),e(TM,AH),e(AH,nFr),e(TM,sFr),e(oe,lFr),e(oe,MM),e(MM,vve),e(vve,iFr),e(MM,dFr),e(MM,yH),e(yH,cFr),e(MM,fFr),e(oe,mFr),e(oe,EM),e(EM,Fve),e(Fve,gFr),e(EM,hFr),e(EM,LH),e(LH,pFr),e(EM,uFr),e(oe,_Fr),e(oe,CM),e(CM,Tve),e(Tve,bFr),e(CM,vFr),e(CM,xH),e(xH,FFr),e(CM,TFr),e(oe,MFr),e(oe,wM),e(wM,Mve),e(Mve,EFr),e(wM,CFr),e(wM,$H),e($H,wFr),e(wM,AFr),e(oe,yFr),e(oe,AM),e(AM,Eve),e(Eve,LFr),e(AM,xFr),e(AM,kH),e(kH,$Fr),e(AM,kFr),e(oe,SFr),e(oe,yM),e(yM,Cve),e(Cve,RFr),e(yM,PFr),e(yM,SH),e(SH,BFr),e(yM,IFr),e(oe,qFr),e(oe,LM),e(LM,wve),e(wve,NFr),e(LM,jFr),e(LM,RH),e(RH,DFr),e(LM,GFr),e(oe,OFr),e(oe,xM),e(xM,Ave),e(Ave,VFr),e(xM,XFr),e(xM,PH),e(PH,zFr),e(xM,WFr),e(oe,QFr),e(oe,$M),e($M,yve),e(yve,HFr),e($M,UFr),e($M,BH),e(BH,JFr),e($M,YFr),e(oe,KFr),e(oe,kM),e(kM,Lve),e(Lve,ZFr),e(kM,eTr),e(kM,IH),e(IH,oTr),e(kM,rTr),e(oe,tTr),e(oe,SM),e(SM,xve),e(xve,aTr),e(SM,nTr),e(SM,qH),e(qH,sTr),e(SM,lTr),e(oe,iTr),e(oe,RM),e(RM,$ve),e($ve,dTr),e(RM,cTr),e(RM,NH),e(NH,fTr),e(RM,mTr),e(oe,gTr),e(oe,PM),e(PM,kve),e(kve,hTr),e(PM,pTr),e(PM,jH),e(jH,uTr),e(PM,_Tr),e(oe,bTr),e(oe,BM),e(BM,Sve),e(Sve,vTr),e(BM,FTr),e(BM,DH),e(DH,TTr),e(BM,MTr),e(oe,ETr),e(oe,IM),e(IM,Rve),e(Rve,CTr),e(IM,wTr),e(IM,GH),e(GH,ATr),e(IM,yTr),e(oe,LTr),e(oe,qM),e(qM,Pve),e(Pve,xTr),e(qM,$Tr),e(qM,OH),e(OH,kTr),e(qM,STr),e(oe,RTr),e(oe,NM),e(NM,Bve),e(Bve,PTr),e(NM,BTr),e(NM,VH),e(VH,ITr),e(NM,qTr),e(oe,NTr),e(oe,jM),e(jM,Ive),e(Ive,jTr),e(jM,DTr),e(jM,XH),e(XH,GTr),e(jM,OTr),e(oe,VTr),e(oe,DM),e(DM,qve),e(qve,XTr),e(DM,zTr),e(DM,zH),e(zH,WTr),e(DM,QTr),e(oe,HTr),e(oe,GM),e(GM,Nve),e(Nve,UTr),e(GM,JTr),e(GM,WH),e(WH,YTr),e(GM,KTr),e(oe,ZTr),e(oe,OM),e(OM,jve),e(jve,e7r),e(OM,o7r),e(OM,QH),e(QH,r7r),e(OM,t7r),e(oe,a7r),e(oe,VM),e(VM,Dve),e(Dve,n7r),e(VM,s7r),e(VM,HH),e(HH,l7r),e(VM,i7r),e(oe,d7r),e(oe,XM),e(XM,Gve),e(Gve,c7r),e(XM,f7r),e(XM,UH),e(UH,m7r),e(XM,g7r),e(oe,h7r),e(oe,zM),e(zM,Ove),e(Ove,p7r),e(zM,u7r),e(zM,JH),e(JH,_7r),e(zM,b7r),e(oe,v7r),e(oe,WM),e(WM,Vve),e(Vve,F7r),e(WM,T7r),e(WM,YH),e(YH,M7r),e(WM,E7r),e(kr,C7r),M(QM,kr,null),b(f,oje,_),b(f,ic,_),e(ic,HM),e(HM,Xve),M(jL,Xve,null),e(ic,w7r),e(ic,zve),e(zve,A7r),b(f,rje,_),b(f,ar,_),M(DL,ar,null),e(ar,y7r),e(ar,dc),e(dc,L7r),e(dc,KH),e(KH,x7r),e(dc,$7r),e(dc,ZH),e(ZH,k7r),e(dc,S7r),e(ar,R7r),e(ar,GL),e(GL,P7r),e(GL,Wve),e(Wve,B7r),e(GL,I7r),e(ar,q7r),e(ar,Pt),M(OL,Pt,null),e(Pt,N7r),e(Pt,Qve),e(Qve,j7r),e(Pt,D7r),e(Pt,cc),e(cc,G7r),e(cc,Hve),e(Hve,O7r),e(cc,V7r),e(cc,eU),e(eU,X7r),e(cc,z7r),e(Pt,W7r),M(UM,Pt,null),e(ar,Q7r),e(ar,Sr),M(VL,Sr,null),e(Sr,H7r),e(Sr,Uve),e(Uve,U7r),e(Sr,J7r),e(Sr,sn),e(sn,Y7r),e(sn,Jve),e(Jve,K7r),e(sn,Z7r),e(sn,Yve),e(Yve,e9r),e(sn,o9r),e(sn,Kve),e(Kve,r9r),e(sn,t9r),e(Sr,a9r),e(Sr,pe),e(pe,JM),e(JM,Zve),e(Zve,n9r),e(JM,s9r),e(JM,oU),e(oU,l9r),e(JM,i9r),e(pe,d9r),e(pe,YM),e(YM,eFe),e(eFe,c9r),e(YM,f9r),e(YM,rU),e(rU,m9r),e(YM,g9r),e(pe,h9r),e(pe,KM),e(KM,oFe),e(oFe,p9r),e(KM,u9r),e(KM,tU),e(tU,_9r),e(KM,b9r),e(pe,v9r),e(pe,ZM),e(ZM,rFe),e(rFe,F9r),e(ZM,T9r),e(ZM,aU),e(aU,M9r),e(ZM,E9r),e(pe,C9r),e(pe,e4),e(e4,tFe),e(tFe,w9r),e(e4,A9r),e(e4,nU),e(nU,y9r),e(e4,L9r),e(pe,x9r),e(pe,o4),e(o4,aFe),e(aFe,$9r),e(o4,k9r),e(o4,sU),e(sU,S9r),e(o4,R9r),e(pe,P9r),e(pe,r4),e(r4,nFe),e(nFe,B9r),e(r4,I9r),e(r4,lU),e(lU,q9r),e(r4,N9r),e(pe,j9r),e(pe,t4),e(t4,sFe),e(sFe,D9r),e(t4,G9r),e(t4,iU),e(iU,O9r),e(t4,V9r),e(pe,X9r),e(pe,a4),e(a4,lFe),e(lFe,z9r),e(a4,W9r),e(a4,dU),e(dU,Q9r),e(a4,H9r),e(pe,U9r),e(pe,n4),e(n4,iFe),e(iFe,J9r),e(n4,Y9r),e(n4,cU),e(cU,K9r),e(n4,Z9r),e(pe,eMr),e(pe,s4),e(s4,dFe),e(dFe,oMr),e(s4,rMr),e(s4,fU),e(fU,tMr),e(s4,aMr),e(pe,nMr),e(pe,l4),e(l4,cFe),e(cFe,sMr),e(l4,lMr),e(l4,mU),e(mU,iMr),e(l4,dMr),e(pe,cMr),e(pe,i4),e(i4,fFe),e(fFe,fMr),e(i4,mMr),e(i4,gU),e(gU,gMr),e(i4,hMr),e(pe,pMr),e(pe,d4),e(d4,mFe),e(mFe,uMr),e(d4,_Mr),e(d4,hU),e(hU,bMr),e(d4,vMr),e(pe,FMr),e(pe,c4),e(c4,gFe),e(gFe,TMr),e(c4,MMr),e(c4,pU),e(pU,EMr),e(c4,CMr),e(pe,wMr),e(pe,f4),e(f4,hFe),e(hFe,AMr),e(f4,yMr),e(f4,uU),e(uU,LMr),e(f4,xMr),e(pe,$Mr),e(pe,m4),e(m4,pFe),e(pFe,kMr),e(m4,SMr),e(m4,_U),e(_U,RMr),e(m4,PMr),e(Sr,BMr),M(g4,Sr,null),b(f,tje,_),b(f,fc,_),e(fc,h4),e(h4,uFe),M(XL,uFe,null),e(fc,IMr),e(fc,_Fe),e(_Fe,qMr),b(f,aje,_),b(f,nr,_),M(zL,nr,null),e(nr,NMr),e(nr,mc),e(mc,jMr),e(mc,bU),e(bU,DMr),e(mc,GMr),e(mc,vU),e(vU,OMr),e(mc,VMr),e(nr,XMr),e(nr,WL),e(WL,zMr),e(WL,bFe),e(bFe,WMr),e(WL,QMr),e(nr,HMr),e(nr,Bt),M(QL,Bt,null),e(Bt,UMr),e(Bt,vFe),e(vFe,JMr),e(Bt,YMr),e(Bt,gc),e(gc,KMr),e(gc,FFe),e(FFe,ZMr),e(gc,e4r),e(gc,FU),e(FU,o4r),e(gc,r4r),e(Bt,t4r),M(p4,Bt,null),e(nr,a4r),e(nr,Rr),M(HL,Rr,null),e(Rr,n4r),e(Rr,TFe),e(TFe,s4r),e(Rr,l4r),e(Rr,ln),e(ln,i4r),e(ln,MFe),e(MFe,d4r),e(ln,c4r),e(ln,EFe),e(EFe,f4r),e(ln,m4r),e(ln,CFe),e(CFe,g4r),e(ln,h4r),e(Rr,p4r),e(Rr,UL),e(UL,u4),e(u4,wFe),e(wFe,u4r),e(u4,_4r),e(u4,TU),e(TU,b4r),e(u4,v4r),e(UL,F4r),e(UL,_4),e(_4,AFe),e(AFe,T4r),e(_4,M4r),e(_4,MU),e(MU,E4r),e(_4,C4r),e(Rr,w4r),M(b4,Rr,null),b(f,nje,_),b(f,hc,_),e(hc,v4),e(v4,yFe),M(JL,yFe,null),e(hc,A4r),e(hc,LFe),e(LFe,y4r),b(f,sje,_),b(f,sr,_),M(YL,sr,null),e(sr,L4r),e(sr,pc),e(pc,x4r),e(pc,EU),e(EU,$4r),e(pc,k4r),e(pc,CU),e(CU,S4r),e(pc,R4r),e(sr,P4r),e(sr,KL),e(KL,B4r),e(KL,xFe),e(xFe,I4r),e(KL,q4r),e(sr,N4r),e(sr,It),M(ZL,It,null),e(It,j4r),e(It,$Fe),e($Fe,D4r),e(It,G4r),e(It,uc),e(uc,O4r),e(uc,kFe),e(kFe,V4r),e(uc,X4r),e(uc,wU),e(wU,z4r),e(uc,W4r),e(It,Q4r),M(F4,It,null),e(sr,H4r),e(sr,Pr),M(e8,Pr,null),e(Pr,U4r),e(Pr,SFe),e(SFe,J4r),e(Pr,Y4r),e(Pr,dn),e(dn,K4r),e(dn,RFe),e(RFe,Z4r),e(dn,eEr),e(dn,PFe),e(PFe,oEr),e(dn,rEr),e(dn,BFe),e(BFe,tEr),e(dn,aEr),e(Pr,nEr),e(Pr,IFe),e(IFe,T4),e(T4,qFe),e(qFe,sEr),e(T4,lEr),e(T4,AU),e(AU,iEr),e(T4,dEr),e(Pr,cEr),M(M4,Pr,null),b(f,lje,_),b(f,_c,_),e(_c,E4),e(E4,NFe),M(o8,NFe,null),e(_c,fEr),e(_c,jFe),e(jFe,mEr),b(f,ije,_),b(f,lr,_),M(r8,lr,null),e(lr,gEr),e(lr,bc),e(bc,hEr),e(bc,yU),e(yU,pEr),e(bc,uEr),e(bc,LU),e(LU,_Er),e(bc,bEr),e(lr,vEr),e(lr,t8),e(t8,FEr),e(t8,DFe),e(DFe,TEr),e(t8,MEr),e(lr,EEr),e(lr,qt),M(a8,qt,null),e(qt,CEr),e(qt,GFe),e(GFe,wEr),e(qt,AEr),e(qt,vc),e(vc,yEr),e(vc,OFe),e(OFe,LEr),e(vc,xEr),e(vc,xU),e(xU,$Er),e(vc,kEr),e(qt,SEr),M(C4,qt,null),e(lr,REr),e(lr,Br),M(n8,Br,null),e(Br,PEr),e(Br,VFe),e(VFe,BEr),e(Br,IEr),e(Br,cn),e(cn,qEr),e(cn,XFe),e(XFe,NEr),e(cn,jEr),e(cn,zFe),e(zFe,DEr),e(cn,GEr),e(cn,WFe),e(WFe,OEr),e(cn,VEr),e(Br,XEr),e(Br,de),e(de,w4),e(w4,QFe),e(QFe,zEr),e(w4,WEr),e(w4,$U),e($U,QEr),e(w4,HEr),e(de,UEr),e(de,A4),e(A4,HFe),e(HFe,JEr),e(A4,YEr),e(A4,kU),e(kU,KEr),e(A4,ZEr),e(de,eCr),e(de,y4),e(y4,UFe),e(UFe,oCr),e(y4,rCr),e(y4,SU),e(SU,tCr),e(y4,aCr),e(de,nCr),e(de,L4),e(L4,JFe),e(JFe,sCr),e(L4,lCr),e(L4,RU),e(RU,iCr),e(L4,dCr),e(de,cCr),e(de,x4),e(x4,YFe),e(YFe,fCr),e(x4,mCr),e(x4,PU),e(PU,gCr),e(x4,hCr),e(de,pCr),e(de,$4),e($4,KFe),e(KFe,uCr),e($4,_Cr),e($4,BU),e(BU,bCr),e($4,vCr),e(de,FCr),e(de,k4),e(k4,ZFe),e(ZFe,TCr),e(k4,MCr),e(k4,IU),e(IU,ECr),e(k4,CCr),e(de,wCr),e(de,S4),e(S4,eTe),e(eTe,ACr),e(S4,yCr),e(S4,qU),e(qU,LCr),e(S4,xCr),e(de,$Cr),e(de,R4),e(R4,oTe),e(oTe,kCr),e(R4,SCr),e(R4,NU),e(NU,RCr),e(R4,PCr),e(de,BCr),e(de,P4),e(P4,rTe),e(rTe,ICr),e(P4,qCr),e(P4,jU),e(jU,NCr),e(P4,jCr),e(de,DCr),e(de,B4),e(B4,tTe),e(tTe,GCr),e(B4,OCr),e(B4,DU),e(DU,VCr),e(B4,XCr),e(de,zCr),e(de,I4),e(I4,aTe),e(aTe,WCr),e(I4,QCr),e(I4,GU),e(GU,HCr),e(I4,UCr),e(de,JCr),e(de,q4),e(q4,nTe),e(nTe,YCr),e(q4,KCr),e(q4,OU),e(OU,ZCr),e(q4,e5r),e(de,o5r),e(de,N4),e(N4,sTe),e(sTe,r5r),e(N4,t5r),e(N4,VU),e(VU,a5r),e(N4,n5r),e(de,s5r),e(de,j4),e(j4,lTe),e(lTe,l5r),e(j4,i5r),e(j4,XU),e(XU,d5r),e(j4,c5r),e(de,f5r),e(de,D4),e(D4,iTe),e(iTe,m5r),e(D4,g5r),e(D4,zU),e(zU,h5r),e(D4,p5r),e(de,u5r),e(de,G4),e(G4,dTe),e(dTe,_5r),e(G4,b5r),e(G4,WU),e(WU,v5r),e(G4,F5r),e(de,T5r),e(de,O4),e(O4,cTe),e(cTe,M5r),e(O4,E5r),e(O4,QU),e(QU,C5r),e(O4,w5r),e(de,A5r),e(de,V4),e(V4,fTe),e(fTe,y5r),e(V4,L5r),e(V4,HU),e(HU,x5r),e(V4,$5r),e(de,k5r),e(de,X4),e(X4,mTe),e(mTe,S5r),e(X4,R5r),e(X4,UU),e(UU,P5r),e(X4,B5r),e(Br,I5r),M(z4,Br,null),b(f,dje,_),b(f,Fc,_),e(Fc,W4),e(W4,gTe),M(s8,gTe,null),e(Fc,q5r),e(Fc,hTe),e(hTe,N5r),b(f,cje,_),b(f,ir,_),M(l8,ir,null),e(ir,j5r),e(ir,Tc),e(Tc,D5r),e(Tc,JU),e(JU,G5r),e(Tc,O5r),e(Tc,YU),e(YU,V5r),e(Tc,X5r),e(ir,z5r),e(ir,i8),e(i8,W5r),e(i8,pTe),e(pTe,Q5r),e(i8,H5r),e(ir,U5r),e(ir,Nt),M(d8,Nt,null),e(Nt,J5r),e(Nt,uTe),e(uTe,Y5r),e(Nt,K5r),e(Nt,Mc),e(Mc,Z5r),e(Mc,_Te),e(_Te,ewr),e(Mc,owr),e(Mc,KU),e(KU,rwr),e(Mc,twr),e(Nt,awr),M(Q4,Nt,null),e(ir,nwr),e(ir,Ir),M(c8,Ir,null),e(Ir,swr),e(Ir,bTe),e(bTe,lwr),e(Ir,iwr),e(Ir,fn),e(fn,dwr),e(fn,vTe),e(vTe,cwr),e(fn,fwr),e(fn,FTe),e(FTe,mwr),e(fn,gwr),e(fn,TTe),e(TTe,hwr),e(fn,pwr),e(Ir,uwr),e(Ir,ce),e(ce,H4),e(H4,MTe),e(MTe,_wr),e(H4,bwr),e(H4,ZU),e(ZU,vwr),e(H4,Fwr),e(ce,Twr),e(ce,U4),e(U4,ETe),e(ETe,Mwr),e(U4,Ewr),e(U4,eJ),e(eJ,Cwr),e(U4,wwr),e(ce,Awr),e(ce,J4),e(J4,CTe),e(CTe,ywr),e(J4,Lwr),e(J4,oJ),e(oJ,xwr),e(J4,$wr),e(ce,kwr),e(ce,Y4),e(Y4,wTe),e(wTe,Swr),e(Y4,Rwr),e(Y4,rJ),e(rJ,Pwr),e(Y4,Bwr),e(ce,Iwr),e(ce,K4),e(K4,ATe),e(ATe,qwr),e(K4,Nwr),e(K4,tJ),e(tJ,jwr),e(K4,Dwr),e(ce,Gwr),e(ce,Z4),e(Z4,yTe),e(yTe,Owr),e(Z4,Vwr),e(Z4,aJ),e(aJ,Xwr),e(Z4,zwr),e(ce,Wwr),e(ce,eE),e(eE,LTe),e(LTe,Qwr),e(eE,Hwr),e(eE,nJ),e(nJ,Uwr),e(eE,Jwr),e(ce,Ywr),e(ce,oE),e(oE,xTe),e(xTe,Kwr),e(oE,Zwr),e(oE,sJ),e(sJ,e0r),e(oE,o0r),e(ce,r0r),e(ce,rE),e(rE,$Te),e($Te,t0r),e(rE,a0r),e(rE,lJ),e(lJ,n0r),e(rE,s0r),e(ce,l0r),e(ce,tE),e(tE,kTe),e(kTe,i0r),e(tE,d0r),e(tE,iJ),e(iJ,c0r),e(tE,f0r),e(ce,m0r),e(ce,aE),e(aE,STe),e(STe,g0r),e(aE,h0r),e(aE,dJ),e(dJ,p0r),e(aE,u0r),e(ce,_0r),e(ce,nE),e(nE,RTe),e(RTe,b0r),e(nE,v0r),e(nE,cJ),e(cJ,F0r),e(nE,T0r),e(ce,M0r),e(ce,sE),e(sE,PTe),e(PTe,E0r),e(sE,C0r),e(sE,fJ),e(fJ,w0r),e(sE,A0r),e(ce,y0r),e(ce,lE),e(lE,BTe),e(BTe,L0r),e(lE,x0r),e(lE,mJ),e(mJ,$0r),e(lE,k0r),e(ce,S0r),e(ce,iE),e(iE,ITe),e(ITe,R0r),e(iE,P0r),e(iE,gJ),e(gJ,B0r),e(iE,I0r),e(ce,q0r),e(ce,dE),e(dE,qTe),e(qTe,N0r),e(dE,j0r),e(dE,hJ),e(hJ,D0r),e(dE,G0r),e(ce,O0r),e(ce,cE),e(cE,NTe),e(NTe,V0r),e(cE,X0r),e(cE,pJ),e(pJ,z0r),e(cE,W0r),e(ce,Q0r),e(ce,fE),e(fE,jTe),e(jTe,H0r),e(fE,U0r),e(fE,uJ),e(uJ,J0r),e(fE,Y0r),e(ce,K0r),e(ce,mE),e(mE,DTe),e(DTe,Z0r),e(mE,eAr),e(mE,_J),e(_J,oAr),e(mE,rAr),e(ce,tAr),e(ce,gE),e(gE,GTe),e(GTe,aAr),e(gE,nAr),e(gE,bJ),e(bJ,sAr),e(gE,lAr),e(Ir,iAr),M(hE,Ir,null),b(f,fje,_),b(f,Ec,_),e(Ec,pE),e(pE,OTe),M(f8,OTe,null),e(Ec,dAr),e(Ec,VTe),e(VTe,cAr),b(f,mje,_),b(f,dr,_),M(m8,dr,null),e(dr,fAr),e(dr,Cc),e(Cc,mAr),e(Cc,vJ),e(vJ,gAr),e(Cc,hAr),e(Cc,FJ),e(FJ,pAr),e(Cc,uAr),e(dr,_Ar),e(dr,g8),e(g8,bAr),e(g8,XTe),e(XTe,vAr),e(g8,FAr),e(dr,TAr),e(dr,jt),M(h8,jt,null),e(jt,MAr),e(jt,zTe),e(zTe,EAr),e(jt,CAr),e(jt,wc),e(wc,wAr),e(wc,WTe),e(WTe,AAr),e(wc,yAr),e(wc,TJ),e(TJ,LAr),e(wc,xAr),e(jt,$Ar),M(uE,jt,null),e(dr,kAr),e(dr,qr),M(p8,qr,null),e(qr,SAr),e(qr,QTe),e(QTe,RAr),e(qr,PAr),e(qr,mn),e(mn,BAr),e(mn,HTe),e(HTe,IAr),e(mn,qAr),e(mn,UTe),e(UTe,NAr),e(mn,jAr),e(mn,JTe),e(JTe,DAr),e(mn,GAr),e(qr,OAr),e(qr,YTe),e(YTe,_E),e(_E,KTe),e(KTe,VAr),e(_E,XAr),e(_E,MJ),e(MJ,zAr),e(_E,WAr),e(qr,QAr),M(bE,qr,null),b(f,gje,_),b(f,Ac,_),e(Ac,vE),e(vE,ZTe),M(u8,ZTe,null),e(Ac,HAr),e(Ac,e7e),e(e7e,UAr),b(f,hje,_),b(f,cr,_),M(_8,cr,null),e(cr,JAr),e(cr,yc),e(yc,YAr),e(yc,EJ),e(EJ,KAr),e(yc,ZAr),e(yc,CJ),e(CJ,e6r),e(yc,o6r),e(cr,r6r),e(cr,b8),e(b8,t6r),e(b8,o7e),e(o7e,a6r),e(b8,n6r),e(cr,s6r),e(cr,Dt),M(v8,Dt,null),e(Dt,l6r),e(Dt,r7e),e(r7e,i6r),e(Dt,d6r),e(Dt,Lc),e(Lc,c6r),e(Lc,t7e),e(t7e,f6r),e(Lc,m6r),e(Lc,wJ),e(wJ,g6r),e(Lc,h6r),e(Dt,p6r),M(FE,Dt,null),e(cr,u6r),e(cr,Nr),M(F8,Nr,null),e(Nr,_6r),e(Nr,a7e),e(a7e,b6r),e(Nr,v6r),e(Nr,gn),e(gn,F6r),e(gn,n7e),e(n7e,T6r),e(gn,M6r),e(gn,s7e),e(s7e,E6r),e(gn,C6r),e(gn,l7e),e(l7e,w6r),e(gn,A6r),e(Nr,y6r),e(Nr,i7e),e(i7e,TE),e(TE,d7e),e(d7e,L6r),e(TE,x6r),e(TE,AJ),e(AJ,$6r),e(TE,k6r),e(Nr,S6r),M(ME,Nr,null),b(f,pje,_),b(f,xc,_),e(xc,EE),e(EE,c7e),M(T8,c7e,null),e(xc,R6r),e(xc,f7e),e(f7e,P6r),b(f,uje,_),b(f,fr,_),M(M8,fr,null),e(fr,B6r),e(fr,$c),e($c,I6r),e($c,yJ),e(yJ,q6r),e($c,N6r),e($c,LJ),e(LJ,j6r),e($c,D6r),e(fr,G6r),e(fr,E8),e(E8,O6r),e(E8,m7e),e(m7e,V6r),e(E8,X6r),e(fr,z6r),e(fr,Gt),M(C8,Gt,null),e(Gt,W6r),e(Gt,g7e),e(g7e,Q6r),e(Gt,H6r),e(Gt,kc),e(kc,U6r),e(kc,h7e),e(h7e,J6r),e(kc,Y6r),e(kc,xJ),e(xJ,K6r),e(kc,Z6r),e(Gt,eyr),M(CE,Gt,null),e(fr,oyr),e(fr,jr),M(w8,jr,null),e(jr,ryr),e(jr,p7e),e(p7e,tyr),e(jr,ayr),e(jr,hn),e(hn,nyr),e(hn,u7e),e(u7e,syr),e(hn,lyr),e(hn,_7e),e(_7e,iyr),e(hn,dyr),e(hn,b7e),e(b7e,cyr),e(hn,fyr),e(jr,myr),e(jr,te),e(te,wE),e(wE,v7e),e(v7e,gyr),e(wE,hyr),e(wE,$J),e($J,pyr),e(wE,uyr),e(te,_yr),e(te,AE),e(AE,F7e),e(F7e,byr),e(AE,vyr),e(AE,kJ),e(kJ,Fyr),e(AE,Tyr),e(te,Myr),e(te,yE),e(yE,T7e),e(T7e,Eyr),e(yE,Cyr),e(yE,SJ),e(SJ,wyr),e(yE,Ayr),e(te,yyr),e(te,LE),e(LE,M7e),e(M7e,Lyr),e(LE,xyr),e(LE,RJ),e(RJ,$yr),e(LE,kyr),e(te,Syr),e(te,xE),e(xE,E7e),e(E7e,Ryr),e(xE,Pyr),e(xE,PJ),e(PJ,Byr),e(xE,Iyr),e(te,qyr),e(te,$E),e($E,C7e),e(C7e,Nyr),e($E,jyr),e($E,BJ),e(BJ,Dyr),e($E,Gyr),e(te,Oyr),e(te,kE),e(kE,w7e),e(w7e,Vyr),e(kE,Xyr),e(kE,IJ),e(IJ,zyr),e(kE,Wyr),e(te,Qyr),e(te,SE),e(SE,A7e),e(A7e,Hyr),e(SE,Uyr),e(SE,qJ),e(qJ,Jyr),e(SE,Yyr),e(te,Kyr),e(te,RE),e(RE,y7e),e(y7e,Zyr),e(RE,eLr),e(RE,NJ),e(NJ,oLr),e(RE,rLr),e(te,tLr),e(te,PE),e(PE,L7e),e(L7e,aLr),e(PE,nLr),e(PE,jJ),e(jJ,sLr),e(PE,lLr),e(te,iLr),e(te,BE),e(BE,x7e),e(x7e,dLr),e(BE,cLr),e(BE,DJ),e(DJ,fLr),e(BE,mLr),e(te,gLr),e(te,IE),e(IE,$7e),e($7e,hLr),e(IE,pLr),e(IE,GJ),e(GJ,uLr),e(IE,_Lr),e(te,bLr),e(te,qE),e(qE,k7e),e(k7e,vLr),e(qE,FLr),e(qE,OJ),e(OJ,TLr),e(qE,MLr),e(te,ELr),e(te,NE),e(NE,S7e),e(S7e,CLr),e(NE,wLr),e(NE,VJ),e(VJ,ALr),e(NE,yLr),e(te,LLr),e(te,jE),e(jE,R7e),e(R7e,xLr),e(jE,$Lr),e(jE,XJ),e(XJ,kLr),e(jE,SLr),e(te,RLr),e(te,DE),e(DE,P7e),e(P7e,PLr),e(DE,BLr),e(DE,zJ),e(zJ,ILr),e(DE,qLr),e(te,NLr),e(te,GE),e(GE,B7e),e(B7e,jLr),e(GE,DLr),e(GE,WJ),e(WJ,GLr),e(GE,OLr),e(te,VLr),e(te,OE),e(OE,I7e),e(I7e,XLr),e(OE,zLr),e(OE,QJ),e(QJ,WLr),e(OE,QLr),e(te,HLr),e(te,VE),e(VE,q7e),e(q7e,ULr),e(VE,JLr),e(VE,HJ),e(HJ,YLr),e(VE,KLr),e(te,ZLr),e(te,XE),e(XE,N7e),e(N7e,e8r),e(XE,o8r),e(XE,UJ),e(UJ,r8r),e(XE,t8r),e(te,a8r),e(te,zE),e(zE,j7e),e(j7e,n8r),e(zE,s8r),e(zE,JJ),e(JJ,l8r),e(zE,i8r),e(te,d8r),e(te,WE),e(WE,D7e),e(D7e,c8r),e(WE,f8r),e(WE,YJ),e(YJ,m8r),e(WE,g8r),e(te,h8r),e(te,QE),e(QE,G7e),e(G7e,p8r),e(QE,u8r),e(QE,KJ),e(KJ,_8r),e(QE,b8r),e(te,v8r),e(te,HE),e(HE,O7e),e(O7e,F8r),e(HE,T8r),e(HE,ZJ),e(ZJ,M8r),e(HE,E8r),e(te,C8r),e(te,UE),e(UE,V7e),e(V7e,w8r),e(UE,A8r),e(UE,eY),e(eY,y8r),e(UE,L8r),e(jr,x8r),M(JE,jr,null),b(f,_je,_),b(f,Sc,_),e(Sc,YE),e(YE,X7e),M(A8,X7e,null),e(Sc,$8r),e(Sc,z7e),e(z7e,k8r),b(f,bje,_),b(f,mr,_),M(y8,mr,null),e(mr,S8r),e(mr,Rc),e(Rc,R8r),e(Rc,oY),e(oY,P8r),e(Rc,B8r),e(Rc,rY),e(rY,I8r),e(Rc,q8r),e(mr,N8r),e(mr,L8),e(L8,j8r),e(L8,W7e),e(W7e,D8r),e(L8,G8r),e(mr,O8r),e(mr,Ot),M(x8,Ot,null),e(Ot,V8r),e(Ot,Q7e),e(Q7e,X8r),e(Ot,z8r),e(Ot,Pc),e(Pc,W8r),e(Pc,H7e),e(H7e,Q8r),e(Pc,H8r),e(Pc,tY),e(tY,U8r),e(Pc,J8r),e(Ot,Y8r),M(KE,Ot,null),e(mr,K8r),e(mr,Dr),M($8,Dr,null),e(Dr,Z8r),e(Dr,U7e),e(U7e,exr),e(Dr,oxr),e(Dr,pn),e(pn,rxr),e(pn,J7e),e(J7e,txr),e(pn,axr),e(pn,Y7e),e(Y7e,nxr),e(pn,sxr),e(pn,K7e),e(K7e,lxr),e(pn,ixr),e(Dr,dxr),e(Dr,Re),e(Re,ZE),e(ZE,Z7e),e(Z7e,cxr),e(ZE,fxr),e(ZE,aY),e(aY,mxr),e(ZE,gxr),e(Re,hxr),e(Re,eC),e(eC,e9e),e(e9e,pxr),e(eC,uxr),e(eC,nY),e(nY,_xr),e(eC,bxr),e(Re,vxr),e(Re,oC),e(oC,o9e),e(o9e,Fxr),e(oC,Txr),e(oC,sY),e(sY,Mxr),e(oC,Exr),e(Re,Cxr),e(Re,rC),e(rC,r9e),e(r9e,wxr),e(rC,Axr),e(rC,lY),e(lY,yxr),e(rC,Lxr),e(Re,xxr),e(Re,tC),e(tC,t9e),e(t9e,$xr),e(tC,kxr),e(tC,iY),e(iY,Sxr),e(tC,Rxr),e(Re,Pxr),e(Re,aC),e(aC,a9e),e(a9e,Bxr),e(aC,Ixr),e(aC,dY),e(dY,qxr),e(aC,Nxr),e(Re,jxr),e(Re,nC),e(nC,n9e),e(n9e,Dxr),e(nC,Gxr),e(nC,cY),e(cY,Oxr),e(nC,Vxr),e(Re,Xxr),e(Re,sC),e(sC,s9e),e(s9e,zxr),e(sC,Wxr),e(sC,fY),e(fY,Qxr),e(sC,Hxr),e(Re,Uxr),e(Re,lC),e(lC,l9e),e(l9e,Jxr),e(lC,Yxr),e(lC,mY),e(mY,Kxr),e(lC,Zxr),e(Dr,e$r),M(iC,Dr,null),b(f,vje,_),b(f,Bc,_),e(Bc,dC),e(dC,i9e),M(k8,i9e,null),e(Bc,o$r),e(Bc,d9e),e(d9e,r$r),b(f,Fje,_),b(f,gr,_),M(S8,gr,null),e(gr,t$r),e(gr,Ic),e(Ic,a$r),e(Ic,gY),e(gY,n$r),e(Ic,s$r),e(Ic,hY),e(hY,l$r),e(Ic,i$r),e(gr,d$r),e(gr,R8),e(R8,c$r),e(R8,c9e),e(c9e,f$r),e(R8,m$r),e(gr,g$r),e(gr,Vt),M(P8,Vt,null),e(Vt,h$r),e(Vt,f9e),e(f9e,p$r),e(Vt,u$r),e(Vt,qc),e(qc,_$r),e(qc,m9e),e(m9e,b$r),e(qc,v$r),e(qc,pY),e(pY,F$r),e(qc,T$r),e(Vt,M$r),M(cC,Vt,null),e(gr,E$r),e(gr,Gr),M(B8,Gr,null),e(Gr,C$r),e(Gr,g9e),e(g9e,w$r),e(Gr,A$r),e(Gr,un),e(un,y$r),e(un,h9e),e(h9e,L$r),e(un,x$r),e(un,p9e),e(p9e,$$r),e(un,k$r),e(un,u9e),e(u9e,S$r),e(un,R$r),e(Gr,P$r),e(Gr,Ee),e(Ee,fC),e(fC,_9e),e(_9e,B$r),e(fC,I$r),e(fC,uY),e(uY,q$r),e(fC,N$r),e(Ee,j$r),e(Ee,mC),e(mC,b9e),e(b9e,D$r),e(mC,G$r),e(mC,_Y),e(_Y,O$r),e(mC,V$r),e(Ee,X$r),e(Ee,gC),e(gC,v9e),e(v9e,z$r),e(gC,W$r),e(gC,bY),e(bY,Q$r),e(gC,H$r),e(Ee,U$r),e(Ee,hC),e(hC,F9e),e(F9e,J$r),e(hC,Y$r),e(hC,vY),e(vY,K$r),e(hC,Z$r),e(Ee,ekr),e(Ee,pC),e(pC,T9e),e(T9e,okr),e(pC,rkr),e(pC,FY),e(FY,tkr),e(pC,akr),e(Ee,nkr),e(Ee,uC),e(uC,M9e),e(M9e,skr),e(uC,lkr),e(uC,TY),e(TY,ikr),e(uC,dkr),e(Ee,ckr),e(Ee,_C),e(_C,E9e),e(E9e,fkr),e(_C,mkr),e(_C,MY),e(MY,gkr),e(_C,hkr),e(Ee,pkr),e(Ee,bC),e(bC,C9e),e(C9e,ukr),e(bC,_kr),e(bC,EY),e(EY,bkr),e(bC,vkr),e(Ee,Fkr),e(Ee,vC),e(vC,w9e),e(w9e,Tkr),e(vC,Mkr),e(vC,CY),e(CY,Ekr),e(vC,Ckr),e(Ee,wkr),e(Ee,FC),e(FC,A9e),e(A9e,Akr),e(FC,ykr),e(FC,wY),e(wY,Lkr),e(FC,xkr),e(Ee,$kr),e(Ee,TC),e(TC,y9e),e(y9e,kkr),e(TC,Skr),e(TC,AY),e(AY,Rkr),e(TC,Pkr),e(Ee,Bkr),e(Ee,MC),e(MC,L9e),e(L9e,Ikr),e(MC,qkr),e(MC,yY),e(yY,Nkr),e(MC,jkr),e(Gr,Dkr),M(EC,Gr,null),b(f,Tje,_),b(f,Nc,_),e(Nc,CC),e(CC,x9e),M(I8,x9e,null),e(Nc,Gkr),e(Nc,$9e),e($9e,Okr),b(f,Mje,_),b(f,hr,_),M(q8,hr,null),e(hr,Vkr),e(hr,jc),e(jc,Xkr),e(jc,LY),e(LY,zkr),e(jc,Wkr),e(jc,xY),e(xY,Qkr),e(jc,Hkr),e(hr,Ukr),e(hr,N8),e(N8,Jkr),e(N8,k9e),e(k9e,Ykr),e(N8,Kkr),e(hr,Zkr),e(hr,Xt),M(j8,Xt,null),e(Xt,eSr),e(Xt,S9e),e(S9e,oSr),e(Xt,rSr),e(Xt,Dc),e(Dc,tSr),e(Dc,R9e),e(R9e,aSr),e(Dc,nSr),e(Dc,$Y),e($Y,sSr),e(Dc,lSr),e(Xt,iSr),M(wC,Xt,null),e(hr,dSr),e(hr,Or),M(D8,Or,null),e(Or,cSr),e(Or,P9e),e(P9e,fSr),e(Or,mSr),e(Or,_n),e(_n,gSr),e(_n,B9e),e(B9e,hSr),e(_n,pSr),e(_n,I9e),e(I9e,uSr),e(_n,_Sr),e(_n,q9e),e(q9e,bSr),e(_n,vSr),e(Or,FSr),e(Or,Le),e(Le,AC),e(AC,N9e),e(N9e,TSr),e(AC,MSr),e(AC,kY),e(kY,ESr),e(AC,CSr),e(Le,wSr),e(Le,yC),e(yC,j9e),e(j9e,ASr),e(yC,ySr),e(yC,SY),e(SY,LSr),e(yC,xSr),e(Le,$Sr),e(Le,LC),e(LC,D9e),e(D9e,kSr),e(LC,SSr),e(LC,RY),e(RY,RSr),e(LC,PSr),e(Le,BSr),e(Le,xC),e(xC,G9e),e(G9e,ISr),e(xC,qSr),e(xC,PY),e(PY,NSr),e(xC,jSr),e(Le,DSr),e(Le,$C),e($C,O9e),e(O9e,GSr),e($C,OSr),e($C,BY),e(BY,VSr),e($C,XSr),e(Le,zSr),e(Le,kC),e(kC,V9e),e(V9e,WSr),e(kC,QSr),e(kC,IY),e(IY,HSr),e(kC,USr),e(Le,JSr),e(Le,SC),e(SC,X9e),e(X9e,YSr),e(SC,KSr),e(SC,qY),e(qY,ZSr),e(SC,eRr),e(Le,oRr),e(Le,RC),e(RC,z9e),e(z9e,rRr),e(RC,tRr),e(RC,NY),e(NY,aRr),e(RC,nRr),e(Le,sRr),e(Le,PC),e(PC,W9e),e(W9e,lRr),e(PC,iRr),e(PC,jY),e(jY,dRr),e(PC,cRr),e(Le,fRr),e(Le,BC),e(BC,Q9e),e(Q9e,mRr),e(BC,gRr),e(BC,DY),e(DY,hRr),e(BC,pRr),e(Or,uRr),M(IC,Or,null),b(f,Eje,_),b(f,Gc,_),e(Gc,qC),e(qC,H9e),M(G8,H9e,null),e(Gc,_Rr),e(Gc,U9e),e(U9e,bRr),b(f,Cje,_),b(f,pr,_),M(O8,pr,null),e(pr,vRr),e(pr,Oc),e(Oc,FRr),e(Oc,GY),e(GY,TRr),e(Oc,MRr),e(Oc,OY),e(OY,ERr),e(Oc,CRr),e(pr,wRr),e(pr,V8),e(V8,ARr),e(V8,J9e),e(J9e,yRr),e(V8,LRr),e(pr,xRr),e(pr,zt),M(X8,zt,null),e(zt,$Rr),e(zt,Y9e),e(Y9e,kRr),e(zt,SRr),e(zt,Vc),e(Vc,RRr),e(Vc,K9e),e(K9e,PRr),e(Vc,BRr),e(Vc,VY),e(VY,IRr),e(Vc,qRr),e(zt,NRr),M(NC,zt,null),e(pr,jRr),e(pr,Vr),M(z8,Vr,null),e(Vr,DRr),e(Vr,Z9e),e(Z9e,GRr),e(Vr,ORr),e(Vr,bn),e(bn,VRr),e(bn,eMe),e(eMe,XRr),e(bn,zRr),e(bn,oMe),e(oMe,WRr),e(bn,QRr),e(bn,rMe),e(rMe,HRr),e(bn,URr),e(Vr,JRr),e(Vr,Pe),e(Pe,jC),e(jC,tMe),e(tMe,YRr),e(jC,KRr),e(jC,XY),e(XY,ZRr),e(jC,ePr),e(Pe,oPr),e(Pe,DC),e(DC,aMe),e(aMe,rPr),e(DC,tPr),e(DC,zY),e(zY,aPr),e(DC,nPr),e(Pe,sPr),e(Pe,GC),e(GC,nMe),e(nMe,lPr),e(GC,iPr),e(GC,WY),e(WY,dPr),e(GC,cPr),e(Pe,fPr),e(Pe,OC),e(OC,sMe),e(sMe,mPr),e(OC,gPr),e(OC,QY),e(QY,hPr),e(OC,pPr),e(Pe,uPr),e(Pe,VC),e(VC,lMe),e(lMe,_Pr),e(VC,bPr),e(VC,HY),e(HY,vPr),e(VC,FPr),e(Pe,TPr),e(Pe,XC),e(XC,iMe),e(iMe,MPr),e(XC,EPr),e(XC,UY),e(UY,CPr),e(XC,wPr),e(Pe,APr),e(Pe,zC),e(zC,dMe),e(dMe,yPr),e(zC,LPr),e(zC,JY),e(JY,xPr),e(zC,$Pr),e(Pe,kPr),e(Pe,WC),e(WC,cMe),e(cMe,SPr),e(WC,RPr),e(WC,YY),e(YY,PPr),e(WC,BPr),e(Pe,IPr),e(Pe,QC),e(QC,fMe),e(fMe,qPr),e(QC,NPr),e(QC,KY),e(KY,jPr),e(QC,DPr),e(Vr,GPr),M(HC,Vr,null),b(f,wje,_),b(f,Xc,_),e(Xc,UC),e(UC,mMe),M(W8,mMe,null),e(Xc,OPr),e(Xc,gMe),e(gMe,VPr),b(f,Aje,_),b(f,ur,_),M(Q8,ur,null),e(ur,XPr),e(ur,zc),e(zc,zPr),e(zc,ZY),e(ZY,WPr),e(zc,QPr),e(zc,eK),e(eK,HPr),e(zc,UPr),e(ur,JPr),e(ur,H8),e(H8,YPr),e(H8,hMe),e(hMe,KPr),e(H8,ZPr),e(ur,eBr),e(ur,Wt),M(U8,Wt,null),e(Wt,oBr),e(Wt,pMe),e(pMe,rBr),e(Wt,tBr),e(Wt,Wc),e(Wc,aBr),e(Wc,uMe),e(uMe,nBr),e(Wc,sBr),e(Wc,oK),e(oK,lBr),e(Wc,iBr),e(Wt,dBr),M(JC,Wt,null),e(ur,cBr),e(ur,Xr),M(J8,Xr,null),e(Xr,fBr),e(Xr,_Me),e(_Me,mBr),e(Xr,gBr),e(Xr,vn),e(vn,hBr),e(vn,bMe),e(bMe,pBr),e(vn,uBr),e(vn,vMe),e(vMe,_Br),e(vn,bBr),e(vn,FMe),e(FMe,vBr),e(vn,FBr),e(Xr,TBr),e(Xr,xe),e(xe,YC),e(YC,TMe),e(TMe,MBr),e(YC,EBr),e(YC,rK),e(rK,CBr),e(YC,wBr),e(xe,ABr),e(xe,KC),e(KC,MMe),e(MMe,yBr),e(KC,LBr),e(KC,tK),e(tK,xBr),e(KC,$Br),e(xe,kBr),e(xe,ZC),e(ZC,EMe),e(EMe,SBr),e(ZC,RBr),e(ZC,aK),e(aK,PBr),e(ZC,BBr),e(xe,IBr),e(xe,e5),e(e5,CMe),e(CMe,qBr),e(e5,NBr),e(e5,nK),e(nK,jBr),e(e5,DBr),e(xe,GBr),e(xe,o5),e(o5,wMe),e(wMe,OBr),e(o5,VBr),e(o5,sK),e(sK,XBr),e(o5,zBr),e(xe,WBr),e(xe,r5),e(r5,AMe),e(AMe,QBr),e(r5,HBr),e(r5,lK),e(lK,UBr),e(r5,JBr),e(xe,YBr),e(xe,t5),e(t5,yMe),e(yMe,KBr),e(t5,ZBr),e(t5,iK),e(iK,eIr),e(t5,oIr),e(xe,rIr),e(xe,a5),e(a5,LMe),e(LMe,tIr),e(a5,aIr),e(a5,dK),e(dK,nIr),e(a5,sIr),e(xe,lIr),e(xe,n5),e(n5,xMe),e(xMe,iIr),e(n5,dIr),e(n5,cK),e(cK,cIr),e(n5,fIr),e(xe,mIr),e(xe,s5),e(s5,$Me),e($Me,gIr),e(s5,hIr),e(s5,fK),e(fK,pIr),e(s5,uIr),e(Xr,_Ir),M(l5,Xr,null),b(f,yje,_),b(f,Qc,_),e(Qc,i5),e(i5,kMe),M(Y8,kMe,null),e(Qc,bIr),e(Qc,SMe),e(SMe,vIr),b(f,Lje,_),b(f,_r,_),M(K8,_r,null),e(_r,FIr),e(_r,Hc),e(Hc,TIr),e(Hc,mK),e(mK,MIr),e(Hc,EIr),e(Hc,gK),e(gK,CIr),e(Hc,wIr),e(_r,AIr),e(_r,Z8),e(Z8,yIr),e(Z8,RMe),e(RMe,LIr),e(Z8,xIr),e(_r,$Ir),e(_r,Qt),M(ex,Qt,null),e(Qt,kIr),e(Qt,PMe),e(PMe,SIr),e(Qt,RIr),e(Qt,Uc),e(Uc,PIr),e(Uc,BMe),e(BMe,BIr),e(Uc,IIr),e(Uc,hK),e(hK,qIr),e(Uc,NIr),e(Qt,jIr),M(d5,Qt,null),e(_r,DIr),e(_r,zr),M(ox,zr,null),e(zr,GIr),e(zr,IMe),e(IMe,OIr),e(zr,VIr),e(zr,Fn),e(Fn,XIr),e(Fn,qMe),e(qMe,zIr),e(Fn,WIr),e(Fn,NMe),e(NMe,QIr),e(Fn,HIr),e(Fn,jMe),e(jMe,UIr),e(Fn,JIr),e(zr,YIr),e(zr,$e),e($e,c5),e(c5,DMe),e(DMe,KIr),e(c5,ZIr),e(c5,pK),e(pK,eqr),e(c5,oqr),e($e,rqr),e($e,f5),e(f5,GMe),e(GMe,tqr),e(f5,aqr),e(f5,uK),e(uK,nqr),e(f5,sqr),e($e,lqr),e($e,m5),e(m5,OMe),e(OMe,iqr),e(m5,dqr),e(m5,_K),e(_K,cqr),e(m5,fqr),e($e,mqr),e($e,g5),e(g5,VMe),e(VMe,gqr),e(g5,hqr),e(g5,bK),e(bK,pqr),e(g5,uqr),e($e,_qr),e($e,h5),e(h5,XMe),e(XMe,bqr),e(h5,vqr),e(h5,vK),e(vK,Fqr),e(h5,Tqr),e($e,Mqr),e($e,p5),e(p5,zMe),e(zMe,Eqr),e(p5,Cqr),e(p5,FK),e(FK,wqr),e(p5,Aqr),e($e,yqr),e($e,u5),e(u5,WMe),e(WMe,Lqr),e(u5,xqr),e(u5,TK),e(TK,$qr),e(u5,kqr),e($e,Sqr),e($e,_5),e(_5,QMe),e(QMe,Rqr),e(_5,Pqr),e(_5,MK),e(MK,Bqr),e(_5,Iqr),e($e,qqr),e($e,b5),e(b5,HMe),e(HMe,Nqr),e(b5,jqr),e(b5,EK),e(EK,Dqr),e(b5,Gqr),e($e,Oqr),e($e,v5),e(v5,UMe),e(UMe,Vqr),e(v5,Xqr),e(v5,CK),e(CK,zqr),e(v5,Wqr),e(zr,Qqr),M(F5,zr,null),b(f,xje,_),b(f,Jc,_),e(Jc,T5),e(T5,JMe),M(rx,JMe,null),e(Jc,Hqr),e(Jc,YMe),e(YMe,Uqr),b(f,$je,_),b(f,br,_),M(tx,br,null),e(br,Jqr),e(br,Yc),e(Yc,Yqr),e(Yc,wK),e(wK,Kqr),e(Yc,Zqr),e(Yc,AK),e(AK,eNr),e(Yc,oNr),e(br,rNr),e(br,ax),e(ax,tNr),e(ax,KMe),e(KMe,aNr),e(ax,nNr),e(br,sNr),e(br,Ht),M(nx,Ht,null),e(Ht,lNr),e(Ht,ZMe),e(ZMe,iNr),e(Ht,dNr),e(Ht,Kc),e(Kc,cNr),e(Kc,e4e),e(e4e,fNr),e(Kc,mNr),e(Kc,yK),e(yK,gNr),e(Kc,hNr),e(Ht,pNr),M(M5,Ht,null),e(br,uNr),e(br,Wr),M(sx,Wr,null),e(Wr,_Nr),e(Wr,o4e),e(o4e,bNr),e(Wr,vNr),e(Wr,Tn),e(Tn,FNr),e(Tn,r4e),e(r4e,TNr),e(Tn,MNr),e(Tn,t4e),e(t4e,ENr),e(Tn,CNr),e(Tn,a4e),e(a4e,wNr),e(Tn,ANr),e(Wr,yNr),e(Wr,De),e(De,E5),e(E5,n4e),e(n4e,LNr),e(E5,xNr),e(E5,LK),e(LK,$Nr),e(E5,kNr),e(De,SNr),e(De,C5),e(C5,s4e),e(s4e,RNr),e(C5,PNr),e(C5,xK),e(xK,BNr),e(C5,INr),e(De,qNr),e(De,w5),e(w5,l4e),e(l4e,NNr),e(w5,jNr),e(w5,$K),e($K,DNr),e(w5,GNr),e(De,ONr),e(De,A5),e(A5,i4e),e(i4e,VNr),e(A5,XNr),e(A5,kK),e(kK,zNr),e(A5,WNr),e(De,QNr),e(De,y5),e(y5,d4e),e(d4e,HNr),e(y5,UNr),e(y5,SK),e(SK,JNr),e(y5,YNr),e(De,KNr),e(De,L5),e(L5,c4e),e(c4e,ZNr),e(L5,ejr),e(L5,RK),e(RK,ojr),e(L5,rjr),e(De,tjr),e(De,x5),e(x5,f4e),e(f4e,ajr),e(x5,njr),e(x5,PK),e(PK,sjr),e(x5,ljr),e(De,ijr),e(De,$5),e($5,m4e),e(m4e,djr),e($5,cjr),e($5,BK),e(BK,fjr),e($5,mjr),e(Wr,gjr),M(k5,Wr,null),b(f,kje,_),b(f,Zc,_),e(Zc,S5),e(S5,g4e),M(lx,g4e,null),e(Zc,hjr),e(Zc,h4e),e(h4e,pjr),b(f,Sje,_),b(f,vr,_),M(ix,vr,null),e(vr,ujr),e(vr,ef),e(ef,_jr),e(ef,IK),e(IK,bjr),e(ef,vjr),e(ef,qK),e(qK,Fjr),e(ef,Tjr),e(vr,Mjr),e(vr,dx),e(dx,Ejr),e(dx,p4e),e(p4e,Cjr),e(dx,wjr),e(vr,Ajr),e(vr,Ut),M(cx,Ut,null),e(Ut,yjr),e(Ut,u4e),e(u4e,Ljr),e(Ut,xjr),e(Ut,of),e(of,$jr),e(of,_4e),e(_4e,kjr),e(of,Sjr),e(of,NK),e(NK,Rjr),e(of,Pjr),e(Ut,Bjr),M(R5,Ut,null),e(vr,Ijr),e(vr,Qr),M(fx,Qr,null),e(Qr,qjr),e(Qr,b4e),e(b4e,Njr),e(Qr,jjr),e(Qr,Mn),e(Mn,Djr),e(Mn,v4e),e(v4e,Gjr),e(Mn,Ojr),e(Mn,F4e),e(F4e,Vjr),e(Mn,Xjr),e(Mn,T4e),e(T4e,zjr),e(Mn,Wjr),e(Qr,Qjr),e(Qr,Ge),e(Ge,P5),e(P5,M4e),e(M4e,Hjr),e(P5,Ujr),e(P5,jK),e(jK,Jjr),e(P5,Yjr),e(Ge,Kjr),e(Ge,B5),e(B5,E4e),e(E4e,Zjr),e(B5,eDr),e(B5,DK),e(DK,oDr),e(B5,rDr),e(Ge,tDr),e(Ge,I5),e(I5,C4e),e(C4e,aDr),e(I5,nDr),e(I5,GK),e(GK,sDr),e(I5,lDr),e(Ge,iDr),e(Ge,q5),e(q5,w4e),e(w4e,dDr),e(q5,cDr),e(q5,OK),e(OK,fDr),e(q5,mDr),e(Ge,gDr),e(Ge,N5),e(N5,A4e),e(A4e,hDr),e(N5,pDr),e(N5,VK),e(VK,uDr),e(N5,_Dr),e(Ge,bDr),e(Ge,j5),e(j5,y4e),e(y4e,vDr),e(j5,FDr),e(j5,XK),e(XK,TDr),e(j5,MDr),e(Ge,EDr),e(Ge,D5),e(D5,L4e),e(L4e,CDr),e(D5,wDr),e(D5,zK),e(zK,ADr),e(D5,yDr),e(Ge,LDr),e(Ge,G5),e(G5,x4e),e(x4e,xDr),e(G5,$Dr),e(G5,WK),e(WK,kDr),e(G5,SDr),e(Qr,RDr),M(O5,Qr,null),b(f,Rje,_),b(f,rf,_),e(rf,V5),e(V5,$4e),M(mx,$4e,null),e(rf,PDr),e(rf,k4e),e(k4e,BDr),b(f,Pje,_),b(f,Fr,_),M(gx,Fr,null),e(Fr,IDr),e(Fr,tf),e(tf,qDr),e(tf,QK),e(QK,NDr),e(tf,jDr),e(tf,HK),e(HK,DDr),e(tf,GDr),e(Fr,ODr),e(Fr,hx),e(hx,VDr),e(hx,S4e),e(S4e,XDr),e(hx,zDr),e(Fr,WDr),e(Fr,Jt),M(px,Jt,null),e(Jt,QDr),e(Jt,R4e),e(R4e,HDr),e(Jt,UDr),e(Jt,af),e(af,JDr),e(af,P4e),e(P4e,YDr),e(af,KDr),e(af,UK),e(UK,ZDr),e(af,eGr),e(Jt,oGr),M(X5,Jt,null),e(Fr,rGr),e(Fr,Hr),M(ux,Hr,null),e(Hr,tGr),e(Hr,B4e),e(B4e,aGr),e(Hr,nGr),e(Hr,En),e(En,sGr),e(En,I4e),e(I4e,lGr),e(En,iGr),e(En,q4e),e(q4e,dGr),e(En,cGr),e(En,N4e),e(N4e,fGr),e(En,mGr),e(Hr,gGr),e(Hr,j4e),e(j4e,z5),e(z5,D4e),e(D4e,hGr),e(z5,pGr),e(z5,JK),e(JK,uGr),e(z5,_Gr),e(Hr,bGr),M(W5,Hr,null),b(f,Bje,_),b(f,nf,_),e(nf,Q5),e(Q5,G4e),M(_x,G4e,null),e(nf,vGr),e(nf,O4e),e(O4e,FGr),b(f,Ije,_),b(f,Tr,_),M(bx,Tr,null),e(Tr,TGr),e(Tr,sf),e(sf,MGr),e(sf,YK),e(YK,EGr),e(sf,CGr),e(sf,KK),e(KK,wGr),e(sf,AGr),e(Tr,yGr),e(Tr,vx),e(vx,LGr),e(vx,V4e),e(V4e,xGr),e(vx,$Gr),e(Tr,kGr),e(Tr,Yt),M(Fx,Yt,null),e(Yt,SGr),e(Yt,X4e),e(X4e,RGr),e(Yt,PGr),e(Yt,lf),e(lf,BGr),e(lf,z4e),e(z4e,IGr),e(lf,qGr),e(lf,ZK),e(ZK,NGr),e(lf,jGr),e(Yt,DGr),M(H5,Yt,null),e(Tr,GGr),e(Tr,Ur),M(Tx,Ur,null),e(Ur,OGr),e(Ur,W4e),e(W4e,VGr),e(Ur,XGr),e(Ur,Cn),e(Cn,zGr),e(Cn,Q4e),e(Q4e,WGr),e(Cn,QGr),e(Cn,H4e),e(H4e,HGr),e(Cn,UGr),e(Cn,U4e),e(U4e,JGr),e(Cn,YGr),e(Ur,KGr),e(Ur,Mx),e(Mx,U5),e(U5,J4e),e(J4e,ZGr),e(U5,eOr),e(U5,eZ),e(eZ,oOr),e(U5,rOr),e(Mx,tOr),e(Mx,J5),e(J5,Y4e),e(Y4e,aOr),e(J5,nOr),e(J5,oZ),e(oZ,sOr),e(J5,lOr),e(Ur,iOr),M(Y5,Ur,null),b(f,qje,_),b(f,df,_),e(df,K5),e(K5,K4e),M(Ex,K4e,null),e(df,dOr),e(df,Z4e),e(Z4e,cOr),b(f,Nje,_),b(f,Mr,_),M(Cx,Mr,null),e(Mr,fOr),e(Mr,cf),e(cf,mOr),e(cf,rZ),e(rZ,gOr),e(cf,hOr),e(cf,tZ),e(tZ,pOr),e(cf,uOr),e(Mr,_Or),e(Mr,wx),e(wx,bOr),e(wx,eEe),e(eEe,vOr),e(wx,FOr),e(Mr,TOr),e(Mr,Kt),M(Ax,Kt,null),e(Kt,MOr),e(Kt,oEe),e(oEe,EOr),e(Kt,COr),e(Kt,ff),e(ff,wOr),e(ff,rEe),e(rEe,AOr),e(ff,yOr),e(ff,aZ),e(aZ,LOr),e(ff,xOr),e(Kt,$Or),M(Z5,Kt,null),e(Mr,kOr),e(Mr,Jr),M(yx,Jr,null),e(Jr,SOr),e(Jr,tEe),e(tEe,ROr),e(Jr,POr),e(Jr,wn),e(wn,BOr),e(wn,aEe),e(aEe,IOr),e(wn,qOr),e(wn,nEe),e(nEe,NOr),e(wn,jOr),e(wn,sEe),e(sEe,DOr),e(wn,GOr),e(Jr,OOr),e(Jr,lEe),e(lEe,ew),e(ew,iEe),e(iEe,VOr),e(ew,XOr),e(ew,nZ),e(nZ,zOr),e(ew,WOr),e(Jr,QOr),M(ow,Jr,null),jje=!0},p(f,[_]){const Lx={};_&2&&(Lx.$$scope={dirty:_,ctx:f}),Ff.$set(Lx);const dEe={};_&2&&(dEe.$$scope={dirty:_,ctx:f}),Mg.$set(dEe);const cEe={};_&2&&(cEe.$$scope={dirty:_,ctx:f}),rh.$set(cEe);const fEe={};_&2&&(fEe.$$scope={dirty:_,ctx:f}),Ph.$set(fEe);const xx={};_&2&&(xx.$$scope={dirty:_,ctx:f}),Bh.$set(xx);const mEe={};_&2&&(mEe.$$scope={dirty:_,ctx:f}),op.$set(mEe);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),rp.$set(An);const gEe={};_&2&&(gEe.$$scope={dirty:_,ctx:f}),np.$set(gEe);const hEe={};_&2&&(hEe.$$scope={dirty:_,ctx:f}),Zu.$set(hEe);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:f}),o_.$set(pEe);const $x={};_&2&&($x.$$scope={dirty:_,ctx:f}),z_.$set($x);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:f}),Q_.$set(uEe);const kx={};_&2&&(kx.$$scope={dirty:_,ctx:f}),k3.$set(kx);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:f}),R3.$set(_Ee);const Sx={};_&2&&(Sx.$$scope={dirty:_,ctx:f}),u1.$set(Sx);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),b1.$set(bEe);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),I1.$set(vEe);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),N1.$set(FEe);const mf={};_&2&&(mf.$$scope={dirty:_,ctx:f}),Rb.$set(mf);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),Bb.$set(TEe);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),m2.$set(MEe);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:f}),h2.$set(EEe);const Rx={};_&2&&(Rx.$$scope={dirty:_,ctx:f}),T2.$set(Rx);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:f}),E2.$set(CEe);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:f}),nv.$set(wEe);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:f}),lv.$set(AEe);const et={};_&2&&(et.$$scope={dirty:_,ctx:f}),Uv.$set(et);const Px={};_&2&&(Px.$$scope={dirty:_,ctx:f}),Yv.$set(Px);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:f}),eF.$set(yEe);const Bx={};_&2&&(Bx.$$scope={dirty:_,ctx:f}),rF.$set(Bx);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:f}),uF.$set(LEe);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:f}),bF.$set(ot);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:f}),TF.$set(xEe);const gf={};_&2&&(gf.$$scope={dirty:_,ctx:f}),EF.$set(gf);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:f}),PF.$set($Ee);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:f}),IF.$set(kEe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),VF.$set(y);const rw={};_&2&&(rw.$$scope={dirty:_,ctx:f}),zF.$set(rw);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:f}),rT.$set(SEe);const REe={};_&2&&(REe.$$scope={dirty:_,ctx:f}),aT.$set(REe);const tw={};_&2&&(tw.$$scope={dirty:_,ctx:f}),iT.$set(tw);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:f}),cT.$set(PEe);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:f}),_T.$set(BEe);const aw={};_&2&&(aw.$$scope={dirty:_,ctx:f}),vT.$set(aw);const IEe={};_&2&&(IEe.$$scope={dirty:_,ctx:f}),CT.$set(IEe);const qEe={};_&2&&(qEe.$$scope={dirty:_,ctx:f}),AT.$set(qEe);const nw={};_&2&&(nw.$$scope={dirty:_,ctx:f}),$T.$set(nw);const NEe={};_&2&&(NEe.$$scope={dirty:_,ctx:f}),ST.$set(NEe);const jEe={};_&2&&(jEe.$$scope={dirty:_,ctx:f}),BT.$set(jEe);const sw={};_&2&&(sw.$$scope={dirty:_,ctx:f}),qT.$set(sw);const DEe={};_&2&&(DEe.$$scope={dirty:_,ctx:f}),VT.$set(DEe);const GEe={};_&2&&(GEe.$$scope={dirty:_,ctx:f}),zT.$set(GEe);const lw={};_&2&&(lw.$$scope={dirty:_,ctx:f}),HT.$set(lw);const OEe={};_&2&&(OEe.$$scope={dirty:_,ctx:f}),JT.$set(OEe);const VEe={};_&2&&(VEe.$$scope={dirty:_,ctx:f}),O7.$set(VEe);const iw={};_&2&&(iw.$$scope={dirty:_,ctx:f}),X7.$set(iw);const XEe={};_&2&&(XEe.$$scope={dirty:_,ctx:f}),h9.$set(XEe);const zEe={};_&2&&(zEe.$$scope={dirty:_,ctx:f}),u9.$set(zEe);const dw={};_&2&&(dw.$$scope={dirty:_,ctx:f}),x9.$set(dw);const WEe={};_&2&&(WEe.$$scope={dirty:_,ctx:f}),k9.$set(WEe);const QEe={};_&2&&(QEe.$$scope={dirty:_,ctx:f}),I9.$set(QEe);const cw={};_&2&&(cw.$$scope={dirty:_,ctx:f}),N9.$set(cw);const HEe={};_&2&&(HEe.$$scope={dirty:_,ctx:f}),nM.$set(HEe);const UEe={};_&2&&(UEe.$$scope={dirty:_,ctx:f}),lM.$set(UEe);const fw={};_&2&&(fw.$$scope={dirty:_,ctx:f}),bM.$set(fw);const JEe={};_&2&&(JEe.$$scope={dirty:_,ctx:f}),FM.$set(JEe);const YEe={};_&2&&(YEe.$$scope={dirty:_,ctx:f}),QM.$set(YEe);const mw={};_&2&&(mw.$$scope={dirty:_,ctx:f}),UM.$set(mw);const KEe={};_&2&&(KEe.$$scope={dirty:_,ctx:f}),g4.$set(KEe);const ZEe={};_&2&&(ZEe.$$scope={dirty:_,ctx:f}),p4.$set(ZEe);const gw={};_&2&&(gw.$$scope={dirty:_,ctx:f}),b4.$set(gw);const eCe={};_&2&&(eCe.$$scope={dirty:_,ctx:f}),F4.$set(eCe);const oCe={};_&2&&(oCe.$$scope={dirty:_,ctx:f}),M4.$set(oCe);const hw={};_&2&&(hw.$$scope={dirty:_,ctx:f}),C4.$set(hw);const rCe={};_&2&&(rCe.$$scope={dirty:_,ctx:f}),z4.$set(rCe);const tCe={};_&2&&(tCe.$$scope={dirty:_,ctx:f}),Q4.$set(tCe);const pw={};_&2&&(pw.$$scope={dirty:_,ctx:f}),hE.$set(pw);const aCe={};_&2&&(aCe.$$scope={dirty:_,ctx:f}),uE.$set(aCe);const nCe={};_&2&&(nCe.$$scope={dirty:_,ctx:f}),bE.$set(nCe);const uw={};_&2&&(uw.$$scope={dirty:_,ctx:f}),FE.$set(uw);const sCe={};_&2&&(sCe.$$scope={dirty:_,ctx:f}),ME.$set(sCe);const lCe={};_&2&&(lCe.$$scope={dirty:_,ctx:f}),CE.$set(lCe);const _w={};_&2&&(_w.$$scope={dirty:_,ctx:f}),JE.$set(_w);const iCe={};_&2&&(iCe.$$scope={dirty:_,ctx:f}),KE.$set(iCe);const dCe={};_&2&&(dCe.$$scope={dirty:_,ctx:f}),iC.$set(dCe);const bw={};_&2&&(bw.$$scope={dirty:_,ctx:f}),cC.$set(bw);const cCe={};_&2&&(cCe.$$scope={dirty:_,ctx:f}),EC.$set(cCe);const fCe={};_&2&&(fCe.$$scope={dirty:_,ctx:f}),wC.$set(fCe);const vw={};_&2&&(vw.$$scope={dirty:_,ctx:f}),IC.$set(vw);const mCe={};_&2&&(mCe.$$scope={dirty:_,ctx:f}),NC.$set(mCe);const gCe={};_&2&&(gCe.$$scope={dirty:_,ctx:f}),HC.$set(gCe);const Fw={};_&2&&(Fw.$$scope={dirty:_,ctx:f}),JC.$set(Fw);const hCe={};_&2&&(hCe.$$scope={dirty:_,ctx:f}),l5.$set(hCe);const pCe={};_&2&&(pCe.$$scope={dirty:_,ctx:f}),d5.$set(pCe);const Tw={};_&2&&(Tw.$$scope={dirty:_,ctx:f}),F5.$set(Tw);const uCe={};_&2&&(uCe.$$scope={dirty:_,ctx:f}),M5.$set(uCe);const _Ce={};_&2&&(_Ce.$$scope={dirty:_,ctx:f}),k5.$set(_Ce);const Mw={};_&2&&(Mw.$$scope={dirty:_,ctx:f}),R5.$set(Mw);const bCe={};_&2&&(bCe.$$scope={dirty:_,ctx:f}),O5.$set(bCe);const vCe={};_&2&&(vCe.$$scope={dirty:_,ctx:f}),X5.$set(vCe);const Ew={};_&2&&(Ew.$$scope={dirty:_,ctx:f}),W5.$set(Ew);const FCe={};_&2&&(FCe.$$scope={dirty:_,ctx:f}),H5.$set(FCe);const TCe={};_&2&&(TCe.$$scope={dirty:_,ctx:f}),Y5.$set(TCe);const Cw={};_&2&&(Cw.$$scope={dirty:_,ctx:f}),Z5.$set(Cw);const MCe={};_&2&&(MCe.$$scope={dirty:_,ctx:f}),ow.$set(MCe)},i(f){jje||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(EA.$$.fragment,f),E(CA.$$.fragment,f),E(Ff.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(xA.$$.fragment,f),E(Mg.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(BA.$$.fragment,f),E(rh.$$.fragment,f),E(IA.$$.fragment,f),E(qA.$$.fragment,f),E(NA.$$.fragment,f),E(GA.$$.fragment,f),E(Ph.$$.fragment,f),E(Bh.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(QA.$$.fragment,f),E(op.$$.fragment,f),E(rp.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(KA.$$.fragment,f),E(np.$$.fragment,f),E(ZA.$$.fragment,f),E(Zu.$$.fragment,f),E(e6.$$.fragment,f),E(o6.$$.fragment,f),E(t6.$$.fragment,f),E(o_.$$.fragment,f),E(a6.$$.fragment,f),E(z_.$$.fragment,f),E(n6.$$.fragment,f),E(s6.$$.fragment,f),E(i6.$$.fragment,f),E(Q_.$$.fragment,f),E(d6.$$.fragment,f),E(k3.$$.fragment,f),E(c6.$$.fragment,f),E(f6.$$.fragment,f),E(g6.$$.fragment,f),E(R3.$$.fragment,f),E(h6.$$.fragment,f),E(u1.$$.fragment,f),E(p6.$$.fragment,f),E(u6.$$.fragment,f),E(b6.$$.fragment,f),E(b1.$$.fragment,f),E(v6.$$.fragment,f),E(I1.$$.fragment,f),E(F6.$$.fragment,f),E(T6.$$.fragment,f),E(E6.$$.fragment,f),E(N1.$$.fragment,f),E(C6.$$.fragment,f),E(Rb.$$.fragment,f),E(w6.$$.fragment,f),E(A6.$$.fragment,f),E(L6.$$.fragment,f),E(Bb.$$.fragment,f),E(x6.$$.fragment,f),E(m2.$$.fragment,f),E($6.$$.fragment,f),E(k6.$$.fragment,f),E(R6.$$.fragment,f),E(h2.$$.fragment,f),E(P6.$$.fragment,f),E(T2.$$.fragment,f),E(B6.$$.fragment,f),E(I6.$$.fragment,f),E(N6.$$.fragment,f),E(E2.$$.fragment,f),E(j6.$$.fragment,f),E(nv.$$.fragment,f),E(D6.$$.fragment,f),E(G6.$$.fragment,f),E(V6.$$.fragment,f),E(lv.$$.fragment,f),E(X6.$$.fragment,f),E(Uv.$$.fragment,f),E(z6.$$.fragment,f),E(W6.$$.fragment,f),E(H6.$$.fragment,f),E(Yv.$$.fragment,f),E(U6.$$.fragment,f),E(eF.$$.fragment,f),E(J6.$$.fragment,f),E(Y6.$$.fragment,f),E(Z6.$$.fragment,f),E(rF.$$.fragment,f),E(ey.$$.fragment,f),E(uF.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(bF.$$.fragment,f),E(ny.$$.fragment,f),E(TF.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(EF.$$.fragment,f),E(cy.$$.fragment,f),E(PF.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(IF.$$.fragment,f),E(py.$$.fragment,f),E(VF.$$.fragment,f),E(uy.$$.fragment,f),E(_y.$$.fragment,f),E(vy.$$.fragment,f),E(zF.$$.fragment,f),E(Fy.$$.fragment,f),E(rT.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(aT.$$.fragment,f),E(wy.$$.fragment,f),E(iT.$$.fragment,f),E(yy.$$.fragment,f),E(Ly.$$.fragment,f),E($y.$$.fragment,f),E(cT.$$.fragment,f),E(ky.$$.fragment,f),E(_T.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(vT.$$.fragment,f),E(Iy.$$.fragment,f),E(CT.$$.fragment,f),E(qy.$$.fragment,f),E(Ny.$$.fragment,f),E(Dy.$$.fragment,f),E(AT.$$.fragment,f),E(Gy.$$.fragment,f),E($T.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Wy.$$.fragment,f),E(ST.$$.fragment,f),E(Qy.$$.fragment,f),E(BT.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(qT.$$.fragment,f),E(Ky.$$.fragment,f),E(VT.$$.fragment,f),E(Zy.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(zT.$$.fragment,f),E(tL.$$.fragment,f),E(HT.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(JT.$$.fragment,f),E(iL.$$.fragment,f),E(O7.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(X7.$$.fragment,f),E(gL.$$.fragment,f),E(h9.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(u9.$$.fragment,f),E(bL.$$.fragment,f),E(x9.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(k9.$$.fragment,f),E(EL.$$.fragment,f),E(I9.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(N9.$$.fragment,f),E(LL.$$.fragment,f),E(nM.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(lM.$$.fragment,f),E(RL.$$.fragment,f),E(bM.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(qL.$$.fragment,f),E(FM.$$.fragment,f),E(NL.$$.fragment,f),E(QM.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(UM.$$.fragment,f),E(VL.$$.fragment,f),E(g4.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(p4.$$.fragment,f),E(HL.$$.fragment,f),E(b4.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(F4.$$.fragment,f),E(e8.$$.fragment,f),E(M4.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(C4.$$.fragment,f),E(n8.$$.fragment,f),E(z4.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(Q4.$$.fragment,f),E(c8.$$.fragment,f),E(hE.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(uE.$$.fragment,f),E(p8.$$.fragment,f),E(bE.$$.fragment,f),E(u8.$$.fragment,f),E(_8.$$.fragment,f),E(v8.$$.fragment,f),E(FE.$$.fragment,f),E(F8.$$.fragment,f),E(ME.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(CE.$$.fragment,f),E(w8.$$.fragment,f),E(JE.$$.fragment,f),E(A8.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(KE.$$.fragment,f),E($8.$$.fragment,f),E(iC.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(P8.$$.fragment,f),E(cC.$$.fragment,f),E(B8.$$.fragment,f),E(EC.$$.fragment,f),E(I8.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(wC.$$.fragment,f),E(D8.$$.fragment,f),E(IC.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E(NC.$$.fragment,f),E(z8.$$.fragment,f),E(HC.$$.fragment,f),E(W8.$$.fragment,f),E(Q8.$$.fragment,f),E(U8.$$.fragment,f),E(JC.$$.fragment,f),E(J8.$$.fragment,f),E(l5.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(ex.$$.fragment,f),E(d5.$$.fragment,f),E(ox.$$.fragment,f),E(F5.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(M5.$$.fragment,f),E(sx.$$.fragment,f),E(k5.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(R5.$$.fragment,f),E(fx.$$.fragment,f),E(O5.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(X5.$$.fragment,f),E(ux.$$.fragment,f),E(W5.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(H5.$$.fragment,f),E(Tx.$$.fragment,f),E(Y5.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(Z5.$$.fragment,f),E(yx.$$.fragment,f),E(ow.$$.fragment,f),jje=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(EA.$$.fragment,f),C(CA.$$.fragment,f),C(Ff.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(xA.$$.fragment,f),C(Mg.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(BA.$$.fragment,f),C(rh.$$.fragment,f),C(IA.$$.fragment,f),C(qA.$$.fragment,f),C(NA.$$.fragment,f),C(GA.$$.fragment,f),C(Ph.$$.fragment,f),C(Bh.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(QA.$$.fragment,f),C(op.$$.fragment,f),C(rp.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(KA.$$.fragment,f),C(np.$$.fragment,f),C(ZA.$$.fragment,f),C(Zu.$$.fragment,f),C(e6.$$.fragment,f),C(o6.$$.fragment,f),C(t6.$$.fragment,f),C(o_.$$.fragment,f),C(a6.$$.fragment,f),C(z_.$$.fragment,f),C(n6.$$.fragment,f),C(s6.$$.fragment,f),C(i6.$$.fragment,f),C(Q_.$$.fragment,f),C(d6.$$.fragment,f),C(k3.$$.fragment,f),C(c6.$$.fragment,f),C(f6.$$.fragment,f),C(g6.$$.fragment,f),C(R3.$$.fragment,f),C(h6.$$.fragment,f),C(u1.$$.fragment,f),C(p6.$$.fragment,f),C(u6.$$.fragment,f),C(b6.$$.fragment,f),C(b1.$$.fragment,f),C(v6.$$.fragment,f),C(I1.$$.fragment,f),C(F6.$$.fragment,f),C(T6.$$.fragment,f),C(E6.$$.fragment,f),C(N1.$$.fragment,f),C(C6.$$.fragment,f),C(Rb.$$.fragment,f),C(w6.$$.fragment,f),C(A6.$$.fragment,f),C(L6.$$.fragment,f),C(Bb.$$.fragment,f),C(x6.$$.fragment,f),C(m2.$$.fragment,f),C($6.$$.fragment,f),C(k6.$$.fragment,f),C(R6.$$.fragment,f),C(h2.$$.fragment,f),C(P6.$$.fragment,f),C(T2.$$.fragment,f),C(B6.$$.fragment,f),C(I6.$$.fragment,f),C(N6.$$.fragment,f),C(E2.$$.fragment,f),C(j6.$$.fragment,f),C(nv.$$.fragment,f),C(D6.$$.fragment,f),C(G6.$$.fragment,f),C(V6.$$.fragment,f),C(lv.$$.fragment,f),C(X6.$$.fragment,f),C(Uv.$$.fragment,f),C(z6.$$.fragment,f),C(W6.$$.fragment,f),C(H6.$$.fragment,f),C(Yv.$$.fragment,f),C(U6.$$.fragment,f),C(eF.$$.fragment,f),C(J6.$$.fragment,f),C(Y6.$$.fragment,f),C(Z6.$$.fragment,f),C(rF.$$.fragment,f),C(ey.$$.fragment,f),C(uF.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(bF.$$.fragment,f),C(ny.$$.fragment,f),C(TF.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(EF.$$.fragment,f),C(cy.$$.fragment,f),C(PF.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(IF.$$.fragment,f),C(py.$$.fragment,f),C(VF.$$.fragment,f),C(uy.$$.fragment,f),C(_y.$$.fragment,f),C(vy.$$.fragment,f),C(zF.$$.fragment,f),C(Fy.$$.fragment,f),C(rT.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(aT.$$.fragment,f),C(wy.$$.fragment,f),C(iT.$$.fragment,f),C(yy.$$.fragment,f),C(Ly.$$.fragment,f),C($y.$$.fragment,f),C(cT.$$.fragment,f),C(ky.$$.fragment,f),C(_T.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(vT.$$.fragment,f),C(Iy.$$.fragment,f),C(CT.$$.fragment,f),C(qy.$$.fragment,f),C(Ny.$$.fragment,f),C(Dy.$$.fragment,f),C(AT.$$.fragment,f),C(Gy.$$.fragment,f),C($T.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Wy.$$.fragment,f),C(ST.$$.fragment,f),C(Qy.$$.fragment,f),C(BT.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(qT.$$.fragment,f),C(Ky.$$.fragment,f),C(VT.$$.fragment,f),C(Zy.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(zT.$$.fragment,f),C(tL.$$.fragment,f),C(HT.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(JT.$$.fragment,f),C(iL.$$.fragment,f),C(O7.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(X7.$$.fragment,f),C(gL.$$.fragment,f),C(h9.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(u9.$$.fragment,f),C(bL.$$.fragment,f),C(x9.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(k9.$$.fragment,f),C(EL.$$.fragment,f),C(I9.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(N9.$$.fragment,f),C(LL.$$.fragment,f),C(nM.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(lM.$$.fragment,f),C(RL.$$.fragment,f),C(bM.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(qL.$$.fragment,f),C(FM.$$.fragment,f),C(NL.$$.fragment,f),C(QM.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(UM.$$.fragment,f),C(VL.$$.fragment,f),C(g4.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(p4.$$.fragment,f),C(HL.$$.fragment,f),C(b4.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(F4.$$.fragment,f),C(e8.$$.fragment,f),C(M4.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(C4.$$.fragment,f),C(n8.$$.fragment,f),C(z4.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(Q4.$$.fragment,f),C(c8.$$.fragment,f),C(hE.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(uE.$$.fragment,f),C(p8.$$.fragment,f),C(bE.$$.fragment,f),C(u8.$$.fragment,f),C(_8.$$.fragment,f),C(v8.$$.fragment,f),C(FE.$$.fragment,f),C(F8.$$.fragment,f),C(ME.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(CE.$$.fragment,f),C(w8.$$.fragment,f),C(JE.$$.fragment,f),C(A8.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(KE.$$.fragment,f),C($8.$$.fragment,f),C(iC.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(P8.$$.fragment,f),C(cC.$$.fragment,f),C(B8.$$.fragment,f),C(EC.$$.fragment,f),C(I8.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(wC.$$.fragment,f),C(D8.$$.fragment,f),C(IC.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C(NC.$$.fragment,f),C(z8.$$.fragment,f),C(HC.$$.fragment,f),C(W8.$$.fragment,f),C(Q8.$$.fragment,f),C(U8.$$.fragment,f),C(JC.$$.fragment,f),C(J8.$$.fragment,f),C(l5.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(ex.$$.fragment,f),C(d5.$$.fragment,f),C(ox.$$.fragment,f),C(F5.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(M5.$$.fragment,f),C(sx.$$.fragment,f),C(k5.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(R5.$$.fragment,f),C(fx.$$.fragment,f),C(O5.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(X5.$$.fragment,f),C(ux.$$.fragment,f),C(W5.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(H5.$$.fragment,f),C(Tx.$$.fragment,f),C(Y5.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(Z5.$$.fragment,f),C(yx.$$.fragment,f),C(ow.$$.fragment,f),jje=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(je),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(Iqe),f&&t(bi),w(EA),f&&t(qqe),f&&t(kn),f&&t(Nqe),w(CA,f),f&&t(jqe),f&&t(W$),f&&t(Dqe),w(Ff,f),f&&t(Gqe),f&&t(vi),w(wA),f&&t(Oqe),f&&t(Co),w(AA),w(xA),w(Mg),w($A),f&&t(Vqe),f&&t(Ti),w(kA),f&&t(Xqe),f&&t(wo),w(SA),w(BA),w(rh),w(IA),f&&t(zqe),f&&t(Mi),w(qA),f&&t(Wqe),f&&t(Ao),w(NA),w(GA),w(Ph),w(Bh),w(OA),f&&t(Qqe),f&&t(Ei),w(VA),f&&t(Hqe),f&&t(yo),w(XA),w(QA),w(op),w(rp),w(HA),f&&t(Uqe),f&&t(wi),w(UA),f&&t(Jqe),f&&t(Lo),w(JA),w(KA),w(np),w(ZA),w(Zu),f&&t(Yqe),f&&t(Li),w(e6),f&&t(Kqe),f&&t(xo),w(o6),w(t6),w(o_),w(a6),w(z_),f&&t(Zqe),f&&t(ki),w(n6),f&&t(eNe),f&&t($o),w(s6),w(i6),w(Q_),w(d6),w(k3),f&&t(oNe),f&&t(Pi),w(c6),f&&t(rNe),f&&t(ko),w(f6),w(g6),w(R3),w(h6),w(u1),f&&t(tNe),f&&t(qi),w(p6),f&&t(aNe),f&&t(So),w(u6),w(b6),w(b1),w(v6),w(I1),f&&t(nNe),f&&t(Di),w(F6),f&&t(sNe),f&&t(Ro),w(T6),w(E6),w(N1),w(C6),w(Rb),f&&t(lNe),f&&t(Vi),w(w6),f&&t(iNe),f&&t(Po),w(A6),w(L6),w(Bb),w(x6),w(m2),f&&t(dNe),f&&t(Wi),w($6),f&&t(cNe),f&&t(Bo),w(k6),w(R6),w(h2),w(P6),w(T2),f&&t(fNe),f&&t(Ui),w(B6),f&&t(mNe),f&&t(Io),w(I6),w(N6),w(E2),w(j6),w(nv),f&&t(gNe),f&&t(Ki),w(D6),f&&t(hNe),f&&t(qo),w(G6),w(V6),w(lv),w(X6),w(Uv),f&&t(pNe),f&&t(od),w(z6),f&&t(uNe),f&&t(No),w(W6),w(H6),w(Yv),w(U6),w(eF),f&&t(_Ne),f&&t(ad),w(J6),f&&t(bNe),f&&t(jo),w(Y6),w(Z6),w(rF),w(ey),w(uF),f&&t(vNe),f&&t(ld),w(oy),f&&t(FNe),f&&t(Do),w(ry),w(ay),w(bF),w(ny),w(TF),f&&t(TNe),f&&t(cd),w(sy),f&&t(MNe),f&&t(Go),w(ly),w(dy),w(EF),w(cy),w(PF),f&&t(ENe),f&&t(gd),w(fy),f&&t(CNe),f&&t(Oo),w(my),w(hy),w(IF),w(py),w(VF),f&&t(wNe),f&&t(ud),w(uy),f&&t(ANe),f&&t(Vo),w(_y),w(vy),w(zF),w(Fy),w(rT),f&&t(yNe),f&&t(vd),w(Ty),f&&t(LNe),f&&t(Xo),w(My),w(Cy),w(aT),w(wy),w(iT),f&&t(xNe),f&&t(Md),w(yy),f&&t($Ne),f&&t(zo),w(Ly),w($y),w(cT),w(ky),w(_T),f&&t(kNe),f&&t(wd),w(Sy),f&&t(SNe),f&&t(Wo),w(Ry),w(By),w(vT),w(Iy),w(CT),f&&t(RNe),f&&t(xd),w(qy),f&&t(PNe),f&&t(Qo),w(Ny),w(Dy),w(AT),w(Gy),w($T),f&&t(BNe),f&&t(Sd),w(Vy),f&&t(INe),f&&t(Ho),w(Xy),w(Wy),w(ST),w(Qy),w(BT),f&&t(qNe),f&&t(Bd),w(Hy),f&&t(NNe),f&&t(Uo),w(Uy),w(Yy),w(qT),w(Ky),w(VT),f&&t(jNe),f&&t(Nd),w(Zy),f&&t(DNe),f&&t(Jo),w(eL),w(rL),w(zT),w(tL),w(HT),f&&t(GNe),f&&t(Gd),w(aL),f&&t(ONe),f&&t(Yo),w(nL),w(lL),w(JT),w(iL),w(O7),f&&t(VNe),f&&t(Xd),w(dL),f&&t(XNe),f&&t(Ko),w(cL),w(mL),w(X7),w(gL),w(h9),f&&t(zNe),f&&t(Qd),w(hL),f&&t(WNe),f&&t(Zo),w(pL),w(_L),w(u9),w(bL),w(x9),f&&t(QNe),f&&t(Jd),w(vL),f&&t(HNe),f&&t(er),w(FL),w(ML),w(k9),w(EL),w(I9),f&&t(UNe),f&&t(Zd),w(CL),f&&t(JNe),f&&t(or),w(wL),w(yL),w(N9),w(LL),w(nM),f&&t(YNe),f&&t(rc),w(xL),f&&t(KNe),f&&t(rr),w($L),w(SL),w(lM),w(RL),w(bM),f&&t(ZNe),f&&t(nc),w(PL),f&&t(eje),f&&t(tr),w(BL),w(qL),w(FM),w(NL),w(QM),f&&t(oje),f&&t(ic),w(jL),f&&t(rje),f&&t(ar),w(DL),w(OL),w(UM),w(VL),w(g4),f&&t(tje),f&&t(fc),w(XL),f&&t(aje),f&&t(nr),w(zL),w(QL),w(p4),w(HL),w(b4),f&&t(nje),f&&t(hc),w(JL),f&&t(sje),f&&t(sr),w(YL),w(ZL),w(F4),w(e8),w(M4),f&&t(lje),f&&t(_c),w(o8),f&&t(ije),f&&t(lr),w(r8),w(a8),w(C4),w(n8),w(z4),f&&t(dje),f&&t(Fc),w(s8),f&&t(cje),f&&t(ir),w(l8),w(d8),w(Q4),w(c8),w(hE),f&&t(fje),f&&t(Ec),w(f8),f&&t(mje),f&&t(dr),w(m8),w(h8),w(uE),w(p8),w(bE),f&&t(gje),f&&t(Ac),w(u8),f&&t(hje),f&&t(cr),w(_8),w(v8),w(FE),w(F8),w(ME),f&&t(pje),f&&t(xc),w(T8),f&&t(uje),f&&t(fr),w(M8),w(C8),w(CE),w(w8),w(JE),f&&t(_je),f&&t(Sc),w(A8),f&&t(bje),f&&t(mr),w(y8),w(x8),w(KE),w($8),w(iC),f&&t(vje),f&&t(Bc),w(k8),f&&t(Fje),f&&t(gr),w(S8),w(P8),w(cC),w(B8),w(EC),f&&t(Tje),f&&t(Nc),w(I8),f&&t(Mje),f&&t(hr),w(q8),w(j8),w(wC),w(D8),w(IC),f&&t(Eje),f&&t(Gc),w(G8),f&&t(Cje),f&&t(pr),w(O8),w(X8),w(NC),w(z8),w(HC),f&&t(wje),f&&t(Xc),w(W8),f&&t(Aje),f&&t(ur),w(Q8),w(U8),w(JC),w(J8),w(l5),f&&t(yje),f&&t(Qc),w(Y8),f&&t(Lje),f&&t(_r),w(K8),w(ex),w(d5),w(ox),w(F5),f&&t(xje),f&&t(Jc),w(rx),f&&t($je),f&&t(br),w(tx),w(nx),w(M5),w(sx),w(k5),f&&t(kje),f&&t(Zc),w(lx),f&&t(Sje),f&&t(vr),w(ix),w(cx),w(R5),w(fx),w(O5),f&&t(Rje),f&&t(rf),w(mx),f&&t(Pje),f&&t(Fr),w(gx),w(px),w(X5),w(ux),w(W5),f&&t(Bje),f&&t(nf),w(_x),f&&t(Ije),f&&t(Tr),w(bx),w(Fx),w(H5),w(Tx),w(Y5),f&&t(qje),f&&t(df),w(Ex),f&&t(Nje),f&&t(Mr),w(Cx),w(Ax),w(Z5),w(yx),w(ow)}}}const vkt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Fkt(L){return Fxt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ykt extends uxt{constructor(g){super();_xt(this,g,Fkt,bkt,bxt,{})}}export{ykt as default,vkt as metadata};
