import{S as $n,i as bn,s as Pn,e as r,k as d,w as v,t as l,M as wn,c as o,d as s,m as c,a as n,x as $,h as p,b as i,F as t,g as m,y as b,q as P,o as w,B as N,v as Nn,L as Ot}from"../../chunks/vendor-6b77c823.js";import{D as C}from"../../chunks/Docstring-1088f2fb.js";import{C as Ht}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as U}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as Rt}from"../../chunks/ExampleCodeBlock-5212b321.js";function Ln(E){let f,L,_,u,k;return u=new Ht({props:{code:`from transformers import XLMProphetNetTokenizer, XLMProphetNetModel

tokenizer = XLMProphetNetTokenizer.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
model = XLMProphetNetModel.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")

input_ids = tokenizer(
    "Studies have been shown that owning a dog is good for you", return_tensors="pt"
).input_ids  # Batch size 1
decoder_input_ids = tokenizer("Studies show that", return_tensors="pt").input_ids  # Batch size 1
outputs = model(input_ids=input_ids, decoder_input_ids=decoder_input_ids)

last_hidden_states = outputs.last_hidden_state  # main stream hidden states
last_hidden_states_ngram = outputs.last_hidden_state_ngram  # predict hidden states`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> XLMProphetNetTokenizer, XLMProphetNetModel

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = XLMProphetNetTokenizer.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = XLMProphetNetModel.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>input_ids = tokenizer(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Studies have been shown that owning a dog is good for you&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>
<span class="hljs-meta">... </span>).input_ids  <span class="hljs-comment"># Batch size 1</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>decoder_input_ids = tokenizer(<span class="hljs-string">&quot;Studies show that&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids  <span class="hljs-comment"># Batch size 1</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_ids=input_ids, decoder_input_ids=decoder_input_ids)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state  <span class="hljs-comment"># main stream hidden states</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states_ngram = outputs.last_hidden_state_ngram  <span class="hljs-comment"># predict hidden states</span>`}}),{c(){f=r("p"),L=l("Example:"),_=d(),v(u.$$.fragment)},l(a){f=o(a,"P",{});var g=n(f);L=p(g,"Example:"),g.forEach(s),_=c(a),$(u.$$.fragment,a)},m(a,g){m(a,f,g),t(f,L),m(a,_,g),b(u,a,g),k=!0},p:Ot,i(a){k||(P(u.$$.fragment,a),k=!0)},o(a){w(u.$$.fragment,a),k=!1},d(a){a&&s(f),a&&s(_),N(u,a)}}}function Mn(E){let f,L,_,u,k;return u=new Ht({props:{code:`from transformers import XLMProphetNetTokenizer, XLMProphetNetEncoder
import torch

tokenizer = XLMProphetNetTokenizer.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
model = XLMProphetNetEncoder.from_pretrained("patrickvonplaten/xprophetnet-large-uncased-standalone")
assert model.config.is_decoder, f"{model.__class__} has to be configured as a decoder."
inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> XLMProphetNetTokenizer, XLMProphetNetEncoder
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = XLMProphetNetTokenizer.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = XLMProphetNetEncoder.from_pretrained(<span class="hljs-string">&quot;patrickvonplaten/xprophetnet-large-uncased-standalone&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> model.config.is_decoder, <span class="hljs-string">f&quot;<span class="hljs-subst">{model.__class__}</span> has to be configured as a decoder.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),{c(){f=r("p"),L=l("Example:"),_=d(),v(u.$$.fragment)},l(a){f=o(a,"P",{});var g=n(f);L=p(g,"Example:"),g.forEach(s),_=c(a),$(u.$$.fragment,a)},m(a,g){m(a,f,g),t(f,L),m(a,_,g),b(u,a,g),k=!0},p:Ot,i(a){k||(P(u.$$.fragment,a),k=!0)},o(a){w(u.$$.fragment,a),k=!1},d(a){a&&s(f),a&&s(_),N(u,a)}}}function xn(E){let f,L,_,u,k;return u=new Ht({props:{code:`from transformers import XLMProphetNetTokenizer, XLMProphetNetDecoder
import torch

tokenizer = XLMProphetNetTokenizer.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
model = XLMProphetNetDecoder.from_pretrained(
    "patrickvonplaten/xprophetnet-large-uncased-standalone", add_cross_attention=False
)
assert model.config.is_decoder, f"{model.__class__} has to be configured as a decoder."
inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> XLMProphetNetTokenizer, XLMProphetNetDecoder
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = XLMProphetNetTokenizer.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = XLMProphetNetDecoder.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;patrickvonplaten/xprophetnet-large-uncased-standalone&quot;</span>, add_cross_attention=<span class="hljs-literal">False</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> model.config.is_decoder, <span class="hljs-string">f&quot;<span class="hljs-subst">{model.__class__}</span> has to be configured as a decoder.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),{c(){f=r("p"),L=l("Example:"),_=d(),v(u.$$.fragment)},l(a){f=o(a,"P",{});var g=n(f);L=p(g,"Example:"),g.forEach(s),_=c(a),$(u.$$.fragment,a)},m(a,g){m(a,f,g),t(f,L),m(a,_,g),b(u,a,g),k=!0},p:Ot,i(a){k||(P(u.$$.fragment,a),k=!0)},o(a){w(u.$$.fragment,a),k=!1},d(a){a&&s(f),a&&s(_),N(u,a)}}}function En(E){let f,L,_,u,k;return u=new Ht({props:{code:`from transformers import XLMProphetNetTokenizer, XLMProphetNetForConditionalGeneration

tokenizer = XLMProphetNetTokenizer.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
model = XLMProphetNetForConditionalGeneration.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")

input_ids = tokenizer(
    "Studies have been shown that owning a dog is good for you", return_tensors="pt"
).input_ids  # Batch size 1
decoder_input_ids = tokenizer("Studies show that", return_tensors="pt").input_ids  # Batch size 1
outputs = model(input_ids=input_ids, decoder_input_ids=decoder_input_ids)

logits_next_token = outputs.logits  # logits to predict next token as usual
logits_ngram_next_tokens = outputs.logits_ngram  # logits to predict 2nd, 3rd, ... next tokens`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> XLMProphetNetTokenizer, XLMProphetNetForConditionalGeneration

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = XLMProphetNetTokenizer.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = XLMProphetNetForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>input_ids = tokenizer(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Studies have been shown that owning a dog is good for you&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>
<span class="hljs-meta">... </span>).input_ids  <span class="hljs-comment"># Batch size 1</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>decoder_input_ids = tokenizer(<span class="hljs-string">&quot;Studies show that&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids  <span class="hljs-comment"># Batch size 1</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_ids=input_ids, decoder_input_ids=decoder_input_ids)

<span class="hljs-meta">&gt;&gt;&gt; </span>logits_next_token = outputs.logits  <span class="hljs-comment"># logits to predict next token as usual</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>logits_ngram_next_tokens = outputs.logits_ngram  <span class="hljs-comment"># logits to predict 2nd, 3rd, ... next tokens</span>`}}),{c(){f=r("p"),L=l("Example:"),_=d(),v(u.$$.fragment)},l(a){f=o(a,"P",{});var g=n(f);L=p(g,"Example:"),g.forEach(s),_=c(a),$(u.$$.fragment,a)},m(a,g){m(a,f,g),t(f,L),m(a,_,g),b(u,a,g),k=!0},p:Ot,i(a){k||(P(u.$$.fragment,a),k=!0)},o(a){w(u.$$.fragment,a),k=!1},d(a){a&&s(f),a&&s(_),N(u,a)}}}function qn(E){let f,L,_,u,k;return u=new Ht({props:{code:`from transformers import XLMProphetNetTokenizer, XLMProphetNetForCausalLM
import torch

tokenizer = XLMProphetNetTokenizer.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
model = XLMProphetNetForCausalLM.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
assert model.config.is_decoder, f"{model.__class__} has to be configured as a decoder."
inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

logits = outputs.logits

# Model can also be used with EncoderDecoder framework
from transformers import EncoderDecoderModel, XLMProphetNetTokenizer, XLMRobertaTokenizer
import torch

tokenizer_enc = XLMRobertaTokenizer.from_pretrained("xlm-roberta-large")
tokenizer_dec = XLMProphetNetTokenizer.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
model = EncoderDecoderModel.from_encoder_decoder_pretrained(
    "xlm-roberta-large", "microsoft/xprophetnet-large-wiki100-cased"
)

ARTICLE = (
    "the us state department said wednesday it had received no "
    "formal word from bolivia that it was expelling the us ambassador there "
    "but said the charges made against him are \`\` baseless ."
)
input_ids = tokenizer_enc(ARTICLE, return_tensors="pt").input_ids
labels = tokenizer_dec("us rejects charges against its ambassador in bolivia", return_tensors="pt").input_ids
outputs = model(input_ids=input_ids, decoder_input_ids=labels[:, :-1], labels=labels[:, 1:])

loss = outputs.loss`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> XLMProphetNetTokenizer, XLMProphetNetForCausalLM
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = XLMProphetNetTokenizer.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = XLMProphetNetForCausalLM.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> model.config.is_decoder, <span class="hljs-string">f&quot;<span class="hljs-subst">{model.__class__}</span> has to be configured as a decoder.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Model can also be used with EncoderDecoder framework</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> EncoderDecoderModel, XLMProphetNetTokenizer, XLMRobertaTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer_enc = XLMRobertaTokenizer.from_pretrained(<span class="hljs-string">&quot;xlm-roberta-large&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer_dec = XLMProphetNetTokenizer.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = EncoderDecoderModel.from_encoder_decoder_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;xlm-roberta-large&quot;</span>, <span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>ARTICLE = (
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;the us state department said wednesday it had received no &quot;</span>
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;formal word from bolivia that it was expelling the us ambassador there &quot;</span>
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;but said the charges made against him are \`\` baseless .&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>input_ids = tokenizer_enc(ARTICLE, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids
<span class="hljs-meta">&gt;&gt;&gt; </span>labels = tokenizer_dec(<span class="hljs-string">&quot;us rejects charges against its ambassador in bolivia&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_ids=input_ids, decoder_input_ids=labels[:, :-<span class="hljs-number">1</span>], labels=labels[:, <span class="hljs-number">1</span>:])

<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss`}}),{c(){f=r("p"),L=l("Example:"),_=d(),v(u.$$.fragment)},l(a){f=o(a,"P",{});var g=n(f);L=p(g,"Example:"),g.forEach(s),_=c(a),$(u.$$.fragment,a)},m(a,g){m(a,f,g),t(f,L),m(a,_,g),b(u,a,g),k=!0},p:Ot,i(a){k||(P(u.$$.fragment,a),k=!0)},o(a){w(u.$$.fragment,a),k=!1},d(a){a&&s(f),a&&s(_),N(u,a)}}}function Xn(E){let f,L,_,u,k,a,g,ft,Ds,Vt,A,gt,As,Ss,fe,Is,Fs,Wt,S,Y,_t,ge,Gs,kt,Bs,Ut,J,Rs,_e,Os,Hs,Yt,Ue,Vs,Jt,Ye,Ws,Qt,Je,vt,Us,Zt,Q,Ys,ke,Js,Qs,Kt,I,Z,$t,ve,Zs,bt,Ks,es,F,$e,er,G,tr,Qe,sr,rr,be,or,nr,ts,B,K,Pt,Pe,ar,wt,ir,ss,M,we,lr,q,pr,Ze,dr,cr,Ke,hr,mr,Ne,ur,fr,gr,Le,_r,et,kr,vr,$r,D,Me,br,Nt,Pr,wr,xe,tt,Nr,Lt,Lr,Mr,st,xr,Mt,Er,qr,ee,Ee,Xr,xt,yr,jr,te,qe,zr,Et,Tr,Cr,se,Xe,Dr,ye,Ar,qt,Sr,Ir,rs,R,re,Xt,je,Fr,yt,Gr,os,X,ze,Br,Te,Rr,rt,Or,Hr,Vr,oe,ns,O,ne,jt,Ce,Wr,zt,Ur,as,y,De,Yr,Ae,Jr,ot,Qr,Zr,Kr,ae,is,H,ie,Tt,Se,eo,Ct,to,ls,j,Ie,so,Fe,ro,nt,oo,no,ao,le,ps,V,pe,Dt,Ge,io,At,lo,ds,z,Be,po,Re,co,at,ho,mo,uo,de,cs,W,ce,St,Oe,fo,It,go,hs,T,He,_o,Ve,ko,it,vo,$o,bo,he,ms;return a=new U({}),ge=new U({}),ve=new U({}),$e=new C({props:{name:"class transformers.XLMProphetNetConfig",anchor:"transformers.XLMProphetNetConfig",parameters:[{name:"activation_dropout",val:" = 0.1"},{name:"activation_function",val:" = 'gelu'"},{name:"vocab_size",val:" = 30522"},{name:"hidden_size",val:" = 1024"},{name:"encoder_ffn_dim",val:" = 4096"},{name:"num_encoder_layers",val:" = 12"},{name:"num_encoder_attention_heads",val:" = 16"},{name:"decoder_ffn_dim",val:" = 4096"},{name:"num_decoder_layers",val:" = 12"},{name:"num_decoder_attention_heads",val:" = 16"},{name:"attention_dropout",val:" = 0.1"},{name:"dropout",val:" = 0.1"},{name:"max_position_embeddings",val:" = 512"},{name:"init_std",val:" = 0.02"},{name:"is_encoder_decoder",val:" = True"},{name:"add_cross_attention",val:" = True"},{name:"decoder_start_token_id",val:" = 0"},{name:"ngram",val:" = 2"},{name:"num_buckets",val:" = 32"},{name:"relative_max_distance",val:" = 128"},{name:"disable_ngram_loss",val:" = False"},{name:"eps",val:" = 0.0"},{name:"use_cache",val:" = True"},{name:"pad_token_id",val:" = 0"},{name:"bos_token_id",val:" = 1"},{name:"eos_token_id",val:" = 2"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17301/src/transformers/models/xlm_prophetnet/configuration_xlm_prophetnet.py#L31"}}),Pe=new U({}),we=new C({props:{name:"class transformers.XLMProphetNetTokenizer",anchor:"transformers.XLMProphetNetTokenizer",parameters:[{name:"vocab_file",val:""},{name:"bos_token",val:" = '[SEP]'"},{name:"eos_token",val:" = '[SEP]'"},{name:"sep_token",val:" = '[SEP]'"},{name:"unk_token",val:" = '[UNK]'"},{name:"pad_token",val:" = '[PAD]'"},{name:"cls_token",val:" = '[CLS]'"},{name:"mask_token",val:" = '[MASK]'"},{name:"sp_model_kwargs",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.XLMProphetNetTokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
Path to the vocabulary file.`,name:"vocab_file"},{anchor:"transformers.XLMProphetNetTokenizer.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the beginning of
sequence. The token used is the <code>cls_token</code>.</p>

					</div>`,name:"bos_token"},{anchor:"transformers.XLMProphetNetTokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.XLMProphetNetTokenizer.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for
sequence classification or for a text and a question for question answering. It is also used as the last
token of a sequence built with special tokens.`,name:"sep_token"},{anchor:"transformers.XLMProphetNetTokenizer.cls_token",description:`<strong>cls_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The classifier token which is used when doing sequence classification (classification of the whole sequence
instead of per-token classification). It is the first token of the sequence when built with special tokens.`,name:"cls_token"},{anchor:"transformers.XLMProphetNetTokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.XLMProphetNetTokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.XLMProphetNetTokenizer.mask_token",description:`<strong>mask_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;mask&gt;&quot;</code>) &#x2014;
The token used for masking values. This is the token used when training this model with masked language
modeling. This is the token which the model will try to predict.`,name:"mask_token"},{anchor:"transformers.XLMProphetNetTokenizer.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>, defaults to <code>[&quot;&lt;s&gt;NOTUSED&quot;, &quot;&lt;/s&gt;NOTUSED&quot;]</code>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"},{anchor:"transformers.XLMProphetNetTokenizer.sp_model_kwargs",description:`<strong>sp_model_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Will be passed to the <code>SentencePieceProcessor.__init__()</code> method. The <a href="https://github.com/google/sentencepiece/tree/master/python" rel="nofollow">Python wrapper for
SentencePiece</a> can be used, among other things,
to set:</p>
<ul>
<li>
<p><code>enable_sampling</code>: Enable subword regularization.</p>
</li>
<li>
<p><code>nbest_size</code>: Sampling parameters for unigram. Invalid for BPE-Dropout.</p>
<ul>
<li><code>nbest_size = {0,1}</code>: No sampling is performed.</li>
<li><code>nbest_size &gt; 1</code>: samples from the nbest_size results.</li>
<li><code>nbest_size &lt; 0</code>: assuming that nbest_size is infinite and samples from the all hypothesis (lattice)
using forward-filtering-and-backward-sampling algorithm.</li>
</ul>
</li>
<li>
<p><code>alpha</code>: Smoothing parameter for unigram sampling, and dropout probability of merge operations for
BPE-dropout.</p>
</li>
</ul>`,name:"sp_model_kwargs"},{anchor:"transformers.XLMProphetNetTokenizer.sp_model",description:`<strong>sp_model</strong> (<code>SentencePieceProcessor</code>) &#x2014;
The <em>SentencePiece</em> processor that is used for every conversion (string, tokens and IDs).`,name:"sp_model"}],source:"https://github.com/huggingface/transformers/blob/vr_17301/src/transformers/models/xlm_prophetnet/tokenization_xlm_prophetnet.py#L59"}}),Me=new C({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.XLMProphetNetTokenizer.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.XLMProphetNetTokenizer.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added`,name:"token_ids_0"},{anchor:"transformers.XLMProphetNetTokenizer.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/vr_17301/src/transformers/models/xlm_prophetnet/tokenization_xlm_prophetnet.py#L316",returnDescription:`
<p>list of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Ee=new C({props:{name:"convert_tokens_to_string",anchor:"transformers.XLMProphetNetTokenizer.convert_tokens_to_string",parameters:[{name:"tokens",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17301/src/transformers/models/xlm_prophetnet/tokenization_xlm_prophetnet.py#L294"}}),qe=new C({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.XLMProphetNetTokenizer.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.XLMProphetNetTokenizer.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.XLMProphetNetTokenizer.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/vr_17301/src/transformers/models/xlm_prophetnet/tokenization_xlm_prophetnet.py#L243",returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Xe=new C({props:{name:"get_special_tokens_mask",anchor:"transformers.XLMProphetNetTokenizer.get_special_tokens_mask",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"},{name:"already_has_special_tokens",val:": bool = False"}],parametersDescription:[{anchor:"transformers.XLMProphetNetTokenizer.get_special_tokens_mask.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.XLMProphetNetTokenizer.get_special_tokens_mask.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"},{anchor:"transformers.XLMProphetNetTokenizer.get_special_tokens_mask.already_has_special_tokens",description:`<strong>already_has_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the token list is already formatted with special tokens for the model.`,name:"already_has_special_tokens"}],source:"https://github.com/huggingface/transformers/blob/vr_17301/src/transformers/models/xlm_prophetnet/tokenization_xlm_prophetnet.py#L215",returnDescription:`
<p>A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),je=new U({}),ze=new C({props:{name:"class transformers.XLMProphetNetModel",anchor:"transformers.XLMProphetNetModel",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17301/src/transformers/models/xlm_prophetnet/modeling_xlm_prophetnet.py#L86"}}),oe=new Rt({props:{anchor:"transformers.XLMProphetNetModel.example",$$slots:{default:[Ln]},$$scope:{ctx:E}}}),Ce=new U({}),De=new C({props:{name:"class transformers.XLMProphetNetEncoder",anchor:"transformers.XLMProphetNetEncoder",parameters:[{name:"config",val:": ProphetNetConfig"},{name:"word_embeddings",val:": Embedding = None"}],source:"https://github.com/huggingface/transformers/blob/vr_17301/src/transformers/models/xlm_prophetnet/modeling_xlm_prophetnet.py#L38"}}),ae=new Rt({props:{anchor:"transformers.XLMProphetNetEncoder.example",$$slots:{default:[Mn]},$$scope:{ctx:E}}}),Se=new U({}),Ie=new C({props:{name:"class transformers.XLMProphetNetDecoder",anchor:"transformers.XLMProphetNetDecoder",parameters:[{name:"config",val:": ProphetNetConfig"},{name:"word_embeddings",val:": Embedding = None"}],source:"https://github.com/huggingface/transformers/blob/vr_17301/src/transformers/models/xlm_prophetnet/modeling_xlm_prophetnet.py#L61"}}),le=new Rt({props:{anchor:"transformers.XLMProphetNetDecoder.example",$$slots:{default:[xn]},$$scope:{ctx:E}}}),Ge=new U({}),Be=new C({props:{name:"class transformers.XLMProphetNetForConditionalGeneration",anchor:"transformers.XLMProphetNetForConditionalGeneration",parameters:[{name:"config",val:": ProphetNetConfig"}],source:"https://github.com/huggingface/transformers/blob/vr_17301/src/transformers/models/xlm_prophetnet/modeling_xlm_prophetnet.py#L112"}}),de=new Rt({props:{anchor:"transformers.XLMProphetNetForConditionalGeneration.example",$$slots:{default:[En]},$$scope:{ctx:E}}}),Oe=new U({}),He=new C({props:{name:"class transformers.XLMProphetNetForCausalLM",anchor:"transformers.XLMProphetNetForCausalLM",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17301/src/transformers/models/xlm_prophetnet/modeling_xlm_prophetnet.py#L138"}}),he=new Rt({props:{anchor:"transformers.XLMProphetNetForCausalLM.example",$$slots:{default:[qn]},$$scope:{ctx:E}}}),{c(){f=r("meta"),L=d(),_=r("h1"),u=r("a"),k=r("span"),v(a.$$.fragment),g=d(),ft=r("span"),Ds=l("XLM-ProphetNet"),Vt=d(),A=r("p"),gt=r("strong"),As=l("DISCLAIMER:"),Ss=l(" If you see something strange, file a "),fe=r("a"),Is=l("Github Issue"),Fs=l(` and assign
@patrickvonplaten`),Wt=d(),S=r("h2"),Y=r("a"),_t=r("span"),v(ge.$$.fragment),Gs=d(),kt=r("span"),Bs=l("Overview"),Ut=d(),J=r("p"),Rs=l("The XLM-ProphetNet model was proposed in "),_e=r("a"),Os=l("ProphetNet: Predicting Future N-gram for Sequence-to-Sequence Pre-training,"),Hs=l(` by Yu Yan, Weizhen Qi, Yeyun Gong, Dayiheng Liu, Nan Duan, Jiusheng Chen, Ruofei
Zhang, Ming Zhou on 13 Jan, 2020.`),Yt=d(),Ue=r("p"),Vs=l(`XLM-ProphetNet is an encoder-decoder model and can predict n-future tokens for \u201Cngram\u201D language modeling instead of
just the next token. Its architecture is identical to ProhpetNet, but the model was trained on the multi-lingual
\u201Cwiki100\u201D Wikipedia dump.`),Jt=d(),Ye=r("p"),Ws=l("The abstract from the paper is the following:"),Qt=d(),Je=r("p"),vt=r("em"),Us=l(`In this paper, we present a new sequence-to-sequence pretraining model called ProphetNet, which introduces a novel
self-supervised objective named future n-gram prediction and the proposed n-stream self-attention mechanism. Instead of
the optimization of one-step ahead prediction in traditional sequence-to-sequence model, the ProphetNet is optimized by
n-step ahead prediction which predicts the next n tokens simultaneously based on previous context tokens at each time
step. The future n-gram prediction explicitly encourages the model to plan for the future tokens and prevent
overfitting on strong local correlations. We pre-train ProphetNet using a base scale dataset (16GB) and a large scale
dataset (160GB) respectively. Then we conduct experiments on CNN/DailyMail, Gigaword, and SQuAD 1.1 benchmarks for
abstractive summarization and question generation tasks. Experimental results show that ProphetNet achieves new
state-of-the-art results on all these datasets compared to the models using the same scale pretraining corpus.`),Zt=d(),Q=r("p"),Ys=l("The Authors\u2019 code can be found "),ke=r("a"),Js=l("here"),Qs=l("."),Kt=d(),I=r("h2"),Z=r("a"),$t=r("span"),v(ve.$$.fragment),Zs=d(),bt=r("span"),Ks=l("XLMProphetNetConfig"),es=d(),F=r("div"),v($e.$$.fragment),er=d(),G=r("p"),tr=l("This class overrides "),Qe=r("a"),sr=l("ProphetNetConfig"),rr=l(`. Please check the superclass for the appropriate documentation alongside
usage examples. Instantiating a configuration with the defaults will yield a similar configuration to that of the
XLMProphetNet
`),be=r("a"),or=l("microsoft/xprophetnet-large-wiki100-cased"),nr=l(`
architecture.`),ts=d(),B=r("h2"),K=r("a"),Pt=r("span"),v(Pe.$$.fragment),ar=d(),wt=r("span"),ir=l("XLMProphetNetTokenizer"),ss=d(),M=r("div"),v(we.$$.fragment),lr=d(),q=r("p"),pr=l("Adapted from "),Ze=r("a"),dr=l("RobertaTokenizer"),cr=l(" and "),Ke=r("a"),hr=l("XLNetTokenizer"),mr=l(`. Based on
`),Ne=r("a"),ur=l("SentencePiece"),fr=l("."),gr=d(),Le=r("p"),_r=l("This tokenizer inherits from "),et=r("a"),kr=l("PreTrainedTokenizer"),vr=l(` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),$r=d(),D=r("div"),v(Me.$$.fragment),br=d(),Nt=r("p"),Pr=l(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A XLMProphetNet sequence has the following format:`),wr=d(),xe=r("ul"),tt=r("li"),Nr=l("single sequence: "),Lt=r("code"),Lr=l("X [SEP]"),Mr=d(),st=r("li"),xr=l("pair of sequences: "),Mt=r("code"),Er=l("A [SEP] B [SEP]"),qr=d(),ee=r("div"),v(Ee.$$.fragment),Xr=d(),xt=r("p"),yr=l("Converts a sequence of tokens (strings for sub-words) in a single string."),jr=d(),te=r("div"),v(qe.$$.fragment),zr=d(),Et=r("p"),Tr=l(`Create a mask from the two sequences passed to be used in a sequence-pair classification task. XLMProphetNet
does not make use of token type ids, therefore a list of zeros is returned.`),Cr=d(),se=r("div"),v(Xe.$$.fragment),Dr=d(),ye=r("p"),Ar=l(`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),qt=r("code"),Sr=l("prepare_for_model"),Ir=l(" method."),rs=d(),R=r("h2"),re=r("a"),Xt=r("span"),v(je.$$.fragment),Fr=d(),yt=r("span"),Gr=l("XLMProphetNetModel"),os=d(),X=r("div"),v(ze.$$.fragment),Br=d(),Te=r("p"),Rr=l("This class overrides "),rt=r("a"),Or=l("ProphetNetModel"),Hr=l(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),Vr=d(),v(oe.$$.fragment),ns=d(),O=r("h2"),ne=r("a"),jt=r("span"),v(Ce.$$.fragment),Wr=d(),zt=r("span"),Ur=l("XLMProphetNetEncoder"),as=d(),y=r("div"),v(De.$$.fragment),Yr=d(),Ae=r("p"),Jr=l("This class overrides "),ot=r("a"),Qr=l("ProphetNetEncoder"),Zr=l(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),Kr=d(),v(ae.$$.fragment),is=d(),H=r("h2"),ie=r("a"),Tt=r("span"),v(Se.$$.fragment),eo=d(),Ct=r("span"),to=l("XLMProphetNetDecoder"),ls=d(),j=r("div"),v(Ie.$$.fragment),so=d(),Fe=r("p"),ro=l("This class overrides "),nt=r("a"),oo=l("ProphetNetDecoder"),no=l(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),ao=d(),v(le.$$.fragment),ps=d(),V=r("h2"),pe=r("a"),Dt=r("span"),v(Ge.$$.fragment),io=d(),At=r("span"),lo=l("XLMProphetNetForConditionalGeneration"),ds=d(),z=r("div"),v(Be.$$.fragment),po=d(),Re=r("p"),co=l("This class overrides "),at=r("a"),ho=l("ProphetNetForConditionalGeneration"),mo=l(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),uo=d(),v(de.$$.fragment),cs=d(),W=r("h2"),ce=r("a"),St=r("span"),v(Oe.$$.fragment),fo=d(),It=r("span"),go=l("XLMProphetNetForCausalLM"),hs=d(),T=r("div"),v(He.$$.fragment),_o=d(),Ve=r("p"),ko=l("This class overrides "),it=r("a"),vo=l("ProphetNetForCausalLM"),$o=l(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),bo=d(),v(he.$$.fragment),this.h()},l(e){const h=wn('[data-svelte="svelte-1phssyn"]',document.head);f=o(h,"META",{name:!0,content:!0}),h.forEach(s),L=c(e),_=o(e,"H1",{class:!0});var We=n(_);u=o(We,"A",{id:!0,class:!0,href:!0});var Ft=n(u);k=o(Ft,"SPAN",{});var Gt=n(k);$(a.$$.fragment,Gt),Gt.forEach(s),Ft.forEach(s),g=c(We),ft=o(We,"SPAN",{});var Bt=n(ft);Ds=p(Bt,"XLM-ProphetNet"),Bt.forEach(s),We.forEach(s),Vt=c(e),A=o(e,"P",{});var me=n(A);gt=o(me,"STRONG",{});var No=n(gt);As=p(No,"DISCLAIMER:"),No.forEach(s),Ss=p(me," If you see something strange, file a "),fe=o(me,"A",{href:!0,rel:!0});var Lo=n(fe);Is=p(Lo,"Github Issue"),Lo.forEach(s),Fs=p(me,` and assign
@patrickvonplaten`),me.forEach(s),Wt=c(e),S=o(e,"H2",{class:!0});var us=n(S);Y=o(us,"A",{id:!0,class:!0,href:!0});var Mo=n(Y);_t=o(Mo,"SPAN",{});var xo=n(_t);$(ge.$$.fragment,xo),xo.forEach(s),Mo.forEach(s),Gs=c(us),kt=o(us,"SPAN",{});var Eo=n(kt);Bs=p(Eo,"Overview"),Eo.forEach(s),us.forEach(s),Ut=c(e),J=o(e,"P",{});var fs=n(J);Rs=p(fs,"The XLM-ProphetNet model was proposed in "),_e=o(fs,"A",{href:!0,rel:!0});var qo=n(_e);Os=p(qo,"ProphetNet: Predicting Future N-gram for Sequence-to-Sequence Pre-training,"),qo.forEach(s),Hs=p(fs,` by Yu Yan, Weizhen Qi, Yeyun Gong, Dayiheng Liu, Nan Duan, Jiusheng Chen, Ruofei
Zhang, Ming Zhou on 13 Jan, 2020.`),fs.forEach(s),Yt=c(e),Ue=o(e,"P",{});var Xo=n(Ue);Vs=p(Xo,`XLM-ProphetNet is an encoder-decoder model and can predict n-future tokens for \u201Cngram\u201D language modeling instead of
just the next token. Its architecture is identical to ProhpetNet, but the model was trained on the multi-lingual
\u201Cwiki100\u201D Wikipedia dump.`),Xo.forEach(s),Jt=c(e),Ye=o(e,"P",{});var yo=n(Ye);Ws=p(yo,"The abstract from the paper is the following:"),yo.forEach(s),Qt=c(e),Je=o(e,"P",{});var jo=n(Je);vt=o(jo,"EM",{});var zo=n(vt);Us=p(zo,`In this paper, we present a new sequence-to-sequence pretraining model called ProphetNet, which introduces a novel
self-supervised objective named future n-gram prediction and the proposed n-stream self-attention mechanism. Instead of
the optimization of one-step ahead prediction in traditional sequence-to-sequence model, the ProphetNet is optimized by
n-step ahead prediction which predicts the next n tokens simultaneously based on previous context tokens at each time
step. The future n-gram prediction explicitly encourages the model to plan for the future tokens and prevent
overfitting on strong local correlations. We pre-train ProphetNet using a base scale dataset (16GB) and a large scale
dataset (160GB) respectively. Then we conduct experiments on CNN/DailyMail, Gigaword, and SQuAD 1.1 benchmarks for
abstractive summarization and question generation tasks. Experimental results show that ProphetNet achieves new
state-of-the-art results on all these datasets compared to the models using the same scale pretraining corpus.`),zo.forEach(s),jo.forEach(s),Zt=c(e),Q=o(e,"P",{});var gs=n(Q);Ys=p(gs,"The Authors\u2019 code can be found "),ke=o(gs,"A",{href:!0,rel:!0});var To=n(ke);Js=p(To,"here"),To.forEach(s),Qs=p(gs,"."),gs.forEach(s),Kt=c(e),I=o(e,"H2",{class:!0});var _s=n(I);Z=o(_s,"A",{id:!0,class:!0,href:!0});var Co=n(Z);$t=o(Co,"SPAN",{});var Do=n($t);$(ve.$$.fragment,Do),Do.forEach(s),Co.forEach(s),Zs=c(_s),bt=o(_s,"SPAN",{});var Ao=n(bt);Ks=p(Ao,"XLMProphetNetConfig"),Ao.forEach(s),_s.forEach(s),es=c(e),F=o(e,"DIV",{class:!0});var ks=n(F);$($e.$$.fragment,ks),er=c(ks),G=o(ks,"P",{});var lt=n(G);tr=p(lt,"This class overrides "),Qe=o(lt,"A",{href:!0});var So=n(Qe);sr=p(So,"ProphetNetConfig"),So.forEach(s),rr=p(lt,`. Please check the superclass for the appropriate documentation alongside
usage examples. Instantiating a configuration with the defaults will yield a similar configuration to that of the
XLMProphetNet
`),be=o(lt,"A",{href:!0,rel:!0});var Io=n(be);or=p(Io,"microsoft/xprophetnet-large-wiki100-cased"),Io.forEach(s),nr=p(lt,`
architecture.`),lt.forEach(s),ks.forEach(s),ts=c(e),B=o(e,"H2",{class:!0});var vs=n(B);K=o(vs,"A",{id:!0,class:!0,href:!0});var Fo=n(K);Pt=o(Fo,"SPAN",{});var Go=n(Pt);$(Pe.$$.fragment,Go),Go.forEach(s),Fo.forEach(s),ar=c(vs),wt=o(vs,"SPAN",{});var Bo=n(wt);ir=p(Bo,"XLMProphetNetTokenizer"),Bo.forEach(s),vs.forEach(s),ss=c(e),M=o(e,"DIV",{class:!0});var x=n(M);$(we.$$.fragment,x),lr=c(x),q=o(x,"P",{});var ue=n(q);pr=p(ue,"Adapted from "),Ze=o(ue,"A",{href:!0});var Ro=n(Ze);dr=p(Ro,"RobertaTokenizer"),Ro.forEach(s),cr=p(ue," and "),Ke=o(ue,"A",{href:!0});var Oo=n(Ke);hr=p(Oo,"XLNetTokenizer"),Oo.forEach(s),mr=p(ue,`. Based on
`),Ne=o(ue,"A",{href:!0,rel:!0});var Ho=n(Ne);ur=p(Ho,"SentencePiece"),Ho.forEach(s),fr=p(ue,"."),ue.forEach(s),gr=c(x),Le=o(x,"P",{});var $s=n(Le);_r=p($s,"This tokenizer inherits from "),et=o($s,"A",{href:!0});var Vo=n(et);kr=p(Vo,"PreTrainedTokenizer"),Vo.forEach(s),vr=p($s,` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),$s.forEach(s),$r=c(x),D=o(x,"DIV",{class:!0});var pt=n(D);$(Me.$$.fragment,pt),br=c(pt),Nt=o(pt,"P",{});var Wo=n(Nt);Pr=p(Wo,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A XLMProphetNet sequence has the following format:`),Wo.forEach(s),wr=c(pt),xe=o(pt,"UL",{});var bs=n(xe);tt=o(bs,"LI",{});var Po=n(tt);Nr=p(Po,"single sequence: "),Lt=o(Po,"CODE",{});var Uo=n(Lt);Lr=p(Uo,"X [SEP]"),Uo.forEach(s),Po.forEach(s),Mr=c(bs),st=o(bs,"LI",{});var wo=n(st);xr=p(wo,"pair of sequences: "),Mt=o(wo,"CODE",{});var Yo=n(Mt);Er=p(Yo,"A [SEP] B [SEP]"),Yo.forEach(s),wo.forEach(s),bs.forEach(s),pt.forEach(s),qr=c(x),ee=o(x,"DIV",{class:!0});var Ps=n(ee);$(Ee.$$.fragment,Ps),Xr=c(Ps),xt=o(Ps,"P",{});var Jo=n(xt);yr=p(Jo,"Converts a sequence of tokens (strings for sub-words) in a single string."),Jo.forEach(s),Ps.forEach(s),jr=c(x),te=o(x,"DIV",{class:!0});var ws=n(te);$(qe.$$.fragment,ws),zr=c(ws),Et=o(ws,"P",{});var Qo=n(Et);Tr=p(Qo,`Create a mask from the two sequences passed to be used in a sequence-pair classification task. XLMProphetNet
does not make use of token type ids, therefore a list of zeros is returned.`),Qo.forEach(s),ws.forEach(s),Cr=c(x),se=o(x,"DIV",{class:!0});var Ns=n(se);$(Xe.$$.fragment,Ns),Dr=c(Ns),ye=o(Ns,"P",{});var Ls=n(ye);Ar=p(Ls,`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),qt=o(Ls,"CODE",{});var Zo=n(qt);Sr=p(Zo,"prepare_for_model"),Zo.forEach(s),Ir=p(Ls," method."),Ls.forEach(s),Ns.forEach(s),x.forEach(s),rs=c(e),R=o(e,"H2",{class:!0});var Ms=n(R);re=o(Ms,"A",{id:!0,class:!0,href:!0});var Ko=n(re);Xt=o(Ko,"SPAN",{});var en=n(Xt);$(je.$$.fragment,en),en.forEach(s),Ko.forEach(s),Fr=c(Ms),yt=o(Ms,"SPAN",{});var tn=n(yt);Gr=p(tn,"XLMProphetNetModel"),tn.forEach(s),Ms.forEach(s),os=c(e),X=o(e,"DIV",{class:!0});var dt=n(X);$(ze.$$.fragment,dt),Br=c(dt),Te=o(dt,"P",{});var xs=n(Te);Rr=p(xs,"This class overrides "),rt=o(xs,"A",{href:!0});var sn=n(rt);Or=p(sn,"ProphetNetModel"),sn.forEach(s),Hr=p(xs,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),xs.forEach(s),Vr=c(dt),$(oe.$$.fragment,dt),dt.forEach(s),ns=c(e),O=o(e,"H2",{class:!0});var Es=n(O);ne=o(Es,"A",{id:!0,class:!0,href:!0});var rn=n(ne);jt=o(rn,"SPAN",{});var on=n(jt);$(Ce.$$.fragment,on),on.forEach(s),rn.forEach(s),Wr=c(Es),zt=o(Es,"SPAN",{});var nn=n(zt);Ur=p(nn,"XLMProphetNetEncoder"),nn.forEach(s),Es.forEach(s),as=c(e),y=o(e,"DIV",{class:!0});var ct=n(y);$(De.$$.fragment,ct),Yr=c(ct),Ae=o(ct,"P",{});var qs=n(Ae);Jr=p(qs,"This class overrides "),ot=o(qs,"A",{href:!0});var an=n(ot);Qr=p(an,"ProphetNetEncoder"),an.forEach(s),Zr=p(qs,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),qs.forEach(s),Kr=c(ct),$(ae.$$.fragment,ct),ct.forEach(s),is=c(e),H=o(e,"H2",{class:!0});var Xs=n(H);ie=o(Xs,"A",{id:!0,class:!0,href:!0});var ln=n(ie);Tt=o(ln,"SPAN",{});var pn=n(Tt);$(Se.$$.fragment,pn),pn.forEach(s),ln.forEach(s),eo=c(Xs),Ct=o(Xs,"SPAN",{});var dn=n(Ct);to=p(dn,"XLMProphetNetDecoder"),dn.forEach(s),Xs.forEach(s),ls=c(e),j=o(e,"DIV",{class:!0});var ht=n(j);$(Ie.$$.fragment,ht),so=c(ht),Fe=o(ht,"P",{});var ys=n(Fe);ro=p(ys,"This class overrides "),nt=o(ys,"A",{href:!0});var cn=n(nt);oo=p(cn,"ProphetNetDecoder"),cn.forEach(s),no=p(ys,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),ys.forEach(s),ao=c(ht),$(le.$$.fragment,ht),ht.forEach(s),ps=c(e),V=o(e,"H2",{class:!0});var js=n(V);pe=o(js,"A",{id:!0,class:!0,href:!0});var hn=n(pe);Dt=o(hn,"SPAN",{});var mn=n(Dt);$(Ge.$$.fragment,mn),mn.forEach(s),hn.forEach(s),io=c(js),At=o(js,"SPAN",{});var un=n(At);lo=p(un,"XLMProphetNetForConditionalGeneration"),un.forEach(s),js.forEach(s),ds=c(e),z=o(e,"DIV",{class:!0});var mt=n(z);$(Be.$$.fragment,mt),po=c(mt),Re=o(mt,"P",{});var zs=n(Re);co=p(zs,"This class overrides "),at=o(zs,"A",{href:!0});var fn=n(at);ho=p(fn,"ProphetNetForConditionalGeneration"),fn.forEach(s),mo=p(zs,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),zs.forEach(s),uo=c(mt),$(de.$$.fragment,mt),mt.forEach(s),cs=c(e),W=o(e,"H2",{class:!0});var Ts=n(W);ce=o(Ts,"A",{id:!0,class:!0,href:!0});var gn=n(ce);St=o(gn,"SPAN",{});var _n=n(St);$(Oe.$$.fragment,_n),_n.forEach(s),gn.forEach(s),fo=c(Ts),It=o(Ts,"SPAN",{});var kn=n(It);go=p(kn,"XLMProphetNetForCausalLM"),kn.forEach(s),Ts.forEach(s),hs=c(e),T=o(e,"DIV",{class:!0});var ut=n(T);$(He.$$.fragment,ut),_o=c(ut),Ve=o(ut,"P",{});var Cs=n(Ve);ko=p(Cs,"This class overrides "),it=o(Cs,"A",{href:!0});var vn=n(it);vo=p(vn,"ProphetNetForCausalLM"),vn.forEach(s),$o=p(Cs,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Cs.forEach(s),bo=c(ut),$(he.$$.fragment,ut),ut.forEach(s),this.h()},h(){i(f,"name","hf:doc:metadata"),i(f,"content",JSON.stringify(yn)),i(u,"id","xlmprophetnet"),i(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(u,"href","#xlmprophetnet"),i(_,"class","relative group"),i(fe,"href","https://github.com/huggingface/transformers/issues/new?assignees=&labels=&template=bug-report.md&title"),i(fe,"rel","nofollow"),i(Y,"id","overview"),i(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Y,"href","#overview"),i(S,"class","relative group"),i(_e,"href","https://arxiv.org/abs/2001.04063"),i(_e,"rel","nofollow"),i(ke,"href","https://github.com/microsoft/ProphetNet"),i(ke,"rel","nofollow"),i(Z,"id","transformers.XLMProphetNetConfig"),i(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Z,"href","#transformers.XLMProphetNetConfig"),i(I,"class","relative group"),i(Qe,"href","/docs/transformers/pr_17301/en/model_doc/prophetnet#transformers.ProphetNetConfig"),i(be,"href","https://huggingface.co/microsoft/xprophetnet-large-wiki100-cased"),i(be,"rel","nofollow"),i(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(K,"id","transformers.XLMProphetNetTokenizer"),i(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(K,"href","#transformers.XLMProphetNetTokenizer"),i(B,"class","relative group"),i(Ze,"href","/docs/transformers/pr_17301/en/model_doc/roberta#transformers.RobertaTokenizer"),i(Ke,"href","/docs/transformers/pr_17301/en/model_doc/xlnet#transformers.XLNetTokenizer"),i(Ne,"href","https://github.com/google/sentencepiece"),i(Ne,"rel","nofollow"),i(et,"href","/docs/transformers/pr_17301/en/main_classes/tokenizer#transformers.PreTrainedTokenizer"),i(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(re,"id","transformers.XLMProphetNetModel"),i(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(re,"href","#transformers.XLMProphetNetModel"),i(R,"class","relative group"),i(rt,"href","/docs/transformers/pr_17301/en/model_doc/prophetnet#transformers.ProphetNetModel"),i(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ne,"id","transformers.XLMProphetNetEncoder"),i(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(ne,"href","#transformers.XLMProphetNetEncoder"),i(O,"class","relative group"),i(ot,"href","/docs/transformers/pr_17301/en/model_doc/prophetnet#transformers.ProphetNetEncoder"),i(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ie,"id","transformers.XLMProphetNetDecoder"),i(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(ie,"href","#transformers.XLMProphetNetDecoder"),i(H,"class","relative group"),i(nt,"href","/docs/transformers/pr_17301/en/model_doc/prophetnet#transformers.ProphetNetDecoder"),i(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(pe,"id","transformers.XLMProphetNetForConditionalGeneration"),i(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(pe,"href","#transformers.XLMProphetNetForConditionalGeneration"),i(V,"class","relative group"),i(at,"href","/docs/transformers/pr_17301/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),i(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ce,"id","transformers.XLMProphetNetForCausalLM"),i(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(ce,"href","#transformers.XLMProphetNetForCausalLM"),i(W,"class","relative group"),i(it,"href","/docs/transformers/pr_17301/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),i(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,h){t(document.head,f),m(e,L,h),m(e,_,h),t(_,u),t(u,k),b(a,k,null),t(_,g),t(_,ft),t(ft,Ds),m(e,Vt,h),m(e,A,h),t(A,gt),t(gt,As),t(A,Ss),t(A,fe),t(fe,Is),t(A,Fs),m(e,Wt,h),m(e,S,h),t(S,Y),t(Y,_t),b(ge,_t,null),t(S,Gs),t(S,kt),t(kt,Bs),m(e,Ut,h),m(e,J,h),t(J,Rs),t(J,_e),t(_e,Os),t(J,Hs),m(e,Yt,h),m(e,Ue,h),t(Ue,Vs),m(e,Jt,h),m(e,Ye,h),t(Ye,Ws),m(e,Qt,h),m(e,Je,h),t(Je,vt),t(vt,Us),m(e,Zt,h),m(e,Q,h),t(Q,Ys),t(Q,ke),t(ke,Js),t(Q,Qs),m(e,Kt,h),m(e,I,h),t(I,Z),t(Z,$t),b(ve,$t,null),t(I,Zs),t(I,bt),t(bt,Ks),m(e,es,h),m(e,F,h),b($e,F,null),t(F,er),t(F,G),t(G,tr),t(G,Qe),t(Qe,sr),t(G,rr),t(G,be),t(be,or),t(G,nr),m(e,ts,h),m(e,B,h),t(B,K),t(K,Pt),b(Pe,Pt,null),t(B,ar),t(B,wt),t(wt,ir),m(e,ss,h),m(e,M,h),b(we,M,null),t(M,lr),t(M,q),t(q,pr),t(q,Ze),t(Ze,dr),t(q,cr),t(q,Ke),t(Ke,hr),t(q,mr),t(q,Ne),t(Ne,ur),t(q,fr),t(M,gr),t(M,Le),t(Le,_r),t(Le,et),t(et,kr),t(Le,vr),t(M,$r),t(M,D),b(Me,D,null),t(D,br),t(D,Nt),t(Nt,Pr),t(D,wr),t(D,xe),t(xe,tt),t(tt,Nr),t(tt,Lt),t(Lt,Lr),t(xe,Mr),t(xe,st),t(st,xr),t(st,Mt),t(Mt,Er),t(M,qr),t(M,ee),b(Ee,ee,null),t(ee,Xr),t(ee,xt),t(xt,yr),t(M,jr),t(M,te),b(qe,te,null),t(te,zr),t(te,Et),t(Et,Tr),t(M,Cr),t(M,se),b(Xe,se,null),t(se,Dr),t(se,ye),t(ye,Ar),t(ye,qt),t(qt,Sr),t(ye,Ir),m(e,rs,h),m(e,R,h),t(R,re),t(re,Xt),b(je,Xt,null),t(R,Fr),t(R,yt),t(yt,Gr),m(e,os,h),m(e,X,h),b(ze,X,null),t(X,Br),t(X,Te),t(Te,Rr),t(Te,rt),t(rt,Or),t(Te,Hr),t(X,Vr),b(oe,X,null),m(e,ns,h),m(e,O,h),t(O,ne),t(ne,jt),b(Ce,jt,null),t(O,Wr),t(O,zt),t(zt,Ur),m(e,as,h),m(e,y,h),b(De,y,null),t(y,Yr),t(y,Ae),t(Ae,Jr),t(Ae,ot),t(ot,Qr),t(Ae,Zr),t(y,Kr),b(ae,y,null),m(e,is,h),m(e,H,h),t(H,ie),t(ie,Tt),b(Se,Tt,null),t(H,eo),t(H,Ct),t(Ct,to),m(e,ls,h),m(e,j,h),b(Ie,j,null),t(j,so),t(j,Fe),t(Fe,ro),t(Fe,nt),t(nt,oo),t(Fe,no),t(j,ao),b(le,j,null),m(e,ps,h),m(e,V,h),t(V,pe),t(pe,Dt),b(Ge,Dt,null),t(V,io),t(V,At),t(At,lo),m(e,ds,h),m(e,z,h),b(Be,z,null),t(z,po),t(z,Re),t(Re,co),t(Re,at),t(at,ho),t(Re,mo),t(z,uo),b(de,z,null),m(e,cs,h),m(e,W,h),t(W,ce),t(ce,St),b(Oe,St,null),t(W,fo),t(W,It),t(It,go),m(e,hs,h),m(e,T,h),b(He,T,null),t(T,_o),t(T,Ve),t(Ve,ko),t(Ve,it),t(it,vo),t(Ve,$o),t(T,bo),b(he,T,null),ms=!0},p(e,[h]){const We={};h&2&&(We.$$scope={dirty:h,ctx:e}),oe.$set(We);const Ft={};h&2&&(Ft.$$scope={dirty:h,ctx:e}),ae.$set(Ft);const Gt={};h&2&&(Gt.$$scope={dirty:h,ctx:e}),le.$set(Gt);const Bt={};h&2&&(Bt.$$scope={dirty:h,ctx:e}),de.$set(Bt);const me={};h&2&&(me.$$scope={dirty:h,ctx:e}),he.$set(me)},i(e){ms||(P(a.$$.fragment,e),P(ge.$$.fragment,e),P(ve.$$.fragment,e),P($e.$$.fragment,e),P(Pe.$$.fragment,e),P(we.$$.fragment,e),P(Me.$$.fragment,e),P(Ee.$$.fragment,e),P(qe.$$.fragment,e),P(Xe.$$.fragment,e),P(je.$$.fragment,e),P(ze.$$.fragment,e),P(oe.$$.fragment,e),P(Ce.$$.fragment,e),P(De.$$.fragment,e),P(ae.$$.fragment,e),P(Se.$$.fragment,e),P(Ie.$$.fragment,e),P(le.$$.fragment,e),P(Ge.$$.fragment,e),P(Be.$$.fragment,e),P(de.$$.fragment,e),P(Oe.$$.fragment,e),P(He.$$.fragment,e),P(he.$$.fragment,e),ms=!0)},o(e){w(a.$$.fragment,e),w(ge.$$.fragment,e),w(ve.$$.fragment,e),w($e.$$.fragment,e),w(Pe.$$.fragment,e),w(we.$$.fragment,e),w(Me.$$.fragment,e),w(Ee.$$.fragment,e),w(qe.$$.fragment,e),w(Xe.$$.fragment,e),w(je.$$.fragment,e),w(ze.$$.fragment,e),w(oe.$$.fragment,e),w(Ce.$$.fragment,e),w(De.$$.fragment,e),w(ae.$$.fragment,e),w(Se.$$.fragment,e),w(Ie.$$.fragment,e),w(le.$$.fragment,e),w(Ge.$$.fragment,e),w(Be.$$.fragment,e),w(de.$$.fragment,e),w(Oe.$$.fragment,e),w(He.$$.fragment,e),w(he.$$.fragment,e),ms=!1},d(e){s(f),e&&s(L),e&&s(_),N(a),e&&s(Vt),e&&s(A),e&&s(Wt),e&&s(S),N(ge),e&&s(Ut),e&&s(J),e&&s(Yt),e&&s(Ue),e&&s(Jt),e&&s(Ye),e&&s(Qt),e&&s(Je),e&&s(Zt),e&&s(Q),e&&s(Kt),e&&s(I),N(ve),e&&s(es),e&&s(F),N($e),e&&s(ts),e&&s(B),N(Pe),e&&s(ss),e&&s(M),N(we),N(Me),N(Ee),N(qe),N(Xe),e&&s(rs),e&&s(R),N(je),e&&s(os),e&&s(X),N(ze),N(oe),e&&s(ns),e&&s(O),N(Ce),e&&s(as),e&&s(y),N(De),N(ae),e&&s(is),e&&s(H),N(Se),e&&s(ls),e&&s(j),N(Ie),N(le),e&&s(ps),e&&s(V),N(Ge),e&&s(ds),e&&s(z),N(Be),N(de),e&&s(cs),e&&s(W),N(Oe),e&&s(hs),e&&s(T),N(He),N(he)}}}const yn={local:"xlmprophetnet",sections:[{local:"overview",title:"Overview"},{local:"transformers.XLMProphetNetConfig",title:"XLMProphetNetConfig"},{local:"transformers.XLMProphetNetTokenizer",title:"XLMProphetNetTokenizer"},{local:"transformers.XLMProphetNetModel",title:"XLMProphetNetModel"},{local:"transformers.XLMProphetNetEncoder",title:"XLMProphetNetEncoder"},{local:"transformers.XLMProphetNetDecoder",title:"XLMProphetNetDecoder"},{local:"transformers.XLMProphetNetForConditionalGeneration",title:"XLMProphetNetForConditionalGeneration"},{local:"transformers.XLMProphetNetForCausalLM",title:"XLMProphetNetForCausalLM"}],title:"XLM-ProphetNet"};function jn(E){return Nn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Sn extends $n{constructor(f){super();bn(this,f,jn,Xn,Pn,{})}}export{Sn as default,yn as metadata};
