import{S as ljt,i as ijt,s as djt,e as a,k as l,w as F,t as o,M as cjt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as fjt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as KJr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function mjt(x){let g,v,p,m,u,d,h,Eo,Ti,yf,at,Mi,Ei,vL,xf,Oe,We,Ci,Sn,FL,Rn,Pn,TL,wi,Bn,ML,Ai,$f,ya;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ti=a("code"),yf=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Mi=a("code"),Ei=o('"new-model"'),vL=o(")."),xf=l(),Oe=a("p"),We=o("Likewise, if your "),Ci=a("code"),Sn=o("NewModel"),FL=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),TL=o(`, make sure its
`),wi=a("code"),Bn=o("config_class"),ML=o(` attribute is set to the same class you use when registering the model (here
`),Ai=a("code"),$f=o("NewModelConfig"),ya=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Jk=s(p);m=r(Jk,"NewModelConfig"),Jk.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Li=s(d);h=r(Li,"PretrainedConfig"),Li.forEach(t),Eo=r(Ae,`, make sure its
`),Ti=n(Ae,"CODE",{});var Yk=s(Ti);yf=r(Yk,"model_type"),Yk.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Mi=n(Ae,"CODE",{});var Kk=s(Mi);Ei=r(Kk,'"new-model"'),Kk.forEach(t),vL=r(Ae,")."),Ae.forEach(t),xf=i(Qe),Oe=n(Qe,"P",{});var Co=s(Oe);We=r(Co,"Likewise, if your "),Ci=n(Co,"CODE",{});var xa=s(Ci);Sn=r(xa,"NewModel"),xa.forEach(t),FL=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var Zk=s(Rn);Pn=r(Zk,"PreTrainedModel"),Zk.forEach(t),TL=r(Co,`, make sure its
`),wi=n(Co,"CODE",{});var kf=s(wi);Bn=r(kf,"config_class"),kf.forEach(t),ML=r(Co,` attribute is set to the same class you use when registering the model (here
`),Ai=n(Co,"CODE",{});var eS=s(Ai);$f=r(eS,"NewModelConfig"),eS.forEach(t),ya=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Eo),e(g,Ti),e(Ti,yf),e(g,at),e(g,Mi),e(Mi,Ei),e(g,vL),b(Qe,xf,Ae),b(Qe,Oe,Ae),e(Oe,We),e(Oe,Ci),e(Ci,Sn),e(Oe,FL),e(Oe,Rn),e(Rn,Pn),e(Oe,TL),e(Oe,wi),e(wi,Bn),e(Oe,ML),e(Oe,Ai),e(Ai,$f),e(Oe,ya)},d(Qe){Qe&&t(g),Qe&&t(xf),Qe&&t(Oe)}}}function gjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pjt(x){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function ujt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _jt(x){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function bjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ejt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ajt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ljt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $jt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ijt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Njt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Djt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ojt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ujt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zjt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Dt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ADt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Dt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ODt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZDt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eGt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oGt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rGt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tGt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aGt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nGt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sGt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lGt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iGt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dGt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cGt(x){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fGt(x){let g,v,p,m,u,d,h,Eo,Ti,yf,at,Mi,Ei,vL,xf,Oe,We,Ci,Sn,FL,Rn,Pn,TL,wi,Bn,ML,Ai,$f,ya,Qe,Ae,Jk,Li,Yk,Kk,Co,xa,Zk,kf,eS,$ze,pGe,yi,Sf,ete,EL,kze,ote,Sze,uGe,In,Rze,rte,Pze,Bze,tte,Ize,Nze,_Ge,CL,bGe,oS,qze,vGe,Rf,FGe,xi,Pf,ate,wL,jze,nte,Dze,TGe,wo,AL,Gze,LL,Oze,rS,Vze,Xze,zze,yL,Wze,ste,Qze,Hze,Uze,wr,xL,Jze,lte,Yze,Kze,$i,Zze,ite,eWe,oWe,dte,rWe,tWe,aWe,A,Bf,cte,nWe,sWe,tS,lWe,iWe,dWe,If,fte,cWe,fWe,aS,mWe,gWe,hWe,Nf,mte,pWe,uWe,nS,_We,bWe,vWe,qf,gte,FWe,TWe,sS,MWe,EWe,CWe,jf,hte,wWe,AWe,lS,LWe,yWe,xWe,Df,pte,$We,kWe,iS,SWe,RWe,PWe,Gf,ute,BWe,IWe,dS,NWe,qWe,jWe,Of,_te,DWe,GWe,cS,OWe,VWe,XWe,Vf,bte,zWe,WWe,fS,QWe,HWe,UWe,Xf,vte,JWe,YWe,mS,KWe,ZWe,eQe,zf,Fte,oQe,rQe,gS,tQe,aQe,nQe,Wf,Tte,sQe,lQe,hS,iQe,dQe,cQe,Qf,Mte,fQe,mQe,pS,gQe,hQe,pQe,Hf,Ete,uQe,_Qe,uS,bQe,vQe,FQe,Uf,Cte,TQe,MQe,_S,EQe,CQe,wQe,Jf,wte,AQe,LQe,bS,yQe,xQe,$Qe,Yf,Ate,kQe,SQe,vS,RQe,PQe,BQe,Kf,Lte,IQe,NQe,FS,qQe,jQe,DQe,Zf,yte,GQe,OQe,TS,VQe,XQe,zQe,em,xte,WQe,QQe,MS,HQe,UQe,JQe,om,$te,YQe,KQe,ES,ZQe,eHe,oHe,rm,kte,rHe,tHe,CS,aHe,nHe,sHe,tm,Ste,lHe,iHe,wS,dHe,cHe,fHe,am,Rte,mHe,gHe,AS,hHe,pHe,uHe,nm,Pte,_He,bHe,LS,vHe,FHe,THe,sm,Bte,MHe,EHe,yS,CHe,wHe,AHe,lm,Ite,LHe,yHe,xS,xHe,$He,kHe,im,Nte,SHe,RHe,$S,PHe,BHe,IHe,dm,qte,NHe,qHe,kS,jHe,DHe,GHe,cm,jte,OHe,VHe,SS,XHe,zHe,WHe,fm,Dte,QHe,HHe,RS,UHe,JHe,YHe,mm,Gte,KHe,ZHe,PS,eUe,oUe,rUe,gm,Ote,tUe,aUe,BS,nUe,sUe,lUe,hm,Vte,iUe,dUe,IS,cUe,fUe,mUe,pm,Xte,gUe,hUe,NS,pUe,uUe,_Ue,um,zte,bUe,vUe,qS,FUe,TUe,MUe,_m,Wte,EUe,CUe,jS,wUe,AUe,LUe,bm,Qte,yUe,xUe,DS,$Ue,kUe,SUe,vm,Hte,RUe,PUe,GS,BUe,IUe,NUe,Fm,Ute,qUe,jUe,OS,DUe,GUe,OUe,Tm,Jte,VUe,XUe,VS,zUe,WUe,QUe,Mm,Yte,HUe,UUe,XS,JUe,YUe,KUe,Em,Kte,ZUe,eJe,zS,oJe,rJe,tJe,Cm,Zte,aJe,nJe,WS,sJe,lJe,iJe,wm,eae,dJe,cJe,QS,fJe,mJe,gJe,Am,oae,hJe,pJe,HS,uJe,_Je,bJe,Lm,rae,vJe,FJe,US,TJe,MJe,EJe,ym,tae,CJe,wJe,JS,AJe,LJe,yJe,xm,aae,xJe,$Je,YS,kJe,SJe,RJe,$m,nae,PJe,BJe,KS,IJe,NJe,qJe,km,sae,jJe,DJe,ZS,GJe,OJe,VJe,Sm,lae,XJe,zJe,eR,WJe,QJe,HJe,Rm,iae,UJe,JJe,oR,YJe,KJe,ZJe,Pm,dae,eYe,oYe,rR,rYe,tYe,aYe,Bm,cae,nYe,sYe,tR,lYe,iYe,dYe,Im,fae,cYe,fYe,aR,mYe,gYe,hYe,Nm,mae,pYe,uYe,nR,_Ye,bYe,vYe,qm,gae,FYe,TYe,sR,MYe,EYe,CYe,jm,hae,wYe,AYe,lR,LYe,yYe,xYe,Dm,pae,$Ye,kYe,iR,SYe,RYe,PYe,Gm,uae,BYe,IYe,dR,NYe,qYe,jYe,Om,_ae,DYe,GYe,cR,OYe,VYe,XYe,Vm,bae,zYe,WYe,fR,QYe,HYe,UYe,Xm,vae,JYe,YYe,mR,KYe,ZYe,eKe,zm,Fae,oKe,rKe,gR,tKe,aKe,nKe,Wm,Tae,sKe,lKe,hR,iKe,dKe,cKe,Qm,Mae,fKe,mKe,pR,gKe,hKe,pKe,Hm,Eae,uKe,_Ke,uR,bKe,vKe,FKe,Um,Cae,TKe,MKe,_R,EKe,CKe,wKe,Jm,wae,AKe,LKe,bR,yKe,xKe,$Ke,Ym,Aae,kKe,SKe,vR,RKe,PKe,BKe,Km,Lae,IKe,NKe,FR,qKe,jKe,DKe,Zm,yae,GKe,OKe,TR,VKe,XKe,zKe,eg,xae,WKe,QKe,MR,HKe,UKe,JKe,og,$ae,YKe,KKe,ER,ZKe,eZe,oZe,rg,kae,rZe,tZe,CR,aZe,nZe,sZe,tg,Sae,lZe,iZe,wR,dZe,cZe,fZe,ag,Rae,mZe,gZe,AR,hZe,pZe,uZe,ng,Pae,_Ze,bZe,LR,vZe,FZe,TZe,sg,Bae,MZe,EZe,yR,CZe,wZe,AZe,lg,Iae,LZe,yZe,xR,xZe,$Ze,kZe,ig,Nae,SZe,RZe,$R,PZe,BZe,IZe,dg,qae,NZe,qZe,kR,jZe,DZe,GZe,cg,jae,OZe,VZe,SR,XZe,zZe,WZe,fg,Dae,QZe,HZe,RR,UZe,JZe,YZe,mg,Gae,KZe,ZZe,PR,eeo,oeo,reo,gg,Oae,teo,aeo,BR,neo,seo,leo,hg,Vae,ieo,deo,IR,ceo,feo,meo,pg,Xae,geo,heo,NR,peo,ueo,_eo,ug,zae,beo,veo,qR,Feo,Teo,Meo,_g,Wae,Eeo,Ceo,jR,weo,Aeo,Leo,bg,Qae,yeo,xeo,DR,$eo,keo,Seo,vg,Hae,Reo,Peo,GR,Beo,Ieo,Neo,Fg,Uae,qeo,jeo,OR,Deo,Geo,Oeo,Tg,Jae,Veo,Xeo,VR,zeo,Weo,Qeo,Mg,Yae,Heo,Ueo,XR,Jeo,Yeo,Keo,Eg,Kae,Zeo,eoo,zR,ooo,roo,too,Cg,Zae,aoo,noo,WR,soo,loo,ioo,wg,ene,doo,coo,QR,foo,moo,goo,Ag,one,hoo,poo,HR,uoo,_oo,boo,Lg,rne,voo,Foo,UR,Too,Moo,Eoo,yg,tne,Coo,woo,JR,Aoo,Loo,yoo,xg,ane,xoo,$oo,YR,koo,Soo,Roo,$g,nne,Poo,Boo,KR,Ioo,Noo,qoo,kg,sne,joo,Doo,ZR,Goo,Ooo,Voo,Sg,lne,Xoo,zoo,eP,Woo,Qoo,Hoo,Rg,ine,Uoo,Joo,oP,Yoo,Koo,Zoo,Pg,dne,ero,oro,rP,rro,tro,aro,Bg,cne,nro,sro,tP,lro,iro,dro,Ig,fne,cro,fro,aP,mro,gro,hro,Ng,mne,pro,uro,nP,_ro,bro,vro,qg,gne,Fro,Tro,sP,Mro,Ero,Cro,jg,hne,wro,Aro,lP,Lro,yro,xro,Dg,pne,$ro,kro,iP,Sro,Rro,Pro,Gg,Bro,Og,$L,Iro,une,Nro,MGe,ki,Vg,_ne,kL,qro,bne,jro,EGe,Ao,SL,Dro,RL,Gro,dP,Oro,Vro,Xro,PL,zro,vne,Wro,Qro,Hro,Ar,BL,Uro,Fne,Jro,Yro,$a,Kro,Tne,Zro,eto,Mne,oto,rto,Ene,tto,ato,nto,k,Nn,Cne,sto,lto,cP,ito,dto,fP,cto,fto,mto,qn,wne,gto,hto,mP,pto,uto,gP,_to,bto,vto,jn,Ane,Fto,Tto,hP,Mto,Eto,pP,Cto,wto,Ato,Xg,Lne,Lto,yto,uP,xto,$to,kto,Dn,yne,Sto,Rto,_P,Pto,Bto,bP,Ito,Nto,qto,zg,xne,jto,Dto,vP,Gto,Oto,Vto,Wg,$ne,Xto,zto,FP,Wto,Qto,Hto,Qg,kne,Uto,Jto,TP,Yto,Kto,Zto,Gn,Sne,eao,oao,MP,rao,tao,EP,aao,nao,sao,On,Rne,lao,iao,CP,dao,cao,wP,fao,mao,gao,Vn,Pne,hao,pao,AP,uao,_ao,LP,bao,vao,Fao,Hg,Bne,Tao,Mao,yP,Eao,Cao,wao,Ug,Ine,Aao,Lao,xP,yao,xao,$ao,Jg,Nne,kao,Sao,$P,Rao,Pao,Bao,Xn,qne,Iao,Nao,kP,qao,jao,SP,Dao,Gao,Oao,Yg,jne,Vao,Xao,RP,zao,Wao,Qao,zn,Dne,Hao,Uao,PP,Jao,Yao,BP,Kao,Zao,eno,Wn,Gne,ono,rno,IP,tno,ano,NP,nno,sno,lno,Qn,One,ino,dno,qP,cno,fno,jP,mno,gno,hno,Hn,Vne,pno,uno,DP,_no,bno,GP,vno,Fno,Tno,Kg,Xne,Mno,Eno,OP,Cno,wno,Ano,Un,zne,Lno,yno,VP,xno,$no,XP,kno,Sno,Rno,Jn,Wne,Pno,Bno,zP,Ino,Nno,WP,qno,jno,Dno,Yn,Qne,Gno,Ono,QP,Vno,Xno,HP,zno,Wno,Qno,Kn,Hne,Hno,Uno,UP,Jno,Yno,JP,Kno,Zno,eso,Zn,Une,oso,rso,YP,tso,aso,KP,nso,sso,lso,es,Jne,iso,dso,ZP,cso,fso,eB,mso,gso,hso,Zg,Yne,pso,uso,oB,_so,bso,vso,os,Kne,Fso,Tso,rB,Mso,Eso,tB,Cso,wso,Aso,eh,Zne,Lso,yso,aB,xso,$so,kso,rs,ese,Sso,Rso,nB,Pso,Bso,sB,Iso,Nso,qso,ts,ose,jso,Dso,lB,Gso,Oso,iB,Vso,Xso,zso,as,rse,Wso,Qso,dB,Hso,Uso,cB,Jso,Yso,Kso,oh,tse,Zso,elo,fB,olo,rlo,tlo,ns,ase,alo,nlo,mB,slo,llo,gB,ilo,dlo,clo,ss,nse,flo,mlo,hB,glo,hlo,pB,plo,ulo,_lo,rh,sse,blo,vlo,uB,Flo,Tlo,Mlo,ls,lse,Elo,Clo,_B,wlo,Alo,bB,Llo,ylo,xlo,is,ise,$lo,klo,vB,Slo,Rlo,FB,Plo,Blo,Ilo,ds,dse,Nlo,qlo,TB,jlo,Dlo,MB,Glo,Olo,Vlo,cs,cse,Xlo,zlo,EB,Wlo,Qlo,CB,Hlo,Ulo,Jlo,fs,fse,Ylo,Klo,wB,Zlo,eio,AB,oio,rio,tio,ms,mse,aio,nio,LB,sio,lio,yB,iio,dio,cio,gs,gse,fio,mio,xB,gio,hio,$B,pio,uio,_io,hs,hse,bio,vio,kB,Fio,Tio,SB,Mio,Eio,Cio,th,pse,wio,Aio,RB,Lio,yio,xio,ps,use,$io,kio,PB,Sio,Rio,BB,Pio,Bio,Iio,ah,_se,Nio,qio,IB,jio,Dio,Gio,nh,bse,Oio,Vio,NB,Xio,zio,Wio,us,vse,Qio,Hio,qB,Uio,Jio,jB,Yio,Kio,Zio,_s,Fse,edo,odo,DB,rdo,tdo,GB,ado,ndo,sdo,bs,Tse,ldo,ido,OB,ddo,cdo,VB,fdo,mdo,gdo,sh,Mse,hdo,pdo,XB,udo,_do,bdo,vs,Ese,vdo,Fdo,zB,Tdo,Mdo,WB,Edo,Cdo,wdo,Fs,Cse,Ado,Ldo,QB,ydo,xdo,HB,$do,kdo,Sdo,Ts,wse,Rdo,Pdo,UB,Bdo,Ido,JB,Ndo,qdo,jdo,Ms,Ase,Ddo,Gdo,YB,Odo,Vdo,KB,Xdo,zdo,Wdo,Es,Lse,Qdo,Hdo,ZB,Udo,Jdo,eI,Ydo,Kdo,Zdo,lh,yse,eco,oco,oI,rco,tco,aco,Cs,xse,nco,sco,rI,lco,ico,tI,dco,cco,fco,ih,$se,mco,gco,aI,hco,pco,uco,dh,kse,_co,bco,nI,vco,Fco,Tco,ch,Sse,Mco,Eco,sI,Cco,wco,Aco,fh,Rse,Lco,yco,lI,xco,$co,kco,ws,Pse,Sco,Rco,iI,Pco,Bco,dI,Ico,Nco,qco,mh,Bse,jco,Dco,cI,Gco,Oco,Vco,As,Ise,Xco,zco,fI,Wco,Qco,mI,Hco,Uco,Jco,Ls,Nse,Yco,Kco,gI,Zco,efo,hI,ofo,rfo,tfo,ys,qse,afo,nfo,pI,sfo,lfo,uI,ifo,dfo,cfo,xs,jse,ffo,mfo,_I,gfo,hfo,bI,pfo,ufo,_fo,$s,Dse,bfo,vfo,vI,Ffo,Tfo,FI,Mfo,Efo,Cfo,ks,Gse,wfo,Afo,TI,Lfo,yfo,MI,xfo,$fo,kfo,gh,Ose,Sfo,Rfo,EI,Pfo,Bfo,Ifo,hh,Vse,Nfo,qfo,CI,jfo,Dfo,Gfo,Ss,Xse,Ofo,Vfo,wI,Xfo,zfo,AI,Wfo,Qfo,Hfo,Rs,zse,Ufo,Jfo,LI,Yfo,Kfo,yI,Zfo,emo,omo,Ps,Wse,rmo,tmo,xI,amo,nmo,$I,smo,lmo,imo,ph,Qse,dmo,cmo,kI,fmo,mmo,gmo,uh,Hse,hmo,pmo,SI,umo,_mo,bmo,_h,Use,vmo,Fmo,RI,Tmo,Mmo,Emo,Bs,Jse,Cmo,wmo,PI,Amo,Lmo,BI,ymo,xmo,$mo,Is,Yse,kmo,Smo,II,Rmo,Pmo,NI,Bmo,Imo,Nmo,bh,Kse,qmo,jmo,qI,Dmo,Gmo,Omo,vh,Zse,Vmo,Xmo,jI,zmo,Wmo,Qmo,Fh,ele,Hmo,Umo,DI,Jmo,Ymo,Kmo,Ns,ole,Zmo,ego,GI,ogo,rgo,OI,tgo,ago,ngo,Th,rle,sgo,lgo,VI,igo,dgo,cgo,Mh,tle,fgo,mgo,XI,ggo,hgo,pgo,qs,ale,ugo,_go,zI,bgo,vgo,WI,Fgo,Tgo,Mgo,js,nle,Ego,Cgo,QI,wgo,Ago,HI,Lgo,ygo,xgo,Ds,sle,$go,kgo,UI,Sgo,Rgo,JI,Pgo,Bgo,Igo,Gs,lle,Ngo,qgo,YI,jgo,Dgo,KI,Ggo,Ogo,Vgo,Eh,Xgo,Ch,IL,zgo,ile,Wgo,CGe,Si,wh,dle,NL,Qgo,cle,Hgo,wGe,Lo,qL,Ugo,jL,Jgo,ZI,Ygo,Kgo,Zgo,DL,eho,fle,oho,rho,tho,He,GL,aho,mle,nho,sho,ka,lho,gle,iho,dho,hle,cho,fho,ple,mho,gho,hho,Y,Ah,ule,pho,uho,eN,_ho,bho,vho,Lh,_le,Fho,Tho,oN,Mho,Eho,Cho,yh,ble,who,Aho,rN,Lho,yho,xho,xh,vle,$ho,kho,tN,Sho,Rho,Pho,$h,Fle,Bho,Iho,aN,Nho,qho,jho,kh,Tle,Dho,Gho,nN,Oho,Vho,Xho,Sh,Mle,zho,Who,sN,Qho,Hho,Uho,Rh,Ele,Jho,Yho,lN,Kho,Zho,epo,Ph,Cle,opo,rpo,iN,tpo,apo,npo,Bh,wle,spo,lpo,dN,ipo,dpo,cpo,Ih,Ale,fpo,mpo,cN,gpo,hpo,ppo,Nh,Lle,upo,_po,fN,bpo,vpo,Fpo,qh,yle,Tpo,Mpo,mN,Epo,Cpo,wpo,jh,xle,Apo,Lpo,gN,ypo,xpo,$po,Dh,$le,kpo,Spo,hN,Rpo,Ppo,Bpo,Gh,kle,Ipo,Npo,pN,qpo,jpo,Dpo,Oh,Sle,Gpo,Opo,uN,Vpo,Xpo,zpo,Vh,Rle,Wpo,Qpo,_N,Hpo,Upo,Jpo,Xh,Ple,Ypo,Kpo,bN,Zpo,euo,ouo,zh,Ble,ruo,tuo,vN,auo,nuo,suo,Wh,Ile,luo,iuo,FN,duo,cuo,fuo,Qh,Nle,muo,guo,TN,huo,puo,uuo,Hh,qle,_uo,buo,MN,vuo,Fuo,Tuo,Uh,jle,Muo,Euo,EN,Cuo,wuo,Auo,Jh,Dle,Luo,yuo,CN,xuo,$uo,kuo,Yh,Gle,Suo,Ruo,wN,Puo,Buo,Iuo,Kh,Ole,Nuo,quo,AN,juo,Duo,Guo,Zh,Vle,Ouo,Vuo,LN,Xuo,zuo,Wuo,ep,Xle,Quo,Huo,yN,Uuo,Juo,Yuo,op,zle,Kuo,Zuo,xN,e_o,o_o,r_o,rp,Wle,t_o,a_o,$N,n_o,s_o,l_o,tp,Qle,i_o,d_o,kN,c_o,f_o,m_o,ap,g_o,np,h_o,sp,OL,p_o,Hle,u_o,AGe,Ri,lp,Ule,VL,__o,Jle,b_o,LGe,yo,XL,v_o,zL,F_o,SN,T_o,M_o,E_o,WL,C_o,Yle,w_o,A_o,L_o,Ue,QL,y_o,Kle,x_o,$_o,Pi,k_o,Zle,S_o,R_o,eie,P_o,B_o,I_o,he,ip,oie,N_o,q_o,RN,j_o,D_o,G_o,dp,rie,O_o,V_o,tie,X_o,z_o,W_o,cp,aie,Q_o,H_o,PN,U_o,J_o,Y_o,fp,nie,K_o,Z_o,BN,e4o,o4o,r4o,mp,sie,t4o,a4o,IN,n4o,s4o,l4o,gp,lie,i4o,d4o,NN,c4o,f4o,m4o,hp,iie,g4o,h4o,qN,p4o,u4o,_4o,pp,die,b4o,v4o,jN,F4o,T4o,M4o,up,cie,E4o,C4o,DN,w4o,A4o,L4o,_p,fie,y4o,x4o,GN,$4o,k4o,S4o,bp,mie,R4o,P4o,ON,B4o,I4o,N4o,vp,gie,q4o,j4o,VN,D4o,G4o,O4o,Fp,hie,V4o,X4o,XN,z4o,W4o,Q4o,Tp,pie,H4o,U4o,zN,J4o,Y4o,K4o,Mp,uie,Z4o,e1o,WN,o1o,r1o,t1o,Ep,_ie,a1o,n1o,QN,s1o,l1o,i1o,Cp,bie,d1o,c1o,HN,f1o,m1o,g1o,wp,h1o,Ap,p1o,Lp,HL,u1o,vie,_1o,yGe,Bi,yp,Fie,UL,b1o,Tie,v1o,xGe,xo,JL,F1o,Ii,T1o,UN,M1o,E1o,JN,C1o,w1o,A1o,YL,L1o,Mie,y1o,x1o,$1o,nt,KL,k1o,Eie,S1o,R1o,Ni,P1o,Cie,B1o,I1o,YN,N1o,q1o,j1o,xp,D1o,Je,ZL,G1o,wie,O1o,V1o,Sa,X1o,Aie,z1o,W1o,Lie,Q1o,H1o,yie,U1o,J1o,Y1o,y,$p,xie,K1o,Z1o,KN,e2o,o2o,r2o,kp,$ie,t2o,a2o,ZN,n2o,s2o,l2o,Sp,kie,i2o,d2o,eq,c2o,f2o,m2o,Rp,Sie,g2o,h2o,oq,p2o,u2o,_2o,Pp,Rie,b2o,v2o,rq,F2o,T2o,M2o,Bp,Pie,E2o,C2o,tq,w2o,A2o,L2o,Ip,Bie,y2o,x2o,aq,$2o,k2o,S2o,Np,Iie,R2o,P2o,nq,B2o,I2o,N2o,qp,Nie,q2o,j2o,sq,D2o,G2o,O2o,jp,qie,V2o,X2o,lq,z2o,W2o,Q2o,Dp,jie,H2o,U2o,iq,J2o,Y2o,K2o,Gp,Die,Z2o,ebo,dq,obo,rbo,tbo,Op,Gie,abo,nbo,cq,sbo,lbo,ibo,Vp,Oie,dbo,cbo,fq,fbo,mbo,gbo,Xp,Vie,hbo,pbo,mq,ubo,_bo,bbo,zp,Xie,vbo,Fbo,gq,Tbo,Mbo,Ebo,Wp,zie,Cbo,wbo,hq,Abo,Lbo,ybo,Qp,Wie,xbo,$bo,pq,kbo,Sbo,Rbo,Hp,Qie,Pbo,Bbo,uq,Ibo,Nbo,qbo,Up,Hie,jbo,Dbo,_q,Gbo,Obo,Vbo,Jp,Uie,Xbo,zbo,bq,Wbo,Qbo,Hbo,Yp,Jie,Ubo,Jbo,vq,Ybo,Kbo,Zbo,Kp,Yie,evo,ovo,Fq,rvo,tvo,avo,Zp,Kie,nvo,svo,Tq,lvo,ivo,dvo,eu,Zie,cvo,fvo,Mq,mvo,gvo,hvo,ou,ede,pvo,uvo,Eq,_vo,bvo,vvo,ru,ode,Fvo,Tvo,Cq,Mvo,Evo,Cvo,tu,rde,wvo,Avo,wq,Lvo,yvo,xvo,au,tde,$vo,kvo,Aq,Svo,Rvo,Pvo,nu,ade,Bvo,Ivo,Lq,Nvo,qvo,jvo,su,nde,Dvo,Gvo,yq,Ovo,Vvo,Xvo,lu,sde,zvo,Wvo,xq,Qvo,Hvo,Uvo,iu,lde,Jvo,Yvo,$q,Kvo,Zvo,e3o,du,ide,o3o,r3o,kq,t3o,a3o,n3o,Os,dde,s3o,l3o,Sq,i3o,d3o,Rq,c3o,f3o,m3o,cu,cde,g3o,h3o,Pq,p3o,u3o,_3o,fu,fde,b3o,v3o,Bq,F3o,T3o,M3o,mu,mde,E3o,C3o,Iq,w3o,A3o,L3o,gu,gde,y3o,x3o,Nq,$3o,k3o,S3o,hu,hde,R3o,P3o,qq,B3o,I3o,N3o,pu,pde,q3o,j3o,jq,D3o,G3o,O3o,uu,ude,V3o,X3o,Dq,z3o,W3o,Q3o,_u,_de,H3o,U3o,Gq,J3o,Y3o,K3o,bu,bde,Z3o,eFo,Oq,oFo,rFo,tFo,vu,vde,aFo,nFo,Vq,sFo,lFo,iFo,Fu,Fde,dFo,cFo,Xq,fFo,mFo,gFo,Tu,Tde,hFo,pFo,zq,uFo,_Fo,bFo,Mu,Mde,vFo,FFo,Wq,TFo,MFo,EFo,Eu,Ede,CFo,wFo,Qq,AFo,LFo,yFo,Cu,Cde,xFo,$Fo,Hq,kFo,SFo,RFo,wu,wde,PFo,BFo,Uq,IFo,NFo,qFo,Au,Ade,jFo,DFo,Jq,GFo,OFo,VFo,Lu,Lde,XFo,zFo,Yq,WFo,QFo,HFo,yu,yde,UFo,JFo,Kq,YFo,KFo,ZFo,xu,xde,eTo,oTo,Zq,rTo,tTo,aTo,$u,$de,nTo,sTo,ej,lTo,iTo,dTo,ku,kde,cTo,fTo,oj,mTo,gTo,hTo,Su,Sde,pTo,uTo,rj,_To,bTo,vTo,Ru,Rde,FTo,TTo,tj,MTo,ETo,CTo,Pu,Pde,wTo,ATo,aj,LTo,yTo,xTo,Bu,Bde,$To,kTo,nj,STo,RTo,PTo,Iu,Ide,BTo,ITo,sj,NTo,qTo,jTo,Nu,Nde,DTo,GTo,lj,OTo,VTo,XTo,qu,qde,zTo,WTo,ij,QTo,HTo,UTo,ju,jde,JTo,YTo,dj,KTo,ZTo,e7o,Du,Dde,o7o,r7o,cj,t7o,a7o,n7o,Gu,Gde,s7o,l7o,fj,i7o,d7o,c7o,Ou,Ode,f7o,m7o,mj,g7o,h7o,p7o,Vu,Vde,u7o,_7o,gj,b7o,v7o,F7o,Xu,Xde,T7o,M7o,hj,E7o,C7o,w7o,zu,zde,A7o,L7o,pj,y7o,x7o,$7o,Wu,Wde,k7o,S7o,uj,R7o,P7o,B7o,Qu,Qde,I7o,N7o,_j,q7o,j7o,D7o,Hu,Hde,G7o,O7o,bj,V7o,X7o,z7o,Uu,Ude,W7o,Q7o,vj,H7o,U7o,J7o,Ju,Jde,Y7o,K7o,Fj,Z7o,eMo,oMo,Yu,Yde,rMo,tMo,Tj,aMo,nMo,sMo,Ku,Kde,lMo,iMo,Mj,dMo,cMo,fMo,Zu,Zde,mMo,gMo,Ej,hMo,pMo,uMo,e_,ece,_Mo,bMo,Cj,vMo,FMo,TMo,o_,oce,MMo,EMo,wj,CMo,wMo,AMo,r_,rce,LMo,yMo,Aj,xMo,$Mo,kMo,t_,tce,SMo,RMo,Lj,PMo,BMo,IMo,a_,ace,NMo,qMo,yj,jMo,DMo,GMo,n_,nce,OMo,VMo,xj,XMo,zMo,WMo,s_,sce,QMo,HMo,$j,UMo,JMo,YMo,l_,lce,KMo,ZMo,kj,eEo,oEo,rEo,i_,ice,tEo,aEo,Sj,nEo,sEo,lEo,d_,dce,iEo,dEo,Rj,cEo,fEo,mEo,c_,cce,gEo,hEo,Pj,pEo,uEo,_Eo,f_,fce,bEo,vEo,Bj,FEo,TEo,MEo,m_,mce,EEo,CEo,Ij,wEo,AEo,LEo,g_,gce,yEo,xEo,Nj,$Eo,kEo,SEo,h_,hce,REo,PEo,qj,BEo,IEo,NEo,p_,pce,qEo,jEo,jj,DEo,GEo,OEo,u_,uce,VEo,XEo,Dj,zEo,WEo,QEo,__,_ce,HEo,UEo,Gj,JEo,YEo,KEo,b_,bce,ZEo,eCo,Oj,oCo,rCo,tCo,v_,vce,aCo,nCo,Vj,sCo,lCo,iCo,F_,Fce,dCo,cCo,Xj,fCo,mCo,gCo,T_,Tce,hCo,pCo,zj,uCo,_Co,bCo,M_,Mce,vCo,FCo,Wj,TCo,MCo,ECo,E_,Ece,CCo,wCo,Qj,ACo,LCo,yCo,C_,Cce,xCo,$Co,Hj,kCo,SCo,RCo,w_,wce,PCo,BCo,Uj,ICo,NCo,qCo,A_,Ace,jCo,DCo,Jj,GCo,OCo,VCo,L_,Lce,XCo,zCo,Yj,WCo,QCo,HCo,y_,UCo,yce,JCo,YCo,xce,KCo,ZCo,x_,$Ge,qi,$_,$ce,ey,e5o,kce,o5o,kGe,$o,oy,r5o,ji,t5o,Kj,a5o,n5o,Zj,s5o,l5o,i5o,ry,d5o,Sce,c5o,f5o,m5o,st,ty,g5o,Rce,h5o,p5o,Di,u5o,Pce,_5o,b5o,eD,v5o,F5o,T5o,k_,M5o,Ye,ay,E5o,Bce,C5o,w5o,Ra,A5o,Ice,L5o,y5o,Nce,x5o,$5o,qce,k5o,S5o,R5o,G,S_,jce,P5o,B5o,oD,I5o,N5o,q5o,R_,Dce,j5o,D5o,rD,G5o,O5o,V5o,P_,Gce,X5o,z5o,tD,W5o,Q5o,H5o,B_,Oce,U5o,J5o,aD,Y5o,K5o,Z5o,I_,Vce,e0o,o0o,nD,r0o,t0o,a0o,N_,Xce,n0o,s0o,sD,l0o,i0o,d0o,q_,zce,c0o,f0o,lD,m0o,g0o,h0o,j_,Wce,p0o,u0o,iD,_0o,b0o,v0o,D_,Qce,F0o,T0o,dD,M0o,E0o,C0o,G_,Hce,w0o,A0o,cD,L0o,y0o,x0o,O_,Uce,$0o,k0o,fD,S0o,R0o,P0o,V_,Jce,B0o,I0o,mD,N0o,q0o,j0o,X_,Yce,D0o,G0o,gD,O0o,V0o,X0o,z_,Kce,z0o,W0o,hD,Q0o,H0o,U0o,W_,Zce,J0o,Y0o,pD,K0o,Z0o,ewo,Q_,efe,owo,rwo,uD,two,awo,nwo,H_,ofe,swo,lwo,_D,iwo,dwo,cwo,U_,rfe,fwo,mwo,bD,gwo,hwo,pwo,J_,tfe,uwo,_wo,vD,bwo,vwo,Fwo,Y_,afe,Two,Mwo,FD,Ewo,Cwo,wwo,K_,nfe,Awo,Lwo,TD,ywo,xwo,$wo,Z_,sfe,kwo,Swo,MD,Rwo,Pwo,Bwo,e4,lfe,Iwo,Nwo,ED,qwo,jwo,Dwo,o4,ife,Gwo,Owo,CD,Vwo,Xwo,zwo,r4,dfe,Wwo,Qwo,wD,Hwo,Uwo,Jwo,t4,cfe,Ywo,Kwo,AD,Zwo,eAo,oAo,a4,ffe,rAo,tAo,LD,aAo,nAo,sAo,n4,mfe,lAo,iAo,yD,dAo,cAo,fAo,s4,gfe,mAo,gAo,xD,hAo,pAo,uAo,l4,hfe,_Ao,bAo,$D,vAo,FAo,TAo,i4,pfe,MAo,EAo,kD,CAo,wAo,AAo,d4,ufe,LAo,yAo,SD,xAo,$Ao,kAo,c4,_fe,SAo,RAo,RD,PAo,BAo,IAo,f4,bfe,NAo,qAo,PD,jAo,DAo,GAo,m4,vfe,OAo,VAo,BD,XAo,zAo,WAo,g4,Ffe,QAo,HAo,ID,UAo,JAo,YAo,h4,Tfe,KAo,ZAo,ND,e6o,o6o,r6o,p4,Mfe,t6o,a6o,qD,n6o,s6o,l6o,u4,Efe,i6o,d6o,jD,c6o,f6o,m6o,_4,Cfe,g6o,h6o,DD,p6o,u6o,_6o,b4,wfe,b6o,v6o,GD,F6o,T6o,M6o,v4,Afe,E6o,C6o,OD,w6o,A6o,L6o,F4,Lfe,y6o,x6o,VD,$6o,k6o,S6o,T4,R6o,yfe,P6o,B6o,xfe,I6o,N6o,M4,SGe,Gi,E4,$fe,ny,q6o,kfe,j6o,RGe,ko,sy,D6o,Oi,G6o,XD,O6o,V6o,zD,X6o,z6o,W6o,ly,Q6o,Sfe,H6o,U6o,J6o,lt,iy,Y6o,Rfe,K6o,Z6o,Vi,eLo,Pfe,oLo,rLo,WD,tLo,aLo,nLo,C4,sLo,Ke,dy,lLo,Bfe,iLo,dLo,Pa,cLo,Ife,fLo,mLo,Nfe,gLo,hLo,qfe,pLo,uLo,_Lo,X,w4,jfe,bLo,vLo,QD,FLo,TLo,MLo,A4,Dfe,ELo,CLo,HD,wLo,ALo,LLo,L4,Gfe,yLo,xLo,UD,$Lo,kLo,SLo,y4,Ofe,RLo,PLo,JD,BLo,ILo,NLo,x4,Vfe,qLo,jLo,YD,DLo,GLo,OLo,$4,Xfe,VLo,XLo,KD,zLo,WLo,QLo,k4,zfe,HLo,ULo,ZD,JLo,YLo,KLo,S4,Wfe,ZLo,eyo,eG,oyo,ryo,tyo,R4,Qfe,ayo,nyo,oG,syo,lyo,iyo,P4,Hfe,dyo,cyo,rG,fyo,myo,gyo,B4,Ufe,hyo,pyo,tG,uyo,_yo,byo,I4,Jfe,vyo,Fyo,aG,Tyo,Myo,Eyo,N4,Yfe,Cyo,wyo,nG,Ayo,Lyo,yyo,q4,Kfe,xyo,$yo,sG,kyo,Syo,Ryo,j4,Zfe,Pyo,Byo,lG,Iyo,Nyo,qyo,D4,eme,jyo,Dyo,iG,Gyo,Oyo,Vyo,G4,ome,Xyo,zyo,dG,Wyo,Qyo,Hyo,O4,rme,Uyo,Jyo,cG,Yyo,Kyo,Zyo,V4,tme,e8o,o8o,fG,r8o,t8o,a8o,X4,ame,n8o,s8o,mG,l8o,i8o,d8o,z4,nme,c8o,f8o,gG,m8o,g8o,h8o,W4,sme,p8o,u8o,hG,_8o,b8o,v8o,Q4,lme,F8o,T8o,pG,M8o,E8o,C8o,H4,ime,w8o,A8o,uG,L8o,y8o,x8o,U4,dme,$8o,k8o,_G,S8o,R8o,P8o,J4,cme,B8o,I8o,bG,N8o,q8o,j8o,Y4,fme,D8o,G8o,vG,O8o,V8o,X8o,K4,mme,z8o,W8o,FG,Q8o,H8o,U8o,Z4,gme,J8o,Y8o,TG,K8o,Z8o,e9o,e1,hme,o9o,r9o,MG,t9o,a9o,n9o,o1,pme,s9o,l9o,EG,i9o,d9o,c9o,r1,ume,f9o,m9o,CG,g9o,h9o,p9o,t1,_me,u9o,_9o,wG,b9o,v9o,F9o,a1,bme,T9o,M9o,AG,E9o,C9o,w9o,n1,vme,A9o,L9o,LG,y9o,x9o,$9o,s1,Fme,k9o,S9o,yG,R9o,P9o,B9o,l1,Tme,I9o,N9o,xG,q9o,j9o,D9o,i1,Mme,G9o,O9o,$G,V9o,X9o,z9o,d1,Eme,W9o,Q9o,kG,H9o,U9o,J9o,c1,Y9o,Cme,K9o,Z9o,wme,exo,oxo,f1,PGe,Xi,m1,Ame,cy,rxo,Lme,txo,BGe,So,fy,axo,zi,nxo,SG,sxo,lxo,RG,ixo,dxo,cxo,my,fxo,yme,mxo,gxo,hxo,it,gy,pxo,xme,uxo,_xo,Wi,bxo,$me,vxo,Fxo,PG,Txo,Mxo,Exo,g1,Cxo,Ze,hy,wxo,kme,Axo,Lxo,Ba,yxo,Sme,xxo,$xo,Rme,kxo,Sxo,Pme,Rxo,Pxo,Bxo,Q,h1,Bme,Ixo,Nxo,BG,qxo,jxo,Dxo,p1,Ime,Gxo,Oxo,IG,Vxo,Xxo,zxo,u1,Nme,Wxo,Qxo,NG,Hxo,Uxo,Jxo,_1,qme,Yxo,Kxo,qG,Zxo,e$o,o$o,b1,jme,r$o,t$o,jG,a$o,n$o,s$o,v1,Dme,l$o,i$o,DG,d$o,c$o,f$o,F1,Gme,m$o,g$o,GG,h$o,p$o,u$o,T1,Ome,_$o,b$o,OG,v$o,F$o,T$o,M1,Vme,M$o,E$o,VG,C$o,w$o,A$o,E1,Xme,L$o,y$o,XG,x$o,$$o,k$o,C1,zme,S$o,R$o,zG,P$o,B$o,I$o,w1,Wme,N$o,q$o,WG,j$o,D$o,G$o,A1,Qme,O$o,V$o,QG,X$o,z$o,W$o,L1,Hme,Q$o,H$o,HG,U$o,J$o,Y$o,y1,Ume,K$o,Z$o,UG,eko,oko,rko,x1,Jme,tko,ako,JG,nko,sko,lko,$1,Yme,iko,dko,YG,cko,fko,mko,k1,Kme,gko,hko,KG,pko,uko,_ko,S1,Zme,bko,vko,ZG,Fko,Tko,Mko,R1,ege,Eko,Cko,eO,wko,Ako,Lko,P1,oge,yko,xko,oO,$ko,kko,Sko,B1,rge,Rko,Pko,rO,Bko,Iko,Nko,I1,tge,qko,jko,tO,Dko,Gko,Oko,N1,age,Vko,Xko,aO,zko,Wko,Qko,q1,nge,Hko,Uko,nO,Jko,Yko,Kko,j1,sge,Zko,eSo,sO,oSo,rSo,tSo,D1,lge,aSo,nSo,lO,sSo,lSo,iSo,G1,ige,dSo,cSo,iO,fSo,mSo,gSo,O1,dge,hSo,pSo,dO,uSo,_So,bSo,V1,cge,vSo,FSo,cO,TSo,MSo,ESo,X1,fge,CSo,wSo,fO,ASo,LSo,ySo,z1,mge,xSo,$So,gge,kSo,SSo,RSo,W1,hge,PSo,BSo,mO,ISo,NSo,qSo,Q1,pge,jSo,DSo,gO,GSo,OSo,VSo,H1,uge,XSo,zSo,hO,WSo,QSo,HSo,U1,_ge,USo,JSo,pO,YSo,KSo,ZSo,J1,eRo,bge,oRo,rRo,vge,tRo,aRo,Y1,IGe,Qi,K1,Fge,py,nRo,Tge,sRo,NGe,Ro,uy,lRo,Hi,iRo,uO,dRo,cRo,_O,fRo,mRo,gRo,_y,hRo,Mge,pRo,uRo,_Ro,dt,by,bRo,Ege,vRo,FRo,Ui,TRo,Cge,MRo,ERo,bO,CRo,wRo,ARo,Z1,LRo,eo,vy,yRo,wge,xRo,$Ro,Ia,kRo,Age,SRo,RRo,Lge,PRo,BRo,yge,IRo,NRo,qRo,pe,e2,xge,jRo,DRo,vO,GRo,ORo,VRo,o2,$ge,XRo,zRo,FO,WRo,QRo,HRo,r2,kge,URo,JRo,TO,YRo,KRo,ZRo,t2,Sge,ePo,oPo,MO,rPo,tPo,aPo,a2,Rge,nPo,sPo,EO,lPo,iPo,dPo,n2,Pge,cPo,fPo,CO,mPo,gPo,hPo,s2,Bge,pPo,uPo,wO,_Po,bPo,vPo,l2,Ige,FPo,TPo,AO,MPo,EPo,CPo,i2,Nge,wPo,APo,LO,LPo,yPo,xPo,d2,qge,$Po,kPo,yO,SPo,RPo,PPo,c2,jge,BPo,IPo,xO,NPo,qPo,jPo,f2,Dge,DPo,GPo,$O,OPo,VPo,XPo,m2,Gge,zPo,WPo,kO,QPo,HPo,UPo,g2,Oge,JPo,YPo,SO,KPo,ZPo,eBo,h2,Vge,oBo,rBo,RO,tBo,aBo,nBo,p2,Xge,sBo,lBo,PO,iBo,dBo,cBo,u2,zge,fBo,mBo,BO,gBo,hBo,pBo,_2,uBo,Wge,_Bo,bBo,Qge,vBo,FBo,b2,qGe,Ji,v2,Hge,Fy,TBo,Uge,MBo,jGe,Po,Ty,EBo,Yi,CBo,IO,wBo,ABo,NO,LBo,yBo,xBo,My,$Bo,Jge,kBo,SBo,RBo,ct,Ey,PBo,Yge,BBo,IBo,Ki,NBo,Kge,qBo,jBo,qO,DBo,GBo,OBo,F2,VBo,oo,Cy,XBo,Zge,zBo,WBo,Na,QBo,ehe,HBo,UBo,ohe,JBo,YBo,rhe,KBo,ZBo,eIo,N,T2,the,oIo,rIo,jO,tIo,aIo,nIo,M2,ahe,sIo,lIo,DO,iIo,dIo,cIo,E2,nhe,fIo,mIo,GO,gIo,hIo,pIo,C2,she,uIo,_Io,OO,bIo,vIo,FIo,w2,lhe,TIo,MIo,VO,EIo,CIo,wIo,A2,ihe,AIo,LIo,XO,yIo,xIo,$Io,L2,dhe,kIo,SIo,zO,RIo,PIo,BIo,y2,che,IIo,NIo,WO,qIo,jIo,DIo,x2,fhe,GIo,OIo,QO,VIo,XIo,zIo,$2,mhe,WIo,QIo,HO,HIo,UIo,JIo,k2,ghe,YIo,KIo,UO,ZIo,eNo,oNo,S2,hhe,rNo,tNo,JO,aNo,nNo,sNo,R2,phe,lNo,iNo,YO,dNo,cNo,fNo,P2,uhe,mNo,gNo,KO,hNo,pNo,uNo,B2,_he,_No,bNo,ZO,vNo,FNo,TNo,I2,bhe,MNo,ENo,eV,CNo,wNo,ANo,N2,vhe,LNo,yNo,oV,xNo,$No,kNo,q2,Fhe,SNo,RNo,rV,PNo,BNo,INo,j2,The,NNo,qNo,tV,jNo,DNo,GNo,D2,Mhe,ONo,VNo,aV,XNo,zNo,WNo,G2,Ehe,QNo,HNo,nV,UNo,JNo,YNo,O2,Che,KNo,ZNo,sV,eqo,oqo,rqo,V2,whe,tqo,aqo,lV,nqo,sqo,lqo,X2,Ahe,iqo,dqo,iV,cqo,fqo,mqo,z2,Lhe,gqo,hqo,dV,pqo,uqo,_qo,W2,yhe,bqo,vqo,cV,Fqo,Tqo,Mqo,Q2,xhe,Eqo,Cqo,fV,wqo,Aqo,Lqo,H2,$he,yqo,xqo,mV,$qo,kqo,Sqo,U2,khe,Rqo,Pqo,gV,Bqo,Iqo,Nqo,J2,She,qqo,jqo,hV,Dqo,Gqo,Oqo,Y2,Rhe,Vqo,Xqo,pV,zqo,Wqo,Qqo,K2,Phe,Hqo,Uqo,uV,Jqo,Yqo,Kqo,Z2,Bhe,Zqo,ejo,_V,ojo,rjo,tjo,eb,Ihe,ajo,njo,bV,sjo,ljo,ijo,ob,Nhe,djo,cjo,vV,fjo,mjo,gjo,rb,qhe,hjo,pjo,FV,ujo,_jo,bjo,tb,jhe,vjo,Fjo,TV,Tjo,Mjo,Ejo,ab,Dhe,Cjo,wjo,MV,Ajo,Ljo,yjo,nb,Ghe,xjo,$jo,EV,kjo,Sjo,Rjo,sb,Ohe,Pjo,Bjo,CV,Ijo,Njo,qjo,lb,Vhe,jjo,Djo,wV,Gjo,Ojo,Vjo,ib,Xhe,Xjo,zjo,AV,Wjo,Qjo,Hjo,db,zhe,Ujo,Jjo,LV,Yjo,Kjo,Zjo,cb,Whe,eDo,oDo,yV,rDo,tDo,aDo,fb,Qhe,nDo,sDo,xV,lDo,iDo,dDo,mb,Hhe,cDo,fDo,$V,mDo,gDo,hDo,gb,Uhe,pDo,uDo,kV,_Do,bDo,vDo,hb,Jhe,FDo,TDo,SV,MDo,EDo,CDo,pb,wDo,Yhe,ADo,LDo,Khe,yDo,xDo,ub,DGe,Zi,_b,Zhe,wy,$Do,epe,kDo,GGe,Bo,Ay,SDo,ed,RDo,RV,PDo,BDo,PV,IDo,NDo,qDo,Ly,jDo,ope,DDo,GDo,ODo,ft,yy,VDo,rpe,XDo,zDo,od,WDo,tpe,QDo,HDo,BV,UDo,JDo,YDo,bb,KDo,ro,xy,ZDo,ape,eGo,oGo,qa,rGo,npe,tGo,aGo,spe,nGo,sGo,lpe,lGo,iGo,dGo,Z,vb,ipe,cGo,fGo,IV,mGo,gGo,hGo,Fb,dpe,pGo,uGo,NV,_Go,bGo,vGo,Tb,cpe,FGo,TGo,qV,MGo,EGo,CGo,Mb,fpe,wGo,AGo,jV,LGo,yGo,xGo,Eb,mpe,$Go,kGo,DV,SGo,RGo,PGo,Cb,gpe,BGo,IGo,GV,NGo,qGo,jGo,wb,hpe,DGo,GGo,OV,OGo,VGo,XGo,Ab,ppe,zGo,WGo,VV,QGo,HGo,UGo,Lb,upe,JGo,YGo,XV,KGo,ZGo,eOo,yb,_pe,oOo,rOo,zV,tOo,aOo,nOo,xb,bpe,sOo,lOo,WV,iOo,dOo,cOo,$b,vpe,fOo,mOo,QV,gOo,hOo,pOo,kb,Fpe,uOo,_Oo,HV,bOo,vOo,FOo,Sb,Tpe,TOo,MOo,UV,EOo,COo,wOo,Rb,Mpe,AOo,LOo,JV,yOo,xOo,$Oo,Pb,Epe,kOo,SOo,YV,ROo,POo,BOo,Bb,Cpe,IOo,NOo,KV,qOo,jOo,DOo,Ib,wpe,GOo,OOo,ZV,VOo,XOo,zOo,Nb,Ape,WOo,QOo,eX,HOo,UOo,JOo,qb,Lpe,YOo,KOo,oX,ZOo,eVo,oVo,jb,ype,rVo,tVo,rX,aVo,nVo,sVo,Db,xpe,lVo,iVo,tX,dVo,cVo,fVo,Gb,$pe,mVo,gVo,aX,hVo,pVo,uVo,Ob,kpe,_Vo,bVo,nX,vVo,FVo,TVo,Vb,Spe,MVo,EVo,sX,CVo,wVo,AVo,Xb,Rpe,LVo,yVo,lX,xVo,$Vo,kVo,zb,Ppe,SVo,RVo,iX,PVo,BVo,IVo,Wb,Bpe,NVo,qVo,dX,jVo,DVo,GVo,Qb,Ipe,OVo,VVo,cX,XVo,zVo,WVo,Hb,QVo,Npe,HVo,UVo,qpe,JVo,YVo,Ub,OGe,rd,Jb,jpe,$y,KVo,Dpe,ZVo,VGe,Io,ky,eXo,td,oXo,fX,rXo,tXo,mX,aXo,nXo,sXo,Sy,lXo,Gpe,iXo,dXo,cXo,mt,Ry,fXo,Ope,mXo,gXo,ad,hXo,Vpe,pXo,uXo,gX,_Xo,bXo,vXo,Yb,FXo,to,Py,TXo,Xpe,MXo,EXo,ja,CXo,zpe,wXo,AXo,Wpe,LXo,yXo,Qpe,xXo,$Xo,kXo,Zr,Kb,Hpe,SXo,RXo,hX,PXo,BXo,IXo,Zb,Upe,NXo,qXo,pX,jXo,DXo,GXo,ev,Jpe,OXo,VXo,uX,XXo,zXo,WXo,ov,Ype,QXo,HXo,_X,UXo,JXo,YXo,rv,Kpe,KXo,ZXo,bX,ezo,ozo,rzo,tv,tzo,Zpe,azo,nzo,eue,szo,lzo,av,XGe,nd,nv,oue,By,izo,rue,dzo,zGe,No,Iy,czo,sd,fzo,vX,mzo,gzo,FX,hzo,pzo,uzo,Ny,_zo,tue,bzo,vzo,Fzo,gt,qy,Tzo,aue,Mzo,Ezo,ld,Czo,nue,wzo,Azo,TX,Lzo,yzo,xzo,sv,$zo,ao,jy,kzo,sue,Szo,Rzo,Da,Pzo,lue,Bzo,Izo,iue,Nzo,qzo,due,jzo,Dzo,Gzo,H,lv,cue,Ozo,Vzo,MX,Xzo,zzo,Wzo,iv,fue,Qzo,Hzo,EX,Uzo,Jzo,Yzo,dv,mue,Kzo,Zzo,CX,eWo,oWo,rWo,cv,gue,tWo,aWo,wX,nWo,sWo,lWo,fv,hue,iWo,dWo,AX,cWo,fWo,mWo,mv,pue,gWo,hWo,LX,pWo,uWo,_Wo,gv,uue,bWo,vWo,yX,FWo,TWo,MWo,hv,_ue,EWo,CWo,xX,wWo,AWo,LWo,pv,bue,yWo,xWo,$X,$Wo,kWo,SWo,uv,vue,RWo,PWo,kX,BWo,IWo,NWo,_v,Fue,qWo,jWo,SX,DWo,GWo,OWo,bv,Tue,VWo,XWo,RX,zWo,WWo,QWo,vv,Mue,HWo,UWo,PX,JWo,YWo,KWo,Fv,Eue,ZWo,eQo,BX,oQo,rQo,tQo,Tv,Cue,aQo,nQo,IX,sQo,lQo,iQo,Mv,wue,dQo,cQo,NX,fQo,mQo,gQo,Ev,Aue,hQo,pQo,qX,uQo,_Qo,bQo,Cv,Lue,vQo,FQo,jX,TQo,MQo,EQo,wv,yue,CQo,wQo,DX,AQo,LQo,yQo,Av,xue,xQo,$Qo,GX,kQo,SQo,RQo,Lv,$ue,PQo,BQo,OX,IQo,NQo,qQo,yv,kue,jQo,DQo,VX,GQo,OQo,VQo,xv,Sue,XQo,zQo,XX,WQo,QQo,HQo,$v,Rue,UQo,JQo,zX,YQo,KQo,ZQo,kv,Pue,eHo,oHo,WX,rHo,tHo,aHo,Sv,Bue,nHo,sHo,QX,lHo,iHo,dHo,Rv,Iue,cHo,fHo,HX,mHo,gHo,hHo,Pv,Nue,pHo,uHo,UX,_Ho,bHo,vHo,Bv,que,FHo,THo,JX,MHo,EHo,CHo,Iv,jue,wHo,AHo,YX,LHo,yHo,xHo,Nv,Due,$Ho,kHo,KX,SHo,RHo,PHo,qv,Gue,BHo,IHo,ZX,NHo,qHo,jHo,jv,Oue,DHo,GHo,ez,OHo,VHo,XHo,Dv,Vue,zHo,WHo,oz,QHo,HHo,UHo,Gv,Xue,JHo,YHo,rz,KHo,ZHo,eUo,Ov,oUo,zue,rUo,tUo,Wue,aUo,nUo,Vv,WGe,id,Xv,Que,Dy,sUo,Hue,lUo,QGe,qo,Gy,iUo,dd,dUo,tz,cUo,fUo,az,mUo,gUo,hUo,Oy,pUo,Uue,uUo,_Uo,bUo,ht,Vy,vUo,Jue,FUo,TUo,cd,MUo,Yue,EUo,CUo,nz,wUo,AUo,LUo,zv,yUo,no,Xy,xUo,Kue,$Uo,kUo,Ga,SUo,Zue,RUo,PUo,e_e,BUo,IUo,o_e,NUo,qUo,jUo,V,Wv,r_e,DUo,GUo,sz,OUo,VUo,XUo,Qv,t_e,zUo,WUo,lz,QUo,HUo,UUo,Hv,a_e,JUo,YUo,iz,KUo,ZUo,eJo,Uv,n_e,oJo,rJo,dz,tJo,aJo,nJo,Jv,s_e,sJo,lJo,cz,iJo,dJo,cJo,Yv,l_e,fJo,mJo,fz,gJo,hJo,pJo,Kv,i_e,uJo,_Jo,mz,bJo,vJo,FJo,Zv,d_e,TJo,MJo,gz,EJo,CJo,wJo,e3,c_e,AJo,LJo,hz,yJo,xJo,$Jo,o3,f_e,kJo,SJo,pz,RJo,PJo,BJo,r3,m_e,IJo,NJo,uz,qJo,jJo,DJo,t3,g_e,GJo,OJo,_z,VJo,XJo,zJo,a3,h_e,WJo,QJo,bz,HJo,UJo,JJo,n3,p_e,YJo,KJo,vz,ZJo,eYo,oYo,s3,u_e,rYo,tYo,Fz,aYo,nYo,sYo,l3,__e,lYo,iYo,Tz,dYo,cYo,fYo,i3,b_e,mYo,gYo,Mz,hYo,pYo,uYo,d3,v_e,_Yo,bYo,Ez,vYo,FYo,TYo,c3,F_e,MYo,EYo,Cz,CYo,wYo,AYo,f3,T_e,LYo,yYo,wz,xYo,$Yo,kYo,m3,M_e,SYo,RYo,Az,PYo,BYo,IYo,g3,E_e,NYo,qYo,Lz,jYo,DYo,GYo,h3,C_e,OYo,VYo,yz,XYo,zYo,WYo,p3,w_e,QYo,HYo,xz,UYo,JYo,YYo,u3,A_e,KYo,ZYo,$z,eKo,oKo,rKo,_3,L_e,tKo,aKo,kz,nKo,sKo,lKo,b3,y_e,iKo,dKo,Sz,cKo,fKo,mKo,v3,x_e,gKo,hKo,Rz,pKo,uKo,_Ko,F3,$_e,bKo,vKo,Pz,FKo,TKo,MKo,T3,k_e,EKo,CKo,Bz,wKo,AKo,LKo,M3,S_e,yKo,xKo,Iz,$Ko,kKo,SKo,E3,R_e,RKo,PKo,Nz,BKo,IKo,NKo,C3,P_e,qKo,jKo,qz,DKo,GKo,OKo,w3,B_e,VKo,XKo,jz,zKo,WKo,QKo,A3,I_e,HKo,UKo,Dz,JKo,YKo,KKo,L3,N_e,ZKo,eZo,Gz,oZo,rZo,tZo,y3,q_e,aZo,nZo,Oz,sZo,lZo,iZo,x3,j_e,dZo,cZo,Vz,fZo,mZo,gZo,$3,D_e,hZo,pZo,Xz,uZo,_Zo,bZo,k3,G_e,vZo,FZo,zz,TZo,MZo,EZo,S3,CZo,O_e,wZo,AZo,V_e,LZo,yZo,R3,HGe,fd,P3,X_e,zy,xZo,z_e,$Zo,UGe,jo,Wy,kZo,md,SZo,Wz,RZo,PZo,Qz,BZo,IZo,NZo,Qy,qZo,W_e,jZo,DZo,GZo,pt,Hy,OZo,Q_e,VZo,XZo,gd,zZo,H_e,WZo,QZo,Hz,HZo,UZo,JZo,B3,YZo,so,Uy,KZo,U_e,ZZo,eer,Oa,oer,J_e,rer,ter,Y_e,aer,ner,K_e,ser,ler,ier,Z_e,I3,e4e,der,cer,Uz,fer,mer,ger,N3,her,o4e,per,uer,r4e,_er,ber,q3,JGe,hd,j3,t4e,Jy,ver,a4e,Fer,YGe,Do,Yy,Ter,pd,Mer,Jz,Eer,Cer,Yz,wer,Aer,Ler,Ky,yer,n4e,xer,$er,ker,ut,Zy,Ser,s4e,Rer,Per,ud,Ber,l4e,Ier,Ner,Kz,qer,jer,Der,D3,Ger,lo,e8,Oer,i4e,Ver,Xer,Va,zer,d4e,Wer,Qer,c4e,Her,Uer,f4e,Jer,Yer,Ker,Fe,G3,m4e,Zer,eor,Zz,oor,ror,tor,O3,g4e,aor,nor,eW,sor,lor,ior,V3,h4e,dor,cor,oW,mor,gor,hor,X3,p4e,por,uor,rW,_or,bor,vor,Vs,u4e,For,Tor,tW,Mor,Eor,aW,Cor,wor,Aor,z3,_4e,Lor,yor,nW,xor,$or,kor,Xs,b4e,Sor,Ror,sW,Por,Bor,lW,Ior,Nor,qor,_t,v4e,jor,Dor,iW,Gor,Oor,dW,Vor,Xor,cW,zor,Wor,Qor,W3,F4e,Hor,Uor,fW,Jor,Yor,Kor,Q3,T4e,Zor,err,mW,orr,rrr,trr,H3,M4e,arr,nrr,gW,srr,lrr,irr,U3,E4e,drr,crr,hW,frr,mrr,grr,J3,C4e,hrr,prr,pW,urr,_rr,brr,Y3,w4e,vrr,Frr,uW,Trr,Mrr,Err,K3,A4e,Crr,wrr,_W,Arr,Lrr,yrr,Z3,xrr,L4e,$rr,krr,y4e,Srr,Rrr,eF,KGe,_d,oF,x4e,o8,Prr,$4e,Brr,ZGe,Go,r8,Irr,bd,Nrr,bW,qrr,jrr,vW,Drr,Grr,Orr,t8,Vrr,k4e,Xrr,zrr,Wrr,bt,a8,Qrr,S4e,Hrr,Urr,vd,Jrr,R4e,Yrr,Krr,FW,Zrr,etr,otr,rF,rtr,io,n8,ttr,P4e,atr,ntr,Xa,str,B4e,ltr,itr,I4e,dtr,ctr,N4e,ftr,mtr,gtr,q4e,tF,j4e,htr,ptr,TW,utr,_tr,btr,aF,vtr,D4e,Ftr,Ttr,G4e,Mtr,Etr,nF,eOe,Fd,sF,O4e,s8,Ctr,V4e,wtr,oOe,Oo,l8,Atr,Td,Ltr,MW,ytr,xtr,EW,$tr,ktr,Str,i8,Rtr,X4e,Ptr,Btr,Itr,vt,d8,Ntr,z4e,qtr,jtr,Md,Dtr,W4e,Gtr,Otr,CW,Vtr,Xtr,ztr,lF,Wtr,co,c8,Qtr,Q4e,Htr,Utr,za,Jtr,H4e,Ytr,Ktr,U4e,Ztr,ear,J4e,oar,rar,tar,Y4e,iF,K4e,aar,nar,wW,sar,lar,iar,dF,dar,Z4e,car,far,e1e,mar,gar,cF,rOe,Ed,fF,o1e,f8,har,r1e,par,tOe,Vo,m8,uar,Cd,_ar,AW,bar,Far,LW,Tar,Mar,Ear,g8,Car,t1e,war,Aar,Lar,Ft,h8,yar,a1e,xar,$ar,wd,kar,n1e,Sar,Rar,yW,Par,Bar,Iar,mF,Nar,fo,p8,qar,s1e,jar,Dar,Wa,Gar,l1e,Oar,Var,i1e,Xar,zar,d1e,War,Qar,Har,Pe,gF,c1e,Uar,Jar,xW,Yar,Kar,Zar,hF,f1e,enr,onr,$W,rnr,tnr,anr,pF,m1e,nnr,snr,kW,lnr,inr,dnr,uF,g1e,cnr,fnr,SW,mnr,gnr,hnr,_F,h1e,pnr,unr,RW,_nr,bnr,vnr,bF,p1e,Fnr,Tnr,PW,Mnr,Enr,Cnr,vF,u1e,wnr,Anr,BW,Lnr,ynr,xnr,FF,_1e,$nr,knr,IW,Snr,Rnr,Pnr,TF,b1e,Bnr,Inr,NW,Nnr,qnr,jnr,MF,Dnr,v1e,Gnr,Onr,F1e,Vnr,Xnr,EF,aOe,Ad,CF,T1e,u8,znr,M1e,Wnr,nOe,Xo,_8,Qnr,Ld,Hnr,qW,Unr,Jnr,jW,Ynr,Knr,Znr,b8,esr,E1e,osr,rsr,tsr,Tt,v8,asr,C1e,nsr,ssr,yd,lsr,w1e,isr,dsr,DW,csr,fsr,msr,wF,gsr,mo,F8,hsr,A1e,psr,usr,Qa,_sr,L1e,bsr,vsr,y1e,Fsr,Tsr,x1e,Msr,Esr,Csr,et,AF,$1e,wsr,Asr,GW,Lsr,ysr,xsr,LF,k1e,$sr,ksr,OW,Ssr,Rsr,Psr,yF,S1e,Bsr,Isr,VW,Nsr,qsr,jsr,xF,R1e,Dsr,Gsr,XW,Osr,Vsr,Xsr,$F,P1e,zsr,Wsr,zW,Qsr,Hsr,Usr,kF,Jsr,B1e,Ysr,Ksr,I1e,Zsr,elr,SF,sOe,xd,RF,N1e,T8,olr,q1e,rlr,lOe,zo,M8,tlr,$d,alr,WW,nlr,slr,QW,llr,ilr,dlr,E8,clr,j1e,flr,mlr,glr,Mt,C8,hlr,D1e,plr,ulr,kd,_lr,G1e,blr,vlr,HW,Flr,Tlr,Mlr,PF,Elr,go,w8,Clr,O1e,wlr,Alr,Ha,Llr,V1e,ylr,xlr,X1e,$lr,klr,z1e,Slr,Rlr,Plr,Le,BF,W1e,Blr,Ilr,UW,Nlr,qlr,jlr,IF,Q1e,Dlr,Glr,JW,Olr,Vlr,Xlr,NF,H1e,zlr,Wlr,YW,Qlr,Hlr,Ulr,qF,U1e,Jlr,Ylr,KW,Klr,Zlr,eir,jF,J1e,oir,rir,ZW,tir,air,nir,DF,Y1e,sir,lir,eQ,iir,dir,cir,GF,K1e,fir,mir,oQ,gir,hir,pir,OF,Z1e,uir,_ir,rQ,bir,vir,Fir,VF,e2e,Tir,Mir,tQ,Eir,Cir,wir,XF,o2e,Air,Lir,aQ,yir,xir,$ir,zF,kir,r2e,Sir,Rir,t2e,Pir,Bir,WF,iOe,Sd,QF,a2e,A8,Iir,n2e,Nir,dOe,Wo,L8,qir,Rd,jir,nQ,Dir,Gir,sQ,Oir,Vir,Xir,y8,zir,s2e,Wir,Qir,Hir,Et,x8,Uir,l2e,Jir,Yir,Pd,Kir,i2e,Zir,edr,lQ,odr,rdr,tdr,HF,adr,ho,$8,ndr,d2e,sdr,ldr,Ua,idr,c2e,ddr,cdr,f2e,fdr,mdr,m2e,gdr,hdr,pdr,k8,UF,g2e,udr,_dr,iQ,bdr,vdr,Fdr,JF,h2e,Tdr,Mdr,dQ,Edr,Cdr,wdr,YF,Adr,p2e,Ldr,ydr,u2e,xdr,$dr,KF,cOe,Bd,ZF,_2e,S8,kdr,b2e,Sdr,fOe,Qo,R8,Rdr,Id,Pdr,cQ,Bdr,Idr,fQ,Ndr,qdr,jdr,P8,Ddr,v2e,Gdr,Odr,Vdr,Ct,B8,Xdr,F2e,zdr,Wdr,Nd,Qdr,T2e,Hdr,Udr,mQ,Jdr,Ydr,Kdr,eT,Zdr,po,I8,ecr,M2e,ocr,rcr,Ja,tcr,E2e,acr,ncr,C2e,scr,lcr,w2e,icr,dcr,ccr,ot,oT,A2e,fcr,mcr,gQ,gcr,hcr,pcr,rT,L2e,ucr,_cr,hQ,bcr,vcr,Fcr,tT,y2e,Tcr,Mcr,pQ,Ecr,Ccr,wcr,aT,x2e,Acr,Lcr,uQ,ycr,xcr,$cr,nT,$2e,kcr,Scr,_Q,Rcr,Pcr,Bcr,sT,Icr,k2e,Ncr,qcr,S2e,jcr,Dcr,lT,mOe,qd,iT,R2e,N8,Gcr,P2e,Ocr,gOe,Ho,q8,Vcr,jd,Xcr,bQ,zcr,Wcr,vQ,Qcr,Hcr,Ucr,j8,Jcr,B2e,Ycr,Kcr,Zcr,wt,D8,efr,I2e,ofr,rfr,Dd,tfr,N2e,afr,nfr,FQ,sfr,lfr,ifr,dT,dfr,uo,G8,cfr,q2e,ffr,mfr,Ya,gfr,j2e,hfr,pfr,D2e,ufr,_fr,G2e,bfr,vfr,Ffr,Gd,cT,O2e,Tfr,Mfr,TQ,Efr,Cfr,wfr,fT,V2e,Afr,Lfr,MQ,yfr,xfr,$fr,mT,X2e,kfr,Sfr,EQ,Rfr,Pfr,Bfr,gT,Ifr,z2e,Nfr,qfr,W2e,jfr,Dfr,hT,hOe,Od,pT,Q2e,O8,Gfr,H2e,Ofr,pOe,Uo,V8,Vfr,Vd,Xfr,CQ,zfr,Wfr,wQ,Qfr,Hfr,Ufr,X8,Jfr,U2e,Yfr,Kfr,Zfr,At,z8,emr,J2e,omr,rmr,Xd,tmr,Y2e,amr,nmr,AQ,smr,lmr,imr,uT,dmr,_o,W8,cmr,K2e,fmr,mmr,Ka,gmr,Z2e,hmr,pmr,ebe,umr,_mr,obe,bmr,vmr,Fmr,Q8,_T,rbe,Tmr,Mmr,LQ,Emr,Cmr,wmr,bT,tbe,Amr,Lmr,yQ,ymr,xmr,$mr,vT,kmr,abe,Smr,Rmr,nbe,Pmr,Bmr,FT,uOe,zd,TT,sbe,H8,Imr,lbe,Nmr,_Oe,Jo,U8,qmr,Wd,jmr,xQ,Dmr,Gmr,$Q,Omr,Vmr,Xmr,J8,zmr,ibe,Wmr,Qmr,Hmr,Lt,Y8,Umr,dbe,Jmr,Ymr,Qd,Kmr,cbe,Zmr,egr,kQ,ogr,rgr,tgr,MT,agr,bo,K8,ngr,fbe,sgr,lgr,Za,igr,mbe,dgr,cgr,gbe,fgr,mgr,hbe,ggr,hgr,pgr,pbe,ET,ube,ugr,_gr,SQ,bgr,vgr,Fgr,CT,Tgr,_be,Mgr,Egr,bbe,Cgr,wgr,wT,bOe,Hd,AT,vbe,Z8,Agr,Fbe,Lgr,vOe,Yo,e9,ygr,Ud,xgr,RQ,$gr,kgr,PQ,Sgr,Rgr,Pgr,o9,Bgr,Tbe,Igr,Ngr,qgr,yt,r9,jgr,Mbe,Dgr,Ggr,Jd,Ogr,Ebe,Vgr,Xgr,BQ,zgr,Wgr,Qgr,LT,Hgr,vo,t9,Ugr,Cbe,Jgr,Ygr,en,Kgr,wbe,Zgr,ehr,Abe,ohr,rhr,Lbe,thr,ahr,nhr,on,yT,ybe,shr,lhr,IQ,ihr,dhr,chr,xT,xbe,fhr,mhr,NQ,ghr,hhr,phr,$T,$be,uhr,_hr,qQ,bhr,vhr,Fhr,kT,kbe,Thr,Mhr,jQ,Ehr,Chr,whr,ST,Ahr,Sbe,Lhr,yhr,Rbe,xhr,$hr,RT,FOe,Yd,PT,Pbe,a9,khr,Bbe,Shr,TOe,Ko,n9,Rhr,Kd,Phr,DQ,Bhr,Ihr,GQ,Nhr,qhr,jhr,s9,Dhr,Ibe,Ghr,Ohr,Vhr,xt,l9,Xhr,Nbe,zhr,Whr,Zd,Qhr,qbe,Hhr,Uhr,OQ,Jhr,Yhr,Khr,BT,Zhr,Fo,i9,epr,jbe,opr,rpr,rn,tpr,Dbe,apr,npr,Gbe,spr,lpr,Obe,ipr,dpr,cpr,Vbe,IT,Xbe,fpr,mpr,VQ,gpr,hpr,ppr,NT,upr,zbe,_pr,bpr,Wbe,vpr,Fpr,qT,MOe,ec,jT,Qbe,d9,Tpr,Hbe,Mpr,EOe,Zo,c9,Epr,oc,Cpr,XQ,wpr,Apr,zQ,Lpr,ypr,xpr,f9,$pr,Ube,kpr,Spr,Rpr,$t,m9,Ppr,Jbe,Bpr,Ipr,rc,Npr,Ybe,qpr,jpr,WQ,Dpr,Gpr,Opr,DT,Vpr,Lr,g9,Xpr,Kbe,zpr,Wpr,tn,Qpr,Zbe,Hpr,Upr,eve,Jpr,Ypr,ove,Kpr,Zpr,eur,q,GT,rve,our,rur,QQ,tur,aur,nur,OT,tve,sur,lur,HQ,iur,dur,cur,VT,ave,fur,mur,UQ,gur,hur,pur,XT,nve,uur,_ur,JQ,bur,vur,Fur,zT,sve,Tur,Mur,YQ,Eur,Cur,wur,WT,lve,Aur,Lur,KQ,yur,xur,$ur,QT,ive,kur,Sur,ZQ,Rur,Pur,Bur,HT,dve,Iur,Nur,eH,qur,jur,Dur,UT,cve,Gur,Our,oH,Vur,Xur,zur,JT,fve,Wur,Qur,rH,Hur,Uur,Jur,YT,mve,Yur,Kur,tH,Zur,e_r,o_r,KT,gve,r_r,t_r,aH,a_r,n_r,s_r,ZT,hve,l_r,i_r,nH,d_r,c_r,f_r,e7,pve,m_r,g_r,sH,h_r,p_r,u_r,o7,uve,__r,b_r,lH,v_r,F_r,T_r,r7,_ve,M_r,E_r,iH,C_r,w_r,A_r,t7,bve,L_r,y_r,dH,x_r,$_r,k_r,zs,vve,S_r,R_r,cH,P_r,B_r,fH,I_r,N_r,q_r,a7,Fve,j_r,D_r,mH,G_r,O_r,V_r,n7,Tve,X_r,z_r,gH,W_r,Q_r,H_r,s7,Mve,U_r,J_r,hH,Y_r,K_r,Z_r,l7,Eve,e4r,o4r,pH,r4r,t4r,a4r,i7,Cve,n4r,s4r,uH,l4r,i4r,d4r,d7,wve,c4r,f4r,_H,m4r,g4r,h4r,c7,Ave,p4r,u4r,bH,_4r,b4r,v4r,f7,Lve,F4r,T4r,vH,M4r,E4r,C4r,m7,yve,w4r,A4r,FH,L4r,y4r,x4r,g7,xve,$4r,k4r,TH,S4r,R4r,P4r,h7,$ve,B4r,I4r,MH,N4r,q4r,j4r,p7,kve,D4r,G4r,EH,O4r,V4r,X4r,u7,Sve,z4r,W4r,CH,Q4r,H4r,U4r,_7,Rve,J4r,Y4r,wH,K4r,Z4r,e1r,b7,Pve,o1r,r1r,AH,t1r,a1r,n1r,v7,Bve,s1r,l1r,LH,i1r,d1r,c1r,F7,Ive,f1r,m1r,yH,g1r,h1r,p1r,T7,Nve,u1r,_1r,xH,b1r,v1r,F1r,M7,qve,T1r,M1r,$H,E1r,C1r,w1r,E7,jve,A1r,L1r,kH,y1r,x1r,$1r,C7,Dve,k1r,S1r,SH,R1r,P1r,B1r,w7,Gve,I1r,N1r,RH,q1r,j1r,D1r,A7,Ove,G1r,O1r,PH,V1r,X1r,z1r,L7,Vve,W1r,Q1r,BH,H1r,U1r,J1r,y7,Xve,Y1r,K1r,IH,Z1r,e2r,o2r,x7,zve,r2r,t2r,NH,a2r,n2r,s2r,$7,Wve,l2r,i2r,qH,d2r,c2r,f2r,k7,Qve,m2r,g2r,jH,h2r,p2r,u2r,S7,Hve,_2r,b2r,DH,v2r,F2r,T2r,R7,COe,tc,P7,Uve,h9,M2r,Jve,E2r,wOe,er,p9,C2r,ac,w2r,GH,A2r,L2r,OH,y2r,x2r,$2r,u9,k2r,Yve,S2r,R2r,P2r,kt,_9,B2r,Kve,I2r,N2r,nc,q2r,Zve,j2r,D2r,VH,G2r,O2r,V2r,B7,X2r,yr,b9,z2r,e3e,W2r,Q2r,an,H2r,o3e,U2r,J2r,r3e,Y2r,K2r,t3e,Z2r,ebr,obr,se,I7,a3e,rbr,tbr,XH,abr,nbr,sbr,N7,n3e,lbr,ibr,zH,dbr,cbr,fbr,q7,s3e,mbr,gbr,WH,hbr,pbr,ubr,j7,l3e,_br,bbr,QH,vbr,Fbr,Tbr,D7,i3e,Mbr,Ebr,HH,Cbr,wbr,Abr,G7,d3e,Lbr,ybr,UH,xbr,$br,kbr,O7,c3e,Sbr,Rbr,JH,Pbr,Bbr,Ibr,V7,f3e,Nbr,qbr,YH,jbr,Dbr,Gbr,X7,m3e,Obr,Vbr,KH,Xbr,zbr,Wbr,z7,g3e,Qbr,Hbr,ZH,Ubr,Jbr,Ybr,W7,h3e,Kbr,Zbr,eU,evr,ovr,rvr,Q7,p3e,tvr,avr,oU,nvr,svr,lvr,H7,u3e,ivr,dvr,rU,cvr,fvr,mvr,U7,_3e,gvr,hvr,tU,pvr,uvr,_vr,J7,b3e,bvr,vvr,aU,Fvr,Tvr,Mvr,Y7,v3e,Evr,Cvr,nU,wvr,Avr,Lvr,K7,F3e,yvr,xvr,sU,$vr,kvr,Svr,Z7,T3e,Rvr,Pvr,lU,Bvr,Ivr,Nvr,eM,M3e,qvr,jvr,iU,Dvr,Gvr,Ovr,oM,E3e,Vvr,Xvr,dU,zvr,Wvr,Qvr,rM,C3e,Hvr,Uvr,cU,Jvr,Yvr,Kvr,tM,w3e,Zvr,e3r,fU,o3r,r3r,t3r,aM,A3e,a3r,n3r,mU,s3r,l3r,i3r,nM,AOe,sc,sM,L3e,v9,d3r,y3e,c3r,LOe,or,F9,f3r,lc,m3r,gU,g3r,h3r,hU,p3r,u3r,_3r,T9,b3r,x3e,v3r,F3r,T3r,St,M9,M3r,$3e,E3r,C3r,ic,w3r,k3e,A3r,L3r,pU,y3r,x3r,$3r,lM,k3r,xr,E9,S3r,S3e,R3r,P3r,nn,B3r,R3e,I3r,N3r,P3e,q3r,j3r,B3e,D3r,G3r,O3r,Me,iM,I3e,V3r,X3r,uU,z3r,W3r,Q3r,dM,N3e,H3r,U3r,_U,J3r,Y3r,K3r,cM,q3e,Z3r,eFr,bU,oFr,rFr,tFr,fM,j3e,aFr,nFr,vU,sFr,lFr,iFr,mM,D3e,dFr,cFr,FU,fFr,mFr,gFr,gM,G3e,hFr,pFr,TU,uFr,_Fr,bFr,hM,O3e,vFr,FFr,MU,TFr,MFr,EFr,pM,V3e,CFr,wFr,EU,AFr,LFr,yFr,uM,X3e,xFr,$Fr,CU,kFr,SFr,RFr,_M,z3e,PFr,BFr,wU,IFr,NFr,qFr,bM,W3e,jFr,DFr,AU,GFr,OFr,VFr,vM,Q3e,XFr,zFr,LU,WFr,QFr,HFr,FM,H3e,UFr,JFr,yU,YFr,KFr,ZFr,TM,yOe,dc,MM,U3e,C9,eTr,J3e,oTr,xOe,rr,w9,rTr,cc,tTr,xU,aTr,nTr,$U,sTr,lTr,iTr,A9,dTr,Y3e,cTr,fTr,mTr,Rt,L9,gTr,K3e,hTr,pTr,fc,uTr,Z3e,_Tr,bTr,kU,vTr,FTr,TTr,EM,MTr,$r,y9,ETr,eFe,CTr,wTr,sn,ATr,oFe,LTr,yTr,rFe,xTr,$Tr,tFe,kTr,STr,RTr,ln,CM,aFe,PTr,BTr,SU,ITr,NTr,qTr,wM,nFe,jTr,DTr,RU,GTr,OTr,VTr,AM,sFe,XTr,zTr,PU,WTr,QTr,HTr,LM,lFe,UTr,JTr,BU,YTr,KTr,ZTr,yM,$Oe,mc,xM,iFe,x9,e7r,dFe,o7r,kOe,tr,$9,r7r,gc,t7r,IU,a7r,n7r,NU,s7r,l7r,i7r,k9,d7r,cFe,c7r,f7r,m7r,Pt,S9,g7r,fFe,h7r,p7r,hc,u7r,mFe,_7r,b7r,qU,v7r,F7r,T7r,$M,M7r,kr,R9,E7r,gFe,C7r,w7r,dn,A7r,hFe,L7r,y7r,pFe,x7r,$7r,uFe,k7r,S7r,R7r,ie,kM,_Fe,P7r,B7r,jU,I7r,N7r,q7r,SM,bFe,j7r,D7r,DU,G7r,O7r,V7r,RM,vFe,X7r,z7r,GU,W7r,Q7r,H7r,PM,FFe,U7r,J7r,OU,Y7r,K7r,Z7r,BM,TFe,eMr,oMr,VU,rMr,tMr,aMr,IM,MFe,nMr,sMr,XU,lMr,iMr,dMr,NM,EFe,cMr,fMr,zU,mMr,gMr,hMr,qM,CFe,pMr,uMr,WU,_Mr,bMr,vMr,jM,wFe,FMr,TMr,QU,MMr,EMr,CMr,DM,AFe,wMr,AMr,HU,LMr,yMr,xMr,GM,LFe,$Mr,kMr,UU,SMr,RMr,PMr,OM,yFe,BMr,IMr,JU,NMr,qMr,jMr,VM,xFe,DMr,GMr,YU,OMr,VMr,XMr,XM,$Fe,zMr,WMr,KU,QMr,HMr,UMr,zM,kFe,JMr,YMr,ZU,KMr,ZMr,eEr,WM,SFe,oEr,rEr,eJ,tEr,aEr,nEr,QM,RFe,sEr,lEr,oJ,iEr,dEr,cEr,HM,PFe,fEr,mEr,rJ,gEr,hEr,pEr,UM,BFe,uEr,_Er,tJ,bEr,vEr,FEr,JM,IFe,TEr,MEr,aJ,EEr,CEr,wEr,YM,SOe,pc,KM,NFe,P9,AEr,qFe,LEr,ROe,ar,B9,yEr,uc,xEr,nJ,$Er,kEr,sJ,SEr,REr,PEr,I9,BEr,jFe,IEr,NEr,qEr,Bt,N9,jEr,DFe,DEr,GEr,_c,OEr,GFe,VEr,XEr,lJ,zEr,WEr,QEr,ZM,HEr,Sr,q9,UEr,OFe,JEr,YEr,cn,KEr,VFe,ZEr,eCr,XFe,oCr,rCr,zFe,tCr,aCr,nCr,ye,eE,WFe,sCr,lCr,iJ,iCr,dCr,cCr,oE,QFe,fCr,mCr,dJ,gCr,hCr,pCr,rE,HFe,uCr,_Cr,cJ,bCr,vCr,FCr,tE,UFe,TCr,MCr,fJ,ECr,CCr,wCr,aE,JFe,ACr,LCr,mJ,yCr,xCr,$Cr,nE,YFe,kCr,SCr,gJ,RCr,PCr,BCr,sE,KFe,ICr,NCr,hJ,qCr,jCr,DCr,lE,ZFe,GCr,OCr,pJ,VCr,XCr,zCr,iE,eTe,WCr,QCr,uJ,HCr,UCr,JCr,dE,oTe,YCr,KCr,_J,ZCr,e5r,o5r,cE,POe,bc,fE,rTe,j9,r5r,tTe,t5r,BOe,nr,D9,a5r,vc,n5r,bJ,s5r,l5r,vJ,i5r,d5r,c5r,G9,f5r,aTe,m5r,g5r,h5r,It,O9,p5r,nTe,u5r,_5r,Fc,b5r,sTe,v5r,F5r,FJ,T5r,M5r,E5r,mE,C5r,Rr,V9,w5r,lTe,A5r,L5r,fn,y5r,iTe,x5r,$5r,dTe,k5r,S5r,cTe,R5r,P5r,B5r,te,gE,fTe,I5r,N5r,TJ,q5r,j5r,D5r,hE,mTe,G5r,O5r,MJ,V5r,X5r,z5r,pE,gTe,W5r,Q5r,EJ,H5r,U5r,J5r,uE,hTe,Y5r,K5r,CJ,Z5r,e0r,o0r,_E,pTe,r0r,t0r,wJ,a0r,n0r,s0r,bE,uTe,l0r,i0r,AJ,d0r,c0r,f0r,vE,_Te,m0r,g0r,LJ,h0r,p0r,u0r,FE,bTe,_0r,b0r,yJ,v0r,F0r,T0r,TE,vTe,M0r,E0r,xJ,C0r,w0r,A0r,ME,FTe,L0r,y0r,$J,x0r,$0r,k0r,EE,TTe,S0r,R0r,kJ,P0r,B0r,I0r,CE,MTe,N0r,q0r,SJ,j0r,D0r,G0r,wE,ETe,O0r,V0r,RJ,X0r,z0r,W0r,AE,CTe,Q0r,H0r,PJ,U0r,J0r,Y0r,LE,wTe,K0r,Z0r,BJ,ewr,owr,rwr,yE,ATe,twr,awr,IJ,nwr,swr,lwr,xE,LTe,iwr,dwr,NJ,cwr,fwr,mwr,$E,yTe,gwr,hwr,qJ,pwr,uwr,_wr,kE,xTe,bwr,vwr,jJ,Fwr,Twr,Mwr,SE,$Te,Ewr,Cwr,DJ,wwr,Awr,Lwr,RE,kTe,ywr,xwr,GJ,$wr,kwr,Swr,PE,STe,Rwr,Pwr,OJ,Bwr,Iwr,Nwr,BE,RTe,qwr,jwr,VJ,Dwr,Gwr,Owr,IE,PTe,Vwr,Xwr,XJ,zwr,Wwr,Qwr,NE,BTe,Hwr,Uwr,zJ,Jwr,Ywr,Kwr,qE,ITe,Zwr,eAr,WJ,oAr,rAr,tAr,jE,IOe,Tc,DE,NTe,X9,aAr,qTe,nAr,NOe,sr,z9,sAr,Mc,lAr,QJ,iAr,dAr,HJ,cAr,fAr,mAr,W9,gAr,jTe,hAr,pAr,uAr,Nt,Q9,_Ar,DTe,bAr,vAr,Ec,FAr,GTe,TAr,MAr,UJ,EAr,CAr,wAr,GE,AAr,Pr,H9,LAr,OTe,yAr,xAr,mn,$Ar,VTe,kAr,SAr,XTe,RAr,PAr,zTe,BAr,IAr,NAr,ue,OE,WTe,qAr,jAr,JJ,DAr,GAr,OAr,VE,QTe,VAr,XAr,YJ,zAr,WAr,QAr,XE,HTe,HAr,UAr,KJ,JAr,YAr,KAr,zE,UTe,ZAr,e6r,ZJ,o6r,r6r,t6r,WE,JTe,a6r,n6r,eY,s6r,l6r,i6r,QE,YTe,d6r,c6r,oY,f6r,m6r,g6r,HE,KTe,h6r,p6r,rY,u6r,_6r,b6r,UE,ZTe,v6r,F6r,tY,T6r,M6r,E6r,JE,e7e,C6r,w6r,aY,A6r,L6r,y6r,YE,o7e,x6r,$6r,nY,k6r,S6r,R6r,KE,r7e,P6r,B6r,sY,I6r,N6r,q6r,ZE,t7e,j6r,D6r,lY,G6r,O6r,V6r,eC,a7e,X6r,z6r,iY,W6r,Q6r,H6r,oC,n7e,U6r,J6r,dY,Y6r,K6r,Z6r,rC,s7e,eLr,oLr,cY,rLr,tLr,aLr,tC,l7e,nLr,sLr,fY,lLr,iLr,dLr,aC,i7e,cLr,fLr,mY,mLr,gLr,hLr,nC,qOe,Cc,sC,d7e,U9,pLr,c7e,uLr,jOe,lr,J9,_Lr,wc,bLr,gY,vLr,FLr,hY,TLr,MLr,ELr,Y9,CLr,f7e,wLr,ALr,LLr,qt,K9,yLr,m7e,xLr,$Lr,Ac,kLr,g7e,SLr,RLr,pY,PLr,BLr,ILr,lC,NLr,Br,Z9,qLr,h7e,jLr,DLr,gn,GLr,p7e,OLr,VLr,u7e,XLr,zLr,_7e,WLr,QLr,HLr,ex,iC,b7e,ULr,JLr,uY,YLr,KLr,ZLr,dC,v7e,eyr,oyr,_Y,ryr,tyr,ayr,cC,DOe,Lc,fC,F7e,ox,nyr,T7e,syr,GOe,ir,rx,lyr,yc,iyr,bY,dyr,cyr,vY,fyr,myr,gyr,tx,hyr,M7e,pyr,uyr,_yr,jt,ax,byr,E7e,vyr,Fyr,xc,Tyr,C7e,Myr,Eyr,FY,Cyr,wyr,Ayr,mC,Lyr,Ir,nx,yyr,w7e,xyr,$yr,hn,kyr,A7e,Syr,Ryr,L7e,Pyr,Byr,y7e,Iyr,Nyr,qyr,x7e,gC,$7e,jyr,Dyr,TY,Gyr,Oyr,Vyr,hC,OOe,$c,pC,k7e,sx,Xyr,S7e,zyr,VOe,dr,lx,Wyr,kc,Qyr,MY,Hyr,Uyr,EY,Jyr,Yyr,Kyr,ix,Zyr,R7e,e8r,o8r,r8r,Dt,dx,t8r,P7e,a8r,n8r,Sc,s8r,B7e,l8r,i8r,CY,d8r,c8r,f8r,uC,m8r,Nr,cx,g8r,I7e,h8r,p8r,pn,u8r,N7e,_8r,b8r,q7e,v8r,F8r,j7e,T8r,M8r,E8r,de,_C,D7e,C8r,w8r,wY,A8r,L8r,y8r,bC,G7e,x8r,$8r,AY,k8r,S8r,R8r,vC,O7e,P8r,B8r,LY,I8r,N8r,q8r,FC,V7e,j8r,D8r,yY,G8r,O8r,V8r,TC,X7e,X8r,z8r,xY,W8r,Q8r,H8r,MC,z7e,U8r,J8r,$Y,Y8r,K8r,Z8r,EC,W7e,e9r,o9r,kY,r9r,t9r,a9r,CC,Q7e,n9r,s9r,SY,l9r,i9r,d9r,wC,H7e,c9r,f9r,RY,m9r,g9r,h9r,AC,U7e,p9r,u9r,PY,_9r,b9r,v9r,LC,J7e,F9r,T9r,BY,M9r,E9r,C9r,yC,Y7e,w9r,A9r,IY,L9r,y9r,x9r,xC,K7e,$9r,k9r,NY,S9r,R9r,P9r,$C,Z7e,B9r,I9r,qY,N9r,q9r,j9r,kC,eMe,D9r,G9r,jY,O9r,V9r,X9r,SC,oMe,z9r,W9r,DY,Q9r,H9r,U9r,RC,rMe,J9r,Y9r,GY,K9r,Z9r,exr,PC,tMe,oxr,rxr,OY,txr,axr,nxr,BC,aMe,sxr,lxr,VY,ixr,dxr,cxr,IC,nMe,fxr,mxr,XY,gxr,hxr,pxr,NC,XOe,Rc,qC,sMe,fx,uxr,lMe,_xr,zOe,cr,mx,bxr,Pc,vxr,zY,Fxr,Txr,WY,Mxr,Exr,Cxr,gx,wxr,iMe,Axr,Lxr,yxr,Gt,hx,xxr,dMe,$xr,kxr,Bc,Sxr,cMe,Rxr,Pxr,QY,Bxr,Ixr,Nxr,jC,qxr,qr,px,jxr,fMe,Dxr,Gxr,un,Oxr,mMe,Vxr,Xxr,gMe,zxr,Wxr,hMe,Qxr,Hxr,Uxr,ce,DC,pMe,Jxr,Yxr,HY,Kxr,Zxr,e$r,GC,uMe,o$r,r$r,UY,t$r,a$r,n$r,OC,_Me,s$r,l$r,JY,i$r,d$r,c$r,VC,bMe,f$r,m$r,YY,g$r,h$r,p$r,XC,vMe,u$r,_$r,KY,b$r,v$r,F$r,zC,FMe,T$r,M$r,ZY,E$r,C$r,w$r,WC,TMe,A$r,L$r,eK,y$r,x$r,$$r,QC,MMe,k$r,S$r,oK,R$r,P$r,B$r,HC,EMe,I$r,N$r,rK,q$r,j$r,D$r,UC,CMe,G$r,O$r,tK,V$r,X$r,z$r,JC,wMe,W$r,Q$r,aK,H$r,U$r,J$r,YC,AMe,Y$r,K$r,nK,Z$r,ekr,okr,KC,LMe,rkr,tkr,sK,akr,nkr,skr,ZC,yMe,lkr,ikr,lK,dkr,ckr,fkr,e5,xMe,mkr,gkr,iK,hkr,pkr,ukr,o5,$Me,_kr,bkr,dK,vkr,Fkr,Tkr,r5,kMe,Mkr,Ekr,cK,Ckr,wkr,Akr,t5,SMe,Lkr,ykr,fK,xkr,$kr,kkr,a5,RMe,Skr,Rkr,mK,Pkr,Bkr,Ikr,n5,PMe,Nkr,qkr,gK,jkr,Dkr,Gkr,s5,WOe,Ic,l5,BMe,ux,Okr,IMe,Vkr,QOe,fr,_x,Xkr,Nc,zkr,hK,Wkr,Qkr,pK,Hkr,Ukr,Jkr,bx,Ykr,NMe,Kkr,Zkr,eSr,Ot,vx,oSr,qMe,rSr,tSr,qc,aSr,jMe,nSr,sSr,uK,lSr,iSr,dSr,i5,cSr,jr,Fx,fSr,DMe,mSr,gSr,_n,hSr,GMe,pSr,uSr,OMe,_Sr,bSr,VMe,vSr,FSr,TSr,XMe,d5,zMe,MSr,ESr,_K,CSr,wSr,ASr,c5,HOe,jc,f5,WMe,Tx,LSr,QMe,ySr,UOe,mr,Mx,xSr,Dc,$Sr,bK,kSr,SSr,vK,RSr,PSr,BSr,Ex,ISr,HMe,NSr,qSr,jSr,Vt,Cx,DSr,UMe,GSr,OSr,Gc,VSr,JMe,XSr,zSr,FK,WSr,QSr,HSr,m5,USr,Dr,wx,JSr,YMe,YSr,KSr,bn,ZSr,KMe,eRr,oRr,ZMe,rRr,tRr,eEe,aRr,nRr,sRr,oEe,g5,rEe,lRr,iRr,TK,dRr,cRr,fRr,h5,JOe,Oc,p5,tEe,Ax,mRr,aEe,gRr,YOe,gr,Lx,hRr,Vc,pRr,MK,uRr,_Rr,EK,bRr,vRr,FRr,yx,TRr,nEe,MRr,ERr,CRr,Xt,xx,wRr,sEe,ARr,LRr,Xc,yRr,lEe,xRr,$Rr,CK,kRr,SRr,RRr,u5,PRr,Gr,$x,BRr,iEe,IRr,NRr,vn,qRr,dEe,jRr,DRr,cEe,GRr,ORr,fEe,VRr,XRr,zRr,oe,_5,mEe,WRr,QRr,wK,HRr,URr,JRr,b5,gEe,YRr,KRr,AK,ZRr,ePr,oPr,v5,hEe,rPr,tPr,LK,aPr,nPr,sPr,F5,pEe,lPr,iPr,yK,dPr,cPr,fPr,T5,uEe,mPr,gPr,xK,hPr,pPr,uPr,M5,_Ee,_Pr,bPr,$K,vPr,FPr,TPr,E5,bEe,MPr,EPr,kK,CPr,wPr,APr,C5,vEe,LPr,yPr,SK,xPr,$Pr,kPr,w5,FEe,SPr,RPr,RK,PPr,BPr,IPr,A5,TEe,NPr,qPr,PK,jPr,DPr,GPr,L5,MEe,OPr,VPr,BK,XPr,zPr,WPr,y5,EEe,QPr,HPr,IK,UPr,JPr,YPr,x5,CEe,KPr,ZPr,NK,eBr,oBr,rBr,$5,wEe,tBr,aBr,qK,nBr,sBr,lBr,k5,AEe,iBr,dBr,jK,cBr,fBr,mBr,S5,LEe,gBr,hBr,DK,pBr,uBr,_Br,R5,yEe,bBr,vBr,GK,FBr,TBr,MBr,P5,xEe,EBr,CBr,OK,wBr,ABr,LBr,B5,$Ee,yBr,xBr,VK,$Br,kBr,SBr,I5,kEe,RBr,PBr,XK,BBr,IBr,NBr,N5,SEe,qBr,jBr,zK,DBr,GBr,OBr,q5,REe,VBr,XBr,WK,zBr,WBr,QBr,j5,PEe,HBr,UBr,QK,JBr,YBr,KBr,D5,BEe,ZBr,eIr,HK,oIr,rIr,tIr,G5,IEe,aIr,nIr,UK,sIr,lIr,iIr,O5,NEe,dIr,cIr,JK,fIr,mIr,gIr,V5,qEe,hIr,pIr,YK,uIr,_Ir,bIr,X5,KOe,zc,z5,jEe,kx,vIr,DEe,FIr,ZOe,hr,Sx,TIr,Wc,MIr,KK,EIr,CIr,ZK,wIr,AIr,LIr,Rx,yIr,GEe,xIr,$Ir,kIr,zt,Px,SIr,OEe,RIr,PIr,Qc,BIr,VEe,IIr,NIr,eZ,qIr,jIr,DIr,W5,GIr,Or,Bx,OIr,XEe,VIr,XIr,Fn,zIr,zEe,WIr,QIr,WEe,HIr,UIr,QEe,JIr,YIr,KIr,xe,Q5,HEe,ZIr,eNr,oZ,oNr,rNr,tNr,H5,UEe,aNr,nNr,rZ,sNr,lNr,iNr,U5,JEe,dNr,cNr,tZ,fNr,mNr,gNr,J5,YEe,hNr,pNr,aZ,uNr,_Nr,bNr,Y5,KEe,vNr,FNr,nZ,TNr,MNr,ENr,K5,ZEe,CNr,wNr,sZ,ANr,LNr,yNr,Z5,eCe,xNr,$Nr,lZ,kNr,SNr,RNr,e0,oCe,PNr,BNr,iZ,INr,NNr,qNr,o0,rCe,jNr,DNr,dZ,GNr,ONr,VNr,r0,tCe,XNr,zNr,cZ,WNr,QNr,HNr,t0,eVe,Hc,a0,aCe,Ix,UNr,nCe,JNr,oVe,pr,Nx,YNr,Uc,KNr,fZ,ZNr,eqr,mZ,oqr,rqr,tqr,qx,aqr,sCe,nqr,sqr,lqr,Wt,jx,iqr,lCe,dqr,cqr,Jc,fqr,iCe,mqr,gqr,gZ,hqr,pqr,uqr,n0,_qr,Vr,Dx,bqr,dCe,vqr,Fqr,Tn,Tqr,cCe,Mqr,Eqr,fCe,Cqr,wqr,mCe,Aqr,Lqr,yqr,Ee,s0,gCe,xqr,$qr,hZ,kqr,Sqr,Rqr,l0,hCe,Pqr,Bqr,pZ,Iqr,Nqr,qqr,i0,pCe,jqr,Dqr,uZ,Gqr,Oqr,Vqr,d0,uCe,Xqr,zqr,_Z,Wqr,Qqr,Hqr,c0,_Ce,Uqr,Jqr,bZ,Yqr,Kqr,Zqr,f0,bCe,ejr,ojr,vZ,rjr,tjr,ajr,m0,vCe,njr,sjr,FZ,ljr,ijr,djr,g0,FCe,cjr,fjr,TZ,mjr,gjr,hjr,h0,TCe,pjr,ujr,MZ,_jr,bjr,vjr,p0,MCe,Fjr,Tjr,EZ,Mjr,Ejr,Cjr,u0,ECe,wjr,Ajr,CZ,Ljr,yjr,xjr,_0,CCe,$jr,kjr,wZ,Sjr,Rjr,Pjr,b0,wCe,Bjr,Ijr,AZ,Njr,qjr,jjr,v0,rVe,Yc,F0,ACe,Gx,Djr,LCe,Gjr,tVe,ur,Ox,Ojr,Kc,Vjr,LZ,Xjr,zjr,yZ,Wjr,Qjr,Hjr,Vx,Ujr,yCe,Jjr,Yjr,Kjr,Qt,Xx,Zjr,xCe,eDr,oDr,Zc,rDr,$Ce,tDr,aDr,xZ,nDr,sDr,lDr,T0,iDr,Xr,zx,dDr,kCe,cDr,fDr,Mn,mDr,SCe,gDr,hDr,RCe,pDr,uDr,PCe,_Dr,bDr,vDr,$e,M0,BCe,FDr,TDr,$Z,MDr,EDr,CDr,E0,ICe,wDr,ADr,kZ,LDr,yDr,xDr,C0,NCe,$Dr,kDr,SZ,SDr,RDr,PDr,w0,qCe,BDr,IDr,RZ,NDr,qDr,jDr,A0,jCe,DDr,GDr,PZ,ODr,VDr,XDr,L0,DCe,zDr,WDr,BZ,QDr,HDr,UDr,y0,GCe,JDr,YDr,IZ,KDr,ZDr,eGr,x0,OCe,oGr,rGr,NZ,tGr,aGr,nGr,$0,VCe,sGr,lGr,qZ,iGr,dGr,cGr,k0,XCe,fGr,mGr,jZ,gGr,hGr,pGr,S0,aVe,ef,R0,zCe,Wx,uGr,WCe,_Gr,nVe,_r,Qx,bGr,of,vGr,DZ,FGr,TGr,GZ,MGr,EGr,CGr,Hx,wGr,QCe,AGr,LGr,yGr,Ht,Ux,xGr,HCe,$Gr,kGr,rf,SGr,UCe,RGr,PGr,OZ,BGr,IGr,NGr,P0,qGr,zr,Jx,jGr,JCe,DGr,GGr,En,OGr,YCe,VGr,XGr,KCe,zGr,WGr,ZCe,QGr,HGr,UGr,ke,B0,e5e,JGr,YGr,VZ,KGr,ZGr,eOr,I0,o5e,oOr,rOr,XZ,tOr,aOr,nOr,N0,r5e,sOr,lOr,zZ,iOr,dOr,cOr,q0,t5e,fOr,mOr,WZ,gOr,hOr,pOr,j0,a5e,uOr,_Or,QZ,bOr,vOr,FOr,D0,n5e,TOr,MOr,HZ,EOr,COr,wOr,G0,s5e,AOr,LOr,UZ,yOr,xOr,$Or,O0,l5e,kOr,SOr,JZ,ROr,POr,BOr,V0,i5e,IOr,NOr,YZ,qOr,jOr,DOr,X0,d5e,GOr,OOr,KZ,VOr,XOr,zOr,z0,sVe,tf,W0,c5e,Yx,WOr,f5e,QOr,lVe,br,Kx,HOr,af,UOr,ZZ,JOr,YOr,eee,KOr,ZOr,eVr,Zx,oVr,m5e,rVr,tVr,aVr,Ut,e$,nVr,g5e,sVr,lVr,nf,iVr,h5e,dVr,cVr,oee,fVr,mVr,gVr,Q0,hVr,Wr,o$,pVr,p5e,uVr,_Vr,Cn,bVr,u5e,vVr,FVr,_5e,TVr,MVr,b5e,EVr,CVr,wVr,Se,H0,v5e,AVr,LVr,ree,yVr,xVr,$Vr,U0,F5e,kVr,SVr,tee,RVr,PVr,BVr,J0,T5e,IVr,NVr,aee,qVr,jVr,DVr,Y0,M5e,GVr,OVr,nee,VVr,XVr,zVr,K0,E5e,WVr,QVr,see,HVr,UVr,JVr,Z0,C5e,YVr,KVr,lee,ZVr,eXr,oXr,ew,w5e,rXr,tXr,iee,aXr,nXr,sXr,ow,A5e,lXr,iXr,dee,dXr,cXr,fXr,rw,L5e,mXr,gXr,cee,hXr,pXr,uXr,tw,y5e,_Xr,bXr,fee,vXr,FXr,TXr,aw,iVe,sf,nw,x5e,r$,MXr,$5e,EXr,dVe,vr,t$,CXr,lf,wXr,mee,AXr,LXr,gee,yXr,xXr,$Xr,a$,kXr,k5e,SXr,RXr,PXr,Jt,n$,BXr,S5e,IXr,NXr,df,qXr,R5e,jXr,DXr,hee,GXr,OXr,VXr,sw,XXr,Qr,s$,zXr,P5e,WXr,QXr,wn,HXr,B5e,UXr,JXr,I5e,YXr,KXr,N5e,ZXr,ezr,ozr,Re,lw,q5e,rzr,tzr,pee,azr,nzr,szr,iw,j5e,lzr,izr,uee,dzr,czr,fzr,dw,D5e,mzr,gzr,_ee,hzr,pzr,uzr,cw,G5e,_zr,bzr,bee,vzr,Fzr,Tzr,fw,O5e,Mzr,Ezr,vee,Czr,wzr,Azr,mw,V5e,Lzr,yzr,Fee,xzr,$zr,kzr,gw,X5e,Szr,Rzr,Tee,Pzr,Bzr,Izr,hw,z5e,Nzr,qzr,Mee,jzr,Dzr,Gzr,pw,W5e,Ozr,Vzr,Eee,Xzr,zzr,Wzr,uw,Q5e,Qzr,Hzr,Cee,Uzr,Jzr,Yzr,_w,cVe,cf,bw,H5e,l$,Kzr,U5e,Zzr,fVe,Fr,i$,eWr,ff,oWr,wee,rWr,tWr,Aee,aWr,nWr,sWr,d$,lWr,J5e,iWr,dWr,cWr,Yt,c$,fWr,Y5e,mWr,gWr,mf,hWr,K5e,pWr,uWr,Lee,_Wr,bWr,vWr,vw,FWr,Hr,f$,TWr,Z5e,MWr,EWr,An,CWr,e0e,wWr,AWr,o0e,LWr,yWr,r0e,xWr,$Wr,kWr,Ve,Fw,t0e,SWr,RWr,yee,PWr,BWr,IWr,Tw,a0e,NWr,qWr,xee,jWr,DWr,GWr,Mw,n0e,OWr,VWr,$ee,XWr,zWr,WWr,Ew,s0e,QWr,HWr,kee,UWr,JWr,YWr,Cw,l0e,KWr,ZWr,See,eQr,oQr,rQr,ww,i0e,tQr,aQr,Ree,nQr,sQr,lQr,Aw,d0e,iQr,dQr,Pee,cQr,fQr,mQr,Lw,c0e,gQr,hQr,Bee,pQr,uQr,_Qr,yw,mVe,gf,xw,f0e,m$,bQr,m0e,vQr,gVe,Tr,g$,FQr,hf,TQr,Iee,MQr,EQr,Nee,CQr,wQr,AQr,h$,LQr,g0e,yQr,xQr,$Qr,Kt,p$,kQr,h0e,SQr,RQr,pf,PQr,p0e,BQr,IQr,qee,NQr,qQr,jQr,$w,DQr,Ur,u$,GQr,u0e,OQr,VQr,Ln,XQr,_0e,zQr,WQr,b0e,QQr,HQr,v0e,UQr,JQr,YQr,Xe,kw,F0e,KQr,ZQr,jee,eHr,oHr,rHr,Sw,T0e,tHr,aHr,Dee,nHr,sHr,lHr,Rw,M0e,iHr,dHr,Gee,cHr,fHr,mHr,Pw,E0e,gHr,hHr,Oee,pHr,uHr,_Hr,Bw,C0e,bHr,vHr,Vee,FHr,THr,MHr,Iw,w0e,EHr,CHr,Xee,wHr,AHr,LHr,Nw,A0e,yHr,xHr,zee,$Hr,kHr,SHr,qw,L0e,RHr,PHr,Wee,BHr,IHr,NHr,jw,hVe,uf,Dw,y0e,_$,qHr,x0e,jHr,pVe,Mr,b$,DHr,_f,GHr,Qee,OHr,VHr,Hee,XHr,zHr,WHr,v$,QHr,$0e,HHr,UHr,JHr,Zt,F$,YHr,k0e,KHr,ZHr,bf,eUr,S0e,oUr,rUr,Uee,tUr,aUr,nUr,Gw,sUr,Jr,T$,lUr,R0e,iUr,dUr,yn,cUr,P0e,fUr,mUr,B0e,gUr,hUr,I0e,pUr,uUr,_Ur,N0e,Ow,q0e,bUr,vUr,Jee,FUr,TUr,MUr,Vw,uVe,vf,Xw,j0e,M$,EUr,D0e,CUr,_Ve,Er,E$,wUr,Ff,AUr,Yee,LUr,yUr,Kee,xUr,$Ur,kUr,C$,SUr,G0e,RUr,PUr,BUr,ea,w$,IUr,O0e,NUr,qUr,Tf,jUr,V0e,DUr,GUr,Zee,OUr,VUr,XUr,zw,zUr,Yr,A$,WUr,X0e,QUr,HUr,xn,UUr,z0e,JUr,YUr,W0e,KUr,ZUr,Q0e,eJr,oJr,rJr,L$,Ww,H0e,tJr,aJr,eoe,nJr,sJr,lJr,Qw,U0e,iJr,dJr,ooe,cJr,fJr,mJr,Hw,bVe,Mf,Uw,J0e,y$,gJr,Y0e,hJr,vVe,Cr,x$,pJr,Ef,uJr,roe,_Jr,bJr,toe,vJr,FJr,TJr,$$,MJr,K0e,EJr,CJr,wJr,oa,k$,AJr,Z0e,LJr,yJr,Cf,xJr,ewe,$Jr,kJr,aoe,SJr,RJr,PJr,Jw,BJr,Kr,S$,IJr,owe,NJr,qJr,$n,jJr,rwe,DJr,GJr,twe,OJr,VJr,awe,XJr,zJr,WJr,nwe,Yw,swe,QJr,HJr,noe,UJr,JJr,YJr,Kw,FVe;return d=new re({}),ya=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),EL=new re({}),CL=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Rf=new KJr({props:{warning:!0,$$slots:{default:[mjt]},$$scope:{ctx:x}}}),wL=new re({}),AL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/configuration_auto.py#L598"}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/configuration_auto.py#L621"}}),Gg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[gjt]},$$scope:{ctx:x}}}),$L=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/configuration_auto.py#L744"}}),kL=new re({}),SL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/tokenization_auto.py#L400"}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17443/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/tokenization_auto.py#L414"}}),Eh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[hjt]},$$scope:{ctx:x}}}),IL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/tokenization_auto.py#L613"}}),NL=new re({}),qL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17443/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),ap=new KJr({props:{$$slots:{default:[pjt]},$$scope:{ctx:x}}}),np=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[ujt]},$$scope:{ctx:x}}}),OL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),VL=new re({}),XL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/processing_auto.py#L88"}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/processing_auto.py#L102"}}),wp=new KJr({props:{$$slots:{default:[_jt]},$$scope:{ctx:x}}}),Ap=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[bjt]},$$scope:{ctx:x}}}),HL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/processing_auto.py#L255"}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L761"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),xp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[vjt]},$$scope:{ctx:x}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),x_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Fjt]},$$scope:{ctx:x}}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L768"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),k_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Tjt]},$$scope:{ctx:x}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Mjt]},$$scope:{ctx:x}}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L783"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Ejt]},$$scope:{ctx:x}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),f1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Cjt]},$$scope:{ctx:x}}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L790"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),g1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[wjt]},$$scope:{ctx:x}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),Y1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Ajt]},$$scope:{ctx:x}}}),py=new re({}),uy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L797"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),Z1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Ljt]},$$scope:{ctx:x}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),b2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[yjt]},$$scope:{ctx:x}}}),Fy=new re({}),Ty=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L806"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),F2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[xjt]},$$scope:{ctx:x}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),ub=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[$jt]},$$scope:{ctx:x}}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L851"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),bb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[kjt]},$$scope:{ctx:x}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),Ub=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Sjt]},$$scope:{ctx:x}}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L858"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),Yb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Rjt]},$$scope:{ctx:x}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),av=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Pjt]},$$scope:{ctx:x}}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L844"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),sv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Bjt]},$$scope:{ctx:x}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),Vv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Ijt]},$$scope:{ctx:x}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L815"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),zv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Njt]},$$scope:{ctx:x}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),R3=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qjt]},$$scope:{ctx:x}}}),zy=new re({}),Wy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L822"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),B3=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[jjt]},$$scope:{ctx:x}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),q3=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Djt]},$$scope:{ctx:x}}}),Jy=new re({}),Yy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L867"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17443/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),D3=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Gjt]},$$scope:{ctx:x}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),eF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Ojt]},$$scope:{ctx:x}}}),o8=new re({}),r8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L906"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),rF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Vjt]},$$scope:{ctx:x}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),nF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Xjt]},$$scope:{ctx:x}}}),s8=new re({}),l8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L833"}}),d8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),lF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[zjt]},$$scope:{ctx:x}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),cF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Wjt]},$$scope:{ctx:x}}}),f8=new re({}),m8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L913"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),mF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Qjt]},$$scope:{ctx:x}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),EF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Hjt]},$$scope:{ctx:x}}}),u8=new re({}),_8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L936"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),wF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Ujt]},$$scope:{ctx:x}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),SF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Jjt]},$$scope:{ctx:x}}}),T8=new re({}),M8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L920"}}),C8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),PF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Yjt]},$$scope:{ctx:x}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),WF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Kjt]},$$scope:{ctx:x}}}),A8=new re({}),L8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L927"}}),x8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),HF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Zjt]},$$scope:{ctx:x}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[eDt]},$$scope:{ctx:x}}}),S8=new re({}),R8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L945"}}),B8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[oDt]},$$scope:{ctx:x}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),lT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[rDt]},$$scope:{ctx:x}}}),N8=new re({}),q8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L952"}}),D8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),dT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[tDt]},$$scope:{ctx:x}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),hT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[aDt]},$$scope:{ctx:x}}}),O8=new re({}),V8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L899"}}),z8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),uT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[nDt]},$$scope:{ctx:x}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[sDt]},$$scope:{ctx:x}}}),H8=new re({}),U8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L874"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[lDt]},$$scope:{ctx:x}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),wT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[iDt]},$$scope:{ctx:x}}}),Z8=new re({}),e9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L881"}}),r9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),LT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[dDt]},$$scope:{ctx:x}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[cDt]},$$scope:{ctx:x}}}),a9=new re({}),n9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L890"}}),l9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[fDt]},$$scope:{ctx:x}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[mDt]},$$scope:{ctx:x}}}),d9=new re({}),c9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),m9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),DT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[gDt]},$$scope:{ctx:x}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),R7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[hDt]},$$scope:{ctx:x}}}),h9=new re({}),p9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),_9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),B7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[pDt]},$$scope:{ctx:x}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),nM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[uDt]},$$scope:{ctx:x}}}),v9=new re({}),F9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),M9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),lM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[_Dt]},$$scope:{ctx:x}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),TM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[bDt]},$$scope:{ctx:x}}}),C9=new re({}),w9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),L9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),EM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[vDt]},$$scope:{ctx:x}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),yM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[FDt]},$$scope:{ctx:x}}}),x9=new re({}),$9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),S9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),$M=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[TDt]},$$scope:{ctx:x}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),YM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[MDt]},$$scope:{ctx:x}}}),P9=new re({}),B9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),N9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),ZM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[EDt]},$$scope:{ctx:x}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[CDt]},$$scope:{ctx:x}}}),j9=new re({}),D9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),O9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),mE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[wDt]},$$scope:{ctx:x}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),jE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[ADt]},$$scope:{ctx:x}}}),X9=new re({}),z9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),GE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[LDt]},$$scope:{ctx:x}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),nC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[yDt]},$$scope:{ctx:x}}}),U9=new re({}),J9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),K9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),lC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[xDt]},$$scope:{ctx:x}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[$Dt]},$$scope:{ctx:x}}}),ox=new re({}),rx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[kDt]},$$scope:{ctx:x}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[SDt]},$$scope:{ctx:x}}}),sx=new re({}),lx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[RDt]},$$scope:{ctx:x}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[PDt]},$$scope:{ctx:x}}}),fx=new re({}),mx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),jC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[BDt]},$$scope:{ctx:x}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[IDt]},$$scope:{ctx:x}}}),ux=new re({}),_x=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[NDt]},$$scope:{ctx:x}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),c5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[qDt]},$$scope:{ctx:x}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),m5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[jDt]},$$scope:{ctx:x}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),h5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[DDt]},$$scope:{ctx:x}}}),Ax=new re({}),Lx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),u5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[GDt]},$$scope:{ctx:x}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[ODt]},$$scope:{ctx:x}}}),kx=new re({}),Sx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[VDt]},$$scope:{ctx:x}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[XDt]},$$scope:{ctx:x}}}),Ix=new re({}),Nx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[zDt]},$$scope:{ctx:x}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),v0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[WDt]},$$scope:{ctx:x}}}),Gx=new re({}),Ox=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),T0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[QDt]},$$scope:{ctx:x}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),S0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[HDt]},$$scope:{ctx:x}}}),Wx=new re({}),Qx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),P0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[UDt]},$$scope:{ctx:x}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),z0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[JDt]},$$scope:{ctx:x}}}),Yx=new re({}),Kx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),e$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[YDt]},$$scope:{ctx:x}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[KDt]},$$scope:{ctx:x}}}),r$=new re({}),t$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),n$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ZDt]},$$scope:{ctx:x}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[eGt]},$$scope:{ctx:x}}}),l$=new re({}),i$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),c$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),vw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[oGt]},$$scope:{ctx:x}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),yw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[rGt]},$$scope:{ctx:x}}}),m$=new re({}),g$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),p$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),$w=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[tGt]},$$scope:{ctx:x}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),jw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[aGt]},$$scope:{ctx:x}}}),_$=new re({}),b$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),F$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),Gw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[nGt]},$$scope:{ctx:x}}}),T$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),Vw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[sGt]},$$scope:{ctx:x}}}),M$=new re({}),E$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),w$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),zw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[lGt]},$$scope:{ctx:x}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),Hw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[iGt]},$$scope:{ctx:x}}}),y$=new re({}),x$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),k$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),Jw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[dGt]},$$scope:{ctx:x}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),Kw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[cGt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ti=o("Auto Classes"),yf=l(),at=a("p"),Mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ei=a("code"),vL=o("from_pretrained()"),xf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),Ci=o("Instantiating one of "),Sn=a("a"),FL=o("AutoConfig"),Rn=o(", "),Pn=a("a"),TL=o("AutoModel"),wi=o(`, and
`),Bn=a("a"),ML=o("AutoTokenizer"),Ai=o(" will directly create a class of the relevant architecture. For instance"),$f=l(),F(ya.$$.fragment),Qe=l(),Ae=a("p"),Jk=o("will create a model that is an instance of "),Li=a("a"),Yk=o("BertModel"),Kk=o("."),Co=l(),xa=a("p"),Zk=o("There is one class of "),kf=a("code"),eS=o("AutoModel"),$ze=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),pGe=l(),yi=a("h2"),Sf=a("a"),ete=a("span"),F(EL.$$.fragment),kze=l(),ote=a("span"),Sze=o("Extending the Auto Classes"),uGe=l(),In=a("p"),Rze=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),rte=a("code"),Pze=o("NewModel"),Bze=o(", make sure you have a "),tte=a("code"),Ize=o("NewModelConfig"),Nze=o(` then you can add those to the auto
classes like this:`),_Ge=l(),F(CL.$$.fragment),bGe=l(),oS=a("p"),qze=o("You will then be able to use the auto classes like you would usually do!"),vGe=l(),F(Rf.$$.fragment),FGe=l(),xi=a("h2"),Pf=a("a"),ate=a("span"),F(wL.$$.fragment),jze=l(),nte=a("span"),Dze=o("AutoConfig"),TGe=l(),wo=a("div"),F(AL.$$.fragment),Gze=l(),LL=a("p"),Oze=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),rS=a("a"),Vze=o("from_pretrained()"),Xze=o(" class method."),zze=l(),yL=a("p"),Wze=o("This class cannot be instantiated directly using "),ste=a("code"),Qze=o("__init__()"),Hze=o(" (throws an error)."),Uze=l(),wr=a("div"),F(xL.$$.fragment),Jze=l(),lte=a("p"),Yze=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Kze=l(),$i=a("p"),Zze=o("The configuration class to instantiate is selected based on the "),ite=a("code"),eWe=o("model_type"),oWe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),dte=a("code"),rWe=o("pretrained_model_name_or_path"),tWe=o(":"),aWe=l(),A=a("ul"),Bf=a("li"),cte=a("strong"),nWe=o("albert"),sWe=o(" \u2014 "),tS=a("a"),lWe=o("AlbertConfig"),iWe=o(" (ALBERT model)"),dWe=l(),If=a("li"),fte=a("strong"),cWe=o("bart"),fWe=o(" \u2014 "),aS=a("a"),mWe=o("BartConfig"),gWe=o(" (BART model)"),hWe=l(),Nf=a("li"),mte=a("strong"),pWe=o("beit"),uWe=o(" \u2014 "),nS=a("a"),_We=o("BeitConfig"),bWe=o(" (BEiT model)"),vWe=l(),qf=a("li"),gte=a("strong"),FWe=o("bert"),TWe=o(" \u2014 "),sS=a("a"),MWe=o("BertConfig"),EWe=o(" (BERT model)"),CWe=l(),jf=a("li"),hte=a("strong"),wWe=o("bert-generation"),AWe=o(" \u2014 "),lS=a("a"),LWe=o("BertGenerationConfig"),yWe=o(" (Bert Generation model)"),xWe=l(),Df=a("li"),pte=a("strong"),$We=o("big_bird"),kWe=o(" \u2014 "),iS=a("a"),SWe=o("BigBirdConfig"),RWe=o(" (BigBird model)"),PWe=l(),Gf=a("li"),ute=a("strong"),BWe=o("bigbird_pegasus"),IWe=o(" \u2014 "),dS=a("a"),NWe=o("BigBirdPegasusConfig"),qWe=o(" (BigBird-Pegasus model)"),jWe=l(),Of=a("li"),_te=a("strong"),DWe=o("blenderbot"),GWe=o(" \u2014 "),cS=a("a"),OWe=o("BlenderbotConfig"),VWe=o(" (Blenderbot model)"),XWe=l(),Vf=a("li"),bte=a("strong"),zWe=o("blenderbot-small"),WWe=o(" \u2014 "),fS=a("a"),QWe=o("BlenderbotSmallConfig"),HWe=o(" (BlenderbotSmall model)"),UWe=l(),Xf=a("li"),vte=a("strong"),JWe=o("bloom"),YWe=o(" \u2014 "),mS=a("a"),KWe=o("BloomConfig"),ZWe=o(" (BLOOM model)"),eQe=l(),zf=a("li"),Fte=a("strong"),oQe=o("camembert"),rQe=o(" \u2014 "),gS=a("a"),tQe=o("CamembertConfig"),aQe=o(" (CamemBERT model)"),nQe=l(),Wf=a("li"),Tte=a("strong"),sQe=o("canine"),lQe=o(" \u2014 "),hS=a("a"),iQe=o("CanineConfig"),dQe=o(" (CANINE model)"),cQe=l(),Qf=a("li"),Mte=a("strong"),fQe=o("clip"),mQe=o(" \u2014 "),pS=a("a"),gQe=o("CLIPConfig"),hQe=o(" (CLIP model)"),pQe=l(),Hf=a("li"),Ete=a("strong"),uQe=o("codegen"),_Qe=o(" \u2014 "),uS=a("a"),bQe=o("CodeGenConfig"),vQe=o(" (CodeGen model)"),FQe=l(),Uf=a("li"),Cte=a("strong"),TQe=o("convbert"),MQe=o(" \u2014 "),_S=a("a"),EQe=o("ConvBertConfig"),CQe=o(" (ConvBERT model)"),wQe=l(),Jf=a("li"),wte=a("strong"),AQe=o("convnext"),LQe=o(" \u2014 "),bS=a("a"),yQe=o("ConvNextConfig"),xQe=o(" (ConvNeXT model)"),$Qe=l(),Yf=a("li"),Ate=a("strong"),kQe=o("ctrl"),SQe=o(" \u2014 "),vS=a("a"),RQe=o("CTRLConfig"),PQe=o(" (CTRL model)"),BQe=l(),Kf=a("li"),Lte=a("strong"),IQe=o("cvt"),NQe=o(" \u2014 "),FS=a("a"),qQe=o("CvtConfig"),jQe=o(" (CvT model)"),DQe=l(),Zf=a("li"),yte=a("strong"),GQe=o("data2vec-audio"),OQe=o(" \u2014 "),TS=a("a"),VQe=o("Data2VecAudioConfig"),XQe=o(" (Data2VecAudio model)"),zQe=l(),em=a("li"),xte=a("strong"),WQe=o("data2vec-text"),QQe=o(" \u2014 "),MS=a("a"),HQe=o("Data2VecTextConfig"),UQe=o(" (Data2VecText model)"),JQe=l(),om=a("li"),$te=a("strong"),YQe=o("data2vec-vision"),KQe=o(" \u2014 "),ES=a("a"),ZQe=o("Data2VecVisionConfig"),eHe=o(" (Data2VecVision model)"),oHe=l(),rm=a("li"),kte=a("strong"),rHe=o("deberta"),tHe=o(" \u2014 "),CS=a("a"),aHe=o("DebertaConfig"),nHe=o(" (DeBERTa model)"),sHe=l(),tm=a("li"),Ste=a("strong"),lHe=o("deberta-v2"),iHe=o(" \u2014 "),wS=a("a"),dHe=o("DebertaV2Config"),cHe=o(" (DeBERTa-v2 model)"),fHe=l(),am=a("li"),Rte=a("strong"),mHe=o("decision_transformer"),gHe=o(" \u2014 "),AS=a("a"),hHe=o("DecisionTransformerConfig"),pHe=o(" (Decision Transformer model)"),uHe=l(),nm=a("li"),Pte=a("strong"),_He=o("deit"),bHe=o(" \u2014 "),LS=a("a"),vHe=o("DeiTConfig"),FHe=o(" (DeiT model)"),THe=l(),sm=a("li"),Bte=a("strong"),MHe=o("detr"),EHe=o(" \u2014 "),yS=a("a"),CHe=o("DetrConfig"),wHe=o(" (DETR model)"),AHe=l(),lm=a("li"),Ite=a("strong"),LHe=o("distilbert"),yHe=o(" \u2014 "),xS=a("a"),xHe=o("DistilBertConfig"),$He=o(" (DistilBERT model)"),kHe=l(),im=a("li"),Nte=a("strong"),SHe=o("dpr"),RHe=o(" \u2014 "),$S=a("a"),PHe=o("DPRConfig"),BHe=o(" (DPR model)"),IHe=l(),dm=a("li"),qte=a("strong"),NHe=o("dpt"),qHe=o(" \u2014 "),kS=a("a"),jHe=o("DPTConfig"),DHe=o(" (DPT model)"),GHe=l(),cm=a("li"),jte=a("strong"),OHe=o("electra"),VHe=o(" \u2014 "),SS=a("a"),XHe=o("ElectraConfig"),zHe=o(" (ELECTRA model)"),WHe=l(),fm=a("li"),Dte=a("strong"),QHe=o("encoder-decoder"),HHe=o(" \u2014 "),RS=a("a"),UHe=o("EncoderDecoderConfig"),JHe=o(" (Encoder decoder model)"),YHe=l(),mm=a("li"),Gte=a("strong"),KHe=o("flaubert"),ZHe=o(" \u2014 "),PS=a("a"),eUe=o("FlaubertConfig"),oUe=o(" (FlauBERT model)"),rUe=l(),gm=a("li"),Ote=a("strong"),tUe=o("flava"),aUe=o(" \u2014 "),BS=a("a"),nUe=o("FlavaConfig"),sUe=o(" (FLAVA model)"),lUe=l(),hm=a("li"),Vte=a("strong"),iUe=o("fnet"),dUe=o(" \u2014 "),IS=a("a"),cUe=o("FNetConfig"),fUe=o(" (FNet model)"),mUe=l(),pm=a("li"),Xte=a("strong"),gUe=o("fsmt"),hUe=o(" \u2014 "),NS=a("a"),pUe=o("FSMTConfig"),uUe=o(" (FairSeq Machine-Translation model)"),_Ue=l(),um=a("li"),zte=a("strong"),bUe=o("funnel"),vUe=o(" \u2014 "),qS=a("a"),FUe=o("FunnelConfig"),TUe=o(" (Funnel Transformer model)"),MUe=l(),_m=a("li"),Wte=a("strong"),EUe=o("glpn"),CUe=o(" \u2014 "),jS=a("a"),wUe=o("GLPNConfig"),AUe=o(" (GLPN model)"),LUe=l(),bm=a("li"),Qte=a("strong"),yUe=o("gpt2"),xUe=o(" \u2014 "),DS=a("a"),$Ue=o("GPT2Config"),kUe=o(" (OpenAI GPT-2 model)"),SUe=l(),vm=a("li"),Hte=a("strong"),RUe=o("gpt_neo"),PUe=o(" \u2014 "),GS=a("a"),BUe=o("GPTNeoConfig"),IUe=o(" (GPT Neo model)"),NUe=l(),Fm=a("li"),Ute=a("strong"),qUe=o("gpt_neox"),jUe=o(" \u2014 "),OS=a("a"),DUe=o("GPTNeoXConfig"),GUe=o(" (GPT NeoX model)"),OUe=l(),Tm=a("li"),Jte=a("strong"),VUe=o("gptj"),XUe=o(" \u2014 "),VS=a("a"),zUe=o("GPTJConfig"),WUe=o(" (GPT-J model)"),QUe=l(),Mm=a("li"),Yte=a("strong"),HUe=o("hubert"),UUe=o(" \u2014 "),XS=a("a"),JUe=o("HubertConfig"),YUe=o(" (Hubert model)"),KUe=l(),Em=a("li"),Kte=a("strong"),ZUe=o("ibert"),eJe=o(" \u2014 "),zS=a("a"),oJe=o("IBertConfig"),rJe=o(" (I-BERT model)"),tJe=l(),Cm=a("li"),Zte=a("strong"),aJe=o("imagegpt"),nJe=o(" \u2014 "),WS=a("a"),sJe=o("ImageGPTConfig"),lJe=o(" (ImageGPT model)"),iJe=l(),wm=a("li"),eae=a("strong"),dJe=o("layoutlm"),cJe=o(" \u2014 "),QS=a("a"),fJe=o("LayoutLMConfig"),mJe=o(" (LayoutLM model)"),gJe=l(),Am=a("li"),oae=a("strong"),hJe=o("layoutlmv2"),pJe=o(" \u2014 "),HS=a("a"),uJe=o("LayoutLMv2Config"),_Je=o(" (LayoutLMv2 model)"),bJe=l(),Lm=a("li"),rae=a("strong"),vJe=o("layoutlmv3"),FJe=o(" \u2014 "),US=a("a"),TJe=o("LayoutLMv3Config"),MJe=o(" (LayoutLMv3 model)"),EJe=l(),ym=a("li"),tae=a("strong"),CJe=o("led"),wJe=o(" \u2014 "),JS=a("a"),AJe=o("LEDConfig"),LJe=o(" (LED model)"),yJe=l(),xm=a("li"),aae=a("strong"),xJe=o("levit"),$Je=o(" \u2014 "),YS=a("a"),kJe=o("LevitConfig"),SJe=o(" (LeViT model)"),RJe=l(),$m=a("li"),nae=a("strong"),PJe=o("longformer"),BJe=o(" \u2014 "),KS=a("a"),IJe=o("LongformerConfig"),NJe=o(" (Longformer model)"),qJe=l(),km=a("li"),sae=a("strong"),jJe=o("longt5"),DJe=o(" \u2014 "),ZS=a("a"),GJe=o("LongT5Config"),OJe=o(" (LongT5 model)"),VJe=l(),Sm=a("li"),lae=a("strong"),XJe=o("luke"),zJe=o(" \u2014 "),eR=a("a"),WJe=o("LukeConfig"),QJe=o(" (LUKE model)"),HJe=l(),Rm=a("li"),iae=a("strong"),UJe=o("lxmert"),JJe=o(" \u2014 "),oR=a("a"),YJe=o("LxmertConfig"),KJe=o(" (LXMERT model)"),ZJe=l(),Pm=a("li"),dae=a("strong"),eYe=o("m2m_100"),oYe=o(" \u2014 "),rR=a("a"),rYe=o("M2M100Config"),tYe=o(" (M2M100 model)"),aYe=l(),Bm=a("li"),cae=a("strong"),nYe=o("marian"),sYe=o(" \u2014 "),tR=a("a"),lYe=o("MarianConfig"),iYe=o(" (Marian model)"),dYe=l(),Im=a("li"),fae=a("strong"),cYe=o("maskformer"),fYe=o(" \u2014 "),aR=a("a"),mYe=o("MaskFormerConfig"),gYe=o(" (MaskFormer model)"),hYe=l(),Nm=a("li"),mae=a("strong"),pYe=o("mbart"),uYe=o(" \u2014 "),nR=a("a"),_Ye=o("MBartConfig"),bYe=o(" (mBART model)"),vYe=l(),qm=a("li"),gae=a("strong"),FYe=o("mctct"),TYe=o(" \u2014 "),sR=a("a"),MYe=o("MCTCTConfig"),EYe=o(" (M-CTC-T model)"),CYe=l(),jm=a("li"),hae=a("strong"),wYe=o("megatron-bert"),AYe=o(" \u2014 "),lR=a("a"),LYe=o("MegatronBertConfig"),yYe=o(" (Megatron-BERT model)"),xYe=l(),Dm=a("li"),pae=a("strong"),$Ye=o("mobilebert"),kYe=o(" \u2014 "),iR=a("a"),SYe=o("MobileBertConfig"),RYe=o(" (MobileBERT model)"),PYe=l(),Gm=a("li"),uae=a("strong"),BYe=o("mpnet"),IYe=o(" \u2014 "),dR=a("a"),NYe=o("MPNetConfig"),qYe=o(" (MPNet model)"),jYe=l(),Om=a("li"),_ae=a("strong"),DYe=o("mt5"),GYe=o(" \u2014 "),cR=a("a"),OYe=o("MT5Config"),VYe=o(" (MT5 model)"),XYe=l(),Vm=a("li"),bae=a("strong"),zYe=o("nystromformer"),WYe=o(" \u2014 "),fR=a("a"),QYe=o("NystromformerConfig"),HYe=o(" (Nystr\xF6mformer model)"),UYe=l(),Xm=a("li"),vae=a("strong"),JYe=o("openai-gpt"),YYe=o(" \u2014 "),mR=a("a"),KYe=o("OpenAIGPTConfig"),ZYe=o(" (OpenAI GPT model)"),eKe=l(),zm=a("li"),Fae=a("strong"),oKe=o("opt"),rKe=o(" \u2014 "),gR=a("a"),tKe=o("OPTConfig"),aKe=o(" (OPT model)"),nKe=l(),Wm=a("li"),Tae=a("strong"),sKe=o("pegasus"),lKe=o(" \u2014 "),hR=a("a"),iKe=o("PegasusConfig"),dKe=o(" (Pegasus model)"),cKe=l(),Qm=a("li"),Mae=a("strong"),fKe=o("perceiver"),mKe=o(" \u2014 "),pR=a("a"),gKe=o("PerceiverConfig"),hKe=o(" (Perceiver model)"),pKe=l(),Hm=a("li"),Eae=a("strong"),uKe=o("plbart"),_Ke=o(" \u2014 "),uR=a("a"),bKe=o("PLBartConfig"),vKe=o(" (PLBart model)"),FKe=l(),Um=a("li"),Cae=a("strong"),TKe=o("poolformer"),MKe=o(" \u2014 "),_R=a("a"),EKe=o("PoolFormerConfig"),CKe=o(" (PoolFormer model)"),wKe=l(),Jm=a("li"),wae=a("strong"),AKe=o("prophetnet"),LKe=o(" \u2014 "),bR=a("a"),yKe=o("ProphetNetConfig"),xKe=o(" (ProphetNet model)"),$Ke=l(),Ym=a("li"),Aae=a("strong"),kKe=o("qdqbert"),SKe=o(" \u2014 "),vR=a("a"),RKe=o("QDQBertConfig"),PKe=o(" (QDQBert model)"),BKe=l(),Km=a("li"),Lae=a("strong"),IKe=o("rag"),NKe=o(" \u2014 "),FR=a("a"),qKe=o("RagConfig"),jKe=o(" (RAG model)"),DKe=l(),Zm=a("li"),yae=a("strong"),GKe=o("realm"),OKe=o(" \u2014 "),TR=a("a"),VKe=o("RealmConfig"),XKe=o(" (REALM model)"),zKe=l(),eg=a("li"),xae=a("strong"),WKe=o("reformer"),QKe=o(" \u2014 "),MR=a("a"),HKe=o("ReformerConfig"),UKe=o(" (Reformer model)"),JKe=l(),og=a("li"),$ae=a("strong"),YKe=o("regnet"),KKe=o(" \u2014 "),ER=a("a"),ZKe=o("RegNetConfig"),eZe=o(" (RegNet model)"),oZe=l(),rg=a("li"),kae=a("strong"),rZe=o("rembert"),tZe=o(" \u2014 "),CR=a("a"),aZe=o("RemBertConfig"),nZe=o(" (RemBERT model)"),sZe=l(),tg=a("li"),Sae=a("strong"),lZe=o("resnet"),iZe=o(" \u2014 "),wR=a("a"),dZe=o("ResNetConfig"),cZe=o(" (ResNet model)"),fZe=l(),ag=a("li"),Rae=a("strong"),mZe=o("retribert"),gZe=o(" \u2014 "),AR=a("a"),hZe=o("RetriBertConfig"),pZe=o(" (RetriBERT model)"),uZe=l(),ng=a("li"),Pae=a("strong"),_Ze=o("roberta"),bZe=o(" \u2014 "),LR=a("a"),vZe=o("RobertaConfig"),FZe=o(" (RoBERTa model)"),TZe=l(),sg=a("li"),Bae=a("strong"),MZe=o("roformer"),EZe=o(" \u2014 "),yR=a("a"),CZe=o("RoFormerConfig"),wZe=o(" (RoFormer model)"),AZe=l(),lg=a("li"),Iae=a("strong"),LZe=o("segformer"),yZe=o(" \u2014 "),xR=a("a"),xZe=o("SegformerConfig"),$Ze=o(" (SegFormer model)"),kZe=l(),ig=a("li"),Nae=a("strong"),SZe=o("sew"),RZe=o(" \u2014 "),$R=a("a"),PZe=o("SEWConfig"),BZe=o(" (SEW model)"),IZe=l(),dg=a("li"),qae=a("strong"),NZe=o("sew-d"),qZe=o(" \u2014 "),kR=a("a"),jZe=o("SEWDConfig"),DZe=o(" (SEW-D model)"),GZe=l(),cg=a("li"),jae=a("strong"),OZe=o("speech-encoder-decoder"),VZe=o(" \u2014 "),SR=a("a"),XZe=o("SpeechEncoderDecoderConfig"),zZe=o(" (Speech Encoder decoder model)"),WZe=l(),fg=a("li"),Dae=a("strong"),QZe=o("speech_to_text"),HZe=o(" \u2014 "),RR=a("a"),UZe=o("Speech2TextConfig"),JZe=o(" (Speech2Text model)"),YZe=l(),mg=a("li"),Gae=a("strong"),KZe=o("speech_to_text_2"),ZZe=o(" \u2014 "),PR=a("a"),eeo=o("Speech2Text2Config"),oeo=o(" (Speech2Text2 model)"),reo=l(),gg=a("li"),Oae=a("strong"),teo=o("splinter"),aeo=o(" \u2014 "),BR=a("a"),neo=o("SplinterConfig"),seo=o(" (Splinter model)"),leo=l(),hg=a("li"),Vae=a("strong"),ieo=o("squeezebert"),deo=o(" \u2014 "),IR=a("a"),ceo=o("SqueezeBertConfig"),feo=o(" (SqueezeBERT model)"),meo=l(),pg=a("li"),Xae=a("strong"),geo=o("swin"),heo=o(" \u2014 "),NR=a("a"),peo=o("SwinConfig"),ueo=o(" (Swin Transformer model)"),_eo=l(),ug=a("li"),zae=a("strong"),beo=o("t5"),veo=o(" \u2014 "),qR=a("a"),Feo=o("T5Config"),Teo=o(" (T5 model)"),Meo=l(),_g=a("li"),Wae=a("strong"),Eeo=o("tapas"),Ceo=o(" \u2014 "),jR=a("a"),weo=o("TapasConfig"),Aeo=o(" (TAPAS model)"),Leo=l(),bg=a("li"),Qae=a("strong"),yeo=o("trajectory_transformer"),xeo=o(" \u2014 "),DR=a("a"),$eo=o("TrajectoryTransformerConfig"),keo=o(" (Trajectory Transformer model)"),Seo=l(),vg=a("li"),Hae=a("strong"),Reo=o("transfo-xl"),Peo=o(" \u2014 "),GR=a("a"),Beo=o("TransfoXLConfig"),Ieo=o(" (Transformer-XL model)"),Neo=l(),Fg=a("li"),Uae=a("strong"),qeo=o("trocr"),jeo=o(" \u2014 "),OR=a("a"),Deo=o("TrOCRConfig"),Geo=o(" (TrOCR model)"),Oeo=l(),Tg=a("li"),Jae=a("strong"),Veo=o("unispeech"),Xeo=o(" \u2014 "),VR=a("a"),zeo=o("UniSpeechConfig"),Weo=o(" (UniSpeech model)"),Qeo=l(),Mg=a("li"),Yae=a("strong"),Heo=o("unispeech-sat"),Ueo=o(" \u2014 "),XR=a("a"),Jeo=o("UniSpeechSatConfig"),Yeo=o(" (UniSpeechSat model)"),Keo=l(),Eg=a("li"),Kae=a("strong"),Zeo=o("van"),eoo=o(" \u2014 "),zR=a("a"),ooo=o("VanConfig"),roo=o(" (VAN model)"),too=l(),Cg=a("li"),Zae=a("strong"),aoo=o("vilt"),noo=o(" \u2014 "),WR=a("a"),soo=o("ViltConfig"),loo=o(" (ViLT model)"),ioo=l(),wg=a("li"),ene=a("strong"),doo=o("vision-encoder-decoder"),coo=o(" \u2014 "),QR=a("a"),foo=o("VisionEncoderDecoderConfig"),moo=o(" (Vision Encoder decoder model)"),goo=l(),Ag=a("li"),one=a("strong"),hoo=o("vision-text-dual-encoder"),poo=o(" \u2014 "),HR=a("a"),uoo=o("VisionTextDualEncoderConfig"),_oo=o(" (VisionTextDualEncoder model)"),boo=l(),Lg=a("li"),rne=a("strong"),voo=o("visual_bert"),Foo=o(" \u2014 "),UR=a("a"),Too=o("VisualBertConfig"),Moo=o(" (VisualBERT model)"),Eoo=l(),yg=a("li"),tne=a("strong"),Coo=o("vit"),woo=o(" \u2014 "),JR=a("a"),Aoo=o("ViTConfig"),Loo=o(" (ViT model)"),yoo=l(),xg=a("li"),ane=a("strong"),xoo=o("vit_mae"),$oo=o(" \u2014 "),YR=a("a"),koo=o("ViTMAEConfig"),Soo=o(" (ViTMAE model)"),Roo=l(),$g=a("li"),nne=a("strong"),Poo=o("wav2vec2"),Boo=o(" \u2014 "),KR=a("a"),Ioo=o("Wav2Vec2Config"),Noo=o(" (Wav2Vec2 model)"),qoo=l(),kg=a("li"),sne=a("strong"),joo=o("wav2vec2-conformer"),Doo=o(" \u2014 "),ZR=a("a"),Goo=o("Wav2Vec2ConformerConfig"),Ooo=o(" (Wav2Vec2-Conformer model)"),Voo=l(),Sg=a("li"),lne=a("strong"),Xoo=o("wavlm"),zoo=o(" \u2014 "),eP=a("a"),Woo=o("WavLMConfig"),Qoo=o(" (WavLM model)"),Hoo=l(),Rg=a("li"),ine=a("strong"),Uoo=o("xglm"),Joo=o(" \u2014 "),oP=a("a"),Yoo=o("XGLMConfig"),Koo=o(" (XGLM model)"),Zoo=l(),Pg=a("li"),dne=a("strong"),ero=o("xlm"),oro=o(" \u2014 "),rP=a("a"),rro=o("XLMConfig"),tro=o(" (XLM model)"),aro=l(),Bg=a("li"),cne=a("strong"),nro=o("xlm-prophetnet"),sro=o(" \u2014 "),tP=a("a"),lro=o("XLMProphetNetConfig"),iro=o(" (XLM-ProphetNet model)"),dro=l(),Ig=a("li"),fne=a("strong"),cro=o("xlm-roberta"),fro=o(" \u2014 "),aP=a("a"),mro=o("XLMRobertaConfig"),gro=o(" (XLM-RoBERTa model)"),hro=l(),Ng=a("li"),mne=a("strong"),pro=o("xlm-roberta-xl"),uro=o(" \u2014 "),nP=a("a"),_ro=o("XLMRobertaXLConfig"),bro=o(" (XLM-RoBERTa-XL model)"),vro=l(),qg=a("li"),gne=a("strong"),Fro=o("xlnet"),Tro=o(" \u2014 "),sP=a("a"),Mro=o("XLNetConfig"),Ero=o(" (XLNet model)"),Cro=l(),jg=a("li"),hne=a("strong"),wro=o("yolos"),Aro=o(" \u2014 "),lP=a("a"),Lro=o("YolosConfig"),yro=o(" (YOLOS model)"),xro=l(),Dg=a("li"),pne=a("strong"),$ro=o("yoso"),kro=o(" \u2014 "),iP=a("a"),Sro=o("YosoConfig"),Rro=o(" (YOSO model)"),Pro=l(),F(Gg.$$.fragment),Bro=l(),Og=a("div"),F($L.$$.fragment),Iro=l(),une=a("p"),Nro=o("Register a new configuration for this class."),MGe=l(),ki=a("h2"),Vg=a("a"),_ne=a("span"),F(kL.$$.fragment),qro=l(),bne=a("span"),jro=o("AutoTokenizer"),EGe=l(),Ao=a("div"),F(SL.$$.fragment),Dro=l(),RL=a("p"),Gro=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),dP=a("a"),Oro=o("AutoTokenizer.from_pretrained()"),Vro=o(" class method."),Xro=l(),PL=a("p"),zro=o("This class cannot be instantiated directly using "),vne=a("code"),Wro=o("__init__()"),Qro=o(" (throws an error)."),Hro=l(),Ar=a("div"),F(BL.$$.fragment),Uro=l(),Fne=a("p"),Jro=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Yro=l(),$a=a("p"),Kro=o("The tokenizer class to instantiate is selected based on the "),Tne=a("code"),Zro=o("model_type"),eto=o(` property of the config object (either
passed as an argument or loaded from `),Mne=a("code"),oto=o("pretrained_model_name_or_path"),rto=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ene=a("code"),tto=o("pretrained_model_name_or_path"),ato=o(":"),nto=l(),k=a("ul"),Nn=a("li"),Cne=a("strong"),sto=o("albert"),lto=o(" \u2014 "),cP=a("a"),ito=o("AlbertTokenizer"),dto=o(" or "),fP=a("a"),cto=o("AlbertTokenizerFast"),fto=o(" (ALBERT model)"),mto=l(),qn=a("li"),wne=a("strong"),gto=o("bart"),hto=o(" \u2014 "),mP=a("a"),pto=o("BartTokenizer"),uto=o(" or "),gP=a("a"),_to=o("BartTokenizerFast"),bto=o(" (BART model)"),vto=l(),jn=a("li"),Ane=a("strong"),Fto=o("barthez"),Tto=o(" \u2014 "),hP=a("a"),Mto=o("BarthezTokenizer"),Eto=o(" or "),pP=a("a"),Cto=o("BarthezTokenizerFast"),wto=o(" (BARThez model)"),Ato=l(),Xg=a("li"),Lne=a("strong"),Lto=o("bartpho"),yto=o(" \u2014 "),uP=a("a"),xto=o("BartphoTokenizer"),$to=o(" (BARTpho model)"),kto=l(),Dn=a("li"),yne=a("strong"),Sto=o("bert"),Rto=o(" \u2014 "),_P=a("a"),Pto=o("BertTokenizer"),Bto=o(" or "),bP=a("a"),Ito=o("BertTokenizerFast"),Nto=o(" (BERT model)"),qto=l(),zg=a("li"),xne=a("strong"),jto=o("bert-generation"),Dto=o(" \u2014 "),vP=a("a"),Gto=o("BertGenerationTokenizer"),Oto=o(" (Bert Generation model)"),Vto=l(),Wg=a("li"),$ne=a("strong"),Xto=o("bert-japanese"),zto=o(" \u2014 "),FP=a("a"),Wto=o("BertJapaneseTokenizer"),Qto=o(" (BertJapanese model)"),Hto=l(),Qg=a("li"),kne=a("strong"),Uto=o("bertweet"),Jto=o(" \u2014 "),TP=a("a"),Yto=o("BertweetTokenizer"),Kto=o(" (BERTweet model)"),Zto=l(),Gn=a("li"),Sne=a("strong"),eao=o("big_bird"),oao=o(" \u2014 "),MP=a("a"),rao=o("BigBirdTokenizer"),tao=o(" or "),EP=a("a"),aao=o("BigBirdTokenizerFast"),nao=o(" (BigBird model)"),sao=l(),On=a("li"),Rne=a("strong"),lao=o("bigbird_pegasus"),iao=o(" \u2014 "),CP=a("a"),dao=o("PegasusTokenizer"),cao=o(" or "),wP=a("a"),fao=o("PegasusTokenizerFast"),mao=o(" (BigBird-Pegasus model)"),gao=l(),Vn=a("li"),Pne=a("strong"),hao=o("blenderbot"),pao=o(" \u2014 "),AP=a("a"),uao=o("BlenderbotTokenizer"),_ao=o(" or "),LP=a("a"),bao=o("BlenderbotTokenizerFast"),vao=o(" (Blenderbot model)"),Fao=l(),Hg=a("li"),Bne=a("strong"),Tao=o("blenderbot-small"),Mao=o(" \u2014 "),yP=a("a"),Eao=o("BlenderbotSmallTokenizer"),Cao=o(" (BlenderbotSmall model)"),wao=l(),Ug=a("li"),Ine=a("strong"),Aao=o("bloom"),Lao=o(" \u2014 "),xP=a("a"),yao=o("BloomTokenizerFast"),xao=o(" (BLOOM model)"),$ao=l(),Jg=a("li"),Nne=a("strong"),kao=o("byt5"),Sao=o(" \u2014 "),$P=a("a"),Rao=o("ByT5Tokenizer"),Pao=o(" (ByT5 model)"),Bao=l(),Xn=a("li"),qne=a("strong"),Iao=o("camembert"),Nao=o(" \u2014 "),kP=a("a"),qao=o("CamembertTokenizer"),jao=o(" or "),SP=a("a"),Dao=o("CamembertTokenizerFast"),Gao=o(" (CamemBERT model)"),Oao=l(),Yg=a("li"),jne=a("strong"),Vao=o("canine"),Xao=o(" \u2014 "),RP=a("a"),zao=o("CanineTokenizer"),Wao=o(" (CANINE model)"),Qao=l(),zn=a("li"),Dne=a("strong"),Hao=o("clip"),Uao=o(" \u2014 "),PP=a("a"),Jao=o("CLIPTokenizer"),Yao=o(" or "),BP=a("a"),Kao=o("CLIPTokenizerFast"),Zao=o(" (CLIP model)"),eno=l(),Wn=a("li"),Gne=a("strong"),ono=o("codegen"),rno=o(" \u2014 "),IP=a("a"),tno=o("CodeGenTokenizer"),ano=o(" or "),NP=a("a"),nno=o("CodeGenTokenizerFast"),sno=o(" (CodeGen model)"),lno=l(),Qn=a("li"),One=a("strong"),ino=o("convbert"),dno=o(" \u2014 "),qP=a("a"),cno=o("ConvBertTokenizer"),fno=o(" or "),jP=a("a"),mno=o("ConvBertTokenizerFast"),gno=o(" (ConvBERT model)"),hno=l(),Hn=a("li"),Vne=a("strong"),pno=o("cpm"),uno=o(" \u2014 "),DP=a("a"),_no=o("CpmTokenizer"),bno=o(" or "),GP=a("a"),vno=o("CpmTokenizerFast"),Fno=o(" (CPM model)"),Tno=l(),Kg=a("li"),Xne=a("strong"),Mno=o("ctrl"),Eno=o(" \u2014 "),OP=a("a"),Cno=o("CTRLTokenizer"),wno=o(" (CTRL model)"),Ano=l(),Un=a("li"),zne=a("strong"),Lno=o("data2vec-text"),yno=o(" \u2014 "),VP=a("a"),xno=o("RobertaTokenizer"),$no=o(" or "),XP=a("a"),kno=o("RobertaTokenizerFast"),Sno=o(" (Data2VecText model)"),Rno=l(),Jn=a("li"),Wne=a("strong"),Pno=o("deberta"),Bno=o(" \u2014 "),zP=a("a"),Ino=o("DebertaTokenizer"),Nno=o(" or "),WP=a("a"),qno=o("DebertaTokenizerFast"),jno=o(" (DeBERTa model)"),Dno=l(),Yn=a("li"),Qne=a("strong"),Gno=o("deberta-v2"),Ono=o(" \u2014 "),QP=a("a"),Vno=o("DebertaV2Tokenizer"),Xno=o(" or "),HP=a("a"),zno=o("DebertaV2TokenizerFast"),Wno=o(" (DeBERTa-v2 model)"),Qno=l(),Kn=a("li"),Hne=a("strong"),Hno=o("distilbert"),Uno=o(" \u2014 "),UP=a("a"),Jno=o("DistilBertTokenizer"),Yno=o(" or "),JP=a("a"),Kno=o("DistilBertTokenizerFast"),Zno=o(" (DistilBERT model)"),eso=l(),Zn=a("li"),Une=a("strong"),oso=o("dpr"),rso=o(" \u2014 "),YP=a("a"),tso=o("DPRQuestionEncoderTokenizer"),aso=o(" or "),KP=a("a"),nso=o("DPRQuestionEncoderTokenizerFast"),sso=o(" (DPR model)"),lso=l(),es=a("li"),Jne=a("strong"),iso=o("electra"),dso=o(" \u2014 "),ZP=a("a"),cso=o("ElectraTokenizer"),fso=o(" or "),eB=a("a"),mso=o("ElectraTokenizerFast"),gso=o(" (ELECTRA model)"),hso=l(),Zg=a("li"),Yne=a("strong"),pso=o("flaubert"),uso=o(" \u2014 "),oB=a("a"),_so=o("FlaubertTokenizer"),bso=o(" (FlauBERT model)"),vso=l(),os=a("li"),Kne=a("strong"),Fso=o("fnet"),Tso=o(" \u2014 "),rB=a("a"),Mso=o("FNetTokenizer"),Eso=o(" or "),tB=a("a"),Cso=o("FNetTokenizerFast"),wso=o(" (FNet model)"),Aso=l(),eh=a("li"),Zne=a("strong"),Lso=o("fsmt"),yso=o(" \u2014 "),aB=a("a"),xso=o("FSMTTokenizer"),$so=o(" (FairSeq Machine-Translation model)"),kso=l(),rs=a("li"),ese=a("strong"),Sso=o("funnel"),Rso=o(" \u2014 "),nB=a("a"),Pso=o("FunnelTokenizer"),Bso=o(" or "),sB=a("a"),Iso=o("FunnelTokenizerFast"),Nso=o(" (Funnel Transformer model)"),qso=l(),ts=a("li"),ose=a("strong"),jso=o("gpt2"),Dso=o(" \u2014 "),lB=a("a"),Gso=o("GPT2Tokenizer"),Oso=o(" or "),iB=a("a"),Vso=o("GPT2TokenizerFast"),Xso=o(" (OpenAI GPT-2 model)"),zso=l(),as=a("li"),rse=a("strong"),Wso=o("gpt_neo"),Qso=o(" \u2014 "),dB=a("a"),Hso=o("GPT2Tokenizer"),Uso=o(" or "),cB=a("a"),Jso=o("GPT2TokenizerFast"),Yso=o(" (GPT Neo model)"),Kso=l(),oh=a("li"),tse=a("strong"),Zso=o("gpt_neox"),elo=o(" \u2014 "),fB=a("a"),olo=o("GPTNeoXTokenizerFast"),rlo=o(" (GPT NeoX model)"),tlo=l(),ns=a("li"),ase=a("strong"),alo=o("gptj"),nlo=o(" \u2014 "),mB=a("a"),slo=o("GPT2Tokenizer"),llo=o(" or "),gB=a("a"),ilo=o("GPT2TokenizerFast"),dlo=o(" (GPT-J model)"),clo=l(),ss=a("li"),nse=a("strong"),flo=o("herbert"),mlo=o(" \u2014 "),hB=a("a"),glo=o("HerbertTokenizer"),hlo=o(" or "),pB=a("a"),plo=o("HerbertTokenizerFast"),ulo=o(" (HerBERT model)"),_lo=l(),rh=a("li"),sse=a("strong"),blo=o("hubert"),vlo=o(" \u2014 "),uB=a("a"),Flo=o("Wav2Vec2CTCTokenizer"),Tlo=o(" (Hubert model)"),Mlo=l(),ls=a("li"),lse=a("strong"),Elo=o("ibert"),Clo=o(" \u2014 "),_B=a("a"),wlo=o("RobertaTokenizer"),Alo=o(" or "),bB=a("a"),Llo=o("RobertaTokenizerFast"),ylo=o(" (I-BERT model)"),xlo=l(),is=a("li"),ise=a("strong"),$lo=o("layoutlm"),klo=o(" \u2014 "),vB=a("a"),Slo=o("LayoutLMTokenizer"),Rlo=o(" or "),FB=a("a"),Plo=o("LayoutLMTokenizerFast"),Blo=o(" (LayoutLM model)"),Ilo=l(),ds=a("li"),dse=a("strong"),Nlo=o("layoutlmv2"),qlo=o(" \u2014 "),TB=a("a"),jlo=o("LayoutLMv2Tokenizer"),Dlo=o(" or "),MB=a("a"),Glo=o("LayoutLMv2TokenizerFast"),Olo=o(" (LayoutLMv2 model)"),Vlo=l(),cs=a("li"),cse=a("strong"),Xlo=o("layoutlmv3"),zlo=o(" \u2014 "),EB=a("a"),Wlo=o("LayoutLMv3Tokenizer"),Qlo=o(" or "),CB=a("a"),Hlo=o("LayoutLMv3TokenizerFast"),Ulo=o(" (LayoutLMv3 model)"),Jlo=l(),fs=a("li"),fse=a("strong"),Ylo=o("layoutxlm"),Klo=o(" \u2014 "),wB=a("a"),Zlo=o("LayoutXLMTokenizer"),eio=o(" or "),AB=a("a"),oio=o("LayoutXLMTokenizerFast"),rio=o(" (LayoutXLM model)"),tio=l(),ms=a("li"),mse=a("strong"),aio=o("led"),nio=o(" \u2014 "),LB=a("a"),sio=o("LEDTokenizer"),lio=o(" or "),yB=a("a"),iio=o("LEDTokenizerFast"),dio=o(" (LED model)"),cio=l(),gs=a("li"),gse=a("strong"),fio=o("longformer"),mio=o(" \u2014 "),xB=a("a"),gio=o("LongformerTokenizer"),hio=o(" or "),$B=a("a"),pio=o("LongformerTokenizerFast"),uio=o(" (Longformer model)"),_io=l(),hs=a("li"),hse=a("strong"),bio=o("longt5"),vio=o(" \u2014 "),kB=a("a"),Fio=o("T5Tokenizer"),Tio=o(" or "),SB=a("a"),Mio=o("T5TokenizerFast"),Eio=o(" (LongT5 model)"),Cio=l(),th=a("li"),pse=a("strong"),wio=o("luke"),Aio=o(" \u2014 "),RB=a("a"),Lio=o("LukeTokenizer"),yio=o(" (LUKE model)"),xio=l(),ps=a("li"),use=a("strong"),$io=o("lxmert"),kio=o(" \u2014 "),PB=a("a"),Sio=o("LxmertTokenizer"),Rio=o(" or "),BB=a("a"),Pio=o("LxmertTokenizerFast"),Bio=o(" (LXMERT model)"),Iio=l(),ah=a("li"),_se=a("strong"),Nio=o("m2m_100"),qio=o(" \u2014 "),IB=a("a"),jio=o("M2M100Tokenizer"),Dio=o(" (M2M100 model)"),Gio=l(),nh=a("li"),bse=a("strong"),Oio=o("marian"),Vio=o(" \u2014 "),NB=a("a"),Xio=o("MarianTokenizer"),zio=o(" (Marian model)"),Wio=l(),us=a("li"),vse=a("strong"),Qio=o("mbart"),Hio=o(" \u2014 "),qB=a("a"),Uio=o("MBartTokenizer"),Jio=o(" or "),jB=a("a"),Yio=o("MBartTokenizerFast"),Kio=o(" (mBART model)"),Zio=l(),_s=a("li"),Fse=a("strong"),edo=o("mbart50"),odo=o(" \u2014 "),DB=a("a"),rdo=o("MBart50Tokenizer"),tdo=o(" or "),GB=a("a"),ado=o("MBart50TokenizerFast"),ndo=o(" (mBART-50 model)"),sdo=l(),bs=a("li"),Tse=a("strong"),ldo=o("megatron-bert"),ido=o(" \u2014 "),OB=a("a"),ddo=o("BertTokenizer"),cdo=o(" or "),VB=a("a"),fdo=o("BertTokenizerFast"),mdo=o(" (Megatron-BERT model)"),gdo=l(),sh=a("li"),Mse=a("strong"),hdo=o("mluke"),pdo=o(" \u2014 "),XB=a("a"),udo=o("MLukeTokenizer"),_do=o(" (mLUKE model)"),bdo=l(),vs=a("li"),Ese=a("strong"),vdo=o("mobilebert"),Fdo=o(" \u2014 "),zB=a("a"),Tdo=o("MobileBertTokenizer"),Mdo=o(" or "),WB=a("a"),Edo=o("MobileBertTokenizerFast"),Cdo=o(" (MobileBERT model)"),wdo=l(),Fs=a("li"),Cse=a("strong"),Ado=o("mpnet"),Ldo=o(" \u2014 "),QB=a("a"),ydo=o("MPNetTokenizer"),xdo=o(" or "),HB=a("a"),$do=o("MPNetTokenizerFast"),kdo=o(" (MPNet model)"),Sdo=l(),Ts=a("li"),wse=a("strong"),Rdo=o("mt5"),Pdo=o(" \u2014 "),UB=a("a"),Bdo=o("MT5Tokenizer"),Ido=o(" or "),JB=a("a"),Ndo=o("MT5TokenizerFast"),qdo=o(" (MT5 model)"),jdo=l(),Ms=a("li"),Ase=a("strong"),Ddo=o("nystromformer"),Gdo=o(" \u2014 "),YB=a("a"),Odo=o("AlbertTokenizer"),Vdo=o(" or "),KB=a("a"),Xdo=o("AlbertTokenizerFast"),zdo=o(" (Nystr\xF6mformer model)"),Wdo=l(),Es=a("li"),Lse=a("strong"),Qdo=o("openai-gpt"),Hdo=o(" \u2014 "),ZB=a("a"),Udo=o("OpenAIGPTTokenizer"),Jdo=o(" or "),eI=a("a"),Ydo=o("OpenAIGPTTokenizerFast"),Kdo=o(" (OpenAI GPT model)"),Zdo=l(),lh=a("li"),yse=a("strong"),eco=o("opt"),oco=o(" \u2014 "),oI=a("a"),rco=o("GPT2Tokenizer"),tco=o(" (OPT model)"),aco=l(),Cs=a("li"),xse=a("strong"),nco=o("pegasus"),sco=o(" \u2014 "),rI=a("a"),lco=o("PegasusTokenizer"),ico=o(" or "),tI=a("a"),dco=o("PegasusTokenizerFast"),cco=o(" (Pegasus model)"),fco=l(),ih=a("li"),$se=a("strong"),mco=o("perceiver"),gco=o(" \u2014 "),aI=a("a"),hco=o("PerceiverTokenizer"),pco=o(" (Perceiver model)"),uco=l(),dh=a("li"),kse=a("strong"),_co=o("phobert"),bco=o(" \u2014 "),nI=a("a"),vco=o("PhobertTokenizer"),Fco=o(" (PhoBERT model)"),Tco=l(),ch=a("li"),Sse=a("strong"),Mco=o("plbart"),Eco=o(" \u2014 "),sI=a("a"),Cco=o("PLBartTokenizer"),wco=o(" (PLBart model)"),Aco=l(),fh=a("li"),Rse=a("strong"),Lco=o("prophetnet"),yco=o(" \u2014 "),lI=a("a"),xco=o("ProphetNetTokenizer"),$co=o(" (ProphetNet model)"),kco=l(),ws=a("li"),Pse=a("strong"),Sco=o("qdqbert"),Rco=o(" \u2014 "),iI=a("a"),Pco=o("BertTokenizer"),Bco=o(" or "),dI=a("a"),Ico=o("BertTokenizerFast"),Nco=o(" (QDQBert model)"),qco=l(),mh=a("li"),Bse=a("strong"),jco=o("rag"),Dco=o(" \u2014 "),cI=a("a"),Gco=o("RagTokenizer"),Oco=o(" (RAG model)"),Vco=l(),As=a("li"),Ise=a("strong"),Xco=o("realm"),zco=o(" \u2014 "),fI=a("a"),Wco=o("RealmTokenizer"),Qco=o(" or "),mI=a("a"),Hco=o("RealmTokenizerFast"),Uco=o(" (REALM model)"),Jco=l(),Ls=a("li"),Nse=a("strong"),Yco=o("reformer"),Kco=o(" \u2014 "),gI=a("a"),Zco=o("ReformerTokenizer"),efo=o(" or "),hI=a("a"),ofo=o("ReformerTokenizerFast"),rfo=o(" (Reformer model)"),tfo=l(),ys=a("li"),qse=a("strong"),afo=o("rembert"),nfo=o(" \u2014 "),pI=a("a"),sfo=o("RemBertTokenizer"),lfo=o(" or "),uI=a("a"),ifo=o("RemBertTokenizerFast"),dfo=o(" (RemBERT model)"),cfo=l(),xs=a("li"),jse=a("strong"),ffo=o("retribert"),mfo=o(" \u2014 "),_I=a("a"),gfo=o("RetriBertTokenizer"),hfo=o(" or "),bI=a("a"),pfo=o("RetriBertTokenizerFast"),ufo=o(" (RetriBERT model)"),_fo=l(),$s=a("li"),Dse=a("strong"),bfo=o("roberta"),vfo=o(" \u2014 "),vI=a("a"),Ffo=o("RobertaTokenizer"),Tfo=o(" or "),FI=a("a"),Mfo=o("RobertaTokenizerFast"),Efo=o(" (RoBERTa model)"),Cfo=l(),ks=a("li"),Gse=a("strong"),wfo=o("roformer"),Afo=o(" \u2014 "),TI=a("a"),Lfo=o("RoFormerTokenizer"),yfo=o(" or "),MI=a("a"),xfo=o("RoFormerTokenizerFast"),$fo=o(" (RoFormer model)"),kfo=l(),gh=a("li"),Ose=a("strong"),Sfo=o("speech_to_text"),Rfo=o(" \u2014 "),EI=a("a"),Pfo=o("Speech2TextTokenizer"),Bfo=o(" (Speech2Text model)"),Ifo=l(),hh=a("li"),Vse=a("strong"),Nfo=o("speech_to_text_2"),qfo=o(" \u2014 "),CI=a("a"),jfo=o("Speech2Text2Tokenizer"),Dfo=o(" (Speech2Text2 model)"),Gfo=l(),Ss=a("li"),Xse=a("strong"),Ofo=o("splinter"),Vfo=o(" \u2014 "),wI=a("a"),Xfo=o("SplinterTokenizer"),zfo=o(" or "),AI=a("a"),Wfo=o("SplinterTokenizerFast"),Qfo=o(" (Splinter model)"),Hfo=l(),Rs=a("li"),zse=a("strong"),Ufo=o("squeezebert"),Jfo=o(" \u2014 "),LI=a("a"),Yfo=o("SqueezeBertTokenizer"),Kfo=o(" or "),yI=a("a"),Zfo=o("SqueezeBertTokenizerFast"),emo=o(" (SqueezeBERT model)"),omo=l(),Ps=a("li"),Wse=a("strong"),rmo=o("t5"),tmo=o(" \u2014 "),xI=a("a"),amo=o("T5Tokenizer"),nmo=o(" or "),$I=a("a"),smo=o("T5TokenizerFast"),lmo=o(" (T5 model)"),imo=l(),ph=a("li"),Qse=a("strong"),dmo=o("tapas"),cmo=o(" \u2014 "),kI=a("a"),fmo=o("TapasTokenizer"),mmo=o(" (TAPAS model)"),gmo=l(),uh=a("li"),Hse=a("strong"),hmo=o("tapex"),pmo=o(" \u2014 "),SI=a("a"),umo=o("TapexTokenizer"),_mo=o(" (TAPEX model)"),bmo=l(),_h=a("li"),Use=a("strong"),vmo=o("transfo-xl"),Fmo=o(" \u2014 "),RI=a("a"),Tmo=o("TransfoXLTokenizer"),Mmo=o(" (Transformer-XL model)"),Emo=l(),Bs=a("li"),Jse=a("strong"),Cmo=o("vilt"),wmo=o(" \u2014 "),PI=a("a"),Amo=o("BertTokenizer"),Lmo=o(" or "),BI=a("a"),ymo=o("BertTokenizerFast"),xmo=o(" (ViLT model)"),$mo=l(),Is=a("li"),Yse=a("strong"),kmo=o("visual_bert"),Smo=o(" \u2014 "),II=a("a"),Rmo=o("BertTokenizer"),Pmo=o(" or "),NI=a("a"),Bmo=o("BertTokenizerFast"),Imo=o(" (VisualBERT model)"),Nmo=l(),bh=a("li"),Kse=a("strong"),qmo=o("wav2vec2"),jmo=o(" \u2014 "),qI=a("a"),Dmo=o("Wav2Vec2CTCTokenizer"),Gmo=o(" (Wav2Vec2 model)"),Omo=l(),vh=a("li"),Zse=a("strong"),Vmo=o("wav2vec2-conformer"),Xmo=o(" \u2014 "),jI=a("a"),zmo=o("Wav2Vec2CTCTokenizer"),Wmo=o(" (Wav2Vec2-Conformer model)"),Qmo=l(),Fh=a("li"),ele=a("strong"),Hmo=o("wav2vec2_phoneme"),Umo=o(" \u2014 "),DI=a("a"),Jmo=o("Wav2Vec2PhonemeCTCTokenizer"),Ymo=o(" (Wav2Vec2Phoneme model)"),Kmo=l(),Ns=a("li"),ole=a("strong"),Zmo=o("xglm"),ego=o(" \u2014 "),GI=a("a"),ogo=o("XGLMTokenizer"),rgo=o(" or "),OI=a("a"),tgo=o("XGLMTokenizerFast"),ago=o(" (XGLM model)"),ngo=l(),Th=a("li"),rle=a("strong"),sgo=o("xlm"),lgo=o(" \u2014 "),VI=a("a"),igo=o("XLMTokenizer"),dgo=o(" (XLM model)"),cgo=l(),Mh=a("li"),tle=a("strong"),fgo=o("xlm-prophetnet"),mgo=o(" \u2014 "),XI=a("a"),ggo=o("XLMProphetNetTokenizer"),hgo=o(" (XLM-ProphetNet model)"),pgo=l(),qs=a("li"),ale=a("strong"),ugo=o("xlm-roberta"),_go=o(" \u2014 "),zI=a("a"),bgo=o("XLMRobertaTokenizer"),vgo=o(" or "),WI=a("a"),Fgo=o("XLMRobertaTokenizerFast"),Tgo=o(" (XLM-RoBERTa model)"),Mgo=l(),js=a("li"),nle=a("strong"),Ego=o("xlm-roberta-xl"),Cgo=o(" \u2014 "),QI=a("a"),wgo=o("RobertaTokenizer"),Ago=o(" or "),HI=a("a"),Lgo=o("RobertaTokenizerFast"),ygo=o(" (XLM-RoBERTa-XL model)"),xgo=l(),Ds=a("li"),sle=a("strong"),$go=o("xlnet"),kgo=o(" \u2014 "),UI=a("a"),Sgo=o("XLNetTokenizer"),Rgo=o(" or "),JI=a("a"),Pgo=o("XLNetTokenizerFast"),Bgo=o(" (XLNet model)"),Igo=l(),Gs=a("li"),lle=a("strong"),Ngo=o("yoso"),qgo=o(" \u2014 "),YI=a("a"),jgo=o("AlbertTokenizer"),Dgo=o(" or "),KI=a("a"),Ggo=o("AlbertTokenizerFast"),Ogo=o(" (YOSO model)"),Vgo=l(),F(Eh.$$.fragment),Xgo=l(),Ch=a("div"),F(IL.$$.fragment),zgo=l(),ile=a("p"),Wgo=o("Register a new tokenizer in this mapping."),CGe=l(),Si=a("h2"),wh=a("a"),dle=a("span"),F(NL.$$.fragment),Qgo=l(),cle=a("span"),Hgo=o("AutoFeatureExtractor"),wGe=l(),Lo=a("div"),F(qL.$$.fragment),Ugo=l(),jL=a("p"),Jgo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),ZI=a("a"),Ygo=o("AutoFeatureExtractor.from_pretrained()"),Kgo=o(" class method."),Zgo=l(),DL=a("p"),eho=o("This class cannot be instantiated directly using "),fle=a("code"),oho=o("__init__()"),rho=o(" (throws an error)."),tho=l(),He=a("div"),F(GL.$$.fragment),aho=l(),mle=a("p"),nho=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),sho=l(),ka=a("p"),lho=o("The feature extractor class to instantiate is selected based on the "),gle=a("code"),iho=o("model_type"),dho=o(` property of the config object
(either passed as an argument or loaded from `),hle=a("code"),cho=o("pretrained_model_name_or_path"),fho=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ple=a("code"),mho=o("pretrained_model_name_or_path"),gho=o(":"),hho=l(),Y=a("ul"),Ah=a("li"),ule=a("strong"),pho=o("beit"),uho=o(" \u2014 "),eN=a("a"),_ho=o("BeitFeatureExtractor"),bho=o(" (BEiT model)"),vho=l(),Lh=a("li"),_le=a("strong"),Fho=o("clip"),Tho=o(" \u2014 "),oN=a("a"),Mho=o("CLIPFeatureExtractor"),Eho=o(" (CLIP model)"),Cho=l(),yh=a("li"),ble=a("strong"),who=o("convnext"),Aho=o(" \u2014 "),rN=a("a"),Lho=o("ConvNextFeatureExtractor"),yho=o(" (ConvNeXT model)"),xho=l(),xh=a("li"),vle=a("strong"),$ho=o("cvt"),kho=o(" \u2014 "),tN=a("a"),Sho=o("ConvNextFeatureExtractor"),Rho=o(" (CvT model)"),Pho=l(),$h=a("li"),Fle=a("strong"),Bho=o("data2vec-audio"),Iho=o(" \u2014 "),aN=a("a"),Nho=o("Wav2Vec2FeatureExtractor"),qho=o(" (Data2VecAudio model)"),jho=l(),kh=a("li"),Tle=a("strong"),Dho=o("data2vec-vision"),Gho=o(" \u2014 "),nN=a("a"),Oho=o("BeitFeatureExtractor"),Vho=o(" (Data2VecVision model)"),Xho=l(),Sh=a("li"),Mle=a("strong"),zho=o("deit"),Who=o(" \u2014 "),sN=a("a"),Qho=o("DeiTFeatureExtractor"),Hho=o(" (DeiT model)"),Uho=l(),Rh=a("li"),Ele=a("strong"),Jho=o("detr"),Yho=o(" \u2014 "),lN=a("a"),Kho=o("DetrFeatureExtractor"),Zho=o(" (DETR model)"),epo=l(),Ph=a("li"),Cle=a("strong"),opo=o("dpt"),rpo=o(" \u2014 "),iN=a("a"),tpo=o("DPTFeatureExtractor"),apo=o(" (DPT model)"),npo=l(),Bh=a("li"),wle=a("strong"),spo=o("flava"),lpo=o(" \u2014 "),dN=a("a"),ipo=o("FlavaFeatureExtractor"),dpo=o(" (FLAVA model)"),cpo=l(),Ih=a("li"),Ale=a("strong"),fpo=o("glpn"),mpo=o(" \u2014 "),cN=a("a"),gpo=o("GLPNFeatureExtractor"),hpo=o(" (GLPN model)"),ppo=l(),Nh=a("li"),Lle=a("strong"),upo=o("hubert"),_po=o(" \u2014 "),fN=a("a"),bpo=o("Wav2Vec2FeatureExtractor"),vpo=o(" (Hubert model)"),Fpo=l(),qh=a("li"),yle=a("strong"),Tpo=o("imagegpt"),Mpo=o(" \u2014 "),mN=a("a"),Epo=o("ImageGPTFeatureExtractor"),Cpo=o(" (ImageGPT model)"),wpo=l(),jh=a("li"),xle=a("strong"),Apo=o("layoutlmv2"),Lpo=o(" \u2014 "),gN=a("a"),ypo=o("LayoutLMv2FeatureExtractor"),xpo=o(" (LayoutLMv2 model)"),$po=l(),Dh=a("li"),$le=a("strong"),kpo=o("layoutlmv3"),Spo=o(" \u2014 "),hN=a("a"),Rpo=o("LayoutLMv3FeatureExtractor"),Ppo=o(" (LayoutLMv3 model)"),Bpo=l(),Gh=a("li"),kle=a("strong"),Ipo=o("levit"),Npo=o(" \u2014 "),pN=a("a"),qpo=o("LevitFeatureExtractor"),jpo=o(" (LeViT model)"),Dpo=l(),Oh=a("li"),Sle=a("strong"),Gpo=o("maskformer"),Opo=o(" \u2014 "),uN=a("a"),Vpo=o("MaskFormerFeatureExtractor"),Xpo=o(" (MaskFormer model)"),zpo=l(),Vh=a("li"),Rle=a("strong"),Wpo=o("mctct"),Qpo=o(" \u2014 "),_N=a("a"),Hpo=o("MCTCTFeatureExtractor"),Upo=o(" (M-CTC-T model)"),Jpo=l(),Xh=a("li"),Ple=a("strong"),Ypo=o("perceiver"),Kpo=o(" \u2014 "),bN=a("a"),Zpo=o("PerceiverFeatureExtractor"),euo=o(" (Perceiver model)"),ouo=l(),zh=a("li"),Ble=a("strong"),ruo=o("poolformer"),tuo=o(" \u2014 "),vN=a("a"),auo=o("PoolFormerFeatureExtractor"),nuo=o(" (PoolFormer model)"),suo=l(),Wh=a("li"),Ile=a("strong"),luo=o("regnet"),iuo=o(" \u2014 "),FN=a("a"),duo=o("ConvNextFeatureExtractor"),cuo=o(" (RegNet model)"),fuo=l(),Qh=a("li"),Nle=a("strong"),muo=o("resnet"),guo=o(" \u2014 "),TN=a("a"),huo=o("ConvNextFeatureExtractor"),puo=o(" (ResNet model)"),uuo=l(),Hh=a("li"),qle=a("strong"),_uo=o("segformer"),buo=o(" \u2014 "),MN=a("a"),vuo=o("SegformerFeatureExtractor"),Fuo=o(" (SegFormer model)"),Tuo=l(),Uh=a("li"),jle=a("strong"),Muo=o("speech_to_text"),Euo=o(" \u2014 "),EN=a("a"),Cuo=o("Speech2TextFeatureExtractor"),wuo=o(" (Speech2Text model)"),Auo=l(),Jh=a("li"),Dle=a("strong"),Luo=o("swin"),yuo=o(" \u2014 "),CN=a("a"),xuo=o("ViTFeatureExtractor"),$uo=o(" (Swin Transformer model)"),kuo=l(),Yh=a("li"),Gle=a("strong"),Suo=o("van"),Ruo=o(" \u2014 "),wN=a("a"),Puo=o("ConvNextFeatureExtractor"),Buo=o(" (VAN model)"),Iuo=l(),Kh=a("li"),Ole=a("strong"),Nuo=o("vilt"),quo=o(" \u2014 "),AN=a("a"),juo=o("ViltFeatureExtractor"),Duo=o(" (ViLT model)"),Guo=l(),Zh=a("li"),Vle=a("strong"),Ouo=o("vit"),Vuo=o(" \u2014 "),LN=a("a"),Xuo=o("ViTFeatureExtractor"),zuo=o(" (ViT model)"),Wuo=l(),ep=a("li"),Xle=a("strong"),Quo=o("vit_mae"),Huo=o(" \u2014 "),yN=a("a"),Uuo=o("ViTFeatureExtractor"),Juo=o(" (ViTMAE model)"),Yuo=l(),op=a("li"),zle=a("strong"),Kuo=o("wav2vec2"),Zuo=o(" \u2014 "),xN=a("a"),e_o=o("Wav2Vec2FeatureExtractor"),o_o=o(" (Wav2Vec2 model)"),r_o=l(),rp=a("li"),Wle=a("strong"),t_o=o("wav2vec2-conformer"),a_o=o(" \u2014 "),$N=a("a"),n_o=o("Wav2Vec2FeatureExtractor"),s_o=o(" (Wav2Vec2-Conformer model)"),l_o=l(),tp=a("li"),Qle=a("strong"),i_o=o("yolos"),d_o=o(" \u2014 "),kN=a("a"),c_o=o("YolosFeatureExtractor"),f_o=o(" (YOLOS model)"),m_o=l(),F(ap.$$.fragment),g_o=l(),F(np.$$.fragment),h_o=l(),sp=a("div"),F(OL.$$.fragment),p_o=l(),Hle=a("p"),u_o=o("Register a new feature extractor for this class."),AGe=l(),Ri=a("h2"),lp=a("a"),Ule=a("span"),F(VL.$$.fragment),__o=l(),Jle=a("span"),b_o=o("AutoProcessor"),LGe=l(),yo=a("div"),F(XL.$$.fragment),v_o=l(),zL=a("p"),F_o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),SN=a("a"),T_o=o("AutoProcessor.from_pretrained()"),M_o=o(" class method."),E_o=l(),WL=a("p"),C_o=o("This class cannot be instantiated directly using "),Yle=a("code"),w_o=o("__init__()"),A_o=o(" (throws an error)."),L_o=l(),Ue=a("div"),F(QL.$$.fragment),y_o=l(),Kle=a("p"),x_o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),$_o=l(),Pi=a("p"),k_o=o("The processor class to instantiate is selected based on the "),Zle=a("code"),S_o=o("model_type"),R_o=o(` property of the config object (either
passed as an argument or loaded from `),eie=a("code"),P_o=o("pretrained_model_name_or_path"),B_o=o(" if possible):"),I_o=l(),he=a("ul"),ip=a("li"),oie=a("strong"),N_o=o("clip"),q_o=o(" \u2014 "),RN=a("a"),j_o=o("CLIPProcessor"),D_o=o(" (CLIP model)"),G_o=l(),dp=a("li"),rie=a("strong"),O_o=o("flava"),V_o=o(" \u2014 "),tie=a("code"),X_o=o("FLAVAProcessor"),z_o=o(" (FLAVA model)"),W_o=l(),cp=a("li"),aie=a("strong"),Q_o=o("layoutlmv2"),H_o=o(" \u2014 "),PN=a("a"),U_o=o("LayoutLMv2Processor"),J_o=o(" (LayoutLMv2 model)"),Y_o=l(),fp=a("li"),nie=a("strong"),K_o=o("layoutlmv3"),Z_o=o(" \u2014 "),BN=a("a"),e4o=o("LayoutLMv3Processor"),o4o=o(" (LayoutLMv3 model)"),r4o=l(),mp=a("li"),sie=a("strong"),t4o=o("layoutxlm"),a4o=o(" \u2014 "),IN=a("a"),n4o=o("LayoutXLMProcessor"),s4o=o(" (LayoutXLM model)"),l4o=l(),gp=a("li"),lie=a("strong"),i4o=o("sew"),d4o=o(" \u2014 "),NN=a("a"),c4o=o("Wav2Vec2Processor"),f4o=o(" (SEW model)"),m4o=l(),hp=a("li"),iie=a("strong"),g4o=o("sew-d"),h4o=o(" \u2014 "),qN=a("a"),p4o=o("Wav2Vec2Processor"),u4o=o(" (SEW-D model)"),_4o=l(),pp=a("li"),die=a("strong"),b4o=o("speech_to_text"),v4o=o(" \u2014 "),jN=a("a"),F4o=o("Speech2TextProcessor"),T4o=o(" (Speech2Text model)"),M4o=l(),up=a("li"),cie=a("strong"),E4o=o("speech_to_text_2"),C4o=o(" \u2014 "),DN=a("a"),w4o=o("Speech2Text2Processor"),A4o=o(" (Speech2Text2 model)"),L4o=l(),_p=a("li"),fie=a("strong"),y4o=o("trocr"),x4o=o(" \u2014 "),GN=a("a"),$4o=o("TrOCRProcessor"),k4o=o(" (TrOCR model)"),S4o=l(),bp=a("li"),mie=a("strong"),R4o=o("unispeech"),P4o=o(" \u2014 "),ON=a("a"),B4o=o("Wav2Vec2Processor"),I4o=o(" (UniSpeech model)"),N4o=l(),vp=a("li"),gie=a("strong"),q4o=o("unispeech-sat"),j4o=o(" \u2014 "),VN=a("a"),D4o=o("Wav2Vec2Processor"),G4o=o(" (UniSpeechSat model)"),O4o=l(),Fp=a("li"),hie=a("strong"),V4o=o("vilt"),X4o=o(" \u2014 "),XN=a("a"),z4o=o("ViltProcessor"),W4o=o(" (ViLT model)"),Q4o=l(),Tp=a("li"),pie=a("strong"),H4o=o("vision-text-dual-encoder"),U4o=o(" \u2014 "),zN=a("a"),J4o=o("VisionTextDualEncoderProcessor"),Y4o=o(" (VisionTextDualEncoder model)"),K4o=l(),Mp=a("li"),uie=a("strong"),Z4o=o("wav2vec2"),e1o=o(" \u2014 "),WN=a("a"),o1o=o("Wav2Vec2Processor"),r1o=o(" (Wav2Vec2 model)"),t1o=l(),Ep=a("li"),_ie=a("strong"),a1o=o("wav2vec2-conformer"),n1o=o(" \u2014 "),QN=a("a"),s1o=o("Wav2Vec2Processor"),l1o=o(" (Wav2Vec2-Conformer model)"),i1o=l(),Cp=a("li"),bie=a("strong"),d1o=o("wavlm"),c1o=o(" \u2014 "),HN=a("a"),f1o=o("Wav2Vec2Processor"),m1o=o(" (WavLM model)"),g1o=l(),F(wp.$$.fragment),h1o=l(),F(Ap.$$.fragment),p1o=l(),Lp=a("div"),F(HL.$$.fragment),u1o=l(),vie=a("p"),_1o=o("Register a new processor for this class."),yGe=l(),Bi=a("h2"),yp=a("a"),Fie=a("span"),F(UL.$$.fragment),b1o=l(),Tie=a("span"),v1o=o("AutoModel"),xGe=l(),xo=a("div"),F(JL.$$.fragment),F1o=l(),Ii=a("p"),T1o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UN=a("a"),M1o=o("from_pretrained()"),E1o=o(" class method or the "),JN=a("a"),C1o=o("from_config()"),w1o=o(` class
method.`),A1o=l(),YL=a("p"),L1o=o("This class cannot be instantiated directly using "),Mie=a("code"),y1o=o("__init__()"),x1o=o(" (throws an error)."),$1o=l(),nt=a("div"),F(KL.$$.fragment),k1o=l(),Eie=a("p"),S1o=o("Instantiates one of the base model classes of the library from a configuration."),R1o=l(),Ni=a("p"),P1o=o(`Note:
Loading a model from its configuration file does `),Cie=a("strong"),B1o=o("not"),I1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YN=a("a"),N1o=o("from_pretrained()"),q1o=o(" to load the model weights."),j1o=l(),F(xp.$$.fragment),D1o=l(),Je=a("div"),F(ZL.$$.fragment),G1o=l(),wie=a("p"),O1o=o("Instantiate one of the base model classes of the library from a pretrained model."),V1o=l(),Sa=a("p"),X1o=o("The model class to instantiate is selected based on the "),Aie=a("code"),z1o=o("model_type"),W1o=o(` property of the config object (either
passed as an argument or loaded from `),Lie=a("code"),Q1o=o("pretrained_model_name_or_path"),H1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=a("code"),U1o=o("pretrained_model_name_or_path"),J1o=o(":"),Y1o=l(),y=a("ul"),$p=a("li"),xie=a("strong"),K1o=o("albert"),Z1o=o(" \u2014 "),KN=a("a"),e2o=o("AlbertModel"),o2o=o(" (ALBERT model)"),r2o=l(),kp=a("li"),$ie=a("strong"),t2o=o("bart"),a2o=o(" \u2014 "),ZN=a("a"),n2o=o("BartModel"),s2o=o(" (BART model)"),l2o=l(),Sp=a("li"),kie=a("strong"),i2o=o("beit"),d2o=o(" \u2014 "),eq=a("a"),c2o=o("BeitModel"),f2o=o(" (BEiT model)"),m2o=l(),Rp=a("li"),Sie=a("strong"),g2o=o("bert"),h2o=o(" \u2014 "),oq=a("a"),p2o=o("BertModel"),u2o=o(" (BERT model)"),_2o=l(),Pp=a("li"),Rie=a("strong"),b2o=o("bert-generation"),v2o=o(" \u2014 "),rq=a("a"),F2o=o("BertGenerationEncoder"),T2o=o(" (Bert Generation model)"),M2o=l(),Bp=a("li"),Pie=a("strong"),E2o=o("big_bird"),C2o=o(" \u2014 "),tq=a("a"),w2o=o("BigBirdModel"),A2o=o(" (BigBird model)"),L2o=l(),Ip=a("li"),Bie=a("strong"),y2o=o("bigbird_pegasus"),x2o=o(" \u2014 "),aq=a("a"),$2o=o("BigBirdPegasusModel"),k2o=o(" (BigBird-Pegasus model)"),S2o=l(),Np=a("li"),Iie=a("strong"),R2o=o("blenderbot"),P2o=o(" \u2014 "),nq=a("a"),B2o=o("BlenderbotModel"),I2o=o(" (Blenderbot model)"),N2o=l(),qp=a("li"),Nie=a("strong"),q2o=o("blenderbot-small"),j2o=o(" \u2014 "),sq=a("a"),D2o=o("BlenderbotSmallModel"),G2o=o(" (BlenderbotSmall model)"),O2o=l(),jp=a("li"),qie=a("strong"),V2o=o("bloom"),X2o=o(" \u2014 "),lq=a("a"),z2o=o("BloomModel"),W2o=o(" (BLOOM model)"),Q2o=l(),Dp=a("li"),jie=a("strong"),H2o=o("camembert"),U2o=o(" \u2014 "),iq=a("a"),J2o=o("CamembertModel"),Y2o=o(" (CamemBERT model)"),K2o=l(),Gp=a("li"),Die=a("strong"),Z2o=o("canine"),ebo=o(" \u2014 "),dq=a("a"),obo=o("CanineModel"),rbo=o(" (CANINE model)"),tbo=l(),Op=a("li"),Gie=a("strong"),abo=o("clip"),nbo=o(" \u2014 "),cq=a("a"),sbo=o("CLIPModel"),lbo=o(" (CLIP model)"),ibo=l(),Vp=a("li"),Oie=a("strong"),dbo=o("codegen"),cbo=o(" \u2014 "),fq=a("a"),fbo=o("CodeGenModel"),mbo=o(" (CodeGen model)"),gbo=l(),Xp=a("li"),Vie=a("strong"),hbo=o("convbert"),pbo=o(" \u2014 "),mq=a("a"),ubo=o("ConvBertModel"),_bo=o(" (ConvBERT model)"),bbo=l(),zp=a("li"),Xie=a("strong"),vbo=o("convnext"),Fbo=o(" \u2014 "),gq=a("a"),Tbo=o("ConvNextModel"),Mbo=o(" (ConvNeXT model)"),Ebo=l(),Wp=a("li"),zie=a("strong"),Cbo=o("ctrl"),wbo=o(" \u2014 "),hq=a("a"),Abo=o("CTRLModel"),Lbo=o(" (CTRL model)"),ybo=l(),Qp=a("li"),Wie=a("strong"),xbo=o("cvt"),$bo=o(" \u2014 "),pq=a("a"),kbo=o("CvtModel"),Sbo=o(" (CvT model)"),Rbo=l(),Hp=a("li"),Qie=a("strong"),Pbo=o("data2vec-audio"),Bbo=o(" \u2014 "),uq=a("a"),Ibo=o("Data2VecAudioModel"),Nbo=o(" (Data2VecAudio model)"),qbo=l(),Up=a("li"),Hie=a("strong"),jbo=o("data2vec-text"),Dbo=o(" \u2014 "),_q=a("a"),Gbo=o("Data2VecTextModel"),Obo=o(" (Data2VecText model)"),Vbo=l(),Jp=a("li"),Uie=a("strong"),Xbo=o("data2vec-vision"),zbo=o(" \u2014 "),bq=a("a"),Wbo=o("Data2VecVisionModel"),Qbo=o(" (Data2VecVision model)"),Hbo=l(),Yp=a("li"),Jie=a("strong"),Ubo=o("deberta"),Jbo=o(" \u2014 "),vq=a("a"),Ybo=o("DebertaModel"),Kbo=o(" (DeBERTa model)"),Zbo=l(),Kp=a("li"),Yie=a("strong"),evo=o("deberta-v2"),ovo=o(" \u2014 "),Fq=a("a"),rvo=o("DebertaV2Model"),tvo=o(" (DeBERTa-v2 model)"),avo=l(),Zp=a("li"),Kie=a("strong"),nvo=o("decision_transformer"),svo=o(" \u2014 "),Tq=a("a"),lvo=o("DecisionTransformerModel"),ivo=o(" (Decision Transformer model)"),dvo=l(),eu=a("li"),Zie=a("strong"),cvo=o("deit"),fvo=o(" \u2014 "),Mq=a("a"),mvo=o("DeiTModel"),gvo=o(" (DeiT model)"),hvo=l(),ou=a("li"),ede=a("strong"),pvo=o("detr"),uvo=o(" \u2014 "),Eq=a("a"),_vo=o("DetrModel"),bvo=o(" (DETR model)"),vvo=l(),ru=a("li"),ode=a("strong"),Fvo=o("distilbert"),Tvo=o(" \u2014 "),Cq=a("a"),Mvo=o("DistilBertModel"),Evo=o(" (DistilBERT model)"),Cvo=l(),tu=a("li"),rde=a("strong"),wvo=o("dpr"),Avo=o(" \u2014 "),wq=a("a"),Lvo=o("DPRQuestionEncoder"),yvo=o(" (DPR model)"),xvo=l(),au=a("li"),tde=a("strong"),$vo=o("dpt"),kvo=o(" \u2014 "),Aq=a("a"),Svo=o("DPTModel"),Rvo=o(" (DPT model)"),Pvo=l(),nu=a("li"),ade=a("strong"),Bvo=o("electra"),Ivo=o(" \u2014 "),Lq=a("a"),Nvo=o("ElectraModel"),qvo=o(" (ELECTRA model)"),jvo=l(),su=a("li"),nde=a("strong"),Dvo=o("flaubert"),Gvo=o(" \u2014 "),yq=a("a"),Ovo=o("FlaubertModel"),Vvo=o(" (FlauBERT model)"),Xvo=l(),lu=a("li"),sde=a("strong"),zvo=o("flava"),Wvo=o(" \u2014 "),xq=a("a"),Qvo=o("FlavaModel"),Hvo=o(" (FLAVA model)"),Uvo=l(),iu=a("li"),lde=a("strong"),Jvo=o("fnet"),Yvo=o(" \u2014 "),$q=a("a"),Kvo=o("FNetModel"),Zvo=o(" (FNet model)"),e3o=l(),du=a("li"),ide=a("strong"),o3o=o("fsmt"),r3o=o(" \u2014 "),kq=a("a"),t3o=o("FSMTModel"),a3o=o(" (FairSeq Machine-Translation model)"),n3o=l(),Os=a("li"),dde=a("strong"),s3o=o("funnel"),l3o=o(" \u2014 "),Sq=a("a"),i3o=o("FunnelModel"),d3o=o(" or "),Rq=a("a"),c3o=o("FunnelBaseModel"),f3o=o(" (Funnel Transformer model)"),m3o=l(),cu=a("li"),cde=a("strong"),g3o=o("glpn"),h3o=o(" \u2014 "),Pq=a("a"),p3o=o("GLPNModel"),u3o=o(" (GLPN model)"),_3o=l(),fu=a("li"),fde=a("strong"),b3o=o("gpt2"),v3o=o(" \u2014 "),Bq=a("a"),F3o=o("GPT2Model"),T3o=o(" (OpenAI GPT-2 model)"),M3o=l(),mu=a("li"),mde=a("strong"),E3o=o("gpt_neo"),C3o=o(" \u2014 "),Iq=a("a"),w3o=o("GPTNeoModel"),A3o=o(" (GPT Neo model)"),L3o=l(),gu=a("li"),gde=a("strong"),y3o=o("gpt_neox"),x3o=o(" \u2014 "),Nq=a("a"),$3o=o("GPTNeoXModel"),k3o=o(" (GPT NeoX model)"),S3o=l(),hu=a("li"),hde=a("strong"),R3o=o("gptj"),P3o=o(" \u2014 "),qq=a("a"),B3o=o("GPTJModel"),I3o=o(" (GPT-J model)"),N3o=l(),pu=a("li"),pde=a("strong"),q3o=o("hubert"),j3o=o(" \u2014 "),jq=a("a"),D3o=o("HubertModel"),G3o=o(" (Hubert model)"),O3o=l(),uu=a("li"),ude=a("strong"),V3o=o("ibert"),X3o=o(" \u2014 "),Dq=a("a"),z3o=o("IBertModel"),W3o=o(" (I-BERT model)"),Q3o=l(),_u=a("li"),_de=a("strong"),H3o=o("imagegpt"),U3o=o(" \u2014 "),Gq=a("a"),J3o=o("ImageGPTModel"),Y3o=o(" (ImageGPT model)"),K3o=l(),bu=a("li"),bde=a("strong"),Z3o=o("layoutlm"),eFo=o(" \u2014 "),Oq=a("a"),oFo=o("LayoutLMModel"),rFo=o(" (LayoutLM model)"),tFo=l(),vu=a("li"),vde=a("strong"),aFo=o("layoutlmv2"),nFo=o(" \u2014 "),Vq=a("a"),sFo=o("LayoutLMv2Model"),lFo=o(" (LayoutLMv2 model)"),iFo=l(),Fu=a("li"),Fde=a("strong"),dFo=o("layoutlmv3"),cFo=o(" \u2014 "),Xq=a("a"),fFo=o("LayoutLMv3Model"),mFo=o(" (LayoutLMv3 model)"),gFo=l(),Tu=a("li"),Tde=a("strong"),hFo=o("led"),pFo=o(" \u2014 "),zq=a("a"),uFo=o("LEDModel"),_Fo=o(" (LED model)"),bFo=l(),Mu=a("li"),Mde=a("strong"),vFo=o("levit"),FFo=o(" \u2014 "),Wq=a("a"),TFo=o("LevitModel"),MFo=o(" (LeViT model)"),EFo=l(),Eu=a("li"),Ede=a("strong"),CFo=o("longformer"),wFo=o(" \u2014 "),Qq=a("a"),AFo=o("LongformerModel"),LFo=o(" (Longformer model)"),yFo=l(),Cu=a("li"),Cde=a("strong"),xFo=o("longt5"),$Fo=o(" \u2014 "),Hq=a("a"),kFo=o("LongT5Model"),SFo=o(" (LongT5 model)"),RFo=l(),wu=a("li"),wde=a("strong"),PFo=o("luke"),BFo=o(" \u2014 "),Uq=a("a"),IFo=o("LukeModel"),NFo=o(" (LUKE model)"),qFo=l(),Au=a("li"),Ade=a("strong"),jFo=o("lxmert"),DFo=o(" \u2014 "),Jq=a("a"),GFo=o("LxmertModel"),OFo=o(" (LXMERT model)"),VFo=l(),Lu=a("li"),Lde=a("strong"),XFo=o("m2m_100"),zFo=o(" \u2014 "),Yq=a("a"),WFo=o("M2M100Model"),QFo=o(" (M2M100 model)"),HFo=l(),yu=a("li"),yde=a("strong"),UFo=o("marian"),JFo=o(" \u2014 "),Kq=a("a"),YFo=o("MarianModel"),KFo=o(" (Marian model)"),ZFo=l(),xu=a("li"),xde=a("strong"),eTo=o("maskformer"),oTo=o(" \u2014 "),Zq=a("a"),rTo=o("MaskFormerModel"),tTo=o(" (MaskFormer model)"),aTo=l(),$u=a("li"),$de=a("strong"),nTo=o("mbart"),sTo=o(" \u2014 "),ej=a("a"),lTo=o("MBartModel"),iTo=o(" (mBART model)"),dTo=l(),ku=a("li"),kde=a("strong"),cTo=o("mctct"),fTo=o(" \u2014 "),oj=a("a"),mTo=o("MCTCTModel"),gTo=o(" (M-CTC-T model)"),hTo=l(),Su=a("li"),Sde=a("strong"),pTo=o("megatron-bert"),uTo=o(" \u2014 "),rj=a("a"),_To=o("MegatronBertModel"),bTo=o(" (Megatron-BERT model)"),vTo=l(),Ru=a("li"),Rde=a("strong"),FTo=o("mobilebert"),TTo=o(" \u2014 "),tj=a("a"),MTo=o("MobileBertModel"),ETo=o(" (MobileBERT model)"),CTo=l(),Pu=a("li"),Pde=a("strong"),wTo=o("mpnet"),ATo=o(" \u2014 "),aj=a("a"),LTo=o("MPNetModel"),yTo=o(" (MPNet model)"),xTo=l(),Bu=a("li"),Bde=a("strong"),$To=o("mt5"),kTo=o(" \u2014 "),nj=a("a"),STo=o("MT5Model"),RTo=o(" (MT5 model)"),PTo=l(),Iu=a("li"),Ide=a("strong"),BTo=o("nystromformer"),ITo=o(" \u2014 "),sj=a("a"),NTo=o("NystromformerModel"),qTo=o(" (Nystr\xF6mformer model)"),jTo=l(),Nu=a("li"),Nde=a("strong"),DTo=o("openai-gpt"),GTo=o(" \u2014 "),lj=a("a"),OTo=o("OpenAIGPTModel"),VTo=o(" (OpenAI GPT model)"),XTo=l(),qu=a("li"),qde=a("strong"),zTo=o("opt"),WTo=o(" \u2014 "),ij=a("a"),QTo=o("OPTModel"),HTo=o(" (OPT model)"),UTo=l(),ju=a("li"),jde=a("strong"),JTo=o("pegasus"),YTo=o(" \u2014 "),dj=a("a"),KTo=o("PegasusModel"),ZTo=o(" (Pegasus model)"),e7o=l(),Du=a("li"),Dde=a("strong"),o7o=o("perceiver"),r7o=o(" \u2014 "),cj=a("a"),t7o=o("PerceiverModel"),a7o=o(" (Perceiver model)"),n7o=l(),Gu=a("li"),Gde=a("strong"),s7o=o("plbart"),l7o=o(" \u2014 "),fj=a("a"),i7o=o("PLBartModel"),d7o=o(" (PLBart model)"),c7o=l(),Ou=a("li"),Ode=a("strong"),f7o=o("poolformer"),m7o=o(" \u2014 "),mj=a("a"),g7o=o("PoolFormerModel"),h7o=o(" (PoolFormer model)"),p7o=l(),Vu=a("li"),Vde=a("strong"),u7o=o("prophetnet"),_7o=o(" \u2014 "),gj=a("a"),b7o=o("ProphetNetModel"),v7o=o(" (ProphetNet model)"),F7o=l(),Xu=a("li"),Xde=a("strong"),T7o=o("qdqbert"),M7o=o(" \u2014 "),hj=a("a"),E7o=o("QDQBertModel"),C7o=o(" (QDQBert model)"),w7o=l(),zu=a("li"),zde=a("strong"),A7o=o("reformer"),L7o=o(" \u2014 "),pj=a("a"),y7o=o("ReformerModel"),x7o=o(" (Reformer model)"),$7o=l(),Wu=a("li"),Wde=a("strong"),k7o=o("regnet"),S7o=o(" \u2014 "),uj=a("a"),R7o=o("RegNetModel"),P7o=o(" (RegNet model)"),B7o=l(),Qu=a("li"),Qde=a("strong"),I7o=o("rembert"),N7o=o(" \u2014 "),_j=a("a"),q7o=o("RemBertModel"),j7o=o(" (RemBERT model)"),D7o=l(),Hu=a("li"),Hde=a("strong"),G7o=o("resnet"),O7o=o(" \u2014 "),bj=a("a"),V7o=o("ResNetModel"),X7o=o(" (ResNet model)"),z7o=l(),Uu=a("li"),Ude=a("strong"),W7o=o("retribert"),Q7o=o(" \u2014 "),vj=a("a"),H7o=o("RetriBertModel"),U7o=o(" (RetriBERT model)"),J7o=l(),Ju=a("li"),Jde=a("strong"),Y7o=o("roberta"),K7o=o(" \u2014 "),Fj=a("a"),Z7o=o("RobertaModel"),eMo=o(" (RoBERTa model)"),oMo=l(),Yu=a("li"),Yde=a("strong"),rMo=o("roformer"),tMo=o(" \u2014 "),Tj=a("a"),aMo=o("RoFormerModel"),nMo=o(" (RoFormer model)"),sMo=l(),Ku=a("li"),Kde=a("strong"),lMo=o("segformer"),iMo=o(" \u2014 "),Mj=a("a"),dMo=o("SegformerModel"),cMo=o(" (SegFormer model)"),fMo=l(),Zu=a("li"),Zde=a("strong"),mMo=o("sew"),gMo=o(" \u2014 "),Ej=a("a"),hMo=o("SEWModel"),pMo=o(" (SEW model)"),uMo=l(),e_=a("li"),ece=a("strong"),_Mo=o("sew-d"),bMo=o(" \u2014 "),Cj=a("a"),vMo=o("SEWDModel"),FMo=o(" (SEW-D model)"),TMo=l(),o_=a("li"),oce=a("strong"),MMo=o("speech_to_text"),EMo=o(" \u2014 "),wj=a("a"),CMo=o("Speech2TextModel"),wMo=o(" (Speech2Text model)"),AMo=l(),r_=a("li"),rce=a("strong"),LMo=o("splinter"),yMo=o(" \u2014 "),Aj=a("a"),xMo=o("SplinterModel"),$Mo=o(" (Splinter model)"),kMo=l(),t_=a("li"),tce=a("strong"),SMo=o("squeezebert"),RMo=o(" \u2014 "),Lj=a("a"),PMo=o("SqueezeBertModel"),BMo=o(" (SqueezeBERT model)"),IMo=l(),a_=a("li"),ace=a("strong"),NMo=o("swin"),qMo=o(" \u2014 "),yj=a("a"),jMo=o("SwinModel"),DMo=o(" (Swin Transformer model)"),GMo=l(),n_=a("li"),nce=a("strong"),OMo=o("t5"),VMo=o(" \u2014 "),xj=a("a"),XMo=o("T5Model"),zMo=o(" (T5 model)"),WMo=l(),s_=a("li"),sce=a("strong"),QMo=o("tapas"),HMo=o(" \u2014 "),$j=a("a"),UMo=o("TapasModel"),JMo=o(" (TAPAS model)"),YMo=l(),l_=a("li"),lce=a("strong"),KMo=o("trajectory_transformer"),ZMo=o(" \u2014 "),kj=a("a"),eEo=o("TrajectoryTransformerModel"),oEo=o(" (Trajectory Transformer model)"),rEo=l(),i_=a("li"),ice=a("strong"),tEo=o("transfo-xl"),aEo=o(" \u2014 "),Sj=a("a"),nEo=o("TransfoXLModel"),sEo=o(" (Transformer-XL model)"),lEo=l(),d_=a("li"),dce=a("strong"),iEo=o("unispeech"),dEo=o(" \u2014 "),Rj=a("a"),cEo=o("UniSpeechModel"),fEo=o(" (UniSpeech model)"),mEo=l(),c_=a("li"),cce=a("strong"),gEo=o("unispeech-sat"),hEo=o(" \u2014 "),Pj=a("a"),pEo=o("UniSpeechSatModel"),uEo=o(" (UniSpeechSat model)"),_Eo=l(),f_=a("li"),fce=a("strong"),bEo=o("van"),vEo=o(" \u2014 "),Bj=a("a"),FEo=o("VanModel"),TEo=o(" (VAN model)"),MEo=l(),m_=a("li"),mce=a("strong"),EEo=o("vilt"),CEo=o(" \u2014 "),Ij=a("a"),wEo=o("ViltModel"),AEo=o(" (ViLT model)"),LEo=l(),g_=a("li"),gce=a("strong"),yEo=o("vision-text-dual-encoder"),xEo=o(" \u2014 "),Nj=a("a"),$Eo=o("VisionTextDualEncoderModel"),kEo=o(" (VisionTextDualEncoder model)"),SEo=l(),h_=a("li"),hce=a("strong"),REo=o("visual_bert"),PEo=o(" \u2014 "),qj=a("a"),BEo=o("VisualBertModel"),IEo=o(" (VisualBERT model)"),NEo=l(),p_=a("li"),pce=a("strong"),qEo=o("vit"),jEo=o(" \u2014 "),jj=a("a"),DEo=o("ViTModel"),GEo=o(" (ViT model)"),OEo=l(),u_=a("li"),uce=a("strong"),VEo=o("vit_mae"),XEo=o(" \u2014 "),Dj=a("a"),zEo=o("ViTMAEModel"),WEo=o(" (ViTMAE model)"),QEo=l(),__=a("li"),_ce=a("strong"),HEo=o("wav2vec2"),UEo=o(" \u2014 "),Gj=a("a"),JEo=o("Wav2Vec2Model"),YEo=o(" (Wav2Vec2 model)"),KEo=l(),b_=a("li"),bce=a("strong"),ZEo=o("wav2vec2-conformer"),eCo=o(" \u2014 "),Oj=a("a"),oCo=o("Wav2Vec2ConformerModel"),rCo=o(" (Wav2Vec2-Conformer model)"),tCo=l(),v_=a("li"),vce=a("strong"),aCo=o("wavlm"),nCo=o(" \u2014 "),Vj=a("a"),sCo=o("WavLMModel"),lCo=o(" (WavLM model)"),iCo=l(),F_=a("li"),Fce=a("strong"),dCo=o("xglm"),cCo=o(" \u2014 "),Xj=a("a"),fCo=o("XGLMModel"),mCo=o(" (XGLM model)"),gCo=l(),T_=a("li"),Tce=a("strong"),hCo=o("xlm"),pCo=o(" \u2014 "),zj=a("a"),uCo=o("XLMModel"),_Co=o(" (XLM model)"),bCo=l(),M_=a("li"),Mce=a("strong"),vCo=o("xlm-prophetnet"),FCo=o(" \u2014 "),Wj=a("a"),TCo=o("XLMProphetNetModel"),MCo=o(" (XLM-ProphetNet model)"),ECo=l(),E_=a("li"),Ece=a("strong"),CCo=o("xlm-roberta"),wCo=o(" \u2014 "),Qj=a("a"),ACo=o("XLMRobertaModel"),LCo=o(" (XLM-RoBERTa model)"),yCo=l(),C_=a("li"),Cce=a("strong"),xCo=o("xlm-roberta-xl"),$Co=o(" \u2014 "),Hj=a("a"),kCo=o("XLMRobertaXLModel"),SCo=o(" (XLM-RoBERTa-XL model)"),RCo=l(),w_=a("li"),wce=a("strong"),PCo=o("xlnet"),BCo=o(" \u2014 "),Uj=a("a"),ICo=o("XLNetModel"),NCo=o(" (XLNet model)"),qCo=l(),A_=a("li"),Ace=a("strong"),jCo=o("yolos"),DCo=o(" \u2014 "),Jj=a("a"),GCo=o("YolosModel"),OCo=o(" (YOLOS model)"),VCo=l(),L_=a("li"),Lce=a("strong"),XCo=o("yoso"),zCo=o(" \u2014 "),Yj=a("a"),WCo=o("YosoModel"),QCo=o(" (YOSO model)"),HCo=l(),y_=a("p"),UCo=o("The model is set in evaluation mode by default using "),yce=a("code"),JCo=o("model.eval()"),YCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xce=a("code"),KCo=o("model.train()"),ZCo=l(),F(x_.$$.fragment),$Ge=l(),qi=a("h2"),$_=a("a"),$ce=a("span"),F(ey.$$.fragment),e5o=l(),kce=a("span"),o5o=o("AutoModelForPreTraining"),kGe=l(),$o=a("div"),F(oy.$$.fragment),r5o=l(),ji=a("p"),t5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kj=a("a"),a5o=o("from_pretrained()"),n5o=o(" class method or the "),Zj=a("a"),s5o=o("from_config()"),l5o=o(` class
method.`),i5o=l(),ry=a("p"),d5o=o("This class cannot be instantiated directly using "),Sce=a("code"),c5o=o("__init__()"),f5o=o(" (throws an error)."),m5o=l(),st=a("div"),F(ty.$$.fragment),g5o=l(),Rce=a("p"),h5o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),p5o=l(),Di=a("p"),u5o=o(`Note:
Loading a model from its configuration file does `),Pce=a("strong"),_5o=o("not"),b5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eD=a("a"),v5o=o("from_pretrained()"),F5o=o(" to load the model weights."),T5o=l(),F(k_.$$.fragment),M5o=l(),Ye=a("div"),F(ay.$$.fragment),E5o=l(),Bce=a("p"),C5o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),w5o=l(),Ra=a("p"),A5o=o("The model class to instantiate is selected based on the "),Ice=a("code"),L5o=o("model_type"),y5o=o(` property of the config object (either
passed as an argument or loaded from `),Nce=a("code"),x5o=o("pretrained_model_name_or_path"),$5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qce=a("code"),k5o=o("pretrained_model_name_or_path"),S5o=o(":"),R5o=l(),G=a("ul"),S_=a("li"),jce=a("strong"),P5o=o("albert"),B5o=o(" \u2014 "),oD=a("a"),I5o=o("AlbertForPreTraining"),N5o=o(" (ALBERT model)"),q5o=l(),R_=a("li"),Dce=a("strong"),j5o=o("bart"),D5o=o(" \u2014 "),rD=a("a"),G5o=o("BartForConditionalGeneration"),O5o=o(" (BART model)"),V5o=l(),P_=a("li"),Gce=a("strong"),X5o=o("bert"),z5o=o(" \u2014 "),tD=a("a"),W5o=o("BertForPreTraining"),Q5o=o(" (BERT model)"),H5o=l(),B_=a("li"),Oce=a("strong"),U5o=o("big_bird"),J5o=o(" \u2014 "),aD=a("a"),Y5o=o("BigBirdForPreTraining"),K5o=o(" (BigBird model)"),Z5o=l(),I_=a("li"),Vce=a("strong"),e0o=o("bloom"),o0o=o(" \u2014 "),nD=a("a"),r0o=o("BloomForCausalLM"),t0o=o(" (BLOOM model)"),a0o=l(),N_=a("li"),Xce=a("strong"),n0o=o("camembert"),s0o=o(" \u2014 "),sD=a("a"),l0o=o("CamembertForMaskedLM"),i0o=o(" (CamemBERT model)"),d0o=l(),q_=a("li"),zce=a("strong"),c0o=o("ctrl"),f0o=o(" \u2014 "),lD=a("a"),m0o=o("CTRLLMHeadModel"),g0o=o(" (CTRL model)"),h0o=l(),j_=a("li"),Wce=a("strong"),p0o=o("data2vec-text"),u0o=o(" \u2014 "),iD=a("a"),_0o=o("Data2VecTextForMaskedLM"),b0o=o(" (Data2VecText model)"),v0o=l(),D_=a("li"),Qce=a("strong"),F0o=o("deberta"),T0o=o(" \u2014 "),dD=a("a"),M0o=o("DebertaForMaskedLM"),E0o=o(" (DeBERTa model)"),C0o=l(),G_=a("li"),Hce=a("strong"),w0o=o("deberta-v2"),A0o=o(" \u2014 "),cD=a("a"),L0o=o("DebertaV2ForMaskedLM"),y0o=o(" (DeBERTa-v2 model)"),x0o=l(),O_=a("li"),Uce=a("strong"),$0o=o("distilbert"),k0o=o(" \u2014 "),fD=a("a"),S0o=o("DistilBertForMaskedLM"),R0o=o(" (DistilBERT model)"),P0o=l(),V_=a("li"),Jce=a("strong"),B0o=o("electra"),I0o=o(" \u2014 "),mD=a("a"),N0o=o("ElectraForPreTraining"),q0o=o(" (ELECTRA model)"),j0o=l(),X_=a("li"),Yce=a("strong"),D0o=o("flaubert"),G0o=o(" \u2014 "),gD=a("a"),O0o=o("FlaubertWithLMHeadModel"),V0o=o(" (FlauBERT model)"),X0o=l(),z_=a("li"),Kce=a("strong"),z0o=o("flava"),W0o=o(" \u2014 "),hD=a("a"),Q0o=o("FlavaForPreTraining"),H0o=o(" (FLAVA model)"),U0o=l(),W_=a("li"),Zce=a("strong"),J0o=o("fnet"),Y0o=o(" \u2014 "),pD=a("a"),K0o=o("FNetForPreTraining"),Z0o=o(" (FNet model)"),ewo=l(),Q_=a("li"),efe=a("strong"),owo=o("fsmt"),rwo=o(" \u2014 "),uD=a("a"),two=o("FSMTForConditionalGeneration"),awo=o(" (FairSeq Machine-Translation model)"),nwo=l(),H_=a("li"),ofe=a("strong"),swo=o("funnel"),lwo=o(" \u2014 "),_D=a("a"),iwo=o("FunnelForPreTraining"),dwo=o(" (Funnel Transformer model)"),cwo=l(),U_=a("li"),rfe=a("strong"),fwo=o("gpt2"),mwo=o(" \u2014 "),bD=a("a"),gwo=o("GPT2LMHeadModel"),hwo=o(" (OpenAI GPT-2 model)"),pwo=l(),J_=a("li"),tfe=a("strong"),uwo=o("ibert"),_wo=o(" \u2014 "),vD=a("a"),bwo=o("IBertForMaskedLM"),vwo=o(" (I-BERT model)"),Fwo=l(),Y_=a("li"),afe=a("strong"),Two=o("layoutlm"),Mwo=o(" \u2014 "),FD=a("a"),Ewo=o("LayoutLMForMaskedLM"),Cwo=o(" (LayoutLM model)"),wwo=l(),K_=a("li"),nfe=a("strong"),Awo=o("longformer"),Lwo=o(" \u2014 "),TD=a("a"),ywo=o("LongformerForMaskedLM"),xwo=o(" (Longformer model)"),$wo=l(),Z_=a("li"),sfe=a("strong"),kwo=o("lxmert"),Swo=o(" \u2014 "),MD=a("a"),Rwo=o("LxmertForPreTraining"),Pwo=o(" (LXMERT model)"),Bwo=l(),e4=a("li"),lfe=a("strong"),Iwo=o("megatron-bert"),Nwo=o(" \u2014 "),ED=a("a"),qwo=o("MegatronBertForPreTraining"),jwo=o(" (Megatron-BERT model)"),Dwo=l(),o4=a("li"),ife=a("strong"),Gwo=o("mobilebert"),Owo=o(" \u2014 "),CD=a("a"),Vwo=o("MobileBertForPreTraining"),Xwo=o(" (MobileBERT model)"),zwo=l(),r4=a("li"),dfe=a("strong"),Wwo=o("mpnet"),Qwo=o(" \u2014 "),wD=a("a"),Hwo=o("MPNetForMaskedLM"),Uwo=o(" (MPNet model)"),Jwo=l(),t4=a("li"),cfe=a("strong"),Ywo=o("openai-gpt"),Kwo=o(" \u2014 "),AD=a("a"),Zwo=o("OpenAIGPTLMHeadModel"),eAo=o(" (OpenAI GPT model)"),oAo=l(),a4=a("li"),ffe=a("strong"),rAo=o("retribert"),tAo=o(" \u2014 "),LD=a("a"),aAo=o("RetriBertModel"),nAo=o(" (RetriBERT model)"),sAo=l(),n4=a("li"),mfe=a("strong"),lAo=o("roberta"),iAo=o(" \u2014 "),yD=a("a"),dAo=o("RobertaForMaskedLM"),cAo=o(" (RoBERTa model)"),fAo=l(),s4=a("li"),gfe=a("strong"),mAo=o("splinter"),gAo=o(" \u2014 "),xD=a("a"),hAo=o("SplinterForPreTraining"),pAo=o(" (Splinter model)"),uAo=l(),l4=a("li"),hfe=a("strong"),_Ao=o("squeezebert"),bAo=o(" \u2014 "),$D=a("a"),vAo=o("SqueezeBertForMaskedLM"),FAo=o(" (SqueezeBERT model)"),TAo=l(),i4=a("li"),pfe=a("strong"),MAo=o("t5"),EAo=o(" \u2014 "),kD=a("a"),CAo=o("T5ForConditionalGeneration"),wAo=o(" (T5 model)"),AAo=l(),d4=a("li"),ufe=a("strong"),LAo=o("tapas"),yAo=o(" \u2014 "),SD=a("a"),xAo=o("TapasForMaskedLM"),$Ao=o(" (TAPAS model)"),kAo=l(),c4=a("li"),_fe=a("strong"),SAo=o("transfo-xl"),RAo=o(" \u2014 "),RD=a("a"),PAo=o("TransfoXLLMHeadModel"),BAo=o(" (Transformer-XL model)"),IAo=l(),f4=a("li"),bfe=a("strong"),NAo=o("unispeech"),qAo=o(" \u2014 "),PD=a("a"),jAo=o("UniSpeechForPreTraining"),DAo=o(" (UniSpeech model)"),GAo=l(),m4=a("li"),vfe=a("strong"),OAo=o("unispeech-sat"),VAo=o(" \u2014 "),BD=a("a"),XAo=o("UniSpeechSatForPreTraining"),zAo=o(" (UniSpeechSat model)"),WAo=l(),g4=a("li"),Ffe=a("strong"),QAo=o("visual_bert"),HAo=o(" \u2014 "),ID=a("a"),UAo=o("VisualBertForPreTraining"),JAo=o(" (VisualBERT model)"),YAo=l(),h4=a("li"),Tfe=a("strong"),KAo=o("vit_mae"),ZAo=o(" \u2014 "),ND=a("a"),e6o=o("ViTMAEForPreTraining"),o6o=o(" (ViTMAE model)"),r6o=l(),p4=a("li"),Mfe=a("strong"),t6o=o("wav2vec2"),a6o=o(" \u2014 "),qD=a("a"),n6o=o("Wav2Vec2ForPreTraining"),s6o=o(" (Wav2Vec2 model)"),l6o=l(),u4=a("li"),Efe=a("strong"),i6o=o("wav2vec2-conformer"),d6o=o(" \u2014 "),jD=a("a"),c6o=o("Wav2Vec2ConformerForPreTraining"),f6o=o(" (Wav2Vec2-Conformer model)"),m6o=l(),_4=a("li"),Cfe=a("strong"),g6o=o("xlm"),h6o=o(" \u2014 "),DD=a("a"),p6o=o("XLMWithLMHeadModel"),u6o=o(" (XLM model)"),_6o=l(),b4=a("li"),wfe=a("strong"),b6o=o("xlm-roberta"),v6o=o(" \u2014 "),GD=a("a"),F6o=o("XLMRobertaForMaskedLM"),T6o=o(" (XLM-RoBERTa model)"),M6o=l(),v4=a("li"),Afe=a("strong"),E6o=o("xlm-roberta-xl"),C6o=o(" \u2014 "),OD=a("a"),w6o=o("XLMRobertaXLForMaskedLM"),A6o=o(" (XLM-RoBERTa-XL model)"),L6o=l(),F4=a("li"),Lfe=a("strong"),y6o=o("xlnet"),x6o=o(" \u2014 "),VD=a("a"),$6o=o("XLNetLMHeadModel"),k6o=o(" (XLNet model)"),S6o=l(),T4=a("p"),R6o=o("The model is set in evaluation mode by default using "),yfe=a("code"),P6o=o("model.eval()"),B6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=a("code"),I6o=o("model.train()"),N6o=l(),F(M4.$$.fragment),SGe=l(),Gi=a("h2"),E4=a("a"),$fe=a("span"),F(ny.$$.fragment),q6o=l(),kfe=a("span"),j6o=o("AutoModelForCausalLM"),RGe=l(),ko=a("div"),F(sy.$$.fragment),D6o=l(),Oi=a("p"),G6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),XD=a("a"),O6o=o("from_pretrained()"),V6o=o(" class method or the "),zD=a("a"),X6o=o("from_config()"),z6o=o(` class
method.`),W6o=l(),ly=a("p"),Q6o=o("This class cannot be instantiated directly using "),Sfe=a("code"),H6o=o("__init__()"),U6o=o(" (throws an error)."),J6o=l(),lt=a("div"),F(iy.$$.fragment),Y6o=l(),Rfe=a("p"),K6o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Z6o=l(),Vi=a("p"),eLo=o(`Note:
Loading a model from its configuration file does `),Pfe=a("strong"),oLo=o("not"),rLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WD=a("a"),tLo=o("from_pretrained()"),aLo=o(" to load the model weights."),nLo=l(),F(C4.$$.fragment),sLo=l(),Ke=a("div"),F(dy.$$.fragment),lLo=l(),Bfe=a("p"),iLo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),dLo=l(),Pa=a("p"),cLo=o("The model class to instantiate is selected based on the "),Ife=a("code"),fLo=o("model_type"),mLo=o(` property of the config object (either
passed as an argument or loaded from `),Nfe=a("code"),gLo=o("pretrained_model_name_or_path"),hLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qfe=a("code"),pLo=o("pretrained_model_name_or_path"),uLo=o(":"),_Lo=l(),X=a("ul"),w4=a("li"),jfe=a("strong"),bLo=o("bart"),vLo=o(" \u2014 "),QD=a("a"),FLo=o("BartForCausalLM"),TLo=o(" (BART model)"),MLo=l(),A4=a("li"),Dfe=a("strong"),ELo=o("bert"),CLo=o(" \u2014 "),HD=a("a"),wLo=o("BertLMHeadModel"),ALo=o(" (BERT model)"),LLo=l(),L4=a("li"),Gfe=a("strong"),yLo=o("bert-generation"),xLo=o(" \u2014 "),UD=a("a"),$Lo=o("BertGenerationDecoder"),kLo=o(" (Bert Generation model)"),SLo=l(),y4=a("li"),Ofe=a("strong"),RLo=o("big_bird"),PLo=o(" \u2014 "),JD=a("a"),BLo=o("BigBirdForCausalLM"),ILo=o(" (BigBird model)"),NLo=l(),x4=a("li"),Vfe=a("strong"),qLo=o("bigbird_pegasus"),jLo=o(" \u2014 "),YD=a("a"),DLo=o("BigBirdPegasusForCausalLM"),GLo=o(" (BigBird-Pegasus model)"),OLo=l(),$4=a("li"),Xfe=a("strong"),VLo=o("blenderbot"),XLo=o(" \u2014 "),KD=a("a"),zLo=o("BlenderbotForCausalLM"),WLo=o(" (Blenderbot model)"),QLo=l(),k4=a("li"),zfe=a("strong"),HLo=o("blenderbot-small"),ULo=o(" \u2014 "),ZD=a("a"),JLo=o("BlenderbotSmallForCausalLM"),YLo=o(" (BlenderbotSmall model)"),KLo=l(),S4=a("li"),Wfe=a("strong"),ZLo=o("bloom"),eyo=o(" \u2014 "),eG=a("a"),oyo=o("BloomForCausalLM"),ryo=o(" (BLOOM model)"),tyo=l(),R4=a("li"),Qfe=a("strong"),ayo=o("camembert"),nyo=o(" \u2014 "),oG=a("a"),syo=o("CamembertForCausalLM"),lyo=o(" (CamemBERT model)"),iyo=l(),P4=a("li"),Hfe=a("strong"),dyo=o("codegen"),cyo=o(" \u2014 "),rG=a("a"),fyo=o("CodeGenForCausalLM"),myo=o(" (CodeGen model)"),gyo=l(),B4=a("li"),Ufe=a("strong"),hyo=o("ctrl"),pyo=o(" \u2014 "),tG=a("a"),uyo=o("CTRLLMHeadModel"),_yo=o(" (CTRL model)"),byo=l(),I4=a("li"),Jfe=a("strong"),vyo=o("data2vec-text"),Fyo=o(" \u2014 "),aG=a("a"),Tyo=o("Data2VecTextForCausalLM"),Myo=o(" (Data2VecText model)"),Eyo=l(),N4=a("li"),Yfe=a("strong"),Cyo=o("electra"),wyo=o(" \u2014 "),nG=a("a"),Ayo=o("ElectraForCausalLM"),Lyo=o(" (ELECTRA model)"),yyo=l(),q4=a("li"),Kfe=a("strong"),xyo=o("gpt2"),$yo=o(" \u2014 "),sG=a("a"),kyo=o("GPT2LMHeadModel"),Syo=o(" (OpenAI GPT-2 model)"),Ryo=l(),j4=a("li"),Zfe=a("strong"),Pyo=o("gpt_neo"),Byo=o(" \u2014 "),lG=a("a"),Iyo=o("GPTNeoForCausalLM"),Nyo=o(" (GPT Neo model)"),qyo=l(),D4=a("li"),eme=a("strong"),jyo=o("gpt_neox"),Dyo=o(" \u2014 "),iG=a("a"),Gyo=o("GPTNeoXForCausalLM"),Oyo=o(" (GPT NeoX model)"),Vyo=l(),G4=a("li"),ome=a("strong"),Xyo=o("gptj"),zyo=o(" \u2014 "),dG=a("a"),Wyo=o("GPTJForCausalLM"),Qyo=o(" (GPT-J model)"),Hyo=l(),O4=a("li"),rme=a("strong"),Uyo=o("marian"),Jyo=o(" \u2014 "),cG=a("a"),Yyo=o("MarianForCausalLM"),Kyo=o(" (Marian model)"),Zyo=l(),V4=a("li"),tme=a("strong"),e8o=o("mbart"),o8o=o(" \u2014 "),fG=a("a"),r8o=o("MBartForCausalLM"),t8o=o(" (mBART model)"),a8o=l(),X4=a("li"),ame=a("strong"),n8o=o("megatron-bert"),s8o=o(" \u2014 "),mG=a("a"),l8o=o("MegatronBertForCausalLM"),i8o=o(" (Megatron-BERT model)"),d8o=l(),z4=a("li"),nme=a("strong"),c8o=o("openai-gpt"),f8o=o(" \u2014 "),gG=a("a"),m8o=o("OpenAIGPTLMHeadModel"),g8o=o(" (OpenAI GPT model)"),h8o=l(),W4=a("li"),sme=a("strong"),p8o=o("opt"),u8o=o(" \u2014 "),hG=a("a"),_8o=o("OPTForCausalLM"),b8o=o(" (OPT model)"),v8o=l(),Q4=a("li"),lme=a("strong"),F8o=o("pegasus"),T8o=o(" \u2014 "),pG=a("a"),M8o=o("PegasusForCausalLM"),E8o=o(" (Pegasus model)"),C8o=l(),H4=a("li"),ime=a("strong"),w8o=o("plbart"),A8o=o(" \u2014 "),uG=a("a"),L8o=o("PLBartForCausalLM"),y8o=o(" (PLBart model)"),x8o=l(),U4=a("li"),dme=a("strong"),$8o=o("prophetnet"),k8o=o(" \u2014 "),_G=a("a"),S8o=o("ProphetNetForCausalLM"),R8o=o(" (ProphetNet model)"),P8o=l(),J4=a("li"),cme=a("strong"),B8o=o("qdqbert"),I8o=o(" \u2014 "),bG=a("a"),N8o=o("QDQBertLMHeadModel"),q8o=o(" (QDQBert model)"),j8o=l(),Y4=a("li"),fme=a("strong"),D8o=o("reformer"),G8o=o(" \u2014 "),vG=a("a"),O8o=o("ReformerModelWithLMHead"),V8o=o(" (Reformer model)"),X8o=l(),K4=a("li"),mme=a("strong"),z8o=o("rembert"),W8o=o(" \u2014 "),FG=a("a"),Q8o=o("RemBertForCausalLM"),H8o=o(" (RemBERT model)"),U8o=l(),Z4=a("li"),gme=a("strong"),J8o=o("roberta"),Y8o=o(" \u2014 "),TG=a("a"),K8o=o("RobertaForCausalLM"),Z8o=o(" (RoBERTa model)"),e9o=l(),e1=a("li"),hme=a("strong"),o9o=o("roformer"),r9o=o(" \u2014 "),MG=a("a"),t9o=o("RoFormerForCausalLM"),a9o=o(" (RoFormer model)"),n9o=l(),o1=a("li"),pme=a("strong"),s9o=o("speech_to_text_2"),l9o=o(" \u2014 "),EG=a("a"),i9o=o("Speech2Text2ForCausalLM"),d9o=o(" (Speech2Text2 model)"),c9o=l(),r1=a("li"),ume=a("strong"),f9o=o("transfo-xl"),m9o=o(" \u2014 "),CG=a("a"),g9o=o("TransfoXLLMHeadModel"),h9o=o(" (Transformer-XL model)"),p9o=l(),t1=a("li"),_me=a("strong"),u9o=o("trocr"),_9o=o(" \u2014 "),wG=a("a"),b9o=o("TrOCRForCausalLM"),v9o=o(" (TrOCR model)"),F9o=l(),a1=a("li"),bme=a("strong"),T9o=o("xglm"),M9o=o(" \u2014 "),AG=a("a"),E9o=o("XGLMForCausalLM"),C9o=o(" (XGLM model)"),w9o=l(),n1=a("li"),vme=a("strong"),A9o=o("xlm"),L9o=o(" \u2014 "),LG=a("a"),y9o=o("XLMWithLMHeadModel"),x9o=o(" (XLM model)"),$9o=l(),s1=a("li"),Fme=a("strong"),k9o=o("xlm-prophetnet"),S9o=o(" \u2014 "),yG=a("a"),R9o=o("XLMProphetNetForCausalLM"),P9o=o(" (XLM-ProphetNet model)"),B9o=l(),l1=a("li"),Tme=a("strong"),I9o=o("xlm-roberta"),N9o=o(" \u2014 "),xG=a("a"),q9o=o("XLMRobertaForCausalLM"),j9o=o(" (XLM-RoBERTa model)"),D9o=l(),i1=a("li"),Mme=a("strong"),G9o=o("xlm-roberta-xl"),O9o=o(" \u2014 "),$G=a("a"),V9o=o("XLMRobertaXLForCausalLM"),X9o=o(" (XLM-RoBERTa-XL model)"),z9o=l(),d1=a("li"),Eme=a("strong"),W9o=o("xlnet"),Q9o=o(" \u2014 "),kG=a("a"),H9o=o("XLNetLMHeadModel"),U9o=o(" (XLNet model)"),J9o=l(),c1=a("p"),Y9o=o("The model is set in evaluation mode by default using "),Cme=a("code"),K9o=o("model.eval()"),Z9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wme=a("code"),exo=o("model.train()"),oxo=l(),F(f1.$$.fragment),PGe=l(),Xi=a("h2"),m1=a("a"),Ame=a("span"),F(cy.$$.fragment),rxo=l(),Lme=a("span"),txo=o("AutoModelForMaskedLM"),BGe=l(),So=a("div"),F(fy.$$.fragment),axo=l(),zi=a("p"),nxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),SG=a("a"),sxo=o("from_pretrained()"),lxo=o(" class method or the "),RG=a("a"),ixo=o("from_config()"),dxo=o(` class
method.`),cxo=l(),my=a("p"),fxo=o("This class cannot be instantiated directly using "),yme=a("code"),mxo=o("__init__()"),gxo=o(" (throws an error)."),hxo=l(),it=a("div"),F(gy.$$.fragment),pxo=l(),xme=a("p"),uxo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_xo=l(),Wi=a("p"),bxo=o(`Note:
Loading a model from its configuration file does `),$me=a("strong"),vxo=o("not"),Fxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),Txo=o("from_pretrained()"),Mxo=o(" to load the model weights."),Exo=l(),F(g1.$$.fragment),Cxo=l(),Ze=a("div"),F(hy.$$.fragment),wxo=l(),kme=a("p"),Axo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Lxo=l(),Ba=a("p"),yxo=o("The model class to instantiate is selected based on the "),Sme=a("code"),xxo=o("model_type"),$xo=o(` property of the config object (either
passed as an argument or loaded from `),Rme=a("code"),kxo=o("pretrained_model_name_or_path"),Sxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pme=a("code"),Rxo=o("pretrained_model_name_or_path"),Pxo=o(":"),Bxo=l(),Q=a("ul"),h1=a("li"),Bme=a("strong"),Ixo=o("albert"),Nxo=o(" \u2014 "),BG=a("a"),qxo=o("AlbertForMaskedLM"),jxo=o(" (ALBERT model)"),Dxo=l(),p1=a("li"),Ime=a("strong"),Gxo=o("bart"),Oxo=o(" \u2014 "),IG=a("a"),Vxo=o("BartForConditionalGeneration"),Xxo=o(" (BART model)"),zxo=l(),u1=a("li"),Nme=a("strong"),Wxo=o("bert"),Qxo=o(" \u2014 "),NG=a("a"),Hxo=o("BertForMaskedLM"),Uxo=o(" (BERT model)"),Jxo=l(),_1=a("li"),qme=a("strong"),Yxo=o("big_bird"),Kxo=o(" \u2014 "),qG=a("a"),Zxo=o("BigBirdForMaskedLM"),e$o=o(" (BigBird model)"),o$o=l(),b1=a("li"),jme=a("strong"),r$o=o("camembert"),t$o=o(" \u2014 "),jG=a("a"),a$o=o("CamembertForMaskedLM"),n$o=o(" (CamemBERT model)"),s$o=l(),v1=a("li"),Dme=a("strong"),l$o=o("convbert"),i$o=o(" \u2014 "),DG=a("a"),d$o=o("ConvBertForMaskedLM"),c$o=o(" (ConvBERT model)"),f$o=l(),F1=a("li"),Gme=a("strong"),m$o=o("data2vec-text"),g$o=o(" \u2014 "),GG=a("a"),h$o=o("Data2VecTextForMaskedLM"),p$o=o(" (Data2VecText model)"),u$o=l(),T1=a("li"),Ome=a("strong"),_$o=o("deberta"),b$o=o(" \u2014 "),OG=a("a"),v$o=o("DebertaForMaskedLM"),F$o=o(" (DeBERTa model)"),T$o=l(),M1=a("li"),Vme=a("strong"),M$o=o("deberta-v2"),E$o=o(" \u2014 "),VG=a("a"),C$o=o("DebertaV2ForMaskedLM"),w$o=o(" (DeBERTa-v2 model)"),A$o=l(),E1=a("li"),Xme=a("strong"),L$o=o("distilbert"),y$o=o(" \u2014 "),XG=a("a"),x$o=o("DistilBertForMaskedLM"),$$o=o(" (DistilBERT model)"),k$o=l(),C1=a("li"),zme=a("strong"),S$o=o("electra"),R$o=o(" \u2014 "),zG=a("a"),P$o=o("ElectraForMaskedLM"),B$o=o(" (ELECTRA model)"),I$o=l(),w1=a("li"),Wme=a("strong"),N$o=o("flaubert"),q$o=o(" \u2014 "),WG=a("a"),j$o=o("FlaubertWithLMHeadModel"),D$o=o(" (FlauBERT model)"),G$o=l(),A1=a("li"),Qme=a("strong"),O$o=o("fnet"),V$o=o(" \u2014 "),QG=a("a"),X$o=o("FNetForMaskedLM"),z$o=o(" (FNet model)"),W$o=l(),L1=a("li"),Hme=a("strong"),Q$o=o("funnel"),H$o=o(" \u2014 "),HG=a("a"),U$o=o("FunnelForMaskedLM"),J$o=o(" (Funnel Transformer model)"),Y$o=l(),y1=a("li"),Ume=a("strong"),K$o=o("ibert"),Z$o=o(" \u2014 "),UG=a("a"),eko=o("IBertForMaskedLM"),oko=o(" (I-BERT model)"),rko=l(),x1=a("li"),Jme=a("strong"),tko=o("layoutlm"),ako=o(" \u2014 "),JG=a("a"),nko=o("LayoutLMForMaskedLM"),sko=o(" (LayoutLM model)"),lko=l(),$1=a("li"),Yme=a("strong"),iko=o("longformer"),dko=o(" \u2014 "),YG=a("a"),cko=o("LongformerForMaskedLM"),fko=o(" (Longformer model)"),mko=l(),k1=a("li"),Kme=a("strong"),gko=o("luke"),hko=o(" \u2014 "),KG=a("a"),pko=o("LukeForMaskedLM"),uko=o(" (LUKE model)"),_ko=l(),S1=a("li"),Zme=a("strong"),bko=o("mbart"),vko=o(" \u2014 "),ZG=a("a"),Fko=o("MBartForConditionalGeneration"),Tko=o(" (mBART model)"),Mko=l(),R1=a("li"),ege=a("strong"),Eko=o("megatron-bert"),Cko=o(" \u2014 "),eO=a("a"),wko=o("MegatronBertForMaskedLM"),Ako=o(" (Megatron-BERT model)"),Lko=l(),P1=a("li"),oge=a("strong"),yko=o("mobilebert"),xko=o(" \u2014 "),oO=a("a"),$ko=o("MobileBertForMaskedLM"),kko=o(" (MobileBERT model)"),Sko=l(),B1=a("li"),rge=a("strong"),Rko=o("mpnet"),Pko=o(" \u2014 "),rO=a("a"),Bko=o("MPNetForMaskedLM"),Iko=o(" (MPNet model)"),Nko=l(),I1=a("li"),tge=a("strong"),qko=o("nystromformer"),jko=o(" \u2014 "),tO=a("a"),Dko=o("NystromformerForMaskedLM"),Gko=o(" (Nystr\xF6mformer model)"),Oko=l(),N1=a("li"),age=a("strong"),Vko=o("perceiver"),Xko=o(" \u2014 "),aO=a("a"),zko=o("PerceiverForMaskedLM"),Wko=o(" (Perceiver model)"),Qko=l(),q1=a("li"),nge=a("strong"),Hko=o("qdqbert"),Uko=o(" \u2014 "),nO=a("a"),Jko=o("QDQBertForMaskedLM"),Yko=o(" (QDQBert model)"),Kko=l(),j1=a("li"),sge=a("strong"),Zko=o("reformer"),eSo=o(" \u2014 "),sO=a("a"),oSo=o("ReformerForMaskedLM"),rSo=o(" (Reformer model)"),tSo=l(),D1=a("li"),lge=a("strong"),aSo=o("rembert"),nSo=o(" \u2014 "),lO=a("a"),sSo=o("RemBertForMaskedLM"),lSo=o(" (RemBERT model)"),iSo=l(),G1=a("li"),ige=a("strong"),dSo=o("roberta"),cSo=o(" \u2014 "),iO=a("a"),fSo=o("RobertaForMaskedLM"),mSo=o(" (RoBERTa model)"),gSo=l(),O1=a("li"),dge=a("strong"),hSo=o("roformer"),pSo=o(" \u2014 "),dO=a("a"),uSo=o("RoFormerForMaskedLM"),_So=o(" (RoFormer model)"),bSo=l(),V1=a("li"),cge=a("strong"),vSo=o("squeezebert"),FSo=o(" \u2014 "),cO=a("a"),TSo=o("SqueezeBertForMaskedLM"),MSo=o(" (SqueezeBERT model)"),ESo=l(),X1=a("li"),fge=a("strong"),CSo=o("tapas"),wSo=o(" \u2014 "),fO=a("a"),ASo=o("TapasForMaskedLM"),LSo=o(" (TAPAS model)"),ySo=l(),z1=a("li"),mge=a("strong"),xSo=o("wav2vec2"),$So=o(" \u2014 "),gge=a("code"),kSo=o("Wav2Vec2ForMaskedLM"),SSo=o(" (Wav2Vec2 model)"),RSo=l(),W1=a("li"),hge=a("strong"),PSo=o("xlm"),BSo=o(" \u2014 "),mO=a("a"),ISo=o("XLMWithLMHeadModel"),NSo=o(" (XLM model)"),qSo=l(),Q1=a("li"),pge=a("strong"),jSo=o("xlm-roberta"),DSo=o(" \u2014 "),gO=a("a"),GSo=o("XLMRobertaForMaskedLM"),OSo=o(" (XLM-RoBERTa model)"),VSo=l(),H1=a("li"),uge=a("strong"),XSo=o("xlm-roberta-xl"),zSo=o(" \u2014 "),hO=a("a"),WSo=o("XLMRobertaXLForMaskedLM"),QSo=o(" (XLM-RoBERTa-XL model)"),HSo=l(),U1=a("li"),_ge=a("strong"),USo=o("yoso"),JSo=o(" \u2014 "),pO=a("a"),YSo=o("YosoForMaskedLM"),KSo=o(" (YOSO model)"),ZSo=l(),J1=a("p"),eRo=o("The model is set in evaluation mode by default using "),bge=a("code"),oRo=o("model.eval()"),rRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vge=a("code"),tRo=o("model.train()"),aRo=l(),F(Y1.$$.fragment),IGe=l(),Qi=a("h2"),K1=a("a"),Fge=a("span"),F(py.$$.fragment),nRo=l(),Tge=a("span"),sRo=o("AutoModelForSeq2SeqLM"),NGe=l(),Ro=a("div"),F(uy.$$.fragment),lRo=l(),Hi=a("p"),iRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uO=a("a"),dRo=o("from_pretrained()"),cRo=o(" class method or the "),_O=a("a"),fRo=o("from_config()"),mRo=o(` class
method.`),gRo=l(),_y=a("p"),hRo=o("This class cannot be instantiated directly using "),Mge=a("code"),pRo=o("__init__()"),uRo=o(" (throws an error)."),_Ro=l(),dt=a("div"),F(by.$$.fragment),bRo=l(),Ege=a("p"),vRo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),FRo=l(),Ui=a("p"),TRo=o(`Note:
Loading a model from its configuration file does `),Cge=a("strong"),MRo=o("not"),ERo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=a("a"),CRo=o("from_pretrained()"),wRo=o(" to load the model weights."),ARo=l(),F(Z1.$$.fragment),LRo=l(),eo=a("div"),F(vy.$$.fragment),yRo=l(),wge=a("p"),xRo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$Ro=l(),Ia=a("p"),kRo=o("The model class to instantiate is selected based on the "),Age=a("code"),SRo=o("model_type"),RRo=o(` property of the config object (either
passed as an argument or loaded from `),Lge=a("code"),PRo=o("pretrained_model_name_or_path"),BRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=a("code"),IRo=o("pretrained_model_name_or_path"),NRo=o(":"),qRo=l(),pe=a("ul"),e2=a("li"),xge=a("strong"),jRo=o("bart"),DRo=o(" \u2014 "),vO=a("a"),GRo=o("BartForConditionalGeneration"),ORo=o(" (BART model)"),VRo=l(),o2=a("li"),$ge=a("strong"),XRo=o("bigbird_pegasus"),zRo=o(" \u2014 "),FO=a("a"),WRo=o("BigBirdPegasusForConditionalGeneration"),QRo=o(" (BigBird-Pegasus model)"),HRo=l(),r2=a("li"),kge=a("strong"),URo=o("blenderbot"),JRo=o(" \u2014 "),TO=a("a"),YRo=o("BlenderbotForConditionalGeneration"),KRo=o(" (Blenderbot model)"),ZRo=l(),t2=a("li"),Sge=a("strong"),ePo=o("blenderbot-small"),oPo=o(" \u2014 "),MO=a("a"),rPo=o("BlenderbotSmallForConditionalGeneration"),tPo=o(" (BlenderbotSmall model)"),aPo=l(),a2=a("li"),Rge=a("strong"),nPo=o("encoder-decoder"),sPo=o(" \u2014 "),EO=a("a"),lPo=o("EncoderDecoderModel"),iPo=o(" (Encoder decoder model)"),dPo=l(),n2=a("li"),Pge=a("strong"),cPo=o("fsmt"),fPo=o(" \u2014 "),CO=a("a"),mPo=o("FSMTForConditionalGeneration"),gPo=o(" (FairSeq Machine-Translation model)"),hPo=l(),s2=a("li"),Bge=a("strong"),pPo=o("led"),uPo=o(" \u2014 "),wO=a("a"),_Po=o("LEDForConditionalGeneration"),bPo=o(" (LED model)"),vPo=l(),l2=a("li"),Ige=a("strong"),FPo=o("longt5"),TPo=o(" \u2014 "),AO=a("a"),MPo=o("LongT5ForConditionalGeneration"),EPo=o(" (LongT5 model)"),CPo=l(),i2=a("li"),Nge=a("strong"),wPo=o("m2m_100"),APo=o(" \u2014 "),LO=a("a"),LPo=o("M2M100ForConditionalGeneration"),yPo=o(" (M2M100 model)"),xPo=l(),d2=a("li"),qge=a("strong"),$Po=o("marian"),kPo=o(" \u2014 "),yO=a("a"),SPo=o("MarianMTModel"),RPo=o(" (Marian model)"),PPo=l(),c2=a("li"),jge=a("strong"),BPo=o("mbart"),IPo=o(" \u2014 "),xO=a("a"),NPo=o("MBartForConditionalGeneration"),qPo=o(" (mBART model)"),jPo=l(),f2=a("li"),Dge=a("strong"),DPo=o("mt5"),GPo=o(" \u2014 "),$O=a("a"),OPo=o("MT5ForConditionalGeneration"),VPo=o(" (MT5 model)"),XPo=l(),m2=a("li"),Gge=a("strong"),zPo=o("pegasus"),WPo=o(" \u2014 "),kO=a("a"),QPo=o("PegasusForConditionalGeneration"),HPo=o(" (Pegasus model)"),UPo=l(),g2=a("li"),Oge=a("strong"),JPo=o("plbart"),YPo=o(" \u2014 "),SO=a("a"),KPo=o("PLBartForConditionalGeneration"),ZPo=o(" (PLBart model)"),eBo=l(),h2=a("li"),Vge=a("strong"),oBo=o("prophetnet"),rBo=o(" \u2014 "),RO=a("a"),tBo=o("ProphetNetForConditionalGeneration"),aBo=o(" (ProphetNet model)"),nBo=l(),p2=a("li"),Xge=a("strong"),sBo=o("t5"),lBo=o(" \u2014 "),PO=a("a"),iBo=o("T5ForConditionalGeneration"),dBo=o(" (T5 model)"),cBo=l(),u2=a("li"),zge=a("strong"),fBo=o("xlm-prophetnet"),mBo=o(" \u2014 "),BO=a("a"),gBo=o("XLMProphetNetForConditionalGeneration"),hBo=o(" (XLM-ProphetNet model)"),pBo=l(),_2=a("p"),uBo=o("The model is set in evaluation mode by default using "),Wge=a("code"),_Bo=o("model.eval()"),bBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=a("code"),vBo=o("model.train()"),FBo=l(),F(b2.$$.fragment),qGe=l(),Ji=a("h2"),v2=a("a"),Hge=a("span"),F(Fy.$$.fragment),TBo=l(),Uge=a("span"),MBo=o("AutoModelForSequenceClassification"),jGe=l(),Po=a("div"),F(Ty.$$.fragment),EBo=l(),Yi=a("p"),CBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),IO=a("a"),wBo=o("from_pretrained()"),ABo=o(" class method or the "),NO=a("a"),LBo=o("from_config()"),yBo=o(` class
method.`),xBo=l(),My=a("p"),$Bo=o("This class cannot be instantiated directly using "),Jge=a("code"),kBo=o("__init__()"),SBo=o(" (throws an error)."),RBo=l(),ct=a("div"),F(Ey.$$.fragment),PBo=l(),Yge=a("p"),BBo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),IBo=l(),Ki=a("p"),NBo=o(`Note:
Loading a model from its configuration file does `),Kge=a("strong"),qBo=o("not"),jBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qO=a("a"),DBo=o("from_pretrained()"),GBo=o(" to load the model weights."),OBo=l(),F(F2.$$.fragment),VBo=l(),oo=a("div"),F(Cy.$$.fragment),XBo=l(),Zge=a("p"),zBo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),WBo=l(),Na=a("p"),QBo=o("The model class to instantiate is selected based on the "),ehe=a("code"),HBo=o("model_type"),UBo=o(` property of the config object (either
passed as an argument or loaded from `),ohe=a("code"),JBo=o("pretrained_model_name_or_path"),YBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=a("code"),KBo=o("pretrained_model_name_or_path"),ZBo=o(":"),eIo=l(),N=a("ul"),T2=a("li"),the=a("strong"),oIo=o("albert"),rIo=o(" \u2014 "),jO=a("a"),tIo=o("AlbertForSequenceClassification"),aIo=o(" (ALBERT model)"),nIo=l(),M2=a("li"),ahe=a("strong"),sIo=o("bart"),lIo=o(" \u2014 "),DO=a("a"),iIo=o("BartForSequenceClassification"),dIo=o(" (BART model)"),cIo=l(),E2=a("li"),nhe=a("strong"),fIo=o("bert"),mIo=o(" \u2014 "),GO=a("a"),gIo=o("BertForSequenceClassification"),hIo=o(" (BERT model)"),pIo=l(),C2=a("li"),she=a("strong"),uIo=o("big_bird"),_Io=o(" \u2014 "),OO=a("a"),bIo=o("BigBirdForSequenceClassification"),vIo=o(" (BigBird model)"),FIo=l(),w2=a("li"),lhe=a("strong"),TIo=o("bigbird_pegasus"),MIo=o(" \u2014 "),VO=a("a"),EIo=o("BigBirdPegasusForSequenceClassification"),CIo=o(" (BigBird-Pegasus model)"),wIo=l(),A2=a("li"),ihe=a("strong"),AIo=o("bloom"),LIo=o(" \u2014 "),XO=a("a"),yIo=o("BloomForSequenceClassification"),xIo=o(" (BLOOM model)"),$Io=l(),L2=a("li"),dhe=a("strong"),kIo=o("camembert"),SIo=o(" \u2014 "),zO=a("a"),RIo=o("CamembertForSequenceClassification"),PIo=o(" (CamemBERT model)"),BIo=l(),y2=a("li"),che=a("strong"),IIo=o("canine"),NIo=o(" \u2014 "),WO=a("a"),qIo=o("CanineForSequenceClassification"),jIo=o(" (CANINE model)"),DIo=l(),x2=a("li"),fhe=a("strong"),GIo=o("convbert"),OIo=o(" \u2014 "),QO=a("a"),VIo=o("ConvBertForSequenceClassification"),XIo=o(" (ConvBERT model)"),zIo=l(),$2=a("li"),mhe=a("strong"),WIo=o("ctrl"),QIo=o(" \u2014 "),HO=a("a"),HIo=o("CTRLForSequenceClassification"),UIo=o(" (CTRL model)"),JIo=l(),k2=a("li"),ghe=a("strong"),YIo=o("data2vec-text"),KIo=o(" \u2014 "),UO=a("a"),ZIo=o("Data2VecTextForSequenceClassification"),eNo=o(" (Data2VecText model)"),oNo=l(),S2=a("li"),hhe=a("strong"),rNo=o("deberta"),tNo=o(" \u2014 "),JO=a("a"),aNo=o("DebertaForSequenceClassification"),nNo=o(" (DeBERTa model)"),sNo=l(),R2=a("li"),phe=a("strong"),lNo=o("deberta-v2"),iNo=o(" \u2014 "),YO=a("a"),dNo=o("DebertaV2ForSequenceClassification"),cNo=o(" (DeBERTa-v2 model)"),fNo=l(),P2=a("li"),uhe=a("strong"),mNo=o("distilbert"),gNo=o(" \u2014 "),KO=a("a"),hNo=o("DistilBertForSequenceClassification"),pNo=o(" (DistilBERT model)"),uNo=l(),B2=a("li"),_he=a("strong"),_No=o("electra"),bNo=o(" \u2014 "),ZO=a("a"),vNo=o("ElectraForSequenceClassification"),FNo=o(" (ELECTRA model)"),TNo=l(),I2=a("li"),bhe=a("strong"),MNo=o("flaubert"),ENo=o(" \u2014 "),eV=a("a"),CNo=o("FlaubertForSequenceClassification"),wNo=o(" (FlauBERT model)"),ANo=l(),N2=a("li"),vhe=a("strong"),LNo=o("fnet"),yNo=o(" \u2014 "),oV=a("a"),xNo=o("FNetForSequenceClassification"),$No=o(" (FNet model)"),kNo=l(),q2=a("li"),Fhe=a("strong"),SNo=o("funnel"),RNo=o(" \u2014 "),rV=a("a"),PNo=o("FunnelForSequenceClassification"),BNo=o(" (Funnel Transformer model)"),INo=l(),j2=a("li"),The=a("strong"),NNo=o("gpt2"),qNo=o(" \u2014 "),tV=a("a"),jNo=o("GPT2ForSequenceClassification"),DNo=o(" (OpenAI GPT-2 model)"),GNo=l(),D2=a("li"),Mhe=a("strong"),ONo=o("gpt_neo"),VNo=o(" \u2014 "),aV=a("a"),XNo=o("GPTNeoForSequenceClassification"),zNo=o(" (GPT Neo model)"),WNo=l(),G2=a("li"),Ehe=a("strong"),QNo=o("gptj"),HNo=o(" \u2014 "),nV=a("a"),UNo=o("GPTJForSequenceClassification"),JNo=o(" (GPT-J model)"),YNo=l(),O2=a("li"),Che=a("strong"),KNo=o("ibert"),ZNo=o(" \u2014 "),sV=a("a"),eqo=o("IBertForSequenceClassification"),oqo=o(" (I-BERT model)"),rqo=l(),V2=a("li"),whe=a("strong"),tqo=o("layoutlm"),aqo=o(" \u2014 "),lV=a("a"),nqo=o("LayoutLMForSequenceClassification"),sqo=o(" (LayoutLM model)"),lqo=l(),X2=a("li"),Ahe=a("strong"),iqo=o("layoutlmv2"),dqo=o(" \u2014 "),iV=a("a"),cqo=o("LayoutLMv2ForSequenceClassification"),fqo=o(" (LayoutLMv2 model)"),mqo=l(),z2=a("li"),Lhe=a("strong"),gqo=o("layoutlmv3"),hqo=o(" \u2014 "),dV=a("a"),pqo=o("LayoutLMv3ForSequenceClassification"),uqo=o(" (LayoutLMv3 model)"),_qo=l(),W2=a("li"),yhe=a("strong"),bqo=o("led"),vqo=o(" \u2014 "),cV=a("a"),Fqo=o("LEDForSequenceClassification"),Tqo=o(" (LED model)"),Mqo=l(),Q2=a("li"),xhe=a("strong"),Eqo=o("longformer"),Cqo=o(" \u2014 "),fV=a("a"),wqo=o("LongformerForSequenceClassification"),Aqo=o(" (Longformer model)"),Lqo=l(),H2=a("li"),$he=a("strong"),yqo=o("mbart"),xqo=o(" \u2014 "),mV=a("a"),$qo=o("MBartForSequenceClassification"),kqo=o(" (mBART model)"),Sqo=l(),U2=a("li"),khe=a("strong"),Rqo=o("megatron-bert"),Pqo=o(" \u2014 "),gV=a("a"),Bqo=o("MegatronBertForSequenceClassification"),Iqo=o(" (Megatron-BERT model)"),Nqo=l(),J2=a("li"),She=a("strong"),qqo=o("mobilebert"),jqo=o(" \u2014 "),hV=a("a"),Dqo=o("MobileBertForSequenceClassification"),Gqo=o(" (MobileBERT model)"),Oqo=l(),Y2=a("li"),Rhe=a("strong"),Vqo=o("mpnet"),Xqo=o(" \u2014 "),pV=a("a"),zqo=o("MPNetForSequenceClassification"),Wqo=o(" (MPNet model)"),Qqo=l(),K2=a("li"),Phe=a("strong"),Hqo=o("nystromformer"),Uqo=o(" \u2014 "),uV=a("a"),Jqo=o("NystromformerForSequenceClassification"),Yqo=o(" (Nystr\xF6mformer model)"),Kqo=l(),Z2=a("li"),Bhe=a("strong"),Zqo=o("openai-gpt"),ejo=o(" \u2014 "),_V=a("a"),ojo=o("OpenAIGPTForSequenceClassification"),rjo=o(" (OpenAI GPT model)"),tjo=l(),eb=a("li"),Ihe=a("strong"),ajo=o("perceiver"),njo=o(" \u2014 "),bV=a("a"),sjo=o("PerceiverForSequenceClassification"),ljo=o(" (Perceiver model)"),ijo=l(),ob=a("li"),Nhe=a("strong"),djo=o("plbart"),cjo=o(" \u2014 "),vV=a("a"),fjo=o("PLBartForSequenceClassification"),mjo=o(" (PLBart model)"),gjo=l(),rb=a("li"),qhe=a("strong"),hjo=o("qdqbert"),pjo=o(" \u2014 "),FV=a("a"),ujo=o("QDQBertForSequenceClassification"),_jo=o(" (QDQBert model)"),bjo=l(),tb=a("li"),jhe=a("strong"),vjo=o("reformer"),Fjo=o(" \u2014 "),TV=a("a"),Tjo=o("ReformerForSequenceClassification"),Mjo=o(" (Reformer model)"),Ejo=l(),ab=a("li"),Dhe=a("strong"),Cjo=o("rembert"),wjo=o(" \u2014 "),MV=a("a"),Ajo=o("RemBertForSequenceClassification"),Ljo=o(" (RemBERT model)"),yjo=l(),nb=a("li"),Ghe=a("strong"),xjo=o("roberta"),$jo=o(" \u2014 "),EV=a("a"),kjo=o("RobertaForSequenceClassification"),Sjo=o(" (RoBERTa model)"),Rjo=l(),sb=a("li"),Ohe=a("strong"),Pjo=o("roformer"),Bjo=o(" \u2014 "),CV=a("a"),Ijo=o("RoFormerForSequenceClassification"),Njo=o(" (RoFormer model)"),qjo=l(),lb=a("li"),Vhe=a("strong"),jjo=o("squeezebert"),Djo=o(" \u2014 "),wV=a("a"),Gjo=o("SqueezeBertForSequenceClassification"),Ojo=o(" (SqueezeBERT model)"),Vjo=l(),ib=a("li"),Xhe=a("strong"),Xjo=o("tapas"),zjo=o(" \u2014 "),AV=a("a"),Wjo=o("TapasForSequenceClassification"),Qjo=o(" (TAPAS model)"),Hjo=l(),db=a("li"),zhe=a("strong"),Ujo=o("transfo-xl"),Jjo=o(" \u2014 "),LV=a("a"),Yjo=o("TransfoXLForSequenceClassification"),Kjo=o(" (Transformer-XL model)"),Zjo=l(),cb=a("li"),Whe=a("strong"),eDo=o("xlm"),oDo=o(" \u2014 "),yV=a("a"),rDo=o("XLMForSequenceClassification"),tDo=o(" (XLM model)"),aDo=l(),fb=a("li"),Qhe=a("strong"),nDo=o("xlm-roberta"),sDo=o(" \u2014 "),xV=a("a"),lDo=o("XLMRobertaForSequenceClassification"),iDo=o(" (XLM-RoBERTa model)"),dDo=l(),mb=a("li"),Hhe=a("strong"),cDo=o("xlm-roberta-xl"),fDo=o(" \u2014 "),$V=a("a"),mDo=o("XLMRobertaXLForSequenceClassification"),gDo=o(" (XLM-RoBERTa-XL model)"),hDo=l(),gb=a("li"),Uhe=a("strong"),pDo=o("xlnet"),uDo=o(" \u2014 "),kV=a("a"),_Do=o("XLNetForSequenceClassification"),bDo=o(" (XLNet model)"),vDo=l(),hb=a("li"),Jhe=a("strong"),FDo=o("yoso"),TDo=o(" \u2014 "),SV=a("a"),MDo=o("YosoForSequenceClassification"),EDo=o(" (YOSO model)"),CDo=l(),pb=a("p"),wDo=o("The model is set in evaluation mode by default using "),Yhe=a("code"),ADo=o("model.eval()"),LDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=a("code"),yDo=o("model.train()"),xDo=l(),F(ub.$$.fragment),DGe=l(),Zi=a("h2"),_b=a("a"),Zhe=a("span"),F(wy.$$.fragment),$Do=l(),epe=a("span"),kDo=o("AutoModelForMultipleChoice"),GGe=l(),Bo=a("div"),F(Ay.$$.fragment),SDo=l(),ed=a("p"),RDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RV=a("a"),PDo=o("from_pretrained()"),BDo=o(" class method or the "),PV=a("a"),IDo=o("from_config()"),NDo=o(` class
method.`),qDo=l(),Ly=a("p"),jDo=o("This class cannot be instantiated directly using "),ope=a("code"),DDo=o("__init__()"),GDo=o(" (throws an error)."),ODo=l(),ft=a("div"),F(yy.$$.fragment),VDo=l(),rpe=a("p"),XDo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zDo=l(),od=a("p"),WDo=o(`Note:
Loading a model from its configuration file does `),tpe=a("strong"),QDo=o("not"),HDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=a("a"),UDo=o("from_pretrained()"),JDo=o(" to load the model weights."),YDo=l(),F(bb.$$.fragment),KDo=l(),ro=a("div"),F(xy.$$.fragment),ZDo=l(),ape=a("p"),eGo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),oGo=l(),qa=a("p"),rGo=o("The model class to instantiate is selected based on the "),npe=a("code"),tGo=o("model_type"),aGo=o(` property of the config object (either
passed as an argument or loaded from `),spe=a("code"),nGo=o("pretrained_model_name_or_path"),sGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=a("code"),lGo=o("pretrained_model_name_or_path"),iGo=o(":"),dGo=l(),Z=a("ul"),vb=a("li"),ipe=a("strong"),cGo=o("albert"),fGo=o(" \u2014 "),IV=a("a"),mGo=o("AlbertForMultipleChoice"),gGo=o(" (ALBERT model)"),hGo=l(),Fb=a("li"),dpe=a("strong"),pGo=o("bert"),uGo=o(" \u2014 "),NV=a("a"),_Go=o("BertForMultipleChoice"),bGo=o(" (BERT model)"),vGo=l(),Tb=a("li"),cpe=a("strong"),FGo=o("big_bird"),TGo=o(" \u2014 "),qV=a("a"),MGo=o("BigBirdForMultipleChoice"),EGo=o(" (BigBird model)"),CGo=l(),Mb=a("li"),fpe=a("strong"),wGo=o("camembert"),AGo=o(" \u2014 "),jV=a("a"),LGo=o("CamembertForMultipleChoice"),yGo=o(" (CamemBERT model)"),xGo=l(),Eb=a("li"),mpe=a("strong"),$Go=o("canine"),kGo=o(" \u2014 "),DV=a("a"),SGo=o("CanineForMultipleChoice"),RGo=o(" (CANINE model)"),PGo=l(),Cb=a("li"),gpe=a("strong"),BGo=o("convbert"),IGo=o(" \u2014 "),GV=a("a"),NGo=o("ConvBertForMultipleChoice"),qGo=o(" (ConvBERT model)"),jGo=l(),wb=a("li"),hpe=a("strong"),DGo=o("data2vec-text"),GGo=o(" \u2014 "),OV=a("a"),OGo=o("Data2VecTextForMultipleChoice"),VGo=o(" (Data2VecText model)"),XGo=l(),Ab=a("li"),ppe=a("strong"),zGo=o("deberta-v2"),WGo=o(" \u2014 "),VV=a("a"),QGo=o("DebertaV2ForMultipleChoice"),HGo=o(" (DeBERTa-v2 model)"),UGo=l(),Lb=a("li"),upe=a("strong"),JGo=o("distilbert"),YGo=o(" \u2014 "),XV=a("a"),KGo=o("DistilBertForMultipleChoice"),ZGo=o(" (DistilBERT model)"),eOo=l(),yb=a("li"),_pe=a("strong"),oOo=o("electra"),rOo=o(" \u2014 "),zV=a("a"),tOo=o("ElectraForMultipleChoice"),aOo=o(" (ELECTRA model)"),nOo=l(),xb=a("li"),bpe=a("strong"),sOo=o("flaubert"),lOo=o(" \u2014 "),WV=a("a"),iOo=o("FlaubertForMultipleChoice"),dOo=o(" (FlauBERT model)"),cOo=l(),$b=a("li"),vpe=a("strong"),fOo=o("fnet"),mOo=o(" \u2014 "),QV=a("a"),gOo=o("FNetForMultipleChoice"),hOo=o(" (FNet model)"),pOo=l(),kb=a("li"),Fpe=a("strong"),uOo=o("funnel"),_Oo=o(" \u2014 "),HV=a("a"),bOo=o("FunnelForMultipleChoice"),vOo=o(" (Funnel Transformer model)"),FOo=l(),Sb=a("li"),Tpe=a("strong"),TOo=o("ibert"),MOo=o(" \u2014 "),UV=a("a"),EOo=o("IBertForMultipleChoice"),COo=o(" (I-BERT model)"),wOo=l(),Rb=a("li"),Mpe=a("strong"),AOo=o("longformer"),LOo=o(" \u2014 "),JV=a("a"),yOo=o("LongformerForMultipleChoice"),xOo=o(" (Longformer model)"),$Oo=l(),Pb=a("li"),Epe=a("strong"),kOo=o("megatron-bert"),SOo=o(" \u2014 "),YV=a("a"),ROo=o("MegatronBertForMultipleChoice"),POo=o(" (Megatron-BERT model)"),BOo=l(),Bb=a("li"),Cpe=a("strong"),IOo=o("mobilebert"),NOo=o(" \u2014 "),KV=a("a"),qOo=o("MobileBertForMultipleChoice"),jOo=o(" (MobileBERT model)"),DOo=l(),Ib=a("li"),wpe=a("strong"),GOo=o("mpnet"),OOo=o(" \u2014 "),ZV=a("a"),VOo=o("MPNetForMultipleChoice"),XOo=o(" (MPNet model)"),zOo=l(),Nb=a("li"),Ape=a("strong"),WOo=o("nystromformer"),QOo=o(" \u2014 "),eX=a("a"),HOo=o("NystromformerForMultipleChoice"),UOo=o(" (Nystr\xF6mformer model)"),JOo=l(),qb=a("li"),Lpe=a("strong"),YOo=o("qdqbert"),KOo=o(" \u2014 "),oX=a("a"),ZOo=o("QDQBertForMultipleChoice"),eVo=o(" (QDQBert model)"),oVo=l(),jb=a("li"),ype=a("strong"),rVo=o("rembert"),tVo=o(" \u2014 "),rX=a("a"),aVo=o("RemBertForMultipleChoice"),nVo=o(" (RemBERT model)"),sVo=l(),Db=a("li"),xpe=a("strong"),lVo=o("roberta"),iVo=o(" \u2014 "),tX=a("a"),dVo=o("RobertaForMultipleChoice"),cVo=o(" (RoBERTa model)"),fVo=l(),Gb=a("li"),$pe=a("strong"),mVo=o("roformer"),gVo=o(" \u2014 "),aX=a("a"),hVo=o("RoFormerForMultipleChoice"),pVo=o(" (RoFormer model)"),uVo=l(),Ob=a("li"),kpe=a("strong"),_Vo=o("squeezebert"),bVo=o(" \u2014 "),nX=a("a"),vVo=o("SqueezeBertForMultipleChoice"),FVo=o(" (SqueezeBERT model)"),TVo=l(),Vb=a("li"),Spe=a("strong"),MVo=o("xlm"),EVo=o(" \u2014 "),sX=a("a"),CVo=o("XLMForMultipleChoice"),wVo=o(" (XLM model)"),AVo=l(),Xb=a("li"),Rpe=a("strong"),LVo=o("xlm-roberta"),yVo=o(" \u2014 "),lX=a("a"),xVo=o("XLMRobertaForMultipleChoice"),$Vo=o(" (XLM-RoBERTa model)"),kVo=l(),zb=a("li"),Ppe=a("strong"),SVo=o("xlm-roberta-xl"),RVo=o(" \u2014 "),iX=a("a"),PVo=o("XLMRobertaXLForMultipleChoice"),BVo=o(" (XLM-RoBERTa-XL model)"),IVo=l(),Wb=a("li"),Bpe=a("strong"),NVo=o("xlnet"),qVo=o(" \u2014 "),dX=a("a"),jVo=o("XLNetForMultipleChoice"),DVo=o(" (XLNet model)"),GVo=l(),Qb=a("li"),Ipe=a("strong"),OVo=o("yoso"),VVo=o(" \u2014 "),cX=a("a"),XVo=o("YosoForMultipleChoice"),zVo=o(" (YOSO model)"),WVo=l(),Hb=a("p"),QVo=o("The model is set in evaluation mode by default using "),Npe=a("code"),HVo=o("model.eval()"),UVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=a("code"),JVo=o("model.train()"),YVo=l(),F(Ub.$$.fragment),OGe=l(),rd=a("h2"),Jb=a("a"),jpe=a("span"),F($y.$$.fragment),KVo=l(),Dpe=a("span"),ZVo=o("AutoModelForNextSentencePrediction"),VGe=l(),Io=a("div"),F(ky.$$.fragment),eXo=l(),td=a("p"),oXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fX=a("a"),rXo=o("from_pretrained()"),tXo=o(" class method or the "),mX=a("a"),aXo=o("from_config()"),nXo=o(` class
method.`),sXo=l(),Sy=a("p"),lXo=o("This class cannot be instantiated directly using "),Gpe=a("code"),iXo=o("__init__()"),dXo=o(" (throws an error)."),cXo=l(),mt=a("div"),F(Ry.$$.fragment),fXo=l(),Ope=a("p"),mXo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gXo=l(),ad=a("p"),hXo=o(`Note:
Loading a model from its configuration file does `),Vpe=a("strong"),pXo=o("not"),uXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=a("a"),_Xo=o("from_pretrained()"),bXo=o(" to load the model weights."),vXo=l(),F(Yb.$$.fragment),FXo=l(),to=a("div"),F(Py.$$.fragment),TXo=l(),Xpe=a("p"),MXo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),EXo=l(),ja=a("p"),CXo=o("The model class to instantiate is selected based on the "),zpe=a("code"),wXo=o("model_type"),AXo=o(` property of the config object (either
passed as an argument or loaded from `),Wpe=a("code"),LXo=o("pretrained_model_name_or_path"),yXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=a("code"),xXo=o("pretrained_model_name_or_path"),$Xo=o(":"),kXo=l(),Zr=a("ul"),Kb=a("li"),Hpe=a("strong"),SXo=o("bert"),RXo=o(" \u2014 "),hX=a("a"),PXo=o("BertForNextSentencePrediction"),BXo=o(" (BERT model)"),IXo=l(),Zb=a("li"),Upe=a("strong"),NXo=o("fnet"),qXo=o(" \u2014 "),pX=a("a"),jXo=o("FNetForNextSentencePrediction"),DXo=o(" (FNet model)"),GXo=l(),ev=a("li"),Jpe=a("strong"),OXo=o("megatron-bert"),VXo=o(" \u2014 "),uX=a("a"),XXo=o("MegatronBertForNextSentencePrediction"),zXo=o(" (Megatron-BERT model)"),WXo=l(),ov=a("li"),Ype=a("strong"),QXo=o("mobilebert"),HXo=o(" \u2014 "),_X=a("a"),UXo=o("MobileBertForNextSentencePrediction"),JXo=o(" (MobileBERT model)"),YXo=l(),rv=a("li"),Kpe=a("strong"),KXo=o("qdqbert"),ZXo=o(" \u2014 "),bX=a("a"),ezo=o("QDQBertForNextSentencePrediction"),ozo=o(" (QDQBert model)"),rzo=l(),tv=a("p"),tzo=o("The model is set in evaluation mode by default using "),Zpe=a("code"),azo=o("model.eval()"),nzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=a("code"),szo=o("model.train()"),lzo=l(),F(av.$$.fragment),XGe=l(),nd=a("h2"),nv=a("a"),oue=a("span"),F(By.$$.fragment),izo=l(),rue=a("span"),dzo=o("AutoModelForTokenClassification"),zGe=l(),No=a("div"),F(Iy.$$.fragment),czo=l(),sd=a("p"),fzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vX=a("a"),mzo=o("from_pretrained()"),gzo=o(" class method or the "),FX=a("a"),hzo=o("from_config()"),pzo=o(` class
method.`),uzo=l(),Ny=a("p"),_zo=o("This class cannot be instantiated directly using "),tue=a("code"),bzo=o("__init__()"),vzo=o(" (throws an error)."),Fzo=l(),gt=a("div"),F(qy.$$.fragment),Tzo=l(),aue=a("p"),Mzo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ezo=l(),ld=a("p"),Czo=o(`Note:
Loading a model from its configuration file does `),nue=a("strong"),wzo=o("not"),Azo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TX=a("a"),Lzo=o("from_pretrained()"),yzo=o(" to load the model weights."),xzo=l(),F(sv.$$.fragment),$zo=l(),ao=a("div"),F(jy.$$.fragment),kzo=l(),sue=a("p"),Szo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Rzo=l(),Da=a("p"),Pzo=o("The model class to instantiate is selected based on the "),lue=a("code"),Bzo=o("model_type"),Izo=o(` property of the config object (either
passed as an argument or loaded from `),iue=a("code"),Nzo=o("pretrained_model_name_or_path"),qzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=a("code"),jzo=o("pretrained_model_name_or_path"),Dzo=o(":"),Gzo=l(),H=a("ul"),lv=a("li"),cue=a("strong"),Ozo=o("albert"),Vzo=o(" \u2014 "),MX=a("a"),Xzo=o("AlbertForTokenClassification"),zzo=o(" (ALBERT model)"),Wzo=l(),iv=a("li"),fue=a("strong"),Qzo=o("bert"),Hzo=o(" \u2014 "),EX=a("a"),Uzo=o("BertForTokenClassification"),Jzo=o(" (BERT model)"),Yzo=l(),dv=a("li"),mue=a("strong"),Kzo=o("big_bird"),Zzo=o(" \u2014 "),CX=a("a"),eWo=o("BigBirdForTokenClassification"),oWo=o(" (BigBird model)"),rWo=l(),cv=a("li"),gue=a("strong"),tWo=o("bloom"),aWo=o(" \u2014 "),wX=a("a"),nWo=o("BloomForTokenClassification"),sWo=o(" (BLOOM model)"),lWo=l(),fv=a("li"),hue=a("strong"),iWo=o("camembert"),dWo=o(" \u2014 "),AX=a("a"),cWo=o("CamembertForTokenClassification"),fWo=o(" (CamemBERT model)"),mWo=l(),mv=a("li"),pue=a("strong"),gWo=o("canine"),hWo=o(" \u2014 "),LX=a("a"),pWo=o("CanineForTokenClassification"),uWo=o(" (CANINE model)"),_Wo=l(),gv=a("li"),uue=a("strong"),bWo=o("convbert"),vWo=o(" \u2014 "),yX=a("a"),FWo=o("ConvBertForTokenClassification"),TWo=o(" (ConvBERT model)"),MWo=l(),hv=a("li"),_ue=a("strong"),EWo=o("data2vec-text"),CWo=o(" \u2014 "),xX=a("a"),wWo=o("Data2VecTextForTokenClassification"),AWo=o(" (Data2VecText model)"),LWo=l(),pv=a("li"),bue=a("strong"),yWo=o("deberta"),xWo=o(" \u2014 "),$X=a("a"),$Wo=o("DebertaForTokenClassification"),kWo=o(" (DeBERTa model)"),SWo=l(),uv=a("li"),vue=a("strong"),RWo=o("deberta-v2"),PWo=o(" \u2014 "),kX=a("a"),BWo=o("DebertaV2ForTokenClassification"),IWo=o(" (DeBERTa-v2 model)"),NWo=l(),_v=a("li"),Fue=a("strong"),qWo=o("distilbert"),jWo=o(" \u2014 "),SX=a("a"),DWo=o("DistilBertForTokenClassification"),GWo=o(" (DistilBERT model)"),OWo=l(),bv=a("li"),Tue=a("strong"),VWo=o("electra"),XWo=o(" \u2014 "),RX=a("a"),zWo=o("ElectraForTokenClassification"),WWo=o(" (ELECTRA model)"),QWo=l(),vv=a("li"),Mue=a("strong"),HWo=o("flaubert"),UWo=o(" \u2014 "),PX=a("a"),JWo=o("FlaubertForTokenClassification"),YWo=o(" (FlauBERT model)"),KWo=l(),Fv=a("li"),Eue=a("strong"),ZWo=o("fnet"),eQo=o(" \u2014 "),BX=a("a"),oQo=o("FNetForTokenClassification"),rQo=o(" (FNet model)"),tQo=l(),Tv=a("li"),Cue=a("strong"),aQo=o("funnel"),nQo=o(" \u2014 "),IX=a("a"),sQo=o("FunnelForTokenClassification"),lQo=o(" (Funnel Transformer model)"),iQo=l(),Mv=a("li"),wue=a("strong"),dQo=o("gpt2"),cQo=o(" \u2014 "),NX=a("a"),fQo=o("GPT2ForTokenClassification"),mQo=o(" (OpenAI GPT-2 model)"),gQo=l(),Ev=a("li"),Aue=a("strong"),hQo=o("ibert"),pQo=o(" \u2014 "),qX=a("a"),uQo=o("IBertForTokenClassification"),_Qo=o(" (I-BERT model)"),bQo=l(),Cv=a("li"),Lue=a("strong"),vQo=o("layoutlm"),FQo=o(" \u2014 "),jX=a("a"),TQo=o("LayoutLMForTokenClassification"),MQo=o(" (LayoutLM model)"),EQo=l(),wv=a("li"),yue=a("strong"),CQo=o("layoutlmv2"),wQo=o(" \u2014 "),DX=a("a"),AQo=o("LayoutLMv2ForTokenClassification"),LQo=o(" (LayoutLMv2 model)"),yQo=l(),Av=a("li"),xue=a("strong"),xQo=o("layoutlmv3"),$Qo=o(" \u2014 "),GX=a("a"),kQo=o("LayoutLMv3ForTokenClassification"),SQo=o(" (LayoutLMv3 model)"),RQo=l(),Lv=a("li"),$ue=a("strong"),PQo=o("longformer"),BQo=o(" \u2014 "),OX=a("a"),IQo=o("LongformerForTokenClassification"),NQo=o(" (Longformer model)"),qQo=l(),yv=a("li"),kue=a("strong"),jQo=o("megatron-bert"),DQo=o(" \u2014 "),VX=a("a"),GQo=o("MegatronBertForTokenClassification"),OQo=o(" (Megatron-BERT model)"),VQo=l(),xv=a("li"),Sue=a("strong"),XQo=o("mobilebert"),zQo=o(" \u2014 "),XX=a("a"),WQo=o("MobileBertForTokenClassification"),QQo=o(" (MobileBERT model)"),HQo=l(),$v=a("li"),Rue=a("strong"),UQo=o("mpnet"),JQo=o(" \u2014 "),zX=a("a"),YQo=o("MPNetForTokenClassification"),KQo=o(" (MPNet model)"),ZQo=l(),kv=a("li"),Pue=a("strong"),eHo=o("nystromformer"),oHo=o(" \u2014 "),WX=a("a"),rHo=o("NystromformerForTokenClassification"),tHo=o(" (Nystr\xF6mformer model)"),aHo=l(),Sv=a("li"),Bue=a("strong"),nHo=o("qdqbert"),sHo=o(" \u2014 "),QX=a("a"),lHo=o("QDQBertForTokenClassification"),iHo=o(" (QDQBert model)"),dHo=l(),Rv=a("li"),Iue=a("strong"),cHo=o("rembert"),fHo=o(" \u2014 "),HX=a("a"),mHo=o("RemBertForTokenClassification"),gHo=o(" (RemBERT model)"),hHo=l(),Pv=a("li"),Nue=a("strong"),pHo=o("roberta"),uHo=o(" \u2014 "),UX=a("a"),_Ho=o("RobertaForTokenClassification"),bHo=o(" (RoBERTa model)"),vHo=l(),Bv=a("li"),que=a("strong"),FHo=o("roformer"),THo=o(" \u2014 "),JX=a("a"),MHo=o("RoFormerForTokenClassification"),EHo=o(" (RoFormer model)"),CHo=l(),Iv=a("li"),jue=a("strong"),wHo=o("squeezebert"),AHo=o(" \u2014 "),YX=a("a"),LHo=o("SqueezeBertForTokenClassification"),yHo=o(" (SqueezeBERT model)"),xHo=l(),Nv=a("li"),Due=a("strong"),$Ho=o("xlm"),kHo=o(" \u2014 "),KX=a("a"),SHo=o("XLMForTokenClassification"),RHo=o(" (XLM model)"),PHo=l(),qv=a("li"),Gue=a("strong"),BHo=o("xlm-roberta"),IHo=o(" \u2014 "),ZX=a("a"),NHo=o("XLMRobertaForTokenClassification"),qHo=o(" (XLM-RoBERTa model)"),jHo=l(),jv=a("li"),Oue=a("strong"),DHo=o("xlm-roberta-xl"),GHo=o(" \u2014 "),ez=a("a"),OHo=o("XLMRobertaXLForTokenClassification"),VHo=o(" (XLM-RoBERTa-XL model)"),XHo=l(),Dv=a("li"),Vue=a("strong"),zHo=o("xlnet"),WHo=o(" \u2014 "),oz=a("a"),QHo=o("XLNetForTokenClassification"),HHo=o(" (XLNet model)"),UHo=l(),Gv=a("li"),Xue=a("strong"),JHo=o("yoso"),YHo=o(" \u2014 "),rz=a("a"),KHo=o("YosoForTokenClassification"),ZHo=o(" (YOSO model)"),eUo=l(),Ov=a("p"),oUo=o("The model is set in evaluation mode by default using "),zue=a("code"),rUo=o("model.eval()"),tUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=a("code"),aUo=o("model.train()"),nUo=l(),F(Vv.$$.fragment),WGe=l(),id=a("h2"),Xv=a("a"),Que=a("span"),F(Dy.$$.fragment),sUo=l(),Hue=a("span"),lUo=o("AutoModelForQuestionAnswering"),QGe=l(),qo=a("div"),F(Gy.$$.fragment),iUo=l(),dd=a("p"),dUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),tz=a("a"),cUo=o("from_pretrained()"),fUo=o(" class method or the "),az=a("a"),mUo=o("from_config()"),gUo=o(` class
method.`),hUo=l(),Oy=a("p"),pUo=o("This class cannot be instantiated directly using "),Uue=a("code"),uUo=o("__init__()"),_Uo=o(" (throws an error)."),bUo=l(),ht=a("div"),F(Vy.$$.fragment),vUo=l(),Jue=a("p"),FUo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TUo=l(),cd=a("p"),MUo=o(`Note:
Loading a model from its configuration file does `),Yue=a("strong"),EUo=o("not"),CUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=a("a"),wUo=o("from_pretrained()"),AUo=o(" to load the model weights."),LUo=l(),F(zv.$$.fragment),yUo=l(),no=a("div"),F(Xy.$$.fragment),xUo=l(),Kue=a("p"),$Uo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),kUo=l(),Ga=a("p"),SUo=o("The model class to instantiate is selected based on the "),Zue=a("code"),RUo=o("model_type"),PUo=o(` property of the config object (either
passed as an argument or loaded from `),e_e=a("code"),BUo=o("pretrained_model_name_or_path"),IUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=a("code"),NUo=o("pretrained_model_name_or_path"),qUo=o(":"),jUo=l(),V=a("ul"),Wv=a("li"),r_e=a("strong"),DUo=o("albert"),GUo=o(" \u2014 "),sz=a("a"),OUo=o("AlbertForQuestionAnswering"),VUo=o(" (ALBERT model)"),XUo=l(),Qv=a("li"),t_e=a("strong"),zUo=o("bart"),WUo=o(" \u2014 "),lz=a("a"),QUo=o("BartForQuestionAnswering"),HUo=o(" (BART model)"),UUo=l(),Hv=a("li"),a_e=a("strong"),JUo=o("bert"),YUo=o(" \u2014 "),iz=a("a"),KUo=o("BertForQuestionAnswering"),ZUo=o(" (BERT model)"),eJo=l(),Uv=a("li"),n_e=a("strong"),oJo=o("big_bird"),rJo=o(" \u2014 "),dz=a("a"),tJo=o("BigBirdForQuestionAnswering"),aJo=o(" (BigBird model)"),nJo=l(),Jv=a("li"),s_e=a("strong"),sJo=o("bigbird_pegasus"),lJo=o(" \u2014 "),cz=a("a"),iJo=o("BigBirdPegasusForQuestionAnswering"),dJo=o(" (BigBird-Pegasus model)"),cJo=l(),Yv=a("li"),l_e=a("strong"),fJo=o("camembert"),mJo=o(" \u2014 "),fz=a("a"),gJo=o("CamembertForQuestionAnswering"),hJo=o(" (CamemBERT model)"),pJo=l(),Kv=a("li"),i_e=a("strong"),uJo=o("canine"),_Jo=o(" \u2014 "),mz=a("a"),bJo=o("CanineForQuestionAnswering"),vJo=o(" (CANINE model)"),FJo=l(),Zv=a("li"),d_e=a("strong"),TJo=o("convbert"),MJo=o(" \u2014 "),gz=a("a"),EJo=o("ConvBertForQuestionAnswering"),CJo=o(" (ConvBERT model)"),wJo=l(),e3=a("li"),c_e=a("strong"),AJo=o("data2vec-text"),LJo=o(" \u2014 "),hz=a("a"),yJo=o("Data2VecTextForQuestionAnswering"),xJo=o(" (Data2VecText model)"),$Jo=l(),o3=a("li"),f_e=a("strong"),kJo=o("deberta"),SJo=o(" \u2014 "),pz=a("a"),RJo=o("DebertaForQuestionAnswering"),PJo=o(" (DeBERTa model)"),BJo=l(),r3=a("li"),m_e=a("strong"),IJo=o("deberta-v2"),NJo=o(" \u2014 "),uz=a("a"),qJo=o("DebertaV2ForQuestionAnswering"),jJo=o(" (DeBERTa-v2 model)"),DJo=l(),t3=a("li"),g_e=a("strong"),GJo=o("distilbert"),OJo=o(" \u2014 "),_z=a("a"),VJo=o("DistilBertForQuestionAnswering"),XJo=o(" (DistilBERT model)"),zJo=l(),a3=a("li"),h_e=a("strong"),WJo=o("electra"),QJo=o(" \u2014 "),bz=a("a"),HJo=o("ElectraForQuestionAnswering"),UJo=o(" (ELECTRA model)"),JJo=l(),n3=a("li"),p_e=a("strong"),YJo=o("flaubert"),KJo=o(" \u2014 "),vz=a("a"),ZJo=o("FlaubertForQuestionAnsweringSimple"),eYo=o(" (FlauBERT model)"),oYo=l(),s3=a("li"),u_e=a("strong"),rYo=o("fnet"),tYo=o(" \u2014 "),Fz=a("a"),aYo=o("FNetForQuestionAnswering"),nYo=o(" (FNet model)"),sYo=l(),l3=a("li"),__e=a("strong"),lYo=o("funnel"),iYo=o(" \u2014 "),Tz=a("a"),dYo=o("FunnelForQuestionAnswering"),cYo=o(" (Funnel Transformer model)"),fYo=l(),i3=a("li"),b_e=a("strong"),mYo=o("gptj"),gYo=o(" \u2014 "),Mz=a("a"),hYo=o("GPTJForQuestionAnswering"),pYo=o(" (GPT-J model)"),uYo=l(),d3=a("li"),v_e=a("strong"),_Yo=o("ibert"),bYo=o(" \u2014 "),Ez=a("a"),vYo=o("IBertForQuestionAnswering"),FYo=o(" (I-BERT model)"),TYo=l(),c3=a("li"),F_e=a("strong"),MYo=o("layoutlmv2"),EYo=o(" \u2014 "),Cz=a("a"),CYo=o("LayoutLMv2ForQuestionAnswering"),wYo=o(" (LayoutLMv2 model)"),AYo=l(),f3=a("li"),T_e=a("strong"),LYo=o("layoutlmv3"),yYo=o(" \u2014 "),wz=a("a"),xYo=o("LayoutLMv3ForQuestionAnswering"),$Yo=o(" (LayoutLMv3 model)"),kYo=l(),m3=a("li"),M_e=a("strong"),SYo=o("led"),RYo=o(" \u2014 "),Az=a("a"),PYo=o("LEDForQuestionAnswering"),BYo=o(" (LED model)"),IYo=l(),g3=a("li"),E_e=a("strong"),NYo=o("longformer"),qYo=o(" \u2014 "),Lz=a("a"),jYo=o("LongformerForQuestionAnswering"),DYo=o(" (Longformer model)"),GYo=l(),h3=a("li"),C_e=a("strong"),OYo=o("lxmert"),VYo=o(" \u2014 "),yz=a("a"),XYo=o("LxmertForQuestionAnswering"),zYo=o(" (LXMERT model)"),WYo=l(),p3=a("li"),w_e=a("strong"),QYo=o("mbart"),HYo=o(" \u2014 "),xz=a("a"),UYo=o("MBartForQuestionAnswering"),JYo=o(" (mBART model)"),YYo=l(),u3=a("li"),A_e=a("strong"),KYo=o("megatron-bert"),ZYo=o(" \u2014 "),$z=a("a"),eKo=o("MegatronBertForQuestionAnswering"),oKo=o(" (Megatron-BERT model)"),rKo=l(),_3=a("li"),L_e=a("strong"),tKo=o("mobilebert"),aKo=o(" \u2014 "),kz=a("a"),nKo=o("MobileBertForQuestionAnswering"),sKo=o(" (MobileBERT model)"),lKo=l(),b3=a("li"),y_e=a("strong"),iKo=o("mpnet"),dKo=o(" \u2014 "),Sz=a("a"),cKo=o("MPNetForQuestionAnswering"),fKo=o(" (MPNet model)"),mKo=l(),v3=a("li"),x_e=a("strong"),gKo=o("nystromformer"),hKo=o(" \u2014 "),Rz=a("a"),pKo=o("NystromformerForQuestionAnswering"),uKo=o(" (Nystr\xF6mformer model)"),_Ko=l(),F3=a("li"),$_e=a("strong"),bKo=o("qdqbert"),vKo=o(" \u2014 "),Pz=a("a"),FKo=o("QDQBertForQuestionAnswering"),TKo=o(" (QDQBert model)"),MKo=l(),T3=a("li"),k_e=a("strong"),EKo=o("reformer"),CKo=o(" \u2014 "),Bz=a("a"),wKo=o("ReformerForQuestionAnswering"),AKo=o(" (Reformer model)"),LKo=l(),M3=a("li"),S_e=a("strong"),yKo=o("rembert"),xKo=o(" \u2014 "),Iz=a("a"),$Ko=o("RemBertForQuestionAnswering"),kKo=o(" (RemBERT model)"),SKo=l(),E3=a("li"),R_e=a("strong"),RKo=o("roberta"),PKo=o(" \u2014 "),Nz=a("a"),BKo=o("RobertaForQuestionAnswering"),IKo=o(" (RoBERTa model)"),NKo=l(),C3=a("li"),P_e=a("strong"),qKo=o("roformer"),jKo=o(" \u2014 "),qz=a("a"),DKo=o("RoFormerForQuestionAnswering"),GKo=o(" (RoFormer model)"),OKo=l(),w3=a("li"),B_e=a("strong"),VKo=o("splinter"),XKo=o(" \u2014 "),jz=a("a"),zKo=o("SplinterForQuestionAnswering"),WKo=o(" (Splinter model)"),QKo=l(),A3=a("li"),I_e=a("strong"),HKo=o("squeezebert"),UKo=o(" \u2014 "),Dz=a("a"),JKo=o("SqueezeBertForQuestionAnswering"),YKo=o(" (SqueezeBERT model)"),KKo=l(),L3=a("li"),N_e=a("strong"),ZKo=o("xlm"),eZo=o(" \u2014 "),Gz=a("a"),oZo=o("XLMForQuestionAnsweringSimple"),rZo=o(" (XLM model)"),tZo=l(),y3=a("li"),q_e=a("strong"),aZo=o("xlm-roberta"),nZo=o(" \u2014 "),Oz=a("a"),sZo=o("XLMRobertaForQuestionAnswering"),lZo=o(" (XLM-RoBERTa model)"),iZo=l(),x3=a("li"),j_e=a("strong"),dZo=o("xlm-roberta-xl"),cZo=o(" \u2014 "),Vz=a("a"),fZo=o("XLMRobertaXLForQuestionAnswering"),mZo=o(" (XLM-RoBERTa-XL model)"),gZo=l(),$3=a("li"),D_e=a("strong"),hZo=o("xlnet"),pZo=o(" \u2014 "),Xz=a("a"),uZo=o("XLNetForQuestionAnsweringSimple"),_Zo=o(" (XLNet model)"),bZo=l(),k3=a("li"),G_e=a("strong"),vZo=o("yoso"),FZo=o(" \u2014 "),zz=a("a"),TZo=o("YosoForQuestionAnswering"),MZo=o(" (YOSO model)"),EZo=l(),S3=a("p"),CZo=o("The model is set in evaluation mode by default using "),O_e=a("code"),wZo=o("model.eval()"),AZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V_e=a("code"),LZo=o("model.train()"),yZo=l(),F(R3.$$.fragment),HGe=l(),fd=a("h2"),P3=a("a"),X_e=a("span"),F(zy.$$.fragment),xZo=l(),z_e=a("span"),$Zo=o("AutoModelForTableQuestionAnswering"),UGe=l(),jo=a("div"),F(Wy.$$.fragment),kZo=l(),md=a("p"),SZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Wz=a("a"),RZo=o("from_pretrained()"),PZo=o(" class method or the "),Qz=a("a"),BZo=o("from_config()"),IZo=o(` class
method.`),NZo=l(),Qy=a("p"),qZo=o("This class cannot be instantiated directly using "),W_e=a("code"),jZo=o("__init__()"),DZo=o(" (throws an error)."),GZo=l(),pt=a("div"),F(Hy.$$.fragment),OZo=l(),Q_e=a("p"),VZo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),XZo=l(),gd=a("p"),zZo=o(`Note:
Loading a model from its configuration file does `),H_e=a("strong"),WZo=o("not"),QZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=a("a"),HZo=o("from_pretrained()"),UZo=o(" to load the model weights."),JZo=l(),F(B3.$$.fragment),YZo=l(),so=a("div"),F(Uy.$$.fragment),KZo=l(),U_e=a("p"),ZZo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),eer=l(),Oa=a("p"),oer=o("The model class to instantiate is selected based on the "),J_e=a("code"),rer=o("model_type"),ter=o(` property of the config object (either
passed as an argument or loaded from `),Y_e=a("code"),aer=o("pretrained_model_name_or_path"),ner=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=a("code"),ser=o("pretrained_model_name_or_path"),ler=o(":"),ier=l(),Z_e=a("ul"),I3=a("li"),e4e=a("strong"),der=o("tapas"),cer=o(" \u2014 "),Uz=a("a"),fer=o("TapasForQuestionAnswering"),mer=o(" (TAPAS model)"),ger=l(),N3=a("p"),her=o("The model is set in evaluation mode by default using "),o4e=a("code"),per=o("model.eval()"),uer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r4e=a("code"),_er=o("model.train()"),ber=l(),F(q3.$$.fragment),JGe=l(),hd=a("h2"),j3=a("a"),t4e=a("span"),F(Jy.$$.fragment),ver=l(),a4e=a("span"),Fer=o("AutoModelForImageClassification"),YGe=l(),Do=a("div"),F(Yy.$$.fragment),Ter=l(),pd=a("p"),Mer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Jz=a("a"),Eer=o("from_pretrained()"),Cer=o(" class method or the "),Yz=a("a"),wer=o("from_config()"),Aer=o(` class
method.`),Ler=l(),Ky=a("p"),yer=o("This class cannot be instantiated directly using "),n4e=a("code"),xer=o("__init__()"),$er=o(" (throws an error)."),ker=l(),ut=a("div"),F(Zy.$$.fragment),Ser=l(),s4e=a("p"),Rer=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Per=l(),ud=a("p"),Ber=o(`Note:
Loading a model from its configuration file does `),l4e=a("strong"),Ier=o("not"),Ner=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=a("a"),qer=o("from_pretrained()"),jer=o(" to load the model weights."),Der=l(),F(D3.$$.fragment),Ger=l(),lo=a("div"),F(e8.$$.fragment),Oer=l(),i4e=a("p"),Ver=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xer=l(),Va=a("p"),zer=o("The model class to instantiate is selected based on the "),d4e=a("code"),Wer=o("model_type"),Qer=o(` property of the config object (either
passed as an argument or loaded from `),c4e=a("code"),Her=o("pretrained_model_name_or_path"),Uer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=a("code"),Jer=o("pretrained_model_name_or_path"),Yer=o(":"),Ker=l(),Fe=a("ul"),G3=a("li"),m4e=a("strong"),Zer=o("beit"),eor=o(" \u2014 "),Zz=a("a"),oor=o("BeitForImageClassification"),ror=o(" (BEiT model)"),tor=l(),O3=a("li"),g4e=a("strong"),aor=o("convnext"),nor=o(" \u2014 "),eW=a("a"),sor=o("ConvNextForImageClassification"),lor=o(" (ConvNeXT model)"),ior=l(),V3=a("li"),h4e=a("strong"),dor=o("cvt"),cor=o(" \u2014 "),oW=a("a"),mor=o("CvtForImageClassification"),gor=o(" (CvT model)"),hor=l(),X3=a("li"),p4e=a("strong"),por=o("data2vec-vision"),uor=o(" \u2014 "),rW=a("a"),_or=o("Data2VecVisionForImageClassification"),bor=o(" (Data2VecVision model)"),vor=l(),Vs=a("li"),u4e=a("strong"),For=o("deit"),Tor=o(" \u2014 "),tW=a("a"),Mor=o("DeiTForImageClassification"),Eor=o(" or "),aW=a("a"),Cor=o("DeiTForImageClassificationWithTeacher"),wor=o(" (DeiT model)"),Aor=l(),z3=a("li"),_4e=a("strong"),Lor=o("imagegpt"),yor=o(" \u2014 "),nW=a("a"),xor=o("ImageGPTForImageClassification"),$or=o(" (ImageGPT model)"),kor=l(),Xs=a("li"),b4e=a("strong"),Sor=o("levit"),Ror=o(" \u2014 "),sW=a("a"),Por=o("LevitForImageClassification"),Bor=o(" or "),lW=a("a"),Ior=o("LevitForImageClassificationWithTeacher"),Nor=o(" (LeViT model)"),qor=l(),_t=a("li"),v4e=a("strong"),jor=o("perceiver"),Dor=o(" \u2014 "),iW=a("a"),Gor=o("PerceiverForImageClassificationLearned"),Oor=o(" or "),dW=a("a"),Vor=o("PerceiverForImageClassificationFourier"),Xor=o(" or "),cW=a("a"),zor=o("PerceiverForImageClassificationConvProcessing"),Wor=o(" (Perceiver model)"),Qor=l(),W3=a("li"),F4e=a("strong"),Hor=o("poolformer"),Uor=o(" \u2014 "),fW=a("a"),Jor=o("PoolFormerForImageClassification"),Yor=o(" (PoolFormer model)"),Kor=l(),Q3=a("li"),T4e=a("strong"),Zor=o("regnet"),err=o(" \u2014 "),mW=a("a"),orr=o("RegNetForImageClassification"),rrr=o(" (RegNet model)"),trr=l(),H3=a("li"),M4e=a("strong"),arr=o("resnet"),nrr=o(" \u2014 "),gW=a("a"),srr=o("ResNetForImageClassification"),lrr=o(" (ResNet model)"),irr=l(),U3=a("li"),E4e=a("strong"),drr=o("segformer"),crr=o(" \u2014 "),hW=a("a"),frr=o("SegformerForImageClassification"),mrr=o(" (SegFormer model)"),grr=l(),J3=a("li"),C4e=a("strong"),hrr=o("swin"),prr=o(" \u2014 "),pW=a("a"),urr=o("SwinForImageClassification"),_rr=o(" (Swin Transformer model)"),brr=l(),Y3=a("li"),w4e=a("strong"),vrr=o("van"),Frr=o(" \u2014 "),uW=a("a"),Trr=o("VanForImageClassification"),Mrr=o(" (VAN model)"),Err=l(),K3=a("li"),A4e=a("strong"),Crr=o("vit"),wrr=o(" \u2014 "),_W=a("a"),Arr=o("ViTForImageClassification"),Lrr=o(" (ViT model)"),yrr=l(),Z3=a("p"),xrr=o("The model is set in evaluation mode by default using "),L4e=a("code"),$rr=o("model.eval()"),krr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y4e=a("code"),Srr=o("model.train()"),Rrr=l(),F(eF.$$.fragment),KGe=l(),_d=a("h2"),oF=a("a"),x4e=a("span"),F(o8.$$.fragment),Prr=l(),$4e=a("span"),Brr=o("AutoModelForVision2Seq"),ZGe=l(),Go=a("div"),F(r8.$$.fragment),Irr=l(),bd=a("p"),Nrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bW=a("a"),qrr=o("from_pretrained()"),jrr=o(" class method or the "),vW=a("a"),Drr=o("from_config()"),Grr=o(` class
method.`),Orr=l(),t8=a("p"),Vrr=o("This class cannot be instantiated directly using "),k4e=a("code"),Xrr=o("__init__()"),zrr=o(" (throws an error)."),Wrr=l(),bt=a("div"),F(a8.$$.fragment),Qrr=l(),S4e=a("p"),Hrr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Urr=l(),vd=a("p"),Jrr=o(`Note:
Loading a model from its configuration file does `),R4e=a("strong"),Yrr=o("not"),Krr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=a("a"),Zrr=o("from_pretrained()"),etr=o(" to load the model weights."),otr=l(),F(rF.$$.fragment),rtr=l(),io=a("div"),F(n8.$$.fragment),ttr=l(),P4e=a("p"),atr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ntr=l(),Xa=a("p"),str=o("The model class to instantiate is selected based on the "),B4e=a("code"),ltr=o("model_type"),itr=o(` property of the config object (either
passed as an argument or loaded from `),I4e=a("code"),dtr=o("pretrained_model_name_or_path"),ctr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=a("code"),ftr=o("pretrained_model_name_or_path"),mtr=o(":"),gtr=l(),q4e=a("ul"),tF=a("li"),j4e=a("strong"),htr=o("vision-encoder-decoder"),ptr=o(" \u2014 "),TW=a("a"),utr=o("VisionEncoderDecoderModel"),_tr=o(" (Vision Encoder decoder model)"),btr=l(),aF=a("p"),vtr=o("The model is set in evaluation mode by default using "),D4e=a("code"),Ftr=o("model.eval()"),Ttr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G4e=a("code"),Mtr=o("model.train()"),Etr=l(),F(nF.$$.fragment),eOe=l(),Fd=a("h2"),sF=a("a"),O4e=a("span"),F(s8.$$.fragment),Ctr=l(),V4e=a("span"),wtr=o("AutoModelForVisualQuestionAnswering"),oOe=l(),Oo=a("div"),F(l8.$$.fragment),Atr=l(),Td=a("p"),Ltr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),MW=a("a"),ytr=o("from_pretrained()"),xtr=o(" class method or the "),EW=a("a"),$tr=o("from_config()"),ktr=o(` class
method.`),Str=l(),i8=a("p"),Rtr=o("This class cannot be instantiated directly using "),X4e=a("code"),Ptr=o("__init__()"),Btr=o(" (throws an error)."),Itr=l(),vt=a("div"),F(d8.$$.fragment),Ntr=l(),z4e=a("p"),qtr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),jtr=l(),Md=a("p"),Dtr=o(`Note:
Loading a model from its configuration file does `),W4e=a("strong"),Gtr=o("not"),Otr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=a("a"),Vtr=o("from_pretrained()"),Xtr=o(" to load the model weights."),ztr=l(),F(lF.$$.fragment),Wtr=l(),co=a("div"),F(c8.$$.fragment),Qtr=l(),Q4e=a("p"),Htr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Utr=l(),za=a("p"),Jtr=o("The model class to instantiate is selected based on the "),H4e=a("code"),Ytr=o("model_type"),Ktr=o(` property of the config object (either
passed as an argument or loaded from `),U4e=a("code"),Ztr=o("pretrained_model_name_or_path"),ear=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=a("code"),oar=o("pretrained_model_name_or_path"),rar=o(":"),tar=l(),Y4e=a("ul"),iF=a("li"),K4e=a("strong"),aar=o("vilt"),nar=o(" \u2014 "),wW=a("a"),sar=o("ViltForQuestionAnswering"),lar=o(" (ViLT model)"),iar=l(),dF=a("p"),dar=o("The model is set in evaluation mode by default using "),Z4e=a("code"),car=o("model.eval()"),far=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e1e=a("code"),mar=o("model.train()"),gar=l(),F(cF.$$.fragment),rOe=l(),Ed=a("h2"),fF=a("a"),o1e=a("span"),F(f8.$$.fragment),har=l(),r1e=a("span"),par=o("AutoModelForAudioClassification"),tOe=l(),Vo=a("div"),F(m8.$$.fragment),uar=l(),Cd=a("p"),_ar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),AW=a("a"),bar=o("from_pretrained()"),Far=o(" class method or the "),LW=a("a"),Tar=o("from_config()"),Mar=o(` class
method.`),Ear=l(),g8=a("p"),Car=o("This class cannot be instantiated directly using "),t1e=a("code"),war=o("__init__()"),Aar=o(" (throws an error)."),Lar=l(),Ft=a("div"),F(h8.$$.fragment),yar=l(),a1e=a("p"),xar=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),$ar=l(),wd=a("p"),kar=o(`Note:
Loading a model from its configuration file does `),n1e=a("strong"),Sar=o("not"),Rar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=a("a"),Par=o("from_pretrained()"),Bar=o(" to load the model weights."),Iar=l(),F(mF.$$.fragment),Nar=l(),fo=a("div"),F(p8.$$.fragment),qar=l(),s1e=a("p"),jar=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Dar=l(),Wa=a("p"),Gar=o("The model class to instantiate is selected based on the "),l1e=a("code"),Oar=o("model_type"),Var=o(` property of the config object (either
passed as an argument or loaded from `),i1e=a("code"),Xar=o("pretrained_model_name_or_path"),zar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=a("code"),War=o("pretrained_model_name_or_path"),Qar=o(":"),Har=l(),Pe=a("ul"),gF=a("li"),c1e=a("strong"),Uar=o("data2vec-audio"),Jar=o(" \u2014 "),xW=a("a"),Yar=o("Data2VecAudioForSequenceClassification"),Kar=o(" (Data2VecAudio model)"),Zar=l(),hF=a("li"),f1e=a("strong"),enr=o("hubert"),onr=o(" \u2014 "),$W=a("a"),rnr=o("HubertForSequenceClassification"),tnr=o(" (Hubert model)"),anr=l(),pF=a("li"),m1e=a("strong"),nnr=o("sew"),snr=o(" \u2014 "),kW=a("a"),lnr=o("SEWForSequenceClassification"),inr=o(" (SEW model)"),dnr=l(),uF=a("li"),g1e=a("strong"),cnr=o("sew-d"),fnr=o(" \u2014 "),SW=a("a"),mnr=o("SEWDForSequenceClassification"),gnr=o(" (SEW-D model)"),hnr=l(),_F=a("li"),h1e=a("strong"),pnr=o("unispeech"),unr=o(" \u2014 "),RW=a("a"),_nr=o("UniSpeechForSequenceClassification"),bnr=o(" (UniSpeech model)"),vnr=l(),bF=a("li"),p1e=a("strong"),Fnr=o("unispeech-sat"),Tnr=o(" \u2014 "),PW=a("a"),Mnr=o("UniSpeechSatForSequenceClassification"),Enr=o(" (UniSpeechSat model)"),Cnr=l(),vF=a("li"),u1e=a("strong"),wnr=o("wav2vec2"),Anr=o(" \u2014 "),BW=a("a"),Lnr=o("Wav2Vec2ForSequenceClassification"),ynr=o(" (Wav2Vec2 model)"),xnr=l(),FF=a("li"),_1e=a("strong"),$nr=o("wav2vec2-conformer"),knr=o(" \u2014 "),IW=a("a"),Snr=o("Wav2Vec2ConformerForSequenceClassification"),Rnr=o(" (Wav2Vec2-Conformer model)"),Pnr=l(),TF=a("li"),b1e=a("strong"),Bnr=o("wavlm"),Inr=o(" \u2014 "),NW=a("a"),Nnr=o("WavLMForSequenceClassification"),qnr=o(" (WavLM model)"),jnr=l(),MF=a("p"),Dnr=o("The model is set in evaluation mode by default using "),v1e=a("code"),Gnr=o("model.eval()"),Onr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F1e=a("code"),Vnr=o("model.train()"),Xnr=l(),F(EF.$$.fragment),aOe=l(),Ad=a("h2"),CF=a("a"),T1e=a("span"),F(u8.$$.fragment),znr=l(),M1e=a("span"),Wnr=o("AutoModelForAudioFrameClassification"),nOe=l(),Xo=a("div"),F(_8.$$.fragment),Qnr=l(),Ld=a("p"),Hnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),qW=a("a"),Unr=o("from_pretrained()"),Jnr=o(" class method or the "),jW=a("a"),Ynr=o("from_config()"),Knr=o(` class
method.`),Znr=l(),b8=a("p"),esr=o("This class cannot be instantiated directly using "),E1e=a("code"),osr=o("__init__()"),rsr=o(" (throws an error)."),tsr=l(),Tt=a("div"),F(v8.$$.fragment),asr=l(),C1e=a("p"),nsr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ssr=l(),yd=a("p"),lsr=o(`Note:
Loading a model from its configuration file does `),w1e=a("strong"),isr=o("not"),dsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=a("a"),csr=o("from_pretrained()"),fsr=o(" to load the model weights."),msr=l(),F(wF.$$.fragment),gsr=l(),mo=a("div"),F(F8.$$.fragment),hsr=l(),A1e=a("p"),psr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),usr=l(),Qa=a("p"),_sr=o("The model class to instantiate is selected based on the "),L1e=a("code"),bsr=o("model_type"),vsr=o(` property of the config object (either
passed as an argument or loaded from `),y1e=a("code"),Fsr=o("pretrained_model_name_or_path"),Tsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=a("code"),Msr=o("pretrained_model_name_or_path"),Esr=o(":"),Csr=l(),et=a("ul"),AF=a("li"),$1e=a("strong"),wsr=o("data2vec-audio"),Asr=o(" \u2014 "),GW=a("a"),Lsr=o("Data2VecAudioForAudioFrameClassification"),ysr=o(" (Data2VecAudio model)"),xsr=l(),LF=a("li"),k1e=a("strong"),$sr=o("unispeech-sat"),ksr=o(" \u2014 "),OW=a("a"),Ssr=o("UniSpeechSatForAudioFrameClassification"),Rsr=o(" (UniSpeechSat model)"),Psr=l(),yF=a("li"),S1e=a("strong"),Bsr=o("wav2vec2"),Isr=o(" \u2014 "),VW=a("a"),Nsr=o("Wav2Vec2ForAudioFrameClassification"),qsr=o(" (Wav2Vec2 model)"),jsr=l(),xF=a("li"),R1e=a("strong"),Dsr=o("wav2vec2-conformer"),Gsr=o(" \u2014 "),XW=a("a"),Osr=o("Wav2Vec2ConformerForAudioFrameClassification"),Vsr=o(" (Wav2Vec2-Conformer model)"),Xsr=l(),$F=a("li"),P1e=a("strong"),zsr=o("wavlm"),Wsr=o(" \u2014 "),zW=a("a"),Qsr=o("WavLMForAudioFrameClassification"),Hsr=o(" (WavLM model)"),Usr=l(),kF=a("p"),Jsr=o("The model is set in evaluation mode by default using "),B1e=a("code"),Ysr=o("model.eval()"),Ksr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I1e=a("code"),Zsr=o("model.train()"),elr=l(),F(SF.$$.fragment),sOe=l(),xd=a("h2"),RF=a("a"),N1e=a("span"),F(T8.$$.fragment),olr=l(),q1e=a("span"),rlr=o("AutoModelForCTC"),lOe=l(),zo=a("div"),F(M8.$$.fragment),tlr=l(),$d=a("p"),alr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),WW=a("a"),nlr=o("from_pretrained()"),slr=o(" class method or the "),QW=a("a"),llr=o("from_config()"),ilr=o(` class
method.`),dlr=l(),E8=a("p"),clr=o("This class cannot be instantiated directly using "),j1e=a("code"),flr=o("__init__()"),mlr=o(" (throws an error)."),glr=l(),Mt=a("div"),F(C8.$$.fragment),hlr=l(),D1e=a("p"),plr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ulr=l(),kd=a("p"),_lr=o(`Note:
Loading a model from its configuration file does `),G1e=a("strong"),blr=o("not"),vlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=a("a"),Flr=o("from_pretrained()"),Tlr=o(" to load the model weights."),Mlr=l(),F(PF.$$.fragment),Elr=l(),go=a("div"),F(w8.$$.fragment),Clr=l(),O1e=a("p"),wlr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Alr=l(),Ha=a("p"),Llr=o("The model class to instantiate is selected based on the "),V1e=a("code"),ylr=o("model_type"),xlr=o(` property of the config object (either
passed as an argument or loaded from `),X1e=a("code"),$lr=o("pretrained_model_name_or_path"),klr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=a("code"),Slr=o("pretrained_model_name_or_path"),Rlr=o(":"),Plr=l(),Le=a("ul"),BF=a("li"),W1e=a("strong"),Blr=o("data2vec-audio"),Ilr=o(" \u2014 "),UW=a("a"),Nlr=o("Data2VecAudioForCTC"),qlr=o(" (Data2VecAudio model)"),jlr=l(),IF=a("li"),Q1e=a("strong"),Dlr=o("hubert"),Glr=o(" \u2014 "),JW=a("a"),Olr=o("HubertForCTC"),Vlr=o(" (Hubert model)"),Xlr=l(),NF=a("li"),H1e=a("strong"),zlr=o("mctct"),Wlr=o(" \u2014 "),YW=a("a"),Qlr=o("MCTCTForCTC"),Hlr=o(" (M-CTC-T model)"),Ulr=l(),qF=a("li"),U1e=a("strong"),Jlr=o("sew"),Ylr=o(" \u2014 "),KW=a("a"),Klr=o("SEWForCTC"),Zlr=o(" (SEW model)"),eir=l(),jF=a("li"),J1e=a("strong"),oir=o("sew-d"),rir=o(" \u2014 "),ZW=a("a"),tir=o("SEWDForCTC"),air=o(" (SEW-D model)"),nir=l(),DF=a("li"),Y1e=a("strong"),sir=o("unispeech"),lir=o(" \u2014 "),eQ=a("a"),iir=o("UniSpeechForCTC"),dir=o(" (UniSpeech model)"),cir=l(),GF=a("li"),K1e=a("strong"),fir=o("unispeech-sat"),mir=o(" \u2014 "),oQ=a("a"),gir=o("UniSpeechSatForCTC"),hir=o(" (UniSpeechSat model)"),pir=l(),OF=a("li"),Z1e=a("strong"),uir=o("wav2vec2"),_ir=o(" \u2014 "),rQ=a("a"),bir=o("Wav2Vec2ForCTC"),vir=o(" (Wav2Vec2 model)"),Fir=l(),VF=a("li"),e2e=a("strong"),Tir=o("wav2vec2-conformer"),Mir=o(" \u2014 "),tQ=a("a"),Eir=o("Wav2Vec2ConformerForCTC"),Cir=o(" (Wav2Vec2-Conformer model)"),wir=l(),XF=a("li"),o2e=a("strong"),Air=o("wavlm"),Lir=o(" \u2014 "),aQ=a("a"),yir=o("WavLMForCTC"),xir=o(" (WavLM model)"),$ir=l(),zF=a("p"),kir=o("The model is set in evaluation mode by default using "),r2e=a("code"),Sir=o("model.eval()"),Rir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t2e=a("code"),Pir=o("model.train()"),Bir=l(),F(WF.$$.fragment),iOe=l(),Sd=a("h2"),QF=a("a"),a2e=a("span"),F(A8.$$.fragment),Iir=l(),n2e=a("span"),Nir=o("AutoModelForSpeechSeq2Seq"),dOe=l(),Wo=a("div"),F(L8.$$.fragment),qir=l(),Rd=a("p"),jir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nQ=a("a"),Dir=o("from_pretrained()"),Gir=o(" class method or the "),sQ=a("a"),Oir=o("from_config()"),Vir=o(` class
method.`),Xir=l(),y8=a("p"),zir=o("This class cannot be instantiated directly using "),s2e=a("code"),Wir=o("__init__()"),Qir=o(" (throws an error)."),Hir=l(),Et=a("div"),F(x8.$$.fragment),Uir=l(),l2e=a("p"),Jir=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Yir=l(),Pd=a("p"),Kir=o(`Note:
Loading a model from its configuration file does `),i2e=a("strong"),Zir=o("not"),edr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=a("a"),odr=o("from_pretrained()"),rdr=o(" to load the model weights."),tdr=l(),F(HF.$$.fragment),adr=l(),ho=a("div"),F($8.$$.fragment),ndr=l(),d2e=a("p"),sdr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ldr=l(),Ua=a("p"),idr=o("The model class to instantiate is selected based on the "),c2e=a("code"),ddr=o("model_type"),cdr=o(` property of the config object (either
passed as an argument or loaded from `),f2e=a("code"),fdr=o("pretrained_model_name_or_path"),mdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=a("code"),gdr=o("pretrained_model_name_or_path"),hdr=o(":"),pdr=l(),k8=a("ul"),UF=a("li"),g2e=a("strong"),udr=o("speech-encoder-decoder"),_dr=o(" \u2014 "),iQ=a("a"),bdr=o("SpeechEncoderDecoderModel"),vdr=o(" (Speech Encoder decoder model)"),Fdr=l(),JF=a("li"),h2e=a("strong"),Tdr=o("speech_to_text"),Mdr=o(" \u2014 "),dQ=a("a"),Edr=o("Speech2TextForConditionalGeneration"),Cdr=o(" (Speech2Text model)"),wdr=l(),YF=a("p"),Adr=o("The model is set in evaluation mode by default using "),p2e=a("code"),Ldr=o("model.eval()"),ydr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u2e=a("code"),xdr=o("model.train()"),$dr=l(),F(KF.$$.fragment),cOe=l(),Bd=a("h2"),ZF=a("a"),_2e=a("span"),F(S8.$$.fragment),kdr=l(),b2e=a("span"),Sdr=o("AutoModelForAudioXVector"),fOe=l(),Qo=a("div"),F(R8.$$.fragment),Rdr=l(),Id=a("p"),Pdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),cQ=a("a"),Bdr=o("from_pretrained()"),Idr=o(" class method or the "),fQ=a("a"),Ndr=o("from_config()"),qdr=o(` class
method.`),jdr=l(),P8=a("p"),Ddr=o("This class cannot be instantiated directly using "),v2e=a("code"),Gdr=o("__init__()"),Odr=o(" (throws an error)."),Vdr=l(),Ct=a("div"),F(B8.$$.fragment),Xdr=l(),F2e=a("p"),zdr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Wdr=l(),Nd=a("p"),Qdr=o(`Note:
Loading a model from its configuration file does `),T2e=a("strong"),Hdr=o("not"),Udr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=a("a"),Jdr=o("from_pretrained()"),Ydr=o(" to load the model weights."),Kdr=l(),F(eT.$$.fragment),Zdr=l(),po=a("div"),F(I8.$$.fragment),ecr=l(),M2e=a("p"),ocr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),rcr=l(),Ja=a("p"),tcr=o("The model class to instantiate is selected based on the "),E2e=a("code"),acr=o("model_type"),ncr=o(` property of the config object (either
passed as an argument or loaded from `),C2e=a("code"),scr=o("pretrained_model_name_or_path"),lcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=a("code"),icr=o("pretrained_model_name_or_path"),dcr=o(":"),ccr=l(),ot=a("ul"),oT=a("li"),A2e=a("strong"),fcr=o("data2vec-audio"),mcr=o(" \u2014 "),gQ=a("a"),gcr=o("Data2VecAudioForXVector"),hcr=o(" (Data2VecAudio model)"),pcr=l(),rT=a("li"),L2e=a("strong"),ucr=o("unispeech-sat"),_cr=o(" \u2014 "),hQ=a("a"),bcr=o("UniSpeechSatForXVector"),vcr=o(" (UniSpeechSat model)"),Fcr=l(),tT=a("li"),y2e=a("strong"),Tcr=o("wav2vec2"),Mcr=o(" \u2014 "),pQ=a("a"),Ecr=o("Wav2Vec2ForXVector"),Ccr=o(" (Wav2Vec2 model)"),wcr=l(),aT=a("li"),x2e=a("strong"),Acr=o("wav2vec2-conformer"),Lcr=o(" \u2014 "),uQ=a("a"),ycr=o("Wav2Vec2ConformerForXVector"),xcr=o(" (Wav2Vec2-Conformer model)"),$cr=l(),nT=a("li"),$2e=a("strong"),kcr=o("wavlm"),Scr=o(" \u2014 "),_Q=a("a"),Rcr=o("WavLMForXVector"),Pcr=o(" (WavLM model)"),Bcr=l(),sT=a("p"),Icr=o("The model is set in evaluation mode by default using "),k2e=a("code"),Ncr=o("model.eval()"),qcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S2e=a("code"),jcr=o("model.train()"),Dcr=l(),F(lT.$$.fragment),mOe=l(),qd=a("h2"),iT=a("a"),R2e=a("span"),F(N8.$$.fragment),Gcr=l(),P2e=a("span"),Ocr=o("AutoModelForMaskedImageModeling"),gOe=l(),Ho=a("div"),F(q8.$$.fragment),Vcr=l(),jd=a("p"),Xcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),bQ=a("a"),zcr=o("from_pretrained()"),Wcr=o(" class method or the "),vQ=a("a"),Qcr=o("from_config()"),Hcr=o(` class
method.`),Ucr=l(),j8=a("p"),Jcr=o("This class cannot be instantiated directly using "),B2e=a("code"),Ycr=o("__init__()"),Kcr=o(" (throws an error)."),Zcr=l(),wt=a("div"),F(D8.$$.fragment),efr=l(),I2e=a("p"),ofr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),rfr=l(),Dd=a("p"),tfr=o(`Note:
Loading a model from its configuration file does `),N2e=a("strong"),afr=o("not"),nfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),sfr=o("from_pretrained()"),lfr=o(" to load the model weights."),ifr=l(),F(dT.$$.fragment),dfr=l(),uo=a("div"),F(G8.$$.fragment),cfr=l(),q2e=a("p"),ffr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),mfr=l(),Ya=a("p"),gfr=o("The model class to instantiate is selected based on the "),j2e=a("code"),hfr=o("model_type"),pfr=o(` property of the config object (either
passed as an argument or loaded from `),D2e=a("code"),ufr=o("pretrained_model_name_or_path"),_fr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G2e=a("code"),bfr=o("pretrained_model_name_or_path"),vfr=o(":"),Ffr=l(),Gd=a("ul"),cT=a("li"),O2e=a("strong"),Tfr=o("deit"),Mfr=o(" \u2014 "),TQ=a("a"),Efr=o("DeiTForMaskedImageModeling"),Cfr=o(" (DeiT model)"),wfr=l(),fT=a("li"),V2e=a("strong"),Afr=o("swin"),Lfr=o(" \u2014 "),MQ=a("a"),yfr=o("SwinForMaskedImageModeling"),xfr=o(" (Swin Transformer model)"),$fr=l(),mT=a("li"),X2e=a("strong"),kfr=o("vit"),Sfr=o(" \u2014 "),EQ=a("a"),Rfr=o("ViTForMaskedImageModeling"),Pfr=o(" (ViT model)"),Bfr=l(),gT=a("p"),Ifr=o("The model is set in evaluation mode by default using "),z2e=a("code"),Nfr=o("model.eval()"),qfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W2e=a("code"),jfr=o("model.train()"),Dfr=l(),F(hT.$$.fragment),hOe=l(),Od=a("h2"),pT=a("a"),Q2e=a("span"),F(O8.$$.fragment),Gfr=l(),H2e=a("span"),Ofr=o("AutoModelForObjectDetection"),pOe=l(),Uo=a("div"),F(V8.$$.fragment),Vfr=l(),Vd=a("p"),Xfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),CQ=a("a"),zfr=o("from_pretrained()"),Wfr=o(" class method or the "),wQ=a("a"),Qfr=o("from_config()"),Hfr=o(` class
method.`),Ufr=l(),X8=a("p"),Jfr=o("This class cannot be instantiated directly using "),U2e=a("code"),Yfr=o("__init__()"),Kfr=o(" (throws an error)."),Zfr=l(),At=a("div"),F(z8.$$.fragment),emr=l(),J2e=a("p"),omr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),rmr=l(),Xd=a("p"),tmr=o(`Note:
Loading a model from its configuration file does `),Y2e=a("strong"),amr=o("not"),nmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AQ=a("a"),smr=o("from_pretrained()"),lmr=o(" to load the model weights."),imr=l(),F(uT.$$.fragment),dmr=l(),_o=a("div"),F(W8.$$.fragment),cmr=l(),K2e=a("p"),fmr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),mmr=l(),Ka=a("p"),gmr=o("The model class to instantiate is selected based on the "),Z2e=a("code"),hmr=o("model_type"),pmr=o(` property of the config object (either
passed as an argument or loaded from `),ebe=a("code"),umr=o("pretrained_model_name_or_path"),_mr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=a("code"),bmr=o("pretrained_model_name_or_path"),vmr=o(":"),Fmr=l(),Q8=a("ul"),_T=a("li"),rbe=a("strong"),Tmr=o("detr"),Mmr=o(" \u2014 "),LQ=a("a"),Emr=o("DetrForObjectDetection"),Cmr=o(" (DETR model)"),wmr=l(),bT=a("li"),tbe=a("strong"),Amr=o("yolos"),Lmr=o(" \u2014 "),yQ=a("a"),ymr=o("YolosForObjectDetection"),xmr=o(" (YOLOS model)"),$mr=l(),vT=a("p"),kmr=o("The model is set in evaluation mode by default using "),abe=a("code"),Smr=o("model.eval()"),Rmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nbe=a("code"),Pmr=o("model.train()"),Bmr=l(),F(FT.$$.fragment),uOe=l(),zd=a("h2"),TT=a("a"),sbe=a("span"),F(H8.$$.fragment),Imr=l(),lbe=a("span"),Nmr=o("AutoModelForImageSegmentation"),_Oe=l(),Jo=a("div"),F(U8.$$.fragment),qmr=l(),Wd=a("p"),jmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),xQ=a("a"),Dmr=o("from_pretrained()"),Gmr=o(" class method or the "),$Q=a("a"),Omr=o("from_config()"),Vmr=o(` class
method.`),Xmr=l(),J8=a("p"),zmr=o("This class cannot be instantiated directly using "),ibe=a("code"),Wmr=o("__init__()"),Qmr=o(" (throws an error)."),Hmr=l(),Lt=a("div"),F(Y8.$$.fragment),Umr=l(),dbe=a("p"),Jmr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Ymr=l(),Qd=a("p"),Kmr=o(`Note:
Loading a model from its configuration file does `),cbe=a("strong"),Zmr=o("not"),egr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=a("a"),ogr=o("from_pretrained()"),rgr=o(" to load the model weights."),tgr=l(),F(MT.$$.fragment),agr=l(),bo=a("div"),F(K8.$$.fragment),ngr=l(),fbe=a("p"),sgr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),lgr=l(),Za=a("p"),igr=o("The model class to instantiate is selected based on the "),mbe=a("code"),dgr=o("model_type"),cgr=o(` property of the config object (either
passed as an argument or loaded from `),gbe=a("code"),fgr=o("pretrained_model_name_or_path"),mgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=a("code"),ggr=o("pretrained_model_name_or_path"),hgr=o(":"),pgr=l(),pbe=a("ul"),ET=a("li"),ube=a("strong"),ugr=o("detr"),_gr=o(" \u2014 "),SQ=a("a"),bgr=o("DetrForSegmentation"),vgr=o(" (DETR model)"),Fgr=l(),CT=a("p"),Tgr=o("The model is set in evaluation mode by default using "),_be=a("code"),Mgr=o("model.eval()"),Egr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bbe=a("code"),Cgr=o("model.train()"),wgr=l(),F(wT.$$.fragment),bOe=l(),Hd=a("h2"),AT=a("a"),vbe=a("span"),F(Z8.$$.fragment),Agr=l(),Fbe=a("span"),Lgr=o("AutoModelForSemanticSegmentation"),vOe=l(),Yo=a("div"),F(e9.$$.fragment),ygr=l(),Ud=a("p"),xgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),RQ=a("a"),$gr=o("from_pretrained()"),kgr=o(" class method or the "),PQ=a("a"),Sgr=o("from_config()"),Rgr=o(` class
method.`),Pgr=l(),o9=a("p"),Bgr=o("This class cannot be instantiated directly using "),Tbe=a("code"),Igr=o("__init__()"),Ngr=o(" (throws an error)."),qgr=l(),yt=a("div"),F(r9.$$.fragment),jgr=l(),Mbe=a("p"),Dgr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ggr=l(),Jd=a("p"),Ogr=o(`Note:
Loading a model from its configuration file does `),Ebe=a("strong"),Vgr=o("not"),Xgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=a("a"),zgr=o("from_pretrained()"),Wgr=o(" to load the model weights."),Qgr=l(),F(LT.$$.fragment),Hgr=l(),vo=a("div"),F(t9.$$.fragment),Ugr=l(),Cbe=a("p"),Jgr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ygr=l(),en=a("p"),Kgr=o("The model class to instantiate is selected based on the "),wbe=a("code"),Zgr=o("model_type"),ehr=o(` property of the config object (either
passed as an argument or loaded from `),Abe=a("code"),ohr=o("pretrained_model_name_or_path"),rhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=a("code"),thr=o("pretrained_model_name_or_path"),ahr=o(":"),nhr=l(),on=a("ul"),yT=a("li"),ybe=a("strong"),shr=o("beit"),lhr=o(" \u2014 "),IQ=a("a"),ihr=o("BeitForSemanticSegmentation"),dhr=o(" (BEiT model)"),chr=l(),xT=a("li"),xbe=a("strong"),fhr=o("data2vec-vision"),mhr=o(" \u2014 "),NQ=a("a"),ghr=o("Data2VecVisionForSemanticSegmentation"),hhr=o(" (Data2VecVision model)"),phr=l(),$T=a("li"),$be=a("strong"),uhr=o("dpt"),_hr=o(" \u2014 "),qQ=a("a"),bhr=o("DPTForSemanticSegmentation"),vhr=o(" (DPT model)"),Fhr=l(),kT=a("li"),kbe=a("strong"),Thr=o("segformer"),Mhr=o(" \u2014 "),jQ=a("a"),Ehr=o("SegformerForSemanticSegmentation"),Chr=o(" (SegFormer model)"),whr=l(),ST=a("p"),Ahr=o("The model is set in evaluation mode by default using "),Sbe=a("code"),Lhr=o("model.eval()"),yhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rbe=a("code"),xhr=o("model.train()"),$hr=l(),F(RT.$$.fragment),FOe=l(),Yd=a("h2"),PT=a("a"),Pbe=a("span"),F(a9.$$.fragment),khr=l(),Bbe=a("span"),Shr=o("AutoModelForInstanceSegmentation"),TOe=l(),Ko=a("div"),F(n9.$$.fragment),Rhr=l(),Kd=a("p"),Phr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),DQ=a("a"),Bhr=o("from_pretrained()"),Ihr=o(" class method or the "),GQ=a("a"),Nhr=o("from_config()"),qhr=o(` class
method.`),jhr=l(),s9=a("p"),Dhr=o("This class cannot be instantiated directly using "),Ibe=a("code"),Ghr=o("__init__()"),Ohr=o(" (throws an error)."),Vhr=l(),xt=a("div"),F(l9.$$.fragment),Xhr=l(),Nbe=a("p"),zhr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Whr=l(),Zd=a("p"),Qhr=o(`Note:
Loading a model from its configuration file does `),qbe=a("strong"),Hhr=o("not"),Uhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=a("a"),Jhr=o("from_pretrained()"),Yhr=o(" to load the model weights."),Khr=l(),F(BT.$$.fragment),Zhr=l(),Fo=a("div"),F(i9.$$.fragment),epr=l(),jbe=a("p"),opr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),rpr=l(),rn=a("p"),tpr=o("The model class to instantiate is selected based on the "),Dbe=a("code"),apr=o("model_type"),npr=o(` property of the config object (either
passed as an argument or loaded from `),Gbe=a("code"),spr=o("pretrained_model_name_or_path"),lpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=a("code"),ipr=o("pretrained_model_name_or_path"),dpr=o(":"),cpr=l(),Vbe=a("ul"),IT=a("li"),Xbe=a("strong"),fpr=o("maskformer"),mpr=o(" \u2014 "),VQ=a("a"),gpr=o("MaskFormerForInstanceSegmentation"),hpr=o(" (MaskFormer model)"),ppr=l(),NT=a("p"),upr=o("The model is set in evaluation mode by default using "),zbe=a("code"),_pr=o("model.eval()"),bpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wbe=a("code"),vpr=o("model.train()"),Fpr=l(),F(qT.$$.fragment),MOe=l(),ec=a("h2"),jT=a("a"),Qbe=a("span"),F(d9.$$.fragment),Tpr=l(),Hbe=a("span"),Mpr=o("TFAutoModel"),EOe=l(),Zo=a("div"),F(c9.$$.fragment),Epr=l(),oc=a("p"),Cpr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XQ=a("a"),wpr=o("from_pretrained()"),Apr=o(" class method or the "),zQ=a("a"),Lpr=o("from_config()"),ypr=o(` class
method.`),xpr=l(),f9=a("p"),$pr=o("This class cannot be instantiated directly using "),Ube=a("code"),kpr=o("__init__()"),Spr=o(" (throws an error)."),Rpr=l(),$t=a("div"),F(m9.$$.fragment),Ppr=l(),Jbe=a("p"),Bpr=o("Instantiates one of the base model classes of the library from a configuration."),Ipr=l(),rc=a("p"),Npr=o(`Note:
Loading a model from its configuration file does `),Ybe=a("strong"),qpr=o("not"),jpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=a("a"),Dpr=o("from_pretrained()"),Gpr=o(" to load the model weights."),Opr=l(),F(DT.$$.fragment),Vpr=l(),Lr=a("div"),F(g9.$$.fragment),Xpr=l(),Kbe=a("p"),zpr=o("Instantiate one of the base model classes of the library from a pretrained model."),Wpr=l(),tn=a("p"),Qpr=o("The model class to instantiate is selected based on the "),Zbe=a("code"),Hpr=o("model_type"),Upr=o(` property of the config object (either
passed as an argument or loaded from `),eve=a("code"),Jpr=o("pretrained_model_name_or_path"),Ypr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=a("code"),Kpr=o("pretrained_model_name_or_path"),Zpr=o(":"),eur=l(),q=a("ul"),GT=a("li"),rve=a("strong"),our=o("albert"),rur=o(" \u2014 "),QQ=a("a"),tur=o("TFAlbertModel"),aur=o(" (ALBERT model)"),nur=l(),OT=a("li"),tve=a("strong"),sur=o("bart"),lur=o(" \u2014 "),HQ=a("a"),iur=o("TFBartModel"),dur=o(" (BART model)"),cur=l(),VT=a("li"),ave=a("strong"),fur=o("bert"),mur=o(" \u2014 "),UQ=a("a"),gur=o("TFBertModel"),hur=o(" (BERT model)"),pur=l(),XT=a("li"),nve=a("strong"),uur=o("blenderbot"),_ur=o(" \u2014 "),JQ=a("a"),bur=o("TFBlenderbotModel"),vur=o(" (Blenderbot model)"),Fur=l(),zT=a("li"),sve=a("strong"),Tur=o("blenderbot-small"),Mur=o(" \u2014 "),YQ=a("a"),Eur=o("TFBlenderbotSmallModel"),Cur=o(" (BlenderbotSmall model)"),wur=l(),WT=a("li"),lve=a("strong"),Aur=o("camembert"),Lur=o(" \u2014 "),KQ=a("a"),yur=o("TFCamembertModel"),xur=o(" (CamemBERT model)"),$ur=l(),QT=a("li"),ive=a("strong"),kur=o("clip"),Sur=o(" \u2014 "),ZQ=a("a"),Rur=o("TFCLIPModel"),Pur=o(" (CLIP model)"),Bur=l(),HT=a("li"),dve=a("strong"),Iur=o("convbert"),Nur=o(" \u2014 "),eH=a("a"),qur=o("TFConvBertModel"),jur=o(" (ConvBERT model)"),Dur=l(),UT=a("li"),cve=a("strong"),Gur=o("convnext"),Our=o(" \u2014 "),oH=a("a"),Vur=o("TFConvNextModel"),Xur=o(" (ConvNeXT model)"),zur=l(),JT=a("li"),fve=a("strong"),Wur=o("ctrl"),Qur=o(" \u2014 "),rH=a("a"),Hur=o("TFCTRLModel"),Uur=o(" (CTRL model)"),Jur=l(),YT=a("li"),mve=a("strong"),Yur=o("data2vec-vision"),Kur=o(" \u2014 "),tH=a("a"),Zur=o("TFData2VecVisionModel"),e_r=o(" (Data2VecVision model)"),o_r=l(),KT=a("li"),gve=a("strong"),r_r=o("deberta"),t_r=o(" \u2014 "),aH=a("a"),a_r=o("TFDebertaModel"),n_r=o(" (DeBERTa model)"),s_r=l(),ZT=a("li"),hve=a("strong"),l_r=o("deberta-v2"),i_r=o(" \u2014 "),nH=a("a"),d_r=o("TFDebertaV2Model"),c_r=o(" (DeBERTa-v2 model)"),f_r=l(),e7=a("li"),pve=a("strong"),m_r=o("distilbert"),g_r=o(" \u2014 "),sH=a("a"),h_r=o("TFDistilBertModel"),p_r=o(" (DistilBERT model)"),u_r=l(),o7=a("li"),uve=a("strong"),__r=o("dpr"),b_r=o(" \u2014 "),lH=a("a"),v_r=o("TFDPRQuestionEncoder"),F_r=o(" (DPR model)"),T_r=l(),r7=a("li"),_ve=a("strong"),M_r=o("electra"),E_r=o(" \u2014 "),iH=a("a"),C_r=o("TFElectraModel"),w_r=o(" (ELECTRA model)"),A_r=l(),t7=a("li"),bve=a("strong"),L_r=o("flaubert"),y_r=o(" \u2014 "),dH=a("a"),x_r=o("TFFlaubertModel"),$_r=o(" (FlauBERT model)"),k_r=l(),zs=a("li"),vve=a("strong"),S_r=o("funnel"),R_r=o(" \u2014 "),cH=a("a"),P_r=o("TFFunnelModel"),B_r=o(" or "),fH=a("a"),I_r=o("TFFunnelBaseModel"),N_r=o(" (Funnel Transformer model)"),q_r=l(),a7=a("li"),Fve=a("strong"),j_r=o("gpt2"),D_r=o(" \u2014 "),mH=a("a"),G_r=o("TFGPT2Model"),O_r=o(" (OpenAI GPT-2 model)"),V_r=l(),n7=a("li"),Tve=a("strong"),X_r=o("gptj"),z_r=o(" \u2014 "),gH=a("a"),W_r=o("TFGPTJModel"),Q_r=o(" (GPT-J model)"),H_r=l(),s7=a("li"),Mve=a("strong"),U_r=o("hubert"),J_r=o(" \u2014 "),hH=a("a"),Y_r=o("TFHubertModel"),K_r=o(" (Hubert model)"),Z_r=l(),l7=a("li"),Eve=a("strong"),e4r=o("layoutlm"),o4r=o(" \u2014 "),pH=a("a"),r4r=o("TFLayoutLMModel"),t4r=o(" (LayoutLM model)"),a4r=l(),i7=a("li"),Cve=a("strong"),n4r=o("led"),s4r=o(" \u2014 "),uH=a("a"),l4r=o("TFLEDModel"),i4r=o(" (LED model)"),d4r=l(),d7=a("li"),wve=a("strong"),c4r=o("longformer"),f4r=o(" \u2014 "),_H=a("a"),m4r=o("TFLongformerModel"),g4r=o(" (Longformer model)"),h4r=l(),c7=a("li"),Ave=a("strong"),p4r=o("lxmert"),u4r=o(" \u2014 "),bH=a("a"),_4r=o("TFLxmertModel"),b4r=o(" (LXMERT model)"),v4r=l(),f7=a("li"),Lve=a("strong"),F4r=o("marian"),T4r=o(" \u2014 "),vH=a("a"),M4r=o("TFMarianModel"),E4r=o(" (Marian model)"),C4r=l(),m7=a("li"),yve=a("strong"),w4r=o("mbart"),A4r=o(" \u2014 "),FH=a("a"),L4r=o("TFMBartModel"),y4r=o(" (mBART model)"),x4r=l(),g7=a("li"),xve=a("strong"),$4r=o("mobilebert"),k4r=o(" \u2014 "),TH=a("a"),S4r=o("TFMobileBertModel"),R4r=o(" (MobileBERT model)"),P4r=l(),h7=a("li"),$ve=a("strong"),B4r=o("mpnet"),I4r=o(" \u2014 "),MH=a("a"),N4r=o("TFMPNetModel"),q4r=o(" (MPNet model)"),j4r=l(),p7=a("li"),kve=a("strong"),D4r=o("mt5"),G4r=o(" \u2014 "),EH=a("a"),O4r=o("TFMT5Model"),V4r=o(" (MT5 model)"),X4r=l(),u7=a("li"),Sve=a("strong"),z4r=o("openai-gpt"),W4r=o(" \u2014 "),CH=a("a"),Q4r=o("TFOpenAIGPTModel"),H4r=o(" (OpenAI GPT model)"),U4r=l(),_7=a("li"),Rve=a("strong"),J4r=o("opt"),Y4r=o(" \u2014 "),wH=a("a"),K4r=o("TFOPTModel"),Z4r=o(" (OPT model)"),e1r=l(),b7=a("li"),Pve=a("strong"),o1r=o("pegasus"),r1r=o(" \u2014 "),AH=a("a"),t1r=o("TFPegasusModel"),a1r=o(" (Pegasus model)"),n1r=l(),v7=a("li"),Bve=a("strong"),s1r=o("rembert"),l1r=o(" \u2014 "),LH=a("a"),i1r=o("TFRemBertModel"),d1r=o(" (RemBERT model)"),c1r=l(),F7=a("li"),Ive=a("strong"),f1r=o("roberta"),m1r=o(" \u2014 "),yH=a("a"),g1r=o("TFRobertaModel"),h1r=o(" (RoBERTa model)"),p1r=l(),T7=a("li"),Nve=a("strong"),u1r=o("roformer"),_1r=o(" \u2014 "),xH=a("a"),b1r=o("TFRoFormerModel"),v1r=o(" (RoFormer model)"),F1r=l(),M7=a("li"),qve=a("strong"),T1r=o("speech_to_text"),M1r=o(" \u2014 "),$H=a("a"),E1r=o("TFSpeech2TextModel"),C1r=o(" (Speech2Text model)"),w1r=l(),E7=a("li"),jve=a("strong"),A1r=o("swin"),L1r=o(" \u2014 "),kH=a("a"),y1r=o("TFSwinModel"),x1r=o(" (Swin Transformer model)"),$1r=l(),C7=a("li"),Dve=a("strong"),k1r=o("t5"),S1r=o(" \u2014 "),SH=a("a"),R1r=o("TFT5Model"),P1r=o(" (T5 model)"),B1r=l(),w7=a("li"),Gve=a("strong"),I1r=o("tapas"),N1r=o(" \u2014 "),RH=a("a"),q1r=o("TFTapasModel"),j1r=o(" (TAPAS model)"),D1r=l(),A7=a("li"),Ove=a("strong"),G1r=o("transfo-xl"),O1r=o(" \u2014 "),PH=a("a"),V1r=o("TFTransfoXLModel"),X1r=o(" (Transformer-XL model)"),z1r=l(),L7=a("li"),Vve=a("strong"),W1r=o("vit"),Q1r=o(" \u2014 "),BH=a("a"),H1r=o("TFViTModel"),U1r=o(" (ViT model)"),J1r=l(),y7=a("li"),Xve=a("strong"),Y1r=o("vit_mae"),K1r=o(" \u2014 "),IH=a("a"),Z1r=o("TFViTMAEModel"),e2r=o(" (ViTMAE model)"),o2r=l(),x7=a("li"),zve=a("strong"),r2r=o("wav2vec2"),t2r=o(" \u2014 "),NH=a("a"),a2r=o("TFWav2Vec2Model"),n2r=o(" (Wav2Vec2 model)"),s2r=l(),$7=a("li"),Wve=a("strong"),l2r=o("xlm"),i2r=o(" \u2014 "),qH=a("a"),d2r=o("TFXLMModel"),c2r=o(" (XLM model)"),f2r=l(),k7=a("li"),Qve=a("strong"),m2r=o("xlm-roberta"),g2r=o(" \u2014 "),jH=a("a"),h2r=o("TFXLMRobertaModel"),p2r=o(" (XLM-RoBERTa model)"),u2r=l(),S7=a("li"),Hve=a("strong"),_2r=o("xlnet"),b2r=o(" \u2014 "),DH=a("a"),v2r=o("TFXLNetModel"),F2r=o(" (XLNet model)"),T2r=l(),F(R7.$$.fragment),COe=l(),tc=a("h2"),P7=a("a"),Uve=a("span"),F(h9.$$.fragment),M2r=l(),Jve=a("span"),E2r=o("TFAutoModelForPreTraining"),wOe=l(),er=a("div"),F(p9.$$.fragment),C2r=l(),ac=a("p"),w2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GH=a("a"),A2r=o("from_pretrained()"),L2r=o(" class method or the "),OH=a("a"),y2r=o("from_config()"),x2r=o(` class
method.`),$2r=l(),u9=a("p"),k2r=o("This class cannot be instantiated directly using "),Yve=a("code"),S2r=o("__init__()"),R2r=o(" (throws an error)."),P2r=l(),kt=a("div"),F(_9.$$.fragment),B2r=l(),Kve=a("p"),I2r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),N2r=l(),nc=a("p"),q2r=o(`Note:
Loading a model from its configuration file does `),Zve=a("strong"),j2r=o("not"),D2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),G2r=o("from_pretrained()"),O2r=o(" to load the model weights."),V2r=l(),F(B7.$$.fragment),X2r=l(),yr=a("div"),F(b9.$$.fragment),z2r=l(),e3e=a("p"),W2r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Q2r=l(),an=a("p"),H2r=o("The model class to instantiate is selected based on the "),o3e=a("code"),U2r=o("model_type"),J2r=o(` property of the config object (either
passed as an argument or loaded from `),r3e=a("code"),Y2r=o("pretrained_model_name_or_path"),K2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t3e=a("code"),Z2r=o("pretrained_model_name_or_path"),ebr=o(":"),obr=l(),se=a("ul"),I7=a("li"),a3e=a("strong"),rbr=o("albert"),tbr=o(" \u2014 "),XH=a("a"),abr=o("TFAlbertForPreTraining"),nbr=o(" (ALBERT model)"),sbr=l(),N7=a("li"),n3e=a("strong"),lbr=o("bart"),ibr=o(" \u2014 "),zH=a("a"),dbr=o("TFBartForConditionalGeneration"),cbr=o(" (BART model)"),fbr=l(),q7=a("li"),s3e=a("strong"),mbr=o("bert"),gbr=o(" \u2014 "),WH=a("a"),hbr=o("TFBertForPreTraining"),pbr=o(" (BERT model)"),ubr=l(),j7=a("li"),l3e=a("strong"),_br=o("camembert"),bbr=o(" \u2014 "),QH=a("a"),vbr=o("TFCamembertForMaskedLM"),Fbr=o(" (CamemBERT model)"),Tbr=l(),D7=a("li"),i3e=a("strong"),Mbr=o("ctrl"),Ebr=o(" \u2014 "),HH=a("a"),Cbr=o("TFCTRLLMHeadModel"),wbr=o(" (CTRL model)"),Abr=l(),G7=a("li"),d3e=a("strong"),Lbr=o("distilbert"),ybr=o(" \u2014 "),UH=a("a"),xbr=o("TFDistilBertForMaskedLM"),$br=o(" (DistilBERT model)"),kbr=l(),O7=a("li"),c3e=a("strong"),Sbr=o("electra"),Rbr=o(" \u2014 "),JH=a("a"),Pbr=o("TFElectraForPreTraining"),Bbr=o(" (ELECTRA model)"),Ibr=l(),V7=a("li"),f3e=a("strong"),Nbr=o("flaubert"),qbr=o(" \u2014 "),YH=a("a"),jbr=o("TFFlaubertWithLMHeadModel"),Dbr=o(" (FlauBERT model)"),Gbr=l(),X7=a("li"),m3e=a("strong"),Obr=o("funnel"),Vbr=o(" \u2014 "),KH=a("a"),Xbr=o("TFFunnelForPreTraining"),zbr=o(" (Funnel Transformer model)"),Wbr=l(),z7=a("li"),g3e=a("strong"),Qbr=o("gpt2"),Hbr=o(" \u2014 "),ZH=a("a"),Ubr=o("TFGPT2LMHeadModel"),Jbr=o(" (OpenAI GPT-2 model)"),Ybr=l(),W7=a("li"),h3e=a("strong"),Kbr=o("layoutlm"),Zbr=o(" \u2014 "),eU=a("a"),evr=o("TFLayoutLMForMaskedLM"),ovr=o(" (LayoutLM model)"),rvr=l(),Q7=a("li"),p3e=a("strong"),tvr=o("lxmert"),avr=o(" \u2014 "),oU=a("a"),nvr=o("TFLxmertForPreTraining"),svr=o(" (LXMERT model)"),lvr=l(),H7=a("li"),u3e=a("strong"),ivr=o("mobilebert"),dvr=o(" \u2014 "),rU=a("a"),cvr=o("TFMobileBertForPreTraining"),fvr=o(" (MobileBERT model)"),mvr=l(),U7=a("li"),_3e=a("strong"),gvr=o("mpnet"),hvr=o(" \u2014 "),tU=a("a"),pvr=o("TFMPNetForMaskedLM"),uvr=o(" (MPNet model)"),_vr=l(),J7=a("li"),b3e=a("strong"),bvr=o("openai-gpt"),vvr=o(" \u2014 "),aU=a("a"),Fvr=o("TFOpenAIGPTLMHeadModel"),Tvr=o(" (OpenAI GPT model)"),Mvr=l(),Y7=a("li"),v3e=a("strong"),Evr=o("roberta"),Cvr=o(" \u2014 "),nU=a("a"),wvr=o("TFRobertaForMaskedLM"),Avr=o(" (RoBERTa model)"),Lvr=l(),K7=a("li"),F3e=a("strong"),yvr=o("t5"),xvr=o(" \u2014 "),sU=a("a"),$vr=o("TFT5ForConditionalGeneration"),kvr=o(" (T5 model)"),Svr=l(),Z7=a("li"),T3e=a("strong"),Rvr=o("tapas"),Pvr=o(" \u2014 "),lU=a("a"),Bvr=o("TFTapasForMaskedLM"),Ivr=o(" (TAPAS model)"),Nvr=l(),eM=a("li"),M3e=a("strong"),qvr=o("transfo-xl"),jvr=o(" \u2014 "),iU=a("a"),Dvr=o("TFTransfoXLLMHeadModel"),Gvr=o(" (Transformer-XL model)"),Ovr=l(),oM=a("li"),E3e=a("strong"),Vvr=o("vit_mae"),Xvr=o(" \u2014 "),dU=a("a"),zvr=o("TFViTMAEForPreTraining"),Wvr=o(" (ViTMAE model)"),Qvr=l(),rM=a("li"),C3e=a("strong"),Hvr=o("xlm"),Uvr=o(" \u2014 "),cU=a("a"),Jvr=o("TFXLMWithLMHeadModel"),Yvr=o(" (XLM model)"),Kvr=l(),tM=a("li"),w3e=a("strong"),Zvr=o("xlm-roberta"),e3r=o(" \u2014 "),fU=a("a"),o3r=o("TFXLMRobertaForMaskedLM"),r3r=o(" (XLM-RoBERTa model)"),t3r=l(),aM=a("li"),A3e=a("strong"),a3r=o("xlnet"),n3r=o(" \u2014 "),mU=a("a"),s3r=o("TFXLNetLMHeadModel"),l3r=o(" (XLNet model)"),i3r=l(),F(nM.$$.fragment),AOe=l(),sc=a("h2"),sM=a("a"),L3e=a("span"),F(v9.$$.fragment),d3r=l(),y3e=a("span"),c3r=o("TFAutoModelForCausalLM"),LOe=l(),or=a("div"),F(F9.$$.fragment),f3r=l(),lc=a("p"),m3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gU=a("a"),g3r=o("from_pretrained()"),h3r=o(" class method or the "),hU=a("a"),p3r=o("from_config()"),u3r=o(` class
method.`),_3r=l(),T9=a("p"),b3r=o("This class cannot be instantiated directly using "),x3e=a("code"),v3r=o("__init__()"),F3r=o(" (throws an error)."),T3r=l(),St=a("div"),F(M9.$$.fragment),M3r=l(),$3e=a("p"),E3r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),C3r=l(),ic=a("p"),w3r=o(`Note:
Loading a model from its configuration file does `),k3e=a("strong"),A3r=o("not"),L3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),y3r=o("from_pretrained()"),x3r=o(" to load the model weights."),$3r=l(),F(lM.$$.fragment),k3r=l(),xr=a("div"),F(E9.$$.fragment),S3r=l(),S3e=a("p"),R3r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),P3r=l(),nn=a("p"),B3r=o("The model class to instantiate is selected based on the "),R3e=a("code"),I3r=o("model_type"),N3r=o(` property of the config object (either
passed as an argument or loaded from `),P3e=a("code"),q3r=o("pretrained_model_name_or_path"),j3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=a("code"),D3r=o("pretrained_model_name_or_path"),G3r=o(":"),O3r=l(),Me=a("ul"),iM=a("li"),I3e=a("strong"),V3r=o("bert"),X3r=o(" \u2014 "),uU=a("a"),z3r=o("TFBertLMHeadModel"),W3r=o(" (BERT model)"),Q3r=l(),dM=a("li"),N3e=a("strong"),H3r=o("camembert"),U3r=o(" \u2014 "),_U=a("a"),J3r=o("TFCamembertForCausalLM"),Y3r=o(" (CamemBERT model)"),K3r=l(),cM=a("li"),q3e=a("strong"),Z3r=o("ctrl"),eFr=o(" \u2014 "),bU=a("a"),oFr=o("TFCTRLLMHeadModel"),rFr=o(" (CTRL model)"),tFr=l(),fM=a("li"),j3e=a("strong"),aFr=o("gpt2"),nFr=o(" \u2014 "),vU=a("a"),sFr=o("TFGPT2LMHeadModel"),lFr=o(" (OpenAI GPT-2 model)"),iFr=l(),mM=a("li"),D3e=a("strong"),dFr=o("gptj"),cFr=o(" \u2014 "),FU=a("a"),fFr=o("TFGPTJForCausalLM"),mFr=o(" (GPT-J model)"),gFr=l(),gM=a("li"),G3e=a("strong"),hFr=o("openai-gpt"),pFr=o(" \u2014 "),TU=a("a"),uFr=o("TFOpenAIGPTLMHeadModel"),_Fr=o(" (OpenAI GPT model)"),bFr=l(),hM=a("li"),O3e=a("strong"),vFr=o("opt"),FFr=o(" \u2014 "),MU=a("a"),TFr=o("TFOPTForCausalLM"),MFr=o(" (OPT model)"),EFr=l(),pM=a("li"),V3e=a("strong"),CFr=o("rembert"),wFr=o(" \u2014 "),EU=a("a"),AFr=o("TFRemBertForCausalLM"),LFr=o(" (RemBERT model)"),yFr=l(),uM=a("li"),X3e=a("strong"),xFr=o("roberta"),$Fr=o(" \u2014 "),CU=a("a"),kFr=o("TFRobertaForCausalLM"),SFr=o(" (RoBERTa model)"),RFr=l(),_M=a("li"),z3e=a("strong"),PFr=o("roformer"),BFr=o(" \u2014 "),wU=a("a"),IFr=o("TFRoFormerForCausalLM"),NFr=o(" (RoFormer model)"),qFr=l(),bM=a("li"),W3e=a("strong"),jFr=o("transfo-xl"),DFr=o(" \u2014 "),AU=a("a"),GFr=o("TFTransfoXLLMHeadModel"),OFr=o(" (Transformer-XL model)"),VFr=l(),vM=a("li"),Q3e=a("strong"),XFr=o("xlm"),zFr=o(" \u2014 "),LU=a("a"),WFr=o("TFXLMWithLMHeadModel"),QFr=o(" (XLM model)"),HFr=l(),FM=a("li"),H3e=a("strong"),UFr=o("xlnet"),JFr=o(" \u2014 "),yU=a("a"),YFr=o("TFXLNetLMHeadModel"),KFr=o(" (XLNet model)"),ZFr=l(),F(TM.$$.fragment),yOe=l(),dc=a("h2"),MM=a("a"),U3e=a("span"),F(C9.$$.fragment),eTr=l(),J3e=a("span"),oTr=o("TFAutoModelForImageClassification"),xOe=l(),rr=a("div"),F(w9.$$.fragment),rTr=l(),cc=a("p"),tTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xU=a("a"),aTr=o("from_pretrained()"),nTr=o(" class method or the "),$U=a("a"),sTr=o("from_config()"),lTr=o(` class
method.`),iTr=l(),A9=a("p"),dTr=o("This class cannot be instantiated directly using "),Y3e=a("code"),cTr=o("__init__()"),fTr=o(" (throws an error)."),mTr=l(),Rt=a("div"),F(L9.$$.fragment),gTr=l(),K3e=a("p"),hTr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pTr=l(),fc=a("p"),uTr=o(`Note:
Loading a model from its configuration file does `),Z3e=a("strong"),_Tr=o("not"),bTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=a("a"),vTr=o("from_pretrained()"),FTr=o(" to load the model weights."),TTr=l(),F(EM.$$.fragment),MTr=l(),$r=a("div"),F(y9.$$.fragment),ETr=l(),eFe=a("p"),CTr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wTr=l(),sn=a("p"),ATr=o("The model class to instantiate is selected based on the "),oFe=a("code"),LTr=o("model_type"),yTr=o(` property of the config object (either
passed as an argument or loaded from `),rFe=a("code"),xTr=o("pretrained_model_name_or_path"),$Tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=a("code"),kTr=o("pretrained_model_name_or_path"),STr=o(":"),RTr=l(),ln=a("ul"),CM=a("li"),aFe=a("strong"),PTr=o("convnext"),BTr=o(" \u2014 "),SU=a("a"),ITr=o("TFConvNextForImageClassification"),NTr=o(" (ConvNeXT model)"),qTr=l(),wM=a("li"),nFe=a("strong"),jTr=o("data2vec-vision"),DTr=o(" \u2014 "),RU=a("a"),GTr=o("TFData2VecVisionForImageClassification"),OTr=o(" (Data2VecVision model)"),VTr=l(),AM=a("li"),sFe=a("strong"),XTr=o("swin"),zTr=o(" \u2014 "),PU=a("a"),WTr=o("TFSwinForImageClassification"),QTr=o(" (Swin Transformer model)"),HTr=l(),LM=a("li"),lFe=a("strong"),UTr=o("vit"),JTr=o(" \u2014 "),BU=a("a"),YTr=o("TFViTForImageClassification"),KTr=o(" (ViT model)"),ZTr=l(),F(yM.$$.fragment),$Oe=l(),mc=a("h2"),xM=a("a"),iFe=a("span"),F(x9.$$.fragment),e7r=l(),dFe=a("span"),o7r=o("TFAutoModelForMaskedLM"),kOe=l(),tr=a("div"),F($9.$$.fragment),r7r=l(),gc=a("p"),t7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IU=a("a"),a7r=o("from_pretrained()"),n7r=o(" class method or the "),NU=a("a"),s7r=o("from_config()"),l7r=o(` class
method.`),i7r=l(),k9=a("p"),d7r=o("This class cannot be instantiated directly using "),cFe=a("code"),c7r=o("__init__()"),f7r=o(" (throws an error)."),m7r=l(),Pt=a("div"),F(S9.$$.fragment),g7r=l(),fFe=a("p"),h7r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),p7r=l(),hc=a("p"),u7r=o(`Note:
Loading a model from its configuration file does `),mFe=a("strong"),_7r=o("not"),b7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=a("a"),v7r=o("from_pretrained()"),F7r=o(" to load the model weights."),T7r=l(),F($M.$$.fragment),M7r=l(),kr=a("div"),F(R9.$$.fragment),E7r=l(),gFe=a("p"),C7r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),w7r=l(),dn=a("p"),A7r=o("The model class to instantiate is selected based on the "),hFe=a("code"),L7r=o("model_type"),y7r=o(` property of the config object (either
passed as an argument or loaded from `),pFe=a("code"),x7r=o("pretrained_model_name_or_path"),$7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=a("code"),k7r=o("pretrained_model_name_or_path"),S7r=o(":"),R7r=l(),ie=a("ul"),kM=a("li"),_Fe=a("strong"),P7r=o("albert"),B7r=o(" \u2014 "),jU=a("a"),I7r=o("TFAlbertForMaskedLM"),N7r=o(" (ALBERT model)"),q7r=l(),SM=a("li"),bFe=a("strong"),j7r=o("bert"),D7r=o(" \u2014 "),DU=a("a"),G7r=o("TFBertForMaskedLM"),O7r=o(" (BERT model)"),V7r=l(),RM=a("li"),vFe=a("strong"),X7r=o("camembert"),z7r=o(" \u2014 "),GU=a("a"),W7r=o("TFCamembertForMaskedLM"),Q7r=o(" (CamemBERT model)"),H7r=l(),PM=a("li"),FFe=a("strong"),U7r=o("convbert"),J7r=o(" \u2014 "),OU=a("a"),Y7r=o("TFConvBertForMaskedLM"),K7r=o(" (ConvBERT model)"),Z7r=l(),BM=a("li"),TFe=a("strong"),eMr=o("deberta"),oMr=o(" \u2014 "),VU=a("a"),rMr=o("TFDebertaForMaskedLM"),tMr=o(" (DeBERTa model)"),aMr=l(),IM=a("li"),MFe=a("strong"),nMr=o("deberta-v2"),sMr=o(" \u2014 "),XU=a("a"),lMr=o("TFDebertaV2ForMaskedLM"),iMr=o(" (DeBERTa-v2 model)"),dMr=l(),NM=a("li"),EFe=a("strong"),cMr=o("distilbert"),fMr=o(" \u2014 "),zU=a("a"),mMr=o("TFDistilBertForMaskedLM"),gMr=o(" (DistilBERT model)"),hMr=l(),qM=a("li"),CFe=a("strong"),pMr=o("electra"),uMr=o(" \u2014 "),WU=a("a"),_Mr=o("TFElectraForMaskedLM"),bMr=o(" (ELECTRA model)"),vMr=l(),jM=a("li"),wFe=a("strong"),FMr=o("flaubert"),TMr=o(" \u2014 "),QU=a("a"),MMr=o("TFFlaubertWithLMHeadModel"),EMr=o(" (FlauBERT model)"),CMr=l(),DM=a("li"),AFe=a("strong"),wMr=o("funnel"),AMr=o(" \u2014 "),HU=a("a"),LMr=o("TFFunnelForMaskedLM"),yMr=o(" (Funnel Transformer model)"),xMr=l(),GM=a("li"),LFe=a("strong"),$Mr=o("layoutlm"),kMr=o(" \u2014 "),UU=a("a"),SMr=o("TFLayoutLMForMaskedLM"),RMr=o(" (LayoutLM model)"),PMr=l(),OM=a("li"),yFe=a("strong"),BMr=o("longformer"),IMr=o(" \u2014 "),JU=a("a"),NMr=o("TFLongformerForMaskedLM"),qMr=o(" (Longformer model)"),jMr=l(),VM=a("li"),xFe=a("strong"),DMr=o("mobilebert"),GMr=o(" \u2014 "),YU=a("a"),OMr=o("TFMobileBertForMaskedLM"),VMr=o(" (MobileBERT model)"),XMr=l(),XM=a("li"),$Fe=a("strong"),zMr=o("mpnet"),WMr=o(" \u2014 "),KU=a("a"),QMr=o("TFMPNetForMaskedLM"),HMr=o(" (MPNet model)"),UMr=l(),zM=a("li"),kFe=a("strong"),JMr=o("rembert"),YMr=o(" \u2014 "),ZU=a("a"),KMr=o("TFRemBertForMaskedLM"),ZMr=o(" (RemBERT model)"),eEr=l(),WM=a("li"),SFe=a("strong"),oEr=o("roberta"),rEr=o(" \u2014 "),eJ=a("a"),tEr=o("TFRobertaForMaskedLM"),aEr=o(" (RoBERTa model)"),nEr=l(),QM=a("li"),RFe=a("strong"),sEr=o("roformer"),lEr=o(" \u2014 "),oJ=a("a"),iEr=o("TFRoFormerForMaskedLM"),dEr=o(" (RoFormer model)"),cEr=l(),HM=a("li"),PFe=a("strong"),fEr=o("tapas"),mEr=o(" \u2014 "),rJ=a("a"),gEr=o("TFTapasForMaskedLM"),hEr=o(" (TAPAS model)"),pEr=l(),UM=a("li"),BFe=a("strong"),uEr=o("xlm"),_Er=o(" \u2014 "),tJ=a("a"),bEr=o("TFXLMWithLMHeadModel"),vEr=o(" (XLM model)"),FEr=l(),JM=a("li"),IFe=a("strong"),TEr=o("xlm-roberta"),MEr=o(" \u2014 "),aJ=a("a"),EEr=o("TFXLMRobertaForMaskedLM"),CEr=o(" (XLM-RoBERTa model)"),wEr=l(),F(YM.$$.fragment),SOe=l(),pc=a("h2"),KM=a("a"),NFe=a("span"),F(P9.$$.fragment),AEr=l(),qFe=a("span"),LEr=o("TFAutoModelForSeq2SeqLM"),ROe=l(),ar=a("div"),F(B9.$$.fragment),yEr=l(),uc=a("p"),xEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nJ=a("a"),$Er=o("from_pretrained()"),kEr=o(" class method or the "),sJ=a("a"),SEr=o("from_config()"),REr=o(` class
method.`),PEr=l(),I9=a("p"),BEr=o("This class cannot be instantiated directly using "),jFe=a("code"),IEr=o("__init__()"),NEr=o(" (throws an error)."),qEr=l(),Bt=a("div"),F(N9.$$.fragment),jEr=l(),DFe=a("p"),DEr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),GEr=l(),_c=a("p"),OEr=o(`Note:
Loading a model from its configuration file does `),GFe=a("strong"),VEr=o("not"),XEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=a("a"),zEr=o("from_pretrained()"),WEr=o(" to load the model weights."),QEr=l(),F(ZM.$$.fragment),HEr=l(),Sr=a("div"),F(q9.$$.fragment),UEr=l(),OFe=a("p"),JEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),YEr=l(),cn=a("p"),KEr=o("The model class to instantiate is selected based on the "),VFe=a("code"),ZEr=o("model_type"),eCr=o(` property of the config object (either
passed as an argument or loaded from `),XFe=a("code"),oCr=o("pretrained_model_name_or_path"),rCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=a("code"),tCr=o("pretrained_model_name_or_path"),aCr=o(":"),nCr=l(),ye=a("ul"),eE=a("li"),WFe=a("strong"),sCr=o("bart"),lCr=o(" \u2014 "),iJ=a("a"),iCr=o("TFBartForConditionalGeneration"),dCr=o(" (BART model)"),cCr=l(),oE=a("li"),QFe=a("strong"),fCr=o("blenderbot"),mCr=o(" \u2014 "),dJ=a("a"),gCr=o("TFBlenderbotForConditionalGeneration"),hCr=o(" (Blenderbot model)"),pCr=l(),rE=a("li"),HFe=a("strong"),uCr=o("blenderbot-small"),_Cr=o(" \u2014 "),cJ=a("a"),bCr=o("TFBlenderbotSmallForConditionalGeneration"),vCr=o(" (BlenderbotSmall model)"),FCr=l(),tE=a("li"),UFe=a("strong"),TCr=o("encoder-decoder"),MCr=o(" \u2014 "),fJ=a("a"),ECr=o("TFEncoderDecoderModel"),CCr=o(" (Encoder decoder model)"),wCr=l(),aE=a("li"),JFe=a("strong"),ACr=o("led"),LCr=o(" \u2014 "),mJ=a("a"),yCr=o("TFLEDForConditionalGeneration"),xCr=o(" (LED model)"),$Cr=l(),nE=a("li"),YFe=a("strong"),kCr=o("marian"),SCr=o(" \u2014 "),gJ=a("a"),RCr=o("TFMarianMTModel"),PCr=o(" (Marian model)"),BCr=l(),sE=a("li"),KFe=a("strong"),ICr=o("mbart"),NCr=o(" \u2014 "),hJ=a("a"),qCr=o("TFMBartForConditionalGeneration"),jCr=o(" (mBART model)"),DCr=l(),lE=a("li"),ZFe=a("strong"),GCr=o("mt5"),OCr=o(" \u2014 "),pJ=a("a"),VCr=o("TFMT5ForConditionalGeneration"),XCr=o(" (MT5 model)"),zCr=l(),iE=a("li"),eTe=a("strong"),WCr=o("pegasus"),QCr=o(" \u2014 "),uJ=a("a"),HCr=o("TFPegasusForConditionalGeneration"),UCr=o(" (Pegasus model)"),JCr=l(),dE=a("li"),oTe=a("strong"),YCr=o("t5"),KCr=o(" \u2014 "),_J=a("a"),ZCr=o("TFT5ForConditionalGeneration"),e5r=o(" (T5 model)"),o5r=l(),F(cE.$$.fragment),POe=l(),bc=a("h2"),fE=a("a"),rTe=a("span"),F(j9.$$.fragment),r5r=l(),tTe=a("span"),t5r=o("TFAutoModelForSequenceClassification"),BOe=l(),nr=a("div"),F(D9.$$.fragment),a5r=l(),vc=a("p"),n5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bJ=a("a"),s5r=o("from_pretrained()"),l5r=o(" class method or the "),vJ=a("a"),i5r=o("from_config()"),d5r=o(` class
method.`),c5r=l(),G9=a("p"),f5r=o("This class cannot be instantiated directly using "),aTe=a("code"),m5r=o("__init__()"),g5r=o(" (throws an error)."),h5r=l(),It=a("div"),F(O9.$$.fragment),p5r=l(),nTe=a("p"),u5r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_5r=l(),Fc=a("p"),b5r=o(`Note:
Loading a model from its configuration file does `),sTe=a("strong"),v5r=o("not"),F5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=a("a"),T5r=o("from_pretrained()"),M5r=o(" to load the model weights."),E5r=l(),F(mE.$$.fragment),C5r=l(),Rr=a("div"),F(V9.$$.fragment),w5r=l(),lTe=a("p"),A5r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),L5r=l(),fn=a("p"),y5r=o("The model class to instantiate is selected based on the "),iTe=a("code"),x5r=o("model_type"),$5r=o(` property of the config object (either
passed as an argument or loaded from `),dTe=a("code"),k5r=o("pretrained_model_name_or_path"),S5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=a("code"),R5r=o("pretrained_model_name_or_path"),P5r=o(":"),B5r=l(),te=a("ul"),gE=a("li"),fTe=a("strong"),I5r=o("albert"),N5r=o(" \u2014 "),TJ=a("a"),q5r=o("TFAlbertForSequenceClassification"),j5r=o(" (ALBERT model)"),D5r=l(),hE=a("li"),mTe=a("strong"),G5r=o("bert"),O5r=o(" \u2014 "),MJ=a("a"),V5r=o("TFBertForSequenceClassification"),X5r=o(" (BERT model)"),z5r=l(),pE=a("li"),gTe=a("strong"),W5r=o("camembert"),Q5r=o(" \u2014 "),EJ=a("a"),H5r=o("TFCamembertForSequenceClassification"),U5r=o(" (CamemBERT model)"),J5r=l(),uE=a("li"),hTe=a("strong"),Y5r=o("convbert"),K5r=o(" \u2014 "),CJ=a("a"),Z5r=o("TFConvBertForSequenceClassification"),e0r=o(" (ConvBERT model)"),o0r=l(),_E=a("li"),pTe=a("strong"),r0r=o("ctrl"),t0r=o(" \u2014 "),wJ=a("a"),a0r=o("TFCTRLForSequenceClassification"),n0r=o(" (CTRL model)"),s0r=l(),bE=a("li"),uTe=a("strong"),l0r=o("deberta"),i0r=o(" \u2014 "),AJ=a("a"),d0r=o("TFDebertaForSequenceClassification"),c0r=o(" (DeBERTa model)"),f0r=l(),vE=a("li"),_Te=a("strong"),m0r=o("deberta-v2"),g0r=o(" \u2014 "),LJ=a("a"),h0r=o("TFDebertaV2ForSequenceClassification"),p0r=o(" (DeBERTa-v2 model)"),u0r=l(),FE=a("li"),bTe=a("strong"),_0r=o("distilbert"),b0r=o(" \u2014 "),yJ=a("a"),v0r=o("TFDistilBertForSequenceClassification"),F0r=o(" (DistilBERT model)"),T0r=l(),TE=a("li"),vTe=a("strong"),M0r=o("electra"),E0r=o(" \u2014 "),xJ=a("a"),C0r=o("TFElectraForSequenceClassification"),w0r=o(" (ELECTRA model)"),A0r=l(),ME=a("li"),FTe=a("strong"),L0r=o("flaubert"),y0r=o(" \u2014 "),$J=a("a"),x0r=o("TFFlaubertForSequenceClassification"),$0r=o(" (FlauBERT model)"),k0r=l(),EE=a("li"),TTe=a("strong"),S0r=o("funnel"),R0r=o(" \u2014 "),kJ=a("a"),P0r=o("TFFunnelForSequenceClassification"),B0r=o(" (Funnel Transformer model)"),I0r=l(),CE=a("li"),MTe=a("strong"),N0r=o("gpt2"),q0r=o(" \u2014 "),SJ=a("a"),j0r=o("TFGPT2ForSequenceClassification"),D0r=o(" (OpenAI GPT-2 model)"),G0r=l(),wE=a("li"),ETe=a("strong"),O0r=o("gptj"),V0r=o(" \u2014 "),RJ=a("a"),X0r=o("TFGPTJForSequenceClassification"),z0r=o(" (GPT-J model)"),W0r=l(),AE=a("li"),CTe=a("strong"),Q0r=o("layoutlm"),H0r=o(" \u2014 "),PJ=a("a"),U0r=o("TFLayoutLMForSequenceClassification"),J0r=o(" (LayoutLM model)"),Y0r=l(),LE=a("li"),wTe=a("strong"),K0r=o("longformer"),Z0r=o(" \u2014 "),BJ=a("a"),ewr=o("TFLongformerForSequenceClassification"),owr=o(" (Longformer model)"),rwr=l(),yE=a("li"),ATe=a("strong"),twr=o("mobilebert"),awr=o(" \u2014 "),IJ=a("a"),nwr=o("TFMobileBertForSequenceClassification"),swr=o(" (MobileBERT model)"),lwr=l(),xE=a("li"),LTe=a("strong"),iwr=o("mpnet"),dwr=o(" \u2014 "),NJ=a("a"),cwr=o("TFMPNetForSequenceClassification"),fwr=o(" (MPNet model)"),mwr=l(),$E=a("li"),yTe=a("strong"),gwr=o("openai-gpt"),hwr=o(" \u2014 "),qJ=a("a"),pwr=o("TFOpenAIGPTForSequenceClassification"),uwr=o(" (OpenAI GPT model)"),_wr=l(),kE=a("li"),xTe=a("strong"),bwr=o("rembert"),vwr=o(" \u2014 "),jJ=a("a"),Fwr=o("TFRemBertForSequenceClassification"),Twr=o(" (RemBERT model)"),Mwr=l(),SE=a("li"),$Te=a("strong"),Ewr=o("roberta"),Cwr=o(" \u2014 "),DJ=a("a"),wwr=o("TFRobertaForSequenceClassification"),Awr=o(" (RoBERTa model)"),Lwr=l(),RE=a("li"),kTe=a("strong"),ywr=o("roformer"),xwr=o(" \u2014 "),GJ=a("a"),$wr=o("TFRoFormerForSequenceClassification"),kwr=o(" (RoFormer model)"),Swr=l(),PE=a("li"),STe=a("strong"),Rwr=o("tapas"),Pwr=o(" \u2014 "),OJ=a("a"),Bwr=o("TFTapasForSequenceClassification"),Iwr=o(" (TAPAS model)"),Nwr=l(),BE=a("li"),RTe=a("strong"),qwr=o("transfo-xl"),jwr=o(" \u2014 "),VJ=a("a"),Dwr=o("TFTransfoXLForSequenceClassification"),Gwr=o(" (Transformer-XL model)"),Owr=l(),IE=a("li"),PTe=a("strong"),Vwr=o("xlm"),Xwr=o(" \u2014 "),XJ=a("a"),zwr=o("TFXLMForSequenceClassification"),Wwr=o(" (XLM model)"),Qwr=l(),NE=a("li"),BTe=a("strong"),Hwr=o("xlm-roberta"),Uwr=o(" \u2014 "),zJ=a("a"),Jwr=o("TFXLMRobertaForSequenceClassification"),Ywr=o(" (XLM-RoBERTa model)"),Kwr=l(),qE=a("li"),ITe=a("strong"),Zwr=o("xlnet"),eAr=o(" \u2014 "),WJ=a("a"),oAr=o("TFXLNetForSequenceClassification"),rAr=o(" (XLNet model)"),tAr=l(),F(jE.$$.fragment),IOe=l(),Tc=a("h2"),DE=a("a"),NTe=a("span"),F(X9.$$.fragment),aAr=l(),qTe=a("span"),nAr=o("TFAutoModelForMultipleChoice"),NOe=l(),sr=a("div"),F(z9.$$.fragment),sAr=l(),Mc=a("p"),lAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),QJ=a("a"),iAr=o("from_pretrained()"),dAr=o(" class method or the "),HJ=a("a"),cAr=o("from_config()"),fAr=o(` class
method.`),mAr=l(),W9=a("p"),gAr=o("This class cannot be instantiated directly using "),jTe=a("code"),hAr=o("__init__()"),pAr=o(" (throws an error)."),uAr=l(),Nt=a("div"),F(Q9.$$.fragment),_Ar=l(),DTe=a("p"),bAr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vAr=l(),Ec=a("p"),FAr=o(`Note:
Loading a model from its configuration file does `),GTe=a("strong"),TAr=o("not"),MAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=a("a"),EAr=o("from_pretrained()"),CAr=o(" to load the model weights."),wAr=l(),F(GE.$$.fragment),AAr=l(),Pr=a("div"),F(H9.$$.fragment),LAr=l(),OTe=a("p"),yAr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xAr=l(),mn=a("p"),$Ar=o("The model class to instantiate is selected based on the "),VTe=a("code"),kAr=o("model_type"),SAr=o(` property of the config object (either
passed as an argument or loaded from `),XTe=a("code"),RAr=o("pretrained_model_name_or_path"),PAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zTe=a("code"),BAr=o("pretrained_model_name_or_path"),IAr=o(":"),NAr=l(),ue=a("ul"),OE=a("li"),WTe=a("strong"),qAr=o("albert"),jAr=o(" \u2014 "),JJ=a("a"),DAr=o("TFAlbertForMultipleChoice"),GAr=o(" (ALBERT model)"),OAr=l(),VE=a("li"),QTe=a("strong"),VAr=o("bert"),XAr=o(" \u2014 "),YJ=a("a"),zAr=o("TFBertForMultipleChoice"),WAr=o(" (BERT model)"),QAr=l(),XE=a("li"),HTe=a("strong"),HAr=o("camembert"),UAr=o(" \u2014 "),KJ=a("a"),JAr=o("TFCamembertForMultipleChoice"),YAr=o(" (CamemBERT model)"),KAr=l(),zE=a("li"),UTe=a("strong"),ZAr=o("convbert"),e6r=o(" \u2014 "),ZJ=a("a"),o6r=o("TFConvBertForMultipleChoice"),r6r=o(" (ConvBERT model)"),t6r=l(),WE=a("li"),JTe=a("strong"),a6r=o("distilbert"),n6r=o(" \u2014 "),eY=a("a"),s6r=o("TFDistilBertForMultipleChoice"),l6r=o(" (DistilBERT model)"),i6r=l(),QE=a("li"),YTe=a("strong"),d6r=o("electra"),c6r=o(" \u2014 "),oY=a("a"),f6r=o("TFElectraForMultipleChoice"),m6r=o(" (ELECTRA model)"),g6r=l(),HE=a("li"),KTe=a("strong"),h6r=o("flaubert"),p6r=o(" \u2014 "),rY=a("a"),u6r=o("TFFlaubertForMultipleChoice"),_6r=o(" (FlauBERT model)"),b6r=l(),UE=a("li"),ZTe=a("strong"),v6r=o("funnel"),F6r=o(" \u2014 "),tY=a("a"),T6r=o("TFFunnelForMultipleChoice"),M6r=o(" (Funnel Transformer model)"),E6r=l(),JE=a("li"),e7e=a("strong"),C6r=o("longformer"),w6r=o(" \u2014 "),aY=a("a"),A6r=o("TFLongformerForMultipleChoice"),L6r=o(" (Longformer model)"),y6r=l(),YE=a("li"),o7e=a("strong"),x6r=o("mobilebert"),$6r=o(" \u2014 "),nY=a("a"),k6r=o("TFMobileBertForMultipleChoice"),S6r=o(" (MobileBERT model)"),R6r=l(),KE=a("li"),r7e=a("strong"),P6r=o("mpnet"),B6r=o(" \u2014 "),sY=a("a"),I6r=o("TFMPNetForMultipleChoice"),N6r=o(" (MPNet model)"),q6r=l(),ZE=a("li"),t7e=a("strong"),j6r=o("rembert"),D6r=o(" \u2014 "),lY=a("a"),G6r=o("TFRemBertForMultipleChoice"),O6r=o(" (RemBERT model)"),V6r=l(),eC=a("li"),a7e=a("strong"),X6r=o("roberta"),z6r=o(" \u2014 "),iY=a("a"),W6r=o("TFRobertaForMultipleChoice"),Q6r=o(" (RoBERTa model)"),H6r=l(),oC=a("li"),n7e=a("strong"),U6r=o("roformer"),J6r=o(" \u2014 "),dY=a("a"),Y6r=o("TFRoFormerForMultipleChoice"),K6r=o(" (RoFormer model)"),Z6r=l(),rC=a("li"),s7e=a("strong"),eLr=o("xlm"),oLr=o(" \u2014 "),cY=a("a"),rLr=o("TFXLMForMultipleChoice"),tLr=o(" (XLM model)"),aLr=l(),tC=a("li"),l7e=a("strong"),nLr=o("xlm-roberta"),sLr=o(" \u2014 "),fY=a("a"),lLr=o("TFXLMRobertaForMultipleChoice"),iLr=o(" (XLM-RoBERTa model)"),dLr=l(),aC=a("li"),i7e=a("strong"),cLr=o("xlnet"),fLr=o(" \u2014 "),mY=a("a"),mLr=o("TFXLNetForMultipleChoice"),gLr=o(" (XLNet model)"),hLr=l(),F(nC.$$.fragment),qOe=l(),Cc=a("h2"),sC=a("a"),d7e=a("span"),F(U9.$$.fragment),pLr=l(),c7e=a("span"),uLr=o("TFAutoModelForNextSentencePrediction"),jOe=l(),lr=a("div"),F(J9.$$.fragment),_Lr=l(),wc=a("p"),bLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gY=a("a"),vLr=o("from_pretrained()"),FLr=o(" class method or the "),hY=a("a"),TLr=o("from_config()"),MLr=o(` class
method.`),ELr=l(),Y9=a("p"),CLr=o("This class cannot be instantiated directly using "),f7e=a("code"),wLr=o("__init__()"),ALr=o(" (throws an error)."),LLr=l(),qt=a("div"),F(K9.$$.fragment),yLr=l(),m7e=a("p"),xLr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Lr=l(),Ac=a("p"),kLr=o(`Note:
Loading a model from its configuration file does `),g7e=a("strong"),SLr=o("not"),RLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=a("a"),PLr=o("from_pretrained()"),BLr=o(" to load the model weights."),ILr=l(),F(lC.$$.fragment),NLr=l(),Br=a("div"),F(Z9.$$.fragment),qLr=l(),h7e=a("p"),jLr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DLr=l(),gn=a("p"),GLr=o("The model class to instantiate is selected based on the "),p7e=a("code"),OLr=o("model_type"),VLr=o(` property of the config object (either
passed as an argument or loaded from `),u7e=a("code"),XLr=o("pretrained_model_name_or_path"),zLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_7e=a("code"),WLr=o("pretrained_model_name_or_path"),QLr=o(":"),HLr=l(),ex=a("ul"),iC=a("li"),b7e=a("strong"),ULr=o("bert"),JLr=o(" \u2014 "),uY=a("a"),YLr=o("TFBertForNextSentencePrediction"),KLr=o(" (BERT model)"),ZLr=l(),dC=a("li"),v7e=a("strong"),eyr=o("mobilebert"),oyr=o(" \u2014 "),_Y=a("a"),ryr=o("TFMobileBertForNextSentencePrediction"),tyr=o(" (MobileBERT model)"),ayr=l(),F(cC.$$.fragment),DOe=l(),Lc=a("h2"),fC=a("a"),F7e=a("span"),F(ox.$$.fragment),nyr=l(),T7e=a("span"),syr=o("TFAutoModelForTableQuestionAnswering"),GOe=l(),ir=a("div"),F(rx.$$.fragment),lyr=l(),yc=a("p"),iyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bY=a("a"),dyr=o("from_pretrained()"),cyr=o(" class method or the "),vY=a("a"),fyr=o("from_config()"),myr=o(` class
method.`),gyr=l(),tx=a("p"),hyr=o("This class cannot be instantiated directly using "),M7e=a("code"),pyr=o("__init__()"),uyr=o(" (throws an error)."),_yr=l(),jt=a("div"),F(ax.$$.fragment),byr=l(),E7e=a("p"),vyr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Fyr=l(),xc=a("p"),Tyr=o(`Note:
Loading a model from its configuration file does `),C7e=a("strong"),Myr=o("not"),Eyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),Cyr=o("from_pretrained()"),wyr=o(" to load the model weights."),Ayr=l(),F(mC.$$.fragment),Lyr=l(),Ir=a("div"),F(nx.$$.fragment),yyr=l(),w7e=a("p"),xyr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$yr=l(),hn=a("p"),kyr=o("The model class to instantiate is selected based on the "),A7e=a("code"),Syr=o("model_type"),Ryr=o(` property of the config object (either
passed as an argument or loaded from `),L7e=a("code"),Pyr=o("pretrained_model_name_or_path"),Byr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=a("code"),Iyr=o("pretrained_model_name_or_path"),Nyr=o(":"),qyr=l(),x7e=a("ul"),gC=a("li"),$7e=a("strong"),jyr=o("tapas"),Dyr=o(" \u2014 "),TY=a("a"),Gyr=o("TFTapasForQuestionAnswering"),Oyr=o(" (TAPAS model)"),Vyr=l(),F(hC.$$.fragment),OOe=l(),$c=a("h2"),pC=a("a"),k7e=a("span"),F(sx.$$.fragment),Xyr=l(),S7e=a("span"),zyr=o("TFAutoModelForTokenClassification"),VOe=l(),dr=a("div"),F(lx.$$.fragment),Wyr=l(),kc=a("p"),Qyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),MY=a("a"),Hyr=o("from_pretrained()"),Uyr=o(" class method or the "),EY=a("a"),Jyr=o("from_config()"),Yyr=o(` class
method.`),Kyr=l(),ix=a("p"),Zyr=o("This class cannot be instantiated directly using "),R7e=a("code"),e8r=o("__init__()"),o8r=o(" (throws an error)."),r8r=l(),Dt=a("div"),F(dx.$$.fragment),t8r=l(),P7e=a("p"),a8r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),n8r=l(),Sc=a("p"),s8r=o(`Note:
Loading a model from its configuration file does `),B7e=a("strong"),l8r=o("not"),i8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CY=a("a"),d8r=o("from_pretrained()"),c8r=o(" to load the model weights."),f8r=l(),F(uC.$$.fragment),m8r=l(),Nr=a("div"),F(cx.$$.fragment),g8r=l(),I7e=a("p"),h8r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),p8r=l(),pn=a("p"),u8r=o("The model class to instantiate is selected based on the "),N7e=a("code"),_8r=o("model_type"),b8r=o(` property of the config object (either
passed as an argument or loaded from `),q7e=a("code"),v8r=o("pretrained_model_name_or_path"),F8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=a("code"),T8r=o("pretrained_model_name_or_path"),M8r=o(":"),E8r=l(),de=a("ul"),_C=a("li"),D7e=a("strong"),C8r=o("albert"),w8r=o(" \u2014 "),wY=a("a"),A8r=o("TFAlbertForTokenClassification"),L8r=o(" (ALBERT model)"),y8r=l(),bC=a("li"),G7e=a("strong"),x8r=o("bert"),$8r=o(" \u2014 "),AY=a("a"),k8r=o("TFBertForTokenClassification"),S8r=o(" (BERT model)"),R8r=l(),vC=a("li"),O7e=a("strong"),P8r=o("camembert"),B8r=o(" \u2014 "),LY=a("a"),I8r=o("TFCamembertForTokenClassification"),N8r=o(" (CamemBERT model)"),q8r=l(),FC=a("li"),V7e=a("strong"),j8r=o("convbert"),D8r=o(" \u2014 "),yY=a("a"),G8r=o("TFConvBertForTokenClassification"),O8r=o(" (ConvBERT model)"),V8r=l(),TC=a("li"),X7e=a("strong"),X8r=o("deberta"),z8r=o(" \u2014 "),xY=a("a"),W8r=o("TFDebertaForTokenClassification"),Q8r=o(" (DeBERTa model)"),H8r=l(),MC=a("li"),z7e=a("strong"),U8r=o("deberta-v2"),J8r=o(" \u2014 "),$Y=a("a"),Y8r=o("TFDebertaV2ForTokenClassification"),K8r=o(" (DeBERTa-v2 model)"),Z8r=l(),EC=a("li"),W7e=a("strong"),e9r=o("distilbert"),o9r=o(" \u2014 "),kY=a("a"),r9r=o("TFDistilBertForTokenClassification"),t9r=o(" (DistilBERT model)"),a9r=l(),CC=a("li"),Q7e=a("strong"),n9r=o("electra"),s9r=o(" \u2014 "),SY=a("a"),l9r=o("TFElectraForTokenClassification"),i9r=o(" (ELECTRA model)"),d9r=l(),wC=a("li"),H7e=a("strong"),c9r=o("flaubert"),f9r=o(" \u2014 "),RY=a("a"),m9r=o("TFFlaubertForTokenClassification"),g9r=o(" (FlauBERT model)"),h9r=l(),AC=a("li"),U7e=a("strong"),p9r=o("funnel"),u9r=o(" \u2014 "),PY=a("a"),_9r=o("TFFunnelForTokenClassification"),b9r=o(" (Funnel Transformer model)"),v9r=l(),LC=a("li"),J7e=a("strong"),F9r=o("layoutlm"),T9r=o(" \u2014 "),BY=a("a"),M9r=o("TFLayoutLMForTokenClassification"),E9r=o(" (LayoutLM model)"),C9r=l(),yC=a("li"),Y7e=a("strong"),w9r=o("longformer"),A9r=o(" \u2014 "),IY=a("a"),L9r=o("TFLongformerForTokenClassification"),y9r=o(" (Longformer model)"),x9r=l(),xC=a("li"),K7e=a("strong"),$9r=o("mobilebert"),k9r=o(" \u2014 "),NY=a("a"),S9r=o("TFMobileBertForTokenClassification"),R9r=o(" (MobileBERT model)"),P9r=l(),$C=a("li"),Z7e=a("strong"),B9r=o("mpnet"),I9r=o(" \u2014 "),qY=a("a"),N9r=o("TFMPNetForTokenClassification"),q9r=o(" (MPNet model)"),j9r=l(),kC=a("li"),eMe=a("strong"),D9r=o("rembert"),G9r=o(" \u2014 "),jY=a("a"),O9r=o("TFRemBertForTokenClassification"),V9r=o(" (RemBERT model)"),X9r=l(),SC=a("li"),oMe=a("strong"),z9r=o("roberta"),W9r=o(" \u2014 "),DY=a("a"),Q9r=o("TFRobertaForTokenClassification"),H9r=o(" (RoBERTa model)"),U9r=l(),RC=a("li"),rMe=a("strong"),J9r=o("roformer"),Y9r=o(" \u2014 "),GY=a("a"),K9r=o("TFRoFormerForTokenClassification"),Z9r=o(" (RoFormer model)"),exr=l(),PC=a("li"),tMe=a("strong"),oxr=o("xlm"),rxr=o(" \u2014 "),OY=a("a"),txr=o("TFXLMForTokenClassification"),axr=o(" (XLM model)"),nxr=l(),BC=a("li"),aMe=a("strong"),sxr=o("xlm-roberta"),lxr=o(" \u2014 "),VY=a("a"),ixr=o("TFXLMRobertaForTokenClassification"),dxr=o(" (XLM-RoBERTa model)"),cxr=l(),IC=a("li"),nMe=a("strong"),fxr=o("xlnet"),mxr=o(" \u2014 "),XY=a("a"),gxr=o("TFXLNetForTokenClassification"),hxr=o(" (XLNet model)"),pxr=l(),F(NC.$$.fragment),XOe=l(),Rc=a("h2"),qC=a("a"),sMe=a("span"),F(fx.$$.fragment),uxr=l(),lMe=a("span"),_xr=o("TFAutoModelForQuestionAnswering"),zOe=l(),cr=a("div"),F(mx.$$.fragment),bxr=l(),Pc=a("p"),vxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zY=a("a"),Fxr=o("from_pretrained()"),Txr=o(" class method or the "),WY=a("a"),Mxr=o("from_config()"),Exr=o(` class
method.`),Cxr=l(),gx=a("p"),wxr=o("This class cannot be instantiated directly using "),iMe=a("code"),Axr=o("__init__()"),Lxr=o(" (throws an error)."),yxr=l(),Gt=a("div"),F(hx.$$.fragment),xxr=l(),dMe=a("p"),$xr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kxr=l(),Bc=a("p"),Sxr=o(`Note:
Loading a model from its configuration file does `),cMe=a("strong"),Rxr=o("not"),Pxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),Bxr=o("from_pretrained()"),Ixr=o(" to load the model weights."),Nxr=l(),F(jC.$$.fragment),qxr=l(),qr=a("div"),F(px.$$.fragment),jxr=l(),fMe=a("p"),Dxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Gxr=l(),un=a("p"),Oxr=o("The model class to instantiate is selected based on the "),mMe=a("code"),Vxr=o("model_type"),Xxr=o(` property of the config object (either
passed as an argument or loaded from `),gMe=a("code"),zxr=o("pretrained_model_name_or_path"),Wxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=a("code"),Qxr=o("pretrained_model_name_or_path"),Hxr=o(":"),Uxr=l(),ce=a("ul"),DC=a("li"),pMe=a("strong"),Jxr=o("albert"),Yxr=o(" \u2014 "),HY=a("a"),Kxr=o("TFAlbertForQuestionAnswering"),Zxr=o(" (ALBERT model)"),e$r=l(),GC=a("li"),uMe=a("strong"),o$r=o("bert"),r$r=o(" \u2014 "),UY=a("a"),t$r=o("TFBertForQuestionAnswering"),a$r=o(" (BERT model)"),n$r=l(),OC=a("li"),_Me=a("strong"),s$r=o("camembert"),l$r=o(" \u2014 "),JY=a("a"),i$r=o("TFCamembertForQuestionAnswering"),d$r=o(" (CamemBERT model)"),c$r=l(),VC=a("li"),bMe=a("strong"),f$r=o("convbert"),m$r=o(" \u2014 "),YY=a("a"),g$r=o("TFConvBertForQuestionAnswering"),h$r=o(" (ConvBERT model)"),p$r=l(),XC=a("li"),vMe=a("strong"),u$r=o("deberta"),_$r=o(" \u2014 "),KY=a("a"),b$r=o("TFDebertaForQuestionAnswering"),v$r=o(" (DeBERTa model)"),F$r=l(),zC=a("li"),FMe=a("strong"),T$r=o("deberta-v2"),M$r=o(" \u2014 "),ZY=a("a"),E$r=o("TFDebertaV2ForQuestionAnswering"),C$r=o(" (DeBERTa-v2 model)"),w$r=l(),WC=a("li"),TMe=a("strong"),A$r=o("distilbert"),L$r=o(" \u2014 "),eK=a("a"),y$r=o("TFDistilBertForQuestionAnswering"),x$r=o(" (DistilBERT model)"),$$r=l(),QC=a("li"),MMe=a("strong"),k$r=o("electra"),S$r=o(" \u2014 "),oK=a("a"),R$r=o("TFElectraForQuestionAnswering"),P$r=o(" (ELECTRA model)"),B$r=l(),HC=a("li"),EMe=a("strong"),I$r=o("flaubert"),N$r=o(" \u2014 "),rK=a("a"),q$r=o("TFFlaubertForQuestionAnsweringSimple"),j$r=o(" (FlauBERT model)"),D$r=l(),UC=a("li"),CMe=a("strong"),G$r=o("funnel"),O$r=o(" \u2014 "),tK=a("a"),V$r=o("TFFunnelForQuestionAnswering"),X$r=o(" (Funnel Transformer model)"),z$r=l(),JC=a("li"),wMe=a("strong"),W$r=o("gptj"),Q$r=o(" \u2014 "),aK=a("a"),H$r=o("TFGPTJForQuestionAnswering"),U$r=o(" (GPT-J model)"),J$r=l(),YC=a("li"),AMe=a("strong"),Y$r=o("longformer"),K$r=o(" \u2014 "),nK=a("a"),Z$r=o("TFLongformerForQuestionAnswering"),ekr=o(" (Longformer model)"),okr=l(),KC=a("li"),LMe=a("strong"),rkr=o("mobilebert"),tkr=o(" \u2014 "),sK=a("a"),akr=o("TFMobileBertForQuestionAnswering"),nkr=o(" (MobileBERT model)"),skr=l(),ZC=a("li"),yMe=a("strong"),lkr=o("mpnet"),ikr=o(" \u2014 "),lK=a("a"),dkr=o("TFMPNetForQuestionAnswering"),ckr=o(" (MPNet model)"),fkr=l(),e5=a("li"),xMe=a("strong"),mkr=o("rembert"),gkr=o(" \u2014 "),iK=a("a"),hkr=o("TFRemBertForQuestionAnswering"),pkr=o(" (RemBERT model)"),ukr=l(),o5=a("li"),$Me=a("strong"),_kr=o("roberta"),bkr=o(" \u2014 "),dK=a("a"),vkr=o("TFRobertaForQuestionAnswering"),Fkr=o(" (RoBERTa model)"),Tkr=l(),r5=a("li"),kMe=a("strong"),Mkr=o("roformer"),Ekr=o(" \u2014 "),cK=a("a"),Ckr=o("TFRoFormerForQuestionAnswering"),wkr=o(" (RoFormer model)"),Akr=l(),t5=a("li"),SMe=a("strong"),Lkr=o("xlm"),ykr=o(" \u2014 "),fK=a("a"),xkr=o("TFXLMForQuestionAnsweringSimple"),$kr=o(" (XLM model)"),kkr=l(),a5=a("li"),RMe=a("strong"),Skr=o("xlm-roberta"),Rkr=o(" \u2014 "),mK=a("a"),Pkr=o("TFXLMRobertaForQuestionAnswering"),Bkr=o(" (XLM-RoBERTa model)"),Ikr=l(),n5=a("li"),PMe=a("strong"),Nkr=o("xlnet"),qkr=o(" \u2014 "),gK=a("a"),jkr=o("TFXLNetForQuestionAnsweringSimple"),Dkr=o(" (XLNet model)"),Gkr=l(),F(s5.$$.fragment),WOe=l(),Ic=a("h2"),l5=a("a"),BMe=a("span"),F(ux.$$.fragment),Okr=l(),IMe=a("span"),Vkr=o("TFAutoModelForVision2Seq"),QOe=l(),fr=a("div"),F(_x.$$.fragment),Xkr=l(),Nc=a("p"),zkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hK=a("a"),Wkr=o("from_pretrained()"),Qkr=o(" class method or the "),pK=a("a"),Hkr=o("from_config()"),Ukr=o(` class
method.`),Jkr=l(),bx=a("p"),Ykr=o("This class cannot be instantiated directly using "),NMe=a("code"),Kkr=o("__init__()"),Zkr=o(" (throws an error)."),eSr=l(),Ot=a("div"),F(vx.$$.fragment),oSr=l(),qMe=a("p"),rSr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tSr=l(),qc=a("p"),aSr=o(`Note:
Loading a model from its configuration file does `),jMe=a("strong"),nSr=o("not"),sSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),lSr=o("from_pretrained()"),iSr=o(" to load the model weights."),dSr=l(),F(i5.$$.fragment),cSr=l(),jr=a("div"),F(Fx.$$.fragment),fSr=l(),DMe=a("p"),mSr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gSr=l(),_n=a("p"),hSr=o("The model class to instantiate is selected based on the "),GMe=a("code"),pSr=o("model_type"),uSr=o(` property of the config object (either
passed as an argument or loaded from `),OMe=a("code"),_Sr=o("pretrained_model_name_or_path"),bSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=a("code"),vSr=o("pretrained_model_name_or_path"),FSr=o(":"),TSr=l(),XMe=a("ul"),d5=a("li"),zMe=a("strong"),MSr=o("vision-encoder-decoder"),ESr=o(" \u2014 "),_K=a("a"),CSr=o("TFVisionEncoderDecoderModel"),wSr=o(" (Vision Encoder decoder model)"),ASr=l(),F(c5.$$.fragment),HOe=l(),jc=a("h2"),f5=a("a"),WMe=a("span"),F(Tx.$$.fragment),LSr=l(),QMe=a("span"),ySr=o("TFAutoModelForSpeechSeq2Seq"),UOe=l(),mr=a("div"),F(Mx.$$.fragment),xSr=l(),Dc=a("p"),$Sr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bK=a("a"),kSr=o("from_pretrained()"),SSr=o(" class method or the "),vK=a("a"),RSr=o("from_config()"),PSr=o(` class
method.`),BSr=l(),Ex=a("p"),ISr=o("This class cannot be instantiated directly using "),HMe=a("code"),NSr=o("__init__()"),qSr=o(" (throws an error)."),jSr=l(),Vt=a("div"),F(Cx.$$.fragment),DSr=l(),UMe=a("p"),GSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),OSr=l(),Gc=a("p"),VSr=o(`Note:
Loading a model from its configuration file does `),JMe=a("strong"),XSr=o("not"),zSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FK=a("a"),WSr=o("from_pretrained()"),QSr=o(" to load the model weights."),HSr=l(),F(m5.$$.fragment),USr=l(),Dr=a("div"),F(wx.$$.fragment),JSr=l(),YMe=a("p"),YSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),KSr=l(),bn=a("p"),ZSr=o("The model class to instantiate is selected based on the "),KMe=a("code"),eRr=o("model_type"),oRr=o(` property of the config object (either
passed as an argument or loaded from `),ZMe=a("code"),rRr=o("pretrained_model_name_or_path"),tRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eEe=a("code"),aRr=o("pretrained_model_name_or_path"),nRr=o(":"),sRr=l(),oEe=a("ul"),g5=a("li"),rEe=a("strong"),lRr=o("speech_to_text"),iRr=o(" \u2014 "),TK=a("a"),dRr=o("TFSpeech2TextForConditionalGeneration"),cRr=o(" (Speech2Text model)"),fRr=l(),F(h5.$$.fragment),JOe=l(),Oc=a("h2"),p5=a("a"),tEe=a("span"),F(Ax.$$.fragment),mRr=l(),aEe=a("span"),gRr=o("FlaxAutoModel"),YOe=l(),gr=a("div"),F(Lx.$$.fragment),hRr=l(),Vc=a("p"),pRr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),MK=a("a"),uRr=o("from_pretrained()"),_Rr=o(" class method or the "),EK=a("a"),bRr=o("from_config()"),vRr=o(` class
method.`),FRr=l(),yx=a("p"),TRr=o("This class cannot be instantiated directly using "),nEe=a("code"),MRr=o("__init__()"),ERr=o(" (throws an error)."),CRr=l(),Xt=a("div"),F(xx.$$.fragment),wRr=l(),sEe=a("p"),ARr=o("Instantiates one of the base model classes of the library from a configuration."),LRr=l(),Xc=a("p"),yRr=o(`Note:
Loading a model from its configuration file does `),lEe=a("strong"),xRr=o("not"),$Rr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=a("a"),kRr=o("from_pretrained()"),SRr=o(" to load the model weights."),RRr=l(),F(u5.$$.fragment),PRr=l(),Gr=a("div"),F($x.$$.fragment),BRr=l(),iEe=a("p"),IRr=o("Instantiate one of the base model classes of the library from a pretrained model."),NRr=l(),vn=a("p"),qRr=o("The model class to instantiate is selected based on the "),dEe=a("code"),jRr=o("model_type"),DRr=o(` property of the config object (either
passed as an argument or loaded from `),cEe=a("code"),GRr=o("pretrained_model_name_or_path"),ORr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fEe=a("code"),VRr=o("pretrained_model_name_or_path"),XRr=o(":"),zRr=l(),oe=a("ul"),_5=a("li"),mEe=a("strong"),WRr=o("albert"),QRr=o(" \u2014 "),wK=a("a"),HRr=o("FlaxAlbertModel"),URr=o(" (ALBERT model)"),JRr=l(),b5=a("li"),gEe=a("strong"),YRr=o("bart"),KRr=o(" \u2014 "),AK=a("a"),ZRr=o("FlaxBartModel"),ePr=o(" (BART model)"),oPr=l(),v5=a("li"),hEe=a("strong"),rPr=o("beit"),tPr=o(" \u2014 "),LK=a("a"),aPr=o("FlaxBeitModel"),nPr=o(" (BEiT model)"),sPr=l(),F5=a("li"),pEe=a("strong"),lPr=o("bert"),iPr=o(" \u2014 "),yK=a("a"),dPr=o("FlaxBertModel"),cPr=o(" (BERT model)"),fPr=l(),T5=a("li"),uEe=a("strong"),mPr=o("big_bird"),gPr=o(" \u2014 "),xK=a("a"),hPr=o("FlaxBigBirdModel"),pPr=o(" (BigBird model)"),uPr=l(),M5=a("li"),_Ee=a("strong"),_Pr=o("blenderbot"),bPr=o(" \u2014 "),$K=a("a"),vPr=o("FlaxBlenderbotModel"),FPr=o(" (Blenderbot model)"),TPr=l(),E5=a("li"),bEe=a("strong"),MPr=o("blenderbot-small"),EPr=o(" \u2014 "),kK=a("a"),CPr=o("FlaxBlenderbotSmallModel"),wPr=o(" (BlenderbotSmall model)"),APr=l(),C5=a("li"),vEe=a("strong"),LPr=o("clip"),yPr=o(" \u2014 "),SK=a("a"),xPr=o("FlaxCLIPModel"),$Pr=o(" (CLIP model)"),kPr=l(),w5=a("li"),FEe=a("strong"),SPr=o("distilbert"),RPr=o(" \u2014 "),RK=a("a"),PPr=o("FlaxDistilBertModel"),BPr=o(" (DistilBERT model)"),IPr=l(),A5=a("li"),TEe=a("strong"),NPr=o("electra"),qPr=o(" \u2014 "),PK=a("a"),jPr=o("FlaxElectraModel"),DPr=o(" (ELECTRA model)"),GPr=l(),L5=a("li"),MEe=a("strong"),OPr=o("gpt2"),VPr=o(" \u2014 "),BK=a("a"),XPr=o("FlaxGPT2Model"),zPr=o(" (OpenAI GPT-2 model)"),WPr=l(),y5=a("li"),EEe=a("strong"),QPr=o("gpt_neo"),HPr=o(" \u2014 "),IK=a("a"),UPr=o("FlaxGPTNeoModel"),JPr=o(" (GPT Neo model)"),YPr=l(),x5=a("li"),CEe=a("strong"),KPr=o("gptj"),ZPr=o(" \u2014 "),NK=a("a"),eBr=o("FlaxGPTJModel"),oBr=o(" (GPT-J model)"),rBr=l(),$5=a("li"),wEe=a("strong"),tBr=o("longt5"),aBr=o(" \u2014 "),qK=a("a"),nBr=o("FlaxLongT5Model"),sBr=o(" (LongT5 model)"),lBr=l(),k5=a("li"),AEe=a("strong"),iBr=o("marian"),dBr=o(" \u2014 "),jK=a("a"),cBr=o("FlaxMarianModel"),fBr=o(" (Marian model)"),mBr=l(),S5=a("li"),LEe=a("strong"),gBr=o("mbart"),hBr=o(" \u2014 "),DK=a("a"),pBr=o("FlaxMBartModel"),uBr=o(" (mBART model)"),_Br=l(),R5=a("li"),yEe=a("strong"),bBr=o("mt5"),vBr=o(" \u2014 "),GK=a("a"),FBr=o("FlaxMT5Model"),TBr=o(" (MT5 model)"),MBr=l(),P5=a("li"),xEe=a("strong"),EBr=o("opt"),CBr=o(" \u2014 "),OK=a("a"),wBr=o("FlaxOPTModel"),ABr=o(" (OPT model)"),LBr=l(),B5=a("li"),$Ee=a("strong"),yBr=o("pegasus"),xBr=o(" \u2014 "),VK=a("a"),$Br=o("FlaxPegasusModel"),kBr=o(" (Pegasus model)"),SBr=l(),I5=a("li"),kEe=a("strong"),RBr=o("roberta"),PBr=o(" \u2014 "),XK=a("a"),BBr=o("FlaxRobertaModel"),IBr=o(" (RoBERTa model)"),NBr=l(),N5=a("li"),SEe=a("strong"),qBr=o("roformer"),jBr=o(" \u2014 "),zK=a("a"),DBr=o("FlaxRoFormerModel"),GBr=o(" (RoFormer model)"),OBr=l(),q5=a("li"),REe=a("strong"),VBr=o("t5"),XBr=o(" \u2014 "),WK=a("a"),zBr=o("FlaxT5Model"),WBr=o(" (T5 model)"),QBr=l(),j5=a("li"),PEe=a("strong"),HBr=o("vision-text-dual-encoder"),UBr=o(" \u2014 "),QK=a("a"),JBr=o("FlaxVisionTextDualEncoderModel"),YBr=o(" (VisionTextDualEncoder model)"),KBr=l(),D5=a("li"),BEe=a("strong"),ZBr=o("vit"),eIr=o(" \u2014 "),HK=a("a"),oIr=o("FlaxViTModel"),rIr=o(" (ViT model)"),tIr=l(),G5=a("li"),IEe=a("strong"),aIr=o("wav2vec2"),nIr=o(" \u2014 "),UK=a("a"),sIr=o("FlaxWav2Vec2Model"),lIr=o(" (Wav2Vec2 model)"),iIr=l(),O5=a("li"),NEe=a("strong"),dIr=o("xglm"),cIr=o(" \u2014 "),JK=a("a"),fIr=o("FlaxXGLMModel"),mIr=o(" (XGLM model)"),gIr=l(),V5=a("li"),qEe=a("strong"),hIr=o("xlm-roberta"),pIr=o(" \u2014 "),YK=a("a"),uIr=o("FlaxXLMRobertaModel"),_Ir=o(" (XLM-RoBERTa model)"),bIr=l(),F(X5.$$.fragment),KOe=l(),zc=a("h2"),z5=a("a"),jEe=a("span"),F(kx.$$.fragment),vIr=l(),DEe=a("span"),FIr=o("FlaxAutoModelForCausalLM"),ZOe=l(),hr=a("div"),F(Sx.$$.fragment),TIr=l(),Wc=a("p"),MIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),KK=a("a"),EIr=o("from_pretrained()"),CIr=o(" class method or the "),ZK=a("a"),wIr=o("from_config()"),AIr=o(` class
method.`),LIr=l(),Rx=a("p"),yIr=o("This class cannot be instantiated directly using "),GEe=a("code"),xIr=o("__init__()"),$Ir=o(" (throws an error)."),kIr=l(),zt=a("div"),F(Px.$$.fragment),SIr=l(),OEe=a("p"),RIr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),PIr=l(),Qc=a("p"),BIr=o(`Note:
Loading a model from its configuration file does `),VEe=a("strong"),IIr=o("not"),NIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),qIr=o("from_pretrained()"),jIr=o(" to load the model weights."),DIr=l(),F(W5.$$.fragment),GIr=l(),Or=a("div"),F(Bx.$$.fragment),OIr=l(),XEe=a("p"),VIr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),XIr=l(),Fn=a("p"),zIr=o("The model class to instantiate is selected based on the "),zEe=a("code"),WIr=o("model_type"),QIr=o(` property of the config object (either
passed as an argument or loaded from `),WEe=a("code"),HIr=o("pretrained_model_name_or_path"),UIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QEe=a("code"),JIr=o("pretrained_model_name_or_path"),YIr=o(":"),KIr=l(),xe=a("ul"),Q5=a("li"),HEe=a("strong"),ZIr=o("bart"),eNr=o(" \u2014 "),oZ=a("a"),oNr=o("FlaxBartForCausalLM"),rNr=o(" (BART model)"),tNr=l(),H5=a("li"),UEe=a("strong"),aNr=o("bert"),nNr=o(" \u2014 "),rZ=a("a"),sNr=o("FlaxBertForCausalLM"),lNr=o(" (BERT model)"),iNr=l(),U5=a("li"),JEe=a("strong"),dNr=o("big_bird"),cNr=o(" \u2014 "),tZ=a("a"),fNr=o("FlaxBigBirdForCausalLM"),mNr=o(" (BigBird model)"),gNr=l(),J5=a("li"),YEe=a("strong"),hNr=o("electra"),pNr=o(" \u2014 "),aZ=a("a"),uNr=o("FlaxElectraForCausalLM"),_Nr=o(" (ELECTRA model)"),bNr=l(),Y5=a("li"),KEe=a("strong"),vNr=o("gpt2"),FNr=o(" \u2014 "),nZ=a("a"),TNr=o("FlaxGPT2LMHeadModel"),MNr=o(" (OpenAI GPT-2 model)"),ENr=l(),K5=a("li"),ZEe=a("strong"),CNr=o("gpt_neo"),wNr=o(" \u2014 "),sZ=a("a"),ANr=o("FlaxGPTNeoForCausalLM"),LNr=o(" (GPT Neo model)"),yNr=l(),Z5=a("li"),eCe=a("strong"),xNr=o("gptj"),$Nr=o(" \u2014 "),lZ=a("a"),kNr=o("FlaxGPTJForCausalLM"),SNr=o(" (GPT-J model)"),RNr=l(),e0=a("li"),oCe=a("strong"),PNr=o("opt"),BNr=o(" \u2014 "),iZ=a("a"),INr=o("FlaxOPTForCausalLM"),NNr=o(" (OPT model)"),qNr=l(),o0=a("li"),rCe=a("strong"),jNr=o("roberta"),DNr=o(" \u2014 "),dZ=a("a"),GNr=o("FlaxRobertaForCausalLM"),ONr=o(" (RoBERTa model)"),VNr=l(),r0=a("li"),tCe=a("strong"),XNr=o("xglm"),zNr=o(" \u2014 "),cZ=a("a"),WNr=o("FlaxXGLMForCausalLM"),QNr=o(" (XGLM model)"),HNr=l(),F(t0.$$.fragment),eVe=l(),Hc=a("h2"),a0=a("a"),aCe=a("span"),F(Ix.$$.fragment),UNr=l(),nCe=a("span"),JNr=o("FlaxAutoModelForPreTraining"),oVe=l(),pr=a("div"),F(Nx.$$.fragment),YNr=l(),Uc=a("p"),KNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fZ=a("a"),ZNr=o("from_pretrained()"),eqr=o(" class method or the "),mZ=a("a"),oqr=o("from_config()"),rqr=o(` class
method.`),tqr=l(),qx=a("p"),aqr=o("This class cannot be instantiated directly using "),sCe=a("code"),nqr=o("__init__()"),sqr=o(" (throws an error)."),lqr=l(),Wt=a("div"),F(jx.$$.fragment),iqr=l(),lCe=a("p"),dqr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cqr=l(),Jc=a("p"),fqr=o(`Note:
Loading a model from its configuration file does `),iCe=a("strong"),mqr=o("not"),gqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=a("a"),hqr=o("from_pretrained()"),pqr=o(" to load the model weights."),uqr=l(),F(n0.$$.fragment),_qr=l(),Vr=a("div"),F(Dx.$$.fragment),bqr=l(),dCe=a("p"),vqr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Fqr=l(),Tn=a("p"),Tqr=o("The model class to instantiate is selected based on the "),cCe=a("code"),Mqr=o("model_type"),Eqr=o(` property of the config object (either
passed as an argument or loaded from `),fCe=a("code"),Cqr=o("pretrained_model_name_or_path"),wqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=a("code"),Aqr=o("pretrained_model_name_or_path"),Lqr=o(":"),yqr=l(),Ee=a("ul"),s0=a("li"),gCe=a("strong"),xqr=o("albert"),$qr=o(" \u2014 "),hZ=a("a"),kqr=o("FlaxAlbertForPreTraining"),Sqr=o(" (ALBERT model)"),Rqr=l(),l0=a("li"),hCe=a("strong"),Pqr=o("bart"),Bqr=o(" \u2014 "),pZ=a("a"),Iqr=o("FlaxBartForConditionalGeneration"),Nqr=o(" (BART model)"),qqr=l(),i0=a("li"),pCe=a("strong"),jqr=o("bert"),Dqr=o(" \u2014 "),uZ=a("a"),Gqr=o("FlaxBertForPreTraining"),Oqr=o(" (BERT model)"),Vqr=l(),d0=a("li"),uCe=a("strong"),Xqr=o("big_bird"),zqr=o(" \u2014 "),_Z=a("a"),Wqr=o("FlaxBigBirdForPreTraining"),Qqr=o(" (BigBird model)"),Hqr=l(),c0=a("li"),_Ce=a("strong"),Uqr=o("electra"),Jqr=o(" \u2014 "),bZ=a("a"),Yqr=o("FlaxElectraForPreTraining"),Kqr=o(" (ELECTRA model)"),Zqr=l(),f0=a("li"),bCe=a("strong"),ejr=o("longt5"),ojr=o(" \u2014 "),vZ=a("a"),rjr=o("FlaxLongT5ForConditionalGeneration"),tjr=o(" (LongT5 model)"),ajr=l(),m0=a("li"),vCe=a("strong"),njr=o("mbart"),sjr=o(" \u2014 "),FZ=a("a"),ljr=o("FlaxMBartForConditionalGeneration"),ijr=o(" (mBART model)"),djr=l(),g0=a("li"),FCe=a("strong"),cjr=o("mt5"),fjr=o(" \u2014 "),TZ=a("a"),mjr=o("FlaxMT5ForConditionalGeneration"),gjr=o(" (MT5 model)"),hjr=l(),h0=a("li"),TCe=a("strong"),pjr=o("roberta"),ujr=o(" \u2014 "),MZ=a("a"),_jr=o("FlaxRobertaForMaskedLM"),bjr=o(" (RoBERTa model)"),vjr=l(),p0=a("li"),MCe=a("strong"),Fjr=o("roformer"),Tjr=o(" \u2014 "),EZ=a("a"),Mjr=o("FlaxRoFormerForMaskedLM"),Ejr=o(" (RoFormer model)"),Cjr=l(),u0=a("li"),ECe=a("strong"),wjr=o("t5"),Ajr=o(" \u2014 "),CZ=a("a"),Ljr=o("FlaxT5ForConditionalGeneration"),yjr=o(" (T5 model)"),xjr=l(),_0=a("li"),CCe=a("strong"),$jr=o("wav2vec2"),kjr=o(" \u2014 "),wZ=a("a"),Sjr=o("FlaxWav2Vec2ForPreTraining"),Rjr=o(" (Wav2Vec2 model)"),Pjr=l(),b0=a("li"),wCe=a("strong"),Bjr=o("xlm-roberta"),Ijr=o(" \u2014 "),AZ=a("a"),Njr=o("FlaxXLMRobertaForMaskedLM"),qjr=o(" (XLM-RoBERTa model)"),jjr=l(),F(v0.$$.fragment),rVe=l(),Yc=a("h2"),F0=a("a"),ACe=a("span"),F(Gx.$$.fragment),Djr=l(),LCe=a("span"),Gjr=o("FlaxAutoModelForMaskedLM"),tVe=l(),ur=a("div"),F(Ox.$$.fragment),Ojr=l(),Kc=a("p"),Vjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LZ=a("a"),Xjr=o("from_pretrained()"),zjr=o(" class method or the "),yZ=a("a"),Wjr=o("from_config()"),Qjr=o(` class
method.`),Hjr=l(),Vx=a("p"),Ujr=o("This class cannot be instantiated directly using "),yCe=a("code"),Jjr=o("__init__()"),Yjr=o(" (throws an error)."),Kjr=l(),Qt=a("div"),F(Xx.$$.fragment),Zjr=l(),xCe=a("p"),eDr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oDr=l(),Zc=a("p"),rDr=o(`Note:
Loading a model from its configuration file does `),$Ce=a("strong"),tDr=o("not"),aDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xZ=a("a"),nDr=o("from_pretrained()"),sDr=o(" to load the model weights."),lDr=l(),F(T0.$$.fragment),iDr=l(),Xr=a("div"),F(zx.$$.fragment),dDr=l(),kCe=a("p"),cDr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),fDr=l(),Mn=a("p"),mDr=o("The model class to instantiate is selected based on the "),SCe=a("code"),gDr=o("model_type"),hDr=o(` property of the config object (either
passed as an argument or loaded from `),RCe=a("code"),pDr=o("pretrained_model_name_or_path"),uDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=a("code"),_Dr=o("pretrained_model_name_or_path"),bDr=o(":"),vDr=l(),$e=a("ul"),M0=a("li"),BCe=a("strong"),FDr=o("albert"),TDr=o(" \u2014 "),$Z=a("a"),MDr=o("FlaxAlbertForMaskedLM"),EDr=o(" (ALBERT model)"),CDr=l(),E0=a("li"),ICe=a("strong"),wDr=o("bart"),ADr=o(" \u2014 "),kZ=a("a"),LDr=o("FlaxBartForConditionalGeneration"),yDr=o(" (BART model)"),xDr=l(),C0=a("li"),NCe=a("strong"),$Dr=o("bert"),kDr=o(" \u2014 "),SZ=a("a"),SDr=o("FlaxBertForMaskedLM"),RDr=o(" (BERT model)"),PDr=l(),w0=a("li"),qCe=a("strong"),BDr=o("big_bird"),IDr=o(" \u2014 "),RZ=a("a"),NDr=o("FlaxBigBirdForMaskedLM"),qDr=o(" (BigBird model)"),jDr=l(),A0=a("li"),jCe=a("strong"),DDr=o("distilbert"),GDr=o(" \u2014 "),PZ=a("a"),ODr=o("FlaxDistilBertForMaskedLM"),VDr=o(" (DistilBERT model)"),XDr=l(),L0=a("li"),DCe=a("strong"),zDr=o("electra"),WDr=o(" \u2014 "),BZ=a("a"),QDr=o("FlaxElectraForMaskedLM"),HDr=o(" (ELECTRA model)"),UDr=l(),y0=a("li"),GCe=a("strong"),JDr=o("mbart"),YDr=o(" \u2014 "),IZ=a("a"),KDr=o("FlaxMBartForConditionalGeneration"),ZDr=o(" (mBART model)"),eGr=l(),x0=a("li"),OCe=a("strong"),oGr=o("roberta"),rGr=o(" \u2014 "),NZ=a("a"),tGr=o("FlaxRobertaForMaskedLM"),aGr=o(" (RoBERTa model)"),nGr=l(),$0=a("li"),VCe=a("strong"),sGr=o("roformer"),lGr=o(" \u2014 "),qZ=a("a"),iGr=o("FlaxRoFormerForMaskedLM"),dGr=o(" (RoFormer model)"),cGr=l(),k0=a("li"),XCe=a("strong"),fGr=o("xlm-roberta"),mGr=o(" \u2014 "),jZ=a("a"),gGr=o("FlaxXLMRobertaForMaskedLM"),hGr=o(" (XLM-RoBERTa model)"),pGr=l(),F(S0.$$.fragment),aVe=l(),ef=a("h2"),R0=a("a"),zCe=a("span"),F(Wx.$$.fragment),uGr=l(),WCe=a("span"),_Gr=o("FlaxAutoModelForSeq2SeqLM"),nVe=l(),_r=a("div"),F(Qx.$$.fragment),bGr=l(),of=a("p"),vGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),DZ=a("a"),FGr=o("from_pretrained()"),TGr=o(" class method or the "),GZ=a("a"),MGr=o("from_config()"),EGr=o(` class
method.`),CGr=l(),Hx=a("p"),wGr=o("This class cannot be instantiated directly using "),QCe=a("code"),AGr=o("__init__()"),LGr=o(" (throws an error)."),yGr=l(),Ht=a("div"),F(Ux.$$.fragment),xGr=l(),HCe=a("p"),$Gr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kGr=l(),rf=a("p"),SGr=o(`Note:
Loading a model from its configuration file does `),UCe=a("strong"),RGr=o("not"),PGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),BGr=o("from_pretrained()"),IGr=o(" to load the model weights."),NGr=l(),F(P0.$$.fragment),qGr=l(),zr=a("div"),F(Jx.$$.fragment),jGr=l(),JCe=a("p"),DGr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),GGr=l(),En=a("p"),OGr=o("The model class to instantiate is selected based on the "),YCe=a("code"),VGr=o("model_type"),XGr=o(` property of the config object (either
passed as an argument or loaded from `),KCe=a("code"),zGr=o("pretrained_model_name_or_path"),WGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=a("code"),QGr=o("pretrained_model_name_or_path"),HGr=o(":"),UGr=l(),ke=a("ul"),B0=a("li"),e5e=a("strong"),JGr=o("bart"),YGr=o(" \u2014 "),VZ=a("a"),KGr=o("FlaxBartForConditionalGeneration"),ZGr=o(" (BART model)"),eOr=l(),I0=a("li"),o5e=a("strong"),oOr=o("blenderbot"),rOr=o(" \u2014 "),XZ=a("a"),tOr=o("FlaxBlenderbotForConditionalGeneration"),aOr=o(" (Blenderbot model)"),nOr=l(),N0=a("li"),r5e=a("strong"),sOr=o("blenderbot-small"),lOr=o(" \u2014 "),zZ=a("a"),iOr=o("FlaxBlenderbotSmallForConditionalGeneration"),dOr=o(" (BlenderbotSmall model)"),cOr=l(),q0=a("li"),t5e=a("strong"),fOr=o("encoder-decoder"),mOr=o(" \u2014 "),WZ=a("a"),gOr=o("FlaxEncoderDecoderModel"),hOr=o(" (Encoder decoder model)"),pOr=l(),j0=a("li"),a5e=a("strong"),uOr=o("longt5"),_Or=o(" \u2014 "),QZ=a("a"),bOr=o("FlaxLongT5ForConditionalGeneration"),vOr=o(" (LongT5 model)"),FOr=l(),D0=a("li"),n5e=a("strong"),TOr=o("marian"),MOr=o(" \u2014 "),HZ=a("a"),EOr=o("FlaxMarianMTModel"),COr=o(" (Marian model)"),wOr=l(),G0=a("li"),s5e=a("strong"),AOr=o("mbart"),LOr=o(" \u2014 "),UZ=a("a"),yOr=o("FlaxMBartForConditionalGeneration"),xOr=o(" (mBART model)"),$Or=l(),O0=a("li"),l5e=a("strong"),kOr=o("mt5"),SOr=o(" \u2014 "),JZ=a("a"),ROr=o("FlaxMT5ForConditionalGeneration"),POr=o(" (MT5 model)"),BOr=l(),V0=a("li"),i5e=a("strong"),IOr=o("pegasus"),NOr=o(" \u2014 "),YZ=a("a"),qOr=o("FlaxPegasusForConditionalGeneration"),jOr=o(" (Pegasus model)"),DOr=l(),X0=a("li"),d5e=a("strong"),GOr=o("t5"),OOr=o(" \u2014 "),KZ=a("a"),VOr=o("FlaxT5ForConditionalGeneration"),XOr=o(" (T5 model)"),zOr=l(),F(z0.$$.fragment),sVe=l(),tf=a("h2"),W0=a("a"),c5e=a("span"),F(Yx.$$.fragment),WOr=l(),f5e=a("span"),QOr=o("FlaxAutoModelForSequenceClassification"),lVe=l(),br=a("div"),F(Kx.$$.fragment),HOr=l(),af=a("p"),UOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZZ=a("a"),JOr=o("from_pretrained()"),YOr=o(" class method or the "),eee=a("a"),KOr=o("from_config()"),ZOr=o(` class
method.`),eVr=l(),Zx=a("p"),oVr=o("This class cannot be instantiated directly using "),m5e=a("code"),rVr=o("__init__()"),tVr=o(" (throws an error)."),aVr=l(),Ut=a("div"),F(e$.$$.fragment),nVr=l(),g5e=a("p"),sVr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lVr=l(),nf=a("p"),iVr=o(`Note:
Loading a model from its configuration file does `),h5e=a("strong"),dVr=o("not"),cVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=a("a"),fVr=o("from_pretrained()"),mVr=o(" to load the model weights."),gVr=l(),F(Q0.$$.fragment),hVr=l(),Wr=a("div"),F(o$.$$.fragment),pVr=l(),p5e=a("p"),uVr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_Vr=l(),Cn=a("p"),bVr=o("The model class to instantiate is selected based on the "),u5e=a("code"),vVr=o("model_type"),FVr=o(` property of the config object (either
passed as an argument or loaded from `),_5e=a("code"),TVr=o("pretrained_model_name_or_path"),MVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b5e=a("code"),EVr=o("pretrained_model_name_or_path"),CVr=o(":"),wVr=l(),Se=a("ul"),H0=a("li"),v5e=a("strong"),AVr=o("albert"),LVr=o(" \u2014 "),ree=a("a"),yVr=o("FlaxAlbertForSequenceClassification"),xVr=o(" (ALBERT model)"),$Vr=l(),U0=a("li"),F5e=a("strong"),kVr=o("bart"),SVr=o(" \u2014 "),tee=a("a"),RVr=o("FlaxBartForSequenceClassification"),PVr=o(" (BART model)"),BVr=l(),J0=a("li"),T5e=a("strong"),IVr=o("bert"),NVr=o(" \u2014 "),aee=a("a"),qVr=o("FlaxBertForSequenceClassification"),jVr=o(" (BERT model)"),DVr=l(),Y0=a("li"),M5e=a("strong"),GVr=o("big_bird"),OVr=o(" \u2014 "),nee=a("a"),VVr=o("FlaxBigBirdForSequenceClassification"),XVr=o(" (BigBird model)"),zVr=l(),K0=a("li"),E5e=a("strong"),WVr=o("distilbert"),QVr=o(" \u2014 "),see=a("a"),HVr=o("FlaxDistilBertForSequenceClassification"),UVr=o(" (DistilBERT model)"),JVr=l(),Z0=a("li"),C5e=a("strong"),YVr=o("electra"),KVr=o(" \u2014 "),lee=a("a"),ZVr=o("FlaxElectraForSequenceClassification"),eXr=o(" (ELECTRA model)"),oXr=l(),ew=a("li"),w5e=a("strong"),rXr=o("mbart"),tXr=o(" \u2014 "),iee=a("a"),aXr=o("FlaxMBartForSequenceClassification"),nXr=o(" (mBART model)"),sXr=l(),ow=a("li"),A5e=a("strong"),lXr=o("roberta"),iXr=o(" \u2014 "),dee=a("a"),dXr=o("FlaxRobertaForSequenceClassification"),cXr=o(" (RoBERTa model)"),fXr=l(),rw=a("li"),L5e=a("strong"),mXr=o("roformer"),gXr=o(" \u2014 "),cee=a("a"),hXr=o("FlaxRoFormerForSequenceClassification"),pXr=o(" (RoFormer model)"),uXr=l(),tw=a("li"),y5e=a("strong"),_Xr=o("xlm-roberta"),bXr=o(" \u2014 "),fee=a("a"),vXr=o("FlaxXLMRobertaForSequenceClassification"),FXr=o(" (XLM-RoBERTa model)"),TXr=l(),F(aw.$$.fragment),iVe=l(),sf=a("h2"),nw=a("a"),x5e=a("span"),F(r$.$$.fragment),MXr=l(),$5e=a("span"),EXr=o("FlaxAutoModelForQuestionAnswering"),dVe=l(),vr=a("div"),F(t$.$$.fragment),CXr=l(),lf=a("p"),wXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mee=a("a"),AXr=o("from_pretrained()"),LXr=o(" class method or the "),gee=a("a"),yXr=o("from_config()"),xXr=o(` class
method.`),$Xr=l(),a$=a("p"),kXr=o("This class cannot be instantiated directly using "),k5e=a("code"),SXr=o("__init__()"),RXr=o(" (throws an error)."),PXr=l(),Jt=a("div"),F(n$.$$.fragment),BXr=l(),S5e=a("p"),IXr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NXr=l(),df=a("p"),qXr=o(`Note:
Loading a model from its configuration file does `),R5e=a("strong"),jXr=o("not"),DXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hee=a("a"),GXr=o("from_pretrained()"),OXr=o(" to load the model weights."),VXr=l(),F(sw.$$.fragment),XXr=l(),Qr=a("div"),F(s$.$$.fragment),zXr=l(),P5e=a("p"),WXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),QXr=l(),wn=a("p"),HXr=o("The model class to instantiate is selected based on the "),B5e=a("code"),UXr=o("model_type"),JXr=o(` property of the config object (either
passed as an argument or loaded from `),I5e=a("code"),YXr=o("pretrained_model_name_or_path"),KXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=a("code"),ZXr=o("pretrained_model_name_or_path"),ezr=o(":"),ozr=l(),Re=a("ul"),lw=a("li"),q5e=a("strong"),rzr=o("albert"),tzr=o(" \u2014 "),pee=a("a"),azr=o("FlaxAlbertForQuestionAnswering"),nzr=o(" (ALBERT model)"),szr=l(),iw=a("li"),j5e=a("strong"),lzr=o("bart"),izr=o(" \u2014 "),uee=a("a"),dzr=o("FlaxBartForQuestionAnswering"),czr=o(" (BART model)"),fzr=l(),dw=a("li"),D5e=a("strong"),mzr=o("bert"),gzr=o(" \u2014 "),_ee=a("a"),hzr=o("FlaxBertForQuestionAnswering"),pzr=o(" (BERT model)"),uzr=l(),cw=a("li"),G5e=a("strong"),_zr=o("big_bird"),bzr=o(" \u2014 "),bee=a("a"),vzr=o("FlaxBigBirdForQuestionAnswering"),Fzr=o(" (BigBird model)"),Tzr=l(),fw=a("li"),O5e=a("strong"),Mzr=o("distilbert"),Ezr=o(" \u2014 "),vee=a("a"),Czr=o("FlaxDistilBertForQuestionAnswering"),wzr=o(" (DistilBERT model)"),Azr=l(),mw=a("li"),V5e=a("strong"),Lzr=o("electra"),yzr=o(" \u2014 "),Fee=a("a"),xzr=o("FlaxElectraForQuestionAnswering"),$zr=o(" (ELECTRA model)"),kzr=l(),gw=a("li"),X5e=a("strong"),Szr=o("mbart"),Rzr=o(" \u2014 "),Tee=a("a"),Pzr=o("FlaxMBartForQuestionAnswering"),Bzr=o(" (mBART model)"),Izr=l(),hw=a("li"),z5e=a("strong"),Nzr=o("roberta"),qzr=o(" \u2014 "),Mee=a("a"),jzr=o("FlaxRobertaForQuestionAnswering"),Dzr=o(" (RoBERTa model)"),Gzr=l(),pw=a("li"),W5e=a("strong"),Ozr=o("roformer"),Vzr=o(" \u2014 "),Eee=a("a"),Xzr=o("FlaxRoFormerForQuestionAnswering"),zzr=o(" (RoFormer model)"),Wzr=l(),uw=a("li"),Q5e=a("strong"),Qzr=o("xlm-roberta"),Hzr=o(" \u2014 "),Cee=a("a"),Uzr=o("FlaxXLMRobertaForQuestionAnswering"),Jzr=o(" (XLM-RoBERTa model)"),Yzr=l(),F(_w.$$.fragment),cVe=l(),cf=a("h2"),bw=a("a"),H5e=a("span"),F(l$.$$.fragment),Kzr=l(),U5e=a("span"),Zzr=o("FlaxAutoModelForTokenClassification"),fVe=l(),Fr=a("div"),F(i$.$$.fragment),eWr=l(),ff=a("p"),oWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wee=a("a"),rWr=o("from_pretrained()"),tWr=o(" class method or the "),Aee=a("a"),aWr=o("from_config()"),nWr=o(` class
method.`),sWr=l(),d$=a("p"),lWr=o("This class cannot be instantiated directly using "),J5e=a("code"),iWr=o("__init__()"),dWr=o(" (throws an error)."),cWr=l(),Yt=a("div"),F(c$.$$.fragment),fWr=l(),Y5e=a("p"),mWr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gWr=l(),mf=a("p"),hWr=o(`Note:
Loading a model from its configuration file does `),K5e=a("strong"),pWr=o("not"),uWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=a("a"),_Wr=o("from_pretrained()"),bWr=o(" to load the model weights."),vWr=l(),F(vw.$$.fragment),FWr=l(),Hr=a("div"),F(f$.$$.fragment),TWr=l(),Z5e=a("p"),MWr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),EWr=l(),An=a("p"),CWr=o("The model class to instantiate is selected based on the "),e0e=a("code"),wWr=o("model_type"),AWr=o(` property of the config object (either
passed as an argument or loaded from `),o0e=a("code"),LWr=o("pretrained_model_name_or_path"),yWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r0e=a("code"),xWr=o("pretrained_model_name_or_path"),$Wr=o(":"),kWr=l(),Ve=a("ul"),Fw=a("li"),t0e=a("strong"),SWr=o("albert"),RWr=o(" \u2014 "),yee=a("a"),PWr=o("FlaxAlbertForTokenClassification"),BWr=o(" (ALBERT model)"),IWr=l(),Tw=a("li"),a0e=a("strong"),NWr=o("bert"),qWr=o(" \u2014 "),xee=a("a"),jWr=o("FlaxBertForTokenClassification"),DWr=o(" (BERT model)"),GWr=l(),Mw=a("li"),n0e=a("strong"),OWr=o("big_bird"),VWr=o(" \u2014 "),$ee=a("a"),XWr=o("FlaxBigBirdForTokenClassification"),zWr=o(" (BigBird model)"),WWr=l(),Ew=a("li"),s0e=a("strong"),QWr=o("distilbert"),HWr=o(" \u2014 "),kee=a("a"),UWr=o("FlaxDistilBertForTokenClassification"),JWr=o(" (DistilBERT model)"),YWr=l(),Cw=a("li"),l0e=a("strong"),KWr=o("electra"),ZWr=o(" \u2014 "),See=a("a"),eQr=o("FlaxElectraForTokenClassification"),oQr=o(" (ELECTRA model)"),rQr=l(),ww=a("li"),i0e=a("strong"),tQr=o("roberta"),aQr=o(" \u2014 "),Ree=a("a"),nQr=o("FlaxRobertaForTokenClassification"),sQr=o(" (RoBERTa model)"),lQr=l(),Aw=a("li"),d0e=a("strong"),iQr=o("roformer"),dQr=o(" \u2014 "),Pee=a("a"),cQr=o("FlaxRoFormerForTokenClassification"),fQr=o(" (RoFormer model)"),mQr=l(),Lw=a("li"),c0e=a("strong"),gQr=o("xlm-roberta"),hQr=o(" \u2014 "),Bee=a("a"),pQr=o("FlaxXLMRobertaForTokenClassification"),uQr=o(" (XLM-RoBERTa model)"),_Qr=l(),F(yw.$$.fragment),mVe=l(),gf=a("h2"),xw=a("a"),f0e=a("span"),F(m$.$$.fragment),bQr=l(),m0e=a("span"),vQr=o("FlaxAutoModelForMultipleChoice"),gVe=l(),Tr=a("div"),F(g$.$$.fragment),FQr=l(),hf=a("p"),TQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Iee=a("a"),MQr=o("from_pretrained()"),EQr=o(" class method or the "),Nee=a("a"),CQr=o("from_config()"),wQr=o(` class
method.`),AQr=l(),h$=a("p"),LQr=o("This class cannot be instantiated directly using "),g0e=a("code"),yQr=o("__init__()"),xQr=o(" (throws an error)."),$Qr=l(),Kt=a("div"),F(p$.$$.fragment),kQr=l(),h0e=a("p"),SQr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),RQr=l(),pf=a("p"),PQr=o(`Note:
Loading a model from its configuration file does `),p0e=a("strong"),BQr=o("not"),IQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=a("a"),NQr=o("from_pretrained()"),qQr=o(" to load the model weights."),jQr=l(),F($w.$$.fragment),DQr=l(),Ur=a("div"),F(u$.$$.fragment),GQr=l(),u0e=a("p"),OQr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),VQr=l(),Ln=a("p"),XQr=o("The model class to instantiate is selected based on the "),_0e=a("code"),zQr=o("model_type"),WQr=o(` property of the config object (either
passed as an argument or loaded from `),b0e=a("code"),QQr=o("pretrained_model_name_or_path"),HQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=a("code"),UQr=o("pretrained_model_name_or_path"),JQr=o(":"),YQr=l(),Xe=a("ul"),kw=a("li"),F0e=a("strong"),KQr=o("albert"),ZQr=o(" \u2014 "),jee=a("a"),eHr=o("FlaxAlbertForMultipleChoice"),oHr=o(" (ALBERT model)"),rHr=l(),Sw=a("li"),T0e=a("strong"),tHr=o("bert"),aHr=o(" \u2014 "),Dee=a("a"),nHr=o("FlaxBertForMultipleChoice"),sHr=o(" (BERT model)"),lHr=l(),Rw=a("li"),M0e=a("strong"),iHr=o("big_bird"),dHr=o(" \u2014 "),Gee=a("a"),cHr=o("FlaxBigBirdForMultipleChoice"),fHr=o(" (BigBird model)"),mHr=l(),Pw=a("li"),E0e=a("strong"),gHr=o("distilbert"),hHr=o(" \u2014 "),Oee=a("a"),pHr=o("FlaxDistilBertForMultipleChoice"),uHr=o(" (DistilBERT model)"),_Hr=l(),Bw=a("li"),C0e=a("strong"),bHr=o("electra"),vHr=o(" \u2014 "),Vee=a("a"),FHr=o("FlaxElectraForMultipleChoice"),THr=o(" (ELECTRA model)"),MHr=l(),Iw=a("li"),w0e=a("strong"),EHr=o("roberta"),CHr=o(" \u2014 "),Xee=a("a"),wHr=o("FlaxRobertaForMultipleChoice"),AHr=o(" (RoBERTa model)"),LHr=l(),Nw=a("li"),A0e=a("strong"),yHr=o("roformer"),xHr=o(" \u2014 "),zee=a("a"),$Hr=o("FlaxRoFormerForMultipleChoice"),kHr=o(" (RoFormer model)"),SHr=l(),qw=a("li"),L0e=a("strong"),RHr=o("xlm-roberta"),PHr=o(" \u2014 "),Wee=a("a"),BHr=o("FlaxXLMRobertaForMultipleChoice"),IHr=o(" (XLM-RoBERTa model)"),NHr=l(),F(jw.$$.fragment),hVe=l(),uf=a("h2"),Dw=a("a"),y0e=a("span"),F(_$.$$.fragment),qHr=l(),x0e=a("span"),jHr=o("FlaxAutoModelForNextSentencePrediction"),pVe=l(),Mr=a("div"),F(b$.$$.fragment),DHr=l(),_f=a("p"),GHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Qee=a("a"),OHr=o("from_pretrained()"),VHr=o(" class method or the "),Hee=a("a"),XHr=o("from_config()"),zHr=o(` class
method.`),WHr=l(),v$=a("p"),QHr=o("This class cannot be instantiated directly using "),$0e=a("code"),HHr=o("__init__()"),UHr=o(" (throws an error)."),JHr=l(),Zt=a("div"),F(F$.$$.fragment),YHr=l(),k0e=a("p"),KHr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ZHr=l(),bf=a("p"),eUr=o(`Note:
Loading a model from its configuration file does `),S0e=a("strong"),oUr=o("not"),rUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=a("a"),tUr=o("from_pretrained()"),aUr=o(" to load the model weights."),nUr=l(),F(Gw.$$.fragment),sUr=l(),Jr=a("div"),F(T$.$$.fragment),lUr=l(),R0e=a("p"),iUr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dUr=l(),yn=a("p"),cUr=o("The model class to instantiate is selected based on the "),P0e=a("code"),fUr=o("model_type"),mUr=o(` property of the config object (either
passed as an argument or loaded from `),B0e=a("code"),gUr=o("pretrained_model_name_or_path"),hUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I0e=a("code"),pUr=o("pretrained_model_name_or_path"),uUr=o(":"),_Ur=l(),N0e=a("ul"),Ow=a("li"),q0e=a("strong"),bUr=o("bert"),vUr=o(" \u2014 "),Jee=a("a"),FUr=o("FlaxBertForNextSentencePrediction"),TUr=o(" (BERT model)"),MUr=l(),F(Vw.$$.fragment),uVe=l(),vf=a("h2"),Xw=a("a"),j0e=a("span"),F(M$.$$.fragment),EUr=l(),D0e=a("span"),CUr=o("FlaxAutoModelForImageClassification"),_Ve=l(),Er=a("div"),F(E$.$$.fragment),wUr=l(),Ff=a("p"),AUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Yee=a("a"),LUr=o("from_pretrained()"),yUr=o(" class method or the "),Kee=a("a"),xUr=o("from_config()"),$Ur=o(` class
method.`),kUr=l(),C$=a("p"),SUr=o("This class cannot be instantiated directly using "),G0e=a("code"),RUr=o("__init__()"),PUr=o(" (throws an error)."),BUr=l(),ea=a("div"),F(w$.$$.fragment),IUr=l(),O0e=a("p"),NUr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qUr=l(),Tf=a("p"),jUr=o(`Note:
Loading a model from its configuration file does `),V0e=a("strong"),DUr=o("not"),GUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zee=a("a"),OUr=o("from_pretrained()"),VUr=o(" to load the model weights."),XUr=l(),F(zw.$$.fragment),zUr=l(),Yr=a("div"),F(A$.$$.fragment),WUr=l(),X0e=a("p"),QUr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),HUr=l(),xn=a("p"),UUr=o("The model class to instantiate is selected based on the "),z0e=a("code"),JUr=o("model_type"),YUr=o(` property of the config object (either
passed as an argument or loaded from `),W0e=a("code"),KUr=o("pretrained_model_name_or_path"),ZUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q0e=a("code"),eJr=o("pretrained_model_name_or_path"),oJr=o(":"),rJr=l(),L$=a("ul"),Ww=a("li"),H0e=a("strong"),tJr=o("beit"),aJr=o(" \u2014 "),eoe=a("a"),nJr=o("FlaxBeitForImageClassification"),sJr=o(" (BEiT model)"),lJr=l(),Qw=a("li"),U0e=a("strong"),iJr=o("vit"),dJr=o(" \u2014 "),ooe=a("a"),cJr=o("FlaxViTForImageClassification"),fJr=o(" (ViT model)"),mJr=l(),F(Hw.$$.fragment),bVe=l(),Mf=a("h2"),Uw=a("a"),J0e=a("span"),F(y$.$$.fragment),gJr=l(),Y0e=a("span"),hJr=o("FlaxAutoModelForVision2Seq"),vVe=l(),Cr=a("div"),F(x$.$$.fragment),pJr=l(),Ef=a("p"),uJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),roe=a("a"),_Jr=o("from_pretrained()"),bJr=o(" class method or the "),toe=a("a"),vJr=o("from_config()"),FJr=o(` class
method.`),TJr=l(),$$=a("p"),MJr=o("This class cannot be instantiated directly using "),K0e=a("code"),EJr=o("__init__()"),CJr=o(" (throws an error)."),wJr=l(),oa=a("div"),F(k$.$$.fragment),AJr=l(),Z0e=a("p"),LJr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yJr=l(),Cf=a("p"),xJr=o(`Note:
Loading a model from its configuration file does `),ewe=a("strong"),$Jr=o("not"),kJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aoe=a("a"),SJr=o("from_pretrained()"),RJr=o(" to load the model weights."),PJr=l(),F(Jw.$$.fragment),BJr=l(),Kr=a("div"),F(S$.$$.fragment),IJr=l(),owe=a("p"),NJr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qJr=l(),$n=a("p"),jJr=o("The model class to instantiate is selected based on the "),rwe=a("code"),DJr=o("model_type"),GJr=o(` property of the config object (either
passed as an argument or loaded from `),twe=a("code"),OJr=o("pretrained_model_name_or_path"),VJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),awe=a("code"),XJr=o("pretrained_model_name_or_path"),zJr=o(":"),WJr=l(),nwe=a("ul"),Yw=a("li"),swe=a("strong"),QJr=o("vision-encoder-decoder"),HJr=o(" \u2014 "),noe=a("a"),UJr=o("FlaxVisionEncoderDecoderModel"),JJr=o(" (Vision Encoder decoder model)"),YJr=l(),F(Kw.$$.fragment),this.h()},l(f){const _=cjt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var R$=s(p);m=n(R$,"A",{id:!0,class:!0,href:!0});var lwe=s(m);u=n(lwe,"SPAN",{});var iwe=s(u);T(d.$$.fragment,iwe),iwe.forEach(t),lwe.forEach(t),h=i(R$),Eo=n(R$,"SPAN",{});var dwe=s(Eo);Ti=r(dwe,"Auto Classes"),dwe.forEach(t),R$.forEach(t),yf=i(f),at=n(f,"P",{});var P$=s(at);Mi=r(P$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ei=n(P$,"CODE",{});var cwe=s(Ei);vL=r(cwe,"from_pretrained()"),cwe.forEach(t),xf=r(P$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),P$.forEach(t),Oe=i(f),We=n(f,"P",{});var kn=s(We);Ci=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var fwe=s(Sn);FL=r(fwe,"AutoConfig"),fwe.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var mwe=s(Pn);TL=r(mwe,"AutoModel"),mwe.forEach(t),wi=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var gwe=s(Bn);ML=r(gwe,"AutoTokenizer"),gwe.forEach(t),Ai=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),$f=i(f),T(ya.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var B$=s(Ae);Jk=r(B$,"will create a model that is an instance of "),Li=n(B$,"A",{href:!0});var hwe=s(Li);Yk=r(hwe,"BertModel"),hwe.forEach(t),Kk=r(B$,"."),B$.forEach(t),Co=i(f),xa=n(f,"P",{});var I$=s(xa);Zk=r(I$,"There is one class of "),kf=n(I$,"CODE",{});var pwe=s(kf);eS=r(pwe,"AutoModel"),pwe.forEach(t),$ze=r(I$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),I$.forEach(t),pGe=i(f),yi=n(f,"H2",{class:!0});var N$=s(yi);Sf=n(N$,"A",{id:!0,class:!0,href:!0});var uwe=s(Sf);ete=n(uwe,"SPAN",{});var _we=s(ete);T(EL.$$.fragment,_we),_we.forEach(t),uwe.forEach(t),kze=i(N$),ote=n(N$,"SPAN",{});var bwe=s(ote);Sze=r(bwe,"Extending the Auto Classes"),bwe.forEach(t),N$.forEach(t),uGe=i(f),In=n(f,"P",{});var wf=s(In);Rze=r(wf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),rte=n(wf,"CODE",{});var vwe=s(rte);Pze=r(vwe,"NewModel"),vwe.forEach(t),Bze=r(wf,", make sure you have a "),tte=n(wf,"CODE",{});var Fwe=s(tte);Ize=r(Fwe,"NewModelConfig"),Fwe.forEach(t),Nze=r(wf,` then you can add those to the auto
classes like this:`),wf.forEach(t),_Ge=i(f),T(CL.$$.fragment,f),bGe=i(f),oS=n(f,"P",{});var Twe=s(oS);qze=r(Twe,"You will then be able to use the auto classes like you would usually do!"),Twe.forEach(t),vGe=i(f),T(Rf.$$.fragment,f),FGe=i(f),xi=n(f,"H2",{class:!0});var q$=s(xi);Pf=n(q$,"A",{id:!0,class:!0,href:!0});var Mwe=s(Pf);ate=n(Mwe,"SPAN",{});var Ewe=s(ate);T(wL.$$.fragment,Ewe),Ewe.forEach(t),Mwe.forEach(t),jze=i(q$),nte=n(q$,"SPAN",{});var Cwe=s(nte);Dze=r(Cwe,"AutoConfig"),Cwe.forEach(t),q$.forEach(t),TGe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(AL.$$.fragment,rt),Gze=i(rt),LL=n(rt,"P",{});var j$=s(LL);Oze=r(j$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),rS=n(j$,"A",{href:!0});var wwe=s(rS);Vze=r(wwe,"from_pretrained()"),wwe.forEach(t),Xze=r(j$," class method."),j$.forEach(t),zze=i(rt),yL=n(rt,"P",{});var D$=s(yL);Wze=r(D$,"This class cannot be instantiated directly using "),ste=n(D$,"CODE",{});var Awe=s(ste);Qze=r(Awe,"__init__()"),Awe.forEach(t),Hze=r(D$," (throws an error)."),D$.forEach(t),Uze=i(rt),wr=n(rt,"DIV",{class:!0});var tt=s(wr);T(xL.$$.fragment,tt),Jze=i(tt),lte=n(tt,"P",{});var Lwe=s(lte);Yze=r(Lwe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Lwe.forEach(t),Kze=i(tt),$i=n(tt,"P",{});var Af=s($i);Zze=r(Af,"The configuration class to instantiate is selected based on the "),ite=n(Af,"CODE",{});var ywe=s(ite);eWe=r(ywe,"model_type"),ywe.forEach(t),oWe=r(Af,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),dte=n(Af,"CODE",{});var xwe=s(dte);rWe=r(xwe,"pretrained_model_name_or_path"),xwe.forEach(t),tWe=r(Af,":"),Af.forEach(t),aWe=i(tt),A=n(tt,"UL",{});var L=s(A);Bf=n(L,"LI",{});var Zw=s(Bf);cte=n(Zw,"STRONG",{});var $we=s(cte);nWe=r($we,"albert"),$we.forEach(t),sWe=r(Zw," \u2014 "),tS=n(Zw,"A",{href:!0});var kwe=s(tS);lWe=r(kwe,"AlbertConfig"),kwe.forEach(t),iWe=r(Zw," (ALBERT model)"),Zw.forEach(t),dWe=i(L),If=n(L,"LI",{});var eA=s(If);fte=n(eA,"STRONG",{});var Swe=s(fte);cWe=r(Swe,"bart"),Swe.forEach(t),fWe=r(eA," \u2014 "),aS=n(eA,"A",{href:!0});var Rwe=s(aS);mWe=r(Rwe,"BartConfig"),Rwe.forEach(t),gWe=r(eA," (BART model)"),eA.forEach(t),hWe=i(L),Nf=n(L,"LI",{});var oA=s(Nf);mte=n(oA,"STRONG",{});var Pwe=s(mte);pWe=r(Pwe,"beit"),Pwe.forEach(t),uWe=r(oA," \u2014 "),nS=n(oA,"A",{href:!0});var Bwe=s(nS);_We=r(Bwe,"BeitConfig"),Bwe.forEach(t),bWe=r(oA," (BEiT model)"),oA.forEach(t),vWe=i(L),qf=n(L,"LI",{});var rA=s(qf);gte=n(rA,"STRONG",{});var Iwe=s(gte);FWe=r(Iwe,"bert"),Iwe.forEach(t),TWe=r(rA," \u2014 "),sS=n(rA,"A",{href:!0});var Nwe=s(sS);MWe=r(Nwe,"BertConfig"),Nwe.forEach(t),EWe=r(rA," (BERT model)"),rA.forEach(t),CWe=i(L),jf=n(L,"LI",{});var tA=s(jf);hte=n(tA,"STRONG",{});var qwe=s(hte);wWe=r(qwe,"bert-generation"),qwe.forEach(t),AWe=r(tA," \u2014 "),lS=n(tA,"A",{href:!0});var jwe=s(lS);LWe=r(jwe,"BertGenerationConfig"),jwe.forEach(t),yWe=r(tA," (Bert Generation model)"),tA.forEach(t),xWe=i(L),Df=n(L,"LI",{});var aA=s(Df);pte=n(aA,"STRONG",{});var Dwe=s(pte);$We=r(Dwe,"big_bird"),Dwe.forEach(t),kWe=r(aA," \u2014 "),iS=n(aA,"A",{href:!0});var Gwe=s(iS);SWe=r(Gwe,"BigBirdConfig"),Gwe.forEach(t),RWe=r(aA," (BigBird model)"),aA.forEach(t),PWe=i(L),Gf=n(L,"LI",{});var nA=s(Gf);ute=n(nA,"STRONG",{});var Owe=s(ute);BWe=r(Owe,"bigbird_pegasus"),Owe.forEach(t),IWe=r(nA," \u2014 "),dS=n(nA,"A",{href:!0});var Vwe=s(dS);NWe=r(Vwe,"BigBirdPegasusConfig"),Vwe.forEach(t),qWe=r(nA," (BigBird-Pegasus model)"),nA.forEach(t),jWe=i(L),Of=n(L,"LI",{});var sA=s(Of);_te=n(sA,"STRONG",{});var Xwe=s(_te);DWe=r(Xwe,"blenderbot"),Xwe.forEach(t),GWe=r(sA," \u2014 "),cS=n(sA,"A",{href:!0});var zwe=s(cS);OWe=r(zwe,"BlenderbotConfig"),zwe.forEach(t),VWe=r(sA," (Blenderbot model)"),sA.forEach(t),XWe=i(L),Vf=n(L,"LI",{});var lA=s(Vf);bte=n(lA,"STRONG",{});var Wwe=s(bte);zWe=r(Wwe,"blenderbot-small"),Wwe.forEach(t),WWe=r(lA," \u2014 "),fS=n(lA,"A",{href:!0});var Qwe=s(fS);QWe=r(Qwe,"BlenderbotSmallConfig"),Qwe.forEach(t),HWe=r(lA," (BlenderbotSmall model)"),lA.forEach(t),UWe=i(L),Xf=n(L,"LI",{});var iA=s(Xf);vte=n(iA,"STRONG",{});var Hwe=s(vte);JWe=r(Hwe,"bloom"),Hwe.forEach(t),YWe=r(iA," \u2014 "),mS=n(iA,"A",{href:!0});var Uwe=s(mS);KWe=r(Uwe,"BloomConfig"),Uwe.forEach(t),ZWe=r(iA," (BLOOM model)"),iA.forEach(t),eQe=i(L),zf=n(L,"LI",{});var dA=s(zf);Fte=n(dA,"STRONG",{});var Jwe=s(Fte);oQe=r(Jwe,"camembert"),Jwe.forEach(t),rQe=r(dA," \u2014 "),gS=n(dA,"A",{href:!0});var Ywe=s(gS);tQe=r(Ywe,"CamembertConfig"),Ywe.forEach(t),aQe=r(dA," (CamemBERT model)"),dA.forEach(t),nQe=i(L),Wf=n(L,"LI",{});var cA=s(Wf);Tte=n(cA,"STRONG",{});var Kwe=s(Tte);sQe=r(Kwe,"canine"),Kwe.forEach(t),lQe=r(cA," \u2014 "),hS=n(cA,"A",{href:!0});var Zwe=s(hS);iQe=r(Zwe,"CanineConfig"),Zwe.forEach(t),dQe=r(cA," (CANINE model)"),cA.forEach(t),cQe=i(L),Qf=n(L,"LI",{});var fA=s(Qf);Mte=n(fA,"STRONG",{});var eAe=s(Mte);fQe=r(eAe,"clip"),eAe.forEach(t),mQe=r(fA," \u2014 "),pS=n(fA,"A",{href:!0});var oAe=s(pS);gQe=r(oAe,"CLIPConfig"),oAe.forEach(t),hQe=r(fA," (CLIP model)"),fA.forEach(t),pQe=i(L),Hf=n(L,"LI",{});var mA=s(Hf);Ete=n(mA,"STRONG",{});var rAe=s(Ete);uQe=r(rAe,"codegen"),rAe.forEach(t),_Qe=r(mA," \u2014 "),uS=n(mA,"A",{href:!0});var tAe=s(uS);bQe=r(tAe,"CodeGenConfig"),tAe.forEach(t),vQe=r(mA," (CodeGen model)"),mA.forEach(t),FQe=i(L),Uf=n(L,"LI",{});var gA=s(Uf);Cte=n(gA,"STRONG",{});var aAe=s(Cte);TQe=r(aAe,"convbert"),aAe.forEach(t),MQe=r(gA," \u2014 "),_S=n(gA,"A",{href:!0});var nAe=s(_S);EQe=r(nAe,"ConvBertConfig"),nAe.forEach(t),CQe=r(gA," (ConvBERT model)"),gA.forEach(t),wQe=i(L),Jf=n(L,"LI",{});var hA=s(Jf);wte=n(hA,"STRONG",{});var sAe=s(wte);AQe=r(sAe,"convnext"),sAe.forEach(t),LQe=r(hA," \u2014 "),bS=n(hA,"A",{href:!0});var lAe=s(bS);yQe=r(lAe,"ConvNextConfig"),lAe.forEach(t),xQe=r(hA," (ConvNeXT model)"),hA.forEach(t),$Qe=i(L),Yf=n(L,"LI",{});var pA=s(Yf);Ate=n(pA,"STRONG",{});var iAe=s(Ate);kQe=r(iAe,"ctrl"),iAe.forEach(t),SQe=r(pA," \u2014 "),vS=n(pA,"A",{href:!0});var dAe=s(vS);RQe=r(dAe,"CTRLConfig"),dAe.forEach(t),PQe=r(pA," (CTRL model)"),pA.forEach(t),BQe=i(L),Kf=n(L,"LI",{});var uA=s(Kf);Lte=n(uA,"STRONG",{});var cAe=s(Lte);IQe=r(cAe,"cvt"),cAe.forEach(t),NQe=r(uA," \u2014 "),FS=n(uA,"A",{href:!0});var fAe=s(FS);qQe=r(fAe,"CvtConfig"),fAe.forEach(t),jQe=r(uA," (CvT model)"),uA.forEach(t),DQe=i(L),Zf=n(L,"LI",{});var _A=s(Zf);yte=n(_A,"STRONG",{});var mAe=s(yte);GQe=r(mAe,"data2vec-audio"),mAe.forEach(t),OQe=r(_A," \u2014 "),TS=n(_A,"A",{href:!0});var gAe=s(TS);VQe=r(gAe,"Data2VecAudioConfig"),gAe.forEach(t),XQe=r(_A," (Data2VecAudio model)"),_A.forEach(t),zQe=i(L),em=n(L,"LI",{});var bA=s(em);xte=n(bA,"STRONG",{});var hAe=s(xte);WQe=r(hAe,"data2vec-text"),hAe.forEach(t),QQe=r(bA," \u2014 "),MS=n(bA,"A",{href:!0});var pAe=s(MS);HQe=r(pAe,"Data2VecTextConfig"),pAe.forEach(t),UQe=r(bA," (Data2VecText model)"),bA.forEach(t),JQe=i(L),om=n(L,"LI",{});var vA=s(om);$te=n(vA,"STRONG",{});var uAe=s($te);YQe=r(uAe,"data2vec-vision"),uAe.forEach(t),KQe=r(vA," \u2014 "),ES=n(vA,"A",{href:!0});var _Ae=s(ES);ZQe=r(_Ae,"Data2VecVisionConfig"),_Ae.forEach(t),eHe=r(vA," (Data2VecVision model)"),vA.forEach(t),oHe=i(L),rm=n(L,"LI",{});var FA=s(rm);kte=n(FA,"STRONG",{});var bAe=s(kte);rHe=r(bAe,"deberta"),bAe.forEach(t),tHe=r(FA," \u2014 "),CS=n(FA,"A",{href:!0});var vAe=s(CS);aHe=r(vAe,"DebertaConfig"),vAe.forEach(t),nHe=r(FA," (DeBERTa model)"),FA.forEach(t),sHe=i(L),tm=n(L,"LI",{});var TA=s(tm);Ste=n(TA,"STRONG",{});var FAe=s(Ste);lHe=r(FAe,"deberta-v2"),FAe.forEach(t),iHe=r(TA," \u2014 "),wS=n(TA,"A",{href:!0});var TAe=s(wS);dHe=r(TAe,"DebertaV2Config"),TAe.forEach(t),cHe=r(TA," (DeBERTa-v2 model)"),TA.forEach(t),fHe=i(L),am=n(L,"LI",{});var MA=s(am);Rte=n(MA,"STRONG",{});var ZJr=s(Rte);mHe=r(ZJr,"decision_transformer"),ZJr.forEach(t),gHe=r(MA," \u2014 "),AS=n(MA,"A",{href:!0});var eYr=s(AS);hHe=r(eYr,"DecisionTransformerConfig"),eYr.forEach(t),pHe=r(MA," (Decision Transformer model)"),MA.forEach(t),uHe=i(L),nm=n(L,"LI",{});var MAe=s(nm);Pte=n(MAe,"STRONG",{});var oYr=s(Pte);_He=r(oYr,"deit"),oYr.forEach(t),bHe=r(MAe," \u2014 "),LS=n(MAe,"A",{href:!0});var rYr=s(LS);vHe=r(rYr,"DeiTConfig"),rYr.forEach(t),FHe=r(MAe," (DeiT model)"),MAe.forEach(t),THe=i(L),sm=n(L,"LI",{});var EAe=s(sm);Bte=n(EAe,"STRONG",{});var tYr=s(Bte);MHe=r(tYr,"detr"),tYr.forEach(t),EHe=r(EAe," \u2014 "),yS=n(EAe,"A",{href:!0});var aYr=s(yS);CHe=r(aYr,"DetrConfig"),aYr.forEach(t),wHe=r(EAe," (DETR model)"),EAe.forEach(t),AHe=i(L),lm=n(L,"LI",{});var CAe=s(lm);Ite=n(CAe,"STRONG",{});var nYr=s(Ite);LHe=r(nYr,"distilbert"),nYr.forEach(t),yHe=r(CAe," \u2014 "),xS=n(CAe,"A",{href:!0});var sYr=s(xS);xHe=r(sYr,"DistilBertConfig"),sYr.forEach(t),$He=r(CAe," (DistilBERT model)"),CAe.forEach(t),kHe=i(L),im=n(L,"LI",{});var wAe=s(im);Nte=n(wAe,"STRONG",{});var lYr=s(Nte);SHe=r(lYr,"dpr"),lYr.forEach(t),RHe=r(wAe," \u2014 "),$S=n(wAe,"A",{href:!0});var iYr=s($S);PHe=r(iYr,"DPRConfig"),iYr.forEach(t),BHe=r(wAe," (DPR model)"),wAe.forEach(t),IHe=i(L),dm=n(L,"LI",{});var AAe=s(dm);qte=n(AAe,"STRONG",{});var dYr=s(qte);NHe=r(dYr,"dpt"),dYr.forEach(t),qHe=r(AAe," \u2014 "),kS=n(AAe,"A",{href:!0});var cYr=s(kS);jHe=r(cYr,"DPTConfig"),cYr.forEach(t),DHe=r(AAe," (DPT model)"),AAe.forEach(t),GHe=i(L),cm=n(L,"LI",{});var LAe=s(cm);jte=n(LAe,"STRONG",{});var fYr=s(jte);OHe=r(fYr,"electra"),fYr.forEach(t),VHe=r(LAe," \u2014 "),SS=n(LAe,"A",{href:!0});var mYr=s(SS);XHe=r(mYr,"ElectraConfig"),mYr.forEach(t),zHe=r(LAe," (ELECTRA model)"),LAe.forEach(t),WHe=i(L),fm=n(L,"LI",{});var yAe=s(fm);Dte=n(yAe,"STRONG",{});var gYr=s(Dte);QHe=r(gYr,"encoder-decoder"),gYr.forEach(t),HHe=r(yAe," \u2014 "),RS=n(yAe,"A",{href:!0});var hYr=s(RS);UHe=r(hYr,"EncoderDecoderConfig"),hYr.forEach(t),JHe=r(yAe," (Encoder decoder model)"),yAe.forEach(t),YHe=i(L),mm=n(L,"LI",{});var xAe=s(mm);Gte=n(xAe,"STRONG",{});var pYr=s(Gte);KHe=r(pYr,"flaubert"),pYr.forEach(t),ZHe=r(xAe," \u2014 "),PS=n(xAe,"A",{href:!0});var uYr=s(PS);eUe=r(uYr,"FlaubertConfig"),uYr.forEach(t),oUe=r(xAe," (FlauBERT model)"),xAe.forEach(t),rUe=i(L),gm=n(L,"LI",{});var $Ae=s(gm);Ote=n($Ae,"STRONG",{});var _Yr=s(Ote);tUe=r(_Yr,"flava"),_Yr.forEach(t),aUe=r($Ae," \u2014 "),BS=n($Ae,"A",{href:!0});var bYr=s(BS);nUe=r(bYr,"FlavaConfig"),bYr.forEach(t),sUe=r($Ae," (FLAVA model)"),$Ae.forEach(t),lUe=i(L),hm=n(L,"LI",{});var kAe=s(hm);Vte=n(kAe,"STRONG",{});var vYr=s(Vte);iUe=r(vYr,"fnet"),vYr.forEach(t),dUe=r(kAe," \u2014 "),IS=n(kAe,"A",{href:!0});var FYr=s(IS);cUe=r(FYr,"FNetConfig"),FYr.forEach(t),fUe=r(kAe," (FNet model)"),kAe.forEach(t),mUe=i(L),pm=n(L,"LI",{});var SAe=s(pm);Xte=n(SAe,"STRONG",{});var TYr=s(Xte);gUe=r(TYr,"fsmt"),TYr.forEach(t),hUe=r(SAe," \u2014 "),NS=n(SAe,"A",{href:!0});var MYr=s(NS);pUe=r(MYr,"FSMTConfig"),MYr.forEach(t),uUe=r(SAe," (FairSeq Machine-Translation model)"),SAe.forEach(t),_Ue=i(L),um=n(L,"LI",{});var RAe=s(um);zte=n(RAe,"STRONG",{});var EYr=s(zte);bUe=r(EYr,"funnel"),EYr.forEach(t),vUe=r(RAe," \u2014 "),qS=n(RAe,"A",{href:!0});var CYr=s(qS);FUe=r(CYr,"FunnelConfig"),CYr.forEach(t),TUe=r(RAe," (Funnel Transformer model)"),RAe.forEach(t),MUe=i(L),_m=n(L,"LI",{});var PAe=s(_m);Wte=n(PAe,"STRONG",{});var wYr=s(Wte);EUe=r(wYr,"glpn"),wYr.forEach(t),CUe=r(PAe," \u2014 "),jS=n(PAe,"A",{href:!0});var AYr=s(jS);wUe=r(AYr,"GLPNConfig"),AYr.forEach(t),AUe=r(PAe," (GLPN model)"),PAe.forEach(t),LUe=i(L),bm=n(L,"LI",{});var BAe=s(bm);Qte=n(BAe,"STRONG",{});var LYr=s(Qte);yUe=r(LYr,"gpt2"),LYr.forEach(t),xUe=r(BAe," \u2014 "),DS=n(BAe,"A",{href:!0});var yYr=s(DS);$Ue=r(yYr,"GPT2Config"),yYr.forEach(t),kUe=r(BAe," (OpenAI GPT-2 model)"),BAe.forEach(t),SUe=i(L),vm=n(L,"LI",{});var IAe=s(vm);Hte=n(IAe,"STRONG",{});var xYr=s(Hte);RUe=r(xYr,"gpt_neo"),xYr.forEach(t),PUe=r(IAe," \u2014 "),GS=n(IAe,"A",{href:!0});var $Yr=s(GS);BUe=r($Yr,"GPTNeoConfig"),$Yr.forEach(t),IUe=r(IAe," (GPT Neo model)"),IAe.forEach(t),NUe=i(L),Fm=n(L,"LI",{});var NAe=s(Fm);Ute=n(NAe,"STRONG",{});var kYr=s(Ute);qUe=r(kYr,"gpt_neox"),kYr.forEach(t),jUe=r(NAe," \u2014 "),OS=n(NAe,"A",{href:!0});var SYr=s(OS);DUe=r(SYr,"GPTNeoXConfig"),SYr.forEach(t),GUe=r(NAe," (GPT NeoX model)"),NAe.forEach(t),OUe=i(L),Tm=n(L,"LI",{});var qAe=s(Tm);Jte=n(qAe,"STRONG",{});var RYr=s(Jte);VUe=r(RYr,"gptj"),RYr.forEach(t),XUe=r(qAe," \u2014 "),VS=n(qAe,"A",{href:!0});var PYr=s(VS);zUe=r(PYr,"GPTJConfig"),PYr.forEach(t),WUe=r(qAe," (GPT-J model)"),qAe.forEach(t),QUe=i(L),Mm=n(L,"LI",{});var jAe=s(Mm);Yte=n(jAe,"STRONG",{});var BYr=s(Yte);HUe=r(BYr,"hubert"),BYr.forEach(t),UUe=r(jAe," \u2014 "),XS=n(jAe,"A",{href:!0});var IYr=s(XS);JUe=r(IYr,"HubertConfig"),IYr.forEach(t),YUe=r(jAe," (Hubert model)"),jAe.forEach(t),KUe=i(L),Em=n(L,"LI",{});var DAe=s(Em);Kte=n(DAe,"STRONG",{});var NYr=s(Kte);ZUe=r(NYr,"ibert"),NYr.forEach(t),eJe=r(DAe," \u2014 "),zS=n(DAe,"A",{href:!0});var qYr=s(zS);oJe=r(qYr,"IBertConfig"),qYr.forEach(t),rJe=r(DAe," (I-BERT model)"),DAe.forEach(t),tJe=i(L),Cm=n(L,"LI",{});var GAe=s(Cm);Zte=n(GAe,"STRONG",{});var jYr=s(Zte);aJe=r(jYr,"imagegpt"),jYr.forEach(t),nJe=r(GAe," \u2014 "),WS=n(GAe,"A",{href:!0});var DYr=s(WS);sJe=r(DYr,"ImageGPTConfig"),DYr.forEach(t),lJe=r(GAe," (ImageGPT model)"),GAe.forEach(t),iJe=i(L),wm=n(L,"LI",{});var OAe=s(wm);eae=n(OAe,"STRONG",{});var GYr=s(eae);dJe=r(GYr,"layoutlm"),GYr.forEach(t),cJe=r(OAe," \u2014 "),QS=n(OAe,"A",{href:!0});var OYr=s(QS);fJe=r(OYr,"LayoutLMConfig"),OYr.forEach(t),mJe=r(OAe," (LayoutLM model)"),OAe.forEach(t),gJe=i(L),Am=n(L,"LI",{});var VAe=s(Am);oae=n(VAe,"STRONG",{});var VYr=s(oae);hJe=r(VYr,"layoutlmv2"),VYr.forEach(t),pJe=r(VAe," \u2014 "),HS=n(VAe,"A",{href:!0});var XYr=s(HS);uJe=r(XYr,"LayoutLMv2Config"),XYr.forEach(t),_Je=r(VAe," (LayoutLMv2 model)"),VAe.forEach(t),bJe=i(L),Lm=n(L,"LI",{});var XAe=s(Lm);rae=n(XAe,"STRONG",{});var zYr=s(rae);vJe=r(zYr,"layoutlmv3"),zYr.forEach(t),FJe=r(XAe," \u2014 "),US=n(XAe,"A",{href:!0});var WYr=s(US);TJe=r(WYr,"LayoutLMv3Config"),WYr.forEach(t),MJe=r(XAe," (LayoutLMv3 model)"),XAe.forEach(t),EJe=i(L),ym=n(L,"LI",{});var zAe=s(ym);tae=n(zAe,"STRONG",{});var QYr=s(tae);CJe=r(QYr,"led"),QYr.forEach(t),wJe=r(zAe," \u2014 "),JS=n(zAe,"A",{href:!0});var HYr=s(JS);AJe=r(HYr,"LEDConfig"),HYr.forEach(t),LJe=r(zAe," (LED model)"),zAe.forEach(t),yJe=i(L),xm=n(L,"LI",{});var WAe=s(xm);aae=n(WAe,"STRONG",{});var UYr=s(aae);xJe=r(UYr,"levit"),UYr.forEach(t),$Je=r(WAe," \u2014 "),YS=n(WAe,"A",{href:!0});var JYr=s(YS);kJe=r(JYr,"LevitConfig"),JYr.forEach(t),SJe=r(WAe," (LeViT model)"),WAe.forEach(t),RJe=i(L),$m=n(L,"LI",{});var QAe=s($m);nae=n(QAe,"STRONG",{});var YYr=s(nae);PJe=r(YYr,"longformer"),YYr.forEach(t),BJe=r(QAe," \u2014 "),KS=n(QAe,"A",{href:!0});var KYr=s(KS);IJe=r(KYr,"LongformerConfig"),KYr.forEach(t),NJe=r(QAe," (Longformer model)"),QAe.forEach(t),qJe=i(L),km=n(L,"LI",{});var HAe=s(km);sae=n(HAe,"STRONG",{});var ZYr=s(sae);jJe=r(ZYr,"longt5"),ZYr.forEach(t),DJe=r(HAe," \u2014 "),ZS=n(HAe,"A",{href:!0});var eKr=s(ZS);GJe=r(eKr,"LongT5Config"),eKr.forEach(t),OJe=r(HAe," (LongT5 model)"),HAe.forEach(t),VJe=i(L),Sm=n(L,"LI",{});var UAe=s(Sm);lae=n(UAe,"STRONG",{});var oKr=s(lae);XJe=r(oKr,"luke"),oKr.forEach(t),zJe=r(UAe," \u2014 "),eR=n(UAe,"A",{href:!0});var rKr=s(eR);WJe=r(rKr,"LukeConfig"),rKr.forEach(t),QJe=r(UAe," (LUKE model)"),UAe.forEach(t),HJe=i(L),Rm=n(L,"LI",{});var JAe=s(Rm);iae=n(JAe,"STRONG",{});var tKr=s(iae);UJe=r(tKr,"lxmert"),tKr.forEach(t),JJe=r(JAe," \u2014 "),oR=n(JAe,"A",{href:!0});var aKr=s(oR);YJe=r(aKr,"LxmertConfig"),aKr.forEach(t),KJe=r(JAe," (LXMERT model)"),JAe.forEach(t),ZJe=i(L),Pm=n(L,"LI",{});var YAe=s(Pm);dae=n(YAe,"STRONG",{});var nKr=s(dae);eYe=r(nKr,"m2m_100"),nKr.forEach(t),oYe=r(YAe," \u2014 "),rR=n(YAe,"A",{href:!0});var sKr=s(rR);rYe=r(sKr,"M2M100Config"),sKr.forEach(t),tYe=r(YAe," (M2M100 model)"),YAe.forEach(t),aYe=i(L),Bm=n(L,"LI",{});var KAe=s(Bm);cae=n(KAe,"STRONG",{});var lKr=s(cae);nYe=r(lKr,"marian"),lKr.forEach(t),sYe=r(KAe," \u2014 "),tR=n(KAe,"A",{href:!0});var iKr=s(tR);lYe=r(iKr,"MarianConfig"),iKr.forEach(t),iYe=r(KAe," (Marian model)"),KAe.forEach(t),dYe=i(L),Im=n(L,"LI",{});var ZAe=s(Im);fae=n(ZAe,"STRONG",{});var dKr=s(fae);cYe=r(dKr,"maskformer"),dKr.forEach(t),fYe=r(ZAe," \u2014 "),aR=n(ZAe,"A",{href:!0});var cKr=s(aR);mYe=r(cKr,"MaskFormerConfig"),cKr.forEach(t),gYe=r(ZAe," (MaskFormer model)"),ZAe.forEach(t),hYe=i(L),Nm=n(L,"LI",{});var e6e=s(Nm);mae=n(e6e,"STRONG",{});var fKr=s(mae);pYe=r(fKr,"mbart"),fKr.forEach(t),uYe=r(e6e," \u2014 "),nR=n(e6e,"A",{href:!0});var mKr=s(nR);_Ye=r(mKr,"MBartConfig"),mKr.forEach(t),bYe=r(e6e," (mBART model)"),e6e.forEach(t),vYe=i(L),qm=n(L,"LI",{});var o6e=s(qm);gae=n(o6e,"STRONG",{});var gKr=s(gae);FYe=r(gKr,"mctct"),gKr.forEach(t),TYe=r(o6e," \u2014 "),sR=n(o6e,"A",{href:!0});var hKr=s(sR);MYe=r(hKr,"MCTCTConfig"),hKr.forEach(t),EYe=r(o6e," (M-CTC-T model)"),o6e.forEach(t),CYe=i(L),jm=n(L,"LI",{});var r6e=s(jm);hae=n(r6e,"STRONG",{});var pKr=s(hae);wYe=r(pKr,"megatron-bert"),pKr.forEach(t),AYe=r(r6e," \u2014 "),lR=n(r6e,"A",{href:!0});var uKr=s(lR);LYe=r(uKr,"MegatronBertConfig"),uKr.forEach(t),yYe=r(r6e," (Megatron-BERT model)"),r6e.forEach(t),xYe=i(L),Dm=n(L,"LI",{});var t6e=s(Dm);pae=n(t6e,"STRONG",{});var _Kr=s(pae);$Ye=r(_Kr,"mobilebert"),_Kr.forEach(t),kYe=r(t6e," \u2014 "),iR=n(t6e,"A",{href:!0});var bKr=s(iR);SYe=r(bKr,"MobileBertConfig"),bKr.forEach(t),RYe=r(t6e," (MobileBERT model)"),t6e.forEach(t),PYe=i(L),Gm=n(L,"LI",{});var a6e=s(Gm);uae=n(a6e,"STRONG",{});var vKr=s(uae);BYe=r(vKr,"mpnet"),vKr.forEach(t),IYe=r(a6e," \u2014 "),dR=n(a6e,"A",{href:!0});var FKr=s(dR);NYe=r(FKr,"MPNetConfig"),FKr.forEach(t),qYe=r(a6e," (MPNet model)"),a6e.forEach(t),jYe=i(L),Om=n(L,"LI",{});var n6e=s(Om);_ae=n(n6e,"STRONG",{});var TKr=s(_ae);DYe=r(TKr,"mt5"),TKr.forEach(t),GYe=r(n6e," \u2014 "),cR=n(n6e,"A",{href:!0});var MKr=s(cR);OYe=r(MKr,"MT5Config"),MKr.forEach(t),VYe=r(n6e," (MT5 model)"),n6e.forEach(t),XYe=i(L),Vm=n(L,"LI",{});var s6e=s(Vm);bae=n(s6e,"STRONG",{});var EKr=s(bae);zYe=r(EKr,"nystromformer"),EKr.forEach(t),WYe=r(s6e," \u2014 "),fR=n(s6e,"A",{href:!0});var CKr=s(fR);QYe=r(CKr,"NystromformerConfig"),CKr.forEach(t),HYe=r(s6e," (Nystr\xF6mformer model)"),s6e.forEach(t),UYe=i(L),Xm=n(L,"LI",{});var l6e=s(Xm);vae=n(l6e,"STRONG",{});var wKr=s(vae);JYe=r(wKr,"openai-gpt"),wKr.forEach(t),YYe=r(l6e," \u2014 "),mR=n(l6e,"A",{href:!0});var AKr=s(mR);KYe=r(AKr,"OpenAIGPTConfig"),AKr.forEach(t),ZYe=r(l6e," (OpenAI GPT model)"),l6e.forEach(t),eKe=i(L),zm=n(L,"LI",{});var i6e=s(zm);Fae=n(i6e,"STRONG",{});var LKr=s(Fae);oKe=r(LKr,"opt"),LKr.forEach(t),rKe=r(i6e," \u2014 "),gR=n(i6e,"A",{href:!0});var yKr=s(gR);tKe=r(yKr,"OPTConfig"),yKr.forEach(t),aKe=r(i6e," (OPT model)"),i6e.forEach(t),nKe=i(L),Wm=n(L,"LI",{});var d6e=s(Wm);Tae=n(d6e,"STRONG",{});var xKr=s(Tae);sKe=r(xKr,"pegasus"),xKr.forEach(t),lKe=r(d6e," \u2014 "),hR=n(d6e,"A",{href:!0});var $Kr=s(hR);iKe=r($Kr,"PegasusConfig"),$Kr.forEach(t),dKe=r(d6e," (Pegasus model)"),d6e.forEach(t),cKe=i(L),Qm=n(L,"LI",{});var c6e=s(Qm);Mae=n(c6e,"STRONG",{});var kKr=s(Mae);fKe=r(kKr,"perceiver"),kKr.forEach(t),mKe=r(c6e," \u2014 "),pR=n(c6e,"A",{href:!0});var SKr=s(pR);gKe=r(SKr,"PerceiverConfig"),SKr.forEach(t),hKe=r(c6e," (Perceiver model)"),c6e.forEach(t),pKe=i(L),Hm=n(L,"LI",{});var f6e=s(Hm);Eae=n(f6e,"STRONG",{});var RKr=s(Eae);uKe=r(RKr,"plbart"),RKr.forEach(t),_Ke=r(f6e," \u2014 "),uR=n(f6e,"A",{href:!0});var PKr=s(uR);bKe=r(PKr,"PLBartConfig"),PKr.forEach(t),vKe=r(f6e," (PLBart model)"),f6e.forEach(t),FKe=i(L),Um=n(L,"LI",{});var m6e=s(Um);Cae=n(m6e,"STRONG",{});var BKr=s(Cae);TKe=r(BKr,"poolformer"),BKr.forEach(t),MKe=r(m6e," \u2014 "),_R=n(m6e,"A",{href:!0});var IKr=s(_R);EKe=r(IKr,"PoolFormerConfig"),IKr.forEach(t),CKe=r(m6e," (PoolFormer model)"),m6e.forEach(t),wKe=i(L),Jm=n(L,"LI",{});var g6e=s(Jm);wae=n(g6e,"STRONG",{});var NKr=s(wae);AKe=r(NKr,"prophetnet"),NKr.forEach(t),LKe=r(g6e," \u2014 "),bR=n(g6e,"A",{href:!0});var qKr=s(bR);yKe=r(qKr,"ProphetNetConfig"),qKr.forEach(t),xKe=r(g6e," (ProphetNet model)"),g6e.forEach(t),$Ke=i(L),Ym=n(L,"LI",{});var h6e=s(Ym);Aae=n(h6e,"STRONG",{});var jKr=s(Aae);kKe=r(jKr,"qdqbert"),jKr.forEach(t),SKe=r(h6e," \u2014 "),vR=n(h6e,"A",{href:!0});var DKr=s(vR);RKe=r(DKr,"QDQBertConfig"),DKr.forEach(t),PKe=r(h6e," (QDQBert model)"),h6e.forEach(t),BKe=i(L),Km=n(L,"LI",{});var p6e=s(Km);Lae=n(p6e,"STRONG",{});var GKr=s(Lae);IKe=r(GKr,"rag"),GKr.forEach(t),NKe=r(p6e," \u2014 "),FR=n(p6e,"A",{href:!0});var OKr=s(FR);qKe=r(OKr,"RagConfig"),OKr.forEach(t),jKe=r(p6e," (RAG model)"),p6e.forEach(t),DKe=i(L),Zm=n(L,"LI",{});var u6e=s(Zm);yae=n(u6e,"STRONG",{});var VKr=s(yae);GKe=r(VKr,"realm"),VKr.forEach(t),OKe=r(u6e," \u2014 "),TR=n(u6e,"A",{href:!0});var XKr=s(TR);VKe=r(XKr,"RealmConfig"),XKr.forEach(t),XKe=r(u6e," (REALM model)"),u6e.forEach(t),zKe=i(L),eg=n(L,"LI",{});var _6e=s(eg);xae=n(_6e,"STRONG",{});var zKr=s(xae);WKe=r(zKr,"reformer"),zKr.forEach(t),QKe=r(_6e," \u2014 "),MR=n(_6e,"A",{href:!0});var WKr=s(MR);HKe=r(WKr,"ReformerConfig"),WKr.forEach(t),UKe=r(_6e," (Reformer model)"),_6e.forEach(t),JKe=i(L),og=n(L,"LI",{});var b6e=s(og);$ae=n(b6e,"STRONG",{});var QKr=s($ae);YKe=r(QKr,"regnet"),QKr.forEach(t),KKe=r(b6e," \u2014 "),ER=n(b6e,"A",{href:!0});var HKr=s(ER);ZKe=r(HKr,"RegNetConfig"),HKr.forEach(t),eZe=r(b6e," (RegNet model)"),b6e.forEach(t),oZe=i(L),rg=n(L,"LI",{});var v6e=s(rg);kae=n(v6e,"STRONG",{});var UKr=s(kae);rZe=r(UKr,"rembert"),UKr.forEach(t),tZe=r(v6e," \u2014 "),CR=n(v6e,"A",{href:!0});var JKr=s(CR);aZe=r(JKr,"RemBertConfig"),JKr.forEach(t),nZe=r(v6e," (RemBERT model)"),v6e.forEach(t),sZe=i(L),tg=n(L,"LI",{});var F6e=s(tg);Sae=n(F6e,"STRONG",{});var YKr=s(Sae);lZe=r(YKr,"resnet"),YKr.forEach(t),iZe=r(F6e," \u2014 "),wR=n(F6e,"A",{href:!0});var KKr=s(wR);dZe=r(KKr,"ResNetConfig"),KKr.forEach(t),cZe=r(F6e," (ResNet model)"),F6e.forEach(t),fZe=i(L),ag=n(L,"LI",{});var T6e=s(ag);Rae=n(T6e,"STRONG",{});var ZKr=s(Rae);mZe=r(ZKr,"retribert"),ZKr.forEach(t),gZe=r(T6e," \u2014 "),AR=n(T6e,"A",{href:!0});var eZr=s(AR);hZe=r(eZr,"RetriBertConfig"),eZr.forEach(t),pZe=r(T6e," (RetriBERT model)"),T6e.forEach(t),uZe=i(L),ng=n(L,"LI",{});var M6e=s(ng);Pae=n(M6e,"STRONG",{});var oZr=s(Pae);_Ze=r(oZr,"roberta"),oZr.forEach(t),bZe=r(M6e," \u2014 "),LR=n(M6e,"A",{href:!0});var rZr=s(LR);vZe=r(rZr,"RobertaConfig"),rZr.forEach(t),FZe=r(M6e," (RoBERTa model)"),M6e.forEach(t),TZe=i(L),sg=n(L,"LI",{});var E6e=s(sg);Bae=n(E6e,"STRONG",{});var tZr=s(Bae);MZe=r(tZr,"roformer"),tZr.forEach(t),EZe=r(E6e," \u2014 "),yR=n(E6e,"A",{href:!0});var aZr=s(yR);CZe=r(aZr,"RoFormerConfig"),aZr.forEach(t),wZe=r(E6e," (RoFormer model)"),E6e.forEach(t),AZe=i(L),lg=n(L,"LI",{});var C6e=s(lg);Iae=n(C6e,"STRONG",{});var nZr=s(Iae);LZe=r(nZr,"segformer"),nZr.forEach(t),yZe=r(C6e," \u2014 "),xR=n(C6e,"A",{href:!0});var sZr=s(xR);xZe=r(sZr,"SegformerConfig"),sZr.forEach(t),$Ze=r(C6e," (SegFormer model)"),C6e.forEach(t),kZe=i(L),ig=n(L,"LI",{});var w6e=s(ig);Nae=n(w6e,"STRONG",{});var lZr=s(Nae);SZe=r(lZr,"sew"),lZr.forEach(t),RZe=r(w6e," \u2014 "),$R=n(w6e,"A",{href:!0});var iZr=s($R);PZe=r(iZr,"SEWConfig"),iZr.forEach(t),BZe=r(w6e," (SEW model)"),w6e.forEach(t),IZe=i(L),dg=n(L,"LI",{});var A6e=s(dg);qae=n(A6e,"STRONG",{});var dZr=s(qae);NZe=r(dZr,"sew-d"),dZr.forEach(t),qZe=r(A6e," \u2014 "),kR=n(A6e,"A",{href:!0});var cZr=s(kR);jZe=r(cZr,"SEWDConfig"),cZr.forEach(t),DZe=r(A6e," (SEW-D model)"),A6e.forEach(t),GZe=i(L),cg=n(L,"LI",{});var L6e=s(cg);jae=n(L6e,"STRONG",{});var fZr=s(jae);OZe=r(fZr,"speech-encoder-decoder"),fZr.forEach(t),VZe=r(L6e," \u2014 "),SR=n(L6e,"A",{href:!0});var mZr=s(SR);XZe=r(mZr,"SpeechEncoderDecoderConfig"),mZr.forEach(t),zZe=r(L6e," (Speech Encoder decoder model)"),L6e.forEach(t),WZe=i(L),fg=n(L,"LI",{});var y6e=s(fg);Dae=n(y6e,"STRONG",{});var gZr=s(Dae);QZe=r(gZr,"speech_to_text"),gZr.forEach(t),HZe=r(y6e," \u2014 "),RR=n(y6e,"A",{href:!0});var hZr=s(RR);UZe=r(hZr,"Speech2TextConfig"),hZr.forEach(t),JZe=r(y6e," (Speech2Text model)"),y6e.forEach(t),YZe=i(L),mg=n(L,"LI",{});var x6e=s(mg);Gae=n(x6e,"STRONG",{});var pZr=s(Gae);KZe=r(pZr,"speech_to_text_2"),pZr.forEach(t),ZZe=r(x6e," \u2014 "),PR=n(x6e,"A",{href:!0});var uZr=s(PR);eeo=r(uZr,"Speech2Text2Config"),uZr.forEach(t),oeo=r(x6e," (Speech2Text2 model)"),x6e.forEach(t),reo=i(L),gg=n(L,"LI",{});var $6e=s(gg);Oae=n($6e,"STRONG",{});var _Zr=s(Oae);teo=r(_Zr,"splinter"),_Zr.forEach(t),aeo=r($6e," \u2014 "),BR=n($6e,"A",{href:!0});var bZr=s(BR);neo=r(bZr,"SplinterConfig"),bZr.forEach(t),seo=r($6e," (Splinter model)"),$6e.forEach(t),leo=i(L),hg=n(L,"LI",{});var k6e=s(hg);Vae=n(k6e,"STRONG",{});var vZr=s(Vae);ieo=r(vZr,"squeezebert"),vZr.forEach(t),deo=r(k6e," \u2014 "),IR=n(k6e,"A",{href:!0});var FZr=s(IR);ceo=r(FZr,"SqueezeBertConfig"),FZr.forEach(t),feo=r(k6e," (SqueezeBERT model)"),k6e.forEach(t),meo=i(L),pg=n(L,"LI",{});var S6e=s(pg);Xae=n(S6e,"STRONG",{});var TZr=s(Xae);geo=r(TZr,"swin"),TZr.forEach(t),heo=r(S6e," \u2014 "),NR=n(S6e,"A",{href:!0});var MZr=s(NR);peo=r(MZr,"SwinConfig"),MZr.forEach(t),ueo=r(S6e," (Swin Transformer model)"),S6e.forEach(t),_eo=i(L),ug=n(L,"LI",{});var R6e=s(ug);zae=n(R6e,"STRONG",{});var EZr=s(zae);beo=r(EZr,"t5"),EZr.forEach(t),veo=r(R6e," \u2014 "),qR=n(R6e,"A",{href:!0});var CZr=s(qR);Feo=r(CZr,"T5Config"),CZr.forEach(t),Teo=r(R6e," (T5 model)"),R6e.forEach(t),Meo=i(L),_g=n(L,"LI",{});var P6e=s(_g);Wae=n(P6e,"STRONG",{});var wZr=s(Wae);Eeo=r(wZr,"tapas"),wZr.forEach(t),Ceo=r(P6e," \u2014 "),jR=n(P6e,"A",{href:!0});var AZr=s(jR);weo=r(AZr,"TapasConfig"),AZr.forEach(t),Aeo=r(P6e," (TAPAS model)"),P6e.forEach(t),Leo=i(L),bg=n(L,"LI",{});var B6e=s(bg);Qae=n(B6e,"STRONG",{});var LZr=s(Qae);yeo=r(LZr,"trajectory_transformer"),LZr.forEach(t),xeo=r(B6e," \u2014 "),DR=n(B6e,"A",{href:!0});var yZr=s(DR);$eo=r(yZr,"TrajectoryTransformerConfig"),yZr.forEach(t),keo=r(B6e," (Trajectory Transformer model)"),B6e.forEach(t),Seo=i(L),vg=n(L,"LI",{});var I6e=s(vg);Hae=n(I6e,"STRONG",{});var xZr=s(Hae);Reo=r(xZr,"transfo-xl"),xZr.forEach(t),Peo=r(I6e," \u2014 "),GR=n(I6e,"A",{href:!0});var $Zr=s(GR);Beo=r($Zr,"TransfoXLConfig"),$Zr.forEach(t),Ieo=r(I6e," (Transformer-XL model)"),I6e.forEach(t),Neo=i(L),Fg=n(L,"LI",{});var N6e=s(Fg);Uae=n(N6e,"STRONG",{});var kZr=s(Uae);qeo=r(kZr,"trocr"),kZr.forEach(t),jeo=r(N6e," \u2014 "),OR=n(N6e,"A",{href:!0});var SZr=s(OR);Deo=r(SZr,"TrOCRConfig"),SZr.forEach(t),Geo=r(N6e," (TrOCR model)"),N6e.forEach(t),Oeo=i(L),Tg=n(L,"LI",{});var q6e=s(Tg);Jae=n(q6e,"STRONG",{});var RZr=s(Jae);Veo=r(RZr,"unispeech"),RZr.forEach(t),Xeo=r(q6e," \u2014 "),VR=n(q6e,"A",{href:!0});var PZr=s(VR);zeo=r(PZr,"UniSpeechConfig"),PZr.forEach(t),Weo=r(q6e," (UniSpeech model)"),q6e.forEach(t),Qeo=i(L),Mg=n(L,"LI",{});var j6e=s(Mg);Yae=n(j6e,"STRONG",{});var BZr=s(Yae);Heo=r(BZr,"unispeech-sat"),BZr.forEach(t),Ueo=r(j6e," \u2014 "),XR=n(j6e,"A",{href:!0});var IZr=s(XR);Jeo=r(IZr,"UniSpeechSatConfig"),IZr.forEach(t),Yeo=r(j6e," (UniSpeechSat model)"),j6e.forEach(t),Keo=i(L),Eg=n(L,"LI",{});var D6e=s(Eg);Kae=n(D6e,"STRONG",{});var NZr=s(Kae);Zeo=r(NZr,"van"),NZr.forEach(t),eoo=r(D6e," \u2014 "),zR=n(D6e,"A",{href:!0});var qZr=s(zR);ooo=r(qZr,"VanConfig"),qZr.forEach(t),roo=r(D6e," (VAN model)"),D6e.forEach(t),too=i(L),Cg=n(L,"LI",{});var G6e=s(Cg);Zae=n(G6e,"STRONG",{});var jZr=s(Zae);aoo=r(jZr,"vilt"),jZr.forEach(t),noo=r(G6e," \u2014 "),WR=n(G6e,"A",{href:!0});var DZr=s(WR);soo=r(DZr,"ViltConfig"),DZr.forEach(t),loo=r(G6e," (ViLT model)"),G6e.forEach(t),ioo=i(L),wg=n(L,"LI",{});var O6e=s(wg);ene=n(O6e,"STRONG",{});var GZr=s(ene);doo=r(GZr,"vision-encoder-decoder"),GZr.forEach(t),coo=r(O6e," \u2014 "),QR=n(O6e,"A",{href:!0});var OZr=s(QR);foo=r(OZr,"VisionEncoderDecoderConfig"),OZr.forEach(t),moo=r(O6e," (Vision Encoder decoder model)"),O6e.forEach(t),goo=i(L),Ag=n(L,"LI",{});var V6e=s(Ag);one=n(V6e,"STRONG",{});var VZr=s(one);hoo=r(VZr,"vision-text-dual-encoder"),VZr.forEach(t),poo=r(V6e," \u2014 "),HR=n(V6e,"A",{href:!0});var XZr=s(HR);uoo=r(XZr,"VisionTextDualEncoderConfig"),XZr.forEach(t),_oo=r(V6e," (VisionTextDualEncoder model)"),V6e.forEach(t),boo=i(L),Lg=n(L,"LI",{});var X6e=s(Lg);rne=n(X6e,"STRONG",{});var zZr=s(rne);voo=r(zZr,"visual_bert"),zZr.forEach(t),Foo=r(X6e," \u2014 "),UR=n(X6e,"A",{href:!0});var WZr=s(UR);Too=r(WZr,"VisualBertConfig"),WZr.forEach(t),Moo=r(X6e," (VisualBERT model)"),X6e.forEach(t),Eoo=i(L),yg=n(L,"LI",{});var z6e=s(yg);tne=n(z6e,"STRONG",{});var QZr=s(tne);Coo=r(QZr,"vit"),QZr.forEach(t),woo=r(z6e," \u2014 "),JR=n(z6e,"A",{href:!0});var HZr=s(JR);Aoo=r(HZr,"ViTConfig"),HZr.forEach(t),Loo=r(z6e," (ViT model)"),z6e.forEach(t),yoo=i(L),xg=n(L,"LI",{});var W6e=s(xg);ane=n(W6e,"STRONG",{});var UZr=s(ane);xoo=r(UZr,"vit_mae"),UZr.forEach(t),$oo=r(W6e," \u2014 "),YR=n(W6e,"A",{href:!0});var JZr=s(YR);koo=r(JZr,"ViTMAEConfig"),JZr.forEach(t),Soo=r(W6e," (ViTMAE model)"),W6e.forEach(t),Roo=i(L),$g=n(L,"LI",{});var Q6e=s($g);nne=n(Q6e,"STRONG",{});var YZr=s(nne);Poo=r(YZr,"wav2vec2"),YZr.forEach(t),Boo=r(Q6e," \u2014 "),KR=n(Q6e,"A",{href:!0});var KZr=s(KR);Ioo=r(KZr,"Wav2Vec2Config"),KZr.forEach(t),Noo=r(Q6e," (Wav2Vec2 model)"),Q6e.forEach(t),qoo=i(L),kg=n(L,"LI",{});var H6e=s(kg);sne=n(H6e,"STRONG",{});var ZZr=s(sne);joo=r(ZZr,"wav2vec2-conformer"),ZZr.forEach(t),Doo=r(H6e," \u2014 "),ZR=n(H6e,"A",{href:!0});var eet=s(ZR);Goo=r(eet,"Wav2Vec2ConformerConfig"),eet.forEach(t),Ooo=r(H6e," (Wav2Vec2-Conformer model)"),H6e.forEach(t),Voo=i(L),Sg=n(L,"LI",{});var U6e=s(Sg);lne=n(U6e,"STRONG",{});var oet=s(lne);Xoo=r(oet,"wavlm"),oet.forEach(t),zoo=r(U6e," \u2014 "),eP=n(U6e,"A",{href:!0});var ret=s(eP);Woo=r(ret,"WavLMConfig"),ret.forEach(t),Qoo=r(U6e," (WavLM model)"),U6e.forEach(t),Hoo=i(L),Rg=n(L,"LI",{});var J6e=s(Rg);ine=n(J6e,"STRONG",{});var tet=s(ine);Uoo=r(tet,"xglm"),tet.forEach(t),Joo=r(J6e," \u2014 "),oP=n(J6e,"A",{href:!0});var aet=s(oP);Yoo=r(aet,"XGLMConfig"),aet.forEach(t),Koo=r(J6e," (XGLM model)"),J6e.forEach(t),Zoo=i(L),Pg=n(L,"LI",{});var Y6e=s(Pg);dne=n(Y6e,"STRONG",{});var net=s(dne);ero=r(net,"xlm"),net.forEach(t),oro=r(Y6e," \u2014 "),rP=n(Y6e,"A",{href:!0});var set=s(rP);rro=r(set,"XLMConfig"),set.forEach(t),tro=r(Y6e," (XLM model)"),Y6e.forEach(t),aro=i(L),Bg=n(L,"LI",{});var K6e=s(Bg);cne=n(K6e,"STRONG",{});var iet=s(cne);nro=r(iet,"xlm-prophetnet"),iet.forEach(t),sro=r(K6e," \u2014 "),tP=n(K6e,"A",{href:!0});var det=s(tP);lro=r(det,"XLMProphetNetConfig"),det.forEach(t),iro=r(K6e," (XLM-ProphetNet model)"),K6e.forEach(t),dro=i(L),Ig=n(L,"LI",{});var Z6e=s(Ig);fne=n(Z6e,"STRONG",{});var cet=s(fne);cro=r(cet,"xlm-roberta"),cet.forEach(t),fro=r(Z6e," \u2014 "),aP=n(Z6e,"A",{href:!0});var fet=s(aP);mro=r(fet,"XLMRobertaConfig"),fet.forEach(t),gro=r(Z6e," (XLM-RoBERTa model)"),Z6e.forEach(t),hro=i(L),Ng=n(L,"LI",{});var eLe=s(Ng);mne=n(eLe,"STRONG",{});var met=s(mne);pro=r(met,"xlm-roberta-xl"),met.forEach(t),uro=r(eLe," \u2014 "),nP=n(eLe,"A",{href:!0});var get=s(nP);_ro=r(get,"XLMRobertaXLConfig"),get.forEach(t),bro=r(eLe," (XLM-RoBERTa-XL model)"),eLe.forEach(t),vro=i(L),qg=n(L,"LI",{});var oLe=s(qg);gne=n(oLe,"STRONG",{});var het=s(gne);Fro=r(het,"xlnet"),het.forEach(t),Tro=r(oLe," \u2014 "),sP=n(oLe,"A",{href:!0});var pet=s(sP);Mro=r(pet,"XLNetConfig"),pet.forEach(t),Ero=r(oLe," (XLNet model)"),oLe.forEach(t),Cro=i(L),jg=n(L,"LI",{});var rLe=s(jg);hne=n(rLe,"STRONG",{});var uet=s(hne);wro=r(uet,"yolos"),uet.forEach(t),Aro=r(rLe," \u2014 "),lP=n(rLe,"A",{href:!0});var _et=s(lP);Lro=r(_et,"YolosConfig"),_et.forEach(t),yro=r(rLe," (YOLOS model)"),rLe.forEach(t),xro=i(L),Dg=n(L,"LI",{});var tLe=s(Dg);pne=n(tLe,"STRONG",{});var bet=s(pne);$ro=r(bet,"yoso"),bet.forEach(t),kro=r(tLe," \u2014 "),iP=n(tLe,"A",{href:!0});var vet=s(iP);Sro=r(vet,"YosoConfig"),vet.forEach(t),Rro=r(tLe," (YOSO model)"),tLe.forEach(t),L.forEach(t),Pro=i(tt),T(Gg.$$.fragment,tt),tt.forEach(t),Bro=i(rt),Og=n(rt,"DIV",{class:!0});var TVe=s(Og);T($L.$$.fragment,TVe),Iro=i(TVe),une=n(TVe,"P",{});var Fet=s(une);Nro=r(Fet,"Register a new configuration for this class."),Fet.forEach(t),TVe.forEach(t),rt.forEach(t),MGe=i(f),ki=n(f,"H2",{class:!0});var MVe=s(ki);Vg=n(MVe,"A",{id:!0,class:!0,href:!0});var Tet=s(Vg);_ne=n(Tet,"SPAN",{});var Met=s(_ne);T(kL.$$.fragment,Met),Met.forEach(t),Tet.forEach(t),qro=i(MVe),bne=n(MVe,"SPAN",{});var Eet=s(bne);jro=r(Eet,"AutoTokenizer"),Eet.forEach(t),MVe.forEach(t),EGe=i(f),Ao=n(f,"DIV",{class:!0});var Ws=s(Ao);T(SL.$$.fragment,Ws),Dro=i(Ws),RL=n(Ws,"P",{});var EVe=s(RL);Gro=r(EVe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),dP=n(EVe,"A",{href:!0});var Cet=s(dP);Oro=r(Cet,"AutoTokenizer.from_pretrained()"),Cet.forEach(t),Vro=r(EVe," class method."),EVe.forEach(t),Xro=i(Ws),PL=n(Ws,"P",{});var CVe=s(PL);zro=r(CVe,"This class cannot be instantiated directly using "),vne=n(CVe,"CODE",{});var wet=s(vne);Wro=r(wet,"__init__()"),wet.forEach(t),Qro=r(CVe," (throws an error)."),CVe.forEach(t),Hro=i(Ws),Ar=n(Ws,"DIV",{class:!0});var Qs=s(Ar);T(BL.$$.fragment,Qs),Uro=i(Qs),Fne=n(Qs,"P",{});var Aet=s(Fne);Jro=r(Aet,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Aet.forEach(t),Yro=i(Qs),$a=n(Qs,"P",{});var EA=s($a);Kro=r(EA,"The tokenizer class to instantiate is selected based on the "),Tne=n(EA,"CODE",{});var Let=s(Tne);Zro=r(Let,"model_type"),Let.forEach(t),eto=r(EA,` property of the config object (either
passed as an argument or loaded from `),Mne=n(EA,"CODE",{});var yet=s(Mne);oto=r(yet,"pretrained_model_name_or_path"),yet.forEach(t),rto=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ene=n(EA,"CODE",{});var xet=s(Ene);tto=r(xet,"pretrained_model_name_or_path"),xet.forEach(t),ato=r(EA,":"),EA.forEach(t),nto=i(Qs),k=n(Qs,"UL",{});var S=s(k);Nn=n(S,"LI",{});var G$=s(Nn);Cne=n(G$,"STRONG",{});var $et=s(Cne);sto=r($et,"albert"),$et.forEach(t),lto=r(G$," \u2014 "),cP=n(G$,"A",{href:!0});var ket=s(cP);ito=r(ket,"AlbertTokenizer"),ket.forEach(t),dto=r(G$," or "),fP=n(G$,"A",{href:!0});var Set=s(fP);cto=r(Set,"AlbertTokenizerFast"),Set.forEach(t),fto=r(G$," (ALBERT model)"),G$.forEach(t),mto=i(S),qn=n(S,"LI",{});var O$=s(qn);wne=n(O$,"STRONG",{});var Ret=s(wne);gto=r(Ret,"bart"),Ret.forEach(t),hto=r(O$," \u2014 "),mP=n(O$,"A",{href:!0});var Pet=s(mP);pto=r(Pet,"BartTokenizer"),Pet.forEach(t),uto=r(O$," or "),gP=n(O$,"A",{href:!0});var Bet=s(gP);_to=r(Bet,"BartTokenizerFast"),Bet.forEach(t),bto=r(O$," (BART model)"),O$.forEach(t),vto=i(S),jn=n(S,"LI",{});var V$=s(jn);Ane=n(V$,"STRONG",{});var Iet=s(Ane);Fto=r(Iet,"barthez"),Iet.forEach(t),Tto=r(V$," \u2014 "),hP=n(V$,"A",{href:!0});var Net=s(hP);Mto=r(Net,"BarthezTokenizer"),Net.forEach(t),Eto=r(V$," or "),pP=n(V$,"A",{href:!0});var qet=s(pP);Cto=r(qet,"BarthezTokenizerFast"),qet.forEach(t),wto=r(V$," (BARThez model)"),V$.forEach(t),Ato=i(S),Xg=n(S,"LI",{});var aLe=s(Xg);Lne=n(aLe,"STRONG",{});var jet=s(Lne);Lto=r(jet,"bartpho"),jet.forEach(t),yto=r(aLe," \u2014 "),uP=n(aLe,"A",{href:!0});var Det=s(uP);xto=r(Det,"BartphoTokenizer"),Det.forEach(t),$to=r(aLe," (BARTpho model)"),aLe.forEach(t),kto=i(S),Dn=n(S,"LI",{});var X$=s(Dn);yne=n(X$,"STRONG",{});var Get=s(yne);Sto=r(Get,"bert"),Get.forEach(t),Rto=r(X$," \u2014 "),_P=n(X$,"A",{href:!0});var Oet=s(_P);Pto=r(Oet,"BertTokenizer"),Oet.forEach(t),Bto=r(X$," or "),bP=n(X$,"A",{href:!0});var Vet=s(bP);Ito=r(Vet,"BertTokenizerFast"),Vet.forEach(t),Nto=r(X$," (BERT model)"),X$.forEach(t),qto=i(S),zg=n(S,"LI",{});var nLe=s(zg);xne=n(nLe,"STRONG",{});var Xet=s(xne);jto=r(Xet,"bert-generation"),Xet.forEach(t),Dto=r(nLe," \u2014 "),vP=n(nLe,"A",{href:!0});var zet=s(vP);Gto=r(zet,"BertGenerationTokenizer"),zet.forEach(t),Oto=r(nLe," (Bert Generation model)"),nLe.forEach(t),Vto=i(S),Wg=n(S,"LI",{});var sLe=s(Wg);$ne=n(sLe,"STRONG",{});var Wet=s($ne);Xto=r(Wet,"bert-japanese"),Wet.forEach(t),zto=r(sLe," \u2014 "),FP=n(sLe,"A",{href:!0});var Qet=s(FP);Wto=r(Qet,"BertJapaneseTokenizer"),Qet.forEach(t),Qto=r(sLe," (BertJapanese model)"),sLe.forEach(t),Hto=i(S),Qg=n(S,"LI",{});var lLe=s(Qg);kne=n(lLe,"STRONG",{});var Het=s(kne);Uto=r(Het,"bertweet"),Het.forEach(t),Jto=r(lLe," \u2014 "),TP=n(lLe,"A",{href:!0});var Uet=s(TP);Yto=r(Uet,"BertweetTokenizer"),Uet.forEach(t),Kto=r(lLe," (BERTweet model)"),lLe.forEach(t),Zto=i(S),Gn=n(S,"LI",{});var z$=s(Gn);Sne=n(z$,"STRONG",{});var Jet=s(Sne);eao=r(Jet,"big_bird"),Jet.forEach(t),oao=r(z$," \u2014 "),MP=n(z$,"A",{href:!0});var Yet=s(MP);rao=r(Yet,"BigBirdTokenizer"),Yet.forEach(t),tao=r(z$," or "),EP=n(z$,"A",{href:!0});var Ket=s(EP);aao=r(Ket,"BigBirdTokenizerFast"),Ket.forEach(t),nao=r(z$," (BigBird model)"),z$.forEach(t),sao=i(S),On=n(S,"LI",{});var W$=s(On);Rne=n(W$,"STRONG",{});var Zet=s(Rne);lao=r(Zet,"bigbird_pegasus"),Zet.forEach(t),iao=r(W$," \u2014 "),CP=n(W$,"A",{href:!0});var eot=s(CP);dao=r(eot,"PegasusTokenizer"),eot.forEach(t),cao=r(W$," or "),wP=n(W$,"A",{href:!0});var oot=s(wP);fao=r(oot,"PegasusTokenizerFast"),oot.forEach(t),mao=r(W$," (BigBird-Pegasus model)"),W$.forEach(t),gao=i(S),Vn=n(S,"LI",{});var Q$=s(Vn);Pne=n(Q$,"STRONG",{});var rot=s(Pne);hao=r(rot,"blenderbot"),rot.forEach(t),pao=r(Q$," \u2014 "),AP=n(Q$,"A",{href:!0});var tot=s(AP);uao=r(tot,"BlenderbotTokenizer"),tot.forEach(t),_ao=r(Q$," or "),LP=n(Q$,"A",{href:!0});var aot=s(LP);bao=r(aot,"BlenderbotTokenizerFast"),aot.forEach(t),vao=r(Q$," (Blenderbot model)"),Q$.forEach(t),Fao=i(S),Hg=n(S,"LI",{});var iLe=s(Hg);Bne=n(iLe,"STRONG",{});var not=s(Bne);Tao=r(not,"blenderbot-small"),not.forEach(t),Mao=r(iLe," \u2014 "),yP=n(iLe,"A",{href:!0});var sot=s(yP);Eao=r(sot,"BlenderbotSmallTokenizer"),sot.forEach(t),Cao=r(iLe," (BlenderbotSmall model)"),iLe.forEach(t),wao=i(S),Ug=n(S,"LI",{});var dLe=s(Ug);Ine=n(dLe,"STRONG",{});var lot=s(Ine);Aao=r(lot,"bloom"),lot.forEach(t),Lao=r(dLe," \u2014 "),xP=n(dLe,"A",{href:!0});var iot=s(xP);yao=r(iot,"BloomTokenizerFast"),iot.forEach(t),xao=r(dLe," (BLOOM model)"),dLe.forEach(t),$ao=i(S),Jg=n(S,"LI",{});var cLe=s(Jg);Nne=n(cLe,"STRONG",{});var dot=s(Nne);kao=r(dot,"byt5"),dot.forEach(t),Sao=r(cLe," \u2014 "),$P=n(cLe,"A",{href:!0});var cot=s($P);Rao=r(cot,"ByT5Tokenizer"),cot.forEach(t),Pao=r(cLe," (ByT5 model)"),cLe.forEach(t),Bao=i(S),Xn=n(S,"LI",{});var H$=s(Xn);qne=n(H$,"STRONG",{});var fot=s(qne);Iao=r(fot,"camembert"),fot.forEach(t),Nao=r(H$," \u2014 "),kP=n(H$,"A",{href:!0});var mot=s(kP);qao=r(mot,"CamembertTokenizer"),mot.forEach(t),jao=r(H$," or "),SP=n(H$,"A",{href:!0});var got=s(SP);Dao=r(got,"CamembertTokenizerFast"),got.forEach(t),Gao=r(H$," (CamemBERT model)"),H$.forEach(t),Oao=i(S),Yg=n(S,"LI",{});var fLe=s(Yg);jne=n(fLe,"STRONG",{});var hot=s(jne);Vao=r(hot,"canine"),hot.forEach(t),Xao=r(fLe," \u2014 "),RP=n(fLe,"A",{href:!0});var pot=s(RP);zao=r(pot,"CanineTokenizer"),pot.forEach(t),Wao=r(fLe," (CANINE model)"),fLe.forEach(t),Qao=i(S),zn=n(S,"LI",{});var U$=s(zn);Dne=n(U$,"STRONG",{});var uot=s(Dne);Hao=r(uot,"clip"),uot.forEach(t),Uao=r(U$," \u2014 "),PP=n(U$,"A",{href:!0});var _ot=s(PP);Jao=r(_ot,"CLIPTokenizer"),_ot.forEach(t),Yao=r(U$," or "),BP=n(U$,"A",{href:!0});var bot=s(BP);Kao=r(bot,"CLIPTokenizerFast"),bot.forEach(t),Zao=r(U$," (CLIP model)"),U$.forEach(t),eno=i(S),Wn=n(S,"LI",{});var J$=s(Wn);Gne=n(J$,"STRONG",{});var vot=s(Gne);ono=r(vot,"codegen"),vot.forEach(t),rno=r(J$," \u2014 "),IP=n(J$,"A",{href:!0});var Fot=s(IP);tno=r(Fot,"CodeGenTokenizer"),Fot.forEach(t),ano=r(J$," or "),NP=n(J$,"A",{href:!0});var Tot=s(NP);nno=r(Tot,"CodeGenTokenizerFast"),Tot.forEach(t),sno=r(J$," (CodeGen model)"),J$.forEach(t),lno=i(S),Qn=n(S,"LI",{});var Y$=s(Qn);One=n(Y$,"STRONG",{});var Mot=s(One);ino=r(Mot,"convbert"),Mot.forEach(t),dno=r(Y$," \u2014 "),qP=n(Y$,"A",{href:!0});var Eot=s(qP);cno=r(Eot,"ConvBertTokenizer"),Eot.forEach(t),fno=r(Y$," or "),jP=n(Y$,"A",{href:!0});var Cot=s(jP);mno=r(Cot,"ConvBertTokenizerFast"),Cot.forEach(t),gno=r(Y$," (ConvBERT model)"),Y$.forEach(t),hno=i(S),Hn=n(S,"LI",{});var K$=s(Hn);Vne=n(K$,"STRONG",{});var wot=s(Vne);pno=r(wot,"cpm"),wot.forEach(t),uno=r(K$," \u2014 "),DP=n(K$,"A",{href:!0});var Aot=s(DP);_no=r(Aot,"CpmTokenizer"),Aot.forEach(t),bno=r(K$," or "),GP=n(K$,"A",{href:!0});var Lot=s(GP);vno=r(Lot,"CpmTokenizerFast"),Lot.forEach(t),Fno=r(K$," (CPM model)"),K$.forEach(t),Tno=i(S),Kg=n(S,"LI",{});var mLe=s(Kg);Xne=n(mLe,"STRONG",{});var yot=s(Xne);Mno=r(yot,"ctrl"),yot.forEach(t),Eno=r(mLe," \u2014 "),OP=n(mLe,"A",{href:!0});var xot=s(OP);Cno=r(xot,"CTRLTokenizer"),xot.forEach(t),wno=r(mLe," (CTRL model)"),mLe.forEach(t),Ano=i(S),Un=n(S,"LI",{});var Z$=s(Un);zne=n(Z$,"STRONG",{});var $ot=s(zne);Lno=r($ot,"data2vec-text"),$ot.forEach(t),yno=r(Z$," \u2014 "),VP=n(Z$,"A",{href:!0});var kot=s(VP);xno=r(kot,"RobertaTokenizer"),kot.forEach(t),$no=r(Z$," or "),XP=n(Z$,"A",{href:!0});var Sot=s(XP);kno=r(Sot,"RobertaTokenizerFast"),Sot.forEach(t),Sno=r(Z$," (Data2VecText model)"),Z$.forEach(t),Rno=i(S),Jn=n(S,"LI",{});var ek=s(Jn);Wne=n(ek,"STRONG",{});var Rot=s(Wne);Pno=r(Rot,"deberta"),Rot.forEach(t),Bno=r(ek," \u2014 "),zP=n(ek,"A",{href:!0});var Pot=s(zP);Ino=r(Pot,"DebertaTokenizer"),Pot.forEach(t),Nno=r(ek," or "),WP=n(ek,"A",{href:!0});var Bot=s(WP);qno=r(Bot,"DebertaTokenizerFast"),Bot.forEach(t),jno=r(ek," (DeBERTa model)"),ek.forEach(t),Dno=i(S),Yn=n(S,"LI",{});var ok=s(Yn);Qne=n(ok,"STRONG",{});var Iot=s(Qne);Gno=r(Iot,"deberta-v2"),Iot.forEach(t),Ono=r(ok," \u2014 "),QP=n(ok,"A",{href:!0});var Not=s(QP);Vno=r(Not,"DebertaV2Tokenizer"),Not.forEach(t),Xno=r(ok," or "),HP=n(ok,"A",{href:!0});var qot=s(HP);zno=r(qot,"DebertaV2TokenizerFast"),qot.forEach(t),Wno=r(ok," (DeBERTa-v2 model)"),ok.forEach(t),Qno=i(S),Kn=n(S,"LI",{});var rk=s(Kn);Hne=n(rk,"STRONG",{});var jot=s(Hne);Hno=r(jot,"distilbert"),jot.forEach(t),Uno=r(rk," \u2014 "),UP=n(rk,"A",{href:!0});var Dot=s(UP);Jno=r(Dot,"DistilBertTokenizer"),Dot.forEach(t),Yno=r(rk," or "),JP=n(rk,"A",{href:!0});var Got=s(JP);Kno=r(Got,"DistilBertTokenizerFast"),Got.forEach(t),Zno=r(rk," (DistilBERT model)"),rk.forEach(t),eso=i(S),Zn=n(S,"LI",{});var tk=s(Zn);Une=n(tk,"STRONG",{});var Oot=s(Une);oso=r(Oot,"dpr"),Oot.forEach(t),rso=r(tk," \u2014 "),YP=n(tk,"A",{href:!0});var Vot=s(YP);tso=r(Vot,"DPRQuestionEncoderTokenizer"),Vot.forEach(t),aso=r(tk," or "),KP=n(tk,"A",{href:!0});var Xot=s(KP);nso=r(Xot,"DPRQuestionEncoderTokenizerFast"),Xot.forEach(t),sso=r(tk," (DPR model)"),tk.forEach(t),lso=i(S),es=n(S,"LI",{});var ak=s(es);Jne=n(ak,"STRONG",{});var zot=s(Jne);iso=r(zot,"electra"),zot.forEach(t),dso=r(ak," \u2014 "),ZP=n(ak,"A",{href:!0});var Wot=s(ZP);cso=r(Wot,"ElectraTokenizer"),Wot.forEach(t),fso=r(ak," or "),eB=n(ak,"A",{href:!0});var Qot=s(eB);mso=r(Qot,"ElectraTokenizerFast"),Qot.forEach(t),gso=r(ak," (ELECTRA model)"),ak.forEach(t),hso=i(S),Zg=n(S,"LI",{});var gLe=s(Zg);Yne=n(gLe,"STRONG",{});var Hot=s(Yne);pso=r(Hot,"flaubert"),Hot.forEach(t),uso=r(gLe," \u2014 "),oB=n(gLe,"A",{href:!0});var Uot=s(oB);_so=r(Uot,"FlaubertTokenizer"),Uot.forEach(t),bso=r(gLe," (FlauBERT model)"),gLe.forEach(t),vso=i(S),os=n(S,"LI",{});var nk=s(os);Kne=n(nk,"STRONG",{});var Jot=s(Kne);Fso=r(Jot,"fnet"),Jot.forEach(t),Tso=r(nk," \u2014 "),rB=n(nk,"A",{href:!0});var Yot=s(rB);Mso=r(Yot,"FNetTokenizer"),Yot.forEach(t),Eso=r(nk," or "),tB=n(nk,"A",{href:!0});var Kot=s(tB);Cso=r(Kot,"FNetTokenizerFast"),Kot.forEach(t),wso=r(nk," (FNet model)"),nk.forEach(t),Aso=i(S),eh=n(S,"LI",{});var hLe=s(eh);Zne=n(hLe,"STRONG",{});var Zot=s(Zne);Lso=r(Zot,"fsmt"),Zot.forEach(t),yso=r(hLe," \u2014 "),aB=n(hLe,"A",{href:!0});var ert=s(aB);xso=r(ert,"FSMTTokenizer"),ert.forEach(t),$so=r(hLe," (FairSeq Machine-Translation model)"),hLe.forEach(t),kso=i(S),rs=n(S,"LI",{});var sk=s(rs);ese=n(sk,"STRONG",{});var ort=s(ese);Sso=r(ort,"funnel"),ort.forEach(t),Rso=r(sk," \u2014 "),nB=n(sk,"A",{href:!0});var rrt=s(nB);Pso=r(rrt,"FunnelTokenizer"),rrt.forEach(t),Bso=r(sk," or "),sB=n(sk,"A",{href:!0});var trt=s(sB);Iso=r(trt,"FunnelTokenizerFast"),trt.forEach(t),Nso=r(sk," (Funnel Transformer model)"),sk.forEach(t),qso=i(S),ts=n(S,"LI",{});var lk=s(ts);ose=n(lk,"STRONG",{});var art=s(ose);jso=r(art,"gpt2"),art.forEach(t),Dso=r(lk," \u2014 "),lB=n(lk,"A",{href:!0});var nrt=s(lB);Gso=r(nrt,"GPT2Tokenizer"),nrt.forEach(t),Oso=r(lk," or "),iB=n(lk,"A",{href:!0});var srt=s(iB);Vso=r(srt,"GPT2TokenizerFast"),srt.forEach(t),Xso=r(lk," (OpenAI GPT-2 model)"),lk.forEach(t),zso=i(S),as=n(S,"LI",{});var ik=s(as);rse=n(ik,"STRONG",{});var lrt=s(rse);Wso=r(lrt,"gpt_neo"),lrt.forEach(t),Qso=r(ik," \u2014 "),dB=n(ik,"A",{href:!0});var irt=s(dB);Hso=r(irt,"GPT2Tokenizer"),irt.forEach(t),Uso=r(ik," or "),cB=n(ik,"A",{href:!0});var drt=s(cB);Jso=r(drt,"GPT2TokenizerFast"),drt.forEach(t),Yso=r(ik," (GPT Neo model)"),ik.forEach(t),Kso=i(S),oh=n(S,"LI",{});var pLe=s(oh);tse=n(pLe,"STRONG",{});var crt=s(tse);Zso=r(crt,"gpt_neox"),crt.forEach(t),elo=r(pLe," \u2014 "),fB=n(pLe,"A",{href:!0});var frt=s(fB);olo=r(frt,"GPTNeoXTokenizerFast"),frt.forEach(t),rlo=r(pLe," (GPT NeoX model)"),pLe.forEach(t),tlo=i(S),ns=n(S,"LI",{});var dk=s(ns);ase=n(dk,"STRONG",{});var mrt=s(ase);alo=r(mrt,"gptj"),mrt.forEach(t),nlo=r(dk," \u2014 "),mB=n(dk,"A",{href:!0});var grt=s(mB);slo=r(grt,"GPT2Tokenizer"),grt.forEach(t),llo=r(dk," or "),gB=n(dk,"A",{href:!0});var hrt=s(gB);ilo=r(hrt,"GPT2TokenizerFast"),hrt.forEach(t),dlo=r(dk," (GPT-J model)"),dk.forEach(t),clo=i(S),ss=n(S,"LI",{});var ck=s(ss);nse=n(ck,"STRONG",{});var prt=s(nse);flo=r(prt,"herbert"),prt.forEach(t),mlo=r(ck," \u2014 "),hB=n(ck,"A",{href:!0});var urt=s(hB);glo=r(urt,"HerbertTokenizer"),urt.forEach(t),hlo=r(ck," or "),pB=n(ck,"A",{href:!0});var _rt=s(pB);plo=r(_rt,"HerbertTokenizerFast"),_rt.forEach(t),ulo=r(ck," (HerBERT model)"),ck.forEach(t),_lo=i(S),rh=n(S,"LI",{});var uLe=s(rh);sse=n(uLe,"STRONG",{});var brt=s(sse);blo=r(brt,"hubert"),brt.forEach(t),vlo=r(uLe," \u2014 "),uB=n(uLe,"A",{href:!0});var vrt=s(uB);Flo=r(vrt,"Wav2Vec2CTCTokenizer"),vrt.forEach(t),Tlo=r(uLe," (Hubert model)"),uLe.forEach(t),Mlo=i(S),ls=n(S,"LI",{});var fk=s(ls);lse=n(fk,"STRONG",{});var Frt=s(lse);Elo=r(Frt,"ibert"),Frt.forEach(t),Clo=r(fk," \u2014 "),_B=n(fk,"A",{href:!0});var Trt=s(_B);wlo=r(Trt,"RobertaTokenizer"),Trt.forEach(t),Alo=r(fk," or "),bB=n(fk,"A",{href:!0});var Mrt=s(bB);Llo=r(Mrt,"RobertaTokenizerFast"),Mrt.forEach(t),ylo=r(fk," (I-BERT model)"),fk.forEach(t),xlo=i(S),is=n(S,"LI",{});var mk=s(is);ise=n(mk,"STRONG",{});var Ert=s(ise);$lo=r(Ert,"layoutlm"),Ert.forEach(t),klo=r(mk," \u2014 "),vB=n(mk,"A",{href:!0});var Crt=s(vB);Slo=r(Crt,"LayoutLMTokenizer"),Crt.forEach(t),Rlo=r(mk," or "),FB=n(mk,"A",{href:!0});var wrt=s(FB);Plo=r(wrt,"LayoutLMTokenizerFast"),wrt.forEach(t),Blo=r(mk," (LayoutLM model)"),mk.forEach(t),Ilo=i(S),ds=n(S,"LI",{});var gk=s(ds);dse=n(gk,"STRONG",{});var Art=s(dse);Nlo=r(Art,"layoutlmv2"),Art.forEach(t),qlo=r(gk," \u2014 "),TB=n(gk,"A",{href:!0});var Lrt=s(TB);jlo=r(Lrt,"LayoutLMv2Tokenizer"),Lrt.forEach(t),Dlo=r(gk," or "),MB=n(gk,"A",{href:!0});var yrt=s(MB);Glo=r(yrt,"LayoutLMv2TokenizerFast"),yrt.forEach(t),Olo=r(gk," (LayoutLMv2 model)"),gk.forEach(t),Vlo=i(S),cs=n(S,"LI",{});var hk=s(cs);cse=n(hk,"STRONG",{});var xrt=s(cse);Xlo=r(xrt,"layoutlmv3"),xrt.forEach(t),zlo=r(hk," \u2014 "),EB=n(hk,"A",{href:!0});var $rt=s(EB);Wlo=r($rt,"LayoutLMv3Tokenizer"),$rt.forEach(t),Qlo=r(hk," or "),CB=n(hk,"A",{href:!0});var krt=s(CB);Hlo=r(krt,"LayoutLMv3TokenizerFast"),krt.forEach(t),Ulo=r(hk," (LayoutLMv3 model)"),hk.forEach(t),Jlo=i(S),fs=n(S,"LI",{});var pk=s(fs);fse=n(pk,"STRONG",{});var Srt=s(fse);Ylo=r(Srt,"layoutxlm"),Srt.forEach(t),Klo=r(pk," \u2014 "),wB=n(pk,"A",{href:!0});var Rrt=s(wB);Zlo=r(Rrt,"LayoutXLMTokenizer"),Rrt.forEach(t),eio=r(pk," or "),AB=n(pk,"A",{href:!0});var Prt=s(AB);oio=r(Prt,"LayoutXLMTokenizerFast"),Prt.forEach(t),rio=r(pk," (LayoutXLM model)"),pk.forEach(t),tio=i(S),ms=n(S,"LI",{});var uk=s(ms);mse=n(uk,"STRONG",{});var Brt=s(mse);aio=r(Brt,"led"),Brt.forEach(t),nio=r(uk," \u2014 "),LB=n(uk,"A",{href:!0});var Irt=s(LB);sio=r(Irt,"LEDTokenizer"),Irt.forEach(t),lio=r(uk," or "),yB=n(uk,"A",{href:!0});var Nrt=s(yB);iio=r(Nrt,"LEDTokenizerFast"),Nrt.forEach(t),dio=r(uk," (LED model)"),uk.forEach(t),cio=i(S),gs=n(S,"LI",{});var _k=s(gs);gse=n(_k,"STRONG",{});var qrt=s(gse);fio=r(qrt,"longformer"),qrt.forEach(t),mio=r(_k," \u2014 "),xB=n(_k,"A",{href:!0});var jrt=s(xB);gio=r(jrt,"LongformerTokenizer"),jrt.forEach(t),hio=r(_k," or "),$B=n(_k,"A",{href:!0});var Drt=s($B);pio=r(Drt,"LongformerTokenizerFast"),Drt.forEach(t),uio=r(_k," (Longformer model)"),_k.forEach(t),_io=i(S),hs=n(S,"LI",{});var bk=s(hs);hse=n(bk,"STRONG",{});var Grt=s(hse);bio=r(Grt,"longt5"),Grt.forEach(t),vio=r(bk," \u2014 "),kB=n(bk,"A",{href:!0});var Ort=s(kB);Fio=r(Ort,"T5Tokenizer"),Ort.forEach(t),Tio=r(bk," or "),SB=n(bk,"A",{href:!0});var Vrt=s(SB);Mio=r(Vrt,"T5TokenizerFast"),Vrt.forEach(t),Eio=r(bk," (LongT5 model)"),bk.forEach(t),Cio=i(S),th=n(S,"LI",{});var _Le=s(th);pse=n(_Le,"STRONG",{});var Xrt=s(pse);wio=r(Xrt,"luke"),Xrt.forEach(t),Aio=r(_Le," \u2014 "),RB=n(_Le,"A",{href:!0});var zrt=s(RB);Lio=r(zrt,"LukeTokenizer"),zrt.forEach(t),yio=r(_Le," (LUKE model)"),_Le.forEach(t),xio=i(S),ps=n(S,"LI",{});var vk=s(ps);use=n(vk,"STRONG",{});var Wrt=s(use);$io=r(Wrt,"lxmert"),Wrt.forEach(t),kio=r(vk," \u2014 "),PB=n(vk,"A",{href:!0});var Qrt=s(PB);Sio=r(Qrt,"LxmertTokenizer"),Qrt.forEach(t),Rio=r(vk," or "),BB=n(vk,"A",{href:!0});var Hrt=s(BB);Pio=r(Hrt,"LxmertTokenizerFast"),Hrt.forEach(t),Bio=r(vk," (LXMERT model)"),vk.forEach(t),Iio=i(S),ah=n(S,"LI",{});var bLe=s(ah);_se=n(bLe,"STRONG",{});var Urt=s(_se);Nio=r(Urt,"m2m_100"),Urt.forEach(t),qio=r(bLe," \u2014 "),IB=n(bLe,"A",{href:!0});var Jrt=s(IB);jio=r(Jrt,"M2M100Tokenizer"),Jrt.forEach(t),Dio=r(bLe," (M2M100 model)"),bLe.forEach(t),Gio=i(S),nh=n(S,"LI",{});var vLe=s(nh);bse=n(vLe,"STRONG",{});var Yrt=s(bse);Oio=r(Yrt,"marian"),Yrt.forEach(t),Vio=r(vLe," \u2014 "),NB=n(vLe,"A",{href:!0});var Krt=s(NB);Xio=r(Krt,"MarianTokenizer"),Krt.forEach(t),zio=r(vLe," (Marian model)"),vLe.forEach(t),Wio=i(S),us=n(S,"LI",{});var Fk=s(us);vse=n(Fk,"STRONG",{});var Zrt=s(vse);Qio=r(Zrt,"mbart"),Zrt.forEach(t),Hio=r(Fk," \u2014 "),qB=n(Fk,"A",{href:!0});var ett=s(qB);Uio=r(ett,"MBartTokenizer"),ett.forEach(t),Jio=r(Fk," or "),jB=n(Fk,"A",{href:!0});var ott=s(jB);Yio=r(ott,"MBartTokenizerFast"),ott.forEach(t),Kio=r(Fk," (mBART model)"),Fk.forEach(t),Zio=i(S),_s=n(S,"LI",{});var Tk=s(_s);Fse=n(Tk,"STRONG",{});var rtt=s(Fse);edo=r(rtt,"mbart50"),rtt.forEach(t),odo=r(Tk," \u2014 "),DB=n(Tk,"A",{href:!0});var ttt=s(DB);rdo=r(ttt,"MBart50Tokenizer"),ttt.forEach(t),tdo=r(Tk," or "),GB=n(Tk,"A",{href:!0});var att=s(GB);ado=r(att,"MBart50TokenizerFast"),att.forEach(t),ndo=r(Tk," (mBART-50 model)"),Tk.forEach(t),sdo=i(S),bs=n(S,"LI",{});var Mk=s(bs);Tse=n(Mk,"STRONG",{});var ntt=s(Tse);ldo=r(ntt,"megatron-bert"),ntt.forEach(t),ido=r(Mk," \u2014 "),OB=n(Mk,"A",{href:!0});var stt=s(OB);ddo=r(stt,"BertTokenizer"),stt.forEach(t),cdo=r(Mk," or "),VB=n(Mk,"A",{href:!0});var ltt=s(VB);fdo=r(ltt,"BertTokenizerFast"),ltt.forEach(t),mdo=r(Mk," (Megatron-BERT model)"),Mk.forEach(t),gdo=i(S),sh=n(S,"LI",{});var FLe=s(sh);Mse=n(FLe,"STRONG",{});var itt=s(Mse);hdo=r(itt,"mluke"),itt.forEach(t),pdo=r(FLe," \u2014 "),XB=n(FLe,"A",{href:!0});var dtt=s(XB);udo=r(dtt,"MLukeTokenizer"),dtt.forEach(t),_do=r(FLe," (mLUKE model)"),FLe.forEach(t),bdo=i(S),vs=n(S,"LI",{});var Ek=s(vs);Ese=n(Ek,"STRONG",{});var ctt=s(Ese);vdo=r(ctt,"mobilebert"),ctt.forEach(t),Fdo=r(Ek," \u2014 "),zB=n(Ek,"A",{href:!0});var ftt=s(zB);Tdo=r(ftt,"MobileBertTokenizer"),ftt.forEach(t),Mdo=r(Ek," or "),WB=n(Ek,"A",{href:!0});var mtt=s(WB);Edo=r(mtt,"MobileBertTokenizerFast"),mtt.forEach(t),Cdo=r(Ek," (MobileBERT model)"),Ek.forEach(t),wdo=i(S),Fs=n(S,"LI",{});var Ck=s(Fs);Cse=n(Ck,"STRONG",{});var gtt=s(Cse);Ado=r(gtt,"mpnet"),gtt.forEach(t),Ldo=r(Ck," \u2014 "),QB=n(Ck,"A",{href:!0});var htt=s(QB);ydo=r(htt,"MPNetTokenizer"),htt.forEach(t),xdo=r(Ck," or "),HB=n(Ck,"A",{href:!0});var ptt=s(HB);$do=r(ptt,"MPNetTokenizerFast"),ptt.forEach(t),kdo=r(Ck," (MPNet model)"),Ck.forEach(t),Sdo=i(S),Ts=n(S,"LI",{});var wk=s(Ts);wse=n(wk,"STRONG",{});var utt=s(wse);Rdo=r(utt,"mt5"),utt.forEach(t),Pdo=r(wk," \u2014 "),UB=n(wk,"A",{href:!0});var _tt=s(UB);Bdo=r(_tt,"MT5Tokenizer"),_tt.forEach(t),Ido=r(wk," or "),JB=n(wk,"A",{href:!0});var btt=s(JB);Ndo=r(btt,"MT5TokenizerFast"),btt.forEach(t),qdo=r(wk," (MT5 model)"),wk.forEach(t),jdo=i(S),Ms=n(S,"LI",{});var Ak=s(Ms);Ase=n(Ak,"STRONG",{});var vtt=s(Ase);Ddo=r(vtt,"nystromformer"),vtt.forEach(t),Gdo=r(Ak," \u2014 "),YB=n(Ak,"A",{href:!0});var Ftt=s(YB);Odo=r(Ftt,"AlbertTokenizer"),Ftt.forEach(t),Vdo=r(Ak," or "),KB=n(Ak,"A",{href:!0});var Ttt=s(KB);Xdo=r(Ttt,"AlbertTokenizerFast"),Ttt.forEach(t),zdo=r(Ak," (Nystr\xF6mformer model)"),Ak.forEach(t),Wdo=i(S),Es=n(S,"LI",{});var Lk=s(Es);Lse=n(Lk,"STRONG",{});var Mtt=s(Lse);Qdo=r(Mtt,"openai-gpt"),Mtt.forEach(t),Hdo=r(Lk," \u2014 "),ZB=n(Lk,"A",{href:!0});var Ett=s(ZB);Udo=r(Ett,"OpenAIGPTTokenizer"),Ett.forEach(t),Jdo=r(Lk," or "),eI=n(Lk,"A",{href:!0});var Ctt=s(eI);Ydo=r(Ctt,"OpenAIGPTTokenizerFast"),Ctt.forEach(t),Kdo=r(Lk," (OpenAI GPT model)"),Lk.forEach(t),Zdo=i(S),lh=n(S,"LI",{});var TLe=s(lh);yse=n(TLe,"STRONG",{});var wtt=s(yse);eco=r(wtt,"opt"),wtt.forEach(t),oco=r(TLe," \u2014 "),oI=n(TLe,"A",{href:!0});var Att=s(oI);rco=r(Att,"GPT2Tokenizer"),Att.forEach(t),tco=r(TLe," (OPT model)"),TLe.forEach(t),aco=i(S),Cs=n(S,"LI",{});var yk=s(Cs);xse=n(yk,"STRONG",{});var Ltt=s(xse);nco=r(Ltt,"pegasus"),Ltt.forEach(t),sco=r(yk," \u2014 "),rI=n(yk,"A",{href:!0});var ytt=s(rI);lco=r(ytt,"PegasusTokenizer"),ytt.forEach(t),ico=r(yk," or "),tI=n(yk,"A",{href:!0});var xtt=s(tI);dco=r(xtt,"PegasusTokenizerFast"),xtt.forEach(t),cco=r(yk," (Pegasus model)"),yk.forEach(t),fco=i(S),ih=n(S,"LI",{});var MLe=s(ih);$se=n(MLe,"STRONG",{});var $tt=s($se);mco=r($tt,"perceiver"),$tt.forEach(t),gco=r(MLe," \u2014 "),aI=n(MLe,"A",{href:!0});var ktt=s(aI);hco=r(ktt,"PerceiverTokenizer"),ktt.forEach(t),pco=r(MLe," (Perceiver model)"),MLe.forEach(t),uco=i(S),dh=n(S,"LI",{});var ELe=s(dh);kse=n(ELe,"STRONG",{});var Stt=s(kse);_co=r(Stt,"phobert"),Stt.forEach(t),bco=r(ELe," \u2014 "),nI=n(ELe,"A",{href:!0});var Rtt=s(nI);vco=r(Rtt,"PhobertTokenizer"),Rtt.forEach(t),Fco=r(ELe," (PhoBERT model)"),ELe.forEach(t),Tco=i(S),ch=n(S,"LI",{});var CLe=s(ch);Sse=n(CLe,"STRONG",{});var Ptt=s(Sse);Mco=r(Ptt,"plbart"),Ptt.forEach(t),Eco=r(CLe," \u2014 "),sI=n(CLe,"A",{href:!0});var Btt=s(sI);Cco=r(Btt,"PLBartTokenizer"),Btt.forEach(t),wco=r(CLe," (PLBart model)"),CLe.forEach(t),Aco=i(S),fh=n(S,"LI",{});var wLe=s(fh);Rse=n(wLe,"STRONG",{});var Itt=s(Rse);Lco=r(Itt,"prophetnet"),Itt.forEach(t),yco=r(wLe," \u2014 "),lI=n(wLe,"A",{href:!0});var Ntt=s(lI);xco=r(Ntt,"ProphetNetTokenizer"),Ntt.forEach(t),$co=r(wLe," (ProphetNet model)"),wLe.forEach(t),kco=i(S),ws=n(S,"LI",{});var xk=s(ws);Pse=n(xk,"STRONG",{});var qtt=s(Pse);Sco=r(qtt,"qdqbert"),qtt.forEach(t),Rco=r(xk," \u2014 "),iI=n(xk,"A",{href:!0});var jtt=s(iI);Pco=r(jtt,"BertTokenizer"),jtt.forEach(t),Bco=r(xk," or "),dI=n(xk,"A",{href:!0});var Dtt=s(dI);Ico=r(Dtt,"BertTokenizerFast"),Dtt.forEach(t),Nco=r(xk," (QDQBert model)"),xk.forEach(t),qco=i(S),mh=n(S,"LI",{});var ALe=s(mh);Bse=n(ALe,"STRONG",{});var Gtt=s(Bse);jco=r(Gtt,"rag"),Gtt.forEach(t),Dco=r(ALe," \u2014 "),cI=n(ALe,"A",{href:!0});var Ott=s(cI);Gco=r(Ott,"RagTokenizer"),Ott.forEach(t),Oco=r(ALe," (RAG model)"),ALe.forEach(t),Vco=i(S),As=n(S,"LI",{});var $k=s(As);Ise=n($k,"STRONG",{});var Vtt=s(Ise);Xco=r(Vtt,"realm"),Vtt.forEach(t),zco=r($k," \u2014 "),fI=n($k,"A",{href:!0});var Xtt=s(fI);Wco=r(Xtt,"RealmTokenizer"),Xtt.forEach(t),Qco=r($k," or "),mI=n($k,"A",{href:!0});var ztt=s(mI);Hco=r(ztt,"RealmTokenizerFast"),ztt.forEach(t),Uco=r($k," (REALM model)"),$k.forEach(t),Jco=i(S),Ls=n(S,"LI",{});var kk=s(Ls);Nse=n(kk,"STRONG",{});var Wtt=s(Nse);Yco=r(Wtt,"reformer"),Wtt.forEach(t),Kco=r(kk," \u2014 "),gI=n(kk,"A",{href:!0});var Qtt=s(gI);Zco=r(Qtt,"ReformerTokenizer"),Qtt.forEach(t),efo=r(kk," or "),hI=n(kk,"A",{href:!0});var Htt=s(hI);ofo=r(Htt,"ReformerTokenizerFast"),Htt.forEach(t),rfo=r(kk," (Reformer model)"),kk.forEach(t),tfo=i(S),ys=n(S,"LI",{});var Sk=s(ys);qse=n(Sk,"STRONG",{});var Utt=s(qse);afo=r(Utt,"rembert"),Utt.forEach(t),nfo=r(Sk," \u2014 "),pI=n(Sk,"A",{href:!0});var Jtt=s(pI);sfo=r(Jtt,"RemBertTokenizer"),Jtt.forEach(t),lfo=r(Sk," or "),uI=n(Sk,"A",{href:!0});var Ytt=s(uI);ifo=r(Ytt,"RemBertTokenizerFast"),Ytt.forEach(t),dfo=r(Sk," (RemBERT model)"),Sk.forEach(t),cfo=i(S),xs=n(S,"LI",{});var Rk=s(xs);jse=n(Rk,"STRONG",{});var Ktt=s(jse);ffo=r(Ktt,"retribert"),Ktt.forEach(t),mfo=r(Rk," \u2014 "),_I=n(Rk,"A",{href:!0});var Ztt=s(_I);gfo=r(Ztt,"RetriBertTokenizer"),Ztt.forEach(t),hfo=r(Rk," or "),bI=n(Rk,"A",{href:!0});var eat=s(bI);pfo=r(eat,"RetriBertTokenizerFast"),eat.forEach(t),ufo=r(Rk," (RetriBERT model)"),Rk.forEach(t),_fo=i(S),$s=n(S,"LI",{});var Pk=s($s);Dse=n(Pk,"STRONG",{});var oat=s(Dse);bfo=r(oat,"roberta"),oat.forEach(t),vfo=r(Pk," \u2014 "),vI=n(Pk,"A",{href:!0});var rat=s(vI);Ffo=r(rat,"RobertaTokenizer"),rat.forEach(t),Tfo=r(Pk," or "),FI=n(Pk,"A",{href:!0});var tat=s(FI);Mfo=r(tat,"RobertaTokenizerFast"),tat.forEach(t),Efo=r(Pk," (RoBERTa model)"),Pk.forEach(t),Cfo=i(S),ks=n(S,"LI",{});var Bk=s(ks);Gse=n(Bk,"STRONG",{});var aat=s(Gse);wfo=r(aat,"roformer"),aat.forEach(t),Afo=r(Bk," \u2014 "),TI=n(Bk,"A",{href:!0});var nat=s(TI);Lfo=r(nat,"RoFormerTokenizer"),nat.forEach(t),yfo=r(Bk," or "),MI=n(Bk,"A",{href:!0});var sat=s(MI);xfo=r(sat,"RoFormerTokenizerFast"),sat.forEach(t),$fo=r(Bk," (RoFormer model)"),Bk.forEach(t),kfo=i(S),gh=n(S,"LI",{});var LLe=s(gh);Ose=n(LLe,"STRONG",{});var lat=s(Ose);Sfo=r(lat,"speech_to_text"),lat.forEach(t),Rfo=r(LLe," \u2014 "),EI=n(LLe,"A",{href:!0});var iat=s(EI);Pfo=r(iat,"Speech2TextTokenizer"),iat.forEach(t),Bfo=r(LLe," (Speech2Text model)"),LLe.forEach(t),Ifo=i(S),hh=n(S,"LI",{});var yLe=s(hh);Vse=n(yLe,"STRONG",{});var dat=s(Vse);Nfo=r(dat,"speech_to_text_2"),dat.forEach(t),qfo=r(yLe," \u2014 "),CI=n(yLe,"A",{href:!0});var cat=s(CI);jfo=r(cat,"Speech2Text2Tokenizer"),cat.forEach(t),Dfo=r(yLe," (Speech2Text2 model)"),yLe.forEach(t),Gfo=i(S),Ss=n(S,"LI",{});var Ik=s(Ss);Xse=n(Ik,"STRONG",{});var fat=s(Xse);Ofo=r(fat,"splinter"),fat.forEach(t),Vfo=r(Ik," \u2014 "),wI=n(Ik,"A",{href:!0});var mat=s(wI);Xfo=r(mat,"SplinterTokenizer"),mat.forEach(t),zfo=r(Ik," or "),AI=n(Ik,"A",{href:!0});var gat=s(AI);Wfo=r(gat,"SplinterTokenizerFast"),gat.forEach(t),Qfo=r(Ik," (Splinter model)"),Ik.forEach(t),Hfo=i(S),Rs=n(S,"LI",{});var Nk=s(Rs);zse=n(Nk,"STRONG",{});var hat=s(zse);Ufo=r(hat,"squeezebert"),hat.forEach(t),Jfo=r(Nk," \u2014 "),LI=n(Nk,"A",{href:!0});var pat=s(LI);Yfo=r(pat,"SqueezeBertTokenizer"),pat.forEach(t),Kfo=r(Nk," or "),yI=n(Nk,"A",{href:!0});var uat=s(yI);Zfo=r(uat,"SqueezeBertTokenizerFast"),uat.forEach(t),emo=r(Nk," (SqueezeBERT model)"),Nk.forEach(t),omo=i(S),Ps=n(S,"LI",{});var qk=s(Ps);Wse=n(qk,"STRONG",{});var _at=s(Wse);rmo=r(_at,"t5"),_at.forEach(t),tmo=r(qk," \u2014 "),xI=n(qk,"A",{href:!0});var bat=s(xI);amo=r(bat,"T5Tokenizer"),bat.forEach(t),nmo=r(qk," or "),$I=n(qk,"A",{href:!0});var vat=s($I);smo=r(vat,"T5TokenizerFast"),vat.forEach(t),lmo=r(qk," (T5 model)"),qk.forEach(t),imo=i(S),ph=n(S,"LI",{});var xLe=s(ph);Qse=n(xLe,"STRONG",{});var Fat=s(Qse);dmo=r(Fat,"tapas"),Fat.forEach(t),cmo=r(xLe," \u2014 "),kI=n(xLe,"A",{href:!0});var Tat=s(kI);fmo=r(Tat,"TapasTokenizer"),Tat.forEach(t),mmo=r(xLe," (TAPAS model)"),xLe.forEach(t),gmo=i(S),uh=n(S,"LI",{});var $Le=s(uh);Hse=n($Le,"STRONG",{});var Mat=s(Hse);hmo=r(Mat,"tapex"),Mat.forEach(t),pmo=r($Le," \u2014 "),SI=n($Le,"A",{href:!0});var Eat=s(SI);umo=r(Eat,"TapexTokenizer"),Eat.forEach(t),_mo=r($Le," (TAPEX model)"),$Le.forEach(t),bmo=i(S),_h=n(S,"LI",{});var kLe=s(_h);Use=n(kLe,"STRONG",{});var Cat=s(Use);vmo=r(Cat,"transfo-xl"),Cat.forEach(t),Fmo=r(kLe," \u2014 "),RI=n(kLe,"A",{href:!0});var wat=s(RI);Tmo=r(wat,"TransfoXLTokenizer"),wat.forEach(t),Mmo=r(kLe," (Transformer-XL model)"),kLe.forEach(t),Emo=i(S),Bs=n(S,"LI",{});var jk=s(Bs);Jse=n(jk,"STRONG",{});var Aat=s(Jse);Cmo=r(Aat,"vilt"),Aat.forEach(t),wmo=r(jk," \u2014 "),PI=n(jk,"A",{href:!0});var Lat=s(PI);Amo=r(Lat,"BertTokenizer"),Lat.forEach(t),Lmo=r(jk," or "),BI=n(jk,"A",{href:!0});var yat=s(BI);ymo=r(yat,"BertTokenizerFast"),yat.forEach(t),xmo=r(jk," (ViLT model)"),jk.forEach(t),$mo=i(S),Is=n(S,"LI",{});var Dk=s(Is);Yse=n(Dk,"STRONG",{});var xat=s(Yse);kmo=r(xat,"visual_bert"),xat.forEach(t),Smo=r(Dk," \u2014 "),II=n(Dk,"A",{href:!0});var $at=s(II);Rmo=r($at,"BertTokenizer"),$at.forEach(t),Pmo=r(Dk," or "),NI=n(Dk,"A",{href:!0});var kat=s(NI);Bmo=r(kat,"BertTokenizerFast"),kat.forEach(t),Imo=r(Dk," (VisualBERT model)"),Dk.forEach(t),Nmo=i(S),bh=n(S,"LI",{});var SLe=s(bh);Kse=n(SLe,"STRONG",{});var Sat=s(Kse);qmo=r(Sat,"wav2vec2"),Sat.forEach(t),jmo=r(SLe," \u2014 "),qI=n(SLe,"A",{href:!0});var Rat=s(qI);Dmo=r(Rat,"Wav2Vec2CTCTokenizer"),Rat.forEach(t),Gmo=r(SLe," (Wav2Vec2 model)"),SLe.forEach(t),Omo=i(S),vh=n(S,"LI",{});var RLe=s(vh);Zse=n(RLe,"STRONG",{});var Pat=s(Zse);Vmo=r(Pat,"wav2vec2-conformer"),Pat.forEach(t),Xmo=r(RLe," \u2014 "),jI=n(RLe,"A",{href:!0});var Bat=s(jI);zmo=r(Bat,"Wav2Vec2CTCTokenizer"),Bat.forEach(t),Wmo=r(RLe," (Wav2Vec2-Conformer model)"),RLe.forEach(t),Qmo=i(S),Fh=n(S,"LI",{});var PLe=s(Fh);ele=n(PLe,"STRONG",{});var Iat=s(ele);Hmo=r(Iat,"wav2vec2_phoneme"),Iat.forEach(t),Umo=r(PLe," \u2014 "),DI=n(PLe,"A",{href:!0});var Nat=s(DI);Jmo=r(Nat,"Wav2Vec2PhonemeCTCTokenizer"),Nat.forEach(t),Ymo=r(PLe," (Wav2Vec2Phoneme model)"),PLe.forEach(t),Kmo=i(S),Ns=n(S,"LI",{});var Gk=s(Ns);ole=n(Gk,"STRONG",{});var qat=s(ole);Zmo=r(qat,"xglm"),qat.forEach(t),ego=r(Gk," \u2014 "),GI=n(Gk,"A",{href:!0});var jat=s(GI);ogo=r(jat,"XGLMTokenizer"),jat.forEach(t),rgo=r(Gk," or "),OI=n(Gk,"A",{href:!0});var Dat=s(OI);tgo=r(Dat,"XGLMTokenizerFast"),Dat.forEach(t),ago=r(Gk," (XGLM model)"),Gk.forEach(t),ngo=i(S),Th=n(S,"LI",{});var BLe=s(Th);rle=n(BLe,"STRONG",{});var Gat=s(rle);sgo=r(Gat,"xlm"),Gat.forEach(t),lgo=r(BLe," \u2014 "),VI=n(BLe,"A",{href:!0});var Oat=s(VI);igo=r(Oat,"XLMTokenizer"),Oat.forEach(t),dgo=r(BLe," (XLM model)"),BLe.forEach(t),cgo=i(S),Mh=n(S,"LI",{});var ILe=s(Mh);tle=n(ILe,"STRONG",{});var Vat=s(tle);fgo=r(Vat,"xlm-prophetnet"),Vat.forEach(t),mgo=r(ILe," \u2014 "),XI=n(ILe,"A",{href:!0});var Xat=s(XI);ggo=r(Xat,"XLMProphetNetTokenizer"),Xat.forEach(t),hgo=r(ILe," (XLM-ProphetNet model)"),ILe.forEach(t),pgo=i(S),qs=n(S,"LI",{});var Ok=s(qs);ale=n(Ok,"STRONG",{});var zat=s(ale);ugo=r(zat,"xlm-roberta"),zat.forEach(t),_go=r(Ok," \u2014 "),zI=n(Ok,"A",{href:!0});var Wat=s(zI);bgo=r(Wat,"XLMRobertaTokenizer"),Wat.forEach(t),vgo=r(Ok," or "),WI=n(Ok,"A",{href:!0});var Qat=s(WI);Fgo=r(Qat,"XLMRobertaTokenizerFast"),Qat.forEach(t),Tgo=r(Ok," (XLM-RoBERTa model)"),Ok.forEach(t),Mgo=i(S),js=n(S,"LI",{});var Vk=s(js);nle=n(Vk,"STRONG",{});var Hat=s(nle);Ego=r(Hat,"xlm-roberta-xl"),Hat.forEach(t),Cgo=r(Vk," \u2014 "),QI=n(Vk,"A",{href:!0});var Uat=s(QI);wgo=r(Uat,"RobertaTokenizer"),Uat.forEach(t),Ago=r(Vk," or "),HI=n(Vk,"A",{href:!0});var Jat=s(HI);Lgo=r(Jat,"RobertaTokenizerFast"),Jat.forEach(t),ygo=r(Vk," (XLM-RoBERTa-XL model)"),Vk.forEach(t),xgo=i(S),Ds=n(S,"LI",{});var Xk=s(Ds);sle=n(Xk,"STRONG",{});var Yat=s(sle);$go=r(Yat,"xlnet"),Yat.forEach(t),kgo=r(Xk," \u2014 "),UI=n(Xk,"A",{href:!0});var Kat=s(UI);Sgo=r(Kat,"XLNetTokenizer"),Kat.forEach(t),Rgo=r(Xk," or "),JI=n(Xk,"A",{href:!0});var Zat=s(JI);Pgo=r(Zat,"XLNetTokenizerFast"),Zat.forEach(t),Bgo=r(Xk," (XLNet model)"),Xk.forEach(t),Igo=i(S),Gs=n(S,"LI",{});var zk=s(Gs);lle=n(zk,"STRONG",{});var ent=s(lle);Ngo=r(ent,"yoso"),ent.forEach(t),qgo=r(zk," \u2014 "),YI=n(zk,"A",{href:!0});var ont=s(YI);jgo=r(ont,"AlbertTokenizer"),ont.forEach(t),Dgo=r(zk," or "),KI=n(zk,"A",{href:!0});var rnt=s(KI);Ggo=r(rnt,"AlbertTokenizerFast"),rnt.forEach(t),Ogo=r(zk," (YOSO model)"),zk.forEach(t),S.forEach(t),Vgo=i(Qs),T(Eh.$$.fragment,Qs),Qs.forEach(t),Xgo=i(Ws),Ch=n(Ws,"DIV",{class:!0});var wVe=s(Ch);T(IL.$$.fragment,wVe),zgo=i(wVe),ile=n(wVe,"P",{});var tnt=s(ile);Wgo=r(tnt,"Register a new tokenizer in this mapping."),tnt.forEach(t),wVe.forEach(t),Ws.forEach(t),CGe=i(f),Si=n(f,"H2",{class:!0});var AVe=s(Si);wh=n(AVe,"A",{id:!0,class:!0,href:!0});var ant=s(wh);dle=n(ant,"SPAN",{});var nnt=s(dle);T(NL.$$.fragment,nnt),nnt.forEach(t),ant.forEach(t),Qgo=i(AVe),cle=n(AVe,"SPAN",{});var snt=s(cle);Hgo=r(snt,"AutoFeatureExtractor"),snt.forEach(t),AVe.forEach(t),wGe=i(f),Lo=n(f,"DIV",{class:!0});var Hs=s(Lo);T(qL.$$.fragment,Hs),Ugo=i(Hs),jL=n(Hs,"P",{});var LVe=s(jL);Jgo=r(LVe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),ZI=n(LVe,"A",{href:!0});var lnt=s(ZI);Ygo=r(lnt,"AutoFeatureExtractor.from_pretrained()"),lnt.forEach(t),Kgo=r(LVe," class method."),LVe.forEach(t),Zgo=i(Hs),DL=n(Hs,"P",{});var yVe=s(DL);eho=r(yVe,"This class cannot be instantiated directly using "),fle=n(yVe,"CODE",{});var int=s(fle);oho=r(int,"__init__()"),int.forEach(t),rho=r(yVe," (throws an error)."),yVe.forEach(t),tho=i(Hs),He=n(Hs,"DIV",{class:!0});var ra=s(He);T(GL.$$.fragment,ra),aho=i(ra),mle=n(ra,"P",{});var dnt=s(mle);nho=r(dnt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),dnt.forEach(t),sho=i(ra),ka=n(ra,"P",{});var CA=s(ka);lho=r(CA,"The feature extractor class to instantiate is selected based on the "),gle=n(CA,"CODE",{});var cnt=s(gle);iho=r(cnt,"model_type"),cnt.forEach(t),dho=r(CA,` property of the config object
(either passed as an argument or loaded from `),hle=n(CA,"CODE",{});var fnt=s(hle);cho=r(fnt,"pretrained_model_name_or_path"),fnt.forEach(t),fho=r(CA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ple=n(CA,"CODE",{});var mnt=s(ple);mho=r(mnt,"pretrained_model_name_or_path"),mnt.forEach(t),gho=r(CA,":"),CA.forEach(t),hho=i(ra),Y=n(ra,"UL",{});var K=s(Y);Ah=n(K,"LI",{});var NLe=s(Ah);ule=n(NLe,"STRONG",{});var gnt=s(ule);pho=r(gnt,"beit"),gnt.forEach(t),uho=r(NLe," \u2014 "),eN=n(NLe,"A",{href:!0});var hnt=s(eN);_ho=r(hnt,"BeitFeatureExtractor"),hnt.forEach(t),bho=r(NLe," (BEiT model)"),NLe.forEach(t),vho=i(K),Lh=n(K,"LI",{});var qLe=s(Lh);_le=n(qLe,"STRONG",{});var pnt=s(_le);Fho=r(pnt,"clip"),pnt.forEach(t),Tho=r(qLe," \u2014 "),oN=n(qLe,"A",{href:!0});var unt=s(oN);Mho=r(unt,"CLIPFeatureExtractor"),unt.forEach(t),Eho=r(qLe," (CLIP model)"),qLe.forEach(t),Cho=i(K),yh=n(K,"LI",{});var jLe=s(yh);ble=n(jLe,"STRONG",{});var _nt=s(ble);who=r(_nt,"convnext"),_nt.forEach(t),Aho=r(jLe," \u2014 "),rN=n(jLe,"A",{href:!0});var bnt=s(rN);Lho=r(bnt,"ConvNextFeatureExtractor"),bnt.forEach(t),yho=r(jLe," (ConvNeXT model)"),jLe.forEach(t),xho=i(K),xh=n(K,"LI",{});var DLe=s(xh);vle=n(DLe,"STRONG",{});var vnt=s(vle);$ho=r(vnt,"cvt"),vnt.forEach(t),kho=r(DLe," \u2014 "),tN=n(DLe,"A",{href:!0});var Fnt=s(tN);Sho=r(Fnt,"ConvNextFeatureExtractor"),Fnt.forEach(t),Rho=r(DLe," (CvT model)"),DLe.forEach(t),Pho=i(K),$h=n(K,"LI",{});var GLe=s($h);Fle=n(GLe,"STRONG",{});var Tnt=s(Fle);Bho=r(Tnt,"data2vec-audio"),Tnt.forEach(t),Iho=r(GLe," \u2014 "),aN=n(GLe,"A",{href:!0});var Mnt=s(aN);Nho=r(Mnt,"Wav2Vec2FeatureExtractor"),Mnt.forEach(t),qho=r(GLe," (Data2VecAudio model)"),GLe.forEach(t),jho=i(K),kh=n(K,"LI",{});var OLe=s(kh);Tle=n(OLe,"STRONG",{});var Ent=s(Tle);Dho=r(Ent,"data2vec-vision"),Ent.forEach(t),Gho=r(OLe," \u2014 "),nN=n(OLe,"A",{href:!0});var Cnt=s(nN);Oho=r(Cnt,"BeitFeatureExtractor"),Cnt.forEach(t),Vho=r(OLe," (Data2VecVision model)"),OLe.forEach(t),Xho=i(K),Sh=n(K,"LI",{});var VLe=s(Sh);Mle=n(VLe,"STRONG",{});var wnt=s(Mle);zho=r(wnt,"deit"),wnt.forEach(t),Who=r(VLe," \u2014 "),sN=n(VLe,"A",{href:!0});var Ant=s(sN);Qho=r(Ant,"DeiTFeatureExtractor"),Ant.forEach(t),Hho=r(VLe," (DeiT model)"),VLe.forEach(t),Uho=i(K),Rh=n(K,"LI",{});var XLe=s(Rh);Ele=n(XLe,"STRONG",{});var Lnt=s(Ele);Jho=r(Lnt,"detr"),Lnt.forEach(t),Yho=r(XLe," \u2014 "),lN=n(XLe,"A",{href:!0});var ynt=s(lN);Kho=r(ynt,"DetrFeatureExtractor"),ynt.forEach(t),Zho=r(XLe," (DETR model)"),XLe.forEach(t),epo=i(K),Ph=n(K,"LI",{});var zLe=s(Ph);Cle=n(zLe,"STRONG",{});var xnt=s(Cle);opo=r(xnt,"dpt"),xnt.forEach(t),rpo=r(zLe," \u2014 "),iN=n(zLe,"A",{href:!0});var $nt=s(iN);tpo=r($nt,"DPTFeatureExtractor"),$nt.forEach(t),apo=r(zLe," (DPT model)"),zLe.forEach(t),npo=i(K),Bh=n(K,"LI",{});var WLe=s(Bh);wle=n(WLe,"STRONG",{});var knt=s(wle);spo=r(knt,"flava"),knt.forEach(t),lpo=r(WLe," \u2014 "),dN=n(WLe,"A",{href:!0});var Snt=s(dN);ipo=r(Snt,"FlavaFeatureExtractor"),Snt.forEach(t),dpo=r(WLe," (FLAVA model)"),WLe.forEach(t),cpo=i(K),Ih=n(K,"LI",{});var QLe=s(Ih);Ale=n(QLe,"STRONG",{});var Rnt=s(Ale);fpo=r(Rnt,"glpn"),Rnt.forEach(t),mpo=r(QLe," \u2014 "),cN=n(QLe,"A",{href:!0});var Pnt=s(cN);gpo=r(Pnt,"GLPNFeatureExtractor"),Pnt.forEach(t),hpo=r(QLe," (GLPN model)"),QLe.forEach(t),ppo=i(K),Nh=n(K,"LI",{});var HLe=s(Nh);Lle=n(HLe,"STRONG",{});var Bnt=s(Lle);upo=r(Bnt,"hubert"),Bnt.forEach(t),_po=r(HLe," \u2014 "),fN=n(HLe,"A",{href:!0});var Int=s(fN);bpo=r(Int,"Wav2Vec2FeatureExtractor"),Int.forEach(t),vpo=r(HLe," (Hubert model)"),HLe.forEach(t),Fpo=i(K),qh=n(K,"LI",{});var ULe=s(qh);yle=n(ULe,"STRONG",{});var Nnt=s(yle);Tpo=r(Nnt,"imagegpt"),Nnt.forEach(t),Mpo=r(ULe," \u2014 "),mN=n(ULe,"A",{href:!0});var qnt=s(mN);Epo=r(qnt,"ImageGPTFeatureExtractor"),qnt.forEach(t),Cpo=r(ULe," (ImageGPT model)"),ULe.forEach(t),wpo=i(K),jh=n(K,"LI",{});var JLe=s(jh);xle=n(JLe,"STRONG",{});var jnt=s(xle);Apo=r(jnt,"layoutlmv2"),jnt.forEach(t),Lpo=r(JLe," \u2014 "),gN=n(JLe,"A",{href:!0});var Dnt=s(gN);ypo=r(Dnt,"LayoutLMv2FeatureExtractor"),Dnt.forEach(t),xpo=r(JLe," (LayoutLMv2 model)"),JLe.forEach(t),$po=i(K),Dh=n(K,"LI",{});var YLe=s(Dh);$le=n(YLe,"STRONG",{});var Gnt=s($le);kpo=r(Gnt,"layoutlmv3"),Gnt.forEach(t),Spo=r(YLe," \u2014 "),hN=n(YLe,"A",{href:!0});var Ont=s(hN);Rpo=r(Ont,"LayoutLMv3FeatureExtractor"),Ont.forEach(t),Ppo=r(YLe," (LayoutLMv3 model)"),YLe.forEach(t),Bpo=i(K),Gh=n(K,"LI",{});var KLe=s(Gh);kle=n(KLe,"STRONG",{});var Vnt=s(kle);Ipo=r(Vnt,"levit"),Vnt.forEach(t),Npo=r(KLe," \u2014 "),pN=n(KLe,"A",{href:!0});var Xnt=s(pN);qpo=r(Xnt,"LevitFeatureExtractor"),Xnt.forEach(t),jpo=r(KLe," (LeViT model)"),KLe.forEach(t),Dpo=i(K),Oh=n(K,"LI",{});var ZLe=s(Oh);Sle=n(ZLe,"STRONG",{});var znt=s(Sle);Gpo=r(znt,"maskformer"),znt.forEach(t),Opo=r(ZLe," \u2014 "),uN=n(ZLe,"A",{href:!0});var Wnt=s(uN);Vpo=r(Wnt,"MaskFormerFeatureExtractor"),Wnt.forEach(t),Xpo=r(ZLe," (MaskFormer model)"),ZLe.forEach(t),zpo=i(K),Vh=n(K,"LI",{});var eye=s(Vh);Rle=n(eye,"STRONG",{});var Qnt=s(Rle);Wpo=r(Qnt,"mctct"),Qnt.forEach(t),Qpo=r(eye," \u2014 "),_N=n(eye,"A",{href:!0});var Hnt=s(_N);Hpo=r(Hnt,"MCTCTFeatureExtractor"),Hnt.forEach(t),Upo=r(eye," (M-CTC-T model)"),eye.forEach(t),Jpo=i(K),Xh=n(K,"LI",{});var oye=s(Xh);Ple=n(oye,"STRONG",{});var Unt=s(Ple);Ypo=r(Unt,"perceiver"),Unt.forEach(t),Kpo=r(oye," \u2014 "),bN=n(oye,"A",{href:!0});var Jnt=s(bN);Zpo=r(Jnt,"PerceiverFeatureExtractor"),Jnt.forEach(t),euo=r(oye," (Perceiver model)"),oye.forEach(t),ouo=i(K),zh=n(K,"LI",{});var rye=s(zh);Ble=n(rye,"STRONG",{});var Ynt=s(Ble);ruo=r(Ynt,"poolformer"),Ynt.forEach(t),tuo=r(rye," \u2014 "),vN=n(rye,"A",{href:!0});var Knt=s(vN);auo=r(Knt,"PoolFormerFeatureExtractor"),Knt.forEach(t),nuo=r(rye," (PoolFormer model)"),rye.forEach(t),suo=i(K),Wh=n(K,"LI",{});var tye=s(Wh);Ile=n(tye,"STRONG",{});var Znt=s(Ile);luo=r(Znt,"regnet"),Znt.forEach(t),iuo=r(tye," \u2014 "),FN=n(tye,"A",{href:!0});var est=s(FN);duo=r(est,"ConvNextFeatureExtractor"),est.forEach(t),cuo=r(tye," (RegNet model)"),tye.forEach(t),fuo=i(K),Qh=n(K,"LI",{});var aye=s(Qh);Nle=n(aye,"STRONG",{});var ost=s(Nle);muo=r(ost,"resnet"),ost.forEach(t),guo=r(aye," \u2014 "),TN=n(aye,"A",{href:!0});var rst=s(TN);huo=r(rst,"ConvNextFeatureExtractor"),rst.forEach(t),puo=r(aye," (ResNet model)"),aye.forEach(t),uuo=i(K),Hh=n(K,"LI",{});var nye=s(Hh);qle=n(nye,"STRONG",{});var tst=s(qle);_uo=r(tst,"segformer"),tst.forEach(t),buo=r(nye," \u2014 "),MN=n(nye,"A",{href:!0});var ast=s(MN);vuo=r(ast,"SegformerFeatureExtractor"),ast.forEach(t),Fuo=r(nye," (SegFormer model)"),nye.forEach(t),Tuo=i(K),Uh=n(K,"LI",{});var sye=s(Uh);jle=n(sye,"STRONG",{});var nst=s(jle);Muo=r(nst,"speech_to_text"),nst.forEach(t),Euo=r(sye," \u2014 "),EN=n(sye,"A",{href:!0});var sst=s(EN);Cuo=r(sst,"Speech2TextFeatureExtractor"),sst.forEach(t),wuo=r(sye," (Speech2Text model)"),sye.forEach(t),Auo=i(K),Jh=n(K,"LI",{});var lye=s(Jh);Dle=n(lye,"STRONG",{});var lst=s(Dle);Luo=r(lst,"swin"),lst.forEach(t),yuo=r(lye," \u2014 "),CN=n(lye,"A",{href:!0});var ist=s(CN);xuo=r(ist,"ViTFeatureExtractor"),ist.forEach(t),$uo=r(lye," (Swin Transformer model)"),lye.forEach(t),kuo=i(K),Yh=n(K,"LI",{});var iye=s(Yh);Gle=n(iye,"STRONG",{});var dst=s(Gle);Suo=r(dst,"van"),dst.forEach(t),Ruo=r(iye," \u2014 "),wN=n(iye,"A",{href:!0});var cst=s(wN);Puo=r(cst,"ConvNextFeatureExtractor"),cst.forEach(t),Buo=r(iye," (VAN model)"),iye.forEach(t),Iuo=i(K),Kh=n(K,"LI",{});var dye=s(Kh);Ole=n(dye,"STRONG",{});var fst=s(Ole);Nuo=r(fst,"vilt"),fst.forEach(t),quo=r(dye," \u2014 "),AN=n(dye,"A",{href:!0});var mst=s(AN);juo=r(mst,"ViltFeatureExtractor"),mst.forEach(t),Duo=r(dye," (ViLT model)"),dye.forEach(t),Guo=i(K),Zh=n(K,"LI",{});var cye=s(Zh);Vle=n(cye,"STRONG",{});var gst=s(Vle);Ouo=r(gst,"vit"),gst.forEach(t),Vuo=r(cye," \u2014 "),LN=n(cye,"A",{href:!0});var hst=s(LN);Xuo=r(hst,"ViTFeatureExtractor"),hst.forEach(t),zuo=r(cye," (ViT model)"),cye.forEach(t),Wuo=i(K),ep=n(K,"LI",{});var fye=s(ep);Xle=n(fye,"STRONG",{});var pst=s(Xle);Quo=r(pst,"vit_mae"),pst.forEach(t),Huo=r(fye," \u2014 "),yN=n(fye,"A",{href:!0});var ust=s(yN);Uuo=r(ust,"ViTFeatureExtractor"),ust.forEach(t),Juo=r(fye," (ViTMAE model)"),fye.forEach(t),Yuo=i(K),op=n(K,"LI",{});var mye=s(op);zle=n(mye,"STRONG",{});var _st=s(zle);Kuo=r(_st,"wav2vec2"),_st.forEach(t),Zuo=r(mye," \u2014 "),xN=n(mye,"A",{href:!0});var bst=s(xN);e_o=r(bst,"Wav2Vec2FeatureExtractor"),bst.forEach(t),o_o=r(mye," (Wav2Vec2 model)"),mye.forEach(t),r_o=i(K),rp=n(K,"LI",{});var gye=s(rp);Wle=n(gye,"STRONG",{});var vst=s(Wle);t_o=r(vst,"wav2vec2-conformer"),vst.forEach(t),a_o=r(gye," \u2014 "),$N=n(gye,"A",{href:!0});var Fst=s($N);n_o=r(Fst,"Wav2Vec2FeatureExtractor"),Fst.forEach(t),s_o=r(gye," (Wav2Vec2-Conformer model)"),gye.forEach(t),l_o=i(K),tp=n(K,"LI",{});var hye=s(tp);Qle=n(hye,"STRONG",{});var Tst=s(Qle);i_o=r(Tst,"yolos"),Tst.forEach(t),d_o=r(hye," \u2014 "),kN=n(hye,"A",{href:!0});var Mst=s(kN);c_o=r(Mst,"YolosFeatureExtractor"),Mst.forEach(t),f_o=r(hye," (YOLOS model)"),hye.forEach(t),K.forEach(t),m_o=i(ra),T(ap.$$.fragment,ra),g_o=i(ra),T(np.$$.fragment,ra),ra.forEach(t),h_o=i(Hs),sp=n(Hs,"DIV",{class:!0});var xVe=s(sp);T(OL.$$.fragment,xVe),p_o=i(xVe),Hle=n(xVe,"P",{});var Est=s(Hle);u_o=r(Est,"Register a new feature extractor for this class."),Est.forEach(t),xVe.forEach(t),Hs.forEach(t),AGe=i(f),Ri=n(f,"H2",{class:!0});var $Ve=s(Ri);lp=n($Ve,"A",{id:!0,class:!0,href:!0});var Cst=s(lp);Ule=n(Cst,"SPAN",{});var wst=s(Ule);T(VL.$$.fragment,wst),wst.forEach(t),Cst.forEach(t),__o=i($Ve),Jle=n($Ve,"SPAN",{});var Ast=s(Jle);b_o=r(Ast,"AutoProcessor"),Ast.forEach(t),$Ve.forEach(t),LGe=i(f),yo=n(f,"DIV",{class:!0});var Us=s(yo);T(XL.$$.fragment,Us),v_o=i(Us),zL=n(Us,"P",{});var kVe=s(zL);F_o=r(kVe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),SN=n(kVe,"A",{href:!0});var Lst=s(SN);T_o=r(Lst,"AutoProcessor.from_pretrained()"),Lst.forEach(t),M_o=r(kVe," class method."),kVe.forEach(t),E_o=i(Us),WL=n(Us,"P",{});var SVe=s(WL);C_o=r(SVe,"This class cannot be instantiated directly using "),Yle=n(SVe,"CODE",{});var yst=s(Yle);w_o=r(yst,"__init__()"),yst.forEach(t),A_o=r(SVe," (throws an error)."),SVe.forEach(t),L_o=i(Us),Ue=n(Us,"DIV",{class:!0});var ta=s(Ue);T(QL.$$.fragment,ta),y_o=i(ta),Kle=n(ta,"P",{});var xst=s(Kle);x_o=r(xst,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),xst.forEach(t),$_o=i(ta),Pi=n(ta,"P",{});var soe=s(Pi);k_o=r(soe,"The processor class to instantiate is selected based on the "),Zle=n(soe,"CODE",{});var $st=s(Zle);S_o=r($st,"model_type"),$st.forEach(t),R_o=r(soe,` property of the config object (either
passed as an argument or loaded from `),eie=n(soe,"CODE",{});var kst=s(eie);P_o=r(kst,"pretrained_model_name_or_path"),kst.forEach(t),B_o=r(soe," if possible):"),soe.forEach(t),I_o=i(ta),he=n(ta,"UL",{});var _e=s(he);ip=n(_e,"LI",{});var pye=s(ip);oie=n(pye,"STRONG",{});var Sst=s(oie);N_o=r(Sst,"clip"),Sst.forEach(t),q_o=r(pye," \u2014 "),RN=n(pye,"A",{href:!0});var Rst=s(RN);j_o=r(Rst,"CLIPProcessor"),Rst.forEach(t),D_o=r(pye," (CLIP model)"),pye.forEach(t),G_o=i(_e),dp=n(_e,"LI",{});var uye=s(dp);rie=n(uye,"STRONG",{});var Pst=s(rie);O_o=r(Pst,"flava"),Pst.forEach(t),V_o=r(uye," \u2014 "),tie=n(uye,"CODE",{});var Bst=s(tie);X_o=r(Bst,"FLAVAProcessor"),Bst.forEach(t),z_o=r(uye," (FLAVA model)"),uye.forEach(t),W_o=i(_e),cp=n(_e,"LI",{});var _ye=s(cp);aie=n(_ye,"STRONG",{});var Ist=s(aie);Q_o=r(Ist,"layoutlmv2"),Ist.forEach(t),H_o=r(_ye," \u2014 "),PN=n(_ye,"A",{href:!0});var Nst=s(PN);U_o=r(Nst,"LayoutLMv2Processor"),Nst.forEach(t),J_o=r(_ye," (LayoutLMv2 model)"),_ye.forEach(t),Y_o=i(_e),fp=n(_e,"LI",{});var bye=s(fp);nie=n(bye,"STRONG",{});var qst=s(nie);K_o=r(qst,"layoutlmv3"),qst.forEach(t),Z_o=r(bye," \u2014 "),BN=n(bye,"A",{href:!0});var jst=s(BN);e4o=r(jst,"LayoutLMv3Processor"),jst.forEach(t),o4o=r(bye," (LayoutLMv3 model)"),bye.forEach(t),r4o=i(_e),mp=n(_e,"LI",{});var vye=s(mp);sie=n(vye,"STRONG",{});var Dst=s(sie);t4o=r(Dst,"layoutxlm"),Dst.forEach(t),a4o=r(vye," \u2014 "),IN=n(vye,"A",{href:!0});var Gst=s(IN);n4o=r(Gst,"LayoutXLMProcessor"),Gst.forEach(t),s4o=r(vye," (LayoutXLM model)"),vye.forEach(t),l4o=i(_e),gp=n(_e,"LI",{});var Fye=s(gp);lie=n(Fye,"STRONG",{});var Ost=s(lie);i4o=r(Ost,"sew"),Ost.forEach(t),d4o=r(Fye," \u2014 "),NN=n(Fye,"A",{href:!0});var Vst=s(NN);c4o=r(Vst,"Wav2Vec2Processor"),Vst.forEach(t),f4o=r(Fye," (SEW model)"),Fye.forEach(t),m4o=i(_e),hp=n(_e,"LI",{});var Tye=s(hp);iie=n(Tye,"STRONG",{});var Xst=s(iie);g4o=r(Xst,"sew-d"),Xst.forEach(t),h4o=r(Tye," \u2014 "),qN=n(Tye,"A",{href:!0});var zst=s(qN);p4o=r(zst,"Wav2Vec2Processor"),zst.forEach(t),u4o=r(Tye," (SEW-D model)"),Tye.forEach(t),_4o=i(_e),pp=n(_e,"LI",{});var Mye=s(pp);die=n(Mye,"STRONG",{});var Wst=s(die);b4o=r(Wst,"speech_to_text"),Wst.forEach(t),v4o=r(Mye," \u2014 "),jN=n(Mye,"A",{href:!0});var Qst=s(jN);F4o=r(Qst,"Speech2TextProcessor"),Qst.forEach(t),T4o=r(Mye," (Speech2Text model)"),Mye.forEach(t),M4o=i(_e),up=n(_e,"LI",{});var Eye=s(up);cie=n(Eye,"STRONG",{});var Hst=s(cie);E4o=r(Hst,"speech_to_text_2"),Hst.forEach(t),C4o=r(Eye," \u2014 "),DN=n(Eye,"A",{href:!0});var Ust=s(DN);w4o=r(Ust,"Speech2Text2Processor"),Ust.forEach(t),A4o=r(Eye," (Speech2Text2 model)"),Eye.forEach(t),L4o=i(_e),_p=n(_e,"LI",{});var Cye=s(_p);fie=n(Cye,"STRONG",{});var Jst=s(fie);y4o=r(Jst,"trocr"),Jst.forEach(t),x4o=r(Cye," \u2014 "),GN=n(Cye,"A",{href:!0});var Yst=s(GN);$4o=r(Yst,"TrOCRProcessor"),Yst.forEach(t),k4o=r(Cye," (TrOCR model)"),Cye.forEach(t),S4o=i(_e),bp=n(_e,"LI",{});var wye=s(bp);mie=n(wye,"STRONG",{});var Kst=s(mie);R4o=r(Kst,"unispeech"),Kst.forEach(t),P4o=r(wye," \u2014 "),ON=n(wye,"A",{href:!0});var Zst=s(ON);B4o=r(Zst,"Wav2Vec2Processor"),Zst.forEach(t),I4o=r(wye," (UniSpeech model)"),wye.forEach(t),N4o=i(_e),vp=n(_e,"LI",{});var Aye=s(vp);gie=n(Aye,"STRONG",{});var elt=s(gie);q4o=r(elt,"unispeech-sat"),elt.forEach(t),j4o=r(Aye," \u2014 "),VN=n(Aye,"A",{href:!0});var olt=s(VN);D4o=r(olt,"Wav2Vec2Processor"),olt.forEach(t),G4o=r(Aye," (UniSpeechSat model)"),Aye.forEach(t),O4o=i(_e),Fp=n(_e,"LI",{});var Lye=s(Fp);hie=n(Lye,"STRONG",{});var rlt=s(hie);V4o=r(rlt,"vilt"),rlt.forEach(t),X4o=r(Lye," \u2014 "),XN=n(Lye,"A",{href:!0});var tlt=s(XN);z4o=r(tlt,"ViltProcessor"),tlt.forEach(t),W4o=r(Lye," (ViLT model)"),Lye.forEach(t),Q4o=i(_e),Tp=n(_e,"LI",{});var yye=s(Tp);pie=n(yye,"STRONG",{});var alt=s(pie);H4o=r(alt,"vision-text-dual-encoder"),alt.forEach(t),U4o=r(yye," \u2014 "),zN=n(yye,"A",{href:!0});var nlt=s(zN);J4o=r(nlt,"VisionTextDualEncoderProcessor"),nlt.forEach(t),Y4o=r(yye," (VisionTextDualEncoder model)"),yye.forEach(t),K4o=i(_e),Mp=n(_e,"LI",{});var xye=s(Mp);uie=n(xye,"STRONG",{});var slt=s(uie);Z4o=r(slt,"wav2vec2"),slt.forEach(t),e1o=r(xye," \u2014 "),WN=n(xye,"A",{href:!0});var llt=s(WN);o1o=r(llt,"Wav2Vec2Processor"),llt.forEach(t),r1o=r(xye," (Wav2Vec2 model)"),xye.forEach(t),t1o=i(_e),Ep=n(_e,"LI",{});var $ye=s(Ep);_ie=n($ye,"STRONG",{});var ilt=s(_ie);a1o=r(ilt,"wav2vec2-conformer"),ilt.forEach(t),n1o=r($ye," \u2014 "),QN=n($ye,"A",{href:!0});var dlt=s(QN);s1o=r(dlt,"Wav2Vec2Processor"),dlt.forEach(t),l1o=r($ye," (Wav2Vec2-Conformer model)"),$ye.forEach(t),i1o=i(_e),Cp=n(_e,"LI",{});var kye=s(Cp);bie=n(kye,"STRONG",{});var clt=s(bie);d1o=r(clt,"wavlm"),clt.forEach(t),c1o=r(kye," \u2014 "),HN=n(kye,"A",{href:!0});var flt=s(HN);f1o=r(flt,"Wav2Vec2Processor"),flt.forEach(t),m1o=r(kye," (WavLM model)"),kye.forEach(t),_e.forEach(t),g1o=i(ta),T(wp.$$.fragment,ta),h1o=i(ta),T(Ap.$$.fragment,ta),ta.forEach(t),p1o=i(Us),Lp=n(Us,"DIV",{class:!0});var RVe=s(Lp);T(HL.$$.fragment,RVe),u1o=i(RVe),vie=n(RVe,"P",{});var mlt=s(vie);_1o=r(mlt,"Register a new processor for this class."),mlt.forEach(t),RVe.forEach(t),Us.forEach(t),yGe=i(f),Bi=n(f,"H2",{class:!0});var PVe=s(Bi);yp=n(PVe,"A",{id:!0,class:!0,href:!0});var glt=s(yp);Fie=n(glt,"SPAN",{});var hlt=s(Fie);T(UL.$$.fragment,hlt),hlt.forEach(t),glt.forEach(t),b1o=i(PVe),Tie=n(PVe,"SPAN",{});var plt=s(Tie);v1o=r(plt,"AutoModel"),plt.forEach(t),PVe.forEach(t),xGe=i(f),xo=n(f,"DIV",{class:!0});var Js=s(xo);T(JL.$$.fragment,Js),F1o=i(Js),Ii=n(Js,"P",{});var loe=s(Ii);T1o=r(loe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UN=n(loe,"A",{href:!0});var ult=s(UN);M1o=r(ult,"from_pretrained()"),ult.forEach(t),E1o=r(loe," class method or the "),JN=n(loe,"A",{href:!0});var _lt=s(JN);C1o=r(_lt,"from_config()"),_lt.forEach(t),w1o=r(loe,` class
method.`),loe.forEach(t),A1o=i(Js),YL=n(Js,"P",{});var BVe=s(YL);L1o=r(BVe,"This class cannot be instantiated directly using "),Mie=n(BVe,"CODE",{});var blt=s(Mie);y1o=r(blt,"__init__()"),blt.forEach(t),x1o=r(BVe," (throws an error)."),BVe.forEach(t),$1o=i(Js),nt=n(Js,"DIV",{class:!0});var wA=s(nt);T(KL.$$.fragment,wA),k1o=i(wA),Eie=n(wA,"P",{});var vlt=s(Eie);S1o=r(vlt,"Instantiates one of the base model classes of the library from a configuration."),vlt.forEach(t),R1o=i(wA),Ni=n(wA,"P",{});var ioe=s(Ni);P1o=r(ioe,`Note:
Loading a model from its configuration file does `),Cie=n(ioe,"STRONG",{});var Flt=s(Cie);B1o=r(Flt,"not"),Flt.forEach(t),I1o=r(ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YN=n(ioe,"A",{href:!0});var Tlt=s(YN);N1o=r(Tlt,"from_pretrained()"),Tlt.forEach(t),q1o=r(ioe," to load the model weights."),ioe.forEach(t),j1o=i(wA),T(xp.$$.fragment,wA),wA.forEach(t),D1o=i(Js),Je=n(Js,"DIV",{class:!0});var aa=s(Je);T(ZL.$$.fragment,aa),G1o=i(aa),wie=n(aa,"P",{});var Mlt=s(wie);O1o=r(Mlt,"Instantiate one of the base model classes of the library from a pretrained model."),Mlt.forEach(t),V1o=i(aa),Sa=n(aa,"P",{});var AA=s(Sa);X1o=r(AA,"The model class to instantiate is selected based on the "),Aie=n(AA,"CODE",{});var Elt=s(Aie);z1o=r(Elt,"model_type"),Elt.forEach(t),W1o=r(AA,` property of the config object (either
passed as an argument or loaded from `),Lie=n(AA,"CODE",{});var Clt=s(Lie);Q1o=r(Clt,"pretrained_model_name_or_path"),Clt.forEach(t),H1o=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=n(AA,"CODE",{});var wlt=s(yie);U1o=r(wlt,"pretrained_model_name_or_path"),wlt.forEach(t),J1o=r(AA,":"),AA.forEach(t),Y1o=i(aa),y=n(aa,"UL",{});var $=s(y);$p=n($,"LI",{});var Sye=s($p);xie=n(Sye,"STRONG",{});var Alt=s(xie);K1o=r(Alt,"albert"),Alt.forEach(t),Z1o=r(Sye," \u2014 "),KN=n(Sye,"A",{href:!0});var Llt=s(KN);e2o=r(Llt,"AlbertModel"),Llt.forEach(t),o2o=r(Sye," (ALBERT model)"),Sye.forEach(t),r2o=i($),kp=n($,"LI",{});var Rye=s(kp);$ie=n(Rye,"STRONG",{});var ylt=s($ie);t2o=r(ylt,"bart"),ylt.forEach(t),a2o=r(Rye," \u2014 "),ZN=n(Rye,"A",{href:!0});var xlt=s(ZN);n2o=r(xlt,"BartModel"),xlt.forEach(t),s2o=r(Rye," (BART model)"),Rye.forEach(t),l2o=i($),Sp=n($,"LI",{});var Pye=s(Sp);kie=n(Pye,"STRONG",{});var $lt=s(kie);i2o=r($lt,"beit"),$lt.forEach(t),d2o=r(Pye," \u2014 "),eq=n(Pye,"A",{href:!0});var klt=s(eq);c2o=r(klt,"BeitModel"),klt.forEach(t),f2o=r(Pye," (BEiT model)"),Pye.forEach(t),m2o=i($),Rp=n($,"LI",{});var Bye=s(Rp);Sie=n(Bye,"STRONG",{});var Slt=s(Sie);g2o=r(Slt,"bert"),Slt.forEach(t),h2o=r(Bye," \u2014 "),oq=n(Bye,"A",{href:!0});var Rlt=s(oq);p2o=r(Rlt,"BertModel"),Rlt.forEach(t),u2o=r(Bye," (BERT model)"),Bye.forEach(t),_2o=i($),Pp=n($,"LI",{});var Iye=s(Pp);Rie=n(Iye,"STRONG",{});var Plt=s(Rie);b2o=r(Plt,"bert-generation"),Plt.forEach(t),v2o=r(Iye," \u2014 "),rq=n(Iye,"A",{href:!0});var Blt=s(rq);F2o=r(Blt,"BertGenerationEncoder"),Blt.forEach(t),T2o=r(Iye," (Bert Generation model)"),Iye.forEach(t),M2o=i($),Bp=n($,"LI",{});var Nye=s(Bp);Pie=n(Nye,"STRONG",{});var Ilt=s(Pie);E2o=r(Ilt,"big_bird"),Ilt.forEach(t),C2o=r(Nye," \u2014 "),tq=n(Nye,"A",{href:!0});var Nlt=s(tq);w2o=r(Nlt,"BigBirdModel"),Nlt.forEach(t),A2o=r(Nye," (BigBird model)"),Nye.forEach(t),L2o=i($),Ip=n($,"LI",{});var qye=s(Ip);Bie=n(qye,"STRONG",{});var qlt=s(Bie);y2o=r(qlt,"bigbird_pegasus"),qlt.forEach(t),x2o=r(qye," \u2014 "),aq=n(qye,"A",{href:!0});var jlt=s(aq);$2o=r(jlt,"BigBirdPegasusModel"),jlt.forEach(t),k2o=r(qye," (BigBird-Pegasus model)"),qye.forEach(t),S2o=i($),Np=n($,"LI",{});var jye=s(Np);Iie=n(jye,"STRONG",{});var Dlt=s(Iie);R2o=r(Dlt,"blenderbot"),Dlt.forEach(t),P2o=r(jye," \u2014 "),nq=n(jye,"A",{href:!0});var Glt=s(nq);B2o=r(Glt,"BlenderbotModel"),Glt.forEach(t),I2o=r(jye," (Blenderbot model)"),jye.forEach(t),N2o=i($),qp=n($,"LI",{});var Dye=s(qp);Nie=n(Dye,"STRONG",{});var Olt=s(Nie);q2o=r(Olt,"blenderbot-small"),Olt.forEach(t),j2o=r(Dye," \u2014 "),sq=n(Dye,"A",{href:!0});var Vlt=s(sq);D2o=r(Vlt,"BlenderbotSmallModel"),Vlt.forEach(t),G2o=r(Dye," (BlenderbotSmall model)"),Dye.forEach(t),O2o=i($),jp=n($,"LI",{});var Gye=s(jp);qie=n(Gye,"STRONG",{});var Xlt=s(qie);V2o=r(Xlt,"bloom"),Xlt.forEach(t),X2o=r(Gye," \u2014 "),lq=n(Gye,"A",{href:!0});var zlt=s(lq);z2o=r(zlt,"BloomModel"),zlt.forEach(t),W2o=r(Gye," (BLOOM model)"),Gye.forEach(t),Q2o=i($),Dp=n($,"LI",{});var Oye=s(Dp);jie=n(Oye,"STRONG",{});var Wlt=s(jie);H2o=r(Wlt,"camembert"),Wlt.forEach(t),U2o=r(Oye," \u2014 "),iq=n(Oye,"A",{href:!0});var Qlt=s(iq);J2o=r(Qlt,"CamembertModel"),Qlt.forEach(t),Y2o=r(Oye," (CamemBERT model)"),Oye.forEach(t),K2o=i($),Gp=n($,"LI",{});var Vye=s(Gp);Die=n(Vye,"STRONG",{});var Hlt=s(Die);Z2o=r(Hlt,"canine"),Hlt.forEach(t),ebo=r(Vye," \u2014 "),dq=n(Vye,"A",{href:!0});var Ult=s(dq);obo=r(Ult,"CanineModel"),Ult.forEach(t),rbo=r(Vye," (CANINE model)"),Vye.forEach(t),tbo=i($),Op=n($,"LI",{});var Xye=s(Op);Gie=n(Xye,"STRONG",{});var Jlt=s(Gie);abo=r(Jlt,"clip"),Jlt.forEach(t),nbo=r(Xye," \u2014 "),cq=n(Xye,"A",{href:!0});var Ylt=s(cq);sbo=r(Ylt,"CLIPModel"),Ylt.forEach(t),lbo=r(Xye," (CLIP model)"),Xye.forEach(t),ibo=i($),Vp=n($,"LI",{});var zye=s(Vp);Oie=n(zye,"STRONG",{});var Klt=s(Oie);dbo=r(Klt,"codegen"),Klt.forEach(t),cbo=r(zye," \u2014 "),fq=n(zye,"A",{href:!0});var Zlt=s(fq);fbo=r(Zlt,"CodeGenModel"),Zlt.forEach(t),mbo=r(zye," (CodeGen model)"),zye.forEach(t),gbo=i($),Xp=n($,"LI",{});var Wye=s(Xp);Vie=n(Wye,"STRONG",{});var eit=s(Vie);hbo=r(eit,"convbert"),eit.forEach(t),pbo=r(Wye," \u2014 "),mq=n(Wye,"A",{href:!0});var oit=s(mq);ubo=r(oit,"ConvBertModel"),oit.forEach(t),_bo=r(Wye," (ConvBERT model)"),Wye.forEach(t),bbo=i($),zp=n($,"LI",{});var Qye=s(zp);Xie=n(Qye,"STRONG",{});var rit=s(Xie);vbo=r(rit,"convnext"),rit.forEach(t),Fbo=r(Qye," \u2014 "),gq=n(Qye,"A",{href:!0});var tit=s(gq);Tbo=r(tit,"ConvNextModel"),tit.forEach(t),Mbo=r(Qye," (ConvNeXT model)"),Qye.forEach(t),Ebo=i($),Wp=n($,"LI",{});var Hye=s(Wp);zie=n(Hye,"STRONG",{});var ait=s(zie);Cbo=r(ait,"ctrl"),ait.forEach(t),wbo=r(Hye," \u2014 "),hq=n(Hye,"A",{href:!0});var nit=s(hq);Abo=r(nit,"CTRLModel"),nit.forEach(t),Lbo=r(Hye," (CTRL model)"),Hye.forEach(t),ybo=i($),Qp=n($,"LI",{});var Uye=s(Qp);Wie=n(Uye,"STRONG",{});var sit=s(Wie);xbo=r(sit,"cvt"),sit.forEach(t),$bo=r(Uye," \u2014 "),pq=n(Uye,"A",{href:!0});var lit=s(pq);kbo=r(lit,"CvtModel"),lit.forEach(t),Sbo=r(Uye," (CvT model)"),Uye.forEach(t),Rbo=i($),Hp=n($,"LI",{});var Jye=s(Hp);Qie=n(Jye,"STRONG",{});var iit=s(Qie);Pbo=r(iit,"data2vec-audio"),iit.forEach(t),Bbo=r(Jye," \u2014 "),uq=n(Jye,"A",{href:!0});var dit=s(uq);Ibo=r(dit,"Data2VecAudioModel"),dit.forEach(t),Nbo=r(Jye," (Data2VecAudio model)"),Jye.forEach(t),qbo=i($),Up=n($,"LI",{});var Yye=s(Up);Hie=n(Yye,"STRONG",{});var cit=s(Hie);jbo=r(cit,"data2vec-text"),cit.forEach(t),Dbo=r(Yye," \u2014 "),_q=n(Yye,"A",{href:!0});var fit=s(_q);Gbo=r(fit,"Data2VecTextModel"),fit.forEach(t),Obo=r(Yye," (Data2VecText model)"),Yye.forEach(t),Vbo=i($),Jp=n($,"LI",{});var Kye=s(Jp);Uie=n(Kye,"STRONG",{});var mit=s(Uie);Xbo=r(mit,"data2vec-vision"),mit.forEach(t),zbo=r(Kye," \u2014 "),bq=n(Kye,"A",{href:!0});var git=s(bq);Wbo=r(git,"Data2VecVisionModel"),git.forEach(t),Qbo=r(Kye," (Data2VecVision model)"),Kye.forEach(t),Hbo=i($),Yp=n($,"LI",{});var Zye=s(Yp);Jie=n(Zye,"STRONG",{});var hit=s(Jie);Ubo=r(hit,"deberta"),hit.forEach(t),Jbo=r(Zye," \u2014 "),vq=n(Zye,"A",{href:!0});var pit=s(vq);Ybo=r(pit,"DebertaModel"),pit.forEach(t),Kbo=r(Zye," (DeBERTa model)"),Zye.forEach(t),Zbo=i($),Kp=n($,"LI",{});var e8e=s(Kp);Yie=n(e8e,"STRONG",{});var uit=s(Yie);evo=r(uit,"deberta-v2"),uit.forEach(t),ovo=r(e8e," \u2014 "),Fq=n(e8e,"A",{href:!0});var _it=s(Fq);rvo=r(_it,"DebertaV2Model"),_it.forEach(t),tvo=r(e8e," (DeBERTa-v2 model)"),e8e.forEach(t),avo=i($),Zp=n($,"LI",{});var o8e=s(Zp);Kie=n(o8e,"STRONG",{});var bit=s(Kie);nvo=r(bit,"decision_transformer"),bit.forEach(t),svo=r(o8e," \u2014 "),Tq=n(o8e,"A",{href:!0});var vit=s(Tq);lvo=r(vit,"DecisionTransformerModel"),vit.forEach(t),ivo=r(o8e," (Decision Transformer model)"),o8e.forEach(t),dvo=i($),eu=n($,"LI",{});var r8e=s(eu);Zie=n(r8e,"STRONG",{});var Fit=s(Zie);cvo=r(Fit,"deit"),Fit.forEach(t),fvo=r(r8e," \u2014 "),Mq=n(r8e,"A",{href:!0});var Tit=s(Mq);mvo=r(Tit,"DeiTModel"),Tit.forEach(t),gvo=r(r8e," (DeiT model)"),r8e.forEach(t),hvo=i($),ou=n($,"LI",{});var t8e=s(ou);ede=n(t8e,"STRONG",{});var Mit=s(ede);pvo=r(Mit,"detr"),Mit.forEach(t),uvo=r(t8e," \u2014 "),Eq=n(t8e,"A",{href:!0});var Eit=s(Eq);_vo=r(Eit,"DetrModel"),Eit.forEach(t),bvo=r(t8e," (DETR model)"),t8e.forEach(t),vvo=i($),ru=n($,"LI",{});var a8e=s(ru);ode=n(a8e,"STRONG",{});var Cit=s(ode);Fvo=r(Cit,"distilbert"),Cit.forEach(t),Tvo=r(a8e," \u2014 "),Cq=n(a8e,"A",{href:!0});var wit=s(Cq);Mvo=r(wit,"DistilBertModel"),wit.forEach(t),Evo=r(a8e," (DistilBERT model)"),a8e.forEach(t),Cvo=i($),tu=n($,"LI",{});var n8e=s(tu);rde=n(n8e,"STRONG",{});var Ait=s(rde);wvo=r(Ait,"dpr"),Ait.forEach(t),Avo=r(n8e," \u2014 "),wq=n(n8e,"A",{href:!0});var Lit=s(wq);Lvo=r(Lit,"DPRQuestionEncoder"),Lit.forEach(t),yvo=r(n8e," (DPR model)"),n8e.forEach(t),xvo=i($),au=n($,"LI",{});var s8e=s(au);tde=n(s8e,"STRONG",{});var yit=s(tde);$vo=r(yit,"dpt"),yit.forEach(t),kvo=r(s8e," \u2014 "),Aq=n(s8e,"A",{href:!0});var xit=s(Aq);Svo=r(xit,"DPTModel"),xit.forEach(t),Rvo=r(s8e," (DPT model)"),s8e.forEach(t),Pvo=i($),nu=n($,"LI",{});var l8e=s(nu);ade=n(l8e,"STRONG",{});var $it=s(ade);Bvo=r($it,"electra"),$it.forEach(t),Ivo=r(l8e," \u2014 "),Lq=n(l8e,"A",{href:!0});var kit=s(Lq);Nvo=r(kit,"ElectraModel"),kit.forEach(t),qvo=r(l8e," (ELECTRA model)"),l8e.forEach(t),jvo=i($),su=n($,"LI",{});var i8e=s(su);nde=n(i8e,"STRONG",{});var Sit=s(nde);Dvo=r(Sit,"flaubert"),Sit.forEach(t),Gvo=r(i8e," \u2014 "),yq=n(i8e,"A",{href:!0});var Rit=s(yq);Ovo=r(Rit,"FlaubertModel"),Rit.forEach(t),Vvo=r(i8e," (FlauBERT model)"),i8e.forEach(t),Xvo=i($),lu=n($,"LI",{});var d8e=s(lu);sde=n(d8e,"STRONG",{});var Pit=s(sde);zvo=r(Pit,"flava"),Pit.forEach(t),Wvo=r(d8e," \u2014 "),xq=n(d8e,"A",{href:!0});var Bit=s(xq);Qvo=r(Bit,"FlavaModel"),Bit.forEach(t),Hvo=r(d8e," (FLAVA model)"),d8e.forEach(t),Uvo=i($),iu=n($,"LI",{});var c8e=s(iu);lde=n(c8e,"STRONG",{});var Iit=s(lde);Jvo=r(Iit,"fnet"),Iit.forEach(t),Yvo=r(c8e," \u2014 "),$q=n(c8e,"A",{href:!0});var Nit=s($q);Kvo=r(Nit,"FNetModel"),Nit.forEach(t),Zvo=r(c8e," (FNet model)"),c8e.forEach(t),e3o=i($),du=n($,"LI",{});var f8e=s(du);ide=n(f8e,"STRONG",{});var qit=s(ide);o3o=r(qit,"fsmt"),qit.forEach(t),r3o=r(f8e," \u2014 "),kq=n(f8e,"A",{href:!0});var jit=s(kq);t3o=r(jit,"FSMTModel"),jit.forEach(t),a3o=r(f8e," (FairSeq Machine-Translation model)"),f8e.forEach(t),n3o=i($),Os=n($,"LI",{});var Wk=s(Os);dde=n(Wk,"STRONG",{});var Dit=s(dde);s3o=r(Dit,"funnel"),Dit.forEach(t),l3o=r(Wk," \u2014 "),Sq=n(Wk,"A",{href:!0});var Git=s(Sq);i3o=r(Git,"FunnelModel"),Git.forEach(t),d3o=r(Wk," or "),Rq=n(Wk,"A",{href:!0});var Oit=s(Rq);c3o=r(Oit,"FunnelBaseModel"),Oit.forEach(t),f3o=r(Wk," (Funnel Transformer model)"),Wk.forEach(t),m3o=i($),cu=n($,"LI",{});var m8e=s(cu);cde=n(m8e,"STRONG",{});var Vit=s(cde);g3o=r(Vit,"glpn"),Vit.forEach(t),h3o=r(m8e," \u2014 "),Pq=n(m8e,"A",{href:!0});var Xit=s(Pq);p3o=r(Xit,"GLPNModel"),Xit.forEach(t),u3o=r(m8e," (GLPN model)"),m8e.forEach(t),_3o=i($),fu=n($,"LI",{});var g8e=s(fu);fde=n(g8e,"STRONG",{});var zit=s(fde);b3o=r(zit,"gpt2"),zit.forEach(t),v3o=r(g8e," \u2014 "),Bq=n(g8e,"A",{href:!0});var Wit=s(Bq);F3o=r(Wit,"GPT2Model"),Wit.forEach(t),T3o=r(g8e," (OpenAI GPT-2 model)"),g8e.forEach(t),M3o=i($),mu=n($,"LI",{});var h8e=s(mu);mde=n(h8e,"STRONG",{});var Qit=s(mde);E3o=r(Qit,"gpt_neo"),Qit.forEach(t),C3o=r(h8e," \u2014 "),Iq=n(h8e,"A",{href:!0});var Hit=s(Iq);w3o=r(Hit,"GPTNeoModel"),Hit.forEach(t),A3o=r(h8e," (GPT Neo model)"),h8e.forEach(t),L3o=i($),gu=n($,"LI",{});var p8e=s(gu);gde=n(p8e,"STRONG",{});var Uit=s(gde);y3o=r(Uit,"gpt_neox"),Uit.forEach(t),x3o=r(p8e," \u2014 "),Nq=n(p8e,"A",{href:!0});var Jit=s(Nq);$3o=r(Jit,"GPTNeoXModel"),Jit.forEach(t),k3o=r(p8e," (GPT NeoX model)"),p8e.forEach(t),S3o=i($),hu=n($,"LI",{});var u8e=s(hu);hde=n(u8e,"STRONG",{});var Yit=s(hde);R3o=r(Yit,"gptj"),Yit.forEach(t),P3o=r(u8e," \u2014 "),qq=n(u8e,"A",{href:!0});var Kit=s(qq);B3o=r(Kit,"GPTJModel"),Kit.forEach(t),I3o=r(u8e," (GPT-J model)"),u8e.forEach(t),N3o=i($),pu=n($,"LI",{});var _8e=s(pu);pde=n(_8e,"STRONG",{});var Zit=s(pde);q3o=r(Zit,"hubert"),Zit.forEach(t),j3o=r(_8e," \u2014 "),jq=n(_8e,"A",{href:!0});var edt=s(jq);D3o=r(edt,"HubertModel"),edt.forEach(t),G3o=r(_8e," (Hubert model)"),_8e.forEach(t),O3o=i($),uu=n($,"LI",{});var b8e=s(uu);ude=n(b8e,"STRONG",{});var odt=s(ude);V3o=r(odt,"ibert"),odt.forEach(t),X3o=r(b8e," \u2014 "),Dq=n(b8e,"A",{href:!0});var rdt=s(Dq);z3o=r(rdt,"IBertModel"),rdt.forEach(t),W3o=r(b8e," (I-BERT model)"),b8e.forEach(t),Q3o=i($),_u=n($,"LI",{});var v8e=s(_u);_de=n(v8e,"STRONG",{});var tdt=s(_de);H3o=r(tdt,"imagegpt"),tdt.forEach(t),U3o=r(v8e," \u2014 "),Gq=n(v8e,"A",{href:!0});var adt=s(Gq);J3o=r(adt,"ImageGPTModel"),adt.forEach(t),Y3o=r(v8e," (ImageGPT model)"),v8e.forEach(t),K3o=i($),bu=n($,"LI",{});var F8e=s(bu);bde=n(F8e,"STRONG",{});var ndt=s(bde);Z3o=r(ndt,"layoutlm"),ndt.forEach(t),eFo=r(F8e," \u2014 "),Oq=n(F8e,"A",{href:!0});var sdt=s(Oq);oFo=r(sdt,"LayoutLMModel"),sdt.forEach(t),rFo=r(F8e," (LayoutLM model)"),F8e.forEach(t),tFo=i($),vu=n($,"LI",{});var T8e=s(vu);vde=n(T8e,"STRONG",{});var ldt=s(vde);aFo=r(ldt,"layoutlmv2"),ldt.forEach(t),nFo=r(T8e," \u2014 "),Vq=n(T8e,"A",{href:!0});var idt=s(Vq);sFo=r(idt,"LayoutLMv2Model"),idt.forEach(t),lFo=r(T8e," (LayoutLMv2 model)"),T8e.forEach(t),iFo=i($),Fu=n($,"LI",{});var M8e=s(Fu);Fde=n(M8e,"STRONG",{});var ddt=s(Fde);dFo=r(ddt,"layoutlmv3"),ddt.forEach(t),cFo=r(M8e," \u2014 "),Xq=n(M8e,"A",{href:!0});var cdt=s(Xq);fFo=r(cdt,"LayoutLMv3Model"),cdt.forEach(t),mFo=r(M8e," (LayoutLMv3 model)"),M8e.forEach(t),gFo=i($),Tu=n($,"LI",{});var E8e=s(Tu);Tde=n(E8e,"STRONG",{});var fdt=s(Tde);hFo=r(fdt,"led"),fdt.forEach(t),pFo=r(E8e," \u2014 "),zq=n(E8e,"A",{href:!0});var mdt=s(zq);uFo=r(mdt,"LEDModel"),mdt.forEach(t),_Fo=r(E8e," (LED model)"),E8e.forEach(t),bFo=i($),Mu=n($,"LI",{});var C8e=s(Mu);Mde=n(C8e,"STRONG",{});var gdt=s(Mde);vFo=r(gdt,"levit"),gdt.forEach(t),FFo=r(C8e," \u2014 "),Wq=n(C8e,"A",{href:!0});var hdt=s(Wq);TFo=r(hdt,"LevitModel"),hdt.forEach(t),MFo=r(C8e," (LeViT model)"),C8e.forEach(t),EFo=i($),Eu=n($,"LI",{});var w8e=s(Eu);Ede=n(w8e,"STRONG",{});var pdt=s(Ede);CFo=r(pdt,"longformer"),pdt.forEach(t),wFo=r(w8e," \u2014 "),Qq=n(w8e,"A",{href:!0});var udt=s(Qq);AFo=r(udt,"LongformerModel"),udt.forEach(t),LFo=r(w8e," (Longformer model)"),w8e.forEach(t),yFo=i($),Cu=n($,"LI",{});var A8e=s(Cu);Cde=n(A8e,"STRONG",{});var _dt=s(Cde);xFo=r(_dt,"longt5"),_dt.forEach(t),$Fo=r(A8e," \u2014 "),Hq=n(A8e,"A",{href:!0});var bdt=s(Hq);kFo=r(bdt,"LongT5Model"),bdt.forEach(t),SFo=r(A8e," (LongT5 model)"),A8e.forEach(t),RFo=i($),wu=n($,"LI",{});var L8e=s(wu);wde=n(L8e,"STRONG",{});var vdt=s(wde);PFo=r(vdt,"luke"),vdt.forEach(t),BFo=r(L8e," \u2014 "),Uq=n(L8e,"A",{href:!0});var Fdt=s(Uq);IFo=r(Fdt,"LukeModel"),Fdt.forEach(t),NFo=r(L8e," (LUKE model)"),L8e.forEach(t),qFo=i($),Au=n($,"LI",{});var y8e=s(Au);Ade=n(y8e,"STRONG",{});var Tdt=s(Ade);jFo=r(Tdt,"lxmert"),Tdt.forEach(t),DFo=r(y8e," \u2014 "),Jq=n(y8e,"A",{href:!0});var Mdt=s(Jq);GFo=r(Mdt,"LxmertModel"),Mdt.forEach(t),OFo=r(y8e," (LXMERT model)"),y8e.forEach(t),VFo=i($),Lu=n($,"LI",{});var x8e=s(Lu);Lde=n(x8e,"STRONG",{});var Edt=s(Lde);XFo=r(Edt,"m2m_100"),Edt.forEach(t),zFo=r(x8e," \u2014 "),Yq=n(x8e,"A",{href:!0});var Cdt=s(Yq);WFo=r(Cdt,"M2M100Model"),Cdt.forEach(t),QFo=r(x8e," (M2M100 model)"),x8e.forEach(t),HFo=i($),yu=n($,"LI",{});var $8e=s(yu);yde=n($8e,"STRONG",{});var wdt=s(yde);UFo=r(wdt,"marian"),wdt.forEach(t),JFo=r($8e," \u2014 "),Kq=n($8e,"A",{href:!0});var Adt=s(Kq);YFo=r(Adt,"MarianModel"),Adt.forEach(t),KFo=r($8e," (Marian model)"),$8e.forEach(t),ZFo=i($),xu=n($,"LI",{});var k8e=s(xu);xde=n(k8e,"STRONG",{});var Ldt=s(xde);eTo=r(Ldt,"maskformer"),Ldt.forEach(t),oTo=r(k8e," \u2014 "),Zq=n(k8e,"A",{href:!0});var ydt=s(Zq);rTo=r(ydt,"MaskFormerModel"),ydt.forEach(t),tTo=r(k8e," (MaskFormer model)"),k8e.forEach(t),aTo=i($),$u=n($,"LI",{});var S8e=s($u);$de=n(S8e,"STRONG",{});var xdt=s($de);nTo=r(xdt,"mbart"),xdt.forEach(t),sTo=r(S8e," \u2014 "),ej=n(S8e,"A",{href:!0});var $dt=s(ej);lTo=r($dt,"MBartModel"),$dt.forEach(t),iTo=r(S8e," (mBART model)"),S8e.forEach(t),dTo=i($),ku=n($,"LI",{});var R8e=s(ku);kde=n(R8e,"STRONG",{});var kdt=s(kde);cTo=r(kdt,"mctct"),kdt.forEach(t),fTo=r(R8e," \u2014 "),oj=n(R8e,"A",{href:!0});var Sdt=s(oj);mTo=r(Sdt,"MCTCTModel"),Sdt.forEach(t),gTo=r(R8e," (M-CTC-T model)"),R8e.forEach(t),hTo=i($),Su=n($,"LI",{});var P8e=s(Su);Sde=n(P8e,"STRONG",{});var Rdt=s(Sde);pTo=r(Rdt,"megatron-bert"),Rdt.forEach(t),uTo=r(P8e," \u2014 "),rj=n(P8e,"A",{href:!0});var Pdt=s(rj);_To=r(Pdt,"MegatronBertModel"),Pdt.forEach(t),bTo=r(P8e," (Megatron-BERT model)"),P8e.forEach(t),vTo=i($),Ru=n($,"LI",{});var B8e=s(Ru);Rde=n(B8e,"STRONG",{});var Bdt=s(Rde);FTo=r(Bdt,"mobilebert"),Bdt.forEach(t),TTo=r(B8e," \u2014 "),tj=n(B8e,"A",{href:!0});var Idt=s(tj);MTo=r(Idt,"MobileBertModel"),Idt.forEach(t),ETo=r(B8e," (MobileBERT model)"),B8e.forEach(t),CTo=i($),Pu=n($,"LI",{});var I8e=s(Pu);Pde=n(I8e,"STRONG",{});var Ndt=s(Pde);wTo=r(Ndt,"mpnet"),Ndt.forEach(t),ATo=r(I8e," \u2014 "),aj=n(I8e,"A",{href:!0});var qdt=s(aj);LTo=r(qdt,"MPNetModel"),qdt.forEach(t),yTo=r(I8e," (MPNet model)"),I8e.forEach(t),xTo=i($),Bu=n($,"LI",{});var N8e=s(Bu);Bde=n(N8e,"STRONG",{});var jdt=s(Bde);$To=r(jdt,"mt5"),jdt.forEach(t),kTo=r(N8e," \u2014 "),nj=n(N8e,"A",{href:!0});var Ddt=s(nj);STo=r(Ddt,"MT5Model"),Ddt.forEach(t),RTo=r(N8e," (MT5 model)"),N8e.forEach(t),PTo=i($),Iu=n($,"LI",{});var q8e=s(Iu);Ide=n(q8e,"STRONG",{});var Gdt=s(Ide);BTo=r(Gdt,"nystromformer"),Gdt.forEach(t),ITo=r(q8e," \u2014 "),sj=n(q8e,"A",{href:!0});var Odt=s(sj);NTo=r(Odt,"NystromformerModel"),Odt.forEach(t),qTo=r(q8e," (Nystr\xF6mformer model)"),q8e.forEach(t),jTo=i($),Nu=n($,"LI",{});var j8e=s(Nu);Nde=n(j8e,"STRONG",{});var Vdt=s(Nde);DTo=r(Vdt,"openai-gpt"),Vdt.forEach(t),GTo=r(j8e," \u2014 "),lj=n(j8e,"A",{href:!0});var Xdt=s(lj);OTo=r(Xdt,"OpenAIGPTModel"),Xdt.forEach(t),VTo=r(j8e," (OpenAI GPT model)"),j8e.forEach(t),XTo=i($),qu=n($,"LI",{});var D8e=s(qu);qde=n(D8e,"STRONG",{});var zdt=s(qde);zTo=r(zdt,"opt"),zdt.forEach(t),WTo=r(D8e," \u2014 "),ij=n(D8e,"A",{href:!0});var Wdt=s(ij);QTo=r(Wdt,"OPTModel"),Wdt.forEach(t),HTo=r(D8e," (OPT model)"),D8e.forEach(t),UTo=i($),ju=n($,"LI",{});var G8e=s(ju);jde=n(G8e,"STRONG",{});var Qdt=s(jde);JTo=r(Qdt,"pegasus"),Qdt.forEach(t),YTo=r(G8e," \u2014 "),dj=n(G8e,"A",{href:!0});var Hdt=s(dj);KTo=r(Hdt,"PegasusModel"),Hdt.forEach(t),ZTo=r(G8e," (Pegasus model)"),G8e.forEach(t),e7o=i($),Du=n($,"LI",{});var O8e=s(Du);Dde=n(O8e,"STRONG",{});var Udt=s(Dde);o7o=r(Udt,"perceiver"),Udt.forEach(t),r7o=r(O8e," \u2014 "),cj=n(O8e,"A",{href:!0});var Jdt=s(cj);t7o=r(Jdt,"PerceiverModel"),Jdt.forEach(t),a7o=r(O8e," (Perceiver model)"),O8e.forEach(t),n7o=i($),Gu=n($,"LI",{});var V8e=s(Gu);Gde=n(V8e,"STRONG",{});var Ydt=s(Gde);s7o=r(Ydt,"plbart"),Ydt.forEach(t),l7o=r(V8e," \u2014 "),fj=n(V8e,"A",{href:!0});var Kdt=s(fj);i7o=r(Kdt,"PLBartModel"),Kdt.forEach(t),d7o=r(V8e," (PLBart model)"),V8e.forEach(t),c7o=i($),Ou=n($,"LI",{});var X8e=s(Ou);Ode=n(X8e,"STRONG",{});var Zdt=s(Ode);f7o=r(Zdt,"poolformer"),Zdt.forEach(t),m7o=r(X8e," \u2014 "),mj=n(X8e,"A",{href:!0});var ect=s(mj);g7o=r(ect,"PoolFormerModel"),ect.forEach(t),h7o=r(X8e," (PoolFormer model)"),X8e.forEach(t),p7o=i($),Vu=n($,"LI",{});var z8e=s(Vu);Vde=n(z8e,"STRONG",{});var oct=s(Vde);u7o=r(oct,"prophetnet"),oct.forEach(t),_7o=r(z8e," \u2014 "),gj=n(z8e,"A",{href:!0});var rct=s(gj);b7o=r(rct,"ProphetNetModel"),rct.forEach(t),v7o=r(z8e," (ProphetNet model)"),z8e.forEach(t),F7o=i($),Xu=n($,"LI",{});var W8e=s(Xu);Xde=n(W8e,"STRONG",{});var tct=s(Xde);T7o=r(tct,"qdqbert"),tct.forEach(t),M7o=r(W8e," \u2014 "),hj=n(W8e,"A",{href:!0});var act=s(hj);E7o=r(act,"QDQBertModel"),act.forEach(t),C7o=r(W8e," (QDQBert model)"),W8e.forEach(t),w7o=i($),zu=n($,"LI",{});var Q8e=s(zu);zde=n(Q8e,"STRONG",{});var nct=s(zde);A7o=r(nct,"reformer"),nct.forEach(t),L7o=r(Q8e," \u2014 "),pj=n(Q8e,"A",{href:!0});var sct=s(pj);y7o=r(sct,"ReformerModel"),sct.forEach(t),x7o=r(Q8e," (Reformer model)"),Q8e.forEach(t),$7o=i($),Wu=n($,"LI",{});var H8e=s(Wu);Wde=n(H8e,"STRONG",{});var lct=s(Wde);k7o=r(lct,"regnet"),lct.forEach(t),S7o=r(H8e," \u2014 "),uj=n(H8e,"A",{href:!0});var ict=s(uj);R7o=r(ict,"RegNetModel"),ict.forEach(t),P7o=r(H8e," (RegNet model)"),H8e.forEach(t),B7o=i($),Qu=n($,"LI",{});var U8e=s(Qu);Qde=n(U8e,"STRONG",{});var dct=s(Qde);I7o=r(dct,"rembert"),dct.forEach(t),N7o=r(U8e," \u2014 "),_j=n(U8e,"A",{href:!0});var cct=s(_j);q7o=r(cct,"RemBertModel"),cct.forEach(t),j7o=r(U8e," (RemBERT model)"),U8e.forEach(t),D7o=i($),Hu=n($,"LI",{});var J8e=s(Hu);Hde=n(J8e,"STRONG",{});var fct=s(Hde);G7o=r(fct,"resnet"),fct.forEach(t),O7o=r(J8e," \u2014 "),bj=n(J8e,"A",{href:!0});var mct=s(bj);V7o=r(mct,"ResNetModel"),mct.forEach(t),X7o=r(J8e," (ResNet model)"),J8e.forEach(t),z7o=i($),Uu=n($,"LI",{});var Y8e=s(Uu);Ude=n(Y8e,"STRONG",{});var gct=s(Ude);W7o=r(gct,"retribert"),gct.forEach(t),Q7o=r(Y8e," \u2014 "),vj=n(Y8e,"A",{href:!0});var hct=s(vj);H7o=r(hct,"RetriBertModel"),hct.forEach(t),U7o=r(Y8e," (RetriBERT model)"),Y8e.forEach(t),J7o=i($),Ju=n($,"LI",{});var K8e=s(Ju);Jde=n(K8e,"STRONG",{});var pct=s(Jde);Y7o=r(pct,"roberta"),pct.forEach(t),K7o=r(K8e," \u2014 "),Fj=n(K8e,"A",{href:!0});var uct=s(Fj);Z7o=r(uct,"RobertaModel"),uct.forEach(t),eMo=r(K8e," (RoBERTa model)"),K8e.forEach(t),oMo=i($),Yu=n($,"LI",{});var Z8e=s(Yu);Yde=n(Z8e,"STRONG",{});var _ct=s(Yde);rMo=r(_ct,"roformer"),_ct.forEach(t),tMo=r(Z8e," \u2014 "),Tj=n(Z8e,"A",{href:!0});var bct=s(Tj);aMo=r(bct,"RoFormerModel"),bct.forEach(t),nMo=r(Z8e," (RoFormer model)"),Z8e.forEach(t),sMo=i($),Ku=n($,"LI",{});var e9e=s(Ku);Kde=n(e9e,"STRONG",{});var vct=s(Kde);lMo=r(vct,"segformer"),vct.forEach(t),iMo=r(e9e," \u2014 "),Mj=n(e9e,"A",{href:!0});var Fct=s(Mj);dMo=r(Fct,"SegformerModel"),Fct.forEach(t),cMo=r(e9e," (SegFormer model)"),e9e.forEach(t),fMo=i($),Zu=n($,"LI",{});var o9e=s(Zu);Zde=n(o9e,"STRONG",{});var Tct=s(Zde);mMo=r(Tct,"sew"),Tct.forEach(t),gMo=r(o9e," \u2014 "),Ej=n(o9e,"A",{href:!0});var Mct=s(Ej);hMo=r(Mct,"SEWModel"),Mct.forEach(t),pMo=r(o9e," (SEW model)"),o9e.forEach(t),uMo=i($),e_=n($,"LI",{});var r9e=s(e_);ece=n(r9e,"STRONG",{});var Ect=s(ece);_Mo=r(Ect,"sew-d"),Ect.forEach(t),bMo=r(r9e," \u2014 "),Cj=n(r9e,"A",{href:!0});var Cct=s(Cj);vMo=r(Cct,"SEWDModel"),Cct.forEach(t),FMo=r(r9e," (SEW-D model)"),r9e.forEach(t),TMo=i($),o_=n($,"LI",{});var t9e=s(o_);oce=n(t9e,"STRONG",{});var wct=s(oce);MMo=r(wct,"speech_to_text"),wct.forEach(t),EMo=r(t9e," \u2014 "),wj=n(t9e,"A",{href:!0});var Act=s(wj);CMo=r(Act,"Speech2TextModel"),Act.forEach(t),wMo=r(t9e," (Speech2Text model)"),t9e.forEach(t),AMo=i($),r_=n($,"LI",{});var a9e=s(r_);rce=n(a9e,"STRONG",{});var Lct=s(rce);LMo=r(Lct,"splinter"),Lct.forEach(t),yMo=r(a9e," \u2014 "),Aj=n(a9e,"A",{href:!0});var yct=s(Aj);xMo=r(yct,"SplinterModel"),yct.forEach(t),$Mo=r(a9e," (Splinter model)"),a9e.forEach(t),kMo=i($),t_=n($,"LI",{});var n9e=s(t_);tce=n(n9e,"STRONG",{});var xct=s(tce);SMo=r(xct,"squeezebert"),xct.forEach(t),RMo=r(n9e," \u2014 "),Lj=n(n9e,"A",{href:!0});var $ct=s(Lj);PMo=r($ct,"SqueezeBertModel"),$ct.forEach(t),BMo=r(n9e," (SqueezeBERT model)"),n9e.forEach(t),IMo=i($),a_=n($,"LI",{});var s9e=s(a_);ace=n(s9e,"STRONG",{});var kct=s(ace);NMo=r(kct,"swin"),kct.forEach(t),qMo=r(s9e," \u2014 "),yj=n(s9e,"A",{href:!0});var Sct=s(yj);jMo=r(Sct,"SwinModel"),Sct.forEach(t),DMo=r(s9e," (Swin Transformer model)"),s9e.forEach(t),GMo=i($),n_=n($,"LI",{});var l9e=s(n_);nce=n(l9e,"STRONG",{});var Rct=s(nce);OMo=r(Rct,"t5"),Rct.forEach(t),VMo=r(l9e," \u2014 "),xj=n(l9e,"A",{href:!0});var Pct=s(xj);XMo=r(Pct,"T5Model"),Pct.forEach(t),zMo=r(l9e," (T5 model)"),l9e.forEach(t),WMo=i($),s_=n($,"LI",{});var i9e=s(s_);sce=n(i9e,"STRONG",{});var Bct=s(sce);QMo=r(Bct,"tapas"),Bct.forEach(t),HMo=r(i9e," \u2014 "),$j=n(i9e,"A",{href:!0});var Ict=s($j);UMo=r(Ict,"TapasModel"),Ict.forEach(t),JMo=r(i9e," (TAPAS model)"),i9e.forEach(t),YMo=i($),l_=n($,"LI",{});var d9e=s(l_);lce=n(d9e,"STRONG",{});var Nct=s(lce);KMo=r(Nct,"trajectory_transformer"),Nct.forEach(t),ZMo=r(d9e," \u2014 "),kj=n(d9e,"A",{href:!0});var qct=s(kj);eEo=r(qct,"TrajectoryTransformerModel"),qct.forEach(t),oEo=r(d9e," (Trajectory Transformer model)"),d9e.forEach(t),rEo=i($),i_=n($,"LI",{});var c9e=s(i_);ice=n(c9e,"STRONG",{});var jct=s(ice);tEo=r(jct,"transfo-xl"),jct.forEach(t),aEo=r(c9e," \u2014 "),Sj=n(c9e,"A",{href:!0});var Dct=s(Sj);nEo=r(Dct,"TransfoXLModel"),Dct.forEach(t),sEo=r(c9e," (Transformer-XL model)"),c9e.forEach(t),lEo=i($),d_=n($,"LI",{});var f9e=s(d_);dce=n(f9e,"STRONG",{});var Gct=s(dce);iEo=r(Gct,"unispeech"),Gct.forEach(t),dEo=r(f9e," \u2014 "),Rj=n(f9e,"A",{href:!0});var Oct=s(Rj);cEo=r(Oct,"UniSpeechModel"),Oct.forEach(t),fEo=r(f9e," (UniSpeech model)"),f9e.forEach(t),mEo=i($),c_=n($,"LI",{});var m9e=s(c_);cce=n(m9e,"STRONG",{});var Vct=s(cce);gEo=r(Vct,"unispeech-sat"),Vct.forEach(t),hEo=r(m9e," \u2014 "),Pj=n(m9e,"A",{href:!0});var Xct=s(Pj);pEo=r(Xct,"UniSpeechSatModel"),Xct.forEach(t),uEo=r(m9e," (UniSpeechSat model)"),m9e.forEach(t),_Eo=i($),f_=n($,"LI",{});var g9e=s(f_);fce=n(g9e,"STRONG",{});var zct=s(fce);bEo=r(zct,"van"),zct.forEach(t),vEo=r(g9e," \u2014 "),Bj=n(g9e,"A",{href:!0});var Wct=s(Bj);FEo=r(Wct,"VanModel"),Wct.forEach(t),TEo=r(g9e," (VAN model)"),g9e.forEach(t),MEo=i($),m_=n($,"LI",{});var h9e=s(m_);mce=n(h9e,"STRONG",{});var Qct=s(mce);EEo=r(Qct,"vilt"),Qct.forEach(t),CEo=r(h9e," \u2014 "),Ij=n(h9e,"A",{href:!0});var Hct=s(Ij);wEo=r(Hct,"ViltModel"),Hct.forEach(t),AEo=r(h9e," (ViLT model)"),h9e.forEach(t),LEo=i($),g_=n($,"LI",{});var p9e=s(g_);gce=n(p9e,"STRONG",{});var Uct=s(gce);yEo=r(Uct,"vision-text-dual-encoder"),Uct.forEach(t),xEo=r(p9e," \u2014 "),Nj=n(p9e,"A",{href:!0});var Jct=s(Nj);$Eo=r(Jct,"VisionTextDualEncoderModel"),Jct.forEach(t),kEo=r(p9e," (VisionTextDualEncoder model)"),p9e.forEach(t),SEo=i($),h_=n($,"LI",{});var u9e=s(h_);hce=n(u9e,"STRONG",{});var Yct=s(hce);REo=r(Yct,"visual_bert"),Yct.forEach(t),PEo=r(u9e," \u2014 "),qj=n(u9e,"A",{href:!0});var Kct=s(qj);BEo=r(Kct,"VisualBertModel"),Kct.forEach(t),IEo=r(u9e," (VisualBERT model)"),u9e.forEach(t),NEo=i($),p_=n($,"LI",{});var _9e=s(p_);pce=n(_9e,"STRONG",{});var Zct=s(pce);qEo=r(Zct,"vit"),Zct.forEach(t),jEo=r(_9e," \u2014 "),jj=n(_9e,"A",{href:!0});var eft=s(jj);DEo=r(eft,"ViTModel"),eft.forEach(t),GEo=r(_9e," (ViT model)"),_9e.forEach(t),OEo=i($),u_=n($,"LI",{});var b9e=s(u_);uce=n(b9e,"STRONG",{});var oft=s(uce);VEo=r(oft,"vit_mae"),oft.forEach(t),XEo=r(b9e," \u2014 "),Dj=n(b9e,"A",{href:!0});var rft=s(Dj);zEo=r(rft,"ViTMAEModel"),rft.forEach(t),WEo=r(b9e," (ViTMAE model)"),b9e.forEach(t),QEo=i($),__=n($,"LI",{});var v9e=s(__);_ce=n(v9e,"STRONG",{});var tft=s(_ce);HEo=r(tft,"wav2vec2"),tft.forEach(t),UEo=r(v9e," \u2014 "),Gj=n(v9e,"A",{href:!0});var aft=s(Gj);JEo=r(aft,"Wav2Vec2Model"),aft.forEach(t),YEo=r(v9e," (Wav2Vec2 model)"),v9e.forEach(t),KEo=i($),b_=n($,"LI",{});var F9e=s(b_);bce=n(F9e,"STRONG",{});var nft=s(bce);ZEo=r(nft,"wav2vec2-conformer"),nft.forEach(t),eCo=r(F9e," \u2014 "),Oj=n(F9e,"A",{href:!0});var sft=s(Oj);oCo=r(sft,"Wav2Vec2ConformerModel"),sft.forEach(t),rCo=r(F9e," (Wav2Vec2-Conformer model)"),F9e.forEach(t),tCo=i($),v_=n($,"LI",{});var T9e=s(v_);vce=n(T9e,"STRONG",{});var lft=s(vce);aCo=r(lft,"wavlm"),lft.forEach(t),nCo=r(T9e," \u2014 "),Vj=n(T9e,"A",{href:!0});var ift=s(Vj);sCo=r(ift,"WavLMModel"),ift.forEach(t),lCo=r(T9e," (WavLM model)"),T9e.forEach(t),iCo=i($),F_=n($,"LI",{});var M9e=s(F_);Fce=n(M9e,"STRONG",{});var dft=s(Fce);dCo=r(dft,"xglm"),dft.forEach(t),cCo=r(M9e," \u2014 "),Xj=n(M9e,"A",{href:!0});var cft=s(Xj);fCo=r(cft,"XGLMModel"),cft.forEach(t),mCo=r(M9e," (XGLM model)"),M9e.forEach(t),gCo=i($),T_=n($,"LI",{});var E9e=s(T_);Tce=n(E9e,"STRONG",{});var fft=s(Tce);hCo=r(fft,"xlm"),fft.forEach(t),pCo=r(E9e," \u2014 "),zj=n(E9e,"A",{href:!0});var mft=s(zj);uCo=r(mft,"XLMModel"),mft.forEach(t),_Co=r(E9e," (XLM model)"),E9e.forEach(t),bCo=i($),M_=n($,"LI",{});var C9e=s(M_);Mce=n(C9e,"STRONG",{});var gft=s(Mce);vCo=r(gft,"xlm-prophetnet"),gft.forEach(t),FCo=r(C9e," \u2014 "),Wj=n(C9e,"A",{href:!0});var hft=s(Wj);TCo=r(hft,"XLMProphetNetModel"),hft.forEach(t),MCo=r(C9e," (XLM-ProphetNet model)"),C9e.forEach(t),ECo=i($),E_=n($,"LI",{});var w9e=s(E_);Ece=n(w9e,"STRONG",{});var pft=s(Ece);CCo=r(pft,"xlm-roberta"),pft.forEach(t),wCo=r(w9e," \u2014 "),Qj=n(w9e,"A",{href:!0});var uft=s(Qj);ACo=r(uft,"XLMRobertaModel"),uft.forEach(t),LCo=r(w9e," (XLM-RoBERTa model)"),w9e.forEach(t),yCo=i($),C_=n($,"LI",{});var A9e=s(C_);Cce=n(A9e,"STRONG",{});var _ft=s(Cce);xCo=r(_ft,"xlm-roberta-xl"),_ft.forEach(t),$Co=r(A9e," \u2014 "),Hj=n(A9e,"A",{href:!0});var bft=s(Hj);kCo=r(bft,"XLMRobertaXLModel"),bft.forEach(t),SCo=r(A9e," (XLM-RoBERTa-XL model)"),A9e.forEach(t),RCo=i($),w_=n($,"LI",{});var L9e=s(w_);wce=n(L9e,"STRONG",{});var vft=s(wce);PCo=r(vft,"xlnet"),vft.forEach(t),BCo=r(L9e," \u2014 "),Uj=n(L9e,"A",{href:!0});var Fft=s(Uj);ICo=r(Fft,"XLNetModel"),Fft.forEach(t),NCo=r(L9e," (XLNet model)"),L9e.forEach(t),qCo=i($),A_=n($,"LI",{});var y9e=s(A_);Ace=n(y9e,"STRONG",{});var Tft=s(Ace);jCo=r(Tft,"yolos"),Tft.forEach(t),DCo=r(y9e," \u2014 "),Jj=n(y9e,"A",{href:!0});var Mft=s(Jj);GCo=r(Mft,"YolosModel"),Mft.forEach(t),OCo=r(y9e," (YOLOS model)"),y9e.forEach(t),VCo=i($),L_=n($,"LI",{});var x9e=s(L_);Lce=n(x9e,"STRONG",{});var Eft=s(Lce);XCo=r(Eft,"yoso"),Eft.forEach(t),zCo=r(x9e," \u2014 "),Yj=n(x9e,"A",{href:!0});var Cft=s(Yj);WCo=r(Cft,"YosoModel"),Cft.forEach(t),QCo=r(x9e," (YOSO model)"),x9e.forEach(t),$.forEach(t),HCo=i(aa),y_=n(aa,"P",{});var $9e=s(y_);UCo=r($9e,"The model is set in evaluation mode by default using "),yce=n($9e,"CODE",{});var wft=s(yce);JCo=r(wft,"model.eval()"),wft.forEach(t),YCo=r($9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xce=n($9e,"CODE",{});var Aft=s(xce);KCo=r(Aft,"model.train()"),Aft.forEach(t),$9e.forEach(t),ZCo=i(aa),T(x_.$$.fragment,aa),aa.forEach(t),Js.forEach(t),$Ge=i(f),qi=n(f,"H2",{class:!0});var IVe=s(qi);$_=n(IVe,"A",{id:!0,class:!0,href:!0});var Lft=s($_);$ce=n(Lft,"SPAN",{});var yft=s($ce);T(ey.$$.fragment,yft),yft.forEach(t),Lft.forEach(t),e5o=i(IVe),kce=n(IVe,"SPAN",{});var xft=s(kce);o5o=r(xft,"AutoModelForPreTraining"),xft.forEach(t),IVe.forEach(t),kGe=i(f),$o=n(f,"DIV",{class:!0});var Ys=s($o);T(oy.$$.fragment,Ys),r5o=i(Ys),ji=n(Ys,"P",{});var doe=s(ji);t5o=r(doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kj=n(doe,"A",{href:!0});var $ft=s(Kj);a5o=r($ft,"from_pretrained()"),$ft.forEach(t),n5o=r(doe," class method or the "),Zj=n(doe,"A",{href:!0});var kft=s(Zj);s5o=r(kft,"from_config()"),kft.forEach(t),l5o=r(doe,` class
method.`),doe.forEach(t),i5o=i(Ys),ry=n(Ys,"P",{});var NVe=s(ry);d5o=r(NVe,"This class cannot be instantiated directly using "),Sce=n(NVe,"CODE",{});var Sft=s(Sce);c5o=r(Sft,"__init__()"),Sft.forEach(t),f5o=r(NVe," (throws an error)."),NVe.forEach(t),m5o=i(Ys),st=n(Ys,"DIV",{class:!0});var LA=s(st);T(ty.$$.fragment,LA),g5o=i(LA),Rce=n(LA,"P",{});var Rft=s(Rce);h5o=r(Rft,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Rft.forEach(t),p5o=i(LA),Di=n(LA,"P",{});var coe=s(Di);u5o=r(coe,`Note:
Loading a model from its configuration file does `),Pce=n(coe,"STRONG",{});var Pft=s(Pce);_5o=r(Pft,"not"),Pft.forEach(t),b5o=r(coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),eD=n(coe,"A",{href:!0});var Bft=s(eD);v5o=r(Bft,"from_pretrained()"),Bft.forEach(t),F5o=r(coe," to load the model weights."),coe.forEach(t),T5o=i(LA),T(k_.$$.fragment,LA),LA.forEach(t),M5o=i(Ys),Ye=n(Ys,"DIV",{class:!0});var na=s(Ye);T(ay.$$.fragment,na),E5o=i(na),Bce=n(na,"P",{});var Ift=s(Bce);C5o=r(Ift,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ift.forEach(t),w5o=i(na),Ra=n(na,"P",{});var yA=s(Ra);A5o=r(yA,"The model class to instantiate is selected based on the "),Ice=n(yA,"CODE",{});var Nft=s(Ice);L5o=r(Nft,"model_type"),Nft.forEach(t),y5o=r(yA,` property of the config object (either
passed as an argument or loaded from `),Nce=n(yA,"CODE",{});var qft=s(Nce);x5o=r(qft,"pretrained_model_name_or_path"),qft.forEach(t),$5o=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qce=n(yA,"CODE",{});var jft=s(qce);k5o=r(jft,"pretrained_model_name_or_path"),jft.forEach(t),S5o=r(yA,":"),yA.forEach(t),R5o=i(na),G=n(na,"UL",{});var O=s(G);S_=n(O,"LI",{});var k9e=s(S_);jce=n(k9e,"STRONG",{});var Dft=s(jce);P5o=r(Dft,"albert"),Dft.forEach(t),B5o=r(k9e," \u2014 "),oD=n(k9e,"A",{href:!0});var Gft=s(oD);I5o=r(Gft,"AlbertForPreTraining"),Gft.forEach(t),N5o=r(k9e," (ALBERT model)"),k9e.forEach(t),q5o=i(O),R_=n(O,"LI",{});var S9e=s(R_);Dce=n(S9e,"STRONG",{});var Oft=s(Dce);j5o=r(Oft,"bart"),Oft.forEach(t),D5o=r(S9e," \u2014 "),rD=n(S9e,"A",{href:!0});var Vft=s(rD);G5o=r(Vft,"BartForConditionalGeneration"),Vft.forEach(t),O5o=r(S9e," (BART model)"),S9e.forEach(t),V5o=i(O),P_=n(O,"LI",{});var R9e=s(P_);Gce=n(R9e,"STRONG",{});var Xft=s(Gce);X5o=r(Xft,"bert"),Xft.forEach(t),z5o=r(R9e," \u2014 "),tD=n(R9e,"A",{href:!0});var zft=s(tD);W5o=r(zft,"BertForPreTraining"),zft.forEach(t),Q5o=r(R9e," (BERT model)"),R9e.forEach(t),H5o=i(O),B_=n(O,"LI",{});var P9e=s(B_);Oce=n(P9e,"STRONG",{});var Wft=s(Oce);U5o=r(Wft,"big_bird"),Wft.forEach(t),J5o=r(P9e," \u2014 "),aD=n(P9e,"A",{href:!0});var Qft=s(aD);Y5o=r(Qft,"BigBirdForPreTraining"),Qft.forEach(t),K5o=r(P9e," (BigBird model)"),P9e.forEach(t),Z5o=i(O),I_=n(O,"LI",{});var B9e=s(I_);Vce=n(B9e,"STRONG",{});var Hft=s(Vce);e0o=r(Hft,"bloom"),Hft.forEach(t),o0o=r(B9e," \u2014 "),nD=n(B9e,"A",{href:!0});var Uft=s(nD);r0o=r(Uft,"BloomForCausalLM"),Uft.forEach(t),t0o=r(B9e," (BLOOM model)"),B9e.forEach(t),a0o=i(O),N_=n(O,"LI",{});var I9e=s(N_);Xce=n(I9e,"STRONG",{});var Jft=s(Xce);n0o=r(Jft,"camembert"),Jft.forEach(t),s0o=r(I9e," \u2014 "),sD=n(I9e,"A",{href:!0});var Yft=s(sD);l0o=r(Yft,"CamembertForMaskedLM"),Yft.forEach(t),i0o=r(I9e," (CamemBERT model)"),I9e.forEach(t),d0o=i(O),q_=n(O,"LI",{});var N9e=s(q_);zce=n(N9e,"STRONG",{});var Kft=s(zce);c0o=r(Kft,"ctrl"),Kft.forEach(t),f0o=r(N9e," \u2014 "),lD=n(N9e,"A",{href:!0});var Zft=s(lD);m0o=r(Zft,"CTRLLMHeadModel"),Zft.forEach(t),g0o=r(N9e," (CTRL model)"),N9e.forEach(t),h0o=i(O),j_=n(O,"LI",{});var q9e=s(j_);Wce=n(q9e,"STRONG",{});var emt=s(Wce);p0o=r(emt,"data2vec-text"),emt.forEach(t),u0o=r(q9e," \u2014 "),iD=n(q9e,"A",{href:!0});var omt=s(iD);_0o=r(omt,"Data2VecTextForMaskedLM"),omt.forEach(t),b0o=r(q9e," (Data2VecText model)"),q9e.forEach(t),v0o=i(O),D_=n(O,"LI",{});var j9e=s(D_);Qce=n(j9e,"STRONG",{});var rmt=s(Qce);F0o=r(rmt,"deberta"),rmt.forEach(t),T0o=r(j9e," \u2014 "),dD=n(j9e,"A",{href:!0});var tmt=s(dD);M0o=r(tmt,"DebertaForMaskedLM"),tmt.forEach(t),E0o=r(j9e," (DeBERTa model)"),j9e.forEach(t),C0o=i(O),G_=n(O,"LI",{});var D9e=s(G_);Hce=n(D9e,"STRONG",{});var amt=s(Hce);w0o=r(amt,"deberta-v2"),amt.forEach(t),A0o=r(D9e," \u2014 "),cD=n(D9e,"A",{href:!0});var nmt=s(cD);L0o=r(nmt,"DebertaV2ForMaskedLM"),nmt.forEach(t),y0o=r(D9e," (DeBERTa-v2 model)"),D9e.forEach(t),x0o=i(O),O_=n(O,"LI",{});var G9e=s(O_);Uce=n(G9e,"STRONG",{});var smt=s(Uce);$0o=r(smt,"distilbert"),smt.forEach(t),k0o=r(G9e," \u2014 "),fD=n(G9e,"A",{href:!0});var lmt=s(fD);S0o=r(lmt,"DistilBertForMaskedLM"),lmt.forEach(t),R0o=r(G9e," (DistilBERT model)"),G9e.forEach(t),P0o=i(O),V_=n(O,"LI",{});var O9e=s(V_);Jce=n(O9e,"STRONG",{});var imt=s(Jce);B0o=r(imt,"electra"),imt.forEach(t),I0o=r(O9e," \u2014 "),mD=n(O9e,"A",{href:!0});var dmt=s(mD);N0o=r(dmt,"ElectraForPreTraining"),dmt.forEach(t),q0o=r(O9e," (ELECTRA model)"),O9e.forEach(t),j0o=i(O),X_=n(O,"LI",{});var V9e=s(X_);Yce=n(V9e,"STRONG",{});var cmt=s(Yce);D0o=r(cmt,"flaubert"),cmt.forEach(t),G0o=r(V9e," \u2014 "),gD=n(V9e,"A",{href:!0});var fmt=s(gD);O0o=r(fmt,"FlaubertWithLMHeadModel"),fmt.forEach(t),V0o=r(V9e," (FlauBERT model)"),V9e.forEach(t),X0o=i(O),z_=n(O,"LI",{});var X9e=s(z_);Kce=n(X9e,"STRONG",{});var mmt=s(Kce);z0o=r(mmt,"flava"),mmt.forEach(t),W0o=r(X9e," \u2014 "),hD=n(X9e,"A",{href:!0});var gmt=s(hD);Q0o=r(gmt,"FlavaForPreTraining"),gmt.forEach(t),H0o=r(X9e," (FLAVA model)"),X9e.forEach(t),U0o=i(O),W_=n(O,"LI",{});var z9e=s(W_);Zce=n(z9e,"STRONG",{});var hmt=s(Zce);J0o=r(hmt,"fnet"),hmt.forEach(t),Y0o=r(z9e," \u2014 "),pD=n(z9e,"A",{href:!0});var pmt=s(pD);K0o=r(pmt,"FNetForPreTraining"),pmt.forEach(t),Z0o=r(z9e," (FNet model)"),z9e.forEach(t),ewo=i(O),Q_=n(O,"LI",{});var W9e=s(Q_);efe=n(W9e,"STRONG",{});var umt=s(efe);owo=r(umt,"fsmt"),umt.forEach(t),rwo=r(W9e," \u2014 "),uD=n(W9e,"A",{href:!0});var _mt=s(uD);two=r(_mt,"FSMTForConditionalGeneration"),_mt.forEach(t),awo=r(W9e," (FairSeq Machine-Translation model)"),W9e.forEach(t),nwo=i(O),H_=n(O,"LI",{});var Q9e=s(H_);ofe=n(Q9e,"STRONG",{});var bmt=s(ofe);swo=r(bmt,"funnel"),bmt.forEach(t),lwo=r(Q9e," \u2014 "),_D=n(Q9e,"A",{href:!0});var vmt=s(_D);iwo=r(vmt,"FunnelForPreTraining"),vmt.forEach(t),dwo=r(Q9e," (Funnel Transformer model)"),Q9e.forEach(t),cwo=i(O),U_=n(O,"LI",{});var H9e=s(U_);rfe=n(H9e,"STRONG",{});var Fmt=s(rfe);fwo=r(Fmt,"gpt2"),Fmt.forEach(t),mwo=r(H9e," \u2014 "),bD=n(H9e,"A",{href:!0});var Tmt=s(bD);gwo=r(Tmt,"GPT2LMHeadModel"),Tmt.forEach(t),hwo=r(H9e," (OpenAI GPT-2 model)"),H9e.forEach(t),pwo=i(O),J_=n(O,"LI",{});var U9e=s(J_);tfe=n(U9e,"STRONG",{});var Mmt=s(tfe);uwo=r(Mmt,"ibert"),Mmt.forEach(t),_wo=r(U9e," \u2014 "),vD=n(U9e,"A",{href:!0});var Emt=s(vD);bwo=r(Emt,"IBertForMaskedLM"),Emt.forEach(t),vwo=r(U9e," (I-BERT model)"),U9e.forEach(t),Fwo=i(O),Y_=n(O,"LI",{});var J9e=s(Y_);afe=n(J9e,"STRONG",{});var Cmt=s(afe);Two=r(Cmt,"layoutlm"),Cmt.forEach(t),Mwo=r(J9e," \u2014 "),FD=n(J9e,"A",{href:!0});var wmt=s(FD);Ewo=r(wmt,"LayoutLMForMaskedLM"),wmt.forEach(t),Cwo=r(J9e," (LayoutLM model)"),J9e.forEach(t),wwo=i(O),K_=n(O,"LI",{});var Y9e=s(K_);nfe=n(Y9e,"STRONG",{});var Amt=s(nfe);Awo=r(Amt,"longformer"),Amt.forEach(t),Lwo=r(Y9e," \u2014 "),TD=n(Y9e,"A",{href:!0});var Lmt=s(TD);ywo=r(Lmt,"LongformerForMaskedLM"),Lmt.forEach(t),xwo=r(Y9e," (Longformer model)"),Y9e.forEach(t),$wo=i(O),Z_=n(O,"LI",{});var K9e=s(Z_);sfe=n(K9e,"STRONG",{});var ymt=s(sfe);kwo=r(ymt,"lxmert"),ymt.forEach(t),Swo=r(K9e," \u2014 "),MD=n(K9e,"A",{href:!0});var xmt=s(MD);Rwo=r(xmt,"LxmertForPreTraining"),xmt.forEach(t),Pwo=r(K9e," (LXMERT model)"),K9e.forEach(t),Bwo=i(O),e4=n(O,"LI",{});var Z9e=s(e4);lfe=n(Z9e,"STRONG",{});var $mt=s(lfe);Iwo=r($mt,"megatron-bert"),$mt.forEach(t),Nwo=r(Z9e," \u2014 "),ED=n(Z9e,"A",{href:!0});var kmt=s(ED);qwo=r(kmt,"MegatronBertForPreTraining"),kmt.forEach(t),jwo=r(Z9e," (Megatron-BERT model)"),Z9e.forEach(t),Dwo=i(O),o4=n(O,"LI",{});var exe=s(o4);ife=n(exe,"STRONG",{});var Smt=s(ife);Gwo=r(Smt,"mobilebert"),Smt.forEach(t),Owo=r(exe," \u2014 "),CD=n(exe,"A",{href:!0});var Rmt=s(CD);Vwo=r(Rmt,"MobileBertForPreTraining"),Rmt.forEach(t),Xwo=r(exe," (MobileBERT model)"),exe.forEach(t),zwo=i(O),r4=n(O,"LI",{});var oxe=s(r4);dfe=n(oxe,"STRONG",{});var Pmt=s(dfe);Wwo=r(Pmt,"mpnet"),Pmt.forEach(t),Qwo=r(oxe," \u2014 "),wD=n(oxe,"A",{href:!0});var Bmt=s(wD);Hwo=r(Bmt,"MPNetForMaskedLM"),Bmt.forEach(t),Uwo=r(oxe," (MPNet model)"),oxe.forEach(t),Jwo=i(O),t4=n(O,"LI",{});var rxe=s(t4);cfe=n(rxe,"STRONG",{});var Imt=s(cfe);Ywo=r(Imt,"openai-gpt"),Imt.forEach(t),Kwo=r(rxe," \u2014 "),AD=n(rxe,"A",{href:!0});var Nmt=s(AD);Zwo=r(Nmt,"OpenAIGPTLMHeadModel"),Nmt.forEach(t),eAo=r(rxe," (OpenAI GPT model)"),rxe.forEach(t),oAo=i(O),a4=n(O,"LI",{});var txe=s(a4);ffe=n(txe,"STRONG",{});var qmt=s(ffe);rAo=r(qmt,"retribert"),qmt.forEach(t),tAo=r(txe," \u2014 "),LD=n(txe,"A",{href:!0});var jmt=s(LD);aAo=r(jmt,"RetriBertModel"),jmt.forEach(t),nAo=r(txe," (RetriBERT model)"),txe.forEach(t),sAo=i(O),n4=n(O,"LI",{});var axe=s(n4);mfe=n(axe,"STRONG",{});var Dmt=s(mfe);lAo=r(Dmt,"roberta"),Dmt.forEach(t),iAo=r(axe," \u2014 "),yD=n(axe,"A",{href:!0});var Gmt=s(yD);dAo=r(Gmt,"RobertaForMaskedLM"),Gmt.forEach(t),cAo=r(axe," (RoBERTa model)"),axe.forEach(t),fAo=i(O),s4=n(O,"LI",{});var nxe=s(s4);gfe=n(nxe,"STRONG",{});var Omt=s(gfe);mAo=r(Omt,"splinter"),Omt.forEach(t),gAo=r(nxe," \u2014 "),xD=n(nxe,"A",{href:!0});var Vmt=s(xD);hAo=r(Vmt,"SplinterForPreTraining"),Vmt.forEach(t),pAo=r(nxe," (Splinter model)"),nxe.forEach(t),uAo=i(O),l4=n(O,"LI",{});var sxe=s(l4);hfe=n(sxe,"STRONG",{});var Xmt=s(hfe);_Ao=r(Xmt,"squeezebert"),Xmt.forEach(t),bAo=r(sxe," \u2014 "),$D=n(sxe,"A",{href:!0});var zmt=s($D);vAo=r(zmt,"SqueezeBertForMaskedLM"),zmt.forEach(t),FAo=r(sxe," (SqueezeBERT model)"),sxe.forEach(t),TAo=i(O),i4=n(O,"LI",{});var lxe=s(i4);pfe=n(lxe,"STRONG",{});var Wmt=s(pfe);MAo=r(Wmt,"t5"),Wmt.forEach(t),EAo=r(lxe," \u2014 "),kD=n(lxe,"A",{href:!0});var Qmt=s(kD);CAo=r(Qmt,"T5ForConditionalGeneration"),Qmt.forEach(t),wAo=r(lxe," (T5 model)"),lxe.forEach(t),AAo=i(O),d4=n(O,"LI",{});var ixe=s(d4);ufe=n(ixe,"STRONG",{});var Hmt=s(ufe);LAo=r(Hmt,"tapas"),Hmt.forEach(t),yAo=r(ixe," \u2014 "),SD=n(ixe,"A",{href:!0});var Umt=s(SD);xAo=r(Umt,"TapasForMaskedLM"),Umt.forEach(t),$Ao=r(ixe," (TAPAS model)"),ixe.forEach(t),kAo=i(O),c4=n(O,"LI",{});var dxe=s(c4);_fe=n(dxe,"STRONG",{});var Jmt=s(_fe);SAo=r(Jmt,"transfo-xl"),Jmt.forEach(t),RAo=r(dxe," \u2014 "),RD=n(dxe,"A",{href:!0});var Ymt=s(RD);PAo=r(Ymt,"TransfoXLLMHeadModel"),Ymt.forEach(t),BAo=r(dxe," (Transformer-XL model)"),dxe.forEach(t),IAo=i(O),f4=n(O,"LI",{});var cxe=s(f4);bfe=n(cxe,"STRONG",{});var Kmt=s(bfe);NAo=r(Kmt,"unispeech"),Kmt.forEach(t),qAo=r(cxe," \u2014 "),PD=n(cxe,"A",{href:!0});var Zmt=s(PD);jAo=r(Zmt,"UniSpeechForPreTraining"),Zmt.forEach(t),DAo=r(cxe," (UniSpeech model)"),cxe.forEach(t),GAo=i(O),m4=n(O,"LI",{});var fxe=s(m4);vfe=n(fxe,"STRONG",{});var egt=s(vfe);OAo=r(egt,"unispeech-sat"),egt.forEach(t),VAo=r(fxe," \u2014 "),BD=n(fxe,"A",{href:!0});var ogt=s(BD);XAo=r(ogt,"UniSpeechSatForPreTraining"),ogt.forEach(t),zAo=r(fxe," (UniSpeechSat model)"),fxe.forEach(t),WAo=i(O),g4=n(O,"LI",{});var mxe=s(g4);Ffe=n(mxe,"STRONG",{});var rgt=s(Ffe);QAo=r(rgt,"visual_bert"),rgt.forEach(t),HAo=r(mxe," \u2014 "),ID=n(mxe,"A",{href:!0});var tgt=s(ID);UAo=r(tgt,"VisualBertForPreTraining"),tgt.forEach(t),JAo=r(mxe," (VisualBERT model)"),mxe.forEach(t),YAo=i(O),h4=n(O,"LI",{});var gxe=s(h4);Tfe=n(gxe,"STRONG",{});var agt=s(Tfe);KAo=r(agt,"vit_mae"),agt.forEach(t),ZAo=r(gxe," \u2014 "),ND=n(gxe,"A",{href:!0});var ngt=s(ND);e6o=r(ngt,"ViTMAEForPreTraining"),ngt.forEach(t),o6o=r(gxe," (ViTMAE model)"),gxe.forEach(t),r6o=i(O),p4=n(O,"LI",{});var hxe=s(p4);Mfe=n(hxe,"STRONG",{});var sgt=s(Mfe);t6o=r(sgt,"wav2vec2"),sgt.forEach(t),a6o=r(hxe," \u2014 "),qD=n(hxe,"A",{href:!0});var lgt=s(qD);n6o=r(lgt,"Wav2Vec2ForPreTraining"),lgt.forEach(t),s6o=r(hxe," (Wav2Vec2 model)"),hxe.forEach(t),l6o=i(O),u4=n(O,"LI",{});var pxe=s(u4);Efe=n(pxe,"STRONG",{});var igt=s(Efe);i6o=r(igt,"wav2vec2-conformer"),igt.forEach(t),d6o=r(pxe," \u2014 "),jD=n(pxe,"A",{href:!0});var dgt=s(jD);c6o=r(dgt,"Wav2Vec2ConformerForPreTraining"),dgt.forEach(t),f6o=r(pxe," (Wav2Vec2-Conformer model)"),pxe.forEach(t),m6o=i(O),_4=n(O,"LI",{});var uxe=s(_4);Cfe=n(uxe,"STRONG",{});var cgt=s(Cfe);g6o=r(cgt,"xlm"),cgt.forEach(t),h6o=r(uxe," \u2014 "),DD=n(uxe,"A",{href:!0});var fgt=s(DD);p6o=r(fgt,"XLMWithLMHeadModel"),fgt.forEach(t),u6o=r(uxe," (XLM model)"),uxe.forEach(t),_6o=i(O),b4=n(O,"LI",{});var _xe=s(b4);wfe=n(_xe,"STRONG",{});var mgt=s(wfe);b6o=r(mgt,"xlm-roberta"),mgt.forEach(t),v6o=r(_xe," \u2014 "),GD=n(_xe,"A",{href:!0});var ggt=s(GD);F6o=r(ggt,"XLMRobertaForMaskedLM"),ggt.forEach(t),T6o=r(_xe," (XLM-RoBERTa model)"),_xe.forEach(t),M6o=i(O),v4=n(O,"LI",{});var bxe=s(v4);Afe=n(bxe,"STRONG",{});var hgt=s(Afe);E6o=r(hgt,"xlm-roberta-xl"),hgt.forEach(t),C6o=r(bxe," \u2014 "),OD=n(bxe,"A",{href:!0});var pgt=s(OD);w6o=r(pgt,"XLMRobertaXLForMaskedLM"),pgt.forEach(t),A6o=r(bxe," (XLM-RoBERTa-XL model)"),bxe.forEach(t),L6o=i(O),F4=n(O,"LI",{});var vxe=s(F4);Lfe=n(vxe,"STRONG",{});var ugt=s(Lfe);y6o=r(ugt,"xlnet"),ugt.forEach(t),x6o=r(vxe," \u2014 "),VD=n(vxe,"A",{href:!0});var _gt=s(VD);$6o=r(_gt,"XLNetLMHeadModel"),_gt.forEach(t),k6o=r(vxe," (XLNet model)"),vxe.forEach(t),O.forEach(t),S6o=i(na),T4=n(na,"P",{});var Fxe=s(T4);R6o=r(Fxe,"The model is set in evaluation mode by default using "),yfe=n(Fxe,"CODE",{});var bgt=s(yfe);P6o=r(bgt,"model.eval()"),bgt.forEach(t),B6o=r(Fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=n(Fxe,"CODE",{});var vgt=s(xfe);I6o=r(vgt,"model.train()"),vgt.forEach(t),Fxe.forEach(t),N6o=i(na),T(M4.$$.fragment,na),na.forEach(t),Ys.forEach(t),SGe=i(f),Gi=n(f,"H2",{class:!0});var qVe=s(Gi);E4=n(qVe,"A",{id:!0,class:!0,href:!0});var Fgt=s(E4);$fe=n(Fgt,"SPAN",{});var Tgt=s($fe);T(ny.$$.fragment,Tgt),Tgt.forEach(t),Fgt.forEach(t),q6o=i(qVe),kfe=n(qVe,"SPAN",{});var Mgt=s(kfe);j6o=r(Mgt,"AutoModelForCausalLM"),Mgt.forEach(t),qVe.forEach(t),RGe=i(f),ko=n(f,"DIV",{class:!0});var Ks=s(ko);T(sy.$$.fragment,Ks),D6o=i(Ks),Oi=n(Ks,"P",{});var foe=s(Oi);G6o=r(foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),XD=n(foe,"A",{href:!0});var Egt=s(XD);O6o=r(Egt,"from_pretrained()"),Egt.forEach(t),V6o=r(foe," class method or the "),zD=n(foe,"A",{href:!0});var Cgt=s(zD);X6o=r(Cgt,"from_config()"),Cgt.forEach(t),z6o=r(foe,` class
method.`),foe.forEach(t),W6o=i(Ks),ly=n(Ks,"P",{});var jVe=s(ly);Q6o=r(jVe,"This class cannot be instantiated directly using "),Sfe=n(jVe,"CODE",{});var wgt=s(Sfe);H6o=r(wgt,"__init__()"),wgt.forEach(t),U6o=r(jVe," (throws an error)."),jVe.forEach(t),J6o=i(Ks),lt=n(Ks,"DIV",{class:!0});var xA=s(lt);T(iy.$$.fragment,xA),Y6o=i(xA),Rfe=n(xA,"P",{});var Agt=s(Rfe);K6o=r(Agt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Agt.forEach(t),Z6o=i(xA),Vi=n(xA,"P",{});var moe=s(Vi);eLo=r(moe,`Note:
Loading a model from its configuration file does `),Pfe=n(moe,"STRONG",{});var Lgt=s(Pfe);oLo=r(Lgt,"not"),Lgt.forEach(t),rLo=r(moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),WD=n(moe,"A",{href:!0});var ygt=s(WD);tLo=r(ygt,"from_pretrained()"),ygt.forEach(t),aLo=r(moe," to load the model weights."),moe.forEach(t),nLo=i(xA),T(C4.$$.fragment,xA),xA.forEach(t),sLo=i(Ks),Ke=n(Ks,"DIV",{class:!0});var sa=s(Ke);T(dy.$$.fragment,sa),lLo=i(sa),Bfe=n(sa,"P",{});var xgt=s(Bfe);iLo=r(xgt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xgt.forEach(t),dLo=i(sa),Pa=n(sa,"P",{});var $A=s(Pa);cLo=r($A,"The model class to instantiate is selected based on the "),Ife=n($A,"CODE",{});var $gt=s(Ife);fLo=r($gt,"model_type"),$gt.forEach(t),mLo=r($A,` property of the config object (either
passed as an argument or loaded from `),Nfe=n($A,"CODE",{});var kgt=s(Nfe);gLo=r(kgt,"pretrained_model_name_or_path"),kgt.forEach(t),hLo=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qfe=n($A,"CODE",{});var Sgt=s(qfe);pLo=r(Sgt,"pretrained_model_name_or_path"),Sgt.forEach(t),uLo=r($A,":"),$A.forEach(t),_Lo=i(sa),X=n(sa,"UL",{});var W=s(X);w4=n(W,"LI",{});var Txe=s(w4);jfe=n(Txe,"STRONG",{});var Rgt=s(jfe);bLo=r(Rgt,"bart"),Rgt.forEach(t),vLo=r(Txe," \u2014 "),QD=n(Txe,"A",{href:!0});var Pgt=s(QD);FLo=r(Pgt,"BartForCausalLM"),Pgt.forEach(t),TLo=r(Txe," (BART model)"),Txe.forEach(t),MLo=i(W),A4=n(W,"LI",{});var Mxe=s(A4);Dfe=n(Mxe,"STRONG",{});var Bgt=s(Dfe);ELo=r(Bgt,"bert"),Bgt.forEach(t),CLo=r(Mxe," \u2014 "),HD=n(Mxe,"A",{href:!0});var Igt=s(HD);wLo=r(Igt,"BertLMHeadModel"),Igt.forEach(t),ALo=r(Mxe," (BERT model)"),Mxe.forEach(t),LLo=i(W),L4=n(W,"LI",{});var Exe=s(L4);Gfe=n(Exe,"STRONG",{});var Ngt=s(Gfe);yLo=r(Ngt,"bert-generation"),Ngt.forEach(t),xLo=r(Exe," \u2014 "),UD=n(Exe,"A",{href:!0});var qgt=s(UD);$Lo=r(qgt,"BertGenerationDecoder"),qgt.forEach(t),kLo=r(Exe," (Bert Generation model)"),Exe.forEach(t),SLo=i(W),y4=n(W,"LI",{});var Cxe=s(y4);Ofe=n(Cxe,"STRONG",{});var jgt=s(Ofe);RLo=r(jgt,"big_bird"),jgt.forEach(t),PLo=r(Cxe," \u2014 "),JD=n(Cxe,"A",{href:!0});var Dgt=s(JD);BLo=r(Dgt,"BigBirdForCausalLM"),Dgt.forEach(t),ILo=r(Cxe," (BigBird model)"),Cxe.forEach(t),NLo=i(W),x4=n(W,"LI",{});var wxe=s(x4);Vfe=n(wxe,"STRONG",{});var Ggt=s(Vfe);qLo=r(Ggt,"bigbird_pegasus"),Ggt.forEach(t),jLo=r(wxe," \u2014 "),YD=n(wxe,"A",{href:!0});var Ogt=s(YD);DLo=r(Ogt,"BigBirdPegasusForCausalLM"),Ogt.forEach(t),GLo=r(wxe," (BigBird-Pegasus model)"),wxe.forEach(t),OLo=i(W),$4=n(W,"LI",{});var Axe=s($4);Xfe=n(Axe,"STRONG",{});var Vgt=s(Xfe);VLo=r(Vgt,"blenderbot"),Vgt.forEach(t),XLo=r(Axe," \u2014 "),KD=n(Axe,"A",{href:!0});var Xgt=s(KD);zLo=r(Xgt,"BlenderbotForCausalLM"),Xgt.forEach(t),WLo=r(Axe," (Blenderbot model)"),Axe.forEach(t),QLo=i(W),k4=n(W,"LI",{});var Lxe=s(k4);zfe=n(Lxe,"STRONG",{});var zgt=s(zfe);HLo=r(zgt,"blenderbot-small"),zgt.forEach(t),ULo=r(Lxe," \u2014 "),ZD=n(Lxe,"A",{href:!0});var Wgt=s(ZD);JLo=r(Wgt,"BlenderbotSmallForCausalLM"),Wgt.forEach(t),YLo=r(Lxe," (BlenderbotSmall model)"),Lxe.forEach(t),KLo=i(W),S4=n(W,"LI",{});var yxe=s(S4);Wfe=n(yxe,"STRONG",{});var Qgt=s(Wfe);ZLo=r(Qgt,"bloom"),Qgt.forEach(t),eyo=r(yxe," \u2014 "),eG=n(yxe,"A",{href:!0});var Hgt=s(eG);oyo=r(Hgt,"BloomForCausalLM"),Hgt.forEach(t),ryo=r(yxe," (BLOOM model)"),yxe.forEach(t),tyo=i(W),R4=n(W,"LI",{});var xxe=s(R4);Qfe=n(xxe,"STRONG",{});var Ugt=s(Qfe);ayo=r(Ugt,"camembert"),Ugt.forEach(t),nyo=r(xxe," \u2014 "),oG=n(xxe,"A",{href:!0});var Jgt=s(oG);syo=r(Jgt,"CamembertForCausalLM"),Jgt.forEach(t),lyo=r(xxe," (CamemBERT model)"),xxe.forEach(t),iyo=i(W),P4=n(W,"LI",{});var $xe=s(P4);Hfe=n($xe,"STRONG",{});var Ygt=s(Hfe);dyo=r(Ygt,"codegen"),Ygt.forEach(t),cyo=r($xe," \u2014 "),rG=n($xe,"A",{href:!0});var Kgt=s(rG);fyo=r(Kgt,"CodeGenForCausalLM"),Kgt.forEach(t),myo=r($xe," (CodeGen model)"),$xe.forEach(t),gyo=i(W),B4=n(W,"LI",{});var kxe=s(B4);Ufe=n(kxe,"STRONG",{});var Zgt=s(Ufe);hyo=r(Zgt,"ctrl"),Zgt.forEach(t),pyo=r(kxe," \u2014 "),tG=n(kxe,"A",{href:!0});var eht=s(tG);uyo=r(eht,"CTRLLMHeadModel"),eht.forEach(t),_yo=r(kxe," (CTRL model)"),kxe.forEach(t),byo=i(W),I4=n(W,"LI",{});var Sxe=s(I4);Jfe=n(Sxe,"STRONG",{});var oht=s(Jfe);vyo=r(oht,"data2vec-text"),oht.forEach(t),Fyo=r(Sxe," \u2014 "),aG=n(Sxe,"A",{href:!0});var rht=s(aG);Tyo=r(rht,"Data2VecTextForCausalLM"),rht.forEach(t),Myo=r(Sxe," (Data2VecText model)"),Sxe.forEach(t),Eyo=i(W),N4=n(W,"LI",{});var Rxe=s(N4);Yfe=n(Rxe,"STRONG",{});var tht=s(Yfe);Cyo=r(tht,"electra"),tht.forEach(t),wyo=r(Rxe," \u2014 "),nG=n(Rxe,"A",{href:!0});var aht=s(nG);Ayo=r(aht,"ElectraForCausalLM"),aht.forEach(t),Lyo=r(Rxe," (ELECTRA model)"),Rxe.forEach(t),yyo=i(W),q4=n(W,"LI",{});var Pxe=s(q4);Kfe=n(Pxe,"STRONG",{});var nht=s(Kfe);xyo=r(nht,"gpt2"),nht.forEach(t),$yo=r(Pxe," \u2014 "),sG=n(Pxe,"A",{href:!0});var sht=s(sG);kyo=r(sht,"GPT2LMHeadModel"),sht.forEach(t),Syo=r(Pxe," (OpenAI GPT-2 model)"),Pxe.forEach(t),Ryo=i(W),j4=n(W,"LI",{});var Bxe=s(j4);Zfe=n(Bxe,"STRONG",{});var lht=s(Zfe);Pyo=r(lht,"gpt_neo"),lht.forEach(t),Byo=r(Bxe," \u2014 "),lG=n(Bxe,"A",{href:!0});var iht=s(lG);Iyo=r(iht,"GPTNeoForCausalLM"),iht.forEach(t),Nyo=r(Bxe," (GPT Neo model)"),Bxe.forEach(t),qyo=i(W),D4=n(W,"LI",{});var Ixe=s(D4);eme=n(Ixe,"STRONG",{});var dht=s(eme);jyo=r(dht,"gpt_neox"),dht.forEach(t),Dyo=r(Ixe," \u2014 "),iG=n(Ixe,"A",{href:!0});var cht=s(iG);Gyo=r(cht,"GPTNeoXForCausalLM"),cht.forEach(t),Oyo=r(Ixe," (GPT NeoX model)"),Ixe.forEach(t),Vyo=i(W),G4=n(W,"LI",{});var Nxe=s(G4);ome=n(Nxe,"STRONG",{});var fht=s(ome);Xyo=r(fht,"gptj"),fht.forEach(t),zyo=r(Nxe," \u2014 "),dG=n(Nxe,"A",{href:!0});var mht=s(dG);Wyo=r(mht,"GPTJForCausalLM"),mht.forEach(t),Qyo=r(Nxe," (GPT-J model)"),Nxe.forEach(t),Hyo=i(W),O4=n(W,"LI",{});var qxe=s(O4);rme=n(qxe,"STRONG",{});var ght=s(rme);Uyo=r(ght,"marian"),ght.forEach(t),Jyo=r(qxe," \u2014 "),cG=n(qxe,"A",{href:!0});var hht=s(cG);Yyo=r(hht,"MarianForCausalLM"),hht.forEach(t),Kyo=r(qxe," (Marian model)"),qxe.forEach(t),Zyo=i(W),V4=n(W,"LI",{});var jxe=s(V4);tme=n(jxe,"STRONG",{});var pht=s(tme);e8o=r(pht,"mbart"),pht.forEach(t),o8o=r(jxe," \u2014 "),fG=n(jxe,"A",{href:!0});var uht=s(fG);r8o=r(uht,"MBartForCausalLM"),uht.forEach(t),t8o=r(jxe," (mBART model)"),jxe.forEach(t),a8o=i(W),X4=n(W,"LI",{});var Dxe=s(X4);ame=n(Dxe,"STRONG",{});var _ht=s(ame);n8o=r(_ht,"megatron-bert"),_ht.forEach(t),s8o=r(Dxe," \u2014 "),mG=n(Dxe,"A",{href:!0});var bht=s(mG);l8o=r(bht,"MegatronBertForCausalLM"),bht.forEach(t),i8o=r(Dxe," (Megatron-BERT model)"),Dxe.forEach(t),d8o=i(W),z4=n(W,"LI",{});var Gxe=s(z4);nme=n(Gxe,"STRONG",{});var vht=s(nme);c8o=r(vht,"openai-gpt"),vht.forEach(t),f8o=r(Gxe," \u2014 "),gG=n(Gxe,"A",{href:!0});var Fht=s(gG);m8o=r(Fht,"OpenAIGPTLMHeadModel"),Fht.forEach(t),g8o=r(Gxe," (OpenAI GPT model)"),Gxe.forEach(t),h8o=i(W),W4=n(W,"LI",{});var Oxe=s(W4);sme=n(Oxe,"STRONG",{});var Tht=s(sme);p8o=r(Tht,"opt"),Tht.forEach(t),u8o=r(Oxe," \u2014 "),hG=n(Oxe,"A",{href:!0});var Mht=s(hG);_8o=r(Mht,"OPTForCausalLM"),Mht.forEach(t),b8o=r(Oxe," (OPT model)"),Oxe.forEach(t),v8o=i(W),Q4=n(W,"LI",{});var Vxe=s(Q4);lme=n(Vxe,"STRONG",{});var Eht=s(lme);F8o=r(Eht,"pegasus"),Eht.forEach(t),T8o=r(Vxe," \u2014 "),pG=n(Vxe,"A",{href:!0});var Cht=s(pG);M8o=r(Cht,"PegasusForCausalLM"),Cht.forEach(t),E8o=r(Vxe," (Pegasus model)"),Vxe.forEach(t),C8o=i(W),H4=n(W,"LI",{});var Xxe=s(H4);ime=n(Xxe,"STRONG",{});var wht=s(ime);w8o=r(wht,"plbart"),wht.forEach(t),A8o=r(Xxe," \u2014 "),uG=n(Xxe,"A",{href:!0});var Aht=s(uG);L8o=r(Aht,"PLBartForCausalLM"),Aht.forEach(t),y8o=r(Xxe," (PLBart model)"),Xxe.forEach(t),x8o=i(W),U4=n(W,"LI",{});var zxe=s(U4);dme=n(zxe,"STRONG",{});var Lht=s(dme);$8o=r(Lht,"prophetnet"),Lht.forEach(t),k8o=r(zxe," \u2014 "),_G=n(zxe,"A",{href:!0});var yht=s(_G);S8o=r(yht,"ProphetNetForCausalLM"),yht.forEach(t),R8o=r(zxe," (ProphetNet model)"),zxe.forEach(t),P8o=i(W),J4=n(W,"LI",{});var Wxe=s(J4);cme=n(Wxe,"STRONG",{});var xht=s(cme);B8o=r(xht,"qdqbert"),xht.forEach(t),I8o=r(Wxe," \u2014 "),bG=n(Wxe,"A",{href:!0});var $ht=s(bG);N8o=r($ht,"QDQBertLMHeadModel"),$ht.forEach(t),q8o=r(Wxe," (QDQBert model)"),Wxe.forEach(t),j8o=i(W),Y4=n(W,"LI",{});var Qxe=s(Y4);fme=n(Qxe,"STRONG",{});var kht=s(fme);D8o=r(kht,"reformer"),kht.forEach(t),G8o=r(Qxe," \u2014 "),vG=n(Qxe,"A",{href:!0});var Sht=s(vG);O8o=r(Sht,"ReformerModelWithLMHead"),Sht.forEach(t),V8o=r(Qxe," (Reformer model)"),Qxe.forEach(t),X8o=i(W),K4=n(W,"LI",{});var Hxe=s(K4);mme=n(Hxe,"STRONG",{});var Rht=s(mme);z8o=r(Rht,"rembert"),Rht.forEach(t),W8o=r(Hxe," \u2014 "),FG=n(Hxe,"A",{href:!0});var Pht=s(FG);Q8o=r(Pht,"RemBertForCausalLM"),Pht.forEach(t),H8o=r(Hxe," (RemBERT model)"),Hxe.forEach(t),U8o=i(W),Z4=n(W,"LI",{});var Uxe=s(Z4);gme=n(Uxe,"STRONG",{});var Bht=s(gme);J8o=r(Bht,"roberta"),Bht.forEach(t),Y8o=r(Uxe," \u2014 "),TG=n(Uxe,"A",{href:!0});var Iht=s(TG);K8o=r(Iht,"RobertaForCausalLM"),Iht.forEach(t),Z8o=r(Uxe," (RoBERTa model)"),Uxe.forEach(t),e9o=i(W),e1=n(W,"LI",{});var Jxe=s(e1);hme=n(Jxe,"STRONG",{});var Nht=s(hme);o9o=r(Nht,"roformer"),Nht.forEach(t),r9o=r(Jxe," \u2014 "),MG=n(Jxe,"A",{href:!0});var qht=s(MG);t9o=r(qht,"RoFormerForCausalLM"),qht.forEach(t),a9o=r(Jxe," (RoFormer model)"),Jxe.forEach(t),n9o=i(W),o1=n(W,"LI",{});var Yxe=s(o1);pme=n(Yxe,"STRONG",{});var jht=s(pme);s9o=r(jht,"speech_to_text_2"),jht.forEach(t),l9o=r(Yxe," \u2014 "),EG=n(Yxe,"A",{href:!0});var Dht=s(EG);i9o=r(Dht,"Speech2Text2ForCausalLM"),Dht.forEach(t),d9o=r(Yxe," (Speech2Text2 model)"),Yxe.forEach(t),c9o=i(W),r1=n(W,"LI",{});var Kxe=s(r1);ume=n(Kxe,"STRONG",{});var Ght=s(ume);f9o=r(Ght,"transfo-xl"),Ght.forEach(t),m9o=r(Kxe," \u2014 "),CG=n(Kxe,"A",{href:!0});var Oht=s(CG);g9o=r(Oht,"TransfoXLLMHeadModel"),Oht.forEach(t),h9o=r(Kxe," (Transformer-XL model)"),Kxe.forEach(t),p9o=i(W),t1=n(W,"LI",{});var Zxe=s(t1);_me=n(Zxe,"STRONG",{});var Vht=s(_me);u9o=r(Vht,"trocr"),Vht.forEach(t),_9o=r(Zxe," \u2014 "),wG=n(Zxe,"A",{href:!0});var Xht=s(wG);b9o=r(Xht,"TrOCRForCausalLM"),Xht.forEach(t),v9o=r(Zxe," (TrOCR model)"),Zxe.forEach(t),F9o=i(W),a1=n(W,"LI",{});var e$e=s(a1);bme=n(e$e,"STRONG",{});var zht=s(bme);T9o=r(zht,"xglm"),zht.forEach(t),M9o=r(e$e," \u2014 "),AG=n(e$e,"A",{href:!0});var Wht=s(AG);E9o=r(Wht,"XGLMForCausalLM"),Wht.forEach(t),C9o=r(e$e," (XGLM model)"),e$e.forEach(t),w9o=i(W),n1=n(W,"LI",{});var o$e=s(n1);vme=n(o$e,"STRONG",{});var Qht=s(vme);A9o=r(Qht,"xlm"),Qht.forEach(t),L9o=r(o$e," \u2014 "),LG=n(o$e,"A",{href:!0});var Hht=s(LG);y9o=r(Hht,"XLMWithLMHeadModel"),Hht.forEach(t),x9o=r(o$e," (XLM model)"),o$e.forEach(t),$9o=i(W),s1=n(W,"LI",{});var r$e=s(s1);Fme=n(r$e,"STRONG",{});var Uht=s(Fme);k9o=r(Uht,"xlm-prophetnet"),Uht.forEach(t),S9o=r(r$e," \u2014 "),yG=n(r$e,"A",{href:!0});var Jht=s(yG);R9o=r(Jht,"XLMProphetNetForCausalLM"),Jht.forEach(t),P9o=r(r$e," (XLM-ProphetNet model)"),r$e.forEach(t),B9o=i(W),l1=n(W,"LI",{});var t$e=s(l1);Tme=n(t$e,"STRONG",{});var Yht=s(Tme);I9o=r(Yht,"xlm-roberta"),Yht.forEach(t),N9o=r(t$e," \u2014 "),xG=n(t$e,"A",{href:!0});var Kht=s(xG);q9o=r(Kht,"XLMRobertaForCausalLM"),Kht.forEach(t),j9o=r(t$e," (XLM-RoBERTa model)"),t$e.forEach(t),D9o=i(W),i1=n(W,"LI",{});var a$e=s(i1);Mme=n(a$e,"STRONG",{});var Zht=s(Mme);G9o=r(Zht,"xlm-roberta-xl"),Zht.forEach(t),O9o=r(a$e," \u2014 "),$G=n(a$e,"A",{href:!0});var ept=s($G);V9o=r(ept,"XLMRobertaXLForCausalLM"),ept.forEach(t),X9o=r(a$e," (XLM-RoBERTa-XL model)"),a$e.forEach(t),z9o=i(W),d1=n(W,"LI",{});var n$e=s(d1);Eme=n(n$e,"STRONG",{});var opt=s(Eme);W9o=r(opt,"xlnet"),opt.forEach(t),Q9o=r(n$e," \u2014 "),kG=n(n$e,"A",{href:!0});var rpt=s(kG);H9o=r(rpt,"XLNetLMHeadModel"),rpt.forEach(t),U9o=r(n$e," (XLNet model)"),n$e.forEach(t),W.forEach(t),J9o=i(sa),c1=n(sa,"P",{});var s$e=s(c1);Y9o=r(s$e,"The model is set in evaluation mode by default using "),Cme=n(s$e,"CODE",{});var tpt=s(Cme);K9o=r(tpt,"model.eval()"),tpt.forEach(t),Z9o=r(s$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wme=n(s$e,"CODE",{});var apt=s(wme);exo=r(apt,"model.train()"),apt.forEach(t),s$e.forEach(t),oxo=i(sa),T(f1.$$.fragment,sa),sa.forEach(t),Ks.forEach(t),PGe=i(f),Xi=n(f,"H2",{class:!0});var DVe=s(Xi);m1=n(DVe,"A",{id:!0,class:!0,href:!0});var npt=s(m1);Ame=n(npt,"SPAN",{});var spt=s(Ame);T(cy.$$.fragment,spt),spt.forEach(t),npt.forEach(t),rxo=i(DVe),Lme=n(DVe,"SPAN",{});var lpt=s(Lme);txo=r(lpt,"AutoModelForMaskedLM"),lpt.forEach(t),DVe.forEach(t),BGe=i(f),So=n(f,"DIV",{class:!0});var Zs=s(So);T(fy.$$.fragment,Zs),axo=i(Zs),zi=n(Zs,"P",{});var goe=s(zi);nxo=r(goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),SG=n(goe,"A",{href:!0});var ipt=s(SG);sxo=r(ipt,"from_pretrained()"),ipt.forEach(t),lxo=r(goe," class method or the "),RG=n(goe,"A",{href:!0});var dpt=s(RG);ixo=r(dpt,"from_config()"),dpt.forEach(t),dxo=r(goe,` class
method.`),goe.forEach(t),cxo=i(Zs),my=n(Zs,"P",{});var GVe=s(my);fxo=r(GVe,"This class cannot be instantiated directly using "),yme=n(GVe,"CODE",{});var cpt=s(yme);mxo=r(cpt,"__init__()"),cpt.forEach(t),gxo=r(GVe," (throws an error)."),GVe.forEach(t),hxo=i(Zs),it=n(Zs,"DIV",{class:!0});var kA=s(it);T(gy.$$.fragment,kA),pxo=i(kA),xme=n(kA,"P",{});var fpt=s(xme);uxo=r(fpt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),fpt.forEach(t),_xo=i(kA),Wi=n(kA,"P",{});var hoe=s(Wi);bxo=r(hoe,`Note:
Loading a model from its configuration file does `),$me=n(hoe,"STRONG",{});var mpt=s($me);vxo=r(mpt,"not"),mpt.forEach(t),Fxo=r(hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n(hoe,"A",{href:!0});var gpt=s(PG);Txo=r(gpt,"from_pretrained()"),gpt.forEach(t),Mxo=r(hoe," to load the model weights."),hoe.forEach(t),Exo=i(kA),T(g1.$$.fragment,kA),kA.forEach(t),Cxo=i(Zs),Ze=n(Zs,"DIV",{class:!0});var la=s(Ze);T(hy.$$.fragment,la),wxo=i(la),kme=n(la,"P",{});var hpt=s(kme);Axo=r(hpt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),hpt.forEach(t),Lxo=i(la),Ba=n(la,"P",{});var SA=s(Ba);yxo=r(SA,"The model class to instantiate is selected based on the "),Sme=n(SA,"CODE",{});var ppt=s(Sme);xxo=r(ppt,"model_type"),ppt.forEach(t),$xo=r(SA,` property of the config object (either
passed as an argument or loaded from `),Rme=n(SA,"CODE",{});var upt=s(Rme);kxo=r(upt,"pretrained_model_name_or_path"),upt.forEach(t),Sxo=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pme=n(SA,"CODE",{});var _pt=s(Pme);Rxo=r(_pt,"pretrained_model_name_or_path"),_pt.forEach(t),Pxo=r(SA,":"),SA.forEach(t),Bxo=i(la),Q=n(la,"UL",{});var U=s(Q);h1=n(U,"LI",{});var l$e=s(h1);Bme=n(l$e,"STRONG",{});var bpt=s(Bme);Ixo=r(bpt,"albert"),bpt.forEach(t),Nxo=r(l$e," \u2014 "),BG=n(l$e,"A",{href:!0});var vpt=s(BG);qxo=r(vpt,"AlbertForMaskedLM"),vpt.forEach(t),jxo=r(l$e," (ALBERT model)"),l$e.forEach(t),Dxo=i(U),p1=n(U,"LI",{});var i$e=s(p1);Ime=n(i$e,"STRONG",{});var Fpt=s(Ime);Gxo=r(Fpt,"bart"),Fpt.forEach(t),Oxo=r(i$e," \u2014 "),IG=n(i$e,"A",{href:!0});var Tpt=s(IG);Vxo=r(Tpt,"BartForConditionalGeneration"),Tpt.forEach(t),Xxo=r(i$e," (BART model)"),i$e.forEach(t),zxo=i(U),u1=n(U,"LI",{});var d$e=s(u1);Nme=n(d$e,"STRONG",{});var Mpt=s(Nme);Wxo=r(Mpt,"bert"),Mpt.forEach(t),Qxo=r(d$e," \u2014 "),NG=n(d$e,"A",{href:!0});var Ept=s(NG);Hxo=r(Ept,"BertForMaskedLM"),Ept.forEach(t),Uxo=r(d$e," (BERT model)"),d$e.forEach(t),Jxo=i(U),_1=n(U,"LI",{});var c$e=s(_1);qme=n(c$e,"STRONG",{});var Cpt=s(qme);Yxo=r(Cpt,"big_bird"),Cpt.forEach(t),Kxo=r(c$e," \u2014 "),qG=n(c$e,"A",{href:!0});var wpt=s(qG);Zxo=r(wpt,"BigBirdForMaskedLM"),wpt.forEach(t),e$o=r(c$e," (BigBird model)"),c$e.forEach(t),o$o=i(U),b1=n(U,"LI",{});var f$e=s(b1);jme=n(f$e,"STRONG",{});var Apt=s(jme);r$o=r(Apt,"camembert"),Apt.forEach(t),t$o=r(f$e," \u2014 "),jG=n(f$e,"A",{href:!0});var Lpt=s(jG);a$o=r(Lpt,"CamembertForMaskedLM"),Lpt.forEach(t),n$o=r(f$e," (CamemBERT model)"),f$e.forEach(t),s$o=i(U),v1=n(U,"LI",{});var m$e=s(v1);Dme=n(m$e,"STRONG",{});var ypt=s(Dme);l$o=r(ypt,"convbert"),ypt.forEach(t),i$o=r(m$e," \u2014 "),DG=n(m$e,"A",{href:!0});var xpt=s(DG);d$o=r(xpt,"ConvBertForMaskedLM"),xpt.forEach(t),c$o=r(m$e," (ConvBERT model)"),m$e.forEach(t),f$o=i(U),F1=n(U,"LI",{});var g$e=s(F1);Gme=n(g$e,"STRONG",{});var $pt=s(Gme);m$o=r($pt,"data2vec-text"),$pt.forEach(t),g$o=r(g$e," \u2014 "),GG=n(g$e,"A",{href:!0});var kpt=s(GG);h$o=r(kpt,"Data2VecTextForMaskedLM"),kpt.forEach(t),p$o=r(g$e," (Data2VecText model)"),g$e.forEach(t),u$o=i(U),T1=n(U,"LI",{});var h$e=s(T1);Ome=n(h$e,"STRONG",{});var Spt=s(Ome);_$o=r(Spt,"deberta"),Spt.forEach(t),b$o=r(h$e," \u2014 "),OG=n(h$e,"A",{href:!0});var Rpt=s(OG);v$o=r(Rpt,"DebertaForMaskedLM"),Rpt.forEach(t),F$o=r(h$e," (DeBERTa model)"),h$e.forEach(t),T$o=i(U),M1=n(U,"LI",{});var p$e=s(M1);Vme=n(p$e,"STRONG",{});var Ppt=s(Vme);M$o=r(Ppt,"deberta-v2"),Ppt.forEach(t),E$o=r(p$e," \u2014 "),VG=n(p$e,"A",{href:!0});var Bpt=s(VG);C$o=r(Bpt,"DebertaV2ForMaskedLM"),Bpt.forEach(t),w$o=r(p$e," (DeBERTa-v2 model)"),p$e.forEach(t),A$o=i(U),E1=n(U,"LI",{});var u$e=s(E1);Xme=n(u$e,"STRONG",{});var Ipt=s(Xme);L$o=r(Ipt,"distilbert"),Ipt.forEach(t),y$o=r(u$e," \u2014 "),XG=n(u$e,"A",{href:!0});var Npt=s(XG);x$o=r(Npt,"DistilBertForMaskedLM"),Npt.forEach(t),$$o=r(u$e," (DistilBERT model)"),u$e.forEach(t),k$o=i(U),C1=n(U,"LI",{});var _$e=s(C1);zme=n(_$e,"STRONG",{});var qpt=s(zme);S$o=r(qpt,"electra"),qpt.forEach(t),R$o=r(_$e," \u2014 "),zG=n(_$e,"A",{href:!0});var jpt=s(zG);P$o=r(jpt,"ElectraForMaskedLM"),jpt.forEach(t),B$o=r(_$e," (ELECTRA model)"),_$e.forEach(t),I$o=i(U),w1=n(U,"LI",{});var b$e=s(w1);Wme=n(b$e,"STRONG",{});var Dpt=s(Wme);N$o=r(Dpt,"flaubert"),Dpt.forEach(t),q$o=r(b$e," \u2014 "),WG=n(b$e,"A",{href:!0});var Gpt=s(WG);j$o=r(Gpt,"FlaubertWithLMHeadModel"),Gpt.forEach(t),D$o=r(b$e," (FlauBERT model)"),b$e.forEach(t),G$o=i(U),A1=n(U,"LI",{});var v$e=s(A1);Qme=n(v$e,"STRONG",{});var Opt=s(Qme);O$o=r(Opt,"fnet"),Opt.forEach(t),V$o=r(v$e," \u2014 "),QG=n(v$e,"A",{href:!0});var Vpt=s(QG);X$o=r(Vpt,"FNetForMaskedLM"),Vpt.forEach(t),z$o=r(v$e," (FNet model)"),v$e.forEach(t),W$o=i(U),L1=n(U,"LI",{});var F$e=s(L1);Hme=n(F$e,"STRONG",{});var Xpt=s(Hme);Q$o=r(Xpt,"funnel"),Xpt.forEach(t),H$o=r(F$e," \u2014 "),HG=n(F$e,"A",{href:!0});var zpt=s(HG);U$o=r(zpt,"FunnelForMaskedLM"),zpt.forEach(t),J$o=r(F$e," (Funnel Transformer model)"),F$e.forEach(t),Y$o=i(U),y1=n(U,"LI",{});var T$e=s(y1);Ume=n(T$e,"STRONG",{});var Wpt=s(Ume);K$o=r(Wpt,"ibert"),Wpt.forEach(t),Z$o=r(T$e," \u2014 "),UG=n(T$e,"A",{href:!0});var Qpt=s(UG);eko=r(Qpt,"IBertForMaskedLM"),Qpt.forEach(t),oko=r(T$e," (I-BERT model)"),T$e.forEach(t),rko=i(U),x1=n(U,"LI",{});var M$e=s(x1);Jme=n(M$e,"STRONG",{});var Hpt=s(Jme);tko=r(Hpt,"layoutlm"),Hpt.forEach(t),ako=r(M$e," \u2014 "),JG=n(M$e,"A",{href:!0});var Upt=s(JG);nko=r(Upt,"LayoutLMForMaskedLM"),Upt.forEach(t),sko=r(M$e," (LayoutLM model)"),M$e.forEach(t),lko=i(U),$1=n(U,"LI",{});var E$e=s($1);Yme=n(E$e,"STRONG",{});var Jpt=s(Yme);iko=r(Jpt,"longformer"),Jpt.forEach(t),dko=r(E$e," \u2014 "),YG=n(E$e,"A",{href:!0});var Ypt=s(YG);cko=r(Ypt,"LongformerForMaskedLM"),Ypt.forEach(t),fko=r(E$e," (Longformer model)"),E$e.forEach(t),mko=i(U),k1=n(U,"LI",{});var C$e=s(k1);Kme=n(C$e,"STRONG",{});var Kpt=s(Kme);gko=r(Kpt,"luke"),Kpt.forEach(t),hko=r(C$e," \u2014 "),KG=n(C$e,"A",{href:!0});var Zpt=s(KG);pko=r(Zpt,"LukeForMaskedLM"),Zpt.forEach(t),uko=r(C$e," (LUKE model)"),C$e.forEach(t),_ko=i(U),S1=n(U,"LI",{});var w$e=s(S1);Zme=n(w$e,"STRONG",{});var eut=s(Zme);bko=r(eut,"mbart"),eut.forEach(t),vko=r(w$e," \u2014 "),ZG=n(w$e,"A",{href:!0});var out=s(ZG);Fko=r(out,"MBartForConditionalGeneration"),out.forEach(t),Tko=r(w$e," (mBART model)"),w$e.forEach(t),Mko=i(U),R1=n(U,"LI",{});var A$e=s(R1);ege=n(A$e,"STRONG",{});var rut=s(ege);Eko=r(rut,"megatron-bert"),rut.forEach(t),Cko=r(A$e," \u2014 "),eO=n(A$e,"A",{href:!0});var tut=s(eO);wko=r(tut,"MegatronBertForMaskedLM"),tut.forEach(t),Ako=r(A$e," (Megatron-BERT model)"),A$e.forEach(t),Lko=i(U),P1=n(U,"LI",{});var L$e=s(P1);oge=n(L$e,"STRONG",{});var aut=s(oge);yko=r(aut,"mobilebert"),aut.forEach(t),xko=r(L$e," \u2014 "),oO=n(L$e,"A",{href:!0});var nut=s(oO);$ko=r(nut,"MobileBertForMaskedLM"),nut.forEach(t),kko=r(L$e," (MobileBERT model)"),L$e.forEach(t),Sko=i(U),B1=n(U,"LI",{});var y$e=s(B1);rge=n(y$e,"STRONG",{});var sut=s(rge);Rko=r(sut,"mpnet"),sut.forEach(t),Pko=r(y$e," \u2014 "),rO=n(y$e,"A",{href:!0});var lut=s(rO);Bko=r(lut,"MPNetForMaskedLM"),lut.forEach(t),Iko=r(y$e," (MPNet model)"),y$e.forEach(t),Nko=i(U),I1=n(U,"LI",{});var x$e=s(I1);tge=n(x$e,"STRONG",{});var iut=s(tge);qko=r(iut,"nystromformer"),iut.forEach(t),jko=r(x$e," \u2014 "),tO=n(x$e,"A",{href:!0});var dut=s(tO);Dko=r(dut,"NystromformerForMaskedLM"),dut.forEach(t),Gko=r(x$e," (Nystr\xF6mformer model)"),x$e.forEach(t),Oko=i(U),N1=n(U,"LI",{});var $$e=s(N1);age=n($$e,"STRONG",{});var cut=s(age);Vko=r(cut,"perceiver"),cut.forEach(t),Xko=r($$e," \u2014 "),aO=n($$e,"A",{href:!0});var fut=s(aO);zko=r(fut,"PerceiverForMaskedLM"),fut.forEach(t),Wko=r($$e," (Perceiver model)"),$$e.forEach(t),Qko=i(U),q1=n(U,"LI",{});var k$e=s(q1);nge=n(k$e,"STRONG",{});var mut=s(nge);Hko=r(mut,"qdqbert"),mut.forEach(t),Uko=r(k$e," \u2014 "),nO=n(k$e,"A",{href:!0});var gut=s(nO);Jko=r(gut,"QDQBertForMaskedLM"),gut.forEach(t),Yko=r(k$e," (QDQBert model)"),k$e.forEach(t),Kko=i(U),j1=n(U,"LI",{});var S$e=s(j1);sge=n(S$e,"STRONG",{});var hut=s(sge);Zko=r(hut,"reformer"),hut.forEach(t),eSo=r(S$e," \u2014 "),sO=n(S$e,"A",{href:!0});var put=s(sO);oSo=r(put,"ReformerForMaskedLM"),put.forEach(t),rSo=r(S$e," (Reformer model)"),S$e.forEach(t),tSo=i(U),D1=n(U,"LI",{});var R$e=s(D1);lge=n(R$e,"STRONG",{});var uut=s(lge);aSo=r(uut,"rembert"),uut.forEach(t),nSo=r(R$e," \u2014 "),lO=n(R$e,"A",{href:!0});var _ut=s(lO);sSo=r(_ut,"RemBertForMaskedLM"),_ut.forEach(t),lSo=r(R$e," (RemBERT model)"),R$e.forEach(t),iSo=i(U),G1=n(U,"LI",{});var P$e=s(G1);ige=n(P$e,"STRONG",{});var but=s(ige);dSo=r(but,"roberta"),but.forEach(t),cSo=r(P$e," \u2014 "),iO=n(P$e,"A",{href:!0});var vut=s(iO);fSo=r(vut,"RobertaForMaskedLM"),vut.forEach(t),mSo=r(P$e," (RoBERTa model)"),P$e.forEach(t),gSo=i(U),O1=n(U,"LI",{});var B$e=s(O1);dge=n(B$e,"STRONG",{});var Fut=s(dge);hSo=r(Fut,"roformer"),Fut.forEach(t),pSo=r(B$e," \u2014 "),dO=n(B$e,"A",{href:!0});var Tut=s(dO);uSo=r(Tut,"RoFormerForMaskedLM"),Tut.forEach(t),_So=r(B$e," (RoFormer model)"),B$e.forEach(t),bSo=i(U),V1=n(U,"LI",{});var I$e=s(V1);cge=n(I$e,"STRONG",{});var Mut=s(cge);vSo=r(Mut,"squeezebert"),Mut.forEach(t),FSo=r(I$e," \u2014 "),cO=n(I$e,"A",{href:!0});var Eut=s(cO);TSo=r(Eut,"SqueezeBertForMaskedLM"),Eut.forEach(t),MSo=r(I$e," (SqueezeBERT model)"),I$e.forEach(t),ESo=i(U),X1=n(U,"LI",{});var N$e=s(X1);fge=n(N$e,"STRONG",{});var Cut=s(fge);CSo=r(Cut,"tapas"),Cut.forEach(t),wSo=r(N$e," \u2014 "),fO=n(N$e,"A",{href:!0});var wut=s(fO);ASo=r(wut,"TapasForMaskedLM"),wut.forEach(t),LSo=r(N$e," (TAPAS model)"),N$e.forEach(t),ySo=i(U),z1=n(U,"LI",{});var q$e=s(z1);mge=n(q$e,"STRONG",{});var Aut=s(mge);xSo=r(Aut,"wav2vec2"),Aut.forEach(t),$So=r(q$e," \u2014 "),gge=n(q$e,"CODE",{});var Lut=s(gge);kSo=r(Lut,"Wav2Vec2ForMaskedLM"),Lut.forEach(t),SSo=r(q$e," (Wav2Vec2 model)"),q$e.forEach(t),RSo=i(U),W1=n(U,"LI",{});var j$e=s(W1);hge=n(j$e,"STRONG",{});var yut=s(hge);PSo=r(yut,"xlm"),yut.forEach(t),BSo=r(j$e," \u2014 "),mO=n(j$e,"A",{href:!0});var xut=s(mO);ISo=r(xut,"XLMWithLMHeadModel"),xut.forEach(t),NSo=r(j$e," (XLM model)"),j$e.forEach(t),qSo=i(U),Q1=n(U,"LI",{});var D$e=s(Q1);pge=n(D$e,"STRONG",{});var $ut=s(pge);jSo=r($ut,"xlm-roberta"),$ut.forEach(t),DSo=r(D$e," \u2014 "),gO=n(D$e,"A",{href:!0});var kut=s(gO);GSo=r(kut,"XLMRobertaForMaskedLM"),kut.forEach(t),OSo=r(D$e," (XLM-RoBERTa model)"),D$e.forEach(t),VSo=i(U),H1=n(U,"LI",{});var G$e=s(H1);uge=n(G$e,"STRONG",{});var Sut=s(uge);XSo=r(Sut,"xlm-roberta-xl"),Sut.forEach(t),zSo=r(G$e," \u2014 "),hO=n(G$e,"A",{href:!0});var Rut=s(hO);WSo=r(Rut,"XLMRobertaXLForMaskedLM"),Rut.forEach(t),QSo=r(G$e," (XLM-RoBERTa-XL model)"),G$e.forEach(t),HSo=i(U),U1=n(U,"LI",{});var O$e=s(U1);_ge=n(O$e,"STRONG",{});var Put=s(_ge);USo=r(Put,"yoso"),Put.forEach(t),JSo=r(O$e," \u2014 "),pO=n(O$e,"A",{href:!0});var But=s(pO);YSo=r(But,"YosoForMaskedLM"),But.forEach(t),KSo=r(O$e," (YOSO model)"),O$e.forEach(t),U.forEach(t),ZSo=i(la),J1=n(la,"P",{});var V$e=s(J1);eRo=r(V$e,"The model is set in evaluation mode by default using "),bge=n(V$e,"CODE",{});var Iut=s(bge);oRo=r(Iut,"model.eval()"),Iut.forEach(t),rRo=r(V$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vge=n(V$e,"CODE",{});var Nut=s(vge);tRo=r(Nut,"model.train()"),Nut.forEach(t),V$e.forEach(t),aRo=i(la),T(Y1.$$.fragment,la),la.forEach(t),Zs.forEach(t),IGe=i(f),Qi=n(f,"H2",{class:!0});var OVe=s(Qi);K1=n(OVe,"A",{id:!0,class:!0,href:!0});var qut=s(K1);Fge=n(qut,"SPAN",{});var jut=s(Fge);T(py.$$.fragment,jut),jut.forEach(t),qut.forEach(t),nRo=i(OVe),Tge=n(OVe,"SPAN",{});var Dut=s(Tge);sRo=r(Dut,"AutoModelForSeq2SeqLM"),Dut.forEach(t),OVe.forEach(t),NGe=i(f),Ro=n(f,"DIV",{class:!0});var el=s(Ro);T(uy.$$.fragment,el),lRo=i(el),Hi=n(el,"P",{});var poe=s(Hi);iRo=r(poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uO=n(poe,"A",{href:!0});var Gut=s(uO);dRo=r(Gut,"from_pretrained()"),Gut.forEach(t),cRo=r(poe," class method or the "),_O=n(poe,"A",{href:!0});var Out=s(_O);fRo=r(Out,"from_config()"),Out.forEach(t),mRo=r(poe,` class
method.`),poe.forEach(t),gRo=i(el),_y=n(el,"P",{});var VVe=s(_y);hRo=r(VVe,"This class cannot be instantiated directly using "),Mge=n(VVe,"CODE",{});var Vut=s(Mge);pRo=r(Vut,"__init__()"),Vut.forEach(t),uRo=r(VVe," (throws an error)."),VVe.forEach(t),_Ro=i(el),dt=n(el,"DIV",{class:!0});var RA=s(dt);T(by.$$.fragment,RA),bRo=i(RA),Ege=n(RA,"P",{});var Xut=s(Ege);vRo=r(Xut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Xut.forEach(t),FRo=i(RA),Ui=n(RA,"P",{});var uoe=s(Ui);TRo=r(uoe,`Note:
Loading a model from its configuration file does `),Cge=n(uoe,"STRONG",{});var zut=s(Cge);MRo=r(zut,"not"),zut.forEach(t),ERo=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=n(uoe,"A",{href:!0});var Wut=s(bO);CRo=r(Wut,"from_pretrained()"),Wut.forEach(t),wRo=r(uoe," to load the model weights."),uoe.forEach(t),ARo=i(RA),T(Z1.$$.fragment,RA),RA.forEach(t),LRo=i(el),eo=n(el,"DIV",{class:!0});var ia=s(eo);T(vy.$$.fragment,ia),yRo=i(ia),wge=n(ia,"P",{});var Qut=s(wge);xRo=r(Qut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Qut.forEach(t),$Ro=i(ia),Ia=n(ia,"P",{});var PA=s(Ia);kRo=r(PA,"The model class to instantiate is selected based on the "),Age=n(PA,"CODE",{});var Hut=s(Age);SRo=r(Hut,"model_type"),Hut.forEach(t),RRo=r(PA,` property of the config object (either
passed as an argument or loaded from `),Lge=n(PA,"CODE",{});var Uut=s(Lge);PRo=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),BRo=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=n(PA,"CODE",{});var Jut=s(yge);IRo=r(Jut,"pretrained_model_name_or_path"),Jut.forEach(t),NRo=r(PA,":"),PA.forEach(t),qRo=i(ia),pe=n(ia,"UL",{});var be=s(pe);e2=n(be,"LI",{});var X$e=s(e2);xge=n(X$e,"STRONG",{});var Yut=s(xge);jRo=r(Yut,"bart"),Yut.forEach(t),DRo=r(X$e," \u2014 "),vO=n(X$e,"A",{href:!0});var Kut=s(vO);GRo=r(Kut,"BartForConditionalGeneration"),Kut.forEach(t),ORo=r(X$e," (BART model)"),X$e.forEach(t),VRo=i(be),o2=n(be,"LI",{});var z$e=s(o2);$ge=n(z$e,"STRONG",{});var Zut=s($ge);XRo=r(Zut,"bigbird_pegasus"),Zut.forEach(t),zRo=r(z$e," \u2014 "),FO=n(z$e,"A",{href:!0});var e_t=s(FO);WRo=r(e_t,"BigBirdPegasusForConditionalGeneration"),e_t.forEach(t),QRo=r(z$e," (BigBird-Pegasus model)"),z$e.forEach(t),HRo=i(be),r2=n(be,"LI",{});var W$e=s(r2);kge=n(W$e,"STRONG",{});var o_t=s(kge);URo=r(o_t,"blenderbot"),o_t.forEach(t),JRo=r(W$e," \u2014 "),TO=n(W$e,"A",{href:!0});var r_t=s(TO);YRo=r(r_t,"BlenderbotForConditionalGeneration"),r_t.forEach(t),KRo=r(W$e," (Blenderbot model)"),W$e.forEach(t),ZRo=i(be),t2=n(be,"LI",{});var Q$e=s(t2);Sge=n(Q$e,"STRONG",{});var t_t=s(Sge);ePo=r(t_t,"blenderbot-small"),t_t.forEach(t),oPo=r(Q$e," \u2014 "),MO=n(Q$e,"A",{href:!0});var a_t=s(MO);rPo=r(a_t,"BlenderbotSmallForConditionalGeneration"),a_t.forEach(t),tPo=r(Q$e," (BlenderbotSmall model)"),Q$e.forEach(t),aPo=i(be),a2=n(be,"LI",{});var H$e=s(a2);Rge=n(H$e,"STRONG",{});var n_t=s(Rge);nPo=r(n_t,"encoder-decoder"),n_t.forEach(t),sPo=r(H$e," \u2014 "),EO=n(H$e,"A",{href:!0});var s_t=s(EO);lPo=r(s_t,"EncoderDecoderModel"),s_t.forEach(t),iPo=r(H$e," (Encoder decoder model)"),H$e.forEach(t),dPo=i(be),n2=n(be,"LI",{});var U$e=s(n2);Pge=n(U$e,"STRONG",{});var l_t=s(Pge);cPo=r(l_t,"fsmt"),l_t.forEach(t),fPo=r(U$e," \u2014 "),CO=n(U$e,"A",{href:!0});var i_t=s(CO);mPo=r(i_t,"FSMTForConditionalGeneration"),i_t.forEach(t),gPo=r(U$e," (FairSeq Machine-Translation model)"),U$e.forEach(t),hPo=i(be),s2=n(be,"LI",{});var J$e=s(s2);Bge=n(J$e,"STRONG",{});var d_t=s(Bge);pPo=r(d_t,"led"),d_t.forEach(t),uPo=r(J$e," \u2014 "),wO=n(J$e,"A",{href:!0});var c_t=s(wO);_Po=r(c_t,"LEDForConditionalGeneration"),c_t.forEach(t),bPo=r(J$e," (LED model)"),J$e.forEach(t),vPo=i(be),l2=n(be,"LI",{});var Y$e=s(l2);Ige=n(Y$e,"STRONG",{});var f_t=s(Ige);FPo=r(f_t,"longt5"),f_t.forEach(t),TPo=r(Y$e," \u2014 "),AO=n(Y$e,"A",{href:!0});var m_t=s(AO);MPo=r(m_t,"LongT5ForConditionalGeneration"),m_t.forEach(t),EPo=r(Y$e," (LongT5 model)"),Y$e.forEach(t),CPo=i(be),i2=n(be,"LI",{});var K$e=s(i2);Nge=n(K$e,"STRONG",{});var g_t=s(Nge);wPo=r(g_t,"m2m_100"),g_t.forEach(t),APo=r(K$e," \u2014 "),LO=n(K$e,"A",{href:!0});var h_t=s(LO);LPo=r(h_t,"M2M100ForConditionalGeneration"),h_t.forEach(t),yPo=r(K$e," (M2M100 model)"),K$e.forEach(t),xPo=i(be),d2=n(be,"LI",{});var Z$e=s(d2);qge=n(Z$e,"STRONG",{});var p_t=s(qge);$Po=r(p_t,"marian"),p_t.forEach(t),kPo=r(Z$e," \u2014 "),yO=n(Z$e,"A",{href:!0});var u_t=s(yO);SPo=r(u_t,"MarianMTModel"),u_t.forEach(t),RPo=r(Z$e," (Marian model)"),Z$e.forEach(t),PPo=i(be),c2=n(be,"LI",{});var eke=s(c2);jge=n(eke,"STRONG",{});var __t=s(jge);BPo=r(__t,"mbart"),__t.forEach(t),IPo=r(eke," \u2014 "),xO=n(eke,"A",{href:!0});var b_t=s(xO);NPo=r(b_t,"MBartForConditionalGeneration"),b_t.forEach(t),qPo=r(eke," (mBART model)"),eke.forEach(t),jPo=i(be),f2=n(be,"LI",{});var oke=s(f2);Dge=n(oke,"STRONG",{});var v_t=s(Dge);DPo=r(v_t,"mt5"),v_t.forEach(t),GPo=r(oke," \u2014 "),$O=n(oke,"A",{href:!0});var F_t=s($O);OPo=r(F_t,"MT5ForConditionalGeneration"),F_t.forEach(t),VPo=r(oke," (MT5 model)"),oke.forEach(t),XPo=i(be),m2=n(be,"LI",{});var rke=s(m2);Gge=n(rke,"STRONG",{});var T_t=s(Gge);zPo=r(T_t,"pegasus"),T_t.forEach(t),WPo=r(rke," \u2014 "),kO=n(rke,"A",{href:!0});var M_t=s(kO);QPo=r(M_t,"PegasusForConditionalGeneration"),M_t.forEach(t),HPo=r(rke," (Pegasus model)"),rke.forEach(t),UPo=i(be),g2=n(be,"LI",{});var tke=s(g2);Oge=n(tke,"STRONG",{});var E_t=s(Oge);JPo=r(E_t,"plbart"),E_t.forEach(t),YPo=r(tke," \u2014 "),SO=n(tke,"A",{href:!0});var C_t=s(SO);KPo=r(C_t,"PLBartForConditionalGeneration"),C_t.forEach(t),ZPo=r(tke," (PLBart model)"),tke.forEach(t),eBo=i(be),h2=n(be,"LI",{});var ake=s(h2);Vge=n(ake,"STRONG",{});var w_t=s(Vge);oBo=r(w_t,"prophetnet"),w_t.forEach(t),rBo=r(ake," \u2014 "),RO=n(ake,"A",{href:!0});var A_t=s(RO);tBo=r(A_t,"ProphetNetForConditionalGeneration"),A_t.forEach(t),aBo=r(ake," (ProphetNet model)"),ake.forEach(t),nBo=i(be),p2=n(be,"LI",{});var nke=s(p2);Xge=n(nke,"STRONG",{});var L_t=s(Xge);sBo=r(L_t,"t5"),L_t.forEach(t),lBo=r(nke," \u2014 "),PO=n(nke,"A",{href:!0});var y_t=s(PO);iBo=r(y_t,"T5ForConditionalGeneration"),y_t.forEach(t),dBo=r(nke," (T5 model)"),nke.forEach(t),cBo=i(be),u2=n(be,"LI",{});var ske=s(u2);zge=n(ske,"STRONG",{});var x_t=s(zge);fBo=r(x_t,"xlm-prophetnet"),x_t.forEach(t),mBo=r(ske," \u2014 "),BO=n(ske,"A",{href:!0});var $_t=s(BO);gBo=r($_t,"XLMProphetNetForConditionalGeneration"),$_t.forEach(t),hBo=r(ske," (XLM-ProphetNet model)"),ske.forEach(t),be.forEach(t),pBo=i(ia),_2=n(ia,"P",{});var lke=s(_2);uBo=r(lke,"The model is set in evaluation mode by default using "),Wge=n(lke,"CODE",{});var k_t=s(Wge);_Bo=r(k_t,"model.eval()"),k_t.forEach(t),bBo=r(lke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=n(lke,"CODE",{});var S_t=s(Qge);vBo=r(S_t,"model.train()"),S_t.forEach(t),lke.forEach(t),FBo=i(ia),T(b2.$$.fragment,ia),ia.forEach(t),el.forEach(t),qGe=i(f),Ji=n(f,"H2",{class:!0});var XVe=s(Ji);v2=n(XVe,"A",{id:!0,class:!0,href:!0});var R_t=s(v2);Hge=n(R_t,"SPAN",{});var P_t=s(Hge);T(Fy.$$.fragment,P_t),P_t.forEach(t),R_t.forEach(t),TBo=i(XVe),Uge=n(XVe,"SPAN",{});var B_t=s(Uge);MBo=r(B_t,"AutoModelForSequenceClassification"),B_t.forEach(t),XVe.forEach(t),jGe=i(f),Po=n(f,"DIV",{class:!0});var ol=s(Po);T(Ty.$$.fragment,ol),EBo=i(ol),Yi=n(ol,"P",{});var _oe=s(Yi);CBo=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),IO=n(_oe,"A",{href:!0});var I_t=s(IO);wBo=r(I_t,"from_pretrained()"),I_t.forEach(t),ABo=r(_oe," class method or the "),NO=n(_oe,"A",{href:!0});var N_t=s(NO);LBo=r(N_t,"from_config()"),N_t.forEach(t),yBo=r(_oe,` class
method.`),_oe.forEach(t),xBo=i(ol),My=n(ol,"P",{});var zVe=s(My);$Bo=r(zVe,"This class cannot be instantiated directly using "),Jge=n(zVe,"CODE",{});var q_t=s(Jge);kBo=r(q_t,"__init__()"),q_t.forEach(t),SBo=r(zVe," (throws an error)."),zVe.forEach(t),RBo=i(ol),ct=n(ol,"DIV",{class:!0});var BA=s(ct);T(Ey.$$.fragment,BA),PBo=i(BA),Yge=n(BA,"P",{});var j_t=s(Yge);BBo=r(j_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),j_t.forEach(t),IBo=i(BA),Ki=n(BA,"P",{});var boe=s(Ki);NBo=r(boe,`Note:
Loading a model from its configuration file does `),Kge=n(boe,"STRONG",{});var D_t=s(Kge);qBo=r(D_t,"not"),D_t.forEach(t),jBo=r(boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),qO=n(boe,"A",{href:!0});var G_t=s(qO);DBo=r(G_t,"from_pretrained()"),G_t.forEach(t),GBo=r(boe," to load the model weights."),boe.forEach(t),OBo=i(BA),T(F2.$$.fragment,BA),BA.forEach(t),VBo=i(ol),oo=n(ol,"DIV",{class:!0});var da=s(oo);T(Cy.$$.fragment,da),XBo=i(da),Zge=n(da,"P",{});var O_t=s(Zge);zBo=r(O_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),O_t.forEach(t),WBo=i(da),Na=n(da,"P",{});var IA=s(Na);QBo=r(IA,"The model class to instantiate is selected based on the "),ehe=n(IA,"CODE",{});var V_t=s(ehe);HBo=r(V_t,"model_type"),V_t.forEach(t),UBo=r(IA,` property of the config object (either
passed as an argument or loaded from `),ohe=n(IA,"CODE",{});var X_t=s(ohe);JBo=r(X_t,"pretrained_model_name_or_path"),X_t.forEach(t),YBo=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=n(IA,"CODE",{});var z_t=s(rhe);KBo=r(z_t,"pretrained_model_name_or_path"),z_t.forEach(t),ZBo=r(IA,":"),IA.forEach(t),eIo=i(da),N=n(da,"UL",{});var j=s(N);T2=n(j,"LI",{});var ike=s(T2);the=n(ike,"STRONG",{});var W_t=s(the);oIo=r(W_t,"albert"),W_t.forEach(t),rIo=r(ike," \u2014 "),jO=n(ike,"A",{href:!0});var Q_t=s(jO);tIo=r(Q_t,"AlbertForSequenceClassification"),Q_t.forEach(t),aIo=r(ike," (ALBERT model)"),ike.forEach(t),nIo=i(j),M2=n(j,"LI",{});var dke=s(M2);ahe=n(dke,"STRONG",{});var H_t=s(ahe);sIo=r(H_t,"bart"),H_t.forEach(t),lIo=r(dke," \u2014 "),DO=n(dke,"A",{href:!0});var U_t=s(DO);iIo=r(U_t,"BartForSequenceClassification"),U_t.forEach(t),dIo=r(dke," (BART model)"),dke.forEach(t),cIo=i(j),E2=n(j,"LI",{});var cke=s(E2);nhe=n(cke,"STRONG",{});var J_t=s(nhe);fIo=r(J_t,"bert"),J_t.forEach(t),mIo=r(cke," \u2014 "),GO=n(cke,"A",{href:!0});var Y_t=s(GO);gIo=r(Y_t,"BertForSequenceClassification"),Y_t.forEach(t),hIo=r(cke," (BERT model)"),cke.forEach(t),pIo=i(j),C2=n(j,"LI",{});var fke=s(C2);she=n(fke,"STRONG",{});var K_t=s(she);uIo=r(K_t,"big_bird"),K_t.forEach(t),_Io=r(fke," \u2014 "),OO=n(fke,"A",{href:!0});var Z_t=s(OO);bIo=r(Z_t,"BigBirdForSequenceClassification"),Z_t.forEach(t),vIo=r(fke," (BigBird model)"),fke.forEach(t),FIo=i(j),w2=n(j,"LI",{});var mke=s(w2);lhe=n(mke,"STRONG",{});var e4t=s(lhe);TIo=r(e4t,"bigbird_pegasus"),e4t.forEach(t),MIo=r(mke," \u2014 "),VO=n(mke,"A",{href:!0});var o4t=s(VO);EIo=r(o4t,"BigBirdPegasusForSequenceClassification"),o4t.forEach(t),CIo=r(mke," (BigBird-Pegasus model)"),mke.forEach(t),wIo=i(j),A2=n(j,"LI",{});var gke=s(A2);ihe=n(gke,"STRONG",{});var r4t=s(ihe);AIo=r(r4t,"bloom"),r4t.forEach(t),LIo=r(gke," \u2014 "),XO=n(gke,"A",{href:!0});var t4t=s(XO);yIo=r(t4t,"BloomForSequenceClassification"),t4t.forEach(t),xIo=r(gke," (BLOOM model)"),gke.forEach(t),$Io=i(j),L2=n(j,"LI",{});var hke=s(L2);dhe=n(hke,"STRONG",{});var a4t=s(dhe);kIo=r(a4t,"camembert"),a4t.forEach(t),SIo=r(hke," \u2014 "),zO=n(hke,"A",{href:!0});var n4t=s(zO);RIo=r(n4t,"CamembertForSequenceClassification"),n4t.forEach(t),PIo=r(hke," (CamemBERT model)"),hke.forEach(t),BIo=i(j),y2=n(j,"LI",{});var pke=s(y2);che=n(pke,"STRONG",{});var s4t=s(che);IIo=r(s4t,"canine"),s4t.forEach(t),NIo=r(pke," \u2014 "),WO=n(pke,"A",{href:!0});var l4t=s(WO);qIo=r(l4t,"CanineForSequenceClassification"),l4t.forEach(t),jIo=r(pke," (CANINE model)"),pke.forEach(t),DIo=i(j),x2=n(j,"LI",{});var uke=s(x2);fhe=n(uke,"STRONG",{});var i4t=s(fhe);GIo=r(i4t,"convbert"),i4t.forEach(t),OIo=r(uke," \u2014 "),QO=n(uke,"A",{href:!0});var d4t=s(QO);VIo=r(d4t,"ConvBertForSequenceClassification"),d4t.forEach(t),XIo=r(uke," (ConvBERT model)"),uke.forEach(t),zIo=i(j),$2=n(j,"LI",{});var _ke=s($2);mhe=n(_ke,"STRONG",{});var c4t=s(mhe);WIo=r(c4t,"ctrl"),c4t.forEach(t),QIo=r(_ke," \u2014 "),HO=n(_ke,"A",{href:!0});var f4t=s(HO);HIo=r(f4t,"CTRLForSequenceClassification"),f4t.forEach(t),UIo=r(_ke," (CTRL model)"),_ke.forEach(t),JIo=i(j),k2=n(j,"LI",{});var bke=s(k2);ghe=n(bke,"STRONG",{});var m4t=s(ghe);YIo=r(m4t,"data2vec-text"),m4t.forEach(t),KIo=r(bke," \u2014 "),UO=n(bke,"A",{href:!0});var g4t=s(UO);ZIo=r(g4t,"Data2VecTextForSequenceClassification"),g4t.forEach(t),eNo=r(bke," (Data2VecText model)"),bke.forEach(t),oNo=i(j),S2=n(j,"LI",{});var vke=s(S2);hhe=n(vke,"STRONG",{});var h4t=s(hhe);rNo=r(h4t,"deberta"),h4t.forEach(t),tNo=r(vke," \u2014 "),JO=n(vke,"A",{href:!0});var p4t=s(JO);aNo=r(p4t,"DebertaForSequenceClassification"),p4t.forEach(t),nNo=r(vke," (DeBERTa model)"),vke.forEach(t),sNo=i(j),R2=n(j,"LI",{});var Fke=s(R2);phe=n(Fke,"STRONG",{});var u4t=s(phe);lNo=r(u4t,"deberta-v2"),u4t.forEach(t),iNo=r(Fke," \u2014 "),YO=n(Fke,"A",{href:!0});var _4t=s(YO);dNo=r(_4t,"DebertaV2ForSequenceClassification"),_4t.forEach(t),cNo=r(Fke," (DeBERTa-v2 model)"),Fke.forEach(t),fNo=i(j),P2=n(j,"LI",{});var Tke=s(P2);uhe=n(Tke,"STRONG",{});var b4t=s(uhe);mNo=r(b4t,"distilbert"),b4t.forEach(t),gNo=r(Tke," \u2014 "),KO=n(Tke,"A",{href:!0});var v4t=s(KO);hNo=r(v4t,"DistilBertForSequenceClassification"),v4t.forEach(t),pNo=r(Tke," (DistilBERT model)"),Tke.forEach(t),uNo=i(j),B2=n(j,"LI",{});var Mke=s(B2);_he=n(Mke,"STRONG",{});var F4t=s(_he);_No=r(F4t,"electra"),F4t.forEach(t),bNo=r(Mke," \u2014 "),ZO=n(Mke,"A",{href:!0});var T4t=s(ZO);vNo=r(T4t,"ElectraForSequenceClassification"),T4t.forEach(t),FNo=r(Mke," (ELECTRA model)"),Mke.forEach(t),TNo=i(j),I2=n(j,"LI",{});var Eke=s(I2);bhe=n(Eke,"STRONG",{});var M4t=s(bhe);MNo=r(M4t,"flaubert"),M4t.forEach(t),ENo=r(Eke," \u2014 "),eV=n(Eke,"A",{href:!0});var E4t=s(eV);CNo=r(E4t,"FlaubertForSequenceClassification"),E4t.forEach(t),wNo=r(Eke," (FlauBERT model)"),Eke.forEach(t),ANo=i(j),N2=n(j,"LI",{});var Cke=s(N2);vhe=n(Cke,"STRONG",{});var C4t=s(vhe);LNo=r(C4t,"fnet"),C4t.forEach(t),yNo=r(Cke," \u2014 "),oV=n(Cke,"A",{href:!0});var w4t=s(oV);xNo=r(w4t,"FNetForSequenceClassification"),w4t.forEach(t),$No=r(Cke," (FNet model)"),Cke.forEach(t),kNo=i(j),q2=n(j,"LI",{});var wke=s(q2);Fhe=n(wke,"STRONG",{});var A4t=s(Fhe);SNo=r(A4t,"funnel"),A4t.forEach(t),RNo=r(wke," \u2014 "),rV=n(wke,"A",{href:!0});var L4t=s(rV);PNo=r(L4t,"FunnelForSequenceClassification"),L4t.forEach(t),BNo=r(wke," (Funnel Transformer model)"),wke.forEach(t),INo=i(j),j2=n(j,"LI",{});var Ake=s(j2);The=n(Ake,"STRONG",{});var y4t=s(The);NNo=r(y4t,"gpt2"),y4t.forEach(t),qNo=r(Ake," \u2014 "),tV=n(Ake,"A",{href:!0});var x4t=s(tV);jNo=r(x4t,"GPT2ForSequenceClassification"),x4t.forEach(t),DNo=r(Ake," (OpenAI GPT-2 model)"),Ake.forEach(t),GNo=i(j),D2=n(j,"LI",{});var Lke=s(D2);Mhe=n(Lke,"STRONG",{});var $4t=s(Mhe);ONo=r($4t,"gpt_neo"),$4t.forEach(t),VNo=r(Lke," \u2014 "),aV=n(Lke,"A",{href:!0});var k4t=s(aV);XNo=r(k4t,"GPTNeoForSequenceClassification"),k4t.forEach(t),zNo=r(Lke," (GPT Neo model)"),Lke.forEach(t),WNo=i(j),G2=n(j,"LI",{});var yke=s(G2);Ehe=n(yke,"STRONG",{});var S4t=s(Ehe);QNo=r(S4t,"gptj"),S4t.forEach(t),HNo=r(yke," \u2014 "),nV=n(yke,"A",{href:!0});var R4t=s(nV);UNo=r(R4t,"GPTJForSequenceClassification"),R4t.forEach(t),JNo=r(yke," (GPT-J model)"),yke.forEach(t),YNo=i(j),O2=n(j,"LI",{});var xke=s(O2);Che=n(xke,"STRONG",{});var P4t=s(Che);KNo=r(P4t,"ibert"),P4t.forEach(t),ZNo=r(xke," \u2014 "),sV=n(xke,"A",{href:!0});var B4t=s(sV);eqo=r(B4t,"IBertForSequenceClassification"),B4t.forEach(t),oqo=r(xke," (I-BERT model)"),xke.forEach(t),rqo=i(j),V2=n(j,"LI",{});var $ke=s(V2);whe=n($ke,"STRONG",{});var I4t=s(whe);tqo=r(I4t,"layoutlm"),I4t.forEach(t),aqo=r($ke," \u2014 "),lV=n($ke,"A",{href:!0});var N4t=s(lV);nqo=r(N4t,"LayoutLMForSequenceClassification"),N4t.forEach(t),sqo=r($ke," (LayoutLM model)"),$ke.forEach(t),lqo=i(j),X2=n(j,"LI",{});var kke=s(X2);Ahe=n(kke,"STRONG",{});var q4t=s(Ahe);iqo=r(q4t,"layoutlmv2"),q4t.forEach(t),dqo=r(kke," \u2014 "),iV=n(kke,"A",{href:!0});var j4t=s(iV);cqo=r(j4t,"LayoutLMv2ForSequenceClassification"),j4t.forEach(t),fqo=r(kke," (LayoutLMv2 model)"),kke.forEach(t),mqo=i(j),z2=n(j,"LI",{});var Ske=s(z2);Lhe=n(Ske,"STRONG",{});var D4t=s(Lhe);gqo=r(D4t,"layoutlmv3"),D4t.forEach(t),hqo=r(Ske," \u2014 "),dV=n(Ske,"A",{href:!0});var G4t=s(dV);pqo=r(G4t,"LayoutLMv3ForSequenceClassification"),G4t.forEach(t),uqo=r(Ske," (LayoutLMv3 model)"),Ske.forEach(t),_qo=i(j),W2=n(j,"LI",{});var Rke=s(W2);yhe=n(Rke,"STRONG",{});var O4t=s(yhe);bqo=r(O4t,"led"),O4t.forEach(t),vqo=r(Rke," \u2014 "),cV=n(Rke,"A",{href:!0});var V4t=s(cV);Fqo=r(V4t,"LEDForSequenceClassification"),V4t.forEach(t),Tqo=r(Rke," (LED model)"),Rke.forEach(t),Mqo=i(j),Q2=n(j,"LI",{});var Pke=s(Q2);xhe=n(Pke,"STRONG",{});var X4t=s(xhe);Eqo=r(X4t,"longformer"),X4t.forEach(t),Cqo=r(Pke," \u2014 "),fV=n(Pke,"A",{href:!0});var z4t=s(fV);wqo=r(z4t,"LongformerForSequenceClassification"),z4t.forEach(t),Aqo=r(Pke," (Longformer model)"),Pke.forEach(t),Lqo=i(j),H2=n(j,"LI",{});var Bke=s(H2);$he=n(Bke,"STRONG",{});var W4t=s($he);yqo=r(W4t,"mbart"),W4t.forEach(t),xqo=r(Bke," \u2014 "),mV=n(Bke,"A",{href:!0});var Q4t=s(mV);$qo=r(Q4t,"MBartForSequenceClassification"),Q4t.forEach(t),kqo=r(Bke," (mBART model)"),Bke.forEach(t),Sqo=i(j),U2=n(j,"LI",{});var Ike=s(U2);khe=n(Ike,"STRONG",{});var H4t=s(khe);Rqo=r(H4t,"megatron-bert"),H4t.forEach(t),Pqo=r(Ike," \u2014 "),gV=n(Ike,"A",{href:!0});var U4t=s(gV);Bqo=r(U4t,"MegatronBertForSequenceClassification"),U4t.forEach(t),Iqo=r(Ike," (Megatron-BERT model)"),Ike.forEach(t),Nqo=i(j),J2=n(j,"LI",{});var Nke=s(J2);She=n(Nke,"STRONG",{});var J4t=s(She);qqo=r(J4t,"mobilebert"),J4t.forEach(t),jqo=r(Nke," \u2014 "),hV=n(Nke,"A",{href:!0});var Y4t=s(hV);Dqo=r(Y4t,"MobileBertForSequenceClassification"),Y4t.forEach(t),Gqo=r(Nke," (MobileBERT model)"),Nke.forEach(t),Oqo=i(j),Y2=n(j,"LI",{});var qke=s(Y2);Rhe=n(qke,"STRONG",{});var K4t=s(Rhe);Vqo=r(K4t,"mpnet"),K4t.forEach(t),Xqo=r(qke," \u2014 "),pV=n(qke,"A",{href:!0});var Z4t=s(pV);zqo=r(Z4t,"MPNetForSequenceClassification"),Z4t.forEach(t),Wqo=r(qke," (MPNet model)"),qke.forEach(t),Qqo=i(j),K2=n(j,"LI",{});var jke=s(K2);Phe=n(jke,"STRONG",{});var e1t=s(Phe);Hqo=r(e1t,"nystromformer"),e1t.forEach(t),Uqo=r(jke," \u2014 "),uV=n(jke,"A",{href:!0});var o1t=s(uV);Jqo=r(o1t,"NystromformerForSequenceClassification"),o1t.forEach(t),Yqo=r(jke," (Nystr\xF6mformer model)"),jke.forEach(t),Kqo=i(j),Z2=n(j,"LI",{});var Dke=s(Z2);Bhe=n(Dke,"STRONG",{});var r1t=s(Bhe);Zqo=r(r1t,"openai-gpt"),r1t.forEach(t),ejo=r(Dke," \u2014 "),_V=n(Dke,"A",{href:!0});var t1t=s(_V);ojo=r(t1t,"OpenAIGPTForSequenceClassification"),t1t.forEach(t),rjo=r(Dke," (OpenAI GPT model)"),Dke.forEach(t),tjo=i(j),eb=n(j,"LI",{});var Gke=s(eb);Ihe=n(Gke,"STRONG",{});var a1t=s(Ihe);ajo=r(a1t,"perceiver"),a1t.forEach(t),njo=r(Gke," \u2014 "),bV=n(Gke,"A",{href:!0});var n1t=s(bV);sjo=r(n1t,"PerceiverForSequenceClassification"),n1t.forEach(t),ljo=r(Gke," (Perceiver model)"),Gke.forEach(t),ijo=i(j),ob=n(j,"LI",{});var Oke=s(ob);Nhe=n(Oke,"STRONG",{});var s1t=s(Nhe);djo=r(s1t,"plbart"),s1t.forEach(t),cjo=r(Oke," \u2014 "),vV=n(Oke,"A",{href:!0});var l1t=s(vV);fjo=r(l1t,"PLBartForSequenceClassification"),l1t.forEach(t),mjo=r(Oke," (PLBart model)"),Oke.forEach(t),gjo=i(j),rb=n(j,"LI",{});var Vke=s(rb);qhe=n(Vke,"STRONG",{});var i1t=s(qhe);hjo=r(i1t,"qdqbert"),i1t.forEach(t),pjo=r(Vke," \u2014 "),FV=n(Vke,"A",{href:!0});var d1t=s(FV);ujo=r(d1t,"QDQBertForSequenceClassification"),d1t.forEach(t),_jo=r(Vke," (QDQBert model)"),Vke.forEach(t),bjo=i(j),tb=n(j,"LI",{});var Xke=s(tb);jhe=n(Xke,"STRONG",{});var c1t=s(jhe);vjo=r(c1t,"reformer"),c1t.forEach(t),Fjo=r(Xke," \u2014 "),TV=n(Xke,"A",{href:!0});var f1t=s(TV);Tjo=r(f1t,"ReformerForSequenceClassification"),f1t.forEach(t),Mjo=r(Xke," (Reformer model)"),Xke.forEach(t),Ejo=i(j),ab=n(j,"LI",{});var zke=s(ab);Dhe=n(zke,"STRONG",{});var m1t=s(Dhe);Cjo=r(m1t,"rembert"),m1t.forEach(t),wjo=r(zke," \u2014 "),MV=n(zke,"A",{href:!0});var g1t=s(MV);Ajo=r(g1t,"RemBertForSequenceClassification"),g1t.forEach(t),Ljo=r(zke," (RemBERT model)"),zke.forEach(t),yjo=i(j),nb=n(j,"LI",{});var Wke=s(nb);Ghe=n(Wke,"STRONG",{});var h1t=s(Ghe);xjo=r(h1t,"roberta"),h1t.forEach(t),$jo=r(Wke," \u2014 "),EV=n(Wke,"A",{href:!0});var p1t=s(EV);kjo=r(p1t,"RobertaForSequenceClassification"),p1t.forEach(t),Sjo=r(Wke," (RoBERTa model)"),Wke.forEach(t),Rjo=i(j),sb=n(j,"LI",{});var Qke=s(sb);Ohe=n(Qke,"STRONG",{});var u1t=s(Ohe);Pjo=r(u1t,"roformer"),u1t.forEach(t),Bjo=r(Qke," \u2014 "),CV=n(Qke,"A",{href:!0});var _1t=s(CV);Ijo=r(_1t,"RoFormerForSequenceClassification"),_1t.forEach(t),Njo=r(Qke," (RoFormer model)"),Qke.forEach(t),qjo=i(j),lb=n(j,"LI",{});var Hke=s(lb);Vhe=n(Hke,"STRONG",{});var b1t=s(Vhe);jjo=r(b1t,"squeezebert"),b1t.forEach(t),Djo=r(Hke," \u2014 "),wV=n(Hke,"A",{href:!0});var v1t=s(wV);Gjo=r(v1t,"SqueezeBertForSequenceClassification"),v1t.forEach(t),Ojo=r(Hke," (SqueezeBERT model)"),Hke.forEach(t),Vjo=i(j),ib=n(j,"LI",{});var Uke=s(ib);Xhe=n(Uke,"STRONG",{});var F1t=s(Xhe);Xjo=r(F1t,"tapas"),F1t.forEach(t),zjo=r(Uke," \u2014 "),AV=n(Uke,"A",{href:!0});var T1t=s(AV);Wjo=r(T1t,"TapasForSequenceClassification"),T1t.forEach(t),Qjo=r(Uke," (TAPAS model)"),Uke.forEach(t),Hjo=i(j),db=n(j,"LI",{});var Jke=s(db);zhe=n(Jke,"STRONG",{});var M1t=s(zhe);Ujo=r(M1t,"transfo-xl"),M1t.forEach(t),Jjo=r(Jke," \u2014 "),LV=n(Jke,"A",{href:!0});var E1t=s(LV);Yjo=r(E1t,"TransfoXLForSequenceClassification"),E1t.forEach(t),Kjo=r(Jke," (Transformer-XL model)"),Jke.forEach(t),Zjo=i(j),cb=n(j,"LI",{});var Yke=s(cb);Whe=n(Yke,"STRONG",{});var C1t=s(Whe);eDo=r(C1t,"xlm"),C1t.forEach(t),oDo=r(Yke," \u2014 "),yV=n(Yke,"A",{href:!0});var w1t=s(yV);rDo=r(w1t,"XLMForSequenceClassification"),w1t.forEach(t),tDo=r(Yke," (XLM model)"),Yke.forEach(t),aDo=i(j),fb=n(j,"LI",{});var Kke=s(fb);Qhe=n(Kke,"STRONG",{});var A1t=s(Qhe);nDo=r(A1t,"xlm-roberta"),A1t.forEach(t),sDo=r(Kke," \u2014 "),xV=n(Kke,"A",{href:!0});var L1t=s(xV);lDo=r(L1t,"XLMRobertaForSequenceClassification"),L1t.forEach(t),iDo=r(Kke," (XLM-RoBERTa model)"),Kke.forEach(t),dDo=i(j),mb=n(j,"LI",{});var Zke=s(mb);Hhe=n(Zke,"STRONG",{});var y1t=s(Hhe);cDo=r(y1t,"xlm-roberta-xl"),y1t.forEach(t),fDo=r(Zke," \u2014 "),$V=n(Zke,"A",{href:!0});var x1t=s($V);mDo=r(x1t,"XLMRobertaXLForSequenceClassification"),x1t.forEach(t),gDo=r(Zke," (XLM-RoBERTa-XL model)"),Zke.forEach(t),hDo=i(j),gb=n(j,"LI",{});var eSe=s(gb);Uhe=n(eSe,"STRONG",{});var $1t=s(Uhe);pDo=r($1t,"xlnet"),$1t.forEach(t),uDo=r(eSe," \u2014 "),kV=n(eSe,"A",{href:!0});var k1t=s(kV);_Do=r(k1t,"XLNetForSequenceClassification"),k1t.forEach(t),bDo=r(eSe," (XLNet model)"),eSe.forEach(t),vDo=i(j),hb=n(j,"LI",{});var oSe=s(hb);Jhe=n(oSe,"STRONG",{});var S1t=s(Jhe);FDo=r(S1t,"yoso"),S1t.forEach(t),TDo=r(oSe," \u2014 "),SV=n(oSe,"A",{href:!0});var R1t=s(SV);MDo=r(R1t,"YosoForSequenceClassification"),R1t.forEach(t),EDo=r(oSe," (YOSO model)"),oSe.forEach(t),j.forEach(t),CDo=i(da),pb=n(da,"P",{});var rSe=s(pb);wDo=r(rSe,"The model is set in evaluation mode by default using "),Yhe=n(rSe,"CODE",{});var P1t=s(Yhe);ADo=r(P1t,"model.eval()"),P1t.forEach(t),LDo=r(rSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=n(rSe,"CODE",{});var B1t=s(Khe);yDo=r(B1t,"model.train()"),B1t.forEach(t),rSe.forEach(t),xDo=i(da),T(ub.$$.fragment,da),da.forEach(t),ol.forEach(t),DGe=i(f),Zi=n(f,"H2",{class:!0});var WVe=s(Zi);_b=n(WVe,"A",{id:!0,class:!0,href:!0});var I1t=s(_b);Zhe=n(I1t,"SPAN",{});var N1t=s(Zhe);T(wy.$$.fragment,N1t),N1t.forEach(t),I1t.forEach(t),$Do=i(WVe),epe=n(WVe,"SPAN",{});var q1t=s(epe);kDo=r(q1t,"AutoModelForMultipleChoice"),q1t.forEach(t),WVe.forEach(t),GGe=i(f),Bo=n(f,"DIV",{class:!0});var rl=s(Bo);T(Ay.$$.fragment,rl),SDo=i(rl),ed=n(rl,"P",{});var voe=s(ed);RDo=r(voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RV=n(voe,"A",{href:!0});var j1t=s(RV);PDo=r(j1t,"from_pretrained()"),j1t.forEach(t),BDo=r(voe," class method or the "),PV=n(voe,"A",{href:!0});var D1t=s(PV);IDo=r(D1t,"from_config()"),D1t.forEach(t),NDo=r(voe,` class
method.`),voe.forEach(t),qDo=i(rl),Ly=n(rl,"P",{});var QVe=s(Ly);jDo=r(QVe,"This class cannot be instantiated directly using "),ope=n(QVe,"CODE",{});var G1t=s(ope);DDo=r(G1t,"__init__()"),G1t.forEach(t),GDo=r(QVe," (throws an error)."),QVe.forEach(t),ODo=i(rl),ft=n(rl,"DIV",{class:!0});var NA=s(ft);T(yy.$$.fragment,NA),VDo=i(NA),rpe=n(NA,"P",{});var O1t=s(rpe);XDo=r(O1t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),O1t.forEach(t),zDo=i(NA),od=n(NA,"P",{});var Foe=s(od);WDo=r(Foe,`Note:
Loading a model from its configuration file does `),tpe=n(Foe,"STRONG",{});var V1t=s(tpe);QDo=r(V1t,"not"),V1t.forEach(t),HDo=r(Foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=n(Foe,"A",{href:!0});var X1t=s(BV);UDo=r(X1t,"from_pretrained()"),X1t.forEach(t),JDo=r(Foe," to load the model weights."),Foe.forEach(t),YDo=i(NA),T(bb.$$.fragment,NA),NA.forEach(t),KDo=i(rl),ro=n(rl,"DIV",{class:!0});var ca=s(ro);T(xy.$$.fragment,ca),ZDo=i(ca),ape=n(ca,"P",{});var z1t=s(ape);eGo=r(z1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),z1t.forEach(t),oGo=i(ca),qa=n(ca,"P",{});var qA=s(qa);rGo=r(qA,"The model class to instantiate is selected based on the "),npe=n(qA,"CODE",{});var W1t=s(npe);tGo=r(W1t,"model_type"),W1t.forEach(t),aGo=r(qA,` property of the config object (either
passed as an argument or loaded from `),spe=n(qA,"CODE",{});var Q1t=s(spe);nGo=r(Q1t,"pretrained_model_name_or_path"),Q1t.forEach(t),sGo=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=n(qA,"CODE",{});var H1t=s(lpe);lGo=r(H1t,"pretrained_model_name_or_path"),H1t.forEach(t),iGo=r(qA,":"),qA.forEach(t),dGo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);vb=n(ee,"LI",{});var tSe=s(vb);ipe=n(tSe,"STRONG",{});var U1t=s(ipe);cGo=r(U1t,"albert"),U1t.forEach(t),fGo=r(tSe," \u2014 "),IV=n(tSe,"A",{href:!0});var J1t=s(IV);mGo=r(J1t,"AlbertForMultipleChoice"),J1t.forEach(t),gGo=r(tSe," (ALBERT model)"),tSe.forEach(t),hGo=i(ee),Fb=n(ee,"LI",{});var aSe=s(Fb);dpe=n(aSe,"STRONG",{});var Y1t=s(dpe);pGo=r(Y1t,"bert"),Y1t.forEach(t),uGo=r(aSe," \u2014 "),NV=n(aSe,"A",{href:!0});var K1t=s(NV);_Go=r(K1t,"BertForMultipleChoice"),K1t.forEach(t),bGo=r(aSe," (BERT model)"),aSe.forEach(t),vGo=i(ee),Tb=n(ee,"LI",{});var nSe=s(Tb);cpe=n(nSe,"STRONG",{});var Z1t=s(cpe);FGo=r(Z1t,"big_bird"),Z1t.forEach(t),TGo=r(nSe," \u2014 "),qV=n(nSe,"A",{href:!0});var e2t=s(qV);MGo=r(e2t,"BigBirdForMultipleChoice"),e2t.forEach(t),EGo=r(nSe," (BigBird model)"),nSe.forEach(t),CGo=i(ee),Mb=n(ee,"LI",{});var sSe=s(Mb);fpe=n(sSe,"STRONG",{});var o2t=s(fpe);wGo=r(o2t,"camembert"),o2t.forEach(t),AGo=r(sSe," \u2014 "),jV=n(sSe,"A",{href:!0});var r2t=s(jV);LGo=r(r2t,"CamembertForMultipleChoice"),r2t.forEach(t),yGo=r(sSe," (CamemBERT model)"),sSe.forEach(t),xGo=i(ee),Eb=n(ee,"LI",{});var lSe=s(Eb);mpe=n(lSe,"STRONG",{});var t2t=s(mpe);$Go=r(t2t,"canine"),t2t.forEach(t),kGo=r(lSe," \u2014 "),DV=n(lSe,"A",{href:!0});var a2t=s(DV);SGo=r(a2t,"CanineForMultipleChoice"),a2t.forEach(t),RGo=r(lSe," (CANINE model)"),lSe.forEach(t),PGo=i(ee),Cb=n(ee,"LI",{});var iSe=s(Cb);gpe=n(iSe,"STRONG",{});var n2t=s(gpe);BGo=r(n2t,"convbert"),n2t.forEach(t),IGo=r(iSe," \u2014 "),GV=n(iSe,"A",{href:!0});var s2t=s(GV);NGo=r(s2t,"ConvBertForMultipleChoice"),s2t.forEach(t),qGo=r(iSe," (ConvBERT model)"),iSe.forEach(t),jGo=i(ee),wb=n(ee,"LI",{});var dSe=s(wb);hpe=n(dSe,"STRONG",{});var l2t=s(hpe);DGo=r(l2t,"data2vec-text"),l2t.forEach(t),GGo=r(dSe," \u2014 "),OV=n(dSe,"A",{href:!0});var i2t=s(OV);OGo=r(i2t,"Data2VecTextForMultipleChoice"),i2t.forEach(t),VGo=r(dSe," (Data2VecText model)"),dSe.forEach(t),XGo=i(ee),Ab=n(ee,"LI",{});var cSe=s(Ab);ppe=n(cSe,"STRONG",{});var d2t=s(ppe);zGo=r(d2t,"deberta-v2"),d2t.forEach(t),WGo=r(cSe," \u2014 "),VV=n(cSe,"A",{href:!0});var c2t=s(VV);QGo=r(c2t,"DebertaV2ForMultipleChoice"),c2t.forEach(t),HGo=r(cSe," (DeBERTa-v2 model)"),cSe.forEach(t),UGo=i(ee),Lb=n(ee,"LI",{});var fSe=s(Lb);upe=n(fSe,"STRONG",{});var f2t=s(upe);JGo=r(f2t,"distilbert"),f2t.forEach(t),YGo=r(fSe," \u2014 "),XV=n(fSe,"A",{href:!0});var m2t=s(XV);KGo=r(m2t,"DistilBertForMultipleChoice"),m2t.forEach(t),ZGo=r(fSe," (DistilBERT model)"),fSe.forEach(t),eOo=i(ee),yb=n(ee,"LI",{});var mSe=s(yb);_pe=n(mSe,"STRONG",{});var g2t=s(_pe);oOo=r(g2t,"electra"),g2t.forEach(t),rOo=r(mSe," \u2014 "),zV=n(mSe,"A",{href:!0});var h2t=s(zV);tOo=r(h2t,"ElectraForMultipleChoice"),h2t.forEach(t),aOo=r(mSe," (ELECTRA model)"),mSe.forEach(t),nOo=i(ee),xb=n(ee,"LI",{});var gSe=s(xb);bpe=n(gSe,"STRONG",{});var p2t=s(bpe);sOo=r(p2t,"flaubert"),p2t.forEach(t),lOo=r(gSe," \u2014 "),WV=n(gSe,"A",{href:!0});var u2t=s(WV);iOo=r(u2t,"FlaubertForMultipleChoice"),u2t.forEach(t),dOo=r(gSe," (FlauBERT model)"),gSe.forEach(t),cOo=i(ee),$b=n(ee,"LI",{});var hSe=s($b);vpe=n(hSe,"STRONG",{});var _2t=s(vpe);fOo=r(_2t,"fnet"),_2t.forEach(t),mOo=r(hSe," \u2014 "),QV=n(hSe,"A",{href:!0});var b2t=s(QV);gOo=r(b2t,"FNetForMultipleChoice"),b2t.forEach(t),hOo=r(hSe," (FNet model)"),hSe.forEach(t),pOo=i(ee),kb=n(ee,"LI",{});var pSe=s(kb);Fpe=n(pSe,"STRONG",{});var v2t=s(Fpe);uOo=r(v2t,"funnel"),v2t.forEach(t),_Oo=r(pSe," \u2014 "),HV=n(pSe,"A",{href:!0});var F2t=s(HV);bOo=r(F2t,"FunnelForMultipleChoice"),F2t.forEach(t),vOo=r(pSe," (Funnel Transformer model)"),pSe.forEach(t),FOo=i(ee),Sb=n(ee,"LI",{});var uSe=s(Sb);Tpe=n(uSe,"STRONG",{});var T2t=s(Tpe);TOo=r(T2t,"ibert"),T2t.forEach(t),MOo=r(uSe," \u2014 "),UV=n(uSe,"A",{href:!0});var M2t=s(UV);EOo=r(M2t,"IBertForMultipleChoice"),M2t.forEach(t),COo=r(uSe," (I-BERT model)"),uSe.forEach(t),wOo=i(ee),Rb=n(ee,"LI",{});var _Se=s(Rb);Mpe=n(_Se,"STRONG",{});var E2t=s(Mpe);AOo=r(E2t,"longformer"),E2t.forEach(t),LOo=r(_Se," \u2014 "),JV=n(_Se,"A",{href:!0});var C2t=s(JV);yOo=r(C2t,"LongformerForMultipleChoice"),C2t.forEach(t),xOo=r(_Se," (Longformer model)"),_Se.forEach(t),$Oo=i(ee),Pb=n(ee,"LI",{});var bSe=s(Pb);Epe=n(bSe,"STRONG",{});var w2t=s(Epe);kOo=r(w2t,"megatron-bert"),w2t.forEach(t),SOo=r(bSe," \u2014 "),YV=n(bSe,"A",{href:!0});var A2t=s(YV);ROo=r(A2t,"MegatronBertForMultipleChoice"),A2t.forEach(t),POo=r(bSe," (Megatron-BERT model)"),bSe.forEach(t),BOo=i(ee),Bb=n(ee,"LI",{});var vSe=s(Bb);Cpe=n(vSe,"STRONG",{});var L2t=s(Cpe);IOo=r(L2t,"mobilebert"),L2t.forEach(t),NOo=r(vSe," \u2014 "),KV=n(vSe,"A",{href:!0});var y2t=s(KV);qOo=r(y2t,"MobileBertForMultipleChoice"),y2t.forEach(t),jOo=r(vSe," (MobileBERT model)"),vSe.forEach(t),DOo=i(ee),Ib=n(ee,"LI",{});var FSe=s(Ib);wpe=n(FSe,"STRONG",{});var x2t=s(wpe);GOo=r(x2t,"mpnet"),x2t.forEach(t),OOo=r(FSe," \u2014 "),ZV=n(FSe,"A",{href:!0});var $2t=s(ZV);VOo=r($2t,"MPNetForMultipleChoice"),$2t.forEach(t),XOo=r(FSe," (MPNet model)"),FSe.forEach(t),zOo=i(ee),Nb=n(ee,"LI",{});var TSe=s(Nb);Ape=n(TSe,"STRONG",{});var k2t=s(Ape);WOo=r(k2t,"nystromformer"),k2t.forEach(t),QOo=r(TSe," \u2014 "),eX=n(TSe,"A",{href:!0});var S2t=s(eX);HOo=r(S2t,"NystromformerForMultipleChoice"),S2t.forEach(t),UOo=r(TSe," (Nystr\xF6mformer model)"),TSe.forEach(t),JOo=i(ee),qb=n(ee,"LI",{});var MSe=s(qb);Lpe=n(MSe,"STRONG",{});var R2t=s(Lpe);YOo=r(R2t,"qdqbert"),R2t.forEach(t),KOo=r(MSe," \u2014 "),oX=n(MSe,"A",{href:!0});var P2t=s(oX);ZOo=r(P2t,"QDQBertForMultipleChoice"),P2t.forEach(t),eVo=r(MSe," (QDQBert model)"),MSe.forEach(t),oVo=i(ee),jb=n(ee,"LI",{});var ESe=s(jb);ype=n(ESe,"STRONG",{});var B2t=s(ype);rVo=r(B2t,"rembert"),B2t.forEach(t),tVo=r(ESe," \u2014 "),rX=n(ESe,"A",{href:!0});var I2t=s(rX);aVo=r(I2t,"RemBertForMultipleChoice"),I2t.forEach(t),nVo=r(ESe," (RemBERT model)"),ESe.forEach(t),sVo=i(ee),Db=n(ee,"LI",{});var CSe=s(Db);xpe=n(CSe,"STRONG",{});var N2t=s(xpe);lVo=r(N2t,"roberta"),N2t.forEach(t),iVo=r(CSe," \u2014 "),tX=n(CSe,"A",{href:!0});var q2t=s(tX);dVo=r(q2t,"RobertaForMultipleChoice"),q2t.forEach(t),cVo=r(CSe," (RoBERTa model)"),CSe.forEach(t),fVo=i(ee),Gb=n(ee,"LI",{});var wSe=s(Gb);$pe=n(wSe,"STRONG",{});var j2t=s($pe);mVo=r(j2t,"roformer"),j2t.forEach(t),gVo=r(wSe," \u2014 "),aX=n(wSe,"A",{href:!0});var D2t=s(aX);hVo=r(D2t,"RoFormerForMultipleChoice"),D2t.forEach(t),pVo=r(wSe," (RoFormer model)"),wSe.forEach(t),uVo=i(ee),Ob=n(ee,"LI",{});var ASe=s(Ob);kpe=n(ASe,"STRONG",{});var G2t=s(kpe);_Vo=r(G2t,"squeezebert"),G2t.forEach(t),bVo=r(ASe," \u2014 "),nX=n(ASe,"A",{href:!0});var O2t=s(nX);vVo=r(O2t,"SqueezeBertForMultipleChoice"),O2t.forEach(t),FVo=r(ASe," (SqueezeBERT model)"),ASe.forEach(t),TVo=i(ee),Vb=n(ee,"LI",{});var LSe=s(Vb);Spe=n(LSe,"STRONG",{});var V2t=s(Spe);MVo=r(V2t,"xlm"),V2t.forEach(t),EVo=r(LSe," \u2014 "),sX=n(LSe,"A",{href:!0});var X2t=s(sX);CVo=r(X2t,"XLMForMultipleChoice"),X2t.forEach(t),wVo=r(LSe," (XLM model)"),LSe.forEach(t),AVo=i(ee),Xb=n(ee,"LI",{});var ySe=s(Xb);Rpe=n(ySe,"STRONG",{});var z2t=s(Rpe);LVo=r(z2t,"xlm-roberta"),z2t.forEach(t),yVo=r(ySe," \u2014 "),lX=n(ySe,"A",{href:!0});var W2t=s(lX);xVo=r(W2t,"XLMRobertaForMultipleChoice"),W2t.forEach(t),$Vo=r(ySe," (XLM-RoBERTa model)"),ySe.forEach(t),kVo=i(ee),zb=n(ee,"LI",{});var xSe=s(zb);Ppe=n(xSe,"STRONG",{});var Q2t=s(Ppe);SVo=r(Q2t,"xlm-roberta-xl"),Q2t.forEach(t),RVo=r(xSe," \u2014 "),iX=n(xSe,"A",{href:!0});var H2t=s(iX);PVo=r(H2t,"XLMRobertaXLForMultipleChoice"),H2t.forEach(t),BVo=r(xSe," (XLM-RoBERTa-XL model)"),xSe.forEach(t),IVo=i(ee),Wb=n(ee,"LI",{});var $Se=s(Wb);Bpe=n($Se,"STRONG",{});var U2t=s(Bpe);NVo=r(U2t,"xlnet"),U2t.forEach(t),qVo=r($Se," \u2014 "),dX=n($Se,"A",{href:!0});var J2t=s(dX);jVo=r(J2t,"XLNetForMultipleChoice"),J2t.forEach(t),DVo=r($Se," (XLNet model)"),$Se.forEach(t),GVo=i(ee),Qb=n(ee,"LI",{});var kSe=s(Qb);Ipe=n(kSe,"STRONG",{});var Y2t=s(Ipe);OVo=r(Y2t,"yoso"),Y2t.forEach(t),VVo=r(kSe," \u2014 "),cX=n(kSe,"A",{href:!0});var K2t=s(cX);XVo=r(K2t,"YosoForMultipleChoice"),K2t.forEach(t),zVo=r(kSe," (YOSO model)"),kSe.forEach(t),ee.forEach(t),WVo=i(ca),Hb=n(ca,"P",{});var SSe=s(Hb);QVo=r(SSe,"The model is set in evaluation mode by default using "),Npe=n(SSe,"CODE",{});var Z2t=s(Npe);HVo=r(Z2t,"model.eval()"),Z2t.forEach(t),UVo=r(SSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=n(SSe,"CODE",{});var ebt=s(qpe);JVo=r(ebt,"model.train()"),ebt.forEach(t),SSe.forEach(t),YVo=i(ca),T(Ub.$$.fragment,ca),ca.forEach(t),rl.forEach(t),OGe=i(f),rd=n(f,"H2",{class:!0});var HVe=s(rd);Jb=n(HVe,"A",{id:!0,class:!0,href:!0});var obt=s(Jb);jpe=n(obt,"SPAN",{});var rbt=s(jpe);T($y.$$.fragment,rbt),rbt.forEach(t),obt.forEach(t),KVo=i(HVe),Dpe=n(HVe,"SPAN",{});var tbt=s(Dpe);ZVo=r(tbt,"AutoModelForNextSentencePrediction"),tbt.forEach(t),HVe.forEach(t),VGe=i(f),Io=n(f,"DIV",{class:!0});var tl=s(Io);T(ky.$$.fragment,tl),eXo=i(tl),td=n(tl,"P",{});var Toe=s(td);oXo=r(Toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fX=n(Toe,"A",{href:!0});var abt=s(fX);rXo=r(abt,"from_pretrained()"),abt.forEach(t),tXo=r(Toe," class method or the "),mX=n(Toe,"A",{href:!0});var nbt=s(mX);aXo=r(nbt,"from_config()"),nbt.forEach(t),nXo=r(Toe,` class
method.`),Toe.forEach(t),sXo=i(tl),Sy=n(tl,"P",{});var UVe=s(Sy);lXo=r(UVe,"This class cannot be instantiated directly using "),Gpe=n(UVe,"CODE",{});var sbt=s(Gpe);iXo=r(sbt,"__init__()"),sbt.forEach(t),dXo=r(UVe," (throws an error)."),UVe.forEach(t),cXo=i(tl),mt=n(tl,"DIV",{class:!0});var jA=s(mt);T(Ry.$$.fragment,jA),fXo=i(jA),Ope=n(jA,"P",{});var lbt=s(Ope);mXo=r(lbt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lbt.forEach(t),gXo=i(jA),ad=n(jA,"P",{});var Moe=s(ad);hXo=r(Moe,`Note:
Loading a model from its configuration file does `),Vpe=n(Moe,"STRONG",{});var ibt=s(Vpe);pXo=r(ibt,"not"),ibt.forEach(t),uXo=r(Moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=n(Moe,"A",{href:!0});var dbt=s(gX);_Xo=r(dbt,"from_pretrained()"),dbt.forEach(t),bXo=r(Moe," to load the model weights."),Moe.forEach(t),vXo=i(jA),T(Yb.$$.fragment,jA),jA.forEach(t),FXo=i(tl),to=n(tl,"DIV",{class:!0});var fa=s(to);T(Py.$$.fragment,fa),TXo=i(fa),Xpe=n(fa,"P",{});var cbt=s(Xpe);MXo=r(cbt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cbt.forEach(t),EXo=i(fa),ja=n(fa,"P",{});var DA=s(ja);CXo=r(DA,"The model class to instantiate is selected based on the "),zpe=n(DA,"CODE",{});var fbt=s(zpe);wXo=r(fbt,"model_type"),fbt.forEach(t),AXo=r(DA,` property of the config object (either
passed as an argument or loaded from `),Wpe=n(DA,"CODE",{});var mbt=s(Wpe);LXo=r(mbt,"pretrained_model_name_or_path"),mbt.forEach(t),yXo=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=n(DA,"CODE",{});var gbt=s(Qpe);xXo=r(gbt,"pretrained_model_name_or_path"),gbt.forEach(t),$Xo=r(DA,":"),DA.forEach(t),kXo=i(fa),Zr=n(fa,"UL",{});var al=s(Zr);Kb=n(al,"LI",{});var RSe=s(Kb);Hpe=n(RSe,"STRONG",{});var hbt=s(Hpe);SXo=r(hbt,"bert"),hbt.forEach(t),RXo=r(RSe," \u2014 "),hX=n(RSe,"A",{href:!0});var pbt=s(hX);PXo=r(pbt,"BertForNextSentencePrediction"),pbt.forEach(t),BXo=r(RSe," (BERT model)"),RSe.forEach(t),IXo=i(al),Zb=n(al,"LI",{});var PSe=s(Zb);Upe=n(PSe,"STRONG",{});var ubt=s(Upe);NXo=r(ubt,"fnet"),ubt.forEach(t),qXo=r(PSe," \u2014 "),pX=n(PSe,"A",{href:!0});var _bt=s(pX);jXo=r(_bt,"FNetForNextSentencePrediction"),_bt.forEach(t),DXo=r(PSe," (FNet model)"),PSe.forEach(t),GXo=i(al),ev=n(al,"LI",{});var BSe=s(ev);Jpe=n(BSe,"STRONG",{});var bbt=s(Jpe);OXo=r(bbt,"megatron-bert"),bbt.forEach(t),VXo=r(BSe," \u2014 "),uX=n(BSe,"A",{href:!0});var vbt=s(uX);XXo=r(vbt,"MegatronBertForNextSentencePrediction"),vbt.forEach(t),zXo=r(BSe," (Megatron-BERT model)"),BSe.forEach(t),WXo=i(al),ov=n(al,"LI",{});var ISe=s(ov);Ype=n(ISe,"STRONG",{});var Fbt=s(Ype);QXo=r(Fbt,"mobilebert"),Fbt.forEach(t),HXo=r(ISe," \u2014 "),_X=n(ISe,"A",{href:!0});var Tbt=s(_X);UXo=r(Tbt,"MobileBertForNextSentencePrediction"),Tbt.forEach(t),JXo=r(ISe," (MobileBERT model)"),ISe.forEach(t),YXo=i(al),rv=n(al,"LI",{});var NSe=s(rv);Kpe=n(NSe,"STRONG",{});var Mbt=s(Kpe);KXo=r(Mbt,"qdqbert"),Mbt.forEach(t),ZXo=r(NSe," \u2014 "),bX=n(NSe,"A",{href:!0});var Ebt=s(bX);ezo=r(Ebt,"QDQBertForNextSentencePrediction"),Ebt.forEach(t),ozo=r(NSe," (QDQBert model)"),NSe.forEach(t),al.forEach(t),rzo=i(fa),tv=n(fa,"P",{});var qSe=s(tv);tzo=r(qSe,"The model is set in evaluation mode by default using "),Zpe=n(qSe,"CODE",{});var Cbt=s(Zpe);azo=r(Cbt,"model.eval()"),Cbt.forEach(t),nzo=r(qSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=n(qSe,"CODE",{});var wbt=s(eue);szo=r(wbt,"model.train()"),wbt.forEach(t),qSe.forEach(t),lzo=i(fa),T(av.$$.fragment,fa),fa.forEach(t),tl.forEach(t),XGe=i(f),nd=n(f,"H2",{class:!0});var JVe=s(nd);nv=n(JVe,"A",{id:!0,class:!0,href:!0});var Abt=s(nv);oue=n(Abt,"SPAN",{});var Lbt=s(oue);T(By.$$.fragment,Lbt),Lbt.forEach(t),Abt.forEach(t),izo=i(JVe),rue=n(JVe,"SPAN",{});var ybt=s(rue);dzo=r(ybt,"AutoModelForTokenClassification"),ybt.forEach(t),JVe.forEach(t),zGe=i(f),No=n(f,"DIV",{class:!0});var nl=s(No);T(Iy.$$.fragment,nl),czo=i(nl),sd=n(nl,"P",{});var Eoe=s(sd);fzo=r(Eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vX=n(Eoe,"A",{href:!0});var xbt=s(vX);mzo=r(xbt,"from_pretrained()"),xbt.forEach(t),gzo=r(Eoe," class method or the "),FX=n(Eoe,"A",{href:!0});var $bt=s(FX);hzo=r($bt,"from_config()"),$bt.forEach(t),pzo=r(Eoe,` class
method.`),Eoe.forEach(t),uzo=i(nl),Ny=n(nl,"P",{});var YVe=s(Ny);_zo=r(YVe,"This class cannot be instantiated directly using "),tue=n(YVe,"CODE",{});var kbt=s(tue);bzo=r(kbt,"__init__()"),kbt.forEach(t),vzo=r(YVe," (throws an error)."),YVe.forEach(t),Fzo=i(nl),gt=n(nl,"DIV",{class:!0});var GA=s(gt);T(qy.$$.fragment,GA),Tzo=i(GA),aue=n(GA,"P",{});var Sbt=s(aue);Mzo=r(Sbt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Sbt.forEach(t),Ezo=i(GA),ld=n(GA,"P",{});var Coe=s(ld);Czo=r(Coe,`Note:
Loading a model from its configuration file does `),nue=n(Coe,"STRONG",{});var Rbt=s(nue);wzo=r(Rbt,"not"),Rbt.forEach(t),Azo=r(Coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TX=n(Coe,"A",{href:!0});var Pbt=s(TX);Lzo=r(Pbt,"from_pretrained()"),Pbt.forEach(t),yzo=r(Coe," to load the model weights."),Coe.forEach(t),xzo=i(GA),T(sv.$$.fragment,GA),GA.forEach(t),$zo=i(nl),ao=n(nl,"DIV",{class:!0});var ma=s(ao);T(jy.$$.fragment,ma),kzo=i(ma),sue=n(ma,"P",{});var Bbt=s(sue);Szo=r(Bbt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Bbt.forEach(t),Rzo=i(ma),Da=n(ma,"P",{});var OA=s(Da);Pzo=r(OA,"The model class to instantiate is selected based on the "),lue=n(OA,"CODE",{});var Ibt=s(lue);Bzo=r(Ibt,"model_type"),Ibt.forEach(t),Izo=r(OA,` property of the config object (either
passed as an argument or loaded from `),iue=n(OA,"CODE",{});var Nbt=s(iue);Nzo=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),qzo=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=n(OA,"CODE",{});var qbt=s(due);jzo=r(qbt,"pretrained_model_name_or_path"),qbt.forEach(t),Dzo=r(OA,":"),OA.forEach(t),Gzo=i(ma),H=n(ma,"UL",{});var J=s(H);lv=n(J,"LI",{});var jSe=s(lv);cue=n(jSe,"STRONG",{});var jbt=s(cue);Ozo=r(jbt,"albert"),jbt.forEach(t),Vzo=r(jSe," \u2014 "),MX=n(jSe,"A",{href:!0});var Dbt=s(MX);Xzo=r(Dbt,"AlbertForTokenClassification"),Dbt.forEach(t),zzo=r(jSe," (ALBERT model)"),jSe.forEach(t),Wzo=i(J),iv=n(J,"LI",{});var DSe=s(iv);fue=n(DSe,"STRONG",{});var Gbt=s(fue);Qzo=r(Gbt,"bert"),Gbt.forEach(t),Hzo=r(DSe," \u2014 "),EX=n(DSe,"A",{href:!0});var Obt=s(EX);Uzo=r(Obt,"BertForTokenClassification"),Obt.forEach(t),Jzo=r(DSe," (BERT model)"),DSe.forEach(t),Yzo=i(J),dv=n(J,"LI",{});var GSe=s(dv);mue=n(GSe,"STRONG",{});var Vbt=s(mue);Kzo=r(Vbt,"big_bird"),Vbt.forEach(t),Zzo=r(GSe," \u2014 "),CX=n(GSe,"A",{href:!0});var Xbt=s(CX);eWo=r(Xbt,"BigBirdForTokenClassification"),Xbt.forEach(t),oWo=r(GSe," (BigBird model)"),GSe.forEach(t),rWo=i(J),cv=n(J,"LI",{});var OSe=s(cv);gue=n(OSe,"STRONG",{});var zbt=s(gue);tWo=r(zbt,"bloom"),zbt.forEach(t),aWo=r(OSe," \u2014 "),wX=n(OSe,"A",{href:!0});var Wbt=s(wX);nWo=r(Wbt,"BloomForTokenClassification"),Wbt.forEach(t),sWo=r(OSe," (BLOOM model)"),OSe.forEach(t),lWo=i(J),fv=n(J,"LI",{});var VSe=s(fv);hue=n(VSe,"STRONG",{});var Qbt=s(hue);iWo=r(Qbt,"camembert"),Qbt.forEach(t),dWo=r(VSe," \u2014 "),AX=n(VSe,"A",{href:!0});var Hbt=s(AX);cWo=r(Hbt,"CamembertForTokenClassification"),Hbt.forEach(t),fWo=r(VSe," (CamemBERT model)"),VSe.forEach(t),mWo=i(J),mv=n(J,"LI",{});var XSe=s(mv);pue=n(XSe,"STRONG",{});var Ubt=s(pue);gWo=r(Ubt,"canine"),Ubt.forEach(t),hWo=r(XSe," \u2014 "),LX=n(XSe,"A",{href:!0});var Jbt=s(LX);pWo=r(Jbt,"CanineForTokenClassification"),Jbt.forEach(t),uWo=r(XSe," (CANINE model)"),XSe.forEach(t),_Wo=i(J),gv=n(J,"LI",{});var zSe=s(gv);uue=n(zSe,"STRONG",{});var Ybt=s(uue);bWo=r(Ybt,"convbert"),Ybt.forEach(t),vWo=r(zSe," \u2014 "),yX=n(zSe,"A",{href:!0});var Kbt=s(yX);FWo=r(Kbt,"ConvBertForTokenClassification"),Kbt.forEach(t),TWo=r(zSe," (ConvBERT model)"),zSe.forEach(t),MWo=i(J),hv=n(J,"LI",{});var WSe=s(hv);_ue=n(WSe,"STRONG",{});var Zbt=s(_ue);EWo=r(Zbt,"data2vec-text"),Zbt.forEach(t),CWo=r(WSe," \u2014 "),xX=n(WSe,"A",{href:!0});var evt=s(xX);wWo=r(evt,"Data2VecTextForTokenClassification"),evt.forEach(t),AWo=r(WSe," (Data2VecText model)"),WSe.forEach(t),LWo=i(J),pv=n(J,"LI",{});var QSe=s(pv);bue=n(QSe,"STRONG",{});var ovt=s(bue);yWo=r(ovt,"deberta"),ovt.forEach(t),xWo=r(QSe," \u2014 "),$X=n(QSe,"A",{href:!0});var rvt=s($X);$Wo=r(rvt,"DebertaForTokenClassification"),rvt.forEach(t),kWo=r(QSe," (DeBERTa model)"),QSe.forEach(t),SWo=i(J),uv=n(J,"LI",{});var HSe=s(uv);vue=n(HSe,"STRONG",{});var tvt=s(vue);RWo=r(tvt,"deberta-v2"),tvt.forEach(t),PWo=r(HSe," \u2014 "),kX=n(HSe,"A",{href:!0});var avt=s(kX);BWo=r(avt,"DebertaV2ForTokenClassification"),avt.forEach(t),IWo=r(HSe," (DeBERTa-v2 model)"),HSe.forEach(t),NWo=i(J),_v=n(J,"LI",{});var USe=s(_v);Fue=n(USe,"STRONG",{});var nvt=s(Fue);qWo=r(nvt,"distilbert"),nvt.forEach(t),jWo=r(USe," \u2014 "),SX=n(USe,"A",{href:!0});var svt=s(SX);DWo=r(svt,"DistilBertForTokenClassification"),svt.forEach(t),GWo=r(USe," (DistilBERT model)"),USe.forEach(t),OWo=i(J),bv=n(J,"LI",{});var JSe=s(bv);Tue=n(JSe,"STRONG",{});var lvt=s(Tue);VWo=r(lvt,"electra"),lvt.forEach(t),XWo=r(JSe," \u2014 "),RX=n(JSe,"A",{href:!0});var ivt=s(RX);zWo=r(ivt,"ElectraForTokenClassification"),ivt.forEach(t),WWo=r(JSe," (ELECTRA model)"),JSe.forEach(t),QWo=i(J),vv=n(J,"LI",{});var YSe=s(vv);Mue=n(YSe,"STRONG",{});var dvt=s(Mue);HWo=r(dvt,"flaubert"),dvt.forEach(t),UWo=r(YSe," \u2014 "),PX=n(YSe,"A",{href:!0});var cvt=s(PX);JWo=r(cvt,"FlaubertForTokenClassification"),cvt.forEach(t),YWo=r(YSe," (FlauBERT model)"),YSe.forEach(t),KWo=i(J),Fv=n(J,"LI",{});var KSe=s(Fv);Eue=n(KSe,"STRONG",{});var fvt=s(Eue);ZWo=r(fvt,"fnet"),fvt.forEach(t),eQo=r(KSe," \u2014 "),BX=n(KSe,"A",{href:!0});var mvt=s(BX);oQo=r(mvt,"FNetForTokenClassification"),mvt.forEach(t),rQo=r(KSe," (FNet model)"),KSe.forEach(t),tQo=i(J),Tv=n(J,"LI",{});var ZSe=s(Tv);Cue=n(ZSe,"STRONG",{});var gvt=s(Cue);aQo=r(gvt,"funnel"),gvt.forEach(t),nQo=r(ZSe," \u2014 "),IX=n(ZSe,"A",{href:!0});var hvt=s(IX);sQo=r(hvt,"FunnelForTokenClassification"),hvt.forEach(t),lQo=r(ZSe," (Funnel Transformer model)"),ZSe.forEach(t),iQo=i(J),Mv=n(J,"LI",{});var eRe=s(Mv);wue=n(eRe,"STRONG",{});var pvt=s(wue);dQo=r(pvt,"gpt2"),pvt.forEach(t),cQo=r(eRe," \u2014 "),NX=n(eRe,"A",{href:!0});var uvt=s(NX);fQo=r(uvt,"GPT2ForTokenClassification"),uvt.forEach(t),mQo=r(eRe," (OpenAI GPT-2 model)"),eRe.forEach(t),gQo=i(J),Ev=n(J,"LI",{});var oRe=s(Ev);Aue=n(oRe,"STRONG",{});var _vt=s(Aue);hQo=r(_vt,"ibert"),_vt.forEach(t),pQo=r(oRe," \u2014 "),qX=n(oRe,"A",{href:!0});var bvt=s(qX);uQo=r(bvt,"IBertForTokenClassification"),bvt.forEach(t),_Qo=r(oRe," (I-BERT model)"),oRe.forEach(t),bQo=i(J),Cv=n(J,"LI",{});var rRe=s(Cv);Lue=n(rRe,"STRONG",{});var vvt=s(Lue);vQo=r(vvt,"layoutlm"),vvt.forEach(t),FQo=r(rRe," \u2014 "),jX=n(rRe,"A",{href:!0});var Fvt=s(jX);TQo=r(Fvt,"LayoutLMForTokenClassification"),Fvt.forEach(t),MQo=r(rRe," (LayoutLM model)"),rRe.forEach(t),EQo=i(J),wv=n(J,"LI",{});var tRe=s(wv);yue=n(tRe,"STRONG",{});var Tvt=s(yue);CQo=r(Tvt,"layoutlmv2"),Tvt.forEach(t),wQo=r(tRe," \u2014 "),DX=n(tRe,"A",{href:!0});var Mvt=s(DX);AQo=r(Mvt,"LayoutLMv2ForTokenClassification"),Mvt.forEach(t),LQo=r(tRe," (LayoutLMv2 model)"),tRe.forEach(t),yQo=i(J),Av=n(J,"LI",{});var aRe=s(Av);xue=n(aRe,"STRONG",{});var Evt=s(xue);xQo=r(Evt,"layoutlmv3"),Evt.forEach(t),$Qo=r(aRe," \u2014 "),GX=n(aRe,"A",{href:!0});var Cvt=s(GX);kQo=r(Cvt,"LayoutLMv3ForTokenClassification"),Cvt.forEach(t),SQo=r(aRe," (LayoutLMv3 model)"),aRe.forEach(t),RQo=i(J),Lv=n(J,"LI",{});var nRe=s(Lv);$ue=n(nRe,"STRONG",{});var wvt=s($ue);PQo=r(wvt,"longformer"),wvt.forEach(t),BQo=r(nRe," \u2014 "),OX=n(nRe,"A",{href:!0});var Avt=s(OX);IQo=r(Avt,"LongformerForTokenClassification"),Avt.forEach(t),NQo=r(nRe," (Longformer model)"),nRe.forEach(t),qQo=i(J),yv=n(J,"LI",{});var sRe=s(yv);kue=n(sRe,"STRONG",{});var Lvt=s(kue);jQo=r(Lvt,"megatron-bert"),Lvt.forEach(t),DQo=r(sRe," \u2014 "),VX=n(sRe,"A",{href:!0});var yvt=s(VX);GQo=r(yvt,"MegatronBertForTokenClassification"),yvt.forEach(t),OQo=r(sRe," (Megatron-BERT model)"),sRe.forEach(t),VQo=i(J),xv=n(J,"LI",{});var lRe=s(xv);Sue=n(lRe,"STRONG",{});var xvt=s(Sue);XQo=r(xvt,"mobilebert"),xvt.forEach(t),zQo=r(lRe," \u2014 "),XX=n(lRe,"A",{href:!0});var $vt=s(XX);WQo=r($vt,"MobileBertForTokenClassification"),$vt.forEach(t),QQo=r(lRe," (MobileBERT model)"),lRe.forEach(t),HQo=i(J),$v=n(J,"LI",{});var iRe=s($v);Rue=n(iRe,"STRONG",{});var kvt=s(Rue);UQo=r(kvt,"mpnet"),kvt.forEach(t),JQo=r(iRe," \u2014 "),zX=n(iRe,"A",{href:!0});var Svt=s(zX);YQo=r(Svt,"MPNetForTokenClassification"),Svt.forEach(t),KQo=r(iRe," (MPNet model)"),iRe.forEach(t),ZQo=i(J),kv=n(J,"LI",{});var dRe=s(kv);Pue=n(dRe,"STRONG",{});var Rvt=s(Pue);eHo=r(Rvt,"nystromformer"),Rvt.forEach(t),oHo=r(dRe," \u2014 "),WX=n(dRe,"A",{href:!0});var Pvt=s(WX);rHo=r(Pvt,"NystromformerForTokenClassification"),Pvt.forEach(t),tHo=r(dRe," (Nystr\xF6mformer model)"),dRe.forEach(t),aHo=i(J),Sv=n(J,"LI",{});var cRe=s(Sv);Bue=n(cRe,"STRONG",{});var Bvt=s(Bue);nHo=r(Bvt,"qdqbert"),Bvt.forEach(t),sHo=r(cRe," \u2014 "),QX=n(cRe,"A",{href:!0});var Ivt=s(QX);lHo=r(Ivt,"QDQBertForTokenClassification"),Ivt.forEach(t),iHo=r(cRe," (QDQBert model)"),cRe.forEach(t),dHo=i(J),Rv=n(J,"LI",{});var fRe=s(Rv);Iue=n(fRe,"STRONG",{});var Nvt=s(Iue);cHo=r(Nvt,"rembert"),Nvt.forEach(t),fHo=r(fRe," \u2014 "),HX=n(fRe,"A",{href:!0});var qvt=s(HX);mHo=r(qvt,"RemBertForTokenClassification"),qvt.forEach(t),gHo=r(fRe," (RemBERT model)"),fRe.forEach(t),hHo=i(J),Pv=n(J,"LI",{});var mRe=s(Pv);Nue=n(mRe,"STRONG",{});var jvt=s(Nue);pHo=r(jvt,"roberta"),jvt.forEach(t),uHo=r(mRe," \u2014 "),UX=n(mRe,"A",{href:!0});var Dvt=s(UX);_Ho=r(Dvt,"RobertaForTokenClassification"),Dvt.forEach(t),bHo=r(mRe," (RoBERTa model)"),mRe.forEach(t),vHo=i(J),Bv=n(J,"LI",{});var gRe=s(Bv);que=n(gRe,"STRONG",{});var Gvt=s(que);FHo=r(Gvt,"roformer"),Gvt.forEach(t),THo=r(gRe," \u2014 "),JX=n(gRe,"A",{href:!0});var Ovt=s(JX);MHo=r(Ovt,"RoFormerForTokenClassification"),Ovt.forEach(t),EHo=r(gRe," (RoFormer model)"),gRe.forEach(t),CHo=i(J),Iv=n(J,"LI",{});var hRe=s(Iv);jue=n(hRe,"STRONG",{});var Vvt=s(jue);wHo=r(Vvt,"squeezebert"),Vvt.forEach(t),AHo=r(hRe," \u2014 "),YX=n(hRe,"A",{href:!0});var Xvt=s(YX);LHo=r(Xvt,"SqueezeBertForTokenClassification"),Xvt.forEach(t),yHo=r(hRe," (SqueezeBERT model)"),hRe.forEach(t),xHo=i(J),Nv=n(J,"LI",{});var pRe=s(Nv);Due=n(pRe,"STRONG",{});var zvt=s(Due);$Ho=r(zvt,"xlm"),zvt.forEach(t),kHo=r(pRe," \u2014 "),KX=n(pRe,"A",{href:!0});var Wvt=s(KX);SHo=r(Wvt,"XLMForTokenClassification"),Wvt.forEach(t),RHo=r(pRe," (XLM model)"),pRe.forEach(t),PHo=i(J),qv=n(J,"LI",{});var uRe=s(qv);Gue=n(uRe,"STRONG",{});var Qvt=s(Gue);BHo=r(Qvt,"xlm-roberta"),Qvt.forEach(t),IHo=r(uRe," \u2014 "),ZX=n(uRe,"A",{href:!0});var Hvt=s(ZX);NHo=r(Hvt,"XLMRobertaForTokenClassification"),Hvt.forEach(t),qHo=r(uRe," (XLM-RoBERTa model)"),uRe.forEach(t),jHo=i(J),jv=n(J,"LI",{});var _Re=s(jv);Oue=n(_Re,"STRONG",{});var Uvt=s(Oue);DHo=r(Uvt,"xlm-roberta-xl"),Uvt.forEach(t),GHo=r(_Re," \u2014 "),ez=n(_Re,"A",{href:!0});var Jvt=s(ez);OHo=r(Jvt,"XLMRobertaXLForTokenClassification"),Jvt.forEach(t),VHo=r(_Re," (XLM-RoBERTa-XL model)"),_Re.forEach(t),XHo=i(J),Dv=n(J,"LI",{});var bRe=s(Dv);Vue=n(bRe,"STRONG",{});var Yvt=s(Vue);zHo=r(Yvt,"xlnet"),Yvt.forEach(t),WHo=r(bRe," \u2014 "),oz=n(bRe,"A",{href:!0});var Kvt=s(oz);QHo=r(Kvt,"XLNetForTokenClassification"),Kvt.forEach(t),HHo=r(bRe," (XLNet model)"),bRe.forEach(t),UHo=i(J),Gv=n(J,"LI",{});var vRe=s(Gv);Xue=n(vRe,"STRONG",{});var Zvt=s(Xue);JHo=r(Zvt,"yoso"),Zvt.forEach(t),YHo=r(vRe," \u2014 "),rz=n(vRe,"A",{href:!0});var e3t=s(rz);KHo=r(e3t,"YosoForTokenClassification"),e3t.forEach(t),ZHo=r(vRe," (YOSO model)"),vRe.forEach(t),J.forEach(t),eUo=i(ma),Ov=n(ma,"P",{});var FRe=s(Ov);oUo=r(FRe,"The model is set in evaluation mode by default using "),zue=n(FRe,"CODE",{});var o3t=s(zue);rUo=r(o3t,"model.eval()"),o3t.forEach(t),tUo=r(FRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=n(FRe,"CODE",{});var r3t=s(Wue);aUo=r(r3t,"model.train()"),r3t.forEach(t),FRe.forEach(t),nUo=i(ma),T(Vv.$$.fragment,ma),ma.forEach(t),nl.forEach(t),WGe=i(f),id=n(f,"H2",{class:!0});var KVe=s(id);Xv=n(KVe,"A",{id:!0,class:!0,href:!0});var t3t=s(Xv);Que=n(t3t,"SPAN",{});var a3t=s(Que);T(Dy.$$.fragment,a3t),a3t.forEach(t),t3t.forEach(t),sUo=i(KVe),Hue=n(KVe,"SPAN",{});var n3t=s(Hue);lUo=r(n3t,"AutoModelForQuestionAnswering"),n3t.forEach(t),KVe.forEach(t),QGe=i(f),qo=n(f,"DIV",{class:!0});var sl=s(qo);T(Gy.$$.fragment,sl),iUo=i(sl),dd=n(sl,"P",{});var woe=s(dd);dUo=r(woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),tz=n(woe,"A",{href:!0});var s3t=s(tz);cUo=r(s3t,"from_pretrained()"),s3t.forEach(t),fUo=r(woe," class method or the "),az=n(woe,"A",{href:!0});var l3t=s(az);mUo=r(l3t,"from_config()"),l3t.forEach(t),gUo=r(woe,` class
method.`),woe.forEach(t),hUo=i(sl),Oy=n(sl,"P",{});var ZVe=s(Oy);pUo=r(ZVe,"This class cannot be instantiated directly using "),Uue=n(ZVe,"CODE",{});var i3t=s(Uue);uUo=r(i3t,"__init__()"),i3t.forEach(t),_Uo=r(ZVe," (throws an error)."),ZVe.forEach(t),bUo=i(sl),ht=n(sl,"DIV",{class:!0});var VA=s(ht);T(Vy.$$.fragment,VA),vUo=i(VA),Jue=n(VA,"P",{});var d3t=s(Jue);FUo=r(d3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),d3t.forEach(t),TUo=i(VA),cd=n(VA,"P",{});var Aoe=s(cd);MUo=r(Aoe,`Note:
Loading a model from its configuration file does `),Yue=n(Aoe,"STRONG",{});var c3t=s(Yue);EUo=r(c3t,"not"),c3t.forEach(t),CUo=r(Aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=n(Aoe,"A",{href:!0});var f3t=s(nz);wUo=r(f3t,"from_pretrained()"),f3t.forEach(t),AUo=r(Aoe," to load the model weights."),Aoe.forEach(t),LUo=i(VA),T(zv.$$.fragment,VA),VA.forEach(t),yUo=i(sl),no=n(sl,"DIV",{class:!0});var ga=s(no);T(Xy.$$.fragment,ga),xUo=i(ga),Kue=n(ga,"P",{});var m3t=s(Kue);$Uo=r(m3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),m3t.forEach(t),kUo=i(ga),Ga=n(ga,"P",{});var XA=s(Ga);SUo=r(XA,"The model class to instantiate is selected based on the "),Zue=n(XA,"CODE",{});var g3t=s(Zue);RUo=r(g3t,"model_type"),g3t.forEach(t),PUo=r(XA,` property of the config object (either
passed as an argument or loaded from `),e_e=n(XA,"CODE",{});var h3t=s(e_e);BUo=r(h3t,"pretrained_model_name_or_path"),h3t.forEach(t),IUo=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=n(XA,"CODE",{});var p3t=s(o_e);NUo=r(p3t,"pretrained_model_name_or_path"),p3t.forEach(t),qUo=r(XA,":"),XA.forEach(t),jUo=i(ga),V=n(ga,"UL",{});var z=s(V);Wv=n(z,"LI",{});var TRe=s(Wv);r_e=n(TRe,"STRONG",{});var u3t=s(r_e);DUo=r(u3t,"albert"),u3t.forEach(t),GUo=r(TRe," \u2014 "),sz=n(TRe,"A",{href:!0});var _3t=s(sz);OUo=r(_3t,"AlbertForQuestionAnswering"),_3t.forEach(t),VUo=r(TRe," (ALBERT model)"),TRe.forEach(t),XUo=i(z),Qv=n(z,"LI",{});var MRe=s(Qv);t_e=n(MRe,"STRONG",{});var b3t=s(t_e);zUo=r(b3t,"bart"),b3t.forEach(t),WUo=r(MRe," \u2014 "),lz=n(MRe,"A",{href:!0});var v3t=s(lz);QUo=r(v3t,"BartForQuestionAnswering"),v3t.forEach(t),HUo=r(MRe," (BART model)"),MRe.forEach(t),UUo=i(z),Hv=n(z,"LI",{});var ERe=s(Hv);a_e=n(ERe,"STRONG",{});var F3t=s(a_e);JUo=r(F3t,"bert"),F3t.forEach(t),YUo=r(ERe," \u2014 "),iz=n(ERe,"A",{href:!0});var T3t=s(iz);KUo=r(T3t,"BertForQuestionAnswering"),T3t.forEach(t),ZUo=r(ERe," (BERT model)"),ERe.forEach(t),eJo=i(z),Uv=n(z,"LI",{});var CRe=s(Uv);n_e=n(CRe,"STRONG",{});var M3t=s(n_e);oJo=r(M3t,"big_bird"),M3t.forEach(t),rJo=r(CRe," \u2014 "),dz=n(CRe,"A",{href:!0});var E3t=s(dz);tJo=r(E3t,"BigBirdForQuestionAnswering"),E3t.forEach(t),aJo=r(CRe," (BigBird model)"),CRe.forEach(t),nJo=i(z),Jv=n(z,"LI",{});var wRe=s(Jv);s_e=n(wRe,"STRONG",{});var C3t=s(s_e);sJo=r(C3t,"bigbird_pegasus"),C3t.forEach(t),lJo=r(wRe," \u2014 "),cz=n(wRe,"A",{href:!0});var w3t=s(cz);iJo=r(w3t,"BigBirdPegasusForQuestionAnswering"),w3t.forEach(t),dJo=r(wRe," (BigBird-Pegasus model)"),wRe.forEach(t),cJo=i(z),Yv=n(z,"LI",{});var ARe=s(Yv);l_e=n(ARe,"STRONG",{});var A3t=s(l_e);fJo=r(A3t,"camembert"),A3t.forEach(t),mJo=r(ARe," \u2014 "),fz=n(ARe,"A",{href:!0});var L3t=s(fz);gJo=r(L3t,"CamembertForQuestionAnswering"),L3t.forEach(t),hJo=r(ARe," (CamemBERT model)"),ARe.forEach(t),pJo=i(z),Kv=n(z,"LI",{});var LRe=s(Kv);i_e=n(LRe,"STRONG",{});var y3t=s(i_e);uJo=r(y3t,"canine"),y3t.forEach(t),_Jo=r(LRe," \u2014 "),mz=n(LRe,"A",{href:!0});var x3t=s(mz);bJo=r(x3t,"CanineForQuestionAnswering"),x3t.forEach(t),vJo=r(LRe," (CANINE model)"),LRe.forEach(t),FJo=i(z),Zv=n(z,"LI",{});var yRe=s(Zv);d_e=n(yRe,"STRONG",{});var $3t=s(d_e);TJo=r($3t,"convbert"),$3t.forEach(t),MJo=r(yRe," \u2014 "),gz=n(yRe,"A",{href:!0});var k3t=s(gz);EJo=r(k3t,"ConvBertForQuestionAnswering"),k3t.forEach(t),CJo=r(yRe," (ConvBERT model)"),yRe.forEach(t),wJo=i(z),e3=n(z,"LI",{});var xRe=s(e3);c_e=n(xRe,"STRONG",{});var S3t=s(c_e);AJo=r(S3t,"data2vec-text"),S3t.forEach(t),LJo=r(xRe," \u2014 "),hz=n(xRe,"A",{href:!0});var R3t=s(hz);yJo=r(R3t,"Data2VecTextForQuestionAnswering"),R3t.forEach(t),xJo=r(xRe," (Data2VecText model)"),xRe.forEach(t),$Jo=i(z),o3=n(z,"LI",{});var $Re=s(o3);f_e=n($Re,"STRONG",{});var P3t=s(f_e);kJo=r(P3t,"deberta"),P3t.forEach(t),SJo=r($Re," \u2014 "),pz=n($Re,"A",{href:!0});var B3t=s(pz);RJo=r(B3t,"DebertaForQuestionAnswering"),B3t.forEach(t),PJo=r($Re," (DeBERTa model)"),$Re.forEach(t),BJo=i(z),r3=n(z,"LI",{});var kRe=s(r3);m_e=n(kRe,"STRONG",{});var I3t=s(m_e);IJo=r(I3t,"deberta-v2"),I3t.forEach(t),NJo=r(kRe," \u2014 "),uz=n(kRe,"A",{href:!0});var N3t=s(uz);qJo=r(N3t,"DebertaV2ForQuestionAnswering"),N3t.forEach(t),jJo=r(kRe," (DeBERTa-v2 model)"),kRe.forEach(t),DJo=i(z),t3=n(z,"LI",{});var SRe=s(t3);g_e=n(SRe,"STRONG",{});var q3t=s(g_e);GJo=r(q3t,"distilbert"),q3t.forEach(t),OJo=r(SRe," \u2014 "),_z=n(SRe,"A",{href:!0});var j3t=s(_z);VJo=r(j3t,"DistilBertForQuestionAnswering"),j3t.forEach(t),XJo=r(SRe," (DistilBERT model)"),SRe.forEach(t),zJo=i(z),a3=n(z,"LI",{});var RRe=s(a3);h_e=n(RRe,"STRONG",{});var D3t=s(h_e);WJo=r(D3t,"electra"),D3t.forEach(t),QJo=r(RRe," \u2014 "),bz=n(RRe,"A",{href:!0});var G3t=s(bz);HJo=r(G3t,"ElectraForQuestionAnswering"),G3t.forEach(t),UJo=r(RRe," (ELECTRA model)"),RRe.forEach(t),JJo=i(z),n3=n(z,"LI",{});var PRe=s(n3);p_e=n(PRe,"STRONG",{});var O3t=s(p_e);YJo=r(O3t,"flaubert"),O3t.forEach(t),KJo=r(PRe," \u2014 "),vz=n(PRe,"A",{href:!0});var V3t=s(vz);ZJo=r(V3t,"FlaubertForQuestionAnsweringSimple"),V3t.forEach(t),eYo=r(PRe," (FlauBERT model)"),PRe.forEach(t),oYo=i(z),s3=n(z,"LI",{});var BRe=s(s3);u_e=n(BRe,"STRONG",{});var X3t=s(u_e);rYo=r(X3t,"fnet"),X3t.forEach(t),tYo=r(BRe," \u2014 "),Fz=n(BRe,"A",{href:!0});var z3t=s(Fz);aYo=r(z3t,"FNetForQuestionAnswering"),z3t.forEach(t),nYo=r(BRe," (FNet model)"),BRe.forEach(t),sYo=i(z),l3=n(z,"LI",{});var IRe=s(l3);__e=n(IRe,"STRONG",{});var W3t=s(__e);lYo=r(W3t,"funnel"),W3t.forEach(t),iYo=r(IRe," \u2014 "),Tz=n(IRe,"A",{href:!0});var Q3t=s(Tz);dYo=r(Q3t,"FunnelForQuestionAnswering"),Q3t.forEach(t),cYo=r(IRe," (Funnel Transformer model)"),IRe.forEach(t),fYo=i(z),i3=n(z,"LI",{});var NRe=s(i3);b_e=n(NRe,"STRONG",{});var H3t=s(b_e);mYo=r(H3t,"gptj"),H3t.forEach(t),gYo=r(NRe," \u2014 "),Mz=n(NRe,"A",{href:!0});var U3t=s(Mz);hYo=r(U3t,"GPTJForQuestionAnswering"),U3t.forEach(t),pYo=r(NRe," (GPT-J model)"),NRe.forEach(t),uYo=i(z),d3=n(z,"LI",{});var qRe=s(d3);v_e=n(qRe,"STRONG",{});var J3t=s(v_e);_Yo=r(J3t,"ibert"),J3t.forEach(t),bYo=r(qRe," \u2014 "),Ez=n(qRe,"A",{href:!0});var Y3t=s(Ez);vYo=r(Y3t,"IBertForQuestionAnswering"),Y3t.forEach(t),FYo=r(qRe," (I-BERT model)"),qRe.forEach(t),TYo=i(z),c3=n(z,"LI",{});var jRe=s(c3);F_e=n(jRe,"STRONG",{});var K3t=s(F_e);MYo=r(K3t,"layoutlmv2"),K3t.forEach(t),EYo=r(jRe," \u2014 "),Cz=n(jRe,"A",{href:!0});var Z3t=s(Cz);CYo=r(Z3t,"LayoutLMv2ForQuestionAnswering"),Z3t.forEach(t),wYo=r(jRe," (LayoutLMv2 model)"),jRe.forEach(t),AYo=i(z),f3=n(z,"LI",{});var DRe=s(f3);T_e=n(DRe,"STRONG",{});var eFt=s(T_e);LYo=r(eFt,"layoutlmv3"),eFt.forEach(t),yYo=r(DRe," \u2014 "),wz=n(DRe,"A",{href:!0});var oFt=s(wz);xYo=r(oFt,"LayoutLMv3ForQuestionAnswering"),oFt.forEach(t),$Yo=r(DRe," (LayoutLMv3 model)"),DRe.forEach(t),kYo=i(z),m3=n(z,"LI",{});var GRe=s(m3);M_e=n(GRe,"STRONG",{});var rFt=s(M_e);SYo=r(rFt,"led"),rFt.forEach(t),RYo=r(GRe," \u2014 "),Az=n(GRe,"A",{href:!0});var tFt=s(Az);PYo=r(tFt,"LEDForQuestionAnswering"),tFt.forEach(t),BYo=r(GRe," (LED model)"),GRe.forEach(t),IYo=i(z),g3=n(z,"LI",{});var ORe=s(g3);E_e=n(ORe,"STRONG",{});var aFt=s(E_e);NYo=r(aFt,"longformer"),aFt.forEach(t),qYo=r(ORe," \u2014 "),Lz=n(ORe,"A",{href:!0});var nFt=s(Lz);jYo=r(nFt,"LongformerForQuestionAnswering"),nFt.forEach(t),DYo=r(ORe," (Longformer model)"),ORe.forEach(t),GYo=i(z),h3=n(z,"LI",{});var VRe=s(h3);C_e=n(VRe,"STRONG",{});var sFt=s(C_e);OYo=r(sFt,"lxmert"),sFt.forEach(t),VYo=r(VRe," \u2014 "),yz=n(VRe,"A",{href:!0});var lFt=s(yz);XYo=r(lFt,"LxmertForQuestionAnswering"),lFt.forEach(t),zYo=r(VRe," (LXMERT model)"),VRe.forEach(t),WYo=i(z),p3=n(z,"LI",{});var XRe=s(p3);w_e=n(XRe,"STRONG",{});var iFt=s(w_e);QYo=r(iFt,"mbart"),iFt.forEach(t),HYo=r(XRe," \u2014 "),xz=n(XRe,"A",{href:!0});var dFt=s(xz);UYo=r(dFt,"MBartForQuestionAnswering"),dFt.forEach(t),JYo=r(XRe," (mBART model)"),XRe.forEach(t),YYo=i(z),u3=n(z,"LI",{});var zRe=s(u3);A_e=n(zRe,"STRONG",{});var cFt=s(A_e);KYo=r(cFt,"megatron-bert"),cFt.forEach(t),ZYo=r(zRe," \u2014 "),$z=n(zRe,"A",{href:!0});var fFt=s($z);eKo=r(fFt,"MegatronBertForQuestionAnswering"),fFt.forEach(t),oKo=r(zRe," (Megatron-BERT model)"),zRe.forEach(t),rKo=i(z),_3=n(z,"LI",{});var WRe=s(_3);L_e=n(WRe,"STRONG",{});var mFt=s(L_e);tKo=r(mFt,"mobilebert"),mFt.forEach(t),aKo=r(WRe," \u2014 "),kz=n(WRe,"A",{href:!0});var gFt=s(kz);nKo=r(gFt,"MobileBertForQuestionAnswering"),gFt.forEach(t),sKo=r(WRe," (MobileBERT model)"),WRe.forEach(t),lKo=i(z),b3=n(z,"LI",{});var QRe=s(b3);y_e=n(QRe,"STRONG",{});var hFt=s(y_e);iKo=r(hFt,"mpnet"),hFt.forEach(t),dKo=r(QRe," \u2014 "),Sz=n(QRe,"A",{href:!0});var pFt=s(Sz);cKo=r(pFt,"MPNetForQuestionAnswering"),pFt.forEach(t),fKo=r(QRe," (MPNet model)"),QRe.forEach(t),mKo=i(z),v3=n(z,"LI",{});var HRe=s(v3);x_e=n(HRe,"STRONG",{});var uFt=s(x_e);gKo=r(uFt,"nystromformer"),uFt.forEach(t),hKo=r(HRe," \u2014 "),Rz=n(HRe,"A",{href:!0});var _Ft=s(Rz);pKo=r(_Ft,"NystromformerForQuestionAnswering"),_Ft.forEach(t),uKo=r(HRe," (Nystr\xF6mformer model)"),HRe.forEach(t),_Ko=i(z),F3=n(z,"LI",{});var URe=s(F3);$_e=n(URe,"STRONG",{});var bFt=s($_e);bKo=r(bFt,"qdqbert"),bFt.forEach(t),vKo=r(URe," \u2014 "),Pz=n(URe,"A",{href:!0});var vFt=s(Pz);FKo=r(vFt,"QDQBertForQuestionAnswering"),vFt.forEach(t),TKo=r(URe," (QDQBert model)"),URe.forEach(t),MKo=i(z),T3=n(z,"LI",{});var JRe=s(T3);k_e=n(JRe,"STRONG",{});var FFt=s(k_e);EKo=r(FFt,"reformer"),FFt.forEach(t),CKo=r(JRe," \u2014 "),Bz=n(JRe,"A",{href:!0});var TFt=s(Bz);wKo=r(TFt,"ReformerForQuestionAnswering"),TFt.forEach(t),AKo=r(JRe," (Reformer model)"),JRe.forEach(t),LKo=i(z),M3=n(z,"LI",{});var YRe=s(M3);S_e=n(YRe,"STRONG",{});var MFt=s(S_e);yKo=r(MFt,"rembert"),MFt.forEach(t),xKo=r(YRe," \u2014 "),Iz=n(YRe,"A",{href:!0});var EFt=s(Iz);$Ko=r(EFt,"RemBertForQuestionAnswering"),EFt.forEach(t),kKo=r(YRe," (RemBERT model)"),YRe.forEach(t),SKo=i(z),E3=n(z,"LI",{});var KRe=s(E3);R_e=n(KRe,"STRONG",{});var CFt=s(R_e);RKo=r(CFt,"roberta"),CFt.forEach(t),PKo=r(KRe," \u2014 "),Nz=n(KRe,"A",{href:!0});var wFt=s(Nz);BKo=r(wFt,"RobertaForQuestionAnswering"),wFt.forEach(t),IKo=r(KRe," (RoBERTa model)"),KRe.forEach(t),NKo=i(z),C3=n(z,"LI",{});var ZRe=s(C3);P_e=n(ZRe,"STRONG",{});var AFt=s(P_e);qKo=r(AFt,"roformer"),AFt.forEach(t),jKo=r(ZRe," \u2014 "),qz=n(ZRe,"A",{href:!0});var LFt=s(qz);DKo=r(LFt,"RoFormerForQuestionAnswering"),LFt.forEach(t),GKo=r(ZRe," (RoFormer model)"),ZRe.forEach(t),OKo=i(z),w3=n(z,"LI",{});var ePe=s(w3);B_e=n(ePe,"STRONG",{});var yFt=s(B_e);VKo=r(yFt,"splinter"),yFt.forEach(t),XKo=r(ePe," \u2014 "),jz=n(ePe,"A",{href:!0});var xFt=s(jz);zKo=r(xFt,"SplinterForQuestionAnswering"),xFt.forEach(t),WKo=r(ePe," (Splinter model)"),ePe.forEach(t),QKo=i(z),A3=n(z,"LI",{});var oPe=s(A3);I_e=n(oPe,"STRONG",{});var $Ft=s(I_e);HKo=r($Ft,"squeezebert"),$Ft.forEach(t),UKo=r(oPe," \u2014 "),Dz=n(oPe,"A",{href:!0});var kFt=s(Dz);JKo=r(kFt,"SqueezeBertForQuestionAnswering"),kFt.forEach(t),YKo=r(oPe," (SqueezeBERT model)"),oPe.forEach(t),KKo=i(z),L3=n(z,"LI",{});var rPe=s(L3);N_e=n(rPe,"STRONG",{});var SFt=s(N_e);ZKo=r(SFt,"xlm"),SFt.forEach(t),eZo=r(rPe," \u2014 "),Gz=n(rPe,"A",{href:!0});var RFt=s(Gz);oZo=r(RFt,"XLMForQuestionAnsweringSimple"),RFt.forEach(t),rZo=r(rPe," (XLM model)"),rPe.forEach(t),tZo=i(z),y3=n(z,"LI",{});var tPe=s(y3);q_e=n(tPe,"STRONG",{});var PFt=s(q_e);aZo=r(PFt,"xlm-roberta"),PFt.forEach(t),nZo=r(tPe," \u2014 "),Oz=n(tPe,"A",{href:!0});var BFt=s(Oz);sZo=r(BFt,"XLMRobertaForQuestionAnswering"),BFt.forEach(t),lZo=r(tPe," (XLM-RoBERTa model)"),tPe.forEach(t),iZo=i(z),x3=n(z,"LI",{});var aPe=s(x3);j_e=n(aPe,"STRONG",{});var IFt=s(j_e);dZo=r(IFt,"xlm-roberta-xl"),IFt.forEach(t),cZo=r(aPe," \u2014 "),Vz=n(aPe,"A",{href:!0});var NFt=s(Vz);fZo=r(NFt,"XLMRobertaXLForQuestionAnswering"),NFt.forEach(t),mZo=r(aPe," (XLM-RoBERTa-XL model)"),aPe.forEach(t),gZo=i(z),$3=n(z,"LI",{});var nPe=s($3);D_e=n(nPe,"STRONG",{});var qFt=s(D_e);hZo=r(qFt,"xlnet"),qFt.forEach(t),pZo=r(nPe," \u2014 "),Xz=n(nPe,"A",{href:!0});var jFt=s(Xz);uZo=r(jFt,"XLNetForQuestionAnsweringSimple"),jFt.forEach(t),_Zo=r(nPe," (XLNet model)"),nPe.forEach(t),bZo=i(z),k3=n(z,"LI",{});var sPe=s(k3);G_e=n(sPe,"STRONG",{});var DFt=s(G_e);vZo=r(DFt,"yoso"),DFt.forEach(t),FZo=r(sPe," \u2014 "),zz=n(sPe,"A",{href:!0});var GFt=s(zz);TZo=r(GFt,"YosoForQuestionAnswering"),GFt.forEach(t),MZo=r(sPe," (YOSO model)"),sPe.forEach(t),z.forEach(t),EZo=i(ga),S3=n(ga,"P",{});var lPe=s(S3);CZo=r(lPe,"The model is set in evaluation mode by default using "),O_e=n(lPe,"CODE",{});var OFt=s(O_e);wZo=r(OFt,"model.eval()"),OFt.forEach(t),AZo=r(lPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V_e=n(lPe,"CODE",{});var VFt=s(V_e);LZo=r(VFt,"model.train()"),VFt.forEach(t),lPe.forEach(t),yZo=i(ga),T(R3.$$.fragment,ga),ga.forEach(t),sl.forEach(t),HGe=i(f),fd=n(f,"H2",{class:!0});var eXe=s(fd);P3=n(eXe,"A",{id:!0,class:!0,href:!0});var XFt=s(P3);X_e=n(XFt,"SPAN",{});var zFt=s(X_e);T(zy.$$.fragment,zFt),zFt.forEach(t),XFt.forEach(t),xZo=i(eXe),z_e=n(eXe,"SPAN",{});var WFt=s(z_e);$Zo=r(WFt,"AutoModelForTableQuestionAnswering"),WFt.forEach(t),eXe.forEach(t),UGe=i(f),jo=n(f,"DIV",{class:!0});var ll=s(jo);T(Wy.$$.fragment,ll),kZo=i(ll),md=n(ll,"P",{});var Loe=s(md);SZo=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Wz=n(Loe,"A",{href:!0});var QFt=s(Wz);RZo=r(QFt,"from_pretrained()"),QFt.forEach(t),PZo=r(Loe," class method or the "),Qz=n(Loe,"A",{href:!0});var HFt=s(Qz);BZo=r(HFt,"from_config()"),HFt.forEach(t),IZo=r(Loe,` class
method.`),Loe.forEach(t),NZo=i(ll),Qy=n(ll,"P",{});var oXe=s(Qy);qZo=r(oXe,"This class cannot be instantiated directly using "),W_e=n(oXe,"CODE",{});var UFt=s(W_e);jZo=r(UFt,"__init__()"),UFt.forEach(t),DZo=r(oXe," (throws an error)."),oXe.forEach(t),GZo=i(ll),pt=n(ll,"DIV",{class:!0});var zA=s(pt);T(Hy.$$.fragment,zA),OZo=i(zA),Q_e=n(zA,"P",{});var JFt=s(Q_e);VZo=r(JFt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),JFt.forEach(t),XZo=i(zA),gd=n(zA,"P",{});var yoe=s(gd);zZo=r(yoe,`Note:
Loading a model from its configuration file does `),H_e=n(yoe,"STRONG",{});var YFt=s(H_e);WZo=r(YFt,"not"),YFt.forEach(t),QZo=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=n(yoe,"A",{href:!0});var KFt=s(Hz);HZo=r(KFt,"from_pretrained()"),KFt.forEach(t),UZo=r(yoe," to load the model weights."),yoe.forEach(t),JZo=i(zA),T(B3.$$.fragment,zA),zA.forEach(t),YZo=i(ll),so=n(ll,"DIV",{class:!0});var ha=s(so);T(Uy.$$.fragment,ha),KZo=i(ha),U_e=n(ha,"P",{});var ZFt=s(U_e);ZZo=r(ZFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ZFt.forEach(t),eer=i(ha),Oa=n(ha,"P",{});var WA=s(Oa);oer=r(WA,"The model class to instantiate is selected based on the "),J_e=n(WA,"CODE",{});var eTt=s(J_e);rer=r(eTt,"model_type"),eTt.forEach(t),ter=r(WA,` property of the config object (either
passed as an argument or loaded from `),Y_e=n(WA,"CODE",{});var oTt=s(Y_e);aer=r(oTt,"pretrained_model_name_or_path"),oTt.forEach(t),ner=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=n(WA,"CODE",{});var rTt=s(K_e);ser=r(rTt,"pretrained_model_name_or_path"),rTt.forEach(t),ler=r(WA,":"),WA.forEach(t),ier=i(ha),Z_e=n(ha,"UL",{});var tTt=s(Z_e);I3=n(tTt,"LI",{});var iPe=s(I3);e4e=n(iPe,"STRONG",{});var aTt=s(e4e);der=r(aTt,"tapas"),aTt.forEach(t),cer=r(iPe," \u2014 "),Uz=n(iPe,"A",{href:!0});var nTt=s(Uz);fer=r(nTt,"TapasForQuestionAnswering"),nTt.forEach(t),mer=r(iPe," (TAPAS model)"),iPe.forEach(t),tTt.forEach(t),ger=i(ha),N3=n(ha,"P",{});var dPe=s(N3);her=r(dPe,"The model is set in evaluation mode by default using "),o4e=n(dPe,"CODE",{});var sTt=s(o4e);per=r(sTt,"model.eval()"),sTt.forEach(t),uer=r(dPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r4e=n(dPe,"CODE",{});var lTt=s(r4e);_er=r(lTt,"model.train()"),lTt.forEach(t),dPe.forEach(t),ber=i(ha),T(q3.$$.fragment,ha),ha.forEach(t),ll.forEach(t),JGe=i(f),hd=n(f,"H2",{class:!0});var rXe=s(hd);j3=n(rXe,"A",{id:!0,class:!0,href:!0});var iTt=s(j3);t4e=n(iTt,"SPAN",{});var dTt=s(t4e);T(Jy.$$.fragment,dTt),dTt.forEach(t),iTt.forEach(t),ver=i(rXe),a4e=n(rXe,"SPAN",{});var cTt=s(a4e);Fer=r(cTt,"AutoModelForImageClassification"),cTt.forEach(t),rXe.forEach(t),YGe=i(f),Do=n(f,"DIV",{class:!0});var il=s(Do);T(Yy.$$.fragment,il),Ter=i(il),pd=n(il,"P",{});var xoe=s(pd);Mer=r(xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Jz=n(xoe,"A",{href:!0});var fTt=s(Jz);Eer=r(fTt,"from_pretrained()"),fTt.forEach(t),Cer=r(xoe," class method or the "),Yz=n(xoe,"A",{href:!0});var mTt=s(Yz);wer=r(mTt,"from_config()"),mTt.forEach(t),Aer=r(xoe,` class
method.`),xoe.forEach(t),Ler=i(il),Ky=n(il,"P",{});var tXe=s(Ky);yer=r(tXe,"This class cannot be instantiated directly using "),n4e=n(tXe,"CODE",{});var gTt=s(n4e);xer=r(gTt,"__init__()"),gTt.forEach(t),$er=r(tXe," (throws an error)."),tXe.forEach(t),ker=i(il),ut=n(il,"DIV",{class:!0});var QA=s(ut);T(Zy.$$.fragment,QA),Ser=i(QA),s4e=n(QA,"P",{});var hTt=s(s4e);Rer=r(hTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hTt.forEach(t),Per=i(QA),ud=n(QA,"P",{});var $oe=s(ud);Ber=r($oe,`Note:
Loading a model from its configuration file does `),l4e=n($oe,"STRONG",{});var pTt=s(l4e);Ier=r(pTt,"not"),pTt.forEach(t),Ner=r($oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=n($oe,"A",{href:!0});var uTt=s(Kz);qer=r(uTt,"from_pretrained()"),uTt.forEach(t),jer=r($oe," to load the model weights."),$oe.forEach(t),Der=i(QA),T(D3.$$.fragment,QA),QA.forEach(t),Ger=i(il),lo=n(il,"DIV",{class:!0});var pa=s(lo);T(e8.$$.fragment,pa),Oer=i(pa),i4e=n(pa,"P",{});var _Tt=s(i4e);Ver=r(_Tt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_Tt.forEach(t),Xer=i(pa),Va=n(pa,"P",{});var HA=s(Va);zer=r(HA,"The model class to instantiate is selected based on the "),d4e=n(HA,"CODE",{});var bTt=s(d4e);Wer=r(bTt,"model_type"),bTt.forEach(t),Qer=r(HA,` property of the config object (either
passed as an argument or loaded from `),c4e=n(HA,"CODE",{});var vTt=s(c4e);Her=r(vTt,"pretrained_model_name_or_path"),vTt.forEach(t),Uer=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=n(HA,"CODE",{});var FTt=s(f4e);Jer=r(FTt,"pretrained_model_name_or_path"),FTt.forEach(t),Yer=r(HA,":"),HA.forEach(t),Ker=i(pa),Fe=n(pa,"UL",{});var Te=s(Fe);G3=n(Te,"LI",{});var cPe=s(G3);m4e=n(cPe,"STRONG",{});var TTt=s(m4e);Zer=r(TTt,"beit"),TTt.forEach(t),eor=r(cPe," \u2014 "),Zz=n(cPe,"A",{href:!0});var MTt=s(Zz);oor=r(MTt,"BeitForImageClassification"),MTt.forEach(t),ror=r(cPe," (BEiT model)"),cPe.forEach(t),tor=i(Te),O3=n(Te,"LI",{});var fPe=s(O3);g4e=n(fPe,"STRONG",{});var ETt=s(g4e);aor=r(ETt,"convnext"),ETt.forEach(t),nor=r(fPe," \u2014 "),eW=n(fPe,"A",{href:!0});var CTt=s(eW);sor=r(CTt,"ConvNextForImageClassification"),CTt.forEach(t),lor=r(fPe," (ConvNeXT model)"),fPe.forEach(t),ior=i(Te),V3=n(Te,"LI",{});var mPe=s(V3);h4e=n(mPe,"STRONG",{});var wTt=s(h4e);dor=r(wTt,"cvt"),wTt.forEach(t),cor=r(mPe," \u2014 "),oW=n(mPe,"A",{href:!0});var ATt=s(oW);mor=r(ATt,"CvtForImageClassification"),ATt.forEach(t),gor=r(mPe," (CvT model)"),mPe.forEach(t),hor=i(Te),X3=n(Te,"LI",{});var gPe=s(X3);p4e=n(gPe,"STRONG",{});var LTt=s(p4e);por=r(LTt,"data2vec-vision"),LTt.forEach(t),uor=r(gPe," \u2014 "),rW=n(gPe,"A",{href:!0});var yTt=s(rW);_or=r(yTt,"Data2VecVisionForImageClassification"),yTt.forEach(t),bor=r(gPe," (Data2VecVision model)"),gPe.forEach(t),vor=i(Te),Vs=n(Te,"LI",{});var Qk=s(Vs);u4e=n(Qk,"STRONG",{});var xTt=s(u4e);For=r(xTt,"deit"),xTt.forEach(t),Tor=r(Qk," \u2014 "),tW=n(Qk,"A",{href:!0});var $Tt=s(tW);Mor=r($Tt,"DeiTForImageClassification"),$Tt.forEach(t),Eor=r(Qk," or "),aW=n(Qk,"A",{href:!0});var kTt=s(aW);Cor=r(kTt,"DeiTForImageClassificationWithTeacher"),kTt.forEach(t),wor=r(Qk," (DeiT model)"),Qk.forEach(t),Aor=i(Te),z3=n(Te,"LI",{});var hPe=s(z3);_4e=n(hPe,"STRONG",{});var STt=s(_4e);Lor=r(STt,"imagegpt"),STt.forEach(t),yor=r(hPe," \u2014 "),nW=n(hPe,"A",{href:!0});var RTt=s(nW);xor=r(RTt,"ImageGPTForImageClassification"),RTt.forEach(t),$or=r(hPe," (ImageGPT model)"),hPe.forEach(t),kor=i(Te),Xs=n(Te,"LI",{});var Hk=s(Xs);b4e=n(Hk,"STRONG",{});var PTt=s(b4e);Sor=r(PTt,"levit"),PTt.forEach(t),Ror=r(Hk," \u2014 "),sW=n(Hk,"A",{href:!0});var BTt=s(sW);Por=r(BTt,"LevitForImageClassification"),BTt.forEach(t),Bor=r(Hk," or "),lW=n(Hk,"A",{href:!0});var ITt=s(lW);Ior=r(ITt,"LevitForImageClassificationWithTeacher"),ITt.forEach(t),Nor=r(Hk," (LeViT model)"),Hk.forEach(t),qor=i(Te),_t=n(Te,"LI",{});var Lf=s(_t);v4e=n(Lf,"STRONG",{});var NTt=s(v4e);jor=r(NTt,"perceiver"),NTt.forEach(t),Dor=r(Lf," \u2014 "),iW=n(Lf,"A",{href:!0});var qTt=s(iW);Gor=r(qTt,"PerceiverForImageClassificationLearned"),qTt.forEach(t),Oor=r(Lf," or "),dW=n(Lf,"A",{href:!0});var jTt=s(dW);Vor=r(jTt,"PerceiverForImageClassificationFourier"),jTt.forEach(t),Xor=r(Lf," or "),cW=n(Lf,"A",{href:!0});var DTt=s(cW);zor=r(DTt,"PerceiverForImageClassificationConvProcessing"),DTt.forEach(t),Wor=r(Lf," (Perceiver model)"),Lf.forEach(t),Qor=i(Te),W3=n(Te,"LI",{});var pPe=s(W3);F4e=n(pPe,"STRONG",{});var GTt=s(F4e);Hor=r(GTt,"poolformer"),GTt.forEach(t),Uor=r(pPe," \u2014 "),fW=n(pPe,"A",{href:!0});var OTt=s(fW);Jor=r(OTt,"PoolFormerForImageClassification"),OTt.forEach(t),Yor=r(pPe," (PoolFormer model)"),pPe.forEach(t),Kor=i(Te),Q3=n(Te,"LI",{});var uPe=s(Q3);T4e=n(uPe,"STRONG",{});var VTt=s(T4e);Zor=r(VTt,"regnet"),VTt.forEach(t),err=r(uPe," \u2014 "),mW=n(uPe,"A",{href:!0});var XTt=s(mW);orr=r(XTt,"RegNetForImageClassification"),XTt.forEach(t),rrr=r(uPe," (RegNet model)"),uPe.forEach(t),trr=i(Te),H3=n(Te,"LI",{});var _Pe=s(H3);M4e=n(_Pe,"STRONG",{});var zTt=s(M4e);arr=r(zTt,"resnet"),zTt.forEach(t),nrr=r(_Pe," \u2014 "),gW=n(_Pe,"A",{href:!0});var WTt=s(gW);srr=r(WTt,"ResNetForImageClassification"),WTt.forEach(t),lrr=r(_Pe," (ResNet model)"),_Pe.forEach(t),irr=i(Te),U3=n(Te,"LI",{});var bPe=s(U3);E4e=n(bPe,"STRONG",{});var QTt=s(E4e);drr=r(QTt,"segformer"),QTt.forEach(t),crr=r(bPe," \u2014 "),hW=n(bPe,"A",{href:!0});var HTt=s(hW);frr=r(HTt,"SegformerForImageClassification"),HTt.forEach(t),mrr=r(bPe," (SegFormer model)"),bPe.forEach(t),grr=i(Te),J3=n(Te,"LI",{});var vPe=s(J3);C4e=n(vPe,"STRONG",{});var UTt=s(C4e);hrr=r(UTt,"swin"),UTt.forEach(t),prr=r(vPe," \u2014 "),pW=n(vPe,"A",{href:!0});var JTt=s(pW);urr=r(JTt,"SwinForImageClassification"),JTt.forEach(t),_rr=r(vPe," (Swin Transformer model)"),vPe.forEach(t),brr=i(Te),Y3=n(Te,"LI",{});var FPe=s(Y3);w4e=n(FPe,"STRONG",{});var YTt=s(w4e);vrr=r(YTt,"van"),YTt.forEach(t),Frr=r(FPe," \u2014 "),uW=n(FPe,"A",{href:!0});var KTt=s(uW);Trr=r(KTt,"VanForImageClassification"),KTt.forEach(t),Mrr=r(FPe," (VAN model)"),FPe.forEach(t),Err=i(Te),K3=n(Te,"LI",{});var TPe=s(K3);A4e=n(TPe,"STRONG",{});var ZTt=s(A4e);Crr=r(ZTt,"vit"),ZTt.forEach(t),wrr=r(TPe," \u2014 "),_W=n(TPe,"A",{href:!0});var e7t=s(_W);Arr=r(e7t,"ViTForImageClassification"),e7t.forEach(t),Lrr=r(TPe," (ViT model)"),TPe.forEach(t),Te.forEach(t),yrr=i(pa),Z3=n(pa,"P",{});var MPe=s(Z3);xrr=r(MPe,"The model is set in evaluation mode by default using "),L4e=n(MPe,"CODE",{});var o7t=s(L4e);$rr=r(o7t,"model.eval()"),o7t.forEach(t),krr=r(MPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y4e=n(MPe,"CODE",{});var r7t=s(y4e);Srr=r(r7t,"model.train()"),r7t.forEach(t),MPe.forEach(t),Rrr=i(pa),T(eF.$$.fragment,pa),pa.forEach(t),il.forEach(t),KGe=i(f),_d=n(f,"H2",{class:!0});var aXe=s(_d);oF=n(aXe,"A",{id:!0,class:!0,href:!0});var t7t=s(oF);x4e=n(t7t,"SPAN",{});var a7t=s(x4e);T(o8.$$.fragment,a7t),a7t.forEach(t),t7t.forEach(t),Prr=i(aXe),$4e=n(aXe,"SPAN",{});var n7t=s($4e);Brr=r(n7t,"AutoModelForVision2Seq"),n7t.forEach(t),aXe.forEach(t),ZGe=i(f),Go=n(f,"DIV",{class:!0});var dl=s(Go);T(r8.$$.fragment,dl),Irr=i(dl),bd=n(dl,"P",{});var koe=s(bd);Nrr=r(koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bW=n(koe,"A",{href:!0});var s7t=s(bW);qrr=r(s7t,"from_pretrained()"),s7t.forEach(t),jrr=r(koe," class method or the "),vW=n(koe,"A",{href:!0});var l7t=s(vW);Drr=r(l7t,"from_config()"),l7t.forEach(t),Grr=r(koe,` class
method.`),koe.forEach(t),Orr=i(dl),t8=n(dl,"P",{});var nXe=s(t8);Vrr=r(nXe,"This class cannot be instantiated directly using "),k4e=n(nXe,"CODE",{});var i7t=s(k4e);Xrr=r(i7t,"__init__()"),i7t.forEach(t),zrr=r(nXe," (throws an error)."),nXe.forEach(t),Wrr=i(dl),bt=n(dl,"DIV",{class:!0});var UA=s(bt);T(a8.$$.fragment,UA),Qrr=i(UA),S4e=n(UA,"P",{});var d7t=s(S4e);Hrr=r(d7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),d7t.forEach(t),Urr=i(UA),vd=n(UA,"P",{});var Soe=s(vd);Jrr=r(Soe,`Note:
Loading a model from its configuration file does `),R4e=n(Soe,"STRONG",{});var c7t=s(R4e);Yrr=r(c7t,"not"),c7t.forEach(t),Krr=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=n(Soe,"A",{href:!0});var f7t=s(FW);Zrr=r(f7t,"from_pretrained()"),f7t.forEach(t),etr=r(Soe," to load the model weights."),Soe.forEach(t),otr=i(UA),T(rF.$$.fragment,UA),UA.forEach(t),rtr=i(dl),io=n(dl,"DIV",{class:!0});var ua=s(io);T(n8.$$.fragment,ua),ttr=i(ua),P4e=n(ua,"P",{});var m7t=s(P4e);atr=r(m7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),m7t.forEach(t),ntr=i(ua),Xa=n(ua,"P",{});var JA=s(Xa);str=r(JA,"The model class to instantiate is selected based on the "),B4e=n(JA,"CODE",{});var g7t=s(B4e);ltr=r(g7t,"model_type"),g7t.forEach(t),itr=r(JA,` property of the config object (either
passed as an argument or loaded from `),I4e=n(JA,"CODE",{});var h7t=s(I4e);dtr=r(h7t,"pretrained_model_name_or_path"),h7t.forEach(t),ctr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=n(JA,"CODE",{});var p7t=s(N4e);ftr=r(p7t,"pretrained_model_name_or_path"),p7t.forEach(t),mtr=r(JA,":"),JA.forEach(t),gtr=i(ua),q4e=n(ua,"UL",{});var u7t=s(q4e);tF=n(u7t,"LI",{});var EPe=s(tF);j4e=n(EPe,"STRONG",{});var _7t=s(j4e);htr=r(_7t,"vision-encoder-decoder"),_7t.forEach(t),ptr=r(EPe," \u2014 "),TW=n(EPe,"A",{href:!0});var b7t=s(TW);utr=r(b7t,"VisionEncoderDecoderModel"),b7t.forEach(t),_tr=r(EPe," (Vision Encoder decoder model)"),EPe.forEach(t),u7t.forEach(t),btr=i(ua),aF=n(ua,"P",{});var CPe=s(aF);vtr=r(CPe,"The model is set in evaluation mode by default using "),D4e=n(CPe,"CODE",{});var v7t=s(D4e);Ftr=r(v7t,"model.eval()"),v7t.forEach(t),Ttr=r(CPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G4e=n(CPe,"CODE",{});var F7t=s(G4e);Mtr=r(F7t,"model.train()"),F7t.forEach(t),CPe.forEach(t),Etr=i(ua),T(nF.$$.fragment,ua),ua.forEach(t),dl.forEach(t),eOe=i(f),Fd=n(f,"H2",{class:!0});var sXe=s(Fd);sF=n(sXe,"A",{id:!0,class:!0,href:!0});var T7t=s(sF);O4e=n(T7t,"SPAN",{});var M7t=s(O4e);T(s8.$$.fragment,M7t),M7t.forEach(t),T7t.forEach(t),Ctr=i(sXe),V4e=n(sXe,"SPAN",{});var E7t=s(V4e);wtr=r(E7t,"AutoModelForVisualQuestionAnswering"),E7t.forEach(t),sXe.forEach(t),oOe=i(f),Oo=n(f,"DIV",{class:!0});var cl=s(Oo);T(l8.$$.fragment,cl),Atr=i(cl),Td=n(cl,"P",{});var Roe=s(Td);Ltr=r(Roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),MW=n(Roe,"A",{href:!0});var C7t=s(MW);ytr=r(C7t,"from_pretrained()"),C7t.forEach(t),xtr=r(Roe," class method or the "),EW=n(Roe,"A",{href:!0});var w7t=s(EW);$tr=r(w7t,"from_config()"),w7t.forEach(t),ktr=r(Roe,` class
method.`),Roe.forEach(t),Str=i(cl),i8=n(cl,"P",{});var lXe=s(i8);Rtr=r(lXe,"This class cannot be instantiated directly using "),X4e=n(lXe,"CODE",{});var A7t=s(X4e);Ptr=r(A7t,"__init__()"),A7t.forEach(t),Btr=r(lXe," (throws an error)."),lXe.forEach(t),Itr=i(cl),vt=n(cl,"DIV",{class:!0});var YA=s(vt);T(d8.$$.fragment,YA),Ntr=i(YA),z4e=n(YA,"P",{});var L7t=s(z4e);qtr=r(L7t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),L7t.forEach(t),jtr=i(YA),Md=n(YA,"P",{});var Poe=s(Md);Dtr=r(Poe,`Note:
Loading a model from its configuration file does `),W4e=n(Poe,"STRONG",{});var y7t=s(W4e);Gtr=r(y7t,"not"),y7t.forEach(t),Otr=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=n(Poe,"A",{href:!0});var x7t=s(CW);Vtr=r(x7t,"from_pretrained()"),x7t.forEach(t),Xtr=r(Poe," to load the model weights."),Poe.forEach(t),ztr=i(YA),T(lF.$$.fragment,YA),YA.forEach(t),Wtr=i(cl),co=n(cl,"DIV",{class:!0});var _a=s(co);T(c8.$$.fragment,_a),Qtr=i(_a),Q4e=n(_a,"P",{});var $7t=s(Q4e);Htr=r($7t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),$7t.forEach(t),Utr=i(_a),za=n(_a,"P",{});var KA=s(za);Jtr=r(KA,"The model class to instantiate is selected based on the "),H4e=n(KA,"CODE",{});var k7t=s(H4e);Ytr=r(k7t,"model_type"),k7t.forEach(t),Ktr=r(KA,` property of the config object (either
passed as an argument or loaded from `),U4e=n(KA,"CODE",{});var S7t=s(U4e);Ztr=r(S7t,"pretrained_model_name_or_path"),S7t.forEach(t),ear=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=n(KA,"CODE",{});var R7t=s(J4e);oar=r(R7t,"pretrained_model_name_or_path"),R7t.forEach(t),rar=r(KA,":"),KA.forEach(t),tar=i(_a),Y4e=n(_a,"UL",{});var P7t=s(Y4e);iF=n(P7t,"LI",{});var wPe=s(iF);K4e=n(wPe,"STRONG",{});var B7t=s(K4e);aar=r(B7t,"vilt"),B7t.forEach(t),nar=r(wPe," \u2014 "),wW=n(wPe,"A",{href:!0});var I7t=s(wW);sar=r(I7t,"ViltForQuestionAnswering"),I7t.forEach(t),lar=r(wPe," (ViLT model)"),wPe.forEach(t),P7t.forEach(t),iar=i(_a),dF=n(_a,"P",{});var APe=s(dF);dar=r(APe,"The model is set in evaluation mode by default using "),Z4e=n(APe,"CODE",{});var N7t=s(Z4e);car=r(N7t,"model.eval()"),N7t.forEach(t),far=r(APe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e1e=n(APe,"CODE",{});var q7t=s(e1e);mar=r(q7t,"model.train()"),q7t.forEach(t),APe.forEach(t),gar=i(_a),T(cF.$$.fragment,_a),_a.forEach(t),cl.forEach(t),rOe=i(f),Ed=n(f,"H2",{class:!0});var iXe=s(Ed);fF=n(iXe,"A",{id:!0,class:!0,href:!0});var j7t=s(fF);o1e=n(j7t,"SPAN",{});var D7t=s(o1e);T(f8.$$.fragment,D7t),D7t.forEach(t),j7t.forEach(t),har=i(iXe),r1e=n(iXe,"SPAN",{});var G7t=s(r1e);par=r(G7t,"AutoModelForAudioClassification"),G7t.forEach(t),iXe.forEach(t),tOe=i(f),Vo=n(f,"DIV",{class:!0});var fl=s(Vo);T(m8.$$.fragment,fl),uar=i(fl),Cd=n(fl,"P",{});var Boe=s(Cd);_ar=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),AW=n(Boe,"A",{href:!0});var O7t=s(AW);bar=r(O7t,"from_pretrained()"),O7t.forEach(t),Far=r(Boe," class method or the "),LW=n(Boe,"A",{href:!0});var V7t=s(LW);Tar=r(V7t,"from_config()"),V7t.forEach(t),Mar=r(Boe,` class
method.`),Boe.forEach(t),Ear=i(fl),g8=n(fl,"P",{});var dXe=s(g8);Car=r(dXe,"This class cannot be instantiated directly using "),t1e=n(dXe,"CODE",{});var X7t=s(t1e);war=r(X7t,"__init__()"),X7t.forEach(t),Aar=r(dXe," (throws an error)."),dXe.forEach(t),Lar=i(fl),Ft=n(fl,"DIV",{class:!0});var ZA=s(Ft);T(h8.$$.fragment,ZA),yar=i(ZA),a1e=n(ZA,"P",{});var z7t=s(a1e);xar=r(z7t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),z7t.forEach(t),$ar=i(ZA),wd=n(ZA,"P",{});var Ioe=s(wd);kar=r(Ioe,`Note:
Loading a model from its configuration file does `),n1e=n(Ioe,"STRONG",{});var W7t=s(n1e);Sar=r(W7t,"not"),W7t.forEach(t),Rar=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=n(Ioe,"A",{href:!0});var Q7t=s(yW);Par=r(Q7t,"from_pretrained()"),Q7t.forEach(t),Bar=r(Ioe," to load the model weights."),Ioe.forEach(t),Iar=i(ZA),T(mF.$$.fragment,ZA),ZA.forEach(t),Nar=i(fl),fo=n(fl,"DIV",{class:!0});var ba=s(fo);T(p8.$$.fragment,ba),qar=i(ba),s1e=n(ba,"P",{});var H7t=s(s1e);jar=r(H7t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),H7t.forEach(t),Dar=i(ba),Wa=n(ba,"P",{});var e6=s(Wa);Gar=r(e6,"The model class to instantiate is selected based on the "),l1e=n(e6,"CODE",{});var U7t=s(l1e);Oar=r(U7t,"model_type"),U7t.forEach(t),Var=r(e6,` property of the config object (either
passed as an argument or loaded from `),i1e=n(e6,"CODE",{});var J7t=s(i1e);Xar=r(J7t,"pretrained_model_name_or_path"),J7t.forEach(t),zar=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=n(e6,"CODE",{});var Y7t=s(d1e);War=r(Y7t,"pretrained_model_name_or_path"),Y7t.forEach(t),Qar=r(e6,":"),e6.forEach(t),Har=i(ba),Pe=n(ba,"UL",{});var ze=s(Pe);gF=n(ze,"LI",{});var LPe=s(gF);c1e=n(LPe,"STRONG",{});var K7t=s(c1e);Uar=r(K7t,"data2vec-audio"),K7t.forEach(t),Jar=r(LPe," \u2014 "),xW=n(LPe,"A",{href:!0});var Z7t=s(xW);Yar=r(Z7t,"Data2VecAudioForSequenceClassification"),Z7t.forEach(t),Kar=r(LPe," (Data2VecAudio model)"),LPe.forEach(t),Zar=i(ze),hF=n(ze,"LI",{});var yPe=s(hF);f1e=n(yPe,"STRONG",{});var eMt=s(f1e);enr=r(eMt,"hubert"),eMt.forEach(t),onr=r(yPe," \u2014 "),$W=n(yPe,"A",{href:!0});var oMt=s($W);rnr=r(oMt,"HubertForSequenceClassification"),oMt.forEach(t),tnr=r(yPe," (Hubert model)"),yPe.forEach(t),anr=i(ze),pF=n(ze,"LI",{});var xPe=s(pF);m1e=n(xPe,"STRONG",{});var rMt=s(m1e);nnr=r(rMt,"sew"),rMt.forEach(t),snr=r(xPe," \u2014 "),kW=n(xPe,"A",{href:!0});var tMt=s(kW);lnr=r(tMt,"SEWForSequenceClassification"),tMt.forEach(t),inr=r(xPe," (SEW model)"),xPe.forEach(t),dnr=i(ze),uF=n(ze,"LI",{});var $Pe=s(uF);g1e=n($Pe,"STRONG",{});var aMt=s(g1e);cnr=r(aMt,"sew-d"),aMt.forEach(t),fnr=r($Pe," \u2014 "),SW=n($Pe,"A",{href:!0});var nMt=s(SW);mnr=r(nMt,"SEWDForSequenceClassification"),nMt.forEach(t),gnr=r($Pe," (SEW-D model)"),$Pe.forEach(t),hnr=i(ze),_F=n(ze,"LI",{});var kPe=s(_F);h1e=n(kPe,"STRONG",{});var sMt=s(h1e);pnr=r(sMt,"unispeech"),sMt.forEach(t),unr=r(kPe," \u2014 "),RW=n(kPe,"A",{href:!0});var lMt=s(RW);_nr=r(lMt,"UniSpeechForSequenceClassification"),lMt.forEach(t),bnr=r(kPe," (UniSpeech model)"),kPe.forEach(t),vnr=i(ze),bF=n(ze,"LI",{});var SPe=s(bF);p1e=n(SPe,"STRONG",{});var iMt=s(p1e);Fnr=r(iMt,"unispeech-sat"),iMt.forEach(t),Tnr=r(SPe," \u2014 "),PW=n(SPe,"A",{href:!0});var dMt=s(PW);Mnr=r(dMt,"UniSpeechSatForSequenceClassification"),dMt.forEach(t),Enr=r(SPe," (UniSpeechSat model)"),SPe.forEach(t),Cnr=i(ze),vF=n(ze,"LI",{});var RPe=s(vF);u1e=n(RPe,"STRONG",{});var cMt=s(u1e);wnr=r(cMt,"wav2vec2"),cMt.forEach(t),Anr=r(RPe," \u2014 "),BW=n(RPe,"A",{href:!0});var fMt=s(BW);Lnr=r(fMt,"Wav2Vec2ForSequenceClassification"),fMt.forEach(t),ynr=r(RPe," (Wav2Vec2 model)"),RPe.forEach(t),xnr=i(ze),FF=n(ze,"LI",{});var PPe=s(FF);_1e=n(PPe,"STRONG",{});var mMt=s(_1e);$nr=r(mMt,"wav2vec2-conformer"),mMt.forEach(t),knr=r(PPe," \u2014 "),IW=n(PPe,"A",{href:!0});var gMt=s(IW);Snr=r(gMt,"Wav2Vec2ConformerForSequenceClassification"),gMt.forEach(t),Rnr=r(PPe," (Wav2Vec2-Conformer model)"),PPe.forEach(t),Pnr=i(ze),TF=n(ze,"LI",{});var BPe=s(TF);b1e=n(BPe,"STRONG",{});var hMt=s(b1e);Bnr=r(hMt,"wavlm"),hMt.forEach(t),Inr=r(BPe," \u2014 "),NW=n(BPe,"A",{href:!0});var pMt=s(NW);Nnr=r(pMt,"WavLMForSequenceClassification"),pMt.forEach(t),qnr=r(BPe," (WavLM model)"),BPe.forEach(t),ze.forEach(t),jnr=i(ba),MF=n(ba,"P",{});var IPe=s(MF);Dnr=r(IPe,"The model is set in evaluation mode by default using "),v1e=n(IPe,"CODE",{});var uMt=s(v1e);Gnr=r(uMt,"model.eval()"),uMt.forEach(t),Onr=r(IPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F1e=n(IPe,"CODE",{});var _Mt=s(F1e);Vnr=r(_Mt,"model.train()"),_Mt.forEach(t),IPe.forEach(t),Xnr=i(ba),T(EF.$$.fragment,ba),ba.forEach(t),fl.forEach(t),aOe=i(f),Ad=n(f,"H2",{class:!0});var cXe=s(Ad);CF=n(cXe,"A",{id:!0,class:!0,href:!0});var bMt=s(CF);T1e=n(bMt,"SPAN",{});var vMt=s(T1e);T(u8.$$.fragment,vMt),vMt.forEach(t),bMt.forEach(t),znr=i(cXe),M1e=n(cXe,"SPAN",{});var FMt=s(M1e);Wnr=r(FMt,"AutoModelForAudioFrameClassification"),FMt.forEach(t),cXe.forEach(t),nOe=i(f),Xo=n(f,"DIV",{class:!0});var ml=s(Xo);T(_8.$$.fragment,ml),Qnr=i(ml),Ld=n(ml,"P",{});var Noe=s(Ld);Hnr=r(Noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),qW=n(Noe,"A",{href:!0});var TMt=s(qW);Unr=r(TMt,"from_pretrained()"),TMt.forEach(t),Jnr=r(Noe," class method or the "),jW=n(Noe,"A",{href:!0});var MMt=s(jW);Ynr=r(MMt,"from_config()"),MMt.forEach(t),Knr=r(Noe,` class
method.`),Noe.forEach(t),Znr=i(ml),b8=n(ml,"P",{});var fXe=s(b8);esr=r(fXe,"This class cannot be instantiated directly using "),E1e=n(fXe,"CODE",{});var EMt=s(E1e);osr=r(EMt,"__init__()"),EMt.forEach(t),rsr=r(fXe," (throws an error)."),fXe.forEach(t),tsr=i(ml),Tt=n(ml,"DIV",{class:!0});var o6=s(Tt);T(v8.$$.fragment,o6),asr=i(o6),C1e=n(o6,"P",{});var CMt=s(C1e);nsr=r(CMt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),CMt.forEach(t),ssr=i(o6),yd=n(o6,"P",{});var qoe=s(yd);lsr=r(qoe,`Note:
Loading a model from its configuration file does `),w1e=n(qoe,"STRONG",{});var wMt=s(w1e);isr=r(wMt,"not"),wMt.forEach(t),dsr=r(qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=n(qoe,"A",{href:!0});var AMt=s(DW);csr=r(AMt,"from_pretrained()"),AMt.forEach(t),fsr=r(qoe," to load the model weights."),qoe.forEach(t),msr=i(o6),T(wF.$$.fragment,o6),o6.forEach(t),gsr=i(ml),mo=n(ml,"DIV",{class:!0});var va=s(mo);T(F8.$$.fragment,va),hsr=i(va),A1e=n(va,"P",{});var LMt=s(A1e);psr=r(LMt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),LMt.forEach(t),usr=i(va),Qa=n(va,"P",{});var r6=s(Qa);_sr=r(r6,"The model class to instantiate is selected based on the "),L1e=n(r6,"CODE",{});var yMt=s(L1e);bsr=r(yMt,"model_type"),yMt.forEach(t),vsr=r(r6,` property of the config object (either
passed as an argument or loaded from `),y1e=n(r6,"CODE",{});var xMt=s(y1e);Fsr=r(xMt,"pretrained_model_name_or_path"),xMt.forEach(t),Tsr=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=n(r6,"CODE",{});var $Mt=s(x1e);Msr=r($Mt,"pretrained_model_name_or_path"),$Mt.forEach(t),Esr=r(r6,":"),r6.forEach(t),Csr=i(va),et=n(va,"UL",{});var gl=s(et);AF=n(gl,"LI",{});var NPe=s(AF);$1e=n(NPe,"STRONG",{});var kMt=s($1e);wsr=r(kMt,"data2vec-audio"),kMt.forEach(t),Asr=r(NPe," \u2014 "),GW=n(NPe,"A",{href:!0});var SMt=s(GW);Lsr=r(SMt,"Data2VecAudioForAudioFrameClassification"),SMt.forEach(t),ysr=r(NPe," (Data2VecAudio model)"),NPe.forEach(t),xsr=i(gl),LF=n(gl,"LI",{});var qPe=s(LF);k1e=n(qPe,"STRONG",{});var RMt=s(k1e);$sr=r(RMt,"unispeech-sat"),RMt.forEach(t),ksr=r(qPe," \u2014 "),OW=n(qPe,"A",{href:!0});var PMt=s(OW);Ssr=r(PMt,"UniSpeechSatForAudioFrameClassification"),PMt.forEach(t),Rsr=r(qPe," (UniSpeechSat model)"),qPe.forEach(t),Psr=i(gl),yF=n(gl,"LI",{});var jPe=s(yF);S1e=n(jPe,"STRONG",{});var BMt=s(S1e);Bsr=r(BMt,"wav2vec2"),BMt.forEach(t),Isr=r(jPe," \u2014 "),VW=n(jPe,"A",{href:!0});var IMt=s(VW);Nsr=r(IMt,"Wav2Vec2ForAudioFrameClassification"),IMt.forEach(t),qsr=r(jPe," (Wav2Vec2 model)"),jPe.forEach(t),jsr=i(gl),xF=n(gl,"LI",{});var DPe=s(xF);R1e=n(DPe,"STRONG",{});var NMt=s(R1e);Dsr=r(NMt,"wav2vec2-conformer"),NMt.forEach(t),Gsr=r(DPe," \u2014 "),XW=n(DPe,"A",{href:!0});var qMt=s(XW);Osr=r(qMt,"Wav2Vec2ConformerForAudioFrameClassification"),qMt.forEach(t),Vsr=r(DPe," (Wav2Vec2-Conformer model)"),DPe.forEach(t),Xsr=i(gl),$F=n(gl,"LI",{});var GPe=s($F);P1e=n(GPe,"STRONG",{});var jMt=s(P1e);zsr=r(jMt,"wavlm"),jMt.forEach(t),Wsr=r(GPe," \u2014 "),zW=n(GPe,"A",{href:!0});var DMt=s(zW);Qsr=r(DMt,"WavLMForAudioFrameClassification"),DMt.forEach(t),Hsr=r(GPe," (WavLM model)"),GPe.forEach(t),gl.forEach(t),Usr=i(va),kF=n(va,"P",{});var OPe=s(kF);Jsr=r(OPe,"The model is set in evaluation mode by default using "),B1e=n(OPe,"CODE",{});var GMt=s(B1e);Ysr=r(GMt,"model.eval()"),GMt.forEach(t),Ksr=r(OPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I1e=n(OPe,"CODE",{});var OMt=s(I1e);Zsr=r(OMt,"model.train()"),OMt.forEach(t),OPe.forEach(t),elr=i(va),T(SF.$$.fragment,va),va.forEach(t),ml.forEach(t),sOe=i(f),xd=n(f,"H2",{class:!0});var mXe=s(xd);RF=n(mXe,"A",{id:!0,class:!0,href:!0});var VMt=s(RF);N1e=n(VMt,"SPAN",{});var XMt=s(N1e);T(T8.$$.fragment,XMt),XMt.forEach(t),VMt.forEach(t),olr=i(mXe),q1e=n(mXe,"SPAN",{});var zMt=s(q1e);rlr=r(zMt,"AutoModelForCTC"),zMt.forEach(t),mXe.forEach(t),lOe=i(f),zo=n(f,"DIV",{class:!0});var hl=s(zo);T(M8.$$.fragment,hl),tlr=i(hl),$d=n(hl,"P",{});var joe=s($d);alr=r(joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),WW=n(joe,"A",{href:!0});var WMt=s(WW);nlr=r(WMt,"from_pretrained()"),WMt.forEach(t),slr=r(joe," class method or the "),QW=n(joe,"A",{href:!0});var QMt=s(QW);llr=r(QMt,"from_config()"),QMt.forEach(t),ilr=r(joe,` class
method.`),joe.forEach(t),dlr=i(hl),E8=n(hl,"P",{});var gXe=s(E8);clr=r(gXe,"This class cannot be instantiated directly using "),j1e=n(gXe,"CODE",{});var HMt=s(j1e);flr=r(HMt,"__init__()"),HMt.forEach(t),mlr=r(gXe," (throws an error)."),gXe.forEach(t),glr=i(hl),Mt=n(hl,"DIV",{class:!0});var t6=s(Mt);T(C8.$$.fragment,t6),hlr=i(t6),D1e=n(t6,"P",{});var UMt=s(D1e);plr=r(UMt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),UMt.forEach(t),ulr=i(t6),kd=n(t6,"P",{});var Doe=s(kd);_lr=r(Doe,`Note:
Loading a model from its configuration file does `),G1e=n(Doe,"STRONG",{});var JMt=s(G1e);blr=r(JMt,"not"),JMt.forEach(t),vlr=r(Doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=n(Doe,"A",{href:!0});var YMt=s(HW);Flr=r(YMt,"from_pretrained()"),YMt.forEach(t),Tlr=r(Doe," to load the model weights."),Doe.forEach(t),Mlr=i(t6),T(PF.$$.fragment,t6),t6.forEach(t),Elr=i(hl),go=n(hl,"DIV",{class:!0});var Fa=s(go);T(w8.$$.fragment,Fa),Clr=i(Fa),O1e=n(Fa,"P",{});var KMt=s(O1e);wlr=r(KMt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),KMt.forEach(t),Alr=i(Fa),Ha=n(Fa,"P",{});var a6=s(Ha);Llr=r(a6,"The model class to instantiate is selected based on the "),V1e=n(a6,"CODE",{});var ZMt=s(V1e);ylr=r(ZMt,"model_type"),ZMt.forEach(t),xlr=r(a6,` property of the config object (either
passed as an argument or loaded from `),X1e=n(a6,"CODE",{});var eEt=s(X1e);$lr=r(eEt,"pretrained_model_name_or_path"),eEt.forEach(t),klr=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=n(a6,"CODE",{});var oEt=s(z1e);Slr=r(oEt,"pretrained_model_name_or_path"),oEt.forEach(t),Rlr=r(a6,":"),a6.forEach(t),Plr=i(Fa),Le=n(Fa,"UL",{});var Be=s(Le);BF=n(Be,"LI",{});var VPe=s(BF);W1e=n(VPe,"STRONG",{});var rEt=s(W1e);Blr=r(rEt,"data2vec-audio"),rEt.forEach(t),Ilr=r(VPe," \u2014 "),UW=n(VPe,"A",{href:!0});var tEt=s(UW);Nlr=r(tEt,"Data2VecAudioForCTC"),tEt.forEach(t),qlr=r(VPe," (Data2VecAudio model)"),VPe.forEach(t),jlr=i(Be),IF=n(Be,"LI",{});var XPe=s(IF);Q1e=n(XPe,"STRONG",{});var aEt=s(Q1e);Dlr=r(aEt,"hubert"),aEt.forEach(t),Glr=r(XPe," \u2014 "),JW=n(XPe,"A",{href:!0});var nEt=s(JW);Olr=r(nEt,"HubertForCTC"),nEt.forEach(t),Vlr=r(XPe," (Hubert model)"),XPe.forEach(t),Xlr=i(Be),NF=n(Be,"LI",{});var zPe=s(NF);H1e=n(zPe,"STRONG",{});var sEt=s(H1e);zlr=r(sEt,"mctct"),sEt.forEach(t),Wlr=r(zPe," \u2014 "),YW=n(zPe,"A",{href:!0});var lEt=s(YW);Qlr=r(lEt,"MCTCTForCTC"),lEt.forEach(t),Hlr=r(zPe," (M-CTC-T model)"),zPe.forEach(t),Ulr=i(Be),qF=n(Be,"LI",{});var WPe=s(qF);U1e=n(WPe,"STRONG",{});var iEt=s(U1e);Jlr=r(iEt,"sew"),iEt.forEach(t),Ylr=r(WPe," \u2014 "),KW=n(WPe,"A",{href:!0});var dEt=s(KW);Klr=r(dEt,"SEWForCTC"),dEt.forEach(t),Zlr=r(WPe," (SEW model)"),WPe.forEach(t),eir=i(Be),jF=n(Be,"LI",{});var QPe=s(jF);J1e=n(QPe,"STRONG",{});var cEt=s(J1e);oir=r(cEt,"sew-d"),cEt.forEach(t),rir=r(QPe," \u2014 "),ZW=n(QPe,"A",{href:!0});var fEt=s(ZW);tir=r(fEt,"SEWDForCTC"),fEt.forEach(t),air=r(QPe," (SEW-D model)"),QPe.forEach(t),nir=i(Be),DF=n(Be,"LI",{});var HPe=s(DF);Y1e=n(HPe,"STRONG",{});var mEt=s(Y1e);sir=r(mEt,"unispeech"),mEt.forEach(t),lir=r(HPe," \u2014 "),eQ=n(HPe,"A",{href:!0});var gEt=s(eQ);iir=r(gEt,"UniSpeechForCTC"),gEt.forEach(t),dir=r(HPe," (UniSpeech model)"),HPe.forEach(t),cir=i(Be),GF=n(Be,"LI",{});var UPe=s(GF);K1e=n(UPe,"STRONG",{});var hEt=s(K1e);fir=r(hEt,"unispeech-sat"),hEt.forEach(t),mir=r(UPe," \u2014 "),oQ=n(UPe,"A",{href:!0});var pEt=s(oQ);gir=r(pEt,"UniSpeechSatForCTC"),pEt.forEach(t),hir=r(UPe," (UniSpeechSat model)"),UPe.forEach(t),pir=i(Be),OF=n(Be,"LI",{});var JPe=s(OF);Z1e=n(JPe,"STRONG",{});var uEt=s(Z1e);uir=r(uEt,"wav2vec2"),uEt.forEach(t),_ir=r(JPe," \u2014 "),rQ=n(JPe,"A",{href:!0});var _Et=s(rQ);bir=r(_Et,"Wav2Vec2ForCTC"),_Et.forEach(t),vir=r(JPe," (Wav2Vec2 model)"),JPe.forEach(t),Fir=i(Be),VF=n(Be,"LI",{});var YPe=s(VF);e2e=n(YPe,"STRONG",{});var bEt=s(e2e);Tir=r(bEt,"wav2vec2-conformer"),bEt.forEach(t),Mir=r(YPe," \u2014 "),tQ=n(YPe,"A",{href:!0});var vEt=s(tQ);Eir=r(vEt,"Wav2Vec2ConformerForCTC"),vEt.forEach(t),Cir=r(YPe," (Wav2Vec2-Conformer model)"),YPe.forEach(t),wir=i(Be),XF=n(Be,"LI",{});var KPe=s(XF);o2e=n(KPe,"STRONG",{});var FEt=s(o2e);Air=r(FEt,"wavlm"),FEt.forEach(t),Lir=r(KPe," \u2014 "),aQ=n(KPe,"A",{href:!0});var TEt=s(aQ);yir=r(TEt,"WavLMForCTC"),TEt.forEach(t),xir=r(KPe," (WavLM model)"),KPe.forEach(t),Be.forEach(t),$ir=i(Fa),zF=n(Fa,"P",{});var ZPe=s(zF);kir=r(ZPe,"The model is set in evaluation mode by default using "),r2e=n(ZPe,"CODE",{});var MEt=s(r2e);Sir=r(MEt,"model.eval()"),MEt.forEach(t),Rir=r(ZPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t2e=n(ZPe,"CODE",{});var EEt=s(t2e);Pir=r(EEt,"model.train()"),EEt.forEach(t),ZPe.forEach(t),Bir=i(Fa),T(WF.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),iOe=i(f),Sd=n(f,"H2",{class:!0});var hXe=s(Sd);QF=n(hXe,"A",{id:!0,class:!0,href:!0});var CEt=s(QF);a2e=n(CEt,"SPAN",{});var wEt=s(a2e);T(A8.$$.fragment,wEt),wEt.forEach(t),CEt.forEach(t),Iir=i(hXe),n2e=n(hXe,"SPAN",{});var AEt=s(n2e);Nir=r(AEt,"AutoModelForSpeechSeq2Seq"),AEt.forEach(t),hXe.forEach(t),dOe=i(f),Wo=n(f,"DIV",{class:!0});var pl=s(Wo);T(L8.$$.fragment,pl),qir=i(pl),Rd=n(pl,"P",{});var Goe=s(Rd);jir=r(Goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nQ=n(Goe,"A",{href:!0});var LEt=s(nQ);Dir=r(LEt,"from_pretrained()"),LEt.forEach(t),Gir=r(Goe," class method or the "),sQ=n(Goe,"A",{href:!0});var yEt=s(sQ);Oir=r(yEt,"from_config()"),yEt.forEach(t),Vir=r(Goe,` class
method.`),Goe.forEach(t),Xir=i(pl),y8=n(pl,"P",{});var pXe=s(y8);zir=r(pXe,"This class cannot be instantiated directly using "),s2e=n(pXe,"CODE",{});var xEt=s(s2e);Wir=r(xEt,"__init__()"),xEt.forEach(t),Qir=r(pXe," (throws an error)."),pXe.forEach(t),Hir=i(pl),Et=n(pl,"DIV",{class:!0});var n6=s(Et);T(x8.$$.fragment,n6),Uir=i(n6),l2e=n(n6,"P",{});var $Et=s(l2e);Jir=r($Et,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$Et.forEach(t),Yir=i(n6),Pd=n(n6,"P",{});var Ooe=s(Pd);Kir=r(Ooe,`Note:
Loading a model from its configuration file does `),i2e=n(Ooe,"STRONG",{});var kEt=s(i2e);Zir=r(kEt,"not"),kEt.forEach(t),edr=r(Ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=n(Ooe,"A",{href:!0});var SEt=s(lQ);odr=r(SEt,"from_pretrained()"),SEt.forEach(t),rdr=r(Ooe," to load the model weights."),Ooe.forEach(t),tdr=i(n6),T(HF.$$.fragment,n6),n6.forEach(t),adr=i(pl),ho=n(pl,"DIV",{class:!0});var Ta=s(ho);T($8.$$.fragment,Ta),ndr=i(Ta),d2e=n(Ta,"P",{});var REt=s(d2e);sdr=r(REt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),REt.forEach(t),ldr=i(Ta),Ua=n(Ta,"P",{});var s6=s(Ua);idr=r(s6,"The model class to instantiate is selected based on the "),c2e=n(s6,"CODE",{});var PEt=s(c2e);ddr=r(PEt,"model_type"),PEt.forEach(t),cdr=r(s6,` property of the config object (either
passed as an argument or loaded from `),f2e=n(s6,"CODE",{});var BEt=s(f2e);fdr=r(BEt,"pretrained_model_name_or_path"),BEt.forEach(t),mdr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=n(s6,"CODE",{});var IEt=s(m2e);gdr=r(IEt,"pretrained_model_name_or_path"),IEt.forEach(t),hdr=r(s6,":"),s6.forEach(t),pdr=i(Ta),k8=n(Ta,"UL",{});var uXe=s(k8);UF=n(uXe,"LI",{});var eBe=s(UF);g2e=n(eBe,"STRONG",{});var NEt=s(g2e);udr=r(NEt,"speech-encoder-decoder"),NEt.forEach(t),_dr=r(eBe," \u2014 "),iQ=n(eBe,"A",{href:!0});var qEt=s(iQ);bdr=r(qEt,"SpeechEncoderDecoderModel"),qEt.forEach(t),vdr=r(eBe," (Speech Encoder decoder model)"),eBe.forEach(t),Fdr=i(uXe),JF=n(uXe,"LI",{});var oBe=s(JF);h2e=n(oBe,"STRONG",{});var jEt=s(h2e);Tdr=r(jEt,"speech_to_text"),jEt.forEach(t),Mdr=r(oBe," \u2014 "),dQ=n(oBe,"A",{href:!0});var DEt=s(dQ);Edr=r(DEt,"Speech2TextForConditionalGeneration"),DEt.forEach(t),Cdr=r(oBe," (Speech2Text model)"),oBe.forEach(t),uXe.forEach(t),wdr=i(Ta),YF=n(Ta,"P",{});var rBe=s(YF);Adr=r(rBe,"The model is set in evaluation mode by default using "),p2e=n(rBe,"CODE",{});var GEt=s(p2e);Ldr=r(GEt,"model.eval()"),GEt.forEach(t),ydr=r(rBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u2e=n(rBe,"CODE",{});var OEt=s(u2e);xdr=r(OEt,"model.train()"),OEt.forEach(t),rBe.forEach(t),$dr=i(Ta),T(KF.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),cOe=i(f),Bd=n(f,"H2",{class:!0});var _Xe=s(Bd);ZF=n(_Xe,"A",{id:!0,class:!0,href:!0});var VEt=s(ZF);_2e=n(VEt,"SPAN",{});var XEt=s(_2e);T(S8.$$.fragment,XEt),XEt.forEach(t),VEt.forEach(t),kdr=i(_Xe),b2e=n(_Xe,"SPAN",{});var zEt=s(b2e);Sdr=r(zEt,"AutoModelForAudioXVector"),zEt.forEach(t),_Xe.forEach(t),fOe=i(f),Qo=n(f,"DIV",{class:!0});var ul=s(Qo);T(R8.$$.fragment,ul),Rdr=i(ul),Id=n(ul,"P",{});var Voe=s(Id);Pdr=r(Voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),cQ=n(Voe,"A",{href:!0});var WEt=s(cQ);Bdr=r(WEt,"from_pretrained()"),WEt.forEach(t),Idr=r(Voe," class method or the "),fQ=n(Voe,"A",{href:!0});var QEt=s(fQ);Ndr=r(QEt,"from_config()"),QEt.forEach(t),qdr=r(Voe,` class
method.`),Voe.forEach(t),jdr=i(ul),P8=n(ul,"P",{});var bXe=s(P8);Ddr=r(bXe,"This class cannot be instantiated directly using "),v2e=n(bXe,"CODE",{});var HEt=s(v2e);Gdr=r(HEt,"__init__()"),HEt.forEach(t),Odr=r(bXe," (throws an error)."),bXe.forEach(t),Vdr=i(ul),Ct=n(ul,"DIV",{class:!0});var l6=s(Ct);T(B8.$$.fragment,l6),Xdr=i(l6),F2e=n(l6,"P",{});var UEt=s(F2e);zdr=r(UEt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),UEt.forEach(t),Wdr=i(l6),Nd=n(l6,"P",{});var Xoe=s(Nd);Qdr=r(Xoe,`Note:
Loading a model from its configuration file does `),T2e=n(Xoe,"STRONG",{});var JEt=s(T2e);Hdr=r(JEt,"not"),JEt.forEach(t),Udr=r(Xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=n(Xoe,"A",{href:!0});var YEt=s(mQ);Jdr=r(YEt,"from_pretrained()"),YEt.forEach(t),Ydr=r(Xoe," to load the model weights."),Xoe.forEach(t),Kdr=i(l6),T(eT.$$.fragment,l6),l6.forEach(t),Zdr=i(ul),po=n(ul,"DIV",{class:!0});var Ma=s(po);T(I8.$$.fragment,Ma),ecr=i(Ma),M2e=n(Ma,"P",{});var KEt=s(M2e);ocr=r(KEt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),KEt.forEach(t),rcr=i(Ma),Ja=n(Ma,"P",{});var i6=s(Ja);tcr=r(i6,"The model class to instantiate is selected based on the "),E2e=n(i6,"CODE",{});var ZEt=s(E2e);acr=r(ZEt,"model_type"),ZEt.forEach(t),ncr=r(i6,` property of the config object (either
passed as an argument or loaded from `),C2e=n(i6,"CODE",{});var eCt=s(C2e);scr=r(eCt,"pretrained_model_name_or_path"),eCt.forEach(t),lcr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=n(i6,"CODE",{});var oCt=s(w2e);icr=r(oCt,"pretrained_model_name_or_path"),oCt.forEach(t),dcr=r(i6,":"),i6.forEach(t),ccr=i(Ma),ot=n(Ma,"UL",{});var _l=s(ot);oT=n(_l,"LI",{});var tBe=s(oT);A2e=n(tBe,"STRONG",{});var rCt=s(A2e);fcr=r(rCt,"data2vec-audio"),rCt.forEach(t),mcr=r(tBe," \u2014 "),gQ=n(tBe,"A",{href:!0});var tCt=s(gQ);gcr=r(tCt,"Data2VecAudioForXVector"),tCt.forEach(t),hcr=r(tBe," (Data2VecAudio model)"),tBe.forEach(t),pcr=i(_l),rT=n(_l,"LI",{});var aBe=s(rT);L2e=n(aBe,"STRONG",{});var aCt=s(L2e);ucr=r(aCt,"unispeech-sat"),aCt.forEach(t),_cr=r(aBe," \u2014 "),hQ=n(aBe,"A",{href:!0});var nCt=s(hQ);bcr=r(nCt,"UniSpeechSatForXVector"),nCt.forEach(t),vcr=r(aBe," (UniSpeechSat model)"),aBe.forEach(t),Fcr=i(_l),tT=n(_l,"LI",{});var nBe=s(tT);y2e=n(nBe,"STRONG",{});var sCt=s(y2e);Tcr=r(sCt,"wav2vec2"),sCt.forEach(t),Mcr=r(nBe," \u2014 "),pQ=n(nBe,"A",{href:!0});var lCt=s(pQ);Ecr=r(lCt,"Wav2Vec2ForXVector"),lCt.forEach(t),Ccr=r(nBe," (Wav2Vec2 model)"),nBe.forEach(t),wcr=i(_l),aT=n(_l,"LI",{});var sBe=s(aT);x2e=n(sBe,"STRONG",{});var iCt=s(x2e);Acr=r(iCt,"wav2vec2-conformer"),iCt.forEach(t),Lcr=r(sBe," \u2014 "),uQ=n(sBe,"A",{href:!0});var dCt=s(uQ);ycr=r(dCt,"Wav2Vec2ConformerForXVector"),dCt.forEach(t),xcr=r(sBe," (Wav2Vec2-Conformer model)"),sBe.forEach(t),$cr=i(_l),nT=n(_l,"LI",{});var lBe=s(nT);$2e=n(lBe,"STRONG",{});var cCt=s($2e);kcr=r(cCt,"wavlm"),cCt.forEach(t),Scr=r(lBe," \u2014 "),_Q=n(lBe,"A",{href:!0});var fCt=s(_Q);Rcr=r(fCt,"WavLMForXVector"),fCt.forEach(t),Pcr=r(lBe," (WavLM model)"),lBe.forEach(t),_l.forEach(t),Bcr=i(Ma),sT=n(Ma,"P",{});var iBe=s(sT);Icr=r(iBe,"The model is set in evaluation mode by default using "),k2e=n(iBe,"CODE",{});var mCt=s(k2e);Ncr=r(mCt,"model.eval()"),mCt.forEach(t),qcr=r(iBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S2e=n(iBe,"CODE",{});var gCt=s(S2e);jcr=r(gCt,"model.train()"),gCt.forEach(t),iBe.forEach(t),Dcr=i(Ma),T(lT.$$.fragment,Ma),Ma.forEach(t),ul.forEach(t),mOe=i(f),qd=n(f,"H2",{class:!0});var vXe=s(qd);iT=n(vXe,"A",{id:!0,class:!0,href:!0});var hCt=s(iT);R2e=n(hCt,"SPAN",{});var pCt=s(R2e);T(N8.$$.fragment,pCt),pCt.forEach(t),hCt.forEach(t),Gcr=i(vXe),P2e=n(vXe,"SPAN",{});var uCt=s(P2e);Ocr=r(uCt,"AutoModelForMaskedImageModeling"),uCt.forEach(t),vXe.forEach(t),gOe=i(f),Ho=n(f,"DIV",{class:!0});var bl=s(Ho);T(q8.$$.fragment,bl),Vcr=i(bl),jd=n(bl,"P",{});var zoe=s(jd);Xcr=r(zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),bQ=n(zoe,"A",{href:!0});var _Ct=s(bQ);zcr=r(_Ct,"from_pretrained()"),_Ct.forEach(t),Wcr=r(zoe," class method or the "),vQ=n(zoe,"A",{href:!0});var bCt=s(vQ);Qcr=r(bCt,"from_config()"),bCt.forEach(t),Hcr=r(zoe,` class
method.`),zoe.forEach(t),Ucr=i(bl),j8=n(bl,"P",{});var FXe=s(j8);Jcr=r(FXe,"This class cannot be instantiated directly using "),B2e=n(FXe,"CODE",{});var vCt=s(B2e);Ycr=r(vCt,"__init__()"),vCt.forEach(t),Kcr=r(FXe," (throws an error)."),FXe.forEach(t),Zcr=i(bl),wt=n(bl,"DIV",{class:!0});var d6=s(wt);T(D8.$$.fragment,d6),efr=i(d6),I2e=n(d6,"P",{});var FCt=s(I2e);ofr=r(FCt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),FCt.forEach(t),rfr=i(d6),Dd=n(d6,"P",{});var Woe=s(Dd);tfr=r(Woe,`Note:
Loading a model from its configuration file does `),N2e=n(Woe,"STRONG",{});var TCt=s(N2e);afr=r(TCt,"not"),TCt.forEach(t),nfr=r(Woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(Woe,"A",{href:!0});var MCt=s(FQ);sfr=r(MCt,"from_pretrained()"),MCt.forEach(t),lfr=r(Woe," to load the model weights."),Woe.forEach(t),ifr=i(d6),T(dT.$$.fragment,d6),d6.forEach(t),dfr=i(bl),uo=n(bl,"DIV",{class:!0});var Ea=s(uo);T(G8.$$.fragment,Ea),cfr=i(Ea),q2e=n(Ea,"P",{});var ECt=s(q2e);ffr=r(ECt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ECt.forEach(t),mfr=i(Ea),Ya=n(Ea,"P",{});var c6=s(Ya);gfr=r(c6,"The model class to instantiate is selected based on the "),j2e=n(c6,"CODE",{});var CCt=s(j2e);hfr=r(CCt,"model_type"),CCt.forEach(t),pfr=r(c6,` property of the config object (either
passed as an argument or loaded from `),D2e=n(c6,"CODE",{});var wCt=s(D2e);ufr=r(wCt,"pretrained_model_name_or_path"),wCt.forEach(t),_fr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G2e=n(c6,"CODE",{});var ACt=s(G2e);bfr=r(ACt,"pretrained_model_name_or_path"),ACt.forEach(t),vfr=r(c6,":"),c6.forEach(t),Ffr=i(Ea),Gd=n(Ea,"UL",{});var Qoe=s(Gd);cT=n(Qoe,"LI",{});var dBe=s(cT);O2e=n(dBe,"STRONG",{});var LCt=s(O2e);Tfr=r(LCt,"deit"),LCt.forEach(t),Mfr=r(dBe," \u2014 "),TQ=n(dBe,"A",{href:!0});var yCt=s(TQ);Efr=r(yCt,"DeiTForMaskedImageModeling"),yCt.forEach(t),Cfr=r(dBe," (DeiT model)"),dBe.forEach(t),wfr=i(Qoe),fT=n(Qoe,"LI",{});var cBe=s(fT);V2e=n(cBe,"STRONG",{});var xCt=s(V2e);Afr=r(xCt,"swin"),xCt.forEach(t),Lfr=r(cBe," \u2014 "),MQ=n(cBe,"A",{href:!0});var $Ct=s(MQ);yfr=r($Ct,"SwinForMaskedImageModeling"),$Ct.forEach(t),xfr=r(cBe," (Swin Transformer model)"),cBe.forEach(t),$fr=i(Qoe),mT=n(Qoe,"LI",{});var fBe=s(mT);X2e=n(fBe,"STRONG",{});var kCt=s(X2e);kfr=r(kCt,"vit"),kCt.forEach(t),Sfr=r(fBe," \u2014 "),EQ=n(fBe,"A",{href:!0});var SCt=s(EQ);Rfr=r(SCt,"ViTForMaskedImageModeling"),SCt.forEach(t),Pfr=r(fBe," (ViT model)"),fBe.forEach(t),Qoe.forEach(t),Bfr=i(Ea),gT=n(Ea,"P",{});var mBe=s(gT);Ifr=r(mBe,"The model is set in evaluation mode by default using "),z2e=n(mBe,"CODE",{});var RCt=s(z2e);Nfr=r(RCt,"model.eval()"),RCt.forEach(t),qfr=r(mBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W2e=n(mBe,"CODE",{});var PCt=s(W2e);jfr=r(PCt,"model.train()"),PCt.forEach(t),mBe.forEach(t),Dfr=i(Ea),T(hT.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),hOe=i(f),Od=n(f,"H2",{class:!0});var TXe=s(Od);pT=n(TXe,"A",{id:!0,class:!0,href:!0});var BCt=s(pT);Q2e=n(BCt,"SPAN",{});var ICt=s(Q2e);T(O8.$$.fragment,ICt),ICt.forEach(t),BCt.forEach(t),Gfr=i(TXe),H2e=n(TXe,"SPAN",{});var NCt=s(H2e);Ofr=r(NCt,"AutoModelForObjectDetection"),NCt.forEach(t),TXe.forEach(t),pOe=i(f),Uo=n(f,"DIV",{class:!0});var vl=s(Uo);T(V8.$$.fragment,vl),Vfr=i(vl),Vd=n(vl,"P",{});var Hoe=s(Vd);Xfr=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),CQ=n(Hoe,"A",{href:!0});var qCt=s(CQ);zfr=r(qCt,"from_pretrained()"),qCt.forEach(t),Wfr=r(Hoe," class method or the "),wQ=n(Hoe,"A",{href:!0});var jCt=s(wQ);Qfr=r(jCt,"from_config()"),jCt.forEach(t),Hfr=r(Hoe,` class
method.`),Hoe.forEach(t),Ufr=i(vl),X8=n(vl,"P",{});var MXe=s(X8);Jfr=r(MXe,"This class cannot be instantiated directly using "),U2e=n(MXe,"CODE",{});var DCt=s(U2e);Yfr=r(DCt,"__init__()"),DCt.forEach(t),Kfr=r(MXe," (throws an error)."),MXe.forEach(t),Zfr=i(vl),At=n(vl,"DIV",{class:!0});var f6=s(At);T(z8.$$.fragment,f6),emr=i(f6),J2e=n(f6,"P",{});var GCt=s(J2e);omr=r(GCt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),GCt.forEach(t),rmr=i(f6),Xd=n(f6,"P",{});var Uoe=s(Xd);tmr=r(Uoe,`Note:
Loading a model from its configuration file does `),Y2e=n(Uoe,"STRONG",{});var OCt=s(Y2e);amr=r(OCt,"not"),OCt.forEach(t),nmr=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),AQ=n(Uoe,"A",{href:!0});var VCt=s(AQ);smr=r(VCt,"from_pretrained()"),VCt.forEach(t),lmr=r(Uoe," to load the model weights."),Uoe.forEach(t),imr=i(f6),T(uT.$$.fragment,f6),f6.forEach(t),dmr=i(vl),_o=n(vl,"DIV",{class:!0});var Ca=s(_o);T(W8.$$.fragment,Ca),cmr=i(Ca),K2e=n(Ca,"P",{});var XCt=s(K2e);fmr=r(XCt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),XCt.forEach(t),mmr=i(Ca),Ka=n(Ca,"P",{});var m6=s(Ka);gmr=r(m6,"The model class to instantiate is selected based on the "),Z2e=n(m6,"CODE",{});var zCt=s(Z2e);hmr=r(zCt,"model_type"),zCt.forEach(t),pmr=r(m6,` property of the config object (either
passed as an argument or loaded from `),ebe=n(m6,"CODE",{});var WCt=s(ebe);umr=r(WCt,"pretrained_model_name_or_path"),WCt.forEach(t),_mr=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=n(m6,"CODE",{});var QCt=s(obe);bmr=r(QCt,"pretrained_model_name_or_path"),QCt.forEach(t),vmr=r(m6,":"),m6.forEach(t),Fmr=i(Ca),Q8=n(Ca,"UL",{});var EXe=s(Q8);_T=n(EXe,"LI",{});var gBe=s(_T);rbe=n(gBe,"STRONG",{});var HCt=s(rbe);Tmr=r(HCt,"detr"),HCt.forEach(t),Mmr=r(gBe," \u2014 "),LQ=n(gBe,"A",{href:!0});var UCt=s(LQ);Emr=r(UCt,"DetrForObjectDetection"),UCt.forEach(t),Cmr=r(gBe," (DETR model)"),gBe.forEach(t),wmr=i(EXe),bT=n(EXe,"LI",{});var hBe=s(bT);tbe=n(hBe,"STRONG",{});var JCt=s(tbe);Amr=r(JCt,"yolos"),JCt.forEach(t),Lmr=r(hBe," \u2014 "),yQ=n(hBe,"A",{href:!0});var YCt=s(yQ);ymr=r(YCt,"YolosForObjectDetection"),YCt.forEach(t),xmr=r(hBe," (YOLOS model)"),hBe.forEach(t),EXe.forEach(t),$mr=i(Ca),vT=n(Ca,"P",{});var pBe=s(vT);kmr=r(pBe,"The model is set in evaluation mode by default using "),abe=n(pBe,"CODE",{});var KCt=s(abe);Smr=r(KCt,"model.eval()"),KCt.forEach(t),Rmr=r(pBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nbe=n(pBe,"CODE",{});var ZCt=s(nbe);Pmr=r(ZCt,"model.train()"),ZCt.forEach(t),pBe.forEach(t),Bmr=i(Ca),T(FT.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),uOe=i(f),zd=n(f,"H2",{class:!0});var CXe=s(zd);TT=n(CXe,"A",{id:!0,class:!0,href:!0});var e5t=s(TT);sbe=n(e5t,"SPAN",{});var o5t=s(sbe);T(H8.$$.fragment,o5t),o5t.forEach(t),e5t.forEach(t),Imr=i(CXe),lbe=n(CXe,"SPAN",{});var r5t=s(lbe);Nmr=r(r5t,"AutoModelForImageSegmentation"),r5t.forEach(t),CXe.forEach(t),_Oe=i(f),Jo=n(f,"DIV",{class:!0});var Fl=s(Jo);T(U8.$$.fragment,Fl),qmr=i(Fl),Wd=n(Fl,"P",{});var Joe=s(Wd);jmr=r(Joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),xQ=n(Joe,"A",{href:!0});var t5t=s(xQ);Dmr=r(t5t,"from_pretrained()"),t5t.forEach(t),Gmr=r(Joe," class method or the "),$Q=n(Joe,"A",{href:!0});var a5t=s($Q);Omr=r(a5t,"from_config()"),a5t.forEach(t),Vmr=r(Joe,` class
method.`),Joe.forEach(t),Xmr=i(Fl),J8=n(Fl,"P",{});var wXe=s(J8);zmr=r(wXe,"This class cannot be instantiated directly using "),ibe=n(wXe,"CODE",{});var n5t=s(ibe);Wmr=r(n5t,"__init__()"),n5t.forEach(t),Qmr=r(wXe," (throws an error)."),wXe.forEach(t),Hmr=i(Fl),Lt=n(Fl,"DIV",{class:!0});var g6=s(Lt);T(Y8.$$.fragment,g6),Umr=i(g6),dbe=n(g6,"P",{});var s5t=s(dbe);Jmr=r(s5t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),s5t.forEach(t),Ymr=i(g6),Qd=n(g6,"P",{});var Yoe=s(Qd);Kmr=r(Yoe,`Note:
Loading a model from its configuration file does `),cbe=n(Yoe,"STRONG",{});var l5t=s(cbe);Zmr=r(l5t,"not"),l5t.forEach(t),egr=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=n(Yoe,"A",{href:!0});var i5t=s(kQ);ogr=r(i5t,"from_pretrained()"),i5t.forEach(t),rgr=r(Yoe," to load the model weights."),Yoe.forEach(t),tgr=i(g6),T(MT.$$.fragment,g6),g6.forEach(t),agr=i(Fl),bo=n(Fl,"DIV",{class:!0});var wa=s(bo);T(K8.$$.fragment,wa),ngr=i(wa),fbe=n(wa,"P",{});var d5t=s(fbe);sgr=r(d5t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),d5t.forEach(t),lgr=i(wa),Za=n(wa,"P",{});var h6=s(Za);igr=r(h6,"The model class to instantiate is selected based on the "),mbe=n(h6,"CODE",{});var c5t=s(mbe);dgr=r(c5t,"model_type"),c5t.forEach(t),cgr=r(h6,` property of the config object (either
passed as an argument or loaded from `),gbe=n(h6,"CODE",{});var f5t=s(gbe);fgr=r(f5t,"pretrained_model_name_or_path"),f5t.forEach(t),mgr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=n(h6,"CODE",{});var m5t=s(hbe);ggr=r(m5t,"pretrained_model_name_or_path"),m5t.forEach(t),hgr=r(h6,":"),h6.forEach(t),pgr=i(wa),pbe=n(wa,"UL",{});var g5t=s(pbe);ET=n(g5t,"LI",{});var uBe=s(ET);ube=n(uBe,"STRONG",{});var h5t=s(ube);ugr=r(h5t,"detr"),h5t.forEach(t),_gr=r(uBe," \u2014 "),SQ=n(uBe,"A",{href:!0});var p5t=s(SQ);bgr=r(p5t,"DetrForSegmentation"),p5t.forEach(t),vgr=r(uBe," (DETR model)"),uBe.forEach(t),g5t.forEach(t),Fgr=i(wa),CT=n(wa,"P",{});var _Be=s(CT);Tgr=r(_Be,"The model is set in evaluation mode by default using "),_be=n(_Be,"CODE",{});var u5t=s(_be);Mgr=r(u5t,"model.eval()"),u5t.forEach(t),Egr=r(_Be,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bbe=n(_Be,"CODE",{});var _5t=s(bbe);Cgr=r(_5t,"model.train()"),_5t.forEach(t),_Be.forEach(t),wgr=i(wa),T(wT.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),bOe=i(f),Hd=n(f,"H2",{class:!0});var AXe=s(Hd);AT=n(AXe,"A",{id:!0,class:!0,href:!0});var b5t=s(AT);vbe=n(b5t,"SPAN",{});var v5t=s(vbe);T(Z8.$$.fragment,v5t),v5t.forEach(t),b5t.forEach(t),Agr=i(AXe),Fbe=n(AXe,"SPAN",{});var F5t=s(Fbe);Lgr=r(F5t,"AutoModelForSemanticSegmentation"),F5t.forEach(t),AXe.forEach(t),vOe=i(f),Yo=n(f,"DIV",{class:!0});var Tl=s(Yo);T(e9.$$.fragment,Tl),ygr=i(Tl),Ud=n(Tl,"P",{});var Koe=s(Ud);xgr=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),RQ=n(Koe,"A",{href:!0});var T5t=s(RQ);$gr=r(T5t,"from_pretrained()"),T5t.forEach(t),kgr=r(Koe," class method or the "),PQ=n(Koe,"A",{href:!0});var M5t=s(PQ);Sgr=r(M5t,"from_config()"),M5t.forEach(t),Rgr=r(Koe,` class
method.`),Koe.forEach(t),Pgr=i(Tl),o9=n(Tl,"P",{});var LXe=s(o9);Bgr=r(LXe,"This class cannot be instantiated directly using "),Tbe=n(LXe,"CODE",{});var E5t=s(Tbe);Igr=r(E5t,"__init__()"),E5t.forEach(t),Ngr=r(LXe," (throws an error)."),LXe.forEach(t),qgr=i(Tl),yt=n(Tl,"DIV",{class:!0});var p6=s(yt);T(r9.$$.fragment,p6),jgr=i(p6),Mbe=n(p6,"P",{});var C5t=s(Mbe);Dgr=r(C5t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),C5t.forEach(t),Ggr=i(p6),Jd=n(p6,"P",{});var Zoe=s(Jd);Ogr=r(Zoe,`Note:
Loading a model from its configuration file does `),Ebe=n(Zoe,"STRONG",{});var w5t=s(Ebe);Vgr=r(w5t,"not"),w5t.forEach(t),Xgr=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=n(Zoe,"A",{href:!0});var A5t=s(BQ);zgr=r(A5t,"from_pretrained()"),A5t.forEach(t),Wgr=r(Zoe," to load the model weights."),Zoe.forEach(t),Qgr=i(p6),T(LT.$$.fragment,p6),p6.forEach(t),Hgr=i(Tl),vo=n(Tl,"DIV",{class:!0});var Aa=s(vo);T(t9.$$.fragment,Aa),Ugr=i(Aa),Cbe=n(Aa,"P",{});var L5t=s(Cbe);Jgr=r(L5t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),L5t.forEach(t),Ygr=i(Aa),en=n(Aa,"P",{});var u6=s(en);Kgr=r(u6,"The model class to instantiate is selected based on the "),wbe=n(u6,"CODE",{});var y5t=s(wbe);Zgr=r(y5t,"model_type"),y5t.forEach(t),ehr=r(u6,` property of the config object (either
passed as an argument or loaded from `),Abe=n(u6,"CODE",{});var x5t=s(Abe);ohr=r(x5t,"pretrained_model_name_or_path"),x5t.forEach(t),rhr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=n(u6,"CODE",{});var $5t=s(Lbe);thr=r($5t,"pretrained_model_name_or_path"),$5t.forEach(t),ahr=r(u6,":"),u6.forEach(t),nhr=i(Aa),on=n(Aa,"UL",{});var _6=s(on);yT=n(_6,"LI",{});var bBe=s(yT);ybe=n(bBe,"STRONG",{});var k5t=s(ybe);shr=r(k5t,"beit"),k5t.forEach(t),lhr=r(bBe," \u2014 "),IQ=n(bBe,"A",{href:!0});var S5t=s(IQ);ihr=r(S5t,"BeitForSemanticSegmentation"),S5t.forEach(t),dhr=r(bBe," (BEiT model)"),bBe.forEach(t),chr=i(_6),xT=n(_6,"LI",{});var vBe=s(xT);xbe=n(vBe,"STRONG",{});var R5t=s(xbe);fhr=r(R5t,"data2vec-vision"),R5t.forEach(t),mhr=r(vBe," \u2014 "),NQ=n(vBe,"A",{href:!0});var P5t=s(NQ);ghr=r(P5t,"Data2VecVisionForSemanticSegmentation"),P5t.forEach(t),hhr=r(vBe," (Data2VecVision model)"),vBe.forEach(t),phr=i(_6),$T=n(_6,"LI",{});var FBe=s($T);$be=n(FBe,"STRONG",{});var B5t=s($be);uhr=r(B5t,"dpt"),B5t.forEach(t),_hr=r(FBe," \u2014 "),qQ=n(FBe,"A",{href:!0});var I5t=s(qQ);bhr=r(I5t,"DPTForSemanticSegmentation"),I5t.forEach(t),vhr=r(FBe," (DPT model)"),FBe.forEach(t),Fhr=i(_6),kT=n(_6,"LI",{});var TBe=s(kT);kbe=n(TBe,"STRONG",{});var N5t=s(kbe);Thr=r(N5t,"segformer"),N5t.forEach(t),Mhr=r(TBe," \u2014 "),jQ=n(TBe,"A",{href:!0});var q5t=s(jQ);Ehr=r(q5t,"SegformerForSemanticSegmentation"),q5t.forEach(t),Chr=r(TBe," (SegFormer model)"),TBe.forEach(t),_6.forEach(t),whr=i(Aa),ST=n(Aa,"P",{});var MBe=s(ST);Ahr=r(MBe,"The model is set in evaluation mode by default using "),Sbe=n(MBe,"CODE",{});var j5t=s(Sbe);Lhr=r(j5t,"model.eval()"),j5t.forEach(t),yhr=r(MBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rbe=n(MBe,"CODE",{});var D5t=s(Rbe);xhr=r(D5t,"model.train()"),D5t.forEach(t),MBe.forEach(t),$hr=i(Aa),T(RT.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),FOe=i(f),Yd=n(f,"H2",{class:!0});var yXe=s(Yd);PT=n(yXe,"A",{id:!0,class:!0,href:!0});var G5t=s(PT);Pbe=n(G5t,"SPAN",{});var O5t=s(Pbe);T(a9.$$.fragment,O5t),O5t.forEach(t),G5t.forEach(t),khr=i(yXe),Bbe=n(yXe,"SPAN",{});var V5t=s(Bbe);Shr=r(V5t,"AutoModelForInstanceSegmentation"),V5t.forEach(t),yXe.forEach(t),TOe=i(f),Ko=n(f,"DIV",{class:!0});var Ml=s(Ko);T(n9.$$.fragment,Ml),Rhr=i(Ml),Kd=n(Ml,"P",{});var ere=s(Kd);Phr=r(ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),DQ=n(ere,"A",{href:!0});var X5t=s(DQ);Bhr=r(X5t,"from_pretrained()"),X5t.forEach(t),Ihr=r(ere," class method or the "),GQ=n(ere,"A",{href:!0});var z5t=s(GQ);Nhr=r(z5t,"from_config()"),z5t.forEach(t),qhr=r(ere,` class
method.`),ere.forEach(t),jhr=i(Ml),s9=n(Ml,"P",{});var xXe=s(s9);Dhr=r(xXe,"This class cannot be instantiated directly using "),Ibe=n(xXe,"CODE",{});var W5t=s(Ibe);Ghr=r(W5t,"__init__()"),W5t.forEach(t),Ohr=r(xXe," (throws an error)."),xXe.forEach(t),Vhr=i(Ml),xt=n(Ml,"DIV",{class:!0});var b6=s(xt);T(l9.$$.fragment,b6),Xhr=i(b6),Nbe=n(b6,"P",{});var Q5t=s(Nbe);zhr=r(Q5t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Q5t.forEach(t),Whr=i(b6),Zd=n(b6,"P",{});var ore=s(Zd);Qhr=r(ore,`Note:
Loading a model from its configuration file does `),qbe=n(ore,"STRONG",{});var H5t=s(qbe);Hhr=r(H5t,"not"),H5t.forEach(t),Uhr=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=n(ore,"A",{href:!0});var U5t=s(OQ);Jhr=r(U5t,"from_pretrained()"),U5t.forEach(t),Yhr=r(ore," to load the model weights."),ore.forEach(t),Khr=i(b6),T(BT.$$.fragment,b6),b6.forEach(t),Zhr=i(Ml),Fo=n(Ml,"DIV",{class:!0});var La=s(Fo);T(i9.$$.fragment,La),epr=i(La),jbe=n(La,"P",{});var J5t=s(jbe);opr=r(J5t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),J5t.forEach(t),rpr=i(La),rn=n(La,"P",{});var v6=s(rn);tpr=r(v6,"The model class to instantiate is selected based on the "),Dbe=n(v6,"CODE",{});var Y5t=s(Dbe);apr=r(Y5t,"model_type"),Y5t.forEach(t),npr=r(v6,` property of the config object (either
passed as an argument or loaded from `),Gbe=n(v6,"CODE",{});var K5t=s(Gbe);spr=r(K5t,"pretrained_model_name_or_path"),K5t.forEach(t),lpr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=n(v6,"CODE",{});var Z5t=s(Obe);ipr=r(Z5t,"pretrained_model_name_or_path"),Z5t.forEach(t),dpr=r(v6,":"),v6.forEach(t),cpr=i(La),Vbe=n(La,"UL",{});var e0t=s(Vbe);IT=n(e0t,"LI",{});var EBe=s(IT);Xbe=n(EBe,"STRONG",{});var o0t=s(Xbe);fpr=r(o0t,"maskformer"),o0t.forEach(t),mpr=r(EBe," \u2014 "),VQ=n(EBe,"A",{href:!0});var r0t=s(VQ);gpr=r(r0t,"MaskFormerForInstanceSegmentation"),r0t.forEach(t),hpr=r(EBe," (MaskFormer model)"),EBe.forEach(t),e0t.forEach(t),ppr=i(La),NT=n(La,"P",{});var CBe=s(NT);upr=r(CBe,"The model is set in evaluation mode by default using "),zbe=n(CBe,"CODE",{});var t0t=s(zbe);_pr=r(t0t,"model.eval()"),t0t.forEach(t),bpr=r(CBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wbe=n(CBe,"CODE",{});var a0t=s(Wbe);vpr=r(a0t,"model.train()"),a0t.forEach(t),CBe.forEach(t),Fpr=i(La),T(qT.$$.fragment,La),La.forEach(t),Ml.forEach(t),MOe=i(f),ec=n(f,"H2",{class:!0});var $Xe=s(ec);jT=n($Xe,"A",{id:!0,class:!0,href:!0});var n0t=s(jT);Qbe=n(n0t,"SPAN",{});var s0t=s(Qbe);T(d9.$$.fragment,s0t),s0t.forEach(t),n0t.forEach(t),Tpr=i($Xe),Hbe=n($Xe,"SPAN",{});var l0t=s(Hbe);Mpr=r(l0t,"TFAutoModel"),l0t.forEach(t),$Xe.forEach(t),EOe=i(f),Zo=n(f,"DIV",{class:!0});var El=s(Zo);T(c9.$$.fragment,El),Epr=i(El),oc=n(El,"P",{});var rre=s(oc);Cpr=r(rre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XQ=n(rre,"A",{href:!0});var i0t=s(XQ);wpr=r(i0t,"from_pretrained()"),i0t.forEach(t),Apr=r(rre," class method or the "),zQ=n(rre,"A",{href:!0});var d0t=s(zQ);Lpr=r(d0t,"from_config()"),d0t.forEach(t),ypr=r(rre,` class
method.`),rre.forEach(t),xpr=i(El),f9=n(El,"P",{});var kXe=s(f9);$pr=r(kXe,"This class cannot be instantiated directly using "),Ube=n(kXe,"CODE",{});var c0t=s(Ube);kpr=r(c0t,"__init__()"),c0t.forEach(t),Spr=r(kXe," (throws an error)."),kXe.forEach(t),Rpr=i(El),$t=n(El,"DIV",{class:!0});var F6=s($t);T(m9.$$.fragment,F6),Ppr=i(F6),Jbe=n(F6,"P",{});var f0t=s(Jbe);Bpr=r(f0t,"Instantiates one of the base model classes of the library from a configuration."),f0t.forEach(t),Ipr=i(F6),rc=n(F6,"P",{});var tre=s(rc);Npr=r(tre,`Note:
Loading a model from its configuration file does `),Ybe=n(tre,"STRONG",{});var m0t=s(Ybe);qpr=r(m0t,"not"),m0t.forEach(t),jpr=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=n(tre,"A",{href:!0});var g0t=s(WQ);Dpr=r(g0t,"from_pretrained()"),g0t.forEach(t),Gpr=r(tre," to load the model weights."),tre.forEach(t),Opr=i(F6),T(DT.$$.fragment,F6),F6.forEach(t),Vpr=i(El),Lr=n(El,"DIV",{class:!0});var Cl=s(Lr);T(g9.$$.fragment,Cl),Xpr=i(Cl),Kbe=n(Cl,"P",{});var h0t=s(Kbe);zpr=r(h0t,"Instantiate one of the base model classes of the library from a pretrained model."),h0t.forEach(t),Wpr=i(Cl),tn=n(Cl,"P",{});var T6=s(tn);Qpr=r(T6,"The model class to instantiate is selected based on the "),Zbe=n(T6,"CODE",{});var p0t=s(Zbe);Hpr=r(p0t,"model_type"),p0t.forEach(t),Upr=r(T6,` property of the config object (either
passed as an argument or loaded from `),eve=n(T6,"CODE",{});var u0t=s(eve);Jpr=r(u0t,"pretrained_model_name_or_path"),u0t.forEach(t),Ypr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=n(T6,"CODE",{});var _0t=s(ove);Kpr=r(_0t,"pretrained_model_name_or_path"),_0t.forEach(t),Zpr=r(T6,":"),T6.forEach(t),eur=i(Cl),q=n(Cl,"UL",{});var D=s(q);GT=n(D,"LI",{});var wBe=s(GT);rve=n(wBe,"STRONG",{});var b0t=s(rve);our=r(b0t,"albert"),b0t.forEach(t),rur=r(wBe," \u2014 "),QQ=n(wBe,"A",{href:!0});var v0t=s(QQ);tur=r(v0t,"TFAlbertModel"),v0t.forEach(t),aur=r(wBe," (ALBERT model)"),wBe.forEach(t),nur=i(D),OT=n(D,"LI",{});var ABe=s(OT);tve=n(ABe,"STRONG",{});var F0t=s(tve);sur=r(F0t,"bart"),F0t.forEach(t),lur=r(ABe," \u2014 "),HQ=n(ABe,"A",{href:!0});var T0t=s(HQ);iur=r(T0t,"TFBartModel"),T0t.forEach(t),dur=r(ABe," (BART model)"),ABe.forEach(t),cur=i(D),VT=n(D,"LI",{});var LBe=s(VT);ave=n(LBe,"STRONG",{});var M0t=s(ave);fur=r(M0t,"bert"),M0t.forEach(t),mur=r(LBe," \u2014 "),UQ=n(LBe,"A",{href:!0});var E0t=s(UQ);gur=r(E0t,"TFBertModel"),E0t.forEach(t),hur=r(LBe," (BERT model)"),LBe.forEach(t),pur=i(D),XT=n(D,"LI",{});var yBe=s(XT);nve=n(yBe,"STRONG",{});var C0t=s(nve);uur=r(C0t,"blenderbot"),C0t.forEach(t),_ur=r(yBe," \u2014 "),JQ=n(yBe,"A",{href:!0});var w0t=s(JQ);bur=r(w0t,"TFBlenderbotModel"),w0t.forEach(t),vur=r(yBe," (Blenderbot model)"),yBe.forEach(t),Fur=i(D),zT=n(D,"LI",{});var xBe=s(zT);sve=n(xBe,"STRONG",{});var A0t=s(sve);Tur=r(A0t,"blenderbot-small"),A0t.forEach(t),Mur=r(xBe," \u2014 "),YQ=n(xBe,"A",{href:!0});var L0t=s(YQ);Eur=r(L0t,"TFBlenderbotSmallModel"),L0t.forEach(t),Cur=r(xBe," (BlenderbotSmall model)"),xBe.forEach(t),wur=i(D),WT=n(D,"LI",{});var $Be=s(WT);lve=n($Be,"STRONG",{});var y0t=s(lve);Aur=r(y0t,"camembert"),y0t.forEach(t),Lur=r($Be," \u2014 "),KQ=n($Be,"A",{href:!0});var x0t=s(KQ);yur=r(x0t,"TFCamembertModel"),x0t.forEach(t),xur=r($Be," (CamemBERT model)"),$Be.forEach(t),$ur=i(D),QT=n(D,"LI",{});var kBe=s(QT);ive=n(kBe,"STRONG",{});var $0t=s(ive);kur=r($0t,"clip"),$0t.forEach(t),Sur=r(kBe," \u2014 "),ZQ=n(kBe,"A",{href:!0});var k0t=s(ZQ);Rur=r(k0t,"TFCLIPModel"),k0t.forEach(t),Pur=r(kBe," (CLIP model)"),kBe.forEach(t),Bur=i(D),HT=n(D,"LI",{});var SBe=s(HT);dve=n(SBe,"STRONG",{});var S0t=s(dve);Iur=r(S0t,"convbert"),S0t.forEach(t),Nur=r(SBe," \u2014 "),eH=n(SBe,"A",{href:!0});var R0t=s(eH);qur=r(R0t,"TFConvBertModel"),R0t.forEach(t),jur=r(SBe," (ConvBERT model)"),SBe.forEach(t),Dur=i(D),UT=n(D,"LI",{});var RBe=s(UT);cve=n(RBe,"STRONG",{});var P0t=s(cve);Gur=r(P0t,"convnext"),P0t.forEach(t),Our=r(RBe," \u2014 "),oH=n(RBe,"A",{href:!0});var B0t=s(oH);Vur=r(B0t,"TFConvNextModel"),B0t.forEach(t),Xur=r(RBe," (ConvNeXT model)"),RBe.forEach(t),zur=i(D),JT=n(D,"LI",{});var PBe=s(JT);fve=n(PBe,"STRONG",{});var I0t=s(fve);Wur=r(I0t,"ctrl"),I0t.forEach(t),Qur=r(PBe," \u2014 "),rH=n(PBe,"A",{href:!0});var N0t=s(rH);Hur=r(N0t,"TFCTRLModel"),N0t.forEach(t),Uur=r(PBe," (CTRL model)"),PBe.forEach(t),Jur=i(D),YT=n(D,"LI",{});var BBe=s(YT);mve=n(BBe,"STRONG",{});var q0t=s(mve);Yur=r(q0t,"data2vec-vision"),q0t.forEach(t),Kur=r(BBe," \u2014 "),tH=n(BBe,"A",{href:!0});var j0t=s(tH);Zur=r(j0t,"TFData2VecVisionModel"),j0t.forEach(t),e_r=r(BBe," (Data2VecVision model)"),BBe.forEach(t),o_r=i(D),KT=n(D,"LI",{});var IBe=s(KT);gve=n(IBe,"STRONG",{});var D0t=s(gve);r_r=r(D0t,"deberta"),D0t.forEach(t),t_r=r(IBe," \u2014 "),aH=n(IBe,"A",{href:!0});var G0t=s(aH);a_r=r(G0t,"TFDebertaModel"),G0t.forEach(t),n_r=r(IBe," (DeBERTa model)"),IBe.forEach(t),s_r=i(D),ZT=n(D,"LI",{});var NBe=s(ZT);hve=n(NBe,"STRONG",{});var O0t=s(hve);l_r=r(O0t,"deberta-v2"),O0t.forEach(t),i_r=r(NBe," \u2014 "),nH=n(NBe,"A",{href:!0});var V0t=s(nH);d_r=r(V0t,"TFDebertaV2Model"),V0t.forEach(t),c_r=r(NBe," (DeBERTa-v2 model)"),NBe.forEach(t),f_r=i(D),e7=n(D,"LI",{});var qBe=s(e7);pve=n(qBe,"STRONG",{});var X0t=s(pve);m_r=r(X0t,"distilbert"),X0t.forEach(t),g_r=r(qBe," \u2014 "),sH=n(qBe,"A",{href:!0});var z0t=s(sH);h_r=r(z0t,"TFDistilBertModel"),z0t.forEach(t),p_r=r(qBe," (DistilBERT model)"),qBe.forEach(t),u_r=i(D),o7=n(D,"LI",{});var jBe=s(o7);uve=n(jBe,"STRONG",{});var W0t=s(uve);__r=r(W0t,"dpr"),W0t.forEach(t),b_r=r(jBe," \u2014 "),lH=n(jBe,"A",{href:!0});var Q0t=s(lH);v_r=r(Q0t,"TFDPRQuestionEncoder"),Q0t.forEach(t),F_r=r(jBe," (DPR model)"),jBe.forEach(t),T_r=i(D),r7=n(D,"LI",{});var DBe=s(r7);_ve=n(DBe,"STRONG",{});var H0t=s(_ve);M_r=r(H0t,"electra"),H0t.forEach(t),E_r=r(DBe," \u2014 "),iH=n(DBe,"A",{href:!0});var U0t=s(iH);C_r=r(U0t,"TFElectraModel"),U0t.forEach(t),w_r=r(DBe," (ELECTRA model)"),DBe.forEach(t),A_r=i(D),t7=n(D,"LI",{});var GBe=s(t7);bve=n(GBe,"STRONG",{});var J0t=s(bve);L_r=r(J0t,"flaubert"),J0t.forEach(t),y_r=r(GBe," \u2014 "),dH=n(GBe,"A",{href:!0});var Y0t=s(dH);x_r=r(Y0t,"TFFlaubertModel"),Y0t.forEach(t),$_r=r(GBe," (FlauBERT model)"),GBe.forEach(t),k_r=i(D),zs=n(D,"LI",{});var Uk=s(zs);vve=n(Uk,"STRONG",{});var K0t=s(vve);S_r=r(K0t,"funnel"),K0t.forEach(t),R_r=r(Uk," \u2014 "),cH=n(Uk,"A",{href:!0});var Z0t=s(cH);P_r=r(Z0t,"TFFunnelModel"),Z0t.forEach(t),B_r=r(Uk," or "),fH=n(Uk,"A",{href:!0});var ewt=s(fH);I_r=r(ewt,"TFFunnelBaseModel"),ewt.forEach(t),N_r=r(Uk," (Funnel Transformer model)"),Uk.forEach(t),q_r=i(D),a7=n(D,"LI",{});var OBe=s(a7);Fve=n(OBe,"STRONG",{});var owt=s(Fve);j_r=r(owt,"gpt2"),owt.forEach(t),D_r=r(OBe," \u2014 "),mH=n(OBe,"A",{href:!0});var rwt=s(mH);G_r=r(rwt,"TFGPT2Model"),rwt.forEach(t),O_r=r(OBe," (OpenAI GPT-2 model)"),OBe.forEach(t),V_r=i(D),n7=n(D,"LI",{});var VBe=s(n7);Tve=n(VBe,"STRONG",{});var twt=s(Tve);X_r=r(twt,"gptj"),twt.forEach(t),z_r=r(VBe," \u2014 "),gH=n(VBe,"A",{href:!0});var awt=s(gH);W_r=r(awt,"TFGPTJModel"),awt.forEach(t),Q_r=r(VBe," (GPT-J model)"),VBe.forEach(t),H_r=i(D),s7=n(D,"LI",{});var XBe=s(s7);Mve=n(XBe,"STRONG",{});var nwt=s(Mve);U_r=r(nwt,"hubert"),nwt.forEach(t),J_r=r(XBe," \u2014 "),hH=n(XBe,"A",{href:!0});var swt=s(hH);Y_r=r(swt,"TFHubertModel"),swt.forEach(t),K_r=r(XBe," (Hubert model)"),XBe.forEach(t),Z_r=i(D),l7=n(D,"LI",{});var zBe=s(l7);Eve=n(zBe,"STRONG",{});var lwt=s(Eve);e4r=r(lwt,"layoutlm"),lwt.forEach(t),o4r=r(zBe," \u2014 "),pH=n(zBe,"A",{href:!0});var iwt=s(pH);r4r=r(iwt,"TFLayoutLMModel"),iwt.forEach(t),t4r=r(zBe," (LayoutLM model)"),zBe.forEach(t),a4r=i(D),i7=n(D,"LI",{});var WBe=s(i7);Cve=n(WBe,"STRONG",{});var dwt=s(Cve);n4r=r(dwt,"led"),dwt.forEach(t),s4r=r(WBe," \u2014 "),uH=n(WBe,"A",{href:!0});var cwt=s(uH);l4r=r(cwt,"TFLEDModel"),cwt.forEach(t),i4r=r(WBe," (LED model)"),WBe.forEach(t),d4r=i(D),d7=n(D,"LI",{});var QBe=s(d7);wve=n(QBe,"STRONG",{});var fwt=s(wve);c4r=r(fwt,"longformer"),fwt.forEach(t),f4r=r(QBe," \u2014 "),_H=n(QBe,"A",{href:!0});var mwt=s(_H);m4r=r(mwt,"TFLongformerModel"),mwt.forEach(t),g4r=r(QBe," (Longformer model)"),QBe.forEach(t),h4r=i(D),c7=n(D,"LI",{});var HBe=s(c7);Ave=n(HBe,"STRONG",{});var gwt=s(Ave);p4r=r(gwt,"lxmert"),gwt.forEach(t),u4r=r(HBe," \u2014 "),bH=n(HBe,"A",{href:!0});var hwt=s(bH);_4r=r(hwt,"TFLxmertModel"),hwt.forEach(t),b4r=r(HBe," (LXMERT model)"),HBe.forEach(t),v4r=i(D),f7=n(D,"LI",{});var UBe=s(f7);Lve=n(UBe,"STRONG",{});var pwt=s(Lve);F4r=r(pwt,"marian"),pwt.forEach(t),T4r=r(UBe," \u2014 "),vH=n(UBe,"A",{href:!0});var uwt=s(vH);M4r=r(uwt,"TFMarianModel"),uwt.forEach(t),E4r=r(UBe," (Marian model)"),UBe.forEach(t),C4r=i(D),m7=n(D,"LI",{});var JBe=s(m7);yve=n(JBe,"STRONG",{});var _wt=s(yve);w4r=r(_wt,"mbart"),_wt.forEach(t),A4r=r(JBe," \u2014 "),FH=n(JBe,"A",{href:!0});var bwt=s(FH);L4r=r(bwt,"TFMBartModel"),bwt.forEach(t),y4r=r(JBe," (mBART model)"),JBe.forEach(t),x4r=i(D),g7=n(D,"LI",{});var YBe=s(g7);xve=n(YBe,"STRONG",{});var vwt=s(xve);$4r=r(vwt,"mobilebert"),vwt.forEach(t),k4r=r(YBe," \u2014 "),TH=n(YBe,"A",{href:!0});var Fwt=s(TH);S4r=r(Fwt,"TFMobileBertModel"),Fwt.forEach(t),R4r=r(YBe," (MobileBERT model)"),YBe.forEach(t),P4r=i(D),h7=n(D,"LI",{});var KBe=s(h7);$ve=n(KBe,"STRONG",{});var Twt=s($ve);B4r=r(Twt,"mpnet"),Twt.forEach(t),I4r=r(KBe," \u2014 "),MH=n(KBe,"A",{href:!0});var Mwt=s(MH);N4r=r(Mwt,"TFMPNetModel"),Mwt.forEach(t),q4r=r(KBe," (MPNet model)"),KBe.forEach(t),j4r=i(D),p7=n(D,"LI",{});var ZBe=s(p7);kve=n(ZBe,"STRONG",{});var Ewt=s(kve);D4r=r(Ewt,"mt5"),Ewt.forEach(t),G4r=r(ZBe," \u2014 "),EH=n(ZBe,"A",{href:!0});var Cwt=s(EH);O4r=r(Cwt,"TFMT5Model"),Cwt.forEach(t),V4r=r(ZBe," (MT5 model)"),ZBe.forEach(t),X4r=i(D),u7=n(D,"LI",{});var eIe=s(u7);Sve=n(eIe,"STRONG",{});var wwt=s(Sve);z4r=r(wwt,"openai-gpt"),wwt.forEach(t),W4r=r(eIe," \u2014 "),CH=n(eIe,"A",{href:!0});var Awt=s(CH);Q4r=r(Awt,"TFOpenAIGPTModel"),Awt.forEach(t),H4r=r(eIe," (OpenAI GPT model)"),eIe.forEach(t),U4r=i(D),_7=n(D,"LI",{});var oIe=s(_7);Rve=n(oIe,"STRONG",{});var Lwt=s(Rve);J4r=r(Lwt,"opt"),Lwt.forEach(t),Y4r=r(oIe," \u2014 "),wH=n(oIe,"A",{href:!0});var ywt=s(wH);K4r=r(ywt,"TFOPTModel"),ywt.forEach(t),Z4r=r(oIe," (OPT model)"),oIe.forEach(t),e1r=i(D),b7=n(D,"LI",{});var rIe=s(b7);Pve=n(rIe,"STRONG",{});var xwt=s(Pve);o1r=r(xwt,"pegasus"),xwt.forEach(t),r1r=r(rIe," \u2014 "),AH=n(rIe,"A",{href:!0});var $wt=s(AH);t1r=r($wt,"TFPegasusModel"),$wt.forEach(t),a1r=r(rIe," (Pegasus model)"),rIe.forEach(t),n1r=i(D),v7=n(D,"LI",{});var tIe=s(v7);Bve=n(tIe,"STRONG",{});var kwt=s(Bve);s1r=r(kwt,"rembert"),kwt.forEach(t),l1r=r(tIe," \u2014 "),LH=n(tIe,"A",{href:!0});var Swt=s(LH);i1r=r(Swt,"TFRemBertModel"),Swt.forEach(t),d1r=r(tIe," (RemBERT model)"),tIe.forEach(t),c1r=i(D),F7=n(D,"LI",{});var aIe=s(F7);Ive=n(aIe,"STRONG",{});var Rwt=s(Ive);f1r=r(Rwt,"roberta"),Rwt.forEach(t),m1r=r(aIe," \u2014 "),yH=n(aIe,"A",{href:!0});var Pwt=s(yH);g1r=r(Pwt,"TFRobertaModel"),Pwt.forEach(t),h1r=r(aIe," (RoBERTa model)"),aIe.forEach(t),p1r=i(D),T7=n(D,"LI",{});var nIe=s(T7);Nve=n(nIe,"STRONG",{});var Bwt=s(Nve);u1r=r(Bwt,"roformer"),Bwt.forEach(t),_1r=r(nIe," \u2014 "),xH=n(nIe,"A",{href:!0});var Iwt=s(xH);b1r=r(Iwt,"TFRoFormerModel"),Iwt.forEach(t),v1r=r(nIe," (RoFormer model)"),nIe.forEach(t),F1r=i(D),M7=n(D,"LI",{});var sIe=s(M7);qve=n(sIe,"STRONG",{});var Nwt=s(qve);T1r=r(Nwt,"speech_to_text"),Nwt.forEach(t),M1r=r(sIe," \u2014 "),$H=n(sIe,"A",{href:!0});var qwt=s($H);E1r=r(qwt,"TFSpeech2TextModel"),qwt.forEach(t),C1r=r(sIe," (Speech2Text model)"),sIe.forEach(t),w1r=i(D),E7=n(D,"LI",{});var lIe=s(E7);jve=n(lIe,"STRONG",{});var jwt=s(jve);A1r=r(jwt,"swin"),jwt.forEach(t),L1r=r(lIe," \u2014 "),kH=n(lIe,"A",{href:!0});var Dwt=s(kH);y1r=r(Dwt,"TFSwinModel"),Dwt.forEach(t),x1r=r(lIe," (Swin Transformer model)"),lIe.forEach(t),$1r=i(D),C7=n(D,"LI",{});var iIe=s(C7);Dve=n(iIe,"STRONG",{});var Gwt=s(Dve);k1r=r(Gwt,"t5"),Gwt.forEach(t),S1r=r(iIe," \u2014 "),SH=n(iIe,"A",{href:!0});var Owt=s(SH);R1r=r(Owt,"TFT5Model"),Owt.forEach(t),P1r=r(iIe," (T5 model)"),iIe.forEach(t),B1r=i(D),w7=n(D,"LI",{});var dIe=s(w7);Gve=n(dIe,"STRONG",{});var Vwt=s(Gve);I1r=r(Vwt,"tapas"),Vwt.forEach(t),N1r=r(dIe," \u2014 "),RH=n(dIe,"A",{href:!0});var Xwt=s(RH);q1r=r(Xwt,"TFTapasModel"),Xwt.forEach(t),j1r=r(dIe," (TAPAS model)"),dIe.forEach(t),D1r=i(D),A7=n(D,"LI",{});var cIe=s(A7);Ove=n(cIe,"STRONG",{});var zwt=s(Ove);G1r=r(zwt,"transfo-xl"),zwt.forEach(t),O1r=r(cIe," \u2014 "),PH=n(cIe,"A",{href:!0});var Wwt=s(PH);V1r=r(Wwt,"TFTransfoXLModel"),Wwt.forEach(t),X1r=r(cIe," (Transformer-XL model)"),cIe.forEach(t),z1r=i(D),L7=n(D,"LI",{});var fIe=s(L7);Vve=n(fIe,"STRONG",{});var Qwt=s(Vve);W1r=r(Qwt,"vit"),Qwt.forEach(t),Q1r=r(fIe," \u2014 "),BH=n(fIe,"A",{href:!0});var Hwt=s(BH);H1r=r(Hwt,"TFViTModel"),Hwt.forEach(t),U1r=r(fIe," (ViT model)"),fIe.forEach(t),J1r=i(D),y7=n(D,"LI",{});var mIe=s(y7);Xve=n(mIe,"STRONG",{});var Uwt=s(Xve);Y1r=r(Uwt,"vit_mae"),Uwt.forEach(t),K1r=r(mIe," \u2014 "),IH=n(mIe,"A",{href:!0});var Jwt=s(IH);Z1r=r(Jwt,"TFViTMAEModel"),Jwt.forEach(t),e2r=r(mIe," (ViTMAE model)"),mIe.forEach(t),o2r=i(D),x7=n(D,"LI",{});var gIe=s(x7);zve=n(gIe,"STRONG",{});var Ywt=s(zve);r2r=r(Ywt,"wav2vec2"),Ywt.forEach(t),t2r=r(gIe," \u2014 "),NH=n(gIe,"A",{href:!0});var Kwt=s(NH);a2r=r(Kwt,"TFWav2Vec2Model"),Kwt.forEach(t),n2r=r(gIe," (Wav2Vec2 model)"),gIe.forEach(t),s2r=i(D),$7=n(D,"LI",{});var hIe=s($7);Wve=n(hIe,"STRONG",{});var Zwt=s(Wve);l2r=r(Zwt,"xlm"),Zwt.forEach(t),i2r=r(hIe," \u2014 "),qH=n(hIe,"A",{href:!0});var eAt=s(qH);d2r=r(eAt,"TFXLMModel"),eAt.forEach(t),c2r=r(hIe," (XLM model)"),hIe.forEach(t),f2r=i(D),k7=n(D,"LI",{});var pIe=s(k7);Qve=n(pIe,"STRONG",{});var oAt=s(Qve);m2r=r(oAt,"xlm-roberta"),oAt.forEach(t),g2r=r(pIe," \u2014 "),jH=n(pIe,"A",{href:!0});var rAt=s(jH);h2r=r(rAt,"TFXLMRobertaModel"),rAt.forEach(t),p2r=r(pIe," (XLM-RoBERTa model)"),pIe.forEach(t),u2r=i(D),S7=n(D,"LI",{});var uIe=s(S7);Hve=n(uIe,"STRONG",{});var tAt=s(Hve);_2r=r(tAt,"xlnet"),tAt.forEach(t),b2r=r(uIe," \u2014 "),DH=n(uIe,"A",{href:!0});var aAt=s(DH);v2r=r(aAt,"TFXLNetModel"),aAt.forEach(t),F2r=r(uIe," (XLNet model)"),uIe.forEach(t),D.forEach(t),T2r=i(Cl),T(R7.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),COe=i(f),tc=n(f,"H2",{class:!0});var SXe=s(tc);P7=n(SXe,"A",{id:!0,class:!0,href:!0});var nAt=s(P7);Uve=n(nAt,"SPAN",{});var sAt=s(Uve);T(h9.$$.fragment,sAt),sAt.forEach(t),nAt.forEach(t),M2r=i(SXe),Jve=n(SXe,"SPAN",{});var lAt=s(Jve);E2r=r(lAt,"TFAutoModelForPreTraining"),lAt.forEach(t),SXe.forEach(t),wOe=i(f),er=n(f,"DIV",{class:!0});var wl=s(er);T(p9.$$.fragment,wl),C2r=i(wl),ac=n(wl,"P",{});var are=s(ac);w2r=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GH=n(are,"A",{href:!0});var iAt=s(GH);A2r=r(iAt,"from_pretrained()"),iAt.forEach(t),L2r=r(are," class method or the "),OH=n(are,"A",{href:!0});var dAt=s(OH);y2r=r(dAt,"from_config()"),dAt.forEach(t),x2r=r(are,` class
method.`),are.forEach(t),$2r=i(wl),u9=n(wl,"P",{});var RXe=s(u9);k2r=r(RXe,"This class cannot be instantiated directly using "),Yve=n(RXe,"CODE",{});var cAt=s(Yve);S2r=r(cAt,"__init__()"),cAt.forEach(t),R2r=r(RXe," (throws an error)."),RXe.forEach(t),P2r=i(wl),kt=n(wl,"DIV",{class:!0});var M6=s(kt);T(_9.$$.fragment,M6),B2r=i(M6),Kve=n(M6,"P",{});var fAt=s(Kve);I2r=r(fAt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fAt.forEach(t),N2r=i(M6),nc=n(M6,"P",{});var nre=s(nc);q2r=r(nre,`Note:
Loading a model from its configuration file does `),Zve=n(nre,"STRONG",{});var mAt=s(Zve);j2r=r(mAt,"not"),mAt.forEach(t),D2r=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(nre,"A",{href:!0});var gAt=s(VH);G2r=r(gAt,"from_pretrained()"),gAt.forEach(t),O2r=r(nre," to load the model weights."),nre.forEach(t),V2r=i(M6),T(B7.$$.fragment,M6),M6.forEach(t),X2r=i(wl),yr=n(wl,"DIV",{class:!0});var Al=s(yr);T(b9.$$.fragment,Al),z2r=i(Al),e3e=n(Al,"P",{});var hAt=s(e3e);W2r=r(hAt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hAt.forEach(t),Q2r=i(Al),an=n(Al,"P",{});var E6=s(an);H2r=r(E6,"The model class to instantiate is selected based on the "),o3e=n(E6,"CODE",{});var pAt=s(o3e);U2r=r(pAt,"model_type"),pAt.forEach(t),J2r=r(E6,` property of the config object (either
passed as an argument or loaded from `),r3e=n(E6,"CODE",{});var uAt=s(r3e);Y2r=r(uAt,"pretrained_model_name_or_path"),uAt.forEach(t),K2r=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t3e=n(E6,"CODE",{});var _At=s(t3e);Z2r=r(_At,"pretrained_model_name_or_path"),_At.forEach(t),ebr=r(E6,":"),E6.forEach(t),obr=i(Al),se=n(Al,"UL",{});var le=s(se);I7=n(le,"LI",{});var _Ie=s(I7);a3e=n(_Ie,"STRONG",{});var bAt=s(a3e);rbr=r(bAt,"albert"),bAt.forEach(t),tbr=r(_Ie," \u2014 "),XH=n(_Ie,"A",{href:!0});var vAt=s(XH);abr=r(vAt,"TFAlbertForPreTraining"),vAt.forEach(t),nbr=r(_Ie," (ALBERT model)"),_Ie.forEach(t),sbr=i(le),N7=n(le,"LI",{});var bIe=s(N7);n3e=n(bIe,"STRONG",{});var FAt=s(n3e);lbr=r(FAt,"bart"),FAt.forEach(t),ibr=r(bIe," \u2014 "),zH=n(bIe,"A",{href:!0});var TAt=s(zH);dbr=r(TAt,"TFBartForConditionalGeneration"),TAt.forEach(t),cbr=r(bIe," (BART model)"),bIe.forEach(t),fbr=i(le),q7=n(le,"LI",{});var vIe=s(q7);s3e=n(vIe,"STRONG",{});var MAt=s(s3e);mbr=r(MAt,"bert"),MAt.forEach(t),gbr=r(vIe," \u2014 "),WH=n(vIe,"A",{href:!0});var EAt=s(WH);hbr=r(EAt,"TFBertForPreTraining"),EAt.forEach(t),pbr=r(vIe," (BERT model)"),vIe.forEach(t),ubr=i(le),j7=n(le,"LI",{});var FIe=s(j7);l3e=n(FIe,"STRONG",{});var CAt=s(l3e);_br=r(CAt,"camembert"),CAt.forEach(t),bbr=r(FIe," \u2014 "),QH=n(FIe,"A",{href:!0});var wAt=s(QH);vbr=r(wAt,"TFCamembertForMaskedLM"),wAt.forEach(t),Fbr=r(FIe," (CamemBERT model)"),FIe.forEach(t),Tbr=i(le),D7=n(le,"LI",{});var TIe=s(D7);i3e=n(TIe,"STRONG",{});var AAt=s(i3e);Mbr=r(AAt,"ctrl"),AAt.forEach(t),Ebr=r(TIe," \u2014 "),HH=n(TIe,"A",{href:!0});var LAt=s(HH);Cbr=r(LAt,"TFCTRLLMHeadModel"),LAt.forEach(t),wbr=r(TIe," (CTRL model)"),TIe.forEach(t),Abr=i(le),G7=n(le,"LI",{});var MIe=s(G7);d3e=n(MIe,"STRONG",{});var yAt=s(d3e);Lbr=r(yAt,"distilbert"),yAt.forEach(t),ybr=r(MIe," \u2014 "),UH=n(MIe,"A",{href:!0});var xAt=s(UH);xbr=r(xAt,"TFDistilBertForMaskedLM"),xAt.forEach(t),$br=r(MIe," (DistilBERT model)"),MIe.forEach(t),kbr=i(le),O7=n(le,"LI",{});var EIe=s(O7);c3e=n(EIe,"STRONG",{});var $At=s(c3e);Sbr=r($At,"electra"),$At.forEach(t),Rbr=r(EIe," \u2014 "),JH=n(EIe,"A",{href:!0});var kAt=s(JH);Pbr=r(kAt,"TFElectraForPreTraining"),kAt.forEach(t),Bbr=r(EIe," (ELECTRA model)"),EIe.forEach(t),Ibr=i(le),V7=n(le,"LI",{});var CIe=s(V7);f3e=n(CIe,"STRONG",{});var SAt=s(f3e);Nbr=r(SAt,"flaubert"),SAt.forEach(t),qbr=r(CIe," \u2014 "),YH=n(CIe,"A",{href:!0});var RAt=s(YH);jbr=r(RAt,"TFFlaubertWithLMHeadModel"),RAt.forEach(t),Dbr=r(CIe," (FlauBERT model)"),CIe.forEach(t),Gbr=i(le),X7=n(le,"LI",{});var wIe=s(X7);m3e=n(wIe,"STRONG",{});var PAt=s(m3e);Obr=r(PAt,"funnel"),PAt.forEach(t),Vbr=r(wIe," \u2014 "),KH=n(wIe,"A",{href:!0});var BAt=s(KH);Xbr=r(BAt,"TFFunnelForPreTraining"),BAt.forEach(t),zbr=r(wIe," (Funnel Transformer model)"),wIe.forEach(t),Wbr=i(le),z7=n(le,"LI",{});var AIe=s(z7);g3e=n(AIe,"STRONG",{});var IAt=s(g3e);Qbr=r(IAt,"gpt2"),IAt.forEach(t),Hbr=r(AIe," \u2014 "),ZH=n(AIe,"A",{href:!0});var NAt=s(ZH);Ubr=r(NAt,"TFGPT2LMHeadModel"),NAt.forEach(t),Jbr=r(AIe," (OpenAI GPT-2 model)"),AIe.forEach(t),Ybr=i(le),W7=n(le,"LI",{});var LIe=s(W7);h3e=n(LIe,"STRONG",{});var qAt=s(h3e);Kbr=r(qAt,"layoutlm"),qAt.forEach(t),Zbr=r(LIe," \u2014 "),eU=n(LIe,"A",{href:!0});var jAt=s(eU);evr=r(jAt,"TFLayoutLMForMaskedLM"),jAt.forEach(t),ovr=r(LIe," (LayoutLM model)"),LIe.forEach(t),rvr=i(le),Q7=n(le,"LI",{});var yIe=s(Q7);p3e=n(yIe,"STRONG",{});var DAt=s(p3e);tvr=r(DAt,"lxmert"),DAt.forEach(t),avr=r(yIe," \u2014 "),oU=n(yIe,"A",{href:!0});var GAt=s(oU);nvr=r(GAt,"TFLxmertForPreTraining"),GAt.forEach(t),svr=r(yIe," (LXMERT model)"),yIe.forEach(t),lvr=i(le),H7=n(le,"LI",{});var xIe=s(H7);u3e=n(xIe,"STRONG",{});var OAt=s(u3e);ivr=r(OAt,"mobilebert"),OAt.forEach(t),dvr=r(xIe," \u2014 "),rU=n(xIe,"A",{href:!0});var VAt=s(rU);cvr=r(VAt,"TFMobileBertForPreTraining"),VAt.forEach(t),fvr=r(xIe," (MobileBERT model)"),xIe.forEach(t),mvr=i(le),U7=n(le,"LI",{});var $Ie=s(U7);_3e=n($Ie,"STRONG",{});var XAt=s(_3e);gvr=r(XAt,"mpnet"),XAt.forEach(t),hvr=r($Ie," \u2014 "),tU=n($Ie,"A",{href:!0});var zAt=s(tU);pvr=r(zAt,"TFMPNetForMaskedLM"),zAt.forEach(t),uvr=r($Ie," (MPNet model)"),$Ie.forEach(t),_vr=i(le),J7=n(le,"LI",{});var kIe=s(J7);b3e=n(kIe,"STRONG",{});var WAt=s(b3e);bvr=r(WAt,"openai-gpt"),WAt.forEach(t),vvr=r(kIe," \u2014 "),aU=n(kIe,"A",{href:!0});var QAt=s(aU);Fvr=r(QAt,"TFOpenAIGPTLMHeadModel"),QAt.forEach(t),Tvr=r(kIe," (OpenAI GPT model)"),kIe.forEach(t),Mvr=i(le),Y7=n(le,"LI",{});var SIe=s(Y7);v3e=n(SIe,"STRONG",{});var HAt=s(v3e);Evr=r(HAt,"roberta"),HAt.forEach(t),Cvr=r(SIe," \u2014 "),nU=n(SIe,"A",{href:!0});var UAt=s(nU);wvr=r(UAt,"TFRobertaForMaskedLM"),UAt.forEach(t),Avr=r(SIe," (RoBERTa model)"),SIe.forEach(t),Lvr=i(le),K7=n(le,"LI",{});var RIe=s(K7);F3e=n(RIe,"STRONG",{});var JAt=s(F3e);yvr=r(JAt,"t5"),JAt.forEach(t),xvr=r(RIe," \u2014 "),sU=n(RIe,"A",{href:!0});var YAt=s(sU);$vr=r(YAt,"TFT5ForConditionalGeneration"),YAt.forEach(t),kvr=r(RIe," (T5 model)"),RIe.forEach(t),Svr=i(le),Z7=n(le,"LI",{});var PIe=s(Z7);T3e=n(PIe,"STRONG",{});var KAt=s(T3e);Rvr=r(KAt,"tapas"),KAt.forEach(t),Pvr=r(PIe," \u2014 "),lU=n(PIe,"A",{href:!0});var ZAt=s(lU);Bvr=r(ZAt,"TFTapasForMaskedLM"),ZAt.forEach(t),Ivr=r(PIe," (TAPAS model)"),PIe.forEach(t),Nvr=i(le),eM=n(le,"LI",{});var BIe=s(eM);M3e=n(BIe,"STRONG",{});var e6t=s(M3e);qvr=r(e6t,"transfo-xl"),e6t.forEach(t),jvr=r(BIe," \u2014 "),iU=n(BIe,"A",{href:!0});var o6t=s(iU);Dvr=r(o6t,"TFTransfoXLLMHeadModel"),o6t.forEach(t),Gvr=r(BIe," (Transformer-XL model)"),BIe.forEach(t),Ovr=i(le),oM=n(le,"LI",{});var IIe=s(oM);E3e=n(IIe,"STRONG",{});var r6t=s(E3e);Vvr=r(r6t,"vit_mae"),r6t.forEach(t),Xvr=r(IIe," \u2014 "),dU=n(IIe,"A",{href:!0});var t6t=s(dU);zvr=r(t6t,"TFViTMAEForPreTraining"),t6t.forEach(t),Wvr=r(IIe," (ViTMAE model)"),IIe.forEach(t),Qvr=i(le),rM=n(le,"LI",{});var NIe=s(rM);C3e=n(NIe,"STRONG",{});var a6t=s(C3e);Hvr=r(a6t,"xlm"),a6t.forEach(t),Uvr=r(NIe," \u2014 "),cU=n(NIe,"A",{href:!0});var n6t=s(cU);Jvr=r(n6t,"TFXLMWithLMHeadModel"),n6t.forEach(t),Yvr=r(NIe," (XLM model)"),NIe.forEach(t),Kvr=i(le),tM=n(le,"LI",{});var qIe=s(tM);w3e=n(qIe,"STRONG",{});var s6t=s(w3e);Zvr=r(s6t,"xlm-roberta"),s6t.forEach(t),e3r=r(qIe," \u2014 "),fU=n(qIe,"A",{href:!0});var l6t=s(fU);o3r=r(l6t,"TFXLMRobertaForMaskedLM"),l6t.forEach(t),r3r=r(qIe," (XLM-RoBERTa model)"),qIe.forEach(t),t3r=i(le),aM=n(le,"LI",{});var jIe=s(aM);A3e=n(jIe,"STRONG",{});var i6t=s(A3e);a3r=r(i6t,"xlnet"),i6t.forEach(t),n3r=r(jIe," \u2014 "),mU=n(jIe,"A",{href:!0});var d6t=s(mU);s3r=r(d6t,"TFXLNetLMHeadModel"),d6t.forEach(t),l3r=r(jIe," (XLNet model)"),jIe.forEach(t),le.forEach(t),i3r=i(Al),T(nM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),AOe=i(f),sc=n(f,"H2",{class:!0});var PXe=s(sc);sM=n(PXe,"A",{id:!0,class:!0,href:!0});var c6t=s(sM);L3e=n(c6t,"SPAN",{});var f6t=s(L3e);T(v9.$$.fragment,f6t),f6t.forEach(t),c6t.forEach(t),d3r=i(PXe),y3e=n(PXe,"SPAN",{});var m6t=s(y3e);c3r=r(m6t,"TFAutoModelForCausalLM"),m6t.forEach(t),PXe.forEach(t),LOe=i(f),or=n(f,"DIV",{class:!0});var Ll=s(or);T(F9.$$.fragment,Ll),f3r=i(Ll),lc=n(Ll,"P",{});var sre=s(lc);m3r=r(sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gU=n(sre,"A",{href:!0});var g6t=s(gU);g3r=r(g6t,"from_pretrained()"),g6t.forEach(t),h3r=r(sre," class method or the "),hU=n(sre,"A",{href:!0});var h6t=s(hU);p3r=r(h6t,"from_config()"),h6t.forEach(t),u3r=r(sre,` class
method.`),sre.forEach(t),_3r=i(Ll),T9=n(Ll,"P",{});var BXe=s(T9);b3r=r(BXe,"This class cannot be instantiated directly using "),x3e=n(BXe,"CODE",{});var p6t=s(x3e);v3r=r(p6t,"__init__()"),p6t.forEach(t),F3r=r(BXe," (throws an error)."),BXe.forEach(t),T3r=i(Ll),St=n(Ll,"DIV",{class:!0});var C6=s(St);T(M9.$$.fragment,C6),M3r=i(C6),$3e=n(C6,"P",{});var u6t=s($3e);E3r=r(u6t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),u6t.forEach(t),C3r=i(C6),ic=n(C6,"P",{});var lre=s(ic);w3r=r(lre,`Note:
Loading a model from its configuration file does `),k3e=n(lre,"STRONG",{});var _6t=s(k3e);A3r=r(_6t,"not"),_6t.forEach(t),L3r=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(lre,"A",{href:!0});var b6t=s(pU);y3r=r(b6t,"from_pretrained()"),b6t.forEach(t),x3r=r(lre," to load the model weights."),lre.forEach(t),$3r=i(C6),T(lM.$$.fragment,C6),C6.forEach(t),k3r=i(Ll),xr=n(Ll,"DIV",{class:!0});var yl=s(xr);T(E9.$$.fragment,yl),S3r=i(yl),S3e=n(yl,"P",{});var v6t=s(S3e);R3r=r(v6t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),v6t.forEach(t),P3r=i(yl),nn=n(yl,"P",{});var w6=s(nn);B3r=r(w6,"The model class to instantiate is selected based on the "),R3e=n(w6,"CODE",{});var F6t=s(R3e);I3r=r(F6t,"model_type"),F6t.forEach(t),N3r=r(w6,` property of the config object (either
passed as an argument or loaded from `),P3e=n(w6,"CODE",{});var T6t=s(P3e);q3r=r(T6t,"pretrained_model_name_or_path"),T6t.forEach(t),j3r=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=n(w6,"CODE",{});var M6t=s(B3e);D3r=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),G3r=r(w6,":"),w6.forEach(t),O3r=i(yl),Me=n(yl,"UL",{});var Ce=s(Me);iM=n(Ce,"LI",{});var DIe=s(iM);I3e=n(DIe,"STRONG",{});var E6t=s(I3e);V3r=r(E6t,"bert"),E6t.forEach(t),X3r=r(DIe," \u2014 "),uU=n(DIe,"A",{href:!0});var C6t=s(uU);z3r=r(C6t,"TFBertLMHeadModel"),C6t.forEach(t),W3r=r(DIe," (BERT model)"),DIe.forEach(t),Q3r=i(Ce),dM=n(Ce,"LI",{});var GIe=s(dM);N3e=n(GIe,"STRONG",{});var w6t=s(N3e);H3r=r(w6t,"camembert"),w6t.forEach(t),U3r=r(GIe," \u2014 "),_U=n(GIe,"A",{href:!0});var A6t=s(_U);J3r=r(A6t,"TFCamembertForCausalLM"),A6t.forEach(t),Y3r=r(GIe," (CamemBERT model)"),GIe.forEach(t),K3r=i(Ce),cM=n(Ce,"LI",{});var OIe=s(cM);q3e=n(OIe,"STRONG",{});var L6t=s(q3e);Z3r=r(L6t,"ctrl"),L6t.forEach(t),eFr=r(OIe," \u2014 "),bU=n(OIe,"A",{href:!0});var y6t=s(bU);oFr=r(y6t,"TFCTRLLMHeadModel"),y6t.forEach(t),rFr=r(OIe," (CTRL model)"),OIe.forEach(t),tFr=i(Ce),fM=n(Ce,"LI",{});var VIe=s(fM);j3e=n(VIe,"STRONG",{});var x6t=s(j3e);aFr=r(x6t,"gpt2"),x6t.forEach(t),nFr=r(VIe," \u2014 "),vU=n(VIe,"A",{href:!0});var $6t=s(vU);sFr=r($6t,"TFGPT2LMHeadModel"),$6t.forEach(t),lFr=r(VIe," (OpenAI GPT-2 model)"),VIe.forEach(t),iFr=i(Ce),mM=n(Ce,"LI",{});var XIe=s(mM);D3e=n(XIe,"STRONG",{});var k6t=s(D3e);dFr=r(k6t,"gptj"),k6t.forEach(t),cFr=r(XIe," \u2014 "),FU=n(XIe,"A",{href:!0});var S6t=s(FU);fFr=r(S6t,"TFGPTJForCausalLM"),S6t.forEach(t),mFr=r(XIe," (GPT-J model)"),XIe.forEach(t),gFr=i(Ce),gM=n(Ce,"LI",{});var zIe=s(gM);G3e=n(zIe,"STRONG",{});var R6t=s(G3e);hFr=r(R6t,"openai-gpt"),R6t.forEach(t),pFr=r(zIe," \u2014 "),TU=n(zIe,"A",{href:!0});var P6t=s(TU);uFr=r(P6t,"TFOpenAIGPTLMHeadModel"),P6t.forEach(t),_Fr=r(zIe," (OpenAI GPT model)"),zIe.forEach(t),bFr=i(Ce),hM=n(Ce,"LI",{});var WIe=s(hM);O3e=n(WIe,"STRONG",{});var B6t=s(O3e);vFr=r(B6t,"opt"),B6t.forEach(t),FFr=r(WIe," \u2014 "),MU=n(WIe,"A",{href:!0});var I6t=s(MU);TFr=r(I6t,"TFOPTForCausalLM"),I6t.forEach(t),MFr=r(WIe," (OPT model)"),WIe.forEach(t),EFr=i(Ce),pM=n(Ce,"LI",{});var QIe=s(pM);V3e=n(QIe,"STRONG",{});var N6t=s(V3e);CFr=r(N6t,"rembert"),N6t.forEach(t),wFr=r(QIe," \u2014 "),EU=n(QIe,"A",{href:!0});var q6t=s(EU);AFr=r(q6t,"TFRemBertForCausalLM"),q6t.forEach(t),LFr=r(QIe," (RemBERT model)"),QIe.forEach(t),yFr=i(Ce),uM=n(Ce,"LI",{});var HIe=s(uM);X3e=n(HIe,"STRONG",{});var j6t=s(X3e);xFr=r(j6t,"roberta"),j6t.forEach(t),$Fr=r(HIe," \u2014 "),CU=n(HIe,"A",{href:!0});var D6t=s(CU);kFr=r(D6t,"TFRobertaForCausalLM"),D6t.forEach(t),SFr=r(HIe," (RoBERTa model)"),HIe.forEach(t),RFr=i(Ce),_M=n(Ce,"LI",{});var UIe=s(_M);z3e=n(UIe,"STRONG",{});var G6t=s(z3e);PFr=r(G6t,"roformer"),G6t.forEach(t),BFr=r(UIe," \u2014 "),wU=n(UIe,"A",{href:!0});var O6t=s(wU);IFr=r(O6t,"TFRoFormerForCausalLM"),O6t.forEach(t),NFr=r(UIe," (RoFormer model)"),UIe.forEach(t),qFr=i(Ce),bM=n(Ce,"LI",{});var JIe=s(bM);W3e=n(JIe,"STRONG",{});var V6t=s(W3e);jFr=r(V6t,"transfo-xl"),V6t.forEach(t),DFr=r(JIe," \u2014 "),AU=n(JIe,"A",{href:!0});var X6t=s(AU);GFr=r(X6t,"TFTransfoXLLMHeadModel"),X6t.forEach(t),OFr=r(JIe," (Transformer-XL model)"),JIe.forEach(t),VFr=i(Ce),vM=n(Ce,"LI",{});var YIe=s(vM);Q3e=n(YIe,"STRONG",{});var z6t=s(Q3e);XFr=r(z6t,"xlm"),z6t.forEach(t),zFr=r(YIe," \u2014 "),LU=n(YIe,"A",{href:!0});var W6t=s(LU);WFr=r(W6t,"TFXLMWithLMHeadModel"),W6t.forEach(t),QFr=r(YIe," (XLM model)"),YIe.forEach(t),HFr=i(Ce),FM=n(Ce,"LI",{});var KIe=s(FM);H3e=n(KIe,"STRONG",{});var Q6t=s(H3e);UFr=r(Q6t,"xlnet"),Q6t.forEach(t),JFr=r(KIe," \u2014 "),yU=n(KIe,"A",{href:!0});var H6t=s(yU);YFr=r(H6t,"TFXLNetLMHeadModel"),H6t.forEach(t),KFr=r(KIe," (XLNet model)"),KIe.forEach(t),Ce.forEach(t),ZFr=i(yl),T(TM.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),yOe=i(f),dc=n(f,"H2",{class:!0});var IXe=s(dc);MM=n(IXe,"A",{id:!0,class:!0,href:!0});var U6t=s(MM);U3e=n(U6t,"SPAN",{});var J6t=s(U3e);T(C9.$$.fragment,J6t),J6t.forEach(t),U6t.forEach(t),eTr=i(IXe),J3e=n(IXe,"SPAN",{});var Y6t=s(J3e);oTr=r(Y6t,"TFAutoModelForImageClassification"),Y6t.forEach(t),IXe.forEach(t),xOe=i(f),rr=n(f,"DIV",{class:!0});var xl=s(rr);T(w9.$$.fragment,xl),rTr=i(xl),cc=n(xl,"P",{});var ire=s(cc);tTr=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xU=n(ire,"A",{href:!0});var K6t=s(xU);aTr=r(K6t,"from_pretrained()"),K6t.forEach(t),nTr=r(ire," class method or the "),$U=n(ire,"A",{href:!0});var Z6t=s($U);sTr=r(Z6t,"from_config()"),Z6t.forEach(t),lTr=r(ire,` class
method.`),ire.forEach(t),iTr=i(xl),A9=n(xl,"P",{});var NXe=s(A9);dTr=r(NXe,"This class cannot be instantiated directly using "),Y3e=n(NXe,"CODE",{});var eLt=s(Y3e);cTr=r(eLt,"__init__()"),eLt.forEach(t),fTr=r(NXe," (throws an error)."),NXe.forEach(t),mTr=i(xl),Rt=n(xl,"DIV",{class:!0});var A6=s(Rt);T(L9.$$.fragment,A6),gTr=i(A6),K3e=n(A6,"P",{});var oLt=s(K3e);hTr=r(oLt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),oLt.forEach(t),pTr=i(A6),fc=n(A6,"P",{});var dre=s(fc);uTr=r(dre,`Note:
Loading a model from its configuration file does `),Z3e=n(dre,"STRONG",{});var rLt=s(Z3e);_Tr=r(rLt,"not"),rLt.forEach(t),bTr=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=n(dre,"A",{href:!0});var tLt=s(kU);vTr=r(tLt,"from_pretrained()"),tLt.forEach(t),FTr=r(dre," to load the model weights."),dre.forEach(t),TTr=i(A6),T(EM.$$.fragment,A6),A6.forEach(t),MTr=i(xl),$r=n(xl,"DIV",{class:!0});var $l=s($r);T(y9.$$.fragment,$l),ETr=i($l),eFe=n($l,"P",{});var aLt=s(eFe);CTr=r(aLt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),aLt.forEach(t),wTr=i($l),sn=n($l,"P",{});var L6=s(sn);ATr=r(L6,"The model class to instantiate is selected based on the "),oFe=n(L6,"CODE",{});var nLt=s(oFe);LTr=r(nLt,"model_type"),nLt.forEach(t),yTr=r(L6,` property of the config object (either
passed as an argument or loaded from `),rFe=n(L6,"CODE",{});var sLt=s(rFe);xTr=r(sLt,"pretrained_model_name_or_path"),sLt.forEach(t),$Tr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=n(L6,"CODE",{});var lLt=s(tFe);kTr=r(lLt,"pretrained_model_name_or_path"),lLt.forEach(t),STr=r(L6,":"),L6.forEach(t),RTr=i($l),ln=n($l,"UL",{});var y6=s(ln);CM=n(y6,"LI",{});var ZIe=s(CM);aFe=n(ZIe,"STRONG",{});var iLt=s(aFe);PTr=r(iLt,"convnext"),iLt.forEach(t),BTr=r(ZIe," \u2014 "),SU=n(ZIe,"A",{href:!0});var dLt=s(SU);ITr=r(dLt,"TFConvNextForImageClassification"),dLt.forEach(t),NTr=r(ZIe," (ConvNeXT model)"),ZIe.forEach(t),qTr=i(y6),wM=n(y6,"LI",{});var eNe=s(wM);nFe=n(eNe,"STRONG",{});var cLt=s(nFe);jTr=r(cLt,"data2vec-vision"),cLt.forEach(t),DTr=r(eNe," \u2014 "),RU=n(eNe,"A",{href:!0});var fLt=s(RU);GTr=r(fLt,"TFData2VecVisionForImageClassification"),fLt.forEach(t),OTr=r(eNe," (Data2VecVision model)"),eNe.forEach(t),VTr=i(y6),AM=n(y6,"LI",{});var oNe=s(AM);sFe=n(oNe,"STRONG",{});var mLt=s(sFe);XTr=r(mLt,"swin"),mLt.forEach(t),zTr=r(oNe," \u2014 "),PU=n(oNe,"A",{href:!0});var gLt=s(PU);WTr=r(gLt,"TFSwinForImageClassification"),gLt.forEach(t),QTr=r(oNe," (Swin Transformer model)"),oNe.forEach(t),HTr=i(y6),LM=n(y6,"LI",{});var rNe=s(LM);lFe=n(rNe,"STRONG",{});var hLt=s(lFe);UTr=r(hLt,"vit"),hLt.forEach(t),JTr=r(rNe," \u2014 "),BU=n(rNe,"A",{href:!0});var pLt=s(BU);YTr=r(pLt,"TFViTForImageClassification"),pLt.forEach(t),KTr=r(rNe," (ViT model)"),rNe.forEach(t),y6.forEach(t),ZTr=i($l),T(yM.$$.fragment,$l),$l.forEach(t),xl.forEach(t),$Oe=i(f),mc=n(f,"H2",{class:!0});var qXe=s(mc);xM=n(qXe,"A",{id:!0,class:!0,href:!0});var uLt=s(xM);iFe=n(uLt,"SPAN",{});var _Lt=s(iFe);T(x9.$$.fragment,_Lt),_Lt.forEach(t),uLt.forEach(t),e7r=i(qXe),dFe=n(qXe,"SPAN",{});var bLt=s(dFe);o7r=r(bLt,"TFAutoModelForMaskedLM"),bLt.forEach(t),qXe.forEach(t),kOe=i(f),tr=n(f,"DIV",{class:!0});var kl=s(tr);T($9.$$.fragment,kl),r7r=i(kl),gc=n(kl,"P",{});var cre=s(gc);t7r=r(cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IU=n(cre,"A",{href:!0});var vLt=s(IU);a7r=r(vLt,"from_pretrained()"),vLt.forEach(t),n7r=r(cre," class method or the "),NU=n(cre,"A",{href:!0});var FLt=s(NU);s7r=r(FLt,"from_config()"),FLt.forEach(t),l7r=r(cre,` class
method.`),cre.forEach(t),i7r=i(kl),k9=n(kl,"P",{});var jXe=s(k9);d7r=r(jXe,"This class cannot be instantiated directly using "),cFe=n(jXe,"CODE",{});var TLt=s(cFe);c7r=r(TLt,"__init__()"),TLt.forEach(t),f7r=r(jXe," (throws an error)."),jXe.forEach(t),m7r=i(kl),Pt=n(kl,"DIV",{class:!0});var x6=s(Pt);T(S9.$$.fragment,x6),g7r=i(x6),fFe=n(x6,"P",{});var MLt=s(fFe);h7r=r(MLt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),MLt.forEach(t),p7r=i(x6),hc=n(x6,"P",{});var fre=s(hc);u7r=r(fre,`Note:
Loading a model from its configuration file does `),mFe=n(fre,"STRONG",{});var ELt=s(mFe);_7r=r(ELt,"not"),ELt.forEach(t),b7r=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=n(fre,"A",{href:!0});var CLt=s(qU);v7r=r(CLt,"from_pretrained()"),CLt.forEach(t),F7r=r(fre," to load the model weights."),fre.forEach(t),T7r=i(x6),T($M.$$.fragment,x6),x6.forEach(t),M7r=i(kl),kr=n(kl,"DIV",{class:!0});var Sl=s(kr);T(R9.$$.fragment,Sl),E7r=i(Sl),gFe=n(Sl,"P",{});var wLt=s(gFe);C7r=r(wLt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wLt.forEach(t),w7r=i(Sl),dn=n(Sl,"P",{});var $6=s(dn);A7r=r($6,"The model class to instantiate is selected based on the "),hFe=n($6,"CODE",{});var ALt=s(hFe);L7r=r(ALt,"model_type"),ALt.forEach(t),y7r=r($6,` property of the config object (either
passed as an argument or loaded from `),pFe=n($6,"CODE",{});var LLt=s(pFe);x7r=r(LLt,"pretrained_model_name_or_path"),LLt.forEach(t),$7r=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=n($6,"CODE",{});var yLt=s(uFe);k7r=r(yLt,"pretrained_model_name_or_path"),yLt.forEach(t),S7r=r($6,":"),$6.forEach(t),R7r=i(Sl),ie=n(Sl,"UL",{});var fe=s(ie);kM=n(fe,"LI",{});var tNe=s(kM);_Fe=n(tNe,"STRONG",{});var xLt=s(_Fe);P7r=r(xLt,"albert"),xLt.forEach(t),B7r=r(tNe," \u2014 "),jU=n(tNe,"A",{href:!0});var $Lt=s(jU);I7r=r($Lt,"TFAlbertForMaskedLM"),$Lt.forEach(t),N7r=r(tNe," (ALBERT model)"),tNe.forEach(t),q7r=i(fe),SM=n(fe,"LI",{});var aNe=s(SM);bFe=n(aNe,"STRONG",{});var kLt=s(bFe);j7r=r(kLt,"bert"),kLt.forEach(t),D7r=r(aNe," \u2014 "),DU=n(aNe,"A",{href:!0});var SLt=s(DU);G7r=r(SLt,"TFBertForMaskedLM"),SLt.forEach(t),O7r=r(aNe," (BERT model)"),aNe.forEach(t),V7r=i(fe),RM=n(fe,"LI",{});var nNe=s(RM);vFe=n(nNe,"STRONG",{});var RLt=s(vFe);X7r=r(RLt,"camembert"),RLt.forEach(t),z7r=r(nNe," \u2014 "),GU=n(nNe,"A",{href:!0});var PLt=s(GU);W7r=r(PLt,"TFCamembertForMaskedLM"),PLt.forEach(t),Q7r=r(nNe," (CamemBERT model)"),nNe.forEach(t),H7r=i(fe),PM=n(fe,"LI",{});var sNe=s(PM);FFe=n(sNe,"STRONG",{});var BLt=s(FFe);U7r=r(BLt,"convbert"),BLt.forEach(t),J7r=r(sNe," \u2014 "),OU=n(sNe,"A",{href:!0});var ILt=s(OU);Y7r=r(ILt,"TFConvBertForMaskedLM"),ILt.forEach(t),K7r=r(sNe," (ConvBERT model)"),sNe.forEach(t),Z7r=i(fe),BM=n(fe,"LI",{});var lNe=s(BM);TFe=n(lNe,"STRONG",{});var NLt=s(TFe);eMr=r(NLt,"deberta"),NLt.forEach(t),oMr=r(lNe," \u2014 "),VU=n(lNe,"A",{href:!0});var qLt=s(VU);rMr=r(qLt,"TFDebertaForMaskedLM"),qLt.forEach(t),tMr=r(lNe," (DeBERTa model)"),lNe.forEach(t),aMr=i(fe),IM=n(fe,"LI",{});var iNe=s(IM);MFe=n(iNe,"STRONG",{});var jLt=s(MFe);nMr=r(jLt,"deberta-v2"),jLt.forEach(t),sMr=r(iNe," \u2014 "),XU=n(iNe,"A",{href:!0});var DLt=s(XU);lMr=r(DLt,"TFDebertaV2ForMaskedLM"),DLt.forEach(t),iMr=r(iNe," (DeBERTa-v2 model)"),iNe.forEach(t),dMr=i(fe),NM=n(fe,"LI",{});var dNe=s(NM);EFe=n(dNe,"STRONG",{});var GLt=s(EFe);cMr=r(GLt,"distilbert"),GLt.forEach(t),fMr=r(dNe," \u2014 "),zU=n(dNe,"A",{href:!0});var OLt=s(zU);mMr=r(OLt,"TFDistilBertForMaskedLM"),OLt.forEach(t),gMr=r(dNe," (DistilBERT model)"),dNe.forEach(t),hMr=i(fe),qM=n(fe,"LI",{});var cNe=s(qM);CFe=n(cNe,"STRONG",{});var VLt=s(CFe);pMr=r(VLt,"electra"),VLt.forEach(t),uMr=r(cNe," \u2014 "),WU=n(cNe,"A",{href:!0});var XLt=s(WU);_Mr=r(XLt,"TFElectraForMaskedLM"),XLt.forEach(t),bMr=r(cNe," (ELECTRA model)"),cNe.forEach(t),vMr=i(fe),jM=n(fe,"LI",{});var fNe=s(jM);wFe=n(fNe,"STRONG",{});var zLt=s(wFe);FMr=r(zLt,"flaubert"),zLt.forEach(t),TMr=r(fNe," \u2014 "),QU=n(fNe,"A",{href:!0});var WLt=s(QU);MMr=r(WLt,"TFFlaubertWithLMHeadModel"),WLt.forEach(t),EMr=r(fNe," (FlauBERT model)"),fNe.forEach(t),CMr=i(fe),DM=n(fe,"LI",{});var mNe=s(DM);AFe=n(mNe,"STRONG",{});var QLt=s(AFe);wMr=r(QLt,"funnel"),QLt.forEach(t),AMr=r(mNe," \u2014 "),HU=n(mNe,"A",{href:!0});var HLt=s(HU);LMr=r(HLt,"TFFunnelForMaskedLM"),HLt.forEach(t),yMr=r(mNe," (Funnel Transformer model)"),mNe.forEach(t),xMr=i(fe),GM=n(fe,"LI",{});var gNe=s(GM);LFe=n(gNe,"STRONG",{});var ULt=s(LFe);$Mr=r(ULt,"layoutlm"),ULt.forEach(t),kMr=r(gNe," \u2014 "),UU=n(gNe,"A",{href:!0});var JLt=s(UU);SMr=r(JLt,"TFLayoutLMForMaskedLM"),JLt.forEach(t),RMr=r(gNe," (LayoutLM model)"),gNe.forEach(t),PMr=i(fe),OM=n(fe,"LI",{});var hNe=s(OM);yFe=n(hNe,"STRONG",{});var YLt=s(yFe);BMr=r(YLt,"longformer"),YLt.forEach(t),IMr=r(hNe," \u2014 "),JU=n(hNe,"A",{href:!0});var KLt=s(JU);NMr=r(KLt,"TFLongformerForMaskedLM"),KLt.forEach(t),qMr=r(hNe," (Longformer model)"),hNe.forEach(t),jMr=i(fe),VM=n(fe,"LI",{});var pNe=s(VM);xFe=n(pNe,"STRONG",{});var ZLt=s(xFe);DMr=r(ZLt,"mobilebert"),ZLt.forEach(t),GMr=r(pNe," \u2014 "),YU=n(pNe,"A",{href:!0});var eyt=s(YU);OMr=r(eyt,"TFMobileBertForMaskedLM"),eyt.forEach(t),VMr=r(pNe," (MobileBERT model)"),pNe.forEach(t),XMr=i(fe),XM=n(fe,"LI",{});var uNe=s(XM);$Fe=n(uNe,"STRONG",{});var oyt=s($Fe);zMr=r(oyt,"mpnet"),oyt.forEach(t),WMr=r(uNe," \u2014 "),KU=n(uNe,"A",{href:!0});var ryt=s(KU);QMr=r(ryt,"TFMPNetForMaskedLM"),ryt.forEach(t),HMr=r(uNe," (MPNet model)"),uNe.forEach(t),UMr=i(fe),zM=n(fe,"LI",{});var _Ne=s(zM);kFe=n(_Ne,"STRONG",{});var tyt=s(kFe);JMr=r(tyt,"rembert"),tyt.forEach(t),YMr=r(_Ne," \u2014 "),ZU=n(_Ne,"A",{href:!0});var ayt=s(ZU);KMr=r(ayt,"TFRemBertForMaskedLM"),ayt.forEach(t),ZMr=r(_Ne," (RemBERT model)"),_Ne.forEach(t),eEr=i(fe),WM=n(fe,"LI",{});var bNe=s(WM);SFe=n(bNe,"STRONG",{});var nyt=s(SFe);oEr=r(nyt,"roberta"),nyt.forEach(t),rEr=r(bNe," \u2014 "),eJ=n(bNe,"A",{href:!0});var syt=s(eJ);tEr=r(syt,"TFRobertaForMaskedLM"),syt.forEach(t),aEr=r(bNe," (RoBERTa model)"),bNe.forEach(t),nEr=i(fe),QM=n(fe,"LI",{});var vNe=s(QM);RFe=n(vNe,"STRONG",{});var lyt=s(RFe);sEr=r(lyt,"roformer"),lyt.forEach(t),lEr=r(vNe," \u2014 "),oJ=n(vNe,"A",{href:!0});var iyt=s(oJ);iEr=r(iyt,"TFRoFormerForMaskedLM"),iyt.forEach(t),dEr=r(vNe," (RoFormer model)"),vNe.forEach(t),cEr=i(fe),HM=n(fe,"LI",{});var FNe=s(HM);PFe=n(FNe,"STRONG",{});var dyt=s(PFe);fEr=r(dyt,"tapas"),dyt.forEach(t),mEr=r(FNe," \u2014 "),rJ=n(FNe,"A",{href:!0});var cyt=s(rJ);gEr=r(cyt,"TFTapasForMaskedLM"),cyt.forEach(t),hEr=r(FNe," (TAPAS model)"),FNe.forEach(t),pEr=i(fe),UM=n(fe,"LI",{});var TNe=s(UM);BFe=n(TNe,"STRONG",{});var fyt=s(BFe);uEr=r(fyt,"xlm"),fyt.forEach(t),_Er=r(TNe," \u2014 "),tJ=n(TNe,"A",{href:!0});var myt=s(tJ);bEr=r(myt,"TFXLMWithLMHeadModel"),myt.forEach(t),vEr=r(TNe," (XLM model)"),TNe.forEach(t),FEr=i(fe),JM=n(fe,"LI",{});var MNe=s(JM);IFe=n(MNe,"STRONG",{});var gyt=s(IFe);TEr=r(gyt,"xlm-roberta"),gyt.forEach(t),MEr=r(MNe," \u2014 "),aJ=n(MNe,"A",{href:!0});var hyt=s(aJ);EEr=r(hyt,"TFXLMRobertaForMaskedLM"),hyt.forEach(t),CEr=r(MNe," (XLM-RoBERTa model)"),MNe.forEach(t),fe.forEach(t),wEr=i(Sl),T(YM.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),SOe=i(f),pc=n(f,"H2",{class:!0});var DXe=s(pc);KM=n(DXe,"A",{id:!0,class:!0,href:!0});var pyt=s(KM);NFe=n(pyt,"SPAN",{});var uyt=s(NFe);T(P9.$$.fragment,uyt),uyt.forEach(t),pyt.forEach(t),AEr=i(DXe),qFe=n(DXe,"SPAN",{});var _yt=s(qFe);LEr=r(_yt,"TFAutoModelForSeq2SeqLM"),_yt.forEach(t),DXe.forEach(t),ROe=i(f),ar=n(f,"DIV",{class:!0});var Rl=s(ar);T(B9.$$.fragment,Rl),yEr=i(Rl),uc=n(Rl,"P",{});var mre=s(uc);xEr=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nJ=n(mre,"A",{href:!0});var byt=s(nJ);$Er=r(byt,"from_pretrained()"),byt.forEach(t),kEr=r(mre," class method or the "),sJ=n(mre,"A",{href:!0});var vyt=s(sJ);SEr=r(vyt,"from_config()"),vyt.forEach(t),REr=r(mre,` class
method.`),mre.forEach(t),PEr=i(Rl),I9=n(Rl,"P",{});var GXe=s(I9);BEr=r(GXe,"This class cannot be instantiated directly using "),jFe=n(GXe,"CODE",{});var Fyt=s(jFe);IEr=r(Fyt,"__init__()"),Fyt.forEach(t),NEr=r(GXe," (throws an error)."),GXe.forEach(t),qEr=i(Rl),Bt=n(Rl,"DIV",{class:!0});var k6=s(Bt);T(N9.$$.fragment,k6),jEr=i(k6),DFe=n(k6,"P",{});var Tyt=s(DFe);DEr=r(Tyt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Tyt.forEach(t),GEr=i(k6),_c=n(k6,"P",{});var gre=s(_c);OEr=r(gre,`Note:
Loading a model from its configuration file does `),GFe=n(gre,"STRONG",{});var Myt=s(GFe);VEr=r(Myt,"not"),Myt.forEach(t),XEr=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=n(gre,"A",{href:!0});var Eyt=s(lJ);zEr=r(Eyt,"from_pretrained()"),Eyt.forEach(t),WEr=r(gre," to load the model weights."),gre.forEach(t),QEr=i(k6),T(ZM.$$.fragment,k6),k6.forEach(t),HEr=i(Rl),Sr=n(Rl,"DIV",{class:!0});var Pl=s(Sr);T(q9.$$.fragment,Pl),UEr=i(Pl),OFe=n(Pl,"P",{});var Cyt=s(OFe);JEr=r(Cyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Cyt.forEach(t),YEr=i(Pl),cn=n(Pl,"P",{});var S6=s(cn);KEr=r(S6,"The model class to instantiate is selected based on the "),VFe=n(S6,"CODE",{});var wyt=s(VFe);ZEr=r(wyt,"model_type"),wyt.forEach(t),eCr=r(S6,` property of the config object (either
passed as an argument or loaded from `),XFe=n(S6,"CODE",{});var Ayt=s(XFe);oCr=r(Ayt,"pretrained_model_name_or_path"),Ayt.forEach(t),rCr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=n(S6,"CODE",{});var Lyt=s(zFe);tCr=r(Lyt,"pretrained_model_name_or_path"),Lyt.forEach(t),aCr=r(S6,":"),S6.forEach(t),nCr=i(Pl),ye=n(Pl,"UL",{});var Ie=s(ye);eE=n(Ie,"LI",{});var ENe=s(eE);WFe=n(ENe,"STRONG",{});var yyt=s(WFe);sCr=r(yyt,"bart"),yyt.forEach(t),lCr=r(ENe," \u2014 "),iJ=n(ENe,"A",{href:!0});var xyt=s(iJ);iCr=r(xyt,"TFBartForConditionalGeneration"),xyt.forEach(t),dCr=r(ENe," (BART model)"),ENe.forEach(t),cCr=i(Ie),oE=n(Ie,"LI",{});var CNe=s(oE);QFe=n(CNe,"STRONG",{});var $yt=s(QFe);fCr=r($yt,"blenderbot"),$yt.forEach(t),mCr=r(CNe," \u2014 "),dJ=n(CNe,"A",{href:!0});var kyt=s(dJ);gCr=r(kyt,"TFBlenderbotForConditionalGeneration"),kyt.forEach(t),hCr=r(CNe," (Blenderbot model)"),CNe.forEach(t),pCr=i(Ie),rE=n(Ie,"LI",{});var wNe=s(rE);HFe=n(wNe,"STRONG",{});var Syt=s(HFe);uCr=r(Syt,"blenderbot-small"),Syt.forEach(t),_Cr=r(wNe," \u2014 "),cJ=n(wNe,"A",{href:!0});var Ryt=s(cJ);bCr=r(Ryt,"TFBlenderbotSmallForConditionalGeneration"),Ryt.forEach(t),vCr=r(wNe," (BlenderbotSmall model)"),wNe.forEach(t),FCr=i(Ie),tE=n(Ie,"LI",{});var ANe=s(tE);UFe=n(ANe,"STRONG",{});var Pyt=s(UFe);TCr=r(Pyt,"encoder-decoder"),Pyt.forEach(t),MCr=r(ANe," \u2014 "),fJ=n(ANe,"A",{href:!0});var Byt=s(fJ);ECr=r(Byt,"TFEncoderDecoderModel"),Byt.forEach(t),CCr=r(ANe," (Encoder decoder model)"),ANe.forEach(t),wCr=i(Ie),aE=n(Ie,"LI",{});var LNe=s(aE);JFe=n(LNe,"STRONG",{});var Iyt=s(JFe);ACr=r(Iyt,"led"),Iyt.forEach(t),LCr=r(LNe," \u2014 "),mJ=n(LNe,"A",{href:!0});var Nyt=s(mJ);yCr=r(Nyt,"TFLEDForConditionalGeneration"),Nyt.forEach(t),xCr=r(LNe," (LED model)"),LNe.forEach(t),$Cr=i(Ie),nE=n(Ie,"LI",{});var yNe=s(nE);YFe=n(yNe,"STRONG",{});var qyt=s(YFe);kCr=r(qyt,"marian"),qyt.forEach(t),SCr=r(yNe," \u2014 "),gJ=n(yNe,"A",{href:!0});var jyt=s(gJ);RCr=r(jyt,"TFMarianMTModel"),jyt.forEach(t),PCr=r(yNe," (Marian model)"),yNe.forEach(t),BCr=i(Ie),sE=n(Ie,"LI",{});var xNe=s(sE);KFe=n(xNe,"STRONG",{});var Dyt=s(KFe);ICr=r(Dyt,"mbart"),Dyt.forEach(t),NCr=r(xNe," \u2014 "),hJ=n(xNe,"A",{href:!0});var Gyt=s(hJ);qCr=r(Gyt,"TFMBartForConditionalGeneration"),Gyt.forEach(t),jCr=r(xNe," (mBART model)"),xNe.forEach(t),DCr=i(Ie),lE=n(Ie,"LI",{});var $Ne=s(lE);ZFe=n($Ne,"STRONG",{});var Oyt=s(ZFe);GCr=r(Oyt,"mt5"),Oyt.forEach(t),OCr=r($Ne," \u2014 "),pJ=n($Ne,"A",{href:!0});var Vyt=s(pJ);VCr=r(Vyt,"TFMT5ForConditionalGeneration"),Vyt.forEach(t),XCr=r($Ne," (MT5 model)"),$Ne.forEach(t),zCr=i(Ie),iE=n(Ie,"LI",{});var kNe=s(iE);eTe=n(kNe,"STRONG",{});var Xyt=s(eTe);WCr=r(Xyt,"pegasus"),Xyt.forEach(t),QCr=r(kNe," \u2014 "),uJ=n(kNe,"A",{href:!0});var zyt=s(uJ);HCr=r(zyt,"TFPegasusForConditionalGeneration"),zyt.forEach(t),UCr=r(kNe," (Pegasus model)"),kNe.forEach(t),JCr=i(Ie),dE=n(Ie,"LI",{});var SNe=s(dE);oTe=n(SNe,"STRONG",{});var Wyt=s(oTe);YCr=r(Wyt,"t5"),Wyt.forEach(t),KCr=r(SNe," \u2014 "),_J=n(SNe,"A",{href:!0});var Qyt=s(_J);ZCr=r(Qyt,"TFT5ForConditionalGeneration"),Qyt.forEach(t),e5r=r(SNe," (T5 model)"),SNe.forEach(t),Ie.forEach(t),o5r=i(Pl),T(cE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),POe=i(f),bc=n(f,"H2",{class:!0});var OXe=s(bc);fE=n(OXe,"A",{id:!0,class:!0,href:!0});var Hyt=s(fE);rTe=n(Hyt,"SPAN",{});var Uyt=s(rTe);T(j9.$$.fragment,Uyt),Uyt.forEach(t),Hyt.forEach(t),r5r=i(OXe),tTe=n(OXe,"SPAN",{});var Jyt=s(tTe);t5r=r(Jyt,"TFAutoModelForSequenceClassification"),Jyt.forEach(t),OXe.forEach(t),BOe=i(f),nr=n(f,"DIV",{class:!0});var Bl=s(nr);T(D9.$$.fragment,Bl),a5r=i(Bl),vc=n(Bl,"P",{});var hre=s(vc);n5r=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bJ=n(hre,"A",{href:!0});var Yyt=s(bJ);s5r=r(Yyt,"from_pretrained()"),Yyt.forEach(t),l5r=r(hre," class method or the "),vJ=n(hre,"A",{href:!0});var Kyt=s(vJ);i5r=r(Kyt,"from_config()"),Kyt.forEach(t),d5r=r(hre,` class
method.`),hre.forEach(t),c5r=i(Bl),G9=n(Bl,"P",{});var VXe=s(G9);f5r=r(VXe,"This class cannot be instantiated directly using "),aTe=n(VXe,"CODE",{});var Zyt=s(aTe);m5r=r(Zyt,"__init__()"),Zyt.forEach(t),g5r=r(VXe," (throws an error)."),VXe.forEach(t),h5r=i(Bl),It=n(Bl,"DIV",{class:!0});var R6=s(It);T(O9.$$.fragment,R6),p5r=i(R6),nTe=n(R6,"P",{});var e8t=s(nTe);u5r=r(e8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),e8t.forEach(t),_5r=i(R6),Fc=n(R6,"P",{});var pre=s(Fc);b5r=r(pre,`Note:
Loading a model from its configuration file does `),sTe=n(pre,"STRONG",{});var o8t=s(sTe);v5r=r(o8t,"not"),o8t.forEach(t),F5r=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=n(pre,"A",{href:!0});var r8t=s(FJ);T5r=r(r8t,"from_pretrained()"),r8t.forEach(t),M5r=r(pre," to load the model weights."),pre.forEach(t),E5r=i(R6),T(mE.$$.fragment,R6),R6.forEach(t),C5r=i(Bl),Rr=n(Bl,"DIV",{class:!0});var Il=s(Rr);T(V9.$$.fragment,Il),w5r=i(Il),lTe=n(Il,"P",{});var t8t=s(lTe);A5r=r(t8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),t8t.forEach(t),L5r=i(Il),fn=n(Il,"P",{});var P6=s(fn);y5r=r(P6,"The model class to instantiate is selected based on the "),iTe=n(P6,"CODE",{});var a8t=s(iTe);x5r=r(a8t,"model_type"),a8t.forEach(t),$5r=r(P6,` property of the config object (either
passed as an argument or loaded from `),dTe=n(P6,"CODE",{});var n8t=s(dTe);k5r=r(n8t,"pretrained_model_name_or_path"),n8t.forEach(t),S5r=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=n(P6,"CODE",{});var s8t=s(cTe);R5r=r(s8t,"pretrained_model_name_or_path"),s8t.forEach(t),P5r=r(P6,":"),P6.forEach(t),B5r=i(Il),te=n(Il,"UL",{});var ne=s(te);gE=n(ne,"LI",{});var RNe=s(gE);fTe=n(RNe,"STRONG",{});var l8t=s(fTe);I5r=r(l8t,"albert"),l8t.forEach(t),N5r=r(RNe," \u2014 "),TJ=n(RNe,"A",{href:!0});var i8t=s(TJ);q5r=r(i8t,"TFAlbertForSequenceClassification"),i8t.forEach(t),j5r=r(RNe," (ALBERT model)"),RNe.forEach(t),D5r=i(ne),hE=n(ne,"LI",{});var PNe=s(hE);mTe=n(PNe,"STRONG",{});var d8t=s(mTe);G5r=r(d8t,"bert"),d8t.forEach(t),O5r=r(PNe," \u2014 "),MJ=n(PNe,"A",{href:!0});var c8t=s(MJ);V5r=r(c8t,"TFBertForSequenceClassification"),c8t.forEach(t),X5r=r(PNe," (BERT model)"),PNe.forEach(t),z5r=i(ne),pE=n(ne,"LI",{});var BNe=s(pE);gTe=n(BNe,"STRONG",{});var f8t=s(gTe);W5r=r(f8t,"camembert"),f8t.forEach(t),Q5r=r(BNe," \u2014 "),EJ=n(BNe,"A",{href:!0});var m8t=s(EJ);H5r=r(m8t,"TFCamembertForSequenceClassification"),m8t.forEach(t),U5r=r(BNe," (CamemBERT model)"),BNe.forEach(t),J5r=i(ne),uE=n(ne,"LI",{});var INe=s(uE);hTe=n(INe,"STRONG",{});var g8t=s(hTe);Y5r=r(g8t,"convbert"),g8t.forEach(t),K5r=r(INe," \u2014 "),CJ=n(INe,"A",{href:!0});var h8t=s(CJ);Z5r=r(h8t,"TFConvBertForSequenceClassification"),h8t.forEach(t),e0r=r(INe," (ConvBERT model)"),INe.forEach(t),o0r=i(ne),_E=n(ne,"LI",{});var NNe=s(_E);pTe=n(NNe,"STRONG",{});var p8t=s(pTe);r0r=r(p8t,"ctrl"),p8t.forEach(t),t0r=r(NNe," \u2014 "),wJ=n(NNe,"A",{href:!0});var u8t=s(wJ);a0r=r(u8t,"TFCTRLForSequenceClassification"),u8t.forEach(t),n0r=r(NNe," (CTRL model)"),NNe.forEach(t),s0r=i(ne),bE=n(ne,"LI",{});var qNe=s(bE);uTe=n(qNe,"STRONG",{});var _8t=s(uTe);l0r=r(_8t,"deberta"),_8t.forEach(t),i0r=r(qNe," \u2014 "),AJ=n(qNe,"A",{href:!0});var b8t=s(AJ);d0r=r(b8t,"TFDebertaForSequenceClassification"),b8t.forEach(t),c0r=r(qNe," (DeBERTa model)"),qNe.forEach(t),f0r=i(ne),vE=n(ne,"LI",{});var jNe=s(vE);_Te=n(jNe,"STRONG",{});var v8t=s(_Te);m0r=r(v8t,"deberta-v2"),v8t.forEach(t),g0r=r(jNe," \u2014 "),LJ=n(jNe,"A",{href:!0});var F8t=s(LJ);h0r=r(F8t,"TFDebertaV2ForSequenceClassification"),F8t.forEach(t),p0r=r(jNe," (DeBERTa-v2 model)"),jNe.forEach(t),u0r=i(ne),FE=n(ne,"LI",{});var DNe=s(FE);bTe=n(DNe,"STRONG",{});var T8t=s(bTe);_0r=r(T8t,"distilbert"),T8t.forEach(t),b0r=r(DNe," \u2014 "),yJ=n(DNe,"A",{href:!0});var M8t=s(yJ);v0r=r(M8t,"TFDistilBertForSequenceClassification"),M8t.forEach(t),F0r=r(DNe," (DistilBERT model)"),DNe.forEach(t),T0r=i(ne),TE=n(ne,"LI",{});var GNe=s(TE);vTe=n(GNe,"STRONG",{});var E8t=s(vTe);M0r=r(E8t,"electra"),E8t.forEach(t),E0r=r(GNe," \u2014 "),xJ=n(GNe,"A",{href:!0});var C8t=s(xJ);C0r=r(C8t,"TFElectraForSequenceClassification"),C8t.forEach(t),w0r=r(GNe," (ELECTRA model)"),GNe.forEach(t),A0r=i(ne),ME=n(ne,"LI",{});var ONe=s(ME);FTe=n(ONe,"STRONG",{});var w8t=s(FTe);L0r=r(w8t,"flaubert"),w8t.forEach(t),y0r=r(ONe," \u2014 "),$J=n(ONe,"A",{href:!0});var A8t=s($J);x0r=r(A8t,"TFFlaubertForSequenceClassification"),A8t.forEach(t),$0r=r(ONe," (FlauBERT model)"),ONe.forEach(t),k0r=i(ne),EE=n(ne,"LI",{});var VNe=s(EE);TTe=n(VNe,"STRONG",{});var L8t=s(TTe);S0r=r(L8t,"funnel"),L8t.forEach(t),R0r=r(VNe," \u2014 "),kJ=n(VNe,"A",{href:!0});var y8t=s(kJ);P0r=r(y8t,"TFFunnelForSequenceClassification"),y8t.forEach(t),B0r=r(VNe," (Funnel Transformer model)"),VNe.forEach(t),I0r=i(ne),CE=n(ne,"LI",{});var XNe=s(CE);MTe=n(XNe,"STRONG",{});var x8t=s(MTe);N0r=r(x8t,"gpt2"),x8t.forEach(t),q0r=r(XNe," \u2014 "),SJ=n(XNe,"A",{href:!0});var $8t=s(SJ);j0r=r($8t,"TFGPT2ForSequenceClassification"),$8t.forEach(t),D0r=r(XNe," (OpenAI GPT-2 model)"),XNe.forEach(t),G0r=i(ne),wE=n(ne,"LI",{});var zNe=s(wE);ETe=n(zNe,"STRONG",{});var k8t=s(ETe);O0r=r(k8t,"gptj"),k8t.forEach(t),V0r=r(zNe," \u2014 "),RJ=n(zNe,"A",{href:!0});var S8t=s(RJ);X0r=r(S8t,"TFGPTJForSequenceClassification"),S8t.forEach(t),z0r=r(zNe," (GPT-J model)"),zNe.forEach(t),W0r=i(ne),AE=n(ne,"LI",{});var WNe=s(AE);CTe=n(WNe,"STRONG",{});var R8t=s(CTe);Q0r=r(R8t,"layoutlm"),R8t.forEach(t),H0r=r(WNe," \u2014 "),PJ=n(WNe,"A",{href:!0});var P8t=s(PJ);U0r=r(P8t,"TFLayoutLMForSequenceClassification"),P8t.forEach(t),J0r=r(WNe," (LayoutLM model)"),WNe.forEach(t),Y0r=i(ne),LE=n(ne,"LI",{});var QNe=s(LE);wTe=n(QNe,"STRONG",{});var B8t=s(wTe);K0r=r(B8t,"longformer"),B8t.forEach(t),Z0r=r(QNe," \u2014 "),BJ=n(QNe,"A",{href:!0});var I8t=s(BJ);ewr=r(I8t,"TFLongformerForSequenceClassification"),I8t.forEach(t),owr=r(QNe," (Longformer model)"),QNe.forEach(t),rwr=i(ne),yE=n(ne,"LI",{});var HNe=s(yE);ATe=n(HNe,"STRONG",{});var N8t=s(ATe);twr=r(N8t,"mobilebert"),N8t.forEach(t),awr=r(HNe," \u2014 "),IJ=n(HNe,"A",{href:!0});var q8t=s(IJ);nwr=r(q8t,"TFMobileBertForSequenceClassification"),q8t.forEach(t),swr=r(HNe," (MobileBERT model)"),HNe.forEach(t),lwr=i(ne),xE=n(ne,"LI",{});var UNe=s(xE);LTe=n(UNe,"STRONG",{});var j8t=s(LTe);iwr=r(j8t,"mpnet"),j8t.forEach(t),dwr=r(UNe," \u2014 "),NJ=n(UNe,"A",{href:!0});var D8t=s(NJ);cwr=r(D8t,"TFMPNetForSequenceClassification"),D8t.forEach(t),fwr=r(UNe," (MPNet model)"),UNe.forEach(t),mwr=i(ne),$E=n(ne,"LI",{});var JNe=s($E);yTe=n(JNe,"STRONG",{});var G8t=s(yTe);gwr=r(G8t,"openai-gpt"),G8t.forEach(t),hwr=r(JNe," \u2014 "),qJ=n(JNe,"A",{href:!0});var O8t=s(qJ);pwr=r(O8t,"TFOpenAIGPTForSequenceClassification"),O8t.forEach(t),uwr=r(JNe," (OpenAI GPT model)"),JNe.forEach(t),_wr=i(ne),kE=n(ne,"LI",{});var YNe=s(kE);xTe=n(YNe,"STRONG",{});var V8t=s(xTe);bwr=r(V8t,"rembert"),V8t.forEach(t),vwr=r(YNe," \u2014 "),jJ=n(YNe,"A",{href:!0});var X8t=s(jJ);Fwr=r(X8t,"TFRemBertForSequenceClassification"),X8t.forEach(t),Twr=r(YNe," (RemBERT model)"),YNe.forEach(t),Mwr=i(ne),SE=n(ne,"LI",{});var KNe=s(SE);$Te=n(KNe,"STRONG",{});var z8t=s($Te);Ewr=r(z8t,"roberta"),z8t.forEach(t),Cwr=r(KNe," \u2014 "),DJ=n(KNe,"A",{href:!0});var W8t=s(DJ);wwr=r(W8t,"TFRobertaForSequenceClassification"),W8t.forEach(t),Awr=r(KNe," (RoBERTa model)"),KNe.forEach(t),Lwr=i(ne),RE=n(ne,"LI",{});var ZNe=s(RE);kTe=n(ZNe,"STRONG",{});var Q8t=s(kTe);ywr=r(Q8t,"roformer"),Q8t.forEach(t),xwr=r(ZNe," \u2014 "),GJ=n(ZNe,"A",{href:!0});var H8t=s(GJ);$wr=r(H8t,"TFRoFormerForSequenceClassification"),H8t.forEach(t),kwr=r(ZNe," (RoFormer model)"),ZNe.forEach(t),Swr=i(ne),PE=n(ne,"LI",{});var eqe=s(PE);STe=n(eqe,"STRONG",{});var U8t=s(STe);Rwr=r(U8t,"tapas"),U8t.forEach(t),Pwr=r(eqe," \u2014 "),OJ=n(eqe,"A",{href:!0});var J8t=s(OJ);Bwr=r(J8t,"TFTapasForSequenceClassification"),J8t.forEach(t),Iwr=r(eqe," (TAPAS model)"),eqe.forEach(t),Nwr=i(ne),BE=n(ne,"LI",{});var oqe=s(BE);RTe=n(oqe,"STRONG",{});var Y8t=s(RTe);qwr=r(Y8t,"transfo-xl"),Y8t.forEach(t),jwr=r(oqe," \u2014 "),VJ=n(oqe,"A",{href:!0});var K8t=s(VJ);Dwr=r(K8t,"TFTransfoXLForSequenceClassification"),K8t.forEach(t),Gwr=r(oqe," (Transformer-XL model)"),oqe.forEach(t),Owr=i(ne),IE=n(ne,"LI",{});var rqe=s(IE);PTe=n(rqe,"STRONG",{});var Z8t=s(PTe);Vwr=r(Z8t,"xlm"),Z8t.forEach(t),Xwr=r(rqe," \u2014 "),XJ=n(rqe,"A",{href:!0});var e9t=s(XJ);zwr=r(e9t,"TFXLMForSequenceClassification"),e9t.forEach(t),Wwr=r(rqe," (XLM model)"),rqe.forEach(t),Qwr=i(ne),NE=n(ne,"LI",{});var tqe=s(NE);BTe=n(tqe,"STRONG",{});var o9t=s(BTe);Hwr=r(o9t,"xlm-roberta"),o9t.forEach(t),Uwr=r(tqe," \u2014 "),zJ=n(tqe,"A",{href:!0});var r9t=s(zJ);Jwr=r(r9t,"TFXLMRobertaForSequenceClassification"),r9t.forEach(t),Ywr=r(tqe," (XLM-RoBERTa model)"),tqe.forEach(t),Kwr=i(ne),qE=n(ne,"LI",{});var aqe=s(qE);ITe=n(aqe,"STRONG",{});var t9t=s(ITe);Zwr=r(t9t,"xlnet"),t9t.forEach(t),eAr=r(aqe," \u2014 "),WJ=n(aqe,"A",{href:!0});var a9t=s(WJ);oAr=r(a9t,"TFXLNetForSequenceClassification"),a9t.forEach(t),rAr=r(aqe," (XLNet model)"),aqe.forEach(t),ne.forEach(t),tAr=i(Il),T(jE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),IOe=i(f),Tc=n(f,"H2",{class:!0});var XXe=s(Tc);DE=n(XXe,"A",{id:!0,class:!0,href:!0});var n9t=s(DE);NTe=n(n9t,"SPAN",{});var s9t=s(NTe);T(X9.$$.fragment,s9t),s9t.forEach(t),n9t.forEach(t),aAr=i(XXe),qTe=n(XXe,"SPAN",{});var l9t=s(qTe);nAr=r(l9t,"TFAutoModelForMultipleChoice"),l9t.forEach(t),XXe.forEach(t),NOe=i(f),sr=n(f,"DIV",{class:!0});var Nl=s(sr);T(z9.$$.fragment,Nl),sAr=i(Nl),Mc=n(Nl,"P",{});var ure=s(Mc);lAr=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),QJ=n(ure,"A",{href:!0});var i9t=s(QJ);iAr=r(i9t,"from_pretrained()"),i9t.forEach(t),dAr=r(ure," class method or the "),HJ=n(ure,"A",{href:!0});var d9t=s(HJ);cAr=r(d9t,"from_config()"),d9t.forEach(t),fAr=r(ure,` class
method.`),ure.forEach(t),mAr=i(Nl),W9=n(Nl,"P",{});var zXe=s(W9);gAr=r(zXe,"This class cannot be instantiated directly using "),jTe=n(zXe,"CODE",{});var c9t=s(jTe);hAr=r(c9t,"__init__()"),c9t.forEach(t),pAr=r(zXe," (throws an error)."),zXe.forEach(t),uAr=i(Nl),Nt=n(Nl,"DIV",{class:!0});var B6=s(Nt);T(Q9.$$.fragment,B6),_Ar=i(B6),DTe=n(B6,"P",{});var f9t=s(DTe);bAr=r(f9t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),f9t.forEach(t),vAr=i(B6),Ec=n(B6,"P",{});var _re=s(Ec);FAr=r(_re,`Note:
Loading a model from its configuration file does `),GTe=n(_re,"STRONG",{});var m9t=s(GTe);TAr=r(m9t,"not"),m9t.forEach(t),MAr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=n(_re,"A",{href:!0});var g9t=s(UJ);EAr=r(g9t,"from_pretrained()"),g9t.forEach(t),CAr=r(_re," to load the model weights."),_re.forEach(t),wAr=i(B6),T(GE.$$.fragment,B6),B6.forEach(t),AAr=i(Nl),Pr=n(Nl,"DIV",{class:!0});var ql=s(Pr);T(H9.$$.fragment,ql),LAr=i(ql),OTe=n(ql,"P",{});var h9t=s(OTe);yAr=r(h9t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),h9t.forEach(t),xAr=i(ql),mn=n(ql,"P",{});var I6=s(mn);$Ar=r(I6,"The model class to instantiate is selected based on the "),VTe=n(I6,"CODE",{});var p9t=s(VTe);kAr=r(p9t,"model_type"),p9t.forEach(t),SAr=r(I6,` property of the config object (either
passed as an argument or loaded from `),XTe=n(I6,"CODE",{});var u9t=s(XTe);RAr=r(u9t,"pretrained_model_name_or_path"),u9t.forEach(t),PAr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zTe=n(I6,"CODE",{});var _9t=s(zTe);BAr=r(_9t,"pretrained_model_name_or_path"),_9t.forEach(t),IAr=r(I6,":"),I6.forEach(t),NAr=i(ql),ue=n(ql,"UL",{});var ve=s(ue);OE=n(ve,"LI",{});var nqe=s(OE);WTe=n(nqe,"STRONG",{});var b9t=s(WTe);qAr=r(b9t,"albert"),b9t.forEach(t),jAr=r(nqe," \u2014 "),JJ=n(nqe,"A",{href:!0});var v9t=s(JJ);DAr=r(v9t,"TFAlbertForMultipleChoice"),v9t.forEach(t),GAr=r(nqe," (ALBERT model)"),nqe.forEach(t),OAr=i(ve),VE=n(ve,"LI",{});var sqe=s(VE);QTe=n(sqe,"STRONG",{});var F9t=s(QTe);VAr=r(F9t,"bert"),F9t.forEach(t),XAr=r(sqe," \u2014 "),YJ=n(sqe,"A",{href:!0});var T9t=s(YJ);zAr=r(T9t,"TFBertForMultipleChoice"),T9t.forEach(t),WAr=r(sqe," (BERT model)"),sqe.forEach(t),QAr=i(ve),XE=n(ve,"LI",{});var lqe=s(XE);HTe=n(lqe,"STRONG",{});var M9t=s(HTe);HAr=r(M9t,"camembert"),M9t.forEach(t),UAr=r(lqe," \u2014 "),KJ=n(lqe,"A",{href:!0});var E9t=s(KJ);JAr=r(E9t,"TFCamembertForMultipleChoice"),E9t.forEach(t),YAr=r(lqe," (CamemBERT model)"),lqe.forEach(t),KAr=i(ve),zE=n(ve,"LI",{});var iqe=s(zE);UTe=n(iqe,"STRONG",{});var C9t=s(UTe);ZAr=r(C9t,"convbert"),C9t.forEach(t),e6r=r(iqe," \u2014 "),ZJ=n(iqe,"A",{href:!0});var w9t=s(ZJ);o6r=r(w9t,"TFConvBertForMultipleChoice"),w9t.forEach(t),r6r=r(iqe," (ConvBERT model)"),iqe.forEach(t),t6r=i(ve),WE=n(ve,"LI",{});var dqe=s(WE);JTe=n(dqe,"STRONG",{});var A9t=s(JTe);a6r=r(A9t,"distilbert"),A9t.forEach(t),n6r=r(dqe," \u2014 "),eY=n(dqe,"A",{href:!0});var L9t=s(eY);s6r=r(L9t,"TFDistilBertForMultipleChoice"),L9t.forEach(t),l6r=r(dqe," (DistilBERT model)"),dqe.forEach(t),i6r=i(ve),QE=n(ve,"LI",{});var cqe=s(QE);YTe=n(cqe,"STRONG",{});var y9t=s(YTe);d6r=r(y9t,"electra"),y9t.forEach(t),c6r=r(cqe," \u2014 "),oY=n(cqe,"A",{href:!0});var x9t=s(oY);f6r=r(x9t,"TFElectraForMultipleChoice"),x9t.forEach(t),m6r=r(cqe," (ELECTRA model)"),cqe.forEach(t),g6r=i(ve),HE=n(ve,"LI",{});var fqe=s(HE);KTe=n(fqe,"STRONG",{});var $9t=s(KTe);h6r=r($9t,"flaubert"),$9t.forEach(t),p6r=r(fqe," \u2014 "),rY=n(fqe,"A",{href:!0});var k9t=s(rY);u6r=r(k9t,"TFFlaubertForMultipleChoice"),k9t.forEach(t),_6r=r(fqe," (FlauBERT model)"),fqe.forEach(t),b6r=i(ve),UE=n(ve,"LI",{});var mqe=s(UE);ZTe=n(mqe,"STRONG",{});var S9t=s(ZTe);v6r=r(S9t,"funnel"),S9t.forEach(t),F6r=r(mqe," \u2014 "),tY=n(mqe,"A",{href:!0});var R9t=s(tY);T6r=r(R9t,"TFFunnelForMultipleChoice"),R9t.forEach(t),M6r=r(mqe," (Funnel Transformer model)"),mqe.forEach(t),E6r=i(ve),JE=n(ve,"LI",{});var gqe=s(JE);e7e=n(gqe,"STRONG",{});var P9t=s(e7e);C6r=r(P9t,"longformer"),P9t.forEach(t),w6r=r(gqe," \u2014 "),aY=n(gqe,"A",{href:!0});var B9t=s(aY);A6r=r(B9t,"TFLongformerForMultipleChoice"),B9t.forEach(t),L6r=r(gqe," (Longformer model)"),gqe.forEach(t),y6r=i(ve),YE=n(ve,"LI",{});var hqe=s(YE);o7e=n(hqe,"STRONG",{});var I9t=s(o7e);x6r=r(I9t,"mobilebert"),I9t.forEach(t),$6r=r(hqe," \u2014 "),nY=n(hqe,"A",{href:!0});var N9t=s(nY);k6r=r(N9t,"TFMobileBertForMultipleChoice"),N9t.forEach(t),S6r=r(hqe," (MobileBERT model)"),hqe.forEach(t),R6r=i(ve),KE=n(ve,"LI",{});var pqe=s(KE);r7e=n(pqe,"STRONG",{});var q9t=s(r7e);P6r=r(q9t,"mpnet"),q9t.forEach(t),B6r=r(pqe," \u2014 "),sY=n(pqe,"A",{href:!0});var j9t=s(sY);I6r=r(j9t,"TFMPNetForMultipleChoice"),j9t.forEach(t),N6r=r(pqe," (MPNet model)"),pqe.forEach(t),q6r=i(ve),ZE=n(ve,"LI",{});var uqe=s(ZE);t7e=n(uqe,"STRONG",{});var D9t=s(t7e);j6r=r(D9t,"rembert"),D9t.forEach(t),D6r=r(uqe," \u2014 "),lY=n(uqe,"A",{href:!0});var G9t=s(lY);G6r=r(G9t,"TFRemBertForMultipleChoice"),G9t.forEach(t),O6r=r(uqe," (RemBERT model)"),uqe.forEach(t),V6r=i(ve),eC=n(ve,"LI",{});var _qe=s(eC);a7e=n(_qe,"STRONG",{});var O9t=s(a7e);X6r=r(O9t,"roberta"),O9t.forEach(t),z6r=r(_qe," \u2014 "),iY=n(_qe,"A",{href:!0});var V9t=s(iY);W6r=r(V9t,"TFRobertaForMultipleChoice"),V9t.forEach(t),Q6r=r(_qe," (RoBERTa model)"),_qe.forEach(t),H6r=i(ve),oC=n(ve,"LI",{});var bqe=s(oC);n7e=n(bqe,"STRONG",{});var X9t=s(n7e);U6r=r(X9t,"roformer"),X9t.forEach(t),J6r=r(bqe," \u2014 "),dY=n(bqe,"A",{href:!0});var z9t=s(dY);Y6r=r(z9t,"TFRoFormerForMultipleChoice"),z9t.forEach(t),K6r=r(bqe," (RoFormer model)"),bqe.forEach(t),Z6r=i(ve),rC=n(ve,"LI",{});var vqe=s(rC);s7e=n(vqe,"STRONG",{});var W9t=s(s7e);eLr=r(W9t,"xlm"),W9t.forEach(t),oLr=r(vqe," \u2014 "),cY=n(vqe,"A",{href:!0});var Q9t=s(cY);rLr=r(Q9t,"TFXLMForMultipleChoice"),Q9t.forEach(t),tLr=r(vqe," (XLM model)"),vqe.forEach(t),aLr=i(ve),tC=n(ve,"LI",{});var Fqe=s(tC);l7e=n(Fqe,"STRONG",{});var H9t=s(l7e);nLr=r(H9t,"xlm-roberta"),H9t.forEach(t),sLr=r(Fqe," \u2014 "),fY=n(Fqe,"A",{href:!0});var U9t=s(fY);lLr=r(U9t,"TFXLMRobertaForMultipleChoice"),U9t.forEach(t),iLr=r(Fqe," (XLM-RoBERTa model)"),Fqe.forEach(t),dLr=i(ve),aC=n(ve,"LI",{});var Tqe=s(aC);i7e=n(Tqe,"STRONG",{});var J9t=s(i7e);cLr=r(J9t,"xlnet"),J9t.forEach(t),fLr=r(Tqe," \u2014 "),mY=n(Tqe,"A",{href:!0});var Y9t=s(mY);mLr=r(Y9t,"TFXLNetForMultipleChoice"),Y9t.forEach(t),gLr=r(Tqe," (XLNet model)"),Tqe.forEach(t),ve.forEach(t),hLr=i(ql),T(nC.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),qOe=i(f),Cc=n(f,"H2",{class:!0});var WXe=s(Cc);sC=n(WXe,"A",{id:!0,class:!0,href:!0});var K9t=s(sC);d7e=n(K9t,"SPAN",{});var Z9t=s(d7e);T(U9.$$.fragment,Z9t),Z9t.forEach(t),K9t.forEach(t),pLr=i(WXe),c7e=n(WXe,"SPAN",{});var ext=s(c7e);uLr=r(ext,"TFAutoModelForNextSentencePrediction"),ext.forEach(t),WXe.forEach(t),jOe=i(f),lr=n(f,"DIV",{class:!0});var jl=s(lr);T(J9.$$.fragment,jl),_Lr=i(jl),wc=n(jl,"P",{});var bre=s(wc);bLr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gY=n(bre,"A",{href:!0});var oxt=s(gY);vLr=r(oxt,"from_pretrained()"),oxt.forEach(t),FLr=r(bre," class method or the "),hY=n(bre,"A",{href:!0});var rxt=s(hY);TLr=r(rxt,"from_config()"),rxt.forEach(t),MLr=r(bre,` class
method.`),bre.forEach(t),ELr=i(jl),Y9=n(jl,"P",{});var QXe=s(Y9);CLr=r(QXe,"This class cannot be instantiated directly using "),f7e=n(QXe,"CODE",{});var txt=s(f7e);wLr=r(txt,"__init__()"),txt.forEach(t),ALr=r(QXe," (throws an error)."),QXe.forEach(t),LLr=i(jl),qt=n(jl,"DIV",{class:!0});var N6=s(qt);T(K9.$$.fragment,N6),yLr=i(N6),m7e=n(N6,"P",{});var axt=s(m7e);xLr=r(axt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),axt.forEach(t),$Lr=i(N6),Ac=n(N6,"P",{});var vre=s(Ac);kLr=r(vre,`Note:
Loading a model from its configuration file does `),g7e=n(vre,"STRONG",{});var nxt=s(g7e);SLr=r(nxt,"not"),nxt.forEach(t),RLr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=n(vre,"A",{href:!0});var sxt=s(pY);PLr=r(sxt,"from_pretrained()"),sxt.forEach(t),BLr=r(vre," to load the model weights."),vre.forEach(t),ILr=i(N6),T(lC.$$.fragment,N6),N6.forEach(t),NLr=i(jl),Br=n(jl,"DIV",{class:!0});var Dl=s(Br);T(Z9.$$.fragment,Dl),qLr=i(Dl),h7e=n(Dl,"P",{});var lxt=s(h7e);jLr=r(lxt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lxt.forEach(t),DLr=i(Dl),gn=n(Dl,"P",{});var q6=s(gn);GLr=r(q6,"The model class to instantiate is selected based on the "),p7e=n(q6,"CODE",{});var ixt=s(p7e);OLr=r(ixt,"model_type"),ixt.forEach(t),VLr=r(q6,` property of the config object (either
passed as an argument or loaded from `),u7e=n(q6,"CODE",{});var dxt=s(u7e);XLr=r(dxt,"pretrained_model_name_or_path"),dxt.forEach(t),zLr=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_7e=n(q6,"CODE",{});var cxt=s(_7e);WLr=r(cxt,"pretrained_model_name_or_path"),cxt.forEach(t),QLr=r(q6,":"),q6.forEach(t),HLr=i(Dl),ex=n(Dl,"UL",{});var HXe=s(ex);iC=n(HXe,"LI",{});var Mqe=s(iC);b7e=n(Mqe,"STRONG",{});var fxt=s(b7e);ULr=r(fxt,"bert"),fxt.forEach(t),JLr=r(Mqe," \u2014 "),uY=n(Mqe,"A",{href:!0});var mxt=s(uY);YLr=r(mxt,"TFBertForNextSentencePrediction"),mxt.forEach(t),KLr=r(Mqe," (BERT model)"),Mqe.forEach(t),ZLr=i(HXe),dC=n(HXe,"LI",{});var Eqe=s(dC);v7e=n(Eqe,"STRONG",{});var gxt=s(v7e);eyr=r(gxt,"mobilebert"),gxt.forEach(t),oyr=r(Eqe," \u2014 "),_Y=n(Eqe,"A",{href:!0});var hxt=s(_Y);ryr=r(hxt,"TFMobileBertForNextSentencePrediction"),hxt.forEach(t),tyr=r(Eqe," (MobileBERT model)"),Eqe.forEach(t),HXe.forEach(t),ayr=i(Dl),T(cC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),DOe=i(f),Lc=n(f,"H2",{class:!0});var UXe=s(Lc);fC=n(UXe,"A",{id:!0,class:!0,href:!0});var pxt=s(fC);F7e=n(pxt,"SPAN",{});var uxt=s(F7e);T(ox.$$.fragment,uxt),uxt.forEach(t),pxt.forEach(t),nyr=i(UXe),T7e=n(UXe,"SPAN",{});var _xt=s(T7e);syr=r(_xt,"TFAutoModelForTableQuestionAnswering"),_xt.forEach(t),UXe.forEach(t),GOe=i(f),ir=n(f,"DIV",{class:!0});var Gl=s(ir);T(rx.$$.fragment,Gl),lyr=i(Gl),yc=n(Gl,"P",{});var Fre=s(yc);iyr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bY=n(Fre,"A",{href:!0});var bxt=s(bY);dyr=r(bxt,"from_pretrained()"),bxt.forEach(t),cyr=r(Fre," class method or the "),vY=n(Fre,"A",{href:!0});var vxt=s(vY);fyr=r(vxt,"from_config()"),vxt.forEach(t),myr=r(Fre,` class
method.`),Fre.forEach(t),gyr=i(Gl),tx=n(Gl,"P",{});var JXe=s(tx);hyr=r(JXe,"This class cannot be instantiated directly using "),M7e=n(JXe,"CODE",{});var Fxt=s(M7e);pyr=r(Fxt,"__init__()"),Fxt.forEach(t),uyr=r(JXe," (throws an error)."),JXe.forEach(t),_yr=i(Gl),jt=n(Gl,"DIV",{class:!0});var j6=s(jt);T(ax.$$.fragment,j6),byr=i(j6),E7e=n(j6,"P",{});var Txt=s(E7e);vyr=r(Txt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Txt.forEach(t),Fyr=i(j6),xc=n(j6,"P",{});var Tre=s(xc);Tyr=r(Tre,`Note:
Loading a model from its configuration file does `),C7e=n(Tre,"STRONG",{});var Mxt=s(C7e);Myr=r(Mxt,"not"),Mxt.forEach(t),Eyr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(Tre,"A",{href:!0});var Ext=s(FY);Cyr=r(Ext,"from_pretrained()"),Ext.forEach(t),wyr=r(Tre," to load the model weights."),Tre.forEach(t),Ayr=i(j6),T(mC.$$.fragment,j6),j6.forEach(t),Lyr=i(Gl),Ir=n(Gl,"DIV",{class:!0});var Ol=s(Ir);T(nx.$$.fragment,Ol),yyr=i(Ol),w7e=n(Ol,"P",{});var Cxt=s(w7e);xyr=r(Cxt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Cxt.forEach(t),$yr=i(Ol),hn=n(Ol,"P",{});var D6=s(hn);kyr=r(D6,"The model class to instantiate is selected based on the "),A7e=n(D6,"CODE",{});var wxt=s(A7e);Syr=r(wxt,"model_type"),wxt.forEach(t),Ryr=r(D6,` property of the config object (either
passed as an argument or loaded from `),L7e=n(D6,"CODE",{});var Axt=s(L7e);Pyr=r(Axt,"pretrained_model_name_or_path"),Axt.forEach(t),Byr=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=n(D6,"CODE",{});var Lxt=s(y7e);Iyr=r(Lxt,"pretrained_model_name_or_path"),Lxt.forEach(t),Nyr=r(D6,":"),D6.forEach(t),qyr=i(Ol),x7e=n(Ol,"UL",{});var yxt=s(x7e);gC=n(yxt,"LI",{});var Cqe=s(gC);$7e=n(Cqe,"STRONG",{});var xxt=s($7e);jyr=r(xxt,"tapas"),xxt.forEach(t),Dyr=r(Cqe," \u2014 "),TY=n(Cqe,"A",{href:!0});var $xt=s(TY);Gyr=r($xt,"TFTapasForQuestionAnswering"),$xt.forEach(t),Oyr=r(Cqe," (TAPAS model)"),Cqe.forEach(t),yxt.forEach(t),Vyr=i(Ol),T(hC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),OOe=i(f),$c=n(f,"H2",{class:!0});var YXe=s($c);pC=n(YXe,"A",{id:!0,class:!0,href:!0});var kxt=s(pC);k7e=n(kxt,"SPAN",{});var Sxt=s(k7e);T(sx.$$.fragment,Sxt),Sxt.forEach(t),kxt.forEach(t),Xyr=i(YXe),S7e=n(YXe,"SPAN",{});var Rxt=s(S7e);zyr=r(Rxt,"TFAutoModelForTokenClassification"),Rxt.forEach(t),YXe.forEach(t),VOe=i(f),dr=n(f,"DIV",{class:!0});var Vl=s(dr);T(lx.$$.fragment,Vl),Wyr=i(Vl),kc=n(Vl,"P",{});var Mre=s(kc);Qyr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),MY=n(Mre,"A",{href:!0});var Pxt=s(MY);Hyr=r(Pxt,"from_pretrained()"),Pxt.forEach(t),Uyr=r(Mre," class method or the "),EY=n(Mre,"A",{href:!0});var Bxt=s(EY);Jyr=r(Bxt,"from_config()"),Bxt.forEach(t),Yyr=r(Mre,` class
method.`),Mre.forEach(t),Kyr=i(Vl),ix=n(Vl,"P",{});var KXe=s(ix);Zyr=r(KXe,"This class cannot be instantiated directly using "),R7e=n(KXe,"CODE",{});var Ixt=s(R7e);e8r=r(Ixt,"__init__()"),Ixt.forEach(t),o8r=r(KXe," (throws an error)."),KXe.forEach(t),r8r=i(Vl),Dt=n(Vl,"DIV",{class:!0});var G6=s(Dt);T(dx.$$.fragment,G6),t8r=i(G6),P7e=n(G6,"P",{});var Nxt=s(P7e);a8r=r(Nxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Nxt.forEach(t),n8r=i(G6),Sc=n(G6,"P",{});var Ere=s(Sc);s8r=r(Ere,`Note:
Loading a model from its configuration file does `),B7e=n(Ere,"STRONG",{});var qxt=s(B7e);l8r=r(qxt,"not"),qxt.forEach(t),i8r=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),CY=n(Ere,"A",{href:!0});var jxt=s(CY);d8r=r(jxt,"from_pretrained()"),jxt.forEach(t),c8r=r(Ere," to load the model weights."),Ere.forEach(t),f8r=i(G6),T(uC.$$.fragment,G6),G6.forEach(t),m8r=i(Vl),Nr=n(Vl,"DIV",{class:!0});var Xl=s(Nr);T(cx.$$.fragment,Xl),g8r=i(Xl),I7e=n(Xl,"P",{});var Dxt=s(I7e);h8r=r(Dxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Dxt.forEach(t),p8r=i(Xl),pn=n(Xl,"P",{});var O6=s(pn);u8r=r(O6,"The model class to instantiate is selected based on the "),N7e=n(O6,"CODE",{});var Gxt=s(N7e);_8r=r(Gxt,"model_type"),Gxt.forEach(t),b8r=r(O6,` property of the config object (either
passed as an argument or loaded from `),q7e=n(O6,"CODE",{});var Oxt=s(q7e);v8r=r(Oxt,"pretrained_model_name_or_path"),Oxt.forEach(t),F8r=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=n(O6,"CODE",{});var Vxt=s(j7e);T8r=r(Vxt,"pretrained_model_name_or_path"),Vxt.forEach(t),M8r=r(O6,":"),O6.forEach(t),E8r=i(Xl),de=n(Xl,"UL",{});var me=s(de);_C=n(me,"LI",{});var wqe=s(_C);D7e=n(wqe,"STRONG",{});var Xxt=s(D7e);C8r=r(Xxt,"albert"),Xxt.forEach(t),w8r=r(wqe," \u2014 "),wY=n(wqe,"A",{href:!0});var zxt=s(wY);A8r=r(zxt,"TFAlbertForTokenClassification"),zxt.forEach(t),L8r=r(wqe," (ALBERT model)"),wqe.forEach(t),y8r=i(me),bC=n(me,"LI",{});var Aqe=s(bC);G7e=n(Aqe,"STRONG",{});var Wxt=s(G7e);x8r=r(Wxt,"bert"),Wxt.forEach(t),$8r=r(Aqe," \u2014 "),AY=n(Aqe,"A",{href:!0});var Qxt=s(AY);k8r=r(Qxt,"TFBertForTokenClassification"),Qxt.forEach(t),S8r=r(Aqe," (BERT model)"),Aqe.forEach(t),R8r=i(me),vC=n(me,"LI",{});var Lqe=s(vC);O7e=n(Lqe,"STRONG",{});var Hxt=s(O7e);P8r=r(Hxt,"camembert"),Hxt.forEach(t),B8r=r(Lqe," \u2014 "),LY=n(Lqe,"A",{href:!0});var Uxt=s(LY);I8r=r(Uxt,"TFCamembertForTokenClassification"),Uxt.forEach(t),N8r=r(Lqe," (CamemBERT model)"),Lqe.forEach(t),q8r=i(me),FC=n(me,"LI",{});var yqe=s(FC);V7e=n(yqe,"STRONG",{});var Jxt=s(V7e);j8r=r(Jxt,"convbert"),Jxt.forEach(t),D8r=r(yqe," \u2014 "),yY=n(yqe,"A",{href:!0});var Yxt=s(yY);G8r=r(Yxt,"TFConvBertForTokenClassification"),Yxt.forEach(t),O8r=r(yqe," (ConvBERT model)"),yqe.forEach(t),V8r=i(me),TC=n(me,"LI",{});var xqe=s(TC);X7e=n(xqe,"STRONG",{});var Kxt=s(X7e);X8r=r(Kxt,"deberta"),Kxt.forEach(t),z8r=r(xqe," \u2014 "),xY=n(xqe,"A",{href:!0});var Zxt=s(xY);W8r=r(Zxt,"TFDebertaForTokenClassification"),Zxt.forEach(t),Q8r=r(xqe," (DeBERTa model)"),xqe.forEach(t),H8r=i(me),MC=n(me,"LI",{});var $qe=s(MC);z7e=n($qe,"STRONG",{});var e$t=s(z7e);U8r=r(e$t,"deberta-v2"),e$t.forEach(t),J8r=r($qe," \u2014 "),$Y=n($qe,"A",{href:!0});var o$t=s($Y);Y8r=r(o$t,"TFDebertaV2ForTokenClassification"),o$t.forEach(t),K8r=r($qe," (DeBERTa-v2 model)"),$qe.forEach(t),Z8r=i(me),EC=n(me,"LI",{});var kqe=s(EC);W7e=n(kqe,"STRONG",{});var r$t=s(W7e);e9r=r(r$t,"distilbert"),r$t.forEach(t),o9r=r(kqe," \u2014 "),kY=n(kqe,"A",{href:!0});var t$t=s(kY);r9r=r(t$t,"TFDistilBertForTokenClassification"),t$t.forEach(t),t9r=r(kqe," (DistilBERT model)"),kqe.forEach(t),a9r=i(me),CC=n(me,"LI",{});var Sqe=s(CC);Q7e=n(Sqe,"STRONG",{});var a$t=s(Q7e);n9r=r(a$t,"electra"),a$t.forEach(t),s9r=r(Sqe," \u2014 "),SY=n(Sqe,"A",{href:!0});var n$t=s(SY);l9r=r(n$t,"TFElectraForTokenClassification"),n$t.forEach(t),i9r=r(Sqe," (ELECTRA model)"),Sqe.forEach(t),d9r=i(me),wC=n(me,"LI",{});var Rqe=s(wC);H7e=n(Rqe,"STRONG",{});var s$t=s(H7e);c9r=r(s$t,"flaubert"),s$t.forEach(t),f9r=r(Rqe," \u2014 "),RY=n(Rqe,"A",{href:!0});var l$t=s(RY);m9r=r(l$t,"TFFlaubertForTokenClassification"),l$t.forEach(t),g9r=r(Rqe," (FlauBERT model)"),Rqe.forEach(t),h9r=i(me),AC=n(me,"LI",{});var Pqe=s(AC);U7e=n(Pqe,"STRONG",{});var i$t=s(U7e);p9r=r(i$t,"funnel"),i$t.forEach(t),u9r=r(Pqe," \u2014 "),PY=n(Pqe,"A",{href:!0});var d$t=s(PY);_9r=r(d$t,"TFFunnelForTokenClassification"),d$t.forEach(t),b9r=r(Pqe," (Funnel Transformer model)"),Pqe.forEach(t),v9r=i(me),LC=n(me,"LI",{});var Bqe=s(LC);J7e=n(Bqe,"STRONG",{});var c$t=s(J7e);F9r=r(c$t,"layoutlm"),c$t.forEach(t),T9r=r(Bqe," \u2014 "),BY=n(Bqe,"A",{href:!0});var f$t=s(BY);M9r=r(f$t,"TFLayoutLMForTokenClassification"),f$t.forEach(t),E9r=r(Bqe," (LayoutLM model)"),Bqe.forEach(t),C9r=i(me),yC=n(me,"LI",{});var Iqe=s(yC);Y7e=n(Iqe,"STRONG",{});var m$t=s(Y7e);w9r=r(m$t,"longformer"),m$t.forEach(t),A9r=r(Iqe," \u2014 "),IY=n(Iqe,"A",{href:!0});var g$t=s(IY);L9r=r(g$t,"TFLongformerForTokenClassification"),g$t.forEach(t),y9r=r(Iqe," (Longformer model)"),Iqe.forEach(t),x9r=i(me),xC=n(me,"LI",{});var Nqe=s(xC);K7e=n(Nqe,"STRONG",{});var h$t=s(K7e);$9r=r(h$t,"mobilebert"),h$t.forEach(t),k9r=r(Nqe," \u2014 "),NY=n(Nqe,"A",{href:!0});var p$t=s(NY);S9r=r(p$t,"TFMobileBertForTokenClassification"),p$t.forEach(t),R9r=r(Nqe," (MobileBERT model)"),Nqe.forEach(t),P9r=i(me),$C=n(me,"LI",{});var qqe=s($C);Z7e=n(qqe,"STRONG",{});var u$t=s(Z7e);B9r=r(u$t,"mpnet"),u$t.forEach(t),I9r=r(qqe," \u2014 "),qY=n(qqe,"A",{href:!0});var _$t=s(qY);N9r=r(_$t,"TFMPNetForTokenClassification"),_$t.forEach(t),q9r=r(qqe," (MPNet model)"),qqe.forEach(t),j9r=i(me),kC=n(me,"LI",{});var jqe=s(kC);eMe=n(jqe,"STRONG",{});var b$t=s(eMe);D9r=r(b$t,"rembert"),b$t.forEach(t),G9r=r(jqe," \u2014 "),jY=n(jqe,"A",{href:!0});var v$t=s(jY);O9r=r(v$t,"TFRemBertForTokenClassification"),v$t.forEach(t),V9r=r(jqe," (RemBERT model)"),jqe.forEach(t),X9r=i(me),SC=n(me,"LI",{});var Dqe=s(SC);oMe=n(Dqe,"STRONG",{});var F$t=s(oMe);z9r=r(F$t,"roberta"),F$t.forEach(t),W9r=r(Dqe," \u2014 "),DY=n(Dqe,"A",{href:!0});var T$t=s(DY);Q9r=r(T$t,"TFRobertaForTokenClassification"),T$t.forEach(t),H9r=r(Dqe," (RoBERTa model)"),Dqe.forEach(t),U9r=i(me),RC=n(me,"LI",{});var Gqe=s(RC);rMe=n(Gqe,"STRONG",{});var M$t=s(rMe);J9r=r(M$t,"roformer"),M$t.forEach(t),Y9r=r(Gqe," \u2014 "),GY=n(Gqe,"A",{href:!0});var E$t=s(GY);K9r=r(E$t,"TFRoFormerForTokenClassification"),E$t.forEach(t),Z9r=r(Gqe," (RoFormer model)"),Gqe.forEach(t),exr=i(me),PC=n(me,"LI",{});var Oqe=s(PC);tMe=n(Oqe,"STRONG",{});var C$t=s(tMe);oxr=r(C$t,"xlm"),C$t.forEach(t),rxr=r(Oqe," \u2014 "),OY=n(Oqe,"A",{href:!0});var w$t=s(OY);txr=r(w$t,"TFXLMForTokenClassification"),w$t.forEach(t),axr=r(Oqe," (XLM model)"),Oqe.forEach(t),nxr=i(me),BC=n(me,"LI",{});var Vqe=s(BC);aMe=n(Vqe,"STRONG",{});var A$t=s(aMe);sxr=r(A$t,"xlm-roberta"),A$t.forEach(t),lxr=r(Vqe," \u2014 "),VY=n(Vqe,"A",{href:!0});var L$t=s(VY);ixr=r(L$t,"TFXLMRobertaForTokenClassification"),L$t.forEach(t),dxr=r(Vqe," (XLM-RoBERTa model)"),Vqe.forEach(t),cxr=i(me),IC=n(me,"LI",{});var Xqe=s(IC);nMe=n(Xqe,"STRONG",{});var y$t=s(nMe);fxr=r(y$t,"xlnet"),y$t.forEach(t),mxr=r(Xqe," \u2014 "),XY=n(Xqe,"A",{href:!0});var x$t=s(XY);gxr=r(x$t,"TFXLNetForTokenClassification"),x$t.forEach(t),hxr=r(Xqe," (XLNet model)"),Xqe.forEach(t),me.forEach(t),pxr=i(Xl),T(NC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),XOe=i(f),Rc=n(f,"H2",{class:!0});var ZXe=s(Rc);qC=n(ZXe,"A",{id:!0,class:!0,href:!0});var $$t=s(qC);sMe=n($$t,"SPAN",{});var k$t=s(sMe);T(fx.$$.fragment,k$t),k$t.forEach(t),$$t.forEach(t),uxr=i(ZXe),lMe=n(ZXe,"SPAN",{});var S$t=s(lMe);_xr=r(S$t,"TFAutoModelForQuestionAnswering"),S$t.forEach(t),ZXe.forEach(t),zOe=i(f),cr=n(f,"DIV",{class:!0});var zl=s(cr);T(mx.$$.fragment,zl),bxr=i(zl),Pc=n(zl,"P",{});var Cre=s(Pc);vxr=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zY=n(Cre,"A",{href:!0});var R$t=s(zY);Fxr=r(R$t,"from_pretrained()"),R$t.forEach(t),Txr=r(Cre," class method or the "),WY=n(Cre,"A",{href:!0});var P$t=s(WY);Mxr=r(P$t,"from_config()"),P$t.forEach(t),Exr=r(Cre,` class
method.`),Cre.forEach(t),Cxr=i(zl),gx=n(zl,"P",{});var eze=s(gx);wxr=r(eze,"This class cannot be instantiated directly using "),iMe=n(eze,"CODE",{});var B$t=s(iMe);Axr=r(B$t,"__init__()"),B$t.forEach(t),Lxr=r(eze," (throws an error)."),eze.forEach(t),yxr=i(zl),Gt=n(zl,"DIV",{class:!0});var V6=s(Gt);T(hx.$$.fragment,V6),xxr=i(V6),dMe=n(V6,"P",{});var I$t=s(dMe);$xr=r(I$t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),I$t.forEach(t),kxr=i(V6),Bc=n(V6,"P",{});var wre=s(Bc);Sxr=r(wre,`Note:
Loading a model from its configuration file does `),cMe=n(wre,"STRONG",{});var N$t=s(cMe);Rxr=r(N$t,"not"),N$t.forEach(t),Pxr=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(wre,"A",{href:!0});var q$t=s(QY);Bxr=r(q$t,"from_pretrained()"),q$t.forEach(t),Ixr=r(wre," to load the model weights."),wre.forEach(t),Nxr=i(V6),T(jC.$$.fragment,V6),V6.forEach(t),qxr=i(zl),qr=n(zl,"DIV",{class:!0});var Wl=s(qr);T(px.$$.fragment,Wl),jxr=i(Wl),fMe=n(Wl,"P",{});var j$t=s(fMe);Dxr=r(j$t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),j$t.forEach(t),Gxr=i(Wl),un=n(Wl,"P",{});var X6=s(un);Oxr=r(X6,"The model class to instantiate is selected based on the "),mMe=n(X6,"CODE",{});var D$t=s(mMe);Vxr=r(D$t,"model_type"),D$t.forEach(t),Xxr=r(X6,` property of the config object (either
passed as an argument or loaded from `),gMe=n(X6,"CODE",{});var G$t=s(gMe);zxr=r(G$t,"pretrained_model_name_or_path"),G$t.forEach(t),Wxr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=n(X6,"CODE",{});var O$t=s(hMe);Qxr=r(O$t,"pretrained_model_name_or_path"),O$t.forEach(t),Hxr=r(X6,":"),X6.forEach(t),Uxr=i(Wl),ce=n(Wl,"UL",{});var ge=s(ce);DC=n(ge,"LI",{});var zqe=s(DC);pMe=n(zqe,"STRONG",{});var V$t=s(pMe);Jxr=r(V$t,"albert"),V$t.forEach(t),Yxr=r(zqe," \u2014 "),HY=n(zqe,"A",{href:!0});var X$t=s(HY);Kxr=r(X$t,"TFAlbertForQuestionAnswering"),X$t.forEach(t),Zxr=r(zqe," (ALBERT model)"),zqe.forEach(t),e$r=i(ge),GC=n(ge,"LI",{});var Wqe=s(GC);uMe=n(Wqe,"STRONG",{});var z$t=s(uMe);o$r=r(z$t,"bert"),z$t.forEach(t),r$r=r(Wqe," \u2014 "),UY=n(Wqe,"A",{href:!0});var W$t=s(UY);t$r=r(W$t,"TFBertForQuestionAnswering"),W$t.forEach(t),a$r=r(Wqe," (BERT model)"),Wqe.forEach(t),n$r=i(ge),OC=n(ge,"LI",{});var Qqe=s(OC);_Me=n(Qqe,"STRONG",{});var Q$t=s(_Me);s$r=r(Q$t,"camembert"),Q$t.forEach(t),l$r=r(Qqe," \u2014 "),JY=n(Qqe,"A",{href:!0});var H$t=s(JY);i$r=r(H$t,"TFCamembertForQuestionAnswering"),H$t.forEach(t),d$r=r(Qqe," (CamemBERT model)"),Qqe.forEach(t),c$r=i(ge),VC=n(ge,"LI",{});var Hqe=s(VC);bMe=n(Hqe,"STRONG",{});var U$t=s(bMe);f$r=r(U$t,"convbert"),U$t.forEach(t),m$r=r(Hqe," \u2014 "),YY=n(Hqe,"A",{href:!0});var J$t=s(YY);g$r=r(J$t,"TFConvBertForQuestionAnswering"),J$t.forEach(t),h$r=r(Hqe," (ConvBERT model)"),Hqe.forEach(t),p$r=i(ge),XC=n(ge,"LI",{});var Uqe=s(XC);vMe=n(Uqe,"STRONG",{});var Y$t=s(vMe);u$r=r(Y$t,"deberta"),Y$t.forEach(t),_$r=r(Uqe," \u2014 "),KY=n(Uqe,"A",{href:!0});var K$t=s(KY);b$r=r(K$t,"TFDebertaForQuestionAnswering"),K$t.forEach(t),v$r=r(Uqe," (DeBERTa model)"),Uqe.forEach(t),F$r=i(ge),zC=n(ge,"LI",{});var Jqe=s(zC);FMe=n(Jqe,"STRONG",{});var Z$t=s(FMe);T$r=r(Z$t,"deberta-v2"),Z$t.forEach(t),M$r=r(Jqe," \u2014 "),ZY=n(Jqe,"A",{href:!0});var ekt=s(ZY);E$r=r(ekt,"TFDebertaV2ForQuestionAnswering"),ekt.forEach(t),C$r=r(Jqe," (DeBERTa-v2 model)"),Jqe.forEach(t),w$r=i(ge),WC=n(ge,"LI",{});var Yqe=s(WC);TMe=n(Yqe,"STRONG",{});var okt=s(TMe);A$r=r(okt,"distilbert"),okt.forEach(t),L$r=r(Yqe," \u2014 "),eK=n(Yqe,"A",{href:!0});var rkt=s(eK);y$r=r(rkt,"TFDistilBertForQuestionAnswering"),rkt.forEach(t),x$r=r(Yqe," (DistilBERT model)"),Yqe.forEach(t),$$r=i(ge),QC=n(ge,"LI",{});var Kqe=s(QC);MMe=n(Kqe,"STRONG",{});var tkt=s(MMe);k$r=r(tkt,"electra"),tkt.forEach(t),S$r=r(Kqe," \u2014 "),oK=n(Kqe,"A",{href:!0});var akt=s(oK);R$r=r(akt,"TFElectraForQuestionAnswering"),akt.forEach(t),P$r=r(Kqe," (ELECTRA model)"),Kqe.forEach(t),B$r=i(ge),HC=n(ge,"LI",{});var Zqe=s(HC);EMe=n(Zqe,"STRONG",{});var nkt=s(EMe);I$r=r(nkt,"flaubert"),nkt.forEach(t),N$r=r(Zqe," \u2014 "),rK=n(Zqe,"A",{href:!0});var skt=s(rK);q$r=r(skt,"TFFlaubertForQuestionAnsweringSimple"),skt.forEach(t),j$r=r(Zqe," (FlauBERT model)"),Zqe.forEach(t),D$r=i(ge),UC=n(ge,"LI",{});var eje=s(UC);CMe=n(eje,"STRONG",{});var lkt=s(CMe);G$r=r(lkt,"funnel"),lkt.forEach(t),O$r=r(eje," \u2014 "),tK=n(eje,"A",{href:!0});var ikt=s(tK);V$r=r(ikt,"TFFunnelForQuestionAnswering"),ikt.forEach(t),X$r=r(eje," (Funnel Transformer model)"),eje.forEach(t),z$r=i(ge),JC=n(ge,"LI",{});var oje=s(JC);wMe=n(oje,"STRONG",{});var dkt=s(wMe);W$r=r(dkt,"gptj"),dkt.forEach(t),Q$r=r(oje," \u2014 "),aK=n(oje,"A",{href:!0});var ckt=s(aK);H$r=r(ckt,"TFGPTJForQuestionAnswering"),ckt.forEach(t),U$r=r(oje," (GPT-J model)"),oje.forEach(t),J$r=i(ge),YC=n(ge,"LI",{});var rje=s(YC);AMe=n(rje,"STRONG",{});var fkt=s(AMe);Y$r=r(fkt,"longformer"),fkt.forEach(t),K$r=r(rje," \u2014 "),nK=n(rje,"A",{href:!0});var mkt=s(nK);Z$r=r(mkt,"TFLongformerForQuestionAnswering"),mkt.forEach(t),ekr=r(rje," (Longformer model)"),rje.forEach(t),okr=i(ge),KC=n(ge,"LI",{});var tje=s(KC);LMe=n(tje,"STRONG",{});var gkt=s(LMe);rkr=r(gkt,"mobilebert"),gkt.forEach(t),tkr=r(tje," \u2014 "),sK=n(tje,"A",{href:!0});var hkt=s(sK);akr=r(hkt,"TFMobileBertForQuestionAnswering"),hkt.forEach(t),nkr=r(tje," (MobileBERT model)"),tje.forEach(t),skr=i(ge),ZC=n(ge,"LI",{});var aje=s(ZC);yMe=n(aje,"STRONG",{});var pkt=s(yMe);lkr=r(pkt,"mpnet"),pkt.forEach(t),ikr=r(aje," \u2014 "),lK=n(aje,"A",{href:!0});var ukt=s(lK);dkr=r(ukt,"TFMPNetForQuestionAnswering"),ukt.forEach(t),ckr=r(aje," (MPNet model)"),aje.forEach(t),fkr=i(ge),e5=n(ge,"LI",{});var nje=s(e5);xMe=n(nje,"STRONG",{});var _kt=s(xMe);mkr=r(_kt,"rembert"),_kt.forEach(t),gkr=r(nje," \u2014 "),iK=n(nje,"A",{href:!0});var bkt=s(iK);hkr=r(bkt,"TFRemBertForQuestionAnswering"),bkt.forEach(t),pkr=r(nje," (RemBERT model)"),nje.forEach(t),ukr=i(ge),o5=n(ge,"LI",{});var sje=s(o5);$Me=n(sje,"STRONG",{});var vkt=s($Me);_kr=r(vkt,"roberta"),vkt.forEach(t),bkr=r(sje," \u2014 "),dK=n(sje,"A",{href:!0});var Fkt=s(dK);vkr=r(Fkt,"TFRobertaForQuestionAnswering"),Fkt.forEach(t),Fkr=r(sje," (RoBERTa model)"),sje.forEach(t),Tkr=i(ge),r5=n(ge,"LI",{});var lje=s(r5);kMe=n(lje,"STRONG",{});var Tkt=s(kMe);Mkr=r(Tkt,"roformer"),Tkt.forEach(t),Ekr=r(lje," \u2014 "),cK=n(lje,"A",{href:!0});var Mkt=s(cK);Ckr=r(Mkt,"TFRoFormerForQuestionAnswering"),Mkt.forEach(t),wkr=r(lje," (RoFormer model)"),lje.forEach(t),Akr=i(ge),t5=n(ge,"LI",{});var ije=s(t5);SMe=n(ije,"STRONG",{});var Ekt=s(SMe);Lkr=r(Ekt,"xlm"),Ekt.forEach(t),ykr=r(ije," \u2014 "),fK=n(ije,"A",{href:!0});var Ckt=s(fK);xkr=r(Ckt,"TFXLMForQuestionAnsweringSimple"),Ckt.forEach(t),$kr=r(ije," (XLM model)"),ije.forEach(t),kkr=i(ge),a5=n(ge,"LI",{});var dje=s(a5);RMe=n(dje,"STRONG",{});var wkt=s(RMe);Skr=r(wkt,"xlm-roberta"),wkt.forEach(t),Rkr=r(dje," \u2014 "),mK=n(dje,"A",{href:!0});var Akt=s(mK);Pkr=r(Akt,"TFXLMRobertaForQuestionAnswering"),Akt.forEach(t),Bkr=r(dje," (XLM-RoBERTa model)"),dje.forEach(t),Ikr=i(ge),n5=n(ge,"LI",{});var cje=s(n5);PMe=n(cje,"STRONG",{});var Lkt=s(PMe);Nkr=r(Lkt,"xlnet"),Lkt.forEach(t),qkr=r(cje," \u2014 "),gK=n(cje,"A",{href:!0});var ykt=s(gK);jkr=r(ykt,"TFXLNetForQuestionAnsweringSimple"),ykt.forEach(t),Dkr=r(cje," (XLNet model)"),cje.forEach(t),ge.forEach(t),Gkr=i(Wl),T(s5.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),WOe=i(f),Ic=n(f,"H2",{class:!0});var oze=s(Ic);l5=n(oze,"A",{id:!0,class:!0,href:!0});var xkt=s(l5);BMe=n(xkt,"SPAN",{});var $kt=s(BMe);T(ux.$$.fragment,$kt),$kt.forEach(t),xkt.forEach(t),Okr=i(oze),IMe=n(oze,"SPAN",{});var kkt=s(IMe);Vkr=r(kkt,"TFAutoModelForVision2Seq"),kkt.forEach(t),oze.forEach(t),QOe=i(f),fr=n(f,"DIV",{class:!0});var Ql=s(fr);T(_x.$$.fragment,Ql),Xkr=i(Ql),Nc=n(Ql,"P",{});var Are=s(Nc);zkr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hK=n(Are,"A",{href:!0});var Skt=s(hK);Wkr=r(Skt,"from_pretrained()"),Skt.forEach(t),Qkr=r(Are," class method or the "),pK=n(Are,"A",{href:!0});var Rkt=s(pK);Hkr=r(Rkt,"from_config()"),Rkt.forEach(t),Ukr=r(Are,` class
method.`),Are.forEach(t),Jkr=i(Ql),bx=n(Ql,"P",{});var rze=s(bx);Ykr=r(rze,"This class cannot be instantiated directly using "),NMe=n(rze,"CODE",{});var Pkt=s(NMe);Kkr=r(Pkt,"__init__()"),Pkt.forEach(t),Zkr=r(rze," (throws an error)."),rze.forEach(t),eSr=i(Ql),Ot=n(Ql,"DIV",{class:!0});var z6=s(Ot);T(vx.$$.fragment,z6),oSr=i(z6),qMe=n(z6,"P",{});var Bkt=s(qMe);rSr=r(Bkt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Bkt.forEach(t),tSr=i(z6),qc=n(z6,"P",{});var Lre=s(qc);aSr=r(Lre,`Note:
Loading a model from its configuration file does `),jMe=n(Lre,"STRONG",{});var Ikt=s(jMe);nSr=r(Ikt,"not"),Ikt.forEach(t),sSr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(Lre,"A",{href:!0});var Nkt=s(uK);lSr=r(Nkt,"from_pretrained()"),Nkt.forEach(t),iSr=r(Lre," to load the model weights."),Lre.forEach(t),dSr=i(z6),T(i5.$$.fragment,z6),z6.forEach(t),cSr=i(Ql),jr=n(Ql,"DIV",{class:!0});var Hl=s(jr);T(Fx.$$.fragment,Hl),fSr=i(Hl),DMe=n(Hl,"P",{});var qkt=s(DMe);mSr=r(qkt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qkt.forEach(t),gSr=i(Hl),_n=n(Hl,"P",{});var W6=s(_n);hSr=r(W6,"The model class to instantiate is selected based on the "),GMe=n(W6,"CODE",{});var jkt=s(GMe);pSr=r(jkt,"model_type"),jkt.forEach(t),uSr=r(W6,` property of the config object (either
passed as an argument or loaded from `),OMe=n(W6,"CODE",{});var Dkt=s(OMe);_Sr=r(Dkt,"pretrained_model_name_or_path"),Dkt.forEach(t),bSr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=n(W6,"CODE",{});var Gkt=s(VMe);vSr=r(Gkt,"pretrained_model_name_or_path"),Gkt.forEach(t),FSr=r(W6,":"),W6.forEach(t),TSr=i(Hl),XMe=n(Hl,"UL",{});var Okt=s(XMe);d5=n(Okt,"LI",{});var fje=s(d5);zMe=n(fje,"STRONG",{});var Vkt=s(zMe);MSr=r(Vkt,"vision-encoder-decoder"),Vkt.forEach(t),ESr=r(fje," \u2014 "),_K=n(fje,"A",{href:!0});var Xkt=s(_K);CSr=r(Xkt,"TFVisionEncoderDecoderModel"),Xkt.forEach(t),wSr=r(fje," (Vision Encoder decoder model)"),fje.forEach(t),Okt.forEach(t),ASr=i(Hl),T(c5.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),HOe=i(f),jc=n(f,"H2",{class:!0});var tze=s(jc);f5=n(tze,"A",{id:!0,class:!0,href:!0});var zkt=s(f5);WMe=n(zkt,"SPAN",{});var Wkt=s(WMe);T(Tx.$$.fragment,Wkt),Wkt.forEach(t),zkt.forEach(t),LSr=i(tze),QMe=n(tze,"SPAN",{});var Qkt=s(QMe);ySr=r(Qkt,"TFAutoModelForSpeechSeq2Seq"),Qkt.forEach(t),tze.forEach(t),UOe=i(f),mr=n(f,"DIV",{class:!0});var Ul=s(mr);T(Mx.$$.fragment,Ul),xSr=i(Ul),Dc=n(Ul,"P",{});var yre=s(Dc);$Sr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bK=n(yre,"A",{href:!0});var Hkt=s(bK);kSr=r(Hkt,"from_pretrained()"),Hkt.forEach(t),SSr=r(yre," class method or the "),vK=n(yre,"A",{href:!0});var Ukt=s(vK);RSr=r(Ukt,"from_config()"),Ukt.forEach(t),PSr=r(yre,` class
method.`),yre.forEach(t),BSr=i(Ul),Ex=n(Ul,"P",{});var aze=s(Ex);ISr=r(aze,"This class cannot be instantiated directly using "),HMe=n(aze,"CODE",{});var Jkt=s(HMe);NSr=r(Jkt,"__init__()"),Jkt.forEach(t),qSr=r(aze," (throws an error)."),aze.forEach(t),jSr=i(Ul),Vt=n(Ul,"DIV",{class:!0});var Q6=s(Vt);T(Cx.$$.fragment,Q6),DSr=i(Q6),UMe=n(Q6,"P",{});var Ykt=s(UMe);GSr=r(Ykt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ykt.forEach(t),OSr=i(Q6),Gc=n(Q6,"P",{});var xre=s(Gc);VSr=r(xre,`Note:
Loading a model from its configuration file does `),JMe=n(xre,"STRONG",{});var Kkt=s(JMe);XSr=r(Kkt,"not"),Kkt.forEach(t),zSr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),FK=n(xre,"A",{href:!0});var Zkt=s(FK);WSr=r(Zkt,"from_pretrained()"),Zkt.forEach(t),QSr=r(xre," to load the model weights."),xre.forEach(t),HSr=i(Q6),T(m5.$$.fragment,Q6),Q6.forEach(t),USr=i(Ul),Dr=n(Ul,"DIV",{class:!0});var Jl=s(Dr);T(wx.$$.fragment,Jl),JSr=i(Jl),YMe=n(Jl,"P",{});var eSt=s(YMe);YSr=r(eSt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),eSt.forEach(t),KSr=i(Jl),bn=n(Jl,"P",{});var H6=s(bn);ZSr=r(H6,"The model class to instantiate is selected based on the "),KMe=n(H6,"CODE",{});var oSt=s(KMe);eRr=r(oSt,"model_type"),oSt.forEach(t),oRr=r(H6,` property of the config object (either
passed as an argument or loaded from `),ZMe=n(H6,"CODE",{});var rSt=s(ZMe);rRr=r(rSt,"pretrained_model_name_or_path"),rSt.forEach(t),tRr=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eEe=n(H6,"CODE",{});var tSt=s(eEe);aRr=r(tSt,"pretrained_model_name_or_path"),tSt.forEach(t),nRr=r(H6,":"),H6.forEach(t),sRr=i(Jl),oEe=n(Jl,"UL",{});var aSt=s(oEe);g5=n(aSt,"LI",{});var mje=s(g5);rEe=n(mje,"STRONG",{});var nSt=s(rEe);lRr=r(nSt,"speech_to_text"),nSt.forEach(t),iRr=r(mje," \u2014 "),TK=n(mje,"A",{href:!0});var sSt=s(TK);dRr=r(sSt,"TFSpeech2TextForConditionalGeneration"),sSt.forEach(t),cRr=r(mje," (Speech2Text model)"),mje.forEach(t),aSt.forEach(t),fRr=i(Jl),T(h5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),JOe=i(f),Oc=n(f,"H2",{class:!0});var nze=s(Oc);p5=n(nze,"A",{id:!0,class:!0,href:!0});var lSt=s(p5);tEe=n(lSt,"SPAN",{});var iSt=s(tEe);T(Ax.$$.fragment,iSt),iSt.forEach(t),lSt.forEach(t),mRr=i(nze),aEe=n(nze,"SPAN",{});var dSt=s(aEe);gRr=r(dSt,"FlaxAutoModel"),dSt.forEach(t),nze.forEach(t),YOe=i(f),gr=n(f,"DIV",{class:!0});var Yl=s(gr);T(Lx.$$.fragment,Yl),hRr=i(Yl),Vc=n(Yl,"P",{});var $re=s(Vc);pRr=r($re,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),MK=n($re,"A",{href:!0});var cSt=s(MK);uRr=r(cSt,"from_pretrained()"),cSt.forEach(t),_Rr=r($re," class method or the "),EK=n($re,"A",{href:!0});var fSt=s(EK);bRr=r(fSt,"from_config()"),fSt.forEach(t),vRr=r($re,` class
method.`),$re.forEach(t),FRr=i(Yl),yx=n(Yl,"P",{});var sze=s(yx);TRr=r(sze,"This class cannot be instantiated directly using "),nEe=n(sze,"CODE",{});var mSt=s(nEe);MRr=r(mSt,"__init__()"),mSt.forEach(t),ERr=r(sze," (throws an error)."),sze.forEach(t),CRr=i(Yl),Xt=n(Yl,"DIV",{class:!0});var U6=s(Xt);T(xx.$$.fragment,U6),wRr=i(U6),sEe=n(U6,"P",{});var gSt=s(sEe);ARr=r(gSt,"Instantiates one of the base model classes of the library from a configuration."),gSt.forEach(t),LRr=i(U6),Xc=n(U6,"P",{});var kre=s(Xc);yRr=r(kre,`Note:
Loading a model from its configuration file does `),lEe=n(kre,"STRONG",{});var hSt=s(lEe);xRr=r(hSt,"not"),hSt.forEach(t),$Rr=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=n(kre,"A",{href:!0});var pSt=s(CK);kRr=r(pSt,"from_pretrained()"),pSt.forEach(t),SRr=r(kre," to load the model weights."),kre.forEach(t),RRr=i(U6),T(u5.$$.fragment,U6),U6.forEach(t),PRr=i(Yl),Gr=n(Yl,"DIV",{class:!0});var Kl=s(Gr);T($x.$$.fragment,Kl),BRr=i(Kl),iEe=n(Kl,"P",{});var uSt=s(iEe);IRr=r(uSt,"Instantiate one of the base model classes of the library from a pretrained model."),uSt.forEach(t),NRr=i(Kl),vn=n(Kl,"P",{});var J6=s(vn);qRr=r(J6,"The model class to instantiate is selected based on the "),dEe=n(J6,"CODE",{});var _St=s(dEe);jRr=r(_St,"model_type"),_St.forEach(t),DRr=r(J6,` property of the config object (either
passed as an argument or loaded from `),cEe=n(J6,"CODE",{});var bSt=s(cEe);GRr=r(bSt,"pretrained_model_name_or_path"),bSt.forEach(t),ORr=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fEe=n(J6,"CODE",{});var vSt=s(fEe);VRr=r(vSt,"pretrained_model_name_or_path"),vSt.forEach(t),XRr=r(J6,":"),J6.forEach(t),zRr=i(Kl),oe=n(Kl,"UL",{});var ae=s(oe);_5=n(ae,"LI",{});var gje=s(_5);mEe=n(gje,"STRONG",{});var FSt=s(mEe);WRr=r(FSt,"albert"),FSt.forEach(t),QRr=r(gje," \u2014 "),wK=n(gje,"A",{href:!0});var TSt=s(wK);HRr=r(TSt,"FlaxAlbertModel"),TSt.forEach(t),URr=r(gje," (ALBERT model)"),gje.forEach(t),JRr=i(ae),b5=n(ae,"LI",{});var hje=s(b5);gEe=n(hje,"STRONG",{});var MSt=s(gEe);YRr=r(MSt,"bart"),MSt.forEach(t),KRr=r(hje," \u2014 "),AK=n(hje,"A",{href:!0});var ESt=s(AK);ZRr=r(ESt,"FlaxBartModel"),ESt.forEach(t),ePr=r(hje," (BART model)"),hje.forEach(t),oPr=i(ae),v5=n(ae,"LI",{});var pje=s(v5);hEe=n(pje,"STRONG",{});var CSt=s(hEe);rPr=r(CSt,"beit"),CSt.forEach(t),tPr=r(pje," \u2014 "),LK=n(pje,"A",{href:!0});var wSt=s(LK);aPr=r(wSt,"FlaxBeitModel"),wSt.forEach(t),nPr=r(pje," (BEiT model)"),pje.forEach(t),sPr=i(ae),F5=n(ae,"LI",{});var uje=s(F5);pEe=n(uje,"STRONG",{});var ASt=s(pEe);lPr=r(ASt,"bert"),ASt.forEach(t),iPr=r(uje," \u2014 "),yK=n(uje,"A",{href:!0});var LSt=s(yK);dPr=r(LSt,"FlaxBertModel"),LSt.forEach(t),cPr=r(uje," (BERT model)"),uje.forEach(t),fPr=i(ae),T5=n(ae,"LI",{});var _je=s(T5);uEe=n(_je,"STRONG",{});var ySt=s(uEe);mPr=r(ySt,"big_bird"),ySt.forEach(t),gPr=r(_je," \u2014 "),xK=n(_je,"A",{href:!0});var xSt=s(xK);hPr=r(xSt,"FlaxBigBirdModel"),xSt.forEach(t),pPr=r(_je," (BigBird model)"),_je.forEach(t),uPr=i(ae),M5=n(ae,"LI",{});var bje=s(M5);_Ee=n(bje,"STRONG",{});var $St=s(_Ee);_Pr=r($St,"blenderbot"),$St.forEach(t),bPr=r(bje," \u2014 "),$K=n(bje,"A",{href:!0});var kSt=s($K);vPr=r(kSt,"FlaxBlenderbotModel"),kSt.forEach(t),FPr=r(bje," (Blenderbot model)"),bje.forEach(t),TPr=i(ae),E5=n(ae,"LI",{});var vje=s(E5);bEe=n(vje,"STRONG",{});var SSt=s(bEe);MPr=r(SSt,"blenderbot-small"),SSt.forEach(t),EPr=r(vje," \u2014 "),kK=n(vje,"A",{href:!0});var RSt=s(kK);CPr=r(RSt,"FlaxBlenderbotSmallModel"),RSt.forEach(t),wPr=r(vje," (BlenderbotSmall model)"),vje.forEach(t),APr=i(ae),C5=n(ae,"LI",{});var Fje=s(C5);vEe=n(Fje,"STRONG",{});var PSt=s(vEe);LPr=r(PSt,"clip"),PSt.forEach(t),yPr=r(Fje," \u2014 "),SK=n(Fje,"A",{href:!0});var BSt=s(SK);xPr=r(BSt,"FlaxCLIPModel"),BSt.forEach(t),$Pr=r(Fje," (CLIP model)"),Fje.forEach(t),kPr=i(ae),w5=n(ae,"LI",{});var Tje=s(w5);FEe=n(Tje,"STRONG",{});var ISt=s(FEe);SPr=r(ISt,"distilbert"),ISt.forEach(t),RPr=r(Tje," \u2014 "),RK=n(Tje,"A",{href:!0});var NSt=s(RK);PPr=r(NSt,"FlaxDistilBertModel"),NSt.forEach(t),BPr=r(Tje," (DistilBERT model)"),Tje.forEach(t),IPr=i(ae),A5=n(ae,"LI",{});var Mje=s(A5);TEe=n(Mje,"STRONG",{});var qSt=s(TEe);NPr=r(qSt,"electra"),qSt.forEach(t),qPr=r(Mje," \u2014 "),PK=n(Mje,"A",{href:!0});var jSt=s(PK);jPr=r(jSt,"FlaxElectraModel"),jSt.forEach(t),DPr=r(Mje," (ELECTRA model)"),Mje.forEach(t),GPr=i(ae),L5=n(ae,"LI",{});var Eje=s(L5);MEe=n(Eje,"STRONG",{});var DSt=s(MEe);OPr=r(DSt,"gpt2"),DSt.forEach(t),VPr=r(Eje," \u2014 "),BK=n(Eje,"A",{href:!0});var GSt=s(BK);XPr=r(GSt,"FlaxGPT2Model"),GSt.forEach(t),zPr=r(Eje," (OpenAI GPT-2 model)"),Eje.forEach(t),WPr=i(ae),y5=n(ae,"LI",{});var Cje=s(y5);EEe=n(Cje,"STRONG",{});var OSt=s(EEe);QPr=r(OSt,"gpt_neo"),OSt.forEach(t),HPr=r(Cje," \u2014 "),IK=n(Cje,"A",{href:!0});var VSt=s(IK);UPr=r(VSt,"FlaxGPTNeoModel"),VSt.forEach(t),JPr=r(Cje," (GPT Neo model)"),Cje.forEach(t),YPr=i(ae),x5=n(ae,"LI",{});var wje=s(x5);CEe=n(wje,"STRONG",{});var XSt=s(CEe);KPr=r(XSt,"gptj"),XSt.forEach(t),ZPr=r(wje," \u2014 "),NK=n(wje,"A",{href:!0});var zSt=s(NK);eBr=r(zSt,"FlaxGPTJModel"),zSt.forEach(t),oBr=r(wje," (GPT-J model)"),wje.forEach(t),rBr=i(ae),$5=n(ae,"LI",{});var Aje=s($5);wEe=n(Aje,"STRONG",{});var WSt=s(wEe);tBr=r(WSt,"longt5"),WSt.forEach(t),aBr=r(Aje," \u2014 "),qK=n(Aje,"A",{href:!0});var QSt=s(qK);nBr=r(QSt,"FlaxLongT5Model"),QSt.forEach(t),sBr=r(Aje," (LongT5 model)"),Aje.forEach(t),lBr=i(ae),k5=n(ae,"LI",{});var Lje=s(k5);AEe=n(Lje,"STRONG",{});var HSt=s(AEe);iBr=r(HSt,"marian"),HSt.forEach(t),dBr=r(Lje," \u2014 "),jK=n(Lje,"A",{href:!0});var USt=s(jK);cBr=r(USt,"FlaxMarianModel"),USt.forEach(t),fBr=r(Lje," (Marian model)"),Lje.forEach(t),mBr=i(ae),S5=n(ae,"LI",{});var yje=s(S5);LEe=n(yje,"STRONG",{});var JSt=s(LEe);gBr=r(JSt,"mbart"),JSt.forEach(t),hBr=r(yje," \u2014 "),DK=n(yje,"A",{href:!0});var YSt=s(DK);pBr=r(YSt,"FlaxMBartModel"),YSt.forEach(t),uBr=r(yje," (mBART model)"),yje.forEach(t),_Br=i(ae),R5=n(ae,"LI",{});var xje=s(R5);yEe=n(xje,"STRONG",{});var KSt=s(yEe);bBr=r(KSt,"mt5"),KSt.forEach(t),vBr=r(xje," \u2014 "),GK=n(xje,"A",{href:!0});var ZSt=s(GK);FBr=r(ZSt,"FlaxMT5Model"),ZSt.forEach(t),TBr=r(xje," (MT5 model)"),xje.forEach(t),MBr=i(ae),P5=n(ae,"LI",{});var $je=s(P5);xEe=n($je,"STRONG",{});var eRt=s(xEe);EBr=r(eRt,"opt"),eRt.forEach(t),CBr=r($je," \u2014 "),OK=n($je,"A",{href:!0});var oRt=s(OK);wBr=r(oRt,"FlaxOPTModel"),oRt.forEach(t),ABr=r($je," (OPT model)"),$je.forEach(t),LBr=i(ae),B5=n(ae,"LI",{});var kje=s(B5);$Ee=n(kje,"STRONG",{});var rRt=s($Ee);yBr=r(rRt,"pegasus"),rRt.forEach(t),xBr=r(kje," \u2014 "),VK=n(kje,"A",{href:!0});var tRt=s(VK);$Br=r(tRt,"FlaxPegasusModel"),tRt.forEach(t),kBr=r(kje," (Pegasus model)"),kje.forEach(t),SBr=i(ae),I5=n(ae,"LI",{});var Sje=s(I5);kEe=n(Sje,"STRONG",{});var aRt=s(kEe);RBr=r(aRt,"roberta"),aRt.forEach(t),PBr=r(Sje," \u2014 "),XK=n(Sje,"A",{href:!0});var nRt=s(XK);BBr=r(nRt,"FlaxRobertaModel"),nRt.forEach(t),IBr=r(Sje," (RoBERTa model)"),Sje.forEach(t),NBr=i(ae),N5=n(ae,"LI",{});var Rje=s(N5);SEe=n(Rje,"STRONG",{});var sRt=s(SEe);qBr=r(sRt,"roformer"),sRt.forEach(t),jBr=r(Rje," \u2014 "),zK=n(Rje,"A",{href:!0});var lRt=s(zK);DBr=r(lRt,"FlaxRoFormerModel"),lRt.forEach(t),GBr=r(Rje," (RoFormer model)"),Rje.forEach(t),OBr=i(ae),q5=n(ae,"LI",{});var Pje=s(q5);REe=n(Pje,"STRONG",{});var iRt=s(REe);VBr=r(iRt,"t5"),iRt.forEach(t),XBr=r(Pje," \u2014 "),WK=n(Pje,"A",{href:!0});var dRt=s(WK);zBr=r(dRt,"FlaxT5Model"),dRt.forEach(t),WBr=r(Pje," (T5 model)"),Pje.forEach(t),QBr=i(ae),j5=n(ae,"LI",{});var Bje=s(j5);PEe=n(Bje,"STRONG",{});var cRt=s(PEe);HBr=r(cRt,"vision-text-dual-encoder"),cRt.forEach(t),UBr=r(Bje," \u2014 "),QK=n(Bje,"A",{href:!0});var fRt=s(QK);JBr=r(fRt,"FlaxVisionTextDualEncoderModel"),fRt.forEach(t),YBr=r(Bje," (VisionTextDualEncoder model)"),Bje.forEach(t),KBr=i(ae),D5=n(ae,"LI",{});var Ije=s(D5);BEe=n(Ije,"STRONG",{});var mRt=s(BEe);ZBr=r(mRt,"vit"),mRt.forEach(t),eIr=r(Ije," \u2014 "),HK=n(Ije,"A",{href:!0});var gRt=s(HK);oIr=r(gRt,"FlaxViTModel"),gRt.forEach(t),rIr=r(Ije," (ViT model)"),Ije.forEach(t),tIr=i(ae),G5=n(ae,"LI",{});var Nje=s(G5);IEe=n(Nje,"STRONG",{});var hRt=s(IEe);aIr=r(hRt,"wav2vec2"),hRt.forEach(t),nIr=r(Nje," \u2014 "),UK=n(Nje,"A",{href:!0});var pRt=s(UK);sIr=r(pRt,"FlaxWav2Vec2Model"),pRt.forEach(t),lIr=r(Nje," (Wav2Vec2 model)"),Nje.forEach(t),iIr=i(ae),O5=n(ae,"LI",{});var qje=s(O5);NEe=n(qje,"STRONG",{});var uRt=s(NEe);dIr=r(uRt,"xglm"),uRt.forEach(t),cIr=r(qje," \u2014 "),JK=n(qje,"A",{href:!0});var _Rt=s(JK);fIr=r(_Rt,"FlaxXGLMModel"),_Rt.forEach(t),mIr=r(qje," (XGLM model)"),qje.forEach(t),gIr=i(ae),V5=n(ae,"LI",{});var jje=s(V5);qEe=n(jje,"STRONG",{});var bRt=s(qEe);hIr=r(bRt,"xlm-roberta"),bRt.forEach(t),pIr=r(jje," \u2014 "),YK=n(jje,"A",{href:!0});var vRt=s(YK);uIr=r(vRt,"FlaxXLMRobertaModel"),vRt.forEach(t),_Ir=r(jje," (XLM-RoBERTa model)"),jje.forEach(t),ae.forEach(t),bIr=i(Kl),T(X5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),KOe=i(f),zc=n(f,"H2",{class:!0});var lze=s(zc);z5=n(lze,"A",{id:!0,class:!0,href:!0});var FRt=s(z5);jEe=n(FRt,"SPAN",{});var TRt=s(jEe);T(kx.$$.fragment,TRt),TRt.forEach(t),FRt.forEach(t),vIr=i(lze),DEe=n(lze,"SPAN",{});var MRt=s(DEe);FIr=r(MRt,"FlaxAutoModelForCausalLM"),MRt.forEach(t),lze.forEach(t),ZOe=i(f),hr=n(f,"DIV",{class:!0});var Zl=s(hr);T(Sx.$$.fragment,Zl),TIr=i(Zl),Wc=n(Zl,"P",{});var Sre=s(Wc);MIr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),KK=n(Sre,"A",{href:!0});var ERt=s(KK);EIr=r(ERt,"from_pretrained()"),ERt.forEach(t),CIr=r(Sre," class method or the "),ZK=n(Sre,"A",{href:!0});var CRt=s(ZK);wIr=r(CRt,"from_config()"),CRt.forEach(t),AIr=r(Sre,` class
method.`),Sre.forEach(t),LIr=i(Zl),Rx=n(Zl,"P",{});var ize=s(Rx);yIr=r(ize,"This class cannot be instantiated directly using "),GEe=n(ize,"CODE",{});var wRt=s(GEe);xIr=r(wRt,"__init__()"),wRt.forEach(t),$Ir=r(ize," (throws an error)."),ize.forEach(t),kIr=i(Zl),zt=n(Zl,"DIV",{class:!0});var Y6=s(zt);T(Px.$$.fragment,Y6),SIr=i(Y6),OEe=n(Y6,"P",{});var ARt=s(OEe);RIr=r(ARt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ARt.forEach(t),PIr=i(Y6),Qc=n(Y6,"P",{});var Rre=s(Qc);BIr=r(Rre,`Note:
Loading a model from its configuration file does `),VEe=n(Rre,"STRONG",{});var LRt=s(VEe);IIr=r(LRt,"not"),LRt.forEach(t),NIr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(Rre,"A",{href:!0});var yRt=s(eZ);qIr=r(yRt,"from_pretrained()"),yRt.forEach(t),jIr=r(Rre," to load the model weights."),Rre.forEach(t),DIr=i(Y6),T(W5.$$.fragment,Y6),Y6.forEach(t),GIr=i(Zl),Or=n(Zl,"DIV",{class:!0});var ei=s(Or);T(Bx.$$.fragment,ei),OIr=i(ei),XEe=n(ei,"P",{});var xRt=s(XEe);VIr=r(xRt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xRt.forEach(t),XIr=i(ei),Fn=n(ei,"P",{});var K6=s(Fn);zIr=r(K6,"The model class to instantiate is selected based on the "),zEe=n(K6,"CODE",{});var $Rt=s(zEe);WIr=r($Rt,"model_type"),$Rt.forEach(t),QIr=r(K6,` property of the config object (either
passed as an argument or loaded from `),WEe=n(K6,"CODE",{});var kRt=s(WEe);HIr=r(kRt,"pretrained_model_name_or_path"),kRt.forEach(t),UIr=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QEe=n(K6,"CODE",{});var SRt=s(QEe);JIr=r(SRt,"pretrained_model_name_or_path"),SRt.forEach(t),YIr=r(K6,":"),K6.forEach(t),KIr=i(ei),xe=n(ei,"UL",{});var Ne=s(xe);Q5=n(Ne,"LI",{});var Dje=s(Q5);HEe=n(Dje,"STRONG",{});var RRt=s(HEe);ZIr=r(RRt,"bart"),RRt.forEach(t),eNr=r(Dje," \u2014 "),oZ=n(Dje,"A",{href:!0});var PRt=s(oZ);oNr=r(PRt,"FlaxBartForCausalLM"),PRt.forEach(t),rNr=r(Dje," (BART model)"),Dje.forEach(t),tNr=i(Ne),H5=n(Ne,"LI",{});var Gje=s(H5);UEe=n(Gje,"STRONG",{});var BRt=s(UEe);aNr=r(BRt,"bert"),BRt.forEach(t),nNr=r(Gje," \u2014 "),rZ=n(Gje,"A",{href:!0});var IRt=s(rZ);sNr=r(IRt,"FlaxBertForCausalLM"),IRt.forEach(t),lNr=r(Gje," (BERT model)"),Gje.forEach(t),iNr=i(Ne),U5=n(Ne,"LI",{});var Oje=s(U5);JEe=n(Oje,"STRONG",{});var NRt=s(JEe);dNr=r(NRt,"big_bird"),NRt.forEach(t),cNr=r(Oje," \u2014 "),tZ=n(Oje,"A",{href:!0});var qRt=s(tZ);fNr=r(qRt,"FlaxBigBirdForCausalLM"),qRt.forEach(t),mNr=r(Oje," (BigBird model)"),Oje.forEach(t),gNr=i(Ne),J5=n(Ne,"LI",{});var Vje=s(J5);YEe=n(Vje,"STRONG",{});var jRt=s(YEe);hNr=r(jRt,"electra"),jRt.forEach(t),pNr=r(Vje," \u2014 "),aZ=n(Vje,"A",{href:!0});var DRt=s(aZ);uNr=r(DRt,"FlaxElectraForCausalLM"),DRt.forEach(t),_Nr=r(Vje," (ELECTRA model)"),Vje.forEach(t),bNr=i(Ne),Y5=n(Ne,"LI",{});var Xje=s(Y5);KEe=n(Xje,"STRONG",{});var GRt=s(KEe);vNr=r(GRt,"gpt2"),GRt.forEach(t),FNr=r(Xje," \u2014 "),nZ=n(Xje,"A",{href:!0});var ORt=s(nZ);TNr=r(ORt,"FlaxGPT2LMHeadModel"),ORt.forEach(t),MNr=r(Xje," (OpenAI GPT-2 model)"),Xje.forEach(t),ENr=i(Ne),K5=n(Ne,"LI",{});var zje=s(K5);ZEe=n(zje,"STRONG",{});var VRt=s(ZEe);CNr=r(VRt,"gpt_neo"),VRt.forEach(t),wNr=r(zje," \u2014 "),sZ=n(zje,"A",{href:!0});var XRt=s(sZ);ANr=r(XRt,"FlaxGPTNeoForCausalLM"),XRt.forEach(t),LNr=r(zje," (GPT Neo model)"),zje.forEach(t),yNr=i(Ne),Z5=n(Ne,"LI",{});var Wje=s(Z5);eCe=n(Wje,"STRONG",{});var zRt=s(eCe);xNr=r(zRt,"gptj"),zRt.forEach(t),$Nr=r(Wje," \u2014 "),lZ=n(Wje,"A",{href:!0});var WRt=s(lZ);kNr=r(WRt,"FlaxGPTJForCausalLM"),WRt.forEach(t),SNr=r(Wje," (GPT-J model)"),Wje.forEach(t),RNr=i(Ne),e0=n(Ne,"LI",{});var Qje=s(e0);oCe=n(Qje,"STRONG",{});var QRt=s(oCe);PNr=r(QRt,"opt"),QRt.forEach(t),BNr=r(Qje," \u2014 "),iZ=n(Qje,"A",{href:!0});var HRt=s(iZ);INr=r(HRt,"FlaxOPTForCausalLM"),HRt.forEach(t),NNr=r(Qje," (OPT model)"),Qje.forEach(t),qNr=i(Ne),o0=n(Ne,"LI",{});var Hje=s(o0);rCe=n(Hje,"STRONG",{});var URt=s(rCe);jNr=r(URt,"roberta"),URt.forEach(t),DNr=r(Hje," \u2014 "),dZ=n(Hje,"A",{href:!0});var JRt=s(dZ);GNr=r(JRt,"FlaxRobertaForCausalLM"),JRt.forEach(t),ONr=r(Hje," (RoBERTa model)"),Hje.forEach(t),VNr=i(Ne),r0=n(Ne,"LI",{});var Uje=s(r0);tCe=n(Uje,"STRONG",{});var YRt=s(tCe);XNr=r(YRt,"xglm"),YRt.forEach(t),zNr=r(Uje," \u2014 "),cZ=n(Uje,"A",{href:!0});var KRt=s(cZ);WNr=r(KRt,"FlaxXGLMForCausalLM"),KRt.forEach(t),QNr=r(Uje," (XGLM model)"),Uje.forEach(t),Ne.forEach(t),HNr=i(ei),T(t0.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),eVe=i(f),Hc=n(f,"H2",{class:!0});var dze=s(Hc);a0=n(dze,"A",{id:!0,class:!0,href:!0});var ZRt=s(a0);aCe=n(ZRt,"SPAN",{});var ePt=s(aCe);T(Ix.$$.fragment,ePt),ePt.forEach(t),ZRt.forEach(t),UNr=i(dze),nCe=n(dze,"SPAN",{});var oPt=s(nCe);JNr=r(oPt,"FlaxAutoModelForPreTraining"),oPt.forEach(t),dze.forEach(t),oVe=i(f),pr=n(f,"DIV",{class:!0});var oi=s(pr);T(Nx.$$.fragment,oi),YNr=i(oi),Uc=n(oi,"P",{});var Pre=s(Uc);KNr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fZ=n(Pre,"A",{href:!0});var rPt=s(fZ);ZNr=r(rPt,"from_pretrained()"),rPt.forEach(t),eqr=r(Pre," class method or the "),mZ=n(Pre,"A",{href:!0});var tPt=s(mZ);oqr=r(tPt,"from_config()"),tPt.forEach(t),rqr=r(Pre,` class
method.`),Pre.forEach(t),tqr=i(oi),qx=n(oi,"P",{});var cze=s(qx);aqr=r(cze,"This class cannot be instantiated directly using "),sCe=n(cze,"CODE",{});var aPt=s(sCe);nqr=r(aPt,"__init__()"),aPt.forEach(t),sqr=r(cze," (throws an error)."),cze.forEach(t),lqr=i(oi),Wt=n(oi,"DIV",{class:!0});var Z6=s(Wt);T(jx.$$.fragment,Z6),iqr=i(Z6),lCe=n(Z6,"P",{});var nPt=s(lCe);dqr=r(nPt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nPt.forEach(t),cqr=i(Z6),Jc=n(Z6,"P",{});var Bre=s(Jc);fqr=r(Bre,`Note:
Loading a model from its configuration file does `),iCe=n(Bre,"STRONG",{});var sPt=s(iCe);mqr=r(sPt,"not"),sPt.forEach(t),gqr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=n(Bre,"A",{href:!0});var lPt=s(gZ);hqr=r(lPt,"from_pretrained()"),lPt.forEach(t),pqr=r(Bre," to load the model weights."),Bre.forEach(t),uqr=i(Z6),T(n0.$$.fragment,Z6),Z6.forEach(t),_qr=i(oi),Vr=n(oi,"DIV",{class:!0});var ri=s(Vr);T(Dx.$$.fragment,ri),bqr=i(ri),dCe=n(ri,"P",{});var iPt=s(dCe);vqr=r(iPt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),iPt.forEach(t),Fqr=i(ri),Tn=n(ri,"P",{});var eL=s(Tn);Tqr=r(eL,"The model class to instantiate is selected based on the "),cCe=n(eL,"CODE",{});var dPt=s(cCe);Mqr=r(dPt,"model_type"),dPt.forEach(t),Eqr=r(eL,` property of the config object (either
passed as an argument or loaded from `),fCe=n(eL,"CODE",{});var cPt=s(fCe);Cqr=r(cPt,"pretrained_model_name_or_path"),cPt.forEach(t),wqr=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=n(eL,"CODE",{});var fPt=s(mCe);Aqr=r(fPt,"pretrained_model_name_or_path"),fPt.forEach(t),Lqr=r(eL,":"),eL.forEach(t),yqr=i(ri),Ee=n(ri,"UL",{});var we=s(Ee);s0=n(we,"LI",{});var Jje=s(s0);gCe=n(Jje,"STRONG",{});var mPt=s(gCe);xqr=r(mPt,"albert"),mPt.forEach(t),$qr=r(Jje," \u2014 "),hZ=n(Jje,"A",{href:!0});var gPt=s(hZ);kqr=r(gPt,"FlaxAlbertForPreTraining"),gPt.forEach(t),Sqr=r(Jje," (ALBERT model)"),Jje.forEach(t),Rqr=i(we),l0=n(we,"LI",{});var Yje=s(l0);hCe=n(Yje,"STRONG",{});var hPt=s(hCe);Pqr=r(hPt,"bart"),hPt.forEach(t),Bqr=r(Yje," \u2014 "),pZ=n(Yje,"A",{href:!0});var pPt=s(pZ);Iqr=r(pPt,"FlaxBartForConditionalGeneration"),pPt.forEach(t),Nqr=r(Yje," (BART model)"),Yje.forEach(t),qqr=i(we),i0=n(we,"LI",{});var Kje=s(i0);pCe=n(Kje,"STRONG",{});var uPt=s(pCe);jqr=r(uPt,"bert"),uPt.forEach(t),Dqr=r(Kje," \u2014 "),uZ=n(Kje,"A",{href:!0});var _Pt=s(uZ);Gqr=r(_Pt,"FlaxBertForPreTraining"),_Pt.forEach(t),Oqr=r(Kje," (BERT model)"),Kje.forEach(t),Vqr=i(we),d0=n(we,"LI",{});var Zje=s(d0);uCe=n(Zje,"STRONG",{});var bPt=s(uCe);Xqr=r(bPt,"big_bird"),bPt.forEach(t),zqr=r(Zje," \u2014 "),_Z=n(Zje,"A",{href:!0});var vPt=s(_Z);Wqr=r(vPt,"FlaxBigBirdForPreTraining"),vPt.forEach(t),Qqr=r(Zje," (BigBird model)"),Zje.forEach(t),Hqr=i(we),c0=n(we,"LI",{});var eDe=s(c0);_Ce=n(eDe,"STRONG",{});var FPt=s(_Ce);Uqr=r(FPt,"electra"),FPt.forEach(t),Jqr=r(eDe," \u2014 "),bZ=n(eDe,"A",{href:!0});var TPt=s(bZ);Yqr=r(TPt,"FlaxElectraForPreTraining"),TPt.forEach(t),Kqr=r(eDe," (ELECTRA model)"),eDe.forEach(t),Zqr=i(we),f0=n(we,"LI",{});var oDe=s(f0);bCe=n(oDe,"STRONG",{});var MPt=s(bCe);ejr=r(MPt,"longt5"),MPt.forEach(t),ojr=r(oDe," \u2014 "),vZ=n(oDe,"A",{href:!0});var EPt=s(vZ);rjr=r(EPt,"FlaxLongT5ForConditionalGeneration"),EPt.forEach(t),tjr=r(oDe," (LongT5 model)"),oDe.forEach(t),ajr=i(we),m0=n(we,"LI",{});var rDe=s(m0);vCe=n(rDe,"STRONG",{});var CPt=s(vCe);njr=r(CPt,"mbart"),CPt.forEach(t),sjr=r(rDe," \u2014 "),FZ=n(rDe,"A",{href:!0});var wPt=s(FZ);ljr=r(wPt,"FlaxMBartForConditionalGeneration"),wPt.forEach(t),ijr=r(rDe," (mBART model)"),rDe.forEach(t),djr=i(we),g0=n(we,"LI",{});var tDe=s(g0);FCe=n(tDe,"STRONG",{});var APt=s(FCe);cjr=r(APt,"mt5"),APt.forEach(t),fjr=r(tDe," \u2014 "),TZ=n(tDe,"A",{href:!0});var LPt=s(TZ);mjr=r(LPt,"FlaxMT5ForConditionalGeneration"),LPt.forEach(t),gjr=r(tDe," (MT5 model)"),tDe.forEach(t),hjr=i(we),h0=n(we,"LI",{});var aDe=s(h0);TCe=n(aDe,"STRONG",{});var yPt=s(TCe);pjr=r(yPt,"roberta"),yPt.forEach(t),ujr=r(aDe," \u2014 "),MZ=n(aDe,"A",{href:!0});var xPt=s(MZ);_jr=r(xPt,"FlaxRobertaForMaskedLM"),xPt.forEach(t),bjr=r(aDe," (RoBERTa model)"),aDe.forEach(t),vjr=i(we),p0=n(we,"LI",{});var nDe=s(p0);MCe=n(nDe,"STRONG",{});var $Pt=s(MCe);Fjr=r($Pt,"roformer"),$Pt.forEach(t),Tjr=r(nDe," \u2014 "),EZ=n(nDe,"A",{href:!0});var kPt=s(EZ);Mjr=r(kPt,"FlaxRoFormerForMaskedLM"),kPt.forEach(t),Ejr=r(nDe," (RoFormer model)"),nDe.forEach(t),Cjr=i(we),u0=n(we,"LI",{});var sDe=s(u0);ECe=n(sDe,"STRONG",{});var SPt=s(ECe);wjr=r(SPt,"t5"),SPt.forEach(t),Ajr=r(sDe," \u2014 "),CZ=n(sDe,"A",{href:!0});var RPt=s(CZ);Ljr=r(RPt,"FlaxT5ForConditionalGeneration"),RPt.forEach(t),yjr=r(sDe," (T5 model)"),sDe.forEach(t),xjr=i(we),_0=n(we,"LI",{});var lDe=s(_0);CCe=n(lDe,"STRONG",{});var PPt=s(CCe);$jr=r(PPt,"wav2vec2"),PPt.forEach(t),kjr=r(lDe," \u2014 "),wZ=n(lDe,"A",{href:!0});var BPt=s(wZ);Sjr=r(BPt,"FlaxWav2Vec2ForPreTraining"),BPt.forEach(t),Rjr=r(lDe," (Wav2Vec2 model)"),lDe.forEach(t),Pjr=i(we),b0=n(we,"LI",{});var iDe=s(b0);wCe=n(iDe,"STRONG",{});var IPt=s(wCe);Bjr=r(IPt,"xlm-roberta"),IPt.forEach(t),Ijr=r(iDe," \u2014 "),AZ=n(iDe,"A",{href:!0});var NPt=s(AZ);Njr=r(NPt,"FlaxXLMRobertaForMaskedLM"),NPt.forEach(t),qjr=r(iDe," (XLM-RoBERTa model)"),iDe.forEach(t),we.forEach(t),jjr=i(ri),T(v0.$$.fragment,ri),ri.forEach(t),oi.forEach(t),rVe=i(f),Yc=n(f,"H2",{class:!0});var fze=s(Yc);F0=n(fze,"A",{id:!0,class:!0,href:!0});var qPt=s(F0);ACe=n(qPt,"SPAN",{});var jPt=s(ACe);T(Gx.$$.fragment,jPt),jPt.forEach(t),qPt.forEach(t),Djr=i(fze),LCe=n(fze,"SPAN",{});var DPt=s(LCe);Gjr=r(DPt,"FlaxAutoModelForMaskedLM"),DPt.forEach(t),fze.forEach(t),tVe=i(f),ur=n(f,"DIV",{class:!0});var ti=s(ur);T(Ox.$$.fragment,ti),Ojr=i(ti),Kc=n(ti,"P",{});var Ire=s(Kc);Vjr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LZ=n(Ire,"A",{href:!0});var GPt=s(LZ);Xjr=r(GPt,"from_pretrained()"),GPt.forEach(t),zjr=r(Ire," class method or the "),yZ=n(Ire,"A",{href:!0});var OPt=s(yZ);Wjr=r(OPt,"from_config()"),OPt.forEach(t),Qjr=r(Ire,` class
method.`),Ire.forEach(t),Hjr=i(ti),Vx=n(ti,"P",{});var mze=s(Vx);Ujr=r(mze,"This class cannot be instantiated directly using "),yCe=n(mze,"CODE",{});var VPt=s(yCe);Jjr=r(VPt,"__init__()"),VPt.forEach(t),Yjr=r(mze," (throws an error)."),mze.forEach(t),Kjr=i(ti),Qt=n(ti,"DIV",{class:!0});var oL=s(Qt);T(Xx.$$.fragment,oL),Zjr=i(oL),xCe=n(oL,"P",{});var XPt=s(xCe);eDr=r(XPt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),XPt.forEach(t),oDr=i(oL),Zc=n(oL,"P",{});var Nre=s(Zc);rDr=r(Nre,`Note:
Loading a model from its configuration file does `),$Ce=n(Nre,"STRONG",{});var zPt=s($Ce);tDr=r(zPt,"not"),zPt.forEach(t),aDr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),xZ=n(Nre,"A",{href:!0});var WPt=s(xZ);nDr=r(WPt,"from_pretrained()"),WPt.forEach(t),sDr=r(Nre," to load the model weights."),Nre.forEach(t),lDr=i(oL),T(T0.$$.fragment,oL),oL.forEach(t),iDr=i(ti),Xr=n(ti,"DIV",{class:!0});var ai=s(Xr);T(zx.$$.fragment,ai),dDr=i(ai),kCe=n(ai,"P",{});var QPt=s(kCe);cDr=r(QPt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),QPt.forEach(t),fDr=i(ai),Mn=n(ai,"P",{});var rL=s(Mn);mDr=r(rL,"The model class to instantiate is selected based on the "),SCe=n(rL,"CODE",{});var HPt=s(SCe);gDr=r(HPt,"model_type"),HPt.forEach(t),hDr=r(rL,` property of the config object (either
passed as an argument or loaded from `),RCe=n(rL,"CODE",{});var UPt=s(RCe);pDr=r(UPt,"pretrained_model_name_or_path"),UPt.forEach(t),uDr=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=n(rL,"CODE",{});var JPt=s(PCe);_Dr=r(JPt,"pretrained_model_name_or_path"),JPt.forEach(t),bDr=r(rL,":"),rL.forEach(t),vDr=i(ai),$e=n(ai,"UL",{});var qe=s($e);M0=n(qe,"LI",{});var dDe=s(M0);BCe=n(dDe,"STRONG",{});var YPt=s(BCe);FDr=r(YPt,"albert"),YPt.forEach(t),TDr=r(dDe," \u2014 "),$Z=n(dDe,"A",{href:!0});var KPt=s($Z);MDr=r(KPt,"FlaxAlbertForMaskedLM"),KPt.forEach(t),EDr=r(dDe," (ALBERT model)"),dDe.forEach(t),CDr=i(qe),E0=n(qe,"LI",{});var cDe=s(E0);ICe=n(cDe,"STRONG",{});var ZPt=s(ICe);wDr=r(ZPt,"bart"),ZPt.forEach(t),ADr=r(cDe," \u2014 "),kZ=n(cDe,"A",{href:!0});var eBt=s(kZ);LDr=r(eBt,"FlaxBartForConditionalGeneration"),eBt.forEach(t),yDr=r(cDe," (BART model)"),cDe.forEach(t),xDr=i(qe),C0=n(qe,"LI",{});var fDe=s(C0);NCe=n(fDe,"STRONG",{});var oBt=s(NCe);$Dr=r(oBt,"bert"),oBt.forEach(t),kDr=r(fDe," \u2014 "),SZ=n(fDe,"A",{href:!0});var rBt=s(SZ);SDr=r(rBt,"FlaxBertForMaskedLM"),rBt.forEach(t),RDr=r(fDe," (BERT model)"),fDe.forEach(t),PDr=i(qe),w0=n(qe,"LI",{});var mDe=s(w0);qCe=n(mDe,"STRONG",{});var tBt=s(qCe);BDr=r(tBt,"big_bird"),tBt.forEach(t),IDr=r(mDe," \u2014 "),RZ=n(mDe,"A",{href:!0});var aBt=s(RZ);NDr=r(aBt,"FlaxBigBirdForMaskedLM"),aBt.forEach(t),qDr=r(mDe," (BigBird model)"),mDe.forEach(t),jDr=i(qe),A0=n(qe,"LI",{});var gDe=s(A0);jCe=n(gDe,"STRONG",{});var nBt=s(jCe);DDr=r(nBt,"distilbert"),nBt.forEach(t),GDr=r(gDe," \u2014 "),PZ=n(gDe,"A",{href:!0});var sBt=s(PZ);ODr=r(sBt,"FlaxDistilBertForMaskedLM"),sBt.forEach(t),VDr=r(gDe," (DistilBERT model)"),gDe.forEach(t),XDr=i(qe),L0=n(qe,"LI",{});var hDe=s(L0);DCe=n(hDe,"STRONG",{});var lBt=s(DCe);zDr=r(lBt,"electra"),lBt.forEach(t),WDr=r(hDe," \u2014 "),BZ=n(hDe,"A",{href:!0});var iBt=s(BZ);QDr=r(iBt,"FlaxElectraForMaskedLM"),iBt.forEach(t),HDr=r(hDe," (ELECTRA model)"),hDe.forEach(t),UDr=i(qe),y0=n(qe,"LI",{});var pDe=s(y0);GCe=n(pDe,"STRONG",{});var dBt=s(GCe);JDr=r(dBt,"mbart"),dBt.forEach(t),YDr=r(pDe," \u2014 "),IZ=n(pDe,"A",{href:!0});var cBt=s(IZ);KDr=r(cBt,"FlaxMBartForConditionalGeneration"),cBt.forEach(t),ZDr=r(pDe," (mBART model)"),pDe.forEach(t),eGr=i(qe),x0=n(qe,"LI",{});var uDe=s(x0);OCe=n(uDe,"STRONG",{});var fBt=s(OCe);oGr=r(fBt,"roberta"),fBt.forEach(t),rGr=r(uDe," \u2014 "),NZ=n(uDe,"A",{href:!0});var mBt=s(NZ);tGr=r(mBt,"FlaxRobertaForMaskedLM"),mBt.forEach(t),aGr=r(uDe," (RoBERTa model)"),uDe.forEach(t),nGr=i(qe),$0=n(qe,"LI",{});var _De=s($0);VCe=n(_De,"STRONG",{});var gBt=s(VCe);sGr=r(gBt,"roformer"),gBt.forEach(t),lGr=r(_De," \u2014 "),qZ=n(_De,"A",{href:!0});var hBt=s(qZ);iGr=r(hBt,"FlaxRoFormerForMaskedLM"),hBt.forEach(t),dGr=r(_De," (RoFormer model)"),_De.forEach(t),cGr=i(qe),k0=n(qe,"LI",{});var bDe=s(k0);XCe=n(bDe,"STRONG",{});var pBt=s(XCe);fGr=r(pBt,"xlm-roberta"),pBt.forEach(t),mGr=r(bDe," \u2014 "),jZ=n(bDe,"A",{href:!0});var uBt=s(jZ);gGr=r(uBt,"FlaxXLMRobertaForMaskedLM"),uBt.forEach(t),hGr=r(bDe," (XLM-RoBERTa model)"),bDe.forEach(t),qe.forEach(t),pGr=i(ai),T(S0.$$.fragment,ai),ai.forEach(t),ti.forEach(t),aVe=i(f),ef=n(f,"H2",{class:!0});var gze=s(ef);R0=n(gze,"A",{id:!0,class:!0,href:!0});var _Bt=s(R0);zCe=n(_Bt,"SPAN",{});var bBt=s(zCe);T(Wx.$$.fragment,bBt),bBt.forEach(t),_Bt.forEach(t),uGr=i(gze),WCe=n(gze,"SPAN",{});var vBt=s(WCe);_Gr=r(vBt,"FlaxAutoModelForSeq2SeqLM"),vBt.forEach(t),gze.forEach(t),nVe=i(f),_r=n(f,"DIV",{class:!0});var ni=s(_r);T(Qx.$$.fragment,ni),bGr=i(ni),of=n(ni,"P",{});var qre=s(of);vGr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),DZ=n(qre,"A",{href:!0});var FBt=s(DZ);FGr=r(FBt,"from_pretrained()"),FBt.forEach(t),TGr=r(qre," class method or the "),GZ=n(qre,"A",{href:!0});var TBt=s(GZ);MGr=r(TBt,"from_config()"),TBt.forEach(t),EGr=r(qre,` class
method.`),qre.forEach(t),CGr=i(ni),Hx=n(ni,"P",{});var hze=s(Hx);wGr=r(hze,"This class cannot be instantiated directly using "),QCe=n(hze,"CODE",{});var MBt=s(QCe);AGr=r(MBt,"__init__()"),MBt.forEach(t),LGr=r(hze," (throws an error)."),hze.forEach(t),yGr=i(ni),Ht=n(ni,"DIV",{class:!0});var tL=s(Ht);T(Ux.$$.fragment,tL),xGr=i(tL),HCe=n(tL,"P",{});var EBt=s(HCe);$Gr=r(EBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),EBt.forEach(t),kGr=i(tL),rf=n(tL,"P",{});var jre=s(rf);SGr=r(jre,`Note:
Loading a model from its configuration file does `),UCe=n(jre,"STRONG",{});var CBt=s(UCe);RGr=r(CBt,"not"),CBt.forEach(t),PGr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(jre,"A",{href:!0});var wBt=s(OZ);BGr=r(wBt,"from_pretrained()"),wBt.forEach(t),IGr=r(jre," to load the model weights."),jre.forEach(t),NGr=i(tL),T(P0.$$.fragment,tL),tL.forEach(t),qGr=i(ni),zr=n(ni,"DIV",{class:!0});var si=s(zr);T(Jx.$$.fragment,si),jGr=i(si),JCe=n(si,"P",{});var ABt=s(JCe);DGr=r(ABt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ABt.forEach(t),GGr=i(si),En=n(si,"P",{});var aL=s(En);OGr=r(aL,"The model class to instantiate is selected based on the "),YCe=n(aL,"CODE",{});var LBt=s(YCe);VGr=r(LBt,"model_type"),LBt.forEach(t),XGr=r(aL,` property of the config object (either
passed as an argument or loaded from `),KCe=n(aL,"CODE",{});var yBt=s(KCe);zGr=r(yBt,"pretrained_model_name_or_path"),yBt.forEach(t),WGr=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=n(aL,"CODE",{});var xBt=s(ZCe);QGr=r(xBt,"pretrained_model_name_or_path"),xBt.forEach(t),HGr=r(aL,":"),aL.forEach(t),UGr=i(si),ke=n(si,"UL",{});var je=s(ke);B0=n(je,"LI",{});var vDe=s(B0);e5e=n(vDe,"STRONG",{});var $Bt=s(e5e);JGr=r($Bt,"bart"),$Bt.forEach(t),YGr=r(vDe," \u2014 "),VZ=n(vDe,"A",{href:!0});var kBt=s(VZ);KGr=r(kBt,"FlaxBartForConditionalGeneration"),kBt.forEach(t),ZGr=r(vDe," (BART model)"),vDe.forEach(t),eOr=i(je),I0=n(je,"LI",{});var FDe=s(I0);o5e=n(FDe,"STRONG",{});var SBt=s(o5e);oOr=r(SBt,"blenderbot"),SBt.forEach(t),rOr=r(FDe," \u2014 "),XZ=n(FDe,"A",{href:!0});var RBt=s(XZ);tOr=r(RBt,"FlaxBlenderbotForConditionalGeneration"),RBt.forEach(t),aOr=r(FDe," (Blenderbot model)"),FDe.forEach(t),nOr=i(je),N0=n(je,"LI",{});var TDe=s(N0);r5e=n(TDe,"STRONG",{});var PBt=s(r5e);sOr=r(PBt,"blenderbot-small"),PBt.forEach(t),lOr=r(TDe," \u2014 "),zZ=n(TDe,"A",{href:!0});var BBt=s(zZ);iOr=r(BBt,"FlaxBlenderbotSmallForConditionalGeneration"),BBt.forEach(t),dOr=r(TDe," (BlenderbotSmall model)"),TDe.forEach(t),cOr=i(je),q0=n(je,"LI",{});var MDe=s(q0);t5e=n(MDe,"STRONG",{});var IBt=s(t5e);fOr=r(IBt,"encoder-decoder"),IBt.forEach(t),mOr=r(MDe," \u2014 "),WZ=n(MDe,"A",{href:!0});var NBt=s(WZ);gOr=r(NBt,"FlaxEncoderDecoderModel"),NBt.forEach(t),hOr=r(MDe," (Encoder decoder model)"),MDe.forEach(t),pOr=i(je),j0=n(je,"LI",{});var EDe=s(j0);a5e=n(EDe,"STRONG",{});var qBt=s(a5e);uOr=r(qBt,"longt5"),qBt.forEach(t),_Or=r(EDe," \u2014 "),QZ=n(EDe,"A",{href:!0});var jBt=s(QZ);bOr=r(jBt,"FlaxLongT5ForConditionalGeneration"),jBt.forEach(t),vOr=r(EDe," (LongT5 model)"),EDe.forEach(t),FOr=i(je),D0=n(je,"LI",{});var CDe=s(D0);n5e=n(CDe,"STRONG",{});var DBt=s(n5e);TOr=r(DBt,"marian"),DBt.forEach(t),MOr=r(CDe," \u2014 "),HZ=n(CDe,"A",{href:!0});var GBt=s(HZ);EOr=r(GBt,"FlaxMarianMTModel"),GBt.forEach(t),COr=r(CDe," (Marian model)"),CDe.forEach(t),wOr=i(je),G0=n(je,"LI",{});var wDe=s(G0);s5e=n(wDe,"STRONG",{});var OBt=s(s5e);AOr=r(OBt,"mbart"),OBt.forEach(t),LOr=r(wDe," \u2014 "),UZ=n(wDe,"A",{href:!0});var VBt=s(UZ);yOr=r(VBt,"FlaxMBartForConditionalGeneration"),VBt.forEach(t),xOr=r(wDe," (mBART model)"),wDe.forEach(t),$Or=i(je),O0=n(je,"LI",{});var ADe=s(O0);l5e=n(ADe,"STRONG",{});var XBt=s(l5e);kOr=r(XBt,"mt5"),XBt.forEach(t),SOr=r(ADe," \u2014 "),JZ=n(ADe,"A",{href:!0});var zBt=s(JZ);ROr=r(zBt,"FlaxMT5ForConditionalGeneration"),zBt.forEach(t),POr=r(ADe," (MT5 model)"),ADe.forEach(t),BOr=i(je),V0=n(je,"LI",{});var LDe=s(V0);i5e=n(LDe,"STRONG",{});var WBt=s(i5e);IOr=r(WBt,"pegasus"),WBt.forEach(t),NOr=r(LDe," \u2014 "),YZ=n(LDe,"A",{href:!0});var QBt=s(YZ);qOr=r(QBt,"FlaxPegasusForConditionalGeneration"),QBt.forEach(t),jOr=r(LDe," (Pegasus model)"),LDe.forEach(t),DOr=i(je),X0=n(je,"LI",{});var yDe=s(X0);d5e=n(yDe,"STRONG",{});var HBt=s(d5e);GOr=r(HBt,"t5"),HBt.forEach(t),OOr=r(yDe," \u2014 "),KZ=n(yDe,"A",{href:!0});var UBt=s(KZ);VOr=r(UBt,"FlaxT5ForConditionalGeneration"),UBt.forEach(t),XOr=r(yDe," (T5 model)"),yDe.forEach(t),je.forEach(t),zOr=i(si),T(z0.$$.fragment,si),si.forEach(t),ni.forEach(t),sVe=i(f),tf=n(f,"H2",{class:!0});var pze=s(tf);W0=n(pze,"A",{id:!0,class:!0,href:!0});var JBt=s(W0);c5e=n(JBt,"SPAN",{});var YBt=s(c5e);T(Yx.$$.fragment,YBt),YBt.forEach(t),JBt.forEach(t),WOr=i(pze),f5e=n(pze,"SPAN",{});var KBt=s(f5e);QOr=r(KBt,"FlaxAutoModelForSequenceClassification"),KBt.forEach(t),pze.forEach(t),lVe=i(f),br=n(f,"DIV",{class:!0});var li=s(br);T(Kx.$$.fragment,li),HOr=i(li),af=n(li,"P",{});var Dre=s(af);UOr=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZZ=n(Dre,"A",{href:!0});var ZBt=s(ZZ);JOr=r(ZBt,"from_pretrained()"),ZBt.forEach(t),YOr=r(Dre," class method or the "),eee=n(Dre,"A",{href:!0});var eIt=s(eee);KOr=r(eIt,"from_config()"),eIt.forEach(t),ZOr=r(Dre,` class
method.`),Dre.forEach(t),eVr=i(li),Zx=n(li,"P",{});var uze=s(Zx);oVr=r(uze,"This class cannot be instantiated directly using "),m5e=n(uze,"CODE",{});var oIt=s(m5e);rVr=r(oIt,"__init__()"),oIt.forEach(t),tVr=r(uze," (throws an error)."),uze.forEach(t),aVr=i(li),Ut=n(li,"DIV",{class:!0});var nL=s(Ut);T(e$.$$.fragment,nL),nVr=i(nL),g5e=n(nL,"P",{});var rIt=s(g5e);sVr=r(rIt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),rIt.forEach(t),lVr=i(nL),nf=n(nL,"P",{});var Gre=s(nf);iVr=r(Gre,`Note:
Loading a model from its configuration file does `),h5e=n(Gre,"STRONG",{});var tIt=s(h5e);dVr=r(tIt,"not"),tIt.forEach(t),cVr=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=n(Gre,"A",{href:!0});var aIt=s(oee);fVr=r(aIt,"from_pretrained()"),aIt.forEach(t),mVr=r(Gre," to load the model weights."),Gre.forEach(t),gVr=i(nL),T(Q0.$$.fragment,nL),nL.forEach(t),hVr=i(li),Wr=n(li,"DIV",{class:!0});var ii=s(Wr);T(o$.$$.fragment,ii),pVr=i(ii),p5e=n(ii,"P",{});var nIt=s(p5e);uVr=r(nIt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),nIt.forEach(t),_Vr=i(ii),Cn=n(ii,"P",{});var sL=s(Cn);bVr=r(sL,"The model class to instantiate is selected based on the "),u5e=n(sL,"CODE",{});var sIt=s(u5e);vVr=r(sIt,"model_type"),sIt.forEach(t),FVr=r(sL,` property of the config object (either
passed as an argument or loaded from `),_5e=n(sL,"CODE",{});var lIt=s(_5e);TVr=r(lIt,"pretrained_model_name_or_path"),lIt.forEach(t),MVr=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b5e=n(sL,"CODE",{});var iIt=s(b5e);EVr=r(iIt,"pretrained_model_name_or_path"),iIt.forEach(t),CVr=r(sL,":"),sL.forEach(t),wVr=i(ii),Se=n(ii,"UL",{});var De=s(Se);H0=n(De,"LI",{});var xDe=s(H0);v5e=n(xDe,"STRONG",{});var dIt=s(v5e);AVr=r(dIt,"albert"),dIt.forEach(t),LVr=r(xDe," \u2014 "),ree=n(xDe,"A",{href:!0});var cIt=s(ree);yVr=r(cIt,"FlaxAlbertForSequenceClassification"),cIt.forEach(t),xVr=r(xDe," (ALBERT model)"),xDe.forEach(t),$Vr=i(De),U0=n(De,"LI",{});var $De=s(U0);F5e=n($De,"STRONG",{});var fIt=s(F5e);kVr=r(fIt,"bart"),fIt.forEach(t),SVr=r($De," \u2014 "),tee=n($De,"A",{href:!0});var mIt=s(tee);RVr=r(mIt,"FlaxBartForSequenceClassification"),mIt.forEach(t),PVr=r($De," (BART model)"),$De.forEach(t),BVr=i(De),J0=n(De,"LI",{});var kDe=s(J0);T5e=n(kDe,"STRONG",{});var gIt=s(T5e);IVr=r(gIt,"bert"),gIt.forEach(t),NVr=r(kDe," \u2014 "),aee=n(kDe,"A",{href:!0});var hIt=s(aee);qVr=r(hIt,"FlaxBertForSequenceClassification"),hIt.forEach(t),jVr=r(kDe," (BERT model)"),kDe.forEach(t),DVr=i(De),Y0=n(De,"LI",{});var SDe=s(Y0);M5e=n(SDe,"STRONG",{});var pIt=s(M5e);GVr=r(pIt,"big_bird"),pIt.forEach(t),OVr=r(SDe," \u2014 "),nee=n(SDe,"A",{href:!0});var uIt=s(nee);VVr=r(uIt,"FlaxBigBirdForSequenceClassification"),uIt.forEach(t),XVr=r(SDe," (BigBird model)"),SDe.forEach(t),zVr=i(De),K0=n(De,"LI",{});var RDe=s(K0);E5e=n(RDe,"STRONG",{});var _It=s(E5e);WVr=r(_It,"distilbert"),_It.forEach(t),QVr=r(RDe," \u2014 "),see=n(RDe,"A",{href:!0});var bIt=s(see);HVr=r(bIt,"FlaxDistilBertForSequenceClassification"),bIt.forEach(t),UVr=r(RDe," (DistilBERT model)"),RDe.forEach(t),JVr=i(De),Z0=n(De,"LI",{});var PDe=s(Z0);C5e=n(PDe,"STRONG",{});var vIt=s(C5e);YVr=r(vIt,"electra"),vIt.forEach(t),KVr=r(PDe," \u2014 "),lee=n(PDe,"A",{href:!0});var FIt=s(lee);ZVr=r(FIt,"FlaxElectraForSequenceClassification"),FIt.forEach(t),eXr=r(PDe," (ELECTRA model)"),PDe.forEach(t),oXr=i(De),ew=n(De,"LI",{});var BDe=s(ew);w5e=n(BDe,"STRONG",{});var TIt=s(w5e);rXr=r(TIt,"mbart"),TIt.forEach(t),tXr=r(BDe," \u2014 "),iee=n(BDe,"A",{href:!0});var MIt=s(iee);aXr=r(MIt,"FlaxMBartForSequenceClassification"),MIt.forEach(t),nXr=r(BDe," (mBART model)"),BDe.forEach(t),sXr=i(De),ow=n(De,"LI",{});var IDe=s(ow);A5e=n(IDe,"STRONG",{});var EIt=s(A5e);lXr=r(EIt,"roberta"),EIt.forEach(t),iXr=r(IDe," \u2014 "),dee=n(IDe,"A",{href:!0});var CIt=s(dee);dXr=r(CIt,"FlaxRobertaForSequenceClassification"),CIt.forEach(t),cXr=r(IDe," (RoBERTa model)"),IDe.forEach(t),fXr=i(De),rw=n(De,"LI",{});var NDe=s(rw);L5e=n(NDe,"STRONG",{});var wIt=s(L5e);mXr=r(wIt,"roformer"),wIt.forEach(t),gXr=r(NDe," \u2014 "),cee=n(NDe,"A",{href:!0});var AIt=s(cee);hXr=r(AIt,"FlaxRoFormerForSequenceClassification"),AIt.forEach(t),pXr=r(NDe," (RoFormer model)"),NDe.forEach(t),uXr=i(De),tw=n(De,"LI",{});var qDe=s(tw);y5e=n(qDe,"STRONG",{});var LIt=s(y5e);_Xr=r(LIt,"xlm-roberta"),LIt.forEach(t),bXr=r(qDe," \u2014 "),fee=n(qDe,"A",{href:!0});var yIt=s(fee);vXr=r(yIt,"FlaxXLMRobertaForSequenceClassification"),yIt.forEach(t),FXr=r(qDe," (XLM-RoBERTa model)"),qDe.forEach(t),De.forEach(t),TXr=i(ii),T(aw.$$.fragment,ii),ii.forEach(t),li.forEach(t),iVe=i(f),sf=n(f,"H2",{class:!0});var _ze=s(sf);nw=n(_ze,"A",{id:!0,class:!0,href:!0});var xIt=s(nw);x5e=n(xIt,"SPAN",{});var $It=s(x5e);T(r$.$$.fragment,$It),$It.forEach(t),xIt.forEach(t),MXr=i(_ze),$5e=n(_ze,"SPAN",{});var kIt=s($5e);EXr=r(kIt,"FlaxAutoModelForQuestionAnswering"),kIt.forEach(t),_ze.forEach(t),dVe=i(f),vr=n(f,"DIV",{class:!0});var di=s(vr);T(t$.$$.fragment,di),CXr=i(di),lf=n(di,"P",{});var Ore=s(lf);wXr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mee=n(Ore,"A",{href:!0});var SIt=s(mee);AXr=r(SIt,"from_pretrained()"),SIt.forEach(t),LXr=r(Ore," class method or the "),gee=n(Ore,"A",{href:!0});var RIt=s(gee);yXr=r(RIt,"from_config()"),RIt.forEach(t),xXr=r(Ore,` class
method.`),Ore.forEach(t),$Xr=i(di),a$=n(di,"P",{});var bze=s(a$);kXr=r(bze,"This class cannot be instantiated directly using "),k5e=n(bze,"CODE",{});var PIt=s(k5e);SXr=r(PIt,"__init__()"),PIt.forEach(t),RXr=r(bze," (throws an error)."),bze.forEach(t),PXr=i(di),Jt=n(di,"DIV",{class:!0});var lL=s(Jt);T(n$.$$.fragment,lL),BXr=i(lL),S5e=n(lL,"P",{});var BIt=s(S5e);IXr=r(BIt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),BIt.forEach(t),NXr=i(lL),df=n(lL,"P",{});var Vre=s(df);qXr=r(Vre,`Note:
Loading a model from its configuration file does `),R5e=n(Vre,"STRONG",{});var IIt=s(R5e);jXr=r(IIt,"not"),IIt.forEach(t),DXr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hee=n(Vre,"A",{href:!0});var NIt=s(hee);GXr=r(NIt,"from_pretrained()"),NIt.forEach(t),OXr=r(Vre," to load the model weights."),Vre.forEach(t),VXr=i(lL),T(sw.$$.fragment,lL),lL.forEach(t),XXr=i(di),Qr=n(di,"DIV",{class:!0});var ci=s(Qr);T(s$.$$.fragment,ci),zXr=i(ci),P5e=n(ci,"P",{});var qIt=s(P5e);WXr=r(qIt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qIt.forEach(t),QXr=i(ci),wn=n(ci,"P",{});var iL=s(wn);HXr=r(iL,"The model class to instantiate is selected based on the "),B5e=n(iL,"CODE",{});var jIt=s(B5e);UXr=r(jIt,"model_type"),jIt.forEach(t),JXr=r(iL,` property of the config object (either
passed as an argument or loaded from `),I5e=n(iL,"CODE",{});var DIt=s(I5e);YXr=r(DIt,"pretrained_model_name_or_path"),DIt.forEach(t),KXr=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=n(iL,"CODE",{});var GIt=s(N5e);ZXr=r(GIt,"pretrained_model_name_or_path"),GIt.forEach(t),ezr=r(iL,":"),iL.forEach(t),ozr=i(ci),Re=n(ci,"UL",{});var Ge=s(Re);lw=n(Ge,"LI",{});var jDe=s(lw);q5e=n(jDe,"STRONG",{});var OIt=s(q5e);rzr=r(OIt,"albert"),OIt.forEach(t),tzr=r(jDe," \u2014 "),pee=n(jDe,"A",{href:!0});var VIt=s(pee);azr=r(VIt,"FlaxAlbertForQuestionAnswering"),VIt.forEach(t),nzr=r(jDe," (ALBERT model)"),jDe.forEach(t),szr=i(Ge),iw=n(Ge,"LI",{});var DDe=s(iw);j5e=n(DDe,"STRONG",{});var XIt=s(j5e);lzr=r(XIt,"bart"),XIt.forEach(t),izr=r(DDe," \u2014 "),uee=n(DDe,"A",{href:!0});var zIt=s(uee);dzr=r(zIt,"FlaxBartForQuestionAnswering"),zIt.forEach(t),czr=r(DDe," (BART model)"),DDe.forEach(t),fzr=i(Ge),dw=n(Ge,"LI",{});var GDe=s(dw);D5e=n(GDe,"STRONG",{});var WIt=s(D5e);mzr=r(WIt,"bert"),WIt.forEach(t),gzr=r(GDe," \u2014 "),_ee=n(GDe,"A",{href:!0});var QIt=s(_ee);hzr=r(QIt,"FlaxBertForQuestionAnswering"),QIt.forEach(t),pzr=r(GDe," (BERT model)"),GDe.forEach(t),uzr=i(Ge),cw=n(Ge,"LI",{});var ODe=s(cw);G5e=n(ODe,"STRONG",{});var HIt=s(G5e);_zr=r(HIt,"big_bird"),HIt.forEach(t),bzr=r(ODe," \u2014 "),bee=n(ODe,"A",{href:!0});var UIt=s(bee);vzr=r(UIt,"FlaxBigBirdForQuestionAnswering"),UIt.forEach(t),Fzr=r(ODe," (BigBird model)"),ODe.forEach(t),Tzr=i(Ge),fw=n(Ge,"LI",{});var VDe=s(fw);O5e=n(VDe,"STRONG",{});var JIt=s(O5e);Mzr=r(JIt,"distilbert"),JIt.forEach(t),Ezr=r(VDe," \u2014 "),vee=n(VDe,"A",{href:!0});var YIt=s(vee);Czr=r(YIt,"FlaxDistilBertForQuestionAnswering"),YIt.forEach(t),wzr=r(VDe," (DistilBERT model)"),VDe.forEach(t),Azr=i(Ge),mw=n(Ge,"LI",{});var XDe=s(mw);V5e=n(XDe,"STRONG",{});var KIt=s(V5e);Lzr=r(KIt,"electra"),KIt.forEach(t),yzr=r(XDe," \u2014 "),Fee=n(XDe,"A",{href:!0});var ZIt=s(Fee);xzr=r(ZIt,"FlaxElectraForQuestionAnswering"),ZIt.forEach(t),$zr=r(XDe," (ELECTRA model)"),XDe.forEach(t),kzr=i(Ge),gw=n(Ge,"LI",{});var zDe=s(gw);X5e=n(zDe,"STRONG",{});var eNt=s(X5e);Szr=r(eNt,"mbart"),eNt.forEach(t),Rzr=r(zDe," \u2014 "),Tee=n(zDe,"A",{href:!0});var oNt=s(Tee);Pzr=r(oNt,"FlaxMBartForQuestionAnswering"),oNt.forEach(t),Bzr=r(zDe," (mBART model)"),zDe.forEach(t),Izr=i(Ge),hw=n(Ge,"LI",{});var WDe=s(hw);z5e=n(WDe,"STRONG",{});var rNt=s(z5e);Nzr=r(rNt,"roberta"),rNt.forEach(t),qzr=r(WDe," \u2014 "),Mee=n(WDe,"A",{href:!0});var tNt=s(Mee);jzr=r(tNt,"FlaxRobertaForQuestionAnswering"),tNt.forEach(t),Dzr=r(WDe," (RoBERTa model)"),WDe.forEach(t),Gzr=i(Ge),pw=n(Ge,"LI",{});var QDe=s(pw);W5e=n(QDe,"STRONG",{});var aNt=s(W5e);Ozr=r(aNt,"roformer"),aNt.forEach(t),Vzr=r(QDe," \u2014 "),Eee=n(QDe,"A",{href:!0});var nNt=s(Eee);Xzr=r(nNt,"FlaxRoFormerForQuestionAnswering"),nNt.forEach(t),zzr=r(QDe," (RoFormer model)"),QDe.forEach(t),Wzr=i(Ge),uw=n(Ge,"LI",{});var HDe=s(uw);Q5e=n(HDe,"STRONG",{});var sNt=s(Q5e);Qzr=r(sNt,"xlm-roberta"),sNt.forEach(t),Hzr=r(HDe," \u2014 "),Cee=n(HDe,"A",{href:!0});var lNt=s(Cee);Uzr=r(lNt,"FlaxXLMRobertaForQuestionAnswering"),lNt.forEach(t),Jzr=r(HDe," (XLM-RoBERTa model)"),HDe.forEach(t),Ge.forEach(t),Yzr=i(ci),T(_w.$$.fragment,ci),ci.forEach(t),di.forEach(t),cVe=i(f),cf=n(f,"H2",{class:!0});var vze=s(cf);bw=n(vze,"A",{id:!0,class:!0,href:!0});var iNt=s(bw);H5e=n(iNt,"SPAN",{});var dNt=s(H5e);T(l$.$$.fragment,dNt),dNt.forEach(t),iNt.forEach(t),Kzr=i(vze),U5e=n(vze,"SPAN",{});var cNt=s(U5e);Zzr=r(cNt,"FlaxAutoModelForTokenClassification"),cNt.forEach(t),vze.forEach(t),fVe=i(f),Fr=n(f,"DIV",{class:!0});var fi=s(Fr);T(i$.$$.fragment,fi),eWr=i(fi),ff=n(fi,"P",{});var Xre=s(ff);oWr=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wee=n(Xre,"A",{href:!0});var fNt=s(wee);rWr=r(fNt,"from_pretrained()"),fNt.forEach(t),tWr=r(Xre," class method or the "),Aee=n(Xre,"A",{href:!0});var mNt=s(Aee);aWr=r(mNt,"from_config()"),mNt.forEach(t),nWr=r(Xre,` class
method.`),Xre.forEach(t),sWr=i(fi),d$=n(fi,"P",{});var Fze=s(d$);lWr=r(Fze,"This class cannot be instantiated directly using "),J5e=n(Fze,"CODE",{});var gNt=s(J5e);iWr=r(gNt,"__init__()"),gNt.forEach(t),dWr=r(Fze," (throws an error)."),Fze.forEach(t),cWr=i(fi),Yt=n(fi,"DIV",{class:!0});var dL=s(Yt);T(c$.$$.fragment,dL),fWr=i(dL),Y5e=n(dL,"P",{});var hNt=s(Y5e);mWr=r(hNt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hNt.forEach(t),gWr=i(dL),mf=n(dL,"P",{});var zre=s(mf);hWr=r(zre,`Note:
Loading a model from its configuration file does `),K5e=n(zre,"STRONG",{});var pNt=s(K5e);pWr=r(pNt,"not"),pNt.forEach(t),uWr=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=n(zre,"A",{href:!0});var uNt=s(Lee);_Wr=r(uNt,"from_pretrained()"),uNt.forEach(t),bWr=r(zre," to load the model weights."),zre.forEach(t),vWr=i(dL),T(vw.$$.fragment,dL),dL.forEach(t),FWr=i(fi),Hr=n(fi,"DIV",{class:!0});var mi=s(Hr);T(f$.$$.fragment,mi),TWr=i(mi),Z5e=n(mi,"P",{});var _Nt=s(Z5e);MWr=r(_Nt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_Nt.forEach(t),EWr=i(mi),An=n(mi,"P",{});var cL=s(An);CWr=r(cL,"The model class to instantiate is selected based on the "),e0e=n(cL,"CODE",{});var bNt=s(e0e);wWr=r(bNt,"model_type"),bNt.forEach(t),AWr=r(cL,` property of the config object (either
passed as an argument or loaded from `),o0e=n(cL,"CODE",{});var vNt=s(o0e);LWr=r(vNt,"pretrained_model_name_or_path"),vNt.forEach(t),yWr=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r0e=n(cL,"CODE",{});var FNt=s(r0e);xWr=r(FNt,"pretrained_model_name_or_path"),FNt.forEach(t),$Wr=r(cL,":"),cL.forEach(t),kWr=i(mi),Ve=n(mi,"UL",{});var To=s(Ve);Fw=n(To,"LI",{});var UDe=s(Fw);t0e=n(UDe,"STRONG",{});var TNt=s(t0e);SWr=r(TNt,"albert"),TNt.forEach(t),RWr=r(UDe," \u2014 "),yee=n(UDe,"A",{href:!0});var MNt=s(yee);PWr=r(MNt,"FlaxAlbertForTokenClassification"),MNt.forEach(t),BWr=r(UDe," (ALBERT model)"),UDe.forEach(t),IWr=i(To),Tw=n(To,"LI",{});var JDe=s(Tw);a0e=n(JDe,"STRONG",{});var ENt=s(a0e);NWr=r(ENt,"bert"),ENt.forEach(t),qWr=r(JDe," \u2014 "),xee=n(JDe,"A",{href:!0});var CNt=s(xee);jWr=r(CNt,"FlaxBertForTokenClassification"),CNt.forEach(t),DWr=r(JDe," (BERT model)"),JDe.forEach(t),GWr=i(To),Mw=n(To,"LI",{});var YDe=s(Mw);n0e=n(YDe,"STRONG",{});var wNt=s(n0e);OWr=r(wNt,"big_bird"),wNt.forEach(t),VWr=r(YDe," \u2014 "),$ee=n(YDe,"A",{href:!0});var ANt=s($ee);XWr=r(ANt,"FlaxBigBirdForTokenClassification"),ANt.forEach(t),zWr=r(YDe," (BigBird model)"),YDe.forEach(t),WWr=i(To),Ew=n(To,"LI",{});var KDe=s(Ew);s0e=n(KDe,"STRONG",{});var LNt=s(s0e);QWr=r(LNt,"distilbert"),LNt.forEach(t),HWr=r(KDe," \u2014 "),kee=n(KDe,"A",{href:!0});var yNt=s(kee);UWr=r(yNt,"FlaxDistilBertForTokenClassification"),yNt.forEach(t),JWr=r(KDe," (DistilBERT model)"),KDe.forEach(t),YWr=i(To),Cw=n(To,"LI",{});var ZDe=s(Cw);l0e=n(ZDe,"STRONG",{});var xNt=s(l0e);KWr=r(xNt,"electra"),xNt.forEach(t),ZWr=r(ZDe," \u2014 "),See=n(ZDe,"A",{href:!0});var $Nt=s(See);eQr=r($Nt,"FlaxElectraForTokenClassification"),$Nt.forEach(t),oQr=r(ZDe," (ELECTRA model)"),ZDe.forEach(t),rQr=i(To),ww=n(To,"LI",{});var eGe=s(ww);i0e=n(eGe,"STRONG",{});var kNt=s(i0e);tQr=r(kNt,"roberta"),kNt.forEach(t),aQr=r(eGe," \u2014 "),Ree=n(eGe,"A",{href:!0});var SNt=s(Ree);nQr=r(SNt,"FlaxRobertaForTokenClassification"),SNt.forEach(t),sQr=r(eGe," (RoBERTa model)"),eGe.forEach(t),lQr=i(To),Aw=n(To,"LI",{});var oGe=s(Aw);d0e=n(oGe,"STRONG",{});var RNt=s(d0e);iQr=r(RNt,"roformer"),RNt.forEach(t),dQr=r(oGe," \u2014 "),Pee=n(oGe,"A",{href:!0});var PNt=s(Pee);cQr=r(PNt,"FlaxRoFormerForTokenClassification"),PNt.forEach(t),fQr=r(oGe," (RoFormer model)"),oGe.forEach(t),mQr=i(To),Lw=n(To,"LI",{});var rGe=s(Lw);c0e=n(rGe,"STRONG",{});var BNt=s(c0e);gQr=r(BNt,"xlm-roberta"),BNt.forEach(t),hQr=r(rGe," \u2014 "),Bee=n(rGe,"A",{href:!0});var INt=s(Bee);pQr=r(INt,"FlaxXLMRobertaForTokenClassification"),INt.forEach(t),uQr=r(rGe," (XLM-RoBERTa model)"),rGe.forEach(t),To.forEach(t),_Qr=i(mi),T(yw.$$.fragment,mi),mi.forEach(t),fi.forEach(t),mVe=i(f),gf=n(f,"H2",{class:!0});var Tze=s(gf);xw=n(Tze,"A",{id:!0,class:!0,href:!0});var NNt=s(xw);f0e=n(NNt,"SPAN",{});var qNt=s(f0e);T(m$.$$.fragment,qNt),qNt.forEach(t),NNt.forEach(t),bQr=i(Tze),m0e=n(Tze,"SPAN",{});var jNt=s(m0e);vQr=r(jNt,"FlaxAutoModelForMultipleChoice"),jNt.forEach(t),Tze.forEach(t),gVe=i(f),Tr=n(f,"DIV",{class:!0});var gi=s(Tr);T(g$.$$.fragment,gi),FQr=i(gi),hf=n(gi,"P",{});var Wre=s(hf);TQr=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Iee=n(Wre,"A",{href:!0});var DNt=s(Iee);MQr=r(DNt,"from_pretrained()"),DNt.forEach(t),EQr=r(Wre," class method or the "),Nee=n(Wre,"A",{href:!0});var GNt=s(Nee);CQr=r(GNt,"from_config()"),GNt.forEach(t),wQr=r(Wre,` class
method.`),Wre.forEach(t),AQr=i(gi),h$=n(gi,"P",{});var Mze=s(h$);LQr=r(Mze,"This class cannot be instantiated directly using "),g0e=n(Mze,"CODE",{});var ONt=s(g0e);yQr=r(ONt,"__init__()"),ONt.forEach(t),xQr=r(Mze," (throws an error)."),Mze.forEach(t),$Qr=i(gi),Kt=n(gi,"DIV",{class:!0});var fL=s(Kt);T(p$.$$.fragment,fL),kQr=i(fL),h0e=n(fL,"P",{});var VNt=s(h0e);SQr=r(VNt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),VNt.forEach(t),RQr=i(fL),pf=n(fL,"P",{});var Qre=s(pf);PQr=r(Qre,`Note:
Loading a model from its configuration file does `),p0e=n(Qre,"STRONG",{});var XNt=s(p0e);BQr=r(XNt,"not"),XNt.forEach(t),IQr=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=n(Qre,"A",{href:!0});var zNt=s(qee);NQr=r(zNt,"from_pretrained()"),zNt.forEach(t),qQr=r(Qre," to load the model weights."),Qre.forEach(t),jQr=i(fL),T($w.$$.fragment,fL),fL.forEach(t),DQr=i(gi),Ur=n(gi,"DIV",{class:!0});var hi=s(Ur);T(u$.$$.fragment,hi),GQr=i(hi),u0e=n(hi,"P",{});var WNt=s(u0e);OQr=r(WNt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),WNt.forEach(t),VQr=i(hi),Ln=n(hi,"P",{});var mL=s(Ln);XQr=r(mL,"The model class to instantiate is selected based on the "),_0e=n(mL,"CODE",{});var QNt=s(_0e);zQr=r(QNt,"model_type"),QNt.forEach(t),WQr=r(mL,` property of the config object (either
passed as an argument or loaded from `),b0e=n(mL,"CODE",{});var HNt=s(b0e);QQr=r(HNt,"pretrained_model_name_or_path"),HNt.forEach(t),HQr=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=n(mL,"CODE",{});var UNt=s(v0e);UQr=r(UNt,"pretrained_model_name_or_path"),UNt.forEach(t),JQr=r(mL,":"),mL.forEach(t),YQr=i(hi),Xe=n(hi,"UL",{});var Mo=s(Xe);kw=n(Mo,"LI",{});var tGe=s(kw);F0e=n(tGe,"STRONG",{});var JNt=s(F0e);KQr=r(JNt,"albert"),JNt.forEach(t),ZQr=r(tGe," \u2014 "),jee=n(tGe,"A",{href:!0});var YNt=s(jee);eHr=r(YNt,"FlaxAlbertForMultipleChoice"),YNt.forEach(t),oHr=r(tGe," (ALBERT model)"),tGe.forEach(t),rHr=i(Mo),Sw=n(Mo,"LI",{});var aGe=s(Sw);T0e=n(aGe,"STRONG",{});var KNt=s(T0e);tHr=r(KNt,"bert"),KNt.forEach(t),aHr=r(aGe," \u2014 "),Dee=n(aGe,"A",{href:!0});var ZNt=s(Dee);nHr=r(ZNt,"FlaxBertForMultipleChoice"),ZNt.forEach(t),sHr=r(aGe," (BERT model)"),aGe.forEach(t),lHr=i(Mo),Rw=n(Mo,"LI",{});var nGe=s(Rw);M0e=n(nGe,"STRONG",{});var eqt=s(M0e);iHr=r(eqt,"big_bird"),eqt.forEach(t),dHr=r(nGe," \u2014 "),Gee=n(nGe,"A",{href:!0});var oqt=s(Gee);cHr=r(oqt,"FlaxBigBirdForMultipleChoice"),oqt.forEach(t),fHr=r(nGe," (BigBird model)"),nGe.forEach(t),mHr=i(Mo),Pw=n(Mo,"LI",{});var sGe=s(Pw);E0e=n(sGe,"STRONG",{});var rqt=s(E0e);gHr=r(rqt,"distilbert"),rqt.forEach(t),hHr=r(sGe," \u2014 "),Oee=n(sGe,"A",{href:!0});var tqt=s(Oee);pHr=r(tqt,"FlaxDistilBertForMultipleChoice"),tqt.forEach(t),uHr=r(sGe," (DistilBERT model)"),sGe.forEach(t),_Hr=i(Mo),Bw=n(Mo,"LI",{});var lGe=s(Bw);C0e=n(lGe,"STRONG",{});var aqt=s(C0e);bHr=r(aqt,"electra"),aqt.forEach(t),vHr=r(lGe," \u2014 "),Vee=n(lGe,"A",{href:!0});var nqt=s(Vee);FHr=r(nqt,"FlaxElectraForMultipleChoice"),nqt.forEach(t),THr=r(lGe," (ELECTRA model)"),lGe.forEach(t),MHr=i(Mo),Iw=n(Mo,"LI",{});var iGe=s(Iw);w0e=n(iGe,"STRONG",{});var sqt=s(w0e);EHr=r(sqt,"roberta"),sqt.forEach(t),CHr=r(iGe," \u2014 "),Xee=n(iGe,"A",{href:!0});var lqt=s(Xee);wHr=r(lqt,"FlaxRobertaForMultipleChoice"),lqt.forEach(t),AHr=r(iGe," (RoBERTa model)"),iGe.forEach(t),LHr=i(Mo),Nw=n(Mo,"LI",{});var dGe=s(Nw);A0e=n(dGe,"STRONG",{});var iqt=s(A0e);yHr=r(iqt,"roformer"),iqt.forEach(t),xHr=r(dGe," \u2014 "),zee=n(dGe,"A",{href:!0});var dqt=s(zee);$Hr=r(dqt,"FlaxRoFormerForMultipleChoice"),dqt.forEach(t),kHr=r(dGe," (RoFormer model)"),dGe.forEach(t),SHr=i(Mo),qw=n(Mo,"LI",{});var cGe=s(qw);L0e=n(cGe,"STRONG",{});var cqt=s(L0e);RHr=r(cqt,"xlm-roberta"),cqt.forEach(t),PHr=r(cGe," \u2014 "),Wee=n(cGe,"A",{href:!0});var fqt=s(Wee);BHr=r(fqt,"FlaxXLMRobertaForMultipleChoice"),fqt.forEach(t),IHr=r(cGe," (XLM-RoBERTa model)"),cGe.forEach(t),Mo.forEach(t),NHr=i(hi),T(jw.$$.fragment,hi),hi.forEach(t),gi.forEach(t),hVe=i(f),uf=n(f,"H2",{class:!0});var Eze=s(uf);Dw=n(Eze,"A",{id:!0,class:!0,href:!0});var mqt=s(Dw);y0e=n(mqt,"SPAN",{});var gqt=s(y0e);T(_$.$$.fragment,gqt),gqt.forEach(t),mqt.forEach(t),qHr=i(Eze),x0e=n(Eze,"SPAN",{});var hqt=s(x0e);jHr=r(hqt,"FlaxAutoModelForNextSentencePrediction"),hqt.forEach(t),Eze.forEach(t),pVe=i(f),Mr=n(f,"DIV",{class:!0});var pi=s(Mr);T(b$.$$.fragment,pi),DHr=i(pi),_f=n(pi,"P",{});var Hre=s(_f);GHr=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Qee=n(Hre,"A",{href:!0});var pqt=s(Qee);OHr=r(pqt,"from_pretrained()"),pqt.forEach(t),VHr=r(Hre," class method or the "),Hee=n(Hre,"A",{href:!0});var uqt=s(Hee);XHr=r(uqt,"from_config()"),uqt.forEach(t),zHr=r(Hre,` class
method.`),Hre.forEach(t),WHr=i(pi),v$=n(pi,"P",{});var Cze=s(v$);QHr=r(Cze,"This class cannot be instantiated directly using "),$0e=n(Cze,"CODE",{});var _qt=s($0e);HHr=r(_qt,"__init__()"),_qt.forEach(t),UHr=r(Cze," (throws an error)."),Cze.forEach(t),JHr=i(pi),Zt=n(pi,"DIV",{class:!0});var gL=s(Zt);T(F$.$$.fragment,gL),YHr=i(gL),k0e=n(gL,"P",{});var bqt=s(k0e);KHr=r(bqt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bqt.forEach(t),ZHr=i(gL),bf=n(gL,"P",{});var Ure=s(bf);eUr=r(Ure,`Note:
Loading a model from its configuration file does `),S0e=n(Ure,"STRONG",{});var vqt=s(S0e);oUr=r(vqt,"not"),vqt.forEach(t),rUr=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=n(Ure,"A",{href:!0});var Fqt=s(Uee);tUr=r(Fqt,"from_pretrained()"),Fqt.forEach(t),aUr=r(Ure," to load the model weights."),Ure.forEach(t),nUr=i(gL),T(Gw.$$.fragment,gL),gL.forEach(t),sUr=i(pi),Jr=n(pi,"DIV",{class:!0});var ui=s(Jr);T(T$.$$.fragment,ui),lUr=i(ui),R0e=n(ui,"P",{});var Tqt=s(R0e);iUr=r(Tqt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Tqt.forEach(t),dUr=i(ui),yn=n(ui,"P",{});var hL=s(yn);cUr=r(hL,"The model class to instantiate is selected based on the "),P0e=n(hL,"CODE",{});var Mqt=s(P0e);fUr=r(Mqt,"model_type"),Mqt.forEach(t),mUr=r(hL,` property of the config object (either
passed as an argument or loaded from `),B0e=n(hL,"CODE",{});var Eqt=s(B0e);gUr=r(Eqt,"pretrained_model_name_or_path"),Eqt.forEach(t),hUr=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I0e=n(hL,"CODE",{});var Cqt=s(I0e);pUr=r(Cqt,"pretrained_model_name_or_path"),Cqt.forEach(t),uUr=r(hL,":"),hL.forEach(t),_Ur=i(ui),N0e=n(ui,"UL",{});var wqt=s(N0e);Ow=n(wqt,"LI",{});var fGe=s(Ow);q0e=n(fGe,"STRONG",{});var Aqt=s(q0e);bUr=r(Aqt,"bert"),Aqt.forEach(t),vUr=r(fGe," \u2014 "),Jee=n(fGe,"A",{href:!0});var Lqt=s(Jee);FUr=r(Lqt,"FlaxBertForNextSentencePrediction"),Lqt.forEach(t),TUr=r(fGe," (BERT model)"),fGe.forEach(t),wqt.forEach(t),MUr=i(ui),T(Vw.$$.fragment,ui),ui.forEach(t),pi.forEach(t),uVe=i(f),vf=n(f,"H2",{class:!0});var wze=s(vf);Xw=n(wze,"A",{id:!0,class:!0,href:!0});var yqt=s(Xw);j0e=n(yqt,"SPAN",{});var xqt=s(j0e);T(M$.$$.fragment,xqt),xqt.forEach(t),yqt.forEach(t),EUr=i(wze),D0e=n(wze,"SPAN",{});var $qt=s(D0e);CUr=r($qt,"FlaxAutoModelForImageClassification"),$qt.forEach(t),wze.forEach(t),_Ve=i(f),Er=n(f,"DIV",{class:!0});var _i=s(Er);T(E$.$$.fragment,_i),wUr=i(_i),Ff=n(_i,"P",{});var Jre=s(Ff);AUr=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Yee=n(Jre,"A",{href:!0});var kqt=s(Yee);LUr=r(kqt,"from_pretrained()"),kqt.forEach(t),yUr=r(Jre," class method or the "),Kee=n(Jre,"A",{href:!0});var Sqt=s(Kee);xUr=r(Sqt,"from_config()"),Sqt.forEach(t),$Ur=r(Jre,` class
method.`),Jre.forEach(t),kUr=i(_i),C$=n(_i,"P",{});var Aze=s(C$);SUr=r(Aze,"This class cannot be instantiated directly using "),G0e=n(Aze,"CODE",{});var Rqt=s(G0e);RUr=r(Rqt,"__init__()"),Rqt.forEach(t),PUr=r(Aze," (throws an error)."),Aze.forEach(t),BUr=i(_i),ea=n(_i,"DIV",{class:!0});var pL=s(ea);T(w$.$$.fragment,pL),IUr=i(pL),O0e=n(pL,"P",{});var Pqt=s(O0e);NUr=r(Pqt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Pqt.forEach(t),qUr=i(pL),Tf=n(pL,"P",{});var Yre=s(Tf);jUr=r(Yre,`Note:
Loading a model from its configuration file does `),V0e=n(Yre,"STRONG",{});var Bqt=s(V0e);DUr=r(Bqt,"not"),Bqt.forEach(t),GUr=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zee=n(Yre,"A",{href:!0});var Iqt=s(Zee);OUr=r(Iqt,"from_pretrained()"),Iqt.forEach(t),VUr=r(Yre," to load the model weights."),Yre.forEach(t),XUr=i(pL),T(zw.$$.fragment,pL),pL.forEach(t),zUr=i(_i),Yr=n(_i,"DIV",{class:!0});var bi=s(Yr);T(A$.$$.fragment,bi),WUr=i(bi),X0e=n(bi,"P",{});var Nqt=s(X0e);QUr=r(Nqt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Nqt.forEach(t),HUr=i(bi),xn=n(bi,"P",{});var uL=s(xn);UUr=r(uL,"The model class to instantiate is selected based on the "),z0e=n(uL,"CODE",{});var qqt=s(z0e);JUr=r(qqt,"model_type"),qqt.forEach(t),YUr=r(uL,` property of the config object (either
passed as an argument or loaded from `),W0e=n(uL,"CODE",{});var jqt=s(W0e);KUr=r(jqt,"pretrained_model_name_or_path"),jqt.forEach(t),ZUr=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q0e=n(uL,"CODE",{});var Dqt=s(Q0e);eJr=r(Dqt,"pretrained_model_name_or_path"),Dqt.forEach(t),oJr=r(uL,":"),uL.forEach(t),rJr=i(bi),L$=n(bi,"UL",{});var Lze=s(L$);Ww=n(Lze,"LI",{});var mGe=s(Ww);H0e=n(mGe,"STRONG",{});var Gqt=s(H0e);tJr=r(Gqt,"beit"),Gqt.forEach(t),aJr=r(mGe," \u2014 "),eoe=n(mGe,"A",{href:!0});var Oqt=s(eoe);nJr=r(Oqt,"FlaxBeitForImageClassification"),Oqt.forEach(t),sJr=r(mGe," (BEiT model)"),mGe.forEach(t),lJr=i(Lze),Qw=n(Lze,"LI",{});var gGe=s(Qw);U0e=n(gGe,"STRONG",{});var Vqt=s(U0e);iJr=r(Vqt,"vit"),Vqt.forEach(t),dJr=r(gGe," \u2014 "),ooe=n(gGe,"A",{href:!0});var Xqt=s(ooe);cJr=r(Xqt,"FlaxViTForImageClassification"),Xqt.forEach(t),fJr=r(gGe," (ViT model)"),gGe.forEach(t),Lze.forEach(t),mJr=i(bi),T(Hw.$$.fragment,bi),bi.forEach(t),_i.forEach(t),bVe=i(f),Mf=n(f,"H2",{class:!0});var yze=s(Mf);Uw=n(yze,"A",{id:!0,class:!0,href:!0});var zqt=s(Uw);J0e=n(zqt,"SPAN",{});var Wqt=s(J0e);T(y$.$$.fragment,Wqt),Wqt.forEach(t),zqt.forEach(t),gJr=i(yze),Y0e=n(yze,"SPAN",{});var Qqt=s(Y0e);hJr=r(Qqt,"FlaxAutoModelForVision2Seq"),Qqt.forEach(t),yze.forEach(t),vVe=i(f),Cr=n(f,"DIV",{class:!0});var vi=s(Cr);T(x$.$$.fragment,vi),pJr=i(vi),Ef=n(vi,"P",{});var Kre=s(Ef);uJr=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),roe=n(Kre,"A",{href:!0});var Hqt=s(roe);_Jr=r(Hqt,"from_pretrained()"),Hqt.forEach(t),bJr=r(Kre," class method or the "),toe=n(Kre,"A",{href:!0});var Uqt=s(toe);vJr=r(Uqt,"from_config()"),Uqt.forEach(t),FJr=r(Kre,` class
method.`),Kre.forEach(t),TJr=i(vi),$$=n(vi,"P",{});var xze=s($$);MJr=r(xze,"This class cannot be instantiated directly using "),K0e=n(xze,"CODE",{});var Jqt=s(K0e);EJr=r(Jqt,"__init__()"),Jqt.forEach(t),CJr=r(xze," (throws an error)."),xze.forEach(t),wJr=i(vi),oa=n(vi,"DIV",{class:!0});var _L=s(oa);T(k$.$$.fragment,_L),AJr=i(_L),Z0e=n(_L,"P",{});var Yqt=s(Z0e);LJr=r(Yqt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Yqt.forEach(t),yJr=i(_L),Cf=n(_L,"P",{});var Zre=s(Cf);xJr=r(Zre,`Note:
Loading a model from its configuration file does `),ewe=n(Zre,"STRONG",{});var Kqt=s(ewe);$Jr=r(Kqt,"not"),Kqt.forEach(t),kJr=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),aoe=n(Zre,"A",{href:!0});var Zqt=s(aoe);SJr=r(Zqt,"from_pretrained()"),Zqt.forEach(t),RJr=r(Zre," to load the model weights."),Zre.forEach(t),PJr=i(_L),T(Jw.$$.fragment,_L),_L.forEach(t),BJr=i(vi),Kr=n(vi,"DIV",{class:!0});var Fi=s(Kr);T(S$.$$.fragment,Fi),IJr=i(Fi),owe=n(Fi,"P",{});var ejt=s(owe);NJr=r(ejt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ejt.forEach(t),qJr=i(Fi),$n=n(Fi,"P",{});var bL=s($n);jJr=r(bL,"The model class to instantiate is selected based on the "),rwe=n(bL,"CODE",{});var ojt=s(rwe);DJr=r(ojt,"model_type"),ojt.forEach(t),GJr=r(bL,` property of the config object (either
passed as an argument or loaded from `),twe=n(bL,"CODE",{});var rjt=s(twe);OJr=r(rjt,"pretrained_model_name_or_path"),rjt.forEach(t),VJr=r(bL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),awe=n(bL,"CODE",{});var tjt=s(awe);XJr=r(tjt,"pretrained_model_name_or_path"),tjt.forEach(t),zJr=r(bL,":"),bL.forEach(t),WJr=i(Fi),nwe=n(Fi,"UL",{});var ajt=s(nwe);Yw=n(ajt,"LI",{});var hGe=s(Yw);swe=n(hGe,"STRONG",{});var njt=s(swe);QJr=r(njt,"vision-encoder-decoder"),njt.forEach(t),HJr=r(hGe," \u2014 "),noe=n(hGe,"A",{href:!0});var sjt=s(noe);UJr=r(sjt,"FlaxVisionEncoderDecoderModel"),sjt.forEach(t),JJr=r(hGe," (Vision Encoder decoder model)"),hGe.forEach(t),ajt.forEach(t),YJr=i(Fi),T(Kw.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(mGt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Sn,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoTokenizer"),c(Li,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertModel"),c(Sf,"id","extending-the-auto-classes"),c(Sf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sf,"href","#extending-the-auto-classes"),c(yi,"class","relative group"),c(Pf,"id","transformers.AutoConfig"),c(Pf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pf,"href","#transformers.AutoConfig"),c(xi,"class","relative group"),c(rS,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(tS,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig"),c(aS,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig"),c(nS,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitConfig"),c(sS,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig"),c(lS,"href","/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(iS,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig"),c(dS,"href","/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(cS,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(fS,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(mS,"href","/docs/transformers/pr_17443/en/model_doc/bloom#transformers.BloomConfig"),c(gS,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig"),c(hS,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineConfig"),c(pS,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPConfig"),c(uS,"href","/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenConfig"),c(_S,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig"),c(bS,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextConfig"),c(vS,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig"),c(FS,"href","/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtConfig"),c(TS,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(MS,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(ES,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(CS,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig"),c(wS,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(AS,"href","/docs/transformers/pr_17443/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(LS,"href","/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTConfig"),c(yS,"href","/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrConfig"),c(xS,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig"),c($S,"href","/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRConfig"),c(kS,"href","/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTConfig"),c(SS,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig"),c(RS,"href","/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(PS,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig"),c(BS,"href","/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaConfig"),c(IS,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig"),c(NS,"href","/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTConfig"),c(qS,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig"),c(jS,"href","/docs/transformers/pr_17443/en/model_doc/glpn#transformers.GLPNConfig"),c(DS,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config"),c(GS,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(OS,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(VS,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig"),c(XS,"href","/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertConfig"),c(zS,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig"),c(WS,"href","/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(QS,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(HS,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(US,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(JS,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig"),c(YS,"href","/docs/transformers/pr_17443/en/model_doc/levit#transformers.LevitConfig"),c(KS,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig"),c(ZS,"href","/docs/transformers/pr_17443/en/model_doc/longt5#transformers.LongT5Config"),c(eR,"href","/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeConfig"),c(oR,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertConfig"),c(rR,"href","/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100Config"),c(tR,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig"),c(aR,"href","/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(nR,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig"),c(sR,"href","/docs/transformers/pr_17443/en/model_doc/mctct#transformers.MCTCTConfig"),c(lR,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(iR,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(dR,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig"),c(cR,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config"),c(fR,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(mR,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(gR,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig"),c(hR,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig"),c(pR,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverConfig"),c(uR,"href","/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartConfig"),c(_R,"href","/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(bR,"href","/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(vR,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(FR,"href","/docs/transformers/pr_17443/en/model_doc/rag#transformers.RagConfig"),c(TR,"href","/docs/transformers/pr_17443/en/model_doc/realm#transformers.RealmConfig"),c(MR,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerConfig"),c(ER,"href","/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetConfig"),c(CR,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig"),c(wR,"href","/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetConfig"),c(AR,"href","/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertConfig"),c(LR,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig"),c(yR,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig"),c(xR,"href","/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerConfig"),c($R,"href","/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWConfig"),c(kR,"href","/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDConfig"),c(SR,"href","/docs/transformers/pr_17443/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(RR,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(PR,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(BR,"href","/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterConfig"),c(IR,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(NR,"href","/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinConfig"),c(qR,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config"),c(jR,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig"),c(DR,"href","/docs/transformers/pr_17443/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(GR,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(OR,"href","/docs/transformers/pr_17443/en/model_doc/trocr#transformers.TrOCRConfig"),c(VR,"href","/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(XR,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(zR,"href","/docs/transformers/pr_17443/en/model_doc/van#transformers.VanConfig"),c(WR,"href","/docs/transformers/pr_17443/en/model_doc/vilt#transformers.ViltConfig"),c(QR,"href","/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(HR,"href","/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(UR,"href","/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(JR,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig"),c(YR,"href","/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(KR,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(ZR,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(eP,"href","/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMConfig"),c(oP,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMConfig"),c(rP,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig"),c(tP,"href","/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(aP,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(nP,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(sP,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig"),c(lP,"href","/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosConfig"),c(iP,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Og,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vg,"id","transformers.AutoTokenizer"),c(Vg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vg,"href","#transformers.AutoTokenizer"),c(ki,"class","relative group"),c(dP,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(cP,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertTokenizer"),c(fP,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(mP,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartTokenizer"),c(gP,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartTokenizerFast"),c(hP,"href","/docs/transformers/pr_17443/en/model_doc/barthez#transformers.BarthezTokenizer"),c(pP,"href","/docs/transformers/pr_17443/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(uP,"href","/docs/transformers/pr_17443/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(_P,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizer"),c(bP,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizerFast"),c(vP,"href","/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(FP,"href","/docs/transformers/pr_17443/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(TP,"href","/docs/transformers/pr_17443/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(MP,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(EP,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(CP,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(wP,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(AP,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(LP,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(yP,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(xP,"href","/docs/transformers/pr_17443/en/model_doc/bloom#transformers.BloomTokenizerFast"),c($P,"href","/docs/transformers/pr_17443/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(kP,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertTokenizer"),c(SP,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(RP,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineTokenizer"),c(PP,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPTokenizer"),c(BP,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(IP,"href","/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(NP,"href","/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(qP,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(jP,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(DP,"href","/docs/transformers/pr_17443/en/model_doc/cpm#transformers.CpmTokenizer"),c(GP,"href","/docs/transformers/pr_17443/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(OP,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(VP,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizer"),c(XP,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(zP,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaTokenizer"),c(WP,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(QP,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(HP,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(UP,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(JP,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(YP,"href","/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(KP,"href","/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraTokenizer"),c(eB,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(oB,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(rB,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetTokenizer"),c(tB,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(aB,"href","/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(nB,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelTokenizer"),c(sB,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(lB,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iB,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(dB,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(cB,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(fB,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(mB,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(gB,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(hB,"href","/docs/transformers/pr_17443/en/model_doc/herbert#transformers.HerbertTokenizer"),c(pB,"href","/docs/transformers/pr_17443/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(uB,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(_B,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizer"),c(bB,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(vB,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(FB,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(TB,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(MB,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(EB,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(CB,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(wB,"href","/docs/transformers/pr_17443/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(AB,"href","/docs/transformers/pr_17443/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(LB,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDTokenizer"),c(yB,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDTokenizerFast"),c(xB,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerTokenizer"),c($B,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(kB,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Tokenizer"),c(SB,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5TokenizerFast"),c(RB,"href","/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeTokenizer"),c(PB,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(BB,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(IB,"href","/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(NB,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianTokenizer"),c(qB,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartTokenizer"),c(jB,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(DB,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(GB,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(OB,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizer"),c(VB,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizerFast"),c(XB,"href","/docs/transformers/pr_17443/en/model_doc/mluke#transformers.MLukeTokenizer"),c(zB,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(WB,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(QB,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(HB,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(UB,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Tokenizer"),c(JB,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5TokenizerFast"),c(YB,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertTokenizer"),c(KB,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(ZB,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(eI,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(oI,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rI,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(tI,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(aI,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(nI,"href","/docs/transformers/pr_17443/en/model_doc/phobert#transformers.PhobertTokenizer"),c(sI,"href","/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartTokenizer"),c(lI,"href","/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(iI,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizer"),c(dI,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizerFast"),c(cI,"href","/docs/transformers/pr_17443/en/model_doc/rag#transformers.RagTokenizer"),c(fI,"href","/docs/transformers/pr_17443/en/model_doc/realm#transformers.RealmTokenizer"),c(mI,"href","/docs/transformers/pr_17443/en/model_doc/realm#transformers.RealmTokenizerFast"),c(gI,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerTokenizer"),c(hI,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(pI,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertTokenizer"),c(uI,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(_I,"href","/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(bI,"href","/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(vI,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizer"),c(FI,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(TI,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(MI,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(EI,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(CI,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(wI,"href","/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterTokenizer"),c(AI,"href","/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(LI,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(yI,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(xI,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Tokenizer"),c($I,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5TokenizerFast"),c(kI,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasTokenizer"),c(SI,"href","/docs/transformers/pr_17443/en/model_doc/tapex#transformers.TapexTokenizer"),c(RI,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(PI,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizer"),c(BI,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizerFast"),c(II,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizer"),c(NI,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizerFast"),c(qI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(jI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(DI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(GI,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMTokenizer"),c(OI,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(VI,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMTokenizer"),c(XI,"href","/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(zI,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(WI,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(QI,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizer"),c(HI,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(UI,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(JI,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(YI,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertTokenizer"),c(KI,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"id","transformers.AutoFeatureExtractor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoFeatureExtractor"),c(Si,"class","relative group"),c(ZI,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(eN,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(oN,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(rN,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tN,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(aN,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(nN,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(sN,"href","/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(lN,"href","/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(iN,"href","/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(dN,"href","/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(cN,"href","/docs/transformers/pr_17443/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(fN,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(mN,"href","/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(gN,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(hN,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(pN,"href","/docs/transformers/pr_17443/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(uN,"href","/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(_N,"href","/docs/transformers/pr_17443/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(bN,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(vN,"href","/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(FN,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TN,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MN,"href","/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(EN,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(CN,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wN,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AN,"href","/docs/transformers/pr_17443/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(LN,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yN,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(xN,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($N,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(kN,"href","/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lp,"id","transformers.AutoProcessor"),c(lp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lp,"href","#transformers.AutoProcessor"),c(Ri,"class","relative group"),c(SN,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(RN,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPProcessor"),c(PN,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(BN,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(IN,"href","/docs/transformers/pr_17443/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(NN,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qN,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jN,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(DN,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(GN,"href","/docs/transformers/pr_17443/en/model_doc/trocr#transformers.TrOCRProcessor"),c(ON,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VN,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XN,"href","/docs/transformers/pr_17443/en/model_doc/vilt#transformers.ViltProcessor"),c(zN,"href","/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(WN,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QN,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(HN,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yp,"id","transformers.AutoModel"),c(yp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yp,"href","#transformers.AutoModel"),c(Bi,"class","relative group"),c(UN,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JN,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YN,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KN,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertModel"),c(ZN,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartModel"),c(eq,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitModel"),c(oq,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertModel"),c(rq,"href","/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(tq,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdModel"),c(aq,"href","/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(nq,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(sq,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(lq,"href","/docs/transformers/pr_17443/en/model_doc/bloom#transformers.BloomModel"),c(iq,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertModel"),c(dq,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineModel"),c(cq,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPModel"),c(fq,"href","/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenModel"),c(mq,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertModel"),c(gq,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextModel"),c(hq,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLModel"),c(pq,"href","/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtModel"),c(uq,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(_q,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(bq,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(vq,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaModel"),c(Fq,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Tq,"href","/docs/transformers/pr_17443/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Mq,"href","/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTModel"),c(Eq,"href","/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrModel"),c(Cq,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertModel"),c(wq,"href","/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Aq,"href","/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTModel"),c(Lq,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraModel"),c(yq,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertModel"),c(xq,"href","/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaModel"),c($q,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetModel"),c(kq,"href","/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTModel"),c(Sq,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelModel"),c(Rq,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Pq,"href","/docs/transformers/pr_17443/en/model_doc/glpn#transformers.GLPNModel"),c(Bq,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Model"),c(Iq,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Nq,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(qq,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJModel"),c(jq,"href","/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertModel"),c(Dq,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertModel"),c(Gq,"href","/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Oq,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Vq,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Xq,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(zq,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDModel"),c(Wq,"href","/docs/transformers/pr_17443/en/model_doc/levit#transformers.LevitModel"),c(Qq,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerModel"),c(Hq,"href","/docs/transformers/pr_17443/en/model_doc/longt5#transformers.LongT5Model"),c(Uq,"href","/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeModel"),c(Jq,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertModel"),c(Yq,"href","/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100Model"),c(Kq,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianModel"),c(Zq,"href","/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerModel"),c(ej,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartModel"),c(oj,"href","/docs/transformers/pr_17443/en/model_doc/mctct#transformers.MCTCTModel"),c(rj,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(tj,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertModel"),c(aj,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetModel"),c(nj,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Model"),c(sj,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerModel"),c(lj,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(ij,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTModel"),c(dj,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusModel"),c(cj,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverModel"),c(fj,"href","/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartModel"),c(mj,"href","/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerModel"),c(gj,"href","/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(hj,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertModel"),c(pj,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerModel"),c(uj,"href","/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetModel"),c(_j,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertModel"),c(bj,"href","/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetModel"),c(vj,"href","/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertModel"),c(Fj,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaModel"),c(Tj,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerModel"),c(Mj,"href","/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerModel"),c(Ej,"href","/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWModel"),c(Cj,"href","/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDModel"),c(wj,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Aj,"href","/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterModel"),c(Lj,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(yj,"href","/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinModel"),c(xj,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Model"),c($j,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasModel"),c(kj,"href","/docs/transformers/pr_17443/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Sj,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Rj,"href","/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Pj,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Bj,"href","/docs/transformers/pr_17443/en/model_doc/van#transformers.VanModel"),c(Ij,"href","/docs/transformers/pr_17443/en/model_doc/vilt#transformers.ViltModel"),c(Nj,"href","/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(qj,"href","/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertModel"),c(jj,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTModel"),c(Dj,"href","/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Gj,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Oj,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Vj,"href","/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMModel"),c(Xj,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMModel"),c(zj,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMModel"),c(Wj,"href","/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Qj,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Hj,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Uj,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetModel"),c(Jj,"href","/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosModel"),c(Yj,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($_,"id","transformers.AutoModelForPreTraining"),c($_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($_,"href","#transformers.AutoModelForPreTraining"),c(qi,"class","relative group"),c(Kj,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zj,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eD,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oD,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForPreTraining"),c(rD,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(tD,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForPreTraining"),c(aD,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(nD,"href","/docs/transformers/pr_17443/en/model_doc/bloom#transformers.BloomForCausalLM"),c(sD,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(lD,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(iD,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(dD,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(cD,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(fD,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(mD,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForPreTraining"),c(gD,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(hD,"href","/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaForPreTraining"),c(pD,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForPreTraining"),c(uD,"href","/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(_D,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(bD,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(vD,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(FD,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(TD,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(MD,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(ED,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(CD,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(wD,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(AD,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(LD,"href","/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertModel"),c(yD,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(xD,"href","/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterForPreTraining"),c($D,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(kD,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(SD,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(RD,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(PD,"href","/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(BD,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(ID,"href","/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(ND,"href","/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(qD,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(jD,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(DD,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(GD,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(OD,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(VD,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.AutoModelForCausalLM"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.AutoModelForCausalLM"),c(Gi,"class","relative group"),c(XD,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zD,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WD,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QD,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForCausalLM"),c(HD,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertLMHeadModel"),c(UD,"href","/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(JD,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(YD,"href","/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(KD,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(ZD,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(eG,"href","/docs/transformers/pr_17443/en/model_doc/bloom#transformers.BloomForCausalLM"),c(oG,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(rG,"href","/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(tG,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(aG,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(nG,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForCausalLM"),c(sG,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(lG,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(iG,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(dG,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(cG,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianForCausalLM"),c(fG,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForCausalLM"),c(mG,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(gG,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(hG,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTForCausalLM"),c(pG,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(uG,"href","/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(_G,"href","/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(bG,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(vG,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(FG,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(TG,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(MG,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(EG,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(CG,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(wG,"href","/docs/transformers/pr_17443/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(AG,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(LG,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(yG,"href","/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(xG,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c($G,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(kG,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m1,"id","transformers.AutoModelForMaskedLM"),c(m1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m1,"href","#transformers.AutoModelForMaskedLM"),c(Xi,"class","relative group"),c(SG,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RG,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PG,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BG,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(IG,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(NG,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForMaskedLM"),c(qG,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(jG,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(DG,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(GG,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(OG,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(VG,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(XG,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(zG,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(WG,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(QG,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(HG,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(UG,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(JG,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(YG,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(KG,"href","/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeForMaskedLM"),c(ZG,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(eO,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(oO,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(rO,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(tO,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(aO,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(nO,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(sO,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(lO,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(iO,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(dO,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(cO,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(fO,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(mO,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(gO,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(hO,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(pO,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K1,"id","transformers.AutoModelForSeq2SeqLM"),c(K1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Qi,"class","relative group"),c(uO,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_O,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bO,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vO,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(FO,"href","/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(TO,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(MO,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(EO,"href","/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(CO,"href","/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(wO,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(AO,"href","/docs/transformers/pr_17443/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(LO,"href","/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(yO,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianMTModel"),c(xO,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c($O,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(kO,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(SO,"href","/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(RO,"href","/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(PO,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(BO,"href","/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v2,"id","transformers.AutoModelForSequenceClassification"),c(v2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v2,"href","#transformers.AutoModelForSequenceClassification"),c(Ji,"class","relative group"),c(IO,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NO,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qO,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jO,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(DO,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForSequenceClassification"),c(GO,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForSequenceClassification"),c(OO,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(VO,"href","/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(XO,"href","/docs/transformers/pr_17443/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(zO,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(WO,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(QO,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(HO,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(UO,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(JO,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(YO,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(KO,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(eV,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(oV,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(rV,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(tV,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(aV,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c($V,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(kV,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(SV,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_b,"id","transformers.AutoModelForMultipleChoice"),c(_b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_b,"href","#transformers.AutoModelForMultipleChoice"),c(Zi,"class","relative group"),c(RV,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PV,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BV,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(NV,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForMultipleChoice"),c(qV,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(jV,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(DV,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(GV,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(OV,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(VV,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(XV,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(zV,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(WV,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(QV,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(HV,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(UV,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(JV,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(YV,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(KV,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(ZV,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(eX,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(oX,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(rX,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(tX,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(aX,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(nX,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(sX,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(lX,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(iX,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(dX,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(cX,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jb,"id","transformers.AutoModelForNextSentencePrediction"),c(Jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jb,"href","#transformers.AutoModelForNextSentencePrediction"),c(rd,"class","relative group"),c(fX,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mX,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gX,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hX,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(pX,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(uX,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(_X,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(bX,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nv,"id","transformers.AutoModelForTokenClassification"),c(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nv,"href","#transformers.AutoModelForTokenClassification"),c(nd,"class","relative group"),c(vX,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FX,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TX,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MX,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(EX,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForTokenClassification"),c(CX,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(wX,"href","/docs/transformers/pr_17443/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(AX,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(LX,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForTokenClassification"),c(yX,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(xX,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c($X,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(kX,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(SX,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(RX,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(PX,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(BX,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(IX,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(NX,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(qX,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(jX,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(DX,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(GX,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(OX,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(VX,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(XX,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(zX,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(WX,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(QX,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(HX,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(UX,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(JX,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(YX,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(KX,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(ZX,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(ez,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(oz,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(rz,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xv,"id","transformers.AutoModelForQuestionAnswering"),c(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xv,"href","#transformers.AutoModelForQuestionAnswering"),c(id,"class","relative group"),c(tz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(az,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sz,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(lz,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(iz,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(dz,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(cz,"href","/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(fz,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(mz,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(gz,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(hz,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(pz,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(uz,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(_z,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(bz,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(vz,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(Fz,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(Tz,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(Mz,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(Ez,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(Cz,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(wz,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(Az,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(Lz,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(yz,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(xz,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c($z,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(Bz,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(Iz,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(qz,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(jz,"href","/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(Dz,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(Gz,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(Oz,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(Vz,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(Xz,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(zz,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P3,"id","transformers.AutoModelForTableQuestionAnswering"),c(P3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P3,"href","#transformers.AutoModelForTableQuestionAnswering"),c(fd,"class","relative group"),c(Wz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uz,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j3,"id","transformers.AutoModelForImageClassification"),c(j3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j3,"href","#transformers.AutoModelForImageClassification"),c(hd,"class","relative group"),c(Jz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zz,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitForImageClassification"),c(eW,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(oW,"href","/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtForImageClassification"),c(rW,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(tW,"href","/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTForImageClassification"),c(aW,"href","/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(nW,"href","/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(sW,"href","/docs/transformers/pr_17443/en/model_doc/levit#transformers.LevitForImageClassification"),c(lW,"href","/docs/transformers/pr_17443/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(iW,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(dW,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(cW,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(fW,"href","/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(mW,"href","/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(gW,"href","/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(hW,"href","/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(pW,"href","/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinForImageClassification"),c(uW,"href","/docs/transformers/pr_17443/en/model_doc/van#transformers.VanForImageClassification"),c(_W,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oF,"id","transformers.AutoModelForVision2Seq"),c(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oF,"href","#transformers.AutoModelForVision2Seq"),c(_d,"class","relative group"),c(bW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TW,"href","/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sF,"id","transformers.AutoModelForVisualQuestionAnswering"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Fd,"class","relative group"),c(MW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wW,"href","/docs/transformers/pr_17443/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fF,"id","transformers.AutoModelForAudioClassification"),c(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fF,"href","#transformers.AutoModelForAudioClassification"),c(Ed,"class","relative group"),c(AW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xW,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c($W,"href","/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(kW,"href","/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CF,"id","transformers.AutoModelForAudioFrameClassification"),c(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CF,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ad,"class","relative group"),c(qW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GW,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(OW,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(VW,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(XW,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(zW,"href","/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RF,"id","transformers.AutoModelForCTC"),c(RF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RF,"href","#transformers.AutoModelForCTC"),c(xd,"class","relative group"),c(WW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UW,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(JW,"href","/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertForCTC"),c(YW,"href","/docs/transformers/pr_17443/en/model_doc/mctct#transformers.MCTCTForCTC"),c(KW,"href","/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWForCTC"),c(ZW,"href","/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDForCTC"),c(eQ,"href","/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(oQ,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(rQ,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(tQ,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(aQ,"href","/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Sd,"class","relative group"),c(nQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iQ,"href","/docs/transformers/pr_17443/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(dQ,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForAudioXVector"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForAudioXVector"),c(Bd,"class","relative group"),c(cQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gQ,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(hQ,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(pQ,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(uQ,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(_Q,"href","/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iT,"id","transformers.AutoModelForMaskedImageModeling"),c(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iT,"href","#transformers.AutoModelForMaskedImageModeling"),c(qd,"class","relative group"),c(bQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(MQ,"href","/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(EQ,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pT,"id","transformers.AutoModelForObjectDetection"),c(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pT,"href","#transformers.AutoModelForObjectDetection"),c(Od,"class","relative group"),c(CQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LQ,"href","/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrForObjectDetection"),c(yQ,"href","/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.AutoModelForImageSegmentation"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.AutoModelForImageSegmentation"),c(zd,"class","relative group"),c(xQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Q,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SQ,"href","/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AT,"id","transformers.AutoModelForSemanticSegmentation"),c(AT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Hd,"class","relative group"),c(RQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IQ,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(NQ,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(qQ,"href","/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(jQ,"href","/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.AutoModelForInstanceSegmentation"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Yd,"class","relative group"),c(DQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VQ,"href","/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jT,"id","transformers.TFAutoModel"),c(jT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jT,"href","#transformers.TFAutoModel"),c(ec,"class","relative group"),c(XQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QQ,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertModel"),c(HQ,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.TFBartModel"),c(UQ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertModel"),c(JQ,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(YQ,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(KQ,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertModel"),c(ZQ,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.TFCLIPModel"),c(eH,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertModel"),c(oH,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.TFConvNextModel"),c(rH,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLModel"),c(tH,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(aH,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaModel"),c(nH,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(sH,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(lH,"href","/docs/transformers/pr_17443/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(iH,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraModel"),c(dH,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(cH,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelModel"),c(fH,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(mH,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2Model"),c(gH,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJModel"),c(hH,"href","/docs/transformers/pr_17443/en/model_doc/hubert#transformers.TFHubertModel"),c(pH,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(uH,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.TFLEDModel"),c(_H,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerModel"),c(bH,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.TFLxmertModel"),c(vH,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.TFMarianModel"),c(FH,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.TFMBartModel"),c(TH,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(MH,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetModel"),c(EH,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.TFMT5Model"),c(CH,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(wH,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.TFOPTModel"),c(AH,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.TFPegasusModel"),c(LH,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertModel"),c(yH,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaModel"),c(xH,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerModel"),c($H,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(kH,"href","/docs/transformers/pr_17443/en/model_doc/swin#transformers.TFSwinModel"),c(SH,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.TFT5Model"),c(RH,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasModel"),c(PH,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(BH,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.TFViTModel"),c(IH,"href","/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(NH,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(qH,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMModel"),c(jH,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(DH,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P7,"id","transformers.TFAutoModelForPreTraining"),c(P7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P7,"href","#transformers.TFAutoModelForPreTraining"),c(tc,"class","relative group"),c(GH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XH,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(zH,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(WH,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForPreTraining"),c(QH,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(HH,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(UH,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(JH,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(YH,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(KH,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(ZH,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(eU,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(oU,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(rU,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(tU,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(aU,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(nU,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(sU,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(lU,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(iU,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(dU,"href","/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(cU,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(fU,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(mU,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sM,"id","transformers.TFAutoModelForCausalLM"),c(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sM,"href","#transformers.TFAutoModelForCausalLM"),c(sc,"class","relative group"),c(gU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uU,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(_U,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(bU,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(vU,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(FU,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(TU,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(MU,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(EU,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(CU,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(wU,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(AU,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(LU,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(yU,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MM,"id","transformers.TFAutoModelForImageClassification"),c(MM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MM,"href","#transformers.TFAutoModelForImageClassification"),c(dc,"class","relative group"),c(xU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($U,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SU,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(RU,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(PU,"href","/docs/transformers/pr_17443/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(BU,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xM,"id","transformers.TFAutoModelForMaskedLM"),c(xM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xM,"href","#transformers.TFAutoModelForMaskedLM"),c(mc,"class","relative group"),c(IU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jU,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(DU,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(GU,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(OU,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(VU,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(XU,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(zU,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(WU,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(QU,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(HU,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(UU,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(JU,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(YU,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(KU,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(ZU,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(eJ,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(oJ,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(rJ,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(tJ,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(aJ,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(pc,"class","relative group"),c(nJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iJ,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(dJ,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(cJ,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(fJ,"href","/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(mJ,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(gJ,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.TFMarianMTModel"),c(hJ,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(pJ,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(uJ,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(_J,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fE,"id","transformers.TFAutoModelForSequenceClassification"),c(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fE,"href","#transformers.TFAutoModelForSequenceClassification"),c(bc,"class","relative group"),c(bJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TJ,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(MJ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(EJ,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(CJ,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(wJ,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(AJ,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(LJ,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(xJ,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c($J,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(kJ,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(SJ,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(RJ,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(PJ,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(BJ,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(IJ,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(NJ,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(qJ,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(jJ,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(DJ,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(GJ,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(OJ,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(VJ,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(XJ,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(zJ,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(WJ,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DE,"id","transformers.TFAutoModelForMultipleChoice"),c(DE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DE,"href","#transformers.TFAutoModelForMultipleChoice"),c(Tc,"class","relative group"),c(QJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(YJ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(KJ,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(ZJ,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(eY,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(oY,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(rY,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(tY,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(aY,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(nY,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(sY,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(lY,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(iY,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(dY,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(cY,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(fY,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(mY,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(sC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Cc,"class","relative group"),c(gY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uY,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(_Y,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Lc,"class","relative group"),c(bY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.TFAutoModelForTokenClassification"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.TFAutoModelForTokenClassification"),c($c,"class","relative group"),c(MY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wY,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(AY,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(LY,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(yY,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(xY,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c($Y,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(kY,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(SY,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(RY,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(PY,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(BY,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(IY,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(NY,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(qY,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(jY,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(DY,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(GY,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(OY,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(VY,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(XY,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qC,"id","transformers.TFAutoModelForQuestionAnswering"),c(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Rc,"class","relative group"),c(zY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HY,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(UY,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(JY,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(YY,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(ZY,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(oK,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(rK,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(tK,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(aK,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(nK,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(sK,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(lK,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(iK,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(dK,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(cK,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(fK,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(mK,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(gK,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l5,"id","transformers.TFAutoModelForVision2Seq"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.TFAutoModelForVision2Seq"),c(Ic,"class","relative group"),c(hK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_K,"href","/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(f5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(jc,"class","relative group"),c(bK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TK,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p5,"id","transformers.FlaxAutoModel"),c(p5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p5,"href","#transformers.FlaxAutoModel"),c(Oc,"class","relative group"),c(MK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wK,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertModel"),c(AK,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartModel"),c(LK,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.FlaxBeitModel"),c(yK,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertModel"),c(xK,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c($K,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(kK,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(SK,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.FlaxCLIPModel"),c(RK,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(PK,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraModel"),c(BK,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(IK,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(NK,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(qK,"href","/docs/transformers/pr_17443/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(jK,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.FlaxMarianModel"),c(DK,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartModel"),c(GK,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.FlaxMT5Model"),c(OK,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.FlaxOPTModel"),c(VK,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(XK,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(zK,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(WK,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.FlaxT5Model"),c(QK,"href","/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(HK,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.FlaxViTModel"),c(UK,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(JK,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(YK,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z5,"id","transformers.FlaxAutoModelForCausalLM"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.FlaxAutoModelForCausalLM"),c(zc,"class","relative group"),c(KK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(rZ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(tZ,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(aZ,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(nZ,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(sZ,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(lZ,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(iZ,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(dZ,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(cZ,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a0,"id","transformers.FlaxAutoModelForPreTraining"),c(a0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a0,"href","#transformers.FlaxAutoModelForPreTraining"),c(Hc,"class","relative group"),c(fZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hZ,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(pZ,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(uZ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(_Z,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(bZ,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(vZ,"href","/docs/transformers/pr_17443/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(FZ,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(TZ,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(MZ,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(EZ,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(CZ,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(wZ,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(AZ,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F0,"id","transformers.FlaxAutoModelForMaskedLM"),c(F0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F0,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Yc,"class","relative group"),c(LZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Z,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(kZ,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(SZ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(RZ,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(PZ,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(BZ,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(IZ,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(NZ,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(qZ,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(jZ,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(R0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(ef,"class","relative group"),c(DZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VZ,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(XZ,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(zZ,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(WZ,"href","/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(QZ,"href","/docs/transformers/pr_17443/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(HZ,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(UZ,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(JZ,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(YZ,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(KZ,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(W0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(tf,"class","relative group"),c(ZZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eee,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oee,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ree,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(tee,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(aee,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(nee,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(see,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(lee,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(iee,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(dee,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(cee,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(fee,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(sf,"class","relative group"),c(mee,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gee,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hee,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pee,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(uee,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(_ee,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(bee,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(vee,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Fee,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Tee,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Mee,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Eee,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Cee,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bw,"id","transformers.FlaxAutoModelForTokenClassification"),c(bw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(cf,"class","relative group"),c(wee,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aee,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lee,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yee,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(xee,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c($ee,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(kee,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(See,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Ree,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Pee,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Bee,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(xw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(gf,"class","relative group"),c(Iee,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nee,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qee,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jee,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Dee,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Gee,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Oee,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Vee,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Xee,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(zee,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Wee,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Dw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(uf,"class","relative group"),c(Qee,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hee,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uee,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jee,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xw,"id","transformers.FlaxAutoModelForImageClassification"),c(Xw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xw,"href","#transformers.FlaxAutoModelForImageClassification"),c(vf,"class","relative group"),c(Yee,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kee,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zee,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eoe,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(ooe,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Mf,"class","relative group"),c(roe,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(toe,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aoe,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(noe,"href","/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Eo),e(Eo,Ti),b(f,yf,_),b(f,at,_),e(at,Mi),e(at,Ei),e(Ei,vL),e(at,xf),b(f,Oe,_),b(f,We,_),e(We,Ci),e(We,Sn),e(Sn,FL),e(We,Rn),e(We,Pn),e(Pn,TL),e(We,wi),e(We,Bn),e(Bn,ML),e(We,Ai),b(f,$f,_),M(ya,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,Jk),e(Ae,Li),e(Li,Yk),e(Ae,Kk),b(f,Co,_),b(f,xa,_),e(xa,Zk),e(xa,kf),e(kf,eS),e(xa,$ze),b(f,pGe,_),b(f,yi,_),e(yi,Sf),e(Sf,ete),M(EL,ete,null),e(yi,kze),e(yi,ote),e(ote,Sze),b(f,uGe,_),b(f,In,_),e(In,Rze),e(In,rte),e(rte,Pze),e(In,Bze),e(In,tte),e(tte,Ize),e(In,Nze),b(f,_Ge,_),M(CL,f,_),b(f,bGe,_),b(f,oS,_),e(oS,qze),b(f,vGe,_),M(Rf,f,_),b(f,FGe,_),b(f,xi,_),e(xi,Pf),e(Pf,ate),M(wL,ate,null),e(xi,jze),e(xi,nte),e(nte,Dze),b(f,TGe,_),b(f,wo,_),M(AL,wo,null),e(wo,Gze),e(wo,LL),e(LL,Oze),e(LL,rS),e(rS,Vze),e(LL,Xze),e(wo,zze),e(wo,yL),e(yL,Wze),e(yL,ste),e(ste,Qze),e(yL,Hze),e(wo,Uze),e(wo,wr),M(xL,wr,null),e(wr,Jze),e(wr,lte),e(lte,Yze),e(wr,Kze),e(wr,$i),e($i,Zze),e($i,ite),e(ite,eWe),e($i,oWe),e($i,dte),e(dte,rWe),e($i,tWe),e(wr,aWe),e(wr,A),e(A,Bf),e(Bf,cte),e(cte,nWe),e(Bf,sWe),e(Bf,tS),e(tS,lWe),e(Bf,iWe),e(A,dWe),e(A,If),e(If,fte),e(fte,cWe),e(If,fWe),e(If,aS),e(aS,mWe),e(If,gWe),e(A,hWe),e(A,Nf),e(Nf,mte),e(mte,pWe),e(Nf,uWe),e(Nf,nS),e(nS,_We),e(Nf,bWe),e(A,vWe),e(A,qf),e(qf,gte),e(gte,FWe),e(qf,TWe),e(qf,sS),e(sS,MWe),e(qf,EWe),e(A,CWe),e(A,jf),e(jf,hte),e(hte,wWe),e(jf,AWe),e(jf,lS),e(lS,LWe),e(jf,yWe),e(A,xWe),e(A,Df),e(Df,pte),e(pte,$We),e(Df,kWe),e(Df,iS),e(iS,SWe),e(Df,RWe),e(A,PWe),e(A,Gf),e(Gf,ute),e(ute,BWe),e(Gf,IWe),e(Gf,dS),e(dS,NWe),e(Gf,qWe),e(A,jWe),e(A,Of),e(Of,_te),e(_te,DWe),e(Of,GWe),e(Of,cS),e(cS,OWe),e(Of,VWe),e(A,XWe),e(A,Vf),e(Vf,bte),e(bte,zWe),e(Vf,WWe),e(Vf,fS),e(fS,QWe),e(Vf,HWe),e(A,UWe),e(A,Xf),e(Xf,vte),e(vte,JWe),e(Xf,YWe),e(Xf,mS),e(mS,KWe),e(Xf,ZWe),e(A,eQe),e(A,zf),e(zf,Fte),e(Fte,oQe),e(zf,rQe),e(zf,gS),e(gS,tQe),e(zf,aQe),e(A,nQe),e(A,Wf),e(Wf,Tte),e(Tte,sQe),e(Wf,lQe),e(Wf,hS),e(hS,iQe),e(Wf,dQe),e(A,cQe),e(A,Qf),e(Qf,Mte),e(Mte,fQe),e(Qf,mQe),e(Qf,pS),e(pS,gQe),e(Qf,hQe),e(A,pQe),e(A,Hf),e(Hf,Ete),e(Ete,uQe),e(Hf,_Qe),e(Hf,uS),e(uS,bQe),e(Hf,vQe),e(A,FQe),e(A,Uf),e(Uf,Cte),e(Cte,TQe),e(Uf,MQe),e(Uf,_S),e(_S,EQe),e(Uf,CQe),e(A,wQe),e(A,Jf),e(Jf,wte),e(wte,AQe),e(Jf,LQe),e(Jf,bS),e(bS,yQe),e(Jf,xQe),e(A,$Qe),e(A,Yf),e(Yf,Ate),e(Ate,kQe),e(Yf,SQe),e(Yf,vS),e(vS,RQe),e(Yf,PQe),e(A,BQe),e(A,Kf),e(Kf,Lte),e(Lte,IQe),e(Kf,NQe),e(Kf,FS),e(FS,qQe),e(Kf,jQe),e(A,DQe),e(A,Zf),e(Zf,yte),e(yte,GQe),e(Zf,OQe),e(Zf,TS),e(TS,VQe),e(Zf,XQe),e(A,zQe),e(A,em),e(em,xte),e(xte,WQe),e(em,QQe),e(em,MS),e(MS,HQe),e(em,UQe),e(A,JQe),e(A,om),e(om,$te),e($te,YQe),e(om,KQe),e(om,ES),e(ES,ZQe),e(om,eHe),e(A,oHe),e(A,rm),e(rm,kte),e(kte,rHe),e(rm,tHe),e(rm,CS),e(CS,aHe),e(rm,nHe),e(A,sHe),e(A,tm),e(tm,Ste),e(Ste,lHe),e(tm,iHe),e(tm,wS),e(wS,dHe),e(tm,cHe),e(A,fHe),e(A,am),e(am,Rte),e(Rte,mHe),e(am,gHe),e(am,AS),e(AS,hHe),e(am,pHe),e(A,uHe),e(A,nm),e(nm,Pte),e(Pte,_He),e(nm,bHe),e(nm,LS),e(LS,vHe),e(nm,FHe),e(A,THe),e(A,sm),e(sm,Bte),e(Bte,MHe),e(sm,EHe),e(sm,yS),e(yS,CHe),e(sm,wHe),e(A,AHe),e(A,lm),e(lm,Ite),e(Ite,LHe),e(lm,yHe),e(lm,xS),e(xS,xHe),e(lm,$He),e(A,kHe),e(A,im),e(im,Nte),e(Nte,SHe),e(im,RHe),e(im,$S),e($S,PHe),e(im,BHe),e(A,IHe),e(A,dm),e(dm,qte),e(qte,NHe),e(dm,qHe),e(dm,kS),e(kS,jHe),e(dm,DHe),e(A,GHe),e(A,cm),e(cm,jte),e(jte,OHe),e(cm,VHe),e(cm,SS),e(SS,XHe),e(cm,zHe),e(A,WHe),e(A,fm),e(fm,Dte),e(Dte,QHe),e(fm,HHe),e(fm,RS),e(RS,UHe),e(fm,JHe),e(A,YHe),e(A,mm),e(mm,Gte),e(Gte,KHe),e(mm,ZHe),e(mm,PS),e(PS,eUe),e(mm,oUe),e(A,rUe),e(A,gm),e(gm,Ote),e(Ote,tUe),e(gm,aUe),e(gm,BS),e(BS,nUe),e(gm,sUe),e(A,lUe),e(A,hm),e(hm,Vte),e(Vte,iUe),e(hm,dUe),e(hm,IS),e(IS,cUe),e(hm,fUe),e(A,mUe),e(A,pm),e(pm,Xte),e(Xte,gUe),e(pm,hUe),e(pm,NS),e(NS,pUe),e(pm,uUe),e(A,_Ue),e(A,um),e(um,zte),e(zte,bUe),e(um,vUe),e(um,qS),e(qS,FUe),e(um,TUe),e(A,MUe),e(A,_m),e(_m,Wte),e(Wte,EUe),e(_m,CUe),e(_m,jS),e(jS,wUe),e(_m,AUe),e(A,LUe),e(A,bm),e(bm,Qte),e(Qte,yUe),e(bm,xUe),e(bm,DS),e(DS,$Ue),e(bm,kUe),e(A,SUe),e(A,vm),e(vm,Hte),e(Hte,RUe),e(vm,PUe),e(vm,GS),e(GS,BUe),e(vm,IUe),e(A,NUe),e(A,Fm),e(Fm,Ute),e(Ute,qUe),e(Fm,jUe),e(Fm,OS),e(OS,DUe),e(Fm,GUe),e(A,OUe),e(A,Tm),e(Tm,Jte),e(Jte,VUe),e(Tm,XUe),e(Tm,VS),e(VS,zUe),e(Tm,WUe),e(A,QUe),e(A,Mm),e(Mm,Yte),e(Yte,HUe),e(Mm,UUe),e(Mm,XS),e(XS,JUe),e(Mm,YUe),e(A,KUe),e(A,Em),e(Em,Kte),e(Kte,ZUe),e(Em,eJe),e(Em,zS),e(zS,oJe),e(Em,rJe),e(A,tJe),e(A,Cm),e(Cm,Zte),e(Zte,aJe),e(Cm,nJe),e(Cm,WS),e(WS,sJe),e(Cm,lJe),e(A,iJe),e(A,wm),e(wm,eae),e(eae,dJe),e(wm,cJe),e(wm,QS),e(QS,fJe),e(wm,mJe),e(A,gJe),e(A,Am),e(Am,oae),e(oae,hJe),e(Am,pJe),e(Am,HS),e(HS,uJe),e(Am,_Je),e(A,bJe),e(A,Lm),e(Lm,rae),e(rae,vJe),e(Lm,FJe),e(Lm,US),e(US,TJe),e(Lm,MJe),e(A,EJe),e(A,ym),e(ym,tae),e(tae,CJe),e(ym,wJe),e(ym,JS),e(JS,AJe),e(ym,LJe),e(A,yJe),e(A,xm),e(xm,aae),e(aae,xJe),e(xm,$Je),e(xm,YS),e(YS,kJe),e(xm,SJe),e(A,RJe),e(A,$m),e($m,nae),e(nae,PJe),e($m,BJe),e($m,KS),e(KS,IJe),e($m,NJe),e(A,qJe),e(A,km),e(km,sae),e(sae,jJe),e(km,DJe),e(km,ZS),e(ZS,GJe),e(km,OJe),e(A,VJe),e(A,Sm),e(Sm,lae),e(lae,XJe),e(Sm,zJe),e(Sm,eR),e(eR,WJe),e(Sm,QJe),e(A,HJe),e(A,Rm),e(Rm,iae),e(iae,UJe),e(Rm,JJe),e(Rm,oR),e(oR,YJe),e(Rm,KJe),e(A,ZJe),e(A,Pm),e(Pm,dae),e(dae,eYe),e(Pm,oYe),e(Pm,rR),e(rR,rYe),e(Pm,tYe),e(A,aYe),e(A,Bm),e(Bm,cae),e(cae,nYe),e(Bm,sYe),e(Bm,tR),e(tR,lYe),e(Bm,iYe),e(A,dYe),e(A,Im),e(Im,fae),e(fae,cYe),e(Im,fYe),e(Im,aR),e(aR,mYe),e(Im,gYe),e(A,hYe),e(A,Nm),e(Nm,mae),e(mae,pYe),e(Nm,uYe),e(Nm,nR),e(nR,_Ye),e(Nm,bYe),e(A,vYe),e(A,qm),e(qm,gae),e(gae,FYe),e(qm,TYe),e(qm,sR),e(sR,MYe),e(qm,EYe),e(A,CYe),e(A,jm),e(jm,hae),e(hae,wYe),e(jm,AYe),e(jm,lR),e(lR,LYe),e(jm,yYe),e(A,xYe),e(A,Dm),e(Dm,pae),e(pae,$Ye),e(Dm,kYe),e(Dm,iR),e(iR,SYe),e(Dm,RYe),e(A,PYe),e(A,Gm),e(Gm,uae),e(uae,BYe),e(Gm,IYe),e(Gm,dR),e(dR,NYe),e(Gm,qYe),e(A,jYe),e(A,Om),e(Om,_ae),e(_ae,DYe),e(Om,GYe),e(Om,cR),e(cR,OYe),e(Om,VYe),e(A,XYe),e(A,Vm),e(Vm,bae),e(bae,zYe),e(Vm,WYe),e(Vm,fR),e(fR,QYe),e(Vm,HYe),e(A,UYe),e(A,Xm),e(Xm,vae),e(vae,JYe),e(Xm,YYe),e(Xm,mR),e(mR,KYe),e(Xm,ZYe),e(A,eKe),e(A,zm),e(zm,Fae),e(Fae,oKe),e(zm,rKe),e(zm,gR),e(gR,tKe),e(zm,aKe),e(A,nKe),e(A,Wm),e(Wm,Tae),e(Tae,sKe),e(Wm,lKe),e(Wm,hR),e(hR,iKe),e(Wm,dKe),e(A,cKe),e(A,Qm),e(Qm,Mae),e(Mae,fKe),e(Qm,mKe),e(Qm,pR),e(pR,gKe),e(Qm,hKe),e(A,pKe),e(A,Hm),e(Hm,Eae),e(Eae,uKe),e(Hm,_Ke),e(Hm,uR),e(uR,bKe),e(Hm,vKe),e(A,FKe),e(A,Um),e(Um,Cae),e(Cae,TKe),e(Um,MKe),e(Um,_R),e(_R,EKe),e(Um,CKe),e(A,wKe),e(A,Jm),e(Jm,wae),e(wae,AKe),e(Jm,LKe),e(Jm,bR),e(bR,yKe),e(Jm,xKe),e(A,$Ke),e(A,Ym),e(Ym,Aae),e(Aae,kKe),e(Ym,SKe),e(Ym,vR),e(vR,RKe),e(Ym,PKe),e(A,BKe),e(A,Km),e(Km,Lae),e(Lae,IKe),e(Km,NKe),e(Km,FR),e(FR,qKe),e(Km,jKe),e(A,DKe),e(A,Zm),e(Zm,yae),e(yae,GKe),e(Zm,OKe),e(Zm,TR),e(TR,VKe),e(Zm,XKe),e(A,zKe),e(A,eg),e(eg,xae),e(xae,WKe),e(eg,QKe),e(eg,MR),e(MR,HKe),e(eg,UKe),e(A,JKe),e(A,og),e(og,$ae),e($ae,YKe),e(og,KKe),e(og,ER),e(ER,ZKe),e(og,eZe),e(A,oZe),e(A,rg),e(rg,kae),e(kae,rZe),e(rg,tZe),e(rg,CR),e(CR,aZe),e(rg,nZe),e(A,sZe),e(A,tg),e(tg,Sae),e(Sae,lZe),e(tg,iZe),e(tg,wR),e(wR,dZe),e(tg,cZe),e(A,fZe),e(A,ag),e(ag,Rae),e(Rae,mZe),e(ag,gZe),e(ag,AR),e(AR,hZe),e(ag,pZe),e(A,uZe),e(A,ng),e(ng,Pae),e(Pae,_Ze),e(ng,bZe),e(ng,LR),e(LR,vZe),e(ng,FZe),e(A,TZe),e(A,sg),e(sg,Bae),e(Bae,MZe),e(sg,EZe),e(sg,yR),e(yR,CZe),e(sg,wZe),e(A,AZe),e(A,lg),e(lg,Iae),e(Iae,LZe),e(lg,yZe),e(lg,xR),e(xR,xZe),e(lg,$Ze),e(A,kZe),e(A,ig),e(ig,Nae),e(Nae,SZe),e(ig,RZe),e(ig,$R),e($R,PZe),e(ig,BZe),e(A,IZe),e(A,dg),e(dg,qae),e(qae,NZe),e(dg,qZe),e(dg,kR),e(kR,jZe),e(dg,DZe),e(A,GZe),e(A,cg),e(cg,jae),e(jae,OZe),e(cg,VZe),e(cg,SR),e(SR,XZe),e(cg,zZe),e(A,WZe),e(A,fg),e(fg,Dae),e(Dae,QZe),e(fg,HZe),e(fg,RR),e(RR,UZe),e(fg,JZe),e(A,YZe),e(A,mg),e(mg,Gae),e(Gae,KZe),e(mg,ZZe),e(mg,PR),e(PR,eeo),e(mg,oeo),e(A,reo),e(A,gg),e(gg,Oae),e(Oae,teo),e(gg,aeo),e(gg,BR),e(BR,neo),e(gg,seo),e(A,leo),e(A,hg),e(hg,Vae),e(Vae,ieo),e(hg,deo),e(hg,IR),e(IR,ceo),e(hg,feo),e(A,meo),e(A,pg),e(pg,Xae),e(Xae,geo),e(pg,heo),e(pg,NR),e(NR,peo),e(pg,ueo),e(A,_eo),e(A,ug),e(ug,zae),e(zae,beo),e(ug,veo),e(ug,qR),e(qR,Feo),e(ug,Teo),e(A,Meo),e(A,_g),e(_g,Wae),e(Wae,Eeo),e(_g,Ceo),e(_g,jR),e(jR,weo),e(_g,Aeo),e(A,Leo),e(A,bg),e(bg,Qae),e(Qae,yeo),e(bg,xeo),e(bg,DR),e(DR,$eo),e(bg,keo),e(A,Seo),e(A,vg),e(vg,Hae),e(Hae,Reo),e(vg,Peo),e(vg,GR),e(GR,Beo),e(vg,Ieo),e(A,Neo),e(A,Fg),e(Fg,Uae),e(Uae,qeo),e(Fg,jeo),e(Fg,OR),e(OR,Deo),e(Fg,Geo),e(A,Oeo),e(A,Tg),e(Tg,Jae),e(Jae,Veo),e(Tg,Xeo),e(Tg,VR),e(VR,zeo),e(Tg,Weo),e(A,Qeo),e(A,Mg),e(Mg,Yae),e(Yae,Heo),e(Mg,Ueo),e(Mg,XR),e(XR,Jeo),e(Mg,Yeo),e(A,Keo),e(A,Eg),e(Eg,Kae),e(Kae,Zeo),e(Eg,eoo),e(Eg,zR),e(zR,ooo),e(Eg,roo),e(A,too),e(A,Cg),e(Cg,Zae),e(Zae,aoo),e(Cg,noo),e(Cg,WR),e(WR,soo),e(Cg,loo),e(A,ioo),e(A,wg),e(wg,ene),e(ene,doo),e(wg,coo),e(wg,QR),e(QR,foo),e(wg,moo),e(A,goo),e(A,Ag),e(Ag,one),e(one,hoo),e(Ag,poo),e(Ag,HR),e(HR,uoo),e(Ag,_oo),e(A,boo),e(A,Lg),e(Lg,rne),e(rne,voo),e(Lg,Foo),e(Lg,UR),e(UR,Too),e(Lg,Moo),e(A,Eoo),e(A,yg),e(yg,tne),e(tne,Coo),e(yg,woo),e(yg,JR),e(JR,Aoo),e(yg,Loo),e(A,yoo),e(A,xg),e(xg,ane),e(ane,xoo),e(xg,$oo),e(xg,YR),e(YR,koo),e(xg,Soo),e(A,Roo),e(A,$g),e($g,nne),e(nne,Poo),e($g,Boo),e($g,KR),e(KR,Ioo),e($g,Noo),e(A,qoo),e(A,kg),e(kg,sne),e(sne,joo),e(kg,Doo),e(kg,ZR),e(ZR,Goo),e(kg,Ooo),e(A,Voo),e(A,Sg),e(Sg,lne),e(lne,Xoo),e(Sg,zoo),e(Sg,eP),e(eP,Woo),e(Sg,Qoo),e(A,Hoo),e(A,Rg),e(Rg,ine),e(ine,Uoo),e(Rg,Joo),e(Rg,oP),e(oP,Yoo),e(Rg,Koo),e(A,Zoo),e(A,Pg),e(Pg,dne),e(dne,ero),e(Pg,oro),e(Pg,rP),e(rP,rro),e(Pg,tro),e(A,aro),e(A,Bg),e(Bg,cne),e(cne,nro),e(Bg,sro),e(Bg,tP),e(tP,lro),e(Bg,iro),e(A,dro),e(A,Ig),e(Ig,fne),e(fne,cro),e(Ig,fro),e(Ig,aP),e(aP,mro),e(Ig,gro),e(A,hro),e(A,Ng),e(Ng,mne),e(mne,pro),e(Ng,uro),e(Ng,nP),e(nP,_ro),e(Ng,bro),e(A,vro),e(A,qg),e(qg,gne),e(gne,Fro),e(qg,Tro),e(qg,sP),e(sP,Mro),e(qg,Ero),e(A,Cro),e(A,jg),e(jg,hne),e(hne,wro),e(jg,Aro),e(jg,lP),e(lP,Lro),e(jg,yro),e(A,xro),e(A,Dg),e(Dg,pne),e(pne,$ro),e(Dg,kro),e(Dg,iP),e(iP,Sro),e(Dg,Rro),e(wr,Pro),M(Gg,wr,null),e(wo,Bro),e(wo,Og),M($L,Og,null),e(Og,Iro),e(Og,une),e(une,Nro),b(f,MGe,_),b(f,ki,_),e(ki,Vg),e(Vg,_ne),M(kL,_ne,null),e(ki,qro),e(ki,bne),e(bne,jro),b(f,EGe,_),b(f,Ao,_),M(SL,Ao,null),e(Ao,Dro),e(Ao,RL),e(RL,Gro),e(RL,dP),e(dP,Oro),e(RL,Vro),e(Ao,Xro),e(Ao,PL),e(PL,zro),e(PL,vne),e(vne,Wro),e(PL,Qro),e(Ao,Hro),e(Ao,Ar),M(BL,Ar,null),e(Ar,Uro),e(Ar,Fne),e(Fne,Jro),e(Ar,Yro),e(Ar,$a),e($a,Kro),e($a,Tne),e(Tne,Zro),e($a,eto),e($a,Mne),e(Mne,oto),e($a,rto),e($a,Ene),e(Ene,tto),e($a,ato),e(Ar,nto),e(Ar,k),e(k,Nn),e(Nn,Cne),e(Cne,sto),e(Nn,lto),e(Nn,cP),e(cP,ito),e(Nn,dto),e(Nn,fP),e(fP,cto),e(Nn,fto),e(k,mto),e(k,qn),e(qn,wne),e(wne,gto),e(qn,hto),e(qn,mP),e(mP,pto),e(qn,uto),e(qn,gP),e(gP,_to),e(qn,bto),e(k,vto),e(k,jn),e(jn,Ane),e(Ane,Fto),e(jn,Tto),e(jn,hP),e(hP,Mto),e(jn,Eto),e(jn,pP),e(pP,Cto),e(jn,wto),e(k,Ato),e(k,Xg),e(Xg,Lne),e(Lne,Lto),e(Xg,yto),e(Xg,uP),e(uP,xto),e(Xg,$to),e(k,kto),e(k,Dn),e(Dn,yne),e(yne,Sto),e(Dn,Rto),e(Dn,_P),e(_P,Pto),e(Dn,Bto),e(Dn,bP),e(bP,Ito),e(Dn,Nto),e(k,qto),e(k,zg),e(zg,xne),e(xne,jto),e(zg,Dto),e(zg,vP),e(vP,Gto),e(zg,Oto),e(k,Vto),e(k,Wg),e(Wg,$ne),e($ne,Xto),e(Wg,zto),e(Wg,FP),e(FP,Wto),e(Wg,Qto),e(k,Hto),e(k,Qg),e(Qg,kne),e(kne,Uto),e(Qg,Jto),e(Qg,TP),e(TP,Yto),e(Qg,Kto),e(k,Zto),e(k,Gn),e(Gn,Sne),e(Sne,eao),e(Gn,oao),e(Gn,MP),e(MP,rao),e(Gn,tao),e(Gn,EP),e(EP,aao),e(Gn,nao),e(k,sao),e(k,On),e(On,Rne),e(Rne,lao),e(On,iao),e(On,CP),e(CP,dao),e(On,cao),e(On,wP),e(wP,fao),e(On,mao),e(k,gao),e(k,Vn),e(Vn,Pne),e(Pne,hao),e(Vn,pao),e(Vn,AP),e(AP,uao),e(Vn,_ao),e(Vn,LP),e(LP,bao),e(Vn,vao),e(k,Fao),e(k,Hg),e(Hg,Bne),e(Bne,Tao),e(Hg,Mao),e(Hg,yP),e(yP,Eao),e(Hg,Cao),e(k,wao),e(k,Ug),e(Ug,Ine),e(Ine,Aao),e(Ug,Lao),e(Ug,xP),e(xP,yao),e(Ug,xao),e(k,$ao),e(k,Jg),e(Jg,Nne),e(Nne,kao),e(Jg,Sao),e(Jg,$P),e($P,Rao),e(Jg,Pao),e(k,Bao),e(k,Xn),e(Xn,qne),e(qne,Iao),e(Xn,Nao),e(Xn,kP),e(kP,qao),e(Xn,jao),e(Xn,SP),e(SP,Dao),e(Xn,Gao),e(k,Oao),e(k,Yg),e(Yg,jne),e(jne,Vao),e(Yg,Xao),e(Yg,RP),e(RP,zao),e(Yg,Wao),e(k,Qao),e(k,zn),e(zn,Dne),e(Dne,Hao),e(zn,Uao),e(zn,PP),e(PP,Jao),e(zn,Yao),e(zn,BP),e(BP,Kao),e(zn,Zao),e(k,eno),e(k,Wn),e(Wn,Gne),e(Gne,ono),e(Wn,rno),e(Wn,IP),e(IP,tno),e(Wn,ano),e(Wn,NP),e(NP,nno),e(Wn,sno),e(k,lno),e(k,Qn),e(Qn,One),e(One,ino),e(Qn,dno),e(Qn,qP),e(qP,cno),e(Qn,fno),e(Qn,jP),e(jP,mno),e(Qn,gno),e(k,hno),e(k,Hn),e(Hn,Vne),e(Vne,pno),e(Hn,uno),e(Hn,DP),e(DP,_no),e(Hn,bno),e(Hn,GP),e(GP,vno),e(Hn,Fno),e(k,Tno),e(k,Kg),e(Kg,Xne),e(Xne,Mno),e(Kg,Eno),e(Kg,OP),e(OP,Cno),e(Kg,wno),e(k,Ano),e(k,Un),e(Un,zne),e(zne,Lno),e(Un,yno),e(Un,VP),e(VP,xno),e(Un,$no),e(Un,XP),e(XP,kno),e(Un,Sno),e(k,Rno),e(k,Jn),e(Jn,Wne),e(Wne,Pno),e(Jn,Bno),e(Jn,zP),e(zP,Ino),e(Jn,Nno),e(Jn,WP),e(WP,qno),e(Jn,jno),e(k,Dno),e(k,Yn),e(Yn,Qne),e(Qne,Gno),e(Yn,Ono),e(Yn,QP),e(QP,Vno),e(Yn,Xno),e(Yn,HP),e(HP,zno),e(Yn,Wno),e(k,Qno),e(k,Kn),e(Kn,Hne),e(Hne,Hno),e(Kn,Uno),e(Kn,UP),e(UP,Jno),e(Kn,Yno),e(Kn,JP),e(JP,Kno),e(Kn,Zno),e(k,eso),e(k,Zn),e(Zn,Une),e(Une,oso),e(Zn,rso),e(Zn,YP),e(YP,tso),e(Zn,aso),e(Zn,KP),e(KP,nso),e(Zn,sso),e(k,lso),e(k,es),e(es,Jne),e(Jne,iso),e(es,dso),e(es,ZP),e(ZP,cso),e(es,fso),e(es,eB),e(eB,mso),e(es,gso),e(k,hso),e(k,Zg),e(Zg,Yne),e(Yne,pso),e(Zg,uso),e(Zg,oB),e(oB,_so),e(Zg,bso),e(k,vso),e(k,os),e(os,Kne),e(Kne,Fso),e(os,Tso),e(os,rB),e(rB,Mso),e(os,Eso),e(os,tB),e(tB,Cso),e(os,wso),e(k,Aso),e(k,eh),e(eh,Zne),e(Zne,Lso),e(eh,yso),e(eh,aB),e(aB,xso),e(eh,$so),e(k,kso),e(k,rs),e(rs,ese),e(ese,Sso),e(rs,Rso),e(rs,nB),e(nB,Pso),e(rs,Bso),e(rs,sB),e(sB,Iso),e(rs,Nso),e(k,qso),e(k,ts),e(ts,ose),e(ose,jso),e(ts,Dso),e(ts,lB),e(lB,Gso),e(ts,Oso),e(ts,iB),e(iB,Vso),e(ts,Xso),e(k,zso),e(k,as),e(as,rse),e(rse,Wso),e(as,Qso),e(as,dB),e(dB,Hso),e(as,Uso),e(as,cB),e(cB,Jso),e(as,Yso),e(k,Kso),e(k,oh),e(oh,tse),e(tse,Zso),e(oh,elo),e(oh,fB),e(fB,olo),e(oh,rlo),e(k,tlo),e(k,ns),e(ns,ase),e(ase,alo),e(ns,nlo),e(ns,mB),e(mB,slo),e(ns,llo),e(ns,gB),e(gB,ilo),e(ns,dlo),e(k,clo),e(k,ss),e(ss,nse),e(nse,flo),e(ss,mlo),e(ss,hB),e(hB,glo),e(ss,hlo),e(ss,pB),e(pB,plo),e(ss,ulo),e(k,_lo),e(k,rh),e(rh,sse),e(sse,blo),e(rh,vlo),e(rh,uB),e(uB,Flo),e(rh,Tlo),e(k,Mlo),e(k,ls),e(ls,lse),e(lse,Elo),e(ls,Clo),e(ls,_B),e(_B,wlo),e(ls,Alo),e(ls,bB),e(bB,Llo),e(ls,ylo),e(k,xlo),e(k,is),e(is,ise),e(ise,$lo),e(is,klo),e(is,vB),e(vB,Slo),e(is,Rlo),e(is,FB),e(FB,Plo),e(is,Blo),e(k,Ilo),e(k,ds),e(ds,dse),e(dse,Nlo),e(ds,qlo),e(ds,TB),e(TB,jlo),e(ds,Dlo),e(ds,MB),e(MB,Glo),e(ds,Olo),e(k,Vlo),e(k,cs),e(cs,cse),e(cse,Xlo),e(cs,zlo),e(cs,EB),e(EB,Wlo),e(cs,Qlo),e(cs,CB),e(CB,Hlo),e(cs,Ulo),e(k,Jlo),e(k,fs),e(fs,fse),e(fse,Ylo),e(fs,Klo),e(fs,wB),e(wB,Zlo),e(fs,eio),e(fs,AB),e(AB,oio),e(fs,rio),e(k,tio),e(k,ms),e(ms,mse),e(mse,aio),e(ms,nio),e(ms,LB),e(LB,sio),e(ms,lio),e(ms,yB),e(yB,iio),e(ms,dio),e(k,cio),e(k,gs),e(gs,gse),e(gse,fio),e(gs,mio),e(gs,xB),e(xB,gio),e(gs,hio),e(gs,$B),e($B,pio),e(gs,uio),e(k,_io),e(k,hs),e(hs,hse),e(hse,bio),e(hs,vio),e(hs,kB),e(kB,Fio),e(hs,Tio),e(hs,SB),e(SB,Mio),e(hs,Eio),e(k,Cio),e(k,th),e(th,pse),e(pse,wio),e(th,Aio),e(th,RB),e(RB,Lio),e(th,yio),e(k,xio),e(k,ps),e(ps,use),e(use,$io),e(ps,kio),e(ps,PB),e(PB,Sio),e(ps,Rio),e(ps,BB),e(BB,Pio),e(ps,Bio),e(k,Iio),e(k,ah),e(ah,_se),e(_se,Nio),e(ah,qio),e(ah,IB),e(IB,jio),e(ah,Dio),e(k,Gio),e(k,nh),e(nh,bse),e(bse,Oio),e(nh,Vio),e(nh,NB),e(NB,Xio),e(nh,zio),e(k,Wio),e(k,us),e(us,vse),e(vse,Qio),e(us,Hio),e(us,qB),e(qB,Uio),e(us,Jio),e(us,jB),e(jB,Yio),e(us,Kio),e(k,Zio),e(k,_s),e(_s,Fse),e(Fse,edo),e(_s,odo),e(_s,DB),e(DB,rdo),e(_s,tdo),e(_s,GB),e(GB,ado),e(_s,ndo),e(k,sdo),e(k,bs),e(bs,Tse),e(Tse,ldo),e(bs,ido),e(bs,OB),e(OB,ddo),e(bs,cdo),e(bs,VB),e(VB,fdo),e(bs,mdo),e(k,gdo),e(k,sh),e(sh,Mse),e(Mse,hdo),e(sh,pdo),e(sh,XB),e(XB,udo),e(sh,_do),e(k,bdo),e(k,vs),e(vs,Ese),e(Ese,vdo),e(vs,Fdo),e(vs,zB),e(zB,Tdo),e(vs,Mdo),e(vs,WB),e(WB,Edo),e(vs,Cdo),e(k,wdo),e(k,Fs),e(Fs,Cse),e(Cse,Ado),e(Fs,Ldo),e(Fs,QB),e(QB,ydo),e(Fs,xdo),e(Fs,HB),e(HB,$do),e(Fs,kdo),e(k,Sdo),e(k,Ts),e(Ts,wse),e(wse,Rdo),e(Ts,Pdo),e(Ts,UB),e(UB,Bdo),e(Ts,Ido),e(Ts,JB),e(JB,Ndo),e(Ts,qdo),e(k,jdo),e(k,Ms),e(Ms,Ase),e(Ase,Ddo),e(Ms,Gdo),e(Ms,YB),e(YB,Odo),e(Ms,Vdo),e(Ms,KB),e(KB,Xdo),e(Ms,zdo),e(k,Wdo),e(k,Es),e(Es,Lse),e(Lse,Qdo),e(Es,Hdo),e(Es,ZB),e(ZB,Udo),e(Es,Jdo),e(Es,eI),e(eI,Ydo),e(Es,Kdo),e(k,Zdo),e(k,lh),e(lh,yse),e(yse,eco),e(lh,oco),e(lh,oI),e(oI,rco),e(lh,tco),e(k,aco),e(k,Cs),e(Cs,xse),e(xse,nco),e(Cs,sco),e(Cs,rI),e(rI,lco),e(Cs,ico),e(Cs,tI),e(tI,dco),e(Cs,cco),e(k,fco),e(k,ih),e(ih,$se),e($se,mco),e(ih,gco),e(ih,aI),e(aI,hco),e(ih,pco),e(k,uco),e(k,dh),e(dh,kse),e(kse,_co),e(dh,bco),e(dh,nI),e(nI,vco),e(dh,Fco),e(k,Tco),e(k,ch),e(ch,Sse),e(Sse,Mco),e(ch,Eco),e(ch,sI),e(sI,Cco),e(ch,wco),e(k,Aco),e(k,fh),e(fh,Rse),e(Rse,Lco),e(fh,yco),e(fh,lI),e(lI,xco),e(fh,$co),e(k,kco),e(k,ws),e(ws,Pse),e(Pse,Sco),e(ws,Rco),e(ws,iI),e(iI,Pco),e(ws,Bco),e(ws,dI),e(dI,Ico),e(ws,Nco),e(k,qco),e(k,mh),e(mh,Bse),e(Bse,jco),e(mh,Dco),e(mh,cI),e(cI,Gco),e(mh,Oco),e(k,Vco),e(k,As),e(As,Ise),e(Ise,Xco),e(As,zco),e(As,fI),e(fI,Wco),e(As,Qco),e(As,mI),e(mI,Hco),e(As,Uco),e(k,Jco),e(k,Ls),e(Ls,Nse),e(Nse,Yco),e(Ls,Kco),e(Ls,gI),e(gI,Zco),e(Ls,efo),e(Ls,hI),e(hI,ofo),e(Ls,rfo),e(k,tfo),e(k,ys),e(ys,qse),e(qse,afo),e(ys,nfo),e(ys,pI),e(pI,sfo),e(ys,lfo),e(ys,uI),e(uI,ifo),e(ys,dfo),e(k,cfo),e(k,xs),e(xs,jse),e(jse,ffo),e(xs,mfo),e(xs,_I),e(_I,gfo),e(xs,hfo),e(xs,bI),e(bI,pfo),e(xs,ufo),e(k,_fo),e(k,$s),e($s,Dse),e(Dse,bfo),e($s,vfo),e($s,vI),e(vI,Ffo),e($s,Tfo),e($s,FI),e(FI,Mfo),e($s,Efo),e(k,Cfo),e(k,ks),e(ks,Gse),e(Gse,wfo),e(ks,Afo),e(ks,TI),e(TI,Lfo),e(ks,yfo),e(ks,MI),e(MI,xfo),e(ks,$fo),e(k,kfo),e(k,gh),e(gh,Ose),e(Ose,Sfo),e(gh,Rfo),e(gh,EI),e(EI,Pfo),e(gh,Bfo),e(k,Ifo),e(k,hh),e(hh,Vse),e(Vse,Nfo),e(hh,qfo),e(hh,CI),e(CI,jfo),e(hh,Dfo),e(k,Gfo),e(k,Ss),e(Ss,Xse),e(Xse,Ofo),e(Ss,Vfo),e(Ss,wI),e(wI,Xfo),e(Ss,zfo),e(Ss,AI),e(AI,Wfo),e(Ss,Qfo),e(k,Hfo),e(k,Rs),e(Rs,zse),e(zse,Ufo),e(Rs,Jfo),e(Rs,LI),e(LI,Yfo),e(Rs,Kfo),e(Rs,yI),e(yI,Zfo),e(Rs,emo),e(k,omo),e(k,Ps),e(Ps,Wse),e(Wse,rmo),e(Ps,tmo),e(Ps,xI),e(xI,amo),e(Ps,nmo),e(Ps,$I),e($I,smo),e(Ps,lmo),e(k,imo),e(k,ph),e(ph,Qse),e(Qse,dmo),e(ph,cmo),e(ph,kI),e(kI,fmo),e(ph,mmo),e(k,gmo),e(k,uh),e(uh,Hse),e(Hse,hmo),e(uh,pmo),e(uh,SI),e(SI,umo),e(uh,_mo),e(k,bmo),e(k,_h),e(_h,Use),e(Use,vmo),e(_h,Fmo),e(_h,RI),e(RI,Tmo),e(_h,Mmo),e(k,Emo),e(k,Bs),e(Bs,Jse),e(Jse,Cmo),e(Bs,wmo),e(Bs,PI),e(PI,Amo),e(Bs,Lmo),e(Bs,BI),e(BI,ymo),e(Bs,xmo),e(k,$mo),e(k,Is),e(Is,Yse),e(Yse,kmo),e(Is,Smo),e(Is,II),e(II,Rmo),e(Is,Pmo),e(Is,NI),e(NI,Bmo),e(Is,Imo),e(k,Nmo),e(k,bh),e(bh,Kse),e(Kse,qmo),e(bh,jmo),e(bh,qI),e(qI,Dmo),e(bh,Gmo),e(k,Omo),e(k,vh),e(vh,Zse),e(Zse,Vmo),e(vh,Xmo),e(vh,jI),e(jI,zmo),e(vh,Wmo),e(k,Qmo),e(k,Fh),e(Fh,ele),e(ele,Hmo),e(Fh,Umo),e(Fh,DI),e(DI,Jmo),e(Fh,Ymo),e(k,Kmo),e(k,Ns),e(Ns,ole),e(ole,Zmo),e(Ns,ego),e(Ns,GI),e(GI,ogo),e(Ns,rgo),e(Ns,OI),e(OI,tgo),e(Ns,ago),e(k,ngo),e(k,Th),e(Th,rle),e(rle,sgo),e(Th,lgo),e(Th,VI),e(VI,igo),e(Th,dgo),e(k,cgo),e(k,Mh),e(Mh,tle),e(tle,fgo),e(Mh,mgo),e(Mh,XI),e(XI,ggo),e(Mh,hgo),e(k,pgo),e(k,qs),e(qs,ale),e(ale,ugo),e(qs,_go),e(qs,zI),e(zI,bgo),e(qs,vgo),e(qs,WI),e(WI,Fgo),e(qs,Tgo),e(k,Mgo),e(k,js),e(js,nle),e(nle,Ego),e(js,Cgo),e(js,QI),e(QI,wgo),e(js,Ago),e(js,HI),e(HI,Lgo),e(js,ygo),e(k,xgo),e(k,Ds),e(Ds,sle),e(sle,$go),e(Ds,kgo),e(Ds,UI),e(UI,Sgo),e(Ds,Rgo),e(Ds,JI),e(JI,Pgo),e(Ds,Bgo),e(k,Igo),e(k,Gs),e(Gs,lle),e(lle,Ngo),e(Gs,qgo),e(Gs,YI),e(YI,jgo),e(Gs,Dgo),e(Gs,KI),e(KI,Ggo),e(Gs,Ogo),e(Ar,Vgo),M(Eh,Ar,null),e(Ao,Xgo),e(Ao,Ch),M(IL,Ch,null),e(Ch,zgo),e(Ch,ile),e(ile,Wgo),b(f,CGe,_),b(f,Si,_),e(Si,wh),e(wh,dle),M(NL,dle,null),e(Si,Qgo),e(Si,cle),e(cle,Hgo),b(f,wGe,_),b(f,Lo,_),M(qL,Lo,null),e(Lo,Ugo),e(Lo,jL),e(jL,Jgo),e(jL,ZI),e(ZI,Ygo),e(jL,Kgo),e(Lo,Zgo),e(Lo,DL),e(DL,eho),e(DL,fle),e(fle,oho),e(DL,rho),e(Lo,tho),e(Lo,He),M(GL,He,null),e(He,aho),e(He,mle),e(mle,nho),e(He,sho),e(He,ka),e(ka,lho),e(ka,gle),e(gle,iho),e(ka,dho),e(ka,hle),e(hle,cho),e(ka,fho),e(ka,ple),e(ple,mho),e(ka,gho),e(He,hho),e(He,Y),e(Y,Ah),e(Ah,ule),e(ule,pho),e(Ah,uho),e(Ah,eN),e(eN,_ho),e(Ah,bho),e(Y,vho),e(Y,Lh),e(Lh,_le),e(_le,Fho),e(Lh,Tho),e(Lh,oN),e(oN,Mho),e(Lh,Eho),e(Y,Cho),e(Y,yh),e(yh,ble),e(ble,who),e(yh,Aho),e(yh,rN),e(rN,Lho),e(yh,yho),e(Y,xho),e(Y,xh),e(xh,vle),e(vle,$ho),e(xh,kho),e(xh,tN),e(tN,Sho),e(xh,Rho),e(Y,Pho),e(Y,$h),e($h,Fle),e(Fle,Bho),e($h,Iho),e($h,aN),e(aN,Nho),e($h,qho),e(Y,jho),e(Y,kh),e(kh,Tle),e(Tle,Dho),e(kh,Gho),e(kh,nN),e(nN,Oho),e(kh,Vho),e(Y,Xho),e(Y,Sh),e(Sh,Mle),e(Mle,zho),e(Sh,Who),e(Sh,sN),e(sN,Qho),e(Sh,Hho),e(Y,Uho),e(Y,Rh),e(Rh,Ele),e(Ele,Jho),e(Rh,Yho),e(Rh,lN),e(lN,Kho),e(Rh,Zho),e(Y,epo),e(Y,Ph),e(Ph,Cle),e(Cle,opo),e(Ph,rpo),e(Ph,iN),e(iN,tpo),e(Ph,apo),e(Y,npo),e(Y,Bh),e(Bh,wle),e(wle,spo),e(Bh,lpo),e(Bh,dN),e(dN,ipo),e(Bh,dpo),e(Y,cpo),e(Y,Ih),e(Ih,Ale),e(Ale,fpo),e(Ih,mpo),e(Ih,cN),e(cN,gpo),e(Ih,hpo),e(Y,ppo),e(Y,Nh),e(Nh,Lle),e(Lle,upo),e(Nh,_po),e(Nh,fN),e(fN,bpo),e(Nh,vpo),e(Y,Fpo),e(Y,qh),e(qh,yle),e(yle,Tpo),e(qh,Mpo),e(qh,mN),e(mN,Epo),e(qh,Cpo),e(Y,wpo),e(Y,jh),e(jh,xle),e(xle,Apo),e(jh,Lpo),e(jh,gN),e(gN,ypo),e(jh,xpo),e(Y,$po),e(Y,Dh),e(Dh,$le),e($le,kpo),e(Dh,Spo),e(Dh,hN),e(hN,Rpo),e(Dh,Ppo),e(Y,Bpo),e(Y,Gh),e(Gh,kle),e(kle,Ipo),e(Gh,Npo),e(Gh,pN),e(pN,qpo),e(Gh,jpo),e(Y,Dpo),e(Y,Oh),e(Oh,Sle),e(Sle,Gpo),e(Oh,Opo),e(Oh,uN),e(uN,Vpo),e(Oh,Xpo),e(Y,zpo),e(Y,Vh),e(Vh,Rle),e(Rle,Wpo),e(Vh,Qpo),e(Vh,_N),e(_N,Hpo),e(Vh,Upo),e(Y,Jpo),e(Y,Xh),e(Xh,Ple),e(Ple,Ypo),e(Xh,Kpo),e(Xh,bN),e(bN,Zpo),e(Xh,euo),e(Y,ouo),e(Y,zh),e(zh,Ble),e(Ble,ruo),e(zh,tuo),e(zh,vN),e(vN,auo),e(zh,nuo),e(Y,suo),e(Y,Wh),e(Wh,Ile),e(Ile,luo),e(Wh,iuo),e(Wh,FN),e(FN,duo),e(Wh,cuo),e(Y,fuo),e(Y,Qh),e(Qh,Nle),e(Nle,muo),e(Qh,guo),e(Qh,TN),e(TN,huo),e(Qh,puo),e(Y,uuo),e(Y,Hh),e(Hh,qle),e(qle,_uo),e(Hh,buo),e(Hh,MN),e(MN,vuo),e(Hh,Fuo),e(Y,Tuo),e(Y,Uh),e(Uh,jle),e(jle,Muo),e(Uh,Euo),e(Uh,EN),e(EN,Cuo),e(Uh,wuo),e(Y,Auo),e(Y,Jh),e(Jh,Dle),e(Dle,Luo),e(Jh,yuo),e(Jh,CN),e(CN,xuo),e(Jh,$uo),e(Y,kuo),e(Y,Yh),e(Yh,Gle),e(Gle,Suo),e(Yh,Ruo),e(Yh,wN),e(wN,Puo),e(Yh,Buo),e(Y,Iuo),e(Y,Kh),e(Kh,Ole),e(Ole,Nuo),e(Kh,quo),e(Kh,AN),e(AN,juo),e(Kh,Duo),e(Y,Guo),e(Y,Zh),e(Zh,Vle),e(Vle,Ouo),e(Zh,Vuo),e(Zh,LN),e(LN,Xuo),e(Zh,zuo),e(Y,Wuo),e(Y,ep),e(ep,Xle),e(Xle,Quo),e(ep,Huo),e(ep,yN),e(yN,Uuo),e(ep,Juo),e(Y,Yuo),e(Y,op),e(op,zle),e(zle,Kuo),e(op,Zuo),e(op,xN),e(xN,e_o),e(op,o_o),e(Y,r_o),e(Y,rp),e(rp,Wle),e(Wle,t_o),e(rp,a_o),e(rp,$N),e($N,n_o),e(rp,s_o),e(Y,l_o),e(Y,tp),e(tp,Qle),e(Qle,i_o),e(tp,d_o),e(tp,kN),e(kN,c_o),e(tp,f_o),e(He,m_o),M(ap,He,null),e(He,g_o),M(np,He,null),e(Lo,h_o),e(Lo,sp),M(OL,sp,null),e(sp,p_o),e(sp,Hle),e(Hle,u_o),b(f,AGe,_),b(f,Ri,_),e(Ri,lp),e(lp,Ule),M(VL,Ule,null),e(Ri,__o),e(Ri,Jle),e(Jle,b_o),b(f,LGe,_),b(f,yo,_),M(XL,yo,null),e(yo,v_o),e(yo,zL),e(zL,F_o),e(zL,SN),e(SN,T_o),e(zL,M_o),e(yo,E_o),e(yo,WL),e(WL,C_o),e(WL,Yle),e(Yle,w_o),e(WL,A_o),e(yo,L_o),e(yo,Ue),M(QL,Ue,null),e(Ue,y_o),e(Ue,Kle),e(Kle,x_o),e(Ue,$_o),e(Ue,Pi),e(Pi,k_o),e(Pi,Zle),e(Zle,S_o),e(Pi,R_o),e(Pi,eie),e(eie,P_o),e(Pi,B_o),e(Ue,I_o),e(Ue,he),e(he,ip),e(ip,oie),e(oie,N_o),e(ip,q_o),e(ip,RN),e(RN,j_o),e(ip,D_o),e(he,G_o),e(he,dp),e(dp,rie),e(rie,O_o),e(dp,V_o),e(dp,tie),e(tie,X_o),e(dp,z_o),e(he,W_o),e(he,cp),e(cp,aie),e(aie,Q_o),e(cp,H_o),e(cp,PN),e(PN,U_o),e(cp,J_o),e(he,Y_o),e(he,fp),e(fp,nie),e(nie,K_o),e(fp,Z_o),e(fp,BN),e(BN,e4o),e(fp,o4o),e(he,r4o),e(he,mp),e(mp,sie),e(sie,t4o),e(mp,a4o),e(mp,IN),e(IN,n4o),e(mp,s4o),e(he,l4o),e(he,gp),e(gp,lie),e(lie,i4o),e(gp,d4o),e(gp,NN),e(NN,c4o),e(gp,f4o),e(he,m4o),e(he,hp),e(hp,iie),e(iie,g4o),e(hp,h4o),e(hp,qN),e(qN,p4o),e(hp,u4o),e(he,_4o),e(he,pp),e(pp,die),e(die,b4o),e(pp,v4o),e(pp,jN),e(jN,F4o),e(pp,T4o),e(he,M4o),e(he,up),e(up,cie),e(cie,E4o),e(up,C4o),e(up,DN),e(DN,w4o),e(up,A4o),e(he,L4o),e(he,_p),e(_p,fie),e(fie,y4o),e(_p,x4o),e(_p,GN),e(GN,$4o),e(_p,k4o),e(he,S4o),e(he,bp),e(bp,mie),e(mie,R4o),e(bp,P4o),e(bp,ON),e(ON,B4o),e(bp,I4o),e(he,N4o),e(he,vp),e(vp,gie),e(gie,q4o),e(vp,j4o),e(vp,VN),e(VN,D4o),e(vp,G4o),e(he,O4o),e(he,Fp),e(Fp,hie),e(hie,V4o),e(Fp,X4o),e(Fp,XN),e(XN,z4o),e(Fp,W4o),e(he,Q4o),e(he,Tp),e(Tp,pie),e(pie,H4o),e(Tp,U4o),e(Tp,zN),e(zN,J4o),e(Tp,Y4o),e(he,K4o),e(he,Mp),e(Mp,uie),e(uie,Z4o),e(Mp,e1o),e(Mp,WN),e(WN,o1o),e(Mp,r1o),e(he,t1o),e(he,Ep),e(Ep,_ie),e(_ie,a1o),e(Ep,n1o),e(Ep,QN),e(QN,s1o),e(Ep,l1o),e(he,i1o),e(he,Cp),e(Cp,bie),e(bie,d1o),e(Cp,c1o),e(Cp,HN),e(HN,f1o),e(Cp,m1o),e(Ue,g1o),M(wp,Ue,null),e(Ue,h1o),M(Ap,Ue,null),e(yo,p1o),e(yo,Lp),M(HL,Lp,null),e(Lp,u1o),e(Lp,vie),e(vie,_1o),b(f,yGe,_),b(f,Bi,_),e(Bi,yp),e(yp,Fie),M(UL,Fie,null),e(Bi,b1o),e(Bi,Tie),e(Tie,v1o),b(f,xGe,_),b(f,xo,_),M(JL,xo,null),e(xo,F1o),e(xo,Ii),e(Ii,T1o),e(Ii,UN),e(UN,M1o),e(Ii,E1o),e(Ii,JN),e(JN,C1o),e(Ii,w1o),e(xo,A1o),e(xo,YL),e(YL,L1o),e(YL,Mie),e(Mie,y1o),e(YL,x1o),e(xo,$1o),e(xo,nt),M(KL,nt,null),e(nt,k1o),e(nt,Eie),e(Eie,S1o),e(nt,R1o),e(nt,Ni),e(Ni,P1o),e(Ni,Cie),e(Cie,B1o),e(Ni,I1o),e(Ni,YN),e(YN,N1o),e(Ni,q1o),e(nt,j1o),M(xp,nt,null),e(xo,D1o),e(xo,Je),M(ZL,Je,null),e(Je,G1o),e(Je,wie),e(wie,O1o),e(Je,V1o),e(Je,Sa),e(Sa,X1o),e(Sa,Aie),e(Aie,z1o),e(Sa,W1o),e(Sa,Lie),e(Lie,Q1o),e(Sa,H1o),e(Sa,yie),e(yie,U1o),e(Sa,J1o),e(Je,Y1o),e(Je,y),e(y,$p),e($p,xie),e(xie,K1o),e($p,Z1o),e($p,KN),e(KN,e2o),e($p,o2o),e(y,r2o),e(y,kp),e(kp,$ie),e($ie,t2o),e(kp,a2o),e(kp,ZN),e(ZN,n2o),e(kp,s2o),e(y,l2o),e(y,Sp),e(Sp,kie),e(kie,i2o),e(Sp,d2o),e(Sp,eq),e(eq,c2o),e(Sp,f2o),e(y,m2o),e(y,Rp),e(Rp,Sie),e(Sie,g2o),e(Rp,h2o),e(Rp,oq),e(oq,p2o),e(Rp,u2o),e(y,_2o),e(y,Pp),e(Pp,Rie),e(Rie,b2o),e(Pp,v2o),e(Pp,rq),e(rq,F2o),e(Pp,T2o),e(y,M2o),e(y,Bp),e(Bp,Pie),e(Pie,E2o),e(Bp,C2o),e(Bp,tq),e(tq,w2o),e(Bp,A2o),e(y,L2o),e(y,Ip),e(Ip,Bie),e(Bie,y2o),e(Ip,x2o),e(Ip,aq),e(aq,$2o),e(Ip,k2o),e(y,S2o),e(y,Np),e(Np,Iie),e(Iie,R2o),e(Np,P2o),e(Np,nq),e(nq,B2o),e(Np,I2o),e(y,N2o),e(y,qp),e(qp,Nie),e(Nie,q2o),e(qp,j2o),e(qp,sq),e(sq,D2o),e(qp,G2o),e(y,O2o),e(y,jp),e(jp,qie),e(qie,V2o),e(jp,X2o),e(jp,lq),e(lq,z2o),e(jp,W2o),e(y,Q2o),e(y,Dp),e(Dp,jie),e(jie,H2o),e(Dp,U2o),e(Dp,iq),e(iq,J2o),e(Dp,Y2o),e(y,K2o),e(y,Gp),e(Gp,Die),e(Die,Z2o),e(Gp,ebo),e(Gp,dq),e(dq,obo),e(Gp,rbo),e(y,tbo),e(y,Op),e(Op,Gie),e(Gie,abo),e(Op,nbo),e(Op,cq),e(cq,sbo),e(Op,lbo),e(y,ibo),e(y,Vp),e(Vp,Oie),e(Oie,dbo),e(Vp,cbo),e(Vp,fq),e(fq,fbo),e(Vp,mbo),e(y,gbo),e(y,Xp),e(Xp,Vie),e(Vie,hbo),e(Xp,pbo),e(Xp,mq),e(mq,ubo),e(Xp,_bo),e(y,bbo),e(y,zp),e(zp,Xie),e(Xie,vbo),e(zp,Fbo),e(zp,gq),e(gq,Tbo),e(zp,Mbo),e(y,Ebo),e(y,Wp),e(Wp,zie),e(zie,Cbo),e(Wp,wbo),e(Wp,hq),e(hq,Abo),e(Wp,Lbo),e(y,ybo),e(y,Qp),e(Qp,Wie),e(Wie,xbo),e(Qp,$bo),e(Qp,pq),e(pq,kbo),e(Qp,Sbo),e(y,Rbo),e(y,Hp),e(Hp,Qie),e(Qie,Pbo),e(Hp,Bbo),e(Hp,uq),e(uq,Ibo),e(Hp,Nbo),e(y,qbo),e(y,Up),e(Up,Hie),e(Hie,jbo),e(Up,Dbo),e(Up,_q),e(_q,Gbo),e(Up,Obo),e(y,Vbo),e(y,Jp),e(Jp,Uie),e(Uie,Xbo),e(Jp,zbo),e(Jp,bq),e(bq,Wbo),e(Jp,Qbo),e(y,Hbo),e(y,Yp),e(Yp,Jie),e(Jie,Ubo),e(Yp,Jbo),e(Yp,vq),e(vq,Ybo),e(Yp,Kbo),e(y,Zbo),e(y,Kp),e(Kp,Yie),e(Yie,evo),e(Kp,ovo),e(Kp,Fq),e(Fq,rvo),e(Kp,tvo),e(y,avo),e(y,Zp),e(Zp,Kie),e(Kie,nvo),e(Zp,svo),e(Zp,Tq),e(Tq,lvo),e(Zp,ivo),e(y,dvo),e(y,eu),e(eu,Zie),e(Zie,cvo),e(eu,fvo),e(eu,Mq),e(Mq,mvo),e(eu,gvo),e(y,hvo),e(y,ou),e(ou,ede),e(ede,pvo),e(ou,uvo),e(ou,Eq),e(Eq,_vo),e(ou,bvo),e(y,vvo),e(y,ru),e(ru,ode),e(ode,Fvo),e(ru,Tvo),e(ru,Cq),e(Cq,Mvo),e(ru,Evo),e(y,Cvo),e(y,tu),e(tu,rde),e(rde,wvo),e(tu,Avo),e(tu,wq),e(wq,Lvo),e(tu,yvo),e(y,xvo),e(y,au),e(au,tde),e(tde,$vo),e(au,kvo),e(au,Aq),e(Aq,Svo),e(au,Rvo),e(y,Pvo),e(y,nu),e(nu,ade),e(ade,Bvo),e(nu,Ivo),e(nu,Lq),e(Lq,Nvo),e(nu,qvo),e(y,jvo),e(y,su),e(su,nde),e(nde,Dvo),e(su,Gvo),e(su,yq),e(yq,Ovo),e(su,Vvo),e(y,Xvo),e(y,lu),e(lu,sde),e(sde,zvo),e(lu,Wvo),e(lu,xq),e(xq,Qvo),e(lu,Hvo),e(y,Uvo),e(y,iu),e(iu,lde),e(lde,Jvo),e(iu,Yvo),e(iu,$q),e($q,Kvo),e(iu,Zvo),e(y,e3o),e(y,du),e(du,ide),e(ide,o3o),e(du,r3o),e(du,kq),e(kq,t3o),e(du,a3o),e(y,n3o),e(y,Os),e(Os,dde),e(dde,s3o),e(Os,l3o),e(Os,Sq),e(Sq,i3o),e(Os,d3o),e(Os,Rq),e(Rq,c3o),e(Os,f3o),e(y,m3o),e(y,cu),e(cu,cde),e(cde,g3o),e(cu,h3o),e(cu,Pq),e(Pq,p3o),e(cu,u3o),e(y,_3o),e(y,fu),e(fu,fde),e(fde,b3o),e(fu,v3o),e(fu,Bq),e(Bq,F3o),e(fu,T3o),e(y,M3o),e(y,mu),e(mu,mde),e(mde,E3o),e(mu,C3o),e(mu,Iq),e(Iq,w3o),e(mu,A3o),e(y,L3o),e(y,gu),e(gu,gde),e(gde,y3o),e(gu,x3o),e(gu,Nq),e(Nq,$3o),e(gu,k3o),e(y,S3o),e(y,hu),e(hu,hde),e(hde,R3o),e(hu,P3o),e(hu,qq),e(qq,B3o),e(hu,I3o),e(y,N3o),e(y,pu),e(pu,pde),e(pde,q3o),e(pu,j3o),e(pu,jq),e(jq,D3o),e(pu,G3o),e(y,O3o),e(y,uu),e(uu,ude),e(ude,V3o),e(uu,X3o),e(uu,Dq),e(Dq,z3o),e(uu,W3o),e(y,Q3o),e(y,_u),e(_u,_de),e(_de,H3o),e(_u,U3o),e(_u,Gq),e(Gq,J3o),e(_u,Y3o),e(y,K3o),e(y,bu),e(bu,bde),e(bde,Z3o),e(bu,eFo),e(bu,Oq),e(Oq,oFo),e(bu,rFo),e(y,tFo),e(y,vu),e(vu,vde),e(vde,aFo),e(vu,nFo),e(vu,Vq),e(Vq,sFo),e(vu,lFo),e(y,iFo),e(y,Fu),e(Fu,Fde),e(Fde,dFo),e(Fu,cFo),e(Fu,Xq),e(Xq,fFo),e(Fu,mFo),e(y,gFo),e(y,Tu),e(Tu,Tde),e(Tde,hFo),e(Tu,pFo),e(Tu,zq),e(zq,uFo),e(Tu,_Fo),e(y,bFo),e(y,Mu),e(Mu,Mde),e(Mde,vFo),e(Mu,FFo),e(Mu,Wq),e(Wq,TFo),e(Mu,MFo),e(y,EFo),e(y,Eu),e(Eu,Ede),e(Ede,CFo),e(Eu,wFo),e(Eu,Qq),e(Qq,AFo),e(Eu,LFo),e(y,yFo),e(y,Cu),e(Cu,Cde),e(Cde,xFo),e(Cu,$Fo),e(Cu,Hq),e(Hq,kFo),e(Cu,SFo),e(y,RFo),e(y,wu),e(wu,wde),e(wde,PFo),e(wu,BFo),e(wu,Uq),e(Uq,IFo),e(wu,NFo),e(y,qFo),e(y,Au),e(Au,Ade),e(Ade,jFo),e(Au,DFo),e(Au,Jq),e(Jq,GFo),e(Au,OFo),e(y,VFo),e(y,Lu),e(Lu,Lde),e(Lde,XFo),e(Lu,zFo),e(Lu,Yq),e(Yq,WFo),e(Lu,QFo),e(y,HFo),e(y,yu),e(yu,yde),e(yde,UFo),e(yu,JFo),e(yu,Kq),e(Kq,YFo),e(yu,KFo),e(y,ZFo),e(y,xu),e(xu,xde),e(xde,eTo),e(xu,oTo),e(xu,Zq),e(Zq,rTo),e(xu,tTo),e(y,aTo),e(y,$u),e($u,$de),e($de,nTo),e($u,sTo),e($u,ej),e(ej,lTo),e($u,iTo),e(y,dTo),e(y,ku),e(ku,kde),e(kde,cTo),e(ku,fTo),e(ku,oj),e(oj,mTo),e(ku,gTo),e(y,hTo),e(y,Su),e(Su,Sde),e(Sde,pTo),e(Su,uTo),e(Su,rj),e(rj,_To),e(Su,bTo),e(y,vTo),e(y,Ru),e(Ru,Rde),e(Rde,FTo),e(Ru,TTo),e(Ru,tj),e(tj,MTo),e(Ru,ETo),e(y,CTo),e(y,Pu),e(Pu,Pde),e(Pde,wTo),e(Pu,ATo),e(Pu,aj),e(aj,LTo),e(Pu,yTo),e(y,xTo),e(y,Bu),e(Bu,Bde),e(Bde,$To),e(Bu,kTo),e(Bu,nj),e(nj,STo),e(Bu,RTo),e(y,PTo),e(y,Iu),e(Iu,Ide),e(Ide,BTo),e(Iu,ITo),e(Iu,sj),e(sj,NTo),e(Iu,qTo),e(y,jTo),e(y,Nu),e(Nu,Nde),e(Nde,DTo),e(Nu,GTo),e(Nu,lj),e(lj,OTo),e(Nu,VTo),e(y,XTo),e(y,qu),e(qu,qde),e(qde,zTo),e(qu,WTo),e(qu,ij),e(ij,QTo),e(qu,HTo),e(y,UTo),e(y,ju),e(ju,jde),e(jde,JTo),e(ju,YTo),e(ju,dj),e(dj,KTo),e(ju,ZTo),e(y,e7o),e(y,Du),e(Du,Dde),e(Dde,o7o),e(Du,r7o),e(Du,cj),e(cj,t7o),e(Du,a7o),e(y,n7o),e(y,Gu),e(Gu,Gde),e(Gde,s7o),e(Gu,l7o),e(Gu,fj),e(fj,i7o),e(Gu,d7o),e(y,c7o),e(y,Ou),e(Ou,Ode),e(Ode,f7o),e(Ou,m7o),e(Ou,mj),e(mj,g7o),e(Ou,h7o),e(y,p7o),e(y,Vu),e(Vu,Vde),e(Vde,u7o),e(Vu,_7o),e(Vu,gj),e(gj,b7o),e(Vu,v7o),e(y,F7o),e(y,Xu),e(Xu,Xde),e(Xde,T7o),e(Xu,M7o),e(Xu,hj),e(hj,E7o),e(Xu,C7o),e(y,w7o),e(y,zu),e(zu,zde),e(zde,A7o),e(zu,L7o),e(zu,pj),e(pj,y7o),e(zu,x7o),e(y,$7o),e(y,Wu),e(Wu,Wde),e(Wde,k7o),e(Wu,S7o),e(Wu,uj),e(uj,R7o),e(Wu,P7o),e(y,B7o),e(y,Qu),e(Qu,Qde),e(Qde,I7o),e(Qu,N7o),e(Qu,_j),e(_j,q7o),e(Qu,j7o),e(y,D7o),e(y,Hu),e(Hu,Hde),e(Hde,G7o),e(Hu,O7o),e(Hu,bj),e(bj,V7o),e(Hu,X7o),e(y,z7o),e(y,Uu),e(Uu,Ude),e(Ude,W7o),e(Uu,Q7o),e(Uu,vj),e(vj,H7o),e(Uu,U7o),e(y,J7o),e(y,Ju),e(Ju,Jde),e(Jde,Y7o),e(Ju,K7o),e(Ju,Fj),e(Fj,Z7o),e(Ju,eMo),e(y,oMo),e(y,Yu),e(Yu,Yde),e(Yde,rMo),e(Yu,tMo),e(Yu,Tj),e(Tj,aMo),e(Yu,nMo),e(y,sMo),e(y,Ku),e(Ku,Kde),e(Kde,lMo),e(Ku,iMo),e(Ku,Mj),e(Mj,dMo),e(Ku,cMo),e(y,fMo),e(y,Zu),e(Zu,Zde),e(Zde,mMo),e(Zu,gMo),e(Zu,Ej),e(Ej,hMo),e(Zu,pMo),e(y,uMo),e(y,e_),e(e_,ece),e(ece,_Mo),e(e_,bMo),e(e_,Cj),e(Cj,vMo),e(e_,FMo),e(y,TMo),e(y,o_),e(o_,oce),e(oce,MMo),e(o_,EMo),e(o_,wj),e(wj,CMo),e(o_,wMo),e(y,AMo),e(y,r_),e(r_,rce),e(rce,LMo),e(r_,yMo),e(r_,Aj),e(Aj,xMo),e(r_,$Mo),e(y,kMo),e(y,t_),e(t_,tce),e(tce,SMo),e(t_,RMo),e(t_,Lj),e(Lj,PMo),e(t_,BMo),e(y,IMo),e(y,a_),e(a_,ace),e(ace,NMo),e(a_,qMo),e(a_,yj),e(yj,jMo),e(a_,DMo),e(y,GMo),e(y,n_),e(n_,nce),e(nce,OMo),e(n_,VMo),e(n_,xj),e(xj,XMo),e(n_,zMo),e(y,WMo),e(y,s_),e(s_,sce),e(sce,QMo),e(s_,HMo),e(s_,$j),e($j,UMo),e(s_,JMo),e(y,YMo),e(y,l_),e(l_,lce),e(lce,KMo),e(l_,ZMo),e(l_,kj),e(kj,eEo),e(l_,oEo),e(y,rEo),e(y,i_),e(i_,ice),e(ice,tEo),e(i_,aEo),e(i_,Sj),e(Sj,nEo),e(i_,sEo),e(y,lEo),e(y,d_),e(d_,dce),e(dce,iEo),e(d_,dEo),e(d_,Rj),e(Rj,cEo),e(d_,fEo),e(y,mEo),e(y,c_),e(c_,cce),e(cce,gEo),e(c_,hEo),e(c_,Pj),e(Pj,pEo),e(c_,uEo),e(y,_Eo),e(y,f_),e(f_,fce),e(fce,bEo),e(f_,vEo),e(f_,Bj),e(Bj,FEo),e(f_,TEo),e(y,MEo),e(y,m_),e(m_,mce),e(mce,EEo),e(m_,CEo),e(m_,Ij),e(Ij,wEo),e(m_,AEo),e(y,LEo),e(y,g_),e(g_,gce),e(gce,yEo),e(g_,xEo),e(g_,Nj),e(Nj,$Eo),e(g_,kEo),e(y,SEo),e(y,h_),e(h_,hce),e(hce,REo),e(h_,PEo),e(h_,qj),e(qj,BEo),e(h_,IEo),e(y,NEo),e(y,p_),e(p_,pce),e(pce,qEo),e(p_,jEo),e(p_,jj),e(jj,DEo),e(p_,GEo),e(y,OEo),e(y,u_),e(u_,uce),e(uce,VEo),e(u_,XEo),e(u_,Dj),e(Dj,zEo),e(u_,WEo),e(y,QEo),e(y,__),e(__,_ce),e(_ce,HEo),e(__,UEo),e(__,Gj),e(Gj,JEo),e(__,YEo),e(y,KEo),e(y,b_),e(b_,bce),e(bce,ZEo),e(b_,eCo),e(b_,Oj),e(Oj,oCo),e(b_,rCo),e(y,tCo),e(y,v_),e(v_,vce),e(vce,aCo),e(v_,nCo),e(v_,Vj),e(Vj,sCo),e(v_,lCo),e(y,iCo),e(y,F_),e(F_,Fce),e(Fce,dCo),e(F_,cCo),e(F_,Xj),e(Xj,fCo),e(F_,mCo),e(y,gCo),e(y,T_),e(T_,Tce),e(Tce,hCo),e(T_,pCo),e(T_,zj),e(zj,uCo),e(T_,_Co),e(y,bCo),e(y,M_),e(M_,Mce),e(Mce,vCo),e(M_,FCo),e(M_,Wj),e(Wj,TCo),e(M_,MCo),e(y,ECo),e(y,E_),e(E_,Ece),e(Ece,CCo),e(E_,wCo),e(E_,Qj),e(Qj,ACo),e(E_,LCo),e(y,yCo),e(y,C_),e(C_,Cce),e(Cce,xCo),e(C_,$Co),e(C_,Hj),e(Hj,kCo),e(C_,SCo),e(y,RCo),e(y,w_),e(w_,wce),e(wce,PCo),e(w_,BCo),e(w_,Uj),e(Uj,ICo),e(w_,NCo),e(y,qCo),e(y,A_),e(A_,Ace),e(Ace,jCo),e(A_,DCo),e(A_,Jj),e(Jj,GCo),e(A_,OCo),e(y,VCo),e(y,L_),e(L_,Lce),e(Lce,XCo),e(L_,zCo),e(L_,Yj),e(Yj,WCo),e(L_,QCo),e(Je,HCo),e(Je,y_),e(y_,UCo),e(y_,yce),e(yce,JCo),e(y_,YCo),e(y_,xce),e(xce,KCo),e(Je,ZCo),M(x_,Je,null),b(f,$Ge,_),b(f,qi,_),e(qi,$_),e($_,$ce),M(ey,$ce,null),e(qi,e5o),e(qi,kce),e(kce,o5o),b(f,kGe,_),b(f,$o,_),M(oy,$o,null),e($o,r5o),e($o,ji),e(ji,t5o),e(ji,Kj),e(Kj,a5o),e(ji,n5o),e(ji,Zj),e(Zj,s5o),e(ji,l5o),e($o,i5o),e($o,ry),e(ry,d5o),e(ry,Sce),e(Sce,c5o),e(ry,f5o),e($o,m5o),e($o,st),M(ty,st,null),e(st,g5o),e(st,Rce),e(Rce,h5o),e(st,p5o),e(st,Di),e(Di,u5o),e(Di,Pce),e(Pce,_5o),e(Di,b5o),e(Di,eD),e(eD,v5o),e(Di,F5o),e(st,T5o),M(k_,st,null),e($o,M5o),e($o,Ye),M(ay,Ye,null),e(Ye,E5o),e(Ye,Bce),e(Bce,C5o),e(Ye,w5o),e(Ye,Ra),e(Ra,A5o),e(Ra,Ice),e(Ice,L5o),e(Ra,y5o),e(Ra,Nce),e(Nce,x5o),e(Ra,$5o),e(Ra,qce),e(qce,k5o),e(Ra,S5o),e(Ye,R5o),e(Ye,G),e(G,S_),e(S_,jce),e(jce,P5o),e(S_,B5o),e(S_,oD),e(oD,I5o),e(S_,N5o),e(G,q5o),e(G,R_),e(R_,Dce),e(Dce,j5o),e(R_,D5o),e(R_,rD),e(rD,G5o),e(R_,O5o),e(G,V5o),e(G,P_),e(P_,Gce),e(Gce,X5o),e(P_,z5o),e(P_,tD),e(tD,W5o),e(P_,Q5o),e(G,H5o),e(G,B_),e(B_,Oce),e(Oce,U5o),e(B_,J5o),e(B_,aD),e(aD,Y5o),e(B_,K5o),e(G,Z5o),e(G,I_),e(I_,Vce),e(Vce,e0o),e(I_,o0o),e(I_,nD),e(nD,r0o),e(I_,t0o),e(G,a0o),e(G,N_),e(N_,Xce),e(Xce,n0o),e(N_,s0o),e(N_,sD),e(sD,l0o),e(N_,i0o),e(G,d0o),e(G,q_),e(q_,zce),e(zce,c0o),e(q_,f0o),e(q_,lD),e(lD,m0o),e(q_,g0o),e(G,h0o),e(G,j_),e(j_,Wce),e(Wce,p0o),e(j_,u0o),e(j_,iD),e(iD,_0o),e(j_,b0o),e(G,v0o),e(G,D_),e(D_,Qce),e(Qce,F0o),e(D_,T0o),e(D_,dD),e(dD,M0o),e(D_,E0o),e(G,C0o),e(G,G_),e(G_,Hce),e(Hce,w0o),e(G_,A0o),e(G_,cD),e(cD,L0o),e(G_,y0o),e(G,x0o),e(G,O_),e(O_,Uce),e(Uce,$0o),e(O_,k0o),e(O_,fD),e(fD,S0o),e(O_,R0o),e(G,P0o),e(G,V_),e(V_,Jce),e(Jce,B0o),e(V_,I0o),e(V_,mD),e(mD,N0o),e(V_,q0o),e(G,j0o),e(G,X_),e(X_,Yce),e(Yce,D0o),e(X_,G0o),e(X_,gD),e(gD,O0o),e(X_,V0o),e(G,X0o),e(G,z_),e(z_,Kce),e(Kce,z0o),e(z_,W0o),e(z_,hD),e(hD,Q0o),e(z_,H0o),e(G,U0o),e(G,W_),e(W_,Zce),e(Zce,J0o),e(W_,Y0o),e(W_,pD),e(pD,K0o),e(W_,Z0o),e(G,ewo),e(G,Q_),e(Q_,efe),e(efe,owo),e(Q_,rwo),e(Q_,uD),e(uD,two),e(Q_,awo),e(G,nwo),e(G,H_),e(H_,ofe),e(ofe,swo),e(H_,lwo),e(H_,_D),e(_D,iwo),e(H_,dwo),e(G,cwo),e(G,U_),e(U_,rfe),e(rfe,fwo),e(U_,mwo),e(U_,bD),e(bD,gwo),e(U_,hwo),e(G,pwo),e(G,J_),e(J_,tfe),e(tfe,uwo),e(J_,_wo),e(J_,vD),e(vD,bwo),e(J_,vwo),e(G,Fwo),e(G,Y_),e(Y_,afe),e(afe,Two),e(Y_,Mwo),e(Y_,FD),e(FD,Ewo),e(Y_,Cwo),e(G,wwo),e(G,K_),e(K_,nfe),e(nfe,Awo),e(K_,Lwo),e(K_,TD),e(TD,ywo),e(K_,xwo),e(G,$wo),e(G,Z_),e(Z_,sfe),e(sfe,kwo),e(Z_,Swo),e(Z_,MD),e(MD,Rwo),e(Z_,Pwo),e(G,Bwo),e(G,e4),e(e4,lfe),e(lfe,Iwo),e(e4,Nwo),e(e4,ED),e(ED,qwo),e(e4,jwo),e(G,Dwo),e(G,o4),e(o4,ife),e(ife,Gwo),e(o4,Owo),e(o4,CD),e(CD,Vwo),e(o4,Xwo),e(G,zwo),e(G,r4),e(r4,dfe),e(dfe,Wwo),e(r4,Qwo),e(r4,wD),e(wD,Hwo),e(r4,Uwo),e(G,Jwo),e(G,t4),e(t4,cfe),e(cfe,Ywo),e(t4,Kwo),e(t4,AD),e(AD,Zwo),e(t4,eAo),e(G,oAo),e(G,a4),e(a4,ffe),e(ffe,rAo),e(a4,tAo),e(a4,LD),e(LD,aAo),e(a4,nAo),e(G,sAo),e(G,n4),e(n4,mfe),e(mfe,lAo),e(n4,iAo),e(n4,yD),e(yD,dAo),e(n4,cAo),e(G,fAo),e(G,s4),e(s4,gfe),e(gfe,mAo),e(s4,gAo),e(s4,xD),e(xD,hAo),e(s4,pAo),e(G,uAo),e(G,l4),e(l4,hfe),e(hfe,_Ao),e(l4,bAo),e(l4,$D),e($D,vAo),e(l4,FAo),e(G,TAo),e(G,i4),e(i4,pfe),e(pfe,MAo),e(i4,EAo),e(i4,kD),e(kD,CAo),e(i4,wAo),e(G,AAo),e(G,d4),e(d4,ufe),e(ufe,LAo),e(d4,yAo),e(d4,SD),e(SD,xAo),e(d4,$Ao),e(G,kAo),e(G,c4),e(c4,_fe),e(_fe,SAo),e(c4,RAo),e(c4,RD),e(RD,PAo),e(c4,BAo),e(G,IAo),e(G,f4),e(f4,bfe),e(bfe,NAo),e(f4,qAo),e(f4,PD),e(PD,jAo),e(f4,DAo),e(G,GAo),e(G,m4),e(m4,vfe),e(vfe,OAo),e(m4,VAo),e(m4,BD),e(BD,XAo),e(m4,zAo),e(G,WAo),e(G,g4),e(g4,Ffe),e(Ffe,QAo),e(g4,HAo),e(g4,ID),e(ID,UAo),e(g4,JAo),e(G,YAo),e(G,h4),e(h4,Tfe),e(Tfe,KAo),e(h4,ZAo),e(h4,ND),e(ND,e6o),e(h4,o6o),e(G,r6o),e(G,p4),e(p4,Mfe),e(Mfe,t6o),e(p4,a6o),e(p4,qD),e(qD,n6o),e(p4,s6o),e(G,l6o),e(G,u4),e(u4,Efe),e(Efe,i6o),e(u4,d6o),e(u4,jD),e(jD,c6o),e(u4,f6o),e(G,m6o),e(G,_4),e(_4,Cfe),e(Cfe,g6o),e(_4,h6o),e(_4,DD),e(DD,p6o),e(_4,u6o),e(G,_6o),e(G,b4),e(b4,wfe),e(wfe,b6o),e(b4,v6o),e(b4,GD),e(GD,F6o),e(b4,T6o),e(G,M6o),e(G,v4),e(v4,Afe),e(Afe,E6o),e(v4,C6o),e(v4,OD),e(OD,w6o),e(v4,A6o),e(G,L6o),e(G,F4),e(F4,Lfe),e(Lfe,y6o),e(F4,x6o),e(F4,VD),e(VD,$6o),e(F4,k6o),e(Ye,S6o),e(Ye,T4),e(T4,R6o),e(T4,yfe),e(yfe,P6o),e(T4,B6o),e(T4,xfe),e(xfe,I6o),e(Ye,N6o),M(M4,Ye,null),b(f,SGe,_),b(f,Gi,_),e(Gi,E4),e(E4,$fe),M(ny,$fe,null),e(Gi,q6o),e(Gi,kfe),e(kfe,j6o),b(f,RGe,_),b(f,ko,_),M(sy,ko,null),e(ko,D6o),e(ko,Oi),e(Oi,G6o),e(Oi,XD),e(XD,O6o),e(Oi,V6o),e(Oi,zD),e(zD,X6o),e(Oi,z6o),e(ko,W6o),e(ko,ly),e(ly,Q6o),e(ly,Sfe),e(Sfe,H6o),e(ly,U6o),e(ko,J6o),e(ko,lt),M(iy,lt,null),e(lt,Y6o),e(lt,Rfe),e(Rfe,K6o),e(lt,Z6o),e(lt,Vi),e(Vi,eLo),e(Vi,Pfe),e(Pfe,oLo),e(Vi,rLo),e(Vi,WD),e(WD,tLo),e(Vi,aLo),e(lt,nLo),M(C4,lt,null),e(ko,sLo),e(ko,Ke),M(dy,Ke,null),e(Ke,lLo),e(Ke,Bfe),e(Bfe,iLo),e(Ke,dLo),e(Ke,Pa),e(Pa,cLo),e(Pa,Ife),e(Ife,fLo),e(Pa,mLo),e(Pa,Nfe),e(Nfe,gLo),e(Pa,hLo),e(Pa,qfe),e(qfe,pLo),e(Pa,uLo),e(Ke,_Lo),e(Ke,X),e(X,w4),e(w4,jfe),e(jfe,bLo),e(w4,vLo),e(w4,QD),e(QD,FLo),e(w4,TLo),e(X,MLo),e(X,A4),e(A4,Dfe),e(Dfe,ELo),e(A4,CLo),e(A4,HD),e(HD,wLo),e(A4,ALo),e(X,LLo),e(X,L4),e(L4,Gfe),e(Gfe,yLo),e(L4,xLo),e(L4,UD),e(UD,$Lo),e(L4,kLo),e(X,SLo),e(X,y4),e(y4,Ofe),e(Ofe,RLo),e(y4,PLo),e(y4,JD),e(JD,BLo),e(y4,ILo),e(X,NLo),e(X,x4),e(x4,Vfe),e(Vfe,qLo),e(x4,jLo),e(x4,YD),e(YD,DLo),e(x4,GLo),e(X,OLo),e(X,$4),e($4,Xfe),e(Xfe,VLo),e($4,XLo),e($4,KD),e(KD,zLo),e($4,WLo),e(X,QLo),e(X,k4),e(k4,zfe),e(zfe,HLo),e(k4,ULo),e(k4,ZD),e(ZD,JLo),e(k4,YLo),e(X,KLo),e(X,S4),e(S4,Wfe),e(Wfe,ZLo),e(S4,eyo),e(S4,eG),e(eG,oyo),e(S4,ryo),e(X,tyo),e(X,R4),e(R4,Qfe),e(Qfe,ayo),e(R4,nyo),e(R4,oG),e(oG,syo),e(R4,lyo),e(X,iyo),e(X,P4),e(P4,Hfe),e(Hfe,dyo),e(P4,cyo),e(P4,rG),e(rG,fyo),e(P4,myo),e(X,gyo),e(X,B4),e(B4,Ufe),e(Ufe,hyo),e(B4,pyo),e(B4,tG),e(tG,uyo),e(B4,_yo),e(X,byo),e(X,I4),e(I4,Jfe),e(Jfe,vyo),e(I4,Fyo),e(I4,aG),e(aG,Tyo),e(I4,Myo),e(X,Eyo),e(X,N4),e(N4,Yfe),e(Yfe,Cyo),e(N4,wyo),e(N4,nG),e(nG,Ayo),e(N4,Lyo),e(X,yyo),e(X,q4),e(q4,Kfe),e(Kfe,xyo),e(q4,$yo),e(q4,sG),e(sG,kyo),e(q4,Syo),e(X,Ryo),e(X,j4),e(j4,Zfe),e(Zfe,Pyo),e(j4,Byo),e(j4,lG),e(lG,Iyo),e(j4,Nyo),e(X,qyo),e(X,D4),e(D4,eme),e(eme,jyo),e(D4,Dyo),e(D4,iG),e(iG,Gyo),e(D4,Oyo),e(X,Vyo),e(X,G4),e(G4,ome),e(ome,Xyo),e(G4,zyo),e(G4,dG),e(dG,Wyo),e(G4,Qyo),e(X,Hyo),e(X,O4),e(O4,rme),e(rme,Uyo),e(O4,Jyo),e(O4,cG),e(cG,Yyo),e(O4,Kyo),e(X,Zyo),e(X,V4),e(V4,tme),e(tme,e8o),e(V4,o8o),e(V4,fG),e(fG,r8o),e(V4,t8o),e(X,a8o),e(X,X4),e(X4,ame),e(ame,n8o),e(X4,s8o),e(X4,mG),e(mG,l8o),e(X4,i8o),e(X,d8o),e(X,z4),e(z4,nme),e(nme,c8o),e(z4,f8o),e(z4,gG),e(gG,m8o),e(z4,g8o),e(X,h8o),e(X,W4),e(W4,sme),e(sme,p8o),e(W4,u8o),e(W4,hG),e(hG,_8o),e(W4,b8o),e(X,v8o),e(X,Q4),e(Q4,lme),e(lme,F8o),e(Q4,T8o),e(Q4,pG),e(pG,M8o),e(Q4,E8o),e(X,C8o),e(X,H4),e(H4,ime),e(ime,w8o),e(H4,A8o),e(H4,uG),e(uG,L8o),e(H4,y8o),e(X,x8o),e(X,U4),e(U4,dme),e(dme,$8o),e(U4,k8o),e(U4,_G),e(_G,S8o),e(U4,R8o),e(X,P8o),e(X,J4),e(J4,cme),e(cme,B8o),e(J4,I8o),e(J4,bG),e(bG,N8o),e(J4,q8o),e(X,j8o),e(X,Y4),e(Y4,fme),e(fme,D8o),e(Y4,G8o),e(Y4,vG),e(vG,O8o),e(Y4,V8o),e(X,X8o),e(X,K4),e(K4,mme),e(mme,z8o),e(K4,W8o),e(K4,FG),e(FG,Q8o),e(K4,H8o),e(X,U8o),e(X,Z4),e(Z4,gme),e(gme,J8o),e(Z4,Y8o),e(Z4,TG),e(TG,K8o),e(Z4,Z8o),e(X,e9o),e(X,e1),e(e1,hme),e(hme,o9o),e(e1,r9o),e(e1,MG),e(MG,t9o),e(e1,a9o),e(X,n9o),e(X,o1),e(o1,pme),e(pme,s9o),e(o1,l9o),e(o1,EG),e(EG,i9o),e(o1,d9o),e(X,c9o),e(X,r1),e(r1,ume),e(ume,f9o),e(r1,m9o),e(r1,CG),e(CG,g9o),e(r1,h9o),e(X,p9o),e(X,t1),e(t1,_me),e(_me,u9o),e(t1,_9o),e(t1,wG),e(wG,b9o),e(t1,v9o),e(X,F9o),e(X,a1),e(a1,bme),e(bme,T9o),e(a1,M9o),e(a1,AG),e(AG,E9o),e(a1,C9o),e(X,w9o),e(X,n1),e(n1,vme),e(vme,A9o),e(n1,L9o),e(n1,LG),e(LG,y9o),e(n1,x9o),e(X,$9o),e(X,s1),e(s1,Fme),e(Fme,k9o),e(s1,S9o),e(s1,yG),e(yG,R9o),e(s1,P9o),e(X,B9o),e(X,l1),e(l1,Tme),e(Tme,I9o),e(l1,N9o),e(l1,xG),e(xG,q9o),e(l1,j9o),e(X,D9o),e(X,i1),e(i1,Mme),e(Mme,G9o),e(i1,O9o),e(i1,$G),e($G,V9o),e(i1,X9o),e(X,z9o),e(X,d1),e(d1,Eme),e(Eme,W9o),e(d1,Q9o),e(d1,kG),e(kG,H9o),e(d1,U9o),e(Ke,J9o),e(Ke,c1),e(c1,Y9o),e(c1,Cme),e(Cme,K9o),e(c1,Z9o),e(c1,wme),e(wme,exo),e(Ke,oxo),M(f1,Ke,null),b(f,PGe,_),b(f,Xi,_),e(Xi,m1),e(m1,Ame),M(cy,Ame,null),e(Xi,rxo),e(Xi,Lme),e(Lme,txo),b(f,BGe,_),b(f,So,_),M(fy,So,null),e(So,axo),e(So,zi),e(zi,nxo),e(zi,SG),e(SG,sxo),e(zi,lxo),e(zi,RG),e(RG,ixo),e(zi,dxo),e(So,cxo),e(So,my),e(my,fxo),e(my,yme),e(yme,mxo),e(my,gxo),e(So,hxo),e(So,it),M(gy,it,null),e(it,pxo),e(it,xme),e(xme,uxo),e(it,_xo),e(it,Wi),e(Wi,bxo),e(Wi,$me),e($me,vxo),e(Wi,Fxo),e(Wi,PG),e(PG,Txo),e(Wi,Mxo),e(it,Exo),M(g1,it,null),e(So,Cxo),e(So,Ze),M(hy,Ze,null),e(Ze,wxo),e(Ze,kme),e(kme,Axo),e(Ze,Lxo),e(Ze,Ba),e(Ba,yxo),e(Ba,Sme),e(Sme,xxo),e(Ba,$xo),e(Ba,Rme),e(Rme,kxo),e(Ba,Sxo),e(Ba,Pme),e(Pme,Rxo),e(Ba,Pxo),e(Ze,Bxo),e(Ze,Q),e(Q,h1),e(h1,Bme),e(Bme,Ixo),e(h1,Nxo),e(h1,BG),e(BG,qxo),e(h1,jxo),e(Q,Dxo),e(Q,p1),e(p1,Ime),e(Ime,Gxo),e(p1,Oxo),e(p1,IG),e(IG,Vxo),e(p1,Xxo),e(Q,zxo),e(Q,u1),e(u1,Nme),e(Nme,Wxo),e(u1,Qxo),e(u1,NG),e(NG,Hxo),e(u1,Uxo),e(Q,Jxo),e(Q,_1),e(_1,qme),e(qme,Yxo),e(_1,Kxo),e(_1,qG),e(qG,Zxo),e(_1,e$o),e(Q,o$o),e(Q,b1),e(b1,jme),e(jme,r$o),e(b1,t$o),e(b1,jG),e(jG,a$o),e(b1,n$o),e(Q,s$o),e(Q,v1),e(v1,Dme),e(Dme,l$o),e(v1,i$o),e(v1,DG),e(DG,d$o),e(v1,c$o),e(Q,f$o),e(Q,F1),e(F1,Gme),e(Gme,m$o),e(F1,g$o),e(F1,GG),e(GG,h$o),e(F1,p$o),e(Q,u$o),e(Q,T1),e(T1,Ome),e(Ome,_$o),e(T1,b$o),e(T1,OG),e(OG,v$o),e(T1,F$o),e(Q,T$o),e(Q,M1),e(M1,Vme),e(Vme,M$o),e(M1,E$o),e(M1,VG),e(VG,C$o),e(M1,w$o),e(Q,A$o),e(Q,E1),e(E1,Xme),e(Xme,L$o),e(E1,y$o),e(E1,XG),e(XG,x$o),e(E1,$$o),e(Q,k$o),e(Q,C1),e(C1,zme),e(zme,S$o),e(C1,R$o),e(C1,zG),e(zG,P$o),e(C1,B$o),e(Q,I$o),e(Q,w1),e(w1,Wme),e(Wme,N$o),e(w1,q$o),e(w1,WG),e(WG,j$o),e(w1,D$o),e(Q,G$o),e(Q,A1),e(A1,Qme),e(Qme,O$o),e(A1,V$o),e(A1,QG),e(QG,X$o),e(A1,z$o),e(Q,W$o),e(Q,L1),e(L1,Hme),e(Hme,Q$o),e(L1,H$o),e(L1,HG),e(HG,U$o),e(L1,J$o),e(Q,Y$o),e(Q,y1),e(y1,Ume),e(Ume,K$o),e(y1,Z$o),e(y1,UG),e(UG,eko),e(y1,oko),e(Q,rko),e(Q,x1),e(x1,Jme),e(Jme,tko),e(x1,ako),e(x1,JG),e(JG,nko),e(x1,sko),e(Q,lko),e(Q,$1),e($1,Yme),e(Yme,iko),e($1,dko),e($1,YG),e(YG,cko),e($1,fko),e(Q,mko),e(Q,k1),e(k1,Kme),e(Kme,gko),e(k1,hko),e(k1,KG),e(KG,pko),e(k1,uko),e(Q,_ko),e(Q,S1),e(S1,Zme),e(Zme,bko),e(S1,vko),e(S1,ZG),e(ZG,Fko),e(S1,Tko),e(Q,Mko),e(Q,R1),e(R1,ege),e(ege,Eko),e(R1,Cko),e(R1,eO),e(eO,wko),e(R1,Ako),e(Q,Lko),e(Q,P1),e(P1,oge),e(oge,yko),e(P1,xko),e(P1,oO),e(oO,$ko),e(P1,kko),e(Q,Sko),e(Q,B1),e(B1,rge),e(rge,Rko),e(B1,Pko),e(B1,rO),e(rO,Bko),e(B1,Iko),e(Q,Nko),e(Q,I1),e(I1,tge),e(tge,qko),e(I1,jko),e(I1,tO),e(tO,Dko),e(I1,Gko),e(Q,Oko),e(Q,N1),e(N1,age),e(age,Vko),e(N1,Xko),e(N1,aO),e(aO,zko),e(N1,Wko),e(Q,Qko),e(Q,q1),e(q1,nge),e(nge,Hko),e(q1,Uko),e(q1,nO),e(nO,Jko),e(q1,Yko),e(Q,Kko),e(Q,j1),e(j1,sge),e(sge,Zko),e(j1,eSo),e(j1,sO),e(sO,oSo),e(j1,rSo),e(Q,tSo),e(Q,D1),e(D1,lge),e(lge,aSo),e(D1,nSo),e(D1,lO),e(lO,sSo),e(D1,lSo),e(Q,iSo),e(Q,G1),e(G1,ige),e(ige,dSo),e(G1,cSo),e(G1,iO),e(iO,fSo),e(G1,mSo),e(Q,gSo),e(Q,O1),e(O1,dge),e(dge,hSo),e(O1,pSo),e(O1,dO),e(dO,uSo),e(O1,_So),e(Q,bSo),e(Q,V1),e(V1,cge),e(cge,vSo),e(V1,FSo),e(V1,cO),e(cO,TSo),e(V1,MSo),e(Q,ESo),e(Q,X1),e(X1,fge),e(fge,CSo),e(X1,wSo),e(X1,fO),e(fO,ASo),e(X1,LSo),e(Q,ySo),e(Q,z1),e(z1,mge),e(mge,xSo),e(z1,$So),e(z1,gge),e(gge,kSo),e(z1,SSo),e(Q,RSo),e(Q,W1),e(W1,hge),e(hge,PSo),e(W1,BSo),e(W1,mO),e(mO,ISo),e(W1,NSo),e(Q,qSo),e(Q,Q1),e(Q1,pge),e(pge,jSo),e(Q1,DSo),e(Q1,gO),e(gO,GSo),e(Q1,OSo),e(Q,VSo),e(Q,H1),e(H1,uge),e(uge,XSo),e(H1,zSo),e(H1,hO),e(hO,WSo),e(H1,QSo),e(Q,HSo),e(Q,U1),e(U1,_ge),e(_ge,USo),e(U1,JSo),e(U1,pO),e(pO,YSo),e(U1,KSo),e(Ze,ZSo),e(Ze,J1),e(J1,eRo),e(J1,bge),e(bge,oRo),e(J1,rRo),e(J1,vge),e(vge,tRo),e(Ze,aRo),M(Y1,Ze,null),b(f,IGe,_),b(f,Qi,_),e(Qi,K1),e(K1,Fge),M(py,Fge,null),e(Qi,nRo),e(Qi,Tge),e(Tge,sRo),b(f,NGe,_),b(f,Ro,_),M(uy,Ro,null),e(Ro,lRo),e(Ro,Hi),e(Hi,iRo),e(Hi,uO),e(uO,dRo),e(Hi,cRo),e(Hi,_O),e(_O,fRo),e(Hi,mRo),e(Ro,gRo),e(Ro,_y),e(_y,hRo),e(_y,Mge),e(Mge,pRo),e(_y,uRo),e(Ro,_Ro),e(Ro,dt),M(by,dt,null),e(dt,bRo),e(dt,Ege),e(Ege,vRo),e(dt,FRo),e(dt,Ui),e(Ui,TRo),e(Ui,Cge),e(Cge,MRo),e(Ui,ERo),e(Ui,bO),e(bO,CRo),e(Ui,wRo),e(dt,ARo),M(Z1,dt,null),e(Ro,LRo),e(Ro,eo),M(vy,eo,null),e(eo,yRo),e(eo,wge),e(wge,xRo),e(eo,$Ro),e(eo,Ia),e(Ia,kRo),e(Ia,Age),e(Age,SRo),e(Ia,RRo),e(Ia,Lge),e(Lge,PRo),e(Ia,BRo),e(Ia,yge),e(yge,IRo),e(Ia,NRo),e(eo,qRo),e(eo,pe),e(pe,e2),e(e2,xge),e(xge,jRo),e(e2,DRo),e(e2,vO),e(vO,GRo),e(e2,ORo),e(pe,VRo),e(pe,o2),e(o2,$ge),e($ge,XRo),e(o2,zRo),e(o2,FO),e(FO,WRo),e(o2,QRo),e(pe,HRo),e(pe,r2),e(r2,kge),e(kge,URo),e(r2,JRo),e(r2,TO),e(TO,YRo),e(r2,KRo),e(pe,ZRo),e(pe,t2),e(t2,Sge),e(Sge,ePo),e(t2,oPo),e(t2,MO),e(MO,rPo),e(t2,tPo),e(pe,aPo),e(pe,a2),e(a2,Rge),e(Rge,nPo),e(a2,sPo),e(a2,EO),e(EO,lPo),e(a2,iPo),e(pe,dPo),e(pe,n2),e(n2,Pge),e(Pge,cPo),e(n2,fPo),e(n2,CO),e(CO,mPo),e(n2,gPo),e(pe,hPo),e(pe,s2),e(s2,Bge),e(Bge,pPo),e(s2,uPo),e(s2,wO),e(wO,_Po),e(s2,bPo),e(pe,vPo),e(pe,l2),e(l2,Ige),e(Ige,FPo),e(l2,TPo),e(l2,AO),e(AO,MPo),e(l2,EPo),e(pe,CPo),e(pe,i2),e(i2,Nge),e(Nge,wPo),e(i2,APo),e(i2,LO),e(LO,LPo),e(i2,yPo),e(pe,xPo),e(pe,d2),e(d2,qge),e(qge,$Po),e(d2,kPo),e(d2,yO),e(yO,SPo),e(d2,RPo),e(pe,PPo),e(pe,c2),e(c2,jge),e(jge,BPo),e(c2,IPo),e(c2,xO),e(xO,NPo),e(c2,qPo),e(pe,jPo),e(pe,f2),e(f2,Dge),e(Dge,DPo),e(f2,GPo),e(f2,$O),e($O,OPo),e(f2,VPo),e(pe,XPo),e(pe,m2),e(m2,Gge),e(Gge,zPo),e(m2,WPo),e(m2,kO),e(kO,QPo),e(m2,HPo),e(pe,UPo),e(pe,g2),e(g2,Oge),e(Oge,JPo),e(g2,YPo),e(g2,SO),e(SO,KPo),e(g2,ZPo),e(pe,eBo),e(pe,h2),e(h2,Vge),e(Vge,oBo),e(h2,rBo),e(h2,RO),e(RO,tBo),e(h2,aBo),e(pe,nBo),e(pe,p2),e(p2,Xge),e(Xge,sBo),e(p2,lBo),e(p2,PO),e(PO,iBo),e(p2,dBo),e(pe,cBo),e(pe,u2),e(u2,zge),e(zge,fBo),e(u2,mBo),e(u2,BO),e(BO,gBo),e(u2,hBo),e(eo,pBo),e(eo,_2),e(_2,uBo),e(_2,Wge),e(Wge,_Bo),e(_2,bBo),e(_2,Qge),e(Qge,vBo),e(eo,FBo),M(b2,eo,null),b(f,qGe,_),b(f,Ji,_),e(Ji,v2),e(v2,Hge),M(Fy,Hge,null),e(Ji,TBo),e(Ji,Uge),e(Uge,MBo),b(f,jGe,_),b(f,Po,_),M(Ty,Po,null),e(Po,EBo),e(Po,Yi),e(Yi,CBo),e(Yi,IO),e(IO,wBo),e(Yi,ABo),e(Yi,NO),e(NO,LBo),e(Yi,yBo),e(Po,xBo),e(Po,My),e(My,$Bo),e(My,Jge),e(Jge,kBo),e(My,SBo),e(Po,RBo),e(Po,ct),M(Ey,ct,null),e(ct,PBo),e(ct,Yge),e(Yge,BBo),e(ct,IBo),e(ct,Ki),e(Ki,NBo),e(Ki,Kge),e(Kge,qBo),e(Ki,jBo),e(Ki,qO),e(qO,DBo),e(Ki,GBo),e(ct,OBo),M(F2,ct,null),e(Po,VBo),e(Po,oo),M(Cy,oo,null),e(oo,XBo),e(oo,Zge),e(Zge,zBo),e(oo,WBo),e(oo,Na),e(Na,QBo),e(Na,ehe),e(ehe,HBo),e(Na,UBo),e(Na,ohe),e(ohe,JBo),e(Na,YBo),e(Na,rhe),e(rhe,KBo),e(Na,ZBo),e(oo,eIo),e(oo,N),e(N,T2),e(T2,the),e(the,oIo),e(T2,rIo),e(T2,jO),e(jO,tIo),e(T2,aIo),e(N,nIo),e(N,M2),e(M2,ahe),e(ahe,sIo),e(M2,lIo),e(M2,DO),e(DO,iIo),e(M2,dIo),e(N,cIo),e(N,E2),e(E2,nhe),e(nhe,fIo),e(E2,mIo),e(E2,GO),e(GO,gIo),e(E2,hIo),e(N,pIo),e(N,C2),e(C2,she),e(she,uIo),e(C2,_Io),e(C2,OO),e(OO,bIo),e(C2,vIo),e(N,FIo),e(N,w2),e(w2,lhe),e(lhe,TIo),e(w2,MIo),e(w2,VO),e(VO,EIo),e(w2,CIo),e(N,wIo),e(N,A2),e(A2,ihe),e(ihe,AIo),e(A2,LIo),e(A2,XO),e(XO,yIo),e(A2,xIo),e(N,$Io),e(N,L2),e(L2,dhe),e(dhe,kIo),e(L2,SIo),e(L2,zO),e(zO,RIo),e(L2,PIo),e(N,BIo),e(N,y2),e(y2,che),e(che,IIo),e(y2,NIo),e(y2,WO),e(WO,qIo),e(y2,jIo),e(N,DIo),e(N,x2),e(x2,fhe),e(fhe,GIo),e(x2,OIo),e(x2,QO),e(QO,VIo),e(x2,XIo),e(N,zIo),e(N,$2),e($2,mhe),e(mhe,WIo),e($2,QIo),e($2,HO),e(HO,HIo),e($2,UIo),e(N,JIo),e(N,k2),e(k2,ghe),e(ghe,YIo),e(k2,KIo),e(k2,UO),e(UO,ZIo),e(k2,eNo),e(N,oNo),e(N,S2),e(S2,hhe),e(hhe,rNo),e(S2,tNo),e(S2,JO),e(JO,aNo),e(S2,nNo),e(N,sNo),e(N,R2),e(R2,phe),e(phe,lNo),e(R2,iNo),e(R2,YO),e(YO,dNo),e(R2,cNo),e(N,fNo),e(N,P2),e(P2,uhe),e(uhe,mNo),e(P2,gNo),e(P2,KO),e(KO,hNo),e(P2,pNo),e(N,uNo),e(N,B2),e(B2,_he),e(_he,_No),e(B2,bNo),e(B2,ZO),e(ZO,vNo),e(B2,FNo),e(N,TNo),e(N,I2),e(I2,bhe),e(bhe,MNo),e(I2,ENo),e(I2,eV),e(eV,CNo),e(I2,wNo),e(N,ANo),e(N,N2),e(N2,vhe),e(vhe,LNo),e(N2,yNo),e(N2,oV),e(oV,xNo),e(N2,$No),e(N,kNo),e(N,q2),e(q2,Fhe),e(Fhe,SNo),e(q2,RNo),e(q2,rV),e(rV,PNo),e(q2,BNo),e(N,INo),e(N,j2),e(j2,The),e(The,NNo),e(j2,qNo),e(j2,tV),e(tV,jNo),e(j2,DNo),e(N,GNo),e(N,D2),e(D2,Mhe),e(Mhe,ONo),e(D2,VNo),e(D2,aV),e(aV,XNo),e(D2,zNo),e(N,WNo),e(N,G2),e(G2,Ehe),e(Ehe,QNo),e(G2,HNo),e(G2,nV),e(nV,UNo),e(G2,JNo),e(N,YNo),e(N,O2),e(O2,Che),e(Che,KNo),e(O2,ZNo),e(O2,sV),e(sV,eqo),e(O2,oqo),e(N,rqo),e(N,V2),e(V2,whe),e(whe,tqo),e(V2,aqo),e(V2,lV),e(lV,nqo),e(V2,sqo),e(N,lqo),e(N,X2),e(X2,Ahe),e(Ahe,iqo),e(X2,dqo),e(X2,iV),e(iV,cqo),e(X2,fqo),e(N,mqo),e(N,z2),e(z2,Lhe),e(Lhe,gqo),e(z2,hqo),e(z2,dV),e(dV,pqo),e(z2,uqo),e(N,_qo),e(N,W2),e(W2,yhe),e(yhe,bqo),e(W2,vqo),e(W2,cV),e(cV,Fqo),e(W2,Tqo),e(N,Mqo),e(N,Q2),e(Q2,xhe),e(xhe,Eqo),e(Q2,Cqo),e(Q2,fV),e(fV,wqo),e(Q2,Aqo),e(N,Lqo),e(N,H2),e(H2,$he),e($he,yqo),e(H2,xqo),e(H2,mV),e(mV,$qo),e(H2,kqo),e(N,Sqo),e(N,U2),e(U2,khe),e(khe,Rqo),e(U2,Pqo),e(U2,gV),e(gV,Bqo),e(U2,Iqo),e(N,Nqo),e(N,J2),e(J2,She),e(She,qqo),e(J2,jqo),e(J2,hV),e(hV,Dqo),e(J2,Gqo),e(N,Oqo),e(N,Y2),e(Y2,Rhe),e(Rhe,Vqo),e(Y2,Xqo),e(Y2,pV),e(pV,zqo),e(Y2,Wqo),e(N,Qqo),e(N,K2),e(K2,Phe),e(Phe,Hqo),e(K2,Uqo),e(K2,uV),e(uV,Jqo),e(K2,Yqo),e(N,Kqo),e(N,Z2),e(Z2,Bhe),e(Bhe,Zqo),e(Z2,ejo),e(Z2,_V),e(_V,ojo),e(Z2,rjo),e(N,tjo),e(N,eb),e(eb,Ihe),e(Ihe,ajo),e(eb,njo),e(eb,bV),e(bV,sjo),e(eb,ljo),e(N,ijo),e(N,ob),e(ob,Nhe),e(Nhe,djo),e(ob,cjo),e(ob,vV),e(vV,fjo),e(ob,mjo),e(N,gjo),e(N,rb),e(rb,qhe),e(qhe,hjo),e(rb,pjo),e(rb,FV),e(FV,ujo),e(rb,_jo),e(N,bjo),e(N,tb),e(tb,jhe),e(jhe,vjo),e(tb,Fjo),e(tb,TV),e(TV,Tjo),e(tb,Mjo),e(N,Ejo),e(N,ab),e(ab,Dhe),e(Dhe,Cjo),e(ab,wjo),e(ab,MV),e(MV,Ajo),e(ab,Ljo),e(N,yjo),e(N,nb),e(nb,Ghe),e(Ghe,xjo),e(nb,$jo),e(nb,EV),e(EV,kjo),e(nb,Sjo),e(N,Rjo),e(N,sb),e(sb,Ohe),e(Ohe,Pjo),e(sb,Bjo),e(sb,CV),e(CV,Ijo),e(sb,Njo),e(N,qjo),e(N,lb),e(lb,Vhe),e(Vhe,jjo),e(lb,Djo),e(lb,wV),e(wV,Gjo),e(lb,Ojo),e(N,Vjo),e(N,ib),e(ib,Xhe),e(Xhe,Xjo),e(ib,zjo),e(ib,AV),e(AV,Wjo),e(ib,Qjo),e(N,Hjo),e(N,db),e(db,zhe),e(zhe,Ujo),e(db,Jjo),e(db,LV),e(LV,Yjo),e(db,Kjo),e(N,Zjo),e(N,cb),e(cb,Whe),e(Whe,eDo),e(cb,oDo),e(cb,yV),e(yV,rDo),e(cb,tDo),e(N,aDo),e(N,fb),e(fb,Qhe),e(Qhe,nDo),e(fb,sDo),e(fb,xV),e(xV,lDo),e(fb,iDo),e(N,dDo),e(N,mb),e(mb,Hhe),e(Hhe,cDo),e(mb,fDo),e(mb,$V),e($V,mDo),e(mb,gDo),e(N,hDo),e(N,gb),e(gb,Uhe),e(Uhe,pDo),e(gb,uDo),e(gb,kV),e(kV,_Do),e(gb,bDo),e(N,vDo),e(N,hb),e(hb,Jhe),e(Jhe,FDo),e(hb,TDo),e(hb,SV),e(SV,MDo),e(hb,EDo),e(oo,CDo),e(oo,pb),e(pb,wDo),e(pb,Yhe),e(Yhe,ADo),e(pb,LDo),e(pb,Khe),e(Khe,yDo),e(oo,xDo),M(ub,oo,null),b(f,DGe,_),b(f,Zi,_),e(Zi,_b),e(_b,Zhe),M(wy,Zhe,null),e(Zi,$Do),e(Zi,epe),e(epe,kDo),b(f,GGe,_),b(f,Bo,_),M(Ay,Bo,null),e(Bo,SDo),e(Bo,ed),e(ed,RDo),e(ed,RV),e(RV,PDo),e(ed,BDo),e(ed,PV),e(PV,IDo),e(ed,NDo),e(Bo,qDo),e(Bo,Ly),e(Ly,jDo),e(Ly,ope),e(ope,DDo),e(Ly,GDo),e(Bo,ODo),e(Bo,ft),M(yy,ft,null),e(ft,VDo),e(ft,rpe),e(rpe,XDo),e(ft,zDo),e(ft,od),e(od,WDo),e(od,tpe),e(tpe,QDo),e(od,HDo),e(od,BV),e(BV,UDo),e(od,JDo),e(ft,YDo),M(bb,ft,null),e(Bo,KDo),e(Bo,ro),M(xy,ro,null),e(ro,ZDo),e(ro,ape),e(ape,eGo),e(ro,oGo),e(ro,qa),e(qa,rGo),e(qa,npe),e(npe,tGo),e(qa,aGo),e(qa,spe),e(spe,nGo),e(qa,sGo),e(qa,lpe),e(lpe,lGo),e(qa,iGo),e(ro,dGo),e(ro,Z),e(Z,vb),e(vb,ipe),e(ipe,cGo),e(vb,fGo),e(vb,IV),e(IV,mGo),e(vb,gGo),e(Z,hGo),e(Z,Fb),e(Fb,dpe),e(dpe,pGo),e(Fb,uGo),e(Fb,NV),e(NV,_Go),e(Fb,bGo),e(Z,vGo),e(Z,Tb),e(Tb,cpe),e(cpe,FGo),e(Tb,TGo),e(Tb,qV),e(qV,MGo),e(Tb,EGo),e(Z,CGo),e(Z,Mb),e(Mb,fpe),e(fpe,wGo),e(Mb,AGo),e(Mb,jV),e(jV,LGo),e(Mb,yGo),e(Z,xGo),e(Z,Eb),e(Eb,mpe),e(mpe,$Go),e(Eb,kGo),e(Eb,DV),e(DV,SGo),e(Eb,RGo),e(Z,PGo),e(Z,Cb),e(Cb,gpe),e(gpe,BGo),e(Cb,IGo),e(Cb,GV),e(GV,NGo),e(Cb,qGo),e(Z,jGo),e(Z,wb),e(wb,hpe),e(hpe,DGo),e(wb,GGo),e(wb,OV),e(OV,OGo),e(wb,VGo),e(Z,XGo),e(Z,Ab),e(Ab,ppe),e(ppe,zGo),e(Ab,WGo),e(Ab,VV),e(VV,QGo),e(Ab,HGo),e(Z,UGo),e(Z,Lb),e(Lb,upe),e(upe,JGo),e(Lb,YGo),e(Lb,XV),e(XV,KGo),e(Lb,ZGo),e(Z,eOo),e(Z,yb),e(yb,_pe),e(_pe,oOo),e(yb,rOo),e(yb,zV),e(zV,tOo),e(yb,aOo),e(Z,nOo),e(Z,xb),e(xb,bpe),e(bpe,sOo),e(xb,lOo),e(xb,WV),e(WV,iOo),e(xb,dOo),e(Z,cOo),e(Z,$b),e($b,vpe),e(vpe,fOo),e($b,mOo),e($b,QV),e(QV,gOo),e($b,hOo),e(Z,pOo),e(Z,kb),e(kb,Fpe),e(Fpe,uOo),e(kb,_Oo),e(kb,HV),e(HV,bOo),e(kb,vOo),e(Z,FOo),e(Z,Sb),e(Sb,Tpe),e(Tpe,TOo),e(Sb,MOo),e(Sb,UV),e(UV,EOo),e(Sb,COo),e(Z,wOo),e(Z,Rb),e(Rb,Mpe),e(Mpe,AOo),e(Rb,LOo),e(Rb,JV),e(JV,yOo),e(Rb,xOo),e(Z,$Oo),e(Z,Pb),e(Pb,Epe),e(Epe,kOo),e(Pb,SOo),e(Pb,YV),e(YV,ROo),e(Pb,POo),e(Z,BOo),e(Z,Bb),e(Bb,Cpe),e(Cpe,IOo),e(Bb,NOo),e(Bb,KV),e(KV,qOo),e(Bb,jOo),e(Z,DOo),e(Z,Ib),e(Ib,wpe),e(wpe,GOo),e(Ib,OOo),e(Ib,ZV),e(ZV,VOo),e(Ib,XOo),e(Z,zOo),e(Z,Nb),e(Nb,Ape),e(Ape,WOo),e(Nb,QOo),e(Nb,eX),e(eX,HOo),e(Nb,UOo),e(Z,JOo),e(Z,qb),e(qb,Lpe),e(Lpe,YOo),e(qb,KOo),e(qb,oX),e(oX,ZOo),e(qb,eVo),e(Z,oVo),e(Z,jb),e(jb,ype),e(ype,rVo),e(jb,tVo),e(jb,rX),e(rX,aVo),e(jb,nVo),e(Z,sVo),e(Z,Db),e(Db,xpe),e(xpe,lVo),e(Db,iVo),e(Db,tX),e(tX,dVo),e(Db,cVo),e(Z,fVo),e(Z,Gb),e(Gb,$pe),e($pe,mVo),e(Gb,gVo),e(Gb,aX),e(aX,hVo),e(Gb,pVo),e(Z,uVo),e(Z,Ob),e(Ob,kpe),e(kpe,_Vo),e(Ob,bVo),e(Ob,nX),e(nX,vVo),e(Ob,FVo),e(Z,TVo),e(Z,Vb),e(Vb,Spe),e(Spe,MVo),e(Vb,EVo),e(Vb,sX),e(sX,CVo),e(Vb,wVo),e(Z,AVo),e(Z,Xb),e(Xb,Rpe),e(Rpe,LVo),e(Xb,yVo),e(Xb,lX),e(lX,xVo),e(Xb,$Vo),e(Z,kVo),e(Z,zb),e(zb,Ppe),e(Ppe,SVo),e(zb,RVo),e(zb,iX),e(iX,PVo),e(zb,BVo),e(Z,IVo),e(Z,Wb),e(Wb,Bpe),e(Bpe,NVo),e(Wb,qVo),e(Wb,dX),e(dX,jVo),e(Wb,DVo),e(Z,GVo),e(Z,Qb),e(Qb,Ipe),e(Ipe,OVo),e(Qb,VVo),e(Qb,cX),e(cX,XVo),e(Qb,zVo),e(ro,WVo),e(ro,Hb),e(Hb,QVo),e(Hb,Npe),e(Npe,HVo),e(Hb,UVo),e(Hb,qpe),e(qpe,JVo),e(ro,YVo),M(Ub,ro,null),b(f,OGe,_),b(f,rd,_),e(rd,Jb),e(Jb,jpe),M($y,jpe,null),e(rd,KVo),e(rd,Dpe),e(Dpe,ZVo),b(f,VGe,_),b(f,Io,_),M(ky,Io,null),e(Io,eXo),e(Io,td),e(td,oXo),e(td,fX),e(fX,rXo),e(td,tXo),e(td,mX),e(mX,aXo),e(td,nXo),e(Io,sXo),e(Io,Sy),e(Sy,lXo),e(Sy,Gpe),e(Gpe,iXo),e(Sy,dXo),e(Io,cXo),e(Io,mt),M(Ry,mt,null),e(mt,fXo),e(mt,Ope),e(Ope,mXo),e(mt,gXo),e(mt,ad),e(ad,hXo),e(ad,Vpe),e(Vpe,pXo),e(ad,uXo),e(ad,gX),e(gX,_Xo),e(ad,bXo),e(mt,vXo),M(Yb,mt,null),e(Io,FXo),e(Io,to),M(Py,to,null),e(to,TXo),e(to,Xpe),e(Xpe,MXo),e(to,EXo),e(to,ja),e(ja,CXo),e(ja,zpe),e(zpe,wXo),e(ja,AXo),e(ja,Wpe),e(Wpe,LXo),e(ja,yXo),e(ja,Qpe),e(Qpe,xXo),e(ja,$Xo),e(to,kXo),e(to,Zr),e(Zr,Kb),e(Kb,Hpe),e(Hpe,SXo),e(Kb,RXo),e(Kb,hX),e(hX,PXo),e(Kb,BXo),e(Zr,IXo),e(Zr,Zb),e(Zb,Upe),e(Upe,NXo),e(Zb,qXo),e(Zb,pX),e(pX,jXo),e(Zb,DXo),e(Zr,GXo),e(Zr,ev),e(ev,Jpe),e(Jpe,OXo),e(ev,VXo),e(ev,uX),e(uX,XXo),e(ev,zXo),e(Zr,WXo),e(Zr,ov),e(ov,Ype),e(Ype,QXo),e(ov,HXo),e(ov,_X),e(_X,UXo),e(ov,JXo),e(Zr,YXo),e(Zr,rv),e(rv,Kpe),e(Kpe,KXo),e(rv,ZXo),e(rv,bX),e(bX,ezo),e(rv,ozo),e(to,rzo),e(to,tv),e(tv,tzo),e(tv,Zpe),e(Zpe,azo),e(tv,nzo),e(tv,eue),e(eue,szo),e(to,lzo),M(av,to,null),b(f,XGe,_),b(f,nd,_),e(nd,nv),e(nv,oue),M(By,oue,null),e(nd,izo),e(nd,rue),e(rue,dzo),b(f,zGe,_),b(f,No,_),M(Iy,No,null),e(No,czo),e(No,sd),e(sd,fzo),e(sd,vX),e(vX,mzo),e(sd,gzo),e(sd,FX),e(FX,hzo),e(sd,pzo),e(No,uzo),e(No,Ny),e(Ny,_zo),e(Ny,tue),e(tue,bzo),e(Ny,vzo),e(No,Fzo),e(No,gt),M(qy,gt,null),e(gt,Tzo),e(gt,aue),e(aue,Mzo),e(gt,Ezo),e(gt,ld),e(ld,Czo),e(ld,nue),e(nue,wzo),e(ld,Azo),e(ld,TX),e(TX,Lzo),e(ld,yzo),e(gt,xzo),M(sv,gt,null),e(No,$zo),e(No,ao),M(jy,ao,null),e(ao,kzo),e(ao,sue),e(sue,Szo),e(ao,Rzo),e(ao,Da),e(Da,Pzo),e(Da,lue),e(lue,Bzo),e(Da,Izo),e(Da,iue),e(iue,Nzo),e(Da,qzo),e(Da,due),e(due,jzo),e(Da,Dzo),e(ao,Gzo),e(ao,H),e(H,lv),e(lv,cue),e(cue,Ozo),e(lv,Vzo),e(lv,MX),e(MX,Xzo),e(lv,zzo),e(H,Wzo),e(H,iv),e(iv,fue),e(fue,Qzo),e(iv,Hzo),e(iv,EX),e(EX,Uzo),e(iv,Jzo),e(H,Yzo),e(H,dv),e(dv,mue),e(mue,Kzo),e(dv,Zzo),e(dv,CX),e(CX,eWo),e(dv,oWo),e(H,rWo),e(H,cv),e(cv,gue),e(gue,tWo),e(cv,aWo),e(cv,wX),e(wX,nWo),e(cv,sWo),e(H,lWo),e(H,fv),e(fv,hue),e(hue,iWo),e(fv,dWo),e(fv,AX),e(AX,cWo),e(fv,fWo),e(H,mWo),e(H,mv),e(mv,pue),e(pue,gWo),e(mv,hWo),e(mv,LX),e(LX,pWo),e(mv,uWo),e(H,_Wo),e(H,gv),e(gv,uue),e(uue,bWo),e(gv,vWo),e(gv,yX),e(yX,FWo),e(gv,TWo),e(H,MWo),e(H,hv),e(hv,_ue),e(_ue,EWo),e(hv,CWo),e(hv,xX),e(xX,wWo),e(hv,AWo),e(H,LWo),e(H,pv),e(pv,bue),e(bue,yWo),e(pv,xWo),e(pv,$X),e($X,$Wo),e(pv,kWo),e(H,SWo),e(H,uv),e(uv,vue),e(vue,RWo),e(uv,PWo),e(uv,kX),e(kX,BWo),e(uv,IWo),e(H,NWo),e(H,_v),e(_v,Fue),e(Fue,qWo),e(_v,jWo),e(_v,SX),e(SX,DWo),e(_v,GWo),e(H,OWo),e(H,bv),e(bv,Tue),e(Tue,VWo),e(bv,XWo),e(bv,RX),e(RX,zWo),e(bv,WWo),e(H,QWo),e(H,vv),e(vv,Mue),e(Mue,HWo),e(vv,UWo),e(vv,PX),e(PX,JWo),e(vv,YWo),e(H,KWo),e(H,Fv),e(Fv,Eue),e(Eue,ZWo),e(Fv,eQo),e(Fv,BX),e(BX,oQo),e(Fv,rQo),e(H,tQo),e(H,Tv),e(Tv,Cue),e(Cue,aQo),e(Tv,nQo),e(Tv,IX),e(IX,sQo),e(Tv,lQo),e(H,iQo),e(H,Mv),e(Mv,wue),e(wue,dQo),e(Mv,cQo),e(Mv,NX),e(NX,fQo),e(Mv,mQo),e(H,gQo),e(H,Ev),e(Ev,Aue),e(Aue,hQo),e(Ev,pQo),e(Ev,qX),e(qX,uQo),e(Ev,_Qo),e(H,bQo),e(H,Cv),e(Cv,Lue),e(Lue,vQo),e(Cv,FQo),e(Cv,jX),e(jX,TQo),e(Cv,MQo),e(H,EQo),e(H,wv),e(wv,yue),e(yue,CQo),e(wv,wQo),e(wv,DX),e(DX,AQo),e(wv,LQo),e(H,yQo),e(H,Av),e(Av,xue),e(xue,xQo),e(Av,$Qo),e(Av,GX),e(GX,kQo),e(Av,SQo),e(H,RQo),e(H,Lv),e(Lv,$ue),e($ue,PQo),e(Lv,BQo),e(Lv,OX),e(OX,IQo),e(Lv,NQo),e(H,qQo),e(H,yv),e(yv,kue),e(kue,jQo),e(yv,DQo),e(yv,VX),e(VX,GQo),e(yv,OQo),e(H,VQo),e(H,xv),e(xv,Sue),e(Sue,XQo),e(xv,zQo),e(xv,XX),e(XX,WQo),e(xv,QQo),e(H,HQo),e(H,$v),e($v,Rue),e(Rue,UQo),e($v,JQo),e($v,zX),e(zX,YQo),e($v,KQo),e(H,ZQo),e(H,kv),e(kv,Pue),e(Pue,eHo),e(kv,oHo),e(kv,WX),e(WX,rHo),e(kv,tHo),e(H,aHo),e(H,Sv),e(Sv,Bue),e(Bue,nHo),e(Sv,sHo),e(Sv,QX),e(QX,lHo),e(Sv,iHo),e(H,dHo),e(H,Rv),e(Rv,Iue),e(Iue,cHo),e(Rv,fHo),e(Rv,HX),e(HX,mHo),e(Rv,gHo),e(H,hHo),e(H,Pv),e(Pv,Nue),e(Nue,pHo),e(Pv,uHo),e(Pv,UX),e(UX,_Ho),e(Pv,bHo),e(H,vHo),e(H,Bv),e(Bv,que),e(que,FHo),e(Bv,THo),e(Bv,JX),e(JX,MHo),e(Bv,EHo),e(H,CHo),e(H,Iv),e(Iv,jue),e(jue,wHo),e(Iv,AHo),e(Iv,YX),e(YX,LHo),e(Iv,yHo),e(H,xHo),e(H,Nv),e(Nv,Due),e(Due,$Ho),e(Nv,kHo),e(Nv,KX),e(KX,SHo),e(Nv,RHo),e(H,PHo),e(H,qv),e(qv,Gue),e(Gue,BHo),e(qv,IHo),e(qv,ZX),e(ZX,NHo),e(qv,qHo),e(H,jHo),e(H,jv),e(jv,Oue),e(Oue,DHo),e(jv,GHo),e(jv,ez),e(ez,OHo),e(jv,VHo),e(H,XHo),e(H,Dv),e(Dv,Vue),e(Vue,zHo),e(Dv,WHo),e(Dv,oz),e(oz,QHo),e(Dv,HHo),e(H,UHo),e(H,Gv),e(Gv,Xue),e(Xue,JHo),e(Gv,YHo),e(Gv,rz),e(rz,KHo),e(Gv,ZHo),e(ao,eUo),e(ao,Ov),e(Ov,oUo),e(Ov,zue),e(zue,rUo),e(Ov,tUo),e(Ov,Wue),e(Wue,aUo),e(ao,nUo),M(Vv,ao,null),b(f,WGe,_),b(f,id,_),e(id,Xv),e(Xv,Que),M(Dy,Que,null),e(id,sUo),e(id,Hue),e(Hue,lUo),b(f,QGe,_),b(f,qo,_),M(Gy,qo,null),e(qo,iUo),e(qo,dd),e(dd,dUo),e(dd,tz),e(tz,cUo),e(dd,fUo),e(dd,az),e(az,mUo),e(dd,gUo),e(qo,hUo),e(qo,Oy),e(Oy,pUo),e(Oy,Uue),e(Uue,uUo),e(Oy,_Uo),e(qo,bUo),e(qo,ht),M(Vy,ht,null),e(ht,vUo),e(ht,Jue),e(Jue,FUo),e(ht,TUo),e(ht,cd),e(cd,MUo),e(cd,Yue),e(Yue,EUo),e(cd,CUo),e(cd,nz),e(nz,wUo),e(cd,AUo),e(ht,LUo),M(zv,ht,null),e(qo,yUo),e(qo,no),M(Xy,no,null),e(no,xUo),e(no,Kue),e(Kue,$Uo),e(no,kUo),e(no,Ga),e(Ga,SUo),e(Ga,Zue),e(Zue,RUo),e(Ga,PUo),e(Ga,e_e),e(e_e,BUo),e(Ga,IUo),e(Ga,o_e),e(o_e,NUo),e(Ga,qUo),e(no,jUo),e(no,V),e(V,Wv),e(Wv,r_e),e(r_e,DUo),e(Wv,GUo),e(Wv,sz),e(sz,OUo),e(Wv,VUo),e(V,XUo),e(V,Qv),e(Qv,t_e),e(t_e,zUo),e(Qv,WUo),e(Qv,lz),e(lz,QUo),e(Qv,HUo),e(V,UUo),e(V,Hv),e(Hv,a_e),e(a_e,JUo),e(Hv,YUo),e(Hv,iz),e(iz,KUo),e(Hv,ZUo),e(V,eJo),e(V,Uv),e(Uv,n_e),e(n_e,oJo),e(Uv,rJo),e(Uv,dz),e(dz,tJo),e(Uv,aJo),e(V,nJo),e(V,Jv),e(Jv,s_e),e(s_e,sJo),e(Jv,lJo),e(Jv,cz),e(cz,iJo),e(Jv,dJo),e(V,cJo),e(V,Yv),e(Yv,l_e),e(l_e,fJo),e(Yv,mJo),e(Yv,fz),e(fz,gJo),e(Yv,hJo),e(V,pJo),e(V,Kv),e(Kv,i_e),e(i_e,uJo),e(Kv,_Jo),e(Kv,mz),e(mz,bJo),e(Kv,vJo),e(V,FJo),e(V,Zv),e(Zv,d_e),e(d_e,TJo),e(Zv,MJo),e(Zv,gz),e(gz,EJo),e(Zv,CJo),e(V,wJo),e(V,e3),e(e3,c_e),e(c_e,AJo),e(e3,LJo),e(e3,hz),e(hz,yJo),e(e3,xJo),e(V,$Jo),e(V,o3),e(o3,f_e),e(f_e,kJo),e(o3,SJo),e(o3,pz),e(pz,RJo),e(o3,PJo),e(V,BJo),e(V,r3),e(r3,m_e),e(m_e,IJo),e(r3,NJo),e(r3,uz),e(uz,qJo),e(r3,jJo),e(V,DJo),e(V,t3),e(t3,g_e),e(g_e,GJo),e(t3,OJo),e(t3,_z),e(_z,VJo),e(t3,XJo),e(V,zJo),e(V,a3),e(a3,h_e),e(h_e,WJo),e(a3,QJo),e(a3,bz),e(bz,HJo),e(a3,UJo),e(V,JJo),e(V,n3),e(n3,p_e),e(p_e,YJo),e(n3,KJo),e(n3,vz),e(vz,ZJo),e(n3,eYo),e(V,oYo),e(V,s3),e(s3,u_e),e(u_e,rYo),e(s3,tYo),e(s3,Fz),e(Fz,aYo),e(s3,nYo),e(V,sYo),e(V,l3),e(l3,__e),e(__e,lYo),e(l3,iYo),e(l3,Tz),e(Tz,dYo),e(l3,cYo),e(V,fYo),e(V,i3),e(i3,b_e),e(b_e,mYo),e(i3,gYo),e(i3,Mz),e(Mz,hYo),e(i3,pYo),e(V,uYo),e(V,d3),e(d3,v_e),e(v_e,_Yo),e(d3,bYo),e(d3,Ez),e(Ez,vYo),e(d3,FYo),e(V,TYo),e(V,c3),e(c3,F_e),e(F_e,MYo),e(c3,EYo),e(c3,Cz),e(Cz,CYo),e(c3,wYo),e(V,AYo),e(V,f3),e(f3,T_e),e(T_e,LYo),e(f3,yYo),e(f3,wz),e(wz,xYo),e(f3,$Yo),e(V,kYo),e(V,m3),e(m3,M_e),e(M_e,SYo),e(m3,RYo),e(m3,Az),e(Az,PYo),e(m3,BYo),e(V,IYo),e(V,g3),e(g3,E_e),e(E_e,NYo),e(g3,qYo),e(g3,Lz),e(Lz,jYo),e(g3,DYo),e(V,GYo),e(V,h3),e(h3,C_e),e(C_e,OYo),e(h3,VYo),e(h3,yz),e(yz,XYo),e(h3,zYo),e(V,WYo),e(V,p3),e(p3,w_e),e(w_e,QYo),e(p3,HYo),e(p3,xz),e(xz,UYo),e(p3,JYo),e(V,YYo),e(V,u3),e(u3,A_e),e(A_e,KYo),e(u3,ZYo),e(u3,$z),e($z,eKo),e(u3,oKo),e(V,rKo),e(V,_3),e(_3,L_e),e(L_e,tKo),e(_3,aKo),e(_3,kz),e(kz,nKo),e(_3,sKo),e(V,lKo),e(V,b3),e(b3,y_e),e(y_e,iKo),e(b3,dKo),e(b3,Sz),e(Sz,cKo),e(b3,fKo),e(V,mKo),e(V,v3),e(v3,x_e),e(x_e,gKo),e(v3,hKo),e(v3,Rz),e(Rz,pKo),e(v3,uKo),e(V,_Ko),e(V,F3),e(F3,$_e),e($_e,bKo),e(F3,vKo),e(F3,Pz),e(Pz,FKo),e(F3,TKo),e(V,MKo),e(V,T3),e(T3,k_e),e(k_e,EKo),e(T3,CKo),e(T3,Bz),e(Bz,wKo),e(T3,AKo),e(V,LKo),e(V,M3),e(M3,S_e),e(S_e,yKo),e(M3,xKo),e(M3,Iz),e(Iz,$Ko),e(M3,kKo),e(V,SKo),e(V,E3),e(E3,R_e),e(R_e,RKo),e(E3,PKo),e(E3,Nz),e(Nz,BKo),e(E3,IKo),e(V,NKo),e(V,C3),e(C3,P_e),e(P_e,qKo),e(C3,jKo),e(C3,qz),e(qz,DKo),e(C3,GKo),e(V,OKo),e(V,w3),e(w3,B_e),e(B_e,VKo),e(w3,XKo),e(w3,jz),e(jz,zKo),e(w3,WKo),e(V,QKo),e(V,A3),e(A3,I_e),e(I_e,HKo),e(A3,UKo),e(A3,Dz),e(Dz,JKo),e(A3,YKo),e(V,KKo),e(V,L3),e(L3,N_e),e(N_e,ZKo),e(L3,eZo),e(L3,Gz),e(Gz,oZo),e(L3,rZo),e(V,tZo),e(V,y3),e(y3,q_e),e(q_e,aZo),e(y3,nZo),e(y3,Oz),e(Oz,sZo),e(y3,lZo),e(V,iZo),e(V,x3),e(x3,j_e),e(j_e,dZo),e(x3,cZo),e(x3,Vz),e(Vz,fZo),e(x3,mZo),e(V,gZo),e(V,$3),e($3,D_e),e(D_e,hZo),e($3,pZo),e($3,Xz),e(Xz,uZo),e($3,_Zo),e(V,bZo),e(V,k3),e(k3,G_e),e(G_e,vZo),e(k3,FZo),e(k3,zz),e(zz,TZo),e(k3,MZo),e(no,EZo),e(no,S3),e(S3,CZo),e(S3,O_e),e(O_e,wZo),e(S3,AZo),e(S3,V_e),e(V_e,LZo),e(no,yZo),M(R3,no,null),b(f,HGe,_),b(f,fd,_),e(fd,P3),e(P3,X_e),M(zy,X_e,null),e(fd,xZo),e(fd,z_e),e(z_e,$Zo),b(f,UGe,_),b(f,jo,_),M(Wy,jo,null),e(jo,kZo),e(jo,md),e(md,SZo),e(md,Wz),e(Wz,RZo),e(md,PZo),e(md,Qz),e(Qz,BZo),e(md,IZo),e(jo,NZo),e(jo,Qy),e(Qy,qZo),e(Qy,W_e),e(W_e,jZo),e(Qy,DZo),e(jo,GZo),e(jo,pt),M(Hy,pt,null),e(pt,OZo),e(pt,Q_e),e(Q_e,VZo),e(pt,XZo),e(pt,gd),e(gd,zZo),e(gd,H_e),e(H_e,WZo),e(gd,QZo),e(gd,Hz),e(Hz,HZo),e(gd,UZo),e(pt,JZo),M(B3,pt,null),e(jo,YZo),e(jo,so),M(Uy,so,null),e(so,KZo),e(so,U_e),e(U_e,ZZo),e(so,eer),e(so,Oa),e(Oa,oer),e(Oa,J_e),e(J_e,rer),e(Oa,ter),e(Oa,Y_e),e(Y_e,aer),e(Oa,ner),e(Oa,K_e),e(K_e,ser),e(Oa,ler),e(so,ier),e(so,Z_e),e(Z_e,I3),e(I3,e4e),e(e4e,der),e(I3,cer),e(I3,Uz),e(Uz,fer),e(I3,mer),e(so,ger),e(so,N3),e(N3,her),e(N3,o4e),e(o4e,per),e(N3,uer),e(N3,r4e),e(r4e,_er),e(so,ber),M(q3,so,null),b(f,JGe,_),b(f,hd,_),e(hd,j3),e(j3,t4e),M(Jy,t4e,null),e(hd,ver),e(hd,a4e),e(a4e,Fer),b(f,YGe,_),b(f,Do,_),M(Yy,Do,null),e(Do,Ter),e(Do,pd),e(pd,Mer),e(pd,Jz),e(Jz,Eer),e(pd,Cer),e(pd,Yz),e(Yz,wer),e(pd,Aer),e(Do,Ler),e(Do,Ky),e(Ky,yer),e(Ky,n4e),e(n4e,xer),e(Ky,$er),e(Do,ker),e(Do,ut),M(Zy,ut,null),e(ut,Ser),e(ut,s4e),e(s4e,Rer),e(ut,Per),e(ut,ud),e(ud,Ber),e(ud,l4e),e(l4e,Ier),e(ud,Ner),e(ud,Kz),e(Kz,qer),e(ud,jer),e(ut,Der),M(D3,ut,null),e(Do,Ger),e(Do,lo),M(e8,lo,null),e(lo,Oer),e(lo,i4e),e(i4e,Ver),e(lo,Xer),e(lo,Va),e(Va,zer),e(Va,d4e),e(d4e,Wer),e(Va,Qer),e(Va,c4e),e(c4e,Her),e(Va,Uer),e(Va,f4e),e(f4e,Jer),e(Va,Yer),e(lo,Ker),e(lo,Fe),e(Fe,G3),e(G3,m4e),e(m4e,Zer),e(G3,eor),e(G3,Zz),e(Zz,oor),e(G3,ror),e(Fe,tor),e(Fe,O3),e(O3,g4e),e(g4e,aor),e(O3,nor),e(O3,eW),e(eW,sor),e(O3,lor),e(Fe,ior),e(Fe,V3),e(V3,h4e),e(h4e,dor),e(V3,cor),e(V3,oW),e(oW,mor),e(V3,gor),e(Fe,hor),e(Fe,X3),e(X3,p4e),e(p4e,por),e(X3,uor),e(X3,rW),e(rW,_or),e(X3,bor),e(Fe,vor),e(Fe,Vs),e(Vs,u4e),e(u4e,For),e(Vs,Tor),e(Vs,tW),e(tW,Mor),e(Vs,Eor),e(Vs,aW),e(aW,Cor),e(Vs,wor),e(Fe,Aor),e(Fe,z3),e(z3,_4e),e(_4e,Lor),e(z3,yor),e(z3,nW),e(nW,xor),e(z3,$or),e(Fe,kor),e(Fe,Xs),e(Xs,b4e),e(b4e,Sor),e(Xs,Ror),e(Xs,sW),e(sW,Por),e(Xs,Bor),e(Xs,lW),e(lW,Ior),e(Xs,Nor),e(Fe,qor),e(Fe,_t),e(_t,v4e),e(v4e,jor),e(_t,Dor),e(_t,iW),e(iW,Gor),e(_t,Oor),e(_t,dW),e(dW,Vor),e(_t,Xor),e(_t,cW),e(cW,zor),e(_t,Wor),e(Fe,Qor),e(Fe,W3),e(W3,F4e),e(F4e,Hor),e(W3,Uor),e(W3,fW),e(fW,Jor),e(W3,Yor),e(Fe,Kor),e(Fe,Q3),e(Q3,T4e),e(T4e,Zor),e(Q3,err),e(Q3,mW),e(mW,orr),e(Q3,rrr),e(Fe,trr),e(Fe,H3),e(H3,M4e),e(M4e,arr),e(H3,nrr),e(H3,gW),e(gW,srr),e(H3,lrr),e(Fe,irr),e(Fe,U3),e(U3,E4e),e(E4e,drr),e(U3,crr),e(U3,hW),e(hW,frr),e(U3,mrr),e(Fe,grr),e(Fe,J3),e(J3,C4e),e(C4e,hrr),e(J3,prr),e(J3,pW),e(pW,urr),e(J3,_rr),e(Fe,brr),e(Fe,Y3),e(Y3,w4e),e(w4e,vrr),e(Y3,Frr),e(Y3,uW),e(uW,Trr),e(Y3,Mrr),e(Fe,Err),e(Fe,K3),e(K3,A4e),e(A4e,Crr),e(K3,wrr),e(K3,_W),e(_W,Arr),e(K3,Lrr),e(lo,yrr),e(lo,Z3),e(Z3,xrr),e(Z3,L4e),e(L4e,$rr),e(Z3,krr),e(Z3,y4e),e(y4e,Srr),e(lo,Rrr),M(eF,lo,null),b(f,KGe,_),b(f,_d,_),e(_d,oF),e(oF,x4e),M(o8,x4e,null),e(_d,Prr),e(_d,$4e),e($4e,Brr),b(f,ZGe,_),b(f,Go,_),M(r8,Go,null),e(Go,Irr),e(Go,bd),e(bd,Nrr),e(bd,bW),e(bW,qrr),e(bd,jrr),e(bd,vW),e(vW,Drr),e(bd,Grr),e(Go,Orr),e(Go,t8),e(t8,Vrr),e(t8,k4e),e(k4e,Xrr),e(t8,zrr),e(Go,Wrr),e(Go,bt),M(a8,bt,null),e(bt,Qrr),e(bt,S4e),e(S4e,Hrr),e(bt,Urr),e(bt,vd),e(vd,Jrr),e(vd,R4e),e(R4e,Yrr),e(vd,Krr),e(vd,FW),e(FW,Zrr),e(vd,etr),e(bt,otr),M(rF,bt,null),e(Go,rtr),e(Go,io),M(n8,io,null),e(io,ttr),e(io,P4e),e(P4e,atr),e(io,ntr),e(io,Xa),e(Xa,str),e(Xa,B4e),e(B4e,ltr),e(Xa,itr),e(Xa,I4e),e(I4e,dtr),e(Xa,ctr),e(Xa,N4e),e(N4e,ftr),e(Xa,mtr),e(io,gtr),e(io,q4e),e(q4e,tF),e(tF,j4e),e(j4e,htr),e(tF,ptr),e(tF,TW),e(TW,utr),e(tF,_tr),e(io,btr),e(io,aF),e(aF,vtr),e(aF,D4e),e(D4e,Ftr),e(aF,Ttr),e(aF,G4e),e(G4e,Mtr),e(io,Etr),M(nF,io,null),b(f,eOe,_),b(f,Fd,_),e(Fd,sF),e(sF,O4e),M(s8,O4e,null),e(Fd,Ctr),e(Fd,V4e),e(V4e,wtr),b(f,oOe,_),b(f,Oo,_),M(l8,Oo,null),e(Oo,Atr),e(Oo,Td),e(Td,Ltr),e(Td,MW),e(MW,ytr),e(Td,xtr),e(Td,EW),e(EW,$tr),e(Td,ktr),e(Oo,Str),e(Oo,i8),e(i8,Rtr),e(i8,X4e),e(X4e,Ptr),e(i8,Btr),e(Oo,Itr),e(Oo,vt),M(d8,vt,null),e(vt,Ntr),e(vt,z4e),e(z4e,qtr),e(vt,jtr),e(vt,Md),e(Md,Dtr),e(Md,W4e),e(W4e,Gtr),e(Md,Otr),e(Md,CW),e(CW,Vtr),e(Md,Xtr),e(vt,ztr),M(lF,vt,null),e(Oo,Wtr),e(Oo,co),M(c8,co,null),e(co,Qtr),e(co,Q4e),e(Q4e,Htr),e(co,Utr),e(co,za),e(za,Jtr),e(za,H4e),e(H4e,Ytr),e(za,Ktr),e(za,U4e),e(U4e,Ztr),e(za,ear),e(za,J4e),e(J4e,oar),e(za,rar),e(co,tar),e(co,Y4e),e(Y4e,iF),e(iF,K4e),e(K4e,aar),e(iF,nar),e(iF,wW),e(wW,sar),e(iF,lar),e(co,iar),e(co,dF),e(dF,dar),e(dF,Z4e),e(Z4e,car),e(dF,far),e(dF,e1e),e(e1e,mar),e(co,gar),M(cF,co,null),b(f,rOe,_),b(f,Ed,_),e(Ed,fF),e(fF,o1e),M(f8,o1e,null),e(Ed,har),e(Ed,r1e),e(r1e,par),b(f,tOe,_),b(f,Vo,_),M(m8,Vo,null),e(Vo,uar),e(Vo,Cd),e(Cd,_ar),e(Cd,AW),e(AW,bar),e(Cd,Far),e(Cd,LW),e(LW,Tar),e(Cd,Mar),e(Vo,Ear),e(Vo,g8),e(g8,Car),e(g8,t1e),e(t1e,war),e(g8,Aar),e(Vo,Lar),e(Vo,Ft),M(h8,Ft,null),e(Ft,yar),e(Ft,a1e),e(a1e,xar),e(Ft,$ar),e(Ft,wd),e(wd,kar),e(wd,n1e),e(n1e,Sar),e(wd,Rar),e(wd,yW),e(yW,Par),e(wd,Bar),e(Ft,Iar),M(mF,Ft,null),e(Vo,Nar),e(Vo,fo),M(p8,fo,null),e(fo,qar),e(fo,s1e),e(s1e,jar),e(fo,Dar),e(fo,Wa),e(Wa,Gar),e(Wa,l1e),e(l1e,Oar),e(Wa,Var),e(Wa,i1e),e(i1e,Xar),e(Wa,zar),e(Wa,d1e),e(d1e,War),e(Wa,Qar),e(fo,Har),e(fo,Pe),e(Pe,gF),e(gF,c1e),e(c1e,Uar),e(gF,Jar),e(gF,xW),e(xW,Yar),e(gF,Kar),e(Pe,Zar),e(Pe,hF),e(hF,f1e),e(f1e,enr),e(hF,onr),e(hF,$W),e($W,rnr),e(hF,tnr),e(Pe,anr),e(Pe,pF),e(pF,m1e),e(m1e,nnr),e(pF,snr),e(pF,kW),e(kW,lnr),e(pF,inr),e(Pe,dnr),e(Pe,uF),e(uF,g1e),e(g1e,cnr),e(uF,fnr),e(uF,SW),e(SW,mnr),e(uF,gnr),e(Pe,hnr),e(Pe,_F),e(_F,h1e),e(h1e,pnr),e(_F,unr),e(_F,RW),e(RW,_nr),e(_F,bnr),e(Pe,vnr),e(Pe,bF),e(bF,p1e),e(p1e,Fnr),e(bF,Tnr),e(bF,PW),e(PW,Mnr),e(bF,Enr),e(Pe,Cnr),e(Pe,vF),e(vF,u1e),e(u1e,wnr),e(vF,Anr),e(vF,BW),e(BW,Lnr),e(vF,ynr),e(Pe,xnr),e(Pe,FF),e(FF,_1e),e(_1e,$nr),e(FF,knr),e(FF,IW),e(IW,Snr),e(FF,Rnr),e(Pe,Pnr),e(Pe,TF),e(TF,b1e),e(b1e,Bnr),e(TF,Inr),e(TF,NW),e(NW,Nnr),e(TF,qnr),e(fo,jnr),e(fo,MF),e(MF,Dnr),e(MF,v1e),e(v1e,Gnr),e(MF,Onr),e(MF,F1e),e(F1e,Vnr),e(fo,Xnr),M(EF,fo,null),b(f,aOe,_),b(f,Ad,_),e(Ad,CF),e(CF,T1e),M(u8,T1e,null),e(Ad,znr),e(Ad,M1e),e(M1e,Wnr),b(f,nOe,_),b(f,Xo,_),M(_8,Xo,null),e(Xo,Qnr),e(Xo,Ld),e(Ld,Hnr),e(Ld,qW),e(qW,Unr),e(Ld,Jnr),e(Ld,jW),e(jW,Ynr),e(Ld,Knr),e(Xo,Znr),e(Xo,b8),e(b8,esr),e(b8,E1e),e(E1e,osr),e(b8,rsr),e(Xo,tsr),e(Xo,Tt),M(v8,Tt,null),e(Tt,asr),e(Tt,C1e),e(C1e,nsr),e(Tt,ssr),e(Tt,yd),e(yd,lsr),e(yd,w1e),e(w1e,isr),e(yd,dsr),e(yd,DW),e(DW,csr),e(yd,fsr),e(Tt,msr),M(wF,Tt,null),e(Xo,gsr),e(Xo,mo),M(F8,mo,null),e(mo,hsr),e(mo,A1e),e(A1e,psr),e(mo,usr),e(mo,Qa),e(Qa,_sr),e(Qa,L1e),e(L1e,bsr),e(Qa,vsr),e(Qa,y1e),e(y1e,Fsr),e(Qa,Tsr),e(Qa,x1e),e(x1e,Msr),e(Qa,Esr),e(mo,Csr),e(mo,et),e(et,AF),e(AF,$1e),e($1e,wsr),e(AF,Asr),e(AF,GW),e(GW,Lsr),e(AF,ysr),e(et,xsr),e(et,LF),e(LF,k1e),e(k1e,$sr),e(LF,ksr),e(LF,OW),e(OW,Ssr),e(LF,Rsr),e(et,Psr),e(et,yF),e(yF,S1e),e(S1e,Bsr),e(yF,Isr),e(yF,VW),e(VW,Nsr),e(yF,qsr),e(et,jsr),e(et,xF),e(xF,R1e),e(R1e,Dsr),e(xF,Gsr),e(xF,XW),e(XW,Osr),e(xF,Vsr),e(et,Xsr),e(et,$F),e($F,P1e),e(P1e,zsr),e($F,Wsr),e($F,zW),e(zW,Qsr),e($F,Hsr),e(mo,Usr),e(mo,kF),e(kF,Jsr),e(kF,B1e),e(B1e,Ysr),e(kF,Ksr),e(kF,I1e),e(I1e,Zsr),e(mo,elr),M(SF,mo,null),b(f,sOe,_),b(f,xd,_),e(xd,RF),e(RF,N1e),M(T8,N1e,null),e(xd,olr),e(xd,q1e),e(q1e,rlr),b(f,lOe,_),b(f,zo,_),M(M8,zo,null),e(zo,tlr),e(zo,$d),e($d,alr),e($d,WW),e(WW,nlr),e($d,slr),e($d,QW),e(QW,llr),e($d,ilr),e(zo,dlr),e(zo,E8),e(E8,clr),e(E8,j1e),e(j1e,flr),e(E8,mlr),e(zo,glr),e(zo,Mt),M(C8,Mt,null),e(Mt,hlr),e(Mt,D1e),e(D1e,plr),e(Mt,ulr),e(Mt,kd),e(kd,_lr),e(kd,G1e),e(G1e,blr),e(kd,vlr),e(kd,HW),e(HW,Flr),e(kd,Tlr),e(Mt,Mlr),M(PF,Mt,null),e(zo,Elr),e(zo,go),M(w8,go,null),e(go,Clr),e(go,O1e),e(O1e,wlr),e(go,Alr),e(go,Ha),e(Ha,Llr),e(Ha,V1e),e(V1e,ylr),e(Ha,xlr),e(Ha,X1e),e(X1e,$lr),e(Ha,klr),e(Ha,z1e),e(z1e,Slr),e(Ha,Rlr),e(go,Plr),e(go,Le),e(Le,BF),e(BF,W1e),e(W1e,Blr),e(BF,Ilr),e(BF,UW),e(UW,Nlr),e(BF,qlr),e(Le,jlr),e(Le,IF),e(IF,Q1e),e(Q1e,Dlr),e(IF,Glr),e(IF,JW),e(JW,Olr),e(IF,Vlr),e(Le,Xlr),e(Le,NF),e(NF,H1e),e(H1e,zlr),e(NF,Wlr),e(NF,YW),e(YW,Qlr),e(NF,Hlr),e(Le,Ulr),e(Le,qF),e(qF,U1e),e(U1e,Jlr),e(qF,Ylr),e(qF,KW),e(KW,Klr),e(qF,Zlr),e(Le,eir),e(Le,jF),e(jF,J1e),e(J1e,oir),e(jF,rir),e(jF,ZW),e(ZW,tir),e(jF,air),e(Le,nir),e(Le,DF),e(DF,Y1e),e(Y1e,sir),e(DF,lir),e(DF,eQ),e(eQ,iir),e(DF,dir),e(Le,cir),e(Le,GF),e(GF,K1e),e(K1e,fir),e(GF,mir),e(GF,oQ),e(oQ,gir),e(GF,hir),e(Le,pir),e(Le,OF),e(OF,Z1e),e(Z1e,uir),e(OF,_ir),e(OF,rQ),e(rQ,bir),e(OF,vir),e(Le,Fir),e(Le,VF),e(VF,e2e),e(e2e,Tir),e(VF,Mir),e(VF,tQ),e(tQ,Eir),e(VF,Cir),e(Le,wir),e(Le,XF),e(XF,o2e),e(o2e,Air),e(XF,Lir),e(XF,aQ),e(aQ,yir),e(XF,xir),e(go,$ir),e(go,zF),e(zF,kir),e(zF,r2e),e(r2e,Sir),e(zF,Rir),e(zF,t2e),e(t2e,Pir),e(go,Bir),M(WF,go,null),b(f,iOe,_),b(f,Sd,_),e(Sd,QF),e(QF,a2e),M(A8,a2e,null),e(Sd,Iir),e(Sd,n2e),e(n2e,Nir),b(f,dOe,_),b(f,Wo,_),M(L8,Wo,null),e(Wo,qir),e(Wo,Rd),e(Rd,jir),e(Rd,nQ),e(nQ,Dir),e(Rd,Gir),e(Rd,sQ),e(sQ,Oir),e(Rd,Vir),e(Wo,Xir),e(Wo,y8),e(y8,zir),e(y8,s2e),e(s2e,Wir),e(y8,Qir),e(Wo,Hir),e(Wo,Et),M(x8,Et,null),e(Et,Uir),e(Et,l2e),e(l2e,Jir),e(Et,Yir),e(Et,Pd),e(Pd,Kir),e(Pd,i2e),e(i2e,Zir),e(Pd,edr),e(Pd,lQ),e(lQ,odr),e(Pd,rdr),e(Et,tdr),M(HF,Et,null),e(Wo,adr),e(Wo,ho),M($8,ho,null),e(ho,ndr),e(ho,d2e),e(d2e,sdr),e(ho,ldr),e(ho,Ua),e(Ua,idr),e(Ua,c2e),e(c2e,ddr),e(Ua,cdr),e(Ua,f2e),e(f2e,fdr),e(Ua,mdr),e(Ua,m2e),e(m2e,gdr),e(Ua,hdr),e(ho,pdr),e(ho,k8),e(k8,UF),e(UF,g2e),e(g2e,udr),e(UF,_dr),e(UF,iQ),e(iQ,bdr),e(UF,vdr),e(k8,Fdr),e(k8,JF),e(JF,h2e),e(h2e,Tdr),e(JF,Mdr),e(JF,dQ),e(dQ,Edr),e(JF,Cdr),e(ho,wdr),e(ho,YF),e(YF,Adr),e(YF,p2e),e(p2e,Ldr),e(YF,ydr),e(YF,u2e),e(u2e,xdr),e(ho,$dr),M(KF,ho,null),b(f,cOe,_),b(f,Bd,_),e(Bd,ZF),e(ZF,_2e),M(S8,_2e,null),e(Bd,kdr),e(Bd,b2e),e(b2e,Sdr),b(f,fOe,_),b(f,Qo,_),M(R8,Qo,null),e(Qo,Rdr),e(Qo,Id),e(Id,Pdr),e(Id,cQ),e(cQ,Bdr),e(Id,Idr),e(Id,fQ),e(fQ,Ndr),e(Id,qdr),e(Qo,jdr),e(Qo,P8),e(P8,Ddr),e(P8,v2e),e(v2e,Gdr),e(P8,Odr),e(Qo,Vdr),e(Qo,Ct),M(B8,Ct,null),e(Ct,Xdr),e(Ct,F2e),e(F2e,zdr),e(Ct,Wdr),e(Ct,Nd),e(Nd,Qdr),e(Nd,T2e),e(T2e,Hdr),e(Nd,Udr),e(Nd,mQ),e(mQ,Jdr),e(Nd,Ydr),e(Ct,Kdr),M(eT,Ct,null),e(Qo,Zdr),e(Qo,po),M(I8,po,null),e(po,ecr),e(po,M2e),e(M2e,ocr),e(po,rcr),e(po,Ja),e(Ja,tcr),e(Ja,E2e),e(E2e,acr),e(Ja,ncr),e(Ja,C2e),e(C2e,scr),e(Ja,lcr),e(Ja,w2e),e(w2e,icr),e(Ja,dcr),e(po,ccr),e(po,ot),e(ot,oT),e(oT,A2e),e(A2e,fcr),e(oT,mcr),e(oT,gQ),e(gQ,gcr),e(oT,hcr),e(ot,pcr),e(ot,rT),e(rT,L2e),e(L2e,ucr),e(rT,_cr),e(rT,hQ),e(hQ,bcr),e(rT,vcr),e(ot,Fcr),e(ot,tT),e(tT,y2e),e(y2e,Tcr),e(tT,Mcr),e(tT,pQ),e(pQ,Ecr),e(tT,Ccr),e(ot,wcr),e(ot,aT),e(aT,x2e),e(x2e,Acr),e(aT,Lcr),e(aT,uQ),e(uQ,ycr),e(aT,xcr),e(ot,$cr),e(ot,nT),e(nT,$2e),e($2e,kcr),e(nT,Scr),e(nT,_Q),e(_Q,Rcr),e(nT,Pcr),e(po,Bcr),e(po,sT),e(sT,Icr),e(sT,k2e),e(k2e,Ncr),e(sT,qcr),e(sT,S2e),e(S2e,jcr),e(po,Dcr),M(lT,po,null),b(f,mOe,_),b(f,qd,_),e(qd,iT),e(iT,R2e),M(N8,R2e,null),e(qd,Gcr),e(qd,P2e),e(P2e,Ocr),b(f,gOe,_),b(f,Ho,_),M(q8,Ho,null),e(Ho,Vcr),e(Ho,jd),e(jd,Xcr),e(jd,bQ),e(bQ,zcr),e(jd,Wcr),e(jd,vQ),e(vQ,Qcr),e(jd,Hcr),e(Ho,Ucr),e(Ho,j8),e(j8,Jcr),e(j8,B2e),e(B2e,Ycr),e(j8,Kcr),e(Ho,Zcr),e(Ho,wt),M(D8,wt,null),e(wt,efr),e(wt,I2e),e(I2e,ofr),e(wt,rfr),e(wt,Dd),e(Dd,tfr),e(Dd,N2e),e(N2e,afr),e(Dd,nfr),e(Dd,FQ),e(FQ,sfr),e(Dd,lfr),e(wt,ifr),M(dT,wt,null),e(Ho,dfr),e(Ho,uo),M(G8,uo,null),e(uo,cfr),e(uo,q2e),e(q2e,ffr),e(uo,mfr),e(uo,Ya),e(Ya,gfr),e(Ya,j2e),e(j2e,hfr),e(Ya,pfr),e(Ya,D2e),e(D2e,ufr),e(Ya,_fr),e(Ya,G2e),e(G2e,bfr),e(Ya,vfr),e(uo,Ffr),e(uo,Gd),e(Gd,cT),e(cT,O2e),e(O2e,Tfr),e(cT,Mfr),e(cT,TQ),e(TQ,Efr),e(cT,Cfr),e(Gd,wfr),e(Gd,fT),e(fT,V2e),e(V2e,Afr),e(fT,Lfr),e(fT,MQ),e(MQ,yfr),e(fT,xfr),e(Gd,$fr),e(Gd,mT),e(mT,X2e),e(X2e,kfr),e(mT,Sfr),e(mT,EQ),e(EQ,Rfr),e(mT,Pfr),e(uo,Bfr),e(uo,gT),e(gT,Ifr),e(gT,z2e),e(z2e,Nfr),e(gT,qfr),e(gT,W2e),e(W2e,jfr),e(uo,Dfr),M(hT,uo,null),b(f,hOe,_),b(f,Od,_),e(Od,pT),e(pT,Q2e),M(O8,Q2e,null),e(Od,Gfr),e(Od,H2e),e(H2e,Ofr),b(f,pOe,_),b(f,Uo,_),M(V8,Uo,null),e(Uo,Vfr),e(Uo,Vd),e(Vd,Xfr),e(Vd,CQ),e(CQ,zfr),e(Vd,Wfr),e(Vd,wQ),e(wQ,Qfr),e(Vd,Hfr),e(Uo,Ufr),e(Uo,X8),e(X8,Jfr),e(X8,U2e),e(U2e,Yfr),e(X8,Kfr),e(Uo,Zfr),e(Uo,At),M(z8,At,null),e(At,emr),e(At,J2e),e(J2e,omr),e(At,rmr),e(At,Xd),e(Xd,tmr),e(Xd,Y2e),e(Y2e,amr),e(Xd,nmr),e(Xd,AQ),e(AQ,smr),e(Xd,lmr),e(At,imr),M(uT,At,null),e(Uo,dmr),e(Uo,_o),M(W8,_o,null),e(_o,cmr),e(_o,K2e),e(K2e,fmr),e(_o,mmr),e(_o,Ka),e(Ka,gmr),e(Ka,Z2e),e(Z2e,hmr),e(Ka,pmr),e(Ka,ebe),e(ebe,umr),e(Ka,_mr),e(Ka,obe),e(obe,bmr),e(Ka,vmr),e(_o,Fmr),e(_o,Q8),e(Q8,_T),e(_T,rbe),e(rbe,Tmr),e(_T,Mmr),e(_T,LQ),e(LQ,Emr),e(_T,Cmr),e(Q8,wmr),e(Q8,bT),e(bT,tbe),e(tbe,Amr),e(bT,Lmr),e(bT,yQ),e(yQ,ymr),e(bT,xmr),e(_o,$mr),e(_o,vT),e(vT,kmr),e(vT,abe),e(abe,Smr),e(vT,Rmr),e(vT,nbe),e(nbe,Pmr),e(_o,Bmr),M(FT,_o,null),b(f,uOe,_),b(f,zd,_),e(zd,TT),e(TT,sbe),M(H8,sbe,null),e(zd,Imr),e(zd,lbe),e(lbe,Nmr),b(f,_Oe,_),b(f,Jo,_),M(U8,Jo,null),e(Jo,qmr),e(Jo,Wd),e(Wd,jmr),e(Wd,xQ),e(xQ,Dmr),e(Wd,Gmr),e(Wd,$Q),e($Q,Omr),e(Wd,Vmr),e(Jo,Xmr),e(Jo,J8),e(J8,zmr),e(J8,ibe),e(ibe,Wmr),e(J8,Qmr),e(Jo,Hmr),e(Jo,Lt),M(Y8,Lt,null),e(Lt,Umr),e(Lt,dbe),e(dbe,Jmr),e(Lt,Ymr),e(Lt,Qd),e(Qd,Kmr),e(Qd,cbe),e(cbe,Zmr),e(Qd,egr),e(Qd,kQ),e(kQ,ogr),e(Qd,rgr),e(Lt,tgr),M(MT,Lt,null),e(Jo,agr),e(Jo,bo),M(K8,bo,null),e(bo,ngr),e(bo,fbe),e(fbe,sgr),e(bo,lgr),e(bo,Za),e(Za,igr),e(Za,mbe),e(mbe,dgr),e(Za,cgr),e(Za,gbe),e(gbe,fgr),e(Za,mgr),e(Za,hbe),e(hbe,ggr),e(Za,hgr),e(bo,pgr),e(bo,pbe),e(pbe,ET),e(ET,ube),e(ube,ugr),e(ET,_gr),e(ET,SQ),e(SQ,bgr),e(ET,vgr),e(bo,Fgr),e(bo,CT),e(CT,Tgr),e(CT,_be),e(_be,Mgr),e(CT,Egr),e(CT,bbe),e(bbe,Cgr),e(bo,wgr),M(wT,bo,null),b(f,bOe,_),b(f,Hd,_),e(Hd,AT),e(AT,vbe),M(Z8,vbe,null),e(Hd,Agr),e(Hd,Fbe),e(Fbe,Lgr),b(f,vOe,_),b(f,Yo,_),M(e9,Yo,null),e(Yo,ygr),e(Yo,Ud),e(Ud,xgr),e(Ud,RQ),e(RQ,$gr),e(Ud,kgr),e(Ud,PQ),e(PQ,Sgr),e(Ud,Rgr),e(Yo,Pgr),e(Yo,o9),e(o9,Bgr),e(o9,Tbe),e(Tbe,Igr),e(o9,Ngr),e(Yo,qgr),e(Yo,yt),M(r9,yt,null),e(yt,jgr),e(yt,Mbe),e(Mbe,Dgr),e(yt,Ggr),e(yt,Jd),e(Jd,Ogr),e(Jd,Ebe),e(Ebe,Vgr),e(Jd,Xgr),e(Jd,BQ),e(BQ,zgr),e(Jd,Wgr),e(yt,Qgr),M(LT,yt,null),e(Yo,Hgr),e(Yo,vo),M(t9,vo,null),e(vo,Ugr),e(vo,Cbe),e(Cbe,Jgr),e(vo,Ygr),e(vo,en),e(en,Kgr),e(en,wbe),e(wbe,Zgr),e(en,ehr),e(en,Abe),e(Abe,ohr),e(en,rhr),e(en,Lbe),e(Lbe,thr),e(en,ahr),e(vo,nhr),e(vo,on),e(on,yT),e(yT,ybe),e(ybe,shr),e(yT,lhr),e(yT,IQ),e(IQ,ihr),e(yT,dhr),e(on,chr),e(on,xT),e(xT,xbe),e(xbe,fhr),e(xT,mhr),e(xT,NQ),e(NQ,ghr),e(xT,hhr),e(on,phr),e(on,$T),e($T,$be),e($be,uhr),e($T,_hr),e($T,qQ),e(qQ,bhr),e($T,vhr),e(on,Fhr),e(on,kT),e(kT,kbe),e(kbe,Thr),e(kT,Mhr),e(kT,jQ),e(jQ,Ehr),e(kT,Chr),e(vo,whr),e(vo,ST),e(ST,Ahr),e(ST,Sbe),e(Sbe,Lhr),e(ST,yhr),e(ST,Rbe),e(Rbe,xhr),e(vo,$hr),M(RT,vo,null),b(f,FOe,_),b(f,Yd,_),e(Yd,PT),e(PT,Pbe),M(a9,Pbe,null),e(Yd,khr),e(Yd,Bbe),e(Bbe,Shr),b(f,TOe,_),b(f,Ko,_),M(n9,Ko,null),e(Ko,Rhr),e(Ko,Kd),e(Kd,Phr),e(Kd,DQ),e(DQ,Bhr),e(Kd,Ihr),e(Kd,GQ),e(GQ,Nhr),e(Kd,qhr),e(Ko,jhr),e(Ko,s9),e(s9,Dhr),e(s9,Ibe),e(Ibe,Ghr),e(s9,Ohr),e(Ko,Vhr),e(Ko,xt),M(l9,xt,null),e(xt,Xhr),e(xt,Nbe),e(Nbe,zhr),e(xt,Whr),e(xt,Zd),e(Zd,Qhr),e(Zd,qbe),e(qbe,Hhr),e(Zd,Uhr),e(Zd,OQ),e(OQ,Jhr),e(Zd,Yhr),e(xt,Khr),M(BT,xt,null),e(Ko,Zhr),e(Ko,Fo),M(i9,Fo,null),e(Fo,epr),e(Fo,jbe),e(jbe,opr),e(Fo,rpr),e(Fo,rn),e(rn,tpr),e(rn,Dbe),e(Dbe,apr),e(rn,npr),e(rn,Gbe),e(Gbe,spr),e(rn,lpr),e(rn,Obe),e(Obe,ipr),e(rn,dpr),e(Fo,cpr),e(Fo,Vbe),e(Vbe,IT),e(IT,Xbe),e(Xbe,fpr),e(IT,mpr),e(IT,VQ),e(VQ,gpr),e(IT,hpr),e(Fo,ppr),e(Fo,NT),e(NT,upr),e(NT,zbe),e(zbe,_pr),e(NT,bpr),e(NT,Wbe),e(Wbe,vpr),e(Fo,Fpr),M(qT,Fo,null),b(f,MOe,_),b(f,ec,_),e(ec,jT),e(jT,Qbe),M(d9,Qbe,null),e(ec,Tpr),e(ec,Hbe),e(Hbe,Mpr),b(f,EOe,_),b(f,Zo,_),M(c9,Zo,null),e(Zo,Epr),e(Zo,oc),e(oc,Cpr),e(oc,XQ),e(XQ,wpr),e(oc,Apr),e(oc,zQ),e(zQ,Lpr),e(oc,ypr),e(Zo,xpr),e(Zo,f9),e(f9,$pr),e(f9,Ube),e(Ube,kpr),e(f9,Spr),e(Zo,Rpr),e(Zo,$t),M(m9,$t,null),e($t,Ppr),e($t,Jbe),e(Jbe,Bpr),e($t,Ipr),e($t,rc),e(rc,Npr),e(rc,Ybe),e(Ybe,qpr),e(rc,jpr),e(rc,WQ),e(WQ,Dpr),e(rc,Gpr),e($t,Opr),M(DT,$t,null),e(Zo,Vpr),e(Zo,Lr),M(g9,Lr,null),e(Lr,Xpr),e(Lr,Kbe),e(Kbe,zpr),e(Lr,Wpr),e(Lr,tn),e(tn,Qpr),e(tn,Zbe),e(Zbe,Hpr),e(tn,Upr),e(tn,eve),e(eve,Jpr),e(tn,Ypr),e(tn,ove),e(ove,Kpr),e(tn,Zpr),e(Lr,eur),e(Lr,q),e(q,GT),e(GT,rve),e(rve,our),e(GT,rur),e(GT,QQ),e(QQ,tur),e(GT,aur),e(q,nur),e(q,OT),e(OT,tve),e(tve,sur),e(OT,lur),e(OT,HQ),e(HQ,iur),e(OT,dur),e(q,cur),e(q,VT),e(VT,ave),e(ave,fur),e(VT,mur),e(VT,UQ),e(UQ,gur),e(VT,hur),e(q,pur),e(q,XT),e(XT,nve),e(nve,uur),e(XT,_ur),e(XT,JQ),e(JQ,bur),e(XT,vur),e(q,Fur),e(q,zT),e(zT,sve),e(sve,Tur),e(zT,Mur),e(zT,YQ),e(YQ,Eur),e(zT,Cur),e(q,wur),e(q,WT),e(WT,lve),e(lve,Aur),e(WT,Lur),e(WT,KQ),e(KQ,yur),e(WT,xur),e(q,$ur),e(q,QT),e(QT,ive),e(ive,kur),e(QT,Sur),e(QT,ZQ),e(ZQ,Rur),e(QT,Pur),e(q,Bur),e(q,HT),e(HT,dve),e(dve,Iur),e(HT,Nur),e(HT,eH),e(eH,qur),e(HT,jur),e(q,Dur),e(q,UT),e(UT,cve),e(cve,Gur),e(UT,Our),e(UT,oH),e(oH,Vur),e(UT,Xur),e(q,zur),e(q,JT),e(JT,fve),e(fve,Wur),e(JT,Qur),e(JT,rH),e(rH,Hur),e(JT,Uur),e(q,Jur),e(q,YT),e(YT,mve),e(mve,Yur),e(YT,Kur),e(YT,tH),e(tH,Zur),e(YT,e_r),e(q,o_r),e(q,KT),e(KT,gve),e(gve,r_r),e(KT,t_r),e(KT,aH),e(aH,a_r),e(KT,n_r),e(q,s_r),e(q,ZT),e(ZT,hve),e(hve,l_r),e(ZT,i_r),e(ZT,nH),e(nH,d_r),e(ZT,c_r),e(q,f_r),e(q,e7),e(e7,pve),e(pve,m_r),e(e7,g_r),e(e7,sH),e(sH,h_r),e(e7,p_r),e(q,u_r),e(q,o7),e(o7,uve),e(uve,__r),e(o7,b_r),e(o7,lH),e(lH,v_r),e(o7,F_r),e(q,T_r),e(q,r7),e(r7,_ve),e(_ve,M_r),e(r7,E_r),e(r7,iH),e(iH,C_r),e(r7,w_r),e(q,A_r),e(q,t7),e(t7,bve),e(bve,L_r),e(t7,y_r),e(t7,dH),e(dH,x_r),e(t7,$_r),e(q,k_r),e(q,zs),e(zs,vve),e(vve,S_r),e(zs,R_r),e(zs,cH),e(cH,P_r),e(zs,B_r),e(zs,fH),e(fH,I_r),e(zs,N_r),e(q,q_r),e(q,a7),e(a7,Fve),e(Fve,j_r),e(a7,D_r),e(a7,mH),e(mH,G_r),e(a7,O_r),e(q,V_r),e(q,n7),e(n7,Tve),e(Tve,X_r),e(n7,z_r),e(n7,gH),e(gH,W_r),e(n7,Q_r),e(q,H_r),e(q,s7),e(s7,Mve),e(Mve,U_r),e(s7,J_r),e(s7,hH),e(hH,Y_r),e(s7,K_r),e(q,Z_r),e(q,l7),e(l7,Eve),e(Eve,e4r),e(l7,o4r),e(l7,pH),e(pH,r4r),e(l7,t4r),e(q,a4r),e(q,i7),e(i7,Cve),e(Cve,n4r),e(i7,s4r),e(i7,uH),e(uH,l4r),e(i7,i4r),e(q,d4r),e(q,d7),e(d7,wve),e(wve,c4r),e(d7,f4r),e(d7,_H),e(_H,m4r),e(d7,g4r),e(q,h4r),e(q,c7),e(c7,Ave),e(Ave,p4r),e(c7,u4r),e(c7,bH),e(bH,_4r),e(c7,b4r),e(q,v4r),e(q,f7),e(f7,Lve),e(Lve,F4r),e(f7,T4r),e(f7,vH),e(vH,M4r),e(f7,E4r),e(q,C4r),e(q,m7),e(m7,yve),e(yve,w4r),e(m7,A4r),e(m7,FH),e(FH,L4r),e(m7,y4r),e(q,x4r),e(q,g7),e(g7,xve),e(xve,$4r),e(g7,k4r),e(g7,TH),e(TH,S4r),e(g7,R4r),e(q,P4r),e(q,h7),e(h7,$ve),e($ve,B4r),e(h7,I4r),e(h7,MH),e(MH,N4r),e(h7,q4r),e(q,j4r),e(q,p7),e(p7,kve),e(kve,D4r),e(p7,G4r),e(p7,EH),e(EH,O4r),e(p7,V4r),e(q,X4r),e(q,u7),e(u7,Sve),e(Sve,z4r),e(u7,W4r),e(u7,CH),e(CH,Q4r),e(u7,H4r),e(q,U4r),e(q,_7),e(_7,Rve),e(Rve,J4r),e(_7,Y4r),e(_7,wH),e(wH,K4r),e(_7,Z4r),e(q,e1r),e(q,b7),e(b7,Pve),e(Pve,o1r),e(b7,r1r),e(b7,AH),e(AH,t1r),e(b7,a1r),e(q,n1r),e(q,v7),e(v7,Bve),e(Bve,s1r),e(v7,l1r),e(v7,LH),e(LH,i1r),e(v7,d1r),e(q,c1r),e(q,F7),e(F7,Ive),e(Ive,f1r),e(F7,m1r),e(F7,yH),e(yH,g1r),e(F7,h1r),e(q,p1r),e(q,T7),e(T7,Nve),e(Nve,u1r),e(T7,_1r),e(T7,xH),e(xH,b1r),e(T7,v1r),e(q,F1r),e(q,M7),e(M7,qve),e(qve,T1r),e(M7,M1r),e(M7,$H),e($H,E1r),e(M7,C1r),e(q,w1r),e(q,E7),e(E7,jve),e(jve,A1r),e(E7,L1r),e(E7,kH),e(kH,y1r),e(E7,x1r),e(q,$1r),e(q,C7),e(C7,Dve),e(Dve,k1r),e(C7,S1r),e(C7,SH),e(SH,R1r),e(C7,P1r),e(q,B1r),e(q,w7),e(w7,Gve),e(Gve,I1r),e(w7,N1r),e(w7,RH),e(RH,q1r),e(w7,j1r),e(q,D1r),e(q,A7),e(A7,Ove),e(Ove,G1r),e(A7,O1r),e(A7,PH),e(PH,V1r),e(A7,X1r),e(q,z1r),e(q,L7),e(L7,Vve),e(Vve,W1r),e(L7,Q1r),e(L7,BH),e(BH,H1r),e(L7,U1r),e(q,J1r),e(q,y7),e(y7,Xve),e(Xve,Y1r),e(y7,K1r),e(y7,IH),e(IH,Z1r),e(y7,e2r),e(q,o2r),e(q,x7),e(x7,zve),e(zve,r2r),e(x7,t2r),e(x7,NH),e(NH,a2r),e(x7,n2r),e(q,s2r),e(q,$7),e($7,Wve),e(Wve,l2r),e($7,i2r),e($7,qH),e(qH,d2r),e($7,c2r),e(q,f2r),e(q,k7),e(k7,Qve),e(Qve,m2r),e(k7,g2r),e(k7,jH),e(jH,h2r),e(k7,p2r),e(q,u2r),e(q,S7),e(S7,Hve),e(Hve,_2r),e(S7,b2r),e(S7,DH),e(DH,v2r),e(S7,F2r),e(Lr,T2r),M(R7,Lr,null),b(f,COe,_),b(f,tc,_),e(tc,P7),e(P7,Uve),M(h9,Uve,null),e(tc,M2r),e(tc,Jve),e(Jve,E2r),b(f,wOe,_),b(f,er,_),M(p9,er,null),e(er,C2r),e(er,ac),e(ac,w2r),e(ac,GH),e(GH,A2r),e(ac,L2r),e(ac,OH),e(OH,y2r),e(ac,x2r),e(er,$2r),e(er,u9),e(u9,k2r),e(u9,Yve),e(Yve,S2r),e(u9,R2r),e(er,P2r),e(er,kt),M(_9,kt,null),e(kt,B2r),e(kt,Kve),e(Kve,I2r),e(kt,N2r),e(kt,nc),e(nc,q2r),e(nc,Zve),e(Zve,j2r),e(nc,D2r),e(nc,VH),e(VH,G2r),e(nc,O2r),e(kt,V2r),M(B7,kt,null),e(er,X2r),e(er,yr),M(b9,yr,null),e(yr,z2r),e(yr,e3e),e(e3e,W2r),e(yr,Q2r),e(yr,an),e(an,H2r),e(an,o3e),e(o3e,U2r),e(an,J2r),e(an,r3e),e(r3e,Y2r),e(an,K2r),e(an,t3e),e(t3e,Z2r),e(an,ebr),e(yr,obr),e(yr,se),e(se,I7),e(I7,a3e),e(a3e,rbr),e(I7,tbr),e(I7,XH),e(XH,abr),e(I7,nbr),e(se,sbr),e(se,N7),e(N7,n3e),e(n3e,lbr),e(N7,ibr),e(N7,zH),e(zH,dbr),e(N7,cbr),e(se,fbr),e(se,q7),e(q7,s3e),e(s3e,mbr),e(q7,gbr),e(q7,WH),e(WH,hbr),e(q7,pbr),e(se,ubr),e(se,j7),e(j7,l3e),e(l3e,_br),e(j7,bbr),e(j7,QH),e(QH,vbr),e(j7,Fbr),e(se,Tbr),e(se,D7),e(D7,i3e),e(i3e,Mbr),e(D7,Ebr),e(D7,HH),e(HH,Cbr),e(D7,wbr),e(se,Abr),e(se,G7),e(G7,d3e),e(d3e,Lbr),e(G7,ybr),e(G7,UH),e(UH,xbr),e(G7,$br),e(se,kbr),e(se,O7),e(O7,c3e),e(c3e,Sbr),e(O7,Rbr),e(O7,JH),e(JH,Pbr),e(O7,Bbr),e(se,Ibr),e(se,V7),e(V7,f3e),e(f3e,Nbr),e(V7,qbr),e(V7,YH),e(YH,jbr),e(V7,Dbr),e(se,Gbr),e(se,X7),e(X7,m3e),e(m3e,Obr),e(X7,Vbr),e(X7,KH),e(KH,Xbr),e(X7,zbr),e(se,Wbr),e(se,z7),e(z7,g3e),e(g3e,Qbr),e(z7,Hbr),e(z7,ZH),e(ZH,Ubr),e(z7,Jbr),e(se,Ybr),e(se,W7),e(W7,h3e),e(h3e,Kbr),e(W7,Zbr),e(W7,eU),e(eU,evr),e(W7,ovr),e(se,rvr),e(se,Q7),e(Q7,p3e),e(p3e,tvr),e(Q7,avr),e(Q7,oU),e(oU,nvr),e(Q7,svr),e(se,lvr),e(se,H7),e(H7,u3e),e(u3e,ivr),e(H7,dvr),e(H7,rU),e(rU,cvr),e(H7,fvr),e(se,mvr),e(se,U7),e(U7,_3e),e(_3e,gvr),e(U7,hvr),e(U7,tU),e(tU,pvr),e(U7,uvr),e(se,_vr),e(se,J7),e(J7,b3e),e(b3e,bvr),e(J7,vvr),e(J7,aU),e(aU,Fvr),e(J7,Tvr),e(se,Mvr),e(se,Y7),e(Y7,v3e),e(v3e,Evr),e(Y7,Cvr),e(Y7,nU),e(nU,wvr),e(Y7,Avr),e(se,Lvr),e(se,K7),e(K7,F3e),e(F3e,yvr),e(K7,xvr),e(K7,sU),e(sU,$vr),e(K7,kvr),e(se,Svr),e(se,Z7),e(Z7,T3e),e(T3e,Rvr),e(Z7,Pvr),e(Z7,lU),e(lU,Bvr),e(Z7,Ivr),e(se,Nvr),e(se,eM),e(eM,M3e),e(M3e,qvr),e(eM,jvr),e(eM,iU),e(iU,Dvr),e(eM,Gvr),e(se,Ovr),e(se,oM),e(oM,E3e),e(E3e,Vvr),e(oM,Xvr),e(oM,dU),e(dU,zvr),e(oM,Wvr),e(se,Qvr),e(se,rM),e(rM,C3e),e(C3e,Hvr),e(rM,Uvr),e(rM,cU),e(cU,Jvr),e(rM,Yvr),e(se,Kvr),e(se,tM),e(tM,w3e),e(w3e,Zvr),e(tM,e3r),e(tM,fU),e(fU,o3r),e(tM,r3r),e(se,t3r),e(se,aM),e(aM,A3e),e(A3e,a3r),e(aM,n3r),e(aM,mU),e(mU,s3r),e(aM,l3r),e(yr,i3r),M(nM,yr,null),b(f,AOe,_),b(f,sc,_),e(sc,sM),e(sM,L3e),M(v9,L3e,null),e(sc,d3r),e(sc,y3e),e(y3e,c3r),b(f,LOe,_),b(f,or,_),M(F9,or,null),e(or,f3r),e(or,lc),e(lc,m3r),e(lc,gU),e(gU,g3r),e(lc,h3r),e(lc,hU),e(hU,p3r),e(lc,u3r),e(or,_3r),e(or,T9),e(T9,b3r),e(T9,x3e),e(x3e,v3r),e(T9,F3r),e(or,T3r),e(or,St),M(M9,St,null),e(St,M3r),e(St,$3e),e($3e,E3r),e(St,C3r),e(St,ic),e(ic,w3r),e(ic,k3e),e(k3e,A3r),e(ic,L3r),e(ic,pU),e(pU,y3r),e(ic,x3r),e(St,$3r),M(lM,St,null),e(or,k3r),e(or,xr),M(E9,xr,null),e(xr,S3r),e(xr,S3e),e(S3e,R3r),e(xr,P3r),e(xr,nn),e(nn,B3r),e(nn,R3e),e(R3e,I3r),e(nn,N3r),e(nn,P3e),e(P3e,q3r),e(nn,j3r),e(nn,B3e),e(B3e,D3r),e(nn,G3r),e(xr,O3r),e(xr,Me),e(Me,iM),e(iM,I3e),e(I3e,V3r),e(iM,X3r),e(iM,uU),e(uU,z3r),e(iM,W3r),e(Me,Q3r),e(Me,dM),e(dM,N3e),e(N3e,H3r),e(dM,U3r),e(dM,_U),e(_U,J3r),e(dM,Y3r),e(Me,K3r),e(Me,cM),e(cM,q3e),e(q3e,Z3r),e(cM,eFr),e(cM,bU),e(bU,oFr),e(cM,rFr),e(Me,tFr),e(Me,fM),e(fM,j3e),e(j3e,aFr),e(fM,nFr),e(fM,vU),e(vU,sFr),e(fM,lFr),e(Me,iFr),e(Me,mM),e(mM,D3e),e(D3e,dFr),e(mM,cFr),e(mM,FU),e(FU,fFr),e(mM,mFr),e(Me,gFr),e(Me,gM),e(gM,G3e),e(G3e,hFr),e(gM,pFr),e(gM,TU),e(TU,uFr),e(gM,_Fr),e(Me,bFr),e(Me,hM),e(hM,O3e),e(O3e,vFr),e(hM,FFr),e(hM,MU),e(MU,TFr),e(hM,MFr),e(Me,EFr),e(Me,pM),e(pM,V3e),e(V3e,CFr),e(pM,wFr),e(pM,EU),e(EU,AFr),e(pM,LFr),e(Me,yFr),e(Me,uM),e(uM,X3e),e(X3e,xFr),e(uM,$Fr),e(uM,CU),e(CU,kFr),e(uM,SFr),e(Me,RFr),e(Me,_M),e(_M,z3e),e(z3e,PFr),e(_M,BFr),e(_M,wU),e(wU,IFr),e(_M,NFr),e(Me,qFr),e(Me,bM),e(bM,W3e),e(W3e,jFr),e(bM,DFr),e(bM,AU),e(AU,GFr),e(bM,OFr),e(Me,VFr),e(Me,vM),e(vM,Q3e),e(Q3e,XFr),e(vM,zFr),e(vM,LU),e(LU,WFr),e(vM,QFr),e(Me,HFr),e(Me,FM),e(FM,H3e),e(H3e,UFr),e(FM,JFr),e(FM,yU),e(yU,YFr),e(FM,KFr),e(xr,ZFr),M(TM,xr,null),b(f,yOe,_),b(f,dc,_),e(dc,MM),e(MM,U3e),M(C9,U3e,null),e(dc,eTr),e(dc,J3e),e(J3e,oTr),b(f,xOe,_),b(f,rr,_),M(w9,rr,null),e(rr,rTr),e(rr,cc),e(cc,tTr),e(cc,xU),e(xU,aTr),e(cc,nTr),e(cc,$U),e($U,sTr),e(cc,lTr),e(rr,iTr),e(rr,A9),e(A9,dTr),e(A9,Y3e),e(Y3e,cTr),e(A9,fTr),e(rr,mTr),e(rr,Rt),M(L9,Rt,null),e(Rt,gTr),e(Rt,K3e),e(K3e,hTr),e(Rt,pTr),e(Rt,fc),e(fc,uTr),e(fc,Z3e),e(Z3e,_Tr),e(fc,bTr),e(fc,kU),e(kU,vTr),e(fc,FTr),e(Rt,TTr),M(EM,Rt,null),e(rr,MTr),e(rr,$r),M(y9,$r,null),e($r,ETr),e($r,eFe),e(eFe,CTr),e($r,wTr),e($r,sn),e(sn,ATr),e(sn,oFe),e(oFe,LTr),e(sn,yTr),e(sn,rFe),e(rFe,xTr),e(sn,$Tr),e(sn,tFe),e(tFe,kTr),e(sn,STr),e($r,RTr),e($r,ln),e(ln,CM),e(CM,aFe),e(aFe,PTr),e(CM,BTr),e(CM,SU),e(SU,ITr),e(CM,NTr),e(ln,qTr),e(ln,wM),e(wM,nFe),e(nFe,jTr),e(wM,DTr),e(wM,RU),e(RU,GTr),e(wM,OTr),e(ln,VTr),e(ln,AM),e(AM,sFe),e(sFe,XTr),e(AM,zTr),e(AM,PU),e(PU,WTr),e(AM,QTr),e(ln,HTr),e(ln,LM),e(LM,lFe),e(lFe,UTr),e(LM,JTr),e(LM,BU),e(BU,YTr),e(LM,KTr),e($r,ZTr),M(yM,$r,null),b(f,$Oe,_),b(f,mc,_),e(mc,xM),e(xM,iFe),M(x9,iFe,null),e(mc,e7r),e(mc,dFe),e(dFe,o7r),b(f,kOe,_),b(f,tr,_),M($9,tr,null),e(tr,r7r),e(tr,gc),e(gc,t7r),e(gc,IU),e(IU,a7r),e(gc,n7r),e(gc,NU),e(NU,s7r),e(gc,l7r),e(tr,i7r),e(tr,k9),e(k9,d7r),e(k9,cFe),e(cFe,c7r),e(k9,f7r),e(tr,m7r),e(tr,Pt),M(S9,Pt,null),e(Pt,g7r),e(Pt,fFe),e(fFe,h7r),e(Pt,p7r),e(Pt,hc),e(hc,u7r),e(hc,mFe),e(mFe,_7r),e(hc,b7r),e(hc,qU),e(qU,v7r),e(hc,F7r),e(Pt,T7r),M($M,Pt,null),e(tr,M7r),e(tr,kr),M(R9,kr,null),e(kr,E7r),e(kr,gFe),e(gFe,C7r),e(kr,w7r),e(kr,dn),e(dn,A7r),e(dn,hFe),e(hFe,L7r),e(dn,y7r),e(dn,pFe),e(pFe,x7r),e(dn,$7r),e(dn,uFe),e(uFe,k7r),e(dn,S7r),e(kr,R7r),e(kr,ie),e(ie,kM),e(kM,_Fe),e(_Fe,P7r),e(kM,B7r),e(kM,jU),e(jU,I7r),e(kM,N7r),e(ie,q7r),e(ie,SM),e(SM,bFe),e(bFe,j7r),e(SM,D7r),e(SM,DU),e(DU,G7r),e(SM,O7r),e(ie,V7r),e(ie,RM),e(RM,vFe),e(vFe,X7r),e(RM,z7r),e(RM,GU),e(GU,W7r),e(RM,Q7r),e(ie,H7r),e(ie,PM),e(PM,FFe),e(FFe,U7r),e(PM,J7r),e(PM,OU),e(OU,Y7r),e(PM,K7r),e(ie,Z7r),e(ie,BM),e(BM,TFe),e(TFe,eMr),e(BM,oMr),e(BM,VU),e(VU,rMr),e(BM,tMr),e(ie,aMr),e(ie,IM),e(IM,MFe),e(MFe,nMr),e(IM,sMr),e(IM,XU),e(XU,lMr),e(IM,iMr),e(ie,dMr),e(ie,NM),e(NM,EFe),e(EFe,cMr),e(NM,fMr),e(NM,zU),e(zU,mMr),e(NM,gMr),e(ie,hMr),e(ie,qM),e(qM,CFe),e(CFe,pMr),e(qM,uMr),e(qM,WU),e(WU,_Mr),e(qM,bMr),e(ie,vMr),e(ie,jM),e(jM,wFe),e(wFe,FMr),e(jM,TMr),e(jM,QU),e(QU,MMr),e(jM,EMr),e(ie,CMr),e(ie,DM),e(DM,AFe),e(AFe,wMr),e(DM,AMr),e(DM,HU),e(HU,LMr),e(DM,yMr),e(ie,xMr),e(ie,GM),e(GM,LFe),e(LFe,$Mr),e(GM,kMr),e(GM,UU),e(UU,SMr),e(GM,RMr),e(ie,PMr),e(ie,OM),e(OM,yFe),e(yFe,BMr),e(OM,IMr),e(OM,JU),e(JU,NMr),e(OM,qMr),e(ie,jMr),e(ie,VM),e(VM,xFe),e(xFe,DMr),e(VM,GMr),e(VM,YU),e(YU,OMr),e(VM,VMr),e(ie,XMr),e(ie,XM),e(XM,$Fe),e($Fe,zMr),e(XM,WMr),e(XM,KU),e(KU,QMr),e(XM,HMr),e(ie,UMr),e(ie,zM),e(zM,kFe),e(kFe,JMr),e(zM,YMr),e(zM,ZU),e(ZU,KMr),e(zM,ZMr),e(ie,eEr),e(ie,WM),e(WM,SFe),e(SFe,oEr),e(WM,rEr),e(WM,eJ),e(eJ,tEr),e(WM,aEr),e(ie,nEr),e(ie,QM),e(QM,RFe),e(RFe,sEr),e(QM,lEr),e(QM,oJ),e(oJ,iEr),e(QM,dEr),e(ie,cEr),e(ie,HM),e(HM,PFe),e(PFe,fEr),e(HM,mEr),e(HM,rJ),e(rJ,gEr),e(HM,hEr),e(ie,pEr),e(ie,UM),e(UM,BFe),e(BFe,uEr),e(UM,_Er),e(UM,tJ),e(tJ,bEr),e(UM,vEr),e(ie,FEr),e(ie,JM),e(JM,IFe),e(IFe,TEr),e(JM,MEr),e(JM,aJ),e(aJ,EEr),e(JM,CEr),e(kr,wEr),M(YM,kr,null),b(f,SOe,_),b(f,pc,_),e(pc,KM),e(KM,NFe),M(P9,NFe,null),e(pc,AEr),e(pc,qFe),e(qFe,LEr),b(f,ROe,_),b(f,ar,_),M(B9,ar,null),e(ar,yEr),e(ar,uc),e(uc,xEr),e(uc,nJ),e(nJ,$Er),e(uc,kEr),e(uc,sJ),e(sJ,SEr),e(uc,REr),e(ar,PEr),e(ar,I9),e(I9,BEr),e(I9,jFe),e(jFe,IEr),e(I9,NEr),e(ar,qEr),e(ar,Bt),M(N9,Bt,null),e(Bt,jEr),e(Bt,DFe),e(DFe,DEr),e(Bt,GEr),e(Bt,_c),e(_c,OEr),e(_c,GFe),e(GFe,VEr),e(_c,XEr),e(_c,lJ),e(lJ,zEr),e(_c,WEr),e(Bt,QEr),M(ZM,Bt,null),e(ar,HEr),e(ar,Sr),M(q9,Sr,null),e(Sr,UEr),e(Sr,OFe),e(OFe,JEr),e(Sr,YEr),e(Sr,cn),e(cn,KEr),e(cn,VFe),e(VFe,ZEr),e(cn,eCr),e(cn,XFe),e(XFe,oCr),e(cn,rCr),e(cn,zFe),e(zFe,tCr),e(cn,aCr),e(Sr,nCr),e(Sr,ye),e(ye,eE),e(eE,WFe),e(WFe,sCr),e(eE,lCr),e(eE,iJ),e(iJ,iCr),e(eE,dCr),e(ye,cCr),e(ye,oE),e(oE,QFe),e(QFe,fCr),e(oE,mCr),e(oE,dJ),e(dJ,gCr),e(oE,hCr),e(ye,pCr),e(ye,rE),e(rE,HFe),e(HFe,uCr),e(rE,_Cr),e(rE,cJ),e(cJ,bCr),e(rE,vCr),e(ye,FCr),e(ye,tE),e(tE,UFe),e(UFe,TCr),e(tE,MCr),e(tE,fJ),e(fJ,ECr),e(tE,CCr),e(ye,wCr),e(ye,aE),e(aE,JFe),e(JFe,ACr),e(aE,LCr),e(aE,mJ),e(mJ,yCr),e(aE,xCr),e(ye,$Cr),e(ye,nE),e(nE,YFe),e(YFe,kCr),e(nE,SCr),e(nE,gJ),e(gJ,RCr),e(nE,PCr),e(ye,BCr),e(ye,sE),e(sE,KFe),e(KFe,ICr),e(sE,NCr),e(sE,hJ),e(hJ,qCr),e(sE,jCr),e(ye,DCr),e(ye,lE),e(lE,ZFe),e(ZFe,GCr),e(lE,OCr),e(lE,pJ),e(pJ,VCr),e(lE,XCr),e(ye,zCr),e(ye,iE),e(iE,eTe),e(eTe,WCr),e(iE,QCr),e(iE,uJ),e(uJ,HCr),e(iE,UCr),e(ye,JCr),e(ye,dE),e(dE,oTe),e(oTe,YCr),e(dE,KCr),e(dE,_J),e(_J,ZCr),e(dE,e5r),e(Sr,o5r),M(cE,Sr,null),b(f,POe,_),b(f,bc,_),e(bc,fE),e(fE,rTe),M(j9,rTe,null),e(bc,r5r),e(bc,tTe),e(tTe,t5r),b(f,BOe,_),b(f,nr,_),M(D9,nr,null),e(nr,a5r),e(nr,vc),e(vc,n5r),e(vc,bJ),e(bJ,s5r),e(vc,l5r),e(vc,vJ),e(vJ,i5r),e(vc,d5r),e(nr,c5r),e(nr,G9),e(G9,f5r),e(G9,aTe),e(aTe,m5r),e(G9,g5r),e(nr,h5r),e(nr,It),M(O9,It,null),e(It,p5r),e(It,nTe),e(nTe,u5r),e(It,_5r),e(It,Fc),e(Fc,b5r),e(Fc,sTe),e(sTe,v5r),e(Fc,F5r),e(Fc,FJ),e(FJ,T5r),e(Fc,M5r),e(It,E5r),M(mE,It,null),e(nr,C5r),e(nr,Rr),M(V9,Rr,null),e(Rr,w5r),e(Rr,lTe),e(lTe,A5r),e(Rr,L5r),e(Rr,fn),e(fn,y5r),e(fn,iTe),e(iTe,x5r),e(fn,$5r),e(fn,dTe),e(dTe,k5r),e(fn,S5r),e(fn,cTe),e(cTe,R5r),e(fn,P5r),e(Rr,B5r),e(Rr,te),e(te,gE),e(gE,fTe),e(fTe,I5r),e(gE,N5r),e(gE,TJ),e(TJ,q5r),e(gE,j5r),e(te,D5r),e(te,hE),e(hE,mTe),e(mTe,G5r),e(hE,O5r),e(hE,MJ),e(MJ,V5r),e(hE,X5r),e(te,z5r),e(te,pE),e(pE,gTe),e(gTe,W5r),e(pE,Q5r),e(pE,EJ),e(EJ,H5r),e(pE,U5r),e(te,J5r),e(te,uE),e(uE,hTe),e(hTe,Y5r),e(uE,K5r),e(uE,CJ),e(CJ,Z5r),e(uE,e0r),e(te,o0r),e(te,_E),e(_E,pTe),e(pTe,r0r),e(_E,t0r),e(_E,wJ),e(wJ,a0r),e(_E,n0r),e(te,s0r),e(te,bE),e(bE,uTe),e(uTe,l0r),e(bE,i0r),e(bE,AJ),e(AJ,d0r),e(bE,c0r),e(te,f0r),e(te,vE),e(vE,_Te),e(_Te,m0r),e(vE,g0r),e(vE,LJ),e(LJ,h0r),e(vE,p0r),e(te,u0r),e(te,FE),e(FE,bTe),e(bTe,_0r),e(FE,b0r),e(FE,yJ),e(yJ,v0r),e(FE,F0r),e(te,T0r),e(te,TE),e(TE,vTe),e(vTe,M0r),e(TE,E0r),e(TE,xJ),e(xJ,C0r),e(TE,w0r),e(te,A0r),e(te,ME),e(ME,FTe),e(FTe,L0r),e(ME,y0r),e(ME,$J),e($J,x0r),e(ME,$0r),e(te,k0r),e(te,EE),e(EE,TTe),e(TTe,S0r),e(EE,R0r),e(EE,kJ),e(kJ,P0r),e(EE,B0r),e(te,I0r),e(te,CE),e(CE,MTe),e(MTe,N0r),e(CE,q0r),e(CE,SJ),e(SJ,j0r),e(CE,D0r),e(te,G0r),e(te,wE),e(wE,ETe),e(ETe,O0r),e(wE,V0r),e(wE,RJ),e(RJ,X0r),e(wE,z0r),e(te,W0r),e(te,AE),e(AE,CTe),e(CTe,Q0r),e(AE,H0r),e(AE,PJ),e(PJ,U0r),e(AE,J0r),e(te,Y0r),e(te,LE),e(LE,wTe),e(wTe,K0r),e(LE,Z0r),e(LE,BJ),e(BJ,ewr),e(LE,owr),e(te,rwr),e(te,yE),e(yE,ATe),e(ATe,twr),e(yE,awr),e(yE,IJ),e(IJ,nwr),e(yE,swr),e(te,lwr),e(te,xE),e(xE,LTe),e(LTe,iwr),e(xE,dwr),e(xE,NJ),e(NJ,cwr),e(xE,fwr),e(te,mwr),e(te,$E),e($E,yTe),e(yTe,gwr),e($E,hwr),e($E,qJ),e(qJ,pwr),e($E,uwr),e(te,_wr),e(te,kE),e(kE,xTe),e(xTe,bwr),e(kE,vwr),e(kE,jJ),e(jJ,Fwr),e(kE,Twr),e(te,Mwr),e(te,SE),e(SE,$Te),e($Te,Ewr),e(SE,Cwr),e(SE,DJ),e(DJ,wwr),e(SE,Awr),e(te,Lwr),e(te,RE),e(RE,kTe),e(kTe,ywr),e(RE,xwr),e(RE,GJ),e(GJ,$wr),e(RE,kwr),e(te,Swr),e(te,PE),e(PE,STe),e(STe,Rwr),e(PE,Pwr),e(PE,OJ),e(OJ,Bwr),e(PE,Iwr),e(te,Nwr),e(te,BE),e(BE,RTe),e(RTe,qwr),e(BE,jwr),e(BE,VJ),e(VJ,Dwr),e(BE,Gwr),e(te,Owr),e(te,IE),e(IE,PTe),e(PTe,Vwr),e(IE,Xwr),e(IE,XJ),e(XJ,zwr),e(IE,Wwr),e(te,Qwr),e(te,NE),e(NE,BTe),e(BTe,Hwr),e(NE,Uwr),e(NE,zJ),e(zJ,Jwr),e(NE,Ywr),e(te,Kwr),e(te,qE),e(qE,ITe),e(ITe,Zwr),e(qE,eAr),e(qE,WJ),e(WJ,oAr),e(qE,rAr),e(Rr,tAr),M(jE,Rr,null),b(f,IOe,_),b(f,Tc,_),e(Tc,DE),e(DE,NTe),M(X9,NTe,null),e(Tc,aAr),e(Tc,qTe),e(qTe,nAr),b(f,NOe,_),b(f,sr,_),M(z9,sr,null),e(sr,sAr),e(sr,Mc),e(Mc,lAr),e(Mc,QJ),e(QJ,iAr),e(Mc,dAr),e(Mc,HJ),e(HJ,cAr),e(Mc,fAr),e(sr,mAr),e(sr,W9),e(W9,gAr),e(W9,jTe),e(jTe,hAr),e(W9,pAr),e(sr,uAr),e(sr,Nt),M(Q9,Nt,null),e(Nt,_Ar),e(Nt,DTe),e(DTe,bAr),e(Nt,vAr),e(Nt,Ec),e(Ec,FAr),e(Ec,GTe),e(GTe,TAr),e(Ec,MAr),e(Ec,UJ),e(UJ,EAr),e(Ec,CAr),e(Nt,wAr),M(GE,Nt,null),e(sr,AAr),e(sr,Pr),M(H9,Pr,null),e(Pr,LAr),e(Pr,OTe),e(OTe,yAr),e(Pr,xAr),e(Pr,mn),e(mn,$Ar),e(mn,VTe),e(VTe,kAr),e(mn,SAr),e(mn,XTe),e(XTe,RAr),e(mn,PAr),e(mn,zTe),e(zTe,BAr),e(mn,IAr),e(Pr,NAr),e(Pr,ue),e(ue,OE),e(OE,WTe),e(WTe,qAr),e(OE,jAr),e(OE,JJ),e(JJ,DAr),e(OE,GAr),e(ue,OAr),e(ue,VE),e(VE,QTe),e(QTe,VAr),e(VE,XAr),e(VE,YJ),e(YJ,zAr),e(VE,WAr),e(ue,QAr),e(ue,XE),e(XE,HTe),e(HTe,HAr),e(XE,UAr),e(XE,KJ),e(KJ,JAr),e(XE,YAr),e(ue,KAr),e(ue,zE),e(zE,UTe),e(UTe,ZAr),e(zE,e6r),e(zE,ZJ),e(ZJ,o6r),e(zE,r6r),e(ue,t6r),e(ue,WE),e(WE,JTe),e(JTe,a6r),e(WE,n6r),e(WE,eY),e(eY,s6r),e(WE,l6r),e(ue,i6r),e(ue,QE),e(QE,YTe),e(YTe,d6r),e(QE,c6r),e(QE,oY),e(oY,f6r),e(QE,m6r),e(ue,g6r),e(ue,HE),e(HE,KTe),e(KTe,h6r),e(HE,p6r),e(HE,rY),e(rY,u6r),e(HE,_6r),e(ue,b6r),e(ue,UE),e(UE,ZTe),e(ZTe,v6r),e(UE,F6r),e(UE,tY),e(tY,T6r),e(UE,M6r),e(ue,E6r),e(ue,JE),e(JE,e7e),e(e7e,C6r),e(JE,w6r),e(JE,aY),e(aY,A6r),e(JE,L6r),e(ue,y6r),e(ue,YE),e(YE,o7e),e(o7e,x6r),e(YE,$6r),e(YE,nY),e(nY,k6r),e(YE,S6r),e(ue,R6r),e(ue,KE),e(KE,r7e),e(r7e,P6r),e(KE,B6r),e(KE,sY),e(sY,I6r),e(KE,N6r),e(ue,q6r),e(ue,ZE),e(ZE,t7e),e(t7e,j6r),e(ZE,D6r),e(ZE,lY),e(lY,G6r),e(ZE,O6r),e(ue,V6r),e(ue,eC),e(eC,a7e),e(a7e,X6r),e(eC,z6r),e(eC,iY),e(iY,W6r),e(eC,Q6r),e(ue,H6r),e(ue,oC),e(oC,n7e),e(n7e,U6r),e(oC,J6r),e(oC,dY),e(dY,Y6r),e(oC,K6r),e(ue,Z6r),e(ue,rC),e(rC,s7e),e(s7e,eLr),e(rC,oLr),e(rC,cY),e(cY,rLr),e(rC,tLr),e(ue,aLr),e(ue,tC),e(tC,l7e),e(l7e,nLr),e(tC,sLr),e(tC,fY),e(fY,lLr),e(tC,iLr),e(ue,dLr),e(ue,aC),e(aC,i7e),e(i7e,cLr),e(aC,fLr),e(aC,mY),e(mY,mLr),e(aC,gLr),e(Pr,hLr),M(nC,Pr,null),b(f,qOe,_),b(f,Cc,_),e(Cc,sC),e(sC,d7e),M(U9,d7e,null),e(Cc,pLr),e(Cc,c7e),e(c7e,uLr),b(f,jOe,_),b(f,lr,_),M(J9,lr,null),e(lr,_Lr),e(lr,wc),e(wc,bLr),e(wc,gY),e(gY,vLr),e(wc,FLr),e(wc,hY),e(hY,TLr),e(wc,MLr),e(lr,ELr),e(lr,Y9),e(Y9,CLr),e(Y9,f7e),e(f7e,wLr),e(Y9,ALr),e(lr,LLr),e(lr,qt),M(K9,qt,null),e(qt,yLr),e(qt,m7e),e(m7e,xLr),e(qt,$Lr),e(qt,Ac),e(Ac,kLr),e(Ac,g7e),e(g7e,SLr),e(Ac,RLr),e(Ac,pY),e(pY,PLr),e(Ac,BLr),e(qt,ILr),M(lC,qt,null),e(lr,NLr),e(lr,Br),M(Z9,Br,null),e(Br,qLr),e(Br,h7e),e(h7e,jLr),e(Br,DLr),e(Br,gn),e(gn,GLr),e(gn,p7e),e(p7e,OLr),e(gn,VLr),e(gn,u7e),e(u7e,XLr),e(gn,zLr),e(gn,_7e),e(_7e,WLr),e(gn,QLr),e(Br,HLr),e(Br,ex),e(ex,iC),e(iC,b7e),e(b7e,ULr),e(iC,JLr),e(iC,uY),e(uY,YLr),e(iC,KLr),e(ex,ZLr),e(ex,dC),e(dC,v7e),e(v7e,eyr),e(dC,oyr),e(dC,_Y),e(_Y,ryr),e(dC,tyr),e(Br,ayr),M(cC,Br,null),b(f,DOe,_),b(f,Lc,_),e(Lc,fC),e(fC,F7e),M(ox,F7e,null),e(Lc,nyr),e(Lc,T7e),e(T7e,syr),b(f,GOe,_),b(f,ir,_),M(rx,ir,null),e(ir,lyr),e(ir,yc),e(yc,iyr),e(yc,bY),e(bY,dyr),e(yc,cyr),e(yc,vY),e(vY,fyr),e(yc,myr),e(ir,gyr),e(ir,tx),e(tx,hyr),e(tx,M7e),e(M7e,pyr),e(tx,uyr),e(ir,_yr),e(ir,jt),M(ax,jt,null),e(jt,byr),e(jt,E7e),e(E7e,vyr),e(jt,Fyr),e(jt,xc),e(xc,Tyr),e(xc,C7e),e(C7e,Myr),e(xc,Eyr),e(xc,FY),e(FY,Cyr),e(xc,wyr),e(jt,Ayr),M(mC,jt,null),e(ir,Lyr),e(ir,Ir),M(nx,Ir,null),e(Ir,yyr),e(Ir,w7e),e(w7e,xyr),e(Ir,$yr),e(Ir,hn),e(hn,kyr),e(hn,A7e),e(A7e,Syr),e(hn,Ryr),e(hn,L7e),e(L7e,Pyr),e(hn,Byr),e(hn,y7e),e(y7e,Iyr),e(hn,Nyr),e(Ir,qyr),e(Ir,x7e),e(x7e,gC),e(gC,$7e),e($7e,jyr),e(gC,Dyr),e(gC,TY),e(TY,Gyr),e(gC,Oyr),e(Ir,Vyr),M(hC,Ir,null),b(f,OOe,_),b(f,$c,_),e($c,pC),e(pC,k7e),M(sx,k7e,null),e($c,Xyr),e($c,S7e),e(S7e,zyr),b(f,VOe,_),b(f,dr,_),M(lx,dr,null),e(dr,Wyr),e(dr,kc),e(kc,Qyr),e(kc,MY),e(MY,Hyr),e(kc,Uyr),e(kc,EY),e(EY,Jyr),e(kc,Yyr),e(dr,Kyr),e(dr,ix),e(ix,Zyr),e(ix,R7e),e(R7e,e8r),e(ix,o8r),e(dr,r8r),e(dr,Dt),M(dx,Dt,null),e(Dt,t8r),e(Dt,P7e),e(P7e,a8r),e(Dt,n8r),e(Dt,Sc),e(Sc,s8r),e(Sc,B7e),e(B7e,l8r),e(Sc,i8r),e(Sc,CY),e(CY,d8r),e(Sc,c8r),e(Dt,f8r),M(uC,Dt,null),e(dr,m8r),e(dr,Nr),M(cx,Nr,null),e(Nr,g8r),e(Nr,I7e),e(I7e,h8r),e(Nr,p8r),e(Nr,pn),e(pn,u8r),e(pn,N7e),e(N7e,_8r),e(pn,b8r),e(pn,q7e),e(q7e,v8r),e(pn,F8r),e(pn,j7e),e(j7e,T8r),e(pn,M8r),e(Nr,E8r),e(Nr,de),e(de,_C),e(_C,D7e),e(D7e,C8r),e(_C,w8r),e(_C,wY),e(wY,A8r),e(_C,L8r),e(de,y8r),e(de,bC),e(bC,G7e),e(G7e,x8r),e(bC,$8r),e(bC,AY),e(AY,k8r),e(bC,S8r),e(de,R8r),e(de,vC),e(vC,O7e),e(O7e,P8r),e(vC,B8r),e(vC,LY),e(LY,I8r),e(vC,N8r),e(de,q8r),e(de,FC),e(FC,V7e),e(V7e,j8r),e(FC,D8r),e(FC,yY),e(yY,G8r),e(FC,O8r),e(de,V8r),e(de,TC),e(TC,X7e),e(X7e,X8r),e(TC,z8r),e(TC,xY),e(xY,W8r),e(TC,Q8r),e(de,H8r),e(de,MC),e(MC,z7e),e(z7e,U8r),e(MC,J8r),e(MC,$Y),e($Y,Y8r),e(MC,K8r),e(de,Z8r),e(de,EC),e(EC,W7e),e(W7e,e9r),e(EC,o9r),e(EC,kY),e(kY,r9r),e(EC,t9r),e(de,a9r),e(de,CC),e(CC,Q7e),e(Q7e,n9r),e(CC,s9r),e(CC,SY),e(SY,l9r),e(CC,i9r),e(de,d9r),e(de,wC),e(wC,H7e),e(H7e,c9r),e(wC,f9r),e(wC,RY),e(RY,m9r),e(wC,g9r),e(de,h9r),e(de,AC),e(AC,U7e),e(U7e,p9r),e(AC,u9r),e(AC,PY),e(PY,_9r),e(AC,b9r),e(de,v9r),e(de,LC),e(LC,J7e),e(J7e,F9r),e(LC,T9r),e(LC,BY),e(BY,M9r),e(LC,E9r),e(de,C9r),e(de,yC),e(yC,Y7e),e(Y7e,w9r),e(yC,A9r),e(yC,IY),e(IY,L9r),e(yC,y9r),e(de,x9r),e(de,xC),e(xC,K7e),e(K7e,$9r),e(xC,k9r),e(xC,NY),e(NY,S9r),e(xC,R9r),e(de,P9r),e(de,$C),e($C,Z7e),e(Z7e,B9r),e($C,I9r),e($C,qY),e(qY,N9r),e($C,q9r),e(de,j9r),e(de,kC),e(kC,eMe),e(eMe,D9r),e(kC,G9r),e(kC,jY),e(jY,O9r),e(kC,V9r),e(de,X9r),e(de,SC),e(SC,oMe),e(oMe,z9r),e(SC,W9r),e(SC,DY),e(DY,Q9r),e(SC,H9r),e(de,U9r),e(de,RC),e(RC,rMe),e(rMe,J9r),e(RC,Y9r),e(RC,GY),e(GY,K9r),e(RC,Z9r),e(de,exr),e(de,PC),e(PC,tMe),e(tMe,oxr),e(PC,rxr),e(PC,OY),e(OY,txr),e(PC,axr),e(de,nxr),e(de,BC),e(BC,aMe),e(aMe,sxr),e(BC,lxr),e(BC,VY),e(VY,ixr),e(BC,dxr),e(de,cxr),e(de,IC),e(IC,nMe),e(nMe,fxr),e(IC,mxr),e(IC,XY),e(XY,gxr),e(IC,hxr),e(Nr,pxr),M(NC,Nr,null),b(f,XOe,_),b(f,Rc,_),e(Rc,qC),e(qC,sMe),M(fx,sMe,null),e(Rc,uxr),e(Rc,lMe),e(lMe,_xr),b(f,zOe,_),b(f,cr,_),M(mx,cr,null),e(cr,bxr),e(cr,Pc),e(Pc,vxr),e(Pc,zY),e(zY,Fxr),e(Pc,Txr),e(Pc,WY),e(WY,Mxr),e(Pc,Exr),e(cr,Cxr),e(cr,gx),e(gx,wxr),e(gx,iMe),e(iMe,Axr),e(gx,Lxr),e(cr,yxr),e(cr,Gt),M(hx,Gt,null),e(Gt,xxr),e(Gt,dMe),e(dMe,$xr),e(Gt,kxr),e(Gt,Bc),e(Bc,Sxr),e(Bc,cMe),e(cMe,Rxr),e(Bc,Pxr),e(Bc,QY),e(QY,Bxr),e(Bc,Ixr),e(Gt,Nxr),M(jC,Gt,null),e(cr,qxr),e(cr,qr),M(px,qr,null),e(qr,jxr),e(qr,fMe),e(fMe,Dxr),e(qr,Gxr),e(qr,un),e(un,Oxr),e(un,mMe),e(mMe,Vxr),e(un,Xxr),e(un,gMe),e(gMe,zxr),e(un,Wxr),e(un,hMe),e(hMe,Qxr),e(un,Hxr),e(qr,Uxr),e(qr,ce),e(ce,DC),e(DC,pMe),e(pMe,Jxr),e(DC,Yxr),e(DC,HY),e(HY,Kxr),e(DC,Zxr),e(ce,e$r),e(ce,GC),e(GC,uMe),e(uMe,o$r),e(GC,r$r),e(GC,UY),e(UY,t$r),e(GC,a$r),e(ce,n$r),e(ce,OC),e(OC,_Me),e(_Me,s$r),e(OC,l$r),e(OC,JY),e(JY,i$r),e(OC,d$r),e(ce,c$r),e(ce,VC),e(VC,bMe),e(bMe,f$r),e(VC,m$r),e(VC,YY),e(YY,g$r),e(VC,h$r),e(ce,p$r),e(ce,XC),e(XC,vMe),e(vMe,u$r),e(XC,_$r),e(XC,KY),e(KY,b$r),e(XC,v$r),e(ce,F$r),e(ce,zC),e(zC,FMe),e(FMe,T$r),e(zC,M$r),e(zC,ZY),e(ZY,E$r),e(zC,C$r),e(ce,w$r),e(ce,WC),e(WC,TMe),e(TMe,A$r),e(WC,L$r),e(WC,eK),e(eK,y$r),e(WC,x$r),e(ce,$$r),e(ce,QC),e(QC,MMe),e(MMe,k$r),e(QC,S$r),e(QC,oK),e(oK,R$r),e(QC,P$r),e(ce,B$r),e(ce,HC),e(HC,EMe),e(EMe,I$r),e(HC,N$r),e(HC,rK),e(rK,q$r),e(HC,j$r),e(ce,D$r),e(ce,UC),e(UC,CMe),e(CMe,G$r),e(UC,O$r),e(UC,tK),e(tK,V$r),e(UC,X$r),e(ce,z$r),e(ce,JC),e(JC,wMe),e(wMe,W$r),e(JC,Q$r),e(JC,aK),e(aK,H$r),e(JC,U$r),e(ce,J$r),e(ce,YC),e(YC,AMe),e(AMe,Y$r),e(YC,K$r),e(YC,nK),e(nK,Z$r),e(YC,ekr),e(ce,okr),e(ce,KC),e(KC,LMe),e(LMe,rkr),e(KC,tkr),e(KC,sK),e(sK,akr),e(KC,nkr),e(ce,skr),e(ce,ZC),e(ZC,yMe),e(yMe,lkr),e(ZC,ikr),e(ZC,lK),e(lK,dkr),e(ZC,ckr),e(ce,fkr),e(ce,e5),e(e5,xMe),e(xMe,mkr),e(e5,gkr),e(e5,iK),e(iK,hkr),e(e5,pkr),e(ce,ukr),e(ce,o5),e(o5,$Me),e($Me,_kr),e(o5,bkr),e(o5,dK),e(dK,vkr),e(o5,Fkr),e(ce,Tkr),e(ce,r5),e(r5,kMe),e(kMe,Mkr),e(r5,Ekr),e(r5,cK),e(cK,Ckr),e(r5,wkr),e(ce,Akr),e(ce,t5),e(t5,SMe),e(SMe,Lkr),e(t5,ykr),e(t5,fK),e(fK,xkr),e(t5,$kr),e(ce,kkr),e(ce,a5),e(a5,RMe),e(RMe,Skr),e(a5,Rkr),e(a5,mK),e(mK,Pkr),e(a5,Bkr),e(ce,Ikr),e(ce,n5),e(n5,PMe),e(PMe,Nkr),e(n5,qkr),e(n5,gK),e(gK,jkr),e(n5,Dkr),e(qr,Gkr),M(s5,qr,null),b(f,WOe,_),b(f,Ic,_),e(Ic,l5),e(l5,BMe),M(ux,BMe,null),e(Ic,Okr),e(Ic,IMe),e(IMe,Vkr),b(f,QOe,_),b(f,fr,_),M(_x,fr,null),e(fr,Xkr),e(fr,Nc),e(Nc,zkr),e(Nc,hK),e(hK,Wkr),e(Nc,Qkr),e(Nc,pK),e(pK,Hkr),e(Nc,Ukr),e(fr,Jkr),e(fr,bx),e(bx,Ykr),e(bx,NMe),e(NMe,Kkr),e(bx,Zkr),e(fr,eSr),e(fr,Ot),M(vx,Ot,null),e(Ot,oSr),e(Ot,qMe),e(qMe,rSr),e(Ot,tSr),e(Ot,qc),e(qc,aSr),e(qc,jMe),e(jMe,nSr),e(qc,sSr),e(qc,uK),e(uK,lSr),e(qc,iSr),e(Ot,dSr),M(i5,Ot,null),e(fr,cSr),e(fr,jr),M(Fx,jr,null),e(jr,fSr),e(jr,DMe),e(DMe,mSr),e(jr,gSr),e(jr,_n),e(_n,hSr),e(_n,GMe),e(GMe,pSr),e(_n,uSr),e(_n,OMe),e(OMe,_Sr),e(_n,bSr),e(_n,VMe),e(VMe,vSr),e(_n,FSr),e(jr,TSr),e(jr,XMe),e(XMe,d5),e(d5,zMe),e(zMe,MSr),e(d5,ESr),e(d5,_K),e(_K,CSr),e(d5,wSr),e(jr,ASr),M(c5,jr,null),b(f,HOe,_),b(f,jc,_),e(jc,f5),e(f5,WMe),M(Tx,WMe,null),e(jc,LSr),e(jc,QMe),e(QMe,ySr),b(f,UOe,_),b(f,mr,_),M(Mx,mr,null),e(mr,xSr),e(mr,Dc),e(Dc,$Sr),e(Dc,bK),e(bK,kSr),e(Dc,SSr),e(Dc,vK),e(vK,RSr),e(Dc,PSr),e(mr,BSr),e(mr,Ex),e(Ex,ISr),e(Ex,HMe),e(HMe,NSr),e(Ex,qSr),e(mr,jSr),e(mr,Vt),M(Cx,Vt,null),e(Vt,DSr),e(Vt,UMe),e(UMe,GSr),e(Vt,OSr),e(Vt,Gc),e(Gc,VSr),e(Gc,JMe),e(JMe,XSr),e(Gc,zSr),e(Gc,FK),e(FK,WSr),e(Gc,QSr),e(Vt,HSr),M(m5,Vt,null),e(mr,USr),e(mr,Dr),M(wx,Dr,null),e(Dr,JSr),e(Dr,YMe),e(YMe,YSr),e(Dr,KSr),e(Dr,bn),e(bn,ZSr),e(bn,KMe),e(KMe,eRr),e(bn,oRr),e(bn,ZMe),e(ZMe,rRr),e(bn,tRr),e(bn,eEe),e(eEe,aRr),e(bn,nRr),e(Dr,sRr),e(Dr,oEe),e(oEe,g5),e(g5,rEe),e(rEe,lRr),e(g5,iRr),e(g5,TK),e(TK,dRr),e(g5,cRr),e(Dr,fRr),M(h5,Dr,null),b(f,JOe,_),b(f,Oc,_),e(Oc,p5),e(p5,tEe),M(Ax,tEe,null),e(Oc,mRr),e(Oc,aEe),e(aEe,gRr),b(f,YOe,_),b(f,gr,_),M(Lx,gr,null),e(gr,hRr),e(gr,Vc),e(Vc,pRr),e(Vc,MK),e(MK,uRr),e(Vc,_Rr),e(Vc,EK),e(EK,bRr),e(Vc,vRr),e(gr,FRr),e(gr,yx),e(yx,TRr),e(yx,nEe),e(nEe,MRr),e(yx,ERr),e(gr,CRr),e(gr,Xt),M(xx,Xt,null),e(Xt,wRr),e(Xt,sEe),e(sEe,ARr),e(Xt,LRr),e(Xt,Xc),e(Xc,yRr),e(Xc,lEe),e(lEe,xRr),e(Xc,$Rr),e(Xc,CK),e(CK,kRr),e(Xc,SRr),e(Xt,RRr),M(u5,Xt,null),e(gr,PRr),e(gr,Gr),M($x,Gr,null),e(Gr,BRr),e(Gr,iEe),e(iEe,IRr),e(Gr,NRr),e(Gr,vn),e(vn,qRr),e(vn,dEe),e(dEe,jRr),e(vn,DRr),e(vn,cEe),e(cEe,GRr),e(vn,ORr),e(vn,fEe),e(fEe,VRr),e(vn,XRr),e(Gr,zRr),e(Gr,oe),e(oe,_5),e(_5,mEe),e(mEe,WRr),e(_5,QRr),e(_5,wK),e(wK,HRr),e(_5,URr),e(oe,JRr),e(oe,b5),e(b5,gEe),e(gEe,YRr),e(b5,KRr),e(b5,AK),e(AK,ZRr),e(b5,ePr),e(oe,oPr),e(oe,v5),e(v5,hEe),e(hEe,rPr),e(v5,tPr),e(v5,LK),e(LK,aPr),e(v5,nPr),e(oe,sPr),e(oe,F5),e(F5,pEe),e(pEe,lPr),e(F5,iPr),e(F5,yK),e(yK,dPr),e(F5,cPr),e(oe,fPr),e(oe,T5),e(T5,uEe),e(uEe,mPr),e(T5,gPr),e(T5,xK),e(xK,hPr),e(T5,pPr),e(oe,uPr),e(oe,M5),e(M5,_Ee),e(_Ee,_Pr),e(M5,bPr),e(M5,$K),e($K,vPr),e(M5,FPr),e(oe,TPr),e(oe,E5),e(E5,bEe),e(bEe,MPr),e(E5,EPr),e(E5,kK),e(kK,CPr),e(E5,wPr),e(oe,APr),e(oe,C5),e(C5,vEe),e(vEe,LPr),e(C5,yPr),e(C5,SK),e(SK,xPr),e(C5,$Pr),e(oe,kPr),e(oe,w5),e(w5,FEe),e(FEe,SPr),e(w5,RPr),e(w5,RK),e(RK,PPr),e(w5,BPr),e(oe,IPr),e(oe,A5),e(A5,TEe),e(TEe,NPr),e(A5,qPr),e(A5,PK),e(PK,jPr),e(A5,DPr),e(oe,GPr),e(oe,L5),e(L5,MEe),e(MEe,OPr),e(L5,VPr),e(L5,BK),e(BK,XPr),e(L5,zPr),e(oe,WPr),e(oe,y5),e(y5,EEe),e(EEe,QPr),e(y5,HPr),e(y5,IK),e(IK,UPr),e(y5,JPr),e(oe,YPr),e(oe,x5),e(x5,CEe),e(CEe,KPr),e(x5,ZPr),e(x5,NK),e(NK,eBr),e(x5,oBr),e(oe,rBr),e(oe,$5),e($5,wEe),e(wEe,tBr),e($5,aBr),e($5,qK),e(qK,nBr),e($5,sBr),e(oe,lBr),e(oe,k5),e(k5,AEe),e(AEe,iBr),e(k5,dBr),e(k5,jK),e(jK,cBr),e(k5,fBr),e(oe,mBr),e(oe,S5),e(S5,LEe),e(LEe,gBr),e(S5,hBr),e(S5,DK),e(DK,pBr),e(S5,uBr),e(oe,_Br),e(oe,R5),e(R5,yEe),e(yEe,bBr),e(R5,vBr),e(R5,GK),e(GK,FBr),e(R5,TBr),e(oe,MBr),e(oe,P5),e(P5,xEe),e(xEe,EBr),e(P5,CBr),e(P5,OK),e(OK,wBr),e(P5,ABr),e(oe,LBr),e(oe,B5),e(B5,$Ee),e($Ee,yBr),e(B5,xBr),e(B5,VK),e(VK,$Br),e(B5,kBr),e(oe,SBr),e(oe,I5),e(I5,kEe),e(kEe,RBr),e(I5,PBr),e(I5,XK),e(XK,BBr),e(I5,IBr),e(oe,NBr),e(oe,N5),e(N5,SEe),e(SEe,qBr),e(N5,jBr),e(N5,zK),e(zK,DBr),e(N5,GBr),e(oe,OBr),e(oe,q5),e(q5,REe),e(REe,VBr),e(q5,XBr),e(q5,WK),e(WK,zBr),e(q5,WBr),e(oe,QBr),e(oe,j5),e(j5,PEe),e(PEe,HBr),e(j5,UBr),e(j5,QK),e(QK,JBr),e(j5,YBr),e(oe,KBr),e(oe,D5),e(D5,BEe),e(BEe,ZBr),e(D5,eIr),e(D5,HK),e(HK,oIr),e(D5,rIr),e(oe,tIr),e(oe,G5),e(G5,IEe),e(IEe,aIr),e(G5,nIr),e(G5,UK),e(UK,sIr),e(G5,lIr),e(oe,iIr),e(oe,O5),e(O5,NEe),e(NEe,dIr),e(O5,cIr),e(O5,JK),e(JK,fIr),e(O5,mIr),e(oe,gIr),e(oe,V5),e(V5,qEe),e(qEe,hIr),e(V5,pIr),e(V5,YK),e(YK,uIr),e(V5,_Ir),e(Gr,bIr),M(X5,Gr,null),b(f,KOe,_),b(f,zc,_),e(zc,z5),e(z5,jEe),M(kx,jEe,null),e(zc,vIr),e(zc,DEe),e(DEe,FIr),b(f,ZOe,_),b(f,hr,_),M(Sx,hr,null),e(hr,TIr),e(hr,Wc),e(Wc,MIr),e(Wc,KK),e(KK,EIr),e(Wc,CIr),e(Wc,ZK),e(ZK,wIr),e(Wc,AIr),e(hr,LIr),e(hr,Rx),e(Rx,yIr),e(Rx,GEe),e(GEe,xIr),e(Rx,$Ir),e(hr,kIr),e(hr,zt),M(Px,zt,null),e(zt,SIr),e(zt,OEe),e(OEe,RIr),e(zt,PIr),e(zt,Qc),e(Qc,BIr),e(Qc,VEe),e(VEe,IIr),e(Qc,NIr),e(Qc,eZ),e(eZ,qIr),e(Qc,jIr),e(zt,DIr),M(W5,zt,null),e(hr,GIr),e(hr,Or),M(Bx,Or,null),e(Or,OIr),e(Or,XEe),e(XEe,VIr),e(Or,XIr),e(Or,Fn),e(Fn,zIr),e(Fn,zEe),e(zEe,WIr),e(Fn,QIr),e(Fn,WEe),e(WEe,HIr),e(Fn,UIr),e(Fn,QEe),e(QEe,JIr),e(Fn,YIr),e(Or,KIr),e(Or,xe),e(xe,Q5),e(Q5,HEe),e(HEe,ZIr),e(Q5,eNr),e(Q5,oZ),e(oZ,oNr),e(Q5,rNr),e(xe,tNr),e(xe,H5),e(H5,UEe),e(UEe,aNr),e(H5,nNr),e(H5,rZ),e(rZ,sNr),e(H5,lNr),e(xe,iNr),e(xe,U5),e(U5,JEe),e(JEe,dNr),e(U5,cNr),e(U5,tZ),e(tZ,fNr),e(U5,mNr),e(xe,gNr),e(xe,J5),e(J5,YEe),e(YEe,hNr),e(J5,pNr),e(J5,aZ),e(aZ,uNr),e(J5,_Nr),e(xe,bNr),e(xe,Y5),e(Y5,KEe),e(KEe,vNr),e(Y5,FNr),e(Y5,nZ),e(nZ,TNr),e(Y5,MNr),e(xe,ENr),e(xe,K5),e(K5,ZEe),e(ZEe,CNr),e(K5,wNr),e(K5,sZ),e(sZ,ANr),e(K5,LNr),e(xe,yNr),e(xe,Z5),e(Z5,eCe),e(eCe,xNr),e(Z5,$Nr),e(Z5,lZ),e(lZ,kNr),e(Z5,SNr),e(xe,RNr),e(xe,e0),e(e0,oCe),e(oCe,PNr),e(e0,BNr),e(e0,iZ),e(iZ,INr),e(e0,NNr),e(xe,qNr),e(xe,o0),e(o0,rCe),e(rCe,jNr),e(o0,DNr),e(o0,dZ),e(dZ,GNr),e(o0,ONr),e(xe,VNr),e(xe,r0),e(r0,tCe),e(tCe,XNr),e(r0,zNr),e(r0,cZ),e(cZ,WNr),e(r0,QNr),e(Or,HNr),M(t0,Or,null),b(f,eVe,_),b(f,Hc,_),e(Hc,a0),e(a0,aCe),M(Ix,aCe,null),e(Hc,UNr),e(Hc,nCe),e(nCe,JNr),b(f,oVe,_),b(f,pr,_),M(Nx,pr,null),e(pr,YNr),e(pr,Uc),e(Uc,KNr),e(Uc,fZ),e(fZ,ZNr),e(Uc,eqr),e(Uc,mZ),e(mZ,oqr),e(Uc,rqr),e(pr,tqr),e(pr,qx),e(qx,aqr),e(qx,sCe),e(sCe,nqr),e(qx,sqr),e(pr,lqr),e(pr,Wt),M(jx,Wt,null),e(Wt,iqr),e(Wt,lCe),e(lCe,dqr),e(Wt,cqr),e(Wt,Jc),e(Jc,fqr),e(Jc,iCe),e(iCe,mqr),e(Jc,gqr),e(Jc,gZ),e(gZ,hqr),e(Jc,pqr),e(Wt,uqr),M(n0,Wt,null),e(pr,_qr),e(pr,Vr),M(Dx,Vr,null),e(Vr,bqr),e(Vr,dCe),e(dCe,vqr),e(Vr,Fqr),e(Vr,Tn),e(Tn,Tqr),e(Tn,cCe),e(cCe,Mqr),e(Tn,Eqr),e(Tn,fCe),e(fCe,Cqr),e(Tn,wqr),e(Tn,mCe),e(mCe,Aqr),e(Tn,Lqr),e(Vr,yqr),e(Vr,Ee),e(Ee,s0),e(s0,gCe),e(gCe,xqr),e(s0,$qr),e(s0,hZ),e(hZ,kqr),e(s0,Sqr),e(Ee,Rqr),e(Ee,l0),e(l0,hCe),e(hCe,Pqr),e(l0,Bqr),e(l0,pZ),e(pZ,Iqr),e(l0,Nqr),e(Ee,qqr),e(Ee,i0),e(i0,pCe),e(pCe,jqr),e(i0,Dqr),e(i0,uZ),e(uZ,Gqr),e(i0,Oqr),e(Ee,Vqr),e(Ee,d0),e(d0,uCe),e(uCe,Xqr),e(d0,zqr),e(d0,_Z),e(_Z,Wqr),e(d0,Qqr),e(Ee,Hqr),e(Ee,c0),e(c0,_Ce),e(_Ce,Uqr),e(c0,Jqr),e(c0,bZ),e(bZ,Yqr),e(c0,Kqr),e(Ee,Zqr),e(Ee,f0),e(f0,bCe),e(bCe,ejr),e(f0,ojr),e(f0,vZ),e(vZ,rjr),e(f0,tjr),e(Ee,ajr),e(Ee,m0),e(m0,vCe),e(vCe,njr),e(m0,sjr),e(m0,FZ),e(FZ,ljr),e(m0,ijr),e(Ee,djr),e(Ee,g0),e(g0,FCe),e(FCe,cjr),e(g0,fjr),e(g0,TZ),e(TZ,mjr),e(g0,gjr),e(Ee,hjr),e(Ee,h0),e(h0,TCe),e(TCe,pjr),e(h0,ujr),e(h0,MZ),e(MZ,_jr),e(h0,bjr),e(Ee,vjr),e(Ee,p0),e(p0,MCe),e(MCe,Fjr),e(p0,Tjr),e(p0,EZ),e(EZ,Mjr),e(p0,Ejr),e(Ee,Cjr),e(Ee,u0),e(u0,ECe),e(ECe,wjr),e(u0,Ajr),e(u0,CZ),e(CZ,Ljr),e(u0,yjr),e(Ee,xjr),e(Ee,_0),e(_0,CCe),e(CCe,$jr),e(_0,kjr),e(_0,wZ),e(wZ,Sjr),e(_0,Rjr),e(Ee,Pjr),e(Ee,b0),e(b0,wCe),e(wCe,Bjr),e(b0,Ijr),e(b0,AZ),e(AZ,Njr),e(b0,qjr),e(Vr,jjr),M(v0,Vr,null),b(f,rVe,_),b(f,Yc,_),e(Yc,F0),e(F0,ACe),M(Gx,ACe,null),e(Yc,Djr),e(Yc,LCe),e(LCe,Gjr),b(f,tVe,_),b(f,ur,_),M(Ox,ur,null),e(ur,Ojr),e(ur,Kc),e(Kc,Vjr),e(Kc,LZ),e(LZ,Xjr),e(Kc,zjr),e(Kc,yZ),e(yZ,Wjr),e(Kc,Qjr),e(ur,Hjr),e(ur,Vx),e(Vx,Ujr),e(Vx,yCe),e(yCe,Jjr),e(Vx,Yjr),e(ur,Kjr),e(ur,Qt),M(Xx,Qt,null),e(Qt,Zjr),e(Qt,xCe),e(xCe,eDr),e(Qt,oDr),e(Qt,Zc),e(Zc,rDr),e(Zc,$Ce),e($Ce,tDr),e(Zc,aDr),e(Zc,xZ),e(xZ,nDr),e(Zc,sDr),e(Qt,lDr),M(T0,Qt,null),e(ur,iDr),e(ur,Xr),M(zx,Xr,null),e(Xr,dDr),e(Xr,kCe),e(kCe,cDr),e(Xr,fDr),e(Xr,Mn),e(Mn,mDr),e(Mn,SCe),e(SCe,gDr),e(Mn,hDr),e(Mn,RCe),e(RCe,pDr),e(Mn,uDr),e(Mn,PCe),e(PCe,_Dr),e(Mn,bDr),e(Xr,vDr),e(Xr,$e),e($e,M0),e(M0,BCe),e(BCe,FDr),e(M0,TDr),e(M0,$Z),e($Z,MDr),e(M0,EDr),e($e,CDr),e($e,E0),e(E0,ICe),e(ICe,wDr),e(E0,ADr),e(E0,kZ),e(kZ,LDr),e(E0,yDr),e($e,xDr),e($e,C0),e(C0,NCe),e(NCe,$Dr),e(C0,kDr),e(C0,SZ),e(SZ,SDr),e(C0,RDr),e($e,PDr),e($e,w0),e(w0,qCe),e(qCe,BDr),e(w0,IDr),e(w0,RZ),e(RZ,NDr),e(w0,qDr),e($e,jDr),e($e,A0),e(A0,jCe),e(jCe,DDr),e(A0,GDr),e(A0,PZ),e(PZ,ODr),e(A0,VDr),e($e,XDr),e($e,L0),e(L0,DCe),e(DCe,zDr),e(L0,WDr),e(L0,BZ),e(BZ,QDr),e(L0,HDr),e($e,UDr),e($e,y0),e(y0,GCe),e(GCe,JDr),e(y0,YDr),e(y0,IZ),e(IZ,KDr),e(y0,ZDr),e($e,eGr),e($e,x0),e(x0,OCe),e(OCe,oGr),e(x0,rGr),e(x0,NZ),e(NZ,tGr),e(x0,aGr),e($e,nGr),e($e,$0),e($0,VCe),e(VCe,sGr),e($0,lGr),e($0,qZ),e(qZ,iGr),e($0,dGr),e($e,cGr),e($e,k0),e(k0,XCe),e(XCe,fGr),e(k0,mGr),e(k0,jZ),e(jZ,gGr),e(k0,hGr),e(Xr,pGr),M(S0,Xr,null),b(f,aVe,_),b(f,ef,_),e(ef,R0),e(R0,zCe),M(Wx,zCe,null),e(ef,uGr),e(ef,WCe),e(WCe,_Gr),b(f,nVe,_),b(f,_r,_),M(Qx,_r,null),e(_r,bGr),e(_r,of),e(of,vGr),e(of,DZ),e(DZ,FGr),e(of,TGr),e(of,GZ),e(GZ,MGr),e(of,EGr),e(_r,CGr),e(_r,Hx),e(Hx,wGr),e(Hx,QCe),e(QCe,AGr),e(Hx,LGr),e(_r,yGr),e(_r,Ht),M(Ux,Ht,null),e(Ht,xGr),e(Ht,HCe),e(HCe,$Gr),e(Ht,kGr),e(Ht,rf),e(rf,SGr),e(rf,UCe),e(UCe,RGr),e(rf,PGr),e(rf,OZ),e(OZ,BGr),e(rf,IGr),e(Ht,NGr),M(P0,Ht,null),e(_r,qGr),e(_r,zr),M(Jx,zr,null),e(zr,jGr),e(zr,JCe),e(JCe,DGr),e(zr,GGr),e(zr,En),e(En,OGr),e(En,YCe),e(YCe,VGr),e(En,XGr),e(En,KCe),e(KCe,zGr),e(En,WGr),e(En,ZCe),e(ZCe,QGr),e(En,HGr),e(zr,UGr),e(zr,ke),e(ke,B0),e(B0,e5e),e(e5e,JGr),e(B0,YGr),e(B0,VZ),e(VZ,KGr),e(B0,ZGr),e(ke,eOr),e(ke,I0),e(I0,o5e),e(o5e,oOr),e(I0,rOr),e(I0,XZ),e(XZ,tOr),e(I0,aOr),e(ke,nOr),e(ke,N0),e(N0,r5e),e(r5e,sOr),e(N0,lOr),e(N0,zZ),e(zZ,iOr),e(N0,dOr),e(ke,cOr),e(ke,q0),e(q0,t5e),e(t5e,fOr),e(q0,mOr),e(q0,WZ),e(WZ,gOr),e(q0,hOr),e(ke,pOr),e(ke,j0),e(j0,a5e),e(a5e,uOr),e(j0,_Or),e(j0,QZ),e(QZ,bOr),e(j0,vOr),e(ke,FOr),e(ke,D0),e(D0,n5e),e(n5e,TOr),e(D0,MOr),e(D0,HZ),e(HZ,EOr),e(D0,COr),e(ke,wOr),e(ke,G0),e(G0,s5e),e(s5e,AOr),e(G0,LOr),e(G0,UZ),e(UZ,yOr),e(G0,xOr),e(ke,$Or),e(ke,O0),e(O0,l5e),e(l5e,kOr),e(O0,SOr),e(O0,JZ),e(JZ,ROr),e(O0,POr),e(ke,BOr),e(ke,V0),e(V0,i5e),e(i5e,IOr),e(V0,NOr),e(V0,YZ),e(YZ,qOr),e(V0,jOr),e(ke,DOr),e(ke,X0),e(X0,d5e),e(d5e,GOr),e(X0,OOr),e(X0,KZ),e(KZ,VOr),e(X0,XOr),e(zr,zOr),M(z0,zr,null),b(f,sVe,_),b(f,tf,_),e(tf,W0),e(W0,c5e),M(Yx,c5e,null),e(tf,WOr),e(tf,f5e),e(f5e,QOr),b(f,lVe,_),b(f,br,_),M(Kx,br,null),e(br,HOr),e(br,af),e(af,UOr),e(af,ZZ),e(ZZ,JOr),e(af,YOr),e(af,eee),e(eee,KOr),e(af,ZOr),e(br,eVr),e(br,Zx),e(Zx,oVr),e(Zx,m5e),e(m5e,rVr),e(Zx,tVr),e(br,aVr),e(br,Ut),M(e$,Ut,null),e(Ut,nVr),e(Ut,g5e),e(g5e,sVr),e(Ut,lVr),e(Ut,nf),e(nf,iVr),e(nf,h5e),e(h5e,dVr),e(nf,cVr),e(nf,oee),e(oee,fVr),e(nf,mVr),e(Ut,gVr),M(Q0,Ut,null),e(br,hVr),e(br,Wr),M(o$,Wr,null),e(Wr,pVr),e(Wr,p5e),e(p5e,uVr),e(Wr,_Vr),e(Wr,Cn),e(Cn,bVr),e(Cn,u5e),e(u5e,vVr),e(Cn,FVr),e(Cn,_5e),e(_5e,TVr),e(Cn,MVr),e(Cn,b5e),e(b5e,EVr),e(Cn,CVr),e(Wr,wVr),e(Wr,Se),e(Se,H0),e(H0,v5e),e(v5e,AVr),e(H0,LVr),e(H0,ree),e(ree,yVr),e(H0,xVr),e(Se,$Vr),e(Se,U0),e(U0,F5e),e(F5e,kVr),e(U0,SVr),e(U0,tee),e(tee,RVr),e(U0,PVr),e(Se,BVr),e(Se,J0),e(J0,T5e),e(T5e,IVr),e(J0,NVr),e(J0,aee),e(aee,qVr),e(J0,jVr),e(Se,DVr),e(Se,Y0),e(Y0,M5e),e(M5e,GVr),e(Y0,OVr),e(Y0,nee),e(nee,VVr),e(Y0,XVr),e(Se,zVr),e(Se,K0),e(K0,E5e),e(E5e,WVr),e(K0,QVr),e(K0,see),e(see,HVr),e(K0,UVr),e(Se,JVr),e(Se,Z0),e(Z0,C5e),e(C5e,YVr),e(Z0,KVr),e(Z0,lee),e(lee,ZVr),e(Z0,eXr),e(Se,oXr),e(Se,ew),e(ew,w5e),e(w5e,rXr),e(ew,tXr),e(ew,iee),e(iee,aXr),e(ew,nXr),e(Se,sXr),e(Se,ow),e(ow,A5e),e(A5e,lXr),e(ow,iXr),e(ow,dee),e(dee,dXr),e(ow,cXr),e(Se,fXr),e(Se,rw),e(rw,L5e),e(L5e,mXr),e(rw,gXr),e(rw,cee),e(cee,hXr),e(rw,pXr),e(Se,uXr),e(Se,tw),e(tw,y5e),e(y5e,_Xr),e(tw,bXr),e(tw,fee),e(fee,vXr),e(tw,FXr),e(Wr,TXr),M(aw,Wr,null),b(f,iVe,_),b(f,sf,_),e(sf,nw),e(nw,x5e),M(r$,x5e,null),e(sf,MXr),e(sf,$5e),e($5e,EXr),b(f,dVe,_),b(f,vr,_),M(t$,vr,null),e(vr,CXr),e(vr,lf),e(lf,wXr),e(lf,mee),e(mee,AXr),e(lf,LXr),e(lf,gee),e(gee,yXr),e(lf,xXr),e(vr,$Xr),e(vr,a$),e(a$,kXr),e(a$,k5e),e(k5e,SXr),e(a$,RXr),e(vr,PXr),e(vr,Jt),M(n$,Jt,null),e(Jt,BXr),e(Jt,S5e),e(S5e,IXr),e(Jt,NXr),e(Jt,df),e(df,qXr),e(df,R5e),e(R5e,jXr),e(df,DXr),e(df,hee),e(hee,GXr),e(df,OXr),e(Jt,VXr),M(sw,Jt,null),e(vr,XXr),e(vr,Qr),M(s$,Qr,null),e(Qr,zXr),e(Qr,P5e),e(P5e,WXr),e(Qr,QXr),e(Qr,wn),e(wn,HXr),e(wn,B5e),e(B5e,UXr),e(wn,JXr),e(wn,I5e),e(I5e,YXr),e(wn,KXr),e(wn,N5e),e(N5e,ZXr),e(wn,ezr),e(Qr,ozr),e(Qr,Re),e(Re,lw),e(lw,q5e),e(q5e,rzr),e(lw,tzr),e(lw,pee),e(pee,azr),e(lw,nzr),e(Re,szr),e(Re,iw),e(iw,j5e),e(j5e,lzr),e(iw,izr),e(iw,uee),e(uee,dzr),e(iw,czr),e(Re,fzr),e(Re,dw),e(dw,D5e),e(D5e,mzr),e(dw,gzr),e(dw,_ee),e(_ee,hzr),e(dw,pzr),e(Re,uzr),e(Re,cw),e(cw,G5e),e(G5e,_zr),e(cw,bzr),e(cw,bee),e(bee,vzr),e(cw,Fzr),e(Re,Tzr),e(Re,fw),e(fw,O5e),e(O5e,Mzr),e(fw,Ezr),e(fw,vee),e(vee,Czr),e(fw,wzr),e(Re,Azr),e(Re,mw),e(mw,V5e),e(V5e,Lzr),e(mw,yzr),e(mw,Fee),e(Fee,xzr),e(mw,$zr),e(Re,kzr),e(Re,gw),e(gw,X5e),e(X5e,Szr),e(gw,Rzr),e(gw,Tee),e(Tee,Pzr),e(gw,Bzr),e(Re,Izr),e(Re,hw),e(hw,z5e),e(z5e,Nzr),e(hw,qzr),e(hw,Mee),e(Mee,jzr),e(hw,Dzr),e(Re,Gzr),e(Re,pw),e(pw,W5e),e(W5e,Ozr),e(pw,Vzr),e(pw,Eee),e(Eee,Xzr),e(pw,zzr),e(Re,Wzr),e(Re,uw),e(uw,Q5e),e(Q5e,Qzr),e(uw,Hzr),e(uw,Cee),e(Cee,Uzr),e(uw,Jzr),e(Qr,Yzr),M(_w,Qr,null),b(f,cVe,_),b(f,cf,_),e(cf,bw),e(bw,H5e),M(l$,H5e,null),e(cf,Kzr),e(cf,U5e),e(U5e,Zzr),b(f,fVe,_),b(f,Fr,_),M(i$,Fr,null),e(Fr,eWr),e(Fr,ff),e(ff,oWr),e(ff,wee),e(wee,rWr),e(ff,tWr),e(ff,Aee),e(Aee,aWr),e(ff,nWr),e(Fr,sWr),e(Fr,d$),e(d$,lWr),e(d$,J5e),e(J5e,iWr),e(d$,dWr),e(Fr,cWr),e(Fr,Yt),M(c$,Yt,null),e(Yt,fWr),e(Yt,Y5e),e(Y5e,mWr),e(Yt,gWr),e(Yt,mf),e(mf,hWr),e(mf,K5e),e(K5e,pWr),e(mf,uWr),e(mf,Lee),e(Lee,_Wr),e(mf,bWr),e(Yt,vWr),M(vw,Yt,null),e(Fr,FWr),e(Fr,Hr),M(f$,Hr,null),e(Hr,TWr),e(Hr,Z5e),e(Z5e,MWr),e(Hr,EWr),e(Hr,An),e(An,CWr),e(An,e0e),e(e0e,wWr),e(An,AWr),e(An,o0e),e(o0e,LWr),e(An,yWr),e(An,r0e),e(r0e,xWr),e(An,$Wr),e(Hr,kWr),e(Hr,Ve),e(Ve,Fw),e(Fw,t0e),e(t0e,SWr),e(Fw,RWr),e(Fw,yee),e(yee,PWr),e(Fw,BWr),e(Ve,IWr),e(Ve,Tw),e(Tw,a0e),e(a0e,NWr),e(Tw,qWr),e(Tw,xee),e(xee,jWr),e(Tw,DWr),e(Ve,GWr),e(Ve,Mw),e(Mw,n0e),e(n0e,OWr),e(Mw,VWr),e(Mw,$ee),e($ee,XWr),e(Mw,zWr),e(Ve,WWr),e(Ve,Ew),e(Ew,s0e),e(s0e,QWr),e(Ew,HWr),e(Ew,kee),e(kee,UWr),e(Ew,JWr),e(Ve,YWr),e(Ve,Cw),e(Cw,l0e),e(l0e,KWr),e(Cw,ZWr),e(Cw,See),e(See,eQr),e(Cw,oQr),e(Ve,rQr),e(Ve,ww),e(ww,i0e),e(i0e,tQr),e(ww,aQr),e(ww,Ree),e(Ree,nQr),e(ww,sQr),e(Ve,lQr),e(Ve,Aw),e(Aw,d0e),e(d0e,iQr),e(Aw,dQr),e(Aw,Pee),e(Pee,cQr),e(Aw,fQr),e(Ve,mQr),e(Ve,Lw),e(Lw,c0e),e(c0e,gQr),e(Lw,hQr),e(Lw,Bee),e(Bee,pQr),e(Lw,uQr),e(Hr,_Qr),M(yw,Hr,null),b(f,mVe,_),b(f,gf,_),e(gf,xw),e(xw,f0e),M(m$,f0e,null),e(gf,bQr),e(gf,m0e),e(m0e,vQr),b(f,gVe,_),b(f,Tr,_),M(g$,Tr,null),e(Tr,FQr),e(Tr,hf),e(hf,TQr),e(hf,Iee),e(Iee,MQr),e(hf,EQr),e(hf,Nee),e(Nee,CQr),e(hf,wQr),e(Tr,AQr),e(Tr,h$),e(h$,LQr),e(h$,g0e),e(g0e,yQr),e(h$,xQr),e(Tr,$Qr),e(Tr,Kt),M(p$,Kt,null),e(Kt,kQr),e(Kt,h0e),e(h0e,SQr),e(Kt,RQr),e(Kt,pf),e(pf,PQr),e(pf,p0e),e(p0e,BQr),e(pf,IQr),e(pf,qee),e(qee,NQr),e(pf,qQr),e(Kt,jQr),M($w,Kt,null),e(Tr,DQr),e(Tr,Ur),M(u$,Ur,null),e(Ur,GQr),e(Ur,u0e),e(u0e,OQr),e(Ur,VQr),e(Ur,Ln),e(Ln,XQr),e(Ln,_0e),e(_0e,zQr),e(Ln,WQr),e(Ln,b0e),e(b0e,QQr),e(Ln,HQr),e(Ln,v0e),e(v0e,UQr),e(Ln,JQr),e(Ur,YQr),e(Ur,Xe),e(Xe,kw),e(kw,F0e),e(F0e,KQr),e(kw,ZQr),e(kw,jee),e(jee,eHr),e(kw,oHr),e(Xe,rHr),e(Xe,Sw),e(Sw,T0e),e(T0e,tHr),e(Sw,aHr),e(Sw,Dee),e(Dee,nHr),e(Sw,sHr),e(Xe,lHr),e(Xe,Rw),e(Rw,M0e),e(M0e,iHr),e(Rw,dHr),e(Rw,Gee),e(Gee,cHr),e(Rw,fHr),e(Xe,mHr),e(Xe,Pw),e(Pw,E0e),e(E0e,gHr),e(Pw,hHr),e(Pw,Oee),e(Oee,pHr),e(Pw,uHr),e(Xe,_Hr),e(Xe,Bw),e(Bw,C0e),e(C0e,bHr),e(Bw,vHr),e(Bw,Vee),e(Vee,FHr),e(Bw,THr),e(Xe,MHr),e(Xe,Iw),e(Iw,w0e),e(w0e,EHr),e(Iw,CHr),e(Iw,Xee),e(Xee,wHr),e(Iw,AHr),e(Xe,LHr),e(Xe,Nw),e(Nw,A0e),e(A0e,yHr),e(Nw,xHr),e(Nw,zee),e(zee,$Hr),e(Nw,kHr),e(Xe,SHr),e(Xe,qw),e(qw,L0e),e(L0e,RHr),e(qw,PHr),e(qw,Wee),e(Wee,BHr),e(qw,IHr),e(Ur,NHr),M(jw,Ur,null),b(f,hVe,_),b(f,uf,_),e(uf,Dw),e(Dw,y0e),M(_$,y0e,null),e(uf,qHr),e(uf,x0e),e(x0e,jHr),b(f,pVe,_),b(f,Mr,_),M(b$,Mr,null),e(Mr,DHr),e(Mr,_f),e(_f,GHr),e(_f,Qee),e(Qee,OHr),e(_f,VHr),e(_f,Hee),e(Hee,XHr),e(_f,zHr),e(Mr,WHr),e(Mr,v$),e(v$,QHr),e(v$,$0e),e($0e,HHr),e(v$,UHr),e(Mr,JHr),e(Mr,Zt),M(F$,Zt,null),e(Zt,YHr),e(Zt,k0e),e(k0e,KHr),e(Zt,ZHr),e(Zt,bf),e(bf,eUr),e(bf,S0e),e(S0e,oUr),e(bf,rUr),e(bf,Uee),e(Uee,tUr),e(bf,aUr),e(Zt,nUr),M(Gw,Zt,null),e(Mr,sUr),e(Mr,Jr),M(T$,Jr,null),e(Jr,lUr),e(Jr,R0e),e(R0e,iUr),e(Jr,dUr),e(Jr,yn),e(yn,cUr),e(yn,P0e),e(P0e,fUr),e(yn,mUr),e(yn,B0e),e(B0e,gUr),e(yn,hUr),e(yn,I0e),e(I0e,pUr),e(yn,uUr),e(Jr,_Ur),e(Jr,N0e),e(N0e,Ow),e(Ow,q0e),e(q0e,bUr),e(Ow,vUr),e(Ow,Jee),e(Jee,FUr),e(Ow,TUr),e(Jr,MUr),M(Vw,Jr,null),b(f,uVe,_),b(f,vf,_),e(vf,Xw),e(Xw,j0e),M(M$,j0e,null),e(vf,EUr),e(vf,D0e),e(D0e,CUr),b(f,_Ve,_),b(f,Er,_),M(E$,Er,null),e(Er,wUr),e(Er,Ff),e(Ff,AUr),e(Ff,Yee),e(Yee,LUr),e(Ff,yUr),e(Ff,Kee),e(Kee,xUr),e(Ff,$Ur),e(Er,kUr),e(Er,C$),e(C$,SUr),e(C$,G0e),e(G0e,RUr),e(C$,PUr),e(Er,BUr),e(Er,ea),M(w$,ea,null),e(ea,IUr),e(ea,O0e),e(O0e,NUr),e(ea,qUr),e(ea,Tf),e(Tf,jUr),e(Tf,V0e),e(V0e,DUr),e(Tf,GUr),e(Tf,Zee),e(Zee,OUr),e(Tf,VUr),e(ea,XUr),M(zw,ea,null),e(Er,zUr),e(Er,Yr),M(A$,Yr,null),e(Yr,WUr),e(Yr,X0e),e(X0e,QUr),e(Yr,HUr),e(Yr,xn),e(xn,UUr),e(xn,z0e),e(z0e,JUr),e(xn,YUr),e(xn,W0e),e(W0e,KUr),e(xn,ZUr),e(xn,Q0e),e(Q0e,eJr),e(xn,oJr),e(Yr,rJr),e(Yr,L$),e(L$,Ww),e(Ww,H0e),e(H0e,tJr),e(Ww,aJr),e(Ww,eoe),e(eoe,nJr),e(Ww,sJr),e(L$,lJr),e(L$,Qw),e(Qw,U0e),e(U0e,iJr),e(Qw,dJr),e(Qw,ooe),e(ooe,cJr),e(Qw,fJr),e(Yr,mJr),M(Hw,Yr,null),b(f,bVe,_),b(f,Mf,_),e(Mf,Uw),e(Uw,J0e),M(y$,J0e,null),e(Mf,gJr),e(Mf,Y0e),e(Y0e,hJr),b(f,vVe,_),b(f,Cr,_),M(x$,Cr,null),e(Cr,pJr),e(Cr,Ef),e(Ef,uJr),e(Ef,roe),e(roe,_Jr),e(Ef,bJr),e(Ef,toe),e(toe,vJr),e(Ef,FJr),e(Cr,TJr),e(Cr,$$),e($$,MJr),e($$,K0e),e(K0e,EJr),e($$,CJr),e(Cr,wJr),e(Cr,oa),M(k$,oa,null),e(oa,AJr),e(oa,Z0e),e(Z0e,LJr),e(oa,yJr),e(oa,Cf),e(Cf,xJr),e(Cf,ewe),e(ewe,$Jr),e(Cf,kJr),e(Cf,aoe),e(aoe,SJr),e(Cf,RJr),e(oa,PJr),M(Jw,oa,null),e(Cr,BJr),e(Cr,Kr),M(S$,Kr,null),e(Kr,IJr),e(Kr,owe),e(owe,NJr),e(Kr,qJr),e(Kr,$n),e($n,jJr),e($n,rwe),e(rwe,DJr),e($n,GJr),e($n,twe),e(twe,OJr),e($n,VJr),e($n,awe),e(awe,XJr),e($n,zJr),e(Kr,WJr),e(Kr,nwe),e(nwe,Yw),e(Yw,swe),e(swe,QJr),e(Yw,HJr),e(Yw,noe),e(noe,UJr),e(Yw,JJr),e(Kr,YJr),M(Kw,Kr,null),FVe=!0},p(f,[_]){const R$={};_&2&&(R$.$$scope={dirty:_,ctx:f}),Rf.$set(R$);const lwe={};_&2&&(lwe.$$scope={dirty:_,ctx:f}),Gg.$set(lwe);const iwe={};_&2&&(iwe.$$scope={dirty:_,ctx:f}),Eh.$set(iwe);const dwe={};_&2&&(dwe.$$scope={dirty:_,ctx:f}),ap.$set(dwe);const P$={};_&2&&(P$.$$scope={dirty:_,ctx:f}),np.$set(P$);const cwe={};_&2&&(cwe.$$scope={dirty:_,ctx:f}),wp.$set(cwe);const kn={};_&2&&(kn.$$scope={dirty:_,ctx:f}),Ap.$set(kn);const fwe={};_&2&&(fwe.$$scope={dirty:_,ctx:f}),xp.$set(fwe);const mwe={};_&2&&(mwe.$$scope={dirty:_,ctx:f}),x_.$set(mwe);const gwe={};_&2&&(gwe.$$scope={dirty:_,ctx:f}),k_.$set(gwe);const B$={};_&2&&(B$.$$scope={dirty:_,ctx:f}),M4.$set(B$);const hwe={};_&2&&(hwe.$$scope={dirty:_,ctx:f}),C4.$set(hwe);const I$={};_&2&&(I$.$$scope={dirty:_,ctx:f}),f1.$set(I$);const pwe={};_&2&&(pwe.$$scope={dirty:_,ctx:f}),g1.$set(pwe);const N$={};_&2&&(N$.$$scope={dirty:_,ctx:f}),Y1.$set(N$);const uwe={};_&2&&(uwe.$$scope={dirty:_,ctx:f}),Z1.$set(uwe);const _we={};_&2&&(_we.$$scope={dirty:_,ctx:f}),b2.$set(_we);const bwe={};_&2&&(bwe.$$scope={dirty:_,ctx:f}),F2.$set(bwe);const wf={};_&2&&(wf.$$scope={dirty:_,ctx:f}),ub.$set(wf);const vwe={};_&2&&(vwe.$$scope={dirty:_,ctx:f}),bb.$set(vwe);const Fwe={};_&2&&(Fwe.$$scope={dirty:_,ctx:f}),Ub.$set(Fwe);const Twe={};_&2&&(Twe.$$scope={dirty:_,ctx:f}),Yb.$set(Twe);const q$={};_&2&&(q$.$$scope={dirty:_,ctx:f}),av.$set(q$);const Mwe={};_&2&&(Mwe.$$scope={dirty:_,ctx:f}),sv.$set(Mwe);const Ewe={};_&2&&(Ewe.$$scope={dirty:_,ctx:f}),Vv.$set(Ewe);const Cwe={};_&2&&(Cwe.$$scope={dirty:_,ctx:f}),zv.$set(Cwe);const rt={};_&2&&(rt.$$scope={dirty:_,ctx:f}),R3.$set(rt);const j$={};_&2&&(j$.$$scope={dirty:_,ctx:f}),B3.$set(j$);const wwe={};_&2&&(wwe.$$scope={dirty:_,ctx:f}),q3.$set(wwe);const D$={};_&2&&(D$.$$scope={dirty:_,ctx:f}),D3.$set(D$);const Awe={};_&2&&(Awe.$$scope={dirty:_,ctx:f}),eF.$set(Awe);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:f}),rF.$set(tt);const Lwe={};_&2&&(Lwe.$$scope={dirty:_,ctx:f}),nF.$set(Lwe);const Af={};_&2&&(Af.$$scope={dirty:_,ctx:f}),lF.$set(Af);const ywe={};_&2&&(ywe.$$scope={dirty:_,ctx:f}),cF.$set(ywe);const xwe={};_&2&&(xwe.$$scope={dirty:_,ctx:f}),mF.$set(xwe);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),EF.$set(L);const Zw={};_&2&&(Zw.$$scope={dirty:_,ctx:f}),wF.$set(Zw);const $we={};_&2&&($we.$$scope={dirty:_,ctx:f}),SF.$set($we);const kwe={};_&2&&(kwe.$$scope={dirty:_,ctx:f}),PF.$set(kwe);const eA={};_&2&&(eA.$$scope={dirty:_,ctx:f}),WF.$set(eA);const Swe={};_&2&&(Swe.$$scope={dirty:_,ctx:f}),HF.$set(Swe);const Rwe={};_&2&&(Rwe.$$scope={dirty:_,ctx:f}),KF.$set(Rwe);const oA={};_&2&&(oA.$$scope={dirty:_,ctx:f}),eT.$set(oA);const Pwe={};_&2&&(Pwe.$$scope={dirty:_,ctx:f}),lT.$set(Pwe);const Bwe={};_&2&&(Bwe.$$scope={dirty:_,ctx:f}),dT.$set(Bwe);const rA={};_&2&&(rA.$$scope={dirty:_,ctx:f}),hT.$set(rA);const Iwe={};_&2&&(Iwe.$$scope={dirty:_,ctx:f}),uT.$set(Iwe);const Nwe={};_&2&&(Nwe.$$scope={dirty:_,ctx:f}),FT.$set(Nwe);const tA={};_&2&&(tA.$$scope={dirty:_,ctx:f}),MT.$set(tA);const qwe={};_&2&&(qwe.$$scope={dirty:_,ctx:f}),wT.$set(qwe);const jwe={};_&2&&(jwe.$$scope={dirty:_,ctx:f}),LT.$set(jwe);const aA={};_&2&&(aA.$$scope={dirty:_,ctx:f}),RT.$set(aA);const Dwe={};_&2&&(Dwe.$$scope={dirty:_,ctx:f}),BT.$set(Dwe);const Gwe={};_&2&&(Gwe.$$scope={dirty:_,ctx:f}),qT.$set(Gwe);const nA={};_&2&&(nA.$$scope={dirty:_,ctx:f}),DT.$set(nA);const Owe={};_&2&&(Owe.$$scope={dirty:_,ctx:f}),R7.$set(Owe);const Vwe={};_&2&&(Vwe.$$scope={dirty:_,ctx:f}),B7.$set(Vwe);const sA={};_&2&&(sA.$$scope={dirty:_,ctx:f}),nM.$set(sA);const Xwe={};_&2&&(Xwe.$$scope={dirty:_,ctx:f}),lM.$set(Xwe);const zwe={};_&2&&(zwe.$$scope={dirty:_,ctx:f}),TM.$set(zwe);const lA={};_&2&&(lA.$$scope={dirty:_,ctx:f}),EM.$set(lA);const Wwe={};_&2&&(Wwe.$$scope={dirty:_,ctx:f}),yM.$set(Wwe);const Qwe={};_&2&&(Qwe.$$scope={dirty:_,ctx:f}),$M.$set(Qwe);const iA={};_&2&&(iA.$$scope={dirty:_,ctx:f}),YM.$set(iA);const Hwe={};_&2&&(Hwe.$$scope={dirty:_,ctx:f}),ZM.$set(Hwe);const Uwe={};_&2&&(Uwe.$$scope={dirty:_,ctx:f}),cE.$set(Uwe);const dA={};_&2&&(dA.$$scope={dirty:_,ctx:f}),mE.$set(dA);const Jwe={};_&2&&(Jwe.$$scope={dirty:_,ctx:f}),jE.$set(Jwe);const Ywe={};_&2&&(Ywe.$$scope={dirty:_,ctx:f}),GE.$set(Ywe);const cA={};_&2&&(cA.$$scope={dirty:_,ctx:f}),nC.$set(cA);const Kwe={};_&2&&(Kwe.$$scope={dirty:_,ctx:f}),lC.$set(Kwe);const Zwe={};_&2&&(Zwe.$$scope={dirty:_,ctx:f}),cC.$set(Zwe);const fA={};_&2&&(fA.$$scope={dirty:_,ctx:f}),mC.$set(fA);const eAe={};_&2&&(eAe.$$scope={dirty:_,ctx:f}),hC.$set(eAe);const oAe={};_&2&&(oAe.$$scope={dirty:_,ctx:f}),uC.$set(oAe);const mA={};_&2&&(mA.$$scope={dirty:_,ctx:f}),NC.$set(mA);const rAe={};_&2&&(rAe.$$scope={dirty:_,ctx:f}),jC.$set(rAe);const tAe={};_&2&&(tAe.$$scope={dirty:_,ctx:f}),s5.$set(tAe);const gA={};_&2&&(gA.$$scope={dirty:_,ctx:f}),i5.$set(gA);const aAe={};_&2&&(aAe.$$scope={dirty:_,ctx:f}),c5.$set(aAe);const nAe={};_&2&&(nAe.$$scope={dirty:_,ctx:f}),m5.$set(nAe);const hA={};_&2&&(hA.$$scope={dirty:_,ctx:f}),h5.$set(hA);const sAe={};_&2&&(sAe.$$scope={dirty:_,ctx:f}),u5.$set(sAe);const lAe={};_&2&&(lAe.$$scope={dirty:_,ctx:f}),X5.$set(lAe);const pA={};_&2&&(pA.$$scope={dirty:_,ctx:f}),W5.$set(pA);const iAe={};_&2&&(iAe.$$scope={dirty:_,ctx:f}),t0.$set(iAe);const dAe={};_&2&&(dAe.$$scope={dirty:_,ctx:f}),n0.$set(dAe);const uA={};_&2&&(uA.$$scope={dirty:_,ctx:f}),v0.$set(uA);const cAe={};_&2&&(cAe.$$scope={dirty:_,ctx:f}),T0.$set(cAe);const fAe={};_&2&&(fAe.$$scope={dirty:_,ctx:f}),S0.$set(fAe);const _A={};_&2&&(_A.$$scope={dirty:_,ctx:f}),P0.$set(_A);const mAe={};_&2&&(mAe.$$scope={dirty:_,ctx:f}),z0.$set(mAe);const gAe={};_&2&&(gAe.$$scope={dirty:_,ctx:f}),Q0.$set(gAe);const bA={};_&2&&(bA.$$scope={dirty:_,ctx:f}),aw.$set(bA);const hAe={};_&2&&(hAe.$$scope={dirty:_,ctx:f}),sw.$set(hAe);const pAe={};_&2&&(pAe.$$scope={dirty:_,ctx:f}),_w.$set(pAe);const vA={};_&2&&(vA.$$scope={dirty:_,ctx:f}),vw.$set(vA);const uAe={};_&2&&(uAe.$$scope={dirty:_,ctx:f}),yw.$set(uAe);const _Ae={};_&2&&(_Ae.$$scope={dirty:_,ctx:f}),$w.$set(_Ae);const FA={};_&2&&(FA.$$scope={dirty:_,ctx:f}),jw.$set(FA);const bAe={};_&2&&(bAe.$$scope={dirty:_,ctx:f}),Gw.$set(bAe);const vAe={};_&2&&(vAe.$$scope={dirty:_,ctx:f}),Vw.$set(vAe);const TA={};_&2&&(TA.$$scope={dirty:_,ctx:f}),zw.$set(TA);const FAe={};_&2&&(FAe.$$scope={dirty:_,ctx:f}),Hw.$set(FAe);const TAe={};_&2&&(TAe.$$scope={dirty:_,ctx:f}),Jw.$set(TAe);const MA={};_&2&&(MA.$$scope={dirty:_,ctx:f}),Kw.$set(MA)},i(f){FVe||(E(d.$$.fragment,f),E(ya.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(Rf.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(xL.$$.fragment,f),E(Gg.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(BL.$$.fragment,f),E(Eh.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(qL.$$.fragment,f),E(GL.$$.fragment,f),E(ap.$$.fragment,f),E(np.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(QL.$$.fragment,f),E(wp.$$.fragment,f),E(Ap.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(xp.$$.fragment,f),E(ZL.$$.fragment,f),E(x_.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(k_.$$.fragment,f),E(ay.$$.fragment,f),E(M4.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(C4.$$.fragment,f),E(dy.$$.fragment,f),E(f1.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(g1.$$.fragment,f),E(hy.$$.fragment,f),E(Y1.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Z1.$$.fragment,f),E(vy.$$.fragment,f),E(b2.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(F2.$$.fragment,f),E(Cy.$$.fragment,f),E(ub.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(bb.$$.fragment,f),E(xy.$$.fragment,f),E(Ub.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(Yb.$$.fragment,f),E(Py.$$.fragment,f),E(av.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(sv.$$.fragment,f),E(jy.$$.fragment,f),E(Vv.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(zv.$$.fragment,f),E(Xy.$$.fragment,f),E(R3.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(B3.$$.fragment,f),E(Uy.$$.fragment,f),E(q3.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(D3.$$.fragment,f),E(e8.$$.fragment,f),E(eF.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(rF.$$.fragment,f),E(n8.$$.fragment,f),E(nF.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(lF.$$.fragment,f),E(c8.$$.fragment,f),E(cF.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(mF.$$.fragment,f),E(p8.$$.fragment,f),E(EF.$$.fragment,f),E(u8.$$.fragment,f),E(_8.$$.fragment,f),E(v8.$$.fragment,f),E(wF.$$.fragment,f),E(F8.$$.fragment,f),E(SF.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(PF.$$.fragment,f),E(w8.$$.fragment,f),E(WF.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(HF.$$.fragment,f),E($8.$$.fragment,f),E(KF.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(eT.$$.fragment,f),E(I8.$$.fragment,f),E(lT.$$.fragment,f),E(N8.$$.fragment,f),E(q8.$$.fragment,f),E(D8.$$.fragment,f),E(dT.$$.fragment,f),E(G8.$$.fragment,f),E(hT.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(uT.$$.fragment,f),E(W8.$$.fragment,f),E(FT.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(MT.$$.fragment,f),E(K8.$$.fragment,f),E(wT.$$.fragment,f),E(Z8.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E(LT.$$.fragment,f),E(t9.$$.fragment,f),E(RT.$$.fragment,f),E(a9.$$.fragment,f),E(n9.$$.fragment,f),E(l9.$$.fragment,f),E(BT.$$.fragment,f),E(i9.$$.fragment,f),E(qT.$$.fragment,f),E(d9.$$.fragment,f),E(c9.$$.fragment,f),E(m9.$$.fragment,f),E(DT.$$.fragment,f),E(g9.$$.fragment,f),E(R7.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(_9.$$.fragment,f),E(B7.$$.fragment,f),E(b9.$$.fragment,f),E(nM.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(lM.$$.fragment,f),E(E9.$$.fragment,f),E(TM.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(EM.$$.fragment,f),E(y9.$$.fragment,f),E(yM.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E($M.$$.fragment,f),E(R9.$$.fragment,f),E(YM.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(ZM.$$.fragment,f),E(q9.$$.fragment,f),E(cE.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(mE.$$.fragment,f),E(V9.$$.fragment,f),E(jE.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(GE.$$.fragment,f),E(H9.$$.fragment,f),E(nC.$$.fragment,f),E(U9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(lC.$$.fragment,f),E(Z9.$$.fragment,f),E(cC.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(mC.$$.fragment,f),E(nx.$$.fragment,f),E(hC.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(uC.$$.fragment,f),E(cx.$$.fragment,f),E(NC.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(jC.$$.fragment,f),E(px.$$.fragment,f),E(s5.$$.fragment,f),E(ux.$$.fragment,f),E(_x.$$.fragment,f),E(vx.$$.fragment,f),E(i5.$$.fragment,f),E(Fx.$$.fragment,f),E(c5.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(m5.$$.fragment,f),E(wx.$$.fragment,f),E(h5.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(u5.$$.fragment,f),E($x.$$.fragment,f),E(X5.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(W5.$$.fragment,f),E(Bx.$$.fragment,f),E(t0.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(n0.$$.fragment,f),E(Dx.$$.fragment,f),E(v0.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(T0.$$.fragment,f),E(zx.$$.fragment,f),E(S0.$$.fragment,f),E(Wx.$$.fragment,f),E(Qx.$$.fragment,f),E(Ux.$$.fragment,f),E(P0.$$.fragment,f),E(Jx.$$.fragment,f),E(z0.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e$.$$.fragment,f),E(Q0.$$.fragment,f),E(o$.$$.fragment,f),E(aw.$$.fragment,f),E(r$.$$.fragment,f),E(t$.$$.fragment,f),E(n$.$$.fragment,f),E(sw.$$.fragment,f),E(s$.$$.fragment,f),E(_w.$$.fragment,f),E(l$.$$.fragment,f),E(i$.$$.fragment,f),E(c$.$$.fragment,f),E(vw.$$.fragment,f),E(f$.$$.fragment,f),E(yw.$$.fragment,f),E(m$.$$.fragment,f),E(g$.$$.fragment,f),E(p$.$$.fragment,f),E($w.$$.fragment,f),E(u$.$$.fragment,f),E(jw.$$.fragment,f),E(_$.$$.fragment,f),E(b$.$$.fragment,f),E(F$.$$.fragment,f),E(Gw.$$.fragment,f),E(T$.$$.fragment,f),E(Vw.$$.fragment,f),E(M$.$$.fragment,f),E(E$.$$.fragment,f),E(w$.$$.fragment,f),E(zw.$$.fragment,f),E(A$.$$.fragment,f),E(Hw.$$.fragment,f),E(y$.$$.fragment,f),E(x$.$$.fragment,f),E(k$.$$.fragment,f),E(Jw.$$.fragment,f),E(S$.$$.fragment,f),E(Kw.$$.fragment,f),FVe=!0)},o(f){C(d.$$.fragment,f),C(ya.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(Rf.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(xL.$$.fragment,f),C(Gg.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(BL.$$.fragment,f),C(Eh.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(qL.$$.fragment,f),C(GL.$$.fragment,f),C(ap.$$.fragment,f),C(np.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(QL.$$.fragment,f),C(wp.$$.fragment,f),C(Ap.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(xp.$$.fragment,f),C(ZL.$$.fragment,f),C(x_.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(k_.$$.fragment,f),C(ay.$$.fragment,f),C(M4.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(C4.$$.fragment,f),C(dy.$$.fragment,f),C(f1.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(g1.$$.fragment,f),C(hy.$$.fragment,f),C(Y1.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Z1.$$.fragment,f),C(vy.$$.fragment,f),C(b2.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(F2.$$.fragment,f),C(Cy.$$.fragment,f),C(ub.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(bb.$$.fragment,f),C(xy.$$.fragment,f),C(Ub.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(Yb.$$.fragment,f),C(Py.$$.fragment,f),C(av.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(sv.$$.fragment,f),C(jy.$$.fragment,f),C(Vv.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(zv.$$.fragment,f),C(Xy.$$.fragment,f),C(R3.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(B3.$$.fragment,f),C(Uy.$$.fragment,f),C(q3.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(D3.$$.fragment,f),C(e8.$$.fragment,f),C(eF.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(rF.$$.fragment,f),C(n8.$$.fragment,f),C(nF.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(lF.$$.fragment,f),C(c8.$$.fragment,f),C(cF.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(mF.$$.fragment,f),C(p8.$$.fragment,f),C(EF.$$.fragment,f),C(u8.$$.fragment,f),C(_8.$$.fragment,f),C(v8.$$.fragment,f),C(wF.$$.fragment,f),C(F8.$$.fragment,f),C(SF.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(PF.$$.fragment,f),C(w8.$$.fragment,f),C(WF.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(HF.$$.fragment,f),C($8.$$.fragment,f),C(KF.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(eT.$$.fragment,f),C(I8.$$.fragment,f),C(lT.$$.fragment,f),C(N8.$$.fragment,f),C(q8.$$.fragment,f),C(D8.$$.fragment,f),C(dT.$$.fragment,f),C(G8.$$.fragment,f),C(hT.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(uT.$$.fragment,f),C(W8.$$.fragment,f),C(FT.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(MT.$$.fragment,f),C(K8.$$.fragment,f),C(wT.$$.fragment,f),C(Z8.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C(LT.$$.fragment,f),C(t9.$$.fragment,f),C(RT.$$.fragment,f),C(a9.$$.fragment,f),C(n9.$$.fragment,f),C(l9.$$.fragment,f),C(BT.$$.fragment,f),C(i9.$$.fragment,f),C(qT.$$.fragment,f),C(d9.$$.fragment,f),C(c9.$$.fragment,f),C(m9.$$.fragment,f),C(DT.$$.fragment,f),C(g9.$$.fragment,f),C(R7.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(_9.$$.fragment,f),C(B7.$$.fragment,f),C(b9.$$.fragment,f),C(nM.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(lM.$$.fragment,f),C(E9.$$.fragment,f),C(TM.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(EM.$$.fragment,f),C(y9.$$.fragment,f),C(yM.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C($M.$$.fragment,f),C(R9.$$.fragment,f),C(YM.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(ZM.$$.fragment,f),C(q9.$$.fragment,f),C(cE.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(mE.$$.fragment,f),C(V9.$$.fragment,f),C(jE.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(GE.$$.fragment,f),C(H9.$$.fragment,f),C(nC.$$.fragment,f),C(U9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(lC.$$.fragment,f),C(Z9.$$.fragment,f),C(cC.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(mC.$$.fragment,f),C(nx.$$.fragment,f),C(hC.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(uC.$$.fragment,f),C(cx.$$.fragment,f),C(NC.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(jC.$$.fragment,f),C(px.$$.fragment,f),C(s5.$$.fragment,f),C(ux.$$.fragment,f),C(_x.$$.fragment,f),C(vx.$$.fragment,f),C(i5.$$.fragment,f),C(Fx.$$.fragment,f),C(c5.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(m5.$$.fragment,f),C(wx.$$.fragment,f),C(h5.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(u5.$$.fragment,f),C($x.$$.fragment,f),C(X5.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(W5.$$.fragment,f),C(Bx.$$.fragment,f),C(t0.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(n0.$$.fragment,f),C(Dx.$$.fragment,f),C(v0.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(T0.$$.fragment,f),C(zx.$$.fragment,f),C(S0.$$.fragment,f),C(Wx.$$.fragment,f),C(Qx.$$.fragment,f),C(Ux.$$.fragment,f),C(P0.$$.fragment,f),C(Jx.$$.fragment,f),C(z0.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e$.$$.fragment,f),C(Q0.$$.fragment,f),C(o$.$$.fragment,f),C(aw.$$.fragment,f),C(r$.$$.fragment,f),C(t$.$$.fragment,f),C(n$.$$.fragment,f),C(sw.$$.fragment,f),C(s$.$$.fragment,f),C(_w.$$.fragment,f),C(l$.$$.fragment,f),C(i$.$$.fragment,f),C(c$.$$.fragment,f),C(vw.$$.fragment,f),C(f$.$$.fragment,f),C(yw.$$.fragment,f),C(m$.$$.fragment,f),C(g$.$$.fragment,f),C(p$.$$.fragment,f),C($w.$$.fragment,f),C(u$.$$.fragment,f),C(jw.$$.fragment,f),C(_$.$$.fragment,f),C(b$.$$.fragment,f),C(F$.$$.fragment,f),C(Gw.$$.fragment,f),C(T$.$$.fragment,f),C(Vw.$$.fragment,f),C(M$.$$.fragment,f),C(E$.$$.fragment,f),C(w$.$$.fragment,f),C(zw.$$.fragment,f),C(A$.$$.fragment,f),C(Hw.$$.fragment,f),C(y$.$$.fragment,f),C(x$.$$.fragment,f),C(k$.$$.fragment,f),C(Jw.$$.fragment,f),C(S$.$$.fragment,f),C(Kw.$$.fragment,f),FVe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(yf),f&&t(at),f&&t(Oe),f&&t(We),f&&t($f),w(ya,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t(xa),f&&t(pGe),f&&t(yi),w(EL),f&&t(uGe),f&&t(In),f&&t(_Ge),w(CL,f),f&&t(bGe),f&&t(oS),f&&t(vGe),w(Rf,f),f&&t(FGe),f&&t(xi),w(wL),f&&t(TGe),f&&t(wo),w(AL),w(xL),w(Gg),w($L),f&&t(MGe),f&&t(ki),w(kL),f&&t(EGe),f&&t(Ao),w(SL),w(BL),w(Eh),w(IL),f&&t(CGe),f&&t(Si),w(NL),f&&t(wGe),f&&t(Lo),w(qL),w(GL),w(ap),w(np),w(OL),f&&t(AGe),f&&t(Ri),w(VL),f&&t(LGe),f&&t(yo),w(XL),w(QL),w(wp),w(Ap),w(HL),f&&t(yGe),f&&t(Bi),w(UL),f&&t(xGe),f&&t(xo),w(JL),w(KL),w(xp),w(ZL),w(x_),f&&t($Ge),f&&t(qi),w(ey),f&&t(kGe),f&&t($o),w(oy),w(ty),w(k_),w(ay),w(M4),f&&t(SGe),f&&t(Gi),w(ny),f&&t(RGe),f&&t(ko),w(sy),w(iy),w(C4),w(dy),w(f1),f&&t(PGe),f&&t(Xi),w(cy),f&&t(BGe),f&&t(So),w(fy),w(gy),w(g1),w(hy),w(Y1),f&&t(IGe),f&&t(Qi),w(py),f&&t(NGe),f&&t(Ro),w(uy),w(by),w(Z1),w(vy),w(b2),f&&t(qGe),f&&t(Ji),w(Fy),f&&t(jGe),f&&t(Po),w(Ty),w(Ey),w(F2),w(Cy),w(ub),f&&t(DGe),f&&t(Zi),w(wy),f&&t(GGe),f&&t(Bo),w(Ay),w(yy),w(bb),w(xy),w(Ub),f&&t(OGe),f&&t(rd),w($y),f&&t(VGe),f&&t(Io),w(ky),w(Ry),w(Yb),w(Py),w(av),f&&t(XGe),f&&t(nd),w(By),f&&t(zGe),f&&t(No),w(Iy),w(qy),w(sv),w(jy),w(Vv),f&&t(WGe),f&&t(id),w(Dy),f&&t(QGe),f&&t(qo),w(Gy),w(Vy),w(zv),w(Xy),w(R3),f&&t(HGe),f&&t(fd),w(zy),f&&t(UGe),f&&t(jo),w(Wy),w(Hy),w(B3),w(Uy),w(q3),f&&t(JGe),f&&t(hd),w(Jy),f&&t(YGe),f&&t(Do),w(Yy),w(Zy),w(D3),w(e8),w(eF),f&&t(KGe),f&&t(_d),w(o8),f&&t(ZGe),f&&t(Go),w(r8),w(a8),w(rF),w(n8),w(nF),f&&t(eOe),f&&t(Fd),w(s8),f&&t(oOe),f&&t(Oo),w(l8),w(d8),w(lF),w(c8),w(cF),f&&t(rOe),f&&t(Ed),w(f8),f&&t(tOe),f&&t(Vo),w(m8),w(h8),w(mF),w(p8),w(EF),f&&t(aOe),f&&t(Ad),w(u8),f&&t(nOe),f&&t(Xo),w(_8),w(v8),w(wF),w(F8),w(SF),f&&t(sOe),f&&t(xd),w(T8),f&&t(lOe),f&&t(zo),w(M8),w(C8),w(PF),w(w8),w(WF),f&&t(iOe),f&&t(Sd),w(A8),f&&t(dOe),f&&t(Wo),w(L8),w(x8),w(HF),w($8),w(KF),f&&t(cOe),f&&t(Bd),w(S8),f&&t(fOe),f&&t(Qo),w(R8),w(B8),w(eT),w(I8),w(lT),f&&t(mOe),f&&t(qd),w(N8),f&&t(gOe),f&&t(Ho),w(q8),w(D8),w(dT),w(G8),w(hT),f&&t(hOe),f&&t(Od),w(O8),f&&t(pOe),f&&t(Uo),w(V8),w(z8),w(uT),w(W8),w(FT),f&&t(uOe),f&&t(zd),w(H8),f&&t(_Oe),f&&t(Jo),w(U8),w(Y8),w(MT),w(K8),w(wT),f&&t(bOe),f&&t(Hd),w(Z8),f&&t(vOe),f&&t(Yo),w(e9),w(r9),w(LT),w(t9),w(RT),f&&t(FOe),f&&t(Yd),w(a9),f&&t(TOe),f&&t(Ko),w(n9),w(l9),w(BT),w(i9),w(qT),f&&t(MOe),f&&t(ec),w(d9),f&&t(EOe),f&&t(Zo),w(c9),w(m9),w(DT),w(g9),w(R7),f&&t(COe),f&&t(tc),w(h9),f&&t(wOe),f&&t(er),w(p9),w(_9),w(B7),w(b9),w(nM),f&&t(AOe),f&&t(sc),w(v9),f&&t(LOe),f&&t(or),w(F9),w(M9),w(lM),w(E9),w(TM),f&&t(yOe),f&&t(dc),w(C9),f&&t(xOe),f&&t(rr),w(w9),w(L9),w(EM),w(y9),w(yM),f&&t($Oe),f&&t(mc),w(x9),f&&t(kOe),f&&t(tr),w($9),w(S9),w($M),w(R9),w(YM),f&&t(SOe),f&&t(pc),w(P9),f&&t(ROe),f&&t(ar),w(B9),w(N9),w(ZM),w(q9),w(cE),f&&t(POe),f&&t(bc),w(j9),f&&t(BOe),f&&t(nr),w(D9),w(O9),w(mE),w(V9),w(jE),f&&t(IOe),f&&t(Tc),w(X9),f&&t(NOe),f&&t(sr),w(z9),w(Q9),w(GE),w(H9),w(nC),f&&t(qOe),f&&t(Cc),w(U9),f&&t(jOe),f&&t(lr),w(J9),w(K9),w(lC),w(Z9),w(cC),f&&t(DOe),f&&t(Lc),w(ox),f&&t(GOe),f&&t(ir),w(rx),w(ax),w(mC),w(nx),w(hC),f&&t(OOe),f&&t($c),w(sx),f&&t(VOe),f&&t(dr),w(lx),w(dx),w(uC),w(cx),w(NC),f&&t(XOe),f&&t(Rc),w(fx),f&&t(zOe),f&&t(cr),w(mx),w(hx),w(jC),w(px),w(s5),f&&t(WOe),f&&t(Ic),w(ux),f&&t(QOe),f&&t(fr),w(_x),w(vx),w(i5),w(Fx),w(c5),f&&t(HOe),f&&t(jc),w(Tx),f&&t(UOe),f&&t(mr),w(Mx),w(Cx),w(m5),w(wx),w(h5),f&&t(JOe),f&&t(Oc),w(Ax),f&&t(YOe),f&&t(gr),w(Lx),w(xx),w(u5),w($x),w(X5),f&&t(KOe),f&&t(zc),w(kx),f&&t(ZOe),f&&t(hr),w(Sx),w(Px),w(W5),w(Bx),w(t0),f&&t(eVe),f&&t(Hc),w(Ix),f&&t(oVe),f&&t(pr),w(Nx),w(jx),w(n0),w(Dx),w(v0),f&&t(rVe),f&&t(Yc),w(Gx),f&&t(tVe),f&&t(ur),w(Ox),w(Xx),w(T0),w(zx),w(S0),f&&t(aVe),f&&t(ef),w(Wx),f&&t(nVe),f&&t(_r),w(Qx),w(Ux),w(P0),w(Jx),w(z0),f&&t(sVe),f&&t(tf),w(Yx),f&&t(lVe),f&&t(br),w(Kx),w(e$),w(Q0),w(o$),w(aw),f&&t(iVe),f&&t(sf),w(r$),f&&t(dVe),f&&t(vr),w(t$),w(n$),w(sw),w(s$),w(_w),f&&t(cVe),f&&t(cf),w(l$),f&&t(fVe),f&&t(Fr),w(i$),w(c$),w(vw),w(f$),w(yw),f&&t(mVe),f&&t(gf),w(m$),f&&t(gVe),f&&t(Tr),w(g$),w(p$),w($w),w(u$),w(jw),f&&t(hVe),f&&t(uf),w(_$),f&&t(pVe),f&&t(Mr),w(b$),w(F$),w(Gw),w(T$),w(Vw),f&&t(uVe),f&&t(vf),w(M$),f&&t(_Ve),f&&t(Er),w(E$),w(w$),w(zw),w(A$),w(Hw),f&&t(bVe),f&&t(Mf),w(y$),f&&t(vVe),f&&t(Cr),w(x$),w(k$),w(Jw),w(S$),w(Kw)}}}const mGt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function gGt(x){return fjt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class FGt extends ljt{constructor(g){super();ijt(this,g,gGt,fGt,djt,{})}}export{FGt as default,mGt as metadata};
