import{S as USt,i as JSt,s as YSt,e as a,k as l,w as F,t as o,M as KSt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as ZSt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as zzr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function eRt(y){let g,v,p,m,_,d,h,Mo,gi,uf,rt,hi,pi,I6,bf,De,We,_i,Ln,N6,yn,xn,q6,ui,$n,j6,bi,vf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),gi=a("code"),uf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),hi=a("code"),pi=o('"new-model"'),I6=o(")."),bf=l(),De=a("p"),We=o("Likewise, if your "),_i=a("code"),Ln=o("NewModel"),N6=o(" is a subclass of "),yn=a("a"),xn=o("PreTrainedModel"),q6=o(`, make sure its
`),ui=a("code"),$n=o("config_class"),j6=o(` attribute is set to the same class you use when registering the model (here
`),bi=a("code"),vf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var sk=s(p);m=r(sk,"NewModelConfig"),sk.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var vi=s(d);h=r(vi,"PretrainedConfig"),vi.forEach(t),Mo=r(Ae,`, make sure its
`),gi=n(Ae,"CODE",{});var lk=s(gi);uf=r(lk,"model_type"),lk.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),hi=n(Ae,"CODE",{});var ik=s(hi);pi=r(ik,'"new-model"'),ik.forEach(t),I6=r(Ae,")."),Ae.forEach(t),bf=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),_i=n(Eo,"CODE",{});var wa=s(_i);Ln=r(wa,"NewModel"),wa.forEach(t),N6=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var dk=s(yn);xn=r(dk,"PreTrainedModel"),dk.forEach(t),q6=r(Eo,`, make sure its
`),ui=n(Eo,"CODE",{});var Ff=s(ui);$n=r(Ff,"config_class"),Ff.forEach(t),j6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),bi=n(Eo,"CODE",{});var ck=s(bi);vf=r(ck,"NewModelConfig"),ck.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,gi),e(gi,uf),e(g,rt),e(g,hi),e(hi,pi),e(g,I6),b(Qe,bf,Ae),b(Qe,De,Ae),e(De,We),e(De,_i),e(_i,Ln),e(De,N6),e(De,yn),e(yn,xn),e(De,q6),e(De,ui),e(ui,$n),e(De,j6),e(De,bi),e(bi,vf),e(De,Ca)},d(Qe){Qe&&t(g),Qe&&t(bf),Qe&&t(De)}}}function oRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tRt(y){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function aRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nRt(y){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function sRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Rt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ERt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ARt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Rt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ORt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function URt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ePt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Pt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function APt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Pt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YPt(y){let g,v,p,m,_,d,h,Mo,gi,uf,rt,hi,pi,I6,bf,De,We,_i,Ln,N6,yn,xn,q6,ui,$n,j6,bi,vf,Ca,Qe,Ae,sk,vi,lk,ik,Eo,wa,dk,Ff,ck,dVe,Kqe,Fi,Tf,Ioe,D6,cVe,Noe,fVe,Zqe,kn,mVe,qoe,gVe,hVe,joe,pVe,_Ve,eje,G6,oje,fk,uVe,rje,Mf,tje,Ti,Ef,Doe,O6,bVe,Goe,vVe,aje,Co,V6,FVe,X6,TVe,mk,MVe,EVe,CVe,z6,wVe,Ooe,AVe,LVe,yVe,Er,W6,xVe,Voe,$Ve,kVe,Mi,SVe,Xoe,RVe,PVe,zoe,BVe,IVe,NVe,A,Cf,Woe,qVe,jVe,gk,DVe,GVe,OVe,wf,Qoe,VVe,XVe,hk,zVe,WVe,QVe,Af,Hoe,HVe,UVe,pk,JVe,YVe,KVe,Lf,Uoe,ZVe,eXe,_k,oXe,rXe,tXe,yf,Joe,aXe,nXe,uk,sXe,lXe,iXe,xf,Yoe,dXe,cXe,bk,fXe,mXe,gXe,$f,Koe,hXe,pXe,vk,_Xe,uXe,bXe,kf,Zoe,vXe,FXe,Fk,TXe,MXe,EXe,Sf,ere,CXe,wXe,Tk,AXe,LXe,yXe,Rf,ore,xXe,$Xe,Mk,kXe,SXe,RXe,Pf,rre,PXe,BXe,Ek,IXe,NXe,qXe,Bf,tre,jXe,DXe,Ck,GXe,OXe,VXe,If,are,XXe,zXe,wk,WXe,QXe,HXe,Nf,nre,UXe,JXe,Ak,YXe,KXe,ZXe,qf,sre,eze,oze,Lk,rze,tze,aze,jf,lre,nze,sze,yk,lze,ize,dze,Df,ire,cze,fze,xk,mze,gze,hze,Gf,dre,pze,_ze,$k,uze,bze,vze,Of,cre,Fze,Tze,kk,Mze,Eze,Cze,Vf,fre,wze,Aze,Sk,Lze,yze,xze,Xf,mre,$ze,kze,Rk,Sze,Rze,Pze,zf,gre,Bze,Ize,Pk,Nze,qze,jze,Wf,hre,Dze,Gze,Bk,Oze,Vze,Xze,Qf,pre,zze,Wze,Ik,Qze,Hze,Uze,Hf,_re,Jze,Yze,Nk,Kze,Zze,eWe,Uf,ure,oWe,rWe,qk,tWe,aWe,nWe,Jf,bre,sWe,lWe,jk,iWe,dWe,cWe,Yf,vre,fWe,mWe,Dk,gWe,hWe,pWe,Kf,Fre,_We,uWe,Gk,bWe,vWe,FWe,Zf,Tre,TWe,MWe,Ok,EWe,CWe,wWe,em,Mre,AWe,LWe,Vk,yWe,xWe,$We,om,Ere,kWe,SWe,Xk,RWe,PWe,BWe,rm,Cre,IWe,NWe,zk,qWe,jWe,DWe,tm,wre,GWe,OWe,Wk,VWe,XWe,zWe,am,Are,WWe,QWe,Qk,HWe,UWe,JWe,nm,Lre,YWe,KWe,Hk,ZWe,eQe,oQe,sm,yre,rQe,tQe,Uk,aQe,nQe,sQe,lm,xre,lQe,iQe,Jk,dQe,cQe,fQe,im,$re,mQe,gQe,Yk,hQe,pQe,_Qe,dm,kre,uQe,bQe,Kk,vQe,FQe,TQe,cm,Sre,MQe,EQe,Zk,CQe,wQe,AQe,fm,Rre,LQe,yQe,eS,xQe,$Qe,kQe,mm,Pre,SQe,RQe,oS,PQe,BQe,IQe,gm,Bre,NQe,qQe,rS,jQe,DQe,GQe,hm,Ire,OQe,VQe,tS,XQe,zQe,WQe,pm,Nre,QQe,HQe,aS,UQe,JQe,YQe,_m,qre,KQe,ZQe,nS,eHe,oHe,rHe,um,jre,tHe,aHe,sS,nHe,sHe,lHe,bm,Dre,iHe,dHe,lS,cHe,fHe,mHe,vm,Gre,gHe,hHe,iS,pHe,_He,uHe,Fm,Ore,bHe,vHe,dS,FHe,THe,MHe,Tm,Vre,EHe,CHe,cS,wHe,AHe,LHe,Mm,Xre,yHe,xHe,fS,$He,kHe,SHe,Em,zre,RHe,PHe,mS,BHe,IHe,NHe,Cm,Wre,qHe,jHe,gS,DHe,GHe,OHe,wm,Qre,VHe,XHe,hS,zHe,WHe,QHe,Am,Hre,HHe,UHe,pS,JHe,YHe,KHe,Lm,Ure,ZHe,eUe,_S,oUe,rUe,tUe,ym,Jre,aUe,nUe,uS,sUe,lUe,iUe,xm,Yre,dUe,cUe,bS,fUe,mUe,gUe,$m,Kre,hUe,pUe,vS,_Ue,uUe,bUe,km,Zre,vUe,FUe,FS,TUe,MUe,EUe,Sm,ete,CUe,wUe,TS,AUe,LUe,yUe,Rm,ote,xUe,$Ue,MS,kUe,SUe,RUe,Pm,rte,PUe,BUe,ES,IUe,NUe,qUe,Bm,tte,jUe,DUe,CS,GUe,OUe,VUe,Im,ate,XUe,zUe,wS,WUe,QUe,HUe,Nm,nte,UUe,JUe,AS,YUe,KUe,ZUe,qm,ste,eJe,oJe,LS,rJe,tJe,aJe,jm,lte,nJe,sJe,yS,lJe,iJe,dJe,Dm,ite,cJe,fJe,xS,mJe,gJe,hJe,Gm,dte,pJe,_Je,$S,uJe,bJe,vJe,Om,cte,FJe,TJe,kS,MJe,EJe,CJe,Vm,fte,wJe,AJe,SS,LJe,yJe,xJe,Xm,mte,$Je,kJe,RS,SJe,RJe,PJe,zm,gte,BJe,IJe,PS,NJe,qJe,jJe,Wm,hte,DJe,GJe,BS,OJe,VJe,XJe,Qm,pte,zJe,WJe,IS,QJe,HJe,UJe,Hm,_te,JJe,YJe,NS,KJe,ZJe,eYe,Um,ute,oYe,rYe,qS,tYe,aYe,nYe,Jm,bte,sYe,lYe,jS,iYe,dYe,cYe,Ym,vte,fYe,mYe,DS,gYe,hYe,pYe,Km,Fte,_Ye,uYe,GS,bYe,vYe,FYe,Zm,Tte,TYe,MYe,OS,EYe,CYe,wYe,eg,Mte,AYe,LYe,VS,yYe,xYe,$Ye,og,Ete,kYe,SYe,XS,RYe,PYe,BYe,rg,Cte,IYe,NYe,zS,qYe,jYe,DYe,tg,wte,GYe,OYe,WS,VYe,XYe,zYe,ag,Ate,WYe,QYe,QS,HYe,UYe,JYe,ng,Lte,YYe,KYe,HS,ZYe,eKe,oKe,sg,yte,rKe,tKe,US,aKe,nKe,sKe,lg,xte,lKe,iKe,JS,dKe,cKe,fKe,ig,$te,mKe,gKe,YS,hKe,pKe,_Ke,dg,kte,uKe,bKe,KS,vKe,FKe,TKe,cg,Ste,MKe,EKe,ZS,CKe,wKe,AKe,fg,Rte,LKe,yKe,eR,xKe,$Ke,kKe,mg,Pte,SKe,RKe,oR,PKe,BKe,IKe,gg,Bte,NKe,qKe,rR,jKe,DKe,GKe,hg,Ite,OKe,VKe,tR,XKe,zKe,WKe,pg,Nte,QKe,HKe,aR,UKe,JKe,YKe,_g,qte,KKe,ZKe,nR,eZe,oZe,rZe,ug,jte,tZe,aZe,sR,nZe,sZe,lZe,bg,Dte,iZe,dZe,lR,cZe,fZe,mZe,vg,Gte,gZe,hZe,iR,pZe,_Ze,uZe,Fg,Ote,bZe,vZe,dR,FZe,TZe,MZe,Tg,Vte,EZe,CZe,cR,wZe,AZe,LZe,Mg,Xte,yZe,xZe,fR,$Ze,kZe,SZe,Eg,zte,RZe,PZe,mR,BZe,IZe,NZe,Cg,Wte,qZe,jZe,gR,DZe,GZe,OZe,wg,Qte,VZe,XZe,hR,zZe,WZe,QZe,Ag,Hte,HZe,UZe,pR,JZe,YZe,KZe,Lg,ZZe,yg,Q6,eeo,Ute,oeo,nje,Ei,xg,Jte,H6,reo,Yte,teo,sje,wo,U6,aeo,J6,neo,_R,seo,leo,ieo,Y6,deo,Kte,ceo,feo,meo,Cr,K6,geo,Zte,heo,peo,Aa,_eo,eae,ueo,beo,oae,veo,Feo,rae,Teo,Meo,Eeo,k,Sn,tae,Ceo,weo,uR,Aeo,Leo,bR,yeo,xeo,$eo,Rn,aae,keo,Seo,vR,Reo,Peo,FR,Beo,Ieo,Neo,Pn,nae,qeo,jeo,TR,Deo,Geo,MR,Oeo,Veo,Xeo,$g,sae,zeo,Weo,ER,Qeo,Heo,Ueo,Bn,lae,Jeo,Yeo,CR,Keo,Zeo,wR,eoo,ooo,roo,kg,iae,too,aoo,AR,noo,soo,loo,Sg,dae,ioo,doo,LR,coo,foo,moo,Rg,cae,goo,hoo,yR,poo,_oo,uoo,In,fae,boo,voo,xR,Foo,Too,$R,Moo,Eoo,Coo,Nn,mae,woo,Aoo,kR,Loo,yoo,SR,xoo,$oo,koo,qn,gae,Soo,Roo,RR,Poo,Boo,PR,Ioo,Noo,qoo,Pg,hae,joo,Doo,BR,Goo,Ooo,Voo,Bg,pae,Xoo,zoo,IR,Woo,Qoo,Hoo,jn,_ae,Uoo,Joo,NR,Yoo,Koo,qR,Zoo,ero,oro,Ig,uae,rro,tro,jR,aro,nro,sro,Dn,bae,lro,iro,DR,dro,cro,GR,fro,mro,gro,Gn,vae,hro,pro,OR,_ro,uro,VR,bro,vro,Fro,On,Fae,Tro,Mro,XR,Ero,Cro,zR,wro,Aro,Lro,Vn,Tae,yro,xro,WR,$ro,kro,QR,Sro,Rro,Pro,Ng,Mae,Bro,Iro,HR,Nro,qro,jro,Xn,Eae,Dro,Gro,UR,Oro,Vro,JR,Xro,zro,Wro,zn,Cae,Qro,Hro,YR,Uro,Jro,KR,Yro,Kro,Zro,Wn,wae,eto,oto,ZR,rto,tto,eP,ato,nto,sto,Qn,Aae,lto,ito,oP,dto,cto,rP,fto,mto,gto,Hn,Lae,hto,pto,tP,_to,uto,aP,bto,vto,Fto,Un,yae,Tto,Mto,nP,Eto,Cto,sP,wto,Ato,Lto,qg,xae,yto,xto,lP,$to,kto,Sto,Jn,$ae,Rto,Pto,iP,Bto,Ito,dP,Nto,qto,jto,jg,kae,Dto,Gto,cP,Oto,Vto,Xto,Yn,Sae,zto,Wto,fP,Qto,Hto,mP,Uto,Jto,Yto,Kn,Rae,Kto,Zto,gP,eao,oao,hP,rao,tao,aao,Zn,Pae,nao,sao,pP,lao,iao,_P,dao,cao,fao,Dg,Bae,mao,gao,uP,hao,pao,_ao,es,Iae,uao,bao,bP,vao,Fao,vP,Tao,Mao,Eao,os,Nae,Cao,wao,FP,Aao,Lao,TP,yao,xao,$ao,Gg,qae,kao,Sao,MP,Rao,Pao,Bao,rs,jae,Iao,Nao,EP,qao,jao,CP,Dao,Gao,Oao,ts,Dae,Vao,Xao,wP,zao,Wao,AP,Qao,Hao,Uao,as,Gae,Jao,Yao,LP,Kao,Zao,yP,eno,ono,rno,ns,Oae,tno,ano,xP,nno,sno,$P,lno,ino,dno,ss,Vae,cno,fno,kP,mno,gno,SP,hno,pno,_no,ls,Xae,uno,bno,RP,vno,Fno,PP,Tno,Mno,Eno,is,zae,Cno,wno,BP,Ano,Lno,IP,yno,xno,$no,Og,Wae,kno,Sno,NP,Rno,Pno,Bno,ds,Qae,Ino,Nno,qP,qno,jno,jP,Dno,Gno,Ono,Vg,Hae,Vno,Xno,DP,zno,Wno,Qno,Xg,Uae,Hno,Uno,GP,Jno,Yno,Kno,cs,Jae,Zno,eso,OP,oso,rso,VP,tso,aso,nso,fs,Yae,sso,lso,XP,iso,dso,zP,cso,fso,mso,ms,Kae,gso,hso,WP,pso,_so,QP,uso,bso,vso,zg,Zae,Fso,Tso,HP,Mso,Eso,Cso,gs,ene,wso,Aso,UP,Lso,yso,JP,xso,$so,kso,hs,one,Sso,Rso,YP,Pso,Bso,KP,Iso,Nso,qso,ps,rne,jso,Dso,ZP,Gso,Oso,eB,Vso,Xso,zso,_s,tne,Wso,Qso,oB,Hso,Uso,rB,Jso,Yso,Kso,us,ane,Zso,elo,tB,olo,rlo,aB,tlo,alo,nlo,Wg,nne,slo,llo,nB,ilo,dlo,clo,bs,sne,flo,mlo,sB,glo,hlo,lB,plo,_lo,ulo,Qg,lne,blo,vlo,iB,Flo,Tlo,Mlo,Hg,ine,Elo,Clo,dB,wlo,Alo,Llo,Ug,dne,ylo,xlo,cB,$lo,klo,Slo,Jg,cne,Rlo,Plo,fB,Blo,Ilo,Nlo,vs,fne,qlo,jlo,mB,Dlo,Glo,gB,Olo,Vlo,Xlo,Yg,mne,zlo,Wlo,hB,Qlo,Hlo,Ulo,Fs,gne,Jlo,Ylo,pB,Klo,Zlo,_B,eio,oio,rio,Ts,hne,tio,aio,uB,nio,sio,bB,lio,iio,dio,Ms,pne,cio,fio,vB,mio,gio,FB,hio,pio,_io,Es,_ne,uio,bio,TB,vio,Fio,MB,Tio,Mio,Eio,Cs,une,Cio,wio,EB,Aio,Lio,CB,yio,xio,$io,ws,bne,kio,Sio,wB,Rio,Pio,AB,Bio,Iio,Nio,Kg,vne,qio,jio,LB,Dio,Gio,Oio,Zg,Fne,Vio,Xio,yB,zio,Wio,Qio,As,Tne,Hio,Uio,xB,Jio,Yio,$B,Kio,Zio,edo,Ls,Mne,odo,rdo,kB,tdo,ado,SB,ndo,sdo,ldo,ys,Ene,ido,ddo,RB,cdo,fdo,PB,mdo,gdo,hdo,eh,Cne,pdo,_do,BB,udo,bdo,vdo,oh,wne,Fdo,Tdo,IB,Mdo,Edo,Cdo,rh,Ane,wdo,Ado,NB,Ldo,ydo,xdo,xs,Lne,$do,kdo,qB,Sdo,Rdo,jB,Pdo,Bdo,Ido,th,yne,Ndo,qdo,DB,jdo,Ddo,Gdo,ah,xne,Odo,Vdo,GB,Xdo,zdo,Wdo,nh,$ne,Qdo,Hdo,OB,Udo,Jdo,Ydo,$s,kne,Kdo,Zdo,VB,eco,oco,XB,rco,tco,aco,sh,Sne,nco,sco,zB,lco,ico,dco,lh,Rne,cco,fco,WB,mco,gco,hco,ks,Pne,pco,_co,QB,uco,bco,HB,vco,Fco,Tco,Ss,Bne,Mco,Eco,UB,Cco,wco,JB,Aco,Lco,yco,Rs,Ine,xco,$co,YB,kco,Sco,KB,Rco,Pco,Bco,Ps,Nne,Ico,Nco,ZB,qco,jco,eI,Dco,Gco,Oco,ih,Vco,dh,Z6,Xco,qne,zco,lje,Ci,ch,jne,eL,Wco,Dne,Qco,ije,Ao,oL,Hco,rL,Uco,oI,Jco,Yco,Kco,tL,Zco,Gne,efo,ofo,rfo,He,aL,tfo,One,afo,nfo,La,sfo,Vne,lfo,ifo,Xne,dfo,cfo,zne,ffo,mfo,gfo,Y,fh,Wne,hfo,pfo,rI,_fo,ufo,bfo,mh,Qne,vfo,Ffo,tI,Tfo,Mfo,Efo,gh,Hne,Cfo,wfo,aI,Afo,Lfo,yfo,hh,Une,xfo,$fo,nI,kfo,Sfo,Rfo,ph,Jne,Pfo,Bfo,sI,Ifo,Nfo,qfo,_h,Yne,jfo,Dfo,lI,Gfo,Ofo,Vfo,uh,Kne,Xfo,zfo,iI,Wfo,Qfo,Hfo,bh,Zne,Ufo,Jfo,dI,Yfo,Kfo,Zfo,vh,ese,emo,omo,cI,rmo,tmo,amo,Fh,ose,nmo,smo,fI,lmo,imo,dmo,Th,rse,cmo,fmo,mI,mmo,gmo,hmo,Mh,tse,pmo,_mo,gI,umo,bmo,vmo,Eh,ase,Fmo,Tmo,hI,Mmo,Emo,Cmo,Ch,nse,wmo,Amo,pI,Lmo,ymo,xmo,wh,sse,$mo,kmo,_I,Smo,Rmo,Pmo,Ah,lse,Bmo,Imo,uI,Nmo,qmo,jmo,Lh,ise,Dmo,Gmo,bI,Omo,Vmo,Xmo,yh,dse,zmo,Wmo,vI,Qmo,Hmo,Umo,xh,cse,Jmo,Ymo,FI,Kmo,Zmo,ego,$h,fse,ogo,rgo,TI,tgo,ago,ngo,kh,mse,sgo,lgo,MI,igo,dgo,cgo,Sh,gse,fgo,mgo,EI,ggo,hgo,pgo,Rh,hse,_go,ugo,CI,bgo,vgo,Fgo,Ph,pse,Tgo,Mgo,wI,Ego,Cgo,wgo,Bh,_se,Ago,Lgo,AI,ygo,xgo,$go,Ih,use,kgo,Sgo,LI,Rgo,Pgo,Bgo,Nh,bse,Igo,Ngo,yI,qgo,jgo,Dgo,qh,vse,Ggo,Ogo,xI,Vgo,Xgo,zgo,jh,Fse,Wgo,Qgo,$I,Hgo,Ugo,Jgo,Dh,Tse,Ygo,Kgo,kI,Zgo,eho,oho,Gh,rho,Oh,tho,Vh,nL,aho,Mse,nho,dje,wi,Xh,Ese,sL,sho,Cse,lho,cje,Lo,lL,iho,iL,dho,SI,cho,fho,mho,dL,gho,wse,hho,pho,_ho,Ue,cL,uho,Ase,bho,vho,Ai,Fho,Lse,Tho,Mho,yse,Eho,Cho,who,he,zh,xse,Aho,Lho,RI,yho,xho,$ho,Wh,$se,kho,Sho,kse,Rho,Pho,Bho,Qh,Sse,Iho,Nho,PI,qho,jho,Dho,Hh,Rse,Gho,Oho,BI,Vho,Xho,zho,Uh,Pse,Who,Qho,II,Hho,Uho,Jho,Jh,Bse,Yho,Kho,NI,Zho,epo,opo,Yh,Ise,rpo,tpo,qI,apo,npo,spo,Kh,Nse,lpo,ipo,jI,dpo,cpo,fpo,Zh,qse,mpo,gpo,DI,hpo,ppo,_po,ep,jse,upo,bpo,GI,vpo,Fpo,Tpo,op,Dse,Mpo,Epo,OI,Cpo,wpo,Apo,rp,Gse,Lpo,ypo,VI,xpo,$po,kpo,tp,Ose,Spo,Rpo,XI,Ppo,Bpo,Ipo,ap,Vse,Npo,qpo,zI,jpo,Dpo,Gpo,np,Xse,Opo,Vpo,WI,Xpo,zpo,Wpo,sp,zse,Qpo,Hpo,QI,Upo,Jpo,Ypo,lp,Wse,Kpo,Zpo,HI,e_o,o_o,r_o,ip,t_o,dp,a_o,cp,fL,n_o,Qse,s_o,fje,Li,fp,Hse,mL,l_o,Use,i_o,mje,yo,gL,d_o,yi,c_o,UI,f_o,m_o,JI,g_o,h_o,p_o,hL,__o,Jse,u_o,b_o,v_o,tt,pL,F_o,Yse,T_o,M_o,xi,E_o,Kse,C_o,w_o,YI,A_o,L_o,y_o,mp,x_o,Je,_L,$_o,Zse,k_o,S_o,ya,R_o,ele,P_o,B_o,ole,I_o,N_o,rle,q_o,j_o,D_o,x,gp,tle,G_o,O_o,KI,V_o,X_o,z_o,hp,ale,W_o,Q_o,ZI,H_o,U_o,J_o,pp,nle,Y_o,K_o,eN,Z_o,euo,ouo,_p,sle,ruo,tuo,oN,auo,nuo,suo,up,lle,luo,iuo,rN,duo,cuo,fuo,bp,ile,muo,guo,tN,huo,puo,_uo,vp,dle,uuo,buo,aN,vuo,Fuo,Tuo,Fp,cle,Muo,Euo,nN,Cuo,wuo,Auo,Tp,fle,Luo,yuo,sN,xuo,$uo,kuo,Mp,mle,Suo,Ruo,lN,Puo,Buo,Iuo,Ep,gle,Nuo,quo,iN,juo,Duo,Guo,Cp,hle,Ouo,Vuo,dN,Xuo,zuo,Wuo,wp,ple,Quo,Huo,cN,Uuo,Juo,Yuo,Ap,_le,Kuo,Zuo,fN,e4o,o4o,r4o,Lp,ule,t4o,a4o,mN,n4o,s4o,l4o,yp,ble,i4o,d4o,gN,c4o,f4o,m4o,xp,vle,g4o,h4o,hN,p4o,_4o,u4o,$p,Fle,b4o,v4o,pN,F4o,T4o,M4o,kp,Tle,E4o,C4o,_N,w4o,A4o,L4o,Sp,Mle,y4o,x4o,uN,$4o,k4o,S4o,Rp,Ele,R4o,P4o,bN,B4o,I4o,N4o,Pp,Cle,q4o,j4o,vN,D4o,G4o,O4o,Bp,wle,V4o,X4o,FN,z4o,W4o,Q4o,Ip,Ale,H4o,U4o,TN,J4o,Y4o,K4o,Np,Lle,Z4o,e1o,MN,o1o,r1o,t1o,qp,yle,a1o,n1o,EN,s1o,l1o,i1o,jp,xle,d1o,c1o,CN,f1o,m1o,g1o,Dp,$le,h1o,p1o,wN,_1o,u1o,b1o,Gp,kle,v1o,F1o,AN,T1o,M1o,E1o,Op,Sle,C1o,w1o,LN,A1o,L1o,y1o,Vp,Rle,x1o,$1o,yN,k1o,S1o,R1o,Xp,Ple,P1o,B1o,xN,I1o,N1o,q1o,zp,Ble,j1o,D1o,$N,G1o,O1o,V1o,Bs,Ile,X1o,z1o,kN,W1o,Q1o,SN,H1o,U1o,J1o,Wp,Nle,Y1o,K1o,RN,Z1o,ebo,obo,Qp,qle,rbo,tbo,PN,abo,nbo,sbo,Hp,jle,lbo,ibo,BN,dbo,cbo,fbo,Up,Dle,mbo,gbo,IN,hbo,pbo,_bo,Jp,Gle,ubo,bbo,NN,vbo,Fbo,Tbo,Yp,Ole,Mbo,Ebo,qN,Cbo,wbo,Abo,Kp,Vle,Lbo,ybo,jN,xbo,$bo,kbo,Zp,Xle,Sbo,Rbo,DN,Pbo,Bbo,Ibo,e_,zle,Nbo,qbo,GN,jbo,Dbo,Gbo,o_,Wle,Obo,Vbo,ON,Xbo,zbo,Wbo,r_,Qle,Qbo,Hbo,VN,Ubo,Jbo,Ybo,t_,Hle,Kbo,Zbo,XN,e2o,o2o,r2o,a_,Ule,t2o,a2o,zN,n2o,s2o,l2o,n_,Jle,i2o,d2o,WN,c2o,f2o,m2o,s_,Yle,g2o,h2o,QN,p2o,_2o,u2o,l_,Kle,b2o,v2o,HN,F2o,T2o,M2o,i_,Zle,E2o,C2o,UN,w2o,A2o,L2o,d_,eie,y2o,x2o,JN,$2o,k2o,S2o,c_,oie,R2o,P2o,YN,B2o,I2o,N2o,f_,rie,q2o,j2o,KN,D2o,G2o,O2o,m_,tie,V2o,X2o,ZN,z2o,W2o,Q2o,g_,aie,H2o,U2o,eq,J2o,Y2o,K2o,h_,nie,Z2o,evo,oq,ovo,rvo,tvo,p_,sie,avo,nvo,rq,svo,lvo,ivo,__,lie,dvo,cvo,tq,fvo,mvo,gvo,u_,iie,hvo,pvo,aq,_vo,uvo,bvo,b_,die,vvo,Fvo,nq,Tvo,Mvo,Evo,v_,cie,Cvo,wvo,sq,Avo,Lvo,yvo,F_,fie,xvo,$vo,lq,kvo,Svo,Rvo,T_,mie,Pvo,Bvo,iq,Ivo,Nvo,qvo,M_,gie,jvo,Dvo,dq,Gvo,Ovo,Vvo,E_,hie,Xvo,zvo,cq,Wvo,Qvo,Hvo,C_,pie,Uvo,Jvo,fq,Yvo,Kvo,Zvo,w_,_ie,e3o,o3o,mq,r3o,t3o,a3o,A_,uie,n3o,s3o,gq,l3o,i3o,d3o,L_,bie,c3o,f3o,hq,m3o,g3o,h3o,y_,vie,p3o,_3o,pq,u3o,b3o,v3o,x_,Fie,F3o,T3o,_q,M3o,E3o,C3o,$_,Tie,w3o,A3o,uq,L3o,y3o,x3o,k_,Mie,$3o,k3o,bq,S3o,R3o,P3o,S_,Eie,B3o,I3o,vq,N3o,q3o,j3o,R_,Cie,D3o,G3o,Fq,O3o,V3o,X3o,P_,wie,z3o,W3o,Tq,Q3o,H3o,U3o,B_,Aie,J3o,Y3o,Mq,K3o,Z3o,eFo,I_,Lie,oFo,rFo,Eq,tFo,aFo,nFo,N_,yie,sFo,lFo,Cq,iFo,dFo,cFo,q_,xie,fFo,mFo,wq,gFo,hFo,pFo,j_,$ie,_Fo,uFo,Aq,bFo,vFo,FFo,D_,kie,TFo,MFo,Lq,EFo,CFo,wFo,G_,Sie,AFo,LFo,yq,yFo,xFo,$Fo,O_,Rie,kFo,SFo,xq,RFo,PFo,BFo,V_,Pie,IFo,NFo,$q,qFo,jFo,DFo,X_,Bie,GFo,OFo,kq,VFo,XFo,zFo,z_,Iie,WFo,QFo,Sq,HFo,UFo,JFo,W_,Nie,YFo,KFo,Rq,ZFo,eTo,oTo,Q_,qie,rTo,tTo,Pq,aTo,nTo,sTo,H_,jie,lTo,iTo,Bq,dTo,cTo,fTo,U_,Die,mTo,gTo,Iq,hTo,pTo,_To,J_,Gie,uTo,bTo,Nq,vTo,FTo,TTo,Y_,Oie,MTo,ETo,qq,CTo,wTo,ATo,K_,Vie,LTo,yTo,jq,xTo,$To,kTo,Z_,Xie,STo,RTo,Dq,PTo,BTo,ITo,eu,zie,NTo,qTo,Gq,jTo,DTo,GTo,ou,Wie,OTo,VTo,Oq,XTo,zTo,WTo,ru,Qie,QTo,HTo,Vq,UTo,JTo,YTo,tu,Hie,KTo,ZTo,Xq,e7o,o7o,r7o,au,Uie,t7o,a7o,zq,n7o,s7o,l7o,nu,Jie,i7o,d7o,Wq,c7o,f7o,m7o,su,Yie,g7o,h7o,Qq,p7o,_7o,u7o,lu,Kie,b7o,v7o,Hq,F7o,T7o,M7o,iu,E7o,Zie,C7o,w7o,ede,A7o,L7o,du,gje,$i,cu,ode,uL,y7o,rde,x7o,hje,xo,bL,$7o,ki,k7o,Uq,S7o,R7o,Jq,P7o,B7o,I7o,vL,N7o,tde,q7o,j7o,D7o,at,FL,G7o,ade,O7o,V7o,Si,X7o,nde,z7o,W7o,Yq,Q7o,H7o,U7o,fu,J7o,Ye,TL,Y7o,sde,K7o,Z7o,xa,eMo,lde,oMo,rMo,ide,tMo,aMo,dde,nMo,sMo,lMo,G,mu,cde,iMo,dMo,Kq,cMo,fMo,mMo,gu,fde,gMo,hMo,Zq,pMo,_Mo,uMo,hu,mde,bMo,vMo,ej,FMo,TMo,MMo,pu,gde,EMo,CMo,oj,wMo,AMo,LMo,_u,hde,yMo,xMo,rj,$Mo,kMo,SMo,uu,pde,RMo,PMo,tj,BMo,IMo,NMo,bu,_de,qMo,jMo,aj,DMo,GMo,OMo,vu,ude,VMo,XMo,nj,zMo,WMo,QMo,Fu,bde,HMo,UMo,sj,JMo,YMo,KMo,Tu,vde,ZMo,eEo,lj,oEo,rEo,tEo,Mu,Fde,aEo,nEo,ij,sEo,lEo,iEo,Eu,Tde,dEo,cEo,dj,fEo,mEo,gEo,Cu,Mde,hEo,pEo,cj,_Eo,uEo,bEo,wu,Ede,vEo,FEo,fj,TEo,MEo,EEo,Au,Cde,CEo,wEo,mj,AEo,LEo,yEo,Lu,wde,xEo,$Eo,gj,kEo,SEo,REo,yu,Ade,PEo,BEo,hj,IEo,NEo,qEo,xu,Lde,jEo,DEo,pj,GEo,OEo,VEo,$u,yde,XEo,zEo,_j,WEo,QEo,HEo,ku,xde,UEo,JEo,uj,YEo,KEo,ZEo,Su,$de,eCo,oCo,bj,rCo,tCo,aCo,Ru,kde,nCo,sCo,vj,lCo,iCo,dCo,Pu,Sde,cCo,fCo,Fj,mCo,gCo,hCo,Bu,Rde,pCo,_Co,Tj,uCo,bCo,vCo,Iu,Pde,FCo,TCo,Mj,MCo,ECo,CCo,Nu,Bde,wCo,ACo,Ej,LCo,yCo,xCo,qu,Ide,$Co,kCo,Cj,SCo,RCo,PCo,ju,Nde,BCo,ICo,wj,NCo,qCo,jCo,Du,qde,DCo,GCo,Aj,OCo,VCo,XCo,Gu,jde,zCo,WCo,Lj,QCo,HCo,UCo,Ou,Dde,JCo,YCo,yj,KCo,ZCo,e5o,Vu,Gde,o5o,r5o,xj,t5o,a5o,n5o,Xu,Ode,s5o,l5o,$j,i5o,d5o,c5o,zu,Vde,f5o,m5o,kj,g5o,h5o,p5o,Wu,Xde,_5o,u5o,Sj,b5o,v5o,F5o,Qu,zde,T5o,M5o,Rj,E5o,C5o,w5o,Hu,Wde,A5o,L5o,Pj,y5o,x5o,$5o,Uu,Qde,k5o,S5o,Bj,R5o,P5o,B5o,Ju,Hde,I5o,N5o,Ij,q5o,j5o,D5o,Yu,Ude,G5o,O5o,Nj,V5o,X5o,z5o,Ku,Jde,W5o,Q5o,qj,H5o,U5o,J5o,Zu,Yde,Y5o,K5o,jj,Z5o,e0o,o0o,e4,r0o,Kde,t0o,a0o,Zde,n0o,s0o,o4,pje,Ri,r4,ece,ML,l0o,oce,i0o,_je,$o,EL,d0o,Pi,c0o,Dj,f0o,m0o,Gj,g0o,h0o,p0o,CL,_0o,rce,u0o,b0o,v0o,nt,wL,F0o,tce,T0o,M0o,Bi,E0o,ace,C0o,w0o,Oj,A0o,L0o,y0o,t4,x0o,Ke,AL,$0o,nce,k0o,S0o,$a,R0o,sce,P0o,B0o,lce,I0o,N0o,ice,q0o,j0o,D0o,z,a4,dce,G0o,O0o,Vj,V0o,X0o,z0o,n4,cce,W0o,Q0o,Xj,H0o,U0o,J0o,s4,fce,Y0o,K0o,zj,Z0o,ewo,owo,l4,mce,rwo,two,Wj,awo,nwo,swo,i4,gce,lwo,iwo,Qj,dwo,cwo,fwo,d4,hce,mwo,gwo,Hj,hwo,pwo,_wo,c4,pce,uwo,bwo,Uj,vwo,Fwo,Two,f4,_ce,Mwo,Ewo,Jj,Cwo,wwo,Awo,m4,uce,Lwo,ywo,Yj,xwo,$wo,kwo,g4,bce,Swo,Rwo,Kj,Pwo,Bwo,Iwo,h4,vce,Nwo,qwo,Zj,jwo,Dwo,Gwo,p4,Fce,Owo,Vwo,eD,Xwo,zwo,Wwo,_4,Tce,Qwo,Hwo,oD,Uwo,Jwo,Ywo,u4,Mce,Kwo,Zwo,rD,eAo,oAo,rAo,b4,Ece,tAo,aAo,tD,nAo,sAo,lAo,v4,Cce,iAo,dAo,aD,cAo,fAo,mAo,F4,wce,gAo,hAo,nD,pAo,_Ao,uAo,T4,Ace,bAo,vAo,sD,FAo,TAo,MAo,M4,Lce,EAo,CAo,lD,wAo,AAo,LAo,E4,yce,yAo,xAo,iD,$Ao,kAo,SAo,C4,xce,RAo,PAo,dD,BAo,IAo,NAo,w4,$ce,qAo,jAo,cD,DAo,GAo,OAo,A4,kce,VAo,XAo,fD,zAo,WAo,QAo,L4,Sce,HAo,UAo,mD,JAo,YAo,KAo,y4,Rce,ZAo,e6o,gD,o6o,r6o,t6o,x4,Pce,a6o,n6o,hD,s6o,l6o,i6o,$4,Bce,d6o,c6o,pD,f6o,m6o,g6o,k4,Ice,h6o,p6o,_D,_6o,u6o,b6o,S4,Nce,v6o,F6o,uD,T6o,M6o,E6o,R4,qce,C6o,w6o,bD,A6o,L6o,y6o,P4,jce,x6o,$6o,vD,k6o,S6o,R6o,B4,Dce,P6o,B6o,FD,I6o,N6o,q6o,I4,Gce,j6o,D6o,TD,G6o,O6o,V6o,N4,Oce,X6o,z6o,MD,W6o,Q6o,H6o,q4,Vce,U6o,J6o,ED,Y6o,K6o,Z6o,j4,Xce,eLo,oLo,CD,rLo,tLo,aLo,D4,zce,nLo,sLo,wD,lLo,iLo,dLo,G4,Wce,cLo,fLo,AD,mLo,gLo,hLo,O4,pLo,Qce,_Lo,uLo,Hce,bLo,vLo,V4,uje,Ii,X4,Uce,LL,FLo,Jce,TLo,bje,ko,yL,MLo,Ni,ELo,LD,CLo,wLo,yD,ALo,LLo,yLo,xL,xLo,Yce,$Lo,kLo,SLo,st,$L,RLo,Kce,PLo,BLo,qi,ILo,Zce,NLo,qLo,xD,jLo,DLo,GLo,z4,OLo,Ze,kL,VLo,efe,XLo,zLo,ka,WLo,ofe,QLo,HLo,rfe,ULo,JLo,tfe,YLo,KLo,ZLo,Q,W4,afe,eyo,oyo,$D,ryo,tyo,ayo,Q4,nfe,nyo,syo,kD,lyo,iyo,dyo,H4,sfe,cyo,fyo,SD,myo,gyo,hyo,U4,lfe,pyo,_yo,RD,uyo,byo,vyo,J4,ife,Fyo,Tyo,PD,Myo,Eyo,Cyo,Y4,dfe,wyo,Ayo,BD,Lyo,yyo,xyo,K4,cfe,$yo,kyo,ID,Syo,Ryo,Pyo,Z4,ffe,Byo,Iyo,ND,Nyo,qyo,jyo,e1,mfe,Dyo,Gyo,qD,Oyo,Vyo,Xyo,o1,gfe,zyo,Wyo,jD,Qyo,Hyo,Uyo,r1,hfe,Jyo,Yyo,DD,Kyo,Zyo,e8o,t1,pfe,o8o,r8o,GD,t8o,a8o,n8o,a1,_fe,s8o,l8o,OD,i8o,d8o,c8o,n1,ufe,f8o,m8o,VD,g8o,h8o,p8o,s1,bfe,_8o,u8o,XD,b8o,v8o,F8o,l1,vfe,T8o,M8o,zD,E8o,C8o,w8o,i1,Ffe,A8o,L8o,WD,y8o,x8o,$8o,d1,Tfe,k8o,S8o,QD,R8o,P8o,B8o,c1,Mfe,I8o,N8o,HD,q8o,j8o,D8o,f1,Efe,G8o,O8o,UD,V8o,X8o,z8o,m1,Cfe,W8o,Q8o,JD,H8o,U8o,J8o,g1,wfe,Y8o,K8o,YD,Z8o,e9o,o9o,h1,Afe,r9o,t9o,KD,a9o,n9o,s9o,p1,Lfe,l9o,i9o,ZD,d9o,c9o,f9o,_1,yfe,m9o,g9o,eG,h9o,p9o,_9o,u1,xfe,u9o,b9o,oG,v9o,F9o,T9o,b1,$fe,M9o,E9o,rG,C9o,w9o,A9o,v1,kfe,L9o,y9o,tG,x9o,$9o,k9o,F1,Sfe,S9o,R9o,aG,P9o,B9o,I9o,T1,Rfe,N9o,q9o,nG,j9o,D9o,G9o,M1,Pfe,O9o,V9o,sG,X9o,z9o,W9o,E1,Bfe,Q9o,H9o,Ife,U9o,J9o,Y9o,C1,Nfe,K9o,Z9o,lG,exo,oxo,rxo,w1,qfe,txo,axo,iG,nxo,sxo,lxo,A1,jfe,ixo,dxo,dG,cxo,fxo,mxo,L1,Dfe,gxo,hxo,cG,pxo,_xo,uxo,y1,bxo,Gfe,vxo,Fxo,Ofe,Txo,Mxo,x1,vje,ji,$1,Vfe,SL,Exo,Xfe,Cxo,Fje,So,RL,wxo,Di,Axo,fG,Lxo,yxo,mG,xxo,$xo,kxo,PL,Sxo,zfe,Rxo,Pxo,Bxo,lt,BL,Ixo,Wfe,Nxo,qxo,Gi,jxo,Qfe,Dxo,Gxo,gG,Oxo,Vxo,Xxo,k1,zxo,eo,IL,Wxo,Hfe,Qxo,Hxo,Sa,Uxo,Ufe,Jxo,Yxo,Jfe,Kxo,Zxo,Yfe,e$o,o$o,r$o,_e,S1,Kfe,t$o,a$o,hG,n$o,s$o,l$o,R1,Zfe,i$o,d$o,pG,c$o,f$o,m$o,P1,eme,g$o,h$o,_G,p$o,_$o,u$o,B1,ome,b$o,v$o,uG,F$o,T$o,M$o,I1,rme,E$o,C$o,bG,w$o,A$o,L$o,N1,tme,y$o,x$o,vG,$$o,k$o,S$o,q1,ame,R$o,P$o,FG,B$o,I$o,N$o,j1,nme,q$o,j$o,TG,D$o,G$o,O$o,D1,sme,V$o,X$o,MG,z$o,W$o,Q$o,G1,lme,H$o,U$o,EG,J$o,Y$o,K$o,O1,ime,Z$o,eko,CG,oko,rko,tko,V1,dme,ako,nko,wG,sko,lko,iko,X1,cme,dko,cko,AG,fko,mko,gko,z1,fme,hko,pko,LG,_ko,uko,bko,W1,mme,vko,Fko,yG,Tko,Mko,Eko,Q1,gme,Cko,wko,xG,Ako,Lko,yko,H1,xko,hme,$ko,kko,pme,Sko,Rko,U1,Tje,Oi,J1,_me,NL,Pko,ume,Bko,Mje,Ro,qL,Iko,Vi,Nko,$G,qko,jko,kG,Dko,Gko,Oko,jL,Vko,bme,Xko,zko,Wko,it,DL,Qko,vme,Hko,Uko,Xi,Jko,Fme,Yko,Kko,SG,Zko,eSo,oSo,Y1,rSo,oo,GL,tSo,Tme,aSo,nSo,Ra,sSo,Mme,lSo,iSo,Eme,dSo,cSo,Cme,fSo,mSo,gSo,N,K1,wme,hSo,pSo,RG,_So,uSo,bSo,Z1,Ame,vSo,FSo,PG,TSo,MSo,ESo,eb,Lme,CSo,wSo,BG,ASo,LSo,ySo,ob,yme,xSo,$So,IG,kSo,SSo,RSo,rb,xme,PSo,BSo,NG,ISo,NSo,qSo,tb,$me,jSo,DSo,qG,GSo,OSo,VSo,ab,kme,XSo,zSo,jG,WSo,QSo,HSo,nb,Sme,USo,JSo,DG,YSo,KSo,ZSo,sb,Rme,eRo,oRo,GG,rRo,tRo,aRo,lb,Pme,nRo,sRo,OG,lRo,iRo,dRo,ib,Bme,cRo,fRo,VG,mRo,gRo,hRo,db,Ime,pRo,_Ro,XG,uRo,bRo,vRo,cb,Nme,FRo,TRo,zG,MRo,ERo,CRo,fb,qme,wRo,ARo,WG,LRo,yRo,xRo,mb,jme,$Ro,kRo,QG,SRo,RRo,PRo,gb,Dme,BRo,IRo,HG,NRo,qRo,jRo,hb,Gme,DRo,GRo,UG,ORo,VRo,XRo,pb,Ome,zRo,WRo,JG,QRo,HRo,URo,_b,Vme,JRo,YRo,YG,KRo,ZRo,ePo,ub,Xme,oPo,rPo,KG,tPo,aPo,nPo,bb,zme,sPo,lPo,ZG,iPo,dPo,cPo,vb,Wme,fPo,mPo,eO,gPo,hPo,pPo,Fb,Qme,_Po,uPo,oO,bPo,vPo,FPo,Tb,Hme,TPo,MPo,rO,EPo,CPo,wPo,Mb,Ume,APo,LPo,tO,yPo,xPo,$Po,Eb,Jme,kPo,SPo,aO,RPo,PPo,BPo,Cb,Yme,IPo,NPo,nO,qPo,jPo,DPo,wb,Kme,GPo,OPo,sO,VPo,XPo,zPo,Ab,Zme,WPo,QPo,lO,HPo,UPo,JPo,Lb,ege,YPo,KPo,iO,ZPo,eBo,oBo,yb,oge,rBo,tBo,dO,aBo,nBo,sBo,xb,rge,lBo,iBo,cO,dBo,cBo,fBo,$b,tge,mBo,gBo,fO,hBo,pBo,_Bo,kb,age,uBo,bBo,mO,vBo,FBo,TBo,Sb,nge,MBo,EBo,gO,CBo,wBo,ABo,Rb,sge,LBo,yBo,hO,xBo,$Bo,kBo,Pb,lge,SBo,RBo,pO,PBo,BBo,IBo,Bb,ige,NBo,qBo,_O,jBo,DBo,GBo,Ib,dge,OBo,VBo,uO,XBo,zBo,WBo,Nb,cge,QBo,HBo,bO,UBo,JBo,YBo,qb,fge,KBo,ZBo,vO,eIo,oIo,rIo,jb,mge,tIo,aIo,FO,nIo,sIo,lIo,Db,gge,iIo,dIo,TO,cIo,fIo,mIo,Gb,hge,gIo,hIo,MO,pIo,_Io,uIo,Ob,pge,bIo,vIo,EO,FIo,TIo,MIo,Vb,_ge,EIo,CIo,CO,wIo,AIo,LIo,Xb,uge,yIo,xIo,wO,$Io,kIo,SIo,zb,RIo,bge,PIo,BIo,vge,IIo,NIo,Wb,Eje,zi,Qb,Fge,OL,qIo,Tge,jIo,Cje,Po,VL,DIo,Wi,GIo,AO,OIo,VIo,LO,XIo,zIo,WIo,XL,QIo,Mge,HIo,UIo,JIo,dt,zL,YIo,Ege,KIo,ZIo,Qi,eNo,Cge,oNo,rNo,yO,tNo,aNo,nNo,Hb,sNo,ro,WL,lNo,wge,iNo,dNo,Pa,cNo,Age,fNo,mNo,Lge,gNo,hNo,yge,pNo,_No,uNo,K,Ub,xge,bNo,vNo,xO,FNo,TNo,MNo,Jb,$ge,ENo,CNo,$O,wNo,ANo,LNo,Yb,kge,yNo,xNo,kO,$No,kNo,SNo,Kb,Sge,RNo,PNo,SO,BNo,INo,NNo,Zb,Rge,qNo,jNo,RO,DNo,GNo,ONo,e2,Pge,VNo,XNo,PO,zNo,WNo,QNo,o2,Bge,HNo,UNo,BO,JNo,YNo,KNo,r2,Ige,ZNo,eqo,IO,oqo,rqo,tqo,t2,Nge,aqo,nqo,NO,sqo,lqo,iqo,a2,qge,dqo,cqo,qO,fqo,mqo,gqo,n2,jge,hqo,pqo,jO,_qo,uqo,bqo,s2,Dge,vqo,Fqo,DO,Tqo,Mqo,Eqo,l2,Gge,Cqo,wqo,GO,Aqo,Lqo,yqo,i2,Oge,xqo,$qo,OO,kqo,Sqo,Rqo,d2,Vge,Pqo,Bqo,VO,Iqo,Nqo,qqo,c2,Xge,jqo,Dqo,XO,Gqo,Oqo,Vqo,f2,zge,Xqo,zqo,zO,Wqo,Qqo,Hqo,m2,Wge,Uqo,Jqo,WO,Yqo,Kqo,Zqo,g2,Qge,ejo,ojo,QO,rjo,tjo,ajo,h2,Hge,njo,sjo,HO,ljo,ijo,djo,p2,Uge,cjo,fjo,UO,mjo,gjo,hjo,_2,Jge,pjo,_jo,JO,ujo,bjo,vjo,u2,Yge,Fjo,Tjo,YO,Mjo,Ejo,Cjo,b2,Kge,wjo,Ajo,KO,Ljo,yjo,xjo,v2,Zge,$jo,kjo,ZO,Sjo,Rjo,Pjo,F2,ehe,Bjo,Ijo,eV,Njo,qjo,jjo,T2,ohe,Djo,Gjo,oV,Ojo,Vjo,Xjo,M2,rhe,zjo,Wjo,rV,Qjo,Hjo,Ujo,E2,the,Jjo,Yjo,tV,Kjo,Zjo,eDo,C2,oDo,ahe,rDo,tDo,nhe,aDo,nDo,w2,wje,Hi,A2,she,QL,sDo,lhe,lDo,Aje,Bo,HL,iDo,Ui,dDo,aV,cDo,fDo,nV,mDo,gDo,hDo,UL,pDo,ihe,_Do,uDo,bDo,ct,JL,vDo,dhe,FDo,TDo,Ji,MDo,che,EDo,CDo,sV,wDo,ADo,LDo,L2,yDo,to,YL,xDo,fhe,$Do,kDo,Ba,SDo,mhe,RDo,PDo,ghe,BDo,IDo,hhe,NDo,qDo,jDo,Yr,y2,phe,DDo,GDo,lV,ODo,VDo,XDo,x2,_he,zDo,WDo,iV,QDo,HDo,UDo,$2,uhe,JDo,YDo,dV,KDo,ZDo,eGo,k2,bhe,oGo,rGo,cV,tGo,aGo,nGo,S2,vhe,sGo,lGo,fV,iGo,dGo,cGo,R2,fGo,Fhe,mGo,gGo,The,hGo,pGo,P2,Lje,Yi,B2,Mhe,KL,_Go,Ehe,uGo,yje,Io,ZL,bGo,Ki,vGo,mV,FGo,TGo,gV,MGo,EGo,CGo,ey,wGo,Che,AGo,LGo,yGo,ft,oy,xGo,whe,$Go,kGo,Zi,SGo,Ahe,RGo,PGo,hV,BGo,IGo,NGo,I2,qGo,ao,ry,jGo,Lhe,DGo,GGo,Ia,OGo,yhe,VGo,XGo,xhe,zGo,WGo,$he,QGo,HGo,UGo,U,N2,khe,JGo,YGo,pV,KGo,ZGo,eOo,q2,She,oOo,rOo,_V,tOo,aOo,nOo,j2,Rhe,sOo,lOo,uV,iOo,dOo,cOo,D2,Phe,fOo,mOo,bV,gOo,hOo,pOo,G2,Bhe,_Oo,uOo,vV,bOo,vOo,FOo,O2,Ihe,TOo,MOo,FV,EOo,COo,wOo,V2,Nhe,AOo,LOo,TV,yOo,xOo,$Oo,X2,qhe,kOo,SOo,MV,ROo,POo,BOo,z2,jhe,IOo,NOo,EV,qOo,jOo,DOo,W2,Dhe,GOo,OOo,CV,VOo,XOo,zOo,Q2,Ghe,WOo,QOo,wV,HOo,UOo,JOo,H2,Ohe,YOo,KOo,AV,ZOo,eVo,oVo,U2,Vhe,rVo,tVo,LV,aVo,nVo,sVo,J2,Xhe,lVo,iVo,yV,dVo,cVo,fVo,Y2,zhe,mVo,gVo,xV,hVo,pVo,_Vo,K2,Whe,uVo,bVo,$V,vVo,FVo,TVo,Z2,Qhe,MVo,EVo,kV,CVo,wVo,AVo,ev,Hhe,LVo,yVo,SV,xVo,$Vo,kVo,ov,Uhe,SVo,RVo,RV,PVo,BVo,IVo,rv,Jhe,NVo,qVo,PV,jVo,DVo,GVo,tv,Yhe,OVo,VVo,BV,XVo,zVo,WVo,av,Khe,QVo,HVo,IV,UVo,JVo,YVo,nv,Zhe,KVo,ZVo,NV,eXo,oXo,rXo,sv,epe,tXo,aXo,qV,nXo,sXo,lXo,lv,ope,iXo,dXo,jV,cXo,fXo,mXo,iv,rpe,gXo,hXo,DV,pXo,_Xo,uXo,dv,tpe,bXo,vXo,GV,FXo,TXo,MXo,cv,ape,EXo,CXo,OV,wXo,AXo,LXo,fv,npe,yXo,xXo,VV,$Xo,kXo,SXo,mv,spe,RXo,PXo,XV,BXo,IXo,NXo,gv,lpe,qXo,jXo,zV,DXo,GXo,OXo,hv,ipe,VXo,XXo,WV,zXo,WXo,QXo,pv,dpe,HXo,UXo,QV,JXo,YXo,KXo,_v,cpe,ZXo,ezo,HV,ozo,rzo,tzo,uv,azo,fpe,nzo,szo,mpe,lzo,izo,bv,xje,ed,vv,gpe,ty,dzo,hpe,czo,$je,No,ay,fzo,od,mzo,UV,gzo,hzo,JV,pzo,_zo,uzo,ny,bzo,ppe,vzo,Fzo,Tzo,mt,sy,Mzo,_pe,Ezo,Czo,rd,wzo,upe,Azo,Lzo,YV,yzo,xzo,$zo,Fv,kzo,no,ly,Szo,bpe,Rzo,Pzo,Na,Bzo,vpe,Izo,Nzo,Fpe,qzo,jzo,Tpe,Dzo,Gzo,Ozo,V,Tv,Mpe,Vzo,Xzo,KV,zzo,Wzo,Qzo,Mv,Epe,Hzo,Uzo,ZV,Jzo,Yzo,Kzo,Ev,Cpe,Zzo,eWo,eX,oWo,rWo,tWo,Cv,wpe,aWo,nWo,oX,sWo,lWo,iWo,wv,Ape,dWo,cWo,rX,fWo,mWo,gWo,Av,Lpe,hWo,pWo,tX,_Wo,uWo,bWo,Lv,ype,vWo,FWo,aX,TWo,MWo,EWo,yv,xpe,CWo,wWo,nX,AWo,LWo,yWo,xv,$pe,xWo,$Wo,sX,kWo,SWo,RWo,$v,kpe,PWo,BWo,lX,IWo,NWo,qWo,kv,Spe,jWo,DWo,iX,GWo,OWo,VWo,Sv,Rpe,XWo,zWo,dX,WWo,QWo,HWo,Rv,Ppe,UWo,JWo,cX,YWo,KWo,ZWo,Pv,Bpe,eQo,oQo,fX,rQo,tQo,aQo,Bv,Ipe,nQo,sQo,mX,lQo,iQo,dQo,Iv,Npe,cQo,fQo,gX,mQo,gQo,hQo,Nv,qpe,pQo,_Qo,hX,uQo,bQo,vQo,qv,jpe,FQo,TQo,pX,MQo,EQo,CQo,jv,Dpe,wQo,AQo,_X,LQo,yQo,xQo,Dv,Gpe,$Qo,kQo,uX,SQo,RQo,PQo,Gv,Ope,BQo,IQo,bX,NQo,qQo,jQo,Ov,Vpe,DQo,GQo,vX,OQo,VQo,XQo,Vv,Xpe,zQo,WQo,FX,QQo,HQo,UQo,Xv,zpe,JQo,YQo,TX,KQo,ZQo,eHo,zv,Wpe,oHo,rHo,MX,tHo,aHo,nHo,Wv,Qpe,sHo,lHo,EX,iHo,dHo,cHo,Qv,Hpe,fHo,mHo,CX,gHo,hHo,pHo,Hv,Upe,_Ho,uHo,wX,bHo,vHo,FHo,Uv,Jpe,THo,MHo,AX,EHo,CHo,wHo,Jv,Ype,AHo,LHo,LX,yHo,xHo,$Ho,Yv,Kpe,kHo,SHo,yX,RHo,PHo,BHo,Kv,Zpe,IHo,NHo,xX,qHo,jHo,DHo,Zv,e_e,GHo,OHo,$X,VHo,XHo,zHo,e3,o_e,WHo,QHo,kX,HHo,UHo,JHo,o3,r_e,YHo,KHo,SX,ZHo,eUo,oUo,r3,t_e,rUo,tUo,RX,aUo,nUo,sUo,t3,a_e,lUo,iUo,PX,dUo,cUo,fUo,a3,n_e,mUo,gUo,BX,hUo,pUo,_Uo,n3,s_e,uUo,bUo,IX,vUo,FUo,TUo,s3,l_e,MUo,EUo,NX,CUo,wUo,AUo,l3,LUo,i_e,yUo,xUo,d_e,$Uo,kUo,i3,kje,td,d3,c_e,iy,SUo,f_e,RUo,Sje,qo,dy,PUo,ad,BUo,qX,IUo,NUo,jX,qUo,jUo,DUo,cy,GUo,m_e,OUo,VUo,XUo,gt,fy,zUo,g_e,WUo,QUo,nd,HUo,h_e,UUo,JUo,DX,YUo,KUo,ZUo,c3,eJo,so,my,oJo,p_e,rJo,tJo,qa,aJo,__e,nJo,sJo,u_e,lJo,iJo,b_e,dJo,cJo,fJo,v_e,f3,F_e,mJo,gJo,GX,hJo,pJo,_Jo,m3,uJo,T_e,bJo,vJo,M_e,FJo,TJo,g3,Rje,sd,h3,E_e,gy,MJo,C_e,EJo,Pje,jo,hy,CJo,ld,wJo,OX,AJo,LJo,VX,yJo,xJo,$Jo,py,kJo,w_e,SJo,RJo,PJo,ht,_y,BJo,A_e,IJo,NJo,id,qJo,L_e,jJo,DJo,XX,GJo,OJo,VJo,p3,XJo,lo,uy,zJo,y_e,WJo,QJo,ja,HJo,x_e,UJo,JJo,$_e,YJo,KJo,k_e,ZJo,eYo,oYo,ve,_3,S_e,rYo,tYo,zX,aYo,nYo,sYo,u3,R_e,lYo,iYo,WX,dYo,cYo,fYo,b3,P_e,mYo,gYo,QX,hYo,pYo,_Yo,v3,B_e,uYo,bYo,HX,vYo,FYo,TYo,Is,I_e,MYo,EYo,UX,CYo,wYo,JX,AYo,LYo,yYo,F3,N_e,xYo,$Yo,YX,kYo,SYo,RYo,Ns,q_e,PYo,BYo,KX,IYo,NYo,ZX,qYo,jYo,DYo,pt,j_e,GYo,OYo,ez,VYo,XYo,oz,zYo,WYo,rz,QYo,HYo,UYo,T3,D_e,JYo,YYo,tz,KYo,ZYo,eKo,M3,G_e,oKo,rKo,az,tKo,aKo,nKo,E3,O_e,sKo,lKo,nz,iKo,dKo,cKo,C3,V_e,fKo,mKo,sz,gKo,hKo,pKo,w3,X_e,_Ko,uKo,lz,bKo,vKo,FKo,A3,z_e,TKo,MKo,iz,EKo,CKo,wKo,L3,W_e,AKo,LKo,dz,yKo,xKo,$Ko,y3,kKo,Q_e,SKo,RKo,H_e,PKo,BKo,x3,Bje,dd,$3,U_e,by,IKo,J_e,NKo,Ije,Do,vy,qKo,cd,jKo,cz,DKo,GKo,fz,OKo,VKo,XKo,Fy,zKo,Y_e,WKo,QKo,HKo,_t,Ty,UKo,K_e,JKo,YKo,fd,KKo,Z_e,ZKo,eZo,mz,oZo,rZo,tZo,k3,aZo,io,My,nZo,eue,sZo,lZo,Da,iZo,oue,dZo,cZo,rue,fZo,mZo,tue,gZo,hZo,pZo,aue,S3,nue,_Zo,uZo,gz,bZo,vZo,FZo,R3,TZo,sue,MZo,EZo,lue,CZo,wZo,P3,Nje,md,B3,iue,Ey,AZo,due,LZo,qje,Go,Cy,yZo,gd,xZo,hz,$Zo,kZo,pz,SZo,RZo,PZo,wy,BZo,cue,IZo,NZo,qZo,ut,Ay,jZo,fue,DZo,GZo,hd,OZo,mue,VZo,XZo,_z,zZo,WZo,QZo,I3,HZo,co,Ly,UZo,gue,JZo,YZo,Ga,KZo,hue,ZZo,eer,pue,oer,rer,_ue,ter,aer,ner,Se,N3,uue,ser,ler,uz,ier,der,cer,q3,bue,fer,mer,bz,ger,her,per,j3,vue,_er,uer,vz,ber,ver,Fer,D3,Fue,Ter,Mer,Fz,Eer,Cer,wer,G3,Tue,Aer,Ler,Tz,yer,xer,$er,O3,Mue,ker,Ser,Mz,Rer,Per,Ber,V3,Eue,Ier,Ner,Ez,qer,jer,Der,X3,Cue,Ger,Oer,Cz,Ver,Xer,zer,z3,wue,Wer,Qer,wz,Her,Uer,Jer,W3,Yer,Aue,Ker,Zer,Lue,eor,oor,Q3,jje,pd,H3,yue,yy,ror,xue,tor,Dje,Oo,xy,aor,_d,nor,Az,sor,lor,Lz,ior,dor,cor,$y,mor,$ue,gor,hor,por,bt,ky,_or,kue,uor,bor,ud,vor,Sue,For,Tor,yz,Mor,Eor,Cor,U3,wor,fo,Sy,Aor,Rue,Lor,yor,Oa,xor,Pue,$or,kor,Bue,Sor,Ror,Iue,Por,Bor,Ior,Kr,J3,Nue,Nor,qor,xz,jor,Dor,Gor,Y3,que,Oor,Vor,$z,Xor,zor,Wor,K3,jue,Qor,Hor,kz,Uor,Jor,Yor,Z3,Due,Kor,Zor,Sz,err,orr,rrr,eF,Gue,trr,arr,Rz,nrr,srr,lrr,oF,irr,Oue,drr,crr,Vue,frr,mrr,rF,Gje,bd,tF,Xue,Ry,grr,zue,hrr,Oje,Vo,Py,prr,vd,_rr,Pz,urr,brr,Bz,vrr,Frr,Trr,By,Mrr,Wue,Err,Crr,wrr,vt,Iy,Arr,Que,Lrr,yrr,Fd,xrr,Hue,$rr,krr,Iz,Srr,Rrr,Prr,aF,Brr,mo,Ny,Irr,Uue,Nrr,qrr,Va,jrr,Jue,Drr,Grr,Yue,Orr,Vrr,Kue,Xrr,zrr,Wrr,Re,nF,Zue,Qrr,Hrr,Nz,Urr,Jrr,Yrr,sF,e4e,Krr,Zrr,qz,etr,otr,rtr,lF,o4e,ttr,atr,jz,ntr,str,ltr,iF,r4e,itr,dtr,Dz,ctr,ftr,mtr,dF,t4e,gtr,htr,Gz,ptr,_tr,utr,cF,a4e,btr,vtr,Oz,Ftr,Ttr,Mtr,fF,n4e,Etr,Ctr,Vz,wtr,Atr,Ltr,mF,s4e,ytr,xtr,Xz,$tr,ktr,Str,gF,l4e,Rtr,Ptr,zz,Btr,Itr,Ntr,hF,qtr,i4e,jtr,Dtr,d4e,Gtr,Otr,pF,Vje,Td,_F,c4e,qy,Vtr,f4e,Xtr,Xje,Xo,jy,ztr,Md,Wtr,Wz,Qtr,Htr,Qz,Utr,Jtr,Ytr,Dy,Ktr,m4e,Ztr,ear,oar,Ft,Gy,rar,g4e,tar,aar,Ed,nar,h4e,sar,lar,Hz,iar,dar,car,uF,far,go,Oy,mar,p4e,gar,har,Xa,par,_4e,_ar,uar,u4e,bar,Far,b4e,Tar,Mar,Ear,Vy,bF,v4e,Car,war,Uz,Aar,Lar,yar,vF,F4e,xar,$ar,Jz,kar,Sar,Rar,FF,Par,T4e,Bar,Iar,M4e,Nar,qar,TF,zje,Cd,MF,E4e,Xy,jar,C4e,Dar,Wje,zo,zy,Gar,wd,Oar,Yz,Var,Xar,Kz,zar,War,Qar,Wy,Har,w4e,Uar,Jar,Yar,Tt,Qy,Kar,A4e,Zar,enr,Ad,onr,L4e,rnr,tnr,Zz,anr,nnr,snr,EF,lnr,ho,Hy,inr,y4e,dnr,cnr,za,fnr,x4e,mnr,gnr,$4e,hnr,pnr,k4e,_nr,unr,bnr,Zr,CF,S4e,vnr,Fnr,eW,Tnr,Mnr,Enr,wF,R4e,Cnr,wnr,oW,Anr,Lnr,ynr,AF,P4e,xnr,$nr,rW,knr,Snr,Rnr,LF,B4e,Pnr,Bnr,tW,Inr,Nnr,qnr,yF,I4e,jnr,Dnr,aW,Gnr,Onr,Vnr,xF,Xnr,N4e,znr,Wnr,q4e,Qnr,Hnr,$F,Qje,Ld,kF,j4e,Uy,Unr,D4e,Jnr,Hje,Wo,Jy,Ynr,yd,Knr,nW,Znr,esr,sW,osr,rsr,tsr,Yy,asr,G4e,nsr,ssr,lsr,Mt,Ky,isr,O4e,dsr,csr,xd,fsr,V4e,msr,gsr,lW,hsr,psr,_sr,SF,usr,po,Zy,bsr,X4e,vsr,Fsr,Wa,Tsr,z4e,Msr,Esr,W4e,Csr,wsr,Q4e,Asr,Lsr,ysr,$d,RF,H4e,xsr,$sr,iW,ksr,Ssr,Rsr,PF,U4e,Psr,Bsr,dW,Isr,Nsr,qsr,BF,J4e,jsr,Dsr,cW,Gsr,Osr,Vsr,IF,Xsr,Y4e,zsr,Wsr,K4e,Qsr,Hsr,NF,Uje,kd,qF,Z4e,e8,Usr,e1e,Jsr,Jje,Qo,o8,Ysr,Sd,Ksr,fW,Zsr,elr,mW,olr,rlr,tlr,r8,alr,o1e,nlr,slr,llr,Et,t8,ilr,r1e,dlr,clr,Rd,flr,t1e,mlr,glr,gW,hlr,plr,_lr,jF,ulr,_o,a8,blr,a1e,vlr,Flr,Qa,Tlr,n1e,Mlr,Elr,s1e,Clr,wlr,l1e,Alr,Llr,ylr,n8,DF,i1e,xlr,$lr,hW,klr,Slr,Rlr,GF,d1e,Plr,Blr,pW,Ilr,Nlr,qlr,OF,jlr,c1e,Dlr,Glr,f1e,Olr,Vlr,VF,Yje,Pd,XF,m1e,s8,Xlr,g1e,zlr,Kje,Ho,l8,Wlr,Bd,Qlr,_W,Hlr,Ulr,uW,Jlr,Ylr,Klr,i8,Zlr,h1e,eir,oir,rir,Ct,d8,tir,p1e,air,nir,Id,sir,_1e,lir,iir,bW,dir,cir,fir,zF,mir,uo,c8,gir,u1e,hir,pir,Ha,_ir,b1e,uir,bir,v1e,vir,Fir,F1e,Tir,Mir,Eir,T1e,WF,M1e,Cir,wir,vW,Air,Lir,yir,QF,xir,E1e,$ir,kir,C1e,Sir,Rir,HF,Zje,Nd,UF,w1e,f8,Pir,A1e,Bir,eDe,Uo,m8,Iir,qd,Nir,FW,qir,jir,TW,Dir,Gir,Oir,g8,Vir,L1e,Xir,zir,Wir,wt,h8,Qir,y1e,Hir,Uir,jd,Jir,x1e,Yir,Kir,MW,Zir,edr,odr,JF,rdr,bo,p8,tdr,$1e,adr,ndr,Ua,sdr,k1e,ldr,idr,S1e,ddr,cdr,R1e,fdr,mdr,gdr,Ja,YF,P1e,hdr,pdr,EW,_dr,udr,bdr,KF,B1e,vdr,Fdr,CW,Tdr,Mdr,Edr,ZF,I1e,Cdr,wdr,wW,Adr,Ldr,ydr,eT,N1e,xdr,$dr,AW,kdr,Sdr,Rdr,oT,Pdr,q1e,Bdr,Idr,j1e,Ndr,qdr,rT,oDe,Dd,tT,D1e,_8,jdr,G1e,Ddr,rDe,Jo,u8,Gdr,Gd,Odr,LW,Vdr,Xdr,yW,zdr,Wdr,Qdr,b8,Hdr,O1e,Udr,Jdr,Ydr,At,v8,Kdr,V1e,Zdr,ecr,Od,ocr,X1e,rcr,tcr,xW,acr,ncr,scr,aT,lcr,vo,F8,icr,z1e,dcr,ccr,Ya,fcr,W1e,mcr,gcr,Q1e,hcr,pcr,H1e,_cr,ucr,bcr,U1e,nT,J1e,vcr,Fcr,$W,Tcr,Mcr,Ecr,sT,Ccr,Y1e,wcr,Acr,K1e,Lcr,ycr,lT,tDe,Vd,iT,Z1e,T8,xcr,ebe,$cr,aDe,Yo,M8,kcr,Xd,Scr,kW,Rcr,Pcr,SW,Bcr,Icr,Ncr,E8,qcr,obe,jcr,Dcr,Gcr,Lt,C8,Ocr,rbe,Vcr,Xcr,zd,zcr,tbe,Wcr,Qcr,RW,Hcr,Ucr,Jcr,dT,Ycr,wr,w8,Kcr,abe,Zcr,efr,Ka,ofr,nbe,rfr,tfr,sbe,afr,nfr,lbe,sfr,lfr,ifr,q,cT,ibe,dfr,cfr,PW,ffr,mfr,gfr,fT,dbe,hfr,pfr,BW,_fr,ufr,bfr,mT,cbe,vfr,Ffr,IW,Tfr,Mfr,Efr,gT,fbe,Cfr,wfr,NW,Afr,Lfr,yfr,hT,mbe,xfr,$fr,qW,kfr,Sfr,Rfr,pT,gbe,Pfr,Bfr,jW,Ifr,Nfr,qfr,_T,hbe,jfr,Dfr,DW,Gfr,Ofr,Vfr,uT,pbe,Xfr,zfr,GW,Wfr,Qfr,Hfr,bT,_be,Ufr,Jfr,OW,Yfr,Kfr,Zfr,vT,ube,emr,omr,VW,rmr,tmr,amr,FT,bbe,nmr,smr,XW,lmr,imr,dmr,TT,vbe,cmr,fmr,zW,mmr,gmr,hmr,MT,Fbe,pmr,_mr,WW,umr,bmr,vmr,ET,Tbe,Fmr,Tmr,QW,Mmr,Emr,Cmr,CT,Mbe,wmr,Amr,HW,Lmr,ymr,xmr,wT,Ebe,$mr,kmr,UW,Smr,Rmr,Pmr,AT,Cbe,Bmr,Imr,JW,Nmr,qmr,jmr,qs,wbe,Dmr,Gmr,YW,Omr,Vmr,KW,Xmr,zmr,Wmr,LT,Abe,Qmr,Hmr,ZW,Umr,Jmr,Ymr,yT,Lbe,Kmr,Zmr,eQ,egr,ogr,rgr,xT,ybe,tgr,agr,oQ,ngr,sgr,lgr,$T,xbe,igr,dgr,rQ,cgr,fgr,mgr,kT,$be,ggr,hgr,tQ,pgr,_gr,ugr,ST,kbe,bgr,vgr,aQ,Fgr,Tgr,Mgr,RT,Sbe,Egr,Cgr,nQ,wgr,Agr,Lgr,PT,Rbe,ygr,xgr,sQ,$gr,kgr,Sgr,BT,Pbe,Rgr,Pgr,lQ,Bgr,Igr,Ngr,IT,Bbe,qgr,jgr,iQ,Dgr,Ggr,Ogr,NT,Ibe,Vgr,Xgr,dQ,zgr,Wgr,Qgr,qT,Nbe,Hgr,Ugr,cQ,Jgr,Ygr,Kgr,jT,qbe,Zgr,ehr,fQ,ohr,rhr,thr,DT,jbe,ahr,nhr,mQ,shr,lhr,ihr,GT,Dbe,dhr,chr,gQ,fhr,mhr,ghr,OT,Gbe,hhr,phr,hQ,_hr,uhr,bhr,VT,Obe,vhr,Fhr,pQ,Thr,Mhr,Ehr,XT,Vbe,Chr,whr,_Q,Ahr,Lhr,yhr,zT,Xbe,xhr,$hr,uQ,khr,Shr,Rhr,WT,zbe,Phr,Bhr,bQ,Ihr,Nhr,qhr,QT,Wbe,jhr,Dhr,vQ,Ghr,Ohr,Vhr,HT,Qbe,Xhr,zhr,FQ,Whr,Qhr,Hhr,UT,Hbe,Uhr,Jhr,TQ,Yhr,Khr,Zhr,JT,Ube,epr,opr,MQ,rpr,tpr,apr,YT,Jbe,npr,spr,EQ,lpr,ipr,dpr,KT,Ybe,cpr,fpr,CQ,mpr,gpr,hpr,ZT,Kbe,ppr,_pr,wQ,upr,bpr,vpr,e7,Zbe,Fpr,Tpr,AQ,Mpr,Epr,Cpr,o7,e2e,wpr,Apr,LQ,Lpr,ypr,xpr,r7,nDe,Wd,t7,o2e,A8,$pr,r2e,kpr,sDe,Ko,L8,Spr,Qd,Rpr,yQ,Ppr,Bpr,xQ,Ipr,Npr,qpr,y8,jpr,t2e,Dpr,Gpr,Opr,yt,x8,Vpr,a2e,Xpr,zpr,Hd,Wpr,n2e,Qpr,Hpr,$Q,Upr,Jpr,Ypr,a7,Kpr,Ar,$8,Zpr,s2e,e_r,o_r,Za,r_r,l2e,t_r,a_r,i2e,n_r,s_r,d2e,l_r,i_r,d_r,se,n7,c2e,c_r,f_r,kQ,m_r,g_r,h_r,s7,f2e,p_r,__r,SQ,u_r,b_r,v_r,l7,m2e,F_r,T_r,RQ,M_r,E_r,C_r,i7,g2e,w_r,A_r,PQ,L_r,y_r,x_r,d7,h2e,$_r,k_r,BQ,S_r,R_r,P_r,c7,p2e,B_r,I_r,IQ,N_r,q_r,j_r,f7,_2e,D_r,G_r,NQ,O_r,V_r,X_r,m7,u2e,z_r,W_r,qQ,Q_r,H_r,U_r,g7,b2e,J_r,Y_r,jQ,K_r,Z_r,eur,h7,v2e,our,rur,DQ,tur,aur,nur,p7,F2e,sur,lur,GQ,iur,dur,cur,_7,T2e,fur,mur,OQ,gur,hur,pur,u7,M2e,_ur,uur,VQ,bur,vur,Fur,b7,E2e,Tur,Mur,XQ,Eur,Cur,wur,v7,C2e,Aur,Lur,zQ,yur,xur,$ur,F7,w2e,kur,Sur,WQ,Rur,Pur,Bur,T7,A2e,Iur,Nur,QQ,qur,jur,Dur,M7,L2e,Gur,Our,HQ,Vur,Xur,zur,E7,y2e,Wur,Qur,UQ,Hur,Uur,Jur,C7,x2e,Yur,Kur,JQ,Zur,e4r,o4r,w7,$2e,r4r,t4r,YQ,a4r,n4r,s4r,A7,k2e,l4r,i4r,KQ,d4r,c4r,f4r,L7,S2e,m4r,g4r,ZQ,h4r,p4r,_4r,y7,lDe,Ud,x7,R2e,k8,u4r,P2e,b4r,iDe,Zo,S8,v4r,Jd,F4r,eH,T4r,M4r,oH,E4r,C4r,w4r,R8,A4r,B2e,L4r,y4r,x4r,xt,P8,$4r,I2e,k4r,S4r,Yd,R4r,N2e,P4r,B4r,rH,I4r,N4r,q4r,$7,j4r,Lr,B8,D4r,q2e,G4r,O4r,en,V4r,j2e,X4r,z4r,D2e,W4r,Q4r,G2e,H4r,U4r,J4r,Me,k7,O2e,Y4r,K4r,tH,Z4r,e1r,o1r,S7,V2e,r1r,t1r,aH,a1r,n1r,s1r,R7,X2e,l1r,i1r,nH,d1r,c1r,f1r,P7,z2e,m1r,g1r,sH,h1r,p1r,_1r,B7,W2e,u1r,b1r,lH,v1r,F1r,T1r,I7,Q2e,M1r,E1r,iH,C1r,w1r,A1r,N7,H2e,L1r,y1r,dH,x1r,$1r,k1r,q7,U2e,S1r,R1r,cH,P1r,B1r,I1r,j7,J2e,N1r,q1r,fH,j1r,D1r,G1r,D7,Y2e,O1r,V1r,mH,X1r,z1r,W1r,G7,K2e,Q1r,H1r,gH,U1r,J1r,Y1r,O7,Z2e,K1r,Z1r,hH,ebr,obr,rbr,V7,eve,tbr,abr,pH,nbr,sbr,lbr,X7,dDe,Kd,z7,ove,I8,ibr,rve,dbr,cDe,er,N8,cbr,Zd,fbr,_H,mbr,gbr,uH,hbr,pbr,_br,q8,ubr,tve,bbr,vbr,Fbr,$t,j8,Tbr,ave,Mbr,Ebr,ec,Cbr,nve,wbr,Abr,bH,Lbr,ybr,xbr,W7,$br,yr,D8,kbr,sve,Sbr,Rbr,on,Pbr,lve,Bbr,Ibr,ive,Nbr,qbr,dve,jbr,Dbr,Gbr,rn,Q7,cve,Obr,Vbr,vH,Xbr,zbr,Wbr,H7,fve,Qbr,Hbr,FH,Ubr,Jbr,Ybr,U7,mve,Kbr,Zbr,TH,e2r,o2r,r2r,J7,gve,t2r,a2r,MH,n2r,s2r,l2r,Y7,fDe,oc,K7,hve,G8,i2r,pve,d2r,mDe,or,O8,c2r,rc,f2r,EH,m2r,g2r,CH,h2r,p2r,_2r,V8,u2r,_ve,b2r,v2r,F2r,kt,X8,T2r,uve,M2r,E2r,tc,C2r,bve,w2r,A2r,wH,L2r,y2r,x2r,Z7,$2r,xr,z8,k2r,vve,S2r,R2r,tn,P2r,Fve,B2r,I2r,Tve,N2r,q2r,Mve,j2r,D2r,G2r,ie,eM,Eve,O2r,V2r,AH,X2r,z2r,W2r,oM,Cve,Q2r,H2r,LH,U2r,J2r,Y2r,rM,wve,K2r,Z2r,yH,evr,ovr,rvr,tM,Ave,tvr,avr,xH,nvr,svr,lvr,aM,Lve,ivr,dvr,$H,cvr,fvr,mvr,nM,yve,gvr,hvr,kH,pvr,_vr,uvr,sM,xve,bvr,vvr,SH,Fvr,Tvr,Mvr,lM,$ve,Evr,Cvr,RH,wvr,Avr,Lvr,iM,kve,yvr,xvr,PH,$vr,kvr,Svr,dM,Sve,Rvr,Pvr,BH,Bvr,Ivr,Nvr,cM,Rve,qvr,jvr,IH,Dvr,Gvr,Ovr,fM,Pve,Vvr,Xvr,NH,zvr,Wvr,Qvr,mM,Bve,Hvr,Uvr,qH,Jvr,Yvr,Kvr,gM,Ive,Zvr,e3r,jH,o3r,r3r,t3r,hM,Nve,a3r,n3r,DH,s3r,l3r,i3r,pM,qve,d3r,c3r,GH,f3r,m3r,g3r,_M,jve,h3r,p3r,OH,_3r,u3r,b3r,uM,Dve,v3r,F3r,VH,T3r,M3r,E3r,bM,Gve,C3r,w3r,XH,A3r,L3r,y3r,vM,Ove,x3r,$3r,zH,k3r,S3r,R3r,FM,gDe,ac,TM,Vve,W8,P3r,Xve,B3r,hDe,rr,Q8,I3r,nc,N3r,WH,q3r,j3r,QH,D3r,G3r,O3r,H8,V3r,zve,X3r,z3r,W3r,St,U8,Q3r,Wve,H3r,U3r,sc,J3r,Qve,Y3r,K3r,HH,Z3r,eFr,oFr,MM,rFr,$r,J8,tFr,Hve,aFr,nFr,an,sFr,Uve,lFr,iFr,Jve,dFr,cFr,Yve,fFr,mFr,gFr,Le,EM,Kve,hFr,pFr,UH,_Fr,uFr,bFr,CM,Zve,vFr,FFr,JH,TFr,MFr,EFr,wM,e3e,CFr,wFr,YH,AFr,LFr,yFr,AM,o3e,xFr,$Fr,KH,kFr,SFr,RFr,LM,r3e,PFr,BFr,ZH,IFr,NFr,qFr,yM,t3e,jFr,DFr,eU,GFr,OFr,VFr,xM,a3e,XFr,zFr,oU,WFr,QFr,HFr,$M,n3e,UFr,JFr,rU,YFr,KFr,ZFr,kM,s3e,eTr,oTr,tU,rTr,tTr,aTr,SM,l3e,nTr,sTr,aU,lTr,iTr,dTr,RM,pDe,lc,PM,i3e,Y8,cTr,d3e,fTr,_De,tr,K8,mTr,ic,gTr,nU,hTr,pTr,sU,_Tr,uTr,bTr,Z8,vTr,c3e,FTr,TTr,MTr,Rt,e9,ETr,f3e,CTr,wTr,dc,ATr,m3e,LTr,yTr,lU,xTr,$Tr,kTr,BM,STr,kr,o9,RTr,g3e,PTr,BTr,nn,ITr,h3e,NTr,qTr,p3e,jTr,DTr,_3e,GTr,OTr,VTr,oe,IM,u3e,XTr,zTr,iU,WTr,QTr,HTr,NM,b3e,UTr,JTr,dU,YTr,KTr,ZTr,qM,v3e,e7r,o7r,cU,r7r,t7r,a7r,jM,F3e,n7r,s7r,fU,l7r,i7r,d7r,DM,T3e,c7r,f7r,mU,m7r,g7r,h7r,GM,M3e,p7r,_7r,gU,u7r,b7r,v7r,OM,E3e,F7r,T7r,hU,M7r,E7r,C7r,VM,C3e,w7r,A7r,pU,L7r,y7r,x7r,XM,w3e,$7r,k7r,_U,S7r,R7r,P7r,zM,A3e,B7r,I7r,uU,N7r,q7r,j7r,WM,L3e,D7r,G7r,bU,O7r,V7r,X7r,QM,y3e,z7r,W7r,vU,Q7r,H7r,U7r,HM,x3e,J7r,Y7r,FU,K7r,Z7r,eMr,UM,$3e,oMr,rMr,TU,tMr,aMr,nMr,JM,k3e,sMr,lMr,MU,iMr,dMr,cMr,YM,S3e,fMr,mMr,EU,gMr,hMr,pMr,KM,R3e,_Mr,uMr,CU,bMr,vMr,FMr,ZM,P3e,TMr,MMr,wU,EMr,CMr,wMr,eE,B3e,AMr,LMr,AU,yMr,xMr,$Mr,oE,I3e,kMr,SMr,LU,RMr,PMr,BMr,rE,N3e,IMr,NMr,yU,qMr,jMr,DMr,tE,q3e,GMr,OMr,xU,VMr,XMr,zMr,aE,j3e,WMr,QMr,$U,HMr,UMr,JMr,nE,D3e,YMr,KMr,kU,ZMr,eEr,oEr,sE,G3e,rEr,tEr,SU,aEr,nEr,sEr,lE,O3e,lEr,iEr,RU,dEr,cEr,fEr,iE,uDe,cc,dE,V3e,r9,mEr,X3e,gEr,bDe,ar,t9,hEr,fc,pEr,PU,_Er,uEr,BU,bEr,vEr,FEr,a9,TEr,z3e,MEr,EEr,CEr,Pt,n9,wEr,W3e,AEr,LEr,mc,yEr,Q3e,xEr,$Er,IU,kEr,SEr,REr,cE,PEr,Sr,s9,BEr,H3e,IEr,NEr,sn,qEr,U3e,jEr,DEr,J3e,GEr,OEr,Y3e,VEr,XEr,zEr,pe,fE,K3e,WEr,QEr,NU,HEr,UEr,JEr,mE,Z3e,YEr,KEr,qU,ZEr,eCr,oCr,gE,eFe,rCr,tCr,jU,aCr,nCr,sCr,hE,oFe,lCr,iCr,DU,dCr,cCr,fCr,pE,rFe,mCr,gCr,GU,hCr,pCr,_Cr,_E,tFe,uCr,bCr,OU,vCr,FCr,TCr,uE,aFe,MCr,ECr,VU,CCr,wCr,ACr,bE,nFe,LCr,yCr,XU,xCr,$Cr,kCr,vE,sFe,SCr,RCr,zU,PCr,BCr,ICr,FE,lFe,NCr,qCr,WU,jCr,DCr,GCr,TE,iFe,OCr,VCr,QU,XCr,zCr,WCr,ME,dFe,QCr,HCr,HU,UCr,JCr,YCr,EE,cFe,KCr,ZCr,UU,e5r,o5r,r5r,CE,fFe,t5r,a5r,JU,n5r,s5r,l5r,wE,mFe,i5r,d5r,YU,c5r,f5r,m5r,AE,gFe,g5r,h5r,KU,p5r,_5r,u5r,LE,hFe,b5r,v5r,ZU,F5r,T5r,M5r,yE,vDe,gc,xE,pFe,l9,E5r,_Fe,C5r,FDe,nr,i9,w5r,hc,A5r,eJ,L5r,y5r,oJ,x5r,$5r,k5r,d9,S5r,uFe,R5r,P5r,B5r,Bt,c9,I5r,bFe,N5r,q5r,pc,j5r,vFe,D5r,G5r,rJ,O5r,V5r,X5r,$E,z5r,Rr,f9,W5r,FFe,Q5r,H5r,ln,U5r,TFe,J5r,Y5r,MFe,K5r,Z5r,EFe,e0r,o0r,r0r,m9,kE,CFe,t0r,a0r,tJ,n0r,s0r,l0r,SE,wFe,i0r,d0r,aJ,c0r,f0r,m0r,RE,TDe,_c,PE,AFe,g9,g0r,LFe,h0r,MDe,sr,h9,p0r,uc,_0r,nJ,u0r,b0r,sJ,v0r,F0r,T0r,p9,M0r,yFe,E0r,C0r,w0r,It,_9,A0r,xFe,L0r,y0r,bc,x0r,$Fe,$0r,k0r,lJ,S0r,R0r,P0r,BE,B0r,Pr,u9,I0r,kFe,N0r,q0r,dn,j0r,SFe,D0r,G0r,RFe,O0r,V0r,PFe,X0r,z0r,W0r,BFe,IE,IFe,Q0r,H0r,iJ,U0r,J0r,Y0r,NE,EDe,vc,qE,NFe,b9,K0r,qFe,Z0r,CDe,lr,v9,ewr,Fc,owr,dJ,rwr,twr,cJ,awr,nwr,swr,F9,lwr,jFe,iwr,dwr,cwr,Nt,T9,fwr,DFe,mwr,gwr,Tc,hwr,GFe,pwr,_wr,fJ,uwr,bwr,vwr,jE,Fwr,Br,M9,Twr,OFe,Mwr,Ewr,cn,Cwr,VFe,wwr,Awr,XFe,Lwr,ywr,zFe,xwr,$wr,kwr,de,DE,WFe,Swr,Rwr,mJ,Pwr,Bwr,Iwr,GE,QFe,Nwr,qwr,gJ,jwr,Dwr,Gwr,OE,HFe,Owr,Vwr,hJ,Xwr,zwr,Wwr,VE,UFe,Qwr,Hwr,pJ,Uwr,Jwr,Ywr,XE,JFe,Kwr,Zwr,_J,eAr,oAr,rAr,zE,YFe,tAr,aAr,uJ,nAr,sAr,lAr,WE,KFe,iAr,dAr,bJ,cAr,fAr,mAr,QE,ZFe,gAr,hAr,vJ,pAr,_Ar,uAr,HE,eTe,bAr,vAr,FJ,FAr,TAr,MAr,UE,oTe,EAr,CAr,TJ,wAr,AAr,LAr,JE,rTe,yAr,xAr,MJ,$Ar,kAr,SAr,YE,tTe,RAr,PAr,EJ,BAr,IAr,NAr,KE,aTe,qAr,jAr,CJ,DAr,GAr,OAr,ZE,nTe,VAr,XAr,wJ,zAr,WAr,QAr,eC,sTe,HAr,UAr,AJ,JAr,YAr,KAr,oC,lTe,ZAr,e6r,LJ,o6r,r6r,t6r,rC,iTe,a6r,n6r,yJ,s6r,l6r,i6r,tC,dTe,d6r,c6r,xJ,f6r,m6r,g6r,aC,cTe,h6r,p6r,$J,_6r,u6r,b6r,nC,fTe,v6r,F6r,kJ,T6r,M6r,E6r,sC,wDe,Mc,lC,mTe,E9,C6r,gTe,w6r,ADe,ir,C9,A6r,Ec,L6r,SJ,y6r,x6r,RJ,$6r,k6r,S6r,w9,R6r,hTe,P6r,B6r,I6r,qt,A9,N6r,pTe,q6r,j6r,Cc,D6r,_Te,G6r,O6r,PJ,V6r,X6r,z6r,iC,W6r,Ir,L9,Q6r,uTe,H6r,U6r,fn,J6r,bTe,Y6r,K6r,vTe,Z6r,eLr,FTe,oLr,rLr,tLr,ce,dC,TTe,aLr,nLr,BJ,sLr,lLr,iLr,cC,MTe,dLr,cLr,IJ,fLr,mLr,gLr,fC,ETe,hLr,pLr,NJ,_Lr,uLr,bLr,mC,CTe,vLr,FLr,qJ,TLr,MLr,ELr,gC,wTe,CLr,wLr,jJ,ALr,LLr,yLr,hC,ATe,xLr,$Lr,DJ,kLr,SLr,RLr,pC,LTe,PLr,BLr,GJ,ILr,NLr,qLr,_C,yTe,jLr,DLr,OJ,GLr,OLr,VLr,uC,xTe,XLr,zLr,VJ,WLr,QLr,HLr,bC,$Te,ULr,JLr,XJ,YLr,KLr,ZLr,vC,kTe,eyr,oyr,zJ,ryr,tyr,ayr,FC,STe,nyr,syr,WJ,lyr,iyr,dyr,TC,RTe,cyr,fyr,QJ,myr,gyr,hyr,MC,PTe,pyr,_yr,HJ,uyr,byr,vyr,EC,BTe,Fyr,Tyr,UJ,Myr,Eyr,Cyr,CC,ITe,wyr,Ayr,JJ,Lyr,yyr,xyr,wC,NTe,$yr,kyr,YJ,Syr,Ryr,Pyr,AC,qTe,Byr,Iyr,KJ,Nyr,qyr,jyr,LC,jTe,Dyr,Gyr,ZJ,Oyr,Vyr,Xyr,yC,DTe,zyr,Wyr,eY,Qyr,Hyr,Uyr,xC,LDe,wc,$C,GTe,y9,Jyr,OTe,Yyr,yDe,dr,x9,Kyr,Ac,Zyr,oY,e8r,o8r,rY,r8r,t8r,a8r,$9,n8r,VTe,s8r,l8r,i8r,jt,k9,d8r,XTe,c8r,f8r,Lc,m8r,zTe,g8r,h8r,tY,p8r,_8r,u8r,kC,b8r,Nr,S9,v8r,WTe,F8r,T8r,mn,M8r,QTe,E8r,C8r,HTe,w8r,A8r,UTe,L8r,y8r,x8r,JTe,SC,YTe,$8r,k8r,aY,S8r,R8r,P8r,RC,xDe,yc,PC,KTe,R9,B8r,ZTe,I8r,$De,cr,P9,N8r,xc,q8r,nY,j8r,D8r,sY,G8r,O8r,V8r,B9,X8r,e7e,z8r,W8r,Q8r,Dt,I9,H8r,o7e,U8r,J8r,$c,Y8r,r7e,K8r,Z8r,lY,e9r,o9r,r9r,BC,t9r,qr,N9,a9r,t7e,n9r,s9r,gn,l9r,a7e,i9r,d9r,n7e,c9r,f9r,s7e,m9r,g9r,h9r,l7e,IC,i7e,p9r,_9r,iY,u9r,b9r,v9r,NC,kDe,kc,qC,d7e,q9,F9r,c7e,T9r,SDe,fr,j9,M9r,Sc,E9r,dY,C9r,w9r,cY,A9r,L9r,y9r,D9,x9r,f7e,$9r,k9r,S9r,Gt,G9,R9r,m7e,P9r,B9r,Rc,I9r,g7e,N9r,q9r,fY,j9r,D9r,G9r,jC,O9r,jr,O9,V9r,h7e,X9r,z9r,hn,W9r,p7e,Q9r,H9r,_7e,U9r,J9r,u7e,Y9r,K9r,Z9r,re,DC,b7e,exr,oxr,mY,rxr,txr,axr,GC,v7e,nxr,sxr,gY,lxr,ixr,dxr,OC,F7e,cxr,fxr,hY,mxr,gxr,hxr,VC,T7e,pxr,_xr,pY,uxr,bxr,vxr,XC,M7e,Fxr,Txr,_Y,Mxr,Exr,Cxr,zC,E7e,wxr,Axr,uY,Lxr,yxr,xxr,WC,C7e,$xr,kxr,bY,Sxr,Rxr,Pxr,QC,w7e,Bxr,Ixr,vY,Nxr,qxr,jxr,HC,A7e,Dxr,Gxr,FY,Oxr,Vxr,Xxr,UC,L7e,zxr,Wxr,TY,Qxr,Hxr,Uxr,JC,y7e,Jxr,Yxr,MY,Kxr,Zxr,e$r,YC,x7e,o$r,r$r,EY,t$r,a$r,n$r,KC,$7e,s$r,l$r,CY,i$r,d$r,c$r,ZC,k7e,f$r,m$r,wY,g$r,h$r,p$r,e5,S7e,_$r,u$r,AY,b$r,v$r,F$r,o5,R7e,T$r,M$r,LY,E$r,C$r,w$r,r5,P7e,A$r,L$r,yY,y$r,x$r,$$r,t5,B7e,k$r,S$r,xY,R$r,P$r,B$r,a5,I7e,I$r,N$r,$Y,q$r,j$r,D$r,n5,N7e,G$r,O$r,kY,V$r,X$r,z$r,s5,q7e,W$r,Q$r,SY,H$r,U$r,J$r,l5,j7e,Y$r,K$r,RY,Z$r,ekr,okr,i5,D7e,rkr,tkr,PY,akr,nkr,skr,d5,G7e,lkr,ikr,BY,dkr,ckr,fkr,c5,O7e,mkr,gkr,IY,hkr,pkr,_kr,f5,V7e,ukr,bkr,NY,vkr,Fkr,Tkr,m5,RDe,Pc,g5,X7e,V9,Mkr,z7e,Ekr,PDe,mr,X9,Ckr,Bc,wkr,qY,Akr,Lkr,jY,ykr,xkr,$kr,z9,kkr,W7e,Skr,Rkr,Pkr,Ot,W9,Bkr,Q7e,Ikr,Nkr,Ic,qkr,H7e,jkr,Dkr,DY,Gkr,Okr,Vkr,h5,Xkr,Dr,Q9,zkr,U7e,Wkr,Qkr,pn,Hkr,J7e,Ukr,Jkr,Y7e,Ykr,Kkr,K7e,Zkr,eSr,oSr,ye,p5,Z7e,rSr,tSr,GY,aSr,nSr,sSr,_5,eMe,lSr,iSr,OY,dSr,cSr,fSr,u5,oMe,mSr,gSr,VY,hSr,pSr,_Sr,b5,rMe,uSr,bSr,XY,vSr,FSr,TSr,v5,tMe,MSr,ESr,zY,CSr,wSr,ASr,F5,aMe,LSr,ySr,WY,xSr,$Sr,kSr,T5,nMe,SSr,RSr,QY,PSr,BSr,ISr,M5,sMe,NSr,qSr,HY,jSr,DSr,GSr,E5,lMe,OSr,VSr,UY,XSr,zSr,WSr,C5,iMe,QSr,HSr,JY,USr,JSr,YSr,w5,BDe,Nc,A5,dMe,H9,KSr,cMe,ZSr,IDe,gr,U9,eRr,qc,oRr,YY,rRr,tRr,KY,aRr,nRr,sRr,J9,lRr,fMe,iRr,dRr,cRr,Vt,Y9,fRr,mMe,mRr,gRr,jc,hRr,gMe,pRr,_Rr,ZY,uRr,bRr,vRr,L5,FRr,Gr,K9,TRr,hMe,MRr,ERr,_n,CRr,pMe,wRr,ARr,_Me,LRr,yRr,uMe,xRr,$Rr,kRr,Ee,y5,bMe,SRr,RRr,eK,PRr,BRr,IRr,x5,vMe,NRr,qRr,oK,jRr,DRr,GRr,$5,FMe,ORr,VRr,rK,XRr,zRr,WRr,k5,TMe,QRr,HRr,tK,URr,JRr,YRr,S5,MMe,KRr,ZRr,aK,ePr,oPr,rPr,R5,EMe,tPr,aPr,nK,nPr,sPr,lPr,P5,CMe,iPr,dPr,sK,cPr,fPr,mPr,B5,wMe,gPr,hPr,lK,pPr,_Pr,uPr,I5,AMe,bPr,vPr,iK,FPr,TPr,MPr,N5,LMe,EPr,CPr,dK,wPr,APr,LPr,q5,yMe,yPr,xPr,cK,$Pr,kPr,SPr,j5,xMe,RPr,PPr,fK,BPr,IPr,NPr,D5,NDe,Dc,G5,$Me,Z9,qPr,kMe,jPr,qDe,hr,ex,DPr,Gc,GPr,mK,OPr,VPr,gK,XPr,zPr,WPr,ox,QPr,SMe,HPr,UPr,JPr,Xt,rx,YPr,RMe,KPr,ZPr,Oc,eBr,PMe,oBr,rBr,hK,tBr,aBr,nBr,O5,sBr,Or,tx,lBr,BMe,iBr,dBr,un,cBr,IMe,fBr,mBr,NMe,gBr,hBr,qMe,pBr,_Br,uBr,xe,V5,jMe,bBr,vBr,pK,FBr,TBr,MBr,X5,DMe,EBr,CBr,_K,wBr,ABr,LBr,z5,GMe,yBr,xBr,uK,$Br,kBr,SBr,W5,OMe,RBr,PBr,bK,BBr,IBr,NBr,Q5,VMe,qBr,jBr,vK,DBr,GBr,OBr,H5,XMe,VBr,XBr,FK,zBr,WBr,QBr,U5,zMe,HBr,UBr,TK,JBr,YBr,KBr,J5,WMe,ZBr,eIr,MK,oIr,rIr,tIr,Y5,QMe,aIr,nIr,EK,sIr,lIr,iIr,K5,HMe,dIr,cIr,CK,fIr,mIr,gIr,Z5,jDe,Vc,e0,UMe,ax,hIr,JMe,pIr,DDe,pr,nx,_Ir,Xc,uIr,wK,bIr,vIr,AK,FIr,TIr,MIr,sx,EIr,YMe,CIr,wIr,AIr,zt,lx,LIr,KMe,yIr,xIr,zc,$Ir,ZMe,kIr,SIr,LK,RIr,PIr,BIr,o0,IIr,Vr,ix,NIr,eEe,qIr,jIr,bn,DIr,oEe,GIr,OIr,rEe,VIr,XIr,tEe,zIr,WIr,QIr,Pe,r0,aEe,HIr,UIr,yK,JIr,YIr,KIr,t0,nEe,ZIr,eNr,xK,oNr,rNr,tNr,a0,sEe,aNr,nNr,$K,sNr,lNr,iNr,n0,lEe,dNr,cNr,kK,fNr,mNr,gNr,s0,iEe,hNr,pNr,SK,_Nr,uNr,bNr,l0,dEe,vNr,FNr,RK,TNr,MNr,ENr,i0,cEe,CNr,wNr,PK,ANr,LNr,yNr,d0,fEe,xNr,$Nr,BK,kNr,SNr,RNr,c0,mEe,PNr,BNr,IK,INr,NNr,qNr,f0,GDe,Wc,m0,gEe,dx,jNr,hEe,DNr,ODe,_r,cx,GNr,Qc,ONr,NK,VNr,XNr,qK,zNr,WNr,QNr,fx,HNr,pEe,UNr,JNr,YNr,Wt,mx,KNr,_Ee,ZNr,eqr,Hc,oqr,uEe,rqr,tqr,jK,aqr,nqr,sqr,g0,lqr,Xr,gx,iqr,bEe,dqr,cqr,vn,fqr,vEe,mqr,gqr,FEe,hqr,pqr,TEe,_qr,uqr,bqr,$e,h0,MEe,vqr,Fqr,DK,Tqr,Mqr,Eqr,p0,EEe,Cqr,wqr,GK,Aqr,Lqr,yqr,_0,CEe,xqr,$qr,OK,kqr,Sqr,Rqr,u0,wEe,Pqr,Bqr,VK,Iqr,Nqr,qqr,b0,AEe,jqr,Dqr,XK,Gqr,Oqr,Vqr,v0,LEe,Xqr,zqr,zK,Wqr,Qqr,Hqr,F0,yEe,Uqr,Jqr,WK,Yqr,Kqr,Zqr,T0,xEe,ejr,ojr,QK,rjr,tjr,ajr,M0,$Ee,njr,sjr,HK,ljr,ijr,djr,E0,kEe,cjr,fjr,UK,mjr,gjr,hjr,C0,VDe,Uc,w0,SEe,hx,pjr,REe,_jr,XDe,ur,px,ujr,Jc,bjr,JK,vjr,Fjr,YK,Tjr,Mjr,Ejr,_x,Cjr,PEe,wjr,Ajr,Ljr,Qt,ux,yjr,BEe,xjr,$jr,Yc,kjr,IEe,Sjr,Rjr,KK,Pjr,Bjr,Ijr,A0,Njr,zr,bx,qjr,NEe,jjr,Djr,Fn,Gjr,qEe,Ojr,Vjr,jEe,Xjr,zjr,DEe,Wjr,Qjr,Hjr,ke,L0,GEe,Ujr,Jjr,ZK,Yjr,Kjr,Zjr,y0,OEe,eDr,oDr,eZ,rDr,tDr,aDr,x0,VEe,nDr,sDr,oZ,lDr,iDr,dDr,$0,XEe,cDr,fDr,rZ,mDr,gDr,hDr,k0,zEe,pDr,_Dr,tZ,uDr,bDr,vDr,S0,WEe,FDr,TDr,aZ,MDr,EDr,CDr,R0,QEe,wDr,ADr,nZ,LDr,yDr,xDr,P0,HEe,$Dr,kDr,sZ,SDr,RDr,PDr,B0,UEe,BDr,IDr,lZ,NDr,qDr,jDr,I0,JEe,DDr,GDr,iZ,ODr,VDr,XDr,N0,zDe,Kc,q0,YEe,vx,zDr,KEe,WDr,WDe,br,Fx,QDr,Zc,HDr,dZ,UDr,JDr,cZ,YDr,KDr,ZDr,Tx,eGr,ZEe,oGr,rGr,tGr,Ht,Mx,aGr,eCe,nGr,sGr,ef,lGr,oCe,iGr,dGr,fZ,cGr,fGr,mGr,j0,gGr,Wr,Ex,hGr,rCe,pGr,_Gr,Tn,uGr,tCe,bGr,vGr,aCe,FGr,TGr,nCe,MGr,EGr,CGr,Ge,D0,sCe,wGr,AGr,mZ,LGr,yGr,xGr,G0,lCe,$Gr,kGr,gZ,SGr,RGr,PGr,O0,iCe,BGr,IGr,hZ,NGr,qGr,jGr,V0,dCe,DGr,GGr,pZ,OGr,VGr,XGr,X0,cCe,zGr,WGr,_Z,QGr,HGr,UGr,z0,fCe,JGr,YGr,uZ,KGr,ZGr,eOr,W0,mCe,oOr,rOr,bZ,tOr,aOr,nOr,Q0,gCe,sOr,lOr,vZ,iOr,dOr,cOr,H0,QDe,of,U0,hCe,Cx,fOr,pCe,mOr,HDe,vr,wx,gOr,rf,hOr,FZ,pOr,_Or,TZ,uOr,bOr,vOr,Ax,FOr,_Ce,TOr,MOr,EOr,Ut,Lx,COr,uCe,wOr,AOr,tf,LOr,bCe,yOr,xOr,MZ,$Or,kOr,SOr,J0,ROr,Qr,yx,POr,vCe,BOr,IOr,Mn,NOr,FCe,qOr,jOr,TCe,DOr,GOr,MCe,OOr,VOr,XOr,Oe,Y0,ECe,zOr,WOr,EZ,QOr,HOr,UOr,K0,CCe,JOr,YOr,CZ,KOr,ZOr,eVr,Z0,wCe,oVr,rVr,wZ,tVr,aVr,nVr,ew,ACe,sVr,lVr,AZ,iVr,dVr,cVr,ow,LCe,fVr,mVr,LZ,gVr,hVr,pVr,rw,yCe,_Vr,uVr,yZ,bVr,vVr,FVr,tw,xCe,TVr,MVr,xZ,EVr,CVr,wVr,aw,$Ce,AVr,LVr,$Z,yVr,xVr,$Vr,nw,UDe,af,sw,kCe,xx,kVr,SCe,SVr,JDe,Fr,$x,RVr,nf,PVr,kZ,BVr,IVr,SZ,NVr,qVr,jVr,kx,DVr,RCe,GVr,OVr,VVr,Jt,Sx,XVr,PCe,zVr,WVr,sf,QVr,BCe,HVr,UVr,RZ,JVr,YVr,KVr,lw,ZVr,Hr,Rx,eXr,ICe,oXr,rXr,En,tXr,NCe,aXr,nXr,qCe,sXr,lXr,jCe,iXr,dXr,cXr,DCe,iw,GCe,fXr,mXr,PZ,gXr,hXr,pXr,dw,YDe,lf,cw,OCe,Px,_Xr,VCe,uXr,KDe,Tr,Bx,bXr,df,vXr,BZ,FXr,TXr,IZ,MXr,EXr,CXr,Ix,wXr,XCe,AXr,LXr,yXr,Yt,Nx,xXr,zCe,$Xr,kXr,cf,SXr,WCe,RXr,PXr,NZ,BXr,IXr,NXr,fw,qXr,Ur,qx,jXr,QCe,DXr,GXr,Cn,OXr,HCe,VXr,XXr,UCe,zXr,WXr,JCe,QXr,HXr,UXr,jx,mw,YCe,JXr,YXr,qZ,KXr,ZXr,ezr,gw,KCe,ozr,rzr,jZ,tzr,azr,nzr,hw,ZDe,ff,pw,ZCe,Dx,szr,e5e,lzr,eGe,Mr,Gx,izr,mf,dzr,DZ,czr,fzr,GZ,mzr,gzr,hzr,Ox,pzr,o5e,_zr,uzr,bzr,Kt,Vx,vzr,r5e,Fzr,Tzr,gf,Mzr,t5e,Ezr,Czr,OZ,wzr,Azr,Lzr,_w,yzr,Jr,Xx,xzr,a5e,$zr,kzr,wn,Szr,n5e,Rzr,Pzr,s5e,Bzr,Izr,l5e,Nzr,qzr,jzr,i5e,uw,d5e,Dzr,Gzr,VZ,Ozr,Vzr,Xzr,bw,oGe;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),D6=new te({}),G6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Mf=new zzr({props:{warning:!0,$$slots:{default:[eRt]},$$scope:{ctx:y}}}),O6=new te({}),V6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/configuration_auto.py#L590"}}),W6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/configuration_auto.py#L613"}}),Lg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[oRt]},$$scope:{ctx:y}}}),Q6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/configuration_auto.py#L736"}}),H6=new te({}),U6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/tokenization_auto.py#L391"}}),K6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17443/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/tokenization_auto.py#L405"}}),ih=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[rRt]},$$scope:{ctx:y}}}),Z6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/tokenization_auto.py#L604"}}),eL=new te({}),oL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17443/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/feature_extraction_auto.py#L205"}}),Gh=new zzr({props:{$$slots:{default:[tRt]},$$scope:{ctx:y}}}),Oh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[aRt]},$$scope:{ctx:y}}}),nL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/feature_extraction_auto.py#L332"}}),sL=new te({}),lL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/processing_auto.py#L88"}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/processing_auto.py#L102"}}),ip=new zzr({props:{$$slots:{default:[nRt]},$$scope:{ctx:y}}}),dp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[sRt]},$$scope:{ctx:y}}}),fL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/processing_auto.py#L255"}}),mL=new te({}),gL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L742"}}),pL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),mp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[lRt]},$$scope:{ctx:y}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),du=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[iRt]},$$scope:{ctx:y}}}),uL=new te({}),bL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L749"}}),FL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),fu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[dRt]},$$scope:{ctx:y}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),o4=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[cRt]},$$scope:{ctx:y}}}),ML=new te({}),EL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L764"}}),wL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),t4=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[fRt]},$$scope:{ctx:y}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),V4=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[mRt]},$$scope:{ctx:y}}}),LL=new te({}),yL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L771"}}),$L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),z4=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[gRt]},$$scope:{ctx:y}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),x1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[hRt]},$$scope:{ctx:y}}}),SL=new te({}),RL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L778"}}),BL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),k1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[pRt]},$$scope:{ctx:y}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),U1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[_Rt]},$$scope:{ctx:y}}}),NL=new te({}),qL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L787"}}),DL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),Y1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[uRt]},$$scope:{ctx:y}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),Wb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[bRt]},$$scope:{ctx:y}}}),OL=new te({}),VL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L821"}}),zL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),Hb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[vRt]},$$scope:{ctx:y}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),w2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[FRt]},$$scope:{ctx:y}}}),QL=new te({}),HL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L828"}}),JL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),L2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[TRt]},$$scope:{ctx:y}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),P2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[MRt]},$$scope:{ctx:y}}}),KL=new te({}),ZL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L814"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),I2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[ERt]},$$scope:{ctx:y}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),bv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[CRt]},$$scope:{ctx:y}}}),ty=new te({}),ay=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L796"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),Fv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[wRt]},$$scope:{ctx:y}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),i3=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ARt]},$$scope:{ctx:y}}}),iy=new te({}),dy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L803"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),c3=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[LRt]},$$scope:{ctx:y}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),g3=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[yRt]},$$scope:{ctx:y}}}),gy=new te({}),hy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L837"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17443/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),p3=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[xRt]},$$scope:{ctx:y}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[$Rt]},$$scope:{ctx:y}}}),by=new te({}),vy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L876"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),k3=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[kRt]},$$scope:{ctx:y}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),P3=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[SRt]},$$scope:{ctx:y}}}),Ey=new te({}),Cy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L883"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),I3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[RRt]},$$scope:{ctx:y}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),Q3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[PRt]},$$scope:{ctx:y}}}),yy=new te({}),xy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L906"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[BRt]},$$scope:{ctx:y}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),rF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[IRt]},$$scope:{ctx:y}}}),Ry=new te({}),Py=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L890"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),aF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[NRt]},$$scope:{ctx:y}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),pF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[qRt]},$$scope:{ctx:y}}}),qy=new te({}),jy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L897"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),uF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[jRt]},$$scope:{ctx:y}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[DRt]},$$scope:{ctx:y}}}),Xy=new te({}),zy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L915"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[GRt]},$$scope:{ctx:y}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[ORt]},$$scope:{ctx:y}}}),Uy=new te({}),Jy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L922"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[VRt]},$$scope:{ctx:y}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),NF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[XRt]},$$scope:{ctx:y}}}),e8=new te({}),o8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L869"}}),t8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),jF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[zRt]},$$scope:{ctx:y}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[WRt]},$$scope:{ctx:y}}}),s8=new te({}),l8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L844"}}),d8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[QRt]},$$scope:{ctx:y}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[HRt]},$$scope:{ctx:y}}}),f8=new te({}),m8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L851"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[URt]},$$scope:{ctx:y}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),rT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[JRt]},$$scope:{ctx:y}}}),_8=new te({}),u8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L860"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),aT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[YRt]},$$scope:{ctx:y}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),lT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[KRt]},$$scope:{ctx:y}}}),T8=new te({}),M8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),C8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),dT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[ZRt]},$$scope:{ctx:y}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),r7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[ePt]},$$scope:{ctx:y}}}),A8=new te({}),L8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),x8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),a7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[oPt]},$$scope:{ctx:y}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),y7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[rPt]},$$scope:{ctx:y}}}),k8=new te({}),S8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),P8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),$7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[tPt]},$$scope:{ctx:y}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),X7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[aPt]},$$scope:{ctx:y}}}),I8=new te({}),N8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),j8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),W7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[nPt]},$$scope:{ctx:y}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),Y7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[sPt]},$$scope:{ctx:y}}}),G8=new te({}),O8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),X8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),Z7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[lPt]},$$scope:{ctx:y}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[iPt]},$$scope:{ctx:y}}}),W8=new te({}),Q8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),U8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[dPt]},$$scope:{ctx:y}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),RM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[cPt]},$$scope:{ctx:y}}}),Y8=new te({}),K8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),e9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),BM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[fPt]},$$scope:{ctx:y}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),iE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[mPt]},$$scope:{ctx:y}}}),r9=new te({}),t9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),n9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),cE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[gPt]},$$scope:{ctx:y}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),yE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[hPt]},$$scope:{ctx:y}}}),l9=new te({}),i9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),c9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),$E=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[pPt]},$$scope:{ctx:y}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),RE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[_Pt]},$$scope:{ctx:y}}}),g9=new te({}),h9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),_9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[uPt]},$$scope:{ctx:y}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),NE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[bPt]},$$scope:{ctx:y}}}),b9=new te({}),v9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),T9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),jE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[vPt]},$$scope:{ctx:y}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[FPt]},$$scope:{ctx:y}}}),E9=new te({}),C9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),A9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[TPt]},$$scope:{ctx:y}}}),L9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),xC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[MPt]},$$scope:{ctx:y}}}),y9=new te({}),x9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),k9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),kC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[EPt]},$$scope:{ctx:y}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),RC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[CPt]},$$scope:{ctx:y}}}),R9=new te({}),P9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),I9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),BC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[wPt]},$$scope:{ctx:y}}}),N9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[APt]},$$scope:{ctx:y}}}),q9=new te({}),j9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),G9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),jC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[LPt]},$$scope:{ctx:y}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),m5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[yPt]},$$scope:{ctx:y}}}),V9=new te({}),X9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),W9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),h5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[xPt]},$$scope:{ctx:y}}}),Q9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[$Pt]},$$scope:{ctx:y}}}),H9=new te({}),U9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),L5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[kPt]},$$scope:{ctx:y}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[SPt]},$$scope:{ctx:y}}}),Z9=new te({}),ex=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[RPt]},$$scope:{ctx:y}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[PPt]},$$scope:{ctx:y}}}),ax=new te({}),nx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),o0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[BPt]},$$scope:{ctx:y}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),f0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[IPt]},$$scope:{ctx:y}}}),dx=new te({}),cx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),g0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[NPt]},$$scope:{ctx:y}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),C0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[qPt]},$$scope:{ctx:y}}}),hx=new te({}),px=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),A0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[jPt]},$$scope:{ctx:y}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),N0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[DPt]},$$scope:{ctx:y}}}),vx=new te({}),Fx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),j0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[GPt]},$$scope:{ctx:y}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),H0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[OPt]},$$scope:{ctx:y}}}),Cx=new te({}),wx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),J0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[VPt]},$$scope:{ctx:y}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[XPt]},$$scope:{ctx:y}}}),xx=new te({}),$x=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[zPt]},$$scope:{ctx:y}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),dw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[WPt]},$$scope:{ctx:y}}}),Px=new te({}),Bx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),fw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[QPt]},$$scope:{ctx:y}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[HPt]},$$scope:{ctx:y}}}),Dx=new te({}),Gx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[UPt]},$$scope:{ctx:y}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),bw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[JPt]},$$scope:{ctx:y}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),gi=o("Auto Classes"),uf=l(),rt=a("p"),hi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=a("code"),I6=o("from_pretrained()"),bf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),_i=o("Instantiating one of "),Ln=a("a"),N6=o("AutoConfig"),yn=o(", "),xn=a("a"),q6=o("AutoModel"),ui=o(`, and
`),$n=a("a"),j6=o("AutoTokenizer"),bi=o(" will directly create a class of the relevant architecture. For instance"),vf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),sk=o("will create a model that is an instance of "),vi=a("a"),lk=o("BertModel"),ik=o("."),Eo=l(),wa=a("p"),dk=o("There is one class of "),Ff=a("code"),ck=o("AutoModel"),dVe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Kqe=l(),Fi=a("h2"),Tf=a("a"),Ioe=a("span"),F(D6.$$.fragment),cVe=l(),Noe=a("span"),fVe=o("Extending the Auto Classes"),Zqe=l(),kn=a("p"),mVe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qoe=a("code"),gVe=o("NewModel"),hVe=o(", make sure you have a "),joe=a("code"),pVe=o("NewModelConfig"),_Ve=o(` then you can add those to the auto
classes like this:`),eje=l(),F(G6.$$.fragment),oje=l(),fk=a("p"),uVe=o("You will then be able to use the auto classes like you would usually do!"),rje=l(),F(Mf.$$.fragment),tje=l(),Ti=a("h2"),Ef=a("a"),Doe=a("span"),F(O6.$$.fragment),bVe=l(),Goe=a("span"),vVe=o("AutoConfig"),aje=l(),Co=a("div"),F(V6.$$.fragment),FVe=l(),X6=a("p"),TVe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),mk=a("a"),MVe=o("from_pretrained()"),EVe=o(" class method."),CVe=l(),z6=a("p"),wVe=o("This class cannot be instantiated directly using "),Ooe=a("code"),AVe=o("__init__()"),LVe=o(" (throws an error)."),yVe=l(),Er=a("div"),F(W6.$$.fragment),xVe=l(),Voe=a("p"),$Ve=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),kVe=l(),Mi=a("p"),SVe=o("The configuration class to instantiate is selected based on the "),Xoe=a("code"),RVe=o("model_type"),PVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zoe=a("code"),BVe=o("pretrained_model_name_or_path"),IVe=o(":"),NVe=l(),A=a("ul"),Cf=a("li"),Woe=a("strong"),qVe=o("albert"),jVe=o(" \u2014 "),gk=a("a"),DVe=o("AlbertConfig"),GVe=o(" (ALBERT model)"),OVe=l(),wf=a("li"),Qoe=a("strong"),VVe=o("bart"),XVe=o(" \u2014 "),hk=a("a"),zVe=o("BartConfig"),WVe=o(" (BART model)"),QVe=l(),Af=a("li"),Hoe=a("strong"),HVe=o("beit"),UVe=o(" \u2014 "),pk=a("a"),JVe=o("BeitConfig"),YVe=o(" (BEiT model)"),KVe=l(),Lf=a("li"),Uoe=a("strong"),ZVe=o("bert"),eXe=o(" \u2014 "),_k=a("a"),oXe=o("BertConfig"),rXe=o(" (BERT model)"),tXe=l(),yf=a("li"),Joe=a("strong"),aXe=o("bert-generation"),nXe=o(" \u2014 "),uk=a("a"),sXe=o("BertGenerationConfig"),lXe=o(" (Bert Generation model)"),iXe=l(),xf=a("li"),Yoe=a("strong"),dXe=o("big_bird"),cXe=o(" \u2014 "),bk=a("a"),fXe=o("BigBirdConfig"),mXe=o(" (BigBird model)"),gXe=l(),$f=a("li"),Koe=a("strong"),hXe=o("bigbird_pegasus"),pXe=o(" \u2014 "),vk=a("a"),_Xe=o("BigBirdPegasusConfig"),uXe=o(" (BigBird-Pegasus model)"),bXe=l(),kf=a("li"),Zoe=a("strong"),vXe=o("blenderbot"),FXe=o(" \u2014 "),Fk=a("a"),TXe=o("BlenderbotConfig"),MXe=o(" (Blenderbot model)"),EXe=l(),Sf=a("li"),ere=a("strong"),CXe=o("blenderbot-small"),wXe=o(" \u2014 "),Tk=a("a"),AXe=o("BlenderbotSmallConfig"),LXe=o(" (BlenderbotSmall model)"),yXe=l(),Rf=a("li"),ore=a("strong"),xXe=o("camembert"),$Xe=o(" \u2014 "),Mk=a("a"),kXe=o("CamembertConfig"),SXe=o(" (CamemBERT model)"),RXe=l(),Pf=a("li"),rre=a("strong"),PXe=o("canine"),BXe=o(" \u2014 "),Ek=a("a"),IXe=o("CanineConfig"),NXe=o(" (CANINE model)"),qXe=l(),Bf=a("li"),tre=a("strong"),jXe=o("clip"),DXe=o(" \u2014 "),Ck=a("a"),GXe=o("CLIPConfig"),OXe=o(" (CLIP model)"),VXe=l(),If=a("li"),are=a("strong"),XXe=o("codegen"),zXe=o(" \u2014 "),wk=a("a"),WXe=o("CodeGenConfig"),QXe=o(" (CodeGen model)"),HXe=l(),Nf=a("li"),nre=a("strong"),UXe=o("convbert"),JXe=o(" \u2014 "),Ak=a("a"),YXe=o("ConvBertConfig"),KXe=o(" (ConvBERT model)"),ZXe=l(),qf=a("li"),sre=a("strong"),eze=o("convnext"),oze=o(" \u2014 "),Lk=a("a"),rze=o("ConvNextConfig"),tze=o(" (ConvNeXT model)"),aze=l(),jf=a("li"),lre=a("strong"),nze=o("ctrl"),sze=o(" \u2014 "),yk=a("a"),lze=o("CTRLConfig"),ize=o(" (CTRL model)"),dze=l(),Df=a("li"),ire=a("strong"),cze=o("cvt"),fze=o(" \u2014 "),xk=a("a"),mze=o("CvtConfig"),gze=o(" (CvT model)"),hze=l(),Gf=a("li"),dre=a("strong"),pze=o("data2vec-audio"),_ze=o(" \u2014 "),$k=a("a"),uze=o("Data2VecAudioConfig"),bze=o(" (Data2VecAudio model)"),vze=l(),Of=a("li"),cre=a("strong"),Fze=o("data2vec-text"),Tze=o(" \u2014 "),kk=a("a"),Mze=o("Data2VecTextConfig"),Eze=o(" (Data2VecText model)"),Cze=l(),Vf=a("li"),fre=a("strong"),wze=o("data2vec-vision"),Aze=o(" \u2014 "),Sk=a("a"),Lze=o("Data2VecVisionConfig"),yze=o(" (Data2VecVision model)"),xze=l(),Xf=a("li"),mre=a("strong"),$ze=o("deberta"),kze=o(" \u2014 "),Rk=a("a"),Sze=o("DebertaConfig"),Rze=o(" (DeBERTa model)"),Pze=l(),zf=a("li"),gre=a("strong"),Bze=o("deberta-v2"),Ize=o(" \u2014 "),Pk=a("a"),Nze=o("DebertaV2Config"),qze=o(" (DeBERTa-v2 model)"),jze=l(),Wf=a("li"),hre=a("strong"),Dze=o("decision_transformer"),Gze=o(" \u2014 "),Bk=a("a"),Oze=o("DecisionTransformerConfig"),Vze=o(" (Decision Transformer model)"),Xze=l(),Qf=a("li"),pre=a("strong"),zze=o("deit"),Wze=o(" \u2014 "),Ik=a("a"),Qze=o("DeiTConfig"),Hze=o(" (DeiT model)"),Uze=l(),Hf=a("li"),_re=a("strong"),Jze=o("detr"),Yze=o(" \u2014 "),Nk=a("a"),Kze=o("DetrConfig"),Zze=o(" (DETR model)"),eWe=l(),Uf=a("li"),ure=a("strong"),oWe=o("distilbert"),rWe=o(" \u2014 "),qk=a("a"),tWe=o("DistilBertConfig"),aWe=o(" (DistilBERT model)"),nWe=l(),Jf=a("li"),bre=a("strong"),sWe=o("dpr"),lWe=o(" \u2014 "),jk=a("a"),iWe=o("DPRConfig"),dWe=o(" (DPR model)"),cWe=l(),Yf=a("li"),vre=a("strong"),fWe=o("dpt"),mWe=o(" \u2014 "),Dk=a("a"),gWe=o("DPTConfig"),hWe=o(" (DPT model)"),pWe=l(),Kf=a("li"),Fre=a("strong"),_We=o("electra"),uWe=o(" \u2014 "),Gk=a("a"),bWe=o("ElectraConfig"),vWe=o(" (ELECTRA model)"),FWe=l(),Zf=a("li"),Tre=a("strong"),TWe=o("encoder-decoder"),MWe=o(" \u2014 "),Ok=a("a"),EWe=o("EncoderDecoderConfig"),CWe=o(" (Encoder decoder model)"),wWe=l(),em=a("li"),Mre=a("strong"),AWe=o("flaubert"),LWe=o(" \u2014 "),Vk=a("a"),yWe=o("FlaubertConfig"),xWe=o(" (FlauBERT model)"),$We=l(),om=a("li"),Ere=a("strong"),kWe=o("flava"),SWe=o(" \u2014 "),Xk=a("a"),RWe=o("FlavaConfig"),PWe=o(" (FLAVA model)"),BWe=l(),rm=a("li"),Cre=a("strong"),IWe=o("fnet"),NWe=o(" \u2014 "),zk=a("a"),qWe=o("FNetConfig"),jWe=o(" (FNet model)"),DWe=l(),tm=a("li"),wre=a("strong"),GWe=o("fsmt"),OWe=o(" \u2014 "),Wk=a("a"),VWe=o("FSMTConfig"),XWe=o(" (FairSeq Machine-Translation model)"),zWe=l(),am=a("li"),Are=a("strong"),WWe=o("funnel"),QWe=o(" \u2014 "),Qk=a("a"),HWe=o("FunnelConfig"),UWe=o(" (Funnel Transformer model)"),JWe=l(),nm=a("li"),Lre=a("strong"),YWe=o("glpn"),KWe=o(" \u2014 "),Hk=a("a"),ZWe=o("GLPNConfig"),eQe=o(" (GLPN model)"),oQe=l(),sm=a("li"),yre=a("strong"),rQe=o("gpt2"),tQe=o(" \u2014 "),Uk=a("a"),aQe=o("GPT2Config"),nQe=o(" (OpenAI GPT-2 model)"),sQe=l(),lm=a("li"),xre=a("strong"),lQe=o("gpt_neo"),iQe=o(" \u2014 "),Jk=a("a"),dQe=o("GPTNeoConfig"),cQe=o(" (GPT Neo model)"),fQe=l(),im=a("li"),$re=a("strong"),mQe=o("gpt_neox"),gQe=o(" \u2014 "),Yk=a("a"),hQe=o("GPTNeoXConfig"),pQe=o(" (GPT NeoX model)"),_Qe=l(),dm=a("li"),kre=a("strong"),uQe=o("gptj"),bQe=o(" \u2014 "),Kk=a("a"),vQe=o("GPTJConfig"),FQe=o(" (GPT-J model)"),TQe=l(),cm=a("li"),Sre=a("strong"),MQe=o("hubert"),EQe=o(" \u2014 "),Zk=a("a"),CQe=o("HubertConfig"),wQe=o(" (Hubert model)"),AQe=l(),fm=a("li"),Rre=a("strong"),LQe=o("ibert"),yQe=o(" \u2014 "),eS=a("a"),xQe=o("IBertConfig"),$Qe=o(" (I-BERT model)"),kQe=l(),mm=a("li"),Pre=a("strong"),SQe=o("imagegpt"),RQe=o(" \u2014 "),oS=a("a"),PQe=o("ImageGPTConfig"),BQe=o(" (ImageGPT model)"),IQe=l(),gm=a("li"),Bre=a("strong"),NQe=o("layoutlm"),qQe=o(" \u2014 "),rS=a("a"),jQe=o("LayoutLMConfig"),DQe=o(" (LayoutLM model)"),GQe=l(),hm=a("li"),Ire=a("strong"),OQe=o("layoutlmv2"),VQe=o(" \u2014 "),tS=a("a"),XQe=o("LayoutLMv2Config"),zQe=o(" (LayoutLMv2 model)"),WQe=l(),pm=a("li"),Nre=a("strong"),QQe=o("layoutlmv3"),HQe=o(" \u2014 "),aS=a("a"),UQe=o("LayoutLMv3Config"),JQe=o(" (LayoutLMv3 model)"),YQe=l(),_m=a("li"),qre=a("strong"),KQe=o("led"),ZQe=o(" \u2014 "),nS=a("a"),eHe=o("LEDConfig"),oHe=o(" (LED model)"),rHe=l(),um=a("li"),jre=a("strong"),tHe=o("levit"),aHe=o(" \u2014 "),sS=a("a"),nHe=o("LevitConfig"),sHe=o(" (LeViT model)"),lHe=l(),bm=a("li"),Dre=a("strong"),iHe=o("longformer"),dHe=o(" \u2014 "),lS=a("a"),cHe=o("LongformerConfig"),fHe=o(" (Longformer model)"),mHe=l(),vm=a("li"),Gre=a("strong"),gHe=o("luke"),hHe=o(" \u2014 "),iS=a("a"),pHe=o("LukeConfig"),_He=o(" (LUKE model)"),uHe=l(),Fm=a("li"),Ore=a("strong"),bHe=o("lxmert"),vHe=o(" \u2014 "),dS=a("a"),FHe=o("LxmertConfig"),THe=o(" (LXMERT model)"),MHe=l(),Tm=a("li"),Vre=a("strong"),EHe=o("m2m_100"),CHe=o(" \u2014 "),cS=a("a"),wHe=o("M2M100Config"),AHe=o(" (M2M100 model)"),LHe=l(),Mm=a("li"),Xre=a("strong"),yHe=o("marian"),xHe=o(" \u2014 "),fS=a("a"),$He=o("MarianConfig"),kHe=o(" (Marian model)"),SHe=l(),Em=a("li"),zre=a("strong"),RHe=o("maskformer"),PHe=o(" \u2014 "),mS=a("a"),BHe=o("MaskFormerConfig"),IHe=o(" (MaskFormer model)"),NHe=l(),Cm=a("li"),Wre=a("strong"),qHe=o("mbart"),jHe=o(" \u2014 "),gS=a("a"),DHe=o("MBartConfig"),GHe=o(" (mBART model)"),OHe=l(),wm=a("li"),Qre=a("strong"),VHe=o("megatron-bert"),XHe=o(" \u2014 "),hS=a("a"),zHe=o("MegatronBertConfig"),WHe=o(" (Megatron-BERT model)"),QHe=l(),Am=a("li"),Hre=a("strong"),HHe=o("mobilebert"),UHe=o(" \u2014 "),pS=a("a"),JHe=o("MobileBertConfig"),YHe=o(" (MobileBERT model)"),KHe=l(),Lm=a("li"),Ure=a("strong"),ZHe=o("mpnet"),eUe=o(" \u2014 "),_S=a("a"),oUe=o("MPNetConfig"),rUe=o(" (MPNet model)"),tUe=l(),ym=a("li"),Jre=a("strong"),aUe=o("mt5"),nUe=o(" \u2014 "),uS=a("a"),sUe=o("MT5Config"),lUe=o(" (MT5 model)"),iUe=l(),xm=a("li"),Yre=a("strong"),dUe=o("nystromformer"),cUe=o(" \u2014 "),bS=a("a"),fUe=o("NystromformerConfig"),mUe=o(" (Nystr\xF6mformer model)"),gUe=l(),$m=a("li"),Kre=a("strong"),hUe=o("openai-gpt"),pUe=o(" \u2014 "),vS=a("a"),_Ue=o("OpenAIGPTConfig"),uUe=o(" (OpenAI GPT model)"),bUe=l(),km=a("li"),Zre=a("strong"),vUe=o("opt"),FUe=o(" \u2014 "),FS=a("a"),TUe=o("OPTConfig"),MUe=o(" (OPT model)"),EUe=l(),Sm=a("li"),ete=a("strong"),CUe=o("pegasus"),wUe=o(" \u2014 "),TS=a("a"),AUe=o("PegasusConfig"),LUe=o(" (Pegasus model)"),yUe=l(),Rm=a("li"),ote=a("strong"),xUe=o("perceiver"),$Ue=o(" \u2014 "),MS=a("a"),kUe=o("PerceiverConfig"),SUe=o(" (Perceiver model)"),RUe=l(),Pm=a("li"),rte=a("strong"),PUe=o("plbart"),BUe=o(" \u2014 "),ES=a("a"),IUe=o("PLBartConfig"),NUe=o(" (PLBart model)"),qUe=l(),Bm=a("li"),tte=a("strong"),jUe=o("poolformer"),DUe=o(" \u2014 "),CS=a("a"),GUe=o("PoolFormerConfig"),OUe=o(" (PoolFormer model)"),VUe=l(),Im=a("li"),ate=a("strong"),XUe=o("prophetnet"),zUe=o(" \u2014 "),wS=a("a"),WUe=o("ProphetNetConfig"),QUe=o(" (ProphetNet model)"),HUe=l(),Nm=a("li"),nte=a("strong"),UUe=o("qdqbert"),JUe=o(" \u2014 "),AS=a("a"),YUe=o("QDQBertConfig"),KUe=o(" (QDQBert model)"),ZUe=l(),qm=a("li"),ste=a("strong"),eJe=o("rag"),oJe=o(" \u2014 "),LS=a("a"),rJe=o("RagConfig"),tJe=o(" (RAG model)"),aJe=l(),jm=a("li"),lte=a("strong"),nJe=o("realm"),sJe=o(" \u2014 "),yS=a("a"),lJe=o("RealmConfig"),iJe=o(" (REALM model)"),dJe=l(),Dm=a("li"),ite=a("strong"),cJe=o("reformer"),fJe=o(" \u2014 "),xS=a("a"),mJe=o("ReformerConfig"),gJe=o(" (Reformer model)"),hJe=l(),Gm=a("li"),dte=a("strong"),pJe=o("regnet"),_Je=o(" \u2014 "),$S=a("a"),uJe=o("RegNetConfig"),bJe=o(" (RegNet model)"),vJe=l(),Om=a("li"),cte=a("strong"),FJe=o("rembert"),TJe=o(" \u2014 "),kS=a("a"),MJe=o("RemBertConfig"),EJe=o(" (RemBERT model)"),CJe=l(),Vm=a("li"),fte=a("strong"),wJe=o("resnet"),AJe=o(" \u2014 "),SS=a("a"),LJe=o("ResNetConfig"),yJe=o(" (ResNet model)"),xJe=l(),Xm=a("li"),mte=a("strong"),$Je=o("retribert"),kJe=o(" \u2014 "),RS=a("a"),SJe=o("RetriBertConfig"),RJe=o(" (RetriBERT model)"),PJe=l(),zm=a("li"),gte=a("strong"),BJe=o("roberta"),IJe=o(" \u2014 "),PS=a("a"),NJe=o("RobertaConfig"),qJe=o(" (RoBERTa model)"),jJe=l(),Wm=a("li"),hte=a("strong"),DJe=o("roformer"),GJe=o(" \u2014 "),BS=a("a"),OJe=o("RoFormerConfig"),VJe=o(" (RoFormer model)"),XJe=l(),Qm=a("li"),pte=a("strong"),zJe=o("segformer"),WJe=o(" \u2014 "),IS=a("a"),QJe=o("SegformerConfig"),HJe=o(" (SegFormer model)"),UJe=l(),Hm=a("li"),_te=a("strong"),JJe=o("sew"),YJe=o(" \u2014 "),NS=a("a"),KJe=o("SEWConfig"),ZJe=o(" (SEW model)"),eYe=l(),Um=a("li"),ute=a("strong"),oYe=o("sew-d"),rYe=o(" \u2014 "),qS=a("a"),tYe=o("SEWDConfig"),aYe=o(" (SEW-D model)"),nYe=l(),Jm=a("li"),bte=a("strong"),sYe=o("speech-encoder-decoder"),lYe=o(" \u2014 "),jS=a("a"),iYe=o("SpeechEncoderDecoderConfig"),dYe=o(" (Speech Encoder decoder model)"),cYe=l(),Ym=a("li"),vte=a("strong"),fYe=o("speech_to_text"),mYe=o(" \u2014 "),DS=a("a"),gYe=o("Speech2TextConfig"),hYe=o(" (Speech2Text model)"),pYe=l(),Km=a("li"),Fte=a("strong"),_Ye=o("speech_to_text_2"),uYe=o(" \u2014 "),GS=a("a"),bYe=o("Speech2Text2Config"),vYe=o(" (Speech2Text2 model)"),FYe=l(),Zm=a("li"),Tte=a("strong"),TYe=o("splinter"),MYe=o(" \u2014 "),OS=a("a"),EYe=o("SplinterConfig"),CYe=o(" (Splinter model)"),wYe=l(),eg=a("li"),Mte=a("strong"),AYe=o("squeezebert"),LYe=o(" \u2014 "),VS=a("a"),yYe=o("SqueezeBertConfig"),xYe=o(" (SqueezeBERT model)"),$Ye=l(),og=a("li"),Ete=a("strong"),kYe=o("swin"),SYe=o(" \u2014 "),XS=a("a"),RYe=o("SwinConfig"),PYe=o(" (Swin Transformer model)"),BYe=l(),rg=a("li"),Cte=a("strong"),IYe=o("t5"),NYe=o(" \u2014 "),zS=a("a"),qYe=o("T5Config"),jYe=o(" (T5 model)"),DYe=l(),tg=a("li"),wte=a("strong"),GYe=o("tapas"),OYe=o(" \u2014 "),WS=a("a"),VYe=o("TapasConfig"),XYe=o(" (TAPAS model)"),zYe=l(),ag=a("li"),Ate=a("strong"),WYe=o("trajectory_transformer"),QYe=o(" \u2014 "),QS=a("a"),HYe=o("TrajectoryTransformerConfig"),UYe=o(" (Trajectory Transformer model)"),JYe=l(),ng=a("li"),Lte=a("strong"),YYe=o("transfo-xl"),KYe=o(" \u2014 "),HS=a("a"),ZYe=o("TransfoXLConfig"),eKe=o(" (Transformer-XL model)"),oKe=l(),sg=a("li"),yte=a("strong"),rKe=o("trocr"),tKe=o(" \u2014 "),US=a("a"),aKe=o("TrOCRConfig"),nKe=o(" (TrOCR model)"),sKe=l(),lg=a("li"),xte=a("strong"),lKe=o("unispeech"),iKe=o(" \u2014 "),JS=a("a"),dKe=o("UniSpeechConfig"),cKe=o(" (UniSpeech model)"),fKe=l(),ig=a("li"),$te=a("strong"),mKe=o("unispeech-sat"),gKe=o(" \u2014 "),YS=a("a"),hKe=o("UniSpeechSatConfig"),pKe=o(" (UniSpeechSat model)"),_Ke=l(),dg=a("li"),kte=a("strong"),uKe=o("van"),bKe=o(" \u2014 "),KS=a("a"),vKe=o("VanConfig"),FKe=o(" (VAN model)"),TKe=l(),cg=a("li"),Ste=a("strong"),MKe=o("vilt"),EKe=o(" \u2014 "),ZS=a("a"),CKe=o("ViltConfig"),wKe=o(" (ViLT model)"),AKe=l(),fg=a("li"),Rte=a("strong"),LKe=o("vision-encoder-decoder"),yKe=o(" \u2014 "),eR=a("a"),xKe=o("VisionEncoderDecoderConfig"),$Ke=o(" (Vision Encoder decoder model)"),kKe=l(),mg=a("li"),Pte=a("strong"),SKe=o("vision-text-dual-encoder"),RKe=o(" \u2014 "),oR=a("a"),PKe=o("VisionTextDualEncoderConfig"),BKe=o(" (VisionTextDualEncoder model)"),IKe=l(),gg=a("li"),Bte=a("strong"),NKe=o("visual_bert"),qKe=o(" \u2014 "),rR=a("a"),jKe=o("VisualBertConfig"),DKe=o(" (VisualBERT model)"),GKe=l(),hg=a("li"),Ite=a("strong"),OKe=o("vit"),VKe=o(" \u2014 "),tR=a("a"),XKe=o("ViTConfig"),zKe=o(" (ViT model)"),WKe=l(),pg=a("li"),Nte=a("strong"),QKe=o("vit_mae"),HKe=o(" \u2014 "),aR=a("a"),UKe=o("ViTMAEConfig"),JKe=o(" (ViTMAE model)"),YKe=l(),_g=a("li"),qte=a("strong"),KKe=o("wav2vec2"),ZKe=o(" \u2014 "),nR=a("a"),eZe=o("Wav2Vec2Config"),oZe=o(" (Wav2Vec2 model)"),rZe=l(),ug=a("li"),jte=a("strong"),tZe=o("wav2vec2-conformer"),aZe=o(" \u2014 "),sR=a("a"),nZe=o("Wav2Vec2ConformerConfig"),sZe=o(" (Wav2Vec2-Conformer model)"),lZe=l(),bg=a("li"),Dte=a("strong"),iZe=o("wavlm"),dZe=o(" \u2014 "),lR=a("a"),cZe=o("WavLMConfig"),fZe=o(" (WavLM model)"),mZe=l(),vg=a("li"),Gte=a("strong"),gZe=o("xglm"),hZe=o(" \u2014 "),iR=a("a"),pZe=o("XGLMConfig"),_Ze=o(" (XGLM model)"),uZe=l(),Fg=a("li"),Ote=a("strong"),bZe=o("xlm"),vZe=o(" \u2014 "),dR=a("a"),FZe=o("XLMConfig"),TZe=o(" (XLM model)"),MZe=l(),Tg=a("li"),Vte=a("strong"),EZe=o("xlm-prophetnet"),CZe=o(" \u2014 "),cR=a("a"),wZe=o("XLMProphetNetConfig"),AZe=o(" (XLM-ProphetNet model)"),LZe=l(),Mg=a("li"),Xte=a("strong"),yZe=o("xlm-roberta"),xZe=o(" \u2014 "),fR=a("a"),$Ze=o("XLMRobertaConfig"),kZe=o(" (XLM-RoBERTa model)"),SZe=l(),Eg=a("li"),zte=a("strong"),RZe=o("xlm-roberta-xl"),PZe=o(" \u2014 "),mR=a("a"),BZe=o("XLMRobertaXLConfig"),IZe=o(" (XLM-RoBERTa-XL model)"),NZe=l(),Cg=a("li"),Wte=a("strong"),qZe=o("xlnet"),jZe=o(" \u2014 "),gR=a("a"),DZe=o("XLNetConfig"),GZe=o(" (XLNet model)"),OZe=l(),wg=a("li"),Qte=a("strong"),VZe=o("yolos"),XZe=o(" \u2014 "),hR=a("a"),zZe=o("YolosConfig"),WZe=o(" (YOLOS model)"),QZe=l(),Ag=a("li"),Hte=a("strong"),HZe=o("yoso"),UZe=o(" \u2014 "),pR=a("a"),JZe=o("YosoConfig"),YZe=o(" (YOSO model)"),KZe=l(),F(Lg.$$.fragment),ZZe=l(),yg=a("div"),F(Q6.$$.fragment),eeo=l(),Ute=a("p"),oeo=o("Register a new configuration for this class."),nje=l(),Ei=a("h2"),xg=a("a"),Jte=a("span"),F(H6.$$.fragment),reo=l(),Yte=a("span"),teo=o("AutoTokenizer"),sje=l(),wo=a("div"),F(U6.$$.fragment),aeo=l(),J6=a("p"),neo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),_R=a("a"),seo=o("AutoTokenizer.from_pretrained()"),leo=o(" class method."),ieo=l(),Y6=a("p"),deo=o("This class cannot be instantiated directly using "),Kte=a("code"),ceo=o("__init__()"),feo=o(" (throws an error)."),meo=l(),Cr=a("div"),F(K6.$$.fragment),geo=l(),Zte=a("p"),heo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),peo=l(),Aa=a("p"),_eo=o("The tokenizer class to instantiate is selected based on the "),eae=a("code"),ueo=o("model_type"),beo=o(` property of the config object (either
passed as an argument or loaded from `),oae=a("code"),veo=o("pretrained_model_name_or_path"),Feo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rae=a("code"),Teo=o("pretrained_model_name_or_path"),Meo=o(":"),Eeo=l(),k=a("ul"),Sn=a("li"),tae=a("strong"),Ceo=o("albert"),weo=o(" \u2014 "),uR=a("a"),Aeo=o("AlbertTokenizer"),Leo=o(" or "),bR=a("a"),yeo=o("AlbertTokenizerFast"),xeo=o(" (ALBERT model)"),$eo=l(),Rn=a("li"),aae=a("strong"),keo=o("bart"),Seo=o(" \u2014 "),vR=a("a"),Reo=o("BartTokenizer"),Peo=o(" or "),FR=a("a"),Beo=o("BartTokenizerFast"),Ieo=o(" (BART model)"),Neo=l(),Pn=a("li"),nae=a("strong"),qeo=o("barthez"),jeo=o(" \u2014 "),TR=a("a"),Deo=o("BarthezTokenizer"),Geo=o(" or "),MR=a("a"),Oeo=o("BarthezTokenizerFast"),Veo=o(" (BARThez model)"),Xeo=l(),$g=a("li"),sae=a("strong"),zeo=o("bartpho"),Weo=o(" \u2014 "),ER=a("a"),Qeo=o("BartphoTokenizer"),Heo=o(" (BARTpho model)"),Ueo=l(),Bn=a("li"),lae=a("strong"),Jeo=o("bert"),Yeo=o(" \u2014 "),CR=a("a"),Keo=o("BertTokenizer"),Zeo=o(" or "),wR=a("a"),eoo=o("BertTokenizerFast"),ooo=o(" (BERT model)"),roo=l(),kg=a("li"),iae=a("strong"),too=o("bert-generation"),aoo=o(" \u2014 "),AR=a("a"),noo=o("BertGenerationTokenizer"),soo=o(" (Bert Generation model)"),loo=l(),Sg=a("li"),dae=a("strong"),ioo=o("bert-japanese"),doo=o(" \u2014 "),LR=a("a"),coo=o("BertJapaneseTokenizer"),foo=o(" (BertJapanese model)"),moo=l(),Rg=a("li"),cae=a("strong"),goo=o("bertweet"),hoo=o(" \u2014 "),yR=a("a"),poo=o("BertweetTokenizer"),_oo=o(" (BERTweet model)"),uoo=l(),In=a("li"),fae=a("strong"),boo=o("big_bird"),voo=o(" \u2014 "),xR=a("a"),Foo=o("BigBirdTokenizer"),Too=o(" or "),$R=a("a"),Moo=o("BigBirdTokenizerFast"),Eoo=o(" (BigBird model)"),Coo=l(),Nn=a("li"),mae=a("strong"),woo=o("bigbird_pegasus"),Aoo=o(" \u2014 "),kR=a("a"),Loo=o("PegasusTokenizer"),yoo=o(" or "),SR=a("a"),xoo=o("PegasusTokenizerFast"),$oo=o(" (BigBird-Pegasus model)"),koo=l(),qn=a("li"),gae=a("strong"),Soo=o("blenderbot"),Roo=o(" \u2014 "),RR=a("a"),Poo=o("BlenderbotTokenizer"),Boo=o(" or "),PR=a("a"),Ioo=o("BlenderbotTokenizerFast"),Noo=o(" (Blenderbot model)"),qoo=l(),Pg=a("li"),hae=a("strong"),joo=o("blenderbot-small"),Doo=o(" \u2014 "),BR=a("a"),Goo=o("BlenderbotSmallTokenizer"),Ooo=o(" (BlenderbotSmall model)"),Voo=l(),Bg=a("li"),pae=a("strong"),Xoo=o("byt5"),zoo=o(" \u2014 "),IR=a("a"),Woo=o("ByT5Tokenizer"),Qoo=o(" (ByT5 model)"),Hoo=l(),jn=a("li"),_ae=a("strong"),Uoo=o("camembert"),Joo=o(" \u2014 "),NR=a("a"),Yoo=o("CamembertTokenizer"),Koo=o(" or "),qR=a("a"),Zoo=o("CamembertTokenizerFast"),ero=o(" (CamemBERT model)"),oro=l(),Ig=a("li"),uae=a("strong"),rro=o("canine"),tro=o(" \u2014 "),jR=a("a"),aro=o("CanineTokenizer"),nro=o(" (CANINE model)"),sro=l(),Dn=a("li"),bae=a("strong"),lro=o("clip"),iro=o(" \u2014 "),DR=a("a"),dro=o("CLIPTokenizer"),cro=o(" or "),GR=a("a"),fro=o("CLIPTokenizerFast"),mro=o(" (CLIP model)"),gro=l(),Gn=a("li"),vae=a("strong"),hro=o("codegen"),pro=o(" \u2014 "),OR=a("a"),_ro=o("GPT2Tokenizer"),uro=o(" or "),VR=a("a"),bro=o("GPT2TokenizerFast"),vro=o(" (CodeGen model)"),Fro=l(),On=a("li"),Fae=a("strong"),Tro=o("convbert"),Mro=o(" \u2014 "),XR=a("a"),Ero=o("ConvBertTokenizer"),Cro=o(" or "),zR=a("a"),wro=o("ConvBertTokenizerFast"),Aro=o(" (ConvBERT model)"),Lro=l(),Vn=a("li"),Tae=a("strong"),yro=o("cpm"),xro=o(" \u2014 "),WR=a("a"),$ro=o("CpmTokenizer"),kro=o(" or "),QR=a("a"),Sro=o("CpmTokenizerFast"),Rro=o(" (CPM model)"),Pro=l(),Ng=a("li"),Mae=a("strong"),Bro=o("ctrl"),Iro=o(" \u2014 "),HR=a("a"),Nro=o("CTRLTokenizer"),qro=o(" (CTRL model)"),jro=l(),Xn=a("li"),Eae=a("strong"),Dro=o("data2vec-text"),Gro=o(" \u2014 "),UR=a("a"),Oro=o("RobertaTokenizer"),Vro=o(" or "),JR=a("a"),Xro=o("RobertaTokenizerFast"),zro=o(" (Data2VecText model)"),Wro=l(),zn=a("li"),Cae=a("strong"),Qro=o("deberta"),Hro=o(" \u2014 "),YR=a("a"),Uro=o("DebertaTokenizer"),Jro=o(" or "),KR=a("a"),Yro=o("DebertaTokenizerFast"),Kro=o(" (DeBERTa model)"),Zro=l(),Wn=a("li"),wae=a("strong"),eto=o("deberta-v2"),oto=o(" \u2014 "),ZR=a("a"),rto=o("DebertaV2Tokenizer"),tto=o(" or "),eP=a("a"),ato=o("DebertaV2TokenizerFast"),nto=o(" (DeBERTa-v2 model)"),sto=l(),Qn=a("li"),Aae=a("strong"),lto=o("distilbert"),ito=o(" \u2014 "),oP=a("a"),dto=o("DistilBertTokenizer"),cto=o(" or "),rP=a("a"),fto=o("DistilBertTokenizerFast"),mto=o(" (DistilBERT model)"),gto=l(),Hn=a("li"),Lae=a("strong"),hto=o("dpr"),pto=o(" \u2014 "),tP=a("a"),_to=o("DPRQuestionEncoderTokenizer"),uto=o(" or "),aP=a("a"),bto=o("DPRQuestionEncoderTokenizerFast"),vto=o(" (DPR model)"),Fto=l(),Un=a("li"),yae=a("strong"),Tto=o("electra"),Mto=o(" \u2014 "),nP=a("a"),Eto=o("ElectraTokenizer"),Cto=o(" or "),sP=a("a"),wto=o("ElectraTokenizerFast"),Ato=o(" (ELECTRA model)"),Lto=l(),qg=a("li"),xae=a("strong"),yto=o("flaubert"),xto=o(" \u2014 "),lP=a("a"),$to=o("FlaubertTokenizer"),kto=o(" (FlauBERT model)"),Sto=l(),Jn=a("li"),$ae=a("strong"),Rto=o("fnet"),Pto=o(" \u2014 "),iP=a("a"),Bto=o("FNetTokenizer"),Ito=o(" or "),dP=a("a"),Nto=o("FNetTokenizerFast"),qto=o(" (FNet model)"),jto=l(),jg=a("li"),kae=a("strong"),Dto=o("fsmt"),Gto=o(" \u2014 "),cP=a("a"),Oto=o("FSMTTokenizer"),Vto=o(" (FairSeq Machine-Translation model)"),Xto=l(),Yn=a("li"),Sae=a("strong"),zto=o("funnel"),Wto=o(" \u2014 "),fP=a("a"),Qto=o("FunnelTokenizer"),Hto=o(" or "),mP=a("a"),Uto=o("FunnelTokenizerFast"),Jto=o(" (Funnel Transformer model)"),Yto=l(),Kn=a("li"),Rae=a("strong"),Kto=o("gpt2"),Zto=o(" \u2014 "),gP=a("a"),eao=o("GPT2Tokenizer"),oao=o(" or "),hP=a("a"),rao=o("GPT2TokenizerFast"),tao=o(" (OpenAI GPT-2 model)"),aao=l(),Zn=a("li"),Pae=a("strong"),nao=o("gpt_neo"),sao=o(" \u2014 "),pP=a("a"),lao=o("GPT2Tokenizer"),iao=o(" or "),_P=a("a"),dao=o("GPT2TokenizerFast"),cao=o(" (GPT Neo model)"),fao=l(),Dg=a("li"),Bae=a("strong"),mao=o("gpt_neox"),gao=o(" \u2014 "),uP=a("a"),hao=o("GPTNeoXTokenizerFast"),pao=o(" (GPT NeoX model)"),_ao=l(),es=a("li"),Iae=a("strong"),uao=o("gptj"),bao=o(" \u2014 "),bP=a("a"),vao=o("GPT2Tokenizer"),Fao=o(" or "),vP=a("a"),Tao=o("GPT2TokenizerFast"),Mao=o(" (GPT-J model)"),Eao=l(),os=a("li"),Nae=a("strong"),Cao=o("herbert"),wao=o(" \u2014 "),FP=a("a"),Aao=o("HerbertTokenizer"),Lao=o(" or "),TP=a("a"),yao=o("HerbertTokenizerFast"),xao=o(" (HerBERT model)"),$ao=l(),Gg=a("li"),qae=a("strong"),kao=o("hubert"),Sao=o(" \u2014 "),MP=a("a"),Rao=o("Wav2Vec2CTCTokenizer"),Pao=o(" (Hubert model)"),Bao=l(),rs=a("li"),jae=a("strong"),Iao=o("ibert"),Nao=o(" \u2014 "),EP=a("a"),qao=o("RobertaTokenizer"),jao=o(" or "),CP=a("a"),Dao=o("RobertaTokenizerFast"),Gao=o(" (I-BERT model)"),Oao=l(),ts=a("li"),Dae=a("strong"),Vao=o("layoutlm"),Xao=o(" \u2014 "),wP=a("a"),zao=o("LayoutLMTokenizer"),Wao=o(" or "),AP=a("a"),Qao=o("LayoutLMTokenizerFast"),Hao=o(" (LayoutLM model)"),Uao=l(),as=a("li"),Gae=a("strong"),Jao=o("layoutlmv2"),Yao=o(" \u2014 "),LP=a("a"),Kao=o("LayoutLMv2Tokenizer"),Zao=o(" or "),yP=a("a"),eno=o("LayoutLMv2TokenizerFast"),ono=o(" (LayoutLMv2 model)"),rno=l(),ns=a("li"),Oae=a("strong"),tno=o("layoutlmv3"),ano=o(" \u2014 "),xP=a("a"),nno=o("LayoutLMv3Tokenizer"),sno=o(" or "),$P=a("a"),lno=o("LayoutLMv3TokenizerFast"),ino=o(" (LayoutLMv3 model)"),dno=l(),ss=a("li"),Vae=a("strong"),cno=o("layoutxlm"),fno=o(" \u2014 "),kP=a("a"),mno=o("LayoutXLMTokenizer"),gno=o(" or "),SP=a("a"),hno=o("LayoutXLMTokenizerFast"),pno=o(" (LayoutXLM model)"),_no=l(),ls=a("li"),Xae=a("strong"),uno=o("led"),bno=o(" \u2014 "),RP=a("a"),vno=o("LEDTokenizer"),Fno=o(" or "),PP=a("a"),Tno=o("LEDTokenizerFast"),Mno=o(" (LED model)"),Eno=l(),is=a("li"),zae=a("strong"),Cno=o("longformer"),wno=o(" \u2014 "),BP=a("a"),Ano=o("LongformerTokenizer"),Lno=o(" or "),IP=a("a"),yno=o("LongformerTokenizerFast"),xno=o(" (Longformer model)"),$no=l(),Og=a("li"),Wae=a("strong"),kno=o("luke"),Sno=o(" \u2014 "),NP=a("a"),Rno=o("LukeTokenizer"),Pno=o(" (LUKE model)"),Bno=l(),ds=a("li"),Qae=a("strong"),Ino=o("lxmert"),Nno=o(" \u2014 "),qP=a("a"),qno=o("LxmertTokenizer"),jno=o(" or "),jP=a("a"),Dno=o("LxmertTokenizerFast"),Gno=o(" (LXMERT model)"),Ono=l(),Vg=a("li"),Hae=a("strong"),Vno=o("m2m_100"),Xno=o(" \u2014 "),DP=a("a"),zno=o("M2M100Tokenizer"),Wno=o(" (M2M100 model)"),Qno=l(),Xg=a("li"),Uae=a("strong"),Hno=o("marian"),Uno=o(" \u2014 "),GP=a("a"),Jno=o("MarianTokenizer"),Yno=o(" (Marian model)"),Kno=l(),cs=a("li"),Jae=a("strong"),Zno=o("mbart"),eso=o(" \u2014 "),OP=a("a"),oso=o("MBartTokenizer"),rso=o(" or "),VP=a("a"),tso=o("MBartTokenizerFast"),aso=o(" (mBART model)"),nso=l(),fs=a("li"),Yae=a("strong"),sso=o("mbart50"),lso=o(" \u2014 "),XP=a("a"),iso=o("MBart50Tokenizer"),dso=o(" or "),zP=a("a"),cso=o("MBart50TokenizerFast"),fso=o(" (mBART-50 model)"),mso=l(),ms=a("li"),Kae=a("strong"),gso=o("megatron-bert"),hso=o(" \u2014 "),WP=a("a"),pso=o("BertTokenizer"),_so=o(" or "),QP=a("a"),uso=o("BertTokenizerFast"),bso=o(" (Megatron-BERT model)"),vso=l(),zg=a("li"),Zae=a("strong"),Fso=o("mluke"),Tso=o(" \u2014 "),HP=a("a"),Mso=o("MLukeTokenizer"),Eso=o(" (mLUKE model)"),Cso=l(),gs=a("li"),ene=a("strong"),wso=o("mobilebert"),Aso=o(" \u2014 "),UP=a("a"),Lso=o("MobileBertTokenizer"),yso=o(" or "),JP=a("a"),xso=o("MobileBertTokenizerFast"),$so=o(" (MobileBERT model)"),kso=l(),hs=a("li"),one=a("strong"),Sso=o("mpnet"),Rso=o(" \u2014 "),YP=a("a"),Pso=o("MPNetTokenizer"),Bso=o(" or "),KP=a("a"),Iso=o("MPNetTokenizerFast"),Nso=o(" (MPNet model)"),qso=l(),ps=a("li"),rne=a("strong"),jso=o("mt5"),Dso=o(" \u2014 "),ZP=a("a"),Gso=o("MT5Tokenizer"),Oso=o(" or "),eB=a("a"),Vso=o("MT5TokenizerFast"),Xso=o(" (MT5 model)"),zso=l(),_s=a("li"),tne=a("strong"),Wso=o("nystromformer"),Qso=o(" \u2014 "),oB=a("a"),Hso=o("AlbertTokenizer"),Uso=o(" or "),rB=a("a"),Jso=o("AlbertTokenizerFast"),Yso=o(" (Nystr\xF6mformer model)"),Kso=l(),us=a("li"),ane=a("strong"),Zso=o("openai-gpt"),elo=o(" \u2014 "),tB=a("a"),olo=o("OpenAIGPTTokenizer"),rlo=o(" or "),aB=a("a"),tlo=o("OpenAIGPTTokenizerFast"),alo=o(" (OpenAI GPT model)"),nlo=l(),Wg=a("li"),nne=a("strong"),slo=o("opt"),llo=o(" \u2014 "),nB=a("a"),ilo=o("GPT2Tokenizer"),dlo=o(" (OPT model)"),clo=l(),bs=a("li"),sne=a("strong"),flo=o("pegasus"),mlo=o(" \u2014 "),sB=a("a"),glo=o("PegasusTokenizer"),hlo=o(" or "),lB=a("a"),plo=o("PegasusTokenizerFast"),_lo=o(" (Pegasus model)"),ulo=l(),Qg=a("li"),lne=a("strong"),blo=o("perceiver"),vlo=o(" \u2014 "),iB=a("a"),Flo=o("PerceiverTokenizer"),Tlo=o(" (Perceiver model)"),Mlo=l(),Hg=a("li"),ine=a("strong"),Elo=o("phobert"),Clo=o(" \u2014 "),dB=a("a"),wlo=o("PhobertTokenizer"),Alo=o(" (PhoBERT model)"),Llo=l(),Ug=a("li"),dne=a("strong"),ylo=o("plbart"),xlo=o(" \u2014 "),cB=a("a"),$lo=o("PLBartTokenizer"),klo=o(" (PLBart model)"),Slo=l(),Jg=a("li"),cne=a("strong"),Rlo=o("prophetnet"),Plo=o(" \u2014 "),fB=a("a"),Blo=o("ProphetNetTokenizer"),Ilo=o(" (ProphetNet model)"),Nlo=l(),vs=a("li"),fne=a("strong"),qlo=o("qdqbert"),jlo=o(" \u2014 "),mB=a("a"),Dlo=o("BertTokenizer"),Glo=o(" or "),gB=a("a"),Olo=o("BertTokenizerFast"),Vlo=o(" (QDQBert model)"),Xlo=l(),Yg=a("li"),mne=a("strong"),zlo=o("rag"),Wlo=o(" \u2014 "),hB=a("a"),Qlo=o("RagTokenizer"),Hlo=o(" (RAG model)"),Ulo=l(),Fs=a("li"),gne=a("strong"),Jlo=o("realm"),Ylo=o(" \u2014 "),pB=a("a"),Klo=o("RealmTokenizer"),Zlo=o(" or "),_B=a("a"),eio=o("RealmTokenizerFast"),oio=o(" (REALM model)"),rio=l(),Ts=a("li"),hne=a("strong"),tio=o("reformer"),aio=o(" \u2014 "),uB=a("a"),nio=o("ReformerTokenizer"),sio=o(" or "),bB=a("a"),lio=o("ReformerTokenizerFast"),iio=o(" (Reformer model)"),dio=l(),Ms=a("li"),pne=a("strong"),cio=o("rembert"),fio=o(" \u2014 "),vB=a("a"),mio=o("RemBertTokenizer"),gio=o(" or "),FB=a("a"),hio=o("RemBertTokenizerFast"),pio=o(" (RemBERT model)"),_io=l(),Es=a("li"),_ne=a("strong"),uio=o("retribert"),bio=o(" \u2014 "),TB=a("a"),vio=o("RetriBertTokenizer"),Fio=o(" or "),MB=a("a"),Tio=o("RetriBertTokenizerFast"),Mio=o(" (RetriBERT model)"),Eio=l(),Cs=a("li"),une=a("strong"),Cio=o("roberta"),wio=o(" \u2014 "),EB=a("a"),Aio=o("RobertaTokenizer"),Lio=o(" or "),CB=a("a"),yio=o("RobertaTokenizerFast"),xio=o(" (RoBERTa model)"),$io=l(),ws=a("li"),bne=a("strong"),kio=o("roformer"),Sio=o(" \u2014 "),wB=a("a"),Rio=o("RoFormerTokenizer"),Pio=o(" or "),AB=a("a"),Bio=o("RoFormerTokenizerFast"),Iio=o(" (RoFormer model)"),Nio=l(),Kg=a("li"),vne=a("strong"),qio=o("speech_to_text"),jio=o(" \u2014 "),LB=a("a"),Dio=o("Speech2TextTokenizer"),Gio=o(" (Speech2Text model)"),Oio=l(),Zg=a("li"),Fne=a("strong"),Vio=o("speech_to_text_2"),Xio=o(" \u2014 "),yB=a("a"),zio=o("Speech2Text2Tokenizer"),Wio=o(" (Speech2Text2 model)"),Qio=l(),As=a("li"),Tne=a("strong"),Hio=o("splinter"),Uio=o(" \u2014 "),xB=a("a"),Jio=o("SplinterTokenizer"),Yio=o(" or "),$B=a("a"),Kio=o("SplinterTokenizerFast"),Zio=o(" (Splinter model)"),edo=l(),Ls=a("li"),Mne=a("strong"),odo=o("squeezebert"),rdo=o(" \u2014 "),kB=a("a"),tdo=o("SqueezeBertTokenizer"),ado=o(" or "),SB=a("a"),ndo=o("SqueezeBertTokenizerFast"),sdo=o(" (SqueezeBERT model)"),ldo=l(),ys=a("li"),Ene=a("strong"),ido=o("t5"),ddo=o(" \u2014 "),RB=a("a"),cdo=o("T5Tokenizer"),fdo=o(" or "),PB=a("a"),mdo=o("T5TokenizerFast"),gdo=o(" (T5 model)"),hdo=l(),eh=a("li"),Cne=a("strong"),pdo=o("tapas"),_do=o(" \u2014 "),BB=a("a"),udo=o("TapasTokenizer"),bdo=o(" (TAPAS model)"),vdo=l(),oh=a("li"),wne=a("strong"),Fdo=o("tapex"),Tdo=o(" \u2014 "),IB=a("a"),Mdo=o("TapexTokenizer"),Edo=o(" (TAPEX model)"),Cdo=l(),rh=a("li"),Ane=a("strong"),wdo=o("transfo-xl"),Ado=o(" \u2014 "),NB=a("a"),Ldo=o("TransfoXLTokenizer"),ydo=o(" (Transformer-XL model)"),xdo=l(),xs=a("li"),Lne=a("strong"),$do=o("visual_bert"),kdo=o(" \u2014 "),qB=a("a"),Sdo=o("BertTokenizer"),Rdo=o(" or "),jB=a("a"),Pdo=o("BertTokenizerFast"),Bdo=o(" (VisualBERT model)"),Ido=l(),th=a("li"),yne=a("strong"),Ndo=o("wav2vec2"),qdo=o(" \u2014 "),DB=a("a"),jdo=o("Wav2Vec2CTCTokenizer"),Ddo=o(" (Wav2Vec2 model)"),Gdo=l(),ah=a("li"),xne=a("strong"),Odo=o("wav2vec2-conformer"),Vdo=o(" \u2014 "),GB=a("a"),Xdo=o("Wav2Vec2CTCTokenizer"),zdo=o(" (Wav2Vec2-Conformer model)"),Wdo=l(),nh=a("li"),$ne=a("strong"),Qdo=o("wav2vec2_phoneme"),Hdo=o(" \u2014 "),OB=a("a"),Udo=o("Wav2Vec2PhonemeCTCTokenizer"),Jdo=o(" (Wav2Vec2Phoneme model)"),Ydo=l(),$s=a("li"),kne=a("strong"),Kdo=o("xglm"),Zdo=o(" \u2014 "),VB=a("a"),eco=o("XGLMTokenizer"),oco=o(" or "),XB=a("a"),rco=o("XGLMTokenizerFast"),tco=o(" (XGLM model)"),aco=l(),sh=a("li"),Sne=a("strong"),nco=o("xlm"),sco=o(" \u2014 "),zB=a("a"),lco=o("XLMTokenizer"),ico=o(" (XLM model)"),dco=l(),lh=a("li"),Rne=a("strong"),cco=o("xlm-prophetnet"),fco=o(" \u2014 "),WB=a("a"),mco=o("XLMProphetNetTokenizer"),gco=o(" (XLM-ProphetNet model)"),hco=l(),ks=a("li"),Pne=a("strong"),pco=o("xlm-roberta"),_co=o(" \u2014 "),QB=a("a"),uco=o("XLMRobertaTokenizer"),bco=o(" or "),HB=a("a"),vco=o("XLMRobertaTokenizerFast"),Fco=o(" (XLM-RoBERTa model)"),Tco=l(),Ss=a("li"),Bne=a("strong"),Mco=o("xlm-roberta-xl"),Eco=o(" \u2014 "),UB=a("a"),Cco=o("RobertaTokenizer"),wco=o(" or "),JB=a("a"),Aco=o("RobertaTokenizerFast"),Lco=o(" (XLM-RoBERTa-XL model)"),yco=l(),Rs=a("li"),Ine=a("strong"),xco=o("xlnet"),$co=o(" \u2014 "),YB=a("a"),kco=o("XLNetTokenizer"),Sco=o(" or "),KB=a("a"),Rco=o("XLNetTokenizerFast"),Pco=o(" (XLNet model)"),Bco=l(),Ps=a("li"),Nne=a("strong"),Ico=o("yoso"),Nco=o(" \u2014 "),ZB=a("a"),qco=o("AlbertTokenizer"),jco=o(" or "),eI=a("a"),Dco=o("AlbertTokenizerFast"),Gco=o(" (YOSO model)"),Oco=l(),F(ih.$$.fragment),Vco=l(),dh=a("div"),F(Z6.$$.fragment),Xco=l(),qne=a("p"),zco=o("Register a new tokenizer in this mapping."),lje=l(),Ci=a("h2"),ch=a("a"),jne=a("span"),F(eL.$$.fragment),Wco=l(),Dne=a("span"),Qco=o("AutoFeatureExtractor"),ije=l(),Ao=a("div"),F(oL.$$.fragment),Hco=l(),rL=a("p"),Uco=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),oI=a("a"),Jco=o("AutoFeatureExtractor.from_pretrained()"),Yco=o(" class method."),Kco=l(),tL=a("p"),Zco=o("This class cannot be instantiated directly using "),Gne=a("code"),efo=o("__init__()"),ofo=o(" (throws an error)."),rfo=l(),He=a("div"),F(aL.$$.fragment),tfo=l(),One=a("p"),afo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),nfo=l(),La=a("p"),sfo=o("The feature extractor class to instantiate is selected based on the "),Vne=a("code"),lfo=o("model_type"),ifo=o(` property of the config object
(either passed as an argument or loaded from `),Xne=a("code"),dfo=o("pretrained_model_name_or_path"),cfo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),zne=a("code"),ffo=o("pretrained_model_name_or_path"),mfo=o(":"),gfo=l(),Y=a("ul"),fh=a("li"),Wne=a("strong"),hfo=o("beit"),pfo=o(" \u2014 "),rI=a("a"),_fo=o("BeitFeatureExtractor"),ufo=o(" (BEiT model)"),bfo=l(),mh=a("li"),Qne=a("strong"),vfo=o("clip"),Ffo=o(" \u2014 "),tI=a("a"),Tfo=o("CLIPFeatureExtractor"),Mfo=o(" (CLIP model)"),Efo=l(),gh=a("li"),Hne=a("strong"),Cfo=o("convnext"),wfo=o(" \u2014 "),aI=a("a"),Afo=o("ConvNextFeatureExtractor"),Lfo=o(" (ConvNeXT model)"),yfo=l(),hh=a("li"),Une=a("strong"),xfo=o("cvt"),$fo=o(" \u2014 "),nI=a("a"),kfo=o("ConvNextFeatureExtractor"),Sfo=o(" (CvT model)"),Rfo=l(),ph=a("li"),Jne=a("strong"),Pfo=o("data2vec-audio"),Bfo=o(" \u2014 "),sI=a("a"),Ifo=o("Wav2Vec2FeatureExtractor"),Nfo=o(" (Data2VecAudio model)"),qfo=l(),_h=a("li"),Yne=a("strong"),jfo=o("data2vec-vision"),Dfo=o(" \u2014 "),lI=a("a"),Gfo=o("BeitFeatureExtractor"),Ofo=o(" (Data2VecVision model)"),Vfo=l(),uh=a("li"),Kne=a("strong"),Xfo=o("deit"),zfo=o(" \u2014 "),iI=a("a"),Wfo=o("DeiTFeatureExtractor"),Qfo=o(" (DeiT model)"),Hfo=l(),bh=a("li"),Zne=a("strong"),Ufo=o("detr"),Jfo=o(" \u2014 "),dI=a("a"),Yfo=o("DetrFeatureExtractor"),Kfo=o(" (DETR model)"),Zfo=l(),vh=a("li"),ese=a("strong"),emo=o("dpt"),omo=o(" \u2014 "),cI=a("a"),rmo=o("DPTFeatureExtractor"),tmo=o(" (DPT model)"),amo=l(),Fh=a("li"),ose=a("strong"),nmo=o("flava"),smo=o(" \u2014 "),fI=a("a"),lmo=o("FlavaFeatureExtractor"),imo=o(" (FLAVA model)"),dmo=l(),Th=a("li"),rse=a("strong"),cmo=o("glpn"),fmo=o(" \u2014 "),mI=a("a"),mmo=o("GLPNFeatureExtractor"),gmo=o(" (GLPN model)"),hmo=l(),Mh=a("li"),tse=a("strong"),pmo=o("hubert"),_mo=o(" \u2014 "),gI=a("a"),umo=o("Wav2Vec2FeatureExtractor"),bmo=o(" (Hubert model)"),vmo=l(),Eh=a("li"),ase=a("strong"),Fmo=o("imagegpt"),Tmo=o(" \u2014 "),hI=a("a"),Mmo=o("ImageGPTFeatureExtractor"),Emo=o(" (ImageGPT model)"),Cmo=l(),Ch=a("li"),nse=a("strong"),wmo=o("layoutlmv2"),Amo=o(" \u2014 "),pI=a("a"),Lmo=o("LayoutLMv2FeatureExtractor"),ymo=o(" (LayoutLMv2 model)"),xmo=l(),wh=a("li"),sse=a("strong"),$mo=o("layoutlmv3"),kmo=o(" \u2014 "),_I=a("a"),Smo=o("LayoutLMv3FeatureExtractor"),Rmo=o(" (LayoutLMv3 model)"),Pmo=l(),Ah=a("li"),lse=a("strong"),Bmo=o("levit"),Imo=o(" \u2014 "),uI=a("a"),Nmo=o("LevitFeatureExtractor"),qmo=o(" (LeViT model)"),jmo=l(),Lh=a("li"),ise=a("strong"),Dmo=o("maskformer"),Gmo=o(" \u2014 "),bI=a("a"),Omo=o("MaskFormerFeatureExtractor"),Vmo=o(" (MaskFormer model)"),Xmo=l(),yh=a("li"),dse=a("strong"),zmo=o("perceiver"),Wmo=o(" \u2014 "),vI=a("a"),Qmo=o("PerceiverFeatureExtractor"),Hmo=o(" (Perceiver model)"),Umo=l(),xh=a("li"),cse=a("strong"),Jmo=o("poolformer"),Ymo=o(" \u2014 "),FI=a("a"),Kmo=o("PoolFormerFeatureExtractor"),Zmo=o(" (PoolFormer model)"),ego=l(),$h=a("li"),fse=a("strong"),ogo=o("regnet"),rgo=o(" \u2014 "),TI=a("a"),tgo=o("ConvNextFeatureExtractor"),ago=o(" (RegNet model)"),ngo=l(),kh=a("li"),mse=a("strong"),sgo=o("resnet"),lgo=o(" \u2014 "),MI=a("a"),igo=o("ConvNextFeatureExtractor"),dgo=o(" (ResNet model)"),cgo=l(),Sh=a("li"),gse=a("strong"),fgo=o("segformer"),mgo=o(" \u2014 "),EI=a("a"),ggo=o("SegformerFeatureExtractor"),hgo=o(" (SegFormer model)"),pgo=l(),Rh=a("li"),hse=a("strong"),_go=o("speech_to_text"),ugo=o(" \u2014 "),CI=a("a"),bgo=o("Speech2TextFeatureExtractor"),vgo=o(" (Speech2Text model)"),Fgo=l(),Ph=a("li"),pse=a("strong"),Tgo=o("swin"),Mgo=o(" \u2014 "),wI=a("a"),Ego=o("ViTFeatureExtractor"),Cgo=o(" (Swin Transformer model)"),wgo=l(),Bh=a("li"),_se=a("strong"),Ago=o("van"),Lgo=o(" \u2014 "),AI=a("a"),ygo=o("ConvNextFeatureExtractor"),xgo=o(" (VAN model)"),$go=l(),Ih=a("li"),use=a("strong"),kgo=o("vit"),Sgo=o(" \u2014 "),LI=a("a"),Rgo=o("ViTFeatureExtractor"),Pgo=o(" (ViT model)"),Bgo=l(),Nh=a("li"),bse=a("strong"),Igo=o("vit_mae"),Ngo=o(" \u2014 "),yI=a("a"),qgo=o("ViTFeatureExtractor"),jgo=o(" (ViTMAE model)"),Dgo=l(),qh=a("li"),vse=a("strong"),Ggo=o("wav2vec2"),Ogo=o(" \u2014 "),xI=a("a"),Vgo=o("Wav2Vec2FeatureExtractor"),Xgo=o(" (Wav2Vec2 model)"),zgo=l(),jh=a("li"),Fse=a("strong"),Wgo=o("wav2vec2-conformer"),Qgo=o(" \u2014 "),$I=a("a"),Hgo=o("Wav2Vec2FeatureExtractor"),Ugo=o(" (Wav2Vec2-Conformer model)"),Jgo=l(),Dh=a("li"),Tse=a("strong"),Ygo=o("yolos"),Kgo=o(" \u2014 "),kI=a("a"),Zgo=o("YolosFeatureExtractor"),eho=o(" (YOLOS model)"),oho=l(),F(Gh.$$.fragment),rho=l(),F(Oh.$$.fragment),tho=l(),Vh=a("div"),F(nL.$$.fragment),aho=l(),Mse=a("p"),nho=o("Register a new feature extractor for this class."),dje=l(),wi=a("h2"),Xh=a("a"),Ese=a("span"),F(sL.$$.fragment),sho=l(),Cse=a("span"),lho=o("AutoProcessor"),cje=l(),Lo=a("div"),F(lL.$$.fragment),iho=l(),iL=a("p"),dho=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),SI=a("a"),cho=o("AutoProcessor.from_pretrained()"),fho=o(" class method."),mho=l(),dL=a("p"),gho=o("This class cannot be instantiated directly using "),wse=a("code"),hho=o("__init__()"),pho=o(" (throws an error)."),_ho=l(),Ue=a("div"),F(cL.$$.fragment),uho=l(),Ase=a("p"),bho=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),vho=l(),Ai=a("p"),Fho=o("The processor class to instantiate is selected based on the "),Lse=a("code"),Tho=o("model_type"),Mho=o(` property of the config object (either
passed as an argument or loaded from `),yse=a("code"),Eho=o("pretrained_model_name_or_path"),Cho=o(" if possible):"),who=l(),he=a("ul"),zh=a("li"),xse=a("strong"),Aho=o("clip"),Lho=o(" \u2014 "),RI=a("a"),yho=o("CLIPProcessor"),xho=o(" (CLIP model)"),$ho=l(),Wh=a("li"),$se=a("strong"),kho=o("flava"),Sho=o(" \u2014 "),kse=a("code"),Rho=o("FLAVAProcessor"),Pho=o(" (FLAVA model)"),Bho=l(),Qh=a("li"),Sse=a("strong"),Iho=o("layoutlmv2"),Nho=o(" \u2014 "),PI=a("a"),qho=o("LayoutLMv2Processor"),jho=o(" (LayoutLMv2 model)"),Dho=l(),Hh=a("li"),Rse=a("strong"),Gho=o("layoutlmv3"),Oho=o(" \u2014 "),BI=a("a"),Vho=o("LayoutLMv3Processor"),Xho=o(" (LayoutLMv3 model)"),zho=l(),Uh=a("li"),Pse=a("strong"),Who=o("layoutxlm"),Qho=o(" \u2014 "),II=a("a"),Hho=o("LayoutXLMProcessor"),Uho=o(" (LayoutXLM model)"),Jho=l(),Jh=a("li"),Bse=a("strong"),Yho=o("sew"),Kho=o(" \u2014 "),NI=a("a"),Zho=o("Wav2Vec2Processor"),epo=o(" (SEW model)"),opo=l(),Yh=a("li"),Ise=a("strong"),rpo=o("sew-d"),tpo=o(" \u2014 "),qI=a("a"),apo=o("Wav2Vec2Processor"),npo=o(" (SEW-D model)"),spo=l(),Kh=a("li"),Nse=a("strong"),lpo=o("speech_to_text"),ipo=o(" \u2014 "),jI=a("a"),dpo=o("Speech2TextProcessor"),cpo=o(" (Speech2Text model)"),fpo=l(),Zh=a("li"),qse=a("strong"),mpo=o("speech_to_text_2"),gpo=o(" \u2014 "),DI=a("a"),hpo=o("Speech2Text2Processor"),ppo=o(" (Speech2Text2 model)"),_po=l(),ep=a("li"),jse=a("strong"),upo=o("trocr"),bpo=o(" \u2014 "),GI=a("a"),vpo=o("TrOCRProcessor"),Fpo=o(" (TrOCR model)"),Tpo=l(),op=a("li"),Dse=a("strong"),Mpo=o("unispeech"),Epo=o(" \u2014 "),OI=a("a"),Cpo=o("Wav2Vec2Processor"),wpo=o(" (UniSpeech model)"),Apo=l(),rp=a("li"),Gse=a("strong"),Lpo=o("unispeech-sat"),ypo=o(" \u2014 "),VI=a("a"),xpo=o("Wav2Vec2Processor"),$po=o(" (UniSpeechSat model)"),kpo=l(),tp=a("li"),Ose=a("strong"),Spo=o("vilt"),Rpo=o(" \u2014 "),XI=a("a"),Ppo=o("ViltProcessor"),Bpo=o(" (ViLT model)"),Ipo=l(),ap=a("li"),Vse=a("strong"),Npo=o("vision-text-dual-encoder"),qpo=o(" \u2014 "),zI=a("a"),jpo=o("VisionTextDualEncoderProcessor"),Dpo=o(" (VisionTextDualEncoder model)"),Gpo=l(),np=a("li"),Xse=a("strong"),Opo=o("wav2vec2"),Vpo=o(" \u2014 "),WI=a("a"),Xpo=o("Wav2Vec2Processor"),zpo=o(" (Wav2Vec2 model)"),Wpo=l(),sp=a("li"),zse=a("strong"),Qpo=o("wav2vec2-conformer"),Hpo=o(" \u2014 "),QI=a("a"),Upo=o("Wav2Vec2Processor"),Jpo=o(" (Wav2Vec2-Conformer model)"),Ypo=l(),lp=a("li"),Wse=a("strong"),Kpo=o("wavlm"),Zpo=o(" \u2014 "),HI=a("a"),e_o=o("Wav2Vec2Processor"),o_o=o(" (WavLM model)"),r_o=l(),F(ip.$$.fragment),t_o=l(),F(dp.$$.fragment),a_o=l(),cp=a("div"),F(fL.$$.fragment),n_o=l(),Qse=a("p"),s_o=o("Register a new processor for this class."),fje=l(),Li=a("h2"),fp=a("a"),Hse=a("span"),F(mL.$$.fragment),l_o=l(),Use=a("span"),i_o=o("AutoModel"),mje=l(),yo=a("div"),F(gL.$$.fragment),d_o=l(),yi=a("p"),c_o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UI=a("a"),f_o=o("from_pretrained()"),m_o=o(" class method or the "),JI=a("a"),g_o=o("from_config()"),h_o=o(` class
method.`),p_o=l(),hL=a("p"),__o=o("This class cannot be instantiated directly using "),Jse=a("code"),u_o=o("__init__()"),b_o=o(" (throws an error)."),v_o=l(),tt=a("div"),F(pL.$$.fragment),F_o=l(),Yse=a("p"),T_o=o("Instantiates one of the base model classes of the library from a configuration."),M_o=l(),xi=a("p"),E_o=o(`Note:
Loading a model from its configuration file does `),Kse=a("strong"),C_o=o("not"),w_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YI=a("a"),A_o=o("from_pretrained()"),L_o=o(" to load the model weights."),y_o=l(),F(mp.$$.fragment),x_o=l(),Je=a("div"),F(_L.$$.fragment),$_o=l(),Zse=a("p"),k_o=o("Instantiate one of the base model classes of the library from a pretrained model."),S_o=l(),ya=a("p"),R_o=o("The model class to instantiate is selected based on the "),ele=a("code"),P_o=o("model_type"),B_o=o(` property of the config object (either
passed as an argument or loaded from `),ole=a("code"),I_o=o("pretrained_model_name_or_path"),N_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rle=a("code"),q_o=o("pretrained_model_name_or_path"),j_o=o(":"),D_o=l(),x=a("ul"),gp=a("li"),tle=a("strong"),G_o=o("albert"),O_o=o(" \u2014 "),KI=a("a"),V_o=o("AlbertModel"),X_o=o(" (ALBERT model)"),z_o=l(),hp=a("li"),ale=a("strong"),W_o=o("bart"),Q_o=o(" \u2014 "),ZI=a("a"),H_o=o("BartModel"),U_o=o(" (BART model)"),J_o=l(),pp=a("li"),nle=a("strong"),Y_o=o("beit"),K_o=o(" \u2014 "),eN=a("a"),Z_o=o("BeitModel"),euo=o(" (BEiT model)"),ouo=l(),_p=a("li"),sle=a("strong"),ruo=o("bert"),tuo=o(" \u2014 "),oN=a("a"),auo=o("BertModel"),nuo=o(" (BERT model)"),suo=l(),up=a("li"),lle=a("strong"),luo=o("bert-generation"),iuo=o(" \u2014 "),rN=a("a"),duo=o("BertGenerationEncoder"),cuo=o(" (Bert Generation model)"),fuo=l(),bp=a("li"),ile=a("strong"),muo=o("big_bird"),guo=o(" \u2014 "),tN=a("a"),huo=o("BigBirdModel"),puo=o(" (BigBird model)"),_uo=l(),vp=a("li"),dle=a("strong"),uuo=o("bigbird_pegasus"),buo=o(" \u2014 "),aN=a("a"),vuo=o("BigBirdPegasusModel"),Fuo=o(" (BigBird-Pegasus model)"),Tuo=l(),Fp=a("li"),cle=a("strong"),Muo=o("blenderbot"),Euo=o(" \u2014 "),nN=a("a"),Cuo=o("BlenderbotModel"),wuo=o(" (Blenderbot model)"),Auo=l(),Tp=a("li"),fle=a("strong"),Luo=o("blenderbot-small"),yuo=o(" \u2014 "),sN=a("a"),xuo=o("BlenderbotSmallModel"),$uo=o(" (BlenderbotSmall model)"),kuo=l(),Mp=a("li"),mle=a("strong"),Suo=o("camembert"),Ruo=o(" \u2014 "),lN=a("a"),Puo=o("CamembertModel"),Buo=o(" (CamemBERT model)"),Iuo=l(),Ep=a("li"),gle=a("strong"),Nuo=o("canine"),quo=o(" \u2014 "),iN=a("a"),juo=o("CanineModel"),Duo=o(" (CANINE model)"),Guo=l(),Cp=a("li"),hle=a("strong"),Ouo=o("clip"),Vuo=o(" \u2014 "),dN=a("a"),Xuo=o("CLIPModel"),zuo=o(" (CLIP model)"),Wuo=l(),wp=a("li"),ple=a("strong"),Quo=o("codegen"),Huo=o(" \u2014 "),cN=a("a"),Uuo=o("CodeGenModel"),Juo=o(" (CodeGen model)"),Yuo=l(),Ap=a("li"),_le=a("strong"),Kuo=o("convbert"),Zuo=o(" \u2014 "),fN=a("a"),e4o=o("ConvBertModel"),o4o=o(" (ConvBERT model)"),r4o=l(),Lp=a("li"),ule=a("strong"),t4o=o("convnext"),a4o=o(" \u2014 "),mN=a("a"),n4o=o("ConvNextModel"),s4o=o(" (ConvNeXT model)"),l4o=l(),yp=a("li"),ble=a("strong"),i4o=o("ctrl"),d4o=o(" \u2014 "),gN=a("a"),c4o=o("CTRLModel"),f4o=o(" (CTRL model)"),m4o=l(),xp=a("li"),vle=a("strong"),g4o=o("cvt"),h4o=o(" \u2014 "),hN=a("a"),p4o=o("CvtModel"),_4o=o(" (CvT model)"),u4o=l(),$p=a("li"),Fle=a("strong"),b4o=o("data2vec-audio"),v4o=o(" \u2014 "),pN=a("a"),F4o=o("Data2VecAudioModel"),T4o=o(" (Data2VecAudio model)"),M4o=l(),kp=a("li"),Tle=a("strong"),E4o=o("data2vec-text"),C4o=o(" \u2014 "),_N=a("a"),w4o=o("Data2VecTextModel"),A4o=o(" (Data2VecText model)"),L4o=l(),Sp=a("li"),Mle=a("strong"),y4o=o("data2vec-vision"),x4o=o(" \u2014 "),uN=a("a"),$4o=o("Data2VecVisionModel"),k4o=o(" (Data2VecVision model)"),S4o=l(),Rp=a("li"),Ele=a("strong"),R4o=o("deberta"),P4o=o(" \u2014 "),bN=a("a"),B4o=o("DebertaModel"),I4o=o(" (DeBERTa model)"),N4o=l(),Pp=a("li"),Cle=a("strong"),q4o=o("deberta-v2"),j4o=o(" \u2014 "),vN=a("a"),D4o=o("DebertaV2Model"),G4o=o(" (DeBERTa-v2 model)"),O4o=l(),Bp=a("li"),wle=a("strong"),V4o=o("decision_transformer"),X4o=o(" \u2014 "),FN=a("a"),z4o=o("DecisionTransformerModel"),W4o=o(" (Decision Transformer model)"),Q4o=l(),Ip=a("li"),Ale=a("strong"),H4o=o("deit"),U4o=o(" \u2014 "),TN=a("a"),J4o=o("DeiTModel"),Y4o=o(" (DeiT model)"),K4o=l(),Np=a("li"),Lle=a("strong"),Z4o=o("detr"),e1o=o(" \u2014 "),MN=a("a"),o1o=o("DetrModel"),r1o=o(" (DETR model)"),t1o=l(),qp=a("li"),yle=a("strong"),a1o=o("distilbert"),n1o=o(" \u2014 "),EN=a("a"),s1o=o("DistilBertModel"),l1o=o(" (DistilBERT model)"),i1o=l(),jp=a("li"),xle=a("strong"),d1o=o("dpr"),c1o=o(" \u2014 "),CN=a("a"),f1o=o("DPRQuestionEncoder"),m1o=o(" (DPR model)"),g1o=l(),Dp=a("li"),$le=a("strong"),h1o=o("dpt"),p1o=o(" \u2014 "),wN=a("a"),_1o=o("DPTModel"),u1o=o(" (DPT model)"),b1o=l(),Gp=a("li"),kle=a("strong"),v1o=o("electra"),F1o=o(" \u2014 "),AN=a("a"),T1o=o("ElectraModel"),M1o=o(" (ELECTRA model)"),E1o=l(),Op=a("li"),Sle=a("strong"),C1o=o("flaubert"),w1o=o(" \u2014 "),LN=a("a"),A1o=o("FlaubertModel"),L1o=o(" (FlauBERT model)"),y1o=l(),Vp=a("li"),Rle=a("strong"),x1o=o("flava"),$1o=o(" \u2014 "),yN=a("a"),k1o=o("FlavaModel"),S1o=o(" (FLAVA model)"),R1o=l(),Xp=a("li"),Ple=a("strong"),P1o=o("fnet"),B1o=o(" \u2014 "),xN=a("a"),I1o=o("FNetModel"),N1o=o(" (FNet model)"),q1o=l(),zp=a("li"),Ble=a("strong"),j1o=o("fsmt"),D1o=o(" \u2014 "),$N=a("a"),G1o=o("FSMTModel"),O1o=o(" (FairSeq Machine-Translation model)"),V1o=l(),Bs=a("li"),Ile=a("strong"),X1o=o("funnel"),z1o=o(" \u2014 "),kN=a("a"),W1o=o("FunnelModel"),Q1o=o(" or "),SN=a("a"),H1o=o("FunnelBaseModel"),U1o=o(" (Funnel Transformer model)"),J1o=l(),Wp=a("li"),Nle=a("strong"),Y1o=o("glpn"),K1o=o(" \u2014 "),RN=a("a"),Z1o=o("GLPNModel"),ebo=o(" (GLPN model)"),obo=l(),Qp=a("li"),qle=a("strong"),rbo=o("gpt2"),tbo=o(" \u2014 "),PN=a("a"),abo=o("GPT2Model"),nbo=o(" (OpenAI GPT-2 model)"),sbo=l(),Hp=a("li"),jle=a("strong"),lbo=o("gpt_neo"),ibo=o(" \u2014 "),BN=a("a"),dbo=o("GPTNeoModel"),cbo=o(" (GPT Neo model)"),fbo=l(),Up=a("li"),Dle=a("strong"),mbo=o("gpt_neox"),gbo=o(" \u2014 "),IN=a("a"),hbo=o("GPTNeoXModel"),pbo=o(" (GPT NeoX model)"),_bo=l(),Jp=a("li"),Gle=a("strong"),ubo=o("gptj"),bbo=o(" \u2014 "),NN=a("a"),vbo=o("GPTJModel"),Fbo=o(" (GPT-J model)"),Tbo=l(),Yp=a("li"),Ole=a("strong"),Mbo=o("hubert"),Ebo=o(" \u2014 "),qN=a("a"),Cbo=o("HubertModel"),wbo=o(" (Hubert model)"),Abo=l(),Kp=a("li"),Vle=a("strong"),Lbo=o("ibert"),ybo=o(" \u2014 "),jN=a("a"),xbo=o("IBertModel"),$bo=o(" (I-BERT model)"),kbo=l(),Zp=a("li"),Xle=a("strong"),Sbo=o("imagegpt"),Rbo=o(" \u2014 "),DN=a("a"),Pbo=o("ImageGPTModel"),Bbo=o(" (ImageGPT model)"),Ibo=l(),e_=a("li"),zle=a("strong"),Nbo=o("layoutlm"),qbo=o(" \u2014 "),GN=a("a"),jbo=o("LayoutLMModel"),Dbo=o(" (LayoutLM model)"),Gbo=l(),o_=a("li"),Wle=a("strong"),Obo=o("layoutlmv2"),Vbo=o(" \u2014 "),ON=a("a"),Xbo=o("LayoutLMv2Model"),zbo=o(" (LayoutLMv2 model)"),Wbo=l(),r_=a("li"),Qle=a("strong"),Qbo=o("layoutlmv3"),Hbo=o(" \u2014 "),VN=a("a"),Ubo=o("LayoutLMv3Model"),Jbo=o(" (LayoutLMv3 model)"),Ybo=l(),t_=a("li"),Hle=a("strong"),Kbo=o("led"),Zbo=o(" \u2014 "),XN=a("a"),e2o=o("LEDModel"),o2o=o(" (LED model)"),r2o=l(),a_=a("li"),Ule=a("strong"),t2o=o("levit"),a2o=o(" \u2014 "),zN=a("a"),n2o=o("LevitModel"),s2o=o(" (LeViT model)"),l2o=l(),n_=a("li"),Jle=a("strong"),i2o=o("longformer"),d2o=o(" \u2014 "),WN=a("a"),c2o=o("LongformerModel"),f2o=o(" (Longformer model)"),m2o=l(),s_=a("li"),Yle=a("strong"),g2o=o("luke"),h2o=o(" \u2014 "),QN=a("a"),p2o=o("LukeModel"),_2o=o(" (LUKE model)"),u2o=l(),l_=a("li"),Kle=a("strong"),b2o=o("lxmert"),v2o=o(" \u2014 "),HN=a("a"),F2o=o("LxmertModel"),T2o=o(" (LXMERT model)"),M2o=l(),i_=a("li"),Zle=a("strong"),E2o=o("m2m_100"),C2o=o(" \u2014 "),UN=a("a"),w2o=o("M2M100Model"),A2o=o(" (M2M100 model)"),L2o=l(),d_=a("li"),eie=a("strong"),y2o=o("marian"),x2o=o(" \u2014 "),JN=a("a"),$2o=o("MarianModel"),k2o=o(" (Marian model)"),S2o=l(),c_=a("li"),oie=a("strong"),R2o=o("maskformer"),P2o=o(" \u2014 "),YN=a("a"),B2o=o("MaskFormerModel"),I2o=o(" (MaskFormer model)"),N2o=l(),f_=a("li"),rie=a("strong"),q2o=o("mbart"),j2o=o(" \u2014 "),KN=a("a"),D2o=o("MBartModel"),G2o=o(" (mBART model)"),O2o=l(),m_=a("li"),tie=a("strong"),V2o=o("megatron-bert"),X2o=o(" \u2014 "),ZN=a("a"),z2o=o("MegatronBertModel"),W2o=o(" (Megatron-BERT model)"),Q2o=l(),g_=a("li"),aie=a("strong"),H2o=o("mobilebert"),U2o=o(" \u2014 "),eq=a("a"),J2o=o("MobileBertModel"),Y2o=o(" (MobileBERT model)"),K2o=l(),h_=a("li"),nie=a("strong"),Z2o=o("mpnet"),evo=o(" \u2014 "),oq=a("a"),ovo=o("MPNetModel"),rvo=o(" (MPNet model)"),tvo=l(),p_=a("li"),sie=a("strong"),avo=o("mt5"),nvo=o(" \u2014 "),rq=a("a"),svo=o("MT5Model"),lvo=o(" (MT5 model)"),ivo=l(),__=a("li"),lie=a("strong"),dvo=o("nystromformer"),cvo=o(" \u2014 "),tq=a("a"),fvo=o("NystromformerModel"),mvo=o(" (Nystr\xF6mformer model)"),gvo=l(),u_=a("li"),iie=a("strong"),hvo=o("openai-gpt"),pvo=o(" \u2014 "),aq=a("a"),_vo=o("OpenAIGPTModel"),uvo=o(" (OpenAI GPT model)"),bvo=l(),b_=a("li"),die=a("strong"),vvo=o("opt"),Fvo=o(" \u2014 "),nq=a("a"),Tvo=o("OPTModel"),Mvo=o(" (OPT model)"),Evo=l(),v_=a("li"),cie=a("strong"),Cvo=o("pegasus"),wvo=o(" \u2014 "),sq=a("a"),Avo=o("PegasusModel"),Lvo=o(" (Pegasus model)"),yvo=l(),F_=a("li"),fie=a("strong"),xvo=o("perceiver"),$vo=o(" \u2014 "),lq=a("a"),kvo=o("PerceiverModel"),Svo=o(" (Perceiver model)"),Rvo=l(),T_=a("li"),mie=a("strong"),Pvo=o("plbart"),Bvo=o(" \u2014 "),iq=a("a"),Ivo=o("PLBartModel"),Nvo=o(" (PLBart model)"),qvo=l(),M_=a("li"),gie=a("strong"),jvo=o("poolformer"),Dvo=o(" \u2014 "),dq=a("a"),Gvo=o("PoolFormerModel"),Ovo=o(" (PoolFormer model)"),Vvo=l(),E_=a("li"),hie=a("strong"),Xvo=o("prophetnet"),zvo=o(" \u2014 "),cq=a("a"),Wvo=o("ProphetNetModel"),Qvo=o(" (ProphetNet model)"),Hvo=l(),C_=a("li"),pie=a("strong"),Uvo=o("qdqbert"),Jvo=o(" \u2014 "),fq=a("a"),Yvo=o("QDQBertModel"),Kvo=o(" (QDQBert model)"),Zvo=l(),w_=a("li"),_ie=a("strong"),e3o=o("reformer"),o3o=o(" \u2014 "),mq=a("a"),r3o=o("ReformerModel"),t3o=o(" (Reformer model)"),a3o=l(),A_=a("li"),uie=a("strong"),n3o=o("regnet"),s3o=o(" \u2014 "),gq=a("a"),l3o=o("RegNetModel"),i3o=o(" (RegNet model)"),d3o=l(),L_=a("li"),bie=a("strong"),c3o=o("rembert"),f3o=o(" \u2014 "),hq=a("a"),m3o=o("RemBertModel"),g3o=o(" (RemBERT model)"),h3o=l(),y_=a("li"),vie=a("strong"),p3o=o("resnet"),_3o=o(" \u2014 "),pq=a("a"),u3o=o("ResNetModel"),b3o=o(" (ResNet model)"),v3o=l(),x_=a("li"),Fie=a("strong"),F3o=o("retribert"),T3o=o(" \u2014 "),_q=a("a"),M3o=o("RetriBertModel"),E3o=o(" (RetriBERT model)"),C3o=l(),$_=a("li"),Tie=a("strong"),w3o=o("roberta"),A3o=o(" \u2014 "),uq=a("a"),L3o=o("RobertaModel"),y3o=o(" (RoBERTa model)"),x3o=l(),k_=a("li"),Mie=a("strong"),$3o=o("roformer"),k3o=o(" \u2014 "),bq=a("a"),S3o=o("RoFormerModel"),R3o=o(" (RoFormer model)"),P3o=l(),S_=a("li"),Eie=a("strong"),B3o=o("segformer"),I3o=o(" \u2014 "),vq=a("a"),N3o=o("SegformerModel"),q3o=o(" (SegFormer model)"),j3o=l(),R_=a("li"),Cie=a("strong"),D3o=o("sew"),G3o=o(" \u2014 "),Fq=a("a"),O3o=o("SEWModel"),V3o=o(" (SEW model)"),X3o=l(),P_=a("li"),wie=a("strong"),z3o=o("sew-d"),W3o=o(" \u2014 "),Tq=a("a"),Q3o=o("SEWDModel"),H3o=o(" (SEW-D model)"),U3o=l(),B_=a("li"),Aie=a("strong"),J3o=o("speech_to_text"),Y3o=o(" \u2014 "),Mq=a("a"),K3o=o("Speech2TextModel"),Z3o=o(" (Speech2Text model)"),eFo=l(),I_=a("li"),Lie=a("strong"),oFo=o("splinter"),rFo=o(" \u2014 "),Eq=a("a"),tFo=o("SplinterModel"),aFo=o(" (Splinter model)"),nFo=l(),N_=a("li"),yie=a("strong"),sFo=o("squeezebert"),lFo=o(" \u2014 "),Cq=a("a"),iFo=o("SqueezeBertModel"),dFo=o(" (SqueezeBERT model)"),cFo=l(),q_=a("li"),xie=a("strong"),fFo=o("swin"),mFo=o(" \u2014 "),wq=a("a"),gFo=o("SwinModel"),hFo=o(" (Swin Transformer model)"),pFo=l(),j_=a("li"),$ie=a("strong"),_Fo=o("t5"),uFo=o(" \u2014 "),Aq=a("a"),bFo=o("T5Model"),vFo=o(" (T5 model)"),FFo=l(),D_=a("li"),kie=a("strong"),TFo=o("tapas"),MFo=o(" \u2014 "),Lq=a("a"),EFo=o("TapasModel"),CFo=o(" (TAPAS model)"),wFo=l(),G_=a("li"),Sie=a("strong"),AFo=o("trajectory_transformer"),LFo=o(" \u2014 "),yq=a("a"),yFo=o("TrajectoryTransformerModel"),xFo=o(" (Trajectory Transformer model)"),$Fo=l(),O_=a("li"),Rie=a("strong"),kFo=o("transfo-xl"),SFo=o(" \u2014 "),xq=a("a"),RFo=o("TransfoXLModel"),PFo=o(" (Transformer-XL model)"),BFo=l(),V_=a("li"),Pie=a("strong"),IFo=o("unispeech"),NFo=o(" \u2014 "),$q=a("a"),qFo=o("UniSpeechModel"),jFo=o(" (UniSpeech model)"),DFo=l(),X_=a("li"),Bie=a("strong"),GFo=o("unispeech-sat"),OFo=o(" \u2014 "),kq=a("a"),VFo=o("UniSpeechSatModel"),XFo=o(" (UniSpeechSat model)"),zFo=l(),z_=a("li"),Iie=a("strong"),WFo=o("van"),QFo=o(" \u2014 "),Sq=a("a"),HFo=o("VanModel"),UFo=o(" (VAN model)"),JFo=l(),W_=a("li"),Nie=a("strong"),YFo=o("vilt"),KFo=o(" \u2014 "),Rq=a("a"),ZFo=o("ViltModel"),eTo=o(" (ViLT model)"),oTo=l(),Q_=a("li"),qie=a("strong"),rTo=o("vision-text-dual-encoder"),tTo=o(" \u2014 "),Pq=a("a"),aTo=o("VisionTextDualEncoderModel"),nTo=o(" (VisionTextDualEncoder model)"),sTo=l(),H_=a("li"),jie=a("strong"),lTo=o("visual_bert"),iTo=o(" \u2014 "),Bq=a("a"),dTo=o("VisualBertModel"),cTo=o(" (VisualBERT model)"),fTo=l(),U_=a("li"),Die=a("strong"),mTo=o("vit"),gTo=o(" \u2014 "),Iq=a("a"),hTo=o("ViTModel"),pTo=o(" (ViT model)"),_To=l(),J_=a("li"),Gie=a("strong"),uTo=o("vit_mae"),bTo=o(" \u2014 "),Nq=a("a"),vTo=o("ViTMAEModel"),FTo=o(" (ViTMAE model)"),TTo=l(),Y_=a("li"),Oie=a("strong"),MTo=o("wav2vec2"),ETo=o(" \u2014 "),qq=a("a"),CTo=o("Wav2Vec2Model"),wTo=o(" (Wav2Vec2 model)"),ATo=l(),K_=a("li"),Vie=a("strong"),LTo=o("wav2vec2-conformer"),yTo=o(" \u2014 "),jq=a("a"),xTo=o("Wav2Vec2ConformerModel"),$To=o(" (Wav2Vec2-Conformer model)"),kTo=l(),Z_=a("li"),Xie=a("strong"),STo=o("wavlm"),RTo=o(" \u2014 "),Dq=a("a"),PTo=o("WavLMModel"),BTo=o(" (WavLM model)"),ITo=l(),eu=a("li"),zie=a("strong"),NTo=o("xglm"),qTo=o(" \u2014 "),Gq=a("a"),jTo=o("XGLMModel"),DTo=o(" (XGLM model)"),GTo=l(),ou=a("li"),Wie=a("strong"),OTo=o("xlm"),VTo=o(" \u2014 "),Oq=a("a"),XTo=o("XLMModel"),zTo=o(" (XLM model)"),WTo=l(),ru=a("li"),Qie=a("strong"),QTo=o("xlm-prophetnet"),HTo=o(" \u2014 "),Vq=a("a"),UTo=o("XLMProphetNetModel"),JTo=o(" (XLM-ProphetNet model)"),YTo=l(),tu=a("li"),Hie=a("strong"),KTo=o("xlm-roberta"),ZTo=o(" \u2014 "),Xq=a("a"),e7o=o("XLMRobertaModel"),o7o=o(" (XLM-RoBERTa model)"),r7o=l(),au=a("li"),Uie=a("strong"),t7o=o("xlm-roberta-xl"),a7o=o(" \u2014 "),zq=a("a"),n7o=o("XLMRobertaXLModel"),s7o=o(" (XLM-RoBERTa-XL model)"),l7o=l(),nu=a("li"),Jie=a("strong"),i7o=o("xlnet"),d7o=o(" \u2014 "),Wq=a("a"),c7o=o("XLNetModel"),f7o=o(" (XLNet model)"),m7o=l(),su=a("li"),Yie=a("strong"),g7o=o("yolos"),h7o=o(" \u2014 "),Qq=a("a"),p7o=o("YolosModel"),_7o=o(" (YOLOS model)"),u7o=l(),lu=a("li"),Kie=a("strong"),b7o=o("yoso"),v7o=o(" \u2014 "),Hq=a("a"),F7o=o("YosoModel"),T7o=o(" (YOSO model)"),M7o=l(),iu=a("p"),E7o=o("The model is set in evaluation mode by default using "),Zie=a("code"),C7o=o("model.eval()"),w7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ede=a("code"),A7o=o("model.train()"),L7o=l(),F(du.$$.fragment),gje=l(),$i=a("h2"),cu=a("a"),ode=a("span"),F(uL.$$.fragment),y7o=l(),rde=a("span"),x7o=o("AutoModelForPreTraining"),hje=l(),xo=a("div"),F(bL.$$.fragment),$7o=l(),ki=a("p"),k7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Uq=a("a"),S7o=o("from_pretrained()"),R7o=o(" class method or the "),Jq=a("a"),P7o=o("from_config()"),B7o=o(` class
method.`),I7o=l(),vL=a("p"),N7o=o("This class cannot be instantiated directly using "),tde=a("code"),q7o=o("__init__()"),j7o=o(" (throws an error)."),D7o=l(),at=a("div"),F(FL.$$.fragment),G7o=l(),ade=a("p"),O7o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),V7o=l(),Si=a("p"),X7o=o(`Note:
Loading a model from its configuration file does `),nde=a("strong"),z7o=o("not"),W7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yq=a("a"),Q7o=o("from_pretrained()"),H7o=o(" to load the model weights."),U7o=l(),F(fu.$$.fragment),J7o=l(),Ye=a("div"),F(TL.$$.fragment),Y7o=l(),sde=a("p"),K7o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Z7o=l(),xa=a("p"),eMo=o("The model class to instantiate is selected based on the "),lde=a("code"),oMo=o("model_type"),rMo=o(` property of the config object (either
passed as an argument or loaded from `),ide=a("code"),tMo=o("pretrained_model_name_or_path"),aMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dde=a("code"),nMo=o("pretrained_model_name_or_path"),sMo=o(":"),lMo=l(),G=a("ul"),mu=a("li"),cde=a("strong"),iMo=o("albert"),dMo=o(" \u2014 "),Kq=a("a"),cMo=o("AlbertForPreTraining"),fMo=o(" (ALBERT model)"),mMo=l(),gu=a("li"),fde=a("strong"),gMo=o("bart"),hMo=o(" \u2014 "),Zq=a("a"),pMo=o("BartForConditionalGeneration"),_Mo=o(" (BART model)"),uMo=l(),hu=a("li"),mde=a("strong"),bMo=o("bert"),vMo=o(" \u2014 "),ej=a("a"),FMo=o("BertForPreTraining"),TMo=o(" (BERT model)"),MMo=l(),pu=a("li"),gde=a("strong"),EMo=o("big_bird"),CMo=o(" \u2014 "),oj=a("a"),wMo=o("BigBirdForPreTraining"),AMo=o(" (BigBird model)"),LMo=l(),_u=a("li"),hde=a("strong"),yMo=o("camembert"),xMo=o(" \u2014 "),rj=a("a"),$Mo=o("CamembertForMaskedLM"),kMo=o(" (CamemBERT model)"),SMo=l(),uu=a("li"),pde=a("strong"),RMo=o("ctrl"),PMo=o(" \u2014 "),tj=a("a"),BMo=o("CTRLLMHeadModel"),IMo=o(" (CTRL model)"),NMo=l(),bu=a("li"),_de=a("strong"),qMo=o("data2vec-text"),jMo=o(" \u2014 "),aj=a("a"),DMo=o("Data2VecTextForMaskedLM"),GMo=o(" (Data2VecText model)"),OMo=l(),vu=a("li"),ude=a("strong"),VMo=o("deberta"),XMo=o(" \u2014 "),nj=a("a"),zMo=o("DebertaForMaskedLM"),WMo=o(" (DeBERTa model)"),QMo=l(),Fu=a("li"),bde=a("strong"),HMo=o("deberta-v2"),UMo=o(" \u2014 "),sj=a("a"),JMo=o("DebertaV2ForMaskedLM"),YMo=o(" (DeBERTa-v2 model)"),KMo=l(),Tu=a("li"),vde=a("strong"),ZMo=o("distilbert"),eEo=o(" \u2014 "),lj=a("a"),oEo=o("DistilBertForMaskedLM"),rEo=o(" (DistilBERT model)"),tEo=l(),Mu=a("li"),Fde=a("strong"),aEo=o("electra"),nEo=o(" \u2014 "),ij=a("a"),sEo=o("ElectraForPreTraining"),lEo=o(" (ELECTRA model)"),iEo=l(),Eu=a("li"),Tde=a("strong"),dEo=o("flaubert"),cEo=o(" \u2014 "),dj=a("a"),fEo=o("FlaubertWithLMHeadModel"),mEo=o(" (FlauBERT model)"),gEo=l(),Cu=a("li"),Mde=a("strong"),hEo=o("flava"),pEo=o(" \u2014 "),cj=a("a"),_Eo=o("FlavaForPreTraining"),uEo=o(" (FLAVA model)"),bEo=l(),wu=a("li"),Ede=a("strong"),vEo=o("fnet"),FEo=o(" \u2014 "),fj=a("a"),TEo=o("FNetForPreTraining"),MEo=o(" (FNet model)"),EEo=l(),Au=a("li"),Cde=a("strong"),CEo=o("fsmt"),wEo=o(" \u2014 "),mj=a("a"),AEo=o("FSMTForConditionalGeneration"),LEo=o(" (FairSeq Machine-Translation model)"),yEo=l(),Lu=a("li"),wde=a("strong"),xEo=o("funnel"),$Eo=o(" \u2014 "),gj=a("a"),kEo=o("FunnelForPreTraining"),SEo=o(" (Funnel Transformer model)"),REo=l(),yu=a("li"),Ade=a("strong"),PEo=o("gpt2"),BEo=o(" \u2014 "),hj=a("a"),IEo=o("GPT2LMHeadModel"),NEo=o(" (OpenAI GPT-2 model)"),qEo=l(),xu=a("li"),Lde=a("strong"),jEo=o("ibert"),DEo=o(" \u2014 "),pj=a("a"),GEo=o("IBertForMaskedLM"),OEo=o(" (I-BERT model)"),VEo=l(),$u=a("li"),yde=a("strong"),XEo=o("layoutlm"),zEo=o(" \u2014 "),_j=a("a"),WEo=o("LayoutLMForMaskedLM"),QEo=o(" (LayoutLM model)"),HEo=l(),ku=a("li"),xde=a("strong"),UEo=o("longformer"),JEo=o(" \u2014 "),uj=a("a"),YEo=o("LongformerForMaskedLM"),KEo=o(" (Longformer model)"),ZEo=l(),Su=a("li"),$de=a("strong"),eCo=o("lxmert"),oCo=o(" \u2014 "),bj=a("a"),rCo=o("LxmertForPreTraining"),tCo=o(" (LXMERT model)"),aCo=l(),Ru=a("li"),kde=a("strong"),nCo=o("megatron-bert"),sCo=o(" \u2014 "),vj=a("a"),lCo=o("MegatronBertForPreTraining"),iCo=o(" (Megatron-BERT model)"),dCo=l(),Pu=a("li"),Sde=a("strong"),cCo=o("mobilebert"),fCo=o(" \u2014 "),Fj=a("a"),mCo=o("MobileBertForPreTraining"),gCo=o(" (MobileBERT model)"),hCo=l(),Bu=a("li"),Rde=a("strong"),pCo=o("mpnet"),_Co=o(" \u2014 "),Tj=a("a"),uCo=o("MPNetForMaskedLM"),bCo=o(" (MPNet model)"),vCo=l(),Iu=a("li"),Pde=a("strong"),FCo=o("openai-gpt"),TCo=o(" \u2014 "),Mj=a("a"),MCo=o("OpenAIGPTLMHeadModel"),ECo=o(" (OpenAI GPT model)"),CCo=l(),Nu=a("li"),Bde=a("strong"),wCo=o("retribert"),ACo=o(" \u2014 "),Ej=a("a"),LCo=o("RetriBertModel"),yCo=o(" (RetriBERT model)"),xCo=l(),qu=a("li"),Ide=a("strong"),$Co=o("roberta"),kCo=o(" \u2014 "),Cj=a("a"),SCo=o("RobertaForMaskedLM"),RCo=o(" (RoBERTa model)"),PCo=l(),ju=a("li"),Nde=a("strong"),BCo=o("splinter"),ICo=o(" \u2014 "),wj=a("a"),NCo=o("SplinterForPreTraining"),qCo=o(" (Splinter model)"),jCo=l(),Du=a("li"),qde=a("strong"),DCo=o("squeezebert"),GCo=o(" \u2014 "),Aj=a("a"),OCo=o("SqueezeBertForMaskedLM"),VCo=o(" (SqueezeBERT model)"),XCo=l(),Gu=a("li"),jde=a("strong"),zCo=o("t5"),WCo=o(" \u2014 "),Lj=a("a"),QCo=o("T5ForConditionalGeneration"),HCo=o(" (T5 model)"),UCo=l(),Ou=a("li"),Dde=a("strong"),JCo=o("tapas"),YCo=o(" \u2014 "),yj=a("a"),KCo=o("TapasForMaskedLM"),ZCo=o(" (TAPAS model)"),e5o=l(),Vu=a("li"),Gde=a("strong"),o5o=o("transfo-xl"),r5o=o(" \u2014 "),xj=a("a"),t5o=o("TransfoXLLMHeadModel"),a5o=o(" (Transformer-XL model)"),n5o=l(),Xu=a("li"),Ode=a("strong"),s5o=o("unispeech"),l5o=o(" \u2014 "),$j=a("a"),i5o=o("UniSpeechForPreTraining"),d5o=o(" (UniSpeech model)"),c5o=l(),zu=a("li"),Vde=a("strong"),f5o=o("unispeech-sat"),m5o=o(" \u2014 "),kj=a("a"),g5o=o("UniSpeechSatForPreTraining"),h5o=o(" (UniSpeechSat model)"),p5o=l(),Wu=a("li"),Xde=a("strong"),_5o=o("visual_bert"),u5o=o(" \u2014 "),Sj=a("a"),b5o=o("VisualBertForPreTraining"),v5o=o(" (VisualBERT model)"),F5o=l(),Qu=a("li"),zde=a("strong"),T5o=o("vit_mae"),M5o=o(" \u2014 "),Rj=a("a"),E5o=o("ViTMAEForPreTraining"),C5o=o(" (ViTMAE model)"),w5o=l(),Hu=a("li"),Wde=a("strong"),A5o=o("wav2vec2"),L5o=o(" \u2014 "),Pj=a("a"),y5o=o("Wav2Vec2ForPreTraining"),x5o=o(" (Wav2Vec2 model)"),$5o=l(),Uu=a("li"),Qde=a("strong"),k5o=o("wav2vec2-conformer"),S5o=o(" \u2014 "),Bj=a("a"),R5o=o("Wav2Vec2ConformerForPreTraining"),P5o=o(" (Wav2Vec2-Conformer model)"),B5o=l(),Ju=a("li"),Hde=a("strong"),I5o=o("xlm"),N5o=o(" \u2014 "),Ij=a("a"),q5o=o("XLMWithLMHeadModel"),j5o=o(" (XLM model)"),D5o=l(),Yu=a("li"),Ude=a("strong"),G5o=o("xlm-roberta"),O5o=o(" \u2014 "),Nj=a("a"),V5o=o("XLMRobertaForMaskedLM"),X5o=o(" (XLM-RoBERTa model)"),z5o=l(),Ku=a("li"),Jde=a("strong"),W5o=o("xlm-roberta-xl"),Q5o=o(" \u2014 "),qj=a("a"),H5o=o("XLMRobertaXLForMaskedLM"),U5o=o(" (XLM-RoBERTa-XL model)"),J5o=l(),Zu=a("li"),Yde=a("strong"),Y5o=o("xlnet"),K5o=o(" \u2014 "),jj=a("a"),Z5o=o("XLNetLMHeadModel"),e0o=o(" (XLNet model)"),o0o=l(),e4=a("p"),r0o=o("The model is set in evaluation mode by default using "),Kde=a("code"),t0o=o("model.eval()"),a0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zde=a("code"),n0o=o("model.train()"),s0o=l(),F(o4.$$.fragment),pje=l(),Ri=a("h2"),r4=a("a"),ece=a("span"),F(ML.$$.fragment),l0o=l(),oce=a("span"),i0o=o("AutoModelForCausalLM"),_je=l(),$o=a("div"),F(EL.$$.fragment),d0o=l(),Pi=a("p"),c0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Dj=a("a"),f0o=o("from_pretrained()"),m0o=o(" class method or the "),Gj=a("a"),g0o=o("from_config()"),h0o=o(` class
method.`),p0o=l(),CL=a("p"),_0o=o("This class cannot be instantiated directly using "),rce=a("code"),u0o=o("__init__()"),b0o=o(" (throws an error)."),v0o=l(),nt=a("div"),F(wL.$$.fragment),F0o=l(),tce=a("p"),T0o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),M0o=l(),Bi=a("p"),E0o=o(`Note:
Loading a model from its configuration file does `),ace=a("strong"),C0o=o("not"),w0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oj=a("a"),A0o=o("from_pretrained()"),L0o=o(" to load the model weights."),y0o=l(),F(t4.$$.fragment),x0o=l(),Ke=a("div"),F(AL.$$.fragment),$0o=l(),nce=a("p"),k0o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),S0o=l(),$a=a("p"),R0o=o("The model class to instantiate is selected based on the "),sce=a("code"),P0o=o("model_type"),B0o=o(` property of the config object (either
passed as an argument or loaded from `),lce=a("code"),I0o=o("pretrained_model_name_or_path"),N0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=a("code"),q0o=o("pretrained_model_name_or_path"),j0o=o(":"),D0o=l(),z=a("ul"),a4=a("li"),dce=a("strong"),G0o=o("bart"),O0o=o(" \u2014 "),Vj=a("a"),V0o=o("BartForCausalLM"),X0o=o(" (BART model)"),z0o=l(),n4=a("li"),cce=a("strong"),W0o=o("bert"),Q0o=o(" \u2014 "),Xj=a("a"),H0o=o("BertLMHeadModel"),U0o=o(" (BERT model)"),J0o=l(),s4=a("li"),fce=a("strong"),Y0o=o("bert-generation"),K0o=o(" \u2014 "),zj=a("a"),Z0o=o("BertGenerationDecoder"),ewo=o(" (Bert Generation model)"),owo=l(),l4=a("li"),mce=a("strong"),rwo=o("big_bird"),two=o(" \u2014 "),Wj=a("a"),awo=o("BigBirdForCausalLM"),nwo=o(" (BigBird model)"),swo=l(),i4=a("li"),gce=a("strong"),lwo=o("bigbird_pegasus"),iwo=o(" \u2014 "),Qj=a("a"),dwo=o("BigBirdPegasusForCausalLM"),cwo=o(" (BigBird-Pegasus model)"),fwo=l(),d4=a("li"),hce=a("strong"),mwo=o("blenderbot"),gwo=o(" \u2014 "),Hj=a("a"),hwo=o("BlenderbotForCausalLM"),pwo=o(" (Blenderbot model)"),_wo=l(),c4=a("li"),pce=a("strong"),uwo=o("blenderbot-small"),bwo=o(" \u2014 "),Uj=a("a"),vwo=o("BlenderbotSmallForCausalLM"),Fwo=o(" (BlenderbotSmall model)"),Two=l(),f4=a("li"),_ce=a("strong"),Mwo=o("camembert"),Ewo=o(" \u2014 "),Jj=a("a"),Cwo=o("CamembertForCausalLM"),wwo=o(" (CamemBERT model)"),Awo=l(),m4=a("li"),uce=a("strong"),Lwo=o("codegen"),ywo=o(" \u2014 "),Yj=a("a"),xwo=o("CodeGenForCausalLM"),$wo=o(" (CodeGen model)"),kwo=l(),g4=a("li"),bce=a("strong"),Swo=o("ctrl"),Rwo=o(" \u2014 "),Kj=a("a"),Pwo=o("CTRLLMHeadModel"),Bwo=o(" (CTRL model)"),Iwo=l(),h4=a("li"),vce=a("strong"),Nwo=o("data2vec-text"),qwo=o(" \u2014 "),Zj=a("a"),jwo=o("Data2VecTextForCausalLM"),Dwo=o(" (Data2VecText model)"),Gwo=l(),p4=a("li"),Fce=a("strong"),Owo=o("electra"),Vwo=o(" \u2014 "),eD=a("a"),Xwo=o("ElectraForCausalLM"),zwo=o(" (ELECTRA model)"),Wwo=l(),_4=a("li"),Tce=a("strong"),Qwo=o("gpt2"),Hwo=o(" \u2014 "),oD=a("a"),Uwo=o("GPT2LMHeadModel"),Jwo=o(" (OpenAI GPT-2 model)"),Ywo=l(),u4=a("li"),Mce=a("strong"),Kwo=o("gpt_neo"),Zwo=o(" \u2014 "),rD=a("a"),eAo=o("GPTNeoForCausalLM"),oAo=o(" (GPT Neo model)"),rAo=l(),b4=a("li"),Ece=a("strong"),tAo=o("gpt_neox"),aAo=o(" \u2014 "),tD=a("a"),nAo=o("GPTNeoXForCausalLM"),sAo=o(" (GPT NeoX model)"),lAo=l(),v4=a("li"),Cce=a("strong"),iAo=o("gptj"),dAo=o(" \u2014 "),aD=a("a"),cAo=o("GPTJForCausalLM"),fAo=o(" (GPT-J model)"),mAo=l(),F4=a("li"),wce=a("strong"),gAo=o("marian"),hAo=o(" \u2014 "),nD=a("a"),pAo=o("MarianForCausalLM"),_Ao=o(" (Marian model)"),uAo=l(),T4=a("li"),Ace=a("strong"),bAo=o("mbart"),vAo=o(" \u2014 "),sD=a("a"),FAo=o("MBartForCausalLM"),TAo=o(" (mBART model)"),MAo=l(),M4=a("li"),Lce=a("strong"),EAo=o("megatron-bert"),CAo=o(" \u2014 "),lD=a("a"),wAo=o("MegatronBertForCausalLM"),AAo=o(" (Megatron-BERT model)"),LAo=l(),E4=a("li"),yce=a("strong"),yAo=o("openai-gpt"),xAo=o(" \u2014 "),iD=a("a"),$Ao=o("OpenAIGPTLMHeadModel"),kAo=o(" (OpenAI GPT model)"),SAo=l(),C4=a("li"),xce=a("strong"),RAo=o("opt"),PAo=o(" \u2014 "),dD=a("a"),BAo=o("OPTForCausalLM"),IAo=o(" (OPT model)"),NAo=l(),w4=a("li"),$ce=a("strong"),qAo=o("pegasus"),jAo=o(" \u2014 "),cD=a("a"),DAo=o("PegasusForCausalLM"),GAo=o(" (Pegasus model)"),OAo=l(),A4=a("li"),kce=a("strong"),VAo=o("plbart"),XAo=o(" \u2014 "),fD=a("a"),zAo=o("PLBartForCausalLM"),WAo=o(" (PLBart model)"),QAo=l(),L4=a("li"),Sce=a("strong"),HAo=o("prophetnet"),UAo=o(" \u2014 "),mD=a("a"),JAo=o("ProphetNetForCausalLM"),YAo=o(" (ProphetNet model)"),KAo=l(),y4=a("li"),Rce=a("strong"),ZAo=o("qdqbert"),e6o=o(" \u2014 "),gD=a("a"),o6o=o("QDQBertLMHeadModel"),r6o=o(" (QDQBert model)"),t6o=l(),x4=a("li"),Pce=a("strong"),a6o=o("reformer"),n6o=o(" \u2014 "),hD=a("a"),s6o=o("ReformerModelWithLMHead"),l6o=o(" (Reformer model)"),i6o=l(),$4=a("li"),Bce=a("strong"),d6o=o("rembert"),c6o=o(" \u2014 "),pD=a("a"),f6o=o("RemBertForCausalLM"),m6o=o(" (RemBERT model)"),g6o=l(),k4=a("li"),Ice=a("strong"),h6o=o("roberta"),p6o=o(" \u2014 "),_D=a("a"),_6o=o("RobertaForCausalLM"),u6o=o(" (RoBERTa model)"),b6o=l(),S4=a("li"),Nce=a("strong"),v6o=o("roformer"),F6o=o(" \u2014 "),uD=a("a"),T6o=o("RoFormerForCausalLM"),M6o=o(" (RoFormer model)"),E6o=l(),R4=a("li"),qce=a("strong"),C6o=o("speech_to_text_2"),w6o=o(" \u2014 "),bD=a("a"),A6o=o("Speech2Text2ForCausalLM"),L6o=o(" (Speech2Text2 model)"),y6o=l(),P4=a("li"),jce=a("strong"),x6o=o("transfo-xl"),$6o=o(" \u2014 "),vD=a("a"),k6o=o("TransfoXLLMHeadModel"),S6o=o(" (Transformer-XL model)"),R6o=l(),B4=a("li"),Dce=a("strong"),P6o=o("trocr"),B6o=o(" \u2014 "),FD=a("a"),I6o=o("TrOCRForCausalLM"),N6o=o(" (TrOCR model)"),q6o=l(),I4=a("li"),Gce=a("strong"),j6o=o("xglm"),D6o=o(" \u2014 "),TD=a("a"),G6o=o("XGLMForCausalLM"),O6o=o(" (XGLM model)"),V6o=l(),N4=a("li"),Oce=a("strong"),X6o=o("xlm"),z6o=o(" \u2014 "),MD=a("a"),W6o=o("XLMWithLMHeadModel"),Q6o=o(" (XLM model)"),H6o=l(),q4=a("li"),Vce=a("strong"),U6o=o("xlm-prophetnet"),J6o=o(" \u2014 "),ED=a("a"),Y6o=o("XLMProphetNetForCausalLM"),K6o=o(" (XLM-ProphetNet model)"),Z6o=l(),j4=a("li"),Xce=a("strong"),eLo=o("xlm-roberta"),oLo=o(" \u2014 "),CD=a("a"),rLo=o("XLMRobertaForCausalLM"),tLo=o(" (XLM-RoBERTa model)"),aLo=l(),D4=a("li"),zce=a("strong"),nLo=o("xlm-roberta-xl"),sLo=o(" \u2014 "),wD=a("a"),lLo=o("XLMRobertaXLForCausalLM"),iLo=o(" (XLM-RoBERTa-XL model)"),dLo=l(),G4=a("li"),Wce=a("strong"),cLo=o("xlnet"),fLo=o(" \u2014 "),AD=a("a"),mLo=o("XLNetLMHeadModel"),gLo=o(" (XLNet model)"),hLo=l(),O4=a("p"),pLo=o("The model is set in evaluation mode by default using "),Qce=a("code"),_Lo=o("model.eval()"),uLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hce=a("code"),bLo=o("model.train()"),vLo=l(),F(V4.$$.fragment),uje=l(),Ii=a("h2"),X4=a("a"),Uce=a("span"),F(LL.$$.fragment),FLo=l(),Jce=a("span"),TLo=o("AutoModelForMaskedLM"),bje=l(),ko=a("div"),F(yL.$$.fragment),MLo=l(),Ni=a("p"),ELo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LD=a("a"),CLo=o("from_pretrained()"),wLo=o(" class method or the "),yD=a("a"),ALo=o("from_config()"),LLo=o(` class
method.`),yLo=l(),xL=a("p"),xLo=o("This class cannot be instantiated directly using "),Yce=a("code"),$Lo=o("__init__()"),kLo=o(" (throws an error)."),SLo=l(),st=a("div"),F($L.$$.fragment),RLo=l(),Kce=a("p"),PLo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),BLo=l(),qi=a("p"),ILo=o(`Note:
Loading a model from its configuration file does `),Zce=a("strong"),NLo=o("not"),qLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xD=a("a"),jLo=o("from_pretrained()"),DLo=o(" to load the model weights."),GLo=l(),F(z4.$$.fragment),OLo=l(),Ze=a("div"),F(kL.$$.fragment),VLo=l(),efe=a("p"),XLo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zLo=l(),ka=a("p"),WLo=o("The model class to instantiate is selected based on the "),ofe=a("code"),QLo=o("model_type"),HLo=o(` property of the config object (either
passed as an argument or loaded from `),rfe=a("code"),ULo=o("pretrained_model_name_or_path"),JLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tfe=a("code"),YLo=o("pretrained_model_name_or_path"),KLo=o(":"),ZLo=l(),Q=a("ul"),W4=a("li"),afe=a("strong"),eyo=o("albert"),oyo=o(" \u2014 "),$D=a("a"),ryo=o("AlbertForMaskedLM"),tyo=o(" (ALBERT model)"),ayo=l(),Q4=a("li"),nfe=a("strong"),nyo=o("bart"),syo=o(" \u2014 "),kD=a("a"),lyo=o("BartForConditionalGeneration"),iyo=o(" (BART model)"),dyo=l(),H4=a("li"),sfe=a("strong"),cyo=o("bert"),fyo=o(" \u2014 "),SD=a("a"),myo=o("BertForMaskedLM"),gyo=o(" (BERT model)"),hyo=l(),U4=a("li"),lfe=a("strong"),pyo=o("big_bird"),_yo=o(" \u2014 "),RD=a("a"),uyo=o("BigBirdForMaskedLM"),byo=o(" (BigBird model)"),vyo=l(),J4=a("li"),ife=a("strong"),Fyo=o("camembert"),Tyo=o(" \u2014 "),PD=a("a"),Myo=o("CamembertForMaskedLM"),Eyo=o(" (CamemBERT model)"),Cyo=l(),Y4=a("li"),dfe=a("strong"),wyo=o("convbert"),Ayo=o(" \u2014 "),BD=a("a"),Lyo=o("ConvBertForMaskedLM"),yyo=o(" (ConvBERT model)"),xyo=l(),K4=a("li"),cfe=a("strong"),$yo=o("data2vec-text"),kyo=o(" \u2014 "),ID=a("a"),Syo=o("Data2VecTextForMaskedLM"),Ryo=o(" (Data2VecText model)"),Pyo=l(),Z4=a("li"),ffe=a("strong"),Byo=o("deberta"),Iyo=o(" \u2014 "),ND=a("a"),Nyo=o("DebertaForMaskedLM"),qyo=o(" (DeBERTa model)"),jyo=l(),e1=a("li"),mfe=a("strong"),Dyo=o("deberta-v2"),Gyo=o(" \u2014 "),qD=a("a"),Oyo=o("DebertaV2ForMaskedLM"),Vyo=o(" (DeBERTa-v2 model)"),Xyo=l(),o1=a("li"),gfe=a("strong"),zyo=o("distilbert"),Wyo=o(" \u2014 "),jD=a("a"),Qyo=o("DistilBertForMaskedLM"),Hyo=o(" (DistilBERT model)"),Uyo=l(),r1=a("li"),hfe=a("strong"),Jyo=o("electra"),Yyo=o(" \u2014 "),DD=a("a"),Kyo=o("ElectraForMaskedLM"),Zyo=o(" (ELECTRA model)"),e8o=l(),t1=a("li"),pfe=a("strong"),o8o=o("flaubert"),r8o=o(" \u2014 "),GD=a("a"),t8o=o("FlaubertWithLMHeadModel"),a8o=o(" (FlauBERT model)"),n8o=l(),a1=a("li"),_fe=a("strong"),s8o=o("fnet"),l8o=o(" \u2014 "),OD=a("a"),i8o=o("FNetForMaskedLM"),d8o=o(" (FNet model)"),c8o=l(),n1=a("li"),ufe=a("strong"),f8o=o("funnel"),m8o=o(" \u2014 "),VD=a("a"),g8o=o("FunnelForMaskedLM"),h8o=o(" (Funnel Transformer model)"),p8o=l(),s1=a("li"),bfe=a("strong"),_8o=o("ibert"),u8o=o(" \u2014 "),XD=a("a"),b8o=o("IBertForMaskedLM"),v8o=o(" (I-BERT model)"),F8o=l(),l1=a("li"),vfe=a("strong"),T8o=o("layoutlm"),M8o=o(" \u2014 "),zD=a("a"),E8o=o("LayoutLMForMaskedLM"),C8o=o(" (LayoutLM model)"),w8o=l(),i1=a("li"),Ffe=a("strong"),A8o=o("longformer"),L8o=o(" \u2014 "),WD=a("a"),y8o=o("LongformerForMaskedLM"),x8o=o(" (Longformer model)"),$8o=l(),d1=a("li"),Tfe=a("strong"),k8o=o("luke"),S8o=o(" \u2014 "),QD=a("a"),R8o=o("LukeForMaskedLM"),P8o=o(" (LUKE model)"),B8o=l(),c1=a("li"),Mfe=a("strong"),I8o=o("mbart"),N8o=o(" \u2014 "),HD=a("a"),q8o=o("MBartForConditionalGeneration"),j8o=o(" (mBART model)"),D8o=l(),f1=a("li"),Efe=a("strong"),G8o=o("megatron-bert"),O8o=o(" \u2014 "),UD=a("a"),V8o=o("MegatronBertForMaskedLM"),X8o=o(" (Megatron-BERT model)"),z8o=l(),m1=a("li"),Cfe=a("strong"),W8o=o("mobilebert"),Q8o=o(" \u2014 "),JD=a("a"),H8o=o("MobileBertForMaskedLM"),U8o=o(" (MobileBERT model)"),J8o=l(),g1=a("li"),wfe=a("strong"),Y8o=o("mpnet"),K8o=o(" \u2014 "),YD=a("a"),Z8o=o("MPNetForMaskedLM"),e9o=o(" (MPNet model)"),o9o=l(),h1=a("li"),Afe=a("strong"),r9o=o("nystromformer"),t9o=o(" \u2014 "),KD=a("a"),a9o=o("NystromformerForMaskedLM"),n9o=o(" (Nystr\xF6mformer model)"),s9o=l(),p1=a("li"),Lfe=a("strong"),l9o=o("perceiver"),i9o=o(" \u2014 "),ZD=a("a"),d9o=o("PerceiverForMaskedLM"),c9o=o(" (Perceiver model)"),f9o=l(),_1=a("li"),yfe=a("strong"),m9o=o("qdqbert"),g9o=o(" \u2014 "),eG=a("a"),h9o=o("QDQBertForMaskedLM"),p9o=o(" (QDQBert model)"),_9o=l(),u1=a("li"),xfe=a("strong"),u9o=o("reformer"),b9o=o(" \u2014 "),oG=a("a"),v9o=o("ReformerForMaskedLM"),F9o=o(" (Reformer model)"),T9o=l(),b1=a("li"),$fe=a("strong"),M9o=o("rembert"),E9o=o(" \u2014 "),rG=a("a"),C9o=o("RemBertForMaskedLM"),w9o=o(" (RemBERT model)"),A9o=l(),v1=a("li"),kfe=a("strong"),L9o=o("roberta"),y9o=o(" \u2014 "),tG=a("a"),x9o=o("RobertaForMaskedLM"),$9o=o(" (RoBERTa model)"),k9o=l(),F1=a("li"),Sfe=a("strong"),S9o=o("roformer"),R9o=o(" \u2014 "),aG=a("a"),P9o=o("RoFormerForMaskedLM"),B9o=o(" (RoFormer model)"),I9o=l(),T1=a("li"),Rfe=a("strong"),N9o=o("squeezebert"),q9o=o(" \u2014 "),nG=a("a"),j9o=o("SqueezeBertForMaskedLM"),D9o=o(" (SqueezeBERT model)"),G9o=l(),M1=a("li"),Pfe=a("strong"),O9o=o("tapas"),V9o=o(" \u2014 "),sG=a("a"),X9o=o("TapasForMaskedLM"),z9o=o(" (TAPAS model)"),W9o=l(),E1=a("li"),Bfe=a("strong"),Q9o=o("wav2vec2"),H9o=o(" \u2014 "),Ife=a("code"),U9o=o("Wav2Vec2ForMaskedLM"),J9o=o(" (Wav2Vec2 model)"),Y9o=l(),C1=a("li"),Nfe=a("strong"),K9o=o("xlm"),Z9o=o(" \u2014 "),lG=a("a"),exo=o("XLMWithLMHeadModel"),oxo=o(" (XLM model)"),rxo=l(),w1=a("li"),qfe=a("strong"),txo=o("xlm-roberta"),axo=o(" \u2014 "),iG=a("a"),nxo=o("XLMRobertaForMaskedLM"),sxo=o(" (XLM-RoBERTa model)"),lxo=l(),A1=a("li"),jfe=a("strong"),ixo=o("xlm-roberta-xl"),dxo=o(" \u2014 "),dG=a("a"),cxo=o("XLMRobertaXLForMaskedLM"),fxo=o(" (XLM-RoBERTa-XL model)"),mxo=l(),L1=a("li"),Dfe=a("strong"),gxo=o("yoso"),hxo=o(" \u2014 "),cG=a("a"),pxo=o("YosoForMaskedLM"),_xo=o(" (YOSO model)"),uxo=l(),y1=a("p"),bxo=o("The model is set in evaluation mode by default using "),Gfe=a("code"),vxo=o("model.eval()"),Fxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ofe=a("code"),Txo=o("model.train()"),Mxo=l(),F(x1.$$.fragment),vje=l(),ji=a("h2"),$1=a("a"),Vfe=a("span"),F(SL.$$.fragment),Exo=l(),Xfe=a("span"),Cxo=o("AutoModelForSeq2SeqLM"),Fje=l(),So=a("div"),F(RL.$$.fragment),wxo=l(),Di=a("p"),Axo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fG=a("a"),Lxo=o("from_pretrained()"),yxo=o(" class method or the "),mG=a("a"),xxo=o("from_config()"),$xo=o(` class
method.`),kxo=l(),PL=a("p"),Sxo=o("This class cannot be instantiated directly using "),zfe=a("code"),Rxo=o("__init__()"),Pxo=o(" (throws an error)."),Bxo=l(),lt=a("div"),F(BL.$$.fragment),Ixo=l(),Wfe=a("p"),Nxo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qxo=l(),Gi=a("p"),jxo=o(`Note:
Loading a model from its configuration file does `),Qfe=a("strong"),Dxo=o("not"),Gxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=a("a"),Oxo=o("from_pretrained()"),Vxo=o(" to load the model weights."),Xxo=l(),F(k1.$$.fragment),zxo=l(),eo=a("div"),F(IL.$$.fragment),Wxo=l(),Hfe=a("p"),Qxo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Hxo=l(),Sa=a("p"),Uxo=o("The model class to instantiate is selected based on the "),Ufe=a("code"),Jxo=o("model_type"),Yxo=o(` property of the config object (either
passed as an argument or loaded from `),Jfe=a("code"),Kxo=o("pretrained_model_name_or_path"),Zxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=a("code"),e$o=o("pretrained_model_name_or_path"),o$o=o(":"),r$o=l(),_e=a("ul"),S1=a("li"),Kfe=a("strong"),t$o=o("bart"),a$o=o(" \u2014 "),hG=a("a"),n$o=o("BartForConditionalGeneration"),s$o=o(" (BART model)"),l$o=l(),R1=a("li"),Zfe=a("strong"),i$o=o("bigbird_pegasus"),d$o=o(" \u2014 "),pG=a("a"),c$o=o("BigBirdPegasusForConditionalGeneration"),f$o=o(" (BigBird-Pegasus model)"),m$o=l(),P1=a("li"),eme=a("strong"),g$o=o("blenderbot"),h$o=o(" \u2014 "),_G=a("a"),p$o=o("BlenderbotForConditionalGeneration"),_$o=o(" (Blenderbot model)"),u$o=l(),B1=a("li"),ome=a("strong"),b$o=o("blenderbot-small"),v$o=o(" \u2014 "),uG=a("a"),F$o=o("BlenderbotSmallForConditionalGeneration"),T$o=o(" (BlenderbotSmall model)"),M$o=l(),I1=a("li"),rme=a("strong"),E$o=o("encoder-decoder"),C$o=o(" \u2014 "),bG=a("a"),w$o=o("EncoderDecoderModel"),A$o=o(" (Encoder decoder model)"),L$o=l(),N1=a("li"),tme=a("strong"),y$o=o("fsmt"),x$o=o(" \u2014 "),vG=a("a"),$$o=o("FSMTForConditionalGeneration"),k$o=o(" (FairSeq Machine-Translation model)"),S$o=l(),q1=a("li"),ame=a("strong"),R$o=o("led"),P$o=o(" \u2014 "),FG=a("a"),B$o=o("LEDForConditionalGeneration"),I$o=o(" (LED model)"),N$o=l(),j1=a("li"),nme=a("strong"),q$o=o("m2m_100"),j$o=o(" \u2014 "),TG=a("a"),D$o=o("M2M100ForConditionalGeneration"),G$o=o(" (M2M100 model)"),O$o=l(),D1=a("li"),sme=a("strong"),V$o=o("marian"),X$o=o(" \u2014 "),MG=a("a"),z$o=o("MarianMTModel"),W$o=o(" (Marian model)"),Q$o=l(),G1=a("li"),lme=a("strong"),H$o=o("mbart"),U$o=o(" \u2014 "),EG=a("a"),J$o=o("MBartForConditionalGeneration"),Y$o=o(" (mBART model)"),K$o=l(),O1=a("li"),ime=a("strong"),Z$o=o("mt5"),eko=o(" \u2014 "),CG=a("a"),oko=o("MT5ForConditionalGeneration"),rko=o(" (MT5 model)"),tko=l(),V1=a("li"),dme=a("strong"),ako=o("pegasus"),nko=o(" \u2014 "),wG=a("a"),sko=o("PegasusForConditionalGeneration"),lko=o(" (Pegasus model)"),iko=l(),X1=a("li"),cme=a("strong"),dko=o("plbart"),cko=o(" \u2014 "),AG=a("a"),fko=o("PLBartForConditionalGeneration"),mko=o(" (PLBart model)"),gko=l(),z1=a("li"),fme=a("strong"),hko=o("prophetnet"),pko=o(" \u2014 "),LG=a("a"),_ko=o("ProphetNetForConditionalGeneration"),uko=o(" (ProphetNet model)"),bko=l(),W1=a("li"),mme=a("strong"),vko=o("t5"),Fko=o(" \u2014 "),yG=a("a"),Tko=o("T5ForConditionalGeneration"),Mko=o(" (T5 model)"),Eko=l(),Q1=a("li"),gme=a("strong"),Cko=o("xlm-prophetnet"),wko=o(" \u2014 "),xG=a("a"),Ako=o("XLMProphetNetForConditionalGeneration"),Lko=o(" (XLM-ProphetNet model)"),yko=l(),H1=a("p"),xko=o("The model is set in evaluation mode by default using "),hme=a("code"),$ko=o("model.eval()"),kko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=a("code"),Sko=o("model.train()"),Rko=l(),F(U1.$$.fragment),Tje=l(),Oi=a("h2"),J1=a("a"),_me=a("span"),F(NL.$$.fragment),Pko=l(),ume=a("span"),Bko=o("AutoModelForSequenceClassification"),Mje=l(),Ro=a("div"),F(qL.$$.fragment),Iko=l(),Vi=a("p"),Nko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$G=a("a"),qko=o("from_pretrained()"),jko=o(" class method or the "),kG=a("a"),Dko=o("from_config()"),Gko=o(` class
method.`),Oko=l(),jL=a("p"),Vko=o("This class cannot be instantiated directly using "),bme=a("code"),Xko=o("__init__()"),zko=o(" (throws an error)."),Wko=l(),it=a("div"),F(DL.$$.fragment),Qko=l(),vme=a("p"),Hko=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Uko=l(),Xi=a("p"),Jko=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),Yko=o("not"),Kko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=a("a"),Zko=o("from_pretrained()"),eSo=o(" to load the model weights."),oSo=l(),F(Y1.$$.fragment),rSo=l(),oo=a("div"),F(GL.$$.fragment),tSo=l(),Tme=a("p"),aSo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),nSo=l(),Ra=a("p"),sSo=o("The model class to instantiate is selected based on the "),Mme=a("code"),lSo=o("model_type"),iSo=o(` property of the config object (either
passed as an argument or loaded from `),Eme=a("code"),dSo=o("pretrained_model_name_or_path"),cSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=a("code"),fSo=o("pretrained_model_name_or_path"),mSo=o(":"),gSo=l(),N=a("ul"),K1=a("li"),wme=a("strong"),hSo=o("albert"),pSo=o(" \u2014 "),RG=a("a"),_So=o("AlbertForSequenceClassification"),uSo=o(" (ALBERT model)"),bSo=l(),Z1=a("li"),Ame=a("strong"),vSo=o("bart"),FSo=o(" \u2014 "),PG=a("a"),TSo=o("BartForSequenceClassification"),MSo=o(" (BART model)"),ESo=l(),eb=a("li"),Lme=a("strong"),CSo=o("bert"),wSo=o(" \u2014 "),BG=a("a"),ASo=o("BertForSequenceClassification"),LSo=o(" (BERT model)"),ySo=l(),ob=a("li"),yme=a("strong"),xSo=o("big_bird"),$So=o(" \u2014 "),IG=a("a"),kSo=o("BigBirdForSequenceClassification"),SSo=o(" (BigBird model)"),RSo=l(),rb=a("li"),xme=a("strong"),PSo=o("bigbird_pegasus"),BSo=o(" \u2014 "),NG=a("a"),ISo=o("BigBirdPegasusForSequenceClassification"),NSo=o(" (BigBird-Pegasus model)"),qSo=l(),tb=a("li"),$me=a("strong"),jSo=o("camembert"),DSo=o(" \u2014 "),qG=a("a"),GSo=o("CamembertForSequenceClassification"),OSo=o(" (CamemBERT model)"),VSo=l(),ab=a("li"),kme=a("strong"),XSo=o("canine"),zSo=o(" \u2014 "),jG=a("a"),WSo=o("CanineForSequenceClassification"),QSo=o(" (CANINE model)"),HSo=l(),nb=a("li"),Sme=a("strong"),USo=o("convbert"),JSo=o(" \u2014 "),DG=a("a"),YSo=o("ConvBertForSequenceClassification"),KSo=o(" (ConvBERT model)"),ZSo=l(),sb=a("li"),Rme=a("strong"),eRo=o("ctrl"),oRo=o(" \u2014 "),GG=a("a"),rRo=o("CTRLForSequenceClassification"),tRo=o(" (CTRL model)"),aRo=l(),lb=a("li"),Pme=a("strong"),nRo=o("data2vec-text"),sRo=o(" \u2014 "),OG=a("a"),lRo=o("Data2VecTextForSequenceClassification"),iRo=o(" (Data2VecText model)"),dRo=l(),ib=a("li"),Bme=a("strong"),cRo=o("deberta"),fRo=o(" \u2014 "),VG=a("a"),mRo=o("DebertaForSequenceClassification"),gRo=o(" (DeBERTa model)"),hRo=l(),db=a("li"),Ime=a("strong"),pRo=o("deberta-v2"),_Ro=o(" \u2014 "),XG=a("a"),uRo=o("DebertaV2ForSequenceClassification"),bRo=o(" (DeBERTa-v2 model)"),vRo=l(),cb=a("li"),Nme=a("strong"),FRo=o("distilbert"),TRo=o(" \u2014 "),zG=a("a"),MRo=o("DistilBertForSequenceClassification"),ERo=o(" (DistilBERT model)"),CRo=l(),fb=a("li"),qme=a("strong"),wRo=o("electra"),ARo=o(" \u2014 "),WG=a("a"),LRo=o("ElectraForSequenceClassification"),yRo=o(" (ELECTRA model)"),xRo=l(),mb=a("li"),jme=a("strong"),$Ro=o("flaubert"),kRo=o(" \u2014 "),QG=a("a"),SRo=o("FlaubertForSequenceClassification"),RRo=o(" (FlauBERT model)"),PRo=l(),gb=a("li"),Dme=a("strong"),BRo=o("fnet"),IRo=o(" \u2014 "),HG=a("a"),NRo=o("FNetForSequenceClassification"),qRo=o(" (FNet model)"),jRo=l(),hb=a("li"),Gme=a("strong"),DRo=o("funnel"),GRo=o(" \u2014 "),UG=a("a"),ORo=o("FunnelForSequenceClassification"),VRo=o(" (Funnel Transformer model)"),XRo=l(),pb=a("li"),Ome=a("strong"),zRo=o("gpt2"),WRo=o(" \u2014 "),JG=a("a"),QRo=o("GPT2ForSequenceClassification"),HRo=o(" (OpenAI GPT-2 model)"),URo=l(),_b=a("li"),Vme=a("strong"),JRo=o("gpt_neo"),YRo=o(" \u2014 "),YG=a("a"),KRo=o("GPTNeoForSequenceClassification"),ZRo=o(" (GPT Neo model)"),ePo=l(),ub=a("li"),Xme=a("strong"),oPo=o("gptj"),rPo=o(" \u2014 "),KG=a("a"),tPo=o("GPTJForSequenceClassification"),aPo=o(" (GPT-J model)"),nPo=l(),bb=a("li"),zme=a("strong"),sPo=o("ibert"),lPo=o(" \u2014 "),ZG=a("a"),iPo=o("IBertForSequenceClassification"),dPo=o(" (I-BERT model)"),cPo=l(),vb=a("li"),Wme=a("strong"),fPo=o("layoutlm"),mPo=o(" \u2014 "),eO=a("a"),gPo=o("LayoutLMForSequenceClassification"),hPo=o(" (LayoutLM model)"),pPo=l(),Fb=a("li"),Qme=a("strong"),_Po=o("layoutlmv2"),uPo=o(" \u2014 "),oO=a("a"),bPo=o("LayoutLMv2ForSequenceClassification"),vPo=o(" (LayoutLMv2 model)"),FPo=l(),Tb=a("li"),Hme=a("strong"),TPo=o("layoutlmv3"),MPo=o(" \u2014 "),rO=a("a"),EPo=o("LayoutLMv3ForSequenceClassification"),CPo=o(" (LayoutLMv3 model)"),wPo=l(),Mb=a("li"),Ume=a("strong"),APo=o("led"),LPo=o(" \u2014 "),tO=a("a"),yPo=o("LEDForSequenceClassification"),xPo=o(" (LED model)"),$Po=l(),Eb=a("li"),Jme=a("strong"),kPo=o("longformer"),SPo=o(" \u2014 "),aO=a("a"),RPo=o("LongformerForSequenceClassification"),PPo=o(" (Longformer model)"),BPo=l(),Cb=a("li"),Yme=a("strong"),IPo=o("mbart"),NPo=o(" \u2014 "),nO=a("a"),qPo=o("MBartForSequenceClassification"),jPo=o(" (mBART model)"),DPo=l(),wb=a("li"),Kme=a("strong"),GPo=o("megatron-bert"),OPo=o(" \u2014 "),sO=a("a"),VPo=o("MegatronBertForSequenceClassification"),XPo=o(" (Megatron-BERT model)"),zPo=l(),Ab=a("li"),Zme=a("strong"),WPo=o("mobilebert"),QPo=o(" \u2014 "),lO=a("a"),HPo=o("MobileBertForSequenceClassification"),UPo=o(" (MobileBERT model)"),JPo=l(),Lb=a("li"),ege=a("strong"),YPo=o("mpnet"),KPo=o(" \u2014 "),iO=a("a"),ZPo=o("MPNetForSequenceClassification"),eBo=o(" (MPNet model)"),oBo=l(),yb=a("li"),oge=a("strong"),rBo=o("nystromformer"),tBo=o(" \u2014 "),dO=a("a"),aBo=o("NystromformerForSequenceClassification"),nBo=o(" (Nystr\xF6mformer model)"),sBo=l(),xb=a("li"),rge=a("strong"),lBo=o("openai-gpt"),iBo=o(" \u2014 "),cO=a("a"),dBo=o("OpenAIGPTForSequenceClassification"),cBo=o(" (OpenAI GPT model)"),fBo=l(),$b=a("li"),tge=a("strong"),mBo=o("perceiver"),gBo=o(" \u2014 "),fO=a("a"),hBo=o("PerceiverForSequenceClassification"),pBo=o(" (Perceiver model)"),_Bo=l(),kb=a("li"),age=a("strong"),uBo=o("plbart"),bBo=o(" \u2014 "),mO=a("a"),vBo=o("PLBartForSequenceClassification"),FBo=o(" (PLBart model)"),TBo=l(),Sb=a("li"),nge=a("strong"),MBo=o("qdqbert"),EBo=o(" \u2014 "),gO=a("a"),CBo=o("QDQBertForSequenceClassification"),wBo=o(" (QDQBert model)"),ABo=l(),Rb=a("li"),sge=a("strong"),LBo=o("reformer"),yBo=o(" \u2014 "),hO=a("a"),xBo=o("ReformerForSequenceClassification"),$Bo=o(" (Reformer model)"),kBo=l(),Pb=a("li"),lge=a("strong"),SBo=o("rembert"),RBo=o(" \u2014 "),pO=a("a"),PBo=o("RemBertForSequenceClassification"),BBo=o(" (RemBERT model)"),IBo=l(),Bb=a("li"),ige=a("strong"),NBo=o("roberta"),qBo=o(" \u2014 "),_O=a("a"),jBo=o("RobertaForSequenceClassification"),DBo=o(" (RoBERTa model)"),GBo=l(),Ib=a("li"),dge=a("strong"),OBo=o("roformer"),VBo=o(" \u2014 "),uO=a("a"),XBo=o("RoFormerForSequenceClassification"),zBo=o(" (RoFormer model)"),WBo=l(),Nb=a("li"),cge=a("strong"),QBo=o("squeezebert"),HBo=o(" \u2014 "),bO=a("a"),UBo=o("SqueezeBertForSequenceClassification"),JBo=o(" (SqueezeBERT model)"),YBo=l(),qb=a("li"),fge=a("strong"),KBo=o("tapas"),ZBo=o(" \u2014 "),vO=a("a"),eIo=o("TapasForSequenceClassification"),oIo=o(" (TAPAS model)"),rIo=l(),jb=a("li"),mge=a("strong"),tIo=o("transfo-xl"),aIo=o(" \u2014 "),FO=a("a"),nIo=o("TransfoXLForSequenceClassification"),sIo=o(" (Transformer-XL model)"),lIo=l(),Db=a("li"),gge=a("strong"),iIo=o("xlm"),dIo=o(" \u2014 "),TO=a("a"),cIo=o("XLMForSequenceClassification"),fIo=o(" (XLM model)"),mIo=l(),Gb=a("li"),hge=a("strong"),gIo=o("xlm-roberta"),hIo=o(" \u2014 "),MO=a("a"),pIo=o("XLMRobertaForSequenceClassification"),_Io=o(" (XLM-RoBERTa model)"),uIo=l(),Ob=a("li"),pge=a("strong"),bIo=o("xlm-roberta-xl"),vIo=o(" \u2014 "),EO=a("a"),FIo=o("XLMRobertaXLForSequenceClassification"),TIo=o(" (XLM-RoBERTa-XL model)"),MIo=l(),Vb=a("li"),_ge=a("strong"),EIo=o("xlnet"),CIo=o(" \u2014 "),CO=a("a"),wIo=o("XLNetForSequenceClassification"),AIo=o(" (XLNet model)"),LIo=l(),Xb=a("li"),uge=a("strong"),yIo=o("yoso"),xIo=o(" \u2014 "),wO=a("a"),$Io=o("YosoForSequenceClassification"),kIo=o(" (YOSO model)"),SIo=l(),zb=a("p"),RIo=o("The model is set in evaluation mode by default using "),bge=a("code"),PIo=o("model.eval()"),BIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vge=a("code"),IIo=o("model.train()"),NIo=l(),F(Wb.$$.fragment),Eje=l(),zi=a("h2"),Qb=a("a"),Fge=a("span"),F(OL.$$.fragment),qIo=l(),Tge=a("span"),jIo=o("AutoModelForMultipleChoice"),Cje=l(),Po=a("div"),F(VL.$$.fragment),DIo=l(),Wi=a("p"),GIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AO=a("a"),OIo=o("from_pretrained()"),VIo=o(" class method or the "),LO=a("a"),XIo=o("from_config()"),zIo=o(` class
method.`),WIo=l(),XL=a("p"),QIo=o("This class cannot be instantiated directly using "),Mge=a("code"),HIo=o("__init__()"),UIo=o(" (throws an error)."),JIo=l(),dt=a("div"),F(zL.$$.fragment),YIo=l(),Ege=a("p"),KIo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ZIo=l(),Qi=a("p"),eNo=o(`Note:
Loading a model from its configuration file does `),Cge=a("strong"),oNo=o("not"),rNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=a("a"),tNo=o("from_pretrained()"),aNo=o(" to load the model weights."),nNo=l(),F(Hb.$$.fragment),sNo=l(),ro=a("div"),F(WL.$$.fragment),lNo=l(),wge=a("p"),iNo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dNo=l(),Pa=a("p"),cNo=o("The model class to instantiate is selected based on the "),Age=a("code"),fNo=o("model_type"),mNo=o(` property of the config object (either
passed as an argument or loaded from `),Lge=a("code"),gNo=o("pretrained_model_name_or_path"),hNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=a("code"),pNo=o("pretrained_model_name_or_path"),_No=o(":"),uNo=l(),K=a("ul"),Ub=a("li"),xge=a("strong"),bNo=o("albert"),vNo=o(" \u2014 "),xO=a("a"),FNo=o("AlbertForMultipleChoice"),TNo=o(" (ALBERT model)"),MNo=l(),Jb=a("li"),$ge=a("strong"),ENo=o("bert"),CNo=o(" \u2014 "),$O=a("a"),wNo=o("BertForMultipleChoice"),ANo=o(" (BERT model)"),LNo=l(),Yb=a("li"),kge=a("strong"),yNo=o("big_bird"),xNo=o(" \u2014 "),kO=a("a"),$No=o("BigBirdForMultipleChoice"),kNo=o(" (BigBird model)"),SNo=l(),Kb=a("li"),Sge=a("strong"),RNo=o("camembert"),PNo=o(" \u2014 "),SO=a("a"),BNo=o("CamembertForMultipleChoice"),INo=o(" (CamemBERT model)"),NNo=l(),Zb=a("li"),Rge=a("strong"),qNo=o("canine"),jNo=o(" \u2014 "),RO=a("a"),DNo=o("CanineForMultipleChoice"),GNo=o(" (CANINE model)"),ONo=l(),e2=a("li"),Pge=a("strong"),VNo=o("convbert"),XNo=o(" \u2014 "),PO=a("a"),zNo=o("ConvBertForMultipleChoice"),WNo=o(" (ConvBERT model)"),QNo=l(),o2=a("li"),Bge=a("strong"),HNo=o("data2vec-text"),UNo=o(" \u2014 "),BO=a("a"),JNo=o("Data2VecTextForMultipleChoice"),YNo=o(" (Data2VecText model)"),KNo=l(),r2=a("li"),Ige=a("strong"),ZNo=o("deberta-v2"),eqo=o(" \u2014 "),IO=a("a"),oqo=o("DebertaV2ForMultipleChoice"),rqo=o(" (DeBERTa-v2 model)"),tqo=l(),t2=a("li"),Nge=a("strong"),aqo=o("distilbert"),nqo=o(" \u2014 "),NO=a("a"),sqo=o("DistilBertForMultipleChoice"),lqo=o(" (DistilBERT model)"),iqo=l(),a2=a("li"),qge=a("strong"),dqo=o("electra"),cqo=o(" \u2014 "),qO=a("a"),fqo=o("ElectraForMultipleChoice"),mqo=o(" (ELECTRA model)"),gqo=l(),n2=a("li"),jge=a("strong"),hqo=o("flaubert"),pqo=o(" \u2014 "),jO=a("a"),_qo=o("FlaubertForMultipleChoice"),uqo=o(" (FlauBERT model)"),bqo=l(),s2=a("li"),Dge=a("strong"),vqo=o("fnet"),Fqo=o(" \u2014 "),DO=a("a"),Tqo=o("FNetForMultipleChoice"),Mqo=o(" (FNet model)"),Eqo=l(),l2=a("li"),Gge=a("strong"),Cqo=o("funnel"),wqo=o(" \u2014 "),GO=a("a"),Aqo=o("FunnelForMultipleChoice"),Lqo=o(" (Funnel Transformer model)"),yqo=l(),i2=a("li"),Oge=a("strong"),xqo=o("ibert"),$qo=o(" \u2014 "),OO=a("a"),kqo=o("IBertForMultipleChoice"),Sqo=o(" (I-BERT model)"),Rqo=l(),d2=a("li"),Vge=a("strong"),Pqo=o("longformer"),Bqo=o(" \u2014 "),VO=a("a"),Iqo=o("LongformerForMultipleChoice"),Nqo=o(" (Longformer model)"),qqo=l(),c2=a("li"),Xge=a("strong"),jqo=o("megatron-bert"),Dqo=o(" \u2014 "),XO=a("a"),Gqo=o("MegatronBertForMultipleChoice"),Oqo=o(" (Megatron-BERT model)"),Vqo=l(),f2=a("li"),zge=a("strong"),Xqo=o("mobilebert"),zqo=o(" \u2014 "),zO=a("a"),Wqo=o("MobileBertForMultipleChoice"),Qqo=o(" (MobileBERT model)"),Hqo=l(),m2=a("li"),Wge=a("strong"),Uqo=o("mpnet"),Jqo=o(" \u2014 "),WO=a("a"),Yqo=o("MPNetForMultipleChoice"),Kqo=o(" (MPNet model)"),Zqo=l(),g2=a("li"),Qge=a("strong"),ejo=o("nystromformer"),ojo=o(" \u2014 "),QO=a("a"),rjo=o("NystromformerForMultipleChoice"),tjo=o(" (Nystr\xF6mformer model)"),ajo=l(),h2=a("li"),Hge=a("strong"),njo=o("qdqbert"),sjo=o(" \u2014 "),HO=a("a"),ljo=o("QDQBertForMultipleChoice"),ijo=o(" (QDQBert model)"),djo=l(),p2=a("li"),Uge=a("strong"),cjo=o("rembert"),fjo=o(" \u2014 "),UO=a("a"),mjo=o("RemBertForMultipleChoice"),gjo=o(" (RemBERT model)"),hjo=l(),_2=a("li"),Jge=a("strong"),pjo=o("roberta"),_jo=o(" \u2014 "),JO=a("a"),ujo=o("RobertaForMultipleChoice"),bjo=o(" (RoBERTa model)"),vjo=l(),u2=a("li"),Yge=a("strong"),Fjo=o("roformer"),Tjo=o(" \u2014 "),YO=a("a"),Mjo=o("RoFormerForMultipleChoice"),Ejo=o(" (RoFormer model)"),Cjo=l(),b2=a("li"),Kge=a("strong"),wjo=o("squeezebert"),Ajo=o(" \u2014 "),KO=a("a"),Ljo=o("SqueezeBertForMultipleChoice"),yjo=o(" (SqueezeBERT model)"),xjo=l(),v2=a("li"),Zge=a("strong"),$jo=o("xlm"),kjo=o(" \u2014 "),ZO=a("a"),Sjo=o("XLMForMultipleChoice"),Rjo=o(" (XLM model)"),Pjo=l(),F2=a("li"),ehe=a("strong"),Bjo=o("xlm-roberta"),Ijo=o(" \u2014 "),eV=a("a"),Njo=o("XLMRobertaForMultipleChoice"),qjo=o(" (XLM-RoBERTa model)"),jjo=l(),T2=a("li"),ohe=a("strong"),Djo=o("xlm-roberta-xl"),Gjo=o(" \u2014 "),oV=a("a"),Ojo=o("XLMRobertaXLForMultipleChoice"),Vjo=o(" (XLM-RoBERTa-XL model)"),Xjo=l(),M2=a("li"),rhe=a("strong"),zjo=o("xlnet"),Wjo=o(" \u2014 "),rV=a("a"),Qjo=o("XLNetForMultipleChoice"),Hjo=o(" (XLNet model)"),Ujo=l(),E2=a("li"),the=a("strong"),Jjo=o("yoso"),Yjo=o(" \u2014 "),tV=a("a"),Kjo=o("YosoForMultipleChoice"),Zjo=o(" (YOSO model)"),eDo=l(),C2=a("p"),oDo=o("The model is set in evaluation mode by default using "),ahe=a("code"),rDo=o("model.eval()"),tDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nhe=a("code"),aDo=o("model.train()"),nDo=l(),F(w2.$$.fragment),wje=l(),Hi=a("h2"),A2=a("a"),she=a("span"),F(QL.$$.fragment),sDo=l(),lhe=a("span"),lDo=o("AutoModelForNextSentencePrediction"),Aje=l(),Bo=a("div"),F(HL.$$.fragment),iDo=l(),Ui=a("p"),dDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aV=a("a"),cDo=o("from_pretrained()"),fDo=o(" class method or the "),nV=a("a"),mDo=o("from_config()"),gDo=o(` class
method.`),hDo=l(),UL=a("p"),pDo=o("This class cannot be instantiated directly using "),ihe=a("code"),_Do=o("__init__()"),uDo=o(" (throws an error)."),bDo=l(),ct=a("div"),F(JL.$$.fragment),vDo=l(),dhe=a("p"),FDo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),TDo=l(),Ji=a("p"),MDo=o(`Note:
Loading a model from its configuration file does `),che=a("strong"),EDo=o("not"),CDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=a("a"),wDo=o("from_pretrained()"),ADo=o(" to load the model weights."),LDo=l(),F(L2.$$.fragment),yDo=l(),to=a("div"),F(YL.$$.fragment),xDo=l(),fhe=a("p"),$Do=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kDo=l(),Ba=a("p"),SDo=o("The model class to instantiate is selected based on the "),mhe=a("code"),RDo=o("model_type"),PDo=o(` property of the config object (either
passed as an argument or loaded from `),ghe=a("code"),BDo=o("pretrained_model_name_or_path"),IDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hhe=a("code"),NDo=o("pretrained_model_name_or_path"),qDo=o(":"),jDo=l(),Yr=a("ul"),y2=a("li"),phe=a("strong"),DDo=o("bert"),GDo=o(" \u2014 "),lV=a("a"),ODo=o("BertForNextSentencePrediction"),VDo=o(" (BERT model)"),XDo=l(),x2=a("li"),_he=a("strong"),zDo=o("fnet"),WDo=o(" \u2014 "),iV=a("a"),QDo=o("FNetForNextSentencePrediction"),HDo=o(" (FNet model)"),UDo=l(),$2=a("li"),uhe=a("strong"),JDo=o("megatron-bert"),YDo=o(" \u2014 "),dV=a("a"),KDo=o("MegatronBertForNextSentencePrediction"),ZDo=o(" (Megatron-BERT model)"),eGo=l(),k2=a("li"),bhe=a("strong"),oGo=o("mobilebert"),rGo=o(" \u2014 "),cV=a("a"),tGo=o("MobileBertForNextSentencePrediction"),aGo=o(" (MobileBERT model)"),nGo=l(),S2=a("li"),vhe=a("strong"),sGo=o("qdqbert"),lGo=o(" \u2014 "),fV=a("a"),iGo=o("QDQBertForNextSentencePrediction"),dGo=o(" (QDQBert model)"),cGo=l(),R2=a("p"),fGo=o("The model is set in evaluation mode by default using "),Fhe=a("code"),mGo=o("model.eval()"),gGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=a("code"),hGo=o("model.train()"),pGo=l(),F(P2.$$.fragment),Lje=l(),Yi=a("h2"),B2=a("a"),Mhe=a("span"),F(KL.$$.fragment),_Go=l(),Ehe=a("span"),uGo=o("AutoModelForTokenClassification"),yje=l(),Io=a("div"),F(ZL.$$.fragment),bGo=l(),Ki=a("p"),vGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mV=a("a"),FGo=o("from_pretrained()"),TGo=o(" class method or the "),gV=a("a"),MGo=o("from_config()"),EGo=o(` class
method.`),CGo=l(),ey=a("p"),wGo=o("This class cannot be instantiated directly using "),Che=a("code"),AGo=o("__init__()"),LGo=o(" (throws an error)."),yGo=l(),ft=a("div"),F(oy.$$.fragment),xGo=l(),whe=a("p"),$Go=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kGo=l(),Zi=a("p"),SGo=o(`Note:
Loading a model from its configuration file does `),Ahe=a("strong"),RGo=o("not"),PGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=a("a"),BGo=o("from_pretrained()"),IGo=o(" to load the model weights."),NGo=l(),F(I2.$$.fragment),qGo=l(),ao=a("div"),F(ry.$$.fragment),jGo=l(),Lhe=a("p"),DGo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),GGo=l(),Ia=a("p"),OGo=o("The model class to instantiate is selected based on the "),yhe=a("code"),VGo=o("model_type"),XGo=o(` property of the config object (either
passed as an argument or loaded from `),xhe=a("code"),zGo=o("pretrained_model_name_or_path"),WGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=a("code"),QGo=o("pretrained_model_name_or_path"),HGo=o(":"),UGo=l(),U=a("ul"),N2=a("li"),khe=a("strong"),JGo=o("albert"),YGo=o(" \u2014 "),pV=a("a"),KGo=o("AlbertForTokenClassification"),ZGo=o(" (ALBERT model)"),eOo=l(),q2=a("li"),She=a("strong"),oOo=o("bert"),rOo=o(" \u2014 "),_V=a("a"),tOo=o("BertForTokenClassification"),aOo=o(" (BERT model)"),nOo=l(),j2=a("li"),Rhe=a("strong"),sOo=o("big_bird"),lOo=o(" \u2014 "),uV=a("a"),iOo=o("BigBirdForTokenClassification"),dOo=o(" (BigBird model)"),cOo=l(),D2=a("li"),Phe=a("strong"),fOo=o("camembert"),mOo=o(" \u2014 "),bV=a("a"),gOo=o("CamembertForTokenClassification"),hOo=o(" (CamemBERT model)"),pOo=l(),G2=a("li"),Bhe=a("strong"),_Oo=o("canine"),uOo=o(" \u2014 "),vV=a("a"),bOo=o("CanineForTokenClassification"),vOo=o(" (CANINE model)"),FOo=l(),O2=a("li"),Ihe=a("strong"),TOo=o("convbert"),MOo=o(" \u2014 "),FV=a("a"),EOo=o("ConvBertForTokenClassification"),COo=o(" (ConvBERT model)"),wOo=l(),V2=a("li"),Nhe=a("strong"),AOo=o("data2vec-text"),LOo=o(" \u2014 "),TV=a("a"),yOo=o("Data2VecTextForTokenClassification"),xOo=o(" (Data2VecText model)"),$Oo=l(),X2=a("li"),qhe=a("strong"),kOo=o("deberta"),SOo=o(" \u2014 "),MV=a("a"),ROo=o("DebertaForTokenClassification"),POo=o(" (DeBERTa model)"),BOo=l(),z2=a("li"),jhe=a("strong"),IOo=o("deberta-v2"),NOo=o(" \u2014 "),EV=a("a"),qOo=o("DebertaV2ForTokenClassification"),jOo=o(" (DeBERTa-v2 model)"),DOo=l(),W2=a("li"),Dhe=a("strong"),GOo=o("distilbert"),OOo=o(" \u2014 "),CV=a("a"),VOo=o("DistilBertForTokenClassification"),XOo=o(" (DistilBERT model)"),zOo=l(),Q2=a("li"),Ghe=a("strong"),WOo=o("electra"),QOo=o(" \u2014 "),wV=a("a"),HOo=o("ElectraForTokenClassification"),UOo=o(" (ELECTRA model)"),JOo=l(),H2=a("li"),Ohe=a("strong"),YOo=o("flaubert"),KOo=o(" \u2014 "),AV=a("a"),ZOo=o("FlaubertForTokenClassification"),eVo=o(" (FlauBERT model)"),oVo=l(),U2=a("li"),Vhe=a("strong"),rVo=o("fnet"),tVo=o(" \u2014 "),LV=a("a"),aVo=o("FNetForTokenClassification"),nVo=o(" (FNet model)"),sVo=l(),J2=a("li"),Xhe=a("strong"),lVo=o("funnel"),iVo=o(" \u2014 "),yV=a("a"),dVo=o("FunnelForTokenClassification"),cVo=o(" (Funnel Transformer model)"),fVo=l(),Y2=a("li"),zhe=a("strong"),mVo=o("gpt2"),gVo=o(" \u2014 "),xV=a("a"),hVo=o("GPT2ForTokenClassification"),pVo=o(" (OpenAI GPT-2 model)"),_Vo=l(),K2=a("li"),Whe=a("strong"),uVo=o("ibert"),bVo=o(" \u2014 "),$V=a("a"),vVo=o("IBertForTokenClassification"),FVo=o(" (I-BERT model)"),TVo=l(),Z2=a("li"),Qhe=a("strong"),MVo=o("layoutlm"),EVo=o(" \u2014 "),kV=a("a"),CVo=o("LayoutLMForTokenClassification"),wVo=o(" (LayoutLM model)"),AVo=l(),ev=a("li"),Hhe=a("strong"),LVo=o("layoutlmv2"),yVo=o(" \u2014 "),SV=a("a"),xVo=o("LayoutLMv2ForTokenClassification"),$Vo=o(" (LayoutLMv2 model)"),kVo=l(),ov=a("li"),Uhe=a("strong"),SVo=o("layoutlmv3"),RVo=o(" \u2014 "),RV=a("a"),PVo=o("LayoutLMv3ForTokenClassification"),BVo=o(" (LayoutLMv3 model)"),IVo=l(),rv=a("li"),Jhe=a("strong"),NVo=o("longformer"),qVo=o(" \u2014 "),PV=a("a"),jVo=o("LongformerForTokenClassification"),DVo=o(" (Longformer model)"),GVo=l(),tv=a("li"),Yhe=a("strong"),OVo=o("megatron-bert"),VVo=o(" \u2014 "),BV=a("a"),XVo=o("MegatronBertForTokenClassification"),zVo=o(" (Megatron-BERT model)"),WVo=l(),av=a("li"),Khe=a("strong"),QVo=o("mobilebert"),HVo=o(" \u2014 "),IV=a("a"),UVo=o("MobileBertForTokenClassification"),JVo=o(" (MobileBERT model)"),YVo=l(),nv=a("li"),Zhe=a("strong"),KVo=o("mpnet"),ZVo=o(" \u2014 "),NV=a("a"),eXo=o("MPNetForTokenClassification"),oXo=o(" (MPNet model)"),rXo=l(),sv=a("li"),epe=a("strong"),tXo=o("nystromformer"),aXo=o(" \u2014 "),qV=a("a"),nXo=o("NystromformerForTokenClassification"),sXo=o(" (Nystr\xF6mformer model)"),lXo=l(),lv=a("li"),ope=a("strong"),iXo=o("qdqbert"),dXo=o(" \u2014 "),jV=a("a"),cXo=o("QDQBertForTokenClassification"),fXo=o(" (QDQBert model)"),mXo=l(),iv=a("li"),rpe=a("strong"),gXo=o("rembert"),hXo=o(" \u2014 "),DV=a("a"),pXo=o("RemBertForTokenClassification"),_Xo=o(" (RemBERT model)"),uXo=l(),dv=a("li"),tpe=a("strong"),bXo=o("roberta"),vXo=o(" \u2014 "),GV=a("a"),FXo=o("RobertaForTokenClassification"),TXo=o(" (RoBERTa model)"),MXo=l(),cv=a("li"),ape=a("strong"),EXo=o("roformer"),CXo=o(" \u2014 "),OV=a("a"),wXo=o("RoFormerForTokenClassification"),AXo=o(" (RoFormer model)"),LXo=l(),fv=a("li"),npe=a("strong"),yXo=o("squeezebert"),xXo=o(" \u2014 "),VV=a("a"),$Xo=o("SqueezeBertForTokenClassification"),kXo=o(" (SqueezeBERT model)"),SXo=l(),mv=a("li"),spe=a("strong"),RXo=o("xlm"),PXo=o(" \u2014 "),XV=a("a"),BXo=o("XLMForTokenClassification"),IXo=o(" (XLM model)"),NXo=l(),gv=a("li"),lpe=a("strong"),qXo=o("xlm-roberta"),jXo=o(" \u2014 "),zV=a("a"),DXo=o("XLMRobertaForTokenClassification"),GXo=o(" (XLM-RoBERTa model)"),OXo=l(),hv=a("li"),ipe=a("strong"),VXo=o("xlm-roberta-xl"),XXo=o(" \u2014 "),WV=a("a"),zXo=o("XLMRobertaXLForTokenClassification"),WXo=o(" (XLM-RoBERTa-XL model)"),QXo=l(),pv=a("li"),dpe=a("strong"),HXo=o("xlnet"),UXo=o(" \u2014 "),QV=a("a"),JXo=o("XLNetForTokenClassification"),YXo=o(" (XLNet model)"),KXo=l(),_v=a("li"),cpe=a("strong"),ZXo=o("yoso"),ezo=o(" \u2014 "),HV=a("a"),ozo=o("YosoForTokenClassification"),rzo=o(" (YOSO model)"),tzo=l(),uv=a("p"),azo=o("The model is set in evaluation mode by default using "),fpe=a("code"),nzo=o("model.eval()"),szo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=a("code"),lzo=o("model.train()"),izo=l(),F(bv.$$.fragment),xje=l(),ed=a("h2"),vv=a("a"),gpe=a("span"),F(ty.$$.fragment),dzo=l(),hpe=a("span"),czo=o("AutoModelForQuestionAnswering"),$je=l(),No=a("div"),F(ay.$$.fragment),fzo=l(),od=a("p"),mzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),UV=a("a"),gzo=o("from_pretrained()"),hzo=o(" class method or the "),JV=a("a"),pzo=o("from_config()"),_zo=o(` class
method.`),uzo=l(),ny=a("p"),bzo=o("This class cannot be instantiated directly using "),ppe=a("code"),vzo=o("__init__()"),Fzo=o(" (throws an error)."),Tzo=l(),mt=a("div"),F(sy.$$.fragment),Mzo=l(),_pe=a("p"),Ezo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Czo=l(),rd=a("p"),wzo=o(`Note:
Loading a model from its configuration file does `),upe=a("strong"),Azo=o("not"),Lzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),yzo=o("from_pretrained()"),xzo=o(" to load the model weights."),$zo=l(),F(Fv.$$.fragment),kzo=l(),no=a("div"),F(ly.$$.fragment),Szo=l(),bpe=a("p"),Rzo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Pzo=l(),Na=a("p"),Bzo=o("The model class to instantiate is selected based on the "),vpe=a("code"),Izo=o("model_type"),Nzo=o(` property of the config object (either
passed as an argument or loaded from `),Fpe=a("code"),qzo=o("pretrained_model_name_or_path"),jzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=a("code"),Dzo=o("pretrained_model_name_or_path"),Gzo=o(":"),Ozo=l(),V=a("ul"),Tv=a("li"),Mpe=a("strong"),Vzo=o("albert"),Xzo=o(" \u2014 "),KV=a("a"),zzo=o("AlbertForQuestionAnswering"),Wzo=o(" (ALBERT model)"),Qzo=l(),Mv=a("li"),Epe=a("strong"),Hzo=o("bart"),Uzo=o(" \u2014 "),ZV=a("a"),Jzo=o("BartForQuestionAnswering"),Yzo=o(" (BART model)"),Kzo=l(),Ev=a("li"),Cpe=a("strong"),Zzo=o("bert"),eWo=o(" \u2014 "),eX=a("a"),oWo=o("BertForQuestionAnswering"),rWo=o(" (BERT model)"),tWo=l(),Cv=a("li"),wpe=a("strong"),aWo=o("big_bird"),nWo=o(" \u2014 "),oX=a("a"),sWo=o("BigBirdForQuestionAnswering"),lWo=o(" (BigBird model)"),iWo=l(),wv=a("li"),Ape=a("strong"),dWo=o("bigbird_pegasus"),cWo=o(" \u2014 "),rX=a("a"),fWo=o("BigBirdPegasusForQuestionAnswering"),mWo=o(" (BigBird-Pegasus model)"),gWo=l(),Av=a("li"),Lpe=a("strong"),hWo=o("camembert"),pWo=o(" \u2014 "),tX=a("a"),_Wo=o("CamembertForQuestionAnswering"),uWo=o(" (CamemBERT model)"),bWo=l(),Lv=a("li"),ype=a("strong"),vWo=o("canine"),FWo=o(" \u2014 "),aX=a("a"),TWo=o("CanineForQuestionAnswering"),MWo=o(" (CANINE model)"),EWo=l(),yv=a("li"),xpe=a("strong"),CWo=o("convbert"),wWo=o(" \u2014 "),nX=a("a"),AWo=o("ConvBertForQuestionAnswering"),LWo=o(" (ConvBERT model)"),yWo=l(),xv=a("li"),$pe=a("strong"),xWo=o("data2vec-text"),$Wo=o(" \u2014 "),sX=a("a"),kWo=o("Data2VecTextForQuestionAnswering"),SWo=o(" (Data2VecText model)"),RWo=l(),$v=a("li"),kpe=a("strong"),PWo=o("deberta"),BWo=o(" \u2014 "),lX=a("a"),IWo=o("DebertaForQuestionAnswering"),NWo=o(" (DeBERTa model)"),qWo=l(),kv=a("li"),Spe=a("strong"),jWo=o("deberta-v2"),DWo=o(" \u2014 "),iX=a("a"),GWo=o("DebertaV2ForQuestionAnswering"),OWo=o(" (DeBERTa-v2 model)"),VWo=l(),Sv=a("li"),Rpe=a("strong"),XWo=o("distilbert"),zWo=o(" \u2014 "),dX=a("a"),WWo=o("DistilBertForQuestionAnswering"),QWo=o(" (DistilBERT model)"),HWo=l(),Rv=a("li"),Ppe=a("strong"),UWo=o("electra"),JWo=o(" \u2014 "),cX=a("a"),YWo=o("ElectraForQuestionAnswering"),KWo=o(" (ELECTRA model)"),ZWo=l(),Pv=a("li"),Bpe=a("strong"),eQo=o("flaubert"),oQo=o(" \u2014 "),fX=a("a"),rQo=o("FlaubertForQuestionAnsweringSimple"),tQo=o(" (FlauBERT model)"),aQo=l(),Bv=a("li"),Ipe=a("strong"),nQo=o("fnet"),sQo=o(" \u2014 "),mX=a("a"),lQo=o("FNetForQuestionAnswering"),iQo=o(" (FNet model)"),dQo=l(),Iv=a("li"),Npe=a("strong"),cQo=o("funnel"),fQo=o(" \u2014 "),gX=a("a"),mQo=o("FunnelForQuestionAnswering"),gQo=o(" (Funnel Transformer model)"),hQo=l(),Nv=a("li"),qpe=a("strong"),pQo=o("gptj"),_Qo=o(" \u2014 "),hX=a("a"),uQo=o("GPTJForQuestionAnswering"),bQo=o(" (GPT-J model)"),vQo=l(),qv=a("li"),jpe=a("strong"),FQo=o("ibert"),TQo=o(" \u2014 "),pX=a("a"),MQo=o("IBertForQuestionAnswering"),EQo=o(" (I-BERT model)"),CQo=l(),jv=a("li"),Dpe=a("strong"),wQo=o("layoutlmv2"),AQo=o(" \u2014 "),_X=a("a"),LQo=o("LayoutLMv2ForQuestionAnswering"),yQo=o(" (LayoutLMv2 model)"),xQo=l(),Dv=a("li"),Gpe=a("strong"),$Qo=o("layoutlmv3"),kQo=o(" \u2014 "),uX=a("a"),SQo=o("LayoutLMv3ForQuestionAnswering"),RQo=o(" (LayoutLMv3 model)"),PQo=l(),Gv=a("li"),Ope=a("strong"),BQo=o("led"),IQo=o(" \u2014 "),bX=a("a"),NQo=o("LEDForQuestionAnswering"),qQo=o(" (LED model)"),jQo=l(),Ov=a("li"),Vpe=a("strong"),DQo=o("longformer"),GQo=o(" \u2014 "),vX=a("a"),OQo=o("LongformerForQuestionAnswering"),VQo=o(" (Longformer model)"),XQo=l(),Vv=a("li"),Xpe=a("strong"),zQo=o("lxmert"),WQo=o(" \u2014 "),FX=a("a"),QQo=o("LxmertForQuestionAnswering"),HQo=o(" (LXMERT model)"),UQo=l(),Xv=a("li"),zpe=a("strong"),JQo=o("mbart"),YQo=o(" \u2014 "),TX=a("a"),KQo=o("MBartForQuestionAnswering"),ZQo=o(" (mBART model)"),eHo=l(),zv=a("li"),Wpe=a("strong"),oHo=o("megatron-bert"),rHo=o(" \u2014 "),MX=a("a"),tHo=o("MegatronBertForQuestionAnswering"),aHo=o(" (Megatron-BERT model)"),nHo=l(),Wv=a("li"),Qpe=a("strong"),sHo=o("mobilebert"),lHo=o(" \u2014 "),EX=a("a"),iHo=o("MobileBertForQuestionAnswering"),dHo=o(" (MobileBERT model)"),cHo=l(),Qv=a("li"),Hpe=a("strong"),fHo=o("mpnet"),mHo=o(" \u2014 "),CX=a("a"),gHo=o("MPNetForQuestionAnswering"),hHo=o(" (MPNet model)"),pHo=l(),Hv=a("li"),Upe=a("strong"),_Ho=o("nystromformer"),uHo=o(" \u2014 "),wX=a("a"),bHo=o("NystromformerForQuestionAnswering"),vHo=o(" (Nystr\xF6mformer model)"),FHo=l(),Uv=a("li"),Jpe=a("strong"),THo=o("qdqbert"),MHo=o(" \u2014 "),AX=a("a"),EHo=o("QDQBertForQuestionAnswering"),CHo=o(" (QDQBert model)"),wHo=l(),Jv=a("li"),Ype=a("strong"),AHo=o("reformer"),LHo=o(" \u2014 "),LX=a("a"),yHo=o("ReformerForQuestionAnswering"),xHo=o(" (Reformer model)"),$Ho=l(),Yv=a("li"),Kpe=a("strong"),kHo=o("rembert"),SHo=o(" \u2014 "),yX=a("a"),RHo=o("RemBertForQuestionAnswering"),PHo=o(" (RemBERT model)"),BHo=l(),Kv=a("li"),Zpe=a("strong"),IHo=o("roberta"),NHo=o(" \u2014 "),xX=a("a"),qHo=o("RobertaForQuestionAnswering"),jHo=o(" (RoBERTa model)"),DHo=l(),Zv=a("li"),e_e=a("strong"),GHo=o("roformer"),OHo=o(" \u2014 "),$X=a("a"),VHo=o("RoFormerForQuestionAnswering"),XHo=o(" (RoFormer model)"),zHo=l(),e3=a("li"),o_e=a("strong"),WHo=o("splinter"),QHo=o(" \u2014 "),kX=a("a"),HHo=o("SplinterForQuestionAnswering"),UHo=o(" (Splinter model)"),JHo=l(),o3=a("li"),r_e=a("strong"),YHo=o("squeezebert"),KHo=o(" \u2014 "),SX=a("a"),ZHo=o("SqueezeBertForQuestionAnswering"),eUo=o(" (SqueezeBERT model)"),oUo=l(),r3=a("li"),t_e=a("strong"),rUo=o("xlm"),tUo=o(" \u2014 "),RX=a("a"),aUo=o("XLMForQuestionAnsweringSimple"),nUo=o(" (XLM model)"),sUo=l(),t3=a("li"),a_e=a("strong"),lUo=o("xlm-roberta"),iUo=o(" \u2014 "),PX=a("a"),dUo=o("XLMRobertaForQuestionAnswering"),cUo=o(" (XLM-RoBERTa model)"),fUo=l(),a3=a("li"),n_e=a("strong"),mUo=o("xlm-roberta-xl"),gUo=o(" \u2014 "),BX=a("a"),hUo=o("XLMRobertaXLForQuestionAnswering"),pUo=o(" (XLM-RoBERTa-XL model)"),_Uo=l(),n3=a("li"),s_e=a("strong"),uUo=o("xlnet"),bUo=o(" \u2014 "),IX=a("a"),vUo=o("XLNetForQuestionAnsweringSimple"),FUo=o(" (XLNet model)"),TUo=l(),s3=a("li"),l_e=a("strong"),MUo=o("yoso"),EUo=o(" \u2014 "),NX=a("a"),CUo=o("YosoForQuestionAnswering"),wUo=o(" (YOSO model)"),AUo=l(),l3=a("p"),LUo=o("The model is set in evaluation mode by default using "),i_e=a("code"),yUo=o("model.eval()"),xUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d_e=a("code"),$Uo=o("model.train()"),kUo=l(),F(i3.$$.fragment),kje=l(),td=a("h2"),d3=a("a"),c_e=a("span"),F(iy.$$.fragment),SUo=l(),f_e=a("span"),RUo=o("AutoModelForTableQuestionAnswering"),Sje=l(),qo=a("div"),F(dy.$$.fragment),PUo=l(),ad=a("p"),BUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),qX=a("a"),IUo=o("from_pretrained()"),NUo=o(" class method or the "),jX=a("a"),qUo=o("from_config()"),jUo=o(` class
method.`),DUo=l(),cy=a("p"),GUo=o("This class cannot be instantiated directly using "),m_e=a("code"),OUo=o("__init__()"),VUo=o(" (throws an error)."),XUo=l(),gt=a("div"),F(fy.$$.fragment),zUo=l(),g_e=a("p"),WUo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),QUo=l(),nd=a("p"),HUo=o(`Note:
Loading a model from its configuration file does `),h_e=a("strong"),UUo=o("not"),JUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),YUo=o("from_pretrained()"),KUo=o(" to load the model weights."),ZUo=l(),F(c3.$$.fragment),eJo=l(),so=a("div"),F(my.$$.fragment),oJo=l(),p_e=a("p"),rJo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tJo=l(),qa=a("p"),aJo=o("The model class to instantiate is selected based on the "),__e=a("code"),nJo=o("model_type"),sJo=o(` property of the config object (either
passed as an argument or loaded from `),u_e=a("code"),lJo=o("pretrained_model_name_or_path"),iJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=a("code"),dJo=o("pretrained_model_name_or_path"),cJo=o(":"),fJo=l(),v_e=a("ul"),f3=a("li"),F_e=a("strong"),mJo=o("tapas"),gJo=o(" \u2014 "),GX=a("a"),hJo=o("TapasForQuestionAnswering"),pJo=o(" (TAPAS model)"),_Jo=l(),m3=a("p"),uJo=o("The model is set in evaluation mode by default using "),T_e=a("code"),bJo=o("model.eval()"),vJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M_e=a("code"),FJo=o("model.train()"),TJo=l(),F(g3.$$.fragment),Rje=l(),sd=a("h2"),h3=a("a"),E_e=a("span"),F(gy.$$.fragment),MJo=l(),C_e=a("span"),EJo=o("AutoModelForImageClassification"),Pje=l(),jo=a("div"),F(hy.$$.fragment),CJo=l(),ld=a("p"),wJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OX=a("a"),AJo=o("from_pretrained()"),LJo=o(" class method or the "),VX=a("a"),yJo=o("from_config()"),xJo=o(` class
method.`),$Jo=l(),py=a("p"),kJo=o("This class cannot be instantiated directly using "),w_e=a("code"),SJo=o("__init__()"),RJo=o(" (throws an error)."),PJo=l(),ht=a("div"),F(_y.$$.fragment),BJo=l(),A_e=a("p"),IJo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NJo=l(),id=a("p"),qJo=o(`Note:
Loading a model from its configuration file does `),L_e=a("strong"),jJo=o("not"),DJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),GJo=o("from_pretrained()"),OJo=o(" to load the model weights."),VJo=l(),F(p3.$$.fragment),XJo=l(),lo=a("div"),F(uy.$$.fragment),zJo=l(),y_e=a("p"),WJo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QJo=l(),ja=a("p"),HJo=o("The model class to instantiate is selected based on the "),x_e=a("code"),UJo=o("model_type"),JJo=o(` property of the config object (either
passed as an argument or loaded from `),$_e=a("code"),YJo=o("pretrained_model_name_or_path"),KJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=a("code"),ZJo=o("pretrained_model_name_or_path"),eYo=o(":"),oYo=l(),ve=a("ul"),_3=a("li"),S_e=a("strong"),rYo=o("beit"),tYo=o(" \u2014 "),zX=a("a"),aYo=o("BeitForImageClassification"),nYo=o(" (BEiT model)"),sYo=l(),u3=a("li"),R_e=a("strong"),lYo=o("convnext"),iYo=o(" \u2014 "),WX=a("a"),dYo=o("ConvNextForImageClassification"),cYo=o(" (ConvNeXT model)"),fYo=l(),b3=a("li"),P_e=a("strong"),mYo=o("cvt"),gYo=o(" \u2014 "),QX=a("a"),hYo=o("CvtForImageClassification"),pYo=o(" (CvT model)"),_Yo=l(),v3=a("li"),B_e=a("strong"),uYo=o("data2vec-vision"),bYo=o(" \u2014 "),HX=a("a"),vYo=o("Data2VecVisionForImageClassification"),FYo=o(" (Data2VecVision model)"),TYo=l(),Is=a("li"),I_e=a("strong"),MYo=o("deit"),EYo=o(" \u2014 "),UX=a("a"),CYo=o("DeiTForImageClassification"),wYo=o(" or "),JX=a("a"),AYo=o("DeiTForImageClassificationWithTeacher"),LYo=o(" (DeiT model)"),yYo=l(),F3=a("li"),N_e=a("strong"),xYo=o("imagegpt"),$Yo=o(" \u2014 "),YX=a("a"),kYo=o("ImageGPTForImageClassification"),SYo=o(" (ImageGPT model)"),RYo=l(),Ns=a("li"),q_e=a("strong"),PYo=o("levit"),BYo=o(" \u2014 "),KX=a("a"),IYo=o("LevitForImageClassification"),NYo=o(" or "),ZX=a("a"),qYo=o("LevitForImageClassificationWithTeacher"),jYo=o(" (LeViT model)"),DYo=l(),pt=a("li"),j_e=a("strong"),GYo=o("perceiver"),OYo=o(" \u2014 "),ez=a("a"),VYo=o("PerceiverForImageClassificationLearned"),XYo=o(" or "),oz=a("a"),zYo=o("PerceiverForImageClassificationFourier"),WYo=o(" or "),rz=a("a"),QYo=o("PerceiverForImageClassificationConvProcessing"),HYo=o(" (Perceiver model)"),UYo=l(),T3=a("li"),D_e=a("strong"),JYo=o("poolformer"),YYo=o(" \u2014 "),tz=a("a"),KYo=o("PoolFormerForImageClassification"),ZYo=o(" (PoolFormer model)"),eKo=l(),M3=a("li"),G_e=a("strong"),oKo=o("regnet"),rKo=o(" \u2014 "),az=a("a"),tKo=o("RegNetForImageClassification"),aKo=o(" (RegNet model)"),nKo=l(),E3=a("li"),O_e=a("strong"),sKo=o("resnet"),lKo=o(" \u2014 "),nz=a("a"),iKo=o("ResNetForImageClassification"),dKo=o(" (ResNet model)"),cKo=l(),C3=a("li"),V_e=a("strong"),fKo=o("segformer"),mKo=o(" \u2014 "),sz=a("a"),gKo=o("SegformerForImageClassification"),hKo=o(" (SegFormer model)"),pKo=l(),w3=a("li"),X_e=a("strong"),_Ko=o("swin"),uKo=o(" \u2014 "),lz=a("a"),bKo=o("SwinForImageClassification"),vKo=o(" (Swin Transformer model)"),FKo=l(),A3=a("li"),z_e=a("strong"),TKo=o("van"),MKo=o(" \u2014 "),iz=a("a"),EKo=o("VanForImageClassification"),CKo=o(" (VAN model)"),wKo=l(),L3=a("li"),W_e=a("strong"),AKo=o("vit"),LKo=o(" \u2014 "),dz=a("a"),yKo=o("ViTForImageClassification"),xKo=o(" (ViT model)"),$Ko=l(),y3=a("p"),kKo=o("The model is set in evaluation mode by default using "),Q_e=a("code"),SKo=o("model.eval()"),RKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=a("code"),PKo=o("model.train()"),BKo=l(),F(x3.$$.fragment),Bje=l(),dd=a("h2"),$3=a("a"),U_e=a("span"),F(by.$$.fragment),IKo=l(),J_e=a("span"),NKo=o("AutoModelForVision2Seq"),Ije=l(),Do=a("div"),F(vy.$$.fragment),qKo=l(),cd=a("p"),jKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cz=a("a"),DKo=o("from_pretrained()"),GKo=o(" class method or the "),fz=a("a"),OKo=o("from_config()"),VKo=o(` class
method.`),XKo=l(),Fy=a("p"),zKo=o("This class cannot be instantiated directly using "),Y_e=a("code"),WKo=o("__init__()"),QKo=o(" (throws an error)."),HKo=l(),_t=a("div"),F(Ty.$$.fragment),UKo=l(),K_e=a("p"),JKo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),YKo=l(),fd=a("p"),KKo=o(`Note:
Loading a model from its configuration file does `),Z_e=a("strong"),ZKo=o("not"),eZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=a("a"),oZo=o("from_pretrained()"),rZo=o(" to load the model weights."),tZo=l(),F(k3.$$.fragment),aZo=l(),io=a("div"),F(My.$$.fragment),nZo=l(),eue=a("p"),sZo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lZo=l(),Da=a("p"),iZo=o("The model class to instantiate is selected based on the "),oue=a("code"),dZo=o("model_type"),cZo=o(` property of the config object (either
passed as an argument or loaded from `),rue=a("code"),fZo=o("pretrained_model_name_or_path"),mZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=a("code"),gZo=o("pretrained_model_name_or_path"),hZo=o(":"),pZo=l(),aue=a("ul"),S3=a("li"),nue=a("strong"),_Zo=o("vision-encoder-decoder"),uZo=o(" \u2014 "),gz=a("a"),bZo=o("VisionEncoderDecoderModel"),vZo=o(" (Vision Encoder decoder model)"),FZo=l(),R3=a("p"),TZo=o("The model is set in evaluation mode by default using "),sue=a("code"),MZo=o("model.eval()"),EZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=a("code"),CZo=o("model.train()"),wZo=l(),F(P3.$$.fragment),Nje=l(),md=a("h2"),B3=a("a"),iue=a("span"),F(Ey.$$.fragment),AZo=l(),due=a("span"),LZo=o("AutoModelForAudioClassification"),qje=l(),Go=a("div"),F(Cy.$$.fragment),yZo=l(),gd=a("p"),xZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),hz=a("a"),$Zo=o("from_pretrained()"),kZo=o(" class method or the "),pz=a("a"),SZo=o("from_config()"),RZo=o(` class
method.`),PZo=l(),wy=a("p"),BZo=o("This class cannot be instantiated directly using "),cue=a("code"),IZo=o("__init__()"),NZo=o(" (throws an error)."),qZo=l(),ut=a("div"),F(Ay.$$.fragment),jZo=l(),fue=a("p"),DZo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),GZo=l(),hd=a("p"),OZo=o(`Note:
Loading a model from its configuration file does `),mue=a("strong"),VZo=o("not"),XZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),zZo=o("from_pretrained()"),WZo=o(" to load the model weights."),QZo=l(),F(I3.$$.fragment),HZo=l(),co=a("div"),F(Ly.$$.fragment),UZo=l(),gue=a("p"),JZo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),YZo=l(),Ga=a("p"),KZo=o("The model class to instantiate is selected based on the "),hue=a("code"),ZZo=o("model_type"),eer=o(` property of the config object (either
passed as an argument or loaded from `),pue=a("code"),oer=o("pretrained_model_name_or_path"),rer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ue=a("code"),ter=o("pretrained_model_name_or_path"),aer=o(":"),ner=l(),Se=a("ul"),N3=a("li"),uue=a("strong"),ser=o("data2vec-audio"),ler=o(" \u2014 "),uz=a("a"),ier=o("Data2VecAudioForSequenceClassification"),der=o(" (Data2VecAudio model)"),cer=l(),q3=a("li"),bue=a("strong"),fer=o("hubert"),mer=o(" \u2014 "),bz=a("a"),ger=o("HubertForSequenceClassification"),her=o(" (Hubert model)"),per=l(),j3=a("li"),vue=a("strong"),_er=o("sew"),uer=o(" \u2014 "),vz=a("a"),ber=o("SEWForSequenceClassification"),ver=o(" (SEW model)"),Fer=l(),D3=a("li"),Fue=a("strong"),Ter=o("sew-d"),Mer=o(" \u2014 "),Fz=a("a"),Eer=o("SEWDForSequenceClassification"),Cer=o(" (SEW-D model)"),wer=l(),G3=a("li"),Tue=a("strong"),Aer=o("unispeech"),Ler=o(" \u2014 "),Tz=a("a"),yer=o("UniSpeechForSequenceClassification"),xer=o(" (UniSpeech model)"),$er=l(),O3=a("li"),Mue=a("strong"),ker=o("unispeech-sat"),Ser=o(" \u2014 "),Mz=a("a"),Rer=o("UniSpeechSatForSequenceClassification"),Per=o(" (UniSpeechSat model)"),Ber=l(),V3=a("li"),Eue=a("strong"),Ier=o("wav2vec2"),Ner=o(" \u2014 "),Ez=a("a"),qer=o("Wav2Vec2ForSequenceClassification"),jer=o(" (Wav2Vec2 model)"),Der=l(),X3=a("li"),Cue=a("strong"),Ger=o("wav2vec2-conformer"),Oer=o(" \u2014 "),Cz=a("a"),Ver=o("Wav2Vec2ConformerForSequenceClassification"),Xer=o(" (Wav2Vec2-Conformer model)"),zer=l(),z3=a("li"),wue=a("strong"),Wer=o("wavlm"),Qer=o(" \u2014 "),wz=a("a"),Her=o("WavLMForSequenceClassification"),Uer=o(" (WavLM model)"),Jer=l(),W3=a("p"),Yer=o("The model is set in evaluation mode by default using "),Aue=a("code"),Ker=o("model.eval()"),Zer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=a("code"),eor=o("model.train()"),oor=l(),F(Q3.$$.fragment),jje=l(),pd=a("h2"),H3=a("a"),yue=a("span"),F(yy.$$.fragment),ror=l(),xue=a("span"),tor=o("AutoModelForAudioFrameClassification"),Dje=l(),Oo=a("div"),F(xy.$$.fragment),aor=l(),_d=a("p"),nor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Az=a("a"),sor=o("from_pretrained()"),lor=o(" class method or the "),Lz=a("a"),ior=o("from_config()"),dor=o(` class
method.`),cor=l(),$y=a("p"),mor=o("This class cannot be instantiated directly using "),$ue=a("code"),gor=o("__init__()"),hor=o(" (throws an error)."),por=l(),bt=a("div"),F(ky.$$.fragment),_or=l(),kue=a("p"),uor=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),bor=l(),ud=a("p"),vor=o(`Note:
Loading a model from its configuration file does `),Sue=a("strong"),For=o("not"),Tor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),Mor=o("from_pretrained()"),Eor=o(" to load the model weights."),Cor=l(),F(U3.$$.fragment),wor=l(),fo=a("div"),F(Sy.$$.fragment),Aor=l(),Rue=a("p"),Lor=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),yor=l(),Oa=a("p"),xor=o("The model class to instantiate is selected based on the "),Pue=a("code"),$or=o("model_type"),kor=o(` property of the config object (either
passed as an argument or loaded from `),Bue=a("code"),Sor=o("pretrained_model_name_or_path"),Ror=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=a("code"),Por=o("pretrained_model_name_or_path"),Bor=o(":"),Ior=l(),Kr=a("ul"),J3=a("li"),Nue=a("strong"),Nor=o("data2vec-audio"),qor=o(" \u2014 "),xz=a("a"),jor=o("Data2VecAudioForAudioFrameClassification"),Dor=o(" (Data2VecAudio model)"),Gor=l(),Y3=a("li"),que=a("strong"),Oor=o("unispeech-sat"),Vor=o(" \u2014 "),$z=a("a"),Xor=o("UniSpeechSatForAudioFrameClassification"),zor=o(" (UniSpeechSat model)"),Wor=l(),K3=a("li"),jue=a("strong"),Qor=o("wav2vec2"),Hor=o(" \u2014 "),kz=a("a"),Uor=o("Wav2Vec2ForAudioFrameClassification"),Jor=o(" (Wav2Vec2 model)"),Yor=l(),Z3=a("li"),Due=a("strong"),Kor=o("wav2vec2-conformer"),Zor=o(" \u2014 "),Sz=a("a"),err=o("Wav2Vec2ConformerForAudioFrameClassification"),orr=o(" (Wav2Vec2-Conformer model)"),rrr=l(),eF=a("li"),Gue=a("strong"),trr=o("wavlm"),arr=o(" \u2014 "),Rz=a("a"),nrr=o("WavLMForAudioFrameClassification"),srr=o(" (WavLM model)"),lrr=l(),oF=a("p"),irr=o("The model is set in evaluation mode by default using "),Oue=a("code"),drr=o("model.eval()"),crr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=a("code"),frr=o("model.train()"),mrr=l(),F(rF.$$.fragment),Gje=l(),bd=a("h2"),tF=a("a"),Xue=a("span"),F(Ry.$$.fragment),grr=l(),zue=a("span"),hrr=o("AutoModelForCTC"),Oje=l(),Vo=a("div"),F(Py.$$.fragment),prr=l(),vd=a("p"),_rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Pz=a("a"),urr=o("from_pretrained()"),brr=o(" class method or the "),Bz=a("a"),vrr=o("from_config()"),Frr=o(` class
method.`),Trr=l(),By=a("p"),Mrr=o("This class cannot be instantiated directly using "),Wue=a("code"),Err=o("__init__()"),Crr=o(" (throws an error)."),wrr=l(),vt=a("div"),F(Iy.$$.fragment),Arr=l(),Que=a("p"),Lrr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),yrr=l(),Fd=a("p"),xrr=o(`Note:
Loading a model from its configuration file does `),Hue=a("strong"),$rr=o("not"),krr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=a("a"),Srr=o("from_pretrained()"),Rrr=o(" to load the model weights."),Prr=l(),F(aF.$$.fragment),Brr=l(),mo=a("div"),F(Ny.$$.fragment),Irr=l(),Uue=a("p"),Nrr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),qrr=l(),Va=a("p"),jrr=o("The model class to instantiate is selected based on the "),Jue=a("code"),Drr=o("model_type"),Grr=o(` property of the config object (either
passed as an argument or loaded from `),Yue=a("code"),Orr=o("pretrained_model_name_or_path"),Vrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=a("code"),Xrr=o("pretrained_model_name_or_path"),zrr=o(":"),Wrr=l(),Re=a("ul"),nF=a("li"),Zue=a("strong"),Qrr=o("data2vec-audio"),Hrr=o(" \u2014 "),Nz=a("a"),Urr=o("Data2VecAudioForCTC"),Jrr=o(" (Data2VecAudio model)"),Yrr=l(),sF=a("li"),e4e=a("strong"),Krr=o("hubert"),Zrr=o(" \u2014 "),qz=a("a"),etr=o("HubertForCTC"),otr=o(" (Hubert model)"),rtr=l(),lF=a("li"),o4e=a("strong"),ttr=o("sew"),atr=o(" \u2014 "),jz=a("a"),ntr=o("SEWForCTC"),str=o(" (SEW model)"),ltr=l(),iF=a("li"),r4e=a("strong"),itr=o("sew-d"),dtr=o(" \u2014 "),Dz=a("a"),ctr=o("SEWDForCTC"),ftr=o(" (SEW-D model)"),mtr=l(),dF=a("li"),t4e=a("strong"),gtr=o("unispeech"),htr=o(" \u2014 "),Gz=a("a"),ptr=o("UniSpeechForCTC"),_tr=o(" (UniSpeech model)"),utr=l(),cF=a("li"),a4e=a("strong"),btr=o("unispeech-sat"),vtr=o(" \u2014 "),Oz=a("a"),Ftr=o("UniSpeechSatForCTC"),Ttr=o(" (UniSpeechSat model)"),Mtr=l(),fF=a("li"),n4e=a("strong"),Etr=o("wav2vec2"),Ctr=o(" \u2014 "),Vz=a("a"),wtr=o("Wav2Vec2ForCTC"),Atr=o(" (Wav2Vec2 model)"),Ltr=l(),mF=a("li"),s4e=a("strong"),ytr=o("wav2vec2-conformer"),xtr=o(" \u2014 "),Xz=a("a"),$tr=o("Wav2Vec2ConformerForCTC"),ktr=o(" (Wav2Vec2-Conformer model)"),Str=l(),gF=a("li"),l4e=a("strong"),Rtr=o("wavlm"),Ptr=o(" \u2014 "),zz=a("a"),Btr=o("WavLMForCTC"),Itr=o(" (WavLM model)"),Ntr=l(),hF=a("p"),qtr=o("The model is set in evaluation mode by default using "),i4e=a("code"),jtr=o("model.eval()"),Dtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d4e=a("code"),Gtr=o("model.train()"),Otr=l(),F(pF.$$.fragment),Vje=l(),Td=a("h2"),_F=a("a"),c4e=a("span"),F(qy.$$.fragment),Vtr=l(),f4e=a("span"),Xtr=o("AutoModelForSpeechSeq2Seq"),Xje=l(),Xo=a("div"),F(jy.$$.fragment),ztr=l(),Md=a("p"),Wtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Wz=a("a"),Qtr=o("from_pretrained()"),Htr=o(" class method or the "),Qz=a("a"),Utr=o("from_config()"),Jtr=o(` class
method.`),Ytr=l(),Dy=a("p"),Ktr=o("This class cannot be instantiated directly using "),m4e=a("code"),Ztr=o("__init__()"),ear=o(" (throws an error)."),oar=l(),Ft=a("div"),F(Gy.$$.fragment),rar=l(),g4e=a("p"),tar=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),aar=l(),Ed=a("p"),nar=o(`Note:
Loading a model from its configuration file does `),h4e=a("strong"),sar=o("not"),lar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=a("a"),iar=o("from_pretrained()"),dar=o(" to load the model weights."),car=l(),F(uF.$$.fragment),far=l(),go=a("div"),F(Oy.$$.fragment),mar=l(),p4e=a("p"),gar=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),har=l(),Xa=a("p"),par=o("The model class to instantiate is selected based on the "),_4e=a("code"),_ar=o("model_type"),uar=o(` property of the config object (either
passed as an argument or loaded from `),u4e=a("code"),bar=o("pretrained_model_name_or_path"),Far=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=a("code"),Tar=o("pretrained_model_name_or_path"),Mar=o(":"),Ear=l(),Vy=a("ul"),bF=a("li"),v4e=a("strong"),Car=o("speech-encoder-decoder"),war=o(" \u2014 "),Uz=a("a"),Aar=o("SpeechEncoderDecoderModel"),Lar=o(" (Speech Encoder decoder model)"),yar=l(),vF=a("li"),F4e=a("strong"),xar=o("speech_to_text"),$ar=o(" \u2014 "),Jz=a("a"),kar=o("Speech2TextForConditionalGeneration"),Sar=o(" (Speech2Text model)"),Rar=l(),FF=a("p"),Par=o("The model is set in evaluation mode by default using "),T4e=a("code"),Bar=o("model.eval()"),Iar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M4e=a("code"),Nar=o("model.train()"),qar=l(),F(TF.$$.fragment),zje=l(),Cd=a("h2"),MF=a("a"),E4e=a("span"),F(Xy.$$.fragment),jar=l(),C4e=a("span"),Dar=o("AutoModelForAudioXVector"),Wje=l(),zo=a("div"),F(zy.$$.fragment),Gar=l(),wd=a("p"),Oar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Yz=a("a"),Var=o("from_pretrained()"),Xar=o(" class method or the "),Kz=a("a"),zar=o("from_config()"),War=o(` class
method.`),Qar=l(),Wy=a("p"),Har=o("This class cannot be instantiated directly using "),w4e=a("code"),Uar=o("__init__()"),Jar=o(" (throws an error)."),Yar=l(),Tt=a("div"),F(Qy.$$.fragment),Kar=l(),A4e=a("p"),Zar=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),enr=l(),Ad=a("p"),onr=o(`Note:
Loading a model from its configuration file does `),L4e=a("strong"),rnr=o("not"),tnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=a("a"),anr=o("from_pretrained()"),nnr=o(" to load the model weights."),snr=l(),F(EF.$$.fragment),lnr=l(),ho=a("div"),F(Hy.$$.fragment),inr=l(),y4e=a("p"),dnr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),cnr=l(),za=a("p"),fnr=o("The model class to instantiate is selected based on the "),x4e=a("code"),mnr=o("model_type"),gnr=o(` property of the config object (either
passed as an argument or loaded from `),$4e=a("code"),hnr=o("pretrained_model_name_or_path"),pnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=a("code"),_nr=o("pretrained_model_name_or_path"),unr=o(":"),bnr=l(),Zr=a("ul"),CF=a("li"),S4e=a("strong"),vnr=o("data2vec-audio"),Fnr=o(" \u2014 "),eW=a("a"),Tnr=o("Data2VecAudioForXVector"),Mnr=o(" (Data2VecAudio model)"),Enr=l(),wF=a("li"),R4e=a("strong"),Cnr=o("unispeech-sat"),wnr=o(" \u2014 "),oW=a("a"),Anr=o("UniSpeechSatForXVector"),Lnr=o(" (UniSpeechSat model)"),ynr=l(),AF=a("li"),P4e=a("strong"),xnr=o("wav2vec2"),$nr=o(" \u2014 "),rW=a("a"),knr=o("Wav2Vec2ForXVector"),Snr=o(" (Wav2Vec2 model)"),Rnr=l(),LF=a("li"),B4e=a("strong"),Pnr=o("wav2vec2-conformer"),Bnr=o(" \u2014 "),tW=a("a"),Inr=o("Wav2Vec2ConformerForXVector"),Nnr=o(" (Wav2Vec2-Conformer model)"),qnr=l(),yF=a("li"),I4e=a("strong"),jnr=o("wavlm"),Dnr=o(" \u2014 "),aW=a("a"),Gnr=o("WavLMForXVector"),Onr=o(" (WavLM model)"),Vnr=l(),xF=a("p"),Xnr=o("The model is set in evaluation mode by default using "),N4e=a("code"),znr=o("model.eval()"),Wnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q4e=a("code"),Qnr=o("model.train()"),Hnr=l(),F($F.$$.fragment),Qje=l(),Ld=a("h2"),kF=a("a"),j4e=a("span"),F(Uy.$$.fragment),Unr=l(),D4e=a("span"),Jnr=o("AutoModelForMaskedImageModeling"),Hje=l(),Wo=a("div"),F(Jy.$$.fragment),Ynr=l(),yd=a("p"),Knr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),nW=a("a"),Znr=o("from_pretrained()"),esr=o(" class method or the "),sW=a("a"),osr=o("from_config()"),rsr=o(` class
method.`),tsr=l(),Yy=a("p"),asr=o("This class cannot be instantiated directly using "),G4e=a("code"),nsr=o("__init__()"),ssr=o(" (throws an error)."),lsr=l(),Mt=a("div"),F(Ky.$$.fragment),isr=l(),O4e=a("p"),dsr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),csr=l(),xd=a("p"),fsr=o(`Note:
Loading a model from its configuration file does `),V4e=a("strong"),msr=o("not"),gsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),hsr=o("from_pretrained()"),psr=o(" to load the model weights."),_sr=l(),F(SF.$$.fragment),usr=l(),po=a("div"),F(Zy.$$.fragment),bsr=l(),X4e=a("p"),vsr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Fsr=l(),Wa=a("p"),Tsr=o("The model class to instantiate is selected based on the "),z4e=a("code"),Msr=o("model_type"),Esr=o(` property of the config object (either
passed as an argument or loaded from `),W4e=a("code"),Csr=o("pretrained_model_name_or_path"),wsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=a("code"),Asr=o("pretrained_model_name_or_path"),Lsr=o(":"),ysr=l(),$d=a("ul"),RF=a("li"),H4e=a("strong"),xsr=o("deit"),$sr=o(" \u2014 "),iW=a("a"),ksr=o("DeiTForMaskedImageModeling"),Ssr=o(" (DeiT model)"),Rsr=l(),PF=a("li"),U4e=a("strong"),Psr=o("swin"),Bsr=o(" \u2014 "),dW=a("a"),Isr=o("SwinForMaskedImageModeling"),Nsr=o(" (Swin Transformer model)"),qsr=l(),BF=a("li"),J4e=a("strong"),jsr=o("vit"),Dsr=o(" \u2014 "),cW=a("a"),Gsr=o("ViTForMaskedImageModeling"),Osr=o(" (ViT model)"),Vsr=l(),IF=a("p"),Xsr=o("The model is set in evaluation mode by default using "),Y4e=a("code"),zsr=o("model.eval()"),Wsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K4e=a("code"),Qsr=o("model.train()"),Hsr=l(),F(NF.$$.fragment),Uje=l(),kd=a("h2"),qF=a("a"),Z4e=a("span"),F(e8.$$.fragment),Usr=l(),e1e=a("span"),Jsr=o("AutoModelForObjectDetection"),Jje=l(),Qo=a("div"),F(o8.$$.fragment),Ysr=l(),Sd=a("p"),Ksr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),fW=a("a"),Zsr=o("from_pretrained()"),elr=o(" class method or the "),mW=a("a"),olr=o("from_config()"),rlr=o(` class
method.`),tlr=l(),r8=a("p"),alr=o("This class cannot be instantiated directly using "),o1e=a("code"),nlr=o("__init__()"),slr=o(" (throws an error)."),llr=l(),Et=a("div"),F(t8.$$.fragment),ilr=l(),r1e=a("p"),dlr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),clr=l(),Rd=a("p"),flr=o(`Note:
Loading a model from its configuration file does `),t1e=a("strong"),mlr=o("not"),glr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),hlr=o("from_pretrained()"),plr=o(" to load the model weights."),_lr=l(),F(jF.$$.fragment),ulr=l(),_o=a("div"),F(a8.$$.fragment),blr=l(),a1e=a("p"),vlr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Flr=l(),Qa=a("p"),Tlr=o("The model class to instantiate is selected based on the "),n1e=a("code"),Mlr=o("model_type"),Elr=o(` property of the config object (either
passed as an argument or loaded from `),s1e=a("code"),Clr=o("pretrained_model_name_or_path"),wlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=a("code"),Alr=o("pretrained_model_name_or_path"),Llr=o(":"),ylr=l(),n8=a("ul"),DF=a("li"),i1e=a("strong"),xlr=o("detr"),$lr=o(" \u2014 "),hW=a("a"),klr=o("DetrForObjectDetection"),Slr=o(" (DETR model)"),Rlr=l(),GF=a("li"),d1e=a("strong"),Plr=o("yolos"),Blr=o(" \u2014 "),pW=a("a"),Ilr=o("YolosForObjectDetection"),Nlr=o(" (YOLOS model)"),qlr=l(),OF=a("p"),jlr=o("The model is set in evaluation mode by default using "),c1e=a("code"),Dlr=o("model.eval()"),Glr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f1e=a("code"),Olr=o("model.train()"),Vlr=l(),F(VF.$$.fragment),Yje=l(),Pd=a("h2"),XF=a("a"),m1e=a("span"),F(s8.$$.fragment),Xlr=l(),g1e=a("span"),zlr=o("AutoModelForImageSegmentation"),Kje=l(),Ho=a("div"),F(l8.$$.fragment),Wlr=l(),Bd=a("p"),Qlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),_W=a("a"),Hlr=o("from_pretrained()"),Ulr=o(" class method or the "),uW=a("a"),Jlr=o("from_config()"),Ylr=o(` class
method.`),Klr=l(),i8=a("p"),Zlr=o("This class cannot be instantiated directly using "),h1e=a("code"),eir=o("__init__()"),oir=o(" (throws an error)."),rir=l(),Ct=a("div"),F(d8.$$.fragment),tir=l(),p1e=a("p"),air=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),nir=l(),Id=a("p"),sir=o(`Note:
Loading a model from its configuration file does `),_1e=a("strong"),lir=o("not"),iir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=a("a"),dir=o("from_pretrained()"),cir=o(" to load the model weights."),fir=l(),F(zF.$$.fragment),mir=l(),uo=a("div"),F(c8.$$.fragment),gir=l(),u1e=a("p"),hir=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),pir=l(),Ha=a("p"),_ir=o("The model class to instantiate is selected based on the "),b1e=a("code"),uir=o("model_type"),bir=o(` property of the config object (either
passed as an argument or loaded from `),v1e=a("code"),vir=o("pretrained_model_name_or_path"),Fir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=a("code"),Tir=o("pretrained_model_name_or_path"),Mir=o(":"),Eir=l(),T1e=a("ul"),WF=a("li"),M1e=a("strong"),Cir=o("detr"),wir=o(" \u2014 "),vW=a("a"),Air=o("DetrForSegmentation"),Lir=o(" (DETR model)"),yir=l(),QF=a("p"),xir=o("The model is set in evaluation mode by default using "),E1e=a("code"),$ir=o("model.eval()"),kir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C1e=a("code"),Sir=o("model.train()"),Rir=l(),F(HF.$$.fragment),Zje=l(),Nd=a("h2"),UF=a("a"),w1e=a("span"),F(f8.$$.fragment),Pir=l(),A1e=a("span"),Bir=o("AutoModelForSemanticSegmentation"),eDe=l(),Uo=a("div"),F(m8.$$.fragment),Iir=l(),qd=a("p"),Nir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),FW=a("a"),qir=o("from_pretrained()"),jir=o(" class method or the "),TW=a("a"),Dir=o("from_config()"),Gir=o(` class
method.`),Oir=l(),g8=a("p"),Vir=o("This class cannot be instantiated directly using "),L1e=a("code"),Xir=o("__init__()"),zir=o(" (throws an error)."),Wir=l(),wt=a("div"),F(h8.$$.fragment),Qir=l(),y1e=a("p"),Hir=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Uir=l(),jd=a("p"),Jir=o(`Note:
Loading a model from its configuration file does `),x1e=a("strong"),Yir=o("not"),Kir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),Zir=o("from_pretrained()"),edr=o(" to load the model weights."),odr=l(),F(JF.$$.fragment),rdr=l(),bo=a("div"),F(p8.$$.fragment),tdr=l(),$1e=a("p"),adr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ndr=l(),Ua=a("p"),sdr=o("The model class to instantiate is selected based on the "),k1e=a("code"),ldr=o("model_type"),idr=o(` property of the config object (either
passed as an argument or loaded from `),S1e=a("code"),ddr=o("pretrained_model_name_or_path"),cdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=a("code"),fdr=o("pretrained_model_name_or_path"),mdr=o(":"),gdr=l(),Ja=a("ul"),YF=a("li"),P1e=a("strong"),hdr=o("beit"),pdr=o(" \u2014 "),EW=a("a"),_dr=o("BeitForSemanticSegmentation"),udr=o(" (BEiT model)"),bdr=l(),KF=a("li"),B1e=a("strong"),vdr=o("data2vec-vision"),Fdr=o(" \u2014 "),CW=a("a"),Tdr=o("Data2VecVisionForSemanticSegmentation"),Mdr=o(" (Data2VecVision model)"),Edr=l(),ZF=a("li"),I1e=a("strong"),Cdr=o("dpt"),wdr=o(" \u2014 "),wW=a("a"),Adr=o("DPTForSemanticSegmentation"),Ldr=o(" (DPT model)"),ydr=l(),eT=a("li"),N1e=a("strong"),xdr=o("segformer"),$dr=o(" \u2014 "),AW=a("a"),kdr=o("SegformerForSemanticSegmentation"),Sdr=o(" (SegFormer model)"),Rdr=l(),oT=a("p"),Pdr=o("The model is set in evaluation mode by default using "),q1e=a("code"),Bdr=o("model.eval()"),Idr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j1e=a("code"),Ndr=o("model.train()"),qdr=l(),F(rT.$$.fragment),oDe=l(),Dd=a("h2"),tT=a("a"),D1e=a("span"),F(_8.$$.fragment),jdr=l(),G1e=a("span"),Ddr=o("AutoModelForInstanceSegmentation"),rDe=l(),Jo=a("div"),F(u8.$$.fragment),Gdr=l(),Gd=a("p"),Odr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),LW=a("a"),Vdr=o("from_pretrained()"),Xdr=o(" class method or the "),yW=a("a"),zdr=o("from_config()"),Wdr=o(` class
method.`),Qdr=l(),b8=a("p"),Hdr=o("This class cannot be instantiated directly using "),O1e=a("code"),Udr=o("__init__()"),Jdr=o(" (throws an error)."),Ydr=l(),At=a("div"),F(v8.$$.fragment),Kdr=l(),V1e=a("p"),Zdr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ecr=l(),Od=a("p"),ocr=o(`Note:
Loading a model from its configuration file does `),X1e=a("strong"),rcr=o("not"),tcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=a("a"),acr=o("from_pretrained()"),ncr=o(" to load the model weights."),scr=l(),F(aT.$$.fragment),lcr=l(),vo=a("div"),F(F8.$$.fragment),icr=l(),z1e=a("p"),dcr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ccr=l(),Ya=a("p"),fcr=o("The model class to instantiate is selected based on the "),W1e=a("code"),mcr=o("model_type"),gcr=o(` property of the config object (either
passed as an argument or loaded from `),Q1e=a("code"),hcr=o("pretrained_model_name_or_path"),pcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=a("code"),_cr=o("pretrained_model_name_or_path"),ucr=o(":"),bcr=l(),U1e=a("ul"),nT=a("li"),J1e=a("strong"),vcr=o("maskformer"),Fcr=o(" \u2014 "),$W=a("a"),Tcr=o("MaskFormerForInstanceSegmentation"),Mcr=o(" (MaskFormer model)"),Ecr=l(),sT=a("p"),Ccr=o("The model is set in evaluation mode by default using "),Y1e=a("code"),wcr=o("model.eval()"),Acr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=a("code"),Lcr=o("model.train()"),ycr=l(),F(lT.$$.fragment),tDe=l(),Vd=a("h2"),iT=a("a"),Z1e=a("span"),F(T8.$$.fragment),xcr=l(),ebe=a("span"),$cr=o("TFAutoModel"),aDe=l(),Yo=a("div"),F(M8.$$.fragment),kcr=l(),Xd=a("p"),Scr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kW=a("a"),Rcr=o("from_pretrained()"),Pcr=o(" class method or the "),SW=a("a"),Bcr=o("from_config()"),Icr=o(` class
method.`),Ncr=l(),E8=a("p"),qcr=o("This class cannot be instantiated directly using "),obe=a("code"),jcr=o("__init__()"),Dcr=o(" (throws an error)."),Gcr=l(),Lt=a("div"),F(C8.$$.fragment),Ocr=l(),rbe=a("p"),Vcr=o("Instantiates one of the base model classes of the library from a configuration."),Xcr=l(),zd=a("p"),zcr=o(`Note:
Loading a model from its configuration file does `),tbe=a("strong"),Wcr=o("not"),Qcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),Hcr=o("from_pretrained()"),Ucr=o(" to load the model weights."),Jcr=l(),F(dT.$$.fragment),Ycr=l(),wr=a("div"),F(w8.$$.fragment),Kcr=l(),abe=a("p"),Zcr=o("Instantiate one of the base model classes of the library from a pretrained model."),efr=l(),Ka=a("p"),ofr=o("The model class to instantiate is selected based on the "),nbe=a("code"),rfr=o("model_type"),tfr=o(` property of the config object (either
passed as an argument or loaded from `),sbe=a("code"),afr=o("pretrained_model_name_or_path"),nfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=a("code"),sfr=o("pretrained_model_name_or_path"),lfr=o(":"),ifr=l(),q=a("ul"),cT=a("li"),ibe=a("strong"),dfr=o("albert"),cfr=o(" \u2014 "),PW=a("a"),ffr=o("TFAlbertModel"),mfr=o(" (ALBERT model)"),gfr=l(),fT=a("li"),dbe=a("strong"),hfr=o("bart"),pfr=o(" \u2014 "),BW=a("a"),_fr=o("TFBartModel"),ufr=o(" (BART model)"),bfr=l(),mT=a("li"),cbe=a("strong"),vfr=o("bert"),Ffr=o(" \u2014 "),IW=a("a"),Tfr=o("TFBertModel"),Mfr=o(" (BERT model)"),Efr=l(),gT=a("li"),fbe=a("strong"),Cfr=o("blenderbot"),wfr=o(" \u2014 "),NW=a("a"),Afr=o("TFBlenderbotModel"),Lfr=o(" (Blenderbot model)"),yfr=l(),hT=a("li"),mbe=a("strong"),xfr=o("blenderbot-small"),$fr=o(" \u2014 "),qW=a("a"),kfr=o("TFBlenderbotSmallModel"),Sfr=o(" (BlenderbotSmall model)"),Rfr=l(),pT=a("li"),gbe=a("strong"),Pfr=o("camembert"),Bfr=o(" \u2014 "),jW=a("a"),Ifr=o("TFCamembertModel"),Nfr=o(" (CamemBERT model)"),qfr=l(),_T=a("li"),hbe=a("strong"),jfr=o("clip"),Dfr=o(" \u2014 "),DW=a("a"),Gfr=o("TFCLIPModel"),Ofr=o(" (CLIP model)"),Vfr=l(),uT=a("li"),pbe=a("strong"),Xfr=o("convbert"),zfr=o(" \u2014 "),GW=a("a"),Wfr=o("TFConvBertModel"),Qfr=o(" (ConvBERT model)"),Hfr=l(),bT=a("li"),_be=a("strong"),Ufr=o("convnext"),Jfr=o(" \u2014 "),OW=a("a"),Yfr=o("TFConvNextModel"),Kfr=o(" (ConvNeXT model)"),Zfr=l(),vT=a("li"),ube=a("strong"),emr=o("ctrl"),omr=o(" \u2014 "),VW=a("a"),rmr=o("TFCTRLModel"),tmr=o(" (CTRL model)"),amr=l(),FT=a("li"),bbe=a("strong"),nmr=o("data2vec-vision"),smr=o(" \u2014 "),XW=a("a"),lmr=o("TFData2VecVisionModel"),imr=o(" (Data2VecVision model)"),dmr=l(),TT=a("li"),vbe=a("strong"),cmr=o("deberta"),fmr=o(" \u2014 "),zW=a("a"),mmr=o("TFDebertaModel"),gmr=o(" (DeBERTa model)"),hmr=l(),MT=a("li"),Fbe=a("strong"),pmr=o("deberta-v2"),_mr=o(" \u2014 "),WW=a("a"),umr=o("TFDebertaV2Model"),bmr=o(" (DeBERTa-v2 model)"),vmr=l(),ET=a("li"),Tbe=a("strong"),Fmr=o("distilbert"),Tmr=o(" \u2014 "),QW=a("a"),Mmr=o("TFDistilBertModel"),Emr=o(" (DistilBERT model)"),Cmr=l(),CT=a("li"),Mbe=a("strong"),wmr=o("dpr"),Amr=o(" \u2014 "),HW=a("a"),Lmr=o("TFDPRQuestionEncoder"),ymr=o(" (DPR model)"),xmr=l(),wT=a("li"),Ebe=a("strong"),$mr=o("electra"),kmr=o(" \u2014 "),UW=a("a"),Smr=o("TFElectraModel"),Rmr=o(" (ELECTRA model)"),Pmr=l(),AT=a("li"),Cbe=a("strong"),Bmr=o("flaubert"),Imr=o(" \u2014 "),JW=a("a"),Nmr=o("TFFlaubertModel"),qmr=o(" (FlauBERT model)"),jmr=l(),qs=a("li"),wbe=a("strong"),Dmr=o("funnel"),Gmr=o(" \u2014 "),YW=a("a"),Omr=o("TFFunnelModel"),Vmr=o(" or "),KW=a("a"),Xmr=o("TFFunnelBaseModel"),zmr=o(" (Funnel Transformer model)"),Wmr=l(),LT=a("li"),Abe=a("strong"),Qmr=o("gpt2"),Hmr=o(" \u2014 "),ZW=a("a"),Umr=o("TFGPT2Model"),Jmr=o(" (OpenAI GPT-2 model)"),Ymr=l(),yT=a("li"),Lbe=a("strong"),Kmr=o("gptj"),Zmr=o(" \u2014 "),eQ=a("a"),egr=o("TFGPTJModel"),ogr=o(" (GPT-J model)"),rgr=l(),xT=a("li"),ybe=a("strong"),tgr=o("hubert"),agr=o(" \u2014 "),oQ=a("a"),ngr=o("TFHubertModel"),sgr=o(" (Hubert model)"),lgr=l(),$T=a("li"),xbe=a("strong"),igr=o("layoutlm"),dgr=o(" \u2014 "),rQ=a("a"),cgr=o("TFLayoutLMModel"),fgr=o(" (LayoutLM model)"),mgr=l(),kT=a("li"),$be=a("strong"),ggr=o("led"),hgr=o(" \u2014 "),tQ=a("a"),pgr=o("TFLEDModel"),_gr=o(" (LED model)"),ugr=l(),ST=a("li"),kbe=a("strong"),bgr=o("longformer"),vgr=o(" \u2014 "),aQ=a("a"),Fgr=o("TFLongformerModel"),Tgr=o(" (Longformer model)"),Mgr=l(),RT=a("li"),Sbe=a("strong"),Egr=o("lxmert"),Cgr=o(" \u2014 "),nQ=a("a"),wgr=o("TFLxmertModel"),Agr=o(" (LXMERT model)"),Lgr=l(),PT=a("li"),Rbe=a("strong"),ygr=o("marian"),xgr=o(" \u2014 "),sQ=a("a"),$gr=o("TFMarianModel"),kgr=o(" (Marian model)"),Sgr=l(),BT=a("li"),Pbe=a("strong"),Rgr=o("mbart"),Pgr=o(" \u2014 "),lQ=a("a"),Bgr=o("TFMBartModel"),Igr=o(" (mBART model)"),Ngr=l(),IT=a("li"),Bbe=a("strong"),qgr=o("mobilebert"),jgr=o(" \u2014 "),iQ=a("a"),Dgr=o("TFMobileBertModel"),Ggr=o(" (MobileBERT model)"),Ogr=l(),NT=a("li"),Ibe=a("strong"),Vgr=o("mpnet"),Xgr=o(" \u2014 "),dQ=a("a"),zgr=o("TFMPNetModel"),Wgr=o(" (MPNet model)"),Qgr=l(),qT=a("li"),Nbe=a("strong"),Hgr=o("mt5"),Ugr=o(" \u2014 "),cQ=a("a"),Jgr=o("TFMT5Model"),Ygr=o(" (MT5 model)"),Kgr=l(),jT=a("li"),qbe=a("strong"),Zgr=o("openai-gpt"),ehr=o(" \u2014 "),fQ=a("a"),ohr=o("TFOpenAIGPTModel"),rhr=o(" (OpenAI GPT model)"),thr=l(),DT=a("li"),jbe=a("strong"),ahr=o("opt"),nhr=o(" \u2014 "),mQ=a("a"),shr=o("TFOPTModel"),lhr=o(" (OPT model)"),ihr=l(),GT=a("li"),Dbe=a("strong"),dhr=o("pegasus"),chr=o(" \u2014 "),gQ=a("a"),fhr=o("TFPegasusModel"),mhr=o(" (Pegasus model)"),ghr=l(),OT=a("li"),Gbe=a("strong"),hhr=o("rembert"),phr=o(" \u2014 "),hQ=a("a"),_hr=o("TFRemBertModel"),uhr=o(" (RemBERT model)"),bhr=l(),VT=a("li"),Obe=a("strong"),vhr=o("roberta"),Fhr=o(" \u2014 "),pQ=a("a"),Thr=o("TFRobertaModel"),Mhr=o(" (RoBERTa model)"),Ehr=l(),XT=a("li"),Vbe=a("strong"),Chr=o("roformer"),whr=o(" \u2014 "),_Q=a("a"),Ahr=o("TFRoFormerModel"),Lhr=o(" (RoFormer model)"),yhr=l(),zT=a("li"),Xbe=a("strong"),xhr=o("speech_to_text"),$hr=o(" \u2014 "),uQ=a("a"),khr=o("TFSpeech2TextModel"),Shr=o(" (Speech2Text model)"),Rhr=l(),WT=a("li"),zbe=a("strong"),Phr=o("swin"),Bhr=o(" \u2014 "),bQ=a("a"),Ihr=o("TFSwinModel"),Nhr=o(" (Swin Transformer model)"),qhr=l(),QT=a("li"),Wbe=a("strong"),jhr=o("t5"),Dhr=o(" \u2014 "),vQ=a("a"),Ghr=o("TFT5Model"),Ohr=o(" (T5 model)"),Vhr=l(),HT=a("li"),Qbe=a("strong"),Xhr=o("tapas"),zhr=o(" \u2014 "),FQ=a("a"),Whr=o("TFTapasModel"),Qhr=o(" (TAPAS model)"),Hhr=l(),UT=a("li"),Hbe=a("strong"),Uhr=o("transfo-xl"),Jhr=o(" \u2014 "),TQ=a("a"),Yhr=o("TFTransfoXLModel"),Khr=o(" (Transformer-XL model)"),Zhr=l(),JT=a("li"),Ube=a("strong"),epr=o("vit"),opr=o(" \u2014 "),MQ=a("a"),rpr=o("TFViTModel"),tpr=o(" (ViT model)"),apr=l(),YT=a("li"),Jbe=a("strong"),npr=o("vit_mae"),spr=o(" \u2014 "),EQ=a("a"),lpr=o("TFViTMAEModel"),ipr=o(" (ViTMAE model)"),dpr=l(),KT=a("li"),Ybe=a("strong"),cpr=o("wav2vec2"),fpr=o(" \u2014 "),CQ=a("a"),mpr=o("TFWav2Vec2Model"),gpr=o(" (Wav2Vec2 model)"),hpr=l(),ZT=a("li"),Kbe=a("strong"),ppr=o("xlm"),_pr=o(" \u2014 "),wQ=a("a"),upr=o("TFXLMModel"),bpr=o(" (XLM model)"),vpr=l(),e7=a("li"),Zbe=a("strong"),Fpr=o("xlm-roberta"),Tpr=o(" \u2014 "),AQ=a("a"),Mpr=o("TFXLMRobertaModel"),Epr=o(" (XLM-RoBERTa model)"),Cpr=l(),o7=a("li"),e2e=a("strong"),wpr=o("xlnet"),Apr=o(" \u2014 "),LQ=a("a"),Lpr=o("TFXLNetModel"),ypr=o(" (XLNet model)"),xpr=l(),F(r7.$$.fragment),nDe=l(),Wd=a("h2"),t7=a("a"),o2e=a("span"),F(A8.$$.fragment),$pr=l(),r2e=a("span"),kpr=o("TFAutoModelForPreTraining"),sDe=l(),Ko=a("div"),F(L8.$$.fragment),Spr=l(),Qd=a("p"),Rpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yQ=a("a"),Ppr=o("from_pretrained()"),Bpr=o(" class method or the "),xQ=a("a"),Ipr=o("from_config()"),Npr=o(` class
method.`),qpr=l(),y8=a("p"),jpr=o("This class cannot be instantiated directly using "),t2e=a("code"),Dpr=o("__init__()"),Gpr=o(" (throws an error)."),Opr=l(),yt=a("div"),F(x8.$$.fragment),Vpr=l(),a2e=a("p"),Xpr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),zpr=l(),Hd=a("p"),Wpr=o(`Note:
Loading a model from its configuration file does `),n2e=a("strong"),Qpr=o("not"),Hpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),Upr=o("from_pretrained()"),Jpr=o(" to load the model weights."),Ypr=l(),F(a7.$$.fragment),Kpr=l(),Ar=a("div"),F($8.$$.fragment),Zpr=l(),s2e=a("p"),e_r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),o_r=l(),Za=a("p"),r_r=o("The model class to instantiate is selected based on the "),l2e=a("code"),t_r=o("model_type"),a_r=o(` property of the config object (either
passed as an argument or loaded from `),i2e=a("code"),n_r=o("pretrained_model_name_or_path"),s_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=a("code"),l_r=o("pretrained_model_name_or_path"),i_r=o(":"),d_r=l(),se=a("ul"),n7=a("li"),c2e=a("strong"),c_r=o("albert"),f_r=o(" \u2014 "),kQ=a("a"),m_r=o("TFAlbertForPreTraining"),g_r=o(" (ALBERT model)"),h_r=l(),s7=a("li"),f2e=a("strong"),p_r=o("bart"),__r=o(" \u2014 "),SQ=a("a"),u_r=o("TFBartForConditionalGeneration"),b_r=o(" (BART model)"),v_r=l(),l7=a("li"),m2e=a("strong"),F_r=o("bert"),T_r=o(" \u2014 "),RQ=a("a"),M_r=o("TFBertForPreTraining"),E_r=o(" (BERT model)"),C_r=l(),i7=a("li"),g2e=a("strong"),w_r=o("camembert"),A_r=o(" \u2014 "),PQ=a("a"),L_r=o("TFCamembertForMaskedLM"),y_r=o(" (CamemBERT model)"),x_r=l(),d7=a("li"),h2e=a("strong"),$_r=o("ctrl"),k_r=o(" \u2014 "),BQ=a("a"),S_r=o("TFCTRLLMHeadModel"),R_r=o(" (CTRL model)"),P_r=l(),c7=a("li"),p2e=a("strong"),B_r=o("distilbert"),I_r=o(" \u2014 "),IQ=a("a"),N_r=o("TFDistilBertForMaskedLM"),q_r=o(" (DistilBERT model)"),j_r=l(),f7=a("li"),_2e=a("strong"),D_r=o("electra"),G_r=o(" \u2014 "),NQ=a("a"),O_r=o("TFElectraForPreTraining"),V_r=o(" (ELECTRA model)"),X_r=l(),m7=a("li"),u2e=a("strong"),z_r=o("flaubert"),W_r=o(" \u2014 "),qQ=a("a"),Q_r=o("TFFlaubertWithLMHeadModel"),H_r=o(" (FlauBERT model)"),U_r=l(),g7=a("li"),b2e=a("strong"),J_r=o("funnel"),Y_r=o(" \u2014 "),jQ=a("a"),K_r=o("TFFunnelForPreTraining"),Z_r=o(" (Funnel Transformer model)"),eur=l(),h7=a("li"),v2e=a("strong"),our=o("gpt2"),rur=o(" \u2014 "),DQ=a("a"),tur=o("TFGPT2LMHeadModel"),aur=o(" (OpenAI GPT-2 model)"),nur=l(),p7=a("li"),F2e=a("strong"),sur=o("layoutlm"),lur=o(" \u2014 "),GQ=a("a"),iur=o("TFLayoutLMForMaskedLM"),dur=o(" (LayoutLM model)"),cur=l(),_7=a("li"),T2e=a("strong"),fur=o("lxmert"),mur=o(" \u2014 "),OQ=a("a"),gur=o("TFLxmertForPreTraining"),hur=o(" (LXMERT model)"),pur=l(),u7=a("li"),M2e=a("strong"),_ur=o("mobilebert"),uur=o(" \u2014 "),VQ=a("a"),bur=o("TFMobileBertForPreTraining"),vur=o(" (MobileBERT model)"),Fur=l(),b7=a("li"),E2e=a("strong"),Tur=o("mpnet"),Mur=o(" \u2014 "),XQ=a("a"),Eur=o("TFMPNetForMaskedLM"),Cur=o(" (MPNet model)"),wur=l(),v7=a("li"),C2e=a("strong"),Aur=o("openai-gpt"),Lur=o(" \u2014 "),zQ=a("a"),yur=o("TFOpenAIGPTLMHeadModel"),xur=o(" (OpenAI GPT model)"),$ur=l(),F7=a("li"),w2e=a("strong"),kur=o("roberta"),Sur=o(" \u2014 "),WQ=a("a"),Rur=o("TFRobertaForMaskedLM"),Pur=o(" (RoBERTa model)"),Bur=l(),T7=a("li"),A2e=a("strong"),Iur=o("t5"),Nur=o(" \u2014 "),QQ=a("a"),qur=o("TFT5ForConditionalGeneration"),jur=o(" (T5 model)"),Dur=l(),M7=a("li"),L2e=a("strong"),Gur=o("tapas"),Our=o(" \u2014 "),HQ=a("a"),Vur=o("TFTapasForMaskedLM"),Xur=o(" (TAPAS model)"),zur=l(),E7=a("li"),y2e=a("strong"),Wur=o("transfo-xl"),Qur=o(" \u2014 "),UQ=a("a"),Hur=o("TFTransfoXLLMHeadModel"),Uur=o(" (Transformer-XL model)"),Jur=l(),C7=a("li"),x2e=a("strong"),Yur=o("vit_mae"),Kur=o(" \u2014 "),JQ=a("a"),Zur=o("TFViTMAEForPreTraining"),e4r=o(" (ViTMAE model)"),o4r=l(),w7=a("li"),$2e=a("strong"),r4r=o("xlm"),t4r=o(" \u2014 "),YQ=a("a"),a4r=o("TFXLMWithLMHeadModel"),n4r=o(" (XLM model)"),s4r=l(),A7=a("li"),k2e=a("strong"),l4r=o("xlm-roberta"),i4r=o(" \u2014 "),KQ=a("a"),d4r=o("TFXLMRobertaForMaskedLM"),c4r=o(" (XLM-RoBERTa model)"),f4r=l(),L7=a("li"),S2e=a("strong"),m4r=o("xlnet"),g4r=o(" \u2014 "),ZQ=a("a"),h4r=o("TFXLNetLMHeadModel"),p4r=o(" (XLNet model)"),_4r=l(),F(y7.$$.fragment),lDe=l(),Ud=a("h2"),x7=a("a"),R2e=a("span"),F(k8.$$.fragment),u4r=l(),P2e=a("span"),b4r=o("TFAutoModelForCausalLM"),iDe=l(),Zo=a("div"),F(S8.$$.fragment),v4r=l(),Jd=a("p"),F4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eH=a("a"),T4r=o("from_pretrained()"),M4r=o(" class method or the "),oH=a("a"),E4r=o("from_config()"),C4r=o(` class
method.`),w4r=l(),R8=a("p"),A4r=o("This class cannot be instantiated directly using "),B2e=a("code"),L4r=o("__init__()"),y4r=o(" (throws an error)."),x4r=l(),xt=a("div"),F(P8.$$.fragment),$4r=l(),I2e=a("p"),k4r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),S4r=l(),Yd=a("p"),R4r=o(`Note:
Loading a model from its configuration file does `),N2e=a("strong"),P4r=o("not"),B4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),I4r=o("from_pretrained()"),N4r=o(" to load the model weights."),q4r=l(),F($7.$$.fragment),j4r=l(),Lr=a("div"),F(B8.$$.fragment),D4r=l(),q2e=a("p"),G4r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),O4r=l(),en=a("p"),V4r=o("The model class to instantiate is selected based on the "),j2e=a("code"),X4r=o("model_type"),z4r=o(` property of the config object (either
passed as an argument or loaded from `),D2e=a("code"),W4r=o("pretrained_model_name_or_path"),Q4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G2e=a("code"),H4r=o("pretrained_model_name_or_path"),U4r=o(":"),J4r=l(),Me=a("ul"),k7=a("li"),O2e=a("strong"),Y4r=o("bert"),K4r=o(" \u2014 "),tH=a("a"),Z4r=o("TFBertLMHeadModel"),e1r=o(" (BERT model)"),o1r=l(),S7=a("li"),V2e=a("strong"),r1r=o("camembert"),t1r=o(" \u2014 "),aH=a("a"),a1r=o("TFCamembertForCausalLM"),n1r=o(" (CamemBERT model)"),s1r=l(),R7=a("li"),X2e=a("strong"),l1r=o("ctrl"),i1r=o(" \u2014 "),nH=a("a"),d1r=o("TFCTRLLMHeadModel"),c1r=o(" (CTRL model)"),f1r=l(),P7=a("li"),z2e=a("strong"),m1r=o("gpt2"),g1r=o(" \u2014 "),sH=a("a"),h1r=o("TFGPT2LMHeadModel"),p1r=o(" (OpenAI GPT-2 model)"),_1r=l(),B7=a("li"),W2e=a("strong"),u1r=o("gptj"),b1r=o(" \u2014 "),lH=a("a"),v1r=o("TFGPTJForCausalLM"),F1r=o(" (GPT-J model)"),T1r=l(),I7=a("li"),Q2e=a("strong"),M1r=o("openai-gpt"),E1r=o(" \u2014 "),iH=a("a"),C1r=o("TFOpenAIGPTLMHeadModel"),w1r=o(" (OpenAI GPT model)"),A1r=l(),N7=a("li"),H2e=a("strong"),L1r=o("opt"),y1r=o(" \u2014 "),dH=a("a"),x1r=o("TFOPTForCausalLM"),$1r=o(" (OPT model)"),k1r=l(),q7=a("li"),U2e=a("strong"),S1r=o("rembert"),R1r=o(" \u2014 "),cH=a("a"),P1r=o("TFRemBertForCausalLM"),B1r=o(" (RemBERT model)"),I1r=l(),j7=a("li"),J2e=a("strong"),N1r=o("roberta"),q1r=o(" \u2014 "),fH=a("a"),j1r=o("TFRobertaForCausalLM"),D1r=o(" (RoBERTa model)"),G1r=l(),D7=a("li"),Y2e=a("strong"),O1r=o("roformer"),V1r=o(" \u2014 "),mH=a("a"),X1r=o("TFRoFormerForCausalLM"),z1r=o(" (RoFormer model)"),W1r=l(),G7=a("li"),K2e=a("strong"),Q1r=o("transfo-xl"),H1r=o(" \u2014 "),gH=a("a"),U1r=o("TFTransfoXLLMHeadModel"),J1r=o(" (Transformer-XL model)"),Y1r=l(),O7=a("li"),Z2e=a("strong"),K1r=o("xlm"),Z1r=o(" \u2014 "),hH=a("a"),ebr=o("TFXLMWithLMHeadModel"),obr=o(" (XLM model)"),rbr=l(),V7=a("li"),eve=a("strong"),tbr=o("xlnet"),abr=o(" \u2014 "),pH=a("a"),nbr=o("TFXLNetLMHeadModel"),sbr=o(" (XLNet model)"),lbr=l(),F(X7.$$.fragment),dDe=l(),Kd=a("h2"),z7=a("a"),ove=a("span"),F(I8.$$.fragment),ibr=l(),rve=a("span"),dbr=o("TFAutoModelForImageClassification"),cDe=l(),er=a("div"),F(N8.$$.fragment),cbr=l(),Zd=a("p"),fbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_H=a("a"),mbr=o("from_pretrained()"),gbr=o(" class method or the "),uH=a("a"),hbr=o("from_config()"),pbr=o(` class
method.`),_br=l(),q8=a("p"),ubr=o("This class cannot be instantiated directly using "),tve=a("code"),bbr=o("__init__()"),vbr=o(" (throws an error)."),Fbr=l(),$t=a("div"),F(j8.$$.fragment),Tbr=l(),ave=a("p"),Mbr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ebr=l(),ec=a("p"),Cbr=o(`Note:
Loading a model from its configuration file does `),nve=a("strong"),wbr=o("not"),Abr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=a("a"),Lbr=o("from_pretrained()"),ybr=o(" to load the model weights."),xbr=l(),F(W7.$$.fragment),$br=l(),yr=a("div"),F(D8.$$.fragment),kbr=l(),sve=a("p"),Sbr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rbr=l(),on=a("p"),Pbr=o("The model class to instantiate is selected based on the "),lve=a("code"),Bbr=o("model_type"),Ibr=o(` property of the config object (either
passed as an argument or loaded from `),ive=a("code"),Nbr=o("pretrained_model_name_or_path"),qbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=a("code"),jbr=o("pretrained_model_name_or_path"),Dbr=o(":"),Gbr=l(),rn=a("ul"),Q7=a("li"),cve=a("strong"),Obr=o("convnext"),Vbr=o(" \u2014 "),vH=a("a"),Xbr=o("TFConvNextForImageClassification"),zbr=o(" (ConvNeXT model)"),Wbr=l(),H7=a("li"),fve=a("strong"),Qbr=o("data2vec-vision"),Hbr=o(" \u2014 "),FH=a("a"),Ubr=o("TFData2VecVisionForImageClassification"),Jbr=o(" (Data2VecVision model)"),Ybr=l(),U7=a("li"),mve=a("strong"),Kbr=o("swin"),Zbr=o(" \u2014 "),TH=a("a"),e2r=o("TFSwinForImageClassification"),o2r=o(" (Swin Transformer model)"),r2r=l(),J7=a("li"),gve=a("strong"),t2r=o("vit"),a2r=o(" \u2014 "),MH=a("a"),n2r=o("TFViTForImageClassification"),s2r=o(" (ViT model)"),l2r=l(),F(Y7.$$.fragment),fDe=l(),oc=a("h2"),K7=a("a"),hve=a("span"),F(G8.$$.fragment),i2r=l(),pve=a("span"),d2r=o("TFAutoModelForMaskedLM"),mDe=l(),or=a("div"),F(O8.$$.fragment),c2r=l(),rc=a("p"),f2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EH=a("a"),m2r=o("from_pretrained()"),g2r=o(" class method or the "),CH=a("a"),h2r=o("from_config()"),p2r=o(` class
method.`),_2r=l(),V8=a("p"),u2r=o("This class cannot be instantiated directly using "),_ve=a("code"),b2r=o("__init__()"),v2r=o(" (throws an error)."),F2r=l(),kt=a("div"),F(X8.$$.fragment),T2r=l(),uve=a("p"),M2r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),E2r=l(),tc=a("p"),C2r=o(`Note:
Loading a model from its configuration file does `),bve=a("strong"),w2r=o("not"),A2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),L2r=o("from_pretrained()"),y2r=o(" to load the model weights."),x2r=l(),F(Z7.$$.fragment),$2r=l(),xr=a("div"),F(z8.$$.fragment),k2r=l(),vve=a("p"),S2r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),R2r=l(),tn=a("p"),P2r=o("The model class to instantiate is selected based on the "),Fve=a("code"),B2r=o("model_type"),I2r=o(` property of the config object (either
passed as an argument or loaded from `),Tve=a("code"),N2r=o("pretrained_model_name_or_path"),q2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=a("code"),j2r=o("pretrained_model_name_or_path"),D2r=o(":"),G2r=l(),ie=a("ul"),eM=a("li"),Eve=a("strong"),O2r=o("albert"),V2r=o(" \u2014 "),AH=a("a"),X2r=o("TFAlbertForMaskedLM"),z2r=o(" (ALBERT model)"),W2r=l(),oM=a("li"),Cve=a("strong"),Q2r=o("bert"),H2r=o(" \u2014 "),LH=a("a"),U2r=o("TFBertForMaskedLM"),J2r=o(" (BERT model)"),Y2r=l(),rM=a("li"),wve=a("strong"),K2r=o("camembert"),Z2r=o(" \u2014 "),yH=a("a"),evr=o("TFCamembertForMaskedLM"),ovr=o(" (CamemBERT model)"),rvr=l(),tM=a("li"),Ave=a("strong"),tvr=o("convbert"),avr=o(" \u2014 "),xH=a("a"),nvr=o("TFConvBertForMaskedLM"),svr=o(" (ConvBERT model)"),lvr=l(),aM=a("li"),Lve=a("strong"),ivr=o("deberta"),dvr=o(" \u2014 "),$H=a("a"),cvr=o("TFDebertaForMaskedLM"),fvr=o(" (DeBERTa model)"),mvr=l(),nM=a("li"),yve=a("strong"),gvr=o("deberta-v2"),hvr=o(" \u2014 "),kH=a("a"),pvr=o("TFDebertaV2ForMaskedLM"),_vr=o(" (DeBERTa-v2 model)"),uvr=l(),sM=a("li"),xve=a("strong"),bvr=o("distilbert"),vvr=o(" \u2014 "),SH=a("a"),Fvr=o("TFDistilBertForMaskedLM"),Tvr=o(" (DistilBERT model)"),Mvr=l(),lM=a("li"),$ve=a("strong"),Evr=o("electra"),Cvr=o(" \u2014 "),RH=a("a"),wvr=o("TFElectraForMaskedLM"),Avr=o(" (ELECTRA model)"),Lvr=l(),iM=a("li"),kve=a("strong"),yvr=o("flaubert"),xvr=o(" \u2014 "),PH=a("a"),$vr=o("TFFlaubertWithLMHeadModel"),kvr=o(" (FlauBERT model)"),Svr=l(),dM=a("li"),Sve=a("strong"),Rvr=o("funnel"),Pvr=o(" \u2014 "),BH=a("a"),Bvr=o("TFFunnelForMaskedLM"),Ivr=o(" (Funnel Transformer model)"),Nvr=l(),cM=a("li"),Rve=a("strong"),qvr=o("layoutlm"),jvr=o(" \u2014 "),IH=a("a"),Dvr=o("TFLayoutLMForMaskedLM"),Gvr=o(" (LayoutLM model)"),Ovr=l(),fM=a("li"),Pve=a("strong"),Vvr=o("longformer"),Xvr=o(" \u2014 "),NH=a("a"),zvr=o("TFLongformerForMaskedLM"),Wvr=o(" (Longformer model)"),Qvr=l(),mM=a("li"),Bve=a("strong"),Hvr=o("mobilebert"),Uvr=o(" \u2014 "),qH=a("a"),Jvr=o("TFMobileBertForMaskedLM"),Yvr=o(" (MobileBERT model)"),Kvr=l(),gM=a("li"),Ive=a("strong"),Zvr=o("mpnet"),e3r=o(" \u2014 "),jH=a("a"),o3r=o("TFMPNetForMaskedLM"),r3r=o(" (MPNet model)"),t3r=l(),hM=a("li"),Nve=a("strong"),a3r=o("rembert"),n3r=o(" \u2014 "),DH=a("a"),s3r=o("TFRemBertForMaskedLM"),l3r=o(" (RemBERT model)"),i3r=l(),pM=a("li"),qve=a("strong"),d3r=o("roberta"),c3r=o(" \u2014 "),GH=a("a"),f3r=o("TFRobertaForMaskedLM"),m3r=o(" (RoBERTa model)"),g3r=l(),_M=a("li"),jve=a("strong"),h3r=o("roformer"),p3r=o(" \u2014 "),OH=a("a"),_3r=o("TFRoFormerForMaskedLM"),u3r=o(" (RoFormer model)"),b3r=l(),uM=a("li"),Dve=a("strong"),v3r=o("tapas"),F3r=o(" \u2014 "),VH=a("a"),T3r=o("TFTapasForMaskedLM"),M3r=o(" (TAPAS model)"),E3r=l(),bM=a("li"),Gve=a("strong"),C3r=o("xlm"),w3r=o(" \u2014 "),XH=a("a"),A3r=o("TFXLMWithLMHeadModel"),L3r=o(" (XLM model)"),y3r=l(),vM=a("li"),Ove=a("strong"),x3r=o("xlm-roberta"),$3r=o(" \u2014 "),zH=a("a"),k3r=o("TFXLMRobertaForMaskedLM"),S3r=o(" (XLM-RoBERTa model)"),R3r=l(),F(FM.$$.fragment),gDe=l(),ac=a("h2"),TM=a("a"),Vve=a("span"),F(W8.$$.fragment),P3r=l(),Xve=a("span"),B3r=o("TFAutoModelForSeq2SeqLM"),hDe=l(),rr=a("div"),F(Q8.$$.fragment),I3r=l(),nc=a("p"),N3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WH=a("a"),q3r=o("from_pretrained()"),j3r=o(" class method or the "),QH=a("a"),D3r=o("from_config()"),G3r=o(` class
method.`),O3r=l(),H8=a("p"),V3r=o("This class cannot be instantiated directly using "),zve=a("code"),X3r=o("__init__()"),z3r=o(" (throws an error)."),W3r=l(),St=a("div"),F(U8.$$.fragment),Q3r=l(),Wve=a("p"),H3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),U3r=l(),sc=a("p"),J3r=o(`Note:
Loading a model from its configuration file does `),Qve=a("strong"),Y3r=o("not"),K3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),Z3r=o("from_pretrained()"),eFr=o(" to load the model weights."),oFr=l(),F(MM.$$.fragment),rFr=l(),$r=a("div"),F(J8.$$.fragment),tFr=l(),Hve=a("p"),aFr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),nFr=l(),an=a("p"),sFr=o("The model class to instantiate is selected based on the "),Uve=a("code"),lFr=o("model_type"),iFr=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),dFr=o("pretrained_model_name_or_path"),cFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),fFr=o("pretrained_model_name_or_path"),mFr=o(":"),gFr=l(),Le=a("ul"),EM=a("li"),Kve=a("strong"),hFr=o("bart"),pFr=o(" \u2014 "),UH=a("a"),_Fr=o("TFBartForConditionalGeneration"),uFr=o(" (BART model)"),bFr=l(),CM=a("li"),Zve=a("strong"),vFr=o("blenderbot"),FFr=o(" \u2014 "),JH=a("a"),TFr=o("TFBlenderbotForConditionalGeneration"),MFr=o(" (Blenderbot model)"),EFr=l(),wM=a("li"),e3e=a("strong"),CFr=o("blenderbot-small"),wFr=o(" \u2014 "),YH=a("a"),AFr=o("TFBlenderbotSmallForConditionalGeneration"),LFr=o(" (BlenderbotSmall model)"),yFr=l(),AM=a("li"),o3e=a("strong"),xFr=o("encoder-decoder"),$Fr=o(" \u2014 "),KH=a("a"),kFr=o("TFEncoderDecoderModel"),SFr=o(" (Encoder decoder model)"),RFr=l(),LM=a("li"),r3e=a("strong"),PFr=o("led"),BFr=o(" \u2014 "),ZH=a("a"),IFr=o("TFLEDForConditionalGeneration"),NFr=o(" (LED model)"),qFr=l(),yM=a("li"),t3e=a("strong"),jFr=o("marian"),DFr=o(" \u2014 "),eU=a("a"),GFr=o("TFMarianMTModel"),OFr=o(" (Marian model)"),VFr=l(),xM=a("li"),a3e=a("strong"),XFr=o("mbart"),zFr=o(" \u2014 "),oU=a("a"),WFr=o("TFMBartForConditionalGeneration"),QFr=o(" (mBART model)"),HFr=l(),$M=a("li"),n3e=a("strong"),UFr=o("mt5"),JFr=o(" \u2014 "),rU=a("a"),YFr=o("TFMT5ForConditionalGeneration"),KFr=o(" (MT5 model)"),ZFr=l(),kM=a("li"),s3e=a("strong"),eTr=o("pegasus"),oTr=o(" \u2014 "),tU=a("a"),rTr=o("TFPegasusForConditionalGeneration"),tTr=o(" (Pegasus model)"),aTr=l(),SM=a("li"),l3e=a("strong"),nTr=o("t5"),sTr=o(" \u2014 "),aU=a("a"),lTr=o("TFT5ForConditionalGeneration"),iTr=o(" (T5 model)"),dTr=l(),F(RM.$$.fragment),pDe=l(),lc=a("h2"),PM=a("a"),i3e=a("span"),F(Y8.$$.fragment),cTr=l(),d3e=a("span"),fTr=o("TFAutoModelForSequenceClassification"),_De=l(),tr=a("div"),F(K8.$$.fragment),mTr=l(),ic=a("p"),gTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nU=a("a"),hTr=o("from_pretrained()"),pTr=o(" class method or the "),sU=a("a"),_Tr=o("from_config()"),uTr=o(` class
method.`),bTr=l(),Z8=a("p"),vTr=o("This class cannot be instantiated directly using "),c3e=a("code"),FTr=o("__init__()"),TTr=o(" (throws an error)."),MTr=l(),Rt=a("div"),F(e9.$$.fragment),ETr=l(),f3e=a("p"),CTr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wTr=l(),dc=a("p"),ATr=o(`Note:
Loading a model from its configuration file does `),m3e=a("strong"),LTr=o("not"),yTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),xTr=o("from_pretrained()"),$Tr=o(" to load the model weights."),kTr=l(),F(BM.$$.fragment),STr=l(),kr=a("div"),F(o9.$$.fragment),RTr=l(),g3e=a("p"),PTr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),BTr=l(),nn=a("p"),ITr=o("The model class to instantiate is selected based on the "),h3e=a("code"),NTr=o("model_type"),qTr=o(` property of the config object (either
passed as an argument or loaded from `),p3e=a("code"),jTr=o("pretrained_model_name_or_path"),DTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_3e=a("code"),GTr=o("pretrained_model_name_or_path"),OTr=o(":"),VTr=l(),oe=a("ul"),IM=a("li"),u3e=a("strong"),XTr=o("albert"),zTr=o(" \u2014 "),iU=a("a"),WTr=o("TFAlbertForSequenceClassification"),QTr=o(" (ALBERT model)"),HTr=l(),NM=a("li"),b3e=a("strong"),UTr=o("bert"),JTr=o(" \u2014 "),dU=a("a"),YTr=o("TFBertForSequenceClassification"),KTr=o(" (BERT model)"),ZTr=l(),qM=a("li"),v3e=a("strong"),e7r=o("camembert"),o7r=o(" \u2014 "),cU=a("a"),r7r=o("TFCamembertForSequenceClassification"),t7r=o(" (CamemBERT model)"),a7r=l(),jM=a("li"),F3e=a("strong"),n7r=o("convbert"),s7r=o(" \u2014 "),fU=a("a"),l7r=o("TFConvBertForSequenceClassification"),i7r=o(" (ConvBERT model)"),d7r=l(),DM=a("li"),T3e=a("strong"),c7r=o("ctrl"),f7r=o(" \u2014 "),mU=a("a"),m7r=o("TFCTRLForSequenceClassification"),g7r=o(" (CTRL model)"),h7r=l(),GM=a("li"),M3e=a("strong"),p7r=o("deberta"),_7r=o(" \u2014 "),gU=a("a"),u7r=o("TFDebertaForSequenceClassification"),b7r=o(" (DeBERTa model)"),v7r=l(),OM=a("li"),E3e=a("strong"),F7r=o("deberta-v2"),T7r=o(" \u2014 "),hU=a("a"),M7r=o("TFDebertaV2ForSequenceClassification"),E7r=o(" (DeBERTa-v2 model)"),C7r=l(),VM=a("li"),C3e=a("strong"),w7r=o("distilbert"),A7r=o(" \u2014 "),pU=a("a"),L7r=o("TFDistilBertForSequenceClassification"),y7r=o(" (DistilBERT model)"),x7r=l(),XM=a("li"),w3e=a("strong"),$7r=o("electra"),k7r=o(" \u2014 "),_U=a("a"),S7r=o("TFElectraForSequenceClassification"),R7r=o(" (ELECTRA model)"),P7r=l(),zM=a("li"),A3e=a("strong"),B7r=o("flaubert"),I7r=o(" \u2014 "),uU=a("a"),N7r=o("TFFlaubertForSequenceClassification"),q7r=o(" (FlauBERT model)"),j7r=l(),WM=a("li"),L3e=a("strong"),D7r=o("funnel"),G7r=o(" \u2014 "),bU=a("a"),O7r=o("TFFunnelForSequenceClassification"),V7r=o(" (Funnel Transformer model)"),X7r=l(),QM=a("li"),y3e=a("strong"),z7r=o("gpt2"),W7r=o(" \u2014 "),vU=a("a"),Q7r=o("TFGPT2ForSequenceClassification"),H7r=o(" (OpenAI GPT-2 model)"),U7r=l(),HM=a("li"),x3e=a("strong"),J7r=o("gptj"),Y7r=o(" \u2014 "),FU=a("a"),K7r=o("TFGPTJForSequenceClassification"),Z7r=o(" (GPT-J model)"),eMr=l(),UM=a("li"),$3e=a("strong"),oMr=o("layoutlm"),rMr=o(" \u2014 "),TU=a("a"),tMr=o("TFLayoutLMForSequenceClassification"),aMr=o(" (LayoutLM model)"),nMr=l(),JM=a("li"),k3e=a("strong"),sMr=o("longformer"),lMr=o(" \u2014 "),MU=a("a"),iMr=o("TFLongformerForSequenceClassification"),dMr=o(" (Longformer model)"),cMr=l(),YM=a("li"),S3e=a("strong"),fMr=o("mobilebert"),mMr=o(" \u2014 "),EU=a("a"),gMr=o("TFMobileBertForSequenceClassification"),hMr=o(" (MobileBERT model)"),pMr=l(),KM=a("li"),R3e=a("strong"),_Mr=o("mpnet"),uMr=o(" \u2014 "),CU=a("a"),bMr=o("TFMPNetForSequenceClassification"),vMr=o(" (MPNet model)"),FMr=l(),ZM=a("li"),P3e=a("strong"),TMr=o("openai-gpt"),MMr=o(" \u2014 "),wU=a("a"),EMr=o("TFOpenAIGPTForSequenceClassification"),CMr=o(" (OpenAI GPT model)"),wMr=l(),eE=a("li"),B3e=a("strong"),AMr=o("rembert"),LMr=o(" \u2014 "),AU=a("a"),yMr=o("TFRemBertForSequenceClassification"),xMr=o(" (RemBERT model)"),$Mr=l(),oE=a("li"),I3e=a("strong"),kMr=o("roberta"),SMr=o(" \u2014 "),LU=a("a"),RMr=o("TFRobertaForSequenceClassification"),PMr=o(" (RoBERTa model)"),BMr=l(),rE=a("li"),N3e=a("strong"),IMr=o("roformer"),NMr=o(" \u2014 "),yU=a("a"),qMr=o("TFRoFormerForSequenceClassification"),jMr=o(" (RoFormer model)"),DMr=l(),tE=a("li"),q3e=a("strong"),GMr=o("tapas"),OMr=o(" \u2014 "),xU=a("a"),VMr=o("TFTapasForSequenceClassification"),XMr=o(" (TAPAS model)"),zMr=l(),aE=a("li"),j3e=a("strong"),WMr=o("transfo-xl"),QMr=o(" \u2014 "),$U=a("a"),HMr=o("TFTransfoXLForSequenceClassification"),UMr=o(" (Transformer-XL model)"),JMr=l(),nE=a("li"),D3e=a("strong"),YMr=o("xlm"),KMr=o(" \u2014 "),kU=a("a"),ZMr=o("TFXLMForSequenceClassification"),eEr=o(" (XLM model)"),oEr=l(),sE=a("li"),G3e=a("strong"),rEr=o("xlm-roberta"),tEr=o(" \u2014 "),SU=a("a"),aEr=o("TFXLMRobertaForSequenceClassification"),nEr=o(" (XLM-RoBERTa model)"),sEr=l(),lE=a("li"),O3e=a("strong"),lEr=o("xlnet"),iEr=o(" \u2014 "),RU=a("a"),dEr=o("TFXLNetForSequenceClassification"),cEr=o(" (XLNet model)"),fEr=l(),F(iE.$$.fragment),uDe=l(),cc=a("h2"),dE=a("a"),V3e=a("span"),F(r9.$$.fragment),mEr=l(),X3e=a("span"),gEr=o("TFAutoModelForMultipleChoice"),bDe=l(),ar=a("div"),F(t9.$$.fragment),hEr=l(),fc=a("p"),pEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PU=a("a"),_Er=o("from_pretrained()"),uEr=o(" class method or the "),BU=a("a"),bEr=o("from_config()"),vEr=o(` class
method.`),FEr=l(),a9=a("p"),TEr=o("This class cannot be instantiated directly using "),z3e=a("code"),MEr=o("__init__()"),EEr=o(" (throws an error)."),CEr=l(),Pt=a("div"),F(n9.$$.fragment),wEr=l(),W3e=a("p"),AEr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),LEr=l(),mc=a("p"),yEr=o(`Note:
Loading a model from its configuration file does `),Q3e=a("strong"),xEr=o("not"),$Er=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=a("a"),kEr=o("from_pretrained()"),SEr=o(" to load the model weights."),REr=l(),F(cE.$$.fragment),PEr=l(),Sr=a("div"),F(s9.$$.fragment),BEr=l(),H3e=a("p"),IEr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NEr=l(),sn=a("p"),qEr=o("The model class to instantiate is selected based on the "),U3e=a("code"),jEr=o("model_type"),DEr=o(` property of the config object (either
passed as an argument or loaded from `),J3e=a("code"),GEr=o("pretrained_model_name_or_path"),OEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y3e=a("code"),VEr=o("pretrained_model_name_or_path"),XEr=o(":"),zEr=l(),pe=a("ul"),fE=a("li"),K3e=a("strong"),WEr=o("albert"),QEr=o(" \u2014 "),NU=a("a"),HEr=o("TFAlbertForMultipleChoice"),UEr=o(" (ALBERT model)"),JEr=l(),mE=a("li"),Z3e=a("strong"),YEr=o("bert"),KEr=o(" \u2014 "),qU=a("a"),ZEr=o("TFBertForMultipleChoice"),eCr=o(" (BERT model)"),oCr=l(),gE=a("li"),eFe=a("strong"),rCr=o("camembert"),tCr=o(" \u2014 "),jU=a("a"),aCr=o("TFCamembertForMultipleChoice"),nCr=o(" (CamemBERT model)"),sCr=l(),hE=a("li"),oFe=a("strong"),lCr=o("convbert"),iCr=o(" \u2014 "),DU=a("a"),dCr=o("TFConvBertForMultipleChoice"),cCr=o(" (ConvBERT model)"),fCr=l(),pE=a("li"),rFe=a("strong"),mCr=o("distilbert"),gCr=o(" \u2014 "),GU=a("a"),hCr=o("TFDistilBertForMultipleChoice"),pCr=o(" (DistilBERT model)"),_Cr=l(),_E=a("li"),tFe=a("strong"),uCr=o("electra"),bCr=o(" \u2014 "),OU=a("a"),vCr=o("TFElectraForMultipleChoice"),FCr=o(" (ELECTRA model)"),TCr=l(),uE=a("li"),aFe=a("strong"),MCr=o("flaubert"),ECr=o(" \u2014 "),VU=a("a"),CCr=o("TFFlaubertForMultipleChoice"),wCr=o(" (FlauBERT model)"),ACr=l(),bE=a("li"),nFe=a("strong"),LCr=o("funnel"),yCr=o(" \u2014 "),XU=a("a"),xCr=o("TFFunnelForMultipleChoice"),$Cr=o(" (Funnel Transformer model)"),kCr=l(),vE=a("li"),sFe=a("strong"),SCr=o("longformer"),RCr=o(" \u2014 "),zU=a("a"),PCr=o("TFLongformerForMultipleChoice"),BCr=o(" (Longformer model)"),ICr=l(),FE=a("li"),lFe=a("strong"),NCr=o("mobilebert"),qCr=o(" \u2014 "),WU=a("a"),jCr=o("TFMobileBertForMultipleChoice"),DCr=o(" (MobileBERT model)"),GCr=l(),TE=a("li"),iFe=a("strong"),OCr=o("mpnet"),VCr=o(" \u2014 "),QU=a("a"),XCr=o("TFMPNetForMultipleChoice"),zCr=o(" (MPNet model)"),WCr=l(),ME=a("li"),dFe=a("strong"),QCr=o("rembert"),HCr=o(" \u2014 "),HU=a("a"),UCr=o("TFRemBertForMultipleChoice"),JCr=o(" (RemBERT model)"),YCr=l(),EE=a("li"),cFe=a("strong"),KCr=o("roberta"),ZCr=o(" \u2014 "),UU=a("a"),e5r=o("TFRobertaForMultipleChoice"),o5r=o(" (RoBERTa model)"),r5r=l(),CE=a("li"),fFe=a("strong"),t5r=o("roformer"),a5r=o(" \u2014 "),JU=a("a"),n5r=o("TFRoFormerForMultipleChoice"),s5r=o(" (RoFormer model)"),l5r=l(),wE=a("li"),mFe=a("strong"),i5r=o("xlm"),d5r=o(" \u2014 "),YU=a("a"),c5r=o("TFXLMForMultipleChoice"),f5r=o(" (XLM model)"),m5r=l(),AE=a("li"),gFe=a("strong"),g5r=o("xlm-roberta"),h5r=o(" \u2014 "),KU=a("a"),p5r=o("TFXLMRobertaForMultipleChoice"),_5r=o(" (XLM-RoBERTa model)"),u5r=l(),LE=a("li"),hFe=a("strong"),b5r=o("xlnet"),v5r=o(" \u2014 "),ZU=a("a"),F5r=o("TFXLNetForMultipleChoice"),T5r=o(" (XLNet model)"),M5r=l(),F(yE.$$.fragment),vDe=l(),gc=a("h2"),xE=a("a"),pFe=a("span"),F(l9.$$.fragment),E5r=l(),_Fe=a("span"),C5r=o("TFAutoModelForNextSentencePrediction"),FDe=l(),nr=a("div"),F(i9.$$.fragment),w5r=l(),hc=a("p"),A5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eJ=a("a"),L5r=o("from_pretrained()"),y5r=o(" class method or the "),oJ=a("a"),x5r=o("from_config()"),$5r=o(` class
method.`),k5r=l(),d9=a("p"),S5r=o("This class cannot be instantiated directly using "),uFe=a("code"),R5r=o("__init__()"),P5r=o(" (throws an error)."),B5r=l(),Bt=a("div"),F(c9.$$.fragment),I5r=l(),bFe=a("p"),N5r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),q5r=l(),pc=a("p"),j5r=o(`Note:
Loading a model from its configuration file does `),vFe=a("strong"),D5r=o("not"),G5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=a("a"),O5r=o("from_pretrained()"),V5r=o(" to load the model weights."),X5r=l(),F($E.$$.fragment),z5r=l(),Rr=a("div"),F(f9.$$.fragment),W5r=l(),FFe=a("p"),Q5r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),H5r=l(),ln=a("p"),U5r=o("The model class to instantiate is selected based on the "),TFe=a("code"),J5r=o("model_type"),Y5r=o(` property of the config object (either
passed as an argument or loaded from `),MFe=a("code"),K5r=o("pretrained_model_name_or_path"),Z5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=a("code"),e0r=o("pretrained_model_name_or_path"),o0r=o(":"),r0r=l(),m9=a("ul"),kE=a("li"),CFe=a("strong"),t0r=o("bert"),a0r=o(" \u2014 "),tJ=a("a"),n0r=o("TFBertForNextSentencePrediction"),s0r=o(" (BERT model)"),l0r=l(),SE=a("li"),wFe=a("strong"),i0r=o("mobilebert"),d0r=o(" \u2014 "),aJ=a("a"),c0r=o("TFMobileBertForNextSentencePrediction"),f0r=o(" (MobileBERT model)"),m0r=l(),F(RE.$$.fragment),TDe=l(),_c=a("h2"),PE=a("a"),AFe=a("span"),F(g9.$$.fragment),g0r=l(),LFe=a("span"),h0r=o("TFAutoModelForTableQuestionAnswering"),MDe=l(),sr=a("div"),F(h9.$$.fragment),p0r=l(),uc=a("p"),_0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nJ=a("a"),u0r=o("from_pretrained()"),b0r=o(" class method or the "),sJ=a("a"),v0r=o("from_config()"),F0r=o(` class
method.`),T0r=l(),p9=a("p"),M0r=o("This class cannot be instantiated directly using "),yFe=a("code"),E0r=o("__init__()"),C0r=o(" (throws an error)."),w0r=l(),It=a("div"),F(_9.$$.fragment),A0r=l(),xFe=a("p"),L0r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),y0r=l(),bc=a("p"),x0r=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),$0r=o("not"),k0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=a("a"),S0r=o("from_pretrained()"),R0r=o(" to load the model weights."),P0r=l(),F(BE.$$.fragment),B0r=l(),Pr=a("div"),F(u9.$$.fragment),I0r=l(),kFe=a("p"),N0r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),q0r=l(),dn=a("p"),j0r=o("The model class to instantiate is selected based on the "),SFe=a("code"),D0r=o("model_type"),G0r=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),O0r=o("pretrained_model_name_or_path"),V0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),X0r=o("pretrained_model_name_or_path"),z0r=o(":"),W0r=l(),BFe=a("ul"),IE=a("li"),IFe=a("strong"),Q0r=o("tapas"),H0r=o(" \u2014 "),iJ=a("a"),U0r=o("TFTapasForQuestionAnswering"),J0r=o(" (TAPAS model)"),Y0r=l(),F(NE.$$.fragment),EDe=l(),vc=a("h2"),qE=a("a"),NFe=a("span"),F(b9.$$.fragment),K0r=l(),qFe=a("span"),Z0r=o("TFAutoModelForTokenClassification"),CDe=l(),lr=a("div"),F(v9.$$.fragment),ewr=l(),Fc=a("p"),owr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dJ=a("a"),rwr=o("from_pretrained()"),twr=o(" class method or the "),cJ=a("a"),awr=o("from_config()"),nwr=o(` class
method.`),swr=l(),F9=a("p"),lwr=o("This class cannot be instantiated directly using "),jFe=a("code"),iwr=o("__init__()"),dwr=o(" (throws an error)."),cwr=l(),Nt=a("div"),F(T9.$$.fragment),fwr=l(),DFe=a("p"),mwr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gwr=l(),Tc=a("p"),hwr=o(`Note:
Loading a model from its configuration file does `),GFe=a("strong"),pwr=o("not"),_wr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),uwr=o("from_pretrained()"),bwr=o(" to load the model weights."),vwr=l(),F(jE.$$.fragment),Fwr=l(),Br=a("div"),F(M9.$$.fragment),Twr=l(),OFe=a("p"),Mwr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ewr=l(),cn=a("p"),Cwr=o("The model class to instantiate is selected based on the "),VFe=a("code"),wwr=o("model_type"),Awr=o(` property of the config object (either
passed as an argument or loaded from `),XFe=a("code"),Lwr=o("pretrained_model_name_or_path"),ywr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=a("code"),xwr=o("pretrained_model_name_or_path"),$wr=o(":"),kwr=l(),de=a("ul"),DE=a("li"),WFe=a("strong"),Swr=o("albert"),Rwr=o(" \u2014 "),mJ=a("a"),Pwr=o("TFAlbertForTokenClassification"),Bwr=o(" (ALBERT model)"),Iwr=l(),GE=a("li"),QFe=a("strong"),Nwr=o("bert"),qwr=o(" \u2014 "),gJ=a("a"),jwr=o("TFBertForTokenClassification"),Dwr=o(" (BERT model)"),Gwr=l(),OE=a("li"),HFe=a("strong"),Owr=o("camembert"),Vwr=o(" \u2014 "),hJ=a("a"),Xwr=o("TFCamembertForTokenClassification"),zwr=o(" (CamemBERT model)"),Wwr=l(),VE=a("li"),UFe=a("strong"),Qwr=o("convbert"),Hwr=o(" \u2014 "),pJ=a("a"),Uwr=o("TFConvBertForTokenClassification"),Jwr=o(" (ConvBERT model)"),Ywr=l(),XE=a("li"),JFe=a("strong"),Kwr=o("deberta"),Zwr=o(" \u2014 "),_J=a("a"),eAr=o("TFDebertaForTokenClassification"),oAr=o(" (DeBERTa model)"),rAr=l(),zE=a("li"),YFe=a("strong"),tAr=o("deberta-v2"),aAr=o(" \u2014 "),uJ=a("a"),nAr=o("TFDebertaV2ForTokenClassification"),sAr=o(" (DeBERTa-v2 model)"),lAr=l(),WE=a("li"),KFe=a("strong"),iAr=o("distilbert"),dAr=o(" \u2014 "),bJ=a("a"),cAr=o("TFDistilBertForTokenClassification"),fAr=o(" (DistilBERT model)"),mAr=l(),QE=a("li"),ZFe=a("strong"),gAr=o("electra"),hAr=o(" \u2014 "),vJ=a("a"),pAr=o("TFElectraForTokenClassification"),_Ar=o(" (ELECTRA model)"),uAr=l(),HE=a("li"),eTe=a("strong"),bAr=o("flaubert"),vAr=o(" \u2014 "),FJ=a("a"),FAr=o("TFFlaubertForTokenClassification"),TAr=o(" (FlauBERT model)"),MAr=l(),UE=a("li"),oTe=a("strong"),EAr=o("funnel"),CAr=o(" \u2014 "),TJ=a("a"),wAr=o("TFFunnelForTokenClassification"),AAr=o(" (Funnel Transformer model)"),LAr=l(),JE=a("li"),rTe=a("strong"),yAr=o("layoutlm"),xAr=o(" \u2014 "),MJ=a("a"),$Ar=o("TFLayoutLMForTokenClassification"),kAr=o(" (LayoutLM model)"),SAr=l(),YE=a("li"),tTe=a("strong"),RAr=o("longformer"),PAr=o(" \u2014 "),EJ=a("a"),BAr=o("TFLongformerForTokenClassification"),IAr=o(" (Longformer model)"),NAr=l(),KE=a("li"),aTe=a("strong"),qAr=o("mobilebert"),jAr=o(" \u2014 "),CJ=a("a"),DAr=o("TFMobileBertForTokenClassification"),GAr=o(" (MobileBERT model)"),OAr=l(),ZE=a("li"),nTe=a("strong"),VAr=o("mpnet"),XAr=o(" \u2014 "),wJ=a("a"),zAr=o("TFMPNetForTokenClassification"),WAr=o(" (MPNet model)"),QAr=l(),eC=a("li"),sTe=a("strong"),HAr=o("rembert"),UAr=o(" \u2014 "),AJ=a("a"),JAr=o("TFRemBertForTokenClassification"),YAr=o(" (RemBERT model)"),KAr=l(),oC=a("li"),lTe=a("strong"),ZAr=o("roberta"),e6r=o(" \u2014 "),LJ=a("a"),o6r=o("TFRobertaForTokenClassification"),r6r=o(" (RoBERTa model)"),t6r=l(),rC=a("li"),iTe=a("strong"),a6r=o("roformer"),n6r=o(" \u2014 "),yJ=a("a"),s6r=o("TFRoFormerForTokenClassification"),l6r=o(" (RoFormer model)"),i6r=l(),tC=a("li"),dTe=a("strong"),d6r=o("xlm"),c6r=o(" \u2014 "),xJ=a("a"),f6r=o("TFXLMForTokenClassification"),m6r=o(" (XLM model)"),g6r=l(),aC=a("li"),cTe=a("strong"),h6r=o("xlm-roberta"),p6r=o(" \u2014 "),$J=a("a"),_6r=o("TFXLMRobertaForTokenClassification"),u6r=o(" (XLM-RoBERTa model)"),b6r=l(),nC=a("li"),fTe=a("strong"),v6r=o("xlnet"),F6r=o(" \u2014 "),kJ=a("a"),T6r=o("TFXLNetForTokenClassification"),M6r=o(" (XLNet model)"),E6r=l(),F(sC.$$.fragment),wDe=l(),Mc=a("h2"),lC=a("a"),mTe=a("span"),F(E9.$$.fragment),C6r=l(),gTe=a("span"),w6r=o("TFAutoModelForQuestionAnswering"),ADe=l(),ir=a("div"),F(C9.$$.fragment),A6r=l(),Ec=a("p"),L6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SJ=a("a"),y6r=o("from_pretrained()"),x6r=o(" class method or the "),RJ=a("a"),$6r=o("from_config()"),k6r=o(` class
method.`),S6r=l(),w9=a("p"),R6r=o("This class cannot be instantiated directly using "),hTe=a("code"),P6r=o("__init__()"),B6r=o(" (throws an error)."),I6r=l(),qt=a("div"),F(A9.$$.fragment),N6r=l(),pTe=a("p"),q6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),j6r=l(),Cc=a("p"),D6r=o(`Note:
Loading a model from its configuration file does `),_Te=a("strong"),G6r=o("not"),O6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=a("a"),V6r=o("from_pretrained()"),X6r=o(" to load the model weights."),z6r=l(),F(iC.$$.fragment),W6r=l(),Ir=a("div"),F(L9.$$.fragment),Q6r=l(),uTe=a("p"),H6r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),U6r=l(),fn=a("p"),J6r=o("The model class to instantiate is selected based on the "),bTe=a("code"),Y6r=o("model_type"),K6r=o(` property of the config object (either
passed as an argument or loaded from `),vTe=a("code"),Z6r=o("pretrained_model_name_or_path"),eLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=a("code"),oLr=o("pretrained_model_name_or_path"),rLr=o(":"),tLr=l(),ce=a("ul"),dC=a("li"),TTe=a("strong"),aLr=o("albert"),nLr=o(" \u2014 "),BJ=a("a"),sLr=o("TFAlbertForQuestionAnswering"),lLr=o(" (ALBERT model)"),iLr=l(),cC=a("li"),MTe=a("strong"),dLr=o("bert"),cLr=o(" \u2014 "),IJ=a("a"),fLr=o("TFBertForQuestionAnswering"),mLr=o(" (BERT model)"),gLr=l(),fC=a("li"),ETe=a("strong"),hLr=o("camembert"),pLr=o(" \u2014 "),NJ=a("a"),_Lr=o("TFCamembertForQuestionAnswering"),uLr=o(" (CamemBERT model)"),bLr=l(),mC=a("li"),CTe=a("strong"),vLr=o("convbert"),FLr=o(" \u2014 "),qJ=a("a"),TLr=o("TFConvBertForQuestionAnswering"),MLr=o(" (ConvBERT model)"),ELr=l(),gC=a("li"),wTe=a("strong"),CLr=o("deberta"),wLr=o(" \u2014 "),jJ=a("a"),ALr=o("TFDebertaForQuestionAnswering"),LLr=o(" (DeBERTa model)"),yLr=l(),hC=a("li"),ATe=a("strong"),xLr=o("deberta-v2"),$Lr=o(" \u2014 "),DJ=a("a"),kLr=o("TFDebertaV2ForQuestionAnswering"),SLr=o(" (DeBERTa-v2 model)"),RLr=l(),pC=a("li"),LTe=a("strong"),PLr=o("distilbert"),BLr=o(" \u2014 "),GJ=a("a"),ILr=o("TFDistilBertForQuestionAnswering"),NLr=o(" (DistilBERT model)"),qLr=l(),_C=a("li"),yTe=a("strong"),jLr=o("electra"),DLr=o(" \u2014 "),OJ=a("a"),GLr=o("TFElectraForQuestionAnswering"),OLr=o(" (ELECTRA model)"),VLr=l(),uC=a("li"),xTe=a("strong"),XLr=o("flaubert"),zLr=o(" \u2014 "),VJ=a("a"),WLr=o("TFFlaubertForQuestionAnsweringSimple"),QLr=o(" (FlauBERT model)"),HLr=l(),bC=a("li"),$Te=a("strong"),ULr=o("funnel"),JLr=o(" \u2014 "),XJ=a("a"),YLr=o("TFFunnelForQuestionAnswering"),KLr=o(" (Funnel Transformer model)"),ZLr=l(),vC=a("li"),kTe=a("strong"),eyr=o("gptj"),oyr=o(" \u2014 "),zJ=a("a"),ryr=o("TFGPTJForQuestionAnswering"),tyr=o(" (GPT-J model)"),ayr=l(),FC=a("li"),STe=a("strong"),nyr=o("longformer"),syr=o(" \u2014 "),WJ=a("a"),lyr=o("TFLongformerForQuestionAnswering"),iyr=o(" (Longformer model)"),dyr=l(),TC=a("li"),RTe=a("strong"),cyr=o("mobilebert"),fyr=o(" \u2014 "),QJ=a("a"),myr=o("TFMobileBertForQuestionAnswering"),gyr=o(" (MobileBERT model)"),hyr=l(),MC=a("li"),PTe=a("strong"),pyr=o("mpnet"),_yr=o(" \u2014 "),HJ=a("a"),uyr=o("TFMPNetForQuestionAnswering"),byr=o(" (MPNet model)"),vyr=l(),EC=a("li"),BTe=a("strong"),Fyr=o("rembert"),Tyr=o(" \u2014 "),UJ=a("a"),Myr=o("TFRemBertForQuestionAnswering"),Eyr=o(" (RemBERT model)"),Cyr=l(),CC=a("li"),ITe=a("strong"),wyr=o("roberta"),Ayr=o(" \u2014 "),JJ=a("a"),Lyr=o("TFRobertaForQuestionAnswering"),yyr=o(" (RoBERTa model)"),xyr=l(),wC=a("li"),NTe=a("strong"),$yr=o("roformer"),kyr=o(" \u2014 "),YJ=a("a"),Syr=o("TFRoFormerForQuestionAnswering"),Ryr=o(" (RoFormer model)"),Pyr=l(),AC=a("li"),qTe=a("strong"),Byr=o("xlm"),Iyr=o(" \u2014 "),KJ=a("a"),Nyr=o("TFXLMForQuestionAnsweringSimple"),qyr=o(" (XLM model)"),jyr=l(),LC=a("li"),jTe=a("strong"),Dyr=o("xlm-roberta"),Gyr=o(" \u2014 "),ZJ=a("a"),Oyr=o("TFXLMRobertaForQuestionAnswering"),Vyr=o(" (XLM-RoBERTa model)"),Xyr=l(),yC=a("li"),DTe=a("strong"),zyr=o("xlnet"),Wyr=o(" \u2014 "),eY=a("a"),Qyr=o("TFXLNetForQuestionAnsweringSimple"),Hyr=o(" (XLNet model)"),Uyr=l(),F(xC.$$.fragment),LDe=l(),wc=a("h2"),$C=a("a"),GTe=a("span"),F(y9.$$.fragment),Jyr=l(),OTe=a("span"),Yyr=o("TFAutoModelForVision2Seq"),yDe=l(),dr=a("div"),F(x9.$$.fragment),Kyr=l(),Ac=a("p"),Zyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oY=a("a"),e8r=o("from_pretrained()"),o8r=o(" class method or the "),rY=a("a"),r8r=o("from_config()"),t8r=o(` class
method.`),a8r=l(),$9=a("p"),n8r=o("This class cannot be instantiated directly using "),VTe=a("code"),s8r=o("__init__()"),l8r=o(" (throws an error)."),i8r=l(),jt=a("div"),F(k9.$$.fragment),d8r=l(),XTe=a("p"),c8r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),f8r=l(),Lc=a("p"),m8r=o(`Note:
Loading a model from its configuration file does `),zTe=a("strong"),g8r=o("not"),h8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=a("a"),p8r=o("from_pretrained()"),_8r=o(" to load the model weights."),u8r=l(),F(kC.$$.fragment),b8r=l(),Nr=a("div"),F(S9.$$.fragment),v8r=l(),WTe=a("p"),F8r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),T8r=l(),mn=a("p"),M8r=o("The model class to instantiate is selected based on the "),QTe=a("code"),E8r=o("model_type"),C8r=o(` property of the config object (either
passed as an argument or loaded from `),HTe=a("code"),w8r=o("pretrained_model_name_or_path"),A8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=a("code"),L8r=o("pretrained_model_name_or_path"),y8r=o(":"),x8r=l(),JTe=a("ul"),SC=a("li"),YTe=a("strong"),$8r=o("vision-encoder-decoder"),k8r=o(" \u2014 "),aY=a("a"),S8r=o("TFVisionEncoderDecoderModel"),R8r=o(" (Vision Encoder decoder model)"),P8r=l(),F(RC.$$.fragment),xDe=l(),yc=a("h2"),PC=a("a"),KTe=a("span"),F(R9.$$.fragment),B8r=l(),ZTe=a("span"),I8r=o("TFAutoModelForSpeechSeq2Seq"),$De=l(),cr=a("div"),F(P9.$$.fragment),N8r=l(),xc=a("p"),q8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nY=a("a"),j8r=o("from_pretrained()"),D8r=o(" class method or the "),sY=a("a"),G8r=o("from_config()"),O8r=o(` class
method.`),V8r=l(),B9=a("p"),X8r=o("This class cannot be instantiated directly using "),e7e=a("code"),z8r=o("__init__()"),W8r=o(" (throws an error)."),Q8r=l(),Dt=a("div"),F(I9.$$.fragment),H8r=l(),o7e=a("p"),U8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),J8r=l(),$c=a("p"),Y8r=o(`Note:
Loading a model from its configuration file does `),r7e=a("strong"),K8r=o("not"),Z8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=a("a"),e9r=o("from_pretrained()"),o9r=o(" to load the model weights."),r9r=l(),F(BC.$$.fragment),t9r=l(),qr=a("div"),F(N9.$$.fragment),a9r=l(),t7e=a("p"),n9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),s9r=l(),gn=a("p"),l9r=o("The model class to instantiate is selected based on the "),a7e=a("code"),i9r=o("model_type"),d9r=o(` property of the config object (either
passed as an argument or loaded from `),n7e=a("code"),c9r=o("pretrained_model_name_or_path"),f9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=a("code"),m9r=o("pretrained_model_name_or_path"),g9r=o(":"),h9r=l(),l7e=a("ul"),IC=a("li"),i7e=a("strong"),p9r=o("speech_to_text"),_9r=o(" \u2014 "),iY=a("a"),u9r=o("TFSpeech2TextForConditionalGeneration"),b9r=o(" (Speech2Text model)"),v9r=l(),F(NC.$$.fragment),kDe=l(),kc=a("h2"),qC=a("a"),d7e=a("span"),F(q9.$$.fragment),F9r=l(),c7e=a("span"),T9r=o("FlaxAutoModel"),SDe=l(),fr=a("div"),F(j9.$$.fragment),M9r=l(),Sc=a("p"),E9r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dY=a("a"),C9r=o("from_pretrained()"),w9r=o(" class method or the "),cY=a("a"),A9r=o("from_config()"),L9r=o(` class
method.`),y9r=l(),D9=a("p"),x9r=o("This class cannot be instantiated directly using "),f7e=a("code"),$9r=o("__init__()"),k9r=o(" (throws an error)."),S9r=l(),Gt=a("div"),F(G9.$$.fragment),R9r=l(),m7e=a("p"),P9r=o("Instantiates one of the base model classes of the library from a configuration."),B9r=l(),Rc=a("p"),I9r=o(`Note:
Loading a model from its configuration file does `),g7e=a("strong"),N9r=o("not"),q9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),j9r=o("from_pretrained()"),D9r=o(" to load the model weights."),G9r=l(),F(jC.$$.fragment),O9r=l(),jr=a("div"),F(O9.$$.fragment),V9r=l(),h7e=a("p"),X9r=o("Instantiate one of the base model classes of the library from a pretrained model."),z9r=l(),hn=a("p"),W9r=o("The model class to instantiate is selected based on the "),p7e=a("code"),Q9r=o("model_type"),H9r=o(` property of the config object (either
passed as an argument or loaded from `),_7e=a("code"),U9r=o("pretrained_model_name_or_path"),J9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u7e=a("code"),Y9r=o("pretrained_model_name_or_path"),K9r=o(":"),Z9r=l(),re=a("ul"),DC=a("li"),b7e=a("strong"),exr=o("albert"),oxr=o(" \u2014 "),mY=a("a"),rxr=o("FlaxAlbertModel"),txr=o(" (ALBERT model)"),axr=l(),GC=a("li"),v7e=a("strong"),nxr=o("bart"),sxr=o(" \u2014 "),gY=a("a"),lxr=o("FlaxBartModel"),ixr=o(" (BART model)"),dxr=l(),OC=a("li"),F7e=a("strong"),cxr=o("beit"),fxr=o(" \u2014 "),hY=a("a"),mxr=o("FlaxBeitModel"),gxr=o(" (BEiT model)"),hxr=l(),VC=a("li"),T7e=a("strong"),pxr=o("bert"),_xr=o(" \u2014 "),pY=a("a"),uxr=o("FlaxBertModel"),bxr=o(" (BERT model)"),vxr=l(),XC=a("li"),M7e=a("strong"),Fxr=o("big_bird"),Txr=o(" \u2014 "),_Y=a("a"),Mxr=o("FlaxBigBirdModel"),Exr=o(" (BigBird model)"),Cxr=l(),zC=a("li"),E7e=a("strong"),wxr=o("blenderbot"),Axr=o(" \u2014 "),uY=a("a"),Lxr=o("FlaxBlenderbotModel"),yxr=o(" (Blenderbot model)"),xxr=l(),WC=a("li"),C7e=a("strong"),$xr=o("blenderbot-small"),kxr=o(" \u2014 "),bY=a("a"),Sxr=o("FlaxBlenderbotSmallModel"),Rxr=o(" (BlenderbotSmall model)"),Pxr=l(),QC=a("li"),w7e=a("strong"),Bxr=o("clip"),Ixr=o(" \u2014 "),vY=a("a"),Nxr=o("FlaxCLIPModel"),qxr=o(" (CLIP model)"),jxr=l(),HC=a("li"),A7e=a("strong"),Dxr=o("distilbert"),Gxr=o(" \u2014 "),FY=a("a"),Oxr=o("FlaxDistilBertModel"),Vxr=o(" (DistilBERT model)"),Xxr=l(),UC=a("li"),L7e=a("strong"),zxr=o("electra"),Wxr=o(" \u2014 "),TY=a("a"),Qxr=o("FlaxElectraModel"),Hxr=o(" (ELECTRA model)"),Uxr=l(),JC=a("li"),y7e=a("strong"),Jxr=o("gpt2"),Yxr=o(" \u2014 "),MY=a("a"),Kxr=o("FlaxGPT2Model"),Zxr=o(" (OpenAI GPT-2 model)"),e$r=l(),YC=a("li"),x7e=a("strong"),o$r=o("gpt_neo"),r$r=o(" \u2014 "),EY=a("a"),t$r=o("FlaxGPTNeoModel"),a$r=o(" (GPT Neo model)"),n$r=l(),KC=a("li"),$7e=a("strong"),s$r=o("gptj"),l$r=o(" \u2014 "),CY=a("a"),i$r=o("FlaxGPTJModel"),d$r=o(" (GPT-J model)"),c$r=l(),ZC=a("li"),k7e=a("strong"),f$r=o("marian"),m$r=o(" \u2014 "),wY=a("a"),g$r=o("FlaxMarianModel"),h$r=o(" (Marian model)"),p$r=l(),e5=a("li"),S7e=a("strong"),_$r=o("mbart"),u$r=o(" \u2014 "),AY=a("a"),b$r=o("FlaxMBartModel"),v$r=o(" (mBART model)"),F$r=l(),o5=a("li"),R7e=a("strong"),T$r=o("mt5"),M$r=o(" \u2014 "),LY=a("a"),E$r=o("FlaxMT5Model"),C$r=o(" (MT5 model)"),w$r=l(),r5=a("li"),P7e=a("strong"),A$r=o("opt"),L$r=o(" \u2014 "),yY=a("a"),y$r=o("FlaxOPTModel"),x$r=o(" (OPT model)"),$$r=l(),t5=a("li"),B7e=a("strong"),k$r=o("pegasus"),S$r=o(" \u2014 "),xY=a("a"),R$r=o("FlaxPegasusModel"),P$r=o(" (Pegasus model)"),B$r=l(),a5=a("li"),I7e=a("strong"),I$r=o("roberta"),N$r=o(" \u2014 "),$Y=a("a"),q$r=o("FlaxRobertaModel"),j$r=o(" (RoBERTa model)"),D$r=l(),n5=a("li"),N7e=a("strong"),G$r=o("roformer"),O$r=o(" \u2014 "),kY=a("a"),V$r=o("FlaxRoFormerModel"),X$r=o(" (RoFormer model)"),z$r=l(),s5=a("li"),q7e=a("strong"),W$r=o("t5"),Q$r=o(" \u2014 "),SY=a("a"),H$r=o("FlaxT5Model"),U$r=o(" (T5 model)"),J$r=l(),l5=a("li"),j7e=a("strong"),Y$r=o("vision-text-dual-encoder"),K$r=o(" \u2014 "),RY=a("a"),Z$r=o("FlaxVisionTextDualEncoderModel"),ekr=o(" (VisionTextDualEncoder model)"),okr=l(),i5=a("li"),D7e=a("strong"),rkr=o("vit"),tkr=o(" \u2014 "),PY=a("a"),akr=o("FlaxViTModel"),nkr=o(" (ViT model)"),skr=l(),d5=a("li"),G7e=a("strong"),lkr=o("wav2vec2"),ikr=o(" \u2014 "),BY=a("a"),dkr=o("FlaxWav2Vec2Model"),ckr=o(" (Wav2Vec2 model)"),fkr=l(),c5=a("li"),O7e=a("strong"),mkr=o("xglm"),gkr=o(" \u2014 "),IY=a("a"),hkr=o("FlaxXGLMModel"),pkr=o(" (XGLM model)"),_kr=l(),f5=a("li"),V7e=a("strong"),ukr=o("xlm-roberta"),bkr=o(" \u2014 "),NY=a("a"),vkr=o("FlaxXLMRobertaModel"),Fkr=o(" (XLM-RoBERTa model)"),Tkr=l(),F(m5.$$.fragment),RDe=l(),Pc=a("h2"),g5=a("a"),X7e=a("span"),F(V9.$$.fragment),Mkr=l(),z7e=a("span"),Ekr=o("FlaxAutoModelForCausalLM"),PDe=l(),mr=a("div"),F(X9.$$.fragment),Ckr=l(),Bc=a("p"),wkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qY=a("a"),Akr=o("from_pretrained()"),Lkr=o(" class method or the "),jY=a("a"),ykr=o("from_config()"),xkr=o(` class
method.`),$kr=l(),z9=a("p"),kkr=o("This class cannot be instantiated directly using "),W7e=a("code"),Skr=o("__init__()"),Rkr=o(" (throws an error)."),Pkr=l(),Ot=a("div"),F(W9.$$.fragment),Bkr=l(),Q7e=a("p"),Ikr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Nkr=l(),Ic=a("p"),qkr=o(`Note:
Loading a model from its configuration file does `),H7e=a("strong"),jkr=o("not"),Dkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=a("a"),Gkr=o("from_pretrained()"),Okr=o(" to load the model weights."),Vkr=l(),F(h5.$$.fragment),Xkr=l(),Dr=a("div"),F(Q9.$$.fragment),zkr=l(),U7e=a("p"),Wkr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Qkr=l(),pn=a("p"),Hkr=o("The model class to instantiate is selected based on the "),J7e=a("code"),Ukr=o("model_type"),Jkr=o(` property of the config object (either
passed as an argument or loaded from `),Y7e=a("code"),Ykr=o("pretrained_model_name_or_path"),Kkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=a("code"),Zkr=o("pretrained_model_name_or_path"),eSr=o(":"),oSr=l(),ye=a("ul"),p5=a("li"),Z7e=a("strong"),rSr=o("bart"),tSr=o(" \u2014 "),GY=a("a"),aSr=o("FlaxBartForCausalLM"),nSr=o(" (BART model)"),sSr=l(),_5=a("li"),eMe=a("strong"),lSr=o("bert"),iSr=o(" \u2014 "),OY=a("a"),dSr=o("FlaxBertForCausalLM"),cSr=o(" (BERT model)"),fSr=l(),u5=a("li"),oMe=a("strong"),mSr=o("big_bird"),gSr=o(" \u2014 "),VY=a("a"),hSr=o("FlaxBigBirdForCausalLM"),pSr=o(" (BigBird model)"),_Sr=l(),b5=a("li"),rMe=a("strong"),uSr=o("electra"),bSr=o(" \u2014 "),XY=a("a"),vSr=o("FlaxElectraForCausalLM"),FSr=o(" (ELECTRA model)"),TSr=l(),v5=a("li"),tMe=a("strong"),MSr=o("gpt2"),ESr=o(" \u2014 "),zY=a("a"),CSr=o("FlaxGPT2LMHeadModel"),wSr=o(" (OpenAI GPT-2 model)"),ASr=l(),F5=a("li"),aMe=a("strong"),LSr=o("gpt_neo"),ySr=o(" \u2014 "),WY=a("a"),xSr=o("FlaxGPTNeoForCausalLM"),$Sr=o(" (GPT Neo model)"),kSr=l(),T5=a("li"),nMe=a("strong"),SSr=o("gptj"),RSr=o(" \u2014 "),QY=a("a"),PSr=o("FlaxGPTJForCausalLM"),BSr=o(" (GPT-J model)"),ISr=l(),M5=a("li"),sMe=a("strong"),NSr=o("opt"),qSr=o(" \u2014 "),HY=a("a"),jSr=o("FlaxOPTForCausalLM"),DSr=o(" (OPT model)"),GSr=l(),E5=a("li"),lMe=a("strong"),OSr=o("roberta"),VSr=o(" \u2014 "),UY=a("a"),XSr=o("FlaxRobertaForCausalLM"),zSr=o(" (RoBERTa model)"),WSr=l(),C5=a("li"),iMe=a("strong"),QSr=o("xglm"),HSr=o(" \u2014 "),JY=a("a"),USr=o("FlaxXGLMForCausalLM"),JSr=o(" (XGLM model)"),YSr=l(),F(w5.$$.fragment),BDe=l(),Nc=a("h2"),A5=a("a"),dMe=a("span"),F(H9.$$.fragment),KSr=l(),cMe=a("span"),ZSr=o("FlaxAutoModelForPreTraining"),IDe=l(),gr=a("div"),F(U9.$$.fragment),eRr=l(),qc=a("p"),oRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YY=a("a"),rRr=o("from_pretrained()"),tRr=o(" class method or the "),KY=a("a"),aRr=o("from_config()"),nRr=o(` class
method.`),sRr=l(),J9=a("p"),lRr=o("This class cannot be instantiated directly using "),fMe=a("code"),iRr=o("__init__()"),dRr=o(" (throws an error)."),cRr=l(),Vt=a("div"),F(Y9.$$.fragment),fRr=l(),mMe=a("p"),mRr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),gRr=l(),jc=a("p"),hRr=o(`Note:
Loading a model from its configuration file does `),gMe=a("strong"),pRr=o("not"),_Rr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),uRr=o("from_pretrained()"),bRr=o(" to load the model weights."),vRr=l(),F(L5.$$.fragment),FRr=l(),Gr=a("div"),F(K9.$$.fragment),TRr=l(),hMe=a("p"),MRr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ERr=l(),_n=a("p"),CRr=o("The model class to instantiate is selected based on the "),pMe=a("code"),wRr=o("model_type"),ARr=o(` property of the config object (either
passed as an argument or loaded from `),_Me=a("code"),LRr=o("pretrained_model_name_or_path"),yRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=a("code"),xRr=o("pretrained_model_name_or_path"),$Rr=o(":"),kRr=l(),Ee=a("ul"),y5=a("li"),bMe=a("strong"),SRr=o("albert"),RRr=o(" \u2014 "),eK=a("a"),PRr=o("FlaxAlbertForPreTraining"),BRr=o(" (ALBERT model)"),IRr=l(),x5=a("li"),vMe=a("strong"),NRr=o("bart"),qRr=o(" \u2014 "),oK=a("a"),jRr=o("FlaxBartForConditionalGeneration"),DRr=o(" (BART model)"),GRr=l(),$5=a("li"),FMe=a("strong"),ORr=o("bert"),VRr=o(" \u2014 "),rK=a("a"),XRr=o("FlaxBertForPreTraining"),zRr=o(" (BERT model)"),WRr=l(),k5=a("li"),TMe=a("strong"),QRr=o("big_bird"),HRr=o(" \u2014 "),tK=a("a"),URr=o("FlaxBigBirdForPreTraining"),JRr=o(" (BigBird model)"),YRr=l(),S5=a("li"),MMe=a("strong"),KRr=o("electra"),ZRr=o(" \u2014 "),aK=a("a"),ePr=o("FlaxElectraForPreTraining"),oPr=o(" (ELECTRA model)"),rPr=l(),R5=a("li"),EMe=a("strong"),tPr=o("mbart"),aPr=o(" \u2014 "),nK=a("a"),nPr=o("FlaxMBartForConditionalGeneration"),sPr=o(" (mBART model)"),lPr=l(),P5=a("li"),CMe=a("strong"),iPr=o("mt5"),dPr=o(" \u2014 "),sK=a("a"),cPr=o("FlaxMT5ForConditionalGeneration"),fPr=o(" (MT5 model)"),mPr=l(),B5=a("li"),wMe=a("strong"),gPr=o("roberta"),hPr=o(" \u2014 "),lK=a("a"),pPr=o("FlaxRobertaForMaskedLM"),_Pr=o(" (RoBERTa model)"),uPr=l(),I5=a("li"),AMe=a("strong"),bPr=o("roformer"),vPr=o(" \u2014 "),iK=a("a"),FPr=o("FlaxRoFormerForMaskedLM"),TPr=o(" (RoFormer model)"),MPr=l(),N5=a("li"),LMe=a("strong"),EPr=o("t5"),CPr=o(" \u2014 "),dK=a("a"),wPr=o("FlaxT5ForConditionalGeneration"),APr=o(" (T5 model)"),LPr=l(),q5=a("li"),yMe=a("strong"),yPr=o("wav2vec2"),xPr=o(" \u2014 "),cK=a("a"),$Pr=o("FlaxWav2Vec2ForPreTraining"),kPr=o(" (Wav2Vec2 model)"),SPr=l(),j5=a("li"),xMe=a("strong"),RPr=o("xlm-roberta"),PPr=o(" \u2014 "),fK=a("a"),BPr=o("FlaxXLMRobertaForMaskedLM"),IPr=o(" (XLM-RoBERTa model)"),NPr=l(),F(D5.$$.fragment),NDe=l(),Dc=a("h2"),G5=a("a"),$Me=a("span"),F(Z9.$$.fragment),qPr=l(),kMe=a("span"),jPr=o("FlaxAutoModelForMaskedLM"),qDe=l(),hr=a("div"),F(ex.$$.fragment),DPr=l(),Gc=a("p"),GPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mK=a("a"),OPr=o("from_pretrained()"),VPr=o(" class method or the "),gK=a("a"),XPr=o("from_config()"),zPr=o(` class
method.`),WPr=l(),ox=a("p"),QPr=o("This class cannot be instantiated directly using "),SMe=a("code"),HPr=o("__init__()"),UPr=o(" (throws an error)."),JPr=l(),Xt=a("div"),F(rx.$$.fragment),YPr=l(),RMe=a("p"),KPr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ZPr=l(),Oc=a("p"),eBr=o(`Note:
Loading a model from its configuration file does `),PMe=a("strong"),oBr=o("not"),rBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),tBr=o("from_pretrained()"),aBr=o(" to load the model weights."),nBr=l(),F(O5.$$.fragment),sBr=l(),Or=a("div"),F(tx.$$.fragment),lBr=l(),BMe=a("p"),iBr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dBr=l(),un=a("p"),cBr=o("The model class to instantiate is selected based on the "),IMe=a("code"),fBr=o("model_type"),mBr=o(` property of the config object (either
passed as an argument or loaded from `),NMe=a("code"),gBr=o("pretrained_model_name_or_path"),hBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=a("code"),pBr=o("pretrained_model_name_or_path"),_Br=o(":"),uBr=l(),xe=a("ul"),V5=a("li"),jMe=a("strong"),bBr=o("albert"),vBr=o(" \u2014 "),pK=a("a"),FBr=o("FlaxAlbertForMaskedLM"),TBr=o(" (ALBERT model)"),MBr=l(),X5=a("li"),DMe=a("strong"),EBr=o("bart"),CBr=o(" \u2014 "),_K=a("a"),wBr=o("FlaxBartForConditionalGeneration"),ABr=o(" (BART model)"),LBr=l(),z5=a("li"),GMe=a("strong"),yBr=o("bert"),xBr=o(" \u2014 "),uK=a("a"),$Br=o("FlaxBertForMaskedLM"),kBr=o(" (BERT model)"),SBr=l(),W5=a("li"),OMe=a("strong"),RBr=o("big_bird"),PBr=o(" \u2014 "),bK=a("a"),BBr=o("FlaxBigBirdForMaskedLM"),IBr=o(" (BigBird model)"),NBr=l(),Q5=a("li"),VMe=a("strong"),qBr=o("distilbert"),jBr=o(" \u2014 "),vK=a("a"),DBr=o("FlaxDistilBertForMaskedLM"),GBr=o(" (DistilBERT model)"),OBr=l(),H5=a("li"),XMe=a("strong"),VBr=o("electra"),XBr=o(" \u2014 "),FK=a("a"),zBr=o("FlaxElectraForMaskedLM"),WBr=o(" (ELECTRA model)"),QBr=l(),U5=a("li"),zMe=a("strong"),HBr=o("mbart"),UBr=o(" \u2014 "),TK=a("a"),JBr=o("FlaxMBartForConditionalGeneration"),YBr=o(" (mBART model)"),KBr=l(),J5=a("li"),WMe=a("strong"),ZBr=o("roberta"),eIr=o(" \u2014 "),MK=a("a"),oIr=o("FlaxRobertaForMaskedLM"),rIr=o(" (RoBERTa model)"),tIr=l(),Y5=a("li"),QMe=a("strong"),aIr=o("roformer"),nIr=o(" \u2014 "),EK=a("a"),sIr=o("FlaxRoFormerForMaskedLM"),lIr=o(" (RoFormer model)"),iIr=l(),K5=a("li"),HMe=a("strong"),dIr=o("xlm-roberta"),cIr=o(" \u2014 "),CK=a("a"),fIr=o("FlaxXLMRobertaForMaskedLM"),mIr=o(" (XLM-RoBERTa model)"),gIr=l(),F(Z5.$$.fragment),jDe=l(),Vc=a("h2"),e0=a("a"),UMe=a("span"),F(ax.$$.fragment),hIr=l(),JMe=a("span"),pIr=o("FlaxAutoModelForSeq2SeqLM"),DDe=l(),pr=a("div"),F(nx.$$.fragment),_Ir=l(),Xc=a("p"),uIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wK=a("a"),bIr=o("from_pretrained()"),vIr=o(" class method or the "),AK=a("a"),FIr=o("from_config()"),TIr=o(` class
method.`),MIr=l(),sx=a("p"),EIr=o("This class cannot be instantiated directly using "),YMe=a("code"),CIr=o("__init__()"),wIr=o(" (throws an error)."),AIr=l(),zt=a("div"),F(lx.$$.fragment),LIr=l(),KMe=a("p"),yIr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xIr=l(),zc=a("p"),$Ir=o(`Note:
Loading a model from its configuration file does `),ZMe=a("strong"),kIr=o("not"),SIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=a("a"),RIr=o("from_pretrained()"),PIr=o(" to load the model weights."),BIr=l(),F(o0.$$.fragment),IIr=l(),Vr=a("div"),F(ix.$$.fragment),NIr=l(),eEe=a("p"),qIr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jIr=l(),bn=a("p"),DIr=o("The model class to instantiate is selected based on the "),oEe=a("code"),GIr=o("model_type"),OIr=o(` property of the config object (either
passed as an argument or loaded from `),rEe=a("code"),VIr=o("pretrained_model_name_or_path"),XIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=a("code"),zIr=o("pretrained_model_name_or_path"),WIr=o(":"),QIr=l(),Pe=a("ul"),r0=a("li"),aEe=a("strong"),HIr=o("bart"),UIr=o(" \u2014 "),yK=a("a"),JIr=o("FlaxBartForConditionalGeneration"),YIr=o(" (BART model)"),KIr=l(),t0=a("li"),nEe=a("strong"),ZIr=o("blenderbot"),eNr=o(" \u2014 "),xK=a("a"),oNr=o("FlaxBlenderbotForConditionalGeneration"),rNr=o(" (Blenderbot model)"),tNr=l(),a0=a("li"),sEe=a("strong"),aNr=o("blenderbot-small"),nNr=o(" \u2014 "),$K=a("a"),sNr=o("FlaxBlenderbotSmallForConditionalGeneration"),lNr=o(" (BlenderbotSmall model)"),iNr=l(),n0=a("li"),lEe=a("strong"),dNr=o("encoder-decoder"),cNr=o(" \u2014 "),kK=a("a"),fNr=o("FlaxEncoderDecoderModel"),mNr=o(" (Encoder decoder model)"),gNr=l(),s0=a("li"),iEe=a("strong"),hNr=o("marian"),pNr=o(" \u2014 "),SK=a("a"),_Nr=o("FlaxMarianMTModel"),uNr=o(" (Marian model)"),bNr=l(),l0=a("li"),dEe=a("strong"),vNr=o("mbart"),FNr=o(" \u2014 "),RK=a("a"),TNr=o("FlaxMBartForConditionalGeneration"),MNr=o(" (mBART model)"),ENr=l(),i0=a("li"),cEe=a("strong"),CNr=o("mt5"),wNr=o(" \u2014 "),PK=a("a"),ANr=o("FlaxMT5ForConditionalGeneration"),LNr=o(" (MT5 model)"),yNr=l(),d0=a("li"),fEe=a("strong"),xNr=o("pegasus"),$Nr=o(" \u2014 "),BK=a("a"),kNr=o("FlaxPegasusForConditionalGeneration"),SNr=o(" (Pegasus model)"),RNr=l(),c0=a("li"),mEe=a("strong"),PNr=o("t5"),BNr=o(" \u2014 "),IK=a("a"),INr=o("FlaxT5ForConditionalGeneration"),NNr=o(" (T5 model)"),qNr=l(),F(f0.$$.fragment),GDe=l(),Wc=a("h2"),m0=a("a"),gEe=a("span"),F(dx.$$.fragment),jNr=l(),hEe=a("span"),DNr=o("FlaxAutoModelForSequenceClassification"),ODe=l(),_r=a("div"),F(cx.$$.fragment),GNr=l(),Qc=a("p"),ONr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NK=a("a"),VNr=o("from_pretrained()"),XNr=o(" class method or the "),qK=a("a"),zNr=o("from_config()"),WNr=o(` class
method.`),QNr=l(),fx=a("p"),HNr=o("This class cannot be instantiated directly using "),pEe=a("code"),UNr=o("__init__()"),JNr=o(" (throws an error)."),YNr=l(),Wt=a("div"),F(mx.$$.fragment),KNr=l(),_Ee=a("p"),ZNr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),eqr=l(),Hc=a("p"),oqr=o(`Note:
Loading a model from its configuration file does `),uEe=a("strong"),rqr=o("not"),tqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),aqr=o("from_pretrained()"),nqr=o(" to load the model weights."),sqr=l(),F(g0.$$.fragment),lqr=l(),Xr=a("div"),F(gx.$$.fragment),iqr=l(),bEe=a("p"),dqr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cqr=l(),vn=a("p"),fqr=o("The model class to instantiate is selected based on the "),vEe=a("code"),mqr=o("model_type"),gqr=o(` property of the config object (either
passed as an argument or loaded from `),FEe=a("code"),hqr=o("pretrained_model_name_or_path"),pqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TEe=a("code"),_qr=o("pretrained_model_name_or_path"),uqr=o(":"),bqr=l(),$e=a("ul"),h0=a("li"),MEe=a("strong"),vqr=o("albert"),Fqr=o(" \u2014 "),DK=a("a"),Tqr=o("FlaxAlbertForSequenceClassification"),Mqr=o(" (ALBERT model)"),Eqr=l(),p0=a("li"),EEe=a("strong"),Cqr=o("bart"),wqr=o(" \u2014 "),GK=a("a"),Aqr=o("FlaxBartForSequenceClassification"),Lqr=o(" (BART model)"),yqr=l(),_0=a("li"),CEe=a("strong"),xqr=o("bert"),$qr=o(" \u2014 "),OK=a("a"),kqr=o("FlaxBertForSequenceClassification"),Sqr=o(" (BERT model)"),Rqr=l(),u0=a("li"),wEe=a("strong"),Pqr=o("big_bird"),Bqr=o(" \u2014 "),VK=a("a"),Iqr=o("FlaxBigBirdForSequenceClassification"),Nqr=o(" (BigBird model)"),qqr=l(),b0=a("li"),AEe=a("strong"),jqr=o("distilbert"),Dqr=o(" \u2014 "),XK=a("a"),Gqr=o("FlaxDistilBertForSequenceClassification"),Oqr=o(" (DistilBERT model)"),Vqr=l(),v0=a("li"),LEe=a("strong"),Xqr=o("electra"),zqr=o(" \u2014 "),zK=a("a"),Wqr=o("FlaxElectraForSequenceClassification"),Qqr=o(" (ELECTRA model)"),Hqr=l(),F0=a("li"),yEe=a("strong"),Uqr=o("mbart"),Jqr=o(" \u2014 "),WK=a("a"),Yqr=o("FlaxMBartForSequenceClassification"),Kqr=o(" (mBART model)"),Zqr=l(),T0=a("li"),xEe=a("strong"),ejr=o("roberta"),ojr=o(" \u2014 "),QK=a("a"),rjr=o("FlaxRobertaForSequenceClassification"),tjr=o(" (RoBERTa model)"),ajr=l(),M0=a("li"),$Ee=a("strong"),njr=o("roformer"),sjr=o(" \u2014 "),HK=a("a"),ljr=o("FlaxRoFormerForSequenceClassification"),ijr=o(" (RoFormer model)"),djr=l(),E0=a("li"),kEe=a("strong"),cjr=o("xlm-roberta"),fjr=o(" \u2014 "),UK=a("a"),mjr=o("FlaxXLMRobertaForSequenceClassification"),gjr=o(" (XLM-RoBERTa model)"),hjr=l(),F(C0.$$.fragment),VDe=l(),Uc=a("h2"),w0=a("a"),SEe=a("span"),F(hx.$$.fragment),pjr=l(),REe=a("span"),_jr=o("FlaxAutoModelForQuestionAnswering"),XDe=l(),ur=a("div"),F(px.$$.fragment),ujr=l(),Jc=a("p"),bjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JK=a("a"),vjr=o("from_pretrained()"),Fjr=o(" class method or the "),YK=a("a"),Tjr=o("from_config()"),Mjr=o(` class
method.`),Ejr=l(),_x=a("p"),Cjr=o("This class cannot be instantiated directly using "),PEe=a("code"),wjr=o("__init__()"),Ajr=o(" (throws an error)."),Ljr=l(),Qt=a("div"),F(ux.$$.fragment),yjr=l(),BEe=a("p"),xjr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$jr=l(),Yc=a("p"),kjr=o(`Note:
Loading a model from its configuration file does `),IEe=a("strong"),Sjr=o("not"),Rjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=a("a"),Pjr=o("from_pretrained()"),Bjr=o(" to load the model weights."),Ijr=l(),F(A0.$$.fragment),Njr=l(),zr=a("div"),F(bx.$$.fragment),qjr=l(),NEe=a("p"),jjr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Djr=l(),Fn=a("p"),Gjr=o("The model class to instantiate is selected based on the "),qEe=a("code"),Ojr=o("model_type"),Vjr=o(` property of the config object (either
passed as an argument or loaded from `),jEe=a("code"),Xjr=o("pretrained_model_name_or_path"),zjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DEe=a("code"),Wjr=o("pretrained_model_name_or_path"),Qjr=o(":"),Hjr=l(),ke=a("ul"),L0=a("li"),GEe=a("strong"),Ujr=o("albert"),Jjr=o(" \u2014 "),ZK=a("a"),Yjr=o("FlaxAlbertForQuestionAnswering"),Kjr=o(" (ALBERT model)"),Zjr=l(),y0=a("li"),OEe=a("strong"),eDr=o("bart"),oDr=o(" \u2014 "),eZ=a("a"),rDr=o("FlaxBartForQuestionAnswering"),tDr=o(" (BART model)"),aDr=l(),x0=a("li"),VEe=a("strong"),nDr=o("bert"),sDr=o(" \u2014 "),oZ=a("a"),lDr=o("FlaxBertForQuestionAnswering"),iDr=o(" (BERT model)"),dDr=l(),$0=a("li"),XEe=a("strong"),cDr=o("big_bird"),fDr=o(" \u2014 "),rZ=a("a"),mDr=o("FlaxBigBirdForQuestionAnswering"),gDr=o(" (BigBird model)"),hDr=l(),k0=a("li"),zEe=a("strong"),pDr=o("distilbert"),_Dr=o(" \u2014 "),tZ=a("a"),uDr=o("FlaxDistilBertForQuestionAnswering"),bDr=o(" (DistilBERT model)"),vDr=l(),S0=a("li"),WEe=a("strong"),FDr=o("electra"),TDr=o(" \u2014 "),aZ=a("a"),MDr=o("FlaxElectraForQuestionAnswering"),EDr=o(" (ELECTRA model)"),CDr=l(),R0=a("li"),QEe=a("strong"),wDr=o("mbart"),ADr=o(" \u2014 "),nZ=a("a"),LDr=o("FlaxMBartForQuestionAnswering"),yDr=o(" (mBART model)"),xDr=l(),P0=a("li"),HEe=a("strong"),$Dr=o("roberta"),kDr=o(" \u2014 "),sZ=a("a"),SDr=o("FlaxRobertaForQuestionAnswering"),RDr=o(" (RoBERTa model)"),PDr=l(),B0=a("li"),UEe=a("strong"),BDr=o("roformer"),IDr=o(" \u2014 "),lZ=a("a"),NDr=o("FlaxRoFormerForQuestionAnswering"),qDr=o(" (RoFormer model)"),jDr=l(),I0=a("li"),JEe=a("strong"),DDr=o("xlm-roberta"),GDr=o(" \u2014 "),iZ=a("a"),ODr=o("FlaxXLMRobertaForQuestionAnswering"),VDr=o(" (XLM-RoBERTa model)"),XDr=l(),F(N0.$$.fragment),zDe=l(),Kc=a("h2"),q0=a("a"),YEe=a("span"),F(vx.$$.fragment),zDr=l(),KEe=a("span"),WDr=o("FlaxAutoModelForTokenClassification"),WDe=l(),br=a("div"),F(Fx.$$.fragment),QDr=l(),Zc=a("p"),HDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dZ=a("a"),UDr=o("from_pretrained()"),JDr=o(" class method or the "),cZ=a("a"),YDr=o("from_config()"),KDr=o(` class
method.`),ZDr=l(),Tx=a("p"),eGr=o("This class cannot be instantiated directly using "),ZEe=a("code"),oGr=o("__init__()"),rGr=o(" (throws an error)."),tGr=l(),Ht=a("div"),F(Mx.$$.fragment),aGr=l(),eCe=a("p"),nGr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sGr=l(),ef=a("p"),lGr=o(`Note:
Loading a model from its configuration file does `),oCe=a("strong"),iGr=o("not"),dGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=a("a"),cGr=o("from_pretrained()"),fGr=o(" to load the model weights."),mGr=l(),F(j0.$$.fragment),gGr=l(),Wr=a("div"),F(Ex.$$.fragment),hGr=l(),rCe=a("p"),pGr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_Gr=l(),Tn=a("p"),uGr=o("The model class to instantiate is selected based on the "),tCe=a("code"),bGr=o("model_type"),vGr=o(` property of the config object (either
passed as an argument or loaded from `),aCe=a("code"),FGr=o("pretrained_model_name_or_path"),TGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nCe=a("code"),MGr=o("pretrained_model_name_or_path"),EGr=o(":"),CGr=l(),Ge=a("ul"),D0=a("li"),sCe=a("strong"),wGr=o("albert"),AGr=o(" \u2014 "),mZ=a("a"),LGr=o("FlaxAlbertForTokenClassification"),yGr=o(" (ALBERT model)"),xGr=l(),G0=a("li"),lCe=a("strong"),$Gr=o("bert"),kGr=o(" \u2014 "),gZ=a("a"),SGr=o("FlaxBertForTokenClassification"),RGr=o(" (BERT model)"),PGr=l(),O0=a("li"),iCe=a("strong"),BGr=o("big_bird"),IGr=o(" \u2014 "),hZ=a("a"),NGr=o("FlaxBigBirdForTokenClassification"),qGr=o(" (BigBird model)"),jGr=l(),V0=a("li"),dCe=a("strong"),DGr=o("distilbert"),GGr=o(" \u2014 "),pZ=a("a"),OGr=o("FlaxDistilBertForTokenClassification"),VGr=o(" (DistilBERT model)"),XGr=l(),X0=a("li"),cCe=a("strong"),zGr=o("electra"),WGr=o(" \u2014 "),_Z=a("a"),QGr=o("FlaxElectraForTokenClassification"),HGr=o(" (ELECTRA model)"),UGr=l(),z0=a("li"),fCe=a("strong"),JGr=o("roberta"),YGr=o(" \u2014 "),uZ=a("a"),KGr=o("FlaxRobertaForTokenClassification"),ZGr=o(" (RoBERTa model)"),eOr=l(),W0=a("li"),mCe=a("strong"),oOr=o("roformer"),rOr=o(" \u2014 "),bZ=a("a"),tOr=o("FlaxRoFormerForTokenClassification"),aOr=o(" (RoFormer model)"),nOr=l(),Q0=a("li"),gCe=a("strong"),sOr=o("xlm-roberta"),lOr=o(" \u2014 "),vZ=a("a"),iOr=o("FlaxXLMRobertaForTokenClassification"),dOr=o(" (XLM-RoBERTa model)"),cOr=l(),F(H0.$$.fragment),QDe=l(),of=a("h2"),U0=a("a"),hCe=a("span"),F(Cx.$$.fragment),fOr=l(),pCe=a("span"),mOr=o("FlaxAutoModelForMultipleChoice"),HDe=l(),vr=a("div"),F(wx.$$.fragment),gOr=l(),rf=a("p"),hOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FZ=a("a"),pOr=o("from_pretrained()"),_Or=o(" class method or the "),TZ=a("a"),uOr=o("from_config()"),bOr=o(` class
method.`),vOr=l(),Ax=a("p"),FOr=o("This class cannot be instantiated directly using "),_Ce=a("code"),TOr=o("__init__()"),MOr=o(" (throws an error)."),EOr=l(),Ut=a("div"),F(Lx.$$.fragment),COr=l(),uCe=a("p"),wOr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),AOr=l(),tf=a("p"),LOr=o(`Note:
Loading a model from its configuration file does `),bCe=a("strong"),yOr=o("not"),xOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=a("a"),$Or=o("from_pretrained()"),kOr=o(" to load the model weights."),SOr=l(),F(J0.$$.fragment),ROr=l(),Qr=a("div"),F(yx.$$.fragment),POr=l(),vCe=a("p"),BOr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),IOr=l(),Mn=a("p"),NOr=o("The model class to instantiate is selected based on the "),FCe=a("code"),qOr=o("model_type"),jOr=o(` property of the config object (either
passed as an argument or loaded from `),TCe=a("code"),DOr=o("pretrained_model_name_or_path"),GOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MCe=a("code"),OOr=o("pretrained_model_name_or_path"),VOr=o(":"),XOr=l(),Oe=a("ul"),Y0=a("li"),ECe=a("strong"),zOr=o("albert"),WOr=o(" \u2014 "),EZ=a("a"),QOr=o("FlaxAlbertForMultipleChoice"),HOr=o(" (ALBERT model)"),UOr=l(),K0=a("li"),CCe=a("strong"),JOr=o("bert"),YOr=o(" \u2014 "),CZ=a("a"),KOr=o("FlaxBertForMultipleChoice"),ZOr=o(" (BERT model)"),eVr=l(),Z0=a("li"),wCe=a("strong"),oVr=o("big_bird"),rVr=o(" \u2014 "),wZ=a("a"),tVr=o("FlaxBigBirdForMultipleChoice"),aVr=o(" (BigBird model)"),nVr=l(),ew=a("li"),ACe=a("strong"),sVr=o("distilbert"),lVr=o(" \u2014 "),AZ=a("a"),iVr=o("FlaxDistilBertForMultipleChoice"),dVr=o(" (DistilBERT model)"),cVr=l(),ow=a("li"),LCe=a("strong"),fVr=o("electra"),mVr=o(" \u2014 "),LZ=a("a"),gVr=o("FlaxElectraForMultipleChoice"),hVr=o(" (ELECTRA model)"),pVr=l(),rw=a("li"),yCe=a("strong"),_Vr=o("roberta"),uVr=o(" \u2014 "),yZ=a("a"),bVr=o("FlaxRobertaForMultipleChoice"),vVr=o(" (RoBERTa model)"),FVr=l(),tw=a("li"),xCe=a("strong"),TVr=o("roformer"),MVr=o(" \u2014 "),xZ=a("a"),EVr=o("FlaxRoFormerForMultipleChoice"),CVr=o(" (RoFormer model)"),wVr=l(),aw=a("li"),$Ce=a("strong"),AVr=o("xlm-roberta"),LVr=o(" \u2014 "),$Z=a("a"),yVr=o("FlaxXLMRobertaForMultipleChoice"),xVr=o(" (XLM-RoBERTa model)"),$Vr=l(),F(nw.$$.fragment),UDe=l(),af=a("h2"),sw=a("a"),kCe=a("span"),F(xx.$$.fragment),kVr=l(),SCe=a("span"),SVr=o("FlaxAutoModelForNextSentencePrediction"),JDe=l(),Fr=a("div"),F($x.$$.fragment),RVr=l(),nf=a("p"),PVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kZ=a("a"),BVr=o("from_pretrained()"),IVr=o(" class method or the "),SZ=a("a"),NVr=o("from_config()"),qVr=o(` class
method.`),jVr=l(),kx=a("p"),DVr=o("This class cannot be instantiated directly using "),RCe=a("code"),GVr=o("__init__()"),OVr=o(" (throws an error)."),VVr=l(),Jt=a("div"),F(Sx.$$.fragment),XVr=l(),PCe=a("p"),zVr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),WVr=l(),sf=a("p"),QVr=o(`Note:
Loading a model from its configuration file does `),BCe=a("strong"),HVr=o("not"),UVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RZ=a("a"),JVr=o("from_pretrained()"),YVr=o(" to load the model weights."),KVr=l(),F(lw.$$.fragment),ZVr=l(),Hr=a("div"),F(Rx.$$.fragment),eXr=l(),ICe=a("p"),oXr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rXr=l(),En=a("p"),tXr=o("The model class to instantiate is selected based on the "),NCe=a("code"),aXr=o("model_type"),nXr=o(` property of the config object (either
passed as an argument or loaded from `),qCe=a("code"),sXr=o("pretrained_model_name_or_path"),lXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jCe=a("code"),iXr=o("pretrained_model_name_or_path"),dXr=o(":"),cXr=l(),DCe=a("ul"),iw=a("li"),GCe=a("strong"),fXr=o("bert"),mXr=o(" \u2014 "),PZ=a("a"),gXr=o("FlaxBertForNextSentencePrediction"),hXr=o(" (BERT model)"),pXr=l(),F(dw.$$.fragment),YDe=l(),lf=a("h2"),cw=a("a"),OCe=a("span"),F(Px.$$.fragment),_Xr=l(),VCe=a("span"),uXr=o("FlaxAutoModelForImageClassification"),KDe=l(),Tr=a("div"),F(Bx.$$.fragment),bXr=l(),df=a("p"),vXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BZ=a("a"),FXr=o("from_pretrained()"),TXr=o(" class method or the "),IZ=a("a"),MXr=o("from_config()"),EXr=o(` class
method.`),CXr=l(),Ix=a("p"),wXr=o("This class cannot be instantiated directly using "),XCe=a("code"),AXr=o("__init__()"),LXr=o(" (throws an error)."),yXr=l(),Yt=a("div"),F(Nx.$$.fragment),xXr=l(),zCe=a("p"),$Xr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kXr=l(),cf=a("p"),SXr=o(`Note:
Loading a model from its configuration file does `),WCe=a("strong"),RXr=o("not"),PXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NZ=a("a"),BXr=o("from_pretrained()"),IXr=o(" to load the model weights."),NXr=l(),F(fw.$$.fragment),qXr=l(),Ur=a("div"),F(qx.$$.fragment),jXr=l(),QCe=a("p"),DXr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GXr=l(),Cn=a("p"),OXr=o("The model class to instantiate is selected based on the "),HCe=a("code"),VXr=o("model_type"),XXr=o(` property of the config object (either
passed as an argument or loaded from `),UCe=a("code"),zXr=o("pretrained_model_name_or_path"),WXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JCe=a("code"),QXr=o("pretrained_model_name_or_path"),HXr=o(":"),UXr=l(),jx=a("ul"),mw=a("li"),YCe=a("strong"),JXr=o("beit"),YXr=o(" \u2014 "),qZ=a("a"),KXr=o("FlaxBeitForImageClassification"),ZXr=o(" (BEiT model)"),ezr=l(),gw=a("li"),KCe=a("strong"),ozr=o("vit"),rzr=o(" \u2014 "),jZ=a("a"),tzr=o("FlaxViTForImageClassification"),azr=o(" (ViT model)"),nzr=l(),F(hw.$$.fragment),ZDe=l(),ff=a("h2"),pw=a("a"),ZCe=a("span"),F(Dx.$$.fragment),szr=l(),e5e=a("span"),lzr=o("FlaxAutoModelForVision2Seq"),eGe=l(),Mr=a("div"),F(Gx.$$.fragment),izr=l(),mf=a("p"),dzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DZ=a("a"),czr=o("from_pretrained()"),fzr=o(" class method or the "),GZ=a("a"),mzr=o("from_config()"),gzr=o(` class
method.`),hzr=l(),Ox=a("p"),pzr=o("This class cannot be instantiated directly using "),o5e=a("code"),_zr=o("__init__()"),uzr=o(" (throws an error)."),bzr=l(),Kt=a("div"),F(Vx.$$.fragment),vzr=l(),r5e=a("p"),Fzr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Tzr=l(),gf=a("p"),Mzr=o(`Note:
Loading a model from its configuration file does `),t5e=a("strong"),Ezr=o("not"),Czr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),wzr=o("from_pretrained()"),Azr=o(" to load the model weights."),Lzr=l(),F(_w.$$.fragment),yzr=l(),Jr=a("div"),F(Xx.$$.fragment),xzr=l(),a5e=a("p"),$zr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kzr=l(),wn=a("p"),Szr=o("The model class to instantiate is selected based on the "),n5e=a("code"),Rzr=o("model_type"),Pzr=o(` property of the config object (either
passed as an argument or loaded from `),s5e=a("code"),Bzr=o("pretrained_model_name_or_path"),Izr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l5e=a("code"),Nzr=o("pretrained_model_name_or_path"),qzr=o(":"),jzr=l(),i5e=a("ul"),uw=a("li"),d5e=a("strong"),Dzr=o("vision-encoder-decoder"),Gzr=o(" \u2014 "),VZ=a("a"),Ozr=o("FlaxVisionEncoderDecoderModel"),Vzr=o(" (Vision Encoder decoder model)"),Xzr=l(),F(bw.$$.fragment),this.h()},l(f){const u=KSt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var zx=s(p);m=n(zx,"A",{id:!0,class:!0,href:!0});var c5e=s(m);_=n(c5e,"SPAN",{});var f5e=s(_);T(d.$$.fragment,f5e),f5e.forEach(t),c5e.forEach(t),h=i(zx),Mo=n(zx,"SPAN",{});var m5e=s(Mo);gi=r(m5e,"Auto Classes"),m5e.forEach(t),zx.forEach(t),uf=i(f),rt=n(f,"P",{});var Wx=s(rt);hi=r(Wx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=n(Wx,"CODE",{});var g5e=s(pi);I6=r(g5e,"from_pretrained()"),g5e.forEach(t),bf=r(Wx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Wx.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);_i=r(An,"Instantiating one of "),Ln=n(An,"A",{href:!0});var h5e=s(Ln);N6=r(h5e,"AutoConfig"),h5e.forEach(t),yn=r(An,", "),xn=n(An,"A",{href:!0});var p5e=s(xn);q6=r(p5e,"AutoModel"),p5e.forEach(t),ui=r(An,`, and
`),$n=n(An,"A",{href:!0});var _5e=s($n);j6=r(_5e,"AutoTokenizer"),_5e.forEach(t),bi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),vf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Qx=s(Ae);sk=r(Qx,"will create a model that is an instance of "),vi=n(Qx,"A",{href:!0});var u5e=s(vi);lk=r(u5e,"BertModel"),u5e.forEach(t),ik=r(Qx,"."),Qx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Hx=s(wa);dk=r(Hx,"There is one class of "),Ff=n(Hx,"CODE",{});var b5e=s(Ff);ck=r(b5e,"AutoModel"),b5e.forEach(t),dVe=r(Hx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Hx.forEach(t),Kqe=i(f),Fi=n(f,"H2",{class:!0});var Ux=s(Fi);Tf=n(Ux,"A",{id:!0,class:!0,href:!0});var v5e=s(Tf);Ioe=n(v5e,"SPAN",{});var F5e=s(Ioe);T(D6.$$.fragment,F5e),F5e.forEach(t),v5e.forEach(t),cVe=i(Ux),Noe=n(Ux,"SPAN",{});var T5e=s(Noe);fVe=r(T5e,"Extending the Auto Classes"),T5e.forEach(t),Ux.forEach(t),Zqe=i(f),kn=n(f,"P",{});var hf=s(kn);mVe=r(hf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qoe=n(hf,"CODE",{});var M5e=s(qoe);gVe=r(M5e,"NewModel"),M5e.forEach(t),hVe=r(hf,", make sure you have a "),joe=n(hf,"CODE",{});var E5e=s(joe);pVe=r(E5e,"NewModelConfig"),E5e.forEach(t),_Ve=r(hf,` then you can add those to the auto
classes like this:`),hf.forEach(t),eje=i(f),T(G6.$$.fragment,f),oje=i(f),fk=n(f,"P",{});var C5e=s(fk);uVe=r(C5e,"You will then be able to use the auto classes like you would usually do!"),C5e.forEach(t),rje=i(f),T(Mf.$$.fragment,f),tje=i(f),Ti=n(f,"H2",{class:!0});var Jx=s(Ti);Ef=n(Jx,"A",{id:!0,class:!0,href:!0});var w5e=s(Ef);Doe=n(w5e,"SPAN",{});var A5e=s(Doe);T(O6.$$.fragment,A5e),A5e.forEach(t),w5e.forEach(t),bVe=i(Jx),Goe=n(Jx,"SPAN",{});var L5e=s(Goe);vVe=r(L5e,"AutoConfig"),L5e.forEach(t),Jx.forEach(t),aje=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(V6.$$.fragment,et),FVe=i(et),X6=n(et,"P",{});var Yx=s(X6);TVe=r(Yx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),mk=n(Yx,"A",{href:!0});var y5e=s(mk);MVe=r(y5e,"from_pretrained()"),y5e.forEach(t),EVe=r(Yx," class method."),Yx.forEach(t),CVe=i(et),z6=n(et,"P",{});var Kx=s(z6);wVe=r(Kx,"This class cannot be instantiated directly using "),Ooe=n(Kx,"CODE",{});var x5e=s(Ooe);AVe=r(x5e,"__init__()"),x5e.forEach(t),LVe=r(Kx," (throws an error)."),Kx.forEach(t),yVe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(W6.$$.fragment,ot),xVe=i(ot),Voe=n(ot,"P",{});var $5e=s(Voe);$Ve=r($5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),$5e.forEach(t),kVe=i(ot),Mi=n(ot,"P",{});var pf=s(Mi);SVe=r(pf,"The configuration class to instantiate is selected based on the "),Xoe=n(pf,"CODE",{});var k5e=s(Xoe);RVe=r(k5e,"model_type"),k5e.forEach(t),PVe=r(pf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zoe=n(pf,"CODE",{});var S5e=s(zoe);BVe=r(S5e,"pretrained_model_name_or_path"),S5e.forEach(t),IVe=r(pf,":"),pf.forEach(t),NVe=i(ot),A=n(ot,"UL",{});var L=s(A);Cf=n(L,"LI",{});var vw=s(Cf);Woe=n(vw,"STRONG",{});var R5e=s(Woe);qVe=r(R5e,"albert"),R5e.forEach(t),jVe=r(vw," \u2014 "),gk=n(vw,"A",{href:!0});var P5e=s(gk);DVe=r(P5e,"AlbertConfig"),P5e.forEach(t),GVe=r(vw," (ALBERT model)"),vw.forEach(t),OVe=i(L),wf=n(L,"LI",{});var Fw=s(wf);Qoe=n(Fw,"STRONG",{});var B5e=s(Qoe);VVe=r(B5e,"bart"),B5e.forEach(t),XVe=r(Fw," \u2014 "),hk=n(Fw,"A",{href:!0});var I5e=s(hk);zVe=r(I5e,"BartConfig"),I5e.forEach(t),WVe=r(Fw," (BART model)"),Fw.forEach(t),QVe=i(L),Af=n(L,"LI",{});var Tw=s(Af);Hoe=n(Tw,"STRONG",{});var N5e=s(Hoe);HVe=r(N5e,"beit"),N5e.forEach(t),UVe=r(Tw," \u2014 "),pk=n(Tw,"A",{href:!0});var q5e=s(pk);JVe=r(q5e,"BeitConfig"),q5e.forEach(t),YVe=r(Tw," (BEiT model)"),Tw.forEach(t),KVe=i(L),Lf=n(L,"LI",{});var Mw=s(Lf);Uoe=n(Mw,"STRONG",{});var j5e=s(Uoe);ZVe=r(j5e,"bert"),j5e.forEach(t),eXe=r(Mw," \u2014 "),_k=n(Mw,"A",{href:!0});var D5e=s(_k);oXe=r(D5e,"BertConfig"),D5e.forEach(t),rXe=r(Mw," (BERT model)"),Mw.forEach(t),tXe=i(L),yf=n(L,"LI",{});var Ew=s(yf);Joe=n(Ew,"STRONG",{});var G5e=s(Joe);aXe=r(G5e,"bert-generation"),G5e.forEach(t),nXe=r(Ew," \u2014 "),uk=n(Ew,"A",{href:!0});var O5e=s(uk);sXe=r(O5e,"BertGenerationConfig"),O5e.forEach(t),lXe=r(Ew," (Bert Generation model)"),Ew.forEach(t),iXe=i(L),xf=n(L,"LI",{});var Cw=s(xf);Yoe=n(Cw,"STRONG",{});var V5e=s(Yoe);dXe=r(V5e,"big_bird"),V5e.forEach(t),cXe=r(Cw," \u2014 "),bk=n(Cw,"A",{href:!0});var X5e=s(bk);fXe=r(X5e,"BigBirdConfig"),X5e.forEach(t),mXe=r(Cw," (BigBird model)"),Cw.forEach(t),gXe=i(L),$f=n(L,"LI",{});var ww=s($f);Koe=n(ww,"STRONG",{});var z5e=s(Koe);hXe=r(z5e,"bigbird_pegasus"),z5e.forEach(t),pXe=r(ww," \u2014 "),vk=n(ww,"A",{href:!0});var W5e=s(vk);_Xe=r(W5e,"BigBirdPegasusConfig"),W5e.forEach(t),uXe=r(ww," (BigBird-Pegasus model)"),ww.forEach(t),bXe=i(L),kf=n(L,"LI",{});var Aw=s(kf);Zoe=n(Aw,"STRONG",{});var Q5e=s(Zoe);vXe=r(Q5e,"blenderbot"),Q5e.forEach(t),FXe=r(Aw," \u2014 "),Fk=n(Aw,"A",{href:!0});var H5e=s(Fk);TXe=r(H5e,"BlenderbotConfig"),H5e.forEach(t),MXe=r(Aw," (Blenderbot model)"),Aw.forEach(t),EXe=i(L),Sf=n(L,"LI",{});var Lw=s(Sf);ere=n(Lw,"STRONG",{});var U5e=s(ere);CXe=r(U5e,"blenderbot-small"),U5e.forEach(t),wXe=r(Lw," \u2014 "),Tk=n(Lw,"A",{href:!0});var J5e=s(Tk);AXe=r(J5e,"BlenderbotSmallConfig"),J5e.forEach(t),LXe=r(Lw," (BlenderbotSmall model)"),Lw.forEach(t),yXe=i(L),Rf=n(L,"LI",{});var yw=s(Rf);ore=n(yw,"STRONG",{});var Y5e=s(ore);xXe=r(Y5e,"camembert"),Y5e.forEach(t),$Xe=r(yw," \u2014 "),Mk=n(yw,"A",{href:!0});var K5e=s(Mk);kXe=r(K5e,"CamembertConfig"),K5e.forEach(t),SXe=r(yw," (CamemBERT model)"),yw.forEach(t),RXe=i(L),Pf=n(L,"LI",{});var xw=s(Pf);rre=n(xw,"STRONG",{});var Z5e=s(rre);PXe=r(Z5e,"canine"),Z5e.forEach(t),BXe=r(xw," \u2014 "),Ek=n(xw,"A",{href:!0});var e0e=s(Ek);IXe=r(e0e,"CanineConfig"),e0e.forEach(t),NXe=r(xw," (CANINE model)"),xw.forEach(t),qXe=i(L),Bf=n(L,"LI",{});var $w=s(Bf);tre=n($w,"STRONG",{});var o0e=s(tre);jXe=r(o0e,"clip"),o0e.forEach(t),DXe=r($w," \u2014 "),Ck=n($w,"A",{href:!0});var r0e=s(Ck);GXe=r(r0e,"CLIPConfig"),r0e.forEach(t),OXe=r($w," (CLIP model)"),$w.forEach(t),VXe=i(L),If=n(L,"LI",{});var kw=s(If);are=n(kw,"STRONG",{});var t0e=s(are);XXe=r(t0e,"codegen"),t0e.forEach(t),zXe=r(kw," \u2014 "),wk=n(kw,"A",{href:!0});var a0e=s(wk);WXe=r(a0e,"CodeGenConfig"),a0e.forEach(t),QXe=r(kw," (CodeGen model)"),kw.forEach(t),HXe=i(L),Nf=n(L,"LI",{});var Sw=s(Nf);nre=n(Sw,"STRONG",{});var n0e=s(nre);UXe=r(n0e,"convbert"),n0e.forEach(t),JXe=r(Sw," \u2014 "),Ak=n(Sw,"A",{href:!0});var s0e=s(Ak);YXe=r(s0e,"ConvBertConfig"),s0e.forEach(t),KXe=r(Sw," (ConvBERT model)"),Sw.forEach(t),ZXe=i(L),qf=n(L,"LI",{});var Rw=s(qf);sre=n(Rw,"STRONG",{});var l0e=s(sre);eze=r(l0e,"convnext"),l0e.forEach(t),oze=r(Rw," \u2014 "),Lk=n(Rw,"A",{href:!0});var i0e=s(Lk);rze=r(i0e,"ConvNextConfig"),i0e.forEach(t),tze=r(Rw," (ConvNeXT model)"),Rw.forEach(t),aze=i(L),jf=n(L,"LI",{});var Pw=s(jf);lre=n(Pw,"STRONG",{});var d0e=s(lre);nze=r(d0e,"ctrl"),d0e.forEach(t),sze=r(Pw," \u2014 "),yk=n(Pw,"A",{href:!0});var c0e=s(yk);lze=r(c0e,"CTRLConfig"),c0e.forEach(t),ize=r(Pw," (CTRL model)"),Pw.forEach(t),dze=i(L),Df=n(L,"LI",{});var Bw=s(Df);ire=n(Bw,"STRONG",{});var f0e=s(ire);cze=r(f0e,"cvt"),f0e.forEach(t),fze=r(Bw," \u2014 "),xk=n(Bw,"A",{href:!0});var m0e=s(xk);mze=r(m0e,"CvtConfig"),m0e.forEach(t),gze=r(Bw," (CvT model)"),Bw.forEach(t),hze=i(L),Gf=n(L,"LI",{});var Iw=s(Gf);dre=n(Iw,"STRONG",{});var g0e=s(dre);pze=r(g0e,"data2vec-audio"),g0e.forEach(t),_ze=r(Iw," \u2014 "),$k=n(Iw,"A",{href:!0});var h0e=s($k);uze=r(h0e,"Data2VecAudioConfig"),h0e.forEach(t),bze=r(Iw," (Data2VecAudio model)"),Iw.forEach(t),vze=i(L),Of=n(L,"LI",{});var Nw=s(Of);cre=n(Nw,"STRONG",{});var p0e=s(cre);Fze=r(p0e,"data2vec-text"),p0e.forEach(t),Tze=r(Nw," \u2014 "),kk=n(Nw,"A",{href:!0});var _0e=s(kk);Mze=r(_0e,"Data2VecTextConfig"),_0e.forEach(t),Eze=r(Nw," (Data2VecText model)"),Nw.forEach(t),Cze=i(L),Vf=n(L,"LI",{});var qw=s(Vf);fre=n(qw,"STRONG",{});var u0e=s(fre);wze=r(u0e,"data2vec-vision"),u0e.forEach(t),Aze=r(qw," \u2014 "),Sk=n(qw,"A",{href:!0});var b0e=s(Sk);Lze=r(b0e,"Data2VecVisionConfig"),b0e.forEach(t),yze=r(qw," (Data2VecVision model)"),qw.forEach(t),xze=i(L),Xf=n(L,"LI",{});var jw=s(Xf);mre=n(jw,"STRONG",{});var v0e=s(mre);$ze=r(v0e,"deberta"),v0e.forEach(t),kze=r(jw," \u2014 "),Rk=n(jw,"A",{href:!0});var F0e=s(Rk);Sze=r(F0e,"DebertaConfig"),F0e.forEach(t),Rze=r(jw," (DeBERTa model)"),jw.forEach(t),Pze=i(L),zf=n(L,"LI",{});var Dw=s(zf);gre=n(Dw,"STRONG",{});var T0e=s(gre);Bze=r(T0e,"deberta-v2"),T0e.forEach(t),Ize=r(Dw," \u2014 "),Pk=n(Dw,"A",{href:!0});var M0e=s(Pk);Nze=r(M0e,"DebertaV2Config"),M0e.forEach(t),qze=r(Dw," (DeBERTa-v2 model)"),Dw.forEach(t),jze=i(L),Wf=n(L,"LI",{});var Gw=s(Wf);hre=n(Gw,"STRONG",{});var E0e=s(hre);Dze=r(E0e,"decision_transformer"),E0e.forEach(t),Gze=r(Gw," \u2014 "),Bk=n(Gw,"A",{href:!0});var Wzr=s(Bk);Oze=r(Wzr,"DecisionTransformerConfig"),Wzr.forEach(t),Vze=r(Gw," (Decision Transformer model)"),Gw.forEach(t),Xze=i(L),Qf=n(L,"LI",{});var C0e=s(Qf);pre=n(C0e,"STRONG",{});var Qzr=s(pre);zze=r(Qzr,"deit"),Qzr.forEach(t),Wze=r(C0e," \u2014 "),Ik=n(C0e,"A",{href:!0});var Hzr=s(Ik);Qze=r(Hzr,"DeiTConfig"),Hzr.forEach(t),Hze=r(C0e," (DeiT model)"),C0e.forEach(t),Uze=i(L),Hf=n(L,"LI",{});var w0e=s(Hf);_re=n(w0e,"STRONG",{});var Uzr=s(_re);Jze=r(Uzr,"detr"),Uzr.forEach(t),Yze=r(w0e," \u2014 "),Nk=n(w0e,"A",{href:!0});var Jzr=s(Nk);Kze=r(Jzr,"DetrConfig"),Jzr.forEach(t),Zze=r(w0e," (DETR model)"),w0e.forEach(t),eWe=i(L),Uf=n(L,"LI",{});var A0e=s(Uf);ure=n(A0e,"STRONG",{});var Yzr=s(ure);oWe=r(Yzr,"distilbert"),Yzr.forEach(t),rWe=r(A0e," \u2014 "),qk=n(A0e,"A",{href:!0});var Kzr=s(qk);tWe=r(Kzr,"DistilBertConfig"),Kzr.forEach(t),aWe=r(A0e," (DistilBERT model)"),A0e.forEach(t),nWe=i(L),Jf=n(L,"LI",{});var L0e=s(Jf);bre=n(L0e,"STRONG",{});var Zzr=s(bre);sWe=r(Zzr,"dpr"),Zzr.forEach(t),lWe=r(L0e," \u2014 "),jk=n(L0e,"A",{href:!0});var eWr=s(jk);iWe=r(eWr,"DPRConfig"),eWr.forEach(t),dWe=r(L0e," (DPR model)"),L0e.forEach(t),cWe=i(L),Yf=n(L,"LI",{});var y0e=s(Yf);vre=n(y0e,"STRONG",{});var oWr=s(vre);fWe=r(oWr,"dpt"),oWr.forEach(t),mWe=r(y0e," \u2014 "),Dk=n(y0e,"A",{href:!0});var rWr=s(Dk);gWe=r(rWr,"DPTConfig"),rWr.forEach(t),hWe=r(y0e," (DPT model)"),y0e.forEach(t),pWe=i(L),Kf=n(L,"LI",{});var x0e=s(Kf);Fre=n(x0e,"STRONG",{});var tWr=s(Fre);_We=r(tWr,"electra"),tWr.forEach(t),uWe=r(x0e," \u2014 "),Gk=n(x0e,"A",{href:!0});var aWr=s(Gk);bWe=r(aWr,"ElectraConfig"),aWr.forEach(t),vWe=r(x0e," (ELECTRA model)"),x0e.forEach(t),FWe=i(L),Zf=n(L,"LI",{});var $0e=s(Zf);Tre=n($0e,"STRONG",{});var nWr=s(Tre);TWe=r(nWr,"encoder-decoder"),nWr.forEach(t),MWe=r($0e," \u2014 "),Ok=n($0e,"A",{href:!0});var sWr=s(Ok);EWe=r(sWr,"EncoderDecoderConfig"),sWr.forEach(t),CWe=r($0e," (Encoder decoder model)"),$0e.forEach(t),wWe=i(L),em=n(L,"LI",{});var k0e=s(em);Mre=n(k0e,"STRONG",{});var lWr=s(Mre);AWe=r(lWr,"flaubert"),lWr.forEach(t),LWe=r(k0e," \u2014 "),Vk=n(k0e,"A",{href:!0});var iWr=s(Vk);yWe=r(iWr,"FlaubertConfig"),iWr.forEach(t),xWe=r(k0e," (FlauBERT model)"),k0e.forEach(t),$We=i(L),om=n(L,"LI",{});var S0e=s(om);Ere=n(S0e,"STRONG",{});var dWr=s(Ere);kWe=r(dWr,"flava"),dWr.forEach(t),SWe=r(S0e," \u2014 "),Xk=n(S0e,"A",{href:!0});var cWr=s(Xk);RWe=r(cWr,"FlavaConfig"),cWr.forEach(t),PWe=r(S0e," (FLAVA model)"),S0e.forEach(t),BWe=i(L),rm=n(L,"LI",{});var R0e=s(rm);Cre=n(R0e,"STRONG",{});var fWr=s(Cre);IWe=r(fWr,"fnet"),fWr.forEach(t),NWe=r(R0e," \u2014 "),zk=n(R0e,"A",{href:!0});var mWr=s(zk);qWe=r(mWr,"FNetConfig"),mWr.forEach(t),jWe=r(R0e," (FNet model)"),R0e.forEach(t),DWe=i(L),tm=n(L,"LI",{});var P0e=s(tm);wre=n(P0e,"STRONG",{});var gWr=s(wre);GWe=r(gWr,"fsmt"),gWr.forEach(t),OWe=r(P0e," \u2014 "),Wk=n(P0e,"A",{href:!0});var hWr=s(Wk);VWe=r(hWr,"FSMTConfig"),hWr.forEach(t),XWe=r(P0e," (FairSeq Machine-Translation model)"),P0e.forEach(t),zWe=i(L),am=n(L,"LI",{});var B0e=s(am);Are=n(B0e,"STRONG",{});var pWr=s(Are);WWe=r(pWr,"funnel"),pWr.forEach(t),QWe=r(B0e," \u2014 "),Qk=n(B0e,"A",{href:!0});var _Wr=s(Qk);HWe=r(_Wr,"FunnelConfig"),_Wr.forEach(t),UWe=r(B0e," (Funnel Transformer model)"),B0e.forEach(t),JWe=i(L),nm=n(L,"LI",{});var I0e=s(nm);Lre=n(I0e,"STRONG",{});var uWr=s(Lre);YWe=r(uWr,"glpn"),uWr.forEach(t),KWe=r(I0e," \u2014 "),Hk=n(I0e,"A",{href:!0});var bWr=s(Hk);ZWe=r(bWr,"GLPNConfig"),bWr.forEach(t),eQe=r(I0e," (GLPN model)"),I0e.forEach(t),oQe=i(L),sm=n(L,"LI",{});var N0e=s(sm);yre=n(N0e,"STRONG",{});var vWr=s(yre);rQe=r(vWr,"gpt2"),vWr.forEach(t),tQe=r(N0e," \u2014 "),Uk=n(N0e,"A",{href:!0});var FWr=s(Uk);aQe=r(FWr,"GPT2Config"),FWr.forEach(t),nQe=r(N0e," (OpenAI GPT-2 model)"),N0e.forEach(t),sQe=i(L),lm=n(L,"LI",{});var q0e=s(lm);xre=n(q0e,"STRONG",{});var TWr=s(xre);lQe=r(TWr,"gpt_neo"),TWr.forEach(t),iQe=r(q0e," \u2014 "),Jk=n(q0e,"A",{href:!0});var MWr=s(Jk);dQe=r(MWr,"GPTNeoConfig"),MWr.forEach(t),cQe=r(q0e," (GPT Neo model)"),q0e.forEach(t),fQe=i(L),im=n(L,"LI",{});var j0e=s(im);$re=n(j0e,"STRONG",{});var EWr=s($re);mQe=r(EWr,"gpt_neox"),EWr.forEach(t),gQe=r(j0e," \u2014 "),Yk=n(j0e,"A",{href:!0});var CWr=s(Yk);hQe=r(CWr,"GPTNeoXConfig"),CWr.forEach(t),pQe=r(j0e," (GPT NeoX model)"),j0e.forEach(t),_Qe=i(L),dm=n(L,"LI",{});var D0e=s(dm);kre=n(D0e,"STRONG",{});var wWr=s(kre);uQe=r(wWr,"gptj"),wWr.forEach(t),bQe=r(D0e," \u2014 "),Kk=n(D0e,"A",{href:!0});var AWr=s(Kk);vQe=r(AWr,"GPTJConfig"),AWr.forEach(t),FQe=r(D0e," (GPT-J model)"),D0e.forEach(t),TQe=i(L),cm=n(L,"LI",{});var G0e=s(cm);Sre=n(G0e,"STRONG",{});var LWr=s(Sre);MQe=r(LWr,"hubert"),LWr.forEach(t),EQe=r(G0e," \u2014 "),Zk=n(G0e,"A",{href:!0});var yWr=s(Zk);CQe=r(yWr,"HubertConfig"),yWr.forEach(t),wQe=r(G0e," (Hubert model)"),G0e.forEach(t),AQe=i(L),fm=n(L,"LI",{});var O0e=s(fm);Rre=n(O0e,"STRONG",{});var xWr=s(Rre);LQe=r(xWr,"ibert"),xWr.forEach(t),yQe=r(O0e," \u2014 "),eS=n(O0e,"A",{href:!0});var $Wr=s(eS);xQe=r($Wr,"IBertConfig"),$Wr.forEach(t),$Qe=r(O0e," (I-BERT model)"),O0e.forEach(t),kQe=i(L),mm=n(L,"LI",{});var V0e=s(mm);Pre=n(V0e,"STRONG",{});var kWr=s(Pre);SQe=r(kWr,"imagegpt"),kWr.forEach(t),RQe=r(V0e," \u2014 "),oS=n(V0e,"A",{href:!0});var SWr=s(oS);PQe=r(SWr,"ImageGPTConfig"),SWr.forEach(t),BQe=r(V0e," (ImageGPT model)"),V0e.forEach(t),IQe=i(L),gm=n(L,"LI",{});var X0e=s(gm);Bre=n(X0e,"STRONG",{});var RWr=s(Bre);NQe=r(RWr,"layoutlm"),RWr.forEach(t),qQe=r(X0e," \u2014 "),rS=n(X0e,"A",{href:!0});var PWr=s(rS);jQe=r(PWr,"LayoutLMConfig"),PWr.forEach(t),DQe=r(X0e," (LayoutLM model)"),X0e.forEach(t),GQe=i(L),hm=n(L,"LI",{});var z0e=s(hm);Ire=n(z0e,"STRONG",{});var BWr=s(Ire);OQe=r(BWr,"layoutlmv2"),BWr.forEach(t),VQe=r(z0e," \u2014 "),tS=n(z0e,"A",{href:!0});var IWr=s(tS);XQe=r(IWr,"LayoutLMv2Config"),IWr.forEach(t),zQe=r(z0e," (LayoutLMv2 model)"),z0e.forEach(t),WQe=i(L),pm=n(L,"LI",{});var W0e=s(pm);Nre=n(W0e,"STRONG",{});var NWr=s(Nre);QQe=r(NWr,"layoutlmv3"),NWr.forEach(t),HQe=r(W0e," \u2014 "),aS=n(W0e,"A",{href:!0});var qWr=s(aS);UQe=r(qWr,"LayoutLMv3Config"),qWr.forEach(t),JQe=r(W0e," (LayoutLMv3 model)"),W0e.forEach(t),YQe=i(L),_m=n(L,"LI",{});var Q0e=s(_m);qre=n(Q0e,"STRONG",{});var jWr=s(qre);KQe=r(jWr,"led"),jWr.forEach(t),ZQe=r(Q0e," \u2014 "),nS=n(Q0e,"A",{href:!0});var DWr=s(nS);eHe=r(DWr,"LEDConfig"),DWr.forEach(t),oHe=r(Q0e," (LED model)"),Q0e.forEach(t),rHe=i(L),um=n(L,"LI",{});var H0e=s(um);jre=n(H0e,"STRONG",{});var GWr=s(jre);tHe=r(GWr,"levit"),GWr.forEach(t),aHe=r(H0e," \u2014 "),sS=n(H0e,"A",{href:!0});var OWr=s(sS);nHe=r(OWr,"LevitConfig"),OWr.forEach(t),sHe=r(H0e," (LeViT model)"),H0e.forEach(t),lHe=i(L),bm=n(L,"LI",{});var U0e=s(bm);Dre=n(U0e,"STRONG",{});var VWr=s(Dre);iHe=r(VWr,"longformer"),VWr.forEach(t),dHe=r(U0e," \u2014 "),lS=n(U0e,"A",{href:!0});var XWr=s(lS);cHe=r(XWr,"LongformerConfig"),XWr.forEach(t),fHe=r(U0e," (Longformer model)"),U0e.forEach(t),mHe=i(L),vm=n(L,"LI",{});var J0e=s(vm);Gre=n(J0e,"STRONG",{});var zWr=s(Gre);gHe=r(zWr,"luke"),zWr.forEach(t),hHe=r(J0e," \u2014 "),iS=n(J0e,"A",{href:!0});var WWr=s(iS);pHe=r(WWr,"LukeConfig"),WWr.forEach(t),_He=r(J0e," (LUKE model)"),J0e.forEach(t),uHe=i(L),Fm=n(L,"LI",{});var Y0e=s(Fm);Ore=n(Y0e,"STRONG",{});var QWr=s(Ore);bHe=r(QWr,"lxmert"),QWr.forEach(t),vHe=r(Y0e," \u2014 "),dS=n(Y0e,"A",{href:!0});var HWr=s(dS);FHe=r(HWr,"LxmertConfig"),HWr.forEach(t),THe=r(Y0e," (LXMERT model)"),Y0e.forEach(t),MHe=i(L),Tm=n(L,"LI",{});var K0e=s(Tm);Vre=n(K0e,"STRONG",{});var UWr=s(Vre);EHe=r(UWr,"m2m_100"),UWr.forEach(t),CHe=r(K0e," \u2014 "),cS=n(K0e,"A",{href:!0});var JWr=s(cS);wHe=r(JWr,"M2M100Config"),JWr.forEach(t),AHe=r(K0e," (M2M100 model)"),K0e.forEach(t),LHe=i(L),Mm=n(L,"LI",{});var Z0e=s(Mm);Xre=n(Z0e,"STRONG",{});var YWr=s(Xre);yHe=r(YWr,"marian"),YWr.forEach(t),xHe=r(Z0e," \u2014 "),fS=n(Z0e,"A",{href:!0});var KWr=s(fS);$He=r(KWr,"MarianConfig"),KWr.forEach(t),kHe=r(Z0e," (Marian model)"),Z0e.forEach(t),SHe=i(L),Em=n(L,"LI",{});var ewe=s(Em);zre=n(ewe,"STRONG",{});var ZWr=s(zre);RHe=r(ZWr,"maskformer"),ZWr.forEach(t),PHe=r(ewe," \u2014 "),mS=n(ewe,"A",{href:!0});var eQr=s(mS);BHe=r(eQr,"MaskFormerConfig"),eQr.forEach(t),IHe=r(ewe," (MaskFormer model)"),ewe.forEach(t),NHe=i(L),Cm=n(L,"LI",{});var owe=s(Cm);Wre=n(owe,"STRONG",{});var oQr=s(Wre);qHe=r(oQr,"mbart"),oQr.forEach(t),jHe=r(owe," \u2014 "),gS=n(owe,"A",{href:!0});var rQr=s(gS);DHe=r(rQr,"MBartConfig"),rQr.forEach(t),GHe=r(owe," (mBART model)"),owe.forEach(t),OHe=i(L),wm=n(L,"LI",{});var rwe=s(wm);Qre=n(rwe,"STRONG",{});var tQr=s(Qre);VHe=r(tQr,"megatron-bert"),tQr.forEach(t),XHe=r(rwe," \u2014 "),hS=n(rwe,"A",{href:!0});var aQr=s(hS);zHe=r(aQr,"MegatronBertConfig"),aQr.forEach(t),WHe=r(rwe," (Megatron-BERT model)"),rwe.forEach(t),QHe=i(L),Am=n(L,"LI",{});var twe=s(Am);Hre=n(twe,"STRONG",{});var nQr=s(Hre);HHe=r(nQr,"mobilebert"),nQr.forEach(t),UHe=r(twe," \u2014 "),pS=n(twe,"A",{href:!0});var sQr=s(pS);JHe=r(sQr,"MobileBertConfig"),sQr.forEach(t),YHe=r(twe," (MobileBERT model)"),twe.forEach(t),KHe=i(L),Lm=n(L,"LI",{});var awe=s(Lm);Ure=n(awe,"STRONG",{});var lQr=s(Ure);ZHe=r(lQr,"mpnet"),lQr.forEach(t),eUe=r(awe," \u2014 "),_S=n(awe,"A",{href:!0});var iQr=s(_S);oUe=r(iQr,"MPNetConfig"),iQr.forEach(t),rUe=r(awe," (MPNet model)"),awe.forEach(t),tUe=i(L),ym=n(L,"LI",{});var nwe=s(ym);Jre=n(nwe,"STRONG",{});var dQr=s(Jre);aUe=r(dQr,"mt5"),dQr.forEach(t),nUe=r(nwe," \u2014 "),uS=n(nwe,"A",{href:!0});var cQr=s(uS);sUe=r(cQr,"MT5Config"),cQr.forEach(t),lUe=r(nwe," (MT5 model)"),nwe.forEach(t),iUe=i(L),xm=n(L,"LI",{});var swe=s(xm);Yre=n(swe,"STRONG",{});var fQr=s(Yre);dUe=r(fQr,"nystromformer"),fQr.forEach(t),cUe=r(swe," \u2014 "),bS=n(swe,"A",{href:!0});var mQr=s(bS);fUe=r(mQr,"NystromformerConfig"),mQr.forEach(t),mUe=r(swe," (Nystr\xF6mformer model)"),swe.forEach(t),gUe=i(L),$m=n(L,"LI",{});var lwe=s($m);Kre=n(lwe,"STRONG",{});var gQr=s(Kre);hUe=r(gQr,"openai-gpt"),gQr.forEach(t),pUe=r(lwe," \u2014 "),vS=n(lwe,"A",{href:!0});var hQr=s(vS);_Ue=r(hQr,"OpenAIGPTConfig"),hQr.forEach(t),uUe=r(lwe," (OpenAI GPT model)"),lwe.forEach(t),bUe=i(L),km=n(L,"LI",{});var iwe=s(km);Zre=n(iwe,"STRONG",{});var pQr=s(Zre);vUe=r(pQr,"opt"),pQr.forEach(t),FUe=r(iwe," \u2014 "),FS=n(iwe,"A",{href:!0});var _Qr=s(FS);TUe=r(_Qr,"OPTConfig"),_Qr.forEach(t),MUe=r(iwe," (OPT model)"),iwe.forEach(t),EUe=i(L),Sm=n(L,"LI",{});var dwe=s(Sm);ete=n(dwe,"STRONG",{});var uQr=s(ete);CUe=r(uQr,"pegasus"),uQr.forEach(t),wUe=r(dwe," \u2014 "),TS=n(dwe,"A",{href:!0});var bQr=s(TS);AUe=r(bQr,"PegasusConfig"),bQr.forEach(t),LUe=r(dwe," (Pegasus model)"),dwe.forEach(t),yUe=i(L),Rm=n(L,"LI",{});var cwe=s(Rm);ote=n(cwe,"STRONG",{});var vQr=s(ote);xUe=r(vQr,"perceiver"),vQr.forEach(t),$Ue=r(cwe," \u2014 "),MS=n(cwe,"A",{href:!0});var FQr=s(MS);kUe=r(FQr,"PerceiverConfig"),FQr.forEach(t),SUe=r(cwe," (Perceiver model)"),cwe.forEach(t),RUe=i(L),Pm=n(L,"LI",{});var fwe=s(Pm);rte=n(fwe,"STRONG",{});var TQr=s(rte);PUe=r(TQr,"plbart"),TQr.forEach(t),BUe=r(fwe," \u2014 "),ES=n(fwe,"A",{href:!0});var MQr=s(ES);IUe=r(MQr,"PLBartConfig"),MQr.forEach(t),NUe=r(fwe," (PLBart model)"),fwe.forEach(t),qUe=i(L),Bm=n(L,"LI",{});var mwe=s(Bm);tte=n(mwe,"STRONG",{});var EQr=s(tte);jUe=r(EQr,"poolformer"),EQr.forEach(t),DUe=r(mwe," \u2014 "),CS=n(mwe,"A",{href:!0});var CQr=s(CS);GUe=r(CQr,"PoolFormerConfig"),CQr.forEach(t),OUe=r(mwe," (PoolFormer model)"),mwe.forEach(t),VUe=i(L),Im=n(L,"LI",{});var gwe=s(Im);ate=n(gwe,"STRONG",{});var wQr=s(ate);XUe=r(wQr,"prophetnet"),wQr.forEach(t),zUe=r(gwe," \u2014 "),wS=n(gwe,"A",{href:!0});var AQr=s(wS);WUe=r(AQr,"ProphetNetConfig"),AQr.forEach(t),QUe=r(gwe," (ProphetNet model)"),gwe.forEach(t),HUe=i(L),Nm=n(L,"LI",{});var hwe=s(Nm);nte=n(hwe,"STRONG",{});var LQr=s(nte);UUe=r(LQr,"qdqbert"),LQr.forEach(t),JUe=r(hwe," \u2014 "),AS=n(hwe,"A",{href:!0});var yQr=s(AS);YUe=r(yQr,"QDQBertConfig"),yQr.forEach(t),KUe=r(hwe," (QDQBert model)"),hwe.forEach(t),ZUe=i(L),qm=n(L,"LI",{});var pwe=s(qm);ste=n(pwe,"STRONG",{});var xQr=s(ste);eJe=r(xQr,"rag"),xQr.forEach(t),oJe=r(pwe," \u2014 "),LS=n(pwe,"A",{href:!0});var $Qr=s(LS);rJe=r($Qr,"RagConfig"),$Qr.forEach(t),tJe=r(pwe," (RAG model)"),pwe.forEach(t),aJe=i(L),jm=n(L,"LI",{});var _we=s(jm);lte=n(_we,"STRONG",{});var kQr=s(lte);nJe=r(kQr,"realm"),kQr.forEach(t),sJe=r(_we," \u2014 "),yS=n(_we,"A",{href:!0});var SQr=s(yS);lJe=r(SQr,"RealmConfig"),SQr.forEach(t),iJe=r(_we," (REALM model)"),_we.forEach(t),dJe=i(L),Dm=n(L,"LI",{});var uwe=s(Dm);ite=n(uwe,"STRONG",{});var RQr=s(ite);cJe=r(RQr,"reformer"),RQr.forEach(t),fJe=r(uwe," \u2014 "),xS=n(uwe,"A",{href:!0});var PQr=s(xS);mJe=r(PQr,"ReformerConfig"),PQr.forEach(t),gJe=r(uwe," (Reformer model)"),uwe.forEach(t),hJe=i(L),Gm=n(L,"LI",{});var bwe=s(Gm);dte=n(bwe,"STRONG",{});var BQr=s(dte);pJe=r(BQr,"regnet"),BQr.forEach(t),_Je=r(bwe," \u2014 "),$S=n(bwe,"A",{href:!0});var IQr=s($S);uJe=r(IQr,"RegNetConfig"),IQr.forEach(t),bJe=r(bwe," (RegNet model)"),bwe.forEach(t),vJe=i(L),Om=n(L,"LI",{});var vwe=s(Om);cte=n(vwe,"STRONG",{});var NQr=s(cte);FJe=r(NQr,"rembert"),NQr.forEach(t),TJe=r(vwe," \u2014 "),kS=n(vwe,"A",{href:!0});var qQr=s(kS);MJe=r(qQr,"RemBertConfig"),qQr.forEach(t),EJe=r(vwe," (RemBERT model)"),vwe.forEach(t),CJe=i(L),Vm=n(L,"LI",{});var Fwe=s(Vm);fte=n(Fwe,"STRONG",{});var jQr=s(fte);wJe=r(jQr,"resnet"),jQr.forEach(t),AJe=r(Fwe," \u2014 "),SS=n(Fwe,"A",{href:!0});var DQr=s(SS);LJe=r(DQr,"ResNetConfig"),DQr.forEach(t),yJe=r(Fwe," (ResNet model)"),Fwe.forEach(t),xJe=i(L),Xm=n(L,"LI",{});var Twe=s(Xm);mte=n(Twe,"STRONG",{});var GQr=s(mte);$Je=r(GQr,"retribert"),GQr.forEach(t),kJe=r(Twe," \u2014 "),RS=n(Twe,"A",{href:!0});var OQr=s(RS);SJe=r(OQr,"RetriBertConfig"),OQr.forEach(t),RJe=r(Twe," (RetriBERT model)"),Twe.forEach(t),PJe=i(L),zm=n(L,"LI",{});var Mwe=s(zm);gte=n(Mwe,"STRONG",{});var VQr=s(gte);BJe=r(VQr,"roberta"),VQr.forEach(t),IJe=r(Mwe," \u2014 "),PS=n(Mwe,"A",{href:!0});var XQr=s(PS);NJe=r(XQr,"RobertaConfig"),XQr.forEach(t),qJe=r(Mwe," (RoBERTa model)"),Mwe.forEach(t),jJe=i(L),Wm=n(L,"LI",{});var Ewe=s(Wm);hte=n(Ewe,"STRONG",{});var zQr=s(hte);DJe=r(zQr,"roformer"),zQr.forEach(t),GJe=r(Ewe," \u2014 "),BS=n(Ewe,"A",{href:!0});var WQr=s(BS);OJe=r(WQr,"RoFormerConfig"),WQr.forEach(t),VJe=r(Ewe," (RoFormer model)"),Ewe.forEach(t),XJe=i(L),Qm=n(L,"LI",{});var Cwe=s(Qm);pte=n(Cwe,"STRONG",{});var QQr=s(pte);zJe=r(QQr,"segformer"),QQr.forEach(t),WJe=r(Cwe," \u2014 "),IS=n(Cwe,"A",{href:!0});var HQr=s(IS);QJe=r(HQr,"SegformerConfig"),HQr.forEach(t),HJe=r(Cwe," (SegFormer model)"),Cwe.forEach(t),UJe=i(L),Hm=n(L,"LI",{});var wwe=s(Hm);_te=n(wwe,"STRONG",{});var UQr=s(_te);JJe=r(UQr,"sew"),UQr.forEach(t),YJe=r(wwe," \u2014 "),NS=n(wwe,"A",{href:!0});var JQr=s(NS);KJe=r(JQr,"SEWConfig"),JQr.forEach(t),ZJe=r(wwe," (SEW model)"),wwe.forEach(t),eYe=i(L),Um=n(L,"LI",{});var Awe=s(Um);ute=n(Awe,"STRONG",{});var YQr=s(ute);oYe=r(YQr,"sew-d"),YQr.forEach(t),rYe=r(Awe," \u2014 "),qS=n(Awe,"A",{href:!0});var KQr=s(qS);tYe=r(KQr,"SEWDConfig"),KQr.forEach(t),aYe=r(Awe," (SEW-D model)"),Awe.forEach(t),nYe=i(L),Jm=n(L,"LI",{});var Lwe=s(Jm);bte=n(Lwe,"STRONG",{});var ZQr=s(bte);sYe=r(ZQr,"speech-encoder-decoder"),ZQr.forEach(t),lYe=r(Lwe," \u2014 "),jS=n(Lwe,"A",{href:!0});var eHr=s(jS);iYe=r(eHr,"SpeechEncoderDecoderConfig"),eHr.forEach(t),dYe=r(Lwe," (Speech Encoder decoder model)"),Lwe.forEach(t),cYe=i(L),Ym=n(L,"LI",{});var ywe=s(Ym);vte=n(ywe,"STRONG",{});var oHr=s(vte);fYe=r(oHr,"speech_to_text"),oHr.forEach(t),mYe=r(ywe," \u2014 "),DS=n(ywe,"A",{href:!0});var rHr=s(DS);gYe=r(rHr,"Speech2TextConfig"),rHr.forEach(t),hYe=r(ywe," (Speech2Text model)"),ywe.forEach(t),pYe=i(L),Km=n(L,"LI",{});var xwe=s(Km);Fte=n(xwe,"STRONG",{});var tHr=s(Fte);_Ye=r(tHr,"speech_to_text_2"),tHr.forEach(t),uYe=r(xwe," \u2014 "),GS=n(xwe,"A",{href:!0});var aHr=s(GS);bYe=r(aHr,"Speech2Text2Config"),aHr.forEach(t),vYe=r(xwe," (Speech2Text2 model)"),xwe.forEach(t),FYe=i(L),Zm=n(L,"LI",{});var $we=s(Zm);Tte=n($we,"STRONG",{});var nHr=s(Tte);TYe=r(nHr,"splinter"),nHr.forEach(t),MYe=r($we," \u2014 "),OS=n($we,"A",{href:!0});var sHr=s(OS);EYe=r(sHr,"SplinterConfig"),sHr.forEach(t),CYe=r($we," (Splinter model)"),$we.forEach(t),wYe=i(L),eg=n(L,"LI",{});var kwe=s(eg);Mte=n(kwe,"STRONG",{});var lHr=s(Mte);AYe=r(lHr,"squeezebert"),lHr.forEach(t),LYe=r(kwe," \u2014 "),VS=n(kwe,"A",{href:!0});var iHr=s(VS);yYe=r(iHr,"SqueezeBertConfig"),iHr.forEach(t),xYe=r(kwe," (SqueezeBERT model)"),kwe.forEach(t),$Ye=i(L),og=n(L,"LI",{});var Swe=s(og);Ete=n(Swe,"STRONG",{});var dHr=s(Ete);kYe=r(dHr,"swin"),dHr.forEach(t),SYe=r(Swe," \u2014 "),XS=n(Swe,"A",{href:!0});var cHr=s(XS);RYe=r(cHr,"SwinConfig"),cHr.forEach(t),PYe=r(Swe," (Swin Transformer model)"),Swe.forEach(t),BYe=i(L),rg=n(L,"LI",{});var Rwe=s(rg);Cte=n(Rwe,"STRONG",{});var fHr=s(Cte);IYe=r(fHr,"t5"),fHr.forEach(t),NYe=r(Rwe," \u2014 "),zS=n(Rwe,"A",{href:!0});var mHr=s(zS);qYe=r(mHr,"T5Config"),mHr.forEach(t),jYe=r(Rwe," (T5 model)"),Rwe.forEach(t),DYe=i(L),tg=n(L,"LI",{});var Pwe=s(tg);wte=n(Pwe,"STRONG",{});var gHr=s(wte);GYe=r(gHr,"tapas"),gHr.forEach(t),OYe=r(Pwe," \u2014 "),WS=n(Pwe,"A",{href:!0});var hHr=s(WS);VYe=r(hHr,"TapasConfig"),hHr.forEach(t),XYe=r(Pwe," (TAPAS model)"),Pwe.forEach(t),zYe=i(L),ag=n(L,"LI",{});var Bwe=s(ag);Ate=n(Bwe,"STRONG",{});var pHr=s(Ate);WYe=r(pHr,"trajectory_transformer"),pHr.forEach(t),QYe=r(Bwe," \u2014 "),QS=n(Bwe,"A",{href:!0});var _Hr=s(QS);HYe=r(_Hr,"TrajectoryTransformerConfig"),_Hr.forEach(t),UYe=r(Bwe," (Trajectory Transformer model)"),Bwe.forEach(t),JYe=i(L),ng=n(L,"LI",{});var Iwe=s(ng);Lte=n(Iwe,"STRONG",{});var uHr=s(Lte);YYe=r(uHr,"transfo-xl"),uHr.forEach(t),KYe=r(Iwe," \u2014 "),HS=n(Iwe,"A",{href:!0});var bHr=s(HS);ZYe=r(bHr,"TransfoXLConfig"),bHr.forEach(t),eKe=r(Iwe," (Transformer-XL model)"),Iwe.forEach(t),oKe=i(L),sg=n(L,"LI",{});var Nwe=s(sg);yte=n(Nwe,"STRONG",{});var vHr=s(yte);rKe=r(vHr,"trocr"),vHr.forEach(t),tKe=r(Nwe," \u2014 "),US=n(Nwe,"A",{href:!0});var FHr=s(US);aKe=r(FHr,"TrOCRConfig"),FHr.forEach(t),nKe=r(Nwe," (TrOCR model)"),Nwe.forEach(t),sKe=i(L),lg=n(L,"LI",{});var qwe=s(lg);xte=n(qwe,"STRONG",{});var THr=s(xte);lKe=r(THr,"unispeech"),THr.forEach(t),iKe=r(qwe," \u2014 "),JS=n(qwe,"A",{href:!0});var MHr=s(JS);dKe=r(MHr,"UniSpeechConfig"),MHr.forEach(t),cKe=r(qwe," (UniSpeech model)"),qwe.forEach(t),fKe=i(L),ig=n(L,"LI",{});var jwe=s(ig);$te=n(jwe,"STRONG",{});var EHr=s($te);mKe=r(EHr,"unispeech-sat"),EHr.forEach(t),gKe=r(jwe," \u2014 "),YS=n(jwe,"A",{href:!0});var CHr=s(YS);hKe=r(CHr,"UniSpeechSatConfig"),CHr.forEach(t),pKe=r(jwe," (UniSpeechSat model)"),jwe.forEach(t),_Ke=i(L),dg=n(L,"LI",{});var Dwe=s(dg);kte=n(Dwe,"STRONG",{});var wHr=s(kte);uKe=r(wHr,"van"),wHr.forEach(t),bKe=r(Dwe," \u2014 "),KS=n(Dwe,"A",{href:!0});var AHr=s(KS);vKe=r(AHr,"VanConfig"),AHr.forEach(t),FKe=r(Dwe," (VAN model)"),Dwe.forEach(t),TKe=i(L),cg=n(L,"LI",{});var Gwe=s(cg);Ste=n(Gwe,"STRONG",{});var LHr=s(Ste);MKe=r(LHr,"vilt"),LHr.forEach(t),EKe=r(Gwe," \u2014 "),ZS=n(Gwe,"A",{href:!0});var yHr=s(ZS);CKe=r(yHr,"ViltConfig"),yHr.forEach(t),wKe=r(Gwe," (ViLT model)"),Gwe.forEach(t),AKe=i(L),fg=n(L,"LI",{});var Owe=s(fg);Rte=n(Owe,"STRONG",{});var xHr=s(Rte);LKe=r(xHr,"vision-encoder-decoder"),xHr.forEach(t),yKe=r(Owe," \u2014 "),eR=n(Owe,"A",{href:!0});var $Hr=s(eR);xKe=r($Hr,"VisionEncoderDecoderConfig"),$Hr.forEach(t),$Ke=r(Owe," (Vision Encoder decoder model)"),Owe.forEach(t),kKe=i(L),mg=n(L,"LI",{});var Vwe=s(mg);Pte=n(Vwe,"STRONG",{});var kHr=s(Pte);SKe=r(kHr,"vision-text-dual-encoder"),kHr.forEach(t),RKe=r(Vwe," \u2014 "),oR=n(Vwe,"A",{href:!0});var SHr=s(oR);PKe=r(SHr,"VisionTextDualEncoderConfig"),SHr.forEach(t),BKe=r(Vwe," (VisionTextDualEncoder model)"),Vwe.forEach(t),IKe=i(L),gg=n(L,"LI",{});var Xwe=s(gg);Bte=n(Xwe,"STRONG",{});var RHr=s(Bte);NKe=r(RHr,"visual_bert"),RHr.forEach(t),qKe=r(Xwe," \u2014 "),rR=n(Xwe,"A",{href:!0});var PHr=s(rR);jKe=r(PHr,"VisualBertConfig"),PHr.forEach(t),DKe=r(Xwe," (VisualBERT model)"),Xwe.forEach(t),GKe=i(L),hg=n(L,"LI",{});var zwe=s(hg);Ite=n(zwe,"STRONG",{});var BHr=s(Ite);OKe=r(BHr,"vit"),BHr.forEach(t),VKe=r(zwe," \u2014 "),tR=n(zwe,"A",{href:!0});var IHr=s(tR);XKe=r(IHr,"ViTConfig"),IHr.forEach(t),zKe=r(zwe," (ViT model)"),zwe.forEach(t),WKe=i(L),pg=n(L,"LI",{});var Wwe=s(pg);Nte=n(Wwe,"STRONG",{});var NHr=s(Nte);QKe=r(NHr,"vit_mae"),NHr.forEach(t),HKe=r(Wwe," \u2014 "),aR=n(Wwe,"A",{href:!0});var qHr=s(aR);UKe=r(qHr,"ViTMAEConfig"),qHr.forEach(t),JKe=r(Wwe," (ViTMAE model)"),Wwe.forEach(t),YKe=i(L),_g=n(L,"LI",{});var Qwe=s(_g);qte=n(Qwe,"STRONG",{});var jHr=s(qte);KKe=r(jHr,"wav2vec2"),jHr.forEach(t),ZKe=r(Qwe," \u2014 "),nR=n(Qwe,"A",{href:!0});var DHr=s(nR);eZe=r(DHr,"Wav2Vec2Config"),DHr.forEach(t),oZe=r(Qwe," (Wav2Vec2 model)"),Qwe.forEach(t),rZe=i(L),ug=n(L,"LI",{});var Hwe=s(ug);jte=n(Hwe,"STRONG",{});var GHr=s(jte);tZe=r(GHr,"wav2vec2-conformer"),GHr.forEach(t),aZe=r(Hwe," \u2014 "),sR=n(Hwe,"A",{href:!0});var OHr=s(sR);nZe=r(OHr,"Wav2Vec2ConformerConfig"),OHr.forEach(t),sZe=r(Hwe," (Wav2Vec2-Conformer model)"),Hwe.forEach(t),lZe=i(L),bg=n(L,"LI",{});var Uwe=s(bg);Dte=n(Uwe,"STRONG",{});var VHr=s(Dte);iZe=r(VHr,"wavlm"),VHr.forEach(t),dZe=r(Uwe," \u2014 "),lR=n(Uwe,"A",{href:!0});var XHr=s(lR);cZe=r(XHr,"WavLMConfig"),XHr.forEach(t),fZe=r(Uwe," (WavLM model)"),Uwe.forEach(t),mZe=i(L),vg=n(L,"LI",{});var Jwe=s(vg);Gte=n(Jwe,"STRONG",{});var zHr=s(Gte);gZe=r(zHr,"xglm"),zHr.forEach(t),hZe=r(Jwe," \u2014 "),iR=n(Jwe,"A",{href:!0});var WHr=s(iR);pZe=r(WHr,"XGLMConfig"),WHr.forEach(t),_Ze=r(Jwe," (XGLM model)"),Jwe.forEach(t),uZe=i(L),Fg=n(L,"LI",{});var Ywe=s(Fg);Ote=n(Ywe,"STRONG",{});var QHr=s(Ote);bZe=r(QHr,"xlm"),QHr.forEach(t),vZe=r(Ywe," \u2014 "),dR=n(Ywe,"A",{href:!0});var HHr=s(dR);FZe=r(HHr,"XLMConfig"),HHr.forEach(t),TZe=r(Ywe," (XLM model)"),Ywe.forEach(t),MZe=i(L),Tg=n(L,"LI",{});var Kwe=s(Tg);Vte=n(Kwe,"STRONG",{});var UHr=s(Vte);EZe=r(UHr,"xlm-prophetnet"),UHr.forEach(t),CZe=r(Kwe," \u2014 "),cR=n(Kwe,"A",{href:!0});var JHr=s(cR);wZe=r(JHr,"XLMProphetNetConfig"),JHr.forEach(t),AZe=r(Kwe," (XLM-ProphetNet model)"),Kwe.forEach(t),LZe=i(L),Mg=n(L,"LI",{});var Zwe=s(Mg);Xte=n(Zwe,"STRONG",{});var YHr=s(Xte);yZe=r(YHr,"xlm-roberta"),YHr.forEach(t),xZe=r(Zwe," \u2014 "),fR=n(Zwe,"A",{href:!0});var KHr=s(fR);$Ze=r(KHr,"XLMRobertaConfig"),KHr.forEach(t),kZe=r(Zwe," (XLM-RoBERTa model)"),Zwe.forEach(t),SZe=i(L),Eg=n(L,"LI",{});var eAe=s(Eg);zte=n(eAe,"STRONG",{});var ZHr=s(zte);RZe=r(ZHr,"xlm-roberta-xl"),ZHr.forEach(t),PZe=r(eAe," \u2014 "),mR=n(eAe,"A",{href:!0});var eUr=s(mR);BZe=r(eUr,"XLMRobertaXLConfig"),eUr.forEach(t),IZe=r(eAe," (XLM-RoBERTa-XL model)"),eAe.forEach(t),NZe=i(L),Cg=n(L,"LI",{});var oAe=s(Cg);Wte=n(oAe,"STRONG",{});var oUr=s(Wte);qZe=r(oUr,"xlnet"),oUr.forEach(t),jZe=r(oAe," \u2014 "),gR=n(oAe,"A",{href:!0});var rUr=s(gR);DZe=r(rUr,"XLNetConfig"),rUr.forEach(t),GZe=r(oAe," (XLNet model)"),oAe.forEach(t),OZe=i(L),wg=n(L,"LI",{});var rAe=s(wg);Qte=n(rAe,"STRONG",{});var tUr=s(Qte);VZe=r(tUr,"yolos"),tUr.forEach(t),XZe=r(rAe," \u2014 "),hR=n(rAe,"A",{href:!0});var aUr=s(hR);zZe=r(aUr,"YolosConfig"),aUr.forEach(t),WZe=r(rAe," (YOLOS model)"),rAe.forEach(t),QZe=i(L),Ag=n(L,"LI",{});var tAe=s(Ag);Hte=n(tAe,"STRONG",{});var nUr=s(Hte);HZe=r(nUr,"yoso"),nUr.forEach(t),UZe=r(tAe," \u2014 "),pR=n(tAe,"A",{href:!0});var sUr=s(pR);JZe=r(sUr,"YosoConfig"),sUr.forEach(t),YZe=r(tAe," (YOSO model)"),tAe.forEach(t),L.forEach(t),KZe=i(ot),T(Lg.$$.fragment,ot),ot.forEach(t),ZZe=i(et),yg=n(et,"DIV",{class:!0});var rGe=s(yg);T(Q6.$$.fragment,rGe),eeo=i(rGe),Ute=n(rGe,"P",{});var lUr=s(Ute);oeo=r(lUr,"Register a new configuration for this class."),lUr.forEach(t),rGe.forEach(t),et.forEach(t),nje=i(f),Ei=n(f,"H2",{class:!0});var tGe=s(Ei);xg=n(tGe,"A",{id:!0,class:!0,href:!0});var iUr=s(xg);Jte=n(iUr,"SPAN",{});var dUr=s(Jte);T(H6.$$.fragment,dUr),dUr.forEach(t),iUr.forEach(t),reo=i(tGe),Yte=n(tGe,"SPAN",{});var cUr=s(Yte);teo=r(cUr,"AutoTokenizer"),cUr.forEach(t),tGe.forEach(t),sje=i(f),wo=n(f,"DIV",{class:!0});var js=s(wo);T(U6.$$.fragment,js),aeo=i(js),J6=n(js,"P",{});var aGe=s(J6);neo=r(aGe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),_R=n(aGe,"A",{href:!0});var fUr=s(_R);seo=r(fUr,"AutoTokenizer.from_pretrained()"),fUr.forEach(t),leo=r(aGe," class method."),aGe.forEach(t),ieo=i(js),Y6=n(js,"P",{});var nGe=s(Y6);deo=r(nGe,"This class cannot be instantiated directly using "),Kte=n(nGe,"CODE",{});var mUr=s(Kte);ceo=r(mUr,"__init__()"),mUr.forEach(t),feo=r(nGe," (throws an error)."),nGe.forEach(t),meo=i(js),Cr=n(js,"DIV",{class:!0});var Ds=s(Cr);T(K6.$$.fragment,Ds),geo=i(Ds),Zte=n(Ds,"P",{});var gUr=s(Zte);heo=r(gUr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),gUr.forEach(t),peo=i(Ds),Aa=n(Ds,"P",{});var Ow=s(Aa);_eo=r(Ow,"The tokenizer class to instantiate is selected based on the "),eae=n(Ow,"CODE",{});var hUr=s(eae);ueo=r(hUr,"model_type"),hUr.forEach(t),beo=r(Ow,` property of the config object (either
passed as an argument or loaded from `),oae=n(Ow,"CODE",{});var pUr=s(oae);veo=r(pUr,"pretrained_model_name_or_path"),pUr.forEach(t),Feo=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rae=n(Ow,"CODE",{});var _Ur=s(rae);Teo=r(_Ur,"pretrained_model_name_or_path"),_Ur.forEach(t),Meo=r(Ow,":"),Ow.forEach(t),Eeo=i(Ds),k=n(Ds,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Zx=s(Sn);tae=n(Zx,"STRONG",{});var uUr=s(tae);Ceo=r(uUr,"albert"),uUr.forEach(t),weo=r(Zx," \u2014 "),uR=n(Zx,"A",{href:!0});var bUr=s(uR);Aeo=r(bUr,"AlbertTokenizer"),bUr.forEach(t),Leo=r(Zx," or "),bR=n(Zx,"A",{href:!0});var vUr=s(bR);yeo=r(vUr,"AlbertTokenizerFast"),vUr.forEach(t),xeo=r(Zx," (ALBERT model)"),Zx.forEach(t),$eo=i(S),Rn=n(S,"LI",{});var e$=s(Rn);aae=n(e$,"STRONG",{});var FUr=s(aae);keo=r(FUr,"bart"),FUr.forEach(t),Seo=r(e$," \u2014 "),vR=n(e$,"A",{href:!0});var TUr=s(vR);Reo=r(TUr,"BartTokenizer"),TUr.forEach(t),Peo=r(e$," or "),FR=n(e$,"A",{href:!0});var MUr=s(FR);Beo=r(MUr,"BartTokenizerFast"),MUr.forEach(t),Ieo=r(e$," (BART model)"),e$.forEach(t),Neo=i(S),Pn=n(S,"LI",{});var o$=s(Pn);nae=n(o$,"STRONG",{});var EUr=s(nae);qeo=r(EUr,"barthez"),EUr.forEach(t),jeo=r(o$," \u2014 "),TR=n(o$,"A",{href:!0});var CUr=s(TR);Deo=r(CUr,"BarthezTokenizer"),CUr.forEach(t),Geo=r(o$," or "),MR=n(o$,"A",{href:!0});var wUr=s(MR);Oeo=r(wUr,"BarthezTokenizerFast"),wUr.forEach(t),Veo=r(o$," (BARThez model)"),o$.forEach(t),Xeo=i(S),$g=n(S,"LI",{});var aAe=s($g);sae=n(aAe,"STRONG",{});var AUr=s(sae);zeo=r(AUr,"bartpho"),AUr.forEach(t),Weo=r(aAe," \u2014 "),ER=n(aAe,"A",{href:!0});var LUr=s(ER);Qeo=r(LUr,"BartphoTokenizer"),LUr.forEach(t),Heo=r(aAe," (BARTpho model)"),aAe.forEach(t),Ueo=i(S),Bn=n(S,"LI",{});var r$=s(Bn);lae=n(r$,"STRONG",{});var yUr=s(lae);Jeo=r(yUr,"bert"),yUr.forEach(t),Yeo=r(r$," \u2014 "),CR=n(r$,"A",{href:!0});var xUr=s(CR);Keo=r(xUr,"BertTokenizer"),xUr.forEach(t),Zeo=r(r$," or "),wR=n(r$,"A",{href:!0});var $Ur=s(wR);eoo=r($Ur,"BertTokenizerFast"),$Ur.forEach(t),ooo=r(r$," (BERT model)"),r$.forEach(t),roo=i(S),kg=n(S,"LI",{});var nAe=s(kg);iae=n(nAe,"STRONG",{});var kUr=s(iae);too=r(kUr,"bert-generation"),kUr.forEach(t),aoo=r(nAe," \u2014 "),AR=n(nAe,"A",{href:!0});var SUr=s(AR);noo=r(SUr,"BertGenerationTokenizer"),SUr.forEach(t),soo=r(nAe," (Bert Generation model)"),nAe.forEach(t),loo=i(S),Sg=n(S,"LI",{});var sAe=s(Sg);dae=n(sAe,"STRONG",{});var RUr=s(dae);ioo=r(RUr,"bert-japanese"),RUr.forEach(t),doo=r(sAe," \u2014 "),LR=n(sAe,"A",{href:!0});var PUr=s(LR);coo=r(PUr,"BertJapaneseTokenizer"),PUr.forEach(t),foo=r(sAe," (BertJapanese model)"),sAe.forEach(t),moo=i(S),Rg=n(S,"LI",{});var lAe=s(Rg);cae=n(lAe,"STRONG",{});var BUr=s(cae);goo=r(BUr,"bertweet"),BUr.forEach(t),hoo=r(lAe," \u2014 "),yR=n(lAe,"A",{href:!0});var IUr=s(yR);poo=r(IUr,"BertweetTokenizer"),IUr.forEach(t),_oo=r(lAe," (BERTweet model)"),lAe.forEach(t),uoo=i(S),In=n(S,"LI",{});var t$=s(In);fae=n(t$,"STRONG",{});var NUr=s(fae);boo=r(NUr,"big_bird"),NUr.forEach(t),voo=r(t$," \u2014 "),xR=n(t$,"A",{href:!0});var qUr=s(xR);Foo=r(qUr,"BigBirdTokenizer"),qUr.forEach(t),Too=r(t$," or "),$R=n(t$,"A",{href:!0});var jUr=s($R);Moo=r(jUr,"BigBirdTokenizerFast"),jUr.forEach(t),Eoo=r(t$," (BigBird model)"),t$.forEach(t),Coo=i(S),Nn=n(S,"LI",{});var a$=s(Nn);mae=n(a$,"STRONG",{});var DUr=s(mae);woo=r(DUr,"bigbird_pegasus"),DUr.forEach(t),Aoo=r(a$," \u2014 "),kR=n(a$,"A",{href:!0});var GUr=s(kR);Loo=r(GUr,"PegasusTokenizer"),GUr.forEach(t),yoo=r(a$," or "),SR=n(a$,"A",{href:!0});var OUr=s(SR);xoo=r(OUr,"PegasusTokenizerFast"),OUr.forEach(t),$oo=r(a$," (BigBird-Pegasus model)"),a$.forEach(t),koo=i(S),qn=n(S,"LI",{});var n$=s(qn);gae=n(n$,"STRONG",{});var VUr=s(gae);Soo=r(VUr,"blenderbot"),VUr.forEach(t),Roo=r(n$," \u2014 "),RR=n(n$,"A",{href:!0});var XUr=s(RR);Poo=r(XUr,"BlenderbotTokenizer"),XUr.forEach(t),Boo=r(n$," or "),PR=n(n$,"A",{href:!0});var zUr=s(PR);Ioo=r(zUr,"BlenderbotTokenizerFast"),zUr.forEach(t),Noo=r(n$," (Blenderbot model)"),n$.forEach(t),qoo=i(S),Pg=n(S,"LI",{});var iAe=s(Pg);hae=n(iAe,"STRONG",{});var WUr=s(hae);joo=r(WUr,"blenderbot-small"),WUr.forEach(t),Doo=r(iAe," \u2014 "),BR=n(iAe,"A",{href:!0});var QUr=s(BR);Goo=r(QUr,"BlenderbotSmallTokenizer"),QUr.forEach(t),Ooo=r(iAe," (BlenderbotSmall model)"),iAe.forEach(t),Voo=i(S),Bg=n(S,"LI",{});var dAe=s(Bg);pae=n(dAe,"STRONG",{});var HUr=s(pae);Xoo=r(HUr,"byt5"),HUr.forEach(t),zoo=r(dAe," \u2014 "),IR=n(dAe,"A",{href:!0});var UUr=s(IR);Woo=r(UUr,"ByT5Tokenizer"),UUr.forEach(t),Qoo=r(dAe," (ByT5 model)"),dAe.forEach(t),Hoo=i(S),jn=n(S,"LI",{});var s$=s(jn);_ae=n(s$,"STRONG",{});var JUr=s(_ae);Uoo=r(JUr,"camembert"),JUr.forEach(t),Joo=r(s$," \u2014 "),NR=n(s$,"A",{href:!0});var YUr=s(NR);Yoo=r(YUr,"CamembertTokenizer"),YUr.forEach(t),Koo=r(s$," or "),qR=n(s$,"A",{href:!0});var KUr=s(qR);Zoo=r(KUr,"CamembertTokenizerFast"),KUr.forEach(t),ero=r(s$," (CamemBERT model)"),s$.forEach(t),oro=i(S),Ig=n(S,"LI",{});var cAe=s(Ig);uae=n(cAe,"STRONG",{});var ZUr=s(uae);rro=r(ZUr,"canine"),ZUr.forEach(t),tro=r(cAe," \u2014 "),jR=n(cAe,"A",{href:!0});var eJr=s(jR);aro=r(eJr,"CanineTokenizer"),eJr.forEach(t),nro=r(cAe," (CANINE model)"),cAe.forEach(t),sro=i(S),Dn=n(S,"LI",{});var l$=s(Dn);bae=n(l$,"STRONG",{});var oJr=s(bae);lro=r(oJr,"clip"),oJr.forEach(t),iro=r(l$," \u2014 "),DR=n(l$,"A",{href:!0});var rJr=s(DR);dro=r(rJr,"CLIPTokenizer"),rJr.forEach(t),cro=r(l$," or "),GR=n(l$,"A",{href:!0});var tJr=s(GR);fro=r(tJr,"CLIPTokenizerFast"),tJr.forEach(t),mro=r(l$," (CLIP model)"),l$.forEach(t),gro=i(S),Gn=n(S,"LI",{});var i$=s(Gn);vae=n(i$,"STRONG",{});var aJr=s(vae);hro=r(aJr,"codegen"),aJr.forEach(t),pro=r(i$," \u2014 "),OR=n(i$,"A",{href:!0});var nJr=s(OR);_ro=r(nJr,"GPT2Tokenizer"),nJr.forEach(t),uro=r(i$," or "),VR=n(i$,"A",{href:!0});var sJr=s(VR);bro=r(sJr,"GPT2TokenizerFast"),sJr.forEach(t),vro=r(i$," (CodeGen model)"),i$.forEach(t),Fro=i(S),On=n(S,"LI",{});var d$=s(On);Fae=n(d$,"STRONG",{});var lJr=s(Fae);Tro=r(lJr,"convbert"),lJr.forEach(t),Mro=r(d$," \u2014 "),XR=n(d$,"A",{href:!0});var iJr=s(XR);Ero=r(iJr,"ConvBertTokenizer"),iJr.forEach(t),Cro=r(d$," or "),zR=n(d$,"A",{href:!0});var dJr=s(zR);wro=r(dJr,"ConvBertTokenizerFast"),dJr.forEach(t),Aro=r(d$," (ConvBERT model)"),d$.forEach(t),Lro=i(S),Vn=n(S,"LI",{});var c$=s(Vn);Tae=n(c$,"STRONG",{});var cJr=s(Tae);yro=r(cJr,"cpm"),cJr.forEach(t),xro=r(c$," \u2014 "),WR=n(c$,"A",{href:!0});var fJr=s(WR);$ro=r(fJr,"CpmTokenizer"),fJr.forEach(t),kro=r(c$," or "),QR=n(c$,"A",{href:!0});var mJr=s(QR);Sro=r(mJr,"CpmTokenizerFast"),mJr.forEach(t),Rro=r(c$," (CPM model)"),c$.forEach(t),Pro=i(S),Ng=n(S,"LI",{});var fAe=s(Ng);Mae=n(fAe,"STRONG",{});var gJr=s(Mae);Bro=r(gJr,"ctrl"),gJr.forEach(t),Iro=r(fAe," \u2014 "),HR=n(fAe,"A",{href:!0});var hJr=s(HR);Nro=r(hJr,"CTRLTokenizer"),hJr.forEach(t),qro=r(fAe," (CTRL model)"),fAe.forEach(t),jro=i(S),Xn=n(S,"LI",{});var f$=s(Xn);Eae=n(f$,"STRONG",{});var pJr=s(Eae);Dro=r(pJr,"data2vec-text"),pJr.forEach(t),Gro=r(f$," \u2014 "),UR=n(f$,"A",{href:!0});var _Jr=s(UR);Oro=r(_Jr,"RobertaTokenizer"),_Jr.forEach(t),Vro=r(f$," or "),JR=n(f$,"A",{href:!0});var uJr=s(JR);Xro=r(uJr,"RobertaTokenizerFast"),uJr.forEach(t),zro=r(f$," (Data2VecText model)"),f$.forEach(t),Wro=i(S),zn=n(S,"LI",{});var m$=s(zn);Cae=n(m$,"STRONG",{});var bJr=s(Cae);Qro=r(bJr,"deberta"),bJr.forEach(t),Hro=r(m$," \u2014 "),YR=n(m$,"A",{href:!0});var vJr=s(YR);Uro=r(vJr,"DebertaTokenizer"),vJr.forEach(t),Jro=r(m$," or "),KR=n(m$,"A",{href:!0});var FJr=s(KR);Yro=r(FJr,"DebertaTokenizerFast"),FJr.forEach(t),Kro=r(m$," (DeBERTa model)"),m$.forEach(t),Zro=i(S),Wn=n(S,"LI",{});var g$=s(Wn);wae=n(g$,"STRONG",{});var TJr=s(wae);eto=r(TJr,"deberta-v2"),TJr.forEach(t),oto=r(g$," \u2014 "),ZR=n(g$,"A",{href:!0});var MJr=s(ZR);rto=r(MJr,"DebertaV2Tokenizer"),MJr.forEach(t),tto=r(g$," or "),eP=n(g$,"A",{href:!0});var EJr=s(eP);ato=r(EJr,"DebertaV2TokenizerFast"),EJr.forEach(t),nto=r(g$," (DeBERTa-v2 model)"),g$.forEach(t),sto=i(S),Qn=n(S,"LI",{});var h$=s(Qn);Aae=n(h$,"STRONG",{});var CJr=s(Aae);lto=r(CJr,"distilbert"),CJr.forEach(t),ito=r(h$," \u2014 "),oP=n(h$,"A",{href:!0});var wJr=s(oP);dto=r(wJr,"DistilBertTokenizer"),wJr.forEach(t),cto=r(h$," or "),rP=n(h$,"A",{href:!0});var AJr=s(rP);fto=r(AJr,"DistilBertTokenizerFast"),AJr.forEach(t),mto=r(h$," (DistilBERT model)"),h$.forEach(t),gto=i(S),Hn=n(S,"LI",{});var p$=s(Hn);Lae=n(p$,"STRONG",{});var LJr=s(Lae);hto=r(LJr,"dpr"),LJr.forEach(t),pto=r(p$," \u2014 "),tP=n(p$,"A",{href:!0});var yJr=s(tP);_to=r(yJr,"DPRQuestionEncoderTokenizer"),yJr.forEach(t),uto=r(p$," or "),aP=n(p$,"A",{href:!0});var xJr=s(aP);bto=r(xJr,"DPRQuestionEncoderTokenizerFast"),xJr.forEach(t),vto=r(p$," (DPR model)"),p$.forEach(t),Fto=i(S),Un=n(S,"LI",{});var _$=s(Un);yae=n(_$,"STRONG",{});var $Jr=s(yae);Tto=r($Jr,"electra"),$Jr.forEach(t),Mto=r(_$," \u2014 "),nP=n(_$,"A",{href:!0});var kJr=s(nP);Eto=r(kJr,"ElectraTokenizer"),kJr.forEach(t),Cto=r(_$," or "),sP=n(_$,"A",{href:!0});var SJr=s(sP);wto=r(SJr,"ElectraTokenizerFast"),SJr.forEach(t),Ato=r(_$," (ELECTRA model)"),_$.forEach(t),Lto=i(S),qg=n(S,"LI",{});var mAe=s(qg);xae=n(mAe,"STRONG",{});var RJr=s(xae);yto=r(RJr,"flaubert"),RJr.forEach(t),xto=r(mAe," \u2014 "),lP=n(mAe,"A",{href:!0});var PJr=s(lP);$to=r(PJr,"FlaubertTokenizer"),PJr.forEach(t),kto=r(mAe," (FlauBERT model)"),mAe.forEach(t),Sto=i(S),Jn=n(S,"LI",{});var u$=s(Jn);$ae=n(u$,"STRONG",{});var BJr=s($ae);Rto=r(BJr,"fnet"),BJr.forEach(t),Pto=r(u$," \u2014 "),iP=n(u$,"A",{href:!0});var IJr=s(iP);Bto=r(IJr,"FNetTokenizer"),IJr.forEach(t),Ito=r(u$," or "),dP=n(u$,"A",{href:!0});var NJr=s(dP);Nto=r(NJr,"FNetTokenizerFast"),NJr.forEach(t),qto=r(u$," (FNet model)"),u$.forEach(t),jto=i(S),jg=n(S,"LI",{});var gAe=s(jg);kae=n(gAe,"STRONG",{});var qJr=s(kae);Dto=r(qJr,"fsmt"),qJr.forEach(t),Gto=r(gAe," \u2014 "),cP=n(gAe,"A",{href:!0});var jJr=s(cP);Oto=r(jJr,"FSMTTokenizer"),jJr.forEach(t),Vto=r(gAe," (FairSeq Machine-Translation model)"),gAe.forEach(t),Xto=i(S),Yn=n(S,"LI",{});var b$=s(Yn);Sae=n(b$,"STRONG",{});var DJr=s(Sae);zto=r(DJr,"funnel"),DJr.forEach(t),Wto=r(b$," \u2014 "),fP=n(b$,"A",{href:!0});var GJr=s(fP);Qto=r(GJr,"FunnelTokenizer"),GJr.forEach(t),Hto=r(b$," or "),mP=n(b$,"A",{href:!0});var OJr=s(mP);Uto=r(OJr,"FunnelTokenizerFast"),OJr.forEach(t),Jto=r(b$," (Funnel Transformer model)"),b$.forEach(t),Yto=i(S),Kn=n(S,"LI",{});var v$=s(Kn);Rae=n(v$,"STRONG",{});var VJr=s(Rae);Kto=r(VJr,"gpt2"),VJr.forEach(t),Zto=r(v$," \u2014 "),gP=n(v$,"A",{href:!0});var XJr=s(gP);eao=r(XJr,"GPT2Tokenizer"),XJr.forEach(t),oao=r(v$," or "),hP=n(v$,"A",{href:!0});var zJr=s(hP);rao=r(zJr,"GPT2TokenizerFast"),zJr.forEach(t),tao=r(v$," (OpenAI GPT-2 model)"),v$.forEach(t),aao=i(S),Zn=n(S,"LI",{});var F$=s(Zn);Pae=n(F$,"STRONG",{});var WJr=s(Pae);nao=r(WJr,"gpt_neo"),WJr.forEach(t),sao=r(F$," \u2014 "),pP=n(F$,"A",{href:!0});var QJr=s(pP);lao=r(QJr,"GPT2Tokenizer"),QJr.forEach(t),iao=r(F$," or "),_P=n(F$,"A",{href:!0});var HJr=s(_P);dao=r(HJr,"GPT2TokenizerFast"),HJr.forEach(t),cao=r(F$," (GPT Neo model)"),F$.forEach(t),fao=i(S),Dg=n(S,"LI",{});var hAe=s(Dg);Bae=n(hAe,"STRONG",{});var UJr=s(Bae);mao=r(UJr,"gpt_neox"),UJr.forEach(t),gao=r(hAe," \u2014 "),uP=n(hAe,"A",{href:!0});var JJr=s(uP);hao=r(JJr,"GPTNeoXTokenizerFast"),JJr.forEach(t),pao=r(hAe," (GPT NeoX model)"),hAe.forEach(t),_ao=i(S),es=n(S,"LI",{});var T$=s(es);Iae=n(T$,"STRONG",{});var YJr=s(Iae);uao=r(YJr,"gptj"),YJr.forEach(t),bao=r(T$," \u2014 "),bP=n(T$,"A",{href:!0});var KJr=s(bP);vao=r(KJr,"GPT2Tokenizer"),KJr.forEach(t),Fao=r(T$," or "),vP=n(T$,"A",{href:!0});var ZJr=s(vP);Tao=r(ZJr,"GPT2TokenizerFast"),ZJr.forEach(t),Mao=r(T$," (GPT-J model)"),T$.forEach(t),Eao=i(S),os=n(S,"LI",{});var M$=s(os);Nae=n(M$,"STRONG",{});var eYr=s(Nae);Cao=r(eYr,"herbert"),eYr.forEach(t),wao=r(M$," \u2014 "),FP=n(M$,"A",{href:!0});var oYr=s(FP);Aao=r(oYr,"HerbertTokenizer"),oYr.forEach(t),Lao=r(M$," or "),TP=n(M$,"A",{href:!0});var rYr=s(TP);yao=r(rYr,"HerbertTokenizerFast"),rYr.forEach(t),xao=r(M$," (HerBERT model)"),M$.forEach(t),$ao=i(S),Gg=n(S,"LI",{});var pAe=s(Gg);qae=n(pAe,"STRONG",{});var tYr=s(qae);kao=r(tYr,"hubert"),tYr.forEach(t),Sao=r(pAe," \u2014 "),MP=n(pAe,"A",{href:!0});var aYr=s(MP);Rao=r(aYr,"Wav2Vec2CTCTokenizer"),aYr.forEach(t),Pao=r(pAe," (Hubert model)"),pAe.forEach(t),Bao=i(S),rs=n(S,"LI",{});var E$=s(rs);jae=n(E$,"STRONG",{});var nYr=s(jae);Iao=r(nYr,"ibert"),nYr.forEach(t),Nao=r(E$," \u2014 "),EP=n(E$,"A",{href:!0});var sYr=s(EP);qao=r(sYr,"RobertaTokenizer"),sYr.forEach(t),jao=r(E$," or "),CP=n(E$,"A",{href:!0});var lYr=s(CP);Dao=r(lYr,"RobertaTokenizerFast"),lYr.forEach(t),Gao=r(E$," (I-BERT model)"),E$.forEach(t),Oao=i(S),ts=n(S,"LI",{});var C$=s(ts);Dae=n(C$,"STRONG",{});var iYr=s(Dae);Vao=r(iYr,"layoutlm"),iYr.forEach(t),Xao=r(C$," \u2014 "),wP=n(C$,"A",{href:!0});var dYr=s(wP);zao=r(dYr,"LayoutLMTokenizer"),dYr.forEach(t),Wao=r(C$," or "),AP=n(C$,"A",{href:!0});var cYr=s(AP);Qao=r(cYr,"LayoutLMTokenizerFast"),cYr.forEach(t),Hao=r(C$," (LayoutLM model)"),C$.forEach(t),Uao=i(S),as=n(S,"LI",{});var w$=s(as);Gae=n(w$,"STRONG",{});var fYr=s(Gae);Jao=r(fYr,"layoutlmv2"),fYr.forEach(t),Yao=r(w$," \u2014 "),LP=n(w$,"A",{href:!0});var mYr=s(LP);Kao=r(mYr,"LayoutLMv2Tokenizer"),mYr.forEach(t),Zao=r(w$," or "),yP=n(w$,"A",{href:!0});var gYr=s(yP);eno=r(gYr,"LayoutLMv2TokenizerFast"),gYr.forEach(t),ono=r(w$," (LayoutLMv2 model)"),w$.forEach(t),rno=i(S),ns=n(S,"LI",{});var A$=s(ns);Oae=n(A$,"STRONG",{});var hYr=s(Oae);tno=r(hYr,"layoutlmv3"),hYr.forEach(t),ano=r(A$," \u2014 "),xP=n(A$,"A",{href:!0});var pYr=s(xP);nno=r(pYr,"LayoutLMv3Tokenizer"),pYr.forEach(t),sno=r(A$," or "),$P=n(A$,"A",{href:!0});var _Yr=s($P);lno=r(_Yr,"LayoutLMv3TokenizerFast"),_Yr.forEach(t),ino=r(A$," (LayoutLMv3 model)"),A$.forEach(t),dno=i(S),ss=n(S,"LI",{});var L$=s(ss);Vae=n(L$,"STRONG",{});var uYr=s(Vae);cno=r(uYr,"layoutxlm"),uYr.forEach(t),fno=r(L$," \u2014 "),kP=n(L$,"A",{href:!0});var bYr=s(kP);mno=r(bYr,"LayoutXLMTokenizer"),bYr.forEach(t),gno=r(L$," or "),SP=n(L$,"A",{href:!0});var vYr=s(SP);hno=r(vYr,"LayoutXLMTokenizerFast"),vYr.forEach(t),pno=r(L$," (LayoutXLM model)"),L$.forEach(t),_no=i(S),ls=n(S,"LI",{});var y$=s(ls);Xae=n(y$,"STRONG",{});var FYr=s(Xae);uno=r(FYr,"led"),FYr.forEach(t),bno=r(y$," \u2014 "),RP=n(y$,"A",{href:!0});var TYr=s(RP);vno=r(TYr,"LEDTokenizer"),TYr.forEach(t),Fno=r(y$," or "),PP=n(y$,"A",{href:!0});var MYr=s(PP);Tno=r(MYr,"LEDTokenizerFast"),MYr.forEach(t),Mno=r(y$," (LED model)"),y$.forEach(t),Eno=i(S),is=n(S,"LI",{});var x$=s(is);zae=n(x$,"STRONG",{});var EYr=s(zae);Cno=r(EYr,"longformer"),EYr.forEach(t),wno=r(x$," \u2014 "),BP=n(x$,"A",{href:!0});var CYr=s(BP);Ano=r(CYr,"LongformerTokenizer"),CYr.forEach(t),Lno=r(x$," or "),IP=n(x$,"A",{href:!0});var wYr=s(IP);yno=r(wYr,"LongformerTokenizerFast"),wYr.forEach(t),xno=r(x$," (Longformer model)"),x$.forEach(t),$no=i(S),Og=n(S,"LI",{});var _Ae=s(Og);Wae=n(_Ae,"STRONG",{});var AYr=s(Wae);kno=r(AYr,"luke"),AYr.forEach(t),Sno=r(_Ae," \u2014 "),NP=n(_Ae,"A",{href:!0});var LYr=s(NP);Rno=r(LYr,"LukeTokenizer"),LYr.forEach(t),Pno=r(_Ae," (LUKE model)"),_Ae.forEach(t),Bno=i(S),ds=n(S,"LI",{});var $$=s(ds);Qae=n($$,"STRONG",{});var yYr=s(Qae);Ino=r(yYr,"lxmert"),yYr.forEach(t),Nno=r($$," \u2014 "),qP=n($$,"A",{href:!0});var xYr=s(qP);qno=r(xYr,"LxmertTokenizer"),xYr.forEach(t),jno=r($$," or "),jP=n($$,"A",{href:!0});var $Yr=s(jP);Dno=r($Yr,"LxmertTokenizerFast"),$Yr.forEach(t),Gno=r($$," (LXMERT model)"),$$.forEach(t),Ono=i(S),Vg=n(S,"LI",{});var uAe=s(Vg);Hae=n(uAe,"STRONG",{});var kYr=s(Hae);Vno=r(kYr,"m2m_100"),kYr.forEach(t),Xno=r(uAe," \u2014 "),DP=n(uAe,"A",{href:!0});var SYr=s(DP);zno=r(SYr,"M2M100Tokenizer"),SYr.forEach(t),Wno=r(uAe," (M2M100 model)"),uAe.forEach(t),Qno=i(S),Xg=n(S,"LI",{});var bAe=s(Xg);Uae=n(bAe,"STRONG",{});var RYr=s(Uae);Hno=r(RYr,"marian"),RYr.forEach(t),Uno=r(bAe," \u2014 "),GP=n(bAe,"A",{href:!0});var PYr=s(GP);Jno=r(PYr,"MarianTokenizer"),PYr.forEach(t),Yno=r(bAe," (Marian model)"),bAe.forEach(t),Kno=i(S),cs=n(S,"LI",{});var k$=s(cs);Jae=n(k$,"STRONG",{});var BYr=s(Jae);Zno=r(BYr,"mbart"),BYr.forEach(t),eso=r(k$," \u2014 "),OP=n(k$,"A",{href:!0});var IYr=s(OP);oso=r(IYr,"MBartTokenizer"),IYr.forEach(t),rso=r(k$," or "),VP=n(k$,"A",{href:!0});var NYr=s(VP);tso=r(NYr,"MBartTokenizerFast"),NYr.forEach(t),aso=r(k$," (mBART model)"),k$.forEach(t),nso=i(S),fs=n(S,"LI",{});var S$=s(fs);Yae=n(S$,"STRONG",{});var qYr=s(Yae);sso=r(qYr,"mbart50"),qYr.forEach(t),lso=r(S$," \u2014 "),XP=n(S$,"A",{href:!0});var jYr=s(XP);iso=r(jYr,"MBart50Tokenizer"),jYr.forEach(t),dso=r(S$," or "),zP=n(S$,"A",{href:!0});var DYr=s(zP);cso=r(DYr,"MBart50TokenizerFast"),DYr.forEach(t),fso=r(S$," (mBART-50 model)"),S$.forEach(t),mso=i(S),ms=n(S,"LI",{});var R$=s(ms);Kae=n(R$,"STRONG",{});var GYr=s(Kae);gso=r(GYr,"megatron-bert"),GYr.forEach(t),hso=r(R$," \u2014 "),WP=n(R$,"A",{href:!0});var OYr=s(WP);pso=r(OYr,"BertTokenizer"),OYr.forEach(t),_so=r(R$," or "),QP=n(R$,"A",{href:!0});var VYr=s(QP);uso=r(VYr,"BertTokenizerFast"),VYr.forEach(t),bso=r(R$," (Megatron-BERT model)"),R$.forEach(t),vso=i(S),zg=n(S,"LI",{});var vAe=s(zg);Zae=n(vAe,"STRONG",{});var XYr=s(Zae);Fso=r(XYr,"mluke"),XYr.forEach(t),Tso=r(vAe," \u2014 "),HP=n(vAe,"A",{href:!0});var zYr=s(HP);Mso=r(zYr,"MLukeTokenizer"),zYr.forEach(t),Eso=r(vAe," (mLUKE model)"),vAe.forEach(t),Cso=i(S),gs=n(S,"LI",{});var P$=s(gs);ene=n(P$,"STRONG",{});var WYr=s(ene);wso=r(WYr,"mobilebert"),WYr.forEach(t),Aso=r(P$," \u2014 "),UP=n(P$,"A",{href:!0});var QYr=s(UP);Lso=r(QYr,"MobileBertTokenizer"),QYr.forEach(t),yso=r(P$," or "),JP=n(P$,"A",{href:!0});var HYr=s(JP);xso=r(HYr,"MobileBertTokenizerFast"),HYr.forEach(t),$so=r(P$," (MobileBERT model)"),P$.forEach(t),kso=i(S),hs=n(S,"LI",{});var B$=s(hs);one=n(B$,"STRONG",{});var UYr=s(one);Sso=r(UYr,"mpnet"),UYr.forEach(t),Rso=r(B$," \u2014 "),YP=n(B$,"A",{href:!0});var JYr=s(YP);Pso=r(JYr,"MPNetTokenizer"),JYr.forEach(t),Bso=r(B$," or "),KP=n(B$,"A",{href:!0});var YYr=s(KP);Iso=r(YYr,"MPNetTokenizerFast"),YYr.forEach(t),Nso=r(B$," (MPNet model)"),B$.forEach(t),qso=i(S),ps=n(S,"LI",{});var I$=s(ps);rne=n(I$,"STRONG",{});var KYr=s(rne);jso=r(KYr,"mt5"),KYr.forEach(t),Dso=r(I$," \u2014 "),ZP=n(I$,"A",{href:!0});var ZYr=s(ZP);Gso=r(ZYr,"MT5Tokenizer"),ZYr.forEach(t),Oso=r(I$," or "),eB=n(I$,"A",{href:!0});var eKr=s(eB);Vso=r(eKr,"MT5TokenizerFast"),eKr.forEach(t),Xso=r(I$," (MT5 model)"),I$.forEach(t),zso=i(S),_s=n(S,"LI",{});var N$=s(_s);tne=n(N$,"STRONG",{});var oKr=s(tne);Wso=r(oKr,"nystromformer"),oKr.forEach(t),Qso=r(N$," \u2014 "),oB=n(N$,"A",{href:!0});var rKr=s(oB);Hso=r(rKr,"AlbertTokenizer"),rKr.forEach(t),Uso=r(N$," or "),rB=n(N$,"A",{href:!0});var tKr=s(rB);Jso=r(tKr,"AlbertTokenizerFast"),tKr.forEach(t),Yso=r(N$," (Nystr\xF6mformer model)"),N$.forEach(t),Kso=i(S),us=n(S,"LI",{});var q$=s(us);ane=n(q$,"STRONG",{});var aKr=s(ane);Zso=r(aKr,"openai-gpt"),aKr.forEach(t),elo=r(q$," \u2014 "),tB=n(q$,"A",{href:!0});var nKr=s(tB);olo=r(nKr,"OpenAIGPTTokenizer"),nKr.forEach(t),rlo=r(q$," or "),aB=n(q$,"A",{href:!0});var sKr=s(aB);tlo=r(sKr,"OpenAIGPTTokenizerFast"),sKr.forEach(t),alo=r(q$," (OpenAI GPT model)"),q$.forEach(t),nlo=i(S),Wg=n(S,"LI",{});var FAe=s(Wg);nne=n(FAe,"STRONG",{});var lKr=s(nne);slo=r(lKr,"opt"),lKr.forEach(t),llo=r(FAe," \u2014 "),nB=n(FAe,"A",{href:!0});var iKr=s(nB);ilo=r(iKr,"GPT2Tokenizer"),iKr.forEach(t),dlo=r(FAe," (OPT model)"),FAe.forEach(t),clo=i(S),bs=n(S,"LI",{});var j$=s(bs);sne=n(j$,"STRONG",{});var dKr=s(sne);flo=r(dKr,"pegasus"),dKr.forEach(t),mlo=r(j$," \u2014 "),sB=n(j$,"A",{href:!0});var cKr=s(sB);glo=r(cKr,"PegasusTokenizer"),cKr.forEach(t),hlo=r(j$," or "),lB=n(j$,"A",{href:!0});var fKr=s(lB);plo=r(fKr,"PegasusTokenizerFast"),fKr.forEach(t),_lo=r(j$," (Pegasus model)"),j$.forEach(t),ulo=i(S),Qg=n(S,"LI",{});var TAe=s(Qg);lne=n(TAe,"STRONG",{});var mKr=s(lne);blo=r(mKr,"perceiver"),mKr.forEach(t),vlo=r(TAe," \u2014 "),iB=n(TAe,"A",{href:!0});var gKr=s(iB);Flo=r(gKr,"PerceiverTokenizer"),gKr.forEach(t),Tlo=r(TAe," (Perceiver model)"),TAe.forEach(t),Mlo=i(S),Hg=n(S,"LI",{});var MAe=s(Hg);ine=n(MAe,"STRONG",{});var hKr=s(ine);Elo=r(hKr,"phobert"),hKr.forEach(t),Clo=r(MAe," \u2014 "),dB=n(MAe,"A",{href:!0});var pKr=s(dB);wlo=r(pKr,"PhobertTokenizer"),pKr.forEach(t),Alo=r(MAe," (PhoBERT model)"),MAe.forEach(t),Llo=i(S),Ug=n(S,"LI",{});var EAe=s(Ug);dne=n(EAe,"STRONG",{});var _Kr=s(dne);ylo=r(_Kr,"plbart"),_Kr.forEach(t),xlo=r(EAe," \u2014 "),cB=n(EAe,"A",{href:!0});var uKr=s(cB);$lo=r(uKr,"PLBartTokenizer"),uKr.forEach(t),klo=r(EAe," (PLBart model)"),EAe.forEach(t),Slo=i(S),Jg=n(S,"LI",{});var CAe=s(Jg);cne=n(CAe,"STRONG",{});var bKr=s(cne);Rlo=r(bKr,"prophetnet"),bKr.forEach(t),Plo=r(CAe," \u2014 "),fB=n(CAe,"A",{href:!0});var vKr=s(fB);Blo=r(vKr,"ProphetNetTokenizer"),vKr.forEach(t),Ilo=r(CAe," (ProphetNet model)"),CAe.forEach(t),Nlo=i(S),vs=n(S,"LI",{});var D$=s(vs);fne=n(D$,"STRONG",{});var FKr=s(fne);qlo=r(FKr,"qdqbert"),FKr.forEach(t),jlo=r(D$," \u2014 "),mB=n(D$,"A",{href:!0});var TKr=s(mB);Dlo=r(TKr,"BertTokenizer"),TKr.forEach(t),Glo=r(D$," or "),gB=n(D$,"A",{href:!0});var MKr=s(gB);Olo=r(MKr,"BertTokenizerFast"),MKr.forEach(t),Vlo=r(D$," (QDQBert model)"),D$.forEach(t),Xlo=i(S),Yg=n(S,"LI",{});var wAe=s(Yg);mne=n(wAe,"STRONG",{});var EKr=s(mne);zlo=r(EKr,"rag"),EKr.forEach(t),Wlo=r(wAe," \u2014 "),hB=n(wAe,"A",{href:!0});var CKr=s(hB);Qlo=r(CKr,"RagTokenizer"),CKr.forEach(t),Hlo=r(wAe," (RAG model)"),wAe.forEach(t),Ulo=i(S),Fs=n(S,"LI",{});var G$=s(Fs);gne=n(G$,"STRONG",{});var wKr=s(gne);Jlo=r(wKr,"realm"),wKr.forEach(t),Ylo=r(G$," \u2014 "),pB=n(G$,"A",{href:!0});var AKr=s(pB);Klo=r(AKr,"RealmTokenizer"),AKr.forEach(t),Zlo=r(G$," or "),_B=n(G$,"A",{href:!0});var LKr=s(_B);eio=r(LKr,"RealmTokenizerFast"),LKr.forEach(t),oio=r(G$," (REALM model)"),G$.forEach(t),rio=i(S),Ts=n(S,"LI",{});var O$=s(Ts);hne=n(O$,"STRONG",{});var yKr=s(hne);tio=r(yKr,"reformer"),yKr.forEach(t),aio=r(O$," \u2014 "),uB=n(O$,"A",{href:!0});var xKr=s(uB);nio=r(xKr,"ReformerTokenizer"),xKr.forEach(t),sio=r(O$," or "),bB=n(O$,"A",{href:!0});var $Kr=s(bB);lio=r($Kr,"ReformerTokenizerFast"),$Kr.forEach(t),iio=r(O$," (Reformer model)"),O$.forEach(t),dio=i(S),Ms=n(S,"LI",{});var V$=s(Ms);pne=n(V$,"STRONG",{});var kKr=s(pne);cio=r(kKr,"rembert"),kKr.forEach(t),fio=r(V$," \u2014 "),vB=n(V$,"A",{href:!0});var SKr=s(vB);mio=r(SKr,"RemBertTokenizer"),SKr.forEach(t),gio=r(V$," or "),FB=n(V$,"A",{href:!0});var RKr=s(FB);hio=r(RKr,"RemBertTokenizerFast"),RKr.forEach(t),pio=r(V$," (RemBERT model)"),V$.forEach(t),_io=i(S),Es=n(S,"LI",{});var X$=s(Es);_ne=n(X$,"STRONG",{});var PKr=s(_ne);uio=r(PKr,"retribert"),PKr.forEach(t),bio=r(X$," \u2014 "),TB=n(X$,"A",{href:!0});var BKr=s(TB);vio=r(BKr,"RetriBertTokenizer"),BKr.forEach(t),Fio=r(X$," or "),MB=n(X$,"A",{href:!0});var IKr=s(MB);Tio=r(IKr,"RetriBertTokenizerFast"),IKr.forEach(t),Mio=r(X$," (RetriBERT model)"),X$.forEach(t),Eio=i(S),Cs=n(S,"LI",{});var z$=s(Cs);une=n(z$,"STRONG",{});var NKr=s(une);Cio=r(NKr,"roberta"),NKr.forEach(t),wio=r(z$," \u2014 "),EB=n(z$,"A",{href:!0});var qKr=s(EB);Aio=r(qKr,"RobertaTokenizer"),qKr.forEach(t),Lio=r(z$," or "),CB=n(z$,"A",{href:!0});var jKr=s(CB);yio=r(jKr,"RobertaTokenizerFast"),jKr.forEach(t),xio=r(z$," (RoBERTa model)"),z$.forEach(t),$io=i(S),ws=n(S,"LI",{});var W$=s(ws);bne=n(W$,"STRONG",{});var DKr=s(bne);kio=r(DKr,"roformer"),DKr.forEach(t),Sio=r(W$," \u2014 "),wB=n(W$,"A",{href:!0});var GKr=s(wB);Rio=r(GKr,"RoFormerTokenizer"),GKr.forEach(t),Pio=r(W$," or "),AB=n(W$,"A",{href:!0});var OKr=s(AB);Bio=r(OKr,"RoFormerTokenizerFast"),OKr.forEach(t),Iio=r(W$," (RoFormer model)"),W$.forEach(t),Nio=i(S),Kg=n(S,"LI",{});var AAe=s(Kg);vne=n(AAe,"STRONG",{});var VKr=s(vne);qio=r(VKr,"speech_to_text"),VKr.forEach(t),jio=r(AAe," \u2014 "),LB=n(AAe,"A",{href:!0});var XKr=s(LB);Dio=r(XKr,"Speech2TextTokenizer"),XKr.forEach(t),Gio=r(AAe," (Speech2Text model)"),AAe.forEach(t),Oio=i(S),Zg=n(S,"LI",{});var LAe=s(Zg);Fne=n(LAe,"STRONG",{});var zKr=s(Fne);Vio=r(zKr,"speech_to_text_2"),zKr.forEach(t),Xio=r(LAe," \u2014 "),yB=n(LAe,"A",{href:!0});var WKr=s(yB);zio=r(WKr,"Speech2Text2Tokenizer"),WKr.forEach(t),Wio=r(LAe," (Speech2Text2 model)"),LAe.forEach(t),Qio=i(S),As=n(S,"LI",{});var Q$=s(As);Tne=n(Q$,"STRONG",{});var QKr=s(Tne);Hio=r(QKr,"splinter"),QKr.forEach(t),Uio=r(Q$," \u2014 "),xB=n(Q$,"A",{href:!0});var HKr=s(xB);Jio=r(HKr,"SplinterTokenizer"),HKr.forEach(t),Yio=r(Q$," or "),$B=n(Q$,"A",{href:!0});var UKr=s($B);Kio=r(UKr,"SplinterTokenizerFast"),UKr.forEach(t),Zio=r(Q$," (Splinter model)"),Q$.forEach(t),edo=i(S),Ls=n(S,"LI",{});var H$=s(Ls);Mne=n(H$,"STRONG",{});var JKr=s(Mne);odo=r(JKr,"squeezebert"),JKr.forEach(t),rdo=r(H$," \u2014 "),kB=n(H$,"A",{href:!0});var YKr=s(kB);tdo=r(YKr,"SqueezeBertTokenizer"),YKr.forEach(t),ado=r(H$," or "),SB=n(H$,"A",{href:!0});var KKr=s(SB);ndo=r(KKr,"SqueezeBertTokenizerFast"),KKr.forEach(t),sdo=r(H$," (SqueezeBERT model)"),H$.forEach(t),ldo=i(S),ys=n(S,"LI",{});var U$=s(ys);Ene=n(U$,"STRONG",{});var ZKr=s(Ene);ido=r(ZKr,"t5"),ZKr.forEach(t),ddo=r(U$," \u2014 "),RB=n(U$,"A",{href:!0});var eZr=s(RB);cdo=r(eZr,"T5Tokenizer"),eZr.forEach(t),fdo=r(U$," or "),PB=n(U$,"A",{href:!0});var oZr=s(PB);mdo=r(oZr,"T5TokenizerFast"),oZr.forEach(t),gdo=r(U$," (T5 model)"),U$.forEach(t),hdo=i(S),eh=n(S,"LI",{});var yAe=s(eh);Cne=n(yAe,"STRONG",{});var rZr=s(Cne);pdo=r(rZr,"tapas"),rZr.forEach(t),_do=r(yAe," \u2014 "),BB=n(yAe,"A",{href:!0});var tZr=s(BB);udo=r(tZr,"TapasTokenizer"),tZr.forEach(t),bdo=r(yAe," (TAPAS model)"),yAe.forEach(t),vdo=i(S),oh=n(S,"LI",{});var xAe=s(oh);wne=n(xAe,"STRONG",{});var aZr=s(wne);Fdo=r(aZr,"tapex"),aZr.forEach(t),Tdo=r(xAe," \u2014 "),IB=n(xAe,"A",{href:!0});var nZr=s(IB);Mdo=r(nZr,"TapexTokenizer"),nZr.forEach(t),Edo=r(xAe," (TAPEX model)"),xAe.forEach(t),Cdo=i(S),rh=n(S,"LI",{});var $Ae=s(rh);Ane=n($Ae,"STRONG",{});var sZr=s(Ane);wdo=r(sZr,"transfo-xl"),sZr.forEach(t),Ado=r($Ae," \u2014 "),NB=n($Ae,"A",{href:!0});var lZr=s(NB);Ldo=r(lZr,"TransfoXLTokenizer"),lZr.forEach(t),ydo=r($Ae," (Transformer-XL model)"),$Ae.forEach(t),xdo=i(S),xs=n(S,"LI",{});var J$=s(xs);Lne=n(J$,"STRONG",{});var iZr=s(Lne);$do=r(iZr,"visual_bert"),iZr.forEach(t),kdo=r(J$," \u2014 "),qB=n(J$,"A",{href:!0});var dZr=s(qB);Sdo=r(dZr,"BertTokenizer"),dZr.forEach(t),Rdo=r(J$," or "),jB=n(J$,"A",{href:!0});var cZr=s(jB);Pdo=r(cZr,"BertTokenizerFast"),cZr.forEach(t),Bdo=r(J$," (VisualBERT model)"),J$.forEach(t),Ido=i(S),th=n(S,"LI",{});var kAe=s(th);yne=n(kAe,"STRONG",{});var fZr=s(yne);Ndo=r(fZr,"wav2vec2"),fZr.forEach(t),qdo=r(kAe," \u2014 "),DB=n(kAe,"A",{href:!0});var mZr=s(DB);jdo=r(mZr,"Wav2Vec2CTCTokenizer"),mZr.forEach(t),Ddo=r(kAe," (Wav2Vec2 model)"),kAe.forEach(t),Gdo=i(S),ah=n(S,"LI",{});var SAe=s(ah);xne=n(SAe,"STRONG",{});var gZr=s(xne);Odo=r(gZr,"wav2vec2-conformer"),gZr.forEach(t),Vdo=r(SAe," \u2014 "),GB=n(SAe,"A",{href:!0});var hZr=s(GB);Xdo=r(hZr,"Wav2Vec2CTCTokenizer"),hZr.forEach(t),zdo=r(SAe," (Wav2Vec2-Conformer model)"),SAe.forEach(t),Wdo=i(S),nh=n(S,"LI",{});var RAe=s(nh);$ne=n(RAe,"STRONG",{});var pZr=s($ne);Qdo=r(pZr,"wav2vec2_phoneme"),pZr.forEach(t),Hdo=r(RAe," \u2014 "),OB=n(RAe,"A",{href:!0});var _Zr=s(OB);Udo=r(_Zr,"Wav2Vec2PhonemeCTCTokenizer"),_Zr.forEach(t),Jdo=r(RAe," (Wav2Vec2Phoneme model)"),RAe.forEach(t),Ydo=i(S),$s=n(S,"LI",{});var Y$=s($s);kne=n(Y$,"STRONG",{});var uZr=s(kne);Kdo=r(uZr,"xglm"),uZr.forEach(t),Zdo=r(Y$," \u2014 "),VB=n(Y$,"A",{href:!0});var bZr=s(VB);eco=r(bZr,"XGLMTokenizer"),bZr.forEach(t),oco=r(Y$," or "),XB=n(Y$,"A",{href:!0});var vZr=s(XB);rco=r(vZr,"XGLMTokenizerFast"),vZr.forEach(t),tco=r(Y$," (XGLM model)"),Y$.forEach(t),aco=i(S),sh=n(S,"LI",{});var PAe=s(sh);Sne=n(PAe,"STRONG",{});var FZr=s(Sne);nco=r(FZr,"xlm"),FZr.forEach(t),sco=r(PAe," \u2014 "),zB=n(PAe,"A",{href:!0});var TZr=s(zB);lco=r(TZr,"XLMTokenizer"),TZr.forEach(t),ico=r(PAe," (XLM model)"),PAe.forEach(t),dco=i(S),lh=n(S,"LI",{});var BAe=s(lh);Rne=n(BAe,"STRONG",{});var MZr=s(Rne);cco=r(MZr,"xlm-prophetnet"),MZr.forEach(t),fco=r(BAe," \u2014 "),WB=n(BAe,"A",{href:!0});var EZr=s(WB);mco=r(EZr,"XLMProphetNetTokenizer"),EZr.forEach(t),gco=r(BAe," (XLM-ProphetNet model)"),BAe.forEach(t),hco=i(S),ks=n(S,"LI",{});var K$=s(ks);Pne=n(K$,"STRONG",{});var CZr=s(Pne);pco=r(CZr,"xlm-roberta"),CZr.forEach(t),_co=r(K$," \u2014 "),QB=n(K$,"A",{href:!0});var wZr=s(QB);uco=r(wZr,"XLMRobertaTokenizer"),wZr.forEach(t),bco=r(K$," or "),HB=n(K$,"A",{href:!0});var AZr=s(HB);vco=r(AZr,"XLMRobertaTokenizerFast"),AZr.forEach(t),Fco=r(K$," (XLM-RoBERTa model)"),K$.forEach(t),Tco=i(S),Ss=n(S,"LI",{});var Z$=s(Ss);Bne=n(Z$,"STRONG",{});var LZr=s(Bne);Mco=r(LZr,"xlm-roberta-xl"),LZr.forEach(t),Eco=r(Z$," \u2014 "),UB=n(Z$,"A",{href:!0});var yZr=s(UB);Cco=r(yZr,"RobertaTokenizer"),yZr.forEach(t),wco=r(Z$," or "),JB=n(Z$,"A",{href:!0});var xZr=s(JB);Aco=r(xZr,"RobertaTokenizerFast"),xZr.forEach(t),Lco=r(Z$," (XLM-RoBERTa-XL model)"),Z$.forEach(t),yco=i(S),Rs=n(S,"LI",{});var ek=s(Rs);Ine=n(ek,"STRONG",{});var $Zr=s(Ine);xco=r($Zr,"xlnet"),$Zr.forEach(t),$co=r(ek," \u2014 "),YB=n(ek,"A",{href:!0});var kZr=s(YB);kco=r(kZr,"XLNetTokenizer"),kZr.forEach(t),Sco=r(ek," or "),KB=n(ek,"A",{href:!0});var SZr=s(KB);Rco=r(SZr,"XLNetTokenizerFast"),SZr.forEach(t),Pco=r(ek," (XLNet model)"),ek.forEach(t),Bco=i(S),Ps=n(S,"LI",{});var ok=s(Ps);Nne=n(ok,"STRONG",{});var RZr=s(Nne);Ico=r(RZr,"yoso"),RZr.forEach(t),Nco=r(ok," \u2014 "),ZB=n(ok,"A",{href:!0});var PZr=s(ZB);qco=r(PZr,"AlbertTokenizer"),PZr.forEach(t),jco=r(ok," or "),eI=n(ok,"A",{href:!0});var BZr=s(eI);Dco=r(BZr,"AlbertTokenizerFast"),BZr.forEach(t),Gco=r(ok," (YOSO model)"),ok.forEach(t),S.forEach(t),Oco=i(Ds),T(ih.$$.fragment,Ds),Ds.forEach(t),Vco=i(js),dh=n(js,"DIV",{class:!0});var sGe=s(dh);T(Z6.$$.fragment,sGe),Xco=i(sGe),qne=n(sGe,"P",{});var IZr=s(qne);zco=r(IZr,"Register a new tokenizer in this mapping."),IZr.forEach(t),sGe.forEach(t),js.forEach(t),lje=i(f),Ci=n(f,"H2",{class:!0});var lGe=s(Ci);ch=n(lGe,"A",{id:!0,class:!0,href:!0});var NZr=s(ch);jne=n(NZr,"SPAN",{});var qZr=s(jne);T(eL.$$.fragment,qZr),qZr.forEach(t),NZr.forEach(t),Wco=i(lGe),Dne=n(lGe,"SPAN",{});var jZr=s(Dne);Qco=r(jZr,"AutoFeatureExtractor"),jZr.forEach(t),lGe.forEach(t),ije=i(f),Ao=n(f,"DIV",{class:!0});var Gs=s(Ao);T(oL.$$.fragment,Gs),Hco=i(Gs),rL=n(Gs,"P",{});var iGe=s(rL);Uco=r(iGe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),oI=n(iGe,"A",{href:!0});var DZr=s(oI);Jco=r(DZr,"AutoFeatureExtractor.from_pretrained()"),DZr.forEach(t),Yco=r(iGe," class method."),iGe.forEach(t),Kco=i(Gs),tL=n(Gs,"P",{});var dGe=s(tL);Zco=r(dGe,"This class cannot be instantiated directly using "),Gne=n(dGe,"CODE",{});var GZr=s(Gne);efo=r(GZr,"__init__()"),GZr.forEach(t),ofo=r(dGe," (throws an error)."),dGe.forEach(t),rfo=i(Gs),He=n(Gs,"DIV",{class:!0});var Zt=s(He);T(aL.$$.fragment,Zt),tfo=i(Zt),One=n(Zt,"P",{});var OZr=s(One);afo=r(OZr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),OZr.forEach(t),nfo=i(Zt),La=n(Zt,"P",{});var Vw=s(La);sfo=r(Vw,"The feature extractor class to instantiate is selected based on the "),Vne=n(Vw,"CODE",{});var VZr=s(Vne);lfo=r(VZr,"model_type"),VZr.forEach(t),ifo=r(Vw,` property of the config object
(either passed as an argument or loaded from `),Xne=n(Vw,"CODE",{});var XZr=s(Xne);dfo=r(XZr,"pretrained_model_name_or_path"),XZr.forEach(t),cfo=r(Vw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),zne=n(Vw,"CODE",{});var zZr=s(zne);ffo=r(zZr,"pretrained_model_name_or_path"),zZr.forEach(t),mfo=r(Vw,":"),Vw.forEach(t),gfo=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);fh=n(Z,"LI",{});var IAe=s(fh);Wne=n(IAe,"STRONG",{});var WZr=s(Wne);hfo=r(WZr,"beit"),WZr.forEach(t),pfo=r(IAe," \u2014 "),rI=n(IAe,"A",{href:!0});var QZr=s(rI);_fo=r(QZr,"BeitFeatureExtractor"),QZr.forEach(t),ufo=r(IAe," (BEiT model)"),IAe.forEach(t),bfo=i(Z),mh=n(Z,"LI",{});var NAe=s(mh);Qne=n(NAe,"STRONG",{});var HZr=s(Qne);vfo=r(HZr,"clip"),HZr.forEach(t),Ffo=r(NAe," \u2014 "),tI=n(NAe,"A",{href:!0});var UZr=s(tI);Tfo=r(UZr,"CLIPFeatureExtractor"),UZr.forEach(t),Mfo=r(NAe," (CLIP model)"),NAe.forEach(t),Efo=i(Z),gh=n(Z,"LI",{});var qAe=s(gh);Hne=n(qAe,"STRONG",{});var JZr=s(Hne);Cfo=r(JZr,"convnext"),JZr.forEach(t),wfo=r(qAe," \u2014 "),aI=n(qAe,"A",{href:!0});var YZr=s(aI);Afo=r(YZr,"ConvNextFeatureExtractor"),YZr.forEach(t),Lfo=r(qAe," (ConvNeXT model)"),qAe.forEach(t),yfo=i(Z),hh=n(Z,"LI",{});var jAe=s(hh);Une=n(jAe,"STRONG",{});var KZr=s(Une);xfo=r(KZr,"cvt"),KZr.forEach(t),$fo=r(jAe," \u2014 "),nI=n(jAe,"A",{href:!0});var ZZr=s(nI);kfo=r(ZZr,"ConvNextFeatureExtractor"),ZZr.forEach(t),Sfo=r(jAe," (CvT model)"),jAe.forEach(t),Rfo=i(Z),ph=n(Z,"LI",{});var DAe=s(ph);Jne=n(DAe,"STRONG",{});var eet=s(Jne);Pfo=r(eet,"data2vec-audio"),eet.forEach(t),Bfo=r(DAe," \u2014 "),sI=n(DAe,"A",{href:!0});var oet=s(sI);Ifo=r(oet,"Wav2Vec2FeatureExtractor"),oet.forEach(t),Nfo=r(DAe," (Data2VecAudio model)"),DAe.forEach(t),qfo=i(Z),_h=n(Z,"LI",{});var GAe=s(_h);Yne=n(GAe,"STRONG",{});var ret=s(Yne);jfo=r(ret,"data2vec-vision"),ret.forEach(t),Dfo=r(GAe," \u2014 "),lI=n(GAe,"A",{href:!0});var tet=s(lI);Gfo=r(tet,"BeitFeatureExtractor"),tet.forEach(t),Ofo=r(GAe," (Data2VecVision model)"),GAe.forEach(t),Vfo=i(Z),uh=n(Z,"LI",{});var OAe=s(uh);Kne=n(OAe,"STRONG",{});var aet=s(Kne);Xfo=r(aet,"deit"),aet.forEach(t),zfo=r(OAe," \u2014 "),iI=n(OAe,"A",{href:!0});var net=s(iI);Wfo=r(net,"DeiTFeatureExtractor"),net.forEach(t),Qfo=r(OAe," (DeiT model)"),OAe.forEach(t),Hfo=i(Z),bh=n(Z,"LI",{});var VAe=s(bh);Zne=n(VAe,"STRONG",{});var set=s(Zne);Ufo=r(set,"detr"),set.forEach(t),Jfo=r(VAe," \u2014 "),dI=n(VAe,"A",{href:!0});var iet=s(dI);Yfo=r(iet,"DetrFeatureExtractor"),iet.forEach(t),Kfo=r(VAe," (DETR model)"),VAe.forEach(t),Zfo=i(Z),vh=n(Z,"LI",{});var XAe=s(vh);ese=n(XAe,"STRONG",{});var det=s(ese);emo=r(det,"dpt"),det.forEach(t),omo=r(XAe," \u2014 "),cI=n(XAe,"A",{href:!0});var cet=s(cI);rmo=r(cet,"DPTFeatureExtractor"),cet.forEach(t),tmo=r(XAe," (DPT model)"),XAe.forEach(t),amo=i(Z),Fh=n(Z,"LI",{});var zAe=s(Fh);ose=n(zAe,"STRONG",{});var fet=s(ose);nmo=r(fet,"flava"),fet.forEach(t),smo=r(zAe," \u2014 "),fI=n(zAe,"A",{href:!0});var met=s(fI);lmo=r(met,"FlavaFeatureExtractor"),met.forEach(t),imo=r(zAe," (FLAVA model)"),zAe.forEach(t),dmo=i(Z),Th=n(Z,"LI",{});var WAe=s(Th);rse=n(WAe,"STRONG",{});var get=s(rse);cmo=r(get,"glpn"),get.forEach(t),fmo=r(WAe," \u2014 "),mI=n(WAe,"A",{href:!0});var het=s(mI);mmo=r(het,"GLPNFeatureExtractor"),het.forEach(t),gmo=r(WAe," (GLPN model)"),WAe.forEach(t),hmo=i(Z),Mh=n(Z,"LI",{});var QAe=s(Mh);tse=n(QAe,"STRONG",{});var pet=s(tse);pmo=r(pet,"hubert"),pet.forEach(t),_mo=r(QAe," \u2014 "),gI=n(QAe,"A",{href:!0});var _et=s(gI);umo=r(_et,"Wav2Vec2FeatureExtractor"),_et.forEach(t),bmo=r(QAe," (Hubert model)"),QAe.forEach(t),vmo=i(Z),Eh=n(Z,"LI",{});var HAe=s(Eh);ase=n(HAe,"STRONG",{});var uet=s(ase);Fmo=r(uet,"imagegpt"),uet.forEach(t),Tmo=r(HAe," \u2014 "),hI=n(HAe,"A",{href:!0});var bet=s(hI);Mmo=r(bet,"ImageGPTFeatureExtractor"),bet.forEach(t),Emo=r(HAe," (ImageGPT model)"),HAe.forEach(t),Cmo=i(Z),Ch=n(Z,"LI",{});var UAe=s(Ch);nse=n(UAe,"STRONG",{});var vet=s(nse);wmo=r(vet,"layoutlmv2"),vet.forEach(t),Amo=r(UAe," \u2014 "),pI=n(UAe,"A",{href:!0});var Fet=s(pI);Lmo=r(Fet,"LayoutLMv2FeatureExtractor"),Fet.forEach(t),ymo=r(UAe," (LayoutLMv2 model)"),UAe.forEach(t),xmo=i(Z),wh=n(Z,"LI",{});var JAe=s(wh);sse=n(JAe,"STRONG",{});var Tet=s(sse);$mo=r(Tet,"layoutlmv3"),Tet.forEach(t),kmo=r(JAe," \u2014 "),_I=n(JAe,"A",{href:!0});var Met=s(_I);Smo=r(Met,"LayoutLMv3FeatureExtractor"),Met.forEach(t),Rmo=r(JAe," (LayoutLMv3 model)"),JAe.forEach(t),Pmo=i(Z),Ah=n(Z,"LI",{});var YAe=s(Ah);lse=n(YAe,"STRONG",{});var Eet=s(lse);Bmo=r(Eet,"levit"),Eet.forEach(t),Imo=r(YAe," \u2014 "),uI=n(YAe,"A",{href:!0});var Cet=s(uI);Nmo=r(Cet,"LevitFeatureExtractor"),Cet.forEach(t),qmo=r(YAe," (LeViT model)"),YAe.forEach(t),jmo=i(Z),Lh=n(Z,"LI",{});var KAe=s(Lh);ise=n(KAe,"STRONG",{});var wet=s(ise);Dmo=r(wet,"maskformer"),wet.forEach(t),Gmo=r(KAe," \u2014 "),bI=n(KAe,"A",{href:!0});var Aet=s(bI);Omo=r(Aet,"MaskFormerFeatureExtractor"),Aet.forEach(t),Vmo=r(KAe," (MaskFormer model)"),KAe.forEach(t),Xmo=i(Z),yh=n(Z,"LI",{});var ZAe=s(yh);dse=n(ZAe,"STRONG",{});var Let=s(dse);zmo=r(Let,"perceiver"),Let.forEach(t),Wmo=r(ZAe," \u2014 "),vI=n(ZAe,"A",{href:!0});var yet=s(vI);Qmo=r(yet,"PerceiverFeatureExtractor"),yet.forEach(t),Hmo=r(ZAe," (Perceiver model)"),ZAe.forEach(t),Umo=i(Z),xh=n(Z,"LI",{});var e6e=s(xh);cse=n(e6e,"STRONG",{});var xet=s(cse);Jmo=r(xet,"poolformer"),xet.forEach(t),Ymo=r(e6e," \u2014 "),FI=n(e6e,"A",{href:!0});var $et=s(FI);Kmo=r($et,"PoolFormerFeatureExtractor"),$et.forEach(t),Zmo=r(e6e," (PoolFormer model)"),e6e.forEach(t),ego=i(Z),$h=n(Z,"LI",{});var o6e=s($h);fse=n(o6e,"STRONG",{});var ket=s(fse);ogo=r(ket,"regnet"),ket.forEach(t),rgo=r(o6e," \u2014 "),TI=n(o6e,"A",{href:!0});var Set=s(TI);tgo=r(Set,"ConvNextFeatureExtractor"),Set.forEach(t),ago=r(o6e," (RegNet model)"),o6e.forEach(t),ngo=i(Z),kh=n(Z,"LI",{});var r6e=s(kh);mse=n(r6e,"STRONG",{});var Ret=s(mse);sgo=r(Ret,"resnet"),Ret.forEach(t),lgo=r(r6e," \u2014 "),MI=n(r6e,"A",{href:!0});var Pet=s(MI);igo=r(Pet,"ConvNextFeatureExtractor"),Pet.forEach(t),dgo=r(r6e," (ResNet model)"),r6e.forEach(t),cgo=i(Z),Sh=n(Z,"LI",{});var t6e=s(Sh);gse=n(t6e,"STRONG",{});var Bet=s(gse);fgo=r(Bet,"segformer"),Bet.forEach(t),mgo=r(t6e," \u2014 "),EI=n(t6e,"A",{href:!0});var Iet=s(EI);ggo=r(Iet,"SegformerFeatureExtractor"),Iet.forEach(t),hgo=r(t6e," (SegFormer model)"),t6e.forEach(t),pgo=i(Z),Rh=n(Z,"LI",{});var a6e=s(Rh);hse=n(a6e,"STRONG",{});var Net=s(hse);_go=r(Net,"speech_to_text"),Net.forEach(t),ugo=r(a6e," \u2014 "),CI=n(a6e,"A",{href:!0});var qet=s(CI);bgo=r(qet,"Speech2TextFeatureExtractor"),qet.forEach(t),vgo=r(a6e," (Speech2Text model)"),a6e.forEach(t),Fgo=i(Z),Ph=n(Z,"LI",{});var n6e=s(Ph);pse=n(n6e,"STRONG",{});var jet=s(pse);Tgo=r(jet,"swin"),jet.forEach(t),Mgo=r(n6e," \u2014 "),wI=n(n6e,"A",{href:!0});var Det=s(wI);Ego=r(Det,"ViTFeatureExtractor"),Det.forEach(t),Cgo=r(n6e," (Swin Transformer model)"),n6e.forEach(t),wgo=i(Z),Bh=n(Z,"LI",{});var s6e=s(Bh);_se=n(s6e,"STRONG",{});var Get=s(_se);Ago=r(Get,"van"),Get.forEach(t),Lgo=r(s6e," \u2014 "),AI=n(s6e,"A",{href:!0});var Oet=s(AI);ygo=r(Oet,"ConvNextFeatureExtractor"),Oet.forEach(t),xgo=r(s6e," (VAN model)"),s6e.forEach(t),$go=i(Z),Ih=n(Z,"LI",{});var l6e=s(Ih);use=n(l6e,"STRONG",{});var Vet=s(use);kgo=r(Vet,"vit"),Vet.forEach(t),Sgo=r(l6e," \u2014 "),LI=n(l6e,"A",{href:!0});var Xet=s(LI);Rgo=r(Xet,"ViTFeatureExtractor"),Xet.forEach(t),Pgo=r(l6e," (ViT model)"),l6e.forEach(t),Bgo=i(Z),Nh=n(Z,"LI",{});var i6e=s(Nh);bse=n(i6e,"STRONG",{});var zet=s(bse);Igo=r(zet,"vit_mae"),zet.forEach(t),Ngo=r(i6e," \u2014 "),yI=n(i6e,"A",{href:!0});var Wet=s(yI);qgo=r(Wet,"ViTFeatureExtractor"),Wet.forEach(t),jgo=r(i6e," (ViTMAE model)"),i6e.forEach(t),Dgo=i(Z),qh=n(Z,"LI",{});var d6e=s(qh);vse=n(d6e,"STRONG",{});var Qet=s(vse);Ggo=r(Qet,"wav2vec2"),Qet.forEach(t),Ogo=r(d6e," \u2014 "),xI=n(d6e,"A",{href:!0});var Het=s(xI);Vgo=r(Het,"Wav2Vec2FeatureExtractor"),Het.forEach(t),Xgo=r(d6e," (Wav2Vec2 model)"),d6e.forEach(t),zgo=i(Z),jh=n(Z,"LI",{});var c6e=s(jh);Fse=n(c6e,"STRONG",{});var Uet=s(Fse);Wgo=r(Uet,"wav2vec2-conformer"),Uet.forEach(t),Qgo=r(c6e," \u2014 "),$I=n(c6e,"A",{href:!0});var Jet=s($I);Hgo=r(Jet,"Wav2Vec2FeatureExtractor"),Jet.forEach(t),Ugo=r(c6e," (Wav2Vec2-Conformer model)"),c6e.forEach(t),Jgo=i(Z),Dh=n(Z,"LI",{});var f6e=s(Dh);Tse=n(f6e,"STRONG",{});var Yet=s(Tse);Ygo=r(Yet,"yolos"),Yet.forEach(t),Kgo=r(f6e," \u2014 "),kI=n(f6e,"A",{href:!0});var Ket=s(kI);Zgo=r(Ket,"YolosFeatureExtractor"),Ket.forEach(t),eho=r(f6e," (YOLOS model)"),f6e.forEach(t),Z.forEach(t),oho=i(Zt),T(Gh.$$.fragment,Zt),rho=i(Zt),T(Oh.$$.fragment,Zt),Zt.forEach(t),tho=i(Gs),Vh=n(Gs,"DIV",{class:!0});var cGe=s(Vh);T(nL.$$.fragment,cGe),aho=i(cGe),Mse=n(cGe,"P",{});var Zet=s(Mse);nho=r(Zet,"Register a new feature extractor for this class."),Zet.forEach(t),cGe.forEach(t),Gs.forEach(t),dje=i(f),wi=n(f,"H2",{class:!0});var fGe=s(wi);Xh=n(fGe,"A",{id:!0,class:!0,href:!0});var eot=s(Xh);Ese=n(eot,"SPAN",{});var oot=s(Ese);T(sL.$$.fragment,oot),oot.forEach(t),eot.forEach(t),sho=i(fGe),Cse=n(fGe,"SPAN",{});var rot=s(Cse);lho=r(rot,"AutoProcessor"),rot.forEach(t),fGe.forEach(t),cje=i(f),Lo=n(f,"DIV",{class:!0});var Os=s(Lo);T(lL.$$.fragment,Os),iho=i(Os),iL=n(Os,"P",{});var mGe=s(iL);dho=r(mGe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),SI=n(mGe,"A",{href:!0});var tot=s(SI);cho=r(tot,"AutoProcessor.from_pretrained()"),tot.forEach(t),fho=r(mGe," class method."),mGe.forEach(t),mho=i(Os),dL=n(Os,"P",{});var gGe=s(dL);gho=r(gGe,"This class cannot be instantiated directly using "),wse=n(gGe,"CODE",{});var aot=s(wse);hho=r(aot,"__init__()"),aot.forEach(t),pho=r(gGe," (throws an error)."),gGe.forEach(t),_ho=i(Os),Ue=n(Os,"DIV",{class:!0});var ea=s(Ue);T(cL.$$.fragment,ea),uho=i(ea),Ase=n(ea,"P",{});var not=s(Ase);bho=r(not,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),not.forEach(t),vho=i(ea),Ai=n(ea,"P",{});var XZ=s(Ai);Fho=r(XZ,"The processor class to instantiate is selected based on the "),Lse=n(XZ,"CODE",{});var sot=s(Lse);Tho=r(sot,"model_type"),sot.forEach(t),Mho=r(XZ,` property of the config object (either
passed as an argument or loaded from `),yse=n(XZ,"CODE",{});var lot=s(yse);Eho=r(lot,"pretrained_model_name_or_path"),lot.forEach(t),Cho=r(XZ," if possible):"),XZ.forEach(t),who=i(ea),he=n(ea,"UL",{});var ue=s(he);zh=n(ue,"LI",{});var m6e=s(zh);xse=n(m6e,"STRONG",{});var iot=s(xse);Aho=r(iot,"clip"),iot.forEach(t),Lho=r(m6e," \u2014 "),RI=n(m6e,"A",{href:!0});var dot=s(RI);yho=r(dot,"CLIPProcessor"),dot.forEach(t),xho=r(m6e," (CLIP model)"),m6e.forEach(t),$ho=i(ue),Wh=n(ue,"LI",{});var g6e=s(Wh);$se=n(g6e,"STRONG",{});var cot=s($se);kho=r(cot,"flava"),cot.forEach(t),Sho=r(g6e," \u2014 "),kse=n(g6e,"CODE",{});var fot=s(kse);Rho=r(fot,"FLAVAProcessor"),fot.forEach(t),Pho=r(g6e," (FLAVA model)"),g6e.forEach(t),Bho=i(ue),Qh=n(ue,"LI",{});var h6e=s(Qh);Sse=n(h6e,"STRONG",{});var mot=s(Sse);Iho=r(mot,"layoutlmv2"),mot.forEach(t),Nho=r(h6e," \u2014 "),PI=n(h6e,"A",{href:!0});var got=s(PI);qho=r(got,"LayoutLMv2Processor"),got.forEach(t),jho=r(h6e," (LayoutLMv2 model)"),h6e.forEach(t),Dho=i(ue),Hh=n(ue,"LI",{});var p6e=s(Hh);Rse=n(p6e,"STRONG",{});var hot=s(Rse);Gho=r(hot,"layoutlmv3"),hot.forEach(t),Oho=r(p6e," \u2014 "),BI=n(p6e,"A",{href:!0});var pot=s(BI);Vho=r(pot,"LayoutLMv3Processor"),pot.forEach(t),Xho=r(p6e," (LayoutLMv3 model)"),p6e.forEach(t),zho=i(ue),Uh=n(ue,"LI",{});var _6e=s(Uh);Pse=n(_6e,"STRONG",{});var _ot=s(Pse);Who=r(_ot,"layoutxlm"),_ot.forEach(t),Qho=r(_6e," \u2014 "),II=n(_6e,"A",{href:!0});var uot=s(II);Hho=r(uot,"LayoutXLMProcessor"),uot.forEach(t),Uho=r(_6e," (LayoutXLM model)"),_6e.forEach(t),Jho=i(ue),Jh=n(ue,"LI",{});var u6e=s(Jh);Bse=n(u6e,"STRONG",{});var bot=s(Bse);Yho=r(bot,"sew"),bot.forEach(t),Kho=r(u6e," \u2014 "),NI=n(u6e,"A",{href:!0});var vot=s(NI);Zho=r(vot,"Wav2Vec2Processor"),vot.forEach(t),epo=r(u6e," (SEW model)"),u6e.forEach(t),opo=i(ue),Yh=n(ue,"LI",{});var b6e=s(Yh);Ise=n(b6e,"STRONG",{});var Fot=s(Ise);rpo=r(Fot,"sew-d"),Fot.forEach(t),tpo=r(b6e," \u2014 "),qI=n(b6e,"A",{href:!0});var Tot=s(qI);apo=r(Tot,"Wav2Vec2Processor"),Tot.forEach(t),npo=r(b6e," (SEW-D model)"),b6e.forEach(t),spo=i(ue),Kh=n(ue,"LI",{});var v6e=s(Kh);Nse=n(v6e,"STRONG",{});var Mot=s(Nse);lpo=r(Mot,"speech_to_text"),Mot.forEach(t),ipo=r(v6e," \u2014 "),jI=n(v6e,"A",{href:!0});var Eot=s(jI);dpo=r(Eot,"Speech2TextProcessor"),Eot.forEach(t),cpo=r(v6e," (Speech2Text model)"),v6e.forEach(t),fpo=i(ue),Zh=n(ue,"LI",{});var F6e=s(Zh);qse=n(F6e,"STRONG",{});var Cot=s(qse);mpo=r(Cot,"speech_to_text_2"),Cot.forEach(t),gpo=r(F6e," \u2014 "),DI=n(F6e,"A",{href:!0});var wot=s(DI);hpo=r(wot,"Speech2Text2Processor"),wot.forEach(t),ppo=r(F6e," (Speech2Text2 model)"),F6e.forEach(t),_po=i(ue),ep=n(ue,"LI",{});var T6e=s(ep);jse=n(T6e,"STRONG",{});var Aot=s(jse);upo=r(Aot,"trocr"),Aot.forEach(t),bpo=r(T6e," \u2014 "),GI=n(T6e,"A",{href:!0});var Lot=s(GI);vpo=r(Lot,"TrOCRProcessor"),Lot.forEach(t),Fpo=r(T6e," (TrOCR model)"),T6e.forEach(t),Tpo=i(ue),op=n(ue,"LI",{});var M6e=s(op);Dse=n(M6e,"STRONG",{});var yot=s(Dse);Mpo=r(yot,"unispeech"),yot.forEach(t),Epo=r(M6e," \u2014 "),OI=n(M6e,"A",{href:!0});var xot=s(OI);Cpo=r(xot,"Wav2Vec2Processor"),xot.forEach(t),wpo=r(M6e," (UniSpeech model)"),M6e.forEach(t),Apo=i(ue),rp=n(ue,"LI",{});var E6e=s(rp);Gse=n(E6e,"STRONG",{});var $ot=s(Gse);Lpo=r($ot,"unispeech-sat"),$ot.forEach(t),ypo=r(E6e," \u2014 "),VI=n(E6e,"A",{href:!0});var kot=s(VI);xpo=r(kot,"Wav2Vec2Processor"),kot.forEach(t),$po=r(E6e," (UniSpeechSat model)"),E6e.forEach(t),kpo=i(ue),tp=n(ue,"LI",{});var C6e=s(tp);Ose=n(C6e,"STRONG",{});var Sot=s(Ose);Spo=r(Sot,"vilt"),Sot.forEach(t),Rpo=r(C6e," \u2014 "),XI=n(C6e,"A",{href:!0});var Rot=s(XI);Ppo=r(Rot,"ViltProcessor"),Rot.forEach(t),Bpo=r(C6e," (ViLT model)"),C6e.forEach(t),Ipo=i(ue),ap=n(ue,"LI",{});var w6e=s(ap);Vse=n(w6e,"STRONG",{});var Pot=s(Vse);Npo=r(Pot,"vision-text-dual-encoder"),Pot.forEach(t),qpo=r(w6e," \u2014 "),zI=n(w6e,"A",{href:!0});var Bot=s(zI);jpo=r(Bot,"VisionTextDualEncoderProcessor"),Bot.forEach(t),Dpo=r(w6e," (VisionTextDualEncoder model)"),w6e.forEach(t),Gpo=i(ue),np=n(ue,"LI",{});var A6e=s(np);Xse=n(A6e,"STRONG",{});var Iot=s(Xse);Opo=r(Iot,"wav2vec2"),Iot.forEach(t),Vpo=r(A6e," \u2014 "),WI=n(A6e,"A",{href:!0});var Not=s(WI);Xpo=r(Not,"Wav2Vec2Processor"),Not.forEach(t),zpo=r(A6e," (Wav2Vec2 model)"),A6e.forEach(t),Wpo=i(ue),sp=n(ue,"LI",{});var L6e=s(sp);zse=n(L6e,"STRONG",{});var qot=s(zse);Qpo=r(qot,"wav2vec2-conformer"),qot.forEach(t),Hpo=r(L6e," \u2014 "),QI=n(L6e,"A",{href:!0});var jot=s(QI);Upo=r(jot,"Wav2Vec2Processor"),jot.forEach(t),Jpo=r(L6e," (Wav2Vec2-Conformer model)"),L6e.forEach(t),Ypo=i(ue),lp=n(ue,"LI",{});var y6e=s(lp);Wse=n(y6e,"STRONG",{});var Dot=s(Wse);Kpo=r(Dot,"wavlm"),Dot.forEach(t),Zpo=r(y6e," \u2014 "),HI=n(y6e,"A",{href:!0});var Got=s(HI);e_o=r(Got,"Wav2Vec2Processor"),Got.forEach(t),o_o=r(y6e," (WavLM model)"),y6e.forEach(t),ue.forEach(t),r_o=i(ea),T(ip.$$.fragment,ea),t_o=i(ea),T(dp.$$.fragment,ea),ea.forEach(t),a_o=i(Os),cp=n(Os,"DIV",{class:!0});var hGe=s(cp);T(fL.$$.fragment,hGe),n_o=i(hGe),Qse=n(hGe,"P",{});var Oot=s(Qse);s_o=r(Oot,"Register a new processor for this class."),Oot.forEach(t),hGe.forEach(t),Os.forEach(t),fje=i(f),Li=n(f,"H2",{class:!0});var pGe=s(Li);fp=n(pGe,"A",{id:!0,class:!0,href:!0});var Vot=s(fp);Hse=n(Vot,"SPAN",{});var Xot=s(Hse);T(mL.$$.fragment,Xot),Xot.forEach(t),Vot.forEach(t),l_o=i(pGe),Use=n(pGe,"SPAN",{});var zot=s(Use);i_o=r(zot,"AutoModel"),zot.forEach(t),pGe.forEach(t),mje=i(f),yo=n(f,"DIV",{class:!0});var Vs=s(yo);T(gL.$$.fragment,Vs),d_o=i(Vs),yi=n(Vs,"P",{});var zZ=s(yi);c_o=r(zZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UI=n(zZ,"A",{href:!0});var Wot=s(UI);f_o=r(Wot,"from_pretrained()"),Wot.forEach(t),m_o=r(zZ," class method or the "),JI=n(zZ,"A",{href:!0});var Qot=s(JI);g_o=r(Qot,"from_config()"),Qot.forEach(t),h_o=r(zZ,` class
method.`),zZ.forEach(t),p_o=i(Vs),hL=n(Vs,"P",{});var _Ge=s(hL);__o=r(_Ge,"This class cannot be instantiated directly using "),Jse=n(_Ge,"CODE",{});var Hot=s(Jse);u_o=r(Hot,"__init__()"),Hot.forEach(t),b_o=r(_Ge," (throws an error)."),_Ge.forEach(t),v_o=i(Vs),tt=n(Vs,"DIV",{class:!0});var Xw=s(tt);T(pL.$$.fragment,Xw),F_o=i(Xw),Yse=n(Xw,"P",{});var Uot=s(Yse);T_o=r(Uot,"Instantiates one of the base model classes of the library from a configuration."),Uot.forEach(t),M_o=i(Xw),xi=n(Xw,"P",{});var WZ=s(xi);E_o=r(WZ,`Note:
Loading a model from its configuration file does `),Kse=n(WZ,"STRONG",{});var Jot=s(Kse);C_o=r(Jot,"not"),Jot.forEach(t),w_o=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YI=n(WZ,"A",{href:!0});var Yot=s(YI);A_o=r(Yot,"from_pretrained()"),Yot.forEach(t),L_o=r(WZ," to load the model weights."),WZ.forEach(t),y_o=i(Xw),T(mp.$$.fragment,Xw),Xw.forEach(t),x_o=i(Vs),Je=n(Vs,"DIV",{class:!0});var oa=s(Je);T(_L.$$.fragment,oa),$_o=i(oa),Zse=n(oa,"P",{});var Kot=s(Zse);k_o=r(Kot,"Instantiate one of the base model classes of the library from a pretrained model."),Kot.forEach(t),S_o=i(oa),ya=n(oa,"P",{});var zw=s(ya);R_o=r(zw,"The model class to instantiate is selected based on the "),ele=n(zw,"CODE",{});var Zot=s(ele);P_o=r(Zot,"model_type"),Zot.forEach(t),B_o=r(zw,` property of the config object (either
passed as an argument or loaded from `),ole=n(zw,"CODE",{});var ert=s(ole);I_o=r(ert,"pretrained_model_name_or_path"),ert.forEach(t),N_o=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rle=n(zw,"CODE",{});var ort=s(rle);q_o=r(ort,"pretrained_model_name_or_path"),ort.forEach(t),j_o=r(zw,":"),zw.forEach(t),D_o=i(oa),x=n(oa,"UL",{});var $=s(x);gp=n($,"LI",{});var x6e=s(gp);tle=n(x6e,"STRONG",{});var rrt=s(tle);G_o=r(rrt,"albert"),rrt.forEach(t),O_o=r(x6e," \u2014 "),KI=n(x6e,"A",{href:!0});var trt=s(KI);V_o=r(trt,"AlbertModel"),trt.forEach(t),X_o=r(x6e," (ALBERT model)"),x6e.forEach(t),z_o=i($),hp=n($,"LI",{});var $6e=s(hp);ale=n($6e,"STRONG",{});var art=s(ale);W_o=r(art,"bart"),art.forEach(t),Q_o=r($6e," \u2014 "),ZI=n($6e,"A",{href:!0});var nrt=s(ZI);H_o=r(nrt,"BartModel"),nrt.forEach(t),U_o=r($6e," (BART model)"),$6e.forEach(t),J_o=i($),pp=n($,"LI",{});var k6e=s(pp);nle=n(k6e,"STRONG",{});var srt=s(nle);Y_o=r(srt,"beit"),srt.forEach(t),K_o=r(k6e," \u2014 "),eN=n(k6e,"A",{href:!0});var lrt=s(eN);Z_o=r(lrt,"BeitModel"),lrt.forEach(t),euo=r(k6e," (BEiT model)"),k6e.forEach(t),ouo=i($),_p=n($,"LI",{});var S6e=s(_p);sle=n(S6e,"STRONG",{});var irt=s(sle);ruo=r(irt,"bert"),irt.forEach(t),tuo=r(S6e," \u2014 "),oN=n(S6e,"A",{href:!0});var drt=s(oN);auo=r(drt,"BertModel"),drt.forEach(t),nuo=r(S6e," (BERT model)"),S6e.forEach(t),suo=i($),up=n($,"LI",{});var R6e=s(up);lle=n(R6e,"STRONG",{});var crt=s(lle);luo=r(crt,"bert-generation"),crt.forEach(t),iuo=r(R6e," \u2014 "),rN=n(R6e,"A",{href:!0});var frt=s(rN);duo=r(frt,"BertGenerationEncoder"),frt.forEach(t),cuo=r(R6e," (Bert Generation model)"),R6e.forEach(t),fuo=i($),bp=n($,"LI",{});var P6e=s(bp);ile=n(P6e,"STRONG",{});var mrt=s(ile);muo=r(mrt,"big_bird"),mrt.forEach(t),guo=r(P6e," \u2014 "),tN=n(P6e,"A",{href:!0});var grt=s(tN);huo=r(grt,"BigBirdModel"),grt.forEach(t),puo=r(P6e," (BigBird model)"),P6e.forEach(t),_uo=i($),vp=n($,"LI",{});var B6e=s(vp);dle=n(B6e,"STRONG",{});var hrt=s(dle);uuo=r(hrt,"bigbird_pegasus"),hrt.forEach(t),buo=r(B6e," \u2014 "),aN=n(B6e,"A",{href:!0});var prt=s(aN);vuo=r(prt,"BigBirdPegasusModel"),prt.forEach(t),Fuo=r(B6e," (BigBird-Pegasus model)"),B6e.forEach(t),Tuo=i($),Fp=n($,"LI",{});var I6e=s(Fp);cle=n(I6e,"STRONG",{});var _rt=s(cle);Muo=r(_rt,"blenderbot"),_rt.forEach(t),Euo=r(I6e," \u2014 "),nN=n(I6e,"A",{href:!0});var urt=s(nN);Cuo=r(urt,"BlenderbotModel"),urt.forEach(t),wuo=r(I6e," (Blenderbot model)"),I6e.forEach(t),Auo=i($),Tp=n($,"LI",{});var N6e=s(Tp);fle=n(N6e,"STRONG",{});var brt=s(fle);Luo=r(brt,"blenderbot-small"),brt.forEach(t),yuo=r(N6e," \u2014 "),sN=n(N6e,"A",{href:!0});var vrt=s(sN);xuo=r(vrt,"BlenderbotSmallModel"),vrt.forEach(t),$uo=r(N6e," (BlenderbotSmall model)"),N6e.forEach(t),kuo=i($),Mp=n($,"LI",{});var q6e=s(Mp);mle=n(q6e,"STRONG",{});var Frt=s(mle);Suo=r(Frt,"camembert"),Frt.forEach(t),Ruo=r(q6e," \u2014 "),lN=n(q6e,"A",{href:!0});var Trt=s(lN);Puo=r(Trt,"CamembertModel"),Trt.forEach(t),Buo=r(q6e," (CamemBERT model)"),q6e.forEach(t),Iuo=i($),Ep=n($,"LI",{});var j6e=s(Ep);gle=n(j6e,"STRONG",{});var Mrt=s(gle);Nuo=r(Mrt,"canine"),Mrt.forEach(t),quo=r(j6e," \u2014 "),iN=n(j6e,"A",{href:!0});var Ert=s(iN);juo=r(Ert,"CanineModel"),Ert.forEach(t),Duo=r(j6e," (CANINE model)"),j6e.forEach(t),Guo=i($),Cp=n($,"LI",{});var D6e=s(Cp);hle=n(D6e,"STRONG",{});var Crt=s(hle);Ouo=r(Crt,"clip"),Crt.forEach(t),Vuo=r(D6e," \u2014 "),dN=n(D6e,"A",{href:!0});var wrt=s(dN);Xuo=r(wrt,"CLIPModel"),wrt.forEach(t),zuo=r(D6e," (CLIP model)"),D6e.forEach(t),Wuo=i($),wp=n($,"LI",{});var G6e=s(wp);ple=n(G6e,"STRONG",{});var Art=s(ple);Quo=r(Art,"codegen"),Art.forEach(t),Huo=r(G6e," \u2014 "),cN=n(G6e,"A",{href:!0});var Lrt=s(cN);Uuo=r(Lrt,"CodeGenModel"),Lrt.forEach(t),Juo=r(G6e," (CodeGen model)"),G6e.forEach(t),Yuo=i($),Ap=n($,"LI",{});var O6e=s(Ap);_le=n(O6e,"STRONG",{});var yrt=s(_le);Kuo=r(yrt,"convbert"),yrt.forEach(t),Zuo=r(O6e," \u2014 "),fN=n(O6e,"A",{href:!0});var xrt=s(fN);e4o=r(xrt,"ConvBertModel"),xrt.forEach(t),o4o=r(O6e," (ConvBERT model)"),O6e.forEach(t),r4o=i($),Lp=n($,"LI",{});var V6e=s(Lp);ule=n(V6e,"STRONG",{});var $rt=s(ule);t4o=r($rt,"convnext"),$rt.forEach(t),a4o=r(V6e," \u2014 "),mN=n(V6e,"A",{href:!0});var krt=s(mN);n4o=r(krt,"ConvNextModel"),krt.forEach(t),s4o=r(V6e," (ConvNeXT model)"),V6e.forEach(t),l4o=i($),yp=n($,"LI",{});var X6e=s(yp);ble=n(X6e,"STRONG",{});var Srt=s(ble);i4o=r(Srt,"ctrl"),Srt.forEach(t),d4o=r(X6e," \u2014 "),gN=n(X6e,"A",{href:!0});var Rrt=s(gN);c4o=r(Rrt,"CTRLModel"),Rrt.forEach(t),f4o=r(X6e," (CTRL model)"),X6e.forEach(t),m4o=i($),xp=n($,"LI",{});var z6e=s(xp);vle=n(z6e,"STRONG",{});var Prt=s(vle);g4o=r(Prt,"cvt"),Prt.forEach(t),h4o=r(z6e," \u2014 "),hN=n(z6e,"A",{href:!0});var Brt=s(hN);p4o=r(Brt,"CvtModel"),Brt.forEach(t),_4o=r(z6e," (CvT model)"),z6e.forEach(t),u4o=i($),$p=n($,"LI",{});var W6e=s($p);Fle=n(W6e,"STRONG",{});var Irt=s(Fle);b4o=r(Irt,"data2vec-audio"),Irt.forEach(t),v4o=r(W6e," \u2014 "),pN=n(W6e,"A",{href:!0});var Nrt=s(pN);F4o=r(Nrt,"Data2VecAudioModel"),Nrt.forEach(t),T4o=r(W6e," (Data2VecAudio model)"),W6e.forEach(t),M4o=i($),kp=n($,"LI",{});var Q6e=s(kp);Tle=n(Q6e,"STRONG",{});var qrt=s(Tle);E4o=r(qrt,"data2vec-text"),qrt.forEach(t),C4o=r(Q6e," \u2014 "),_N=n(Q6e,"A",{href:!0});var jrt=s(_N);w4o=r(jrt,"Data2VecTextModel"),jrt.forEach(t),A4o=r(Q6e," (Data2VecText model)"),Q6e.forEach(t),L4o=i($),Sp=n($,"LI",{});var H6e=s(Sp);Mle=n(H6e,"STRONG",{});var Drt=s(Mle);y4o=r(Drt,"data2vec-vision"),Drt.forEach(t),x4o=r(H6e," \u2014 "),uN=n(H6e,"A",{href:!0});var Grt=s(uN);$4o=r(Grt,"Data2VecVisionModel"),Grt.forEach(t),k4o=r(H6e," (Data2VecVision model)"),H6e.forEach(t),S4o=i($),Rp=n($,"LI",{});var U6e=s(Rp);Ele=n(U6e,"STRONG",{});var Ort=s(Ele);R4o=r(Ort,"deberta"),Ort.forEach(t),P4o=r(U6e," \u2014 "),bN=n(U6e,"A",{href:!0});var Vrt=s(bN);B4o=r(Vrt,"DebertaModel"),Vrt.forEach(t),I4o=r(U6e," (DeBERTa model)"),U6e.forEach(t),N4o=i($),Pp=n($,"LI",{});var J6e=s(Pp);Cle=n(J6e,"STRONG",{});var Xrt=s(Cle);q4o=r(Xrt,"deberta-v2"),Xrt.forEach(t),j4o=r(J6e," \u2014 "),vN=n(J6e,"A",{href:!0});var zrt=s(vN);D4o=r(zrt,"DebertaV2Model"),zrt.forEach(t),G4o=r(J6e," (DeBERTa-v2 model)"),J6e.forEach(t),O4o=i($),Bp=n($,"LI",{});var Y6e=s(Bp);wle=n(Y6e,"STRONG",{});var Wrt=s(wle);V4o=r(Wrt,"decision_transformer"),Wrt.forEach(t),X4o=r(Y6e," \u2014 "),FN=n(Y6e,"A",{href:!0});var Qrt=s(FN);z4o=r(Qrt,"DecisionTransformerModel"),Qrt.forEach(t),W4o=r(Y6e," (Decision Transformer model)"),Y6e.forEach(t),Q4o=i($),Ip=n($,"LI",{});var K6e=s(Ip);Ale=n(K6e,"STRONG",{});var Hrt=s(Ale);H4o=r(Hrt,"deit"),Hrt.forEach(t),U4o=r(K6e," \u2014 "),TN=n(K6e,"A",{href:!0});var Urt=s(TN);J4o=r(Urt,"DeiTModel"),Urt.forEach(t),Y4o=r(K6e," (DeiT model)"),K6e.forEach(t),K4o=i($),Np=n($,"LI",{});var Z6e=s(Np);Lle=n(Z6e,"STRONG",{});var Jrt=s(Lle);Z4o=r(Jrt,"detr"),Jrt.forEach(t),e1o=r(Z6e," \u2014 "),MN=n(Z6e,"A",{href:!0});var Yrt=s(MN);o1o=r(Yrt,"DetrModel"),Yrt.forEach(t),r1o=r(Z6e," (DETR model)"),Z6e.forEach(t),t1o=i($),qp=n($,"LI",{});var eLe=s(qp);yle=n(eLe,"STRONG",{});var Krt=s(yle);a1o=r(Krt,"distilbert"),Krt.forEach(t),n1o=r(eLe," \u2014 "),EN=n(eLe,"A",{href:!0});var Zrt=s(EN);s1o=r(Zrt,"DistilBertModel"),Zrt.forEach(t),l1o=r(eLe," (DistilBERT model)"),eLe.forEach(t),i1o=i($),jp=n($,"LI",{});var oLe=s(jp);xle=n(oLe,"STRONG",{});var ett=s(xle);d1o=r(ett,"dpr"),ett.forEach(t),c1o=r(oLe," \u2014 "),CN=n(oLe,"A",{href:!0});var ott=s(CN);f1o=r(ott,"DPRQuestionEncoder"),ott.forEach(t),m1o=r(oLe," (DPR model)"),oLe.forEach(t),g1o=i($),Dp=n($,"LI",{});var rLe=s(Dp);$le=n(rLe,"STRONG",{});var rtt=s($le);h1o=r(rtt,"dpt"),rtt.forEach(t),p1o=r(rLe," \u2014 "),wN=n(rLe,"A",{href:!0});var ttt=s(wN);_1o=r(ttt,"DPTModel"),ttt.forEach(t),u1o=r(rLe," (DPT model)"),rLe.forEach(t),b1o=i($),Gp=n($,"LI",{});var tLe=s(Gp);kle=n(tLe,"STRONG",{});var att=s(kle);v1o=r(att,"electra"),att.forEach(t),F1o=r(tLe," \u2014 "),AN=n(tLe,"A",{href:!0});var ntt=s(AN);T1o=r(ntt,"ElectraModel"),ntt.forEach(t),M1o=r(tLe," (ELECTRA model)"),tLe.forEach(t),E1o=i($),Op=n($,"LI",{});var aLe=s(Op);Sle=n(aLe,"STRONG",{});var stt=s(Sle);C1o=r(stt,"flaubert"),stt.forEach(t),w1o=r(aLe," \u2014 "),LN=n(aLe,"A",{href:!0});var ltt=s(LN);A1o=r(ltt,"FlaubertModel"),ltt.forEach(t),L1o=r(aLe," (FlauBERT model)"),aLe.forEach(t),y1o=i($),Vp=n($,"LI",{});var nLe=s(Vp);Rle=n(nLe,"STRONG",{});var itt=s(Rle);x1o=r(itt,"flava"),itt.forEach(t),$1o=r(nLe," \u2014 "),yN=n(nLe,"A",{href:!0});var dtt=s(yN);k1o=r(dtt,"FlavaModel"),dtt.forEach(t),S1o=r(nLe," (FLAVA model)"),nLe.forEach(t),R1o=i($),Xp=n($,"LI",{});var sLe=s(Xp);Ple=n(sLe,"STRONG",{});var ctt=s(Ple);P1o=r(ctt,"fnet"),ctt.forEach(t),B1o=r(sLe," \u2014 "),xN=n(sLe,"A",{href:!0});var ftt=s(xN);I1o=r(ftt,"FNetModel"),ftt.forEach(t),N1o=r(sLe," (FNet model)"),sLe.forEach(t),q1o=i($),zp=n($,"LI",{});var lLe=s(zp);Ble=n(lLe,"STRONG",{});var mtt=s(Ble);j1o=r(mtt,"fsmt"),mtt.forEach(t),D1o=r(lLe," \u2014 "),$N=n(lLe,"A",{href:!0});var gtt=s($N);G1o=r(gtt,"FSMTModel"),gtt.forEach(t),O1o=r(lLe," (FairSeq Machine-Translation model)"),lLe.forEach(t),V1o=i($),Bs=n($,"LI",{});var rk=s(Bs);Ile=n(rk,"STRONG",{});var htt=s(Ile);X1o=r(htt,"funnel"),htt.forEach(t),z1o=r(rk," \u2014 "),kN=n(rk,"A",{href:!0});var ptt=s(kN);W1o=r(ptt,"FunnelModel"),ptt.forEach(t),Q1o=r(rk," or "),SN=n(rk,"A",{href:!0});var _tt=s(SN);H1o=r(_tt,"FunnelBaseModel"),_tt.forEach(t),U1o=r(rk," (Funnel Transformer model)"),rk.forEach(t),J1o=i($),Wp=n($,"LI",{});var iLe=s(Wp);Nle=n(iLe,"STRONG",{});var utt=s(Nle);Y1o=r(utt,"glpn"),utt.forEach(t),K1o=r(iLe," \u2014 "),RN=n(iLe,"A",{href:!0});var btt=s(RN);Z1o=r(btt,"GLPNModel"),btt.forEach(t),ebo=r(iLe," (GLPN model)"),iLe.forEach(t),obo=i($),Qp=n($,"LI",{});var dLe=s(Qp);qle=n(dLe,"STRONG",{});var vtt=s(qle);rbo=r(vtt,"gpt2"),vtt.forEach(t),tbo=r(dLe," \u2014 "),PN=n(dLe,"A",{href:!0});var Ftt=s(PN);abo=r(Ftt,"GPT2Model"),Ftt.forEach(t),nbo=r(dLe," (OpenAI GPT-2 model)"),dLe.forEach(t),sbo=i($),Hp=n($,"LI",{});var cLe=s(Hp);jle=n(cLe,"STRONG",{});var Ttt=s(jle);lbo=r(Ttt,"gpt_neo"),Ttt.forEach(t),ibo=r(cLe," \u2014 "),BN=n(cLe,"A",{href:!0});var Mtt=s(BN);dbo=r(Mtt,"GPTNeoModel"),Mtt.forEach(t),cbo=r(cLe," (GPT Neo model)"),cLe.forEach(t),fbo=i($),Up=n($,"LI",{});var fLe=s(Up);Dle=n(fLe,"STRONG",{});var Ett=s(Dle);mbo=r(Ett,"gpt_neox"),Ett.forEach(t),gbo=r(fLe," \u2014 "),IN=n(fLe,"A",{href:!0});var Ctt=s(IN);hbo=r(Ctt,"GPTNeoXModel"),Ctt.forEach(t),pbo=r(fLe," (GPT NeoX model)"),fLe.forEach(t),_bo=i($),Jp=n($,"LI",{});var mLe=s(Jp);Gle=n(mLe,"STRONG",{});var wtt=s(Gle);ubo=r(wtt,"gptj"),wtt.forEach(t),bbo=r(mLe," \u2014 "),NN=n(mLe,"A",{href:!0});var Att=s(NN);vbo=r(Att,"GPTJModel"),Att.forEach(t),Fbo=r(mLe," (GPT-J model)"),mLe.forEach(t),Tbo=i($),Yp=n($,"LI",{});var gLe=s(Yp);Ole=n(gLe,"STRONG",{});var Ltt=s(Ole);Mbo=r(Ltt,"hubert"),Ltt.forEach(t),Ebo=r(gLe," \u2014 "),qN=n(gLe,"A",{href:!0});var ytt=s(qN);Cbo=r(ytt,"HubertModel"),ytt.forEach(t),wbo=r(gLe," (Hubert model)"),gLe.forEach(t),Abo=i($),Kp=n($,"LI",{});var hLe=s(Kp);Vle=n(hLe,"STRONG",{});var xtt=s(Vle);Lbo=r(xtt,"ibert"),xtt.forEach(t),ybo=r(hLe," \u2014 "),jN=n(hLe,"A",{href:!0});var $tt=s(jN);xbo=r($tt,"IBertModel"),$tt.forEach(t),$bo=r(hLe," (I-BERT model)"),hLe.forEach(t),kbo=i($),Zp=n($,"LI",{});var pLe=s(Zp);Xle=n(pLe,"STRONG",{});var ktt=s(Xle);Sbo=r(ktt,"imagegpt"),ktt.forEach(t),Rbo=r(pLe," \u2014 "),DN=n(pLe,"A",{href:!0});var Stt=s(DN);Pbo=r(Stt,"ImageGPTModel"),Stt.forEach(t),Bbo=r(pLe," (ImageGPT model)"),pLe.forEach(t),Ibo=i($),e_=n($,"LI",{});var _Le=s(e_);zle=n(_Le,"STRONG",{});var Rtt=s(zle);Nbo=r(Rtt,"layoutlm"),Rtt.forEach(t),qbo=r(_Le," \u2014 "),GN=n(_Le,"A",{href:!0});var Ptt=s(GN);jbo=r(Ptt,"LayoutLMModel"),Ptt.forEach(t),Dbo=r(_Le," (LayoutLM model)"),_Le.forEach(t),Gbo=i($),o_=n($,"LI",{});var uLe=s(o_);Wle=n(uLe,"STRONG",{});var Btt=s(Wle);Obo=r(Btt,"layoutlmv2"),Btt.forEach(t),Vbo=r(uLe," \u2014 "),ON=n(uLe,"A",{href:!0});var Itt=s(ON);Xbo=r(Itt,"LayoutLMv2Model"),Itt.forEach(t),zbo=r(uLe," (LayoutLMv2 model)"),uLe.forEach(t),Wbo=i($),r_=n($,"LI",{});var bLe=s(r_);Qle=n(bLe,"STRONG",{});var Ntt=s(Qle);Qbo=r(Ntt,"layoutlmv3"),Ntt.forEach(t),Hbo=r(bLe," \u2014 "),VN=n(bLe,"A",{href:!0});var qtt=s(VN);Ubo=r(qtt,"LayoutLMv3Model"),qtt.forEach(t),Jbo=r(bLe," (LayoutLMv3 model)"),bLe.forEach(t),Ybo=i($),t_=n($,"LI",{});var vLe=s(t_);Hle=n(vLe,"STRONG",{});var jtt=s(Hle);Kbo=r(jtt,"led"),jtt.forEach(t),Zbo=r(vLe," \u2014 "),XN=n(vLe,"A",{href:!0});var Dtt=s(XN);e2o=r(Dtt,"LEDModel"),Dtt.forEach(t),o2o=r(vLe," (LED model)"),vLe.forEach(t),r2o=i($),a_=n($,"LI",{});var FLe=s(a_);Ule=n(FLe,"STRONG",{});var Gtt=s(Ule);t2o=r(Gtt,"levit"),Gtt.forEach(t),a2o=r(FLe," \u2014 "),zN=n(FLe,"A",{href:!0});var Ott=s(zN);n2o=r(Ott,"LevitModel"),Ott.forEach(t),s2o=r(FLe," (LeViT model)"),FLe.forEach(t),l2o=i($),n_=n($,"LI",{});var TLe=s(n_);Jle=n(TLe,"STRONG",{});var Vtt=s(Jle);i2o=r(Vtt,"longformer"),Vtt.forEach(t),d2o=r(TLe," \u2014 "),WN=n(TLe,"A",{href:!0});var Xtt=s(WN);c2o=r(Xtt,"LongformerModel"),Xtt.forEach(t),f2o=r(TLe," (Longformer model)"),TLe.forEach(t),m2o=i($),s_=n($,"LI",{});var MLe=s(s_);Yle=n(MLe,"STRONG",{});var ztt=s(Yle);g2o=r(ztt,"luke"),ztt.forEach(t),h2o=r(MLe," \u2014 "),QN=n(MLe,"A",{href:!0});var Wtt=s(QN);p2o=r(Wtt,"LukeModel"),Wtt.forEach(t),_2o=r(MLe," (LUKE model)"),MLe.forEach(t),u2o=i($),l_=n($,"LI",{});var ELe=s(l_);Kle=n(ELe,"STRONG",{});var Qtt=s(Kle);b2o=r(Qtt,"lxmert"),Qtt.forEach(t),v2o=r(ELe," \u2014 "),HN=n(ELe,"A",{href:!0});var Htt=s(HN);F2o=r(Htt,"LxmertModel"),Htt.forEach(t),T2o=r(ELe," (LXMERT model)"),ELe.forEach(t),M2o=i($),i_=n($,"LI",{});var CLe=s(i_);Zle=n(CLe,"STRONG",{});var Utt=s(Zle);E2o=r(Utt,"m2m_100"),Utt.forEach(t),C2o=r(CLe," \u2014 "),UN=n(CLe,"A",{href:!0});var Jtt=s(UN);w2o=r(Jtt,"M2M100Model"),Jtt.forEach(t),A2o=r(CLe," (M2M100 model)"),CLe.forEach(t),L2o=i($),d_=n($,"LI",{});var wLe=s(d_);eie=n(wLe,"STRONG",{});var Ytt=s(eie);y2o=r(Ytt,"marian"),Ytt.forEach(t),x2o=r(wLe," \u2014 "),JN=n(wLe,"A",{href:!0});var Ktt=s(JN);$2o=r(Ktt,"MarianModel"),Ktt.forEach(t),k2o=r(wLe," (Marian model)"),wLe.forEach(t),S2o=i($),c_=n($,"LI",{});var ALe=s(c_);oie=n(ALe,"STRONG",{});var Ztt=s(oie);R2o=r(Ztt,"maskformer"),Ztt.forEach(t),P2o=r(ALe," \u2014 "),YN=n(ALe,"A",{href:!0});var eat=s(YN);B2o=r(eat,"MaskFormerModel"),eat.forEach(t),I2o=r(ALe," (MaskFormer model)"),ALe.forEach(t),N2o=i($),f_=n($,"LI",{});var LLe=s(f_);rie=n(LLe,"STRONG",{});var oat=s(rie);q2o=r(oat,"mbart"),oat.forEach(t),j2o=r(LLe," \u2014 "),KN=n(LLe,"A",{href:!0});var rat=s(KN);D2o=r(rat,"MBartModel"),rat.forEach(t),G2o=r(LLe," (mBART model)"),LLe.forEach(t),O2o=i($),m_=n($,"LI",{});var yLe=s(m_);tie=n(yLe,"STRONG",{});var tat=s(tie);V2o=r(tat,"megatron-bert"),tat.forEach(t),X2o=r(yLe," \u2014 "),ZN=n(yLe,"A",{href:!0});var aat=s(ZN);z2o=r(aat,"MegatronBertModel"),aat.forEach(t),W2o=r(yLe," (Megatron-BERT model)"),yLe.forEach(t),Q2o=i($),g_=n($,"LI",{});var xLe=s(g_);aie=n(xLe,"STRONG",{});var nat=s(aie);H2o=r(nat,"mobilebert"),nat.forEach(t),U2o=r(xLe," \u2014 "),eq=n(xLe,"A",{href:!0});var sat=s(eq);J2o=r(sat,"MobileBertModel"),sat.forEach(t),Y2o=r(xLe," (MobileBERT model)"),xLe.forEach(t),K2o=i($),h_=n($,"LI",{});var $Le=s(h_);nie=n($Le,"STRONG",{});var lat=s(nie);Z2o=r(lat,"mpnet"),lat.forEach(t),evo=r($Le," \u2014 "),oq=n($Le,"A",{href:!0});var iat=s(oq);ovo=r(iat,"MPNetModel"),iat.forEach(t),rvo=r($Le," (MPNet model)"),$Le.forEach(t),tvo=i($),p_=n($,"LI",{});var kLe=s(p_);sie=n(kLe,"STRONG",{});var dat=s(sie);avo=r(dat,"mt5"),dat.forEach(t),nvo=r(kLe," \u2014 "),rq=n(kLe,"A",{href:!0});var cat=s(rq);svo=r(cat,"MT5Model"),cat.forEach(t),lvo=r(kLe," (MT5 model)"),kLe.forEach(t),ivo=i($),__=n($,"LI",{});var SLe=s(__);lie=n(SLe,"STRONG",{});var fat=s(lie);dvo=r(fat,"nystromformer"),fat.forEach(t),cvo=r(SLe," \u2014 "),tq=n(SLe,"A",{href:!0});var mat=s(tq);fvo=r(mat,"NystromformerModel"),mat.forEach(t),mvo=r(SLe," (Nystr\xF6mformer model)"),SLe.forEach(t),gvo=i($),u_=n($,"LI",{});var RLe=s(u_);iie=n(RLe,"STRONG",{});var gat=s(iie);hvo=r(gat,"openai-gpt"),gat.forEach(t),pvo=r(RLe," \u2014 "),aq=n(RLe,"A",{href:!0});var hat=s(aq);_vo=r(hat,"OpenAIGPTModel"),hat.forEach(t),uvo=r(RLe," (OpenAI GPT model)"),RLe.forEach(t),bvo=i($),b_=n($,"LI",{});var PLe=s(b_);die=n(PLe,"STRONG",{});var pat=s(die);vvo=r(pat,"opt"),pat.forEach(t),Fvo=r(PLe," \u2014 "),nq=n(PLe,"A",{href:!0});var _at=s(nq);Tvo=r(_at,"OPTModel"),_at.forEach(t),Mvo=r(PLe," (OPT model)"),PLe.forEach(t),Evo=i($),v_=n($,"LI",{});var BLe=s(v_);cie=n(BLe,"STRONG",{});var uat=s(cie);Cvo=r(uat,"pegasus"),uat.forEach(t),wvo=r(BLe," \u2014 "),sq=n(BLe,"A",{href:!0});var bat=s(sq);Avo=r(bat,"PegasusModel"),bat.forEach(t),Lvo=r(BLe," (Pegasus model)"),BLe.forEach(t),yvo=i($),F_=n($,"LI",{});var ILe=s(F_);fie=n(ILe,"STRONG",{});var vat=s(fie);xvo=r(vat,"perceiver"),vat.forEach(t),$vo=r(ILe," \u2014 "),lq=n(ILe,"A",{href:!0});var Fat=s(lq);kvo=r(Fat,"PerceiverModel"),Fat.forEach(t),Svo=r(ILe," (Perceiver model)"),ILe.forEach(t),Rvo=i($),T_=n($,"LI",{});var NLe=s(T_);mie=n(NLe,"STRONG",{});var Tat=s(mie);Pvo=r(Tat,"plbart"),Tat.forEach(t),Bvo=r(NLe," \u2014 "),iq=n(NLe,"A",{href:!0});var Mat=s(iq);Ivo=r(Mat,"PLBartModel"),Mat.forEach(t),Nvo=r(NLe," (PLBart model)"),NLe.forEach(t),qvo=i($),M_=n($,"LI",{});var qLe=s(M_);gie=n(qLe,"STRONG",{});var Eat=s(gie);jvo=r(Eat,"poolformer"),Eat.forEach(t),Dvo=r(qLe," \u2014 "),dq=n(qLe,"A",{href:!0});var Cat=s(dq);Gvo=r(Cat,"PoolFormerModel"),Cat.forEach(t),Ovo=r(qLe," (PoolFormer model)"),qLe.forEach(t),Vvo=i($),E_=n($,"LI",{});var jLe=s(E_);hie=n(jLe,"STRONG",{});var wat=s(hie);Xvo=r(wat,"prophetnet"),wat.forEach(t),zvo=r(jLe," \u2014 "),cq=n(jLe,"A",{href:!0});var Aat=s(cq);Wvo=r(Aat,"ProphetNetModel"),Aat.forEach(t),Qvo=r(jLe," (ProphetNet model)"),jLe.forEach(t),Hvo=i($),C_=n($,"LI",{});var DLe=s(C_);pie=n(DLe,"STRONG",{});var Lat=s(pie);Uvo=r(Lat,"qdqbert"),Lat.forEach(t),Jvo=r(DLe," \u2014 "),fq=n(DLe,"A",{href:!0});var yat=s(fq);Yvo=r(yat,"QDQBertModel"),yat.forEach(t),Kvo=r(DLe," (QDQBert model)"),DLe.forEach(t),Zvo=i($),w_=n($,"LI",{});var GLe=s(w_);_ie=n(GLe,"STRONG",{});var xat=s(_ie);e3o=r(xat,"reformer"),xat.forEach(t),o3o=r(GLe," \u2014 "),mq=n(GLe,"A",{href:!0});var $at=s(mq);r3o=r($at,"ReformerModel"),$at.forEach(t),t3o=r(GLe," (Reformer model)"),GLe.forEach(t),a3o=i($),A_=n($,"LI",{});var OLe=s(A_);uie=n(OLe,"STRONG",{});var kat=s(uie);n3o=r(kat,"regnet"),kat.forEach(t),s3o=r(OLe," \u2014 "),gq=n(OLe,"A",{href:!0});var Sat=s(gq);l3o=r(Sat,"RegNetModel"),Sat.forEach(t),i3o=r(OLe," (RegNet model)"),OLe.forEach(t),d3o=i($),L_=n($,"LI",{});var VLe=s(L_);bie=n(VLe,"STRONG",{});var Rat=s(bie);c3o=r(Rat,"rembert"),Rat.forEach(t),f3o=r(VLe," \u2014 "),hq=n(VLe,"A",{href:!0});var Pat=s(hq);m3o=r(Pat,"RemBertModel"),Pat.forEach(t),g3o=r(VLe," (RemBERT model)"),VLe.forEach(t),h3o=i($),y_=n($,"LI",{});var XLe=s(y_);vie=n(XLe,"STRONG",{});var Bat=s(vie);p3o=r(Bat,"resnet"),Bat.forEach(t),_3o=r(XLe," \u2014 "),pq=n(XLe,"A",{href:!0});var Iat=s(pq);u3o=r(Iat,"ResNetModel"),Iat.forEach(t),b3o=r(XLe," (ResNet model)"),XLe.forEach(t),v3o=i($),x_=n($,"LI",{});var zLe=s(x_);Fie=n(zLe,"STRONG",{});var Nat=s(Fie);F3o=r(Nat,"retribert"),Nat.forEach(t),T3o=r(zLe," \u2014 "),_q=n(zLe,"A",{href:!0});var qat=s(_q);M3o=r(qat,"RetriBertModel"),qat.forEach(t),E3o=r(zLe," (RetriBERT model)"),zLe.forEach(t),C3o=i($),$_=n($,"LI",{});var WLe=s($_);Tie=n(WLe,"STRONG",{});var jat=s(Tie);w3o=r(jat,"roberta"),jat.forEach(t),A3o=r(WLe," \u2014 "),uq=n(WLe,"A",{href:!0});var Dat=s(uq);L3o=r(Dat,"RobertaModel"),Dat.forEach(t),y3o=r(WLe," (RoBERTa model)"),WLe.forEach(t),x3o=i($),k_=n($,"LI",{});var QLe=s(k_);Mie=n(QLe,"STRONG",{});var Gat=s(Mie);$3o=r(Gat,"roformer"),Gat.forEach(t),k3o=r(QLe," \u2014 "),bq=n(QLe,"A",{href:!0});var Oat=s(bq);S3o=r(Oat,"RoFormerModel"),Oat.forEach(t),R3o=r(QLe," (RoFormer model)"),QLe.forEach(t),P3o=i($),S_=n($,"LI",{});var HLe=s(S_);Eie=n(HLe,"STRONG",{});var Vat=s(Eie);B3o=r(Vat,"segformer"),Vat.forEach(t),I3o=r(HLe," \u2014 "),vq=n(HLe,"A",{href:!0});var Xat=s(vq);N3o=r(Xat,"SegformerModel"),Xat.forEach(t),q3o=r(HLe," (SegFormer model)"),HLe.forEach(t),j3o=i($),R_=n($,"LI",{});var ULe=s(R_);Cie=n(ULe,"STRONG",{});var zat=s(Cie);D3o=r(zat,"sew"),zat.forEach(t),G3o=r(ULe," \u2014 "),Fq=n(ULe,"A",{href:!0});var Wat=s(Fq);O3o=r(Wat,"SEWModel"),Wat.forEach(t),V3o=r(ULe," (SEW model)"),ULe.forEach(t),X3o=i($),P_=n($,"LI",{});var JLe=s(P_);wie=n(JLe,"STRONG",{});var Qat=s(wie);z3o=r(Qat,"sew-d"),Qat.forEach(t),W3o=r(JLe," \u2014 "),Tq=n(JLe,"A",{href:!0});var Hat=s(Tq);Q3o=r(Hat,"SEWDModel"),Hat.forEach(t),H3o=r(JLe," (SEW-D model)"),JLe.forEach(t),U3o=i($),B_=n($,"LI",{});var YLe=s(B_);Aie=n(YLe,"STRONG",{});var Uat=s(Aie);J3o=r(Uat,"speech_to_text"),Uat.forEach(t),Y3o=r(YLe," \u2014 "),Mq=n(YLe,"A",{href:!0});var Jat=s(Mq);K3o=r(Jat,"Speech2TextModel"),Jat.forEach(t),Z3o=r(YLe," (Speech2Text model)"),YLe.forEach(t),eFo=i($),I_=n($,"LI",{});var KLe=s(I_);Lie=n(KLe,"STRONG",{});var Yat=s(Lie);oFo=r(Yat,"splinter"),Yat.forEach(t),rFo=r(KLe," \u2014 "),Eq=n(KLe,"A",{href:!0});var Kat=s(Eq);tFo=r(Kat,"SplinterModel"),Kat.forEach(t),aFo=r(KLe," (Splinter model)"),KLe.forEach(t),nFo=i($),N_=n($,"LI",{});var ZLe=s(N_);yie=n(ZLe,"STRONG",{});var Zat=s(yie);sFo=r(Zat,"squeezebert"),Zat.forEach(t),lFo=r(ZLe," \u2014 "),Cq=n(ZLe,"A",{href:!0});var ent=s(Cq);iFo=r(ent,"SqueezeBertModel"),ent.forEach(t),dFo=r(ZLe," (SqueezeBERT model)"),ZLe.forEach(t),cFo=i($),q_=n($,"LI",{});var eye=s(q_);xie=n(eye,"STRONG",{});var ont=s(xie);fFo=r(ont,"swin"),ont.forEach(t),mFo=r(eye," \u2014 "),wq=n(eye,"A",{href:!0});var rnt=s(wq);gFo=r(rnt,"SwinModel"),rnt.forEach(t),hFo=r(eye," (Swin Transformer model)"),eye.forEach(t),pFo=i($),j_=n($,"LI",{});var oye=s(j_);$ie=n(oye,"STRONG",{});var tnt=s($ie);_Fo=r(tnt,"t5"),tnt.forEach(t),uFo=r(oye," \u2014 "),Aq=n(oye,"A",{href:!0});var ant=s(Aq);bFo=r(ant,"T5Model"),ant.forEach(t),vFo=r(oye," (T5 model)"),oye.forEach(t),FFo=i($),D_=n($,"LI",{});var rye=s(D_);kie=n(rye,"STRONG",{});var nnt=s(kie);TFo=r(nnt,"tapas"),nnt.forEach(t),MFo=r(rye," \u2014 "),Lq=n(rye,"A",{href:!0});var snt=s(Lq);EFo=r(snt,"TapasModel"),snt.forEach(t),CFo=r(rye," (TAPAS model)"),rye.forEach(t),wFo=i($),G_=n($,"LI",{});var tye=s(G_);Sie=n(tye,"STRONG",{});var lnt=s(Sie);AFo=r(lnt,"trajectory_transformer"),lnt.forEach(t),LFo=r(tye," \u2014 "),yq=n(tye,"A",{href:!0});var int=s(yq);yFo=r(int,"TrajectoryTransformerModel"),int.forEach(t),xFo=r(tye," (Trajectory Transformer model)"),tye.forEach(t),$Fo=i($),O_=n($,"LI",{});var aye=s(O_);Rie=n(aye,"STRONG",{});var dnt=s(Rie);kFo=r(dnt,"transfo-xl"),dnt.forEach(t),SFo=r(aye," \u2014 "),xq=n(aye,"A",{href:!0});var cnt=s(xq);RFo=r(cnt,"TransfoXLModel"),cnt.forEach(t),PFo=r(aye," (Transformer-XL model)"),aye.forEach(t),BFo=i($),V_=n($,"LI",{});var nye=s(V_);Pie=n(nye,"STRONG",{});var fnt=s(Pie);IFo=r(fnt,"unispeech"),fnt.forEach(t),NFo=r(nye," \u2014 "),$q=n(nye,"A",{href:!0});var mnt=s($q);qFo=r(mnt,"UniSpeechModel"),mnt.forEach(t),jFo=r(nye," (UniSpeech model)"),nye.forEach(t),DFo=i($),X_=n($,"LI",{});var sye=s(X_);Bie=n(sye,"STRONG",{});var gnt=s(Bie);GFo=r(gnt,"unispeech-sat"),gnt.forEach(t),OFo=r(sye," \u2014 "),kq=n(sye,"A",{href:!0});var hnt=s(kq);VFo=r(hnt,"UniSpeechSatModel"),hnt.forEach(t),XFo=r(sye," (UniSpeechSat model)"),sye.forEach(t),zFo=i($),z_=n($,"LI",{});var lye=s(z_);Iie=n(lye,"STRONG",{});var pnt=s(Iie);WFo=r(pnt,"van"),pnt.forEach(t),QFo=r(lye," \u2014 "),Sq=n(lye,"A",{href:!0});var _nt=s(Sq);HFo=r(_nt,"VanModel"),_nt.forEach(t),UFo=r(lye," (VAN model)"),lye.forEach(t),JFo=i($),W_=n($,"LI",{});var iye=s(W_);Nie=n(iye,"STRONG",{});var unt=s(Nie);YFo=r(unt,"vilt"),unt.forEach(t),KFo=r(iye," \u2014 "),Rq=n(iye,"A",{href:!0});var bnt=s(Rq);ZFo=r(bnt,"ViltModel"),bnt.forEach(t),eTo=r(iye," (ViLT model)"),iye.forEach(t),oTo=i($),Q_=n($,"LI",{});var dye=s(Q_);qie=n(dye,"STRONG",{});var vnt=s(qie);rTo=r(vnt,"vision-text-dual-encoder"),vnt.forEach(t),tTo=r(dye," \u2014 "),Pq=n(dye,"A",{href:!0});var Fnt=s(Pq);aTo=r(Fnt,"VisionTextDualEncoderModel"),Fnt.forEach(t),nTo=r(dye," (VisionTextDualEncoder model)"),dye.forEach(t),sTo=i($),H_=n($,"LI",{});var cye=s(H_);jie=n(cye,"STRONG",{});var Tnt=s(jie);lTo=r(Tnt,"visual_bert"),Tnt.forEach(t),iTo=r(cye," \u2014 "),Bq=n(cye,"A",{href:!0});var Mnt=s(Bq);dTo=r(Mnt,"VisualBertModel"),Mnt.forEach(t),cTo=r(cye," (VisualBERT model)"),cye.forEach(t),fTo=i($),U_=n($,"LI",{});var fye=s(U_);Die=n(fye,"STRONG",{});var Ent=s(Die);mTo=r(Ent,"vit"),Ent.forEach(t),gTo=r(fye," \u2014 "),Iq=n(fye,"A",{href:!0});var Cnt=s(Iq);hTo=r(Cnt,"ViTModel"),Cnt.forEach(t),pTo=r(fye," (ViT model)"),fye.forEach(t),_To=i($),J_=n($,"LI",{});var mye=s(J_);Gie=n(mye,"STRONG",{});var wnt=s(Gie);uTo=r(wnt,"vit_mae"),wnt.forEach(t),bTo=r(mye," \u2014 "),Nq=n(mye,"A",{href:!0});var Ant=s(Nq);vTo=r(Ant,"ViTMAEModel"),Ant.forEach(t),FTo=r(mye," (ViTMAE model)"),mye.forEach(t),TTo=i($),Y_=n($,"LI",{});var gye=s(Y_);Oie=n(gye,"STRONG",{});var Lnt=s(Oie);MTo=r(Lnt,"wav2vec2"),Lnt.forEach(t),ETo=r(gye," \u2014 "),qq=n(gye,"A",{href:!0});var ynt=s(qq);CTo=r(ynt,"Wav2Vec2Model"),ynt.forEach(t),wTo=r(gye," (Wav2Vec2 model)"),gye.forEach(t),ATo=i($),K_=n($,"LI",{});var hye=s(K_);Vie=n(hye,"STRONG",{});var xnt=s(Vie);LTo=r(xnt,"wav2vec2-conformer"),xnt.forEach(t),yTo=r(hye," \u2014 "),jq=n(hye,"A",{href:!0});var $nt=s(jq);xTo=r($nt,"Wav2Vec2ConformerModel"),$nt.forEach(t),$To=r(hye," (Wav2Vec2-Conformer model)"),hye.forEach(t),kTo=i($),Z_=n($,"LI",{});var pye=s(Z_);Xie=n(pye,"STRONG",{});var knt=s(Xie);STo=r(knt,"wavlm"),knt.forEach(t),RTo=r(pye," \u2014 "),Dq=n(pye,"A",{href:!0});var Snt=s(Dq);PTo=r(Snt,"WavLMModel"),Snt.forEach(t),BTo=r(pye," (WavLM model)"),pye.forEach(t),ITo=i($),eu=n($,"LI",{});var _ye=s(eu);zie=n(_ye,"STRONG",{});var Rnt=s(zie);NTo=r(Rnt,"xglm"),Rnt.forEach(t),qTo=r(_ye," \u2014 "),Gq=n(_ye,"A",{href:!0});var Pnt=s(Gq);jTo=r(Pnt,"XGLMModel"),Pnt.forEach(t),DTo=r(_ye," (XGLM model)"),_ye.forEach(t),GTo=i($),ou=n($,"LI",{});var uye=s(ou);Wie=n(uye,"STRONG",{});var Bnt=s(Wie);OTo=r(Bnt,"xlm"),Bnt.forEach(t),VTo=r(uye," \u2014 "),Oq=n(uye,"A",{href:!0});var Int=s(Oq);XTo=r(Int,"XLMModel"),Int.forEach(t),zTo=r(uye," (XLM model)"),uye.forEach(t),WTo=i($),ru=n($,"LI",{});var bye=s(ru);Qie=n(bye,"STRONG",{});var Nnt=s(Qie);QTo=r(Nnt,"xlm-prophetnet"),Nnt.forEach(t),HTo=r(bye," \u2014 "),Vq=n(bye,"A",{href:!0});var qnt=s(Vq);UTo=r(qnt,"XLMProphetNetModel"),qnt.forEach(t),JTo=r(bye," (XLM-ProphetNet model)"),bye.forEach(t),YTo=i($),tu=n($,"LI",{});var vye=s(tu);Hie=n(vye,"STRONG",{});var jnt=s(Hie);KTo=r(jnt,"xlm-roberta"),jnt.forEach(t),ZTo=r(vye," \u2014 "),Xq=n(vye,"A",{href:!0});var Dnt=s(Xq);e7o=r(Dnt,"XLMRobertaModel"),Dnt.forEach(t),o7o=r(vye," (XLM-RoBERTa model)"),vye.forEach(t),r7o=i($),au=n($,"LI",{});var Fye=s(au);Uie=n(Fye,"STRONG",{});var Gnt=s(Uie);t7o=r(Gnt,"xlm-roberta-xl"),Gnt.forEach(t),a7o=r(Fye," \u2014 "),zq=n(Fye,"A",{href:!0});var Ont=s(zq);n7o=r(Ont,"XLMRobertaXLModel"),Ont.forEach(t),s7o=r(Fye," (XLM-RoBERTa-XL model)"),Fye.forEach(t),l7o=i($),nu=n($,"LI",{});var Tye=s(nu);Jie=n(Tye,"STRONG",{});var Vnt=s(Jie);i7o=r(Vnt,"xlnet"),Vnt.forEach(t),d7o=r(Tye," \u2014 "),Wq=n(Tye,"A",{href:!0});var Xnt=s(Wq);c7o=r(Xnt,"XLNetModel"),Xnt.forEach(t),f7o=r(Tye," (XLNet model)"),Tye.forEach(t),m7o=i($),su=n($,"LI",{});var Mye=s(su);Yie=n(Mye,"STRONG",{});var znt=s(Yie);g7o=r(znt,"yolos"),znt.forEach(t),h7o=r(Mye," \u2014 "),Qq=n(Mye,"A",{href:!0});var Wnt=s(Qq);p7o=r(Wnt,"YolosModel"),Wnt.forEach(t),_7o=r(Mye," (YOLOS model)"),Mye.forEach(t),u7o=i($),lu=n($,"LI",{});var Eye=s(lu);Kie=n(Eye,"STRONG",{});var Qnt=s(Kie);b7o=r(Qnt,"yoso"),Qnt.forEach(t),v7o=r(Eye," \u2014 "),Hq=n(Eye,"A",{href:!0});var Hnt=s(Hq);F7o=r(Hnt,"YosoModel"),Hnt.forEach(t),T7o=r(Eye," (YOSO model)"),Eye.forEach(t),$.forEach(t),M7o=i(oa),iu=n(oa,"P",{});var Cye=s(iu);E7o=r(Cye,"The model is set in evaluation mode by default using "),Zie=n(Cye,"CODE",{});var Unt=s(Zie);C7o=r(Unt,"model.eval()"),Unt.forEach(t),w7o=r(Cye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ede=n(Cye,"CODE",{});var Jnt=s(ede);A7o=r(Jnt,"model.train()"),Jnt.forEach(t),Cye.forEach(t),L7o=i(oa),T(du.$$.fragment,oa),oa.forEach(t),Vs.forEach(t),gje=i(f),$i=n(f,"H2",{class:!0});var uGe=s($i);cu=n(uGe,"A",{id:!0,class:!0,href:!0});var Ynt=s(cu);ode=n(Ynt,"SPAN",{});var Knt=s(ode);T(uL.$$.fragment,Knt),Knt.forEach(t),Ynt.forEach(t),y7o=i(uGe),rde=n(uGe,"SPAN",{});var Znt=s(rde);x7o=r(Znt,"AutoModelForPreTraining"),Znt.forEach(t),uGe.forEach(t),hje=i(f),xo=n(f,"DIV",{class:!0});var Xs=s(xo);T(bL.$$.fragment,Xs),$7o=i(Xs),ki=n(Xs,"P",{});var QZ=s(ki);k7o=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Uq=n(QZ,"A",{href:!0});var est=s(Uq);S7o=r(est,"from_pretrained()"),est.forEach(t),R7o=r(QZ," class method or the "),Jq=n(QZ,"A",{href:!0});var ost=s(Jq);P7o=r(ost,"from_config()"),ost.forEach(t),B7o=r(QZ,` class
method.`),QZ.forEach(t),I7o=i(Xs),vL=n(Xs,"P",{});var bGe=s(vL);N7o=r(bGe,"This class cannot be instantiated directly using "),tde=n(bGe,"CODE",{});var rst=s(tde);q7o=r(rst,"__init__()"),rst.forEach(t),j7o=r(bGe," (throws an error)."),bGe.forEach(t),D7o=i(Xs),at=n(Xs,"DIV",{class:!0});var Ww=s(at);T(FL.$$.fragment,Ww),G7o=i(Ww),ade=n(Ww,"P",{});var tst=s(ade);O7o=r(tst,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tst.forEach(t),V7o=i(Ww),Si=n(Ww,"P",{});var HZ=s(Si);X7o=r(HZ,`Note:
Loading a model from its configuration file does `),nde=n(HZ,"STRONG",{});var ast=s(nde);z7o=r(ast,"not"),ast.forEach(t),W7o=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yq=n(HZ,"A",{href:!0});var nst=s(Yq);Q7o=r(nst,"from_pretrained()"),nst.forEach(t),H7o=r(HZ," to load the model weights."),HZ.forEach(t),U7o=i(Ww),T(fu.$$.fragment,Ww),Ww.forEach(t),J7o=i(Xs),Ye=n(Xs,"DIV",{class:!0});var ra=s(Ye);T(TL.$$.fragment,ra),Y7o=i(ra),sde=n(ra,"P",{});var sst=s(sde);K7o=r(sst,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sst.forEach(t),Z7o=i(ra),xa=n(ra,"P",{});var Qw=s(xa);eMo=r(Qw,"The model class to instantiate is selected based on the "),lde=n(Qw,"CODE",{});var lst=s(lde);oMo=r(lst,"model_type"),lst.forEach(t),rMo=r(Qw,` property of the config object (either
passed as an argument or loaded from `),ide=n(Qw,"CODE",{});var ist=s(ide);tMo=r(ist,"pretrained_model_name_or_path"),ist.forEach(t),aMo=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dde=n(Qw,"CODE",{});var dst=s(dde);nMo=r(dst,"pretrained_model_name_or_path"),dst.forEach(t),sMo=r(Qw,":"),Qw.forEach(t),lMo=i(ra),G=n(ra,"UL",{});var O=s(G);mu=n(O,"LI",{});var wye=s(mu);cde=n(wye,"STRONG",{});var cst=s(cde);iMo=r(cst,"albert"),cst.forEach(t),dMo=r(wye," \u2014 "),Kq=n(wye,"A",{href:!0});var fst=s(Kq);cMo=r(fst,"AlbertForPreTraining"),fst.forEach(t),fMo=r(wye," (ALBERT model)"),wye.forEach(t),mMo=i(O),gu=n(O,"LI",{});var Aye=s(gu);fde=n(Aye,"STRONG",{});var mst=s(fde);gMo=r(mst,"bart"),mst.forEach(t),hMo=r(Aye," \u2014 "),Zq=n(Aye,"A",{href:!0});var gst=s(Zq);pMo=r(gst,"BartForConditionalGeneration"),gst.forEach(t),_Mo=r(Aye," (BART model)"),Aye.forEach(t),uMo=i(O),hu=n(O,"LI",{});var Lye=s(hu);mde=n(Lye,"STRONG",{});var hst=s(mde);bMo=r(hst,"bert"),hst.forEach(t),vMo=r(Lye," \u2014 "),ej=n(Lye,"A",{href:!0});var pst=s(ej);FMo=r(pst,"BertForPreTraining"),pst.forEach(t),TMo=r(Lye," (BERT model)"),Lye.forEach(t),MMo=i(O),pu=n(O,"LI",{});var yye=s(pu);gde=n(yye,"STRONG",{});var _st=s(gde);EMo=r(_st,"big_bird"),_st.forEach(t),CMo=r(yye," \u2014 "),oj=n(yye,"A",{href:!0});var ust=s(oj);wMo=r(ust,"BigBirdForPreTraining"),ust.forEach(t),AMo=r(yye," (BigBird model)"),yye.forEach(t),LMo=i(O),_u=n(O,"LI",{});var xye=s(_u);hde=n(xye,"STRONG",{});var bst=s(hde);yMo=r(bst,"camembert"),bst.forEach(t),xMo=r(xye," \u2014 "),rj=n(xye,"A",{href:!0});var vst=s(rj);$Mo=r(vst,"CamembertForMaskedLM"),vst.forEach(t),kMo=r(xye," (CamemBERT model)"),xye.forEach(t),SMo=i(O),uu=n(O,"LI",{});var $ye=s(uu);pde=n($ye,"STRONG",{});var Fst=s(pde);RMo=r(Fst,"ctrl"),Fst.forEach(t),PMo=r($ye," \u2014 "),tj=n($ye,"A",{href:!0});var Tst=s(tj);BMo=r(Tst,"CTRLLMHeadModel"),Tst.forEach(t),IMo=r($ye," (CTRL model)"),$ye.forEach(t),NMo=i(O),bu=n(O,"LI",{});var kye=s(bu);_de=n(kye,"STRONG",{});var Mst=s(_de);qMo=r(Mst,"data2vec-text"),Mst.forEach(t),jMo=r(kye," \u2014 "),aj=n(kye,"A",{href:!0});var Est=s(aj);DMo=r(Est,"Data2VecTextForMaskedLM"),Est.forEach(t),GMo=r(kye," (Data2VecText model)"),kye.forEach(t),OMo=i(O),vu=n(O,"LI",{});var Sye=s(vu);ude=n(Sye,"STRONG",{});var Cst=s(ude);VMo=r(Cst,"deberta"),Cst.forEach(t),XMo=r(Sye," \u2014 "),nj=n(Sye,"A",{href:!0});var wst=s(nj);zMo=r(wst,"DebertaForMaskedLM"),wst.forEach(t),WMo=r(Sye," (DeBERTa model)"),Sye.forEach(t),QMo=i(O),Fu=n(O,"LI",{});var Rye=s(Fu);bde=n(Rye,"STRONG",{});var Ast=s(bde);HMo=r(Ast,"deberta-v2"),Ast.forEach(t),UMo=r(Rye," \u2014 "),sj=n(Rye,"A",{href:!0});var Lst=s(sj);JMo=r(Lst,"DebertaV2ForMaskedLM"),Lst.forEach(t),YMo=r(Rye," (DeBERTa-v2 model)"),Rye.forEach(t),KMo=i(O),Tu=n(O,"LI",{});var Pye=s(Tu);vde=n(Pye,"STRONG",{});var yst=s(vde);ZMo=r(yst,"distilbert"),yst.forEach(t),eEo=r(Pye," \u2014 "),lj=n(Pye,"A",{href:!0});var xst=s(lj);oEo=r(xst,"DistilBertForMaskedLM"),xst.forEach(t),rEo=r(Pye," (DistilBERT model)"),Pye.forEach(t),tEo=i(O),Mu=n(O,"LI",{});var Bye=s(Mu);Fde=n(Bye,"STRONG",{});var $st=s(Fde);aEo=r($st,"electra"),$st.forEach(t),nEo=r(Bye," \u2014 "),ij=n(Bye,"A",{href:!0});var kst=s(ij);sEo=r(kst,"ElectraForPreTraining"),kst.forEach(t),lEo=r(Bye," (ELECTRA model)"),Bye.forEach(t),iEo=i(O),Eu=n(O,"LI",{});var Iye=s(Eu);Tde=n(Iye,"STRONG",{});var Sst=s(Tde);dEo=r(Sst,"flaubert"),Sst.forEach(t),cEo=r(Iye," \u2014 "),dj=n(Iye,"A",{href:!0});var Rst=s(dj);fEo=r(Rst,"FlaubertWithLMHeadModel"),Rst.forEach(t),mEo=r(Iye," (FlauBERT model)"),Iye.forEach(t),gEo=i(O),Cu=n(O,"LI",{});var Nye=s(Cu);Mde=n(Nye,"STRONG",{});var Pst=s(Mde);hEo=r(Pst,"flava"),Pst.forEach(t),pEo=r(Nye," \u2014 "),cj=n(Nye,"A",{href:!0});var Bst=s(cj);_Eo=r(Bst,"FlavaForPreTraining"),Bst.forEach(t),uEo=r(Nye," (FLAVA model)"),Nye.forEach(t),bEo=i(O),wu=n(O,"LI",{});var qye=s(wu);Ede=n(qye,"STRONG",{});var Ist=s(Ede);vEo=r(Ist,"fnet"),Ist.forEach(t),FEo=r(qye," \u2014 "),fj=n(qye,"A",{href:!0});var Nst=s(fj);TEo=r(Nst,"FNetForPreTraining"),Nst.forEach(t),MEo=r(qye," (FNet model)"),qye.forEach(t),EEo=i(O),Au=n(O,"LI",{});var jye=s(Au);Cde=n(jye,"STRONG",{});var qst=s(Cde);CEo=r(qst,"fsmt"),qst.forEach(t),wEo=r(jye," \u2014 "),mj=n(jye,"A",{href:!0});var jst=s(mj);AEo=r(jst,"FSMTForConditionalGeneration"),jst.forEach(t),LEo=r(jye," (FairSeq Machine-Translation model)"),jye.forEach(t),yEo=i(O),Lu=n(O,"LI",{});var Dye=s(Lu);wde=n(Dye,"STRONG",{});var Dst=s(wde);xEo=r(Dst,"funnel"),Dst.forEach(t),$Eo=r(Dye," \u2014 "),gj=n(Dye,"A",{href:!0});var Gst=s(gj);kEo=r(Gst,"FunnelForPreTraining"),Gst.forEach(t),SEo=r(Dye," (Funnel Transformer model)"),Dye.forEach(t),REo=i(O),yu=n(O,"LI",{});var Gye=s(yu);Ade=n(Gye,"STRONG",{});var Ost=s(Ade);PEo=r(Ost,"gpt2"),Ost.forEach(t),BEo=r(Gye," \u2014 "),hj=n(Gye,"A",{href:!0});var Vst=s(hj);IEo=r(Vst,"GPT2LMHeadModel"),Vst.forEach(t),NEo=r(Gye," (OpenAI GPT-2 model)"),Gye.forEach(t),qEo=i(O),xu=n(O,"LI",{});var Oye=s(xu);Lde=n(Oye,"STRONG",{});var Xst=s(Lde);jEo=r(Xst,"ibert"),Xst.forEach(t),DEo=r(Oye," \u2014 "),pj=n(Oye,"A",{href:!0});var zst=s(pj);GEo=r(zst,"IBertForMaskedLM"),zst.forEach(t),OEo=r(Oye," (I-BERT model)"),Oye.forEach(t),VEo=i(O),$u=n(O,"LI",{});var Vye=s($u);yde=n(Vye,"STRONG",{});var Wst=s(yde);XEo=r(Wst,"layoutlm"),Wst.forEach(t),zEo=r(Vye," \u2014 "),_j=n(Vye,"A",{href:!0});var Qst=s(_j);WEo=r(Qst,"LayoutLMForMaskedLM"),Qst.forEach(t),QEo=r(Vye," (LayoutLM model)"),Vye.forEach(t),HEo=i(O),ku=n(O,"LI",{});var Xye=s(ku);xde=n(Xye,"STRONG",{});var Hst=s(xde);UEo=r(Hst,"longformer"),Hst.forEach(t),JEo=r(Xye," \u2014 "),uj=n(Xye,"A",{href:!0});var Ust=s(uj);YEo=r(Ust,"LongformerForMaskedLM"),Ust.forEach(t),KEo=r(Xye," (Longformer model)"),Xye.forEach(t),ZEo=i(O),Su=n(O,"LI",{});var zye=s(Su);$de=n(zye,"STRONG",{});var Jst=s($de);eCo=r(Jst,"lxmert"),Jst.forEach(t),oCo=r(zye," \u2014 "),bj=n(zye,"A",{href:!0});var Yst=s(bj);rCo=r(Yst,"LxmertForPreTraining"),Yst.forEach(t),tCo=r(zye," (LXMERT model)"),zye.forEach(t),aCo=i(O),Ru=n(O,"LI",{});var Wye=s(Ru);kde=n(Wye,"STRONG",{});var Kst=s(kde);nCo=r(Kst,"megatron-bert"),Kst.forEach(t),sCo=r(Wye," \u2014 "),vj=n(Wye,"A",{href:!0});var Zst=s(vj);lCo=r(Zst,"MegatronBertForPreTraining"),Zst.forEach(t),iCo=r(Wye," (Megatron-BERT model)"),Wye.forEach(t),dCo=i(O),Pu=n(O,"LI",{});var Qye=s(Pu);Sde=n(Qye,"STRONG",{});var elt=s(Sde);cCo=r(elt,"mobilebert"),elt.forEach(t),fCo=r(Qye," \u2014 "),Fj=n(Qye,"A",{href:!0});var olt=s(Fj);mCo=r(olt,"MobileBertForPreTraining"),olt.forEach(t),gCo=r(Qye," (MobileBERT model)"),Qye.forEach(t),hCo=i(O),Bu=n(O,"LI",{});var Hye=s(Bu);Rde=n(Hye,"STRONG",{});var rlt=s(Rde);pCo=r(rlt,"mpnet"),rlt.forEach(t),_Co=r(Hye," \u2014 "),Tj=n(Hye,"A",{href:!0});var tlt=s(Tj);uCo=r(tlt,"MPNetForMaskedLM"),tlt.forEach(t),bCo=r(Hye," (MPNet model)"),Hye.forEach(t),vCo=i(O),Iu=n(O,"LI",{});var Uye=s(Iu);Pde=n(Uye,"STRONG",{});var alt=s(Pde);FCo=r(alt,"openai-gpt"),alt.forEach(t),TCo=r(Uye," \u2014 "),Mj=n(Uye,"A",{href:!0});var nlt=s(Mj);MCo=r(nlt,"OpenAIGPTLMHeadModel"),nlt.forEach(t),ECo=r(Uye," (OpenAI GPT model)"),Uye.forEach(t),CCo=i(O),Nu=n(O,"LI",{});var Jye=s(Nu);Bde=n(Jye,"STRONG",{});var slt=s(Bde);wCo=r(slt,"retribert"),slt.forEach(t),ACo=r(Jye," \u2014 "),Ej=n(Jye,"A",{href:!0});var llt=s(Ej);LCo=r(llt,"RetriBertModel"),llt.forEach(t),yCo=r(Jye," (RetriBERT model)"),Jye.forEach(t),xCo=i(O),qu=n(O,"LI",{});var Yye=s(qu);Ide=n(Yye,"STRONG",{});var ilt=s(Ide);$Co=r(ilt,"roberta"),ilt.forEach(t),kCo=r(Yye," \u2014 "),Cj=n(Yye,"A",{href:!0});var dlt=s(Cj);SCo=r(dlt,"RobertaForMaskedLM"),dlt.forEach(t),RCo=r(Yye," (RoBERTa model)"),Yye.forEach(t),PCo=i(O),ju=n(O,"LI",{});var Kye=s(ju);Nde=n(Kye,"STRONG",{});var clt=s(Nde);BCo=r(clt,"splinter"),clt.forEach(t),ICo=r(Kye," \u2014 "),wj=n(Kye,"A",{href:!0});var flt=s(wj);NCo=r(flt,"SplinterForPreTraining"),flt.forEach(t),qCo=r(Kye," (Splinter model)"),Kye.forEach(t),jCo=i(O),Du=n(O,"LI",{});var Zye=s(Du);qde=n(Zye,"STRONG",{});var mlt=s(qde);DCo=r(mlt,"squeezebert"),mlt.forEach(t),GCo=r(Zye," \u2014 "),Aj=n(Zye,"A",{href:!0});var glt=s(Aj);OCo=r(glt,"SqueezeBertForMaskedLM"),glt.forEach(t),VCo=r(Zye," (SqueezeBERT model)"),Zye.forEach(t),XCo=i(O),Gu=n(O,"LI",{});var e8e=s(Gu);jde=n(e8e,"STRONG",{});var hlt=s(jde);zCo=r(hlt,"t5"),hlt.forEach(t),WCo=r(e8e," \u2014 "),Lj=n(e8e,"A",{href:!0});var plt=s(Lj);QCo=r(plt,"T5ForConditionalGeneration"),plt.forEach(t),HCo=r(e8e," (T5 model)"),e8e.forEach(t),UCo=i(O),Ou=n(O,"LI",{});var o8e=s(Ou);Dde=n(o8e,"STRONG",{});var _lt=s(Dde);JCo=r(_lt,"tapas"),_lt.forEach(t),YCo=r(o8e," \u2014 "),yj=n(o8e,"A",{href:!0});var ult=s(yj);KCo=r(ult,"TapasForMaskedLM"),ult.forEach(t),ZCo=r(o8e," (TAPAS model)"),o8e.forEach(t),e5o=i(O),Vu=n(O,"LI",{});var r8e=s(Vu);Gde=n(r8e,"STRONG",{});var blt=s(Gde);o5o=r(blt,"transfo-xl"),blt.forEach(t),r5o=r(r8e," \u2014 "),xj=n(r8e,"A",{href:!0});var vlt=s(xj);t5o=r(vlt,"TransfoXLLMHeadModel"),vlt.forEach(t),a5o=r(r8e," (Transformer-XL model)"),r8e.forEach(t),n5o=i(O),Xu=n(O,"LI",{});var t8e=s(Xu);Ode=n(t8e,"STRONG",{});var Flt=s(Ode);s5o=r(Flt,"unispeech"),Flt.forEach(t),l5o=r(t8e," \u2014 "),$j=n(t8e,"A",{href:!0});var Tlt=s($j);i5o=r(Tlt,"UniSpeechForPreTraining"),Tlt.forEach(t),d5o=r(t8e," (UniSpeech model)"),t8e.forEach(t),c5o=i(O),zu=n(O,"LI",{});var a8e=s(zu);Vde=n(a8e,"STRONG",{});var Mlt=s(Vde);f5o=r(Mlt,"unispeech-sat"),Mlt.forEach(t),m5o=r(a8e," \u2014 "),kj=n(a8e,"A",{href:!0});var Elt=s(kj);g5o=r(Elt,"UniSpeechSatForPreTraining"),Elt.forEach(t),h5o=r(a8e," (UniSpeechSat model)"),a8e.forEach(t),p5o=i(O),Wu=n(O,"LI",{});var n8e=s(Wu);Xde=n(n8e,"STRONG",{});var Clt=s(Xde);_5o=r(Clt,"visual_bert"),Clt.forEach(t),u5o=r(n8e," \u2014 "),Sj=n(n8e,"A",{href:!0});var wlt=s(Sj);b5o=r(wlt,"VisualBertForPreTraining"),wlt.forEach(t),v5o=r(n8e," (VisualBERT model)"),n8e.forEach(t),F5o=i(O),Qu=n(O,"LI",{});var s8e=s(Qu);zde=n(s8e,"STRONG",{});var Alt=s(zde);T5o=r(Alt,"vit_mae"),Alt.forEach(t),M5o=r(s8e," \u2014 "),Rj=n(s8e,"A",{href:!0});var Llt=s(Rj);E5o=r(Llt,"ViTMAEForPreTraining"),Llt.forEach(t),C5o=r(s8e," (ViTMAE model)"),s8e.forEach(t),w5o=i(O),Hu=n(O,"LI",{});var l8e=s(Hu);Wde=n(l8e,"STRONG",{});var ylt=s(Wde);A5o=r(ylt,"wav2vec2"),ylt.forEach(t),L5o=r(l8e," \u2014 "),Pj=n(l8e,"A",{href:!0});var xlt=s(Pj);y5o=r(xlt,"Wav2Vec2ForPreTraining"),xlt.forEach(t),x5o=r(l8e," (Wav2Vec2 model)"),l8e.forEach(t),$5o=i(O),Uu=n(O,"LI",{});var i8e=s(Uu);Qde=n(i8e,"STRONG",{});var $lt=s(Qde);k5o=r($lt,"wav2vec2-conformer"),$lt.forEach(t),S5o=r(i8e," \u2014 "),Bj=n(i8e,"A",{href:!0});var klt=s(Bj);R5o=r(klt,"Wav2Vec2ConformerForPreTraining"),klt.forEach(t),P5o=r(i8e," (Wav2Vec2-Conformer model)"),i8e.forEach(t),B5o=i(O),Ju=n(O,"LI",{});var d8e=s(Ju);Hde=n(d8e,"STRONG",{});var Slt=s(Hde);I5o=r(Slt,"xlm"),Slt.forEach(t),N5o=r(d8e," \u2014 "),Ij=n(d8e,"A",{href:!0});var Rlt=s(Ij);q5o=r(Rlt,"XLMWithLMHeadModel"),Rlt.forEach(t),j5o=r(d8e," (XLM model)"),d8e.forEach(t),D5o=i(O),Yu=n(O,"LI",{});var c8e=s(Yu);Ude=n(c8e,"STRONG",{});var Plt=s(Ude);G5o=r(Plt,"xlm-roberta"),Plt.forEach(t),O5o=r(c8e," \u2014 "),Nj=n(c8e,"A",{href:!0});var Blt=s(Nj);V5o=r(Blt,"XLMRobertaForMaskedLM"),Blt.forEach(t),X5o=r(c8e," (XLM-RoBERTa model)"),c8e.forEach(t),z5o=i(O),Ku=n(O,"LI",{});var f8e=s(Ku);Jde=n(f8e,"STRONG",{});var Ilt=s(Jde);W5o=r(Ilt,"xlm-roberta-xl"),Ilt.forEach(t),Q5o=r(f8e," \u2014 "),qj=n(f8e,"A",{href:!0});var Nlt=s(qj);H5o=r(Nlt,"XLMRobertaXLForMaskedLM"),Nlt.forEach(t),U5o=r(f8e," (XLM-RoBERTa-XL model)"),f8e.forEach(t),J5o=i(O),Zu=n(O,"LI",{});var m8e=s(Zu);Yde=n(m8e,"STRONG",{});var qlt=s(Yde);Y5o=r(qlt,"xlnet"),qlt.forEach(t),K5o=r(m8e," \u2014 "),jj=n(m8e,"A",{href:!0});var jlt=s(jj);Z5o=r(jlt,"XLNetLMHeadModel"),jlt.forEach(t),e0o=r(m8e," (XLNet model)"),m8e.forEach(t),O.forEach(t),o0o=i(ra),e4=n(ra,"P",{});var g8e=s(e4);r0o=r(g8e,"The model is set in evaluation mode by default using "),Kde=n(g8e,"CODE",{});var Dlt=s(Kde);t0o=r(Dlt,"model.eval()"),Dlt.forEach(t),a0o=r(g8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zde=n(g8e,"CODE",{});var Glt=s(Zde);n0o=r(Glt,"model.train()"),Glt.forEach(t),g8e.forEach(t),s0o=i(ra),T(o4.$$.fragment,ra),ra.forEach(t),Xs.forEach(t),pje=i(f),Ri=n(f,"H2",{class:!0});var vGe=s(Ri);r4=n(vGe,"A",{id:!0,class:!0,href:!0});var Olt=s(r4);ece=n(Olt,"SPAN",{});var Vlt=s(ece);T(ML.$$.fragment,Vlt),Vlt.forEach(t),Olt.forEach(t),l0o=i(vGe),oce=n(vGe,"SPAN",{});var Xlt=s(oce);i0o=r(Xlt,"AutoModelForCausalLM"),Xlt.forEach(t),vGe.forEach(t),_je=i(f),$o=n(f,"DIV",{class:!0});var zs=s($o);T(EL.$$.fragment,zs),d0o=i(zs),Pi=n(zs,"P",{});var UZ=s(Pi);c0o=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Dj=n(UZ,"A",{href:!0});var zlt=s(Dj);f0o=r(zlt,"from_pretrained()"),zlt.forEach(t),m0o=r(UZ," class method or the "),Gj=n(UZ,"A",{href:!0});var Wlt=s(Gj);g0o=r(Wlt,"from_config()"),Wlt.forEach(t),h0o=r(UZ,` class
method.`),UZ.forEach(t),p0o=i(zs),CL=n(zs,"P",{});var FGe=s(CL);_0o=r(FGe,"This class cannot be instantiated directly using "),rce=n(FGe,"CODE",{});var Qlt=s(rce);u0o=r(Qlt,"__init__()"),Qlt.forEach(t),b0o=r(FGe," (throws an error)."),FGe.forEach(t),v0o=i(zs),nt=n(zs,"DIV",{class:!0});var Hw=s(nt);T(wL.$$.fragment,Hw),F0o=i(Hw),tce=n(Hw,"P",{});var Hlt=s(tce);T0o=r(Hlt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Hlt.forEach(t),M0o=i(Hw),Bi=n(Hw,"P",{});var JZ=s(Bi);E0o=r(JZ,`Note:
Loading a model from its configuration file does `),ace=n(JZ,"STRONG",{});var Ult=s(ace);C0o=r(Ult,"not"),Ult.forEach(t),w0o=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oj=n(JZ,"A",{href:!0});var Jlt=s(Oj);A0o=r(Jlt,"from_pretrained()"),Jlt.forEach(t),L0o=r(JZ," to load the model weights."),JZ.forEach(t),y0o=i(Hw),T(t4.$$.fragment,Hw),Hw.forEach(t),x0o=i(zs),Ke=n(zs,"DIV",{class:!0});var ta=s(Ke);T(AL.$$.fragment,ta),$0o=i(ta),nce=n(ta,"P",{});var Ylt=s(nce);k0o=r(Ylt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ylt.forEach(t),S0o=i(ta),$a=n(ta,"P",{});var Uw=s($a);R0o=r(Uw,"The model class to instantiate is selected based on the "),sce=n(Uw,"CODE",{});var Klt=s(sce);P0o=r(Klt,"model_type"),Klt.forEach(t),B0o=r(Uw,` property of the config object (either
passed as an argument or loaded from `),lce=n(Uw,"CODE",{});var Zlt=s(lce);I0o=r(Zlt,"pretrained_model_name_or_path"),Zlt.forEach(t),N0o=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=n(Uw,"CODE",{});var eit=s(ice);q0o=r(eit,"pretrained_model_name_or_path"),eit.forEach(t),j0o=r(Uw,":"),Uw.forEach(t),D0o=i(ta),z=n(ta,"UL",{});var W=s(z);a4=n(W,"LI",{});var h8e=s(a4);dce=n(h8e,"STRONG",{});var oit=s(dce);G0o=r(oit,"bart"),oit.forEach(t),O0o=r(h8e," \u2014 "),Vj=n(h8e,"A",{href:!0});var rit=s(Vj);V0o=r(rit,"BartForCausalLM"),rit.forEach(t),X0o=r(h8e," (BART model)"),h8e.forEach(t),z0o=i(W),n4=n(W,"LI",{});var p8e=s(n4);cce=n(p8e,"STRONG",{});var tit=s(cce);W0o=r(tit,"bert"),tit.forEach(t),Q0o=r(p8e," \u2014 "),Xj=n(p8e,"A",{href:!0});var ait=s(Xj);H0o=r(ait,"BertLMHeadModel"),ait.forEach(t),U0o=r(p8e," (BERT model)"),p8e.forEach(t),J0o=i(W),s4=n(W,"LI",{});var _8e=s(s4);fce=n(_8e,"STRONG",{});var nit=s(fce);Y0o=r(nit,"bert-generation"),nit.forEach(t),K0o=r(_8e," \u2014 "),zj=n(_8e,"A",{href:!0});var sit=s(zj);Z0o=r(sit,"BertGenerationDecoder"),sit.forEach(t),ewo=r(_8e," (Bert Generation model)"),_8e.forEach(t),owo=i(W),l4=n(W,"LI",{});var u8e=s(l4);mce=n(u8e,"STRONG",{});var lit=s(mce);rwo=r(lit,"big_bird"),lit.forEach(t),two=r(u8e," \u2014 "),Wj=n(u8e,"A",{href:!0});var iit=s(Wj);awo=r(iit,"BigBirdForCausalLM"),iit.forEach(t),nwo=r(u8e," (BigBird model)"),u8e.forEach(t),swo=i(W),i4=n(W,"LI",{});var b8e=s(i4);gce=n(b8e,"STRONG",{});var dit=s(gce);lwo=r(dit,"bigbird_pegasus"),dit.forEach(t),iwo=r(b8e," \u2014 "),Qj=n(b8e,"A",{href:!0});var cit=s(Qj);dwo=r(cit,"BigBirdPegasusForCausalLM"),cit.forEach(t),cwo=r(b8e," (BigBird-Pegasus model)"),b8e.forEach(t),fwo=i(W),d4=n(W,"LI",{});var v8e=s(d4);hce=n(v8e,"STRONG",{});var fit=s(hce);mwo=r(fit,"blenderbot"),fit.forEach(t),gwo=r(v8e," \u2014 "),Hj=n(v8e,"A",{href:!0});var mit=s(Hj);hwo=r(mit,"BlenderbotForCausalLM"),mit.forEach(t),pwo=r(v8e," (Blenderbot model)"),v8e.forEach(t),_wo=i(W),c4=n(W,"LI",{});var F8e=s(c4);pce=n(F8e,"STRONG",{});var git=s(pce);uwo=r(git,"blenderbot-small"),git.forEach(t),bwo=r(F8e," \u2014 "),Uj=n(F8e,"A",{href:!0});var hit=s(Uj);vwo=r(hit,"BlenderbotSmallForCausalLM"),hit.forEach(t),Fwo=r(F8e," (BlenderbotSmall model)"),F8e.forEach(t),Two=i(W),f4=n(W,"LI",{});var T8e=s(f4);_ce=n(T8e,"STRONG",{});var pit=s(_ce);Mwo=r(pit,"camembert"),pit.forEach(t),Ewo=r(T8e," \u2014 "),Jj=n(T8e,"A",{href:!0});var _it=s(Jj);Cwo=r(_it,"CamembertForCausalLM"),_it.forEach(t),wwo=r(T8e," (CamemBERT model)"),T8e.forEach(t),Awo=i(W),m4=n(W,"LI",{});var M8e=s(m4);uce=n(M8e,"STRONG",{});var uit=s(uce);Lwo=r(uit,"codegen"),uit.forEach(t),ywo=r(M8e," \u2014 "),Yj=n(M8e,"A",{href:!0});var bit=s(Yj);xwo=r(bit,"CodeGenForCausalLM"),bit.forEach(t),$wo=r(M8e," (CodeGen model)"),M8e.forEach(t),kwo=i(W),g4=n(W,"LI",{});var E8e=s(g4);bce=n(E8e,"STRONG",{});var vit=s(bce);Swo=r(vit,"ctrl"),vit.forEach(t),Rwo=r(E8e," \u2014 "),Kj=n(E8e,"A",{href:!0});var Fit=s(Kj);Pwo=r(Fit,"CTRLLMHeadModel"),Fit.forEach(t),Bwo=r(E8e," (CTRL model)"),E8e.forEach(t),Iwo=i(W),h4=n(W,"LI",{});var C8e=s(h4);vce=n(C8e,"STRONG",{});var Tit=s(vce);Nwo=r(Tit,"data2vec-text"),Tit.forEach(t),qwo=r(C8e," \u2014 "),Zj=n(C8e,"A",{href:!0});var Mit=s(Zj);jwo=r(Mit,"Data2VecTextForCausalLM"),Mit.forEach(t),Dwo=r(C8e," (Data2VecText model)"),C8e.forEach(t),Gwo=i(W),p4=n(W,"LI",{});var w8e=s(p4);Fce=n(w8e,"STRONG",{});var Eit=s(Fce);Owo=r(Eit,"electra"),Eit.forEach(t),Vwo=r(w8e," \u2014 "),eD=n(w8e,"A",{href:!0});var Cit=s(eD);Xwo=r(Cit,"ElectraForCausalLM"),Cit.forEach(t),zwo=r(w8e," (ELECTRA model)"),w8e.forEach(t),Wwo=i(W),_4=n(W,"LI",{});var A8e=s(_4);Tce=n(A8e,"STRONG",{});var wit=s(Tce);Qwo=r(wit,"gpt2"),wit.forEach(t),Hwo=r(A8e," \u2014 "),oD=n(A8e,"A",{href:!0});var Ait=s(oD);Uwo=r(Ait,"GPT2LMHeadModel"),Ait.forEach(t),Jwo=r(A8e," (OpenAI GPT-2 model)"),A8e.forEach(t),Ywo=i(W),u4=n(W,"LI",{});var L8e=s(u4);Mce=n(L8e,"STRONG",{});var Lit=s(Mce);Kwo=r(Lit,"gpt_neo"),Lit.forEach(t),Zwo=r(L8e," \u2014 "),rD=n(L8e,"A",{href:!0});var yit=s(rD);eAo=r(yit,"GPTNeoForCausalLM"),yit.forEach(t),oAo=r(L8e," (GPT Neo model)"),L8e.forEach(t),rAo=i(W),b4=n(W,"LI",{});var y8e=s(b4);Ece=n(y8e,"STRONG",{});var xit=s(Ece);tAo=r(xit,"gpt_neox"),xit.forEach(t),aAo=r(y8e," \u2014 "),tD=n(y8e,"A",{href:!0});var $it=s(tD);nAo=r($it,"GPTNeoXForCausalLM"),$it.forEach(t),sAo=r(y8e," (GPT NeoX model)"),y8e.forEach(t),lAo=i(W),v4=n(W,"LI",{});var x8e=s(v4);Cce=n(x8e,"STRONG",{});var kit=s(Cce);iAo=r(kit,"gptj"),kit.forEach(t),dAo=r(x8e," \u2014 "),aD=n(x8e,"A",{href:!0});var Sit=s(aD);cAo=r(Sit,"GPTJForCausalLM"),Sit.forEach(t),fAo=r(x8e," (GPT-J model)"),x8e.forEach(t),mAo=i(W),F4=n(W,"LI",{});var $8e=s(F4);wce=n($8e,"STRONG",{});var Rit=s(wce);gAo=r(Rit,"marian"),Rit.forEach(t),hAo=r($8e," \u2014 "),nD=n($8e,"A",{href:!0});var Pit=s(nD);pAo=r(Pit,"MarianForCausalLM"),Pit.forEach(t),_Ao=r($8e," (Marian model)"),$8e.forEach(t),uAo=i(W),T4=n(W,"LI",{});var k8e=s(T4);Ace=n(k8e,"STRONG",{});var Bit=s(Ace);bAo=r(Bit,"mbart"),Bit.forEach(t),vAo=r(k8e," \u2014 "),sD=n(k8e,"A",{href:!0});var Iit=s(sD);FAo=r(Iit,"MBartForCausalLM"),Iit.forEach(t),TAo=r(k8e," (mBART model)"),k8e.forEach(t),MAo=i(W),M4=n(W,"LI",{});var S8e=s(M4);Lce=n(S8e,"STRONG",{});var Nit=s(Lce);EAo=r(Nit,"megatron-bert"),Nit.forEach(t),CAo=r(S8e," \u2014 "),lD=n(S8e,"A",{href:!0});var qit=s(lD);wAo=r(qit,"MegatronBertForCausalLM"),qit.forEach(t),AAo=r(S8e," (Megatron-BERT model)"),S8e.forEach(t),LAo=i(W),E4=n(W,"LI",{});var R8e=s(E4);yce=n(R8e,"STRONG",{});var jit=s(yce);yAo=r(jit,"openai-gpt"),jit.forEach(t),xAo=r(R8e," \u2014 "),iD=n(R8e,"A",{href:!0});var Dit=s(iD);$Ao=r(Dit,"OpenAIGPTLMHeadModel"),Dit.forEach(t),kAo=r(R8e," (OpenAI GPT model)"),R8e.forEach(t),SAo=i(W),C4=n(W,"LI",{});var P8e=s(C4);xce=n(P8e,"STRONG",{});var Git=s(xce);RAo=r(Git,"opt"),Git.forEach(t),PAo=r(P8e," \u2014 "),dD=n(P8e,"A",{href:!0});var Oit=s(dD);BAo=r(Oit,"OPTForCausalLM"),Oit.forEach(t),IAo=r(P8e," (OPT model)"),P8e.forEach(t),NAo=i(W),w4=n(W,"LI",{});var B8e=s(w4);$ce=n(B8e,"STRONG",{});var Vit=s($ce);qAo=r(Vit,"pegasus"),Vit.forEach(t),jAo=r(B8e," \u2014 "),cD=n(B8e,"A",{href:!0});var Xit=s(cD);DAo=r(Xit,"PegasusForCausalLM"),Xit.forEach(t),GAo=r(B8e," (Pegasus model)"),B8e.forEach(t),OAo=i(W),A4=n(W,"LI",{});var I8e=s(A4);kce=n(I8e,"STRONG",{});var zit=s(kce);VAo=r(zit,"plbart"),zit.forEach(t),XAo=r(I8e," \u2014 "),fD=n(I8e,"A",{href:!0});var Wit=s(fD);zAo=r(Wit,"PLBartForCausalLM"),Wit.forEach(t),WAo=r(I8e," (PLBart model)"),I8e.forEach(t),QAo=i(W),L4=n(W,"LI",{});var N8e=s(L4);Sce=n(N8e,"STRONG",{});var Qit=s(Sce);HAo=r(Qit,"prophetnet"),Qit.forEach(t),UAo=r(N8e," \u2014 "),mD=n(N8e,"A",{href:!0});var Hit=s(mD);JAo=r(Hit,"ProphetNetForCausalLM"),Hit.forEach(t),YAo=r(N8e," (ProphetNet model)"),N8e.forEach(t),KAo=i(W),y4=n(W,"LI",{});var q8e=s(y4);Rce=n(q8e,"STRONG",{});var Uit=s(Rce);ZAo=r(Uit,"qdqbert"),Uit.forEach(t),e6o=r(q8e," \u2014 "),gD=n(q8e,"A",{href:!0});var Jit=s(gD);o6o=r(Jit,"QDQBertLMHeadModel"),Jit.forEach(t),r6o=r(q8e," (QDQBert model)"),q8e.forEach(t),t6o=i(W),x4=n(W,"LI",{});var j8e=s(x4);Pce=n(j8e,"STRONG",{});var Yit=s(Pce);a6o=r(Yit,"reformer"),Yit.forEach(t),n6o=r(j8e," \u2014 "),hD=n(j8e,"A",{href:!0});var Kit=s(hD);s6o=r(Kit,"ReformerModelWithLMHead"),Kit.forEach(t),l6o=r(j8e," (Reformer model)"),j8e.forEach(t),i6o=i(W),$4=n(W,"LI",{});var D8e=s($4);Bce=n(D8e,"STRONG",{});var Zit=s(Bce);d6o=r(Zit,"rembert"),Zit.forEach(t),c6o=r(D8e," \u2014 "),pD=n(D8e,"A",{href:!0});var edt=s(pD);f6o=r(edt,"RemBertForCausalLM"),edt.forEach(t),m6o=r(D8e," (RemBERT model)"),D8e.forEach(t),g6o=i(W),k4=n(W,"LI",{});var G8e=s(k4);Ice=n(G8e,"STRONG",{});var odt=s(Ice);h6o=r(odt,"roberta"),odt.forEach(t),p6o=r(G8e," \u2014 "),_D=n(G8e,"A",{href:!0});var rdt=s(_D);_6o=r(rdt,"RobertaForCausalLM"),rdt.forEach(t),u6o=r(G8e," (RoBERTa model)"),G8e.forEach(t),b6o=i(W),S4=n(W,"LI",{});var O8e=s(S4);Nce=n(O8e,"STRONG",{});var tdt=s(Nce);v6o=r(tdt,"roformer"),tdt.forEach(t),F6o=r(O8e," \u2014 "),uD=n(O8e,"A",{href:!0});var adt=s(uD);T6o=r(adt,"RoFormerForCausalLM"),adt.forEach(t),M6o=r(O8e," (RoFormer model)"),O8e.forEach(t),E6o=i(W),R4=n(W,"LI",{});var V8e=s(R4);qce=n(V8e,"STRONG",{});var ndt=s(qce);C6o=r(ndt,"speech_to_text_2"),ndt.forEach(t),w6o=r(V8e," \u2014 "),bD=n(V8e,"A",{href:!0});var sdt=s(bD);A6o=r(sdt,"Speech2Text2ForCausalLM"),sdt.forEach(t),L6o=r(V8e," (Speech2Text2 model)"),V8e.forEach(t),y6o=i(W),P4=n(W,"LI",{});var X8e=s(P4);jce=n(X8e,"STRONG",{});var ldt=s(jce);x6o=r(ldt,"transfo-xl"),ldt.forEach(t),$6o=r(X8e," \u2014 "),vD=n(X8e,"A",{href:!0});var idt=s(vD);k6o=r(idt,"TransfoXLLMHeadModel"),idt.forEach(t),S6o=r(X8e," (Transformer-XL model)"),X8e.forEach(t),R6o=i(W),B4=n(W,"LI",{});var z8e=s(B4);Dce=n(z8e,"STRONG",{});var ddt=s(Dce);P6o=r(ddt,"trocr"),ddt.forEach(t),B6o=r(z8e," \u2014 "),FD=n(z8e,"A",{href:!0});var cdt=s(FD);I6o=r(cdt,"TrOCRForCausalLM"),cdt.forEach(t),N6o=r(z8e," (TrOCR model)"),z8e.forEach(t),q6o=i(W),I4=n(W,"LI",{});var W8e=s(I4);Gce=n(W8e,"STRONG",{});var fdt=s(Gce);j6o=r(fdt,"xglm"),fdt.forEach(t),D6o=r(W8e," \u2014 "),TD=n(W8e,"A",{href:!0});var mdt=s(TD);G6o=r(mdt,"XGLMForCausalLM"),mdt.forEach(t),O6o=r(W8e," (XGLM model)"),W8e.forEach(t),V6o=i(W),N4=n(W,"LI",{});var Q8e=s(N4);Oce=n(Q8e,"STRONG",{});var gdt=s(Oce);X6o=r(gdt,"xlm"),gdt.forEach(t),z6o=r(Q8e," \u2014 "),MD=n(Q8e,"A",{href:!0});var hdt=s(MD);W6o=r(hdt,"XLMWithLMHeadModel"),hdt.forEach(t),Q6o=r(Q8e," (XLM model)"),Q8e.forEach(t),H6o=i(W),q4=n(W,"LI",{});var H8e=s(q4);Vce=n(H8e,"STRONG",{});var pdt=s(Vce);U6o=r(pdt,"xlm-prophetnet"),pdt.forEach(t),J6o=r(H8e," \u2014 "),ED=n(H8e,"A",{href:!0});var _dt=s(ED);Y6o=r(_dt,"XLMProphetNetForCausalLM"),_dt.forEach(t),K6o=r(H8e," (XLM-ProphetNet model)"),H8e.forEach(t),Z6o=i(W),j4=n(W,"LI",{});var U8e=s(j4);Xce=n(U8e,"STRONG",{});var udt=s(Xce);eLo=r(udt,"xlm-roberta"),udt.forEach(t),oLo=r(U8e," \u2014 "),CD=n(U8e,"A",{href:!0});var bdt=s(CD);rLo=r(bdt,"XLMRobertaForCausalLM"),bdt.forEach(t),tLo=r(U8e," (XLM-RoBERTa model)"),U8e.forEach(t),aLo=i(W),D4=n(W,"LI",{});var J8e=s(D4);zce=n(J8e,"STRONG",{});var vdt=s(zce);nLo=r(vdt,"xlm-roberta-xl"),vdt.forEach(t),sLo=r(J8e," \u2014 "),wD=n(J8e,"A",{href:!0});var Fdt=s(wD);lLo=r(Fdt,"XLMRobertaXLForCausalLM"),Fdt.forEach(t),iLo=r(J8e," (XLM-RoBERTa-XL model)"),J8e.forEach(t),dLo=i(W),G4=n(W,"LI",{});var Y8e=s(G4);Wce=n(Y8e,"STRONG",{});var Tdt=s(Wce);cLo=r(Tdt,"xlnet"),Tdt.forEach(t),fLo=r(Y8e," \u2014 "),AD=n(Y8e,"A",{href:!0});var Mdt=s(AD);mLo=r(Mdt,"XLNetLMHeadModel"),Mdt.forEach(t),gLo=r(Y8e," (XLNet model)"),Y8e.forEach(t),W.forEach(t),hLo=i(ta),O4=n(ta,"P",{});var K8e=s(O4);pLo=r(K8e,"The model is set in evaluation mode by default using "),Qce=n(K8e,"CODE",{});var Edt=s(Qce);_Lo=r(Edt,"model.eval()"),Edt.forEach(t),uLo=r(K8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hce=n(K8e,"CODE",{});var Cdt=s(Hce);bLo=r(Cdt,"model.train()"),Cdt.forEach(t),K8e.forEach(t),vLo=i(ta),T(V4.$$.fragment,ta),ta.forEach(t),zs.forEach(t),uje=i(f),Ii=n(f,"H2",{class:!0});var TGe=s(Ii);X4=n(TGe,"A",{id:!0,class:!0,href:!0});var wdt=s(X4);Uce=n(wdt,"SPAN",{});var Adt=s(Uce);T(LL.$$.fragment,Adt),Adt.forEach(t),wdt.forEach(t),FLo=i(TGe),Jce=n(TGe,"SPAN",{});var Ldt=s(Jce);TLo=r(Ldt,"AutoModelForMaskedLM"),Ldt.forEach(t),TGe.forEach(t),bje=i(f),ko=n(f,"DIV",{class:!0});var Ws=s(ko);T(yL.$$.fragment,Ws),MLo=i(Ws),Ni=n(Ws,"P",{});var YZ=s(Ni);ELo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LD=n(YZ,"A",{href:!0});var ydt=s(LD);CLo=r(ydt,"from_pretrained()"),ydt.forEach(t),wLo=r(YZ," class method or the "),yD=n(YZ,"A",{href:!0});var xdt=s(yD);ALo=r(xdt,"from_config()"),xdt.forEach(t),LLo=r(YZ,` class
method.`),YZ.forEach(t),yLo=i(Ws),xL=n(Ws,"P",{});var MGe=s(xL);xLo=r(MGe,"This class cannot be instantiated directly using "),Yce=n(MGe,"CODE",{});var $dt=s(Yce);$Lo=r($dt,"__init__()"),$dt.forEach(t),kLo=r(MGe," (throws an error)."),MGe.forEach(t),SLo=i(Ws),st=n(Ws,"DIV",{class:!0});var Jw=s(st);T($L.$$.fragment,Jw),RLo=i(Jw),Kce=n(Jw,"P",{});var kdt=s(Kce);PLo=r(kdt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kdt.forEach(t),BLo=i(Jw),qi=n(Jw,"P",{});var KZ=s(qi);ILo=r(KZ,`Note:
Loading a model from its configuration file does `),Zce=n(KZ,"STRONG",{});var Sdt=s(Zce);NLo=r(Sdt,"not"),Sdt.forEach(t),qLo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xD=n(KZ,"A",{href:!0});var Rdt=s(xD);jLo=r(Rdt,"from_pretrained()"),Rdt.forEach(t),DLo=r(KZ," to load the model weights."),KZ.forEach(t),GLo=i(Jw),T(z4.$$.fragment,Jw),Jw.forEach(t),OLo=i(Ws),Ze=n(Ws,"DIV",{class:!0});var aa=s(Ze);T(kL.$$.fragment,aa),VLo=i(aa),efe=n(aa,"P",{});var Pdt=s(efe);XLo=r(Pdt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Pdt.forEach(t),zLo=i(aa),ka=n(aa,"P",{});var Yw=s(ka);WLo=r(Yw,"The model class to instantiate is selected based on the "),ofe=n(Yw,"CODE",{});var Bdt=s(ofe);QLo=r(Bdt,"model_type"),Bdt.forEach(t),HLo=r(Yw,` property of the config object (either
passed as an argument or loaded from `),rfe=n(Yw,"CODE",{});var Idt=s(rfe);ULo=r(Idt,"pretrained_model_name_or_path"),Idt.forEach(t),JLo=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tfe=n(Yw,"CODE",{});var Ndt=s(tfe);YLo=r(Ndt,"pretrained_model_name_or_path"),Ndt.forEach(t),KLo=r(Yw,":"),Yw.forEach(t),ZLo=i(aa),Q=n(aa,"UL",{});var H=s(Q);W4=n(H,"LI",{});var Z8e=s(W4);afe=n(Z8e,"STRONG",{});var qdt=s(afe);eyo=r(qdt,"albert"),qdt.forEach(t),oyo=r(Z8e," \u2014 "),$D=n(Z8e,"A",{href:!0});var jdt=s($D);ryo=r(jdt,"AlbertForMaskedLM"),jdt.forEach(t),tyo=r(Z8e," (ALBERT model)"),Z8e.forEach(t),ayo=i(H),Q4=n(H,"LI",{});var e9e=s(Q4);nfe=n(e9e,"STRONG",{});var Ddt=s(nfe);nyo=r(Ddt,"bart"),Ddt.forEach(t),syo=r(e9e," \u2014 "),kD=n(e9e,"A",{href:!0});var Gdt=s(kD);lyo=r(Gdt,"BartForConditionalGeneration"),Gdt.forEach(t),iyo=r(e9e," (BART model)"),e9e.forEach(t),dyo=i(H),H4=n(H,"LI",{});var o9e=s(H4);sfe=n(o9e,"STRONG",{});var Odt=s(sfe);cyo=r(Odt,"bert"),Odt.forEach(t),fyo=r(o9e," \u2014 "),SD=n(o9e,"A",{href:!0});var Vdt=s(SD);myo=r(Vdt,"BertForMaskedLM"),Vdt.forEach(t),gyo=r(o9e," (BERT model)"),o9e.forEach(t),hyo=i(H),U4=n(H,"LI",{});var r9e=s(U4);lfe=n(r9e,"STRONG",{});var Xdt=s(lfe);pyo=r(Xdt,"big_bird"),Xdt.forEach(t),_yo=r(r9e," \u2014 "),RD=n(r9e,"A",{href:!0});var zdt=s(RD);uyo=r(zdt,"BigBirdForMaskedLM"),zdt.forEach(t),byo=r(r9e," (BigBird model)"),r9e.forEach(t),vyo=i(H),J4=n(H,"LI",{});var t9e=s(J4);ife=n(t9e,"STRONG",{});var Wdt=s(ife);Fyo=r(Wdt,"camembert"),Wdt.forEach(t),Tyo=r(t9e," \u2014 "),PD=n(t9e,"A",{href:!0});var Qdt=s(PD);Myo=r(Qdt,"CamembertForMaskedLM"),Qdt.forEach(t),Eyo=r(t9e," (CamemBERT model)"),t9e.forEach(t),Cyo=i(H),Y4=n(H,"LI",{});var a9e=s(Y4);dfe=n(a9e,"STRONG",{});var Hdt=s(dfe);wyo=r(Hdt,"convbert"),Hdt.forEach(t),Ayo=r(a9e," \u2014 "),BD=n(a9e,"A",{href:!0});var Udt=s(BD);Lyo=r(Udt,"ConvBertForMaskedLM"),Udt.forEach(t),yyo=r(a9e," (ConvBERT model)"),a9e.forEach(t),xyo=i(H),K4=n(H,"LI",{});var n9e=s(K4);cfe=n(n9e,"STRONG",{});var Jdt=s(cfe);$yo=r(Jdt,"data2vec-text"),Jdt.forEach(t),kyo=r(n9e," \u2014 "),ID=n(n9e,"A",{href:!0});var Ydt=s(ID);Syo=r(Ydt,"Data2VecTextForMaskedLM"),Ydt.forEach(t),Ryo=r(n9e," (Data2VecText model)"),n9e.forEach(t),Pyo=i(H),Z4=n(H,"LI",{});var s9e=s(Z4);ffe=n(s9e,"STRONG",{});var Kdt=s(ffe);Byo=r(Kdt,"deberta"),Kdt.forEach(t),Iyo=r(s9e," \u2014 "),ND=n(s9e,"A",{href:!0});var Zdt=s(ND);Nyo=r(Zdt,"DebertaForMaskedLM"),Zdt.forEach(t),qyo=r(s9e," (DeBERTa model)"),s9e.forEach(t),jyo=i(H),e1=n(H,"LI",{});var l9e=s(e1);mfe=n(l9e,"STRONG",{});var ect=s(mfe);Dyo=r(ect,"deberta-v2"),ect.forEach(t),Gyo=r(l9e," \u2014 "),qD=n(l9e,"A",{href:!0});var oct=s(qD);Oyo=r(oct,"DebertaV2ForMaskedLM"),oct.forEach(t),Vyo=r(l9e," (DeBERTa-v2 model)"),l9e.forEach(t),Xyo=i(H),o1=n(H,"LI",{});var i9e=s(o1);gfe=n(i9e,"STRONG",{});var rct=s(gfe);zyo=r(rct,"distilbert"),rct.forEach(t),Wyo=r(i9e," \u2014 "),jD=n(i9e,"A",{href:!0});var tct=s(jD);Qyo=r(tct,"DistilBertForMaskedLM"),tct.forEach(t),Hyo=r(i9e," (DistilBERT model)"),i9e.forEach(t),Uyo=i(H),r1=n(H,"LI",{});var d9e=s(r1);hfe=n(d9e,"STRONG",{});var act=s(hfe);Jyo=r(act,"electra"),act.forEach(t),Yyo=r(d9e," \u2014 "),DD=n(d9e,"A",{href:!0});var nct=s(DD);Kyo=r(nct,"ElectraForMaskedLM"),nct.forEach(t),Zyo=r(d9e," (ELECTRA model)"),d9e.forEach(t),e8o=i(H),t1=n(H,"LI",{});var c9e=s(t1);pfe=n(c9e,"STRONG",{});var sct=s(pfe);o8o=r(sct,"flaubert"),sct.forEach(t),r8o=r(c9e," \u2014 "),GD=n(c9e,"A",{href:!0});var lct=s(GD);t8o=r(lct,"FlaubertWithLMHeadModel"),lct.forEach(t),a8o=r(c9e," (FlauBERT model)"),c9e.forEach(t),n8o=i(H),a1=n(H,"LI",{});var f9e=s(a1);_fe=n(f9e,"STRONG",{});var ict=s(_fe);s8o=r(ict,"fnet"),ict.forEach(t),l8o=r(f9e," \u2014 "),OD=n(f9e,"A",{href:!0});var dct=s(OD);i8o=r(dct,"FNetForMaskedLM"),dct.forEach(t),d8o=r(f9e," (FNet model)"),f9e.forEach(t),c8o=i(H),n1=n(H,"LI",{});var m9e=s(n1);ufe=n(m9e,"STRONG",{});var cct=s(ufe);f8o=r(cct,"funnel"),cct.forEach(t),m8o=r(m9e," \u2014 "),VD=n(m9e,"A",{href:!0});var fct=s(VD);g8o=r(fct,"FunnelForMaskedLM"),fct.forEach(t),h8o=r(m9e," (Funnel Transformer model)"),m9e.forEach(t),p8o=i(H),s1=n(H,"LI",{});var g9e=s(s1);bfe=n(g9e,"STRONG",{});var mct=s(bfe);_8o=r(mct,"ibert"),mct.forEach(t),u8o=r(g9e," \u2014 "),XD=n(g9e,"A",{href:!0});var gct=s(XD);b8o=r(gct,"IBertForMaskedLM"),gct.forEach(t),v8o=r(g9e," (I-BERT model)"),g9e.forEach(t),F8o=i(H),l1=n(H,"LI",{});var h9e=s(l1);vfe=n(h9e,"STRONG",{});var hct=s(vfe);T8o=r(hct,"layoutlm"),hct.forEach(t),M8o=r(h9e," \u2014 "),zD=n(h9e,"A",{href:!0});var pct=s(zD);E8o=r(pct,"LayoutLMForMaskedLM"),pct.forEach(t),C8o=r(h9e," (LayoutLM model)"),h9e.forEach(t),w8o=i(H),i1=n(H,"LI",{});var p9e=s(i1);Ffe=n(p9e,"STRONG",{});var _ct=s(Ffe);A8o=r(_ct,"longformer"),_ct.forEach(t),L8o=r(p9e," \u2014 "),WD=n(p9e,"A",{href:!0});var uct=s(WD);y8o=r(uct,"LongformerForMaskedLM"),uct.forEach(t),x8o=r(p9e," (Longformer model)"),p9e.forEach(t),$8o=i(H),d1=n(H,"LI",{});var _9e=s(d1);Tfe=n(_9e,"STRONG",{});var bct=s(Tfe);k8o=r(bct,"luke"),bct.forEach(t),S8o=r(_9e," \u2014 "),QD=n(_9e,"A",{href:!0});var vct=s(QD);R8o=r(vct,"LukeForMaskedLM"),vct.forEach(t),P8o=r(_9e," (LUKE model)"),_9e.forEach(t),B8o=i(H),c1=n(H,"LI",{});var u9e=s(c1);Mfe=n(u9e,"STRONG",{});var Fct=s(Mfe);I8o=r(Fct,"mbart"),Fct.forEach(t),N8o=r(u9e," \u2014 "),HD=n(u9e,"A",{href:!0});var Tct=s(HD);q8o=r(Tct,"MBartForConditionalGeneration"),Tct.forEach(t),j8o=r(u9e," (mBART model)"),u9e.forEach(t),D8o=i(H),f1=n(H,"LI",{});var b9e=s(f1);Efe=n(b9e,"STRONG",{});var Mct=s(Efe);G8o=r(Mct,"megatron-bert"),Mct.forEach(t),O8o=r(b9e," \u2014 "),UD=n(b9e,"A",{href:!0});var Ect=s(UD);V8o=r(Ect,"MegatronBertForMaskedLM"),Ect.forEach(t),X8o=r(b9e," (Megatron-BERT model)"),b9e.forEach(t),z8o=i(H),m1=n(H,"LI",{});var v9e=s(m1);Cfe=n(v9e,"STRONG",{});var Cct=s(Cfe);W8o=r(Cct,"mobilebert"),Cct.forEach(t),Q8o=r(v9e," \u2014 "),JD=n(v9e,"A",{href:!0});var wct=s(JD);H8o=r(wct,"MobileBertForMaskedLM"),wct.forEach(t),U8o=r(v9e," (MobileBERT model)"),v9e.forEach(t),J8o=i(H),g1=n(H,"LI",{});var F9e=s(g1);wfe=n(F9e,"STRONG",{});var Act=s(wfe);Y8o=r(Act,"mpnet"),Act.forEach(t),K8o=r(F9e," \u2014 "),YD=n(F9e,"A",{href:!0});var Lct=s(YD);Z8o=r(Lct,"MPNetForMaskedLM"),Lct.forEach(t),e9o=r(F9e," (MPNet model)"),F9e.forEach(t),o9o=i(H),h1=n(H,"LI",{});var T9e=s(h1);Afe=n(T9e,"STRONG",{});var yct=s(Afe);r9o=r(yct,"nystromformer"),yct.forEach(t),t9o=r(T9e," \u2014 "),KD=n(T9e,"A",{href:!0});var xct=s(KD);a9o=r(xct,"NystromformerForMaskedLM"),xct.forEach(t),n9o=r(T9e," (Nystr\xF6mformer model)"),T9e.forEach(t),s9o=i(H),p1=n(H,"LI",{});var M9e=s(p1);Lfe=n(M9e,"STRONG",{});var $ct=s(Lfe);l9o=r($ct,"perceiver"),$ct.forEach(t),i9o=r(M9e," \u2014 "),ZD=n(M9e,"A",{href:!0});var kct=s(ZD);d9o=r(kct,"PerceiverForMaskedLM"),kct.forEach(t),c9o=r(M9e," (Perceiver model)"),M9e.forEach(t),f9o=i(H),_1=n(H,"LI",{});var E9e=s(_1);yfe=n(E9e,"STRONG",{});var Sct=s(yfe);m9o=r(Sct,"qdqbert"),Sct.forEach(t),g9o=r(E9e," \u2014 "),eG=n(E9e,"A",{href:!0});var Rct=s(eG);h9o=r(Rct,"QDQBertForMaskedLM"),Rct.forEach(t),p9o=r(E9e," (QDQBert model)"),E9e.forEach(t),_9o=i(H),u1=n(H,"LI",{});var C9e=s(u1);xfe=n(C9e,"STRONG",{});var Pct=s(xfe);u9o=r(Pct,"reformer"),Pct.forEach(t),b9o=r(C9e," \u2014 "),oG=n(C9e,"A",{href:!0});var Bct=s(oG);v9o=r(Bct,"ReformerForMaskedLM"),Bct.forEach(t),F9o=r(C9e," (Reformer model)"),C9e.forEach(t),T9o=i(H),b1=n(H,"LI",{});var w9e=s(b1);$fe=n(w9e,"STRONG",{});var Ict=s($fe);M9o=r(Ict,"rembert"),Ict.forEach(t),E9o=r(w9e," \u2014 "),rG=n(w9e,"A",{href:!0});var Nct=s(rG);C9o=r(Nct,"RemBertForMaskedLM"),Nct.forEach(t),w9o=r(w9e," (RemBERT model)"),w9e.forEach(t),A9o=i(H),v1=n(H,"LI",{});var A9e=s(v1);kfe=n(A9e,"STRONG",{});var qct=s(kfe);L9o=r(qct,"roberta"),qct.forEach(t),y9o=r(A9e," \u2014 "),tG=n(A9e,"A",{href:!0});var jct=s(tG);x9o=r(jct,"RobertaForMaskedLM"),jct.forEach(t),$9o=r(A9e," (RoBERTa model)"),A9e.forEach(t),k9o=i(H),F1=n(H,"LI",{});var L9e=s(F1);Sfe=n(L9e,"STRONG",{});var Dct=s(Sfe);S9o=r(Dct,"roformer"),Dct.forEach(t),R9o=r(L9e," \u2014 "),aG=n(L9e,"A",{href:!0});var Gct=s(aG);P9o=r(Gct,"RoFormerForMaskedLM"),Gct.forEach(t),B9o=r(L9e," (RoFormer model)"),L9e.forEach(t),I9o=i(H),T1=n(H,"LI",{});var y9e=s(T1);Rfe=n(y9e,"STRONG",{});var Oct=s(Rfe);N9o=r(Oct,"squeezebert"),Oct.forEach(t),q9o=r(y9e," \u2014 "),nG=n(y9e,"A",{href:!0});var Vct=s(nG);j9o=r(Vct,"SqueezeBertForMaskedLM"),Vct.forEach(t),D9o=r(y9e," (SqueezeBERT model)"),y9e.forEach(t),G9o=i(H),M1=n(H,"LI",{});var x9e=s(M1);Pfe=n(x9e,"STRONG",{});var Xct=s(Pfe);O9o=r(Xct,"tapas"),Xct.forEach(t),V9o=r(x9e," \u2014 "),sG=n(x9e,"A",{href:!0});var zct=s(sG);X9o=r(zct,"TapasForMaskedLM"),zct.forEach(t),z9o=r(x9e," (TAPAS model)"),x9e.forEach(t),W9o=i(H),E1=n(H,"LI",{});var $9e=s(E1);Bfe=n($9e,"STRONG",{});var Wct=s(Bfe);Q9o=r(Wct,"wav2vec2"),Wct.forEach(t),H9o=r($9e," \u2014 "),Ife=n($9e,"CODE",{});var Qct=s(Ife);U9o=r(Qct,"Wav2Vec2ForMaskedLM"),Qct.forEach(t),J9o=r($9e," (Wav2Vec2 model)"),$9e.forEach(t),Y9o=i(H),C1=n(H,"LI",{});var k9e=s(C1);Nfe=n(k9e,"STRONG",{});var Hct=s(Nfe);K9o=r(Hct,"xlm"),Hct.forEach(t),Z9o=r(k9e," \u2014 "),lG=n(k9e,"A",{href:!0});var Uct=s(lG);exo=r(Uct,"XLMWithLMHeadModel"),Uct.forEach(t),oxo=r(k9e," (XLM model)"),k9e.forEach(t),rxo=i(H),w1=n(H,"LI",{});var S9e=s(w1);qfe=n(S9e,"STRONG",{});var Jct=s(qfe);txo=r(Jct,"xlm-roberta"),Jct.forEach(t),axo=r(S9e," \u2014 "),iG=n(S9e,"A",{href:!0});var Yct=s(iG);nxo=r(Yct,"XLMRobertaForMaskedLM"),Yct.forEach(t),sxo=r(S9e," (XLM-RoBERTa model)"),S9e.forEach(t),lxo=i(H),A1=n(H,"LI",{});var R9e=s(A1);jfe=n(R9e,"STRONG",{});var Kct=s(jfe);ixo=r(Kct,"xlm-roberta-xl"),Kct.forEach(t),dxo=r(R9e," \u2014 "),dG=n(R9e,"A",{href:!0});var Zct=s(dG);cxo=r(Zct,"XLMRobertaXLForMaskedLM"),Zct.forEach(t),fxo=r(R9e," (XLM-RoBERTa-XL model)"),R9e.forEach(t),mxo=i(H),L1=n(H,"LI",{});var P9e=s(L1);Dfe=n(P9e,"STRONG",{});var eft=s(Dfe);gxo=r(eft,"yoso"),eft.forEach(t),hxo=r(P9e," \u2014 "),cG=n(P9e,"A",{href:!0});var oft=s(cG);pxo=r(oft,"YosoForMaskedLM"),oft.forEach(t),_xo=r(P9e," (YOSO model)"),P9e.forEach(t),H.forEach(t),uxo=i(aa),y1=n(aa,"P",{});var B9e=s(y1);bxo=r(B9e,"The model is set in evaluation mode by default using "),Gfe=n(B9e,"CODE",{});var rft=s(Gfe);vxo=r(rft,"model.eval()"),rft.forEach(t),Fxo=r(B9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ofe=n(B9e,"CODE",{});var tft=s(Ofe);Txo=r(tft,"model.train()"),tft.forEach(t),B9e.forEach(t),Mxo=i(aa),T(x1.$$.fragment,aa),aa.forEach(t),Ws.forEach(t),vje=i(f),ji=n(f,"H2",{class:!0});var EGe=s(ji);$1=n(EGe,"A",{id:!0,class:!0,href:!0});var aft=s($1);Vfe=n(aft,"SPAN",{});var nft=s(Vfe);T(SL.$$.fragment,nft),nft.forEach(t),aft.forEach(t),Exo=i(EGe),Xfe=n(EGe,"SPAN",{});var sft=s(Xfe);Cxo=r(sft,"AutoModelForSeq2SeqLM"),sft.forEach(t),EGe.forEach(t),Fje=i(f),So=n(f,"DIV",{class:!0});var Qs=s(So);T(RL.$$.fragment,Qs),wxo=i(Qs),Di=n(Qs,"P",{});var ZZ=s(Di);Axo=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fG=n(ZZ,"A",{href:!0});var lft=s(fG);Lxo=r(lft,"from_pretrained()"),lft.forEach(t),yxo=r(ZZ," class method or the "),mG=n(ZZ,"A",{href:!0});var ift=s(mG);xxo=r(ift,"from_config()"),ift.forEach(t),$xo=r(ZZ,` class
method.`),ZZ.forEach(t),kxo=i(Qs),PL=n(Qs,"P",{});var CGe=s(PL);Sxo=r(CGe,"This class cannot be instantiated directly using "),zfe=n(CGe,"CODE",{});var dft=s(zfe);Rxo=r(dft,"__init__()"),dft.forEach(t),Pxo=r(CGe," (throws an error)."),CGe.forEach(t),Bxo=i(Qs),lt=n(Qs,"DIV",{class:!0});var Kw=s(lt);T(BL.$$.fragment,Kw),Ixo=i(Kw),Wfe=n(Kw,"P",{});var cft=s(Wfe);Nxo=r(cft,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),cft.forEach(t),qxo=i(Kw),Gi=n(Kw,"P",{});var eee=s(Gi);jxo=r(eee,`Note:
Loading a model from its configuration file does `),Qfe=n(eee,"STRONG",{});var fft=s(Qfe);Dxo=r(fft,"not"),fft.forEach(t),Gxo=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=n(eee,"A",{href:!0});var mft=s(gG);Oxo=r(mft,"from_pretrained()"),mft.forEach(t),Vxo=r(eee," to load the model weights."),eee.forEach(t),Xxo=i(Kw),T(k1.$$.fragment,Kw),Kw.forEach(t),zxo=i(Qs),eo=n(Qs,"DIV",{class:!0});var na=s(eo);T(IL.$$.fragment,na),Wxo=i(na),Hfe=n(na,"P",{});var gft=s(Hfe);Qxo=r(gft,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gft.forEach(t),Hxo=i(na),Sa=n(na,"P",{});var Zw=s(Sa);Uxo=r(Zw,"The model class to instantiate is selected based on the "),Ufe=n(Zw,"CODE",{});var hft=s(Ufe);Jxo=r(hft,"model_type"),hft.forEach(t),Yxo=r(Zw,` property of the config object (either
passed as an argument or loaded from `),Jfe=n(Zw,"CODE",{});var pft=s(Jfe);Kxo=r(pft,"pretrained_model_name_or_path"),pft.forEach(t),Zxo=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=n(Zw,"CODE",{});var _ft=s(Yfe);e$o=r(_ft,"pretrained_model_name_or_path"),_ft.forEach(t),o$o=r(Zw,":"),Zw.forEach(t),r$o=i(na),_e=n(na,"UL",{});var Fe=s(_e);S1=n(Fe,"LI",{});var I9e=s(S1);Kfe=n(I9e,"STRONG",{});var uft=s(Kfe);t$o=r(uft,"bart"),uft.forEach(t),a$o=r(I9e," \u2014 "),hG=n(I9e,"A",{href:!0});var bft=s(hG);n$o=r(bft,"BartForConditionalGeneration"),bft.forEach(t),s$o=r(I9e," (BART model)"),I9e.forEach(t),l$o=i(Fe),R1=n(Fe,"LI",{});var N9e=s(R1);Zfe=n(N9e,"STRONG",{});var vft=s(Zfe);i$o=r(vft,"bigbird_pegasus"),vft.forEach(t),d$o=r(N9e," \u2014 "),pG=n(N9e,"A",{href:!0});var Fft=s(pG);c$o=r(Fft,"BigBirdPegasusForConditionalGeneration"),Fft.forEach(t),f$o=r(N9e," (BigBird-Pegasus model)"),N9e.forEach(t),m$o=i(Fe),P1=n(Fe,"LI",{});var q9e=s(P1);eme=n(q9e,"STRONG",{});var Tft=s(eme);g$o=r(Tft,"blenderbot"),Tft.forEach(t),h$o=r(q9e," \u2014 "),_G=n(q9e,"A",{href:!0});var Mft=s(_G);p$o=r(Mft,"BlenderbotForConditionalGeneration"),Mft.forEach(t),_$o=r(q9e," (Blenderbot model)"),q9e.forEach(t),u$o=i(Fe),B1=n(Fe,"LI",{});var j9e=s(B1);ome=n(j9e,"STRONG",{});var Eft=s(ome);b$o=r(Eft,"blenderbot-small"),Eft.forEach(t),v$o=r(j9e," \u2014 "),uG=n(j9e,"A",{href:!0});var Cft=s(uG);F$o=r(Cft,"BlenderbotSmallForConditionalGeneration"),Cft.forEach(t),T$o=r(j9e," (BlenderbotSmall model)"),j9e.forEach(t),M$o=i(Fe),I1=n(Fe,"LI",{});var D9e=s(I1);rme=n(D9e,"STRONG",{});var wft=s(rme);E$o=r(wft,"encoder-decoder"),wft.forEach(t),C$o=r(D9e," \u2014 "),bG=n(D9e,"A",{href:!0});var Aft=s(bG);w$o=r(Aft,"EncoderDecoderModel"),Aft.forEach(t),A$o=r(D9e," (Encoder decoder model)"),D9e.forEach(t),L$o=i(Fe),N1=n(Fe,"LI",{});var G9e=s(N1);tme=n(G9e,"STRONG",{});var Lft=s(tme);y$o=r(Lft,"fsmt"),Lft.forEach(t),x$o=r(G9e," \u2014 "),vG=n(G9e,"A",{href:!0});var yft=s(vG);$$o=r(yft,"FSMTForConditionalGeneration"),yft.forEach(t),k$o=r(G9e," (FairSeq Machine-Translation model)"),G9e.forEach(t),S$o=i(Fe),q1=n(Fe,"LI",{});var O9e=s(q1);ame=n(O9e,"STRONG",{});var xft=s(ame);R$o=r(xft,"led"),xft.forEach(t),P$o=r(O9e," \u2014 "),FG=n(O9e,"A",{href:!0});var $ft=s(FG);B$o=r($ft,"LEDForConditionalGeneration"),$ft.forEach(t),I$o=r(O9e," (LED model)"),O9e.forEach(t),N$o=i(Fe),j1=n(Fe,"LI",{});var V9e=s(j1);nme=n(V9e,"STRONG",{});var kft=s(nme);q$o=r(kft,"m2m_100"),kft.forEach(t),j$o=r(V9e," \u2014 "),TG=n(V9e,"A",{href:!0});var Sft=s(TG);D$o=r(Sft,"M2M100ForConditionalGeneration"),Sft.forEach(t),G$o=r(V9e," (M2M100 model)"),V9e.forEach(t),O$o=i(Fe),D1=n(Fe,"LI",{});var X9e=s(D1);sme=n(X9e,"STRONG",{});var Rft=s(sme);V$o=r(Rft,"marian"),Rft.forEach(t),X$o=r(X9e," \u2014 "),MG=n(X9e,"A",{href:!0});var Pft=s(MG);z$o=r(Pft,"MarianMTModel"),Pft.forEach(t),W$o=r(X9e," (Marian model)"),X9e.forEach(t),Q$o=i(Fe),G1=n(Fe,"LI",{});var z9e=s(G1);lme=n(z9e,"STRONG",{});var Bft=s(lme);H$o=r(Bft,"mbart"),Bft.forEach(t),U$o=r(z9e," \u2014 "),EG=n(z9e,"A",{href:!0});var Ift=s(EG);J$o=r(Ift,"MBartForConditionalGeneration"),Ift.forEach(t),Y$o=r(z9e," (mBART model)"),z9e.forEach(t),K$o=i(Fe),O1=n(Fe,"LI",{});var W9e=s(O1);ime=n(W9e,"STRONG",{});var Nft=s(ime);Z$o=r(Nft,"mt5"),Nft.forEach(t),eko=r(W9e," \u2014 "),CG=n(W9e,"A",{href:!0});var qft=s(CG);oko=r(qft,"MT5ForConditionalGeneration"),qft.forEach(t),rko=r(W9e," (MT5 model)"),W9e.forEach(t),tko=i(Fe),V1=n(Fe,"LI",{});var Q9e=s(V1);dme=n(Q9e,"STRONG",{});var jft=s(dme);ako=r(jft,"pegasus"),jft.forEach(t),nko=r(Q9e," \u2014 "),wG=n(Q9e,"A",{href:!0});var Dft=s(wG);sko=r(Dft,"PegasusForConditionalGeneration"),Dft.forEach(t),lko=r(Q9e," (Pegasus model)"),Q9e.forEach(t),iko=i(Fe),X1=n(Fe,"LI",{});var H9e=s(X1);cme=n(H9e,"STRONG",{});var Gft=s(cme);dko=r(Gft,"plbart"),Gft.forEach(t),cko=r(H9e," \u2014 "),AG=n(H9e,"A",{href:!0});var Oft=s(AG);fko=r(Oft,"PLBartForConditionalGeneration"),Oft.forEach(t),mko=r(H9e," (PLBart model)"),H9e.forEach(t),gko=i(Fe),z1=n(Fe,"LI",{});var U9e=s(z1);fme=n(U9e,"STRONG",{});var Vft=s(fme);hko=r(Vft,"prophetnet"),Vft.forEach(t),pko=r(U9e," \u2014 "),LG=n(U9e,"A",{href:!0});var Xft=s(LG);_ko=r(Xft,"ProphetNetForConditionalGeneration"),Xft.forEach(t),uko=r(U9e," (ProphetNet model)"),U9e.forEach(t),bko=i(Fe),W1=n(Fe,"LI",{});var J9e=s(W1);mme=n(J9e,"STRONG",{});var zft=s(mme);vko=r(zft,"t5"),zft.forEach(t),Fko=r(J9e," \u2014 "),yG=n(J9e,"A",{href:!0});var Wft=s(yG);Tko=r(Wft,"T5ForConditionalGeneration"),Wft.forEach(t),Mko=r(J9e," (T5 model)"),J9e.forEach(t),Eko=i(Fe),Q1=n(Fe,"LI",{});var Y9e=s(Q1);gme=n(Y9e,"STRONG",{});var Qft=s(gme);Cko=r(Qft,"xlm-prophetnet"),Qft.forEach(t),wko=r(Y9e," \u2014 "),xG=n(Y9e,"A",{href:!0});var Hft=s(xG);Ako=r(Hft,"XLMProphetNetForConditionalGeneration"),Hft.forEach(t),Lko=r(Y9e," (XLM-ProphetNet model)"),Y9e.forEach(t),Fe.forEach(t),yko=i(na),H1=n(na,"P",{});var K9e=s(H1);xko=r(K9e,"The model is set in evaluation mode by default using "),hme=n(K9e,"CODE",{});var Uft=s(hme);$ko=r(Uft,"model.eval()"),Uft.forEach(t),kko=r(K9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=n(K9e,"CODE",{});var Jft=s(pme);Sko=r(Jft,"model.train()"),Jft.forEach(t),K9e.forEach(t),Rko=i(na),T(U1.$$.fragment,na),na.forEach(t),Qs.forEach(t),Tje=i(f),Oi=n(f,"H2",{class:!0});var wGe=s(Oi);J1=n(wGe,"A",{id:!0,class:!0,href:!0});var Yft=s(J1);_me=n(Yft,"SPAN",{});var Kft=s(_me);T(NL.$$.fragment,Kft),Kft.forEach(t),Yft.forEach(t),Pko=i(wGe),ume=n(wGe,"SPAN",{});var Zft=s(ume);Bko=r(Zft,"AutoModelForSequenceClassification"),Zft.forEach(t),wGe.forEach(t),Mje=i(f),Ro=n(f,"DIV",{class:!0});var Hs=s(Ro);T(qL.$$.fragment,Hs),Iko=i(Hs),Vi=n(Hs,"P",{});var oee=s(Vi);Nko=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$G=n(oee,"A",{href:!0});var emt=s($G);qko=r(emt,"from_pretrained()"),emt.forEach(t),jko=r(oee," class method or the "),kG=n(oee,"A",{href:!0});var omt=s(kG);Dko=r(omt,"from_config()"),omt.forEach(t),Gko=r(oee,` class
method.`),oee.forEach(t),Oko=i(Hs),jL=n(Hs,"P",{});var AGe=s(jL);Vko=r(AGe,"This class cannot be instantiated directly using "),bme=n(AGe,"CODE",{});var rmt=s(bme);Xko=r(rmt,"__init__()"),rmt.forEach(t),zko=r(AGe," (throws an error)."),AGe.forEach(t),Wko=i(Hs),it=n(Hs,"DIV",{class:!0});var eA=s(it);T(DL.$$.fragment,eA),Qko=i(eA),vme=n(eA,"P",{});var tmt=s(vme);Hko=r(tmt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tmt.forEach(t),Uko=i(eA),Xi=n(eA,"P",{});var ree=s(Xi);Jko=r(ree,`Note:
Loading a model from its configuration file does `),Fme=n(ree,"STRONG",{});var amt=s(Fme);Yko=r(amt,"not"),amt.forEach(t),Kko=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=n(ree,"A",{href:!0});var nmt=s(SG);Zko=r(nmt,"from_pretrained()"),nmt.forEach(t),eSo=r(ree," to load the model weights."),ree.forEach(t),oSo=i(eA),T(Y1.$$.fragment,eA),eA.forEach(t),rSo=i(Hs),oo=n(Hs,"DIV",{class:!0});var sa=s(oo);T(GL.$$.fragment,sa),tSo=i(sa),Tme=n(sa,"P",{});var smt=s(Tme);aSo=r(smt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),smt.forEach(t),nSo=i(sa),Ra=n(sa,"P",{});var oA=s(Ra);sSo=r(oA,"The model class to instantiate is selected based on the "),Mme=n(oA,"CODE",{});var lmt=s(Mme);lSo=r(lmt,"model_type"),lmt.forEach(t),iSo=r(oA,` property of the config object (either
passed as an argument or loaded from `),Eme=n(oA,"CODE",{});var imt=s(Eme);dSo=r(imt,"pretrained_model_name_or_path"),imt.forEach(t),cSo=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=n(oA,"CODE",{});var dmt=s(Cme);fSo=r(dmt,"pretrained_model_name_or_path"),dmt.forEach(t),mSo=r(oA,":"),oA.forEach(t),gSo=i(sa),N=n(sa,"UL",{});var j=s(N);K1=n(j,"LI",{});var Z9e=s(K1);wme=n(Z9e,"STRONG",{});var cmt=s(wme);hSo=r(cmt,"albert"),cmt.forEach(t),pSo=r(Z9e," \u2014 "),RG=n(Z9e,"A",{href:!0});var fmt=s(RG);_So=r(fmt,"AlbertForSequenceClassification"),fmt.forEach(t),uSo=r(Z9e," (ALBERT model)"),Z9e.forEach(t),bSo=i(j),Z1=n(j,"LI",{});var exe=s(Z1);Ame=n(exe,"STRONG",{});var mmt=s(Ame);vSo=r(mmt,"bart"),mmt.forEach(t),FSo=r(exe," \u2014 "),PG=n(exe,"A",{href:!0});var gmt=s(PG);TSo=r(gmt,"BartForSequenceClassification"),gmt.forEach(t),MSo=r(exe," (BART model)"),exe.forEach(t),ESo=i(j),eb=n(j,"LI",{});var oxe=s(eb);Lme=n(oxe,"STRONG",{});var hmt=s(Lme);CSo=r(hmt,"bert"),hmt.forEach(t),wSo=r(oxe," \u2014 "),BG=n(oxe,"A",{href:!0});var pmt=s(BG);ASo=r(pmt,"BertForSequenceClassification"),pmt.forEach(t),LSo=r(oxe," (BERT model)"),oxe.forEach(t),ySo=i(j),ob=n(j,"LI",{});var rxe=s(ob);yme=n(rxe,"STRONG",{});var _mt=s(yme);xSo=r(_mt,"big_bird"),_mt.forEach(t),$So=r(rxe," \u2014 "),IG=n(rxe,"A",{href:!0});var umt=s(IG);kSo=r(umt,"BigBirdForSequenceClassification"),umt.forEach(t),SSo=r(rxe," (BigBird model)"),rxe.forEach(t),RSo=i(j),rb=n(j,"LI",{});var txe=s(rb);xme=n(txe,"STRONG",{});var bmt=s(xme);PSo=r(bmt,"bigbird_pegasus"),bmt.forEach(t),BSo=r(txe," \u2014 "),NG=n(txe,"A",{href:!0});var vmt=s(NG);ISo=r(vmt,"BigBirdPegasusForSequenceClassification"),vmt.forEach(t),NSo=r(txe," (BigBird-Pegasus model)"),txe.forEach(t),qSo=i(j),tb=n(j,"LI",{});var axe=s(tb);$me=n(axe,"STRONG",{});var Fmt=s($me);jSo=r(Fmt,"camembert"),Fmt.forEach(t),DSo=r(axe," \u2014 "),qG=n(axe,"A",{href:!0});var Tmt=s(qG);GSo=r(Tmt,"CamembertForSequenceClassification"),Tmt.forEach(t),OSo=r(axe," (CamemBERT model)"),axe.forEach(t),VSo=i(j),ab=n(j,"LI",{});var nxe=s(ab);kme=n(nxe,"STRONG",{});var Mmt=s(kme);XSo=r(Mmt,"canine"),Mmt.forEach(t),zSo=r(nxe," \u2014 "),jG=n(nxe,"A",{href:!0});var Emt=s(jG);WSo=r(Emt,"CanineForSequenceClassification"),Emt.forEach(t),QSo=r(nxe," (CANINE model)"),nxe.forEach(t),HSo=i(j),nb=n(j,"LI",{});var sxe=s(nb);Sme=n(sxe,"STRONG",{});var Cmt=s(Sme);USo=r(Cmt,"convbert"),Cmt.forEach(t),JSo=r(sxe," \u2014 "),DG=n(sxe,"A",{href:!0});var wmt=s(DG);YSo=r(wmt,"ConvBertForSequenceClassification"),wmt.forEach(t),KSo=r(sxe," (ConvBERT model)"),sxe.forEach(t),ZSo=i(j),sb=n(j,"LI",{});var lxe=s(sb);Rme=n(lxe,"STRONG",{});var Amt=s(Rme);eRo=r(Amt,"ctrl"),Amt.forEach(t),oRo=r(lxe," \u2014 "),GG=n(lxe,"A",{href:!0});var Lmt=s(GG);rRo=r(Lmt,"CTRLForSequenceClassification"),Lmt.forEach(t),tRo=r(lxe," (CTRL model)"),lxe.forEach(t),aRo=i(j),lb=n(j,"LI",{});var ixe=s(lb);Pme=n(ixe,"STRONG",{});var ymt=s(Pme);nRo=r(ymt,"data2vec-text"),ymt.forEach(t),sRo=r(ixe," \u2014 "),OG=n(ixe,"A",{href:!0});var xmt=s(OG);lRo=r(xmt,"Data2VecTextForSequenceClassification"),xmt.forEach(t),iRo=r(ixe," (Data2VecText model)"),ixe.forEach(t),dRo=i(j),ib=n(j,"LI",{});var dxe=s(ib);Bme=n(dxe,"STRONG",{});var $mt=s(Bme);cRo=r($mt,"deberta"),$mt.forEach(t),fRo=r(dxe," \u2014 "),VG=n(dxe,"A",{href:!0});var kmt=s(VG);mRo=r(kmt,"DebertaForSequenceClassification"),kmt.forEach(t),gRo=r(dxe," (DeBERTa model)"),dxe.forEach(t),hRo=i(j),db=n(j,"LI",{});var cxe=s(db);Ime=n(cxe,"STRONG",{});var Smt=s(Ime);pRo=r(Smt,"deberta-v2"),Smt.forEach(t),_Ro=r(cxe," \u2014 "),XG=n(cxe,"A",{href:!0});var Rmt=s(XG);uRo=r(Rmt,"DebertaV2ForSequenceClassification"),Rmt.forEach(t),bRo=r(cxe," (DeBERTa-v2 model)"),cxe.forEach(t),vRo=i(j),cb=n(j,"LI",{});var fxe=s(cb);Nme=n(fxe,"STRONG",{});var Pmt=s(Nme);FRo=r(Pmt,"distilbert"),Pmt.forEach(t),TRo=r(fxe," \u2014 "),zG=n(fxe,"A",{href:!0});var Bmt=s(zG);MRo=r(Bmt,"DistilBertForSequenceClassification"),Bmt.forEach(t),ERo=r(fxe," (DistilBERT model)"),fxe.forEach(t),CRo=i(j),fb=n(j,"LI",{});var mxe=s(fb);qme=n(mxe,"STRONG",{});var Imt=s(qme);wRo=r(Imt,"electra"),Imt.forEach(t),ARo=r(mxe," \u2014 "),WG=n(mxe,"A",{href:!0});var Nmt=s(WG);LRo=r(Nmt,"ElectraForSequenceClassification"),Nmt.forEach(t),yRo=r(mxe," (ELECTRA model)"),mxe.forEach(t),xRo=i(j),mb=n(j,"LI",{});var gxe=s(mb);jme=n(gxe,"STRONG",{});var qmt=s(jme);$Ro=r(qmt,"flaubert"),qmt.forEach(t),kRo=r(gxe," \u2014 "),QG=n(gxe,"A",{href:!0});var jmt=s(QG);SRo=r(jmt,"FlaubertForSequenceClassification"),jmt.forEach(t),RRo=r(gxe," (FlauBERT model)"),gxe.forEach(t),PRo=i(j),gb=n(j,"LI",{});var hxe=s(gb);Dme=n(hxe,"STRONG",{});var Dmt=s(Dme);BRo=r(Dmt,"fnet"),Dmt.forEach(t),IRo=r(hxe," \u2014 "),HG=n(hxe,"A",{href:!0});var Gmt=s(HG);NRo=r(Gmt,"FNetForSequenceClassification"),Gmt.forEach(t),qRo=r(hxe," (FNet model)"),hxe.forEach(t),jRo=i(j),hb=n(j,"LI",{});var pxe=s(hb);Gme=n(pxe,"STRONG",{});var Omt=s(Gme);DRo=r(Omt,"funnel"),Omt.forEach(t),GRo=r(pxe," \u2014 "),UG=n(pxe,"A",{href:!0});var Vmt=s(UG);ORo=r(Vmt,"FunnelForSequenceClassification"),Vmt.forEach(t),VRo=r(pxe," (Funnel Transformer model)"),pxe.forEach(t),XRo=i(j),pb=n(j,"LI",{});var _xe=s(pb);Ome=n(_xe,"STRONG",{});var Xmt=s(Ome);zRo=r(Xmt,"gpt2"),Xmt.forEach(t),WRo=r(_xe," \u2014 "),JG=n(_xe,"A",{href:!0});var zmt=s(JG);QRo=r(zmt,"GPT2ForSequenceClassification"),zmt.forEach(t),HRo=r(_xe," (OpenAI GPT-2 model)"),_xe.forEach(t),URo=i(j),_b=n(j,"LI",{});var uxe=s(_b);Vme=n(uxe,"STRONG",{});var Wmt=s(Vme);JRo=r(Wmt,"gpt_neo"),Wmt.forEach(t),YRo=r(uxe," \u2014 "),YG=n(uxe,"A",{href:!0});var Qmt=s(YG);KRo=r(Qmt,"GPTNeoForSequenceClassification"),Qmt.forEach(t),ZRo=r(uxe," (GPT Neo model)"),uxe.forEach(t),ePo=i(j),ub=n(j,"LI",{});var bxe=s(ub);Xme=n(bxe,"STRONG",{});var Hmt=s(Xme);oPo=r(Hmt,"gptj"),Hmt.forEach(t),rPo=r(bxe," \u2014 "),KG=n(bxe,"A",{href:!0});var Umt=s(KG);tPo=r(Umt,"GPTJForSequenceClassification"),Umt.forEach(t),aPo=r(bxe," (GPT-J model)"),bxe.forEach(t),nPo=i(j),bb=n(j,"LI",{});var vxe=s(bb);zme=n(vxe,"STRONG",{});var Jmt=s(zme);sPo=r(Jmt,"ibert"),Jmt.forEach(t),lPo=r(vxe," \u2014 "),ZG=n(vxe,"A",{href:!0});var Ymt=s(ZG);iPo=r(Ymt,"IBertForSequenceClassification"),Ymt.forEach(t),dPo=r(vxe," (I-BERT model)"),vxe.forEach(t),cPo=i(j),vb=n(j,"LI",{});var Fxe=s(vb);Wme=n(Fxe,"STRONG",{});var Kmt=s(Wme);fPo=r(Kmt,"layoutlm"),Kmt.forEach(t),mPo=r(Fxe," \u2014 "),eO=n(Fxe,"A",{href:!0});var Zmt=s(eO);gPo=r(Zmt,"LayoutLMForSequenceClassification"),Zmt.forEach(t),hPo=r(Fxe," (LayoutLM model)"),Fxe.forEach(t),pPo=i(j),Fb=n(j,"LI",{});var Txe=s(Fb);Qme=n(Txe,"STRONG",{});var egt=s(Qme);_Po=r(egt,"layoutlmv2"),egt.forEach(t),uPo=r(Txe," \u2014 "),oO=n(Txe,"A",{href:!0});var ogt=s(oO);bPo=r(ogt,"LayoutLMv2ForSequenceClassification"),ogt.forEach(t),vPo=r(Txe," (LayoutLMv2 model)"),Txe.forEach(t),FPo=i(j),Tb=n(j,"LI",{});var Mxe=s(Tb);Hme=n(Mxe,"STRONG",{});var rgt=s(Hme);TPo=r(rgt,"layoutlmv3"),rgt.forEach(t),MPo=r(Mxe," \u2014 "),rO=n(Mxe,"A",{href:!0});var tgt=s(rO);EPo=r(tgt,"LayoutLMv3ForSequenceClassification"),tgt.forEach(t),CPo=r(Mxe," (LayoutLMv3 model)"),Mxe.forEach(t),wPo=i(j),Mb=n(j,"LI",{});var Exe=s(Mb);Ume=n(Exe,"STRONG",{});var agt=s(Ume);APo=r(agt,"led"),agt.forEach(t),LPo=r(Exe," \u2014 "),tO=n(Exe,"A",{href:!0});var ngt=s(tO);yPo=r(ngt,"LEDForSequenceClassification"),ngt.forEach(t),xPo=r(Exe," (LED model)"),Exe.forEach(t),$Po=i(j),Eb=n(j,"LI",{});var Cxe=s(Eb);Jme=n(Cxe,"STRONG",{});var sgt=s(Jme);kPo=r(sgt,"longformer"),sgt.forEach(t),SPo=r(Cxe," \u2014 "),aO=n(Cxe,"A",{href:!0});var lgt=s(aO);RPo=r(lgt,"LongformerForSequenceClassification"),lgt.forEach(t),PPo=r(Cxe," (Longformer model)"),Cxe.forEach(t),BPo=i(j),Cb=n(j,"LI",{});var wxe=s(Cb);Yme=n(wxe,"STRONG",{});var igt=s(Yme);IPo=r(igt,"mbart"),igt.forEach(t),NPo=r(wxe," \u2014 "),nO=n(wxe,"A",{href:!0});var dgt=s(nO);qPo=r(dgt,"MBartForSequenceClassification"),dgt.forEach(t),jPo=r(wxe," (mBART model)"),wxe.forEach(t),DPo=i(j),wb=n(j,"LI",{});var Axe=s(wb);Kme=n(Axe,"STRONG",{});var cgt=s(Kme);GPo=r(cgt,"megatron-bert"),cgt.forEach(t),OPo=r(Axe," \u2014 "),sO=n(Axe,"A",{href:!0});var fgt=s(sO);VPo=r(fgt,"MegatronBertForSequenceClassification"),fgt.forEach(t),XPo=r(Axe," (Megatron-BERT model)"),Axe.forEach(t),zPo=i(j),Ab=n(j,"LI",{});var Lxe=s(Ab);Zme=n(Lxe,"STRONG",{});var mgt=s(Zme);WPo=r(mgt,"mobilebert"),mgt.forEach(t),QPo=r(Lxe," \u2014 "),lO=n(Lxe,"A",{href:!0});var ggt=s(lO);HPo=r(ggt,"MobileBertForSequenceClassification"),ggt.forEach(t),UPo=r(Lxe," (MobileBERT model)"),Lxe.forEach(t),JPo=i(j),Lb=n(j,"LI",{});var yxe=s(Lb);ege=n(yxe,"STRONG",{});var hgt=s(ege);YPo=r(hgt,"mpnet"),hgt.forEach(t),KPo=r(yxe," \u2014 "),iO=n(yxe,"A",{href:!0});var pgt=s(iO);ZPo=r(pgt,"MPNetForSequenceClassification"),pgt.forEach(t),eBo=r(yxe," (MPNet model)"),yxe.forEach(t),oBo=i(j),yb=n(j,"LI",{});var xxe=s(yb);oge=n(xxe,"STRONG",{});var _gt=s(oge);rBo=r(_gt,"nystromformer"),_gt.forEach(t),tBo=r(xxe," \u2014 "),dO=n(xxe,"A",{href:!0});var ugt=s(dO);aBo=r(ugt,"NystromformerForSequenceClassification"),ugt.forEach(t),nBo=r(xxe," (Nystr\xF6mformer model)"),xxe.forEach(t),sBo=i(j),xb=n(j,"LI",{});var $xe=s(xb);rge=n($xe,"STRONG",{});var bgt=s(rge);lBo=r(bgt,"openai-gpt"),bgt.forEach(t),iBo=r($xe," \u2014 "),cO=n($xe,"A",{href:!0});var vgt=s(cO);dBo=r(vgt,"OpenAIGPTForSequenceClassification"),vgt.forEach(t),cBo=r($xe," (OpenAI GPT model)"),$xe.forEach(t),fBo=i(j),$b=n(j,"LI",{});var kxe=s($b);tge=n(kxe,"STRONG",{});var Fgt=s(tge);mBo=r(Fgt,"perceiver"),Fgt.forEach(t),gBo=r(kxe," \u2014 "),fO=n(kxe,"A",{href:!0});var Tgt=s(fO);hBo=r(Tgt,"PerceiverForSequenceClassification"),Tgt.forEach(t),pBo=r(kxe," (Perceiver model)"),kxe.forEach(t),_Bo=i(j),kb=n(j,"LI",{});var Sxe=s(kb);age=n(Sxe,"STRONG",{});var Mgt=s(age);uBo=r(Mgt,"plbart"),Mgt.forEach(t),bBo=r(Sxe," \u2014 "),mO=n(Sxe,"A",{href:!0});var Egt=s(mO);vBo=r(Egt,"PLBartForSequenceClassification"),Egt.forEach(t),FBo=r(Sxe," (PLBart model)"),Sxe.forEach(t),TBo=i(j),Sb=n(j,"LI",{});var Rxe=s(Sb);nge=n(Rxe,"STRONG",{});var Cgt=s(nge);MBo=r(Cgt,"qdqbert"),Cgt.forEach(t),EBo=r(Rxe," \u2014 "),gO=n(Rxe,"A",{href:!0});var wgt=s(gO);CBo=r(wgt,"QDQBertForSequenceClassification"),wgt.forEach(t),wBo=r(Rxe," (QDQBert model)"),Rxe.forEach(t),ABo=i(j),Rb=n(j,"LI",{});var Pxe=s(Rb);sge=n(Pxe,"STRONG",{});var Agt=s(sge);LBo=r(Agt,"reformer"),Agt.forEach(t),yBo=r(Pxe," \u2014 "),hO=n(Pxe,"A",{href:!0});var Lgt=s(hO);xBo=r(Lgt,"ReformerForSequenceClassification"),Lgt.forEach(t),$Bo=r(Pxe," (Reformer model)"),Pxe.forEach(t),kBo=i(j),Pb=n(j,"LI",{});var Bxe=s(Pb);lge=n(Bxe,"STRONG",{});var ygt=s(lge);SBo=r(ygt,"rembert"),ygt.forEach(t),RBo=r(Bxe," \u2014 "),pO=n(Bxe,"A",{href:!0});var xgt=s(pO);PBo=r(xgt,"RemBertForSequenceClassification"),xgt.forEach(t),BBo=r(Bxe," (RemBERT model)"),Bxe.forEach(t),IBo=i(j),Bb=n(j,"LI",{});var Ixe=s(Bb);ige=n(Ixe,"STRONG",{});var $gt=s(ige);NBo=r($gt,"roberta"),$gt.forEach(t),qBo=r(Ixe," \u2014 "),_O=n(Ixe,"A",{href:!0});var kgt=s(_O);jBo=r(kgt,"RobertaForSequenceClassification"),kgt.forEach(t),DBo=r(Ixe," (RoBERTa model)"),Ixe.forEach(t),GBo=i(j),Ib=n(j,"LI",{});var Nxe=s(Ib);dge=n(Nxe,"STRONG",{});var Sgt=s(dge);OBo=r(Sgt,"roformer"),Sgt.forEach(t),VBo=r(Nxe," \u2014 "),uO=n(Nxe,"A",{href:!0});var Rgt=s(uO);XBo=r(Rgt,"RoFormerForSequenceClassification"),Rgt.forEach(t),zBo=r(Nxe," (RoFormer model)"),Nxe.forEach(t),WBo=i(j),Nb=n(j,"LI",{});var qxe=s(Nb);cge=n(qxe,"STRONG",{});var Pgt=s(cge);QBo=r(Pgt,"squeezebert"),Pgt.forEach(t),HBo=r(qxe," \u2014 "),bO=n(qxe,"A",{href:!0});var Bgt=s(bO);UBo=r(Bgt,"SqueezeBertForSequenceClassification"),Bgt.forEach(t),JBo=r(qxe," (SqueezeBERT model)"),qxe.forEach(t),YBo=i(j),qb=n(j,"LI",{});var jxe=s(qb);fge=n(jxe,"STRONG",{});var Igt=s(fge);KBo=r(Igt,"tapas"),Igt.forEach(t),ZBo=r(jxe," \u2014 "),vO=n(jxe,"A",{href:!0});var Ngt=s(vO);eIo=r(Ngt,"TapasForSequenceClassification"),Ngt.forEach(t),oIo=r(jxe," (TAPAS model)"),jxe.forEach(t),rIo=i(j),jb=n(j,"LI",{});var Dxe=s(jb);mge=n(Dxe,"STRONG",{});var qgt=s(mge);tIo=r(qgt,"transfo-xl"),qgt.forEach(t),aIo=r(Dxe," \u2014 "),FO=n(Dxe,"A",{href:!0});var jgt=s(FO);nIo=r(jgt,"TransfoXLForSequenceClassification"),jgt.forEach(t),sIo=r(Dxe," (Transformer-XL model)"),Dxe.forEach(t),lIo=i(j),Db=n(j,"LI",{});var Gxe=s(Db);gge=n(Gxe,"STRONG",{});var Dgt=s(gge);iIo=r(Dgt,"xlm"),Dgt.forEach(t),dIo=r(Gxe," \u2014 "),TO=n(Gxe,"A",{href:!0});var Ggt=s(TO);cIo=r(Ggt,"XLMForSequenceClassification"),Ggt.forEach(t),fIo=r(Gxe," (XLM model)"),Gxe.forEach(t),mIo=i(j),Gb=n(j,"LI",{});var Oxe=s(Gb);hge=n(Oxe,"STRONG",{});var Ogt=s(hge);gIo=r(Ogt,"xlm-roberta"),Ogt.forEach(t),hIo=r(Oxe," \u2014 "),MO=n(Oxe,"A",{href:!0});var Vgt=s(MO);pIo=r(Vgt,"XLMRobertaForSequenceClassification"),Vgt.forEach(t),_Io=r(Oxe," (XLM-RoBERTa model)"),Oxe.forEach(t),uIo=i(j),Ob=n(j,"LI",{});var Vxe=s(Ob);pge=n(Vxe,"STRONG",{});var Xgt=s(pge);bIo=r(Xgt,"xlm-roberta-xl"),Xgt.forEach(t),vIo=r(Vxe," \u2014 "),EO=n(Vxe,"A",{href:!0});var zgt=s(EO);FIo=r(zgt,"XLMRobertaXLForSequenceClassification"),zgt.forEach(t),TIo=r(Vxe," (XLM-RoBERTa-XL model)"),Vxe.forEach(t),MIo=i(j),Vb=n(j,"LI",{});var Xxe=s(Vb);_ge=n(Xxe,"STRONG",{});var Wgt=s(_ge);EIo=r(Wgt,"xlnet"),Wgt.forEach(t),CIo=r(Xxe," \u2014 "),CO=n(Xxe,"A",{href:!0});var Qgt=s(CO);wIo=r(Qgt,"XLNetForSequenceClassification"),Qgt.forEach(t),AIo=r(Xxe," (XLNet model)"),Xxe.forEach(t),LIo=i(j),Xb=n(j,"LI",{});var zxe=s(Xb);uge=n(zxe,"STRONG",{});var Hgt=s(uge);yIo=r(Hgt,"yoso"),Hgt.forEach(t),xIo=r(zxe," \u2014 "),wO=n(zxe,"A",{href:!0});var Ugt=s(wO);$Io=r(Ugt,"YosoForSequenceClassification"),Ugt.forEach(t),kIo=r(zxe," (YOSO model)"),zxe.forEach(t),j.forEach(t),SIo=i(sa),zb=n(sa,"P",{});var Wxe=s(zb);RIo=r(Wxe,"The model is set in evaluation mode by default using "),bge=n(Wxe,"CODE",{});var Jgt=s(bge);PIo=r(Jgt,"model.eval()"),Jgt.forEach(t),BIo=r(Wxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vge=n(Wxe,"CODE",{});var Ygt=s(vge);IIo=r(Ygt,"model.train()"),Ygt.forEach(t),Wxe.forEach(t),NIo=i(sa),T(Wb.$$.fragment,sa),sa.forEach(t),Hs.forEach(t),Eje=i(f),zi=n(f,"H2",{class:!0});var LGe=s(zi);Qb=n(LGe,"A",{id:!0,class:!0,href:!0});var Kgt=s(Qb);Fge=n(Kgt,"SPAN",{});var Zgt=s(Fge);T(OL.$$.fragment,Zgt),Zgt.forEach(t),Kgt.forEach(t),qIo=i(LGe),Tge=n(LGe,"SPAN",{});var eht=s(Tge);jIo=r(eht,"AutoModelForMultipleChoice"),eht.forEach(t),LGe.forEach(t),Cje=i(f),Po=n(f,"DIV",{class:!0});var Us=s(Po);T(VL.$$.fragment,Us),DIo=i(Us),Wi=n(Us,"P",{});var tee=s(Wi);GIo=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AO=n(tee,"A",{href:!0});var oht=s(AO);OIo=r(oht,"from_pretrained()"),oht.forEach(t),VIo=r(tee," class method or the "),LO=n(tee,"A",{href:!0});var rht=s(LO);XIo=r(rht,"from_config()"),rht.forEach(t),zIo=r(tee,` class
method.`),tee.forEach(t),WIo=i(Us),XL=n(Us,"P",{});var yGe=s(XL);QIo=r(yGe,"This class cannot be instantiated directly using "),Mge=n(yGe,"CODE",{});var tht=s(Mge);HIo=r(tht,"__init__()"),tht.forEach(t),UIo=r(yGe," (throws an error)."),yGe.forEach(t),JIo=i(Us),dt=n(Us,"DIV",{class:!0});var rA=s(dt);T(zL.$$.fragment,rA),YIo=i(rA),Ege=n(rA,"P",{});var aht=s(Ege);KIo=r(aht,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),aht.forEach(t),ZIo=i(rA),Qi=n(rA,"P",{});var aee=s(Qi);eNo=r(aee,`Note:
Loading a model from its configuration file does `),Cge=n(aee,"STRONG",{});var nht=s(Cge);oNo=r(nht,"not"),nht.forEach(t),rNo=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=n(aee,"A",{href:!0});var sht=s(yO);tNo=r(sht,"from_pretrained()"),sht.forEach(t),aNo=r(aee," to load the model weights."),aee.forEach(t),nNo=i(rA),T(Hb.$$.fragment,rA),rA.forEach(t),sNo=i(Us),ro=n(Us,"DIV",{class:!0});var la=s(ro);T(WL.$$.fragment,la),lNo=i(la),wge=n(la,"P",{});var lht=s(wge);iNo=r(lht,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lht.forEach(t),dNo=i(la),Pa=n(la,"P",{});var tA=s(Pa);cNo=r(tA,"The model class to instantiate is selected based on the "),Age=n(tA,"CODE",{});var iht=s(Age);fNo=r(iht,"model_type"),iht.forEach(t),mNo=r(tA,` property of the config object (either
passed as an argument or loaded from `),Lge=n(tA,"CODE",{});var dht=s(Lge);gNo=r(dht,"pretrained_model_name_or_path"),dht.forEach(t),hNo=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=n(tA,"CODE",{});var cht=s(yge);pNo=r(cht,"pretrained_model_name_or_path"),cht.forEach(t),_No=r(tA,":"),tA.forEach(t),uNo=i(la),K=n(la,"UL",{});var ee=s(K);Ub=n(ee,"LI",{});var Qxe=s(Ub);xge=n(Qxe,"STRONG",{});var fht=s(xge);bNo=r(fht,"albert"),fht.forEach(t),vNo=r(Qxe," \u2014 "),xO=n(Qxe,"A",{href:!0});var mht=s(xO);FNo=r(mht,"AlbertForMultipleChoice"),mht.forEach(t),TNo=r(Qxe," (ALBERT model)"),Qxe.forEach(t),MNo=i(ee),Jb=n(ee,"LI",{});var Hxe=s(Jb);$ge=n(Hxe,"STRONG",{});var ght=s($ge);ENo=r(ght,"bert"),ght.forEach(t),CNo=r(Hxe," \u2014 "),$O=n(Hxe,"A",{href:!0});var hht=s($O);wNo=r(hht,"BertForMultipleChoice"),hht.forEach(t),ANo=r(Hxe," (BERT model)"),Hxe.forEach(t),LNo=i(ee),Yb=n(ee,"LI",{});var Uxe=s(Yb);kge=n(Uxe,"STRONG",{});var pht=s(kge);yNo=r(pht,"big_bird"),pht.forEach(t),xNo=r(Uxe," \u2014 "),kO=n(Uxe,"A",{href:!0});var _ht=s(kO);$No=r(_ht,"BigBirdForMultipleChoice"),_ht.forEach(t),kNo=r(Uxe," (BigBird model)"),Uxe.forEach(t),SNo=i(ee),Kb=n(ee,"LI",{});var Jxe=s(Kb);Sge=n(Jxe,"STRONG",{});var uht=s(Sge);RNo=r(uht,"camembert"),uht.forEach(t),PNo=r(Jxe," \u2014 "),SO=n(Jxe,"A",{href:!0});var bht=s(SO);BNo=r(bht,"CamembertForMultipleChoice"),bht.forEach(t),INo=r(Jxe," (CamemBERT model)"),Jxe.forEach(t),NNo=i(ee),Zb=n(ee,"LI",{});var Yxe=s(Zb);Rge=n(Yxe,"STRONG",{});var vht=s(Rge);qNo=r(vht,"canine"),vht.forEach(t),jNo=r(Yxe," \u2014 "),RO=n(Yxe,"A",{href:!0});var Fht=s(RO);DNo=r(Fht,"CanineForMultipleChoice"),Fht.forEach(t),GNo=r(Yxe," (CANINE model)"),Yxe.forEach(t),ONo=i(ee),e2=n(ee,"LI",{});var Kxe=s(e2);Pge=n(Kxe,"STRONG",{});var Tht=s(Pge);VNo=r(Tht,"convbert"),Tht.forEach(t),XNo=r(Kxe," \u2014 "),PO=n(Kxe,"A",{href:!0});var Mht=s(PO);zNo=r(Mht,"ConvBertForMultipleChoice"),Mht.forEach(t),WNo=r(Kxe," (ConvBERT model)"),Kxe.forEach(t),QNo=i(ee),o2=n(ee,"LI",{});var Zxe=s(o2);Bge=n(Zxe,"STRONG",{});var Eht=s(Bge);HNo=r(Eht,"data2vec-text"),Eht.forEach(t),UNo=r(Zxe," \u2014 "),BO=n(Zxe,"A",{href:!0});var Cht=s(BO);JNo=r(Cht,"Data2VecTextForMultipleChoice"),Cht.forEach(t),YNo=r(Zxe," (Data2VecText model)"),Zxe.forEach(t),KNo=i(ee),r2=n(ee,"LI",{});var e$e=s(r2);Ige=n(e$e,"STRONG",{});var wht=s(Ige);ZNo=r(wht,"deberta-v2"),wht.forEach(t),eqo=r(e$e," \u2014 "),IO=n(e$e,"A",{href:!0});var Aht=s(IO);oqo=r(Aht,"DebertaV2ForMultipleChoice"),Aht.forEach(t),rqo=r(e$e," (DeBERTa-v2 model)"),e$e.forEach(t),tqo=i(ee),t2=n(ee,"LI",{});var o$e=s(t2);Nge=n(o$e,"STRONG",{});var Lht=s(Nge);aqo=r(Lht,"distilbert"),Lht.forEach(t),nqo=r(o$e," \u2014 "),NO=n(o$e,"A",{href:!0});var yht=s(NO);sqo=r(yht,"DistilBertForMultipleChoice"),yht.forEach(t),lqo=r(o$e," (DistilBERT model)"),o$e.forEach(t),iqo=i(ee),a2=n(ee,"LI",{});var r$e=s(a2);qge=n(r$e,"STRONG",{});var xht=s(qge);dqo=r(xht,"electra"),xht.forEach(t),cqo=r(r$e," \u2014 "),qO=n(r$e,"A",{href:!0});var $ht=s(qO);fqo=r($ht,"ElectraForMultipleChoice"),$ht.forEach(t),mqo=r(r$e," (ELECTRA model)"),r$e.forEach(t),gqo=i(ee),n2=n(ee,"LI",{});var t$e=s(n2);jge=n(t$e,"STRONG",{});var kht=s(jge);hqo=r(kht,"flaubert"),kht.forEach(t),pqo=r(t$e," \u2014 "),jO=n(t$e,"A",{href:!0});var Sht=s(jO);_qo=r(Sht,"FlaubertForMultipleChoice"),Sht.forEach(t),uqo=r(t$e," (FlauBERT model)"),t$e.forEach(t),bqo=i(ee),s2=n(ee,"LI",{});var a$e=s(s2);Dge=n(a$e,"STRONG",{});var Rht=s(Dge);vqo=r(Rht,"fnet"),Rht.forEach(t),Fqo=r(a$e," \u2014 "),DO=n(a$e,"A",{href:!0});var Pht=s(DO);Tqo=r(Pht,"FNetForMultipleChoice"),Pht.forEach(t),Mqo=r(a$e," (FNet model)"),a$e.forEach(t),Eqo=i(ee),l2=n(ee,"LI",{});var n$e=s(l2);Gge=n(n$e,"STRONG",{});var Bht=s(Gge);Cqo=r(Bht,"funnel"),Bht.forEach(t),wqo=r(n$e," \u2014 "),GO=n(n$e,"A",{href:!0});var Iht=s(GO);Aqo=r(Iht,"FunnelForMultipleChoice"),Iht.forEach(t),Lqo=r(n$e," (Funnel Transformer model)"),n$e.forEach(t),yqo=i(ee),i2=n(ee,"LI",{});var s$e=s(i2);Oge=n(s$e,"STRONG",{});var Nht=s(Oge);xqo=r(Nht,"ibert"),Nht.forEach(t),$qo=r(s$e," \u2014 "),OO=n(s$e,"A",{href:!0});var qht=s(OO);kqo=r(qht,"IBertForMultipleChoice"),qht.forEach(t),Sqo=r(s$e," (I-BERT model)"),s$e.forEach(t),Rqo=i(ee),d2=n(ee,"LI",{});var l$e=s(d2);Vge=n(l$e,"STRONG",{});var jht=s(Vge);Pqo=r(jht,"longformer"),jht.forEach(t),Bqo=r(l$e," \u2014 "),VO=n(l$e,"A",{href:!0});var Dht=s(VO);Iqo=r(Dht,"LongformerForMultipleChoice"),Dht.forEach(t),Nqo=r(l$e," (Longformer model)"),l$e.forEach(t),qqo=i(ee),c2=n(ee,"LI",{});var i$e=s(c2);Xge=n(i$e,"STRONG",{});var Ght=s(Xge);jqo=r(Ght,"megatron-bert"),Ght.forEach(t),Dqo=r(i$e," \u2014 "),XO=n(i$e,"A",{href:!0});var Oht=s(XO);Gqo=r(Oht,"MegatronBertForMultipleChoice"),Oht.forEach(t),Oqo=r(i$e," (Megatron-BERT model)"),i$e.forEach(t),Vqo=i(ee),f2=n(ee,"LI",{});var d$e=s(f2);zge=n(d$e,"STRONG",{});var Vht=s(zge);Xqo=r(Vht,"mobilebert"),Vht.forEach(t),zqo=r(d$e," \u2014 "),zO=n(d$e,"A",{href:!0});var Xht=s(zO);Wqo=r(Xht,"MobileBertForMultipleChoice"),Xht.forEach(t),Qqo=r(d$e," (MobileBERT model)"),d$e.forEach(t),Hqo=i(ee),m2=n(ee,"LI",{});var c$e=s(m2);Wge=n(c$e,"STRONG",{});var zht=s(Wge);Uqo=r(zht,"mpnet"),zht.forEach(t),Jqo=r(c$e," \u2014 "),WO=n(c$e,"A",{href:!0});var Wht=s(WO);Yqo=r(Wht,"MPNetForMultipleChoice"),Wht.forEach(t),Kqo=r(c$e," (MPNet model)"),c$e.forEach(t),Zqo=i(ee),g2=n(ee,"LI",{});var f$e=s(g2);Qge=n(f$e,"STRONG",{});var Qht=s(Qge);ejo=r(Qht,"nystromformer"),Qht.forEach(t),ojo=r(f$e," \u2014 "),QO=n(f$e,"A",{href:!0});var Hht=s(QO);rjo=r(Hht,"NystromformerForMultipleChoice"),Hht.forEach(t),tjo=r(f$e," (Nystr\xF6mformer model)"),f$e.forEach(t),ajo=i(ee),h2=n(ee,"LI",{});var m$e=s(h2);Hge=n(m$e,"STRONG",{});var Uht=s(Hge);njo=r(Uht,"qdqbert"),Uht.forEach(t),sjo=r(m$e," \u2014 "),HO=n(m$e,"A",{href:!0});var Jht=s(HO);ljo=r(Jht,"QDQBertForMultipleChoice"),Jht.forEach(t),ijo=r(m$e," (QDQBert model)"),m$e.forEach(t),djo=i(ee),p2=n(ee,"LI",{});var g$e=s(p2);Uge=n(g$e,"STRONG",{});var Yht=s(Uge);cjo=r(Yht,"rembert"),Yht.forEach(t),fjo=r(g$e," \u2014 "),UO=n(g$e,"A",{href:!0});var Kht=s(UO);mjo=r(Kht,"RemBertForMultipleChoice"),Kht.forEach(t),gjo=r(g$e," (RemBERT model)"),g$e.forEach(t),hjo=i(ee),_2=n(ee,"LI",{});var h$e=s(_2);Jge=n(h$e,"STRONG",{});var Zht=s(Jge);pjo=r(Zht,"roberta"),Zht.forEach(t),_jo=r(h$e," \u2014 "),JO=n(h$e,"A",{href:!0});var ept=s(JO);ujo=r(ept,"RobertaForMultipleChoice"),ept.forEach(t),bjo=r(h$e," (RoBERTa model)"),h$e.forEach(t),vjo=i(ee),u2=n(ee,"LI",{});var p$e=s(u2);Yge=n(p$e,"STRONG",{});var opt=s(Yge);Fjo=r(opt,"roformer"),opt.forEach(t),Tjo=r(p$e," \u2014 "),YO=n(p$e,"A",{href:!0});var rpt=s(YO);Mjo=r(rpt,"RoFormerForMultipleChoice"),rpt.forEach(t),Ejo=r(p$e," (RoFormer model)"),p$e.forEach(t),Cjo=i(ee),b2=n(ee,"LI",{});var _$e=s(b2);Kge=n(_$e,"STRONG",{});var tpt=s(Kge);wjo=r(tpt,"squeezebert"),tpt.forEach(t),Ajo=r(_$e," \u2014 "),KO=n(_$e,"A",{href:!0});var apt=s(KO);Ljo=r(apt,"SqueezeBertForMultipleChoice"),apt.forEach(t),yjo=r(_$e," (SqueezeBERT model)"),_$e.forEach(t),xjo=i(ee),v2=n(ee,"LI",{});var u$e=s(v2);Zge=n(u$e,"STRONG",{});var npt=s(Zge);$jo=r(npt,"xlm"),npt.forEach(t),kjo=r(u$e," \u2014 "),ZO=n(u$e,"A",{href:!0});var spt=s(ZO);Sjo=r(spt,"XLMForMultipleChoice"),spt.forEach(t),Rjo=r(u$e," (XLM model)"),u$e.forEach(t),Pjo=i(ee),F2=n(ee,"LI",{});var b$e=s(F2);ehe=n(b$e,"STRONG",{});var lpt=s(ehe);Bjo=r(lpt,"xlm-roberta"),lpt.forEach(t),Ijo=r(b$e," \u2014 "),eV=n(b$e,"A",{href:!0});var ipt=s(eV);Njo=r(ipt,"XLMRobertaForMultipleChoice"),ipt.forEach(t),qjo=r(b$e," (XLM-RoBERTa model)"),b$e.forEach(t),jjo=i(ee),T2=n(ee,"LI",{});var v$e=s(T2);ohe=n(v$e,"STRONG",{});var dpt=s(ohe);Djo=r(dpt,"xlm-roberta-xl"),dpt.forEach(t),Gjo=r(v$e," \u2014 "),oV=n(v$e,"A",{href:!0});var cpt=s(oV);Ojo=r(cpt,"XLMRobertaXLForMultipleChoice"),cpt.forEach(t),Vjo=r(v$e," (XLM-RoBERTa-XL model)"),v$e.forEach(t),Xjo=i(ee),M2=n(ee,"LI",{});var F$e=s(M2);rhe=n(F$e,"STRONG",{});var fpt=s(rhe);zjo=r(fpt,"xlnet"),fpt.forEach(t),Wjo=r(F$e," \u2014 "),rV=n(F$e,"A",{href:!0});var mpt=s(rV);Qjo=r(mpt,"XLNetForMultipleChoice"),mpt.forEach(t),Hjo=r(F$e," (XLNet model)"),F$e.forEach(t),Ujo=i(ee),E2=n(ee,"LI",{});var T$e=s(E2);the=n(T$e,"STRONG",{});var gpt=s(the);Jjo=r(gpt,"yoso"),gpt.forEach(t),Yjo=r(T$e," \u2014 "),tV=n(T$e,"A",{href:!0});var hpt=s(tV);Kjo=r(hpt,"YosoForMultipleChoice"),hpt.forEach(t),Zjo=r(T$e," (YOSO model)"),T$e.forEach(t),ee.forEach(t),eDo=i(la),C2=n(la,"P",{});var M$e=s(C2);oDo=r(M$e,"The model is set in evaluation mode by default using "),ahe=n(M$e,"CODE",{});var ppt=s(ahe);rDo=r(ppt,"model.eval()"),ppt.forEach(t),tDo=r(M$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nhe=n(M$e,"CODE",{});var _pt=s(nhe);aDo=r(_pt,"model.train()"),_pt.forEach(t),M$e.forEach(t),nDo=i(la),T(w2.$$.fragment,la),la.forEach(t),Us.forEach(t),wje=i(f),Hi=n(f,"H2",{class:!0});var xGe=s(Hi);A2=n(xGe,"A",{id:!0,class:!0,href:!0});var upt=s(A2);she=n(upt,"SPAN",{});var bpt=s(she);T(QL.$$.fragment,bpt),bpt.forEach(t),upt.forEach(t),sDo=i(xGe),lhe=n(xGe,"SPAN",{});var vpt=s(lhe);lDo=r(vpt,"AutoModelForNextSentencePrediction"),vpt.forEach(t),xGe.forEach(t),Aje=i(f),Bo=n(f,"DIV",{class:!0});var Js=s(Bo);T(HL.$$.fragment,Js),iDo=i(Js),Ui=n(Js,"P",{});var nee=s(Ui);dDo=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aV=n(nee,"A",{href:!0});var Fpt=s(aV);cDo=r(Fpt,"from_pretrained()"),Fpt.forEach(t),fDo=r(nee," class method or the "),nV=n(nee,"A",{href:!0});var Tpt=s(nV);mDo=r(Tpt,"from_config()"),Tpt.forEach(t),gDo=r(nee,` class
method.`),nee.forEach(t),hDo=i(Js),UL=n(Js,"P",{});var $Ge=s(UL);pDo=r($Ge,"This class cannot be instantiated directly using "),ihe=n($Ge,"CODE",{});var Mpt=s(ihe);_Do=r(Mpt,"__init__()"),Mpt.forEach(t),uDo=r($Ge," (throws an error)."),$Ge.forEach(t),bDo=i(Js),ct=n(Js,"DIV",{class:!0});var aA=s(ct);T(JL.$$.fragment,aA),vDo=i(aA),dhe=n(aA,"P",{});var Ept=s(dhe);FDo=r(Ept,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ept.forEach(t),TDo=i(aA),Ji=n(aA,"P",{});var see=s(Ji);MDo=r(see,`Note:
Loading a model from its configuration file does `),che=n(see,"STRONG",{});var Cpt=s(che);EDo=r(Cpt,"not"),Cpt.forEach(t),CDo=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=n(see,"A",{href:!0});var wpt=s(sV);wDo=r(wpt,"from_pretrained()"),wpt.forEach(t),ADo=r(see," to load the model weights."),see.forEach(t),LDo=i(aA),T(L2.$$.fragment,aA),aA.forEach(t),yDo=i(Js),to=n(Js,"DIV",{class:!0});var ia=s(to);T(YL.$$.fragment,ia),xDo=i(ia),fhe=n(ia,"P",{});var Apt=s(fhe);$Do=r(Apt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Apt.forEach(t),kDo=i(ia),Ba=n(ia,"P",{});var nA=s(Ba);SDo=r(nA,"The model class to instantiate is selected based on the "),mhe=n(nA,"CODE",{});var Lpt=s(mhe);RDo=r(Lpt,"model_type"),Lpt.forEach(t),PDo=r(nA,` property of the config object (either
passed as an argument or loaded from `),ghe=n(nA,"CODE",{});var ypt=s(ghe);BDo=r(ypt,"pretrained_model_name_or_path"),ypt.forEach(t),IDo=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hhe=n(nA,"CODE",{});var xpt=s(hhe);NDo=r(xpt,"pretrained_model_name_or_path"),xpt.forEach(t),qDo=r(nA,":"),nA.forEach(t),jDo=i(ia),Yr=n(ia,"UL",{});var Ys=s(Yr);y2=n(Ys,"LI",{});var E$e=s(y2);phe=n(E$e,"STRONG",{});var $pt=s(phe);DDo=r($pt,"bert"),$pt.forEach(t),GDo=r(E$e," \u2014 "),lV=n(E$e,"A",{href:!0});var kpt=s(lV);ODo=r(kpt,"BertForNextSentencePrediction"),kpt.forEach(t),VDo=r(E$e," (BERT model)"),E$e.forEach(t),XDo=i(Ys),x2=n(Ys,"LI",{});var C$e=s(x2);_he=n(C$e,"STRONG",{});var Spt=s(_he);zDo=r(Spt,"fnet"),Spt.forEach(t),WDo=r(C$e," \u2014 "),iV=n(C$e,"A",{href:!0});var Rpt=s(iV);QDo=r(Rpt,"FNetForNextSentencePrediction"),Rpt.forEach(t),HDo=r(C$e," (FNet model)"),C$e.forEach(t),UDo=i(Ys),$2=n(Ys,"LI",{});var w$e=s($2);uhe=n(w$e,"STRONG",{});var Ppt=s(uhe);JDo=r(Ppt,"megatron-bert"),Ppt.forEach(t),YDo=r(w$e," \u2014 "),dV=n(w$e,"A",{href:!0});var Bpt=s(dV);KDo=r(Bpt,"MegatronBertForNextSentencePrediction"),Bpt.forEach(t),ZDo=r(w$e," (Megatron-BERT model)"),w$e.forEach(t),eGo=i(Ys),k2=n(Ys,"LI",{});var A$e=s(k2);bhe=n(A$e,"STRONG",{});var Ipt=s(bhe);oGo=r(Ipt,"mobilebert"),Ipt.forEach(t),rGo=r(A$e," \u2014 "),cV=n(A$e,"A",{href:!0});var Npt=s(cV);tGo=r(Npt,"MobileBertForNextSentencePrediction"),Npt.forEach(t),aGo=r(A$e," (MobileBERT model)"),A$e.forEach(t),nGo=i(Ys),S2=n(Ys,"LI",{});var L$e=s(S2);vhe=n(L$e,"STRONG",{});var qpt=s(vhe);sGo=r(qpt,"qdqbert"),qpt.forEach(t),lGo=r(L$e," \u2014 "),fV=n(L$e,"A",{href:!0});var jpt=s(fV);iGo=r(jpt,"QDQBertForNextSentencePrediction"),jpt.forEach(t),dGo=r(L$e," (QDQBert model)"),L$e.forEach(t),Ys.forEach(t),cGo=i(ia),R2=n(ia,"P",{});var y$e=s(R2);fGo=r(y$e,"The model is set in evaluation mode by default using "),Fhe=n(y$e,"CODE",{});var Dpt=s(Fhe);mGo=r(Dpt,"model.eval()"),Dpt.forEach(t),gGo=r(y$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=n(y$e,"CODE",{});var Gpt=s(The);hGo=r(Gpt,"model.train()"),Gpt.forEach(t),y$e.forEach(t),pGo=i(ia),T(P2.$$.fragment,ia),ia.forEach(t),Js.forEach(t),Lje=i(f),Yi=n(f,"H2",{class:!0});var kGe=s(Yi);B2=n(kGe,"A",{id:!0,class:!0,href:!0});var Opt=s(B2);Mhe=n(Opt,"SPAN",{});var Vpt=s(Mhe);T(KL.$$.fragment,Vpt),Vpt.forEach(t),Opt.forEach(t),_Go=i(kGe),Ehe=n(kGe,"SPAN",{});var Xpt=s(Ehe);uGo=r(Xpt,"AutoModelForTokenClassification"),Xpt.forEach(t),kGe.forEach(t),yje=i(f),Io=n(f,"DIV",{class:!0});var Ks=s(Io);T(ZL.$$.fragment,Ks),bGo=i(Ks),Ki=n(Ks,"P",{});var lee=s(Ki);vGo=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mV=n(lee,"A",{href:!0});var zpt=s(mV);FGo=r(zpt,"from_pretrained()"),zpt.forEach(t),TGo=r(lee," class method or the "),gV=n(lee,"A",{href:!0});var Wpt=s(gV);MGo=r(Wpt,"from_config()"),Wpt.forEach(t),EGo=r(lee,` class
method.`),lee.forEach(t),CGo=i(Ks),ey=n(Ks,"P",{});var SGe=s(ey);wGo=r(SGe,"This class cannot be instantiated directly using "),Che=n(SGe,"CODE",{});var Qpt=s(Che);AGo=r(Qpt,"__init__()"),Qpt.forEach(t),LGo=r(SGe," (throws an error)."),SGe.forEach(t),yGo=i(Ks),ft=n(Ks,"DIV",{class:!0});var sA=s(ft);T(oy.$$.fragment,sA),xGo=i(sA),whe=n(sA,"P",{});var Hpt=s(whe);$Go=r(Hpt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Hpt.forEach(t),kGo=i(sA),Zi=n(sA,"P",{});var iee=s(Zi);SGo=r(iee,`Note:
Loading a model from its configuration file does `),Ahe=n(iee,"STRONG",{});var Upt=s(Ahe);RGo=r(Upt,"not"),Upt.forEach(t),PGo=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=n(iee,"A",{href:!0});var Jpt=s(hV);BGo=r(Jpt,"from_pretrained()"),Jpt.forEach(t),IGo=r(iee," to load the model weights."),iee.forEach(t),NGo=i(sA),T(I2.$$.fragment,sA),sA.forEach(t),qGo=i(Ks),ao=n(Ks,"DIV",{class:!0});var da=s(ao);T(ry.$$.fragment,da),jGo=i(da),Lhe=n(da,"P",{});var Ypt=s(Lhe);DGo=r(Ypt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ypt.forEach(t),GGo=i(da),Ia=n(da,"P",{});var lA=s(Ia);OGo=r(lA,"The model class to instantiate is selected based on the "),yhe=n(lA,"CODE",{});var Kpt=s(yhe);VGo=r(Kpt,"model_type"),Kpt.forEach(t),XGo=r(lA,` property of the config object (either
passed as an argument or loaded from `),xhe=n(lA,"CODE",{});var Zpt=s(xhe);zGo=r(Zpt,"pretrained_model_name_or_path"),Zpt.forEach(t),WGo=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=n(lA,"CODE",{});var e_t=s($he);QGo=r(e_t,"pretrained_model_name_or_path"),e_t.forEach(t),HGo=r(lA,":"),lA.forEach(t),UGo=i(da),U=n(da,"UL",{});var J=s(U);N2=n(J,"LI",{});var x$e=s(N2);khe=n(x$e,"STRONG",{});var o_t=s(khe);JGo=r(o_t,"albert"),o_t.forEach(t),YGo=r(x$e," \u2014 "),pV=n(x$e,"A",{href:!0});var r_t=s(pV);KGo=r(r_t,"AlbertForTokenClassification"),r_t.forEach(t),ZGo=r(x$e," (ALBERT model)"),x$e.forEach(t),eOo=i(J),q2=n(J,"LI",{});var $$e=s(q2);She=n($$e,"STRONG",{});var t_t=s(She);oOo=r(t_t,"bert"),t_t.forEach(t),rOo=r($$e," \u2014 "),_V=n($$e,"A",{href:!0});var a_t=s(_V);tOo=r(a_t,"BertForTokenClassification"),a_t.forEach(t),aOo=r($$e," (BERT model)"),$$e.forEach(t),nOo=i(J),j2=n(J,"LI",{});var k$e=s(j2);Rhe=n(k$e,"STRONG",{});var n_t=s(Rhe);sOo=r(n_t,"big_bird"),n_t.forEach(t),lOo=r(k$e," \u2014 "),uV=n(k$e,"A",{href:!0});var s_t=s(uV);iOo=r(s_t,"BigBirdForTokenClassification"),s_t.forEach(t),dOo=r(k$e," (BigBird model)"),k$e.forEach(t),cOo=i(J),D2=n(J,"LI",{});var S$e=s(D2);Phe=n(S$e,"STRONG",{});var l_t=s(Phe);fOo=r(l_t,"camembert"),l_t.forEach(t),mOo=r(S$e," \u2014 "),bV=n(S$e,"A",{href:!0});var i_t=s(bV);gOo=r(i_t,"CamembertForTokenClassification"),i_t.forEach(t),hOo=r(S$e," (CamemBERT model)"),S$e.forEach(t),pOo=i(J),G2=n(J,"LI",{});var R$e=s(G2);Bhe=n(R$e,"STRONG",{});var d_t=s(Bhe);_Oo=r(d_t,"canine"),d_t.forEach(t),uOo=r(R$e," \u2014 "),vV=n(R$e,"A",{href:!0});var c_t=s(vV);bOo=r(c_t,"CanineForTokenClassification"),c_t.forEach(t),vOo=r(R$e," (CANINE model)"),R$e.forEach(t),FOo=i(J),O2=n(J,"LI",{});var P$e=s(O2);Ihe=n(P$e,"STRONG",{});var f_t=s(Ihe);TOo=r(f_t,"convbert"),f_t.forEach(t),MOo=r(P$e," \u2014 "),FV=n(P$e,"A",{href:!0});var m_t=s(FV);EOo=r(m_t,"ConvBertForTokenClassification"),m_t.forEach(t),COo=r(P$e," (ConvBERT model)"),P$e.forEach(t),wOo=i(J),V2=n(J,"LI",{});var B$e=s(V2);Nhe=n(B$e,"STRONG",{});var g_t=s(Nhe);AOo=r(g_t,"data2vec-text"),g_t.forEach(t),LOo=r(B$e," \u2014 "),TV=n(B$e,"A",{href:!0});var h_t=s(TV);yOo=r(h_t,"Data2VecTextForTokenClassification"),h_t.forEach(t),xOo=r(B$e," (Data2VecText model)"),B$e.forEach(t),$Oo=i(J),X2=n(J,"LI",{});var I$e=s(X2);qhe=n(I$e,"STRONG",{});var p_t=s(qhe);kOo=r(p_t,"deberta"),p_t.forEach(t),SOo=r(I$e," \u2014 "),MV=n(I$e,"A",{href:!0});var __t=s(MV);ROo=r(__t,"DebertaForTokenClassification"),__t.forEach(t),POo=r(I$e," (DeBERTa model)"),I$e.forEach(t),BOo=i(J),z2=n(J,"LI",{});var N$e=s(z2);jhe=n(N$e,"STRONG",{});var u_t=s(jhe);IOo=r(u_t,"deberta-v2"),u_t.forEach(t),NOo=r(N$e," \u2014 "),EV=n(N$e,"A",{href:!0});var b_t=s(EV);qOo=r(b_t,"DebertaV2ForTokenClassification"),b_t.forEach(t),jOo=r(N$e," (DeBERTa-v2 model)"),N$e.forEach(t),DOo=i(J),W2=n(J,"LI",{});var q$e=s(W2);Dhe=n(q$e,"STRONG",{});var v_t=s(Dhe);GOo=r(v_t,"distilbert"),v_t.forEach(t),OOo=r(q$e," \u2014 "),CV=n(q$e,"A",{href:!0});var F_t=s(CV);VOo=r(F_t,"DistilBertForTokenClassification"),F_t.forEach(t),XOo=r(q$e," (DistilBERT model)"),q$e.forEach(t),zOo=i(J),Q2=n(J,"LI",{});var j$e=s(Q2);Ghe=n(j$e,"STRONG",{});var T_t=s(Ghe);WOo=r(T_t,"electra"),T_t.forEach(t),QOo=r(j$e," \u2014 "),wV=n(j$e,"A",{href:!0});var M_t=s(wV);HOo=r(M_t,"ElectraForTokenClassification"),M_t.forEach(t),UOo=r(j$e," (ELECTRA model)"),j$e.forEach(t),JOo=i(J),H2=n(J,"LI",{});var D$e=s(H2);Ohe=n(D$e,"STRONG",{});var E_t=s(Ohe);YOo=r(E_t,"flaubert"),E_t.forEach(t),KOo=r(D$e," \u2014 "),AV=n(D$e,"A",{href:!0});var C_t=s(AV);ZOo=r(C_t,"FlaubertForTokenClassification"),C_t.forEach(t),eVo=r(D$e," (FlauBERT model)"),D$e.forEach(t),oVo=i(J),U2=n(J,"LI",{});var G$e=s(U2);Vhe=n(G$e,"STRONG",{});var w_t=s(Vhe);rVo=r(w_t,"fnet"),w_t.forEach(t),tVo=r(G$e," \u2014 "),LV=n(G$e,"A",{href:!0});var A_t=s(LV);aVo=r(A_t,"FNetForTokenClassification"),A_t.forEach(t),nVo=r(G$e," (FNet model)"),G$e.forEach(t),sVo=i(J),J2=n(J,"LI",{});var O$e=s(J2);Xhe=n(O$e,"STRONG",{});var L_t=s(Xhe);lVo=r(L_t,"funnel"),L_t.forEach(t),iVo=r(O$e," \u2014 "),yV=n(O$e,"A",{href:!0});var y_t=s(yV);dVo=r(y_t,"FunnelForTokenClassification"),y_t.forEach(t),cVo=r(O$e," (Funnel Transformer model)"),O$e.forEach(t),fVo=i(J),Y2=n(J,"LI",{});var V$e=s(Y2);zhe=n(V$e,"STRONG",{});var x_t=s(zhe);mVo=r(x_t,"gpt2"),x_t.forEach(t),gVo=r(V$e," \u2014 "),xV=n(V$e,"A",{href:!0});var $_t=s(xV);hVo=r($_t,"GPT2ForTokenClassification"),$_t.forEach(t),pVo=r(V$e," (OpenAI GPT-2 model)"),V$e.forEach(t),_Vo=i(J),K2=n(J,"LI",{});var X$e=s(K2);Whe=n(X$e,"STRONG",{});var k_t=s(Whe);uVo=r(k_t,"ibert"),k_t.forEach(t),bVo=r(X$e," \u2014 "),$V=n(X$e,"A",{href:!0});var S_t=s($V);vVo=r(S_t,"IBertForTokenClassification"),S_t.forEach(t),FVo=r(X$e," (I-BERT model)"),X$e.forEach(t),TVo=i(J),Z2=n(J,"LI",{});var z$e=s(Z2);Qhe=n(z$e,"STRONG",{});var R_t=s(Qhe);MVo=r(R_t,"layoutlm"),R_t.forEach(t),EVo=r(z$e," \u2014 "),kV=n(z$e,"A",{href:!0});var P_t=s(kV);CVo=r(P_t,"LayoutLMForTokenClassification"),P_t.forEach(t),wVo=r(z$e," (LayoutLM model)"),z$e.forEach(t),AVo=i(J),ev=n(J,"LI",{});var W$e=s(ev);Hhe=n(W$e,"STRONG",{});var B_t=s(Hhe);LVo=r(B_t,"layoutlmv2"),B_t.forEach(t),yVo=r(W$e," \u2014 "),SV=n(W$e,"A",{href:!0});var I_t=s(SV);xVo=r(I_t,"LayoutLMv2ForTokenClassification"),I_t.forEach(t),$Vo=r(W$e," (LayoutLMv2 model)"),W$e.forEach(t),kVo=i(J),ov=n(J,"LI",{});var Q$e=s(ov);Uhe=n(Q$e,"STRONG",{});var N_t=s(Uhe);SVo=r(N_t,"layoutlmv3"),N_t.forEach(t),RVo=r(Q$e," \u2014 "),RV=n(Q$e,"A",{href:!0});var q_t=s(RV);PVo=r(q_t,"LayoutLMv3ForTokenClassification"),q_t.forEach(t),BVo=r(Q$e," (LayoutLMv3 model)"),Q$e.forEach(t),IVo=i(J),rv=n(J,"LI",{});var H$e=s(rv);Jhe=n(H$e,"STRONG",{});var j_t=s(Jhe);NVo=r(j_t,"longformer"),j_t.forEach(t),qVo=r(H$e," \u2014 "),PV=n(H$e,"A",{href:!0});var D_t=s(PV);jVo=r(D_t,"LongformerForTokenClassification"),D_t.forEach(t),DVo=r(H$e," (Longformer model)"),H$e.forEach(t),GVo=i(J),tv=n(J,"LI",{});var U$e=s(tv);Yhe=n(U$e,"STRONG",{});var G_t=s(Yhe);OVo=r(G_t,"megatron-bert"),G_t.forEach(t),VVo=r(U$e," \u2014 "),BV=n(U$e,"A",{href:!0});var O_t=s(BV);XVo=r(O_t,"MegatronBertForTokenClassification"),O_t.forEach(t),zVo=r(U$e," (Megatron-BERT model)"),U$e.forEach(t),WVo=i(J),av=n(J,"LI",{});var J$e=s(av);Khe=n(J$e,"STRONG",{});var V_t=s(Khe);QVo=r(V_t,"mobilebert"),V_t.forEach(t),HVo=r(J$e," \u2014 "),IV=n(J$e,"A",{href:!0});var X_t=s(IV);UVo=r(X_t,"MobileBertForTokenClassification"),X_t.forEach(t),JVo=r(J$e," (MobileBERT model)"),J$e.forEach(t),YVo=i(J),nv=n(J,"LI",{});var Y$e=s(nv);Zhe=n(Y$e,"STRONG",{});var z_t=s(Zhe);KVo=r(z_t,"mpnet"),z_t.forEach(t),ZVo=r(Y$e," \u2014 "),NV=n(Y$e,"A",{href:!0});var W_t=s(NV);eXo=r(W_t,"MPNetForTokenClassification"),W_t.forEach(t),oXo=r(Y$e," (MPNet model)"),Y$e.forEach(t),rXo=i(J),sv=n(J,"LI",{});var K$e=s(sv);epe=n(K$e,"STRONG",{});var Q_t=s(epe);tXo=r(Q_t,"nystromformer"),Q_t.forEach(t),aXo=r(K$e," \u2014 "),qV=n(K$e,"A",{href:!0});var H_t=s(qV);nXo=r(H_t,"NystromformerForTokenClassification"),H_t.forEach(t),sXo=r(K$e," (Nystr\xF6mformer model)"),K$e.forEach(t),lXo=i(J),lv=n(J,"LI",{});var Z$e=s(lv);ope=n(Z$e,"STRONG",{});var U_t=s(ope);iXo=r(U_t,"qdqbert"),U_t.forEach(t),dXo=r(Z$e," \u2014 "),jV=n(Z$e,"A",{href:!0});var J_t=s(jV);cXo=r(J_t,"QDQBertForTokenClassification"),J_t.forEach(t),fXo=r(Z$e," (QDQBert model)"),Z$e.forEach(t),mXo=i(J),iv=n(J,"LI",{});var eke=s(iv);rpe=n(eke,"STRONG",{});var Y_t=s(rpe);gXo=r(Y_t,"rembert"),Y_t.forEach(t),hXo=r(eke," \u2014 "),DV=n(eke,"A",{href:!0});var K_t=s(DV);pXo=r(K_t,"RemBertForTokenClassification"),K_t.forEach(t),_Xo=r(eke," (RemBERT model)"),eke.forEach(t),uXo=i(J),dv=n(J,"LI",{});var oke=s(dv);tpe=n(oke,"STRONG",{});var Z_t=s(tpe);bXo=r(Z_t,"roberta"),Z_t.forEach(t),vXo=r(oke," \u2014 "),GV=n(oke,"A",{href:!0});var eut=s(GV);FXo=r(eut,"RobertaForTokenClassification"),eut.forEach(t),TXo=r(oke," (RoBERTa model)"),oke.forEach(t),MXo=i(J),cv=n(J,"LI",{});var rke=s(cv);ape=n(rke,"STRONG",{});var out=s(ape);EXo=r(out,"roformer"),out.forEach(t),CXo=r(rke," \u2014 "),OV=n(rke,"A",{href:!0});var rut=s(OV);wXo=r(rut,"RoFormerForTokenClassification"),rut.forEach(t),AXo=r(rke," (RoFormer model)"),rke.forEach(t),LXo=i(J),fv=n(J,"LI",{});var tke=s(fv);npe=n(tke,"STRONG",{});var tut=s(npe);yXo=r(tut,"squeezebert"),tut.forEach(t),xXo=r(tke," \u2014 "),VV=n(tke,"A",{href:!0});var aut=s(VV);$Xo=r(aut,"SqueezeBertForTokenClassification"),aut.forEach(t),kXo=r(tke," (SqueezeBERT model)"),tke.forEach(t),SXo=i(J),mv=n(J,"LI",{});var ake=s(mv);spe=n(ake,"STRONG",{});var nut=s(spe);RXo=r(nut,"xlm"),nut.forEach(t),PXo=r(ake," \u2014 "),XV=n(ake,"A",{href:!0});var sut=s(XV);BXo=r(sut,"XLMForTokenClassification"),sut.forEach(t),IXo=r(ake," (XLM model)"),ake.forEach(t),NXo=i(J),gv=n(J,"LI",{});var nke=s(gv);lpe=n(nke,"STRONG",{});var lut=s(lpe);qXo=r(lut,"xlm-roberta"),lut.forEach(t),jXo=r(nke," \u2014 "),zV=n(nke,"A",{href:!0});var iut=s(zV);DXo=r(iut,"XLMRobertaForTokenClassification"),iut.forEach(t),GXo=r(nke," (XLM-RoBERTa model)"),nke.forEach(t),OXo=i(J),hv=n(J,"LI",{});var ske=s(hv);ipe=n(ske,"STRONG",{});var dut=s(ipe);VXo=r(dut,"xlm-roberta-xl"),dut.forEach(t),XXo=r(ske," \u2014 "),WV=n(ske,"A",{href:!0});var cut=s(WV);zXo=r(cut,"XLMRobertaXLForTokenClassification"),cut.forEach(t),WXo=r(ske," (XLM-RoBERTa-XL model)"),ske.forEach(t),QXo=i(J),pv=n(J,"LI",{});var lke=s(pv);dpe=n(lke,"STRONG",{});var fut=s(dpe);HXo=r(fut,"xlnet"),fut.forEach(t),UXo=r(lke," \u2014 "),QV=n(lke,"A",{href:!0});var mut=s(QV);JXo=r(mut,"XLNetForTokenClassification"),mut.forEach(t),YXo=r(lke," (XLNet model)"),lke.forEach(t),KXo=i(J),_v=n(J,"LI",{});var ike=s(_v);cpe=n(ike,"STRONG",{});var gut=s(cpe);ZXo=r(gut,"yoso"),gut.forEach(t),ezo=r(ike," \u2014 "),HV=n(ike,"A",{href:!0});var hut=s(HV);ozo=r(hut,"YosoForTokenClassification"),hut.forEach(t),rzo=r(ike," (YOSO model)"),ike.forEach(t),J.forEach(t),tzo=i(da),uv=n(da,"P",{});var dke=s(uv);azo=r(dke,"The model is set in evaluation mode by default using "),fpe=n(dke,"CODE",{});var put=s(fpe);nzo=r(put,"model.eval()"),put.forEach(t),szo=r(dke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=n(dke,"CODE",{});var _ut=s(mpe);lzo=r(_ut,"model.train()"),_ut.forEach(t),dke.forEach(t),izo=i(da),T(bv.$$.fragment,da),da.forEach(t),Ks.forEach(t),xje=i(f),ed=n(f,"H2",{class:!0});var RGe=s(ed);vv=n(RGe,"A",{id:!0,class:!0,href:!0});var uut=s(vv);gpe=n(uut,"SPAN",{});var but=s(gpe);T(ty.$$.fragment,but),but.forEach(t),uut.forEach(t),dzo=i(RGe),hpe=n(RGe,"SPAN",{});var vut=s(hpe);czo=r(vut,"AutoModelForQuestionAnswering"),vut.forEach(t),RGe.forEach(t),$je=i(f),No=n(f,"DIV",{class:!0});var Zs=s(No);T(ay.$$.fragment,Zs),fzo=i(Zs),od=n(Zs,"P",{});var dee=s(od);mzo=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),UV=n(dee,"A",{href:!0});var Fut=s(UV);gzo=r(Fut,"from_pretrained()"),Fut.forEach(t),hzo=r(dee," class method or the "),JV=n(dee,"A",{href:!0});var Tut=s(JV);pzo=r(Tut,"from_config()"),Tut.forEach(t),_zo=r(dee,` class
method.`),dee.forEach(t),uzo=i(Zs),ny=n(Zs,"P",{});var PGe=s(ny);bzo=r(PGe,"This class cannot be instantiated directly using "),ppe=n(PGe,"CODE",{});var Mut=s(ppe);vzo=r(Mut,"__init__()"),Mut.forEach(t),Fzo=r(PGe," (throws an error)."),PGe.forEach(t),Tzo=i(Zs),mt=n(Zs,"DIV",{class:!0});var iA=s(mt);T(sy.$$.fragment,iA),Mzo=i(iA),_pe=n(iA,"P",{});var Eut=s(_pe);Ezo=r(Eut,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Eut.forEach(t),Czo=i(iA),rd=n(iA,"P",{});var cee=s(rd);wzo=r(cee,`Note:
Loading a model from its configuration file does `),upe=n(cee,"STRONG",{});var Cut=s(upe);Azo=r(Cut,"not"),Cut.forEach(t),Lzo=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(cee,"A",{href:!0});var wut=s(YV);yzo=r(wut,"from_pretrained()"),wut.forEach(t),xzo=r(cee," to load the model weights."),cee.forEach(t),$zo=i(iA),T(Fv.$$.fragment,iA),iA.forEach(t),kzo=i(Zs),no=n(Zs,"DIV",{class:!0});var ca=s(no);T(ly.$$.fragment,ca),Szo=i(ca),bpe=n(ca,"P",{});var Aut=s(bpe);Rzo=r(Aut,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Aut.forEach(t),Pzo=i(ca),Na=n(ca,"P",{});var dA=s(Na);Bzo=r(dA,"The model class to instantiate is selected based on the "),vpe=n(dA,"CODE",{});var Lut=s(vpe);Izo=r(Lut,"model_type"),Lut.forEach(t),Nzo=r(dA,` property of the config object (either
passed as an argument or loaded from `),Fpe=n(dA,"CODE",{});var yut=s(Fpe);qzo=r(yut,"pretrained_model_name_or_path"),yut.forEach(t),jzo=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=n(dA,"CODE",{});var xut=s(Tpe);Dzo=r(xut,"pretrained_model_name_or_path"),xut.forEach(t),Gzo=r(dA,":"),dA.forEach(t),Ozo=i(ca),V=n(ca,"UL",{});var X=s(V);Tv=n(X,"LI",{});var cke=s(Tv);Mpe=n(cke,"STRONG",{});var $ut=s(Mpe);Vzo=r($ut,"albert"),$ut.forEach(t),Xzo=r(cke," \u2014 "),KV=n(cke,"A",{href:!0});var kut=s(KV);zzo=r(kut,"AlbertForQuestionAnswering"),kut.forEach(t),Wzo=r(cke," (ALBERT model)"),cke.forEach(t),Qzo=i(X),Mv=n(X,"LI",{});var fke=s(Mv);Epe=n(fke,"STRONG",{});var Sut=s(Epe);Hzo=r(Sut,"bart"),Sut.forEach(t),Uzo=r(fke," \u2014 "),ZV=n(fke,"A",{href:!0});var Rut=s(ZV);Jzo=r(Rut,"BartForQuestionAnswering"),Rut.forEach(t),Yzo=r(fke," (BART model)"),fke.forEach(t),Kzo=i(X),Ev=n(X,"LI",{});var mke=s(Ev);Cpe=n(mke,"STRONG",{});var Put=s(Cpe);Zzo=r(Put,"bert"),Put.forEach(t),eWo=r(mke," \u2014 "),eX=n(mke,"A",{href:!0});var But=s(eX);oWo=r(But,"BertForQuestionAnswering"),But.forEach(t),rWo=r(mke," (BERT model)"),mke.forEach(t),tWo=i(X),Cv=n(X,"LI",{});var gke=s(Cv);wpe=n(gke,"STRONG",{});var Iut=s(wpe);aWo=r(Iut,"big_bird"),Iut.forEach(t),nWo=r(gke," \u2014 "),oX=n(gke,"A",{href:!0});var Nut=s(oX);sWo=r(Nut,"BigBirdForQuestionAnswering"),Nut.forEach(t),lWo=r(gke," (BigBird model)"),gke.forEach(t),iWo=i(X),wv=n(X,"LI",{});var hke=s(wv);Ape=n(hke,"STRONG",{});var qut=s(Ape);dWo=r(qut,"bigbird_pegasus"),qut.forEach(t),cWo=r(hke," \u2014 "),rX=n(hke,"A",{href:!0});var jut=s(rX);fWo=r(jut,"BigBirdPegasusForQuestionAnswering"),jut.forEach(t),mWo=r(hke," (BigBird-Pegasus model)"),hke.forEach(t),gWo=i(X),Av=n(X,"LI",{});var pke=s(Av);Lpe=n(pke,"STRONG",{});var Dut=s(Lpe);hWo=r(Dut,"camembert"),Dut.forEach(t),pWo=r(pke," \u2014 "),tX=n(pke,"A",{href:!0});var Gut=s(tX);_Wo=r(Gut,"CamembertForQuestionAnswering"),Gut.forEach(t),uWo=r(pke," (CamemBERT model)"),pke.forEach(t),bWo=i(X),Lv=n(X,"LI",{});var _ke=s(Lv);ype=n(_ke,"STRONG",{});var Out=s(ype);vWo=r(Out,"canine"),Out.forEach(t),FWo=r(_ke," \u2014 "),aX=n(_ke,"A",{href:!0});var Vut=s(aX);TWo=r(Vut,"CanineForQuestionAnswering"),Vut.forEach(t),MWo=r(_ke," (CANINE model)"),_ke.forEach(t),EWo=i(X),yv=n(X,"LI",{});var uke=s(yv);xpe=n(uke,"STRONG",{});var Xut=s(xpe);CWo=r(Xut,"convbert"),Xut.forEach(t),wWo=r(uke," \u2014 "),nX=n(uke,"A",{href:!0});var zut=s(nX);AWo=r(zut,"ConvBertForQuestionAnswering"),zut.forEach(t),LWo=r(uke," (ConvBERT model)"),uke.forEach(t),yWo=i(X),xv=n(X,"LI",{});var bke=s(xv);$pe=n(bke,"STRONG",{});var Wut=s($pe);xWo=r(Wut,"data2vec-text"),Wut.forEach(t),$Wo=r(bke," \u2014 "),sX=n(bke,"A",{href:!0});var Qut=s(sX);kWo=r(Qut,"Data2VecTextForQuestionAnswering"),Qut.forEach(t),SWo=r(bke," (Data2VecText model)"),bke.forEach(t),RWo=i(X),$v=n(X,"LI",{});var vke=s($v);kpe=n(vke,"STRONG",{});var Hut=s(kpe);PWo=r(Hut,"deberta"),Hut.forEach(t),BWo=r(vke," \u2014 "),lX=n(vke,"A",{href:!0});var Uut=s(lX);IWo=r(Uut,"DebertaForQuestionAnswering"),Uut.forEach(t),NWo=r(vke," (DeBERTa model)"),vke.forEach(t),qWo=i(X),kv=n(X,"LI",{});var Fke=s(kv);Spe=n(Fke,"STRONG",{});var Jut=s(Spe);jWo=r(Jut,"deberta-v2"),Jut.forEach(t),DWo=r(Fke," \u2014 "),iX=n(Fke,"A",{href:!0});var Yut=s(iX);GWo=r(Yut,"DebertaV2ForQuestionAnswering"),Yut.forEach(t),OWo=r(Fke," (DeBERTa-v2 model)"),Fke.forEach(t),VWo=i(X),Sv=n(X,"LI",{});var Tke=s(Sv);Rpe=n(Tke,"STRONG",{});var Kut=s(Rpe);XWo=r(Kut,"distilbert"),Kut.forEach(t),zWo=r(Tke," \u2014 "),dX=n(Tke,"A",{href:!0});var Zut=s(dX);WWo=r(Zut,"DistilBertForQuestionAnswering"),Zut.forEach(t),QWo=r(Tke," (DistilBERT model)"),Tke.forEach(t),HWo=i(X),Rv=n(X,"LI",{});var Mke=s(Rv);Ppe=n(Mke,"STRONG",{});var e4t=s(Ppe);UWo=r(e4t,"electra"),e4t.forEach(t),JWo=r(Mke," \u2014 "),cX=n(Mke,"A",{href:!0});var o4t=s(cX);YWo=r(o4t,"ElectraForQuestionAnswering"),o4t.forEach(t),KWo=r(Mke," (ELECTRA model)"),Mke.forEach(t),ZWo=i(X),Pv=n(X,"LI",{});var Eke=s(Pv);Bpe=n(Eke,"STRONG",{});var r4t=s(Bpe);eQo=r(r4t,"flaubert"),r4t.forEach(t),oQo=r(Eke," \u2014 "),fX=n(Eke,"A",{href:!0});var t4t=s(fX);rQo=r(t4t,"FlaubertForQuestionAnsweringSimple"),t4t.forEach(t),tQo=r(Eke," (FlauBERT model)"),Eke.forEach(t),aQo=i(X),Bv=n(X,"LI",{});var Cke=s(Bv);Ipe=n(Cke,"STRONG",{});var a4t=s(Ipe);nQo=r(a4t,"fnet"),a4t.forEach(t),sQo=r(Cke," \u2014 "),mX=n(Cke,"A",{href:!0});var n4t=s(mX);lQo=r(n4t,"FNetForQuestionAnswering"),n4t.forEach(t),iQo=r(Cke," (FNet model)"),Cke.forEach(t),dQo=i(X),Iv=n(X,"LI",{});var wke=s(Iv);Npe=n(wke,"STRONG",{});var s4t=s(Npe);cQo=r(s4t,"funnel"),s4t.forEach(t),fQo=r(wke," \u2014 "),gX=n(wke,"A",{href:!0});var l4t=s(gX);mQo=r(l4t,"FunnelForQuestionAnswering"),l4t.forEach(t),gQo=r(wke," (Funnel Transformer model)"),wke.forEach(t),hQo=i(X),Nv=n(X,"LI",{});var Ake=s(Nv);qpe=n(Ake,"STRONG",{});var i4t=s(qpe);pQo=r(i4t,"gptj"),i4t.forEach(t),_Qo=r(Ake," \u2014 "),hX=n(Ake,"A",{href:!0});var d4t=s(hX);uQo=r(d4t,"GPTJForQuestionAnswering"),d4t.forEach(t),bQo=r(Ake," (GPT-J model)"),Ake.forEach(t),vQo=i(X),qv=n(X,"LI",{});var Lke=s(qv);jpe=n(Lke,"STRONG",{});var c4t=s(jpe);FQo=r(c4t,"ibert"),c4t.forEach(t),TQo=r(Lke," \u2014 "),pX=n(Lke,"A",{href:!0});var f4t=s(pX);MQo=r(f4t,"IBertForQuestionAnswering"),f4t.forEach(t),EQo=r(Lke," (I-BERT model)"),Lke.forEach(t),CQo=i(X),jv=n(X,"LI",{});var yke=s(jv);Dpe=n(yke,"STRONG",{});var m4t=s(Dpe);wQo=r(m4t,"layoutlmv2"),m4t.forEach(t),AQo=r(yke," \u2014 "),_X=n(yke,"A",{href:!0});var g4t=s(_X);LQo=r(g4t,"LayoutLMv2ForQuestionAnswering"),g4t.forEach(t),yQo=r(yke," (LayoutLMv2 model)"),yke.forEach(t),xQo=i(X),Dv=n(X,"LI",{});var xke=s(Dv);Gpe=n(xke,"STRONG",{});var h4t=s(Gpe);$Qo=r(h4t,"layoutlmv3"),h4t.forEach(t),kQo=r(xke," \u2014 "),uX=n(xke,"A",{href:!0});var p4t=s(uX);SQo=r(p4t,"LayoutLMv3ForQuestionAnswering"),p4t.forEach(t),RQo=r(xke," (LayoutLMv3 model)"),xke.forEach(t),PQo=i(X),Gv=n(X,"LI",{});var $ke=s(Gv);Ope=n($ke,"STRONG",{});var _4t=s(Ope);BQo=r(_4t,"led"),_4t.forEach(t),IQo=r($ke," \u2014 "),bX=n($ke,"A",{href:!0});var u4t=s(bX);NQo=r(u4t,"LEDForQuestionAnswering"),u4t.forEach(t),qQo=r($ke," (LED model)"),$ke.forEach(t),jQo=i(X),Ov=n(X,"LI",{});var kke=s(Ov);Vpe=n(kke,"STRONG",{});var b4t=s(Vpe);DQo=r(b4t,"longformer"),b4t.forEach(t),GQo=r(kke," \u2014 "),vX=n(kke,"A",{href:!0});var v4t=s(vX);OQo=r(v4t,"LongformerForQuestionAnswering"),v4t.forEach(t),VQo=r(kke," (Longformer model)"),kke.forEach(t),XQo=i(X),Vv=n(X,"LI",{});var Ske=s(Vv);Xpe=n(Ske,"STRONG",{});var F4t=s(Xpe);zQo=r(F4t,"lxmert"),F4t.forEach(t),WQo=r(Ske," \u2014 "),FX=n(Ske,"A",{href:!0});var T4t=s(FX);QQo=r(T4t,"LxmertForQuestionAnswering"),T4t.forEach(t),HQo=r(Ske," (LXMERT model)"),Ske.forEach(t),UQo=i(X),Xv=n(X,"LI",{});var Rke=s(Xv);zpe=n(Rke,"STRONG",{});var M4t=s(zpe);JQo=r(M4t,"mbart"),M4t.forEach(t),YQo=r(Rke," \u2014 "),TX=n(Rke,"A",{href:!0});var E4t=s(TX);KQo=r(E4t,"MBartForQuestionAnswering"),E4t.forEach(t),ZQo=r(Rke," (mBART model)"),Rke.forEach(t),eHo=i(X),zv=n(X,"LI",{});var Pke=s(zv);Wpe=n(Pke,"STRONG",{});var C4t=s(Wpe);oHo=r(C4t,"megatron-bert"),C4t.forEach(t),rHo=r(Pke," \u2014 "),MX=n(Pke,"A",{href:!0});var w4t=s(MX);tHo=r(w4t,"MegatronBertForQuestionAnswering"),w4t.forEach(t),aHo=r(Pke," (Megatron-BERT model)"),Pke.forEach(t),nHo=i(X),Wv=n(X,"LI",{});var Bke=s(Wv);Qpe=n(Bke,"STRONG",{});var A4t=s(Qpe);sHo=r(A4t,"mobilebert"),A4t.forEach(t),lHo=r(Bke," \u2014 "),EX=n(Bke,"A",{href:!0});var L4t=s(EX);iHo=r(L4t,"MobileBertForQuestionAnswering"),L4t.forEach(t),dHo=r(Bke," (MobileBERT model)"),Bke.forEach(t),cHo=i(X),Qv=n(X,"LI",{});var Ike=s(Qv);Hpe=n(Ike,"STRONG",{});var y4t=s(Hpe);fHo=r(y4t,"mpnet"),y4t.forEach(t),mHo=r(Ike," \u2014 "),CX=n(Ike,"A",{href:!0});var x4t=s(CX);gHo=r(x4t,"MPNetForQuestionAnswering"),x4t.forEach(t),hHo=r(Ike," (MPNet model)"),Ike.forEach(t),pHo=i(X),Hv=n(X,"LI",{});var Nke=s(Hv);Upe=n(Nke,"STRONG",{});var $4t=s(Upe);_Ho=r($4t,"nystromformer"),$4t.forEach(t),uHo=r(Nke," \u2014 "),wX=n(Nke,"A",{href:!0});var k4t=s(wX);bHo=r(k4t,"NystromformerForQuestionAnswering"),k4t.forEach(t),vHo=r(Nke," (Nystr\xF6mformer model)"),Nke.forEach(t),FHo=i(X),Uv=n(X,"LI",{});var qke=s(Uv);Jpe=n(qke,"STRONG",{});var S4t=s(Jpe);THo=r(S4t,"qdqbert"),S4t.forEach(t),MHo=r(qke," \u2014 "),AX=n(qke,"A",{href:!0});var R4t=s(AX);EHo=r(R4t,"QDQBertForQuestionAnswering"),R4t.forEach(t),CHo=r(qke," (QDQBert model)"),qke.forEach(t),wHo=i(X),Jv=n(X,"LI",{});var jke=s(Jv);Ype=n(jke,"STRONG",{});var P4t=s(Ype);AHo=r(P4t,"reformer"),P4t.forEach(t),LHo=r(jke," \u2014 "),LX=n(jke,"A",{href:!0});var B4t=s(LX);yHo=r(B4t,"ReformerForQuestionAnswering"),B4t.forEach(t),xHo=r(jke," (Reformer model)"),jke.forEach(t),$Ho=i(X),Yv=n(X,"LI",{});var Dke=s(Yv);Kpe=n(Dke,"STRONG",{});var I4t=s(Kpe);kHo=r(I4t,"rembert"),I4t.forEach(t),SHo=r(Dke," \u2014 "),yX=n(Dke,"A",{href:!0});var N4t=s(yX);RHo=r(N4t,"RemBertForQuestionAnswering"),N4t.forEach(t),PHo=r(Dke," (RemBERT model)"),Dke.forEach(t),BHo=i(X),Kv=n(X,"LI",{});var Gke=s(Kv);Zpe=n(Gke,"STRONG",{});var q4t=s(Zpe);IHo=r(q4t,"roberta"),q4t.forEach(t),NHo=r(Gke," \u2014 "),xX=n(Gke,"A",{href:!0});var j4t=s(xX);qHo=r(j4t,"RobertaForQuestionAnswering"),j4t.forEach(t),jHo=r(Gke," (RoBERTa model)"),Gke.forEach(t),DHo=i(X),Zv=n(X,"LI",{});var Oke=s(Zv);e_e=n(Oke,"STRONG",{});var D4t=s(e_e);GHo=r(D4t,"roformer"),D4t.forEach(t),OHo=r(Oke," \u2014 "),$X=n(Oke,"A",{href:!0});var G4t=s($X);VHo=r(G4t,"RoFormerForQuestionAnswering"),G4t.forEach(t),XHo=r(Oke," (RoFormer model)"),Oke.forEach(t),zHo=i(X),e3=n(X,"LI",{});var Vke=s(e3);o_e=n(Vke,"STRONG",{});var O4t=s(o_e);WHo=r(O4t,"splinter"),O4t.forEach(t),QHo=r(Vke," \u2014 "),kX=n(Vke,"A",{href:!0});var V4t=s(kX);HHo=r(V4t,"SplinterForQuestionAnswering"),V4t.forEach(t),UHo=r(Vke," (Splinter model)"),Vke.forEach(t),JHo=i(X),o3=n(X,"LI",{});var Xke=s(o3);r_e=n(Xke,"STRONG",{});var X4t=s(r_e);YHo=r(X4t,"squeezebert"),X4t.forEach(t),KHo=r(Xke," \u2014 "),SX=n(Xke,"A",{href:!0});var z4t=s(SX);ZHo=r(z4t,"SqueezeBertForQuestionAnswering"),z4t.forEach(t),eUo=r(Xke," (SqueezeBERT model)"),Xke.forEach(t),oUo=i(X),r3=n(X,"LI",{});var zke=s(r3);t_e=n(zke,"STRONG",{});var W4t=s(t_e);rUo=r(W4t,"xlm"),W4t.forEach(t),tUo=r(zke," \u2014 "),RX=n(zke,"A",{href:!0});var Q4t=s(RX);aUo=r(Q4t,"XLMForQuestionAnsweringSimple"),Q4t.forEach(t),nUo=r(zke," (XLM model)"),zke.forEach(t),sUo=i(X),t3=n(X,"LI",{});var Wke=s(t3);a_e=n(Wke,"STRONG",{});var H4t=s(a_e);lUo=r(H4t,"xlm-roberta"),H4t.forEach(t),iUo=r(Wke," \u2014 "),PX=n(Wke,"A",{href:!0});var U4t=s(PX);dUo=r(U4t,"XLMRobertaForQuestionAnswering"),U4t.forEach(t),cUo=r(Wke," (XLM-RoBERTa model)"),Wke.forEach(t),fUo=i(X),a3=n(X,"LI",{});var Qke=s(a3);n_e=n(Qke,"STRONG",{});var J4t=s(n_e);mUo=r(J4t,"xlm-roberta-xl"),J4t.forEach(t),gUo=r(Qke," \u2014 "),BX=n(Qke,"A",{href:!0});var Y4t=s(BX);hUo=r(Y4t,"XLMRobertaXLForQuestionAnswering"),Y4t.forEach(t),pUo=r(Qke," (XLM-RoBERTa-XL model)"),Qke.forEach(t),_Uo=i(X),n3=n(X,"LI",{});var Hke=s(n3);s_e=n(Hke,"STRONG",{});var K4t=s(s_e);uUo=r(K4t,"xlnet"),K4t.forEach(t),bUo=r(Hke," \u2014 "),IX=n(Hke,"A",{href:!0});var Z4t=s(IX);vUo=r(Z4t,"XLNetForQuestionAnsweringSimple"),Z4t.forEach(t),FUo=r(Hke," (XLNet model)"),Hke.forEach(t),TUo=i(X),s3=n(X,"LI",{});var Uke=s(s3);l_e=n(Uke,"STRONG",{});var e1t=s(l_e);MUo=r(e1t,"yoso"),e1t.forEach(t),EUo=r(Uke," \u2014 "),NX=n(Uke,"A",{href:!0});var o1t=s(NX);CUo=r(o1t,"YosoForQuestionAnswering"),o1t.forEach(t),wUo=r(Uke," (YOSO model)"),Uke.forEach(t),X.forEach(t),AUo=i(ca),l3=n(ca,"P",{});var Jke=s(l3);LUo=r(Jke,"The model is set in evaluation mode by default using "),i_e=n(Jke,"CODE",{});var r1t=s(i_e);yUo=r(r1t,"model.eval()"),r1t.forEach(t),xUo=r(Jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d_e=n(Jke,"CODE",{});var t1t=s(d_e);$Uo=r(t1t,"model.train()"),t1t.forEach(t),Jke.forEach(t),kUo=i(ca),T(i3.$$.fragment,ca),ca.forEach(t),Zs.forEach(t),kje=i(f),td=n(f,"H2",{class:!0});var BGe=s(td);d3=n(BGe,"A",{id:!0,class:!0,href:!0});var a1t=s(d3);c_e=n(a1t,"SPAN",{});var n1t=s(c_e);T(iy.$$.fragment,n1t),n1t.forEach(t),a1t.forEach(t),SUo=i(BGe),f_e=n(BGe,"SPAN",{});var s1t=s(f_e);RUo=r(s1t,"AutoModelForTableQuestionAnswering"),s1t.forEach(t),BGe.forEach(t),Sje=i(f),qo=n(f,"DIV",{class:!0});var el=s(qo);T(dy.$$.fragment,el),PUo=i(el),ad=n(el,"P",{});var fee=s(ad);BUo=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),qX=n(fee,"A",{href:!0});var l1t=s(qX);IUo=r(l1t,"from_pretrained()"),l1t.forEach(t),NUo=r(fee," class method or the "),jX=n(fee,"A",{href:!0});var i1t=s(jX);qUo=r(i1t,"from_config()"),i1t.forEach(t),jUo=r(fee,` class
method.`),fee.forEach(t),DUo=i(el),cy=n(el,"P",{});var IGe=s(cy);GUo=r(IGe,"This class cannot be instantiated directly using "),m_e=n(IGe,"CODE",{});var d1t=s(m_e);OUo=r(d1t,"__init__()"),d1t.forEach(t),VUo=r(IGe," (throws an error)."),IGe.forEach(t),XUo=i(el),gt=n(el,"DIV",{class:!0});var cA=s(gt);T(fy.$$.fragment,cA),zUo=i(cA),g_e=n(cA,"P",{});var c1t=s(g_e);WUo=r(c1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),c1t.forEach(t),QUo=i(cA),nd=n(cA,"P",{});var mee=s(nd);HUo=r(mee,`Note:
Loading a model from its configuration file does `),h_e=n(mee,"STRONG",{});var f1t=s(h_e);UUo=r(f1t,"not"),f1t.forEach(t),JUo=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(mee,"A",{href:!0});var m1t=s(DX);YUo=r(m1t,"from_pretrained()"),m1t.forEach(t),KUo=r(mee," to load the model weights."),mee.forEach(t),ZUo=i(cA),T(c3.$$.fragment,cA),cA.forEach(t),eJo=i(el),so=n(el,"DIV",{class:!0});var fa=s(so);T(my.$$.fragment,fa),oJo=i(fa),p_e=n(fa,"P",{});var g1t=s(p_e);rJo=r(g1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),g1t.forEach(t),tJo=i(fa),qa=n(fa,"P",{});var fA=s(qa);aJo=r(fA,"The model class to instantiate is selected based on the "),__e=n(fA,"CODE",{});var h1t=s(__e);nJo=r(h1t,"model_type"),h1t.forEach(t),sJo=r(fA,` property of the config object (either
passed as an argument or loaded from `),u_e=n(fA,"CODE",{});var p1t=s(u_e);lJo=r(p1t,"pretrained_model_name_or_path"),p1t.forEach(t),iJo=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=n(fA,"CODE",{});var _1t=s(b_e);dJo=r(_1t,"pretrained_model_name_or_path"),_1t.forEach(t),cJo=r(fA,":"),fA.forEach(t),fJo=i(fa),v_e=n(fa,"UL",{});var u1t=s(v_e);f3=n(u1t,"LI",{});var Yke=s(f3);F_e=n(Yke,"STRONG",{});var b1t=s(F_e);mJo=r(b1t,"tapas"),b1t.forEach(t),gJo=r(Yke," \u2014 "),GX=n(Yke,"A",{href:!0});var v1t=s(GX);hJo=r(v1t,"TapasForQuestionAnswering"),v1t.forEach(t),pJo=r(Yke," (TAPAS model)"),Yke.forEach(t),u1t.forEach(t),_Jo=i(fa),m3=n(fa,"P",{});var Kke=s(m3);uJo=r(Kke,"The model is set in evaluation mode by default using "),T_e=n(Kke,"CODE",{});var F1t=s(T_e);bJo=r(F1t,"model.eval()"),F1t.forEach(t),vJo=r(Kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M_e=n(Kke,"CODE",{});var T1t=s(M_e);FJo=r(T1t,"model.train()"),T1t.forEach(t),Kke.forEach(t),TJo=i(fa),T(g3.$$.fragment,fa),fa.forEach(t),el.forEach(t),Rje=i(f),sd=n(f,"H2",{class:!0});var NGe=s(sd);h3=n(NGe,"A",{id:!0,class:!0,href:!0});var M1t=s(h3);E_e=n(M1t,"SPAN",{});var E1t=s(E_e);T(gy.$$.fragment,E1t),E1t.forEach(t),M1t.forEach(t),MJo=i(NGe),C_e=n(NGe,"SPAN",{});var C1t=s(C_e);EJo=r(C1t,"AutoModelForImageClassification"),C1t.forEach(t),NGe.forEach(t),Pje=i(f),jo=n(f,"DIV",{class:!0});var ol=s(jo);T(hy.$$.fragment,ol),CJo=i(ol),ld=n(ol,"P",{});var gee=s(ld);wJo=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OX=n(gee,"A",{href:!0});var w1t=s(OX);AJo=r(w1t,"from_pretrained()"),w1t.forEach(t),LJo=r(gee," class method or the "),VX=n(gee,"A",{href:!0});var A1t=s(VX);yJo=r(A1t,"from_config()"),A1t.forEach(t),xJo=r(gee,` class
method.`),gee.forEach(t),$Jo=i(ol),py=n(ol,"P",{});var qGe=s(py);kJo=r(qGe,"This class cannot be instantiated directly using "),w_e=n(qGe,"CODE",{});var L1t=s(w_e);SJo=r(L1t,"__init__()"),L1t.forEach(t),RJo=r(qGe," (throws an error)."),qGe.forEach(t),PJo=i(ol),ht=n(ol,"DIV",{class:!0});var mA=s(ht);T(_y.$$.fragment,mA),BJo=i(mA),A_e=n(mA,"P",{});var y1t=s(A_e);IJo=r(y1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),y1t.forEach(t),NJo=i(mA),id=n(mA,"P",{});var hee=s(id);qJo=r(hee,`Note:
Loading a model from its configuration file does `),L_e=n(hee,"STRONG",{});var x1t=s(L_e);jJo=r(x1t,"not"),x1t.forEach(t),DJo=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(hee,"A",{href:!0});var $1t=s(XX);GJo=r($1t,"from_pretrained()"),$1t.forEach(t),OJo=r(hee," to load the model weights."),hee.forEach(t),VJo=i(mA),T(p3.$$.fragment,mA),mA.forEach(t),XJo=i(ol),lo=n(ol,"DIV",{class:!0});var ma=s(lo);T(uy.$$.fragment,ma),zJo=i(ma),y_e=n(ma,"P",{});var k1t=s(y_e);WJo=r(k1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),k1t.forEach(t),QJo=i(ma),ja=n(ma,"P",{});var gA=s(ja);HJo=r(gA,"The model class to instantiate is selected based on the "),x_e=n(gA,"CODE",{});var S1t=s(x_e);UJo=r(S1t,"model_type"),S1t.forEach(t),JJo=r(gA,` property of the config object (either
passed as an argument or loaded from `),$_e=n(gA,"CODE",{});var R1t=s($_e);YJo=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),KJo=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=n(gA,"CODE",{});var P1t=s(k_e);ZJo=r(P1t,"pretrained_model_name_or_path"),P1t.forEach(t),eYo=r(gA,":"),gA.forEach(t),oYo=i(ma),ve=n(ma,"UL",{});var Te=s(ve);_3=n(Te,"LI",{});var Zke=s(_3);S_e=n(Zke,"STRONG",{});var B1t=s(S_e);rYo=r(B1t,"beit"),B1t.forEach(t),tYo=r(Zke," \u2014 "),zX=n(Zke,"A",{href:!0});var I1t=s(zX);aYo=r(I1t,"BeitForImageClassification"),I1t.forEach(t),nYo=r(Zke," (BEiT model)"),Zke.forEach(t),sYo=i(Te),u3=n(Te,"LI",{});var eSe=s(u3);R_e=n(eSe,"STRONG",{});var N1t=s(R_e);lYo=r(N1t,"convnext"),N1t.forEach(t),iYo=r(eSe," \u2014 "),WX=n(eSe,"A",{href:!0});var q1t=s(WX);dYo=r(q1t,"ConvNextForImageClassification"),q1t.forEach(t),cYo=r(eSe," (ConvNeXT model)"),eSe.forEach(t),fYo=i(Te),b3=n(Te,"LI",{});var oSe=s(b3);P_e=n(oSe,"STRONG",{});var j1t=s(P_e);mYo=r(j1t,"cvt"),j1t.forEach(t),gYo=r(oSe," \u2014 "),QX=n(oSe,"A",{href:!0});var D1t=s(QX);hYo=r(D1t,"CvtForImageClassification"),D1t.forEach(t),pYo=r(oSe," (CvT model)"),oSe.forEach(t),_Yo=i(Te),v3=n(Te,"LI",{});var rSe=s(v3);B_e=n(rSe,"STRONG",{});var G1t=s(B_e);uYo=r(G1t,"data2vec-vision"),G1t.forEach(t),bYo=r(rSe," \u2014 "),HX=n(rSe,"A",{href:!0});var O1t=s(HX);vYo=r(O1t,"Data2VecVisionForImageClassification"),O1t.forEach(t),FYo=r(rSe," (Data2VecVision model)"),rSe.forEach(t),TYo=i(Te),Is=n(Te,"LI",{});var tk=s(Is);I_e=n(tk,"STRONG",{});var V1t=s(I_e);MYo=r(V1t,"deit"),V1t.forEach(t),EYo=r(tk," \u2014 "),UX=n(tk,"A",{href:!0});var X1t=s(UX);CYo=r(X1t,"DeiTForImageClassification"),X1t.forEach(t),wYo=r(tk," or "),JX=n(tk,"A",{href:!0});var z1t=s(JX);AYo=r(z1t,"DeiTForImageClassificationWithTeacher"),z1t.forEach(t),LYo=r(tk," (DeiT model)"),tk.forEach(t),yYo=i(Te),F3=n(Te,"LI",{});var tSe=s(F3);N_e=n(tSe,"STRONG",{});var W1t=s(N_e);xYo=r(W1t,"imagegpt"),W1t.forEach(t),$Yo=r(tSe," \u2014 "),YX=n(tSe,"A",{href:!0});var Q1t=s(YX);kYo=r(Q1t,"ImageGPTForImageClassification"),Q1t.forEach(t),SYo=r(tSe," (ImageGPT model)"),tSe.forEach(t),RYo=i(Te),Ns=n(Te,"LI",{});var ak=s(Ns);q_e=n(ak,"STRONG",{});var H1t=s(q_e);PYo=r(H1t,"levit"),H1t.forEach(t),BYo=r(ak," \u2014 "),KX=n(ak,"A",{href:!0});var U1t=s(KX);IYo=r(U1t,"LevitForImageClassification"),U1t.forEach(t),NYo=r(ak," or "),ZX=n(ak,"A",{href:!0});var J1t=s(ZX);qYo=r(J1t,"LevitForImageClassificationWithTeacher"),J1t.forEach(t),jYo=r(ak," (LeViT model)"),ak.forEach(t),DYo=i(Te),pt=n(Te,"LI",{});var _f=s(pt);j_e=n(_f,"STRONG",{});var Y1t=s(j_e);GYo=r(Y1t,"perceiver"),Y1t.forEach(t),OYo=r(_f," \u2014 "),ez=n(_f,"A",{href:!0});var K1t=s(ez);VYo=r(K1t,"PerceiverForImageClassificationLearned"),K1t.forEach(t),XYo=r(_f," or "),oz=n(_f,"A",{href:!0});var Z1t=s(oz);zYo=r(Z1t,"PerceiverForImageClassificationFourier"),Z1t.forEach(t),WYo=r(_f," or "),rz=n(_f,"A",{href:!0});var ebt=s(rz);QYo=r(ebt,"PerceiverForImageClassificationConvProcessing"),ebt.forEach(t),HYo=r(_f," (Perceiver model)"),_f.forEach(t),UYo=i(Te),T3=n(Te,"LI",{});var aSe=s(T3);D_e=n(aSe,"STRONG",{});var obt=s(D_e);JYo=r(obt,"poolformer"),obt.forEach(t),YYo=r(aSe," \u2014 "),tz=n(aSe,"A",{href:!0});var rbt=s(tz);KYo=r(rbt,"PoolFormerForImageClassification"),rbt.forEach(t),ZYo=r(aSe," (PoolFormer model)"),aSe.forEach(t),eKo=i(Te),M3=n(Te,"LI",{});var nSe=s(M3);G_e=n(nSe,"STRONG",{});var tbt=s(G_e);oKo=r(tbt,"regnet"),tbt.forEach(t),rKo=r(nSe," \u2014 "),az=n(nSe,"A",{href:!0});var abt=s(az);tKo=r(abt,"RegNetForImageClassification"),abt.forEach(t),aKo=r(nSe," (RegNet model)"),nSe.forEach(t),nKo=i(Te),E3=n(Te,"LI",{});var sSe=s(E3);O_e=n(sSe,"STRONG",{});var nbt=s(O_e);sKo=r(nbt,"resnet"),nbt.forEach(t),lKo=r(sSe," \u2014 "),nz=n(sSe,"A",{href:!0});var sbt=s(nz);iKo=r(sbt,"ResNetForImageClassification"),sbt.forEach(t),dKo=r(sSe," (ResNet model)"),sSe.forEach(t),cKo=i(Te),C3=n(Te,"LI",{});var lSe=s(C3);V_e=n(lSe,"STRONG",{});var lbt=s(V_e);fKo=r(lbt,"segformer"),lbt.forEach(t),mKo=r(lSe," \u2014 "),sz=n(lSe,"A",{href:!0});var ibt=s(sz);gKo=r(ibt,"SegformerForImageClassification"),ibt.forEach(t),hKo=r(lSe," (SegFormer model)"),lSe.forEach(t),pKo=i(Te),w3=n(Te,"LI",{});var iSe=s(w3);X_e=n(iSe,"STRONG",{});var dbt=s(X_e);_Ko=r(dbt,"swin"),dbt.forEach(t),uKo=r(iSe," \u2014 "),lz=n(iSe,"A",{href:!0});var cbt=s(lz);bKo=r(cbt,"SwinForImageClassification"),cbt.forEach(t),vKo=r(iSe," (Swin Transformer model)"),iSe.forEach(t),FKo=i(Te),A3=n(Te,"LI",{});var dSe=s(A3);z_e=n(dSe,"STRONG",{});var fbt=s(z_e);TKo=r(fbt,"van"),fbt.forEach(t),MKo=r(dSe," \u2014 "),iz=n(dSe,"A",{href:!0});var mbt=s(iz);EKo=r(mbt,"VanForImageClassification"),mbt.forEach(t),CKo=r(dSe," (VAN model)"),dSe.forEach(t),wKo=i(Te),L3=n(Te,"LI",{});var cSe=s(L3);W_e=n(cSe,"STRONG",{});var gbt=s(W_e);AKo=r(gbt,"vit"),gbt.forEach(t),LKo=r(cSe," \u2014 "),dz=n(cSe,"A",{href:!0});var hbt=s(dz);yKo=r(hbt,"ViTForImageClassification"),hbt.forEach(t),xKo=r(cSe," (ViT model)"),cSe.forEach(t),Te.forEach(t),$Ko=i(ma),y3=n(ma,"P",{});var fSe=s(y3);kKo=r(fSe,"The model is set in evaluation mode by default using "),Q_e=n(fSe,"CODE",{});var pbt=s(Q_e);SKo=r(pbt,"model.eval()"),pbt.forEach(t),RKo=r(fSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=n(fSe,"CODE",{});var _bt=s(H_e);PKo=r(_bt,"model.train()"),_bt.forEach(t),fSe.forEach(t),BKo=i(ma),T(x3.$$.fragment,ma),ma.forEach(t),ol.forEach(t),Bje=i(f),dd=n(f,"H2",{class:!0});var jGe=s(dd);$3=n(jGe,"A",{id:!0,class:!0,href:!0});var ubt=s($3);U_e=n(ubt,"SPAN",{});var bbt=s(U_e);T(by.$$.fragment,bbt),bbt.forEach(t),ubt.forEach(t),IKo=i(jGe),J_e=n(jGe,"SPAN",{});var vbt=s(J_e);NKo=r(vbt,"AutoModelForVision2Seq"),vbt.forEach(t),jGe.forEach(t),Ije=i(f),Do=n(f,"DIV",{class:!0});var rl=s(Do);T(vy.$$.fragment,rl),qKo=i(rl),cd=n(rl,"P",{});var pee=s(cd);jKo=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cz=n(pee,"A",{href:!0});var Fbt=s(cz);DKo=r(Fbt,"from_pretrained()"),Fbt.forEach(t),GKo=r(pee," class method or the "),fz=n(pee,"A",{href:!0});var Tbt=s(fz);OKo=r(Tbt,"from_config()"),Tbt.forEach(t),VKo=r(pee,` class
method.`),pee.forEach(t),XKo=i(rl),Fy=n(rl,"P",{});var DGe=s(Fy);zKo=r(DGe,"This class cannot be instantiated directly using "),Y_e=n(DGe,"CODE",{});var Mbt=s(Y_e);WKo=r(Mbt,"__init__()"),Mbt.forEach(t),QKo=r(DGe," (throws an error)."),DGe.forEach(t),HKo=i(rl),_t=n(rl,"DIV",{class:!0});var hA=s(_t);T(Ty.$$.fragment,hA),UKo=i(hA),K_e=n(hA,"P",{});var Ebt=s(K_e);JKo=r(Ebt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ebt.forEach(t),YKo=i(hA),fd=n(hA,"P",{});var _ee=s(fd);KKo=r(_ee,`Note:
Loading a model from its configuration file does `),Z_e=n(_ee,"STRONG",{});var Cbt=s(Z_e);ZKo=r(Cbt,"not"),Cbt.forEach(t),eZo=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=n(_ee,"A",{href:!0});var wbt=s(mz);oZo=r(wbt,"from_pretrained()"),wbt.forEach(t),rZo=r(_ee," to load the model weights."),_ee.forEach(t),tZo=i(hA),T(k3.$$.fragment,hA),hA.forEach(t),aZo=i(rl),io=n(rl,"DIV",{class:!0});var ga=s(io);T(My.$$.fragment,ga),nZo=i(ga),eue=n(ga,"P",{});var Abt=s(eue);sZo=r(Abt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Abt.forEach(t),lZo=i(ga),Da=n(ga,"P",{});var pA=s(Da);iZo=r(pA,"The model class to instantiate is selected based on the "),oue=n(pA,"CODE",{});var Lbt=s(oue);dZo=r(Lbt,"model_type"),Lbt.forEach(t),cZo=r(pA,` property of the config object (either
passed as an argument or loaded from `),rue=n(pA,"CODE",{});var ybt=s(rue);fZo=r(ybt,"pretrained_model_name_or_path"),ybt.forEach(t),mZo=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=n(pA,"CODE",{});var xbt=s(tue);gZo=r(xbt,"pretrained_model_name_or_path"),xbt.forEach(t),hZo=r(pA,":"),pA.forEach(t),pZo=i(ga),aue=n(ga,"UL",{});var $bt=s(aue);S3=n($bt,"LI",{});var mSe=s(S3);nue=n(mSe,"STRONG",{});var kbt=s(nue);_Zo=r(kbt,"vision-encoder-decoder"),kbt.forEach(t),uZo=r(mSe," \u2014 "),gz=n(mSe,"A",{href:!0});var Sbt=s(gz);bZo=r(Sbt,"VisionEncoderDecoderModel"),Sbt.forEach(t),vZo=r(mSe," (Vision Encoder decoder model)"),mSe.forEach(t),$bt.forEach(t),FZo=i(ga),R3=n(ga,"P",{});var gSe=s(R3);TZo=r(gSe,"The model is set in evaluation mode by default using "),sue=n(gSe,"CODE",{});var Rbt=s(sue);MZo=r(Rbt,"model.eval()"),Rbt.forEach(t),EZo=r(gSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=n(gSe,"CODE",{});var Pbt=s(lue);CZo=r(Pbt,"model.train()"),Pbt.forEach(t),gSe.forEach(t),wZo=i(ga),T(P3.$$.fragment,ga),ga.forEach(t),rl.forEach(t),Nje=i(f),md=n(f,"H2",{class:!0});var GGe=s(md);B3=n(GGe,"A",{id:!0,class:!0,href:!0});var Bbt=s(B3);iue=n(Bbt,"SPAN",{});var Ibt=s(iue);T(Ey.$$.fragment,Ibt),Ibt.forEach(t),Bbt.forEach(t),AZo=i(GGe),due=n(GGe,"SPAN",{});var Nbt=s(due);LZo=r(Nbt,"AutoModelForAudioClassification"),Nbt.forEach(t),GGe.forEach(t),qje=i(f),Go=n(f,"DIV",{class:!0});var tl=s(Go);T(Cy.$$.fragment,tl),yZo=i(tl),gd=n(tl,"P",{});var uee=s(gd);xZo=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),hz=n(uee,"A",{href:!0});var qbt=s(hz);$Zo=r(qbt,"from_pretrained()"),qbt.forEach(t),kZo=r(uee," class method or the "),pz=n(uee,"A",{href:!0});var jbt=s(pz);SZo=r(jbt,"from_config()"),jbt.forEach(t),RZo=r(uee,` class
method.`),uee.forEach(t),PZo=i(tl),wy=n(tl,"P",{});var OGe=s(wy);BZo=r(OGe,"This class cannot be instantiated directly using "),cue=n(OGe,"CODE",{});var Dbt=s(cue);IZo=r(Dbt,"__init__()"),Dbt.forEach(t),NZo=r(OGe," (throws an error)."),OGe.forEach(t),qZo=i(tl),ut=n(tl,"DIV",{class:!0});var _A=s(ut);T(Ay.$$.fragment,_A),jZo=i(_A),fue=n(_A,"P",{});var Gbt=s(fue);DZo=r(Gbt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Gbt.forEach(t),GZo=i(_A),hd=n(_A,"P",{});var bee=s(hd);OZo=r(bee,`Note:
Loading a model from its configuration file does `),mue=n(bee,"STRONG",{});var Obt=s(mue);VZo=r(Obt,"not"),Obt.forEach(t),XZo=r(bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(bee,"A",{href:!0});var Vbt=s(_z);zZo=r(Vbt,"from_pretrained()"),Vbt.forEach(t),WZo=r(bee," to load the model weights."),bee.forEach(t),QZo=i(_A),T(I3.$$.fragment,_A),_A.forEach(t),HZo=i(tl),co=n(tl,"DIV",{class:!0});var ha=s(co);T(Ly.$$.fragment,ha),UZo=i(ha),gue=n(ha,"P",{});var Xbt=s(gue);JZo=r(Xbt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Xbt.forEach(t),YZo=i(ha),Ga=n(ha,"P",{});var uA=s(Ga);KZo=r(uA,"The model class to instantiate is selected based on the "),hue=n(uA,"CODE",{});var zbt=s(hue);ZZo=r(zbt,"model_type"),zbt.forEach(t),eer=r(uA,` property of the config object (either
passed as an argument or loaded from `),pue=n(uA,"CODE",{});var Wbt=s(pue);oer=r(Wbt,"pretrained_model_name_or_path"),Wbt.forEach(t),rer=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ue=n(uA,"CODE",{});var Qbt=s(_ue);ter=r(Qbt,"pretrained_model_name_or_path"),Qbt.forEach(t),aer=r(uA,":"),uA.forEach(t),ner=i(ha),Se=n(ha,"UL",{});var Ve=s(Se);N3=n(Ve,"LI",{});var hSe=s(N3);uue=n(hSe,"STRONG",{});var Hbt=s(uue);ser=r(Hbt,"data2vec-audio"),Hbt.forEach(t),ler=r(hSe," \u2014 "),uz=n(hSe,"A",{href:!0});var Ubt=s(uz);ier=r(Ubt,"Data2VecAudioForSequenceClassification"),Ubt.forEach(t),der=r(hSe," (Data2VecAudio model)"),hSe.forEach(t),cer=i(Ve),q3=n(Ve,"LI",{});var pSe=s(q3);bue=n(pSe,"STRONG",{});var Jbt=s(bue);fer=r(Jbt,"hubert"),Jbt.forEach(t),mer=r(pSe," \u2014 "),bz=n(pSe,"A",{href:!0});var Ybt=s(bz);ger=r(Ybt,"HubertForSequenceClassification"),Ybt.forEach(t),her=r(pSe," (Hubert model)"),pSe.forEach(t),per=i(Ve),j3=n(Ve,"LI",{});var _Se=s(j3);vue=n(_Se,"STRONG",{});var Kbt=s(vue);_er=r(Kbt,"sew"),Kbt.forEach(t),uer=r(_Se," \u2014 "),vz=n(_Se,"A",{href:!0});var Zbt=s(vz);ber=r(Zbt,"SEWForSequenceClassification"),Zbt.forEach(t),ver=r(_Se," (SEW model)"),_Se.forEach(t),Fer=i(Ve),D3=n(Ve,"LI",{});var uSe=s(D3);Fue=n(uSe,"STRONG",{});var e2t=s(Fue);Ter=r(e2t,"sew-d"),e2t.forEach(t),Mer=r(uSe," \u2014 "),Fz=n(uSe,"A",{href:!0});var o2t=s(Fz);Eer=r(o2t,"SEWDForSequenceClassification"),o2t.forEach(t),Cer=r(uSe," (SEW-D model)"),uSe.forEach(t),wer=i(Ve),G3=n(Ve,"LI",{});var bSe=s(G3);Tue=n(bSe,"STRONG",{});var r2t=s(Tue);Aer=r(r2t,"unispeech"),r2t.forEach(t),Ler=r(bSe," \u2014 "),Tz=n(bSe,"A",{href:!0});var t2t=s(Tz);yer=r(t2t,"UniSpeechForSequenceClassification"),t2t.forEach(t),xer=r(bSe," (UniSpeech model)"),bSe.forEach(t),$er=i(Ve),O3=n(Ve,"LI",{});var vSe=s(O3);Mue=n(vSe,"STRONG",{});var a2t=s(Mue);ker=r(a2t,"unispeech-sat"),a2t.forEach(t),Ser=r(vSe," \u2014 "),Mz=n(vSe,"A",{href:!0});var n2t=s(Mz);Rer=r(n2t,"UniSpeechSatForSequenceClassification"),n2t.forEach(t),Per=r(vSe," (UniSpeechSat model)"),vSe.forEach(t),Ber=i(Ve),V3=n(Ve,"LI",{});var FSe=s(V3);Eue=n(FSe,"STRONG",{});var s2t=s(Eue);Ier=r(s2t,"wav2vec2"),s2t.forEach(t),Ner=r(FSe," \u2014 "),Ez=n(FSe,"A",{href:!0});var l2t=s(Ez);qer=r(l2t,"Wav2Vec2ForSequenceClassification"),l2t.forEach(t),jer=r(FSe," (Wav2Vec2 model)"),FSe.forEach(t),Der=i(Ve),X3=n(Ve,"LI",{});var TSe=s(X3);Cue=n(TSe,"STRONG",{});var i2t=s(Cue);Ger=r(i2t,"wav2vec2-conformer"),i2t.forEach(t),Oer=r(TSe," \u2014 "),Cz=n(TSe,"A",{href:!0});var d2t=s(Cz);Ver=r(d2t,"Wav2Vec2ConformerForSequenceClassification"),d2t.forEach(t),Xer=r(TSe," (Wav2Vec2-Conformer model)"),TSe.forEach(t),zer=i(Ve),z3=n(Ve,"LI",{});var MSe=s(z3);wue=n(MSe,"STRONG",{});var c2t=s(wue);Wer=r(c2t,"wavlm"),c2t.forEach(t),Qer=r(MSe," \u2014 "),wz=n(MSe,"A",{href:!0});var f2t=s(wz);Her=r(f2t,"WavLMForSequenceClassification"),f2t.forEach(t),Uer=r(MSe," (WavLM model)"),MSe.forEach(t),Ve.forEach(t),Jer=i(ha),W3=n(ha,"P",{});var ESe=s(W3);Yer=r(ESe,"The model is set in evaluation mode by default using "),Aue=n(ESe,"CODE",{});var m2t=s(Aue);Ker=r(m2t,"model.eval()"),m2t.forEach(t),Zer=r(ESe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=n(ESe,"CODE",{});var g2t=s(Lue);eor=r(g2t,"model.train()"),g2t.forEach(t),ESe.forEach(t),oor=i(ha),T(Q3.$$.fragment,ha),ha.forEach(t),tl.forEach(t),jje=i(f),pd=n(f,"H2",{class:!0});var VGe=s(pd);H3=n(VGe,"A",{id:!0,class:!0,href:!0});var h2t=s(H3);yue=n(h2t,"SPAN",{});var p2t=s(yue);T(yy.$$.fragment,p2t),p2t.forEach(t),h2t.forEach(t),ror=i(VGe),xue=n(VGe,"SPAN",{});var _2t=s(xue);tor=r(_2t,"AutoModelForAudioFrameClassification"),_2t.forEach(t),VGe.forEach(t),Dje=i(f),Oo=n(f,"DIV",{class:!0});var al=s(Oo);T(xy.$$.fragment,al),aor=i(al),_d=n(al,"P",{});var vee=s(_d);nor=r(vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Az=n(vee,"A",{href:!0});var u2t=s(Az);sor=r(u2t,"from_pretrained()"),u2t.forEach(t),lor=r(vee," class method or the "),Lz=n(vee,"A",{href:!0});var b2t=s(Lz);ior=r(b2t,"from_config()"),b2t.forEach(t),dor=r(vee,` class
method.`),vee.forEach(t),cor=i(al),$y=n(al,"P",{});var XGe=s($y);mor=r(XGe,"This class cannot be instantiated directly using "),$ue=n(XGe,"CODE",{});var v2t=s($ue);gor=r(v2t,"__init__()"),v2t.forEach(t),hor=r(XGe," (throws an error)."),XGe.forEach(t),por=i(al),bt=n(al,"DIV",{class:!0});var bA=s(bt);T(ky.$$.fragment,bA),_or=i(bA),kue=n(bA,"P",{});var F2t=s(kue);uor=r(F2t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),F2t.forEach(t),bor=i(bA),ud=n(bA,"P",{});var Fee=s(ud);vor=r(Fee,`Note:
Loading a model from its configuration file does `),Sue=n(Fee,"STRONG",{});var T2t=s(Sue);For=r(T2t,"not"),T2t.forEach(t),Tor=r(Fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(Fee,"A",{href:!0});var M2t=s(yz);Mor=r(M2t,"from_pretrained()"),M2t.forEach(t),Eor=r(Fee," to load the model weights."),Fee.forEach(t),Cor=i(bA),T(U3.$$.fragment,bA),bA.forEach(t),wor=i(al),fo=n(al,"DIV",{class:!0});var pa=s(fo);T(Sy.$$.fragment,pa),Aor=i(pa),Rue=n(pa,"P",{});var E2t=s(Rue);Lor=r(E2t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),E2t.forEach(t),yor=i(pa),Oa=n(pa,"P",{});var vA=s(Oa);xor=r(vA,"The model class to instantiate is selected based on the "),Pue=n(vA,"CODE",{});var C2t=s(Pue);$or=r(C2t,"model_type"),C2t.forEach(t),kor=r(vA,` property of the config object (either
passed as an argument or loaded from `),Bue=n(vA,"CODE",{});var w2t=s(Bue);Sor=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),Ror=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=n(vA,"CODE",{});var A2t=s(Iue);Por=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),Bor=r(vA,":"),vA.forEach(t),Ior=i(pa),Kr=n(pa,"UL",{});var nl=s(Kr);J3=n(nl,"LI",{});var CSe=s(J3);Nue=n(CSe,"STRONG",{});var L2t=s(Nue);Nor=r(L2t,"data2vec-audio"),L2t.forEach(t),qor=r(CSe," \u2014 "),xz=n(CSe,"A",{href:!0});var y2t=s(xz);jor=r(y2t,"Data2VecAudioForAudioFrameClassification"),y2t.forEach(t),Dor=r(CSe," (Data2VecAudio model)"),CSe.forEach(t),Gor=i(nl),Y3=n(nl,"LI",{});var wSe=s(Y3);que=n(wSe,"STRONG",{});var x2t=s(que);Oor=r(x2t,"unispeech-sat"),x2t.forEach(t),Vor=r(wSe," \u2014 "),$z=n(wSe,"A",{href:!0});var $2t=s($z);Xor=r($2t,"UniSpeechSatForAudioFrameClassification"),$2t.forEach(t),zor=r(wSe," (UniSpeechSat model)"),wSe.forEach(t),Wor=i(nl),K3=n(nl,"LI",{});var ASe=s(K3);jue=n(ASe,"STRONG",{});var k2t=s(jue);Qor=r(k2t,"wav2vec2"),k2t.forEach(t),Hor=r(ASe," \u2014 "),kz=n(ASe,"A",{href:!0});var S2t=s(kz);Uor=r(S2t,"Wav2Vec2ForAudioFrameClassification"),S2t.forEach(t),Jor=r(ASe," (Wav2Vec2 model)"),ASe.forEach(t),Yor=i(nl),Z3=n(nl,"LI",{});var LSe=s(Z3);Due=n(LSe,"STRONG",{});var R2t=s(Due);Kor=r(R2t,"wav2vec2-conformer"),R2t.forEach(t),Zor=r(LSe," \u2014 "),Sz=n(LSe,"A",{href:!0});var P2t=s(Sz);err=r(P2t,"Wav2Vec2ConformerForAudioFrameClassification"),P2t.forEach(t),orr=r(LSe," (Wav2Vec2-Conformer model)"),LSe.forEach(t),rrr=i(nl),eF=n(nl,"LI",{});var ySe=s(eF);Gue=n(ySe,"STRONG",{});var B2t=s(Gue);trr=r(B2t,"wavlm"),B2t.forEach(t),arr=r(ySe," \u2014 "),Rz=n(ySe,"A",{href:!0});var I2t=s(Rz);nrr=r(I2t,"WavLMForAudioFrameClassification"),I2t.forEach(t),srr=r(ySe," (WavLM model)"),ySe.forEach(t),nl.forEach(t),lrr=i(pa),oF=n(pa,"P",{});var xSe=s(oF);irr=r(xSe,"The model is set in evaluation mode by default using "),Oue=n(xSe,"CODE",{});var N2t=s(Oue);drr=r(N2t,"model.eval()"),N2t.forEach(t),crr=r(xSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=n(xSe,"CODE",{});var q2t=s(Vue);frr=r(q2t,"model.train()"),q2t.forEach(t),xSe.forEach(t),mrr=i(pa),T(rF.$$.fragment,pa),pa.forEach(t),al.forEach(t),Gje=i(f),bd=n(f,"H2",{class:!0});var zGe=s(bd);tF=n(zGe,"A",{id:!0,class:!0,href:!0});var j2t=s(tF);Xue=n(j2t,"SPAN",{});var D2t=s(Xue);T(Ry.$$.fragment,D2t),D2t.forEach(t),j2t.forEach(t),grr=i(zGe),zue=n(zGe,"SPAN",{});var G2t=s(zue);hrr=r(G2t,"AutoModelForCTC"),G2t.forEach(t),zGe.forEach(t),Oje=i(f),Vo=n(f,"DIV",{class:!0});var sl=s(Vo);T(Py.$$.fragment,sl),prr=i(sl),vd=n(sl,"P",{});var Tee=s(vd);_rr=r(Tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Pz=n(Tee,"A",{href:!0});var O2t=s(Pz);urr=r(O2t,"from_pretrained()"),O2t.forEach(t),brr=r(Tee," class method or the "),Bz=n(Tee,"A",{href:!0});var V2t=s(Bz);vrr=r(V2t,"from_config()"),V2t.forEach(t),Frr=r(Tee,` class
method.`),Tee.forEach(t),Trr=i(sl),By=n(sl,"P",{});var WGe=s(By);Mrr=r(WGe,"This class cannot be instantiated directly using "),Wue=n(WGe,"CODE",{});var X2t=s(Wue);Err=r(X2t,"__init__()"),X2t.forEach(t),Crr=r(WGe," (throws an error)."),WGe.forEach(t),wrr=i(sl),vt=n(sl,"DIV",{class:!0});var FA=s(vt);T(Iy.$$.fragment,FA),Arr=i(FA),Que=n(FA,"P",{});var z2t=s(Que);Lrr=r(z2t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),z2t.forEach(t),yrr=i(FA),Fd=n(FA,"P",{});var Mee=s(Fd);xrr=r(Mee,`Note:
Loading a model from its configuration file does `),Hue=n(Mee,"STRONG",{});var W2t=s(Hue);$rr=r(W2t,"not"),W2t.forEach(t),krr=r(Mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=n(Mee,"A",{href:!0});var Q2t=s(Iz);Srr=r(Q2t,"from_pretrained()"),Q2t.forEach(t),Rrr=r(Mee," to load the model weights."),Mee.forEach(t),Prr=i(FA),T(aF.$$.fragment,FA),FA.forEach(t),Brr=i(sl),mo=n(sl,"DIV",{class:!0});var _a=s(mo);T(Ny.$$.fragment,_a),Irr=i(_a),Uue=n(_a,"P",{});var H2t=s(Uue);Nrr=r(H2t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),H2t.forEach(t),qrr=i(_a),Va=n(_a,"P",{});var TA=s(Va);jrr=r(TA,"The model class to instantiate is selected based on the "),Jue=n(TA,"CODE",{});var U2t=s(Jue);Drr=r(U2t,"model_type"),U2t.forEach(t),Grr=r(TA,` property of the config object (either
passed as an argument or loaded from `),Yue=n(TA,"CODE",{});var J2t=s(Yue);Orr=r(J2t,"pretrained_model_name_or_path"),J2t.forEach(t),Vrr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=n(TA,"CODE",{});var Y2t=s(Kue);Xrr=r(Y2t,"pretrained_model_name_or_path"),Y2t.forEach(t),zrr=r(TA,":"),TA.forEach(t),Wrr=i(_a),Re=n(_a,"UL",{});var Xe=s(Re);nF=n(Xe,"LI",{});var $Se=s(nF);Zue=n($Se,"STRONG",{});var K2t=s(Zue);Qrr=r(K2t,"data2vec-audio"),K2t.forEach(t),Hrr=r($Se," \u2014 "),Nz=n($Se,"A",{href:!0});var Z2t=s(Nz);Urr=r(Z2t,"Data2VecAudioForCTC"),Z2t.forEach(t),Jrr=r($Se," (Data2VecAudio model)"),$Se.forEach(t),Yrr=i(Xe),sF=n(Xe,"LI",{});var kSe=s(sF);e4e=n(kSe,"STRONG",{});var evt=s(e4e);Krr=r(evt,"hubert"),evt.forEach(t),Zrr=r(kSe," \u2014 "),qz=n(kSe,"A",{href:!0});var ovt=s(qz);etr=r(ovt,"HubertForCTC"),ovt.forEach(t),otr=r(kSe," (Hubert model)"),kSe.forEach(t),rtr=i(Xe),lF=n(Xe,"LI",{});var SSe=s(lF);o4e=n(SSe,"STRONG",{});var rvt=s(o4e);ttr=r(rvt,"sew"),rvt.forEach(t),atr=r(SSe," \u2014 "),jz=n(SSe,"A",{href:!0});var tvt=s(jz);ntr=r(tvt,"SEWForCTC"),tvt.forEach(t),str=r(SSe," (SEW model)"),SSe.forEach(t),ltr=i(Xe),iF=n(Xe,"LI",{});var RSe=s(iF);r4e=n(RSe,"STRONG",{});var avt=s(r4e);itr=r(avt,"sew-d"),avt.forEach(t),dtr=r(RSe," \u2014 "),Dz=n(RSe,"A",{href:!0});var nvt=s(Dz);ctr=r(nvt,"SEWDForCTC"),nvt.forEach(t),ftr=r(RSe," (SEW-D model)"),RSe.forEach(t),mtr=i(Xe),dF=n(Xe,"LI",{});var PSe=s(dF);t4e=n(PSe,"STRONG",{});var svt=s(t4e);gtr=r(svt,"unispeech"),svt.forEach(t),htr=r(PSe," \u2014 "),Gz=n(PSe,"A",{href:!0});var lvt=s(Gz);ptr=r(lvt,"UniSpeechForCTC"),lvt.forEach(t),_tr=r(PSe," (UniSpeech model)"),PSe.forEach(t),utr=i(Xe),cF=n(Xe,"LI",{});var BSe=s(cF);a4e=n(BSe,"STRONG",{});var ivt=s(a4e);btr=r(ivt,"unispeech-sat"),ivt.forEach(t),vtr=r(BSe," \u2014 "),Oz=n(BSe,"A",{href:!0});var dvt=s(Oz);Ftr=r(dvt,"UniSpeechSatForCTC"),dvt.forEach(t),Ttr=r(BSe," (UniSpeechSat model)"),BSe.forEach(t),Mtr=i(Xe),fF=n(Xe,"LI",{});var ISe=s(fF);n4e=n(ISe,"STRONG",{});var cvt=s(n4e);Etr=r(cvt,"wav2vec2"),cvt.forEach(t),Ctr=r(ISe," \u2014 "),Vz=n(ISe,"A",{href:!0});var fvt=s(Vz);wtr=r(fvt,"Wav2Vec2ForCTC"),fvt.forEach(t),Atr=r(ISe," (Wav2Vec2 model)"),ISe.forEach(t),Ltr=i(Xe),mF=n(Xe,"LI",{});var NSe=s(mF);s4e=n(NSe,"STRONG",{});var mvt=s(s4e);ytr=r(mvt,"wav2vec2-conformer"),mvt.forEach(t),xtr=r(NSe," \u2014 "),Xz=n(NSe,"A",{href:!0});var gvt=s(Xz);$tr=r(gvt,"Wav2Vec2ConformerForCTC"),gvt.forEach(t),ktr=r(NSe," (Wav2Vec2-Conformer model)"),NSe.forEach(t),Str=i(Xe),gF=n(Xe,"LI",{});var qSe=s(gF);l4e=n(qSe,"STRONG",{});var hvt=s(l4e);Rtr=r(hvt,"wavlm"),hvt.forEach(t),Ptr=r(qSe," \u2014 "),zz=n(qSe,"A",{href:!0});var pvt=s(zz);Btr=r(pvt,"WavLMForCTC"),pvt.forEach(t),Itr=r(qSe," (WavLM model)"),qSe.forEach(t),Xe.forEach(t),Ntr=i(_a),hF=n(_a,"P",{});var jSe=s(hF);qtr=r(jSe,"The model is set in evaluation mode by default using "),i4e=n(jSe,"CODE",{});var _vt=s(i4e);jtr=r(_vt,"model.eval()"),_vt.forEach(t),Dtr=r(jSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d4e=n(jSe,"CODE",{});var uvt=s(d4e);Gtr=r(uvt,"model.train()"),uvt.forEach(t),jSe.forEach(t),Otr=i(_a),T(pF.$$.fragment,_a),_a.forEach(t),sl.forEach(t),Vje=i(f),Td=n(f,"H2",{class:!0});var QGe=s(Td);_F=n(QGe,"A",{id:!0,class:!0,href:!0});var bvt=s(_F);c4e=n(bvt,"SPAN",{});var vvt=s(c4e);T(qy.$$.fragment,vvt),vvt.forEach(t),bvt.forEach(t),Vtr=i(QGe),f4e=n(QGe,"SPAN",{});var Fvt=s(f4e);Xtr=r(Fvt,"AutoModelForSpeechSeq2Seq"),Fvt.forEach(t),QGe.forEach(t),Xje=i(f),Xo=n(f,"DIV",{class:!0});var ll=s(Xo);T(jy.$$.fragment,ll),ztr=i(ll),Md=n(ll,"P",{});var Eee=s(Md);Wtr=r(Eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Wz=n(Eee,"A",{href:!0});var Tvt=s(Wz);Qtr=r(Tvt,"from_pretrained()"),Tvt.forEach(t),Htr=r(Eee," class method or the "),Qz=n(Eee,"A",{href:!0});var Mvt=s(Qz);Utr=r(Mvt,"from_config()"),Mvt.forEach(t),Jtr=r(Eee,` class
method.`),Eee.forEach(t),Ytr=i(ll),Dy=n(ll,"P",{});var HGe=s(Dy);Ktr=r(HGe,"This class cannot be instantiated directly using "),m4e=n(HGe,"CODE",{});var Evt=s(m4e);Ztr=r(Evt,"__init__()"),Evt.forEach(t),ear=r(HGe," (throws an error)."),HGe.forEach(t),oar=i(ll),Ft=n(ll,"DIV",{class:!0});var MA=s(Ft);T(Gy.$$.fragment,MA),rar=i(MA),g4e=n(MA,"P",{});var Cvt=s(g4e);tar=r(Cvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Cvt.forEach(t),aar=i(MA),Ed=n(MA,"P",{});var Cee=s(Ed);nar=r(Cee,`Note:
Loading a model from its configuration file does `),h4e=n(Cee,"STRONG",{});var wvt=s(h4e);sar=r(wvt,"not"),wvt.forEach(t),lar=r(Cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=n(Cee,"A",{href:!0});var Avt=s(Hz);iar=r(Avt,"from_pretrained()"),Avt.forEach(t),dar=r(Cee," to load the model weights."),Cee.forEach(t),car=i(MA),T(uF.$$.fragment,MA),MA.forEach(t),far=i(ll),go=n(ll,"DIV",{class:!0});var ua=s(go);T(Oy.$$.fragment,ua),mar=i(ua),p4e=n(ua,"P",{});var Lvt=s(p4e);gar=r(Lvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Lvt.forEach(t),har=i(ua),Xa=n(ua,"P",{});var EA=s(Xa);par=r(EA,"The model class to instantiate is selected based on the "),_4e=n(EA,"CODE",{});var yvt=s(_4e);_ar=r(yvt,"model_type"),yvt.forEach(t),uar=r(EA,` property of the config object (either
passed as an argument or loaded from `),u4e=n(EA,"CODE",{});var xvt=s(u4e);bar=r(xvt,"pretrained_model_name_or_path"),xvt.forEach(t),Far=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=n(EA,"CODE",{});var $vt=s(b4e);Tar=r($vt,"pretrained_model_name_or_path"),$vt.forEach(t),Mar=r(EA,":"),EA.forEach(t),Ear=i(ua),Vy=n(ua,"UL",{});var UGe=s(Vy);bF=n(UGe,"LI",{});var DSe=s(bF);v4e=n(DSe,"STRONG",{});var kvt=s(v4e);Car=r(kvt,"speech-encoder-decoder"),kvt.forEach(t),war=r(DSe," \u2014 "),Uz=n(DSe,"A",{href:!0});var Svt=s(Uz);Aar=r(Svt,"SpeechEncoderDecoderModel"),Svt.forEach(t),Lar=r(DSe," (Speech Encoder decoder model)"),DSe.forEach(t),yar=i(UGe),vF=n(UGe,"LI",{});var GSe=s(vF);F4e=n(GSe,"STRONG",{});var Rvt=s(F4e);xar=r(Rvt,"speech_to_text"),Rvt.forEach(t),$ar=r(GSe," \u2014 "),Jz=n(GSe,"A",{href:!0});var Pvt=s(Jz);kar=r(Pvt,"Speech2TextForConditionalGeneration"),Pvt.forEach(t),Sar=r(GSe," (Speech2Text model)"),GSe.forEach(t),UGe.forEach(t),Rar=i(ua),FF=n(ua,"P",{});var OSe=s(FF);Par=r(OSe,"The model is set in evaluation mode by default using "),T4e=n(OSe,"CODE",{});var Bvt=s(T4e);Bar=r(Bvt,"model.eval()"),Bvt.forEach(t),Iar=r(OSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M4e=n(OSe,"CODE",{});var Ivt=s(M4e);Nar=r(Ivt,"model.train()"),Ivt.forEach(t),OSe.forEach(t),qar=i(ua),T(TF.$$.fragment,ua),ua.forEach(t),ll.forEach(t),zje=i(f),Cd=n(f,"H2",{class:!0});var JGe=s(Cd);MF=n(JGe,"A",{id:!0,class:!0,href:!0});var Nvt=s(MF);E4e=n(Nvt,"SPAN",{});var qvt=s(E4e);T(Xy.$$.fragment,qvt),qvt.forEach(t),Nvt.forEach(t),jar=i(JGe),C4e=n(JGe,"SPAN",{});var jvt=s(C4e);Dar=r(jvt,"AutoModelForAudioXVector"),jvt.forEach(t),JGe.forEach(t),Wje=i(f),zo=n(f,"DIV",{class:!0});var il=s(zo);T(zy.$$.fragment,il),Gar=i(il),wd=n(il,"P",{});var wee=s(wd);Oar=r(wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Yz=n(wee,"A",{href:!0});var Dvt=s(Yz);Var=r(Dvt,"from_pretrained()"),Dvt.forEach(t),Xar=r(wee," class method or the "),Kz=n(wee,"A",{href:!0});var Gvt=s(Kz);zar=r(Gvt,"from_config()"),Gvt.forEach(t),War=r(wee,` class
method.`),wee.forEach(t),Qar=i(il),Wy=n(il,"P",{});var YGe=s(Wy);Har=r(YGe,"This class cannot be instantiated directly using "),w4e=n(YGe,"CODE",{});var Ovt=s(w4e);Uar=r(Ovt,"__init__()"),Ovt.forEach(t),Jar=r(YGe," (throws an error)."),YGe.forEach(t),Yar=i(il),Tt=n(il,"DIV",{class:!0});var CA=s(Tt);T(Qy.$$.fragment,CA),Kar=i(CA),A4e=n(CA,"P",{});var Vvt=s(A4e);Zar=r(Vvt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Vvt.forEach(t),enr=i(CA),Ad=n(CA,"P",{});var Aee=s(Ad);onr=r(Aee,`Note:
Loading a model from its configuration file does `),L4e=n(Aee,"STRONG",{});var Xvt=s(L4e);rnr=r(Xvt,"not"),Xvt.forEach(t),tnr=r(Aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=n(Aee,"A",{href:!0});var zvt=s(Zz);anr=r(zvt,"from_pretrained()"),zvt.forEach(t),nnr=r(Aee," to load the model weights."),Aee.forEach(t),snr=i(CA),T(EF.$$.fragment,CA),CA.forEach(t),lnr=i(il),ho=n(il,"DIV",{class:!0});var ba=s(ho);T(Hy.$$.fragment,ba),inr=i(ba),y4e=n(ba,"P",{});var Wvt=s(y4e);dnr=r(Wvt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Wvt.forEach(t),cnr=i(ba),za=n(ba,"P",{});var wA=s(za);fnr=r(wA,"The model class to instantiate is selected based on the "),x4e=n(wA,"CODE",{});var Qvt=s(x4e);mnr=r(Qvt,"model_type"),Qvt.forEach(t),gnr=r(wA,` property of the config object (either
passed as an argument or loaded from `),$4e=n(wA,"CODE",{});var Hvt=s($4e);hnr=r(Hvt,"pretrained_model_name_or_path"),Hvt.forEach(t),pnr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=n(wA,"CODE",{});var Uvt=s(k4e);_nr=r(Uvt,"pretrained_model_name_or_path"),Uvt.forEach(t),unr=r(wA,":"),wA.forEach(t),bnr=i(ba),Zr=n(ba,"UL",{});var dl=s(Zr);CF=n(dl,"LI",{});var VSe=s(CF);S4e=n(VSe,"STRONG",{});var Jvt=s(S4e);vnr=r(Jvt,"data2vec-audio"),Jvt.forEach(t),Fnr=r(VSe," \u2014 "),eW=n(VSe,"A",{href:!0});var Yvt=s(eW);Tnr=r(Yvt,"Data2VecAudioForXVector"),Yvt.forEach(t),Mnr=r(VSe," (Data2VecAudio model)"),VSe.forEach(t),Enr=i(dl),wF=n(dl,"LI",{});var XSe=s(wF);R4e=n(XSe,"STRONG",{});var Kvt=s(R4e);Cnr=r(Kvt,"unispeech-sat"),Kvt.forEach(t),wnr=r(XSe," \u2014 "),oW=n(XSe,"A",{href:!0});var Zvt=s(oW);Anr=r(Zvt,"UniSpeechSatForXVector"),Zvt.forEach(t),Lnr=r(XSe," (UniSpeechSat model)"),XSe.forEach(t),ynr=i(dl),AF=n(dl,"LI",{});var zSe=s(AF);P4e=n(zSe,"STRONG",{});var e3t=s(P4e);xnr=r(e3t,"wav2vec2"),e3t.forEach(t),$nr=r(zSe," \u2014 "),rW=n(zSe,"A",{href:!0});var o3t=s(rW);knr=r(o3t,"Wav2Vec2ForXVector"),o3t.forEach(t),Snr=r(zSe," (Wav2Vec2 model)"),zSe.forEach(t),Rnr=i(dl),LF=n(dl,"LI",{});var WSe=s(LF);B4e=n(WSe,"STRONG",{});var r3t=s(B4e);Pnr=r(r3t,"wav2vec2-conformer"),r3t.forEach(t),Bnr=r(WSe," \u2014 "),tW=n(WSe,"A",{href:!0});var t3t=s(tW);Inr=r(t3t,"Wav2Vec2ConformerForXVector"),t3t.forEach(t),Nnr=r(WSe," (Wav2Vec2-Conformer model)"),WSe.forEach(t),qnr=i(dl),yF=n(dl,"LI",{});var QSe=s(yF);I4e=n(QSe,"STRONG",{});var a3t=s(I4e);jnr=r(a3t,"wavlm"),a3t.forEach(t),Dnr=r(QSe," \u2014 "),aW=n(QSe,"A",{href:!0});var n3t=s(aW);Gnr=r(n3t,"WavLMForXVector"),n3t.forEach(t),Onr=r(QSe," (WavLM model)"),QSe.forEach(t),dl.forEach(t),Vnr=i(ba),xF=n(ba,"P",{});var HSe=s(xF);Xnr=r(HSe,"The model is set in evaluation mode by default using "),N4e=n(HSe,"CODE",{});var s3t=s(N4e);znr=r(s3t,"model.eval()"),s3t.forEach(t),Wnr=r(HSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q4e=n(HSe,"CODE",{});var l3t=s(q4e);Qnr=r(l3t,"model.train()"),l3t.forEach(t),HSe.forEach(t),Hnr=i(ba),T($F.$$.fragment,ba),ba.forEach(t),il.forEach(t),Qje=i(f),Ld=n(f,"H2",{class:!0});var KGe=s(Ld);kF=n(KGe,"A",{id:!0,class:!0,href:!0});var i3t=s(kF);j4e=n(i3t,"SPAN",{});var d3t=s(j4e);T(Uy.$$.fragment,d3t),d3t.forEach(t),i3t.forEach(t),Unr=i(KGe),D4e=n(KGe,"SPAN",{});var c3t=s(D4e);Jnr=r(c3t,"AutoModelForMaskedImageModeling"),c3t.forEach(t),KGe.forEach(t),Hje=i(f),Wo=n(f,"DIV",{class:!0});var cl=s(Wo);T(Jy.$$.fragment,cl),Ynr=i(cl),yd=n(cl,"P",{});var Lee=s(yd);Knr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),nW=n(Lee,"A",{href:!0});var f3t=s(nW);Znr=r(f3t,"from_pretrained()"),f3t.forEach(t),esr=r(Lee," class method or the "),sW=n(Lee,"A",{href:!0});var m3t=s(sW);osr=r(m3t,"from_config()"),m3t.forEach(t),rsr=r(Lee,` class
method.`),Lee.forEach(t),tsr=i(cl),Yy=n(cl,"P",{});var ZGe=s(Yy);asr=r(ZGe,"This class cannot be instantiated directly using "),G4e=n(ZGe,"CODE",{});var g3t=s(G4e);nsr=r(g3t,"__init__()"),g3t.forEach(t),ssr=r(ZGe," (throws an error)."),ZGe.forEach(t),lsr=i(cl),Mt=n(cl,"DIV",{class:!0});var AA=s(Mt);T(Ky.$$.fragment,AA),isr=i(AA),O4e=n(AA,"P",{});var h3t=s(O4e);dsr=r(h3t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),h3t.forEach(t),csr=i(AA),xd=n(AA,"P",{});var yee=s(xd);fsr=r(yee,`Note:
Loading a model from its configuration file does `),V4e=n(yee,"STRONG",{});var p3t=s(V4e);msr=r(p3t,"not"),p3t.forEach(t),gsr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(yee,"A",{href:!0});var _3t=s(lW);hsr=r(_3t,"from_pretrained()"),_3t.forEach(t),psr=r(yee," to load the model weights."),yee.forEach(t),_sr=i(AA),T(SF.$$.fragment,AA),AA.forEach(t),usr=i(cl),po=n(cl,"DIV",{class:!0});var va=s(po);T(Zy.$$.fragment,va),bsr=i(va),X4e=n(va,"P",{});var u3t=s(X4e);vsr=r(u3t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),u3t.forEach(t),Fsr=i(va),Wa=n(va,"P",{});var LA=s(Wa);Tsr=r(LA,"The model class to instantiate is selected based on the "),z4e=n(LA,"CODE",{});var b3t=s(z4e);Msr=r(b3t,"model_type"),b3t.forEach(t),Esr=r(LA,` property of the config object (either
passed as an argument or loaded from `),W4e=n(LA,"CODE",{});var v3t=s(W4e);Csr=r(v3t,"pretrained_model_name_or_path"),v3t.forEach(t),wsr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=n(LA,"CODE",{});var F3t=s(Q4e);Asr=r(F3t,"pretrained_model_name_or_path"),F3t.forEach(t),Lsr=r(LA,":"),LA.forEach(t),ysr=i(va),$d=n(va,"UL",{});var xee=s($d);RF=n(xee,"LI",{});var USe=s(RF);H4e=n(USe,"STRONG",{});var T3t=s(H4e);xsr=r(T3t,"deit"),T3t.forEach(t),$sr=r(USe," \u2014 "),iW=n(USe,"A",{href:!0});var M3t=s(iW);ksr=r(M3t,"DeiTForMaskedImageModeling"),M3t.forEach(t),Ssr=r(USe," (DeiT model)"),USe.forEach(t),Rsr=i(xee),PF=n(xee,"LI",{});var JSe=s(PF);U4e=n(JSe,"STRONG",{});var E3t=s(U4e);Psr=r(E3t,"swin"),E3t.forEach(t),Bsr=r(JSe," \u2014 "),dW=n(JSe,"A",{href:!0});var C3t=s(dW);Isr=r(C3t,"SwinForMaskedImageModeling"),C3t.forEach(t),Nsr=r(JSe," (Swin Transformer model)"),JSe.forEach(t),qsr=i(xee),BF=n(xee,"LI",{});var YSe=s(BF);J4e=n(YSe,"STRONG",{});var w3t=s(J4e);jsr=r(w3t,"vit"),w3t.forEach(t),Dsr=r(YSe," \u2014 "),cW=n(YSe,"A",{href:!0});var A3t=s(cW);Gsr=r(A3t,"ViTForMaskedImageModeling"),A3t.forEach(t),Osr=r(YSe," (ViT model)"),YSe.forEach(t),xee.forEach(t),Vsr=i(va),IF=n(va,"P",{});var KSe=s(IF);Xsr=r(KSe,"The model is set in evaluation mode by default using "),Y4e=n(KSe,"CODE",{});var L3t=s(Y4e);zsr=r(L3t,"model.eval()"),L3t.forEach(t),Wsr=r(KSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K4e=n(KSe,"CODE",{});var y3t=s(K4e);Qsr=r(y3t,"model.train()"),y3t.forEach(t),KSe.forEach(t),Hsr=i(va),T(NF.$$.fragment,va),va.forEach(t),cl.forEach(t),Uje=i(f),kd=n(f,"H2",{class:!0});var eOe=s(kd);qF=n(eOe,"A",{id:!0,class:!0,href:!0});var x3t=s(qF);Z4e=n(x3t,"SPAN",{});var $3t=s(Z4e);T(e8.$$.fragment,$3t),$3t.forEach(t),x3t.forEach(t),Usr=i(eOe),e1e=n(eOe,"SPAN",{});var k3t=s(e1e);Jsr=r(k3t,"AutoModelForObjectDetection"),k3t.forEach(t),eOe.forEach(t),Jje=i(f),Qo=n(f,"DIV",{class:!0});var fl=s(Qo);T(o8.$$.fragment,fl),Ysr=i(fl),Sd=n(fl,"P",{});var $ee=s(Sd);Ksr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),fW=n($ee,"A",{href:!0});var S3t=s(fW);Zsr=r(S3t,"from_pretrained()"),S3t.forEach(t),elr=r($ee," class method or the "),mW=n($ee,"A",{href:!0});var R3t=s(mW);olr=r(R3t,"from_config()"),R3t.forEach(t),rlr=r($ee,` class
method.`),$ee.forEach(t),tlr=i(fl),r8=n(fl,"P",{});var oOe=s(r8);alr=r(oOe,"This class cannot be instantiated directly using "),o1e=n(oOe,"CODE",{});var P3t=s(o1e);nlr=r(P3t,"__init__()"),P3t.forEach(t),slr=r(oOe," (throws an error)."),oOe.forEach(t),llr=i(fl),Et=n(fl,"DIV",{class:!0});var yA=s(Et);T(t8.$$.fragment,yA),ilr=i(yA),r1e=n(yA,"P",{});var B3t=s(r1e);dlr=r(B3t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),B3t.forEach(t),clr=i(yA),Rd=n(yA,"P",{});var kee=s(Rd);flr=r(kee,`Note:
Loading a model from its configuration file does `),t1e=n(kee,"STRONG",{});var I3t=s(t1e);mlr=r(I3t,"not"),I3t.forEach(t),glr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(kee,"A",{href:!0});var N3t=s(gW);hlr=r(N3t,"from_pretrained()"),N3t.forEach(t),plr=r(kee," to load the model weights."),kee.forEach(t),_lr=i(yA),T(jF.$$.fragment,yA),yA.forEach(t),ulr=i(fl),_o=n(fl,"DIV",{class:!0});var Fa=s(_o);T(a8.$$.fragment,Fa),blr=i(Fa),a1e=n(Fa,"P",{});var q3t=s(a1e);vlr=r(q3t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),q3t.forEach(t),Flr=i(Fa),Qa=n(Fa,"P",{});var xA=s(Qa);Tlr=r(xA,"The model class to instantiate is selected based on the "),n1e=n(xA,"CODE",{});var j3t=s(n1e);Mlr=r(j3t,"model_type"),j3t.forEach(t),Elr=r(xA,` property of the config object (either
passed as an argument or loaded from `),s1e=n(xA,"CODE",{});var D3t=s(s1e);Clr=r(D3t,"pretrained_model_name_or_path"),D3t.forEach(t),wlr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=n(xA,"CODE",{});var G3t=s(l1e);Alr=r(G3t,"pretrained_model_name_or_path"),G3t.forEach(t),Llr=r(xA,":"),xA.forEach(t),ylr=i(Fa),n8=n(Fa,"UL",{});var rOe=s(n8);DF=n(rOe,"LI",{});var ZSe=s(DF);i1e=n(ZSe,"STRONG",{});var O3t=s(i1e);xlr=r(O3t,"detr"),O3t.forEach(t),$lr=r(ZSe," \u2014 "),hW=n(ZSe,"A",{href:!0});var V3t=s(hW);klr=r(V3t,"DetrForObjectDetection"),V3t.forEach(t),Slr=r(ZSe," (DETR model)"),ZSe.forEach(t),Rlr=i(rOe),GF=n(rOe,"LI",{});var eRe=s(GF);d1e=n(eRe,"STRONG",{});var X3t=s(d1e);Plr=r(X3t,"yolos"),X3t.forEach(t),Blr=r(eRe," \u2014 "),pW=n(eRe,"A",{href:!0});var z3t=s(pW);Ilr=r(z3t,"YolosForObjectDetection"),z3t.forEach(t),Nlr=r(eRe," (YOLOS model)"),eRe.forEach(t),rOe.forEach(t),qlr=i(Fa),OF=n(Fa,"P",{});var oRe=s(OF);jlr=r(oRe,"The model is set in evaluation mode by default using "),c1e=n(oRe,"CODE",{});var W3t=s(c1e);Dlr=r(W3t,"model.eval()"),W3t.forEach(t),Glr=r(oRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f1e=n(oRe,"CODE",{});var Q3t=s(f1e);Olr=r(Q3t,"model.train()"),Q3t.forEach(t),oRe.forEach(t),Vlr=i(Fa),T(VF.$$.fragment,Fa),Fa.forEach(t),fl.forEach(t),Yje=i(f),Pd=n(f,"H2",{class:!0});var tOe=s(Pd);XF=n(tOe,"A",{id:!0,class:!0,href:!0});var H3t=s(XF);m1e=n(H3t,"SPAN",{});var U3t=s(m1e);T(s8.$$.fragment,U3t),U3t.forEach(t),H3t.forEach(t),Xlr=i(tOe),g1e=n(tOe,"SPAN",{});var J3t=s(g1e);zlr=r(J3t,"AutoModelForImageSegmentation"),J3t.forEach(t),tOe.forEach(t),Kje=i(f),Ho=n(f,"DIV",{class:!0});var ml=s(Ho);T(l8.$$.fragment,ml),Wlr=i(ml),Bd=n(ml,"P",{});var See=s(Bd);Qlr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),_W=n(See,"A",{href:!0});var Y3t=s(_W);Hlr=r(Y3t,"from_pretrained()"),Y3t.forEach(t),Ulr=r(See," class method or the "),uW=n(See,"A",{href:!0});var K3t=s(uW);Jlr=r(K3t,"from_config()"),K3t.forEach(t),Ylr=r(See,` class
method.`),See.forEach(t),Klr=i(ml),i8=n(ml,"P",{});var aOe=s(i8);Zlr=r(aOe,"This class cannot be instantiated directly using "),h1e=n(aOe,"CODE",{});var Z3t=s(h1e);eir=r(Z3t,"__init__()"),Z3t.forEach(t),oir=r(aOe," (throws an error)."),aOe.forEach(t),rir=i(ml),Ct=n(ml,"DIV",{class:!0});var $A=s(Ct);T(d8.$$.fragment,$A),tir=i($A),p1e=n($A,"P",{});var eFt=s(p1e);air=r(eFt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),eFt.forEach(t),nir=i($A),Id=n($A,"P",{});var Ree=s(Id);sir=r(Ree,`Note:
Loading a model from its configuration file does `),_1e=n(Ree,"STRONG",{});var oFt=s(_1e);lir=r(oFt,"not"),oFt.forEach(t),iir=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=n(Ree,"A",{href:!0});var rFt=s(bW);dir=r(rFt,"from_pretrained()"),rFt.forEach(t),cir=r(Ree," to load the model weights."),Ree.forEach(t),fir=i($A),T(zF.$$.fragment,$A),$A.forEach(t),mir=i(ml),uo=n(ml,"DIV",{class:!0});var Ta=s(uo);T(c8.$$.fragment,Ta),gir=i(Ta),u1e=n(Ta,"P",{});var tFt=s(u1e);hir=r(tFt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),tFt.forEach(t),pir=i(Ta),Ha=n(Ta,"P",{});var kA=s(Ha);_ir=r(kA,"The model class to instantiate is selected based on the "),b1e=n(kA,"CODE",{});var aFt=s(b1e);uir=r(aFt,"model_type"),aFt.forEach(t),bir=r(kA,` property of the config object (either
passed as an argument or loaded from `),v1e=n(kA,"CODE",{});var nFt=s(v1e);vir=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),Fir=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=n(kA,"CODE",{});var sFt=s(F1e);Tir=r(sFt,"pretrained_model_name_or_path"),sFt.forEach(t),Mir=r(kA,":"),kA.forEach(t),Eir=i(Ta),T1e=n(Ta,"UL",{});var lFt=s(T1e);WF=n(lFt,"LI",{});var rRe=s(WF);M1e=n(rRe,"STRONG",{});var iFt=s(M1e);Cir=r(iFt,"detr"),iFt.forEach(t),wir=r(rRe," \u2014 "),vW=n(rRe,"A",{href:!0});var dFt=s(vW);Air=r(dFt,"DetrForSegmentation"),dFt.forEach(t),Lir=r(rRe," (DETR model)"),rRe.forEach(t),lFt.forEach(t),yir=i(Ta),QF=n(Ta,"P",{});var tRe=s(QF);xir=r(tRe,"The model is set in evaluation mode by default using "),E1e=n(tRe,"CODE",{});var cFt=s(E1e);$ir=r(cFt,"model.eval()"),cFt.forEach(t),kir=r(tRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C1e=n(tRe,"CODE",{});var fFt=s(C1e);Sir=r(fFt,"model.train()"),fFt.forEach(t),tRe.forEach(t),Rir=i(Ta),T(HF.$$.fragment,Ta),Ta.forEach(t),ml.forEach(t),Zje=i(f),Nd=n(f,"H2",{class:!0});var nOe=s(Nd);UF=n(nOe,"A",{id:!0,class:!0,href:!0});var mFt=s(UF);w1e=n(mFt,"SPAN",{});var gFt=s(w1e);T(f8.$$.fragment,gFt),gFt.forEach(t),mFt.forEach(t),Pir=i(nOe),A1e=n(nOe,"SPAN",{});var hFt=s(A1e);Bir=r(hFt,"AutoModelForSemanticSegmentation"),hFt.forEach(t),nOe.forEach(t),eDe=i(f),Uo=n(f,"DIV",{class:!0});var gl=s(Uo);T(m8.$$.fragment,gl),Iir=i(gl),qd=n(gl,"P",{});var Pee=s(qd);Nir=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),FW=n(Pee,"A",{href:!0});var pFt=s(FW);qir=r(pFt,"from_pretrained()"),pFt.forEach(t),jir=r(Pee," class method or the "),TW=n(Pee,"A",{href:!0});var _Ft=s(TW);Dir=r(_Ft,"from_config()"),_Ft.forEach(t),Gir=r(Pee,` class
method.`),Pee.forEach(t),Oir=i(gl),g8=n(gl,"P",{});var sOe=s(g8);Vir=r(sOe,"This class cannot be instantiated directly using "),L1e=n(sOe,"CODE",{});var uFt=s(L1e);Xir=r(uFt,"__init__()"),uFt.forEach(t),zir=r(sOe," (throws an error)."),sOe.forEach(t),Wir=i(gl),wt=n(gl,"DIV",{class:!0});var SA=s(wt);T(h8.$$.fragment,SA),Qir=i(SA),y1e=n(SA,"P",{});var bFt=s(y1e);Hir=r(bFt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),bFt.forEach(t),Uir=i(SA),jd=n(SA,"P",{});var Bee=s(jd);Jir=r(Bee,`Note:
Loading a model from its configuration file does `),x1e=n(Bee,"STRONG",{});var vFt=s(x1e);Yir=r(vFt,"not"),vFt.forEach(t),Kir=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n(Bee,"A",{href:!0});var FFt=s(MW);Zir=r(FFt,"from_pretrained()"),FFt.forEach(t),edr=r(Bee," to load the model weights."),Bee.forEach(t),odr=i(SA),T(JF.$$.fragment,SA),SA.forEach(t),rdr=i(gl),bo=n(gl,"DIV",{class:!0});var Ma=s(bo);T(p8.$$.fragment,Ma),tdr=i(Ma),$1e=n(Ma,"P",{});var TFt=s($1e);adr=r(TFt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),TFt.forEach(t),ndr=i(Ma),Ua=n(Ma,"P",{});var RA=s(Ua);sdr=r(RA,"The model class to instantiate is selected based on the "),k1e=n(RA,"CODE",{});var MFt=s(k1e);ldr=r(MFt,"model_type"),MFt.forEach(t),idr=r(RA,` property of the config object (either
passed as an argument or loaded from `),S1e=n(RA,"CODE",{});var EFt=s(S1e);ddr=r(EFt,"pretrained_model_name_or_path"),EFt.forEach(t),cdr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=n(RA,"CODE",{});var CFt=s(R1e);fdr=r(CFt,"pretrained_model_name_or_path"),CFt.forEach(t),mdr=r(RA,":"),RA.forEach(t),gdr=i(Ma),Ja=n(Ma,"UL",{});var PA=s(Ja);YF=n(PA,"LI",{});var aRe=s(YF);P1e=n(aRe,"STRONG",{});var wFt=s(P1e);hdr=r(wFt,"beit"),wFt.forEach(t),pdr=r(aRe," \u2014 "),EW=n(aRe,"A",{href:!0});var AFt=s(EW);_dr=r(AFt,"BeitForSemanticSegmentation"),AFt.forEach(t),udr=r(aRe," (BEiT model)"),aRe.forEach(t),bdr=i(PA),KF=n(PA,"LI",{});var nRe=s(KF);B1e=n(nRe,"STRONG",{});var LFt=s(B1e);vdr=r(LFt,"data2vec-vision"),LFt.forEach(t),Fdr=r(nRe," \u2014 "),CW=n(nRe,"A",{href:!0});var yFt=s(CW);Tdr=r(yFt,"Data2VecVisionForSemanticSegmentation"),yFt.forEach(t),Mdr=r(nRe," (Data2VecVision model)"),nRe.forEach(t),Edr=i(PA),ZF=n(PA,"LI",{});var sRe=s(ZF);I1e=n(sRe,"STRONG",{});var xFt=s(I1e);Cdr=r(xFt,"dpt"),xFt.forEach(t),wdr=r(sRe," \u2014 "),wW=n(sRe,"A",{href:!0});var $Ft=s(wW);Adr=r($Ft,"DPTForSemanticSegmentation"),$Ft.forEach(t),Ldr=r(sRe," (DPT model)"),sRe.forEach(t),ydr=i(PA),eT=n(PA,"LI",{});var lRe=s(eT);N1e=n(lRe,"STRONG",{});var kFt=s(N1e);xdr=r(kFt,"segformer"),kFt.forEach(t),$dr=r(lRe," \u2014 "),AW=n(lRe,"A",{href:!0});var SFt=s(AW);kdr=r(SFt,"SegformerForSemanticSegmentation"),SFt.forEach(t),Sdr=r(lRe," (SegFormer model)"),lRe.forEach(t),PA.forEach(t),Rdr=i(Ma),oT=n(Ma,"P",{});var iRe=s(oT);Pdr=r(iRe,"The model is set in evaluation mode by default using "),q1e=n(iRe,"CODE",{});var RFt=s(q1e);Bdr=r(RFt,"model.eval()"),RFt.forEach(t),Idr=r(iRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j1e=n(iRe,"CODE",{});var PFt=s(j1e);Ndr=r(PFt,"model.train()"),PFt.forEach(t),iRe.forEach(t),qdr=i(Ma),T(rT.$$.fragment,Ma),Ma.forEach(t),gl.forEach(t),oDe=i(f),Dd=n(f,"H2",{class:!0});var lOe=s(Dd);tT=n(lOe,"A",{id:!0,class:!0,href:!0});var BFt=s(tT);D1e=n(BFt,"SPAN",{});var IFt=s(D1e);T(_8.$$.fragment,IFt),IFt.forEach(t),BFt.forEach(t),jdr=i(lOe),G1e=n(lOe,"SPAN",{});var NFt=s(G1e);Ddr=r(NFt,"AutoModelForInstanceSegmentation"),NFt.forEach(t),lOe.forEach(t),rDe=i(f),Jo=n(f,"DIV",{class:!0});var hl=s(Jo);T(u8.$$.fragment,hl),Gdr=i(hl),Gd=n(hl,"P",{});var Iee=s(Gd);Odr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),LW=n(Iee,"A",{href:!0});var qFt=s(LW);Vdr=r(qFt,"from_pretrained()"),qFt.forEach(t),Xdr=r(Iee," class method or the "),yW=n(Iee,"A",{href:!0});var jFt=s(yW);zdr=r(jFt,"from_config()"),jFt.forEach(t),Wdr=r(Iee,` class
method.`),Iee.forEach(t),Qdr=i(hl),b8=n(hl,"P",{});var iOe=s(b8);Hdr=r(iOe,"This class cannot be instantiated directly using "),O1e=n(iOe,"CODE",{});var DFt=s(O1e);Udr=r(DFt,"__init__()"),DFt.forEach(t),Jdr=r(iOe," (throws an error)."),iOe.forEach(t),Ydr=i(hl),At=n(hl,"DIV",{class:!0});var BA=s(At);T(v8.$$.fragment,BA),Kdr=i(BA),V1e=n(BA,"P",{});var GFt=s(V1e);Zdr=r(GFt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),GFt.forEach(t),ecr=i(BA),Od=n(BA,"P",{});var Nee=s(Od);ocr=r(Nee,`Note:
Loading a model from its configuration file does `),X1e=n(Nee,"STRONG",{});var OFt=s(X1e);rcr=r(OFt,"not"),OFt.forEach(t),tcr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=n(Nee,"A",{href:!0});var VFt=s(xW);acr=r(VFt,"from_pretrained()"),VFt.forEach(t),ncr=r(Nee," to load the model weights."),Nee.forEach(t),scr=i(BA),T(aT.$$.fragment,BA),BA.forEach(t),lcr=i(hl),vo=n(hl,"DIV",{class:!0});var Ea=s(vo);T(F8.$$.fragment,Ea),icr=i(Ea),z1e=n(Ea,"P",{});var XFt=s(z1e);dcr=r(XFt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),XFt.forEach(t),ccr=i(Ea),Ya=n(Ea,"P",{});var IA=s(Ya);fcr=r(IA,"The model class to instantiate is selected based on the "),W1e=n(IA,"CODE",{});var zFt=s(W1e);mcr=r(zFt,"model_type"),zFt.forEach(t),gcr=r(IA,` property of the config object (either
passed as an argument or loaded from `),Q1e=n(IA,"CODE",{});var WFt=s(Q1e);hcr=r(WFt,"pretrained_model_name_or_path"),WFt.forEach(t),pcr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=n(IA,"CODE",{});var QFt=s(H1e);_cr=r(QFt,"pretrained_model_name_or_path"),QFt.forEach(t),ucr=r(IA,":"),IA.forEach(t),bcr=i(Ea),U1e=n(Ea,"UL",{});var HFt=s(U1e);nT=n(HFt,"LI",{});var dRe=s(nT);J1e=n(dRe,"STRONG",{});var UFt=s(J1e);vcr=r(UFt,"maskformer"),UFt.forEach(t),Fcr=r(dRe," \u2014 "),$W=n(dRe,"A",{href:!0});var JFt=s($W);Tcr=r(JFt,"MaskFormerForInstanceSegmentation"),JFt.forEach(t),Mcr=r(dRe," (MaskFormer model)"),dRe.forEach(t),HFt.forEach(t),Ecr=i(Ea),sT=n(Ea,"P",{});var cRe=s(sT);Ccr=r(cRe,"The model is set in evaluation mode by default using "),Y1e=n(cRe,"CODE",{});var YFt=s(Y1e);wcr=r(YFt,"model.eval()"),YFt.forEach(t),Acr=r(cRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=n(cRe,"CODE",{});var KFt=s(K1e);Lcr=r(KFt,"model.train()"),KFt.forEach(t),cRe.forEach(t),ycr=i(Ea),T(lT.$$.fragment,Ea),Ea.forEach(t),hl.forEach(t),tDe=i(f),Vd=n(f,"H2",{class:!0});var dOe=s(Vd);iT=n(dOe,"A",{id:!0,class:!0,href:!0});var ZFt=s(iT);Z1e=n(ZFt,"SPAN",{});var eTt=s(Z1e);T(T8.$$.fragment,eTt),eTt.forEach(t),ZFt.forEach(t),xcr=i(dOe),ebe=n(dOe,"SPAN",{});var oTt=s(ebe);$cr=r(oTt,"TFAutoModel"),oTt.forEach(t),dOe.forEach(t),aDe=i(f),Yo=n(f,"DIV",{class:!0});var pl=s(Yo);T(M8.$$.fragment,pl),kcr=i(pl),Xd=n(pl,"P",{});var qee=s(Xd);Scr=r(qee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kW=n(qee,"A",{href:!0});var rTt=s(kW);Rcr=r(rTt,"from_pretrained()"),rTt.forEach(t),Pcr=r(qee," class method or the "),SW=n(qee,"A",{href:!0});var tTt=s(SW);Bcr=r(tTt,"from_config()"),tTt.forEach(t),Icr=r(qee,` class
method.`),qee.forEach(t),Ncr=i(pl),E8=n(pl,"P",{});var cOe=s(E8);qcr=r(cOe,"This class cannot be instantiated directly using "),obe=n(cOe,"CODE",{});var aTt=s(obe);jcr=r(aTt,"__init__()"),aTt.forEach(t),Dcr=r(cOe," (throws an error)."),cOe.forEach(t),Gcr=i(pl),Lt=n(pl,"DIV",{class:!0});var NA=s(Lt);T(C8.$$.fragment,NA),Ocr=i(NA),rbe=n(NA,"P",{});var nTt=s(rbe);Vcr=r(nTt,"Instantiates one of the base model classes of the library from a configuration."),nTt.forEach(t),Xcr=i(NA),zd=n(NA,"P",{});var jee=s(zd);zcr=r(jee,`Note:
Loading a model from its configuration file does `),tbe=n(jee,"STRONG",{});var sTt=s(tbe);Wcr=r(sTt,"not"),sTt.forEach(t),Qcr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(jee,"A",{href:!0});var lTt=s(RW);Hcr=r(lTt,"from_pretrained()"),lTt.forEach(t),Ucr=r(jee," to load the model weights."),jee.forEach(t),Jcr=i(NA),T(dT.$$.fragment,NA),NA.forEach(t),Ycr=i(pl),wr=n(pl,"DIV",{class:!0});var _l=s(wr);T(w8.$$.fragment,_l),Kcr=i(_l),abe=n(_l,"P",{});var iTt=s(abe);Zcr=r(iTt,"Instantiate one of the base model classes of the library from a pretrained model."),iTt.forEach(t),efr=i(_l),Ka=n(_l,"P",{});var qA=s(Ka);ofr=r(qA,"The model class to instantiate is selected based on the "),nbe=n(qA,"CODE",{});var dTt=s(nbe);rfr=r(dTt,"model_type"),dTt.forEach(t),tfr=r(qA,` property of the config object (either
passed as an argument or loaded from `),sbe=n(qA,"CODE",{});var cTt=s(sbe);afr=r(cTt,"pretrained_model_name_or_path"),cTt.forEach(t),nfr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=n(qA,"CODE",{});var fTt=s(lbe);sfr=r(fTt,"pretrained_model_name_or_path"),fTt.forEach(t),lfr=r(qA,":"),qA.forEach(t),ifr=i(_l),q=n(_l,"UL",{});var D=s(q);cT=n(D,"LI",{});var fRe=s(cT);ibe=n(fRe,"STRONG",{});var mTt=s(ibe);dfr=r(mTt,"albert"),mTt.forEach(t),cfr=r(fRe," \u2014 "),PW=n(fRe,"A",{href:!0});var gTt=s(PW);ffr=r(gTt,"TFAlbertModel"),gTt.forEach(t),mfr=r(fRe," (ALBERT model)"),fRe.forEach(t),gfr=i(D),fT=n(D,"LI",{});var mRe=s(fT);dbe=n(mRe,"STRONG",{});var hTt=s(dbe);hfr=r(hTt,"bart"),hTt.forEach(t),pfr=r(mRe," \u2014 "),BW=n(mRe,"A",{href:!0});var pTt=s(BW);_fr=r(pTt,"TFBartModel"),pTt.forEach(t),ufr=r(mRe," (BART model)"),mRe.forEach(t),bfr=i(D),mT=n(D,"LI",{});var gRe=s(mT);cbe=n(gRe,"STRONG",{});var _Tt=s(cbe);vfr=r(_Tt,"bert"),_Tt.forEach(t),Ffr=r(gRe," \u2014 "),IW=n(gRe,"A",{href:!0});var uTt=s(IW);Tfr=r(uTt,"TFBertModel"),uTt.forEach(t),Mfr=r(gRe," (BERT model)"),gRe.forEach(t),Efr=i(D),gT=n(D,"LI",{});var hRe=s(gT);fbe=n(hRe,"STRONG",{});var bTt=s(fbe);Cfr=r(bTt,"blenderbot"),bTt.forEach(t),wfr=r(hRe," \u2014 "),NW=n(hRe,"A",{href:!0});var vTt=s(NW);Afr=r(vTt,"TFBlenderbotModel"),vTt.forEach(t),Lfr=r(hRe," (Blenderbot model)"),hRe.forEach(t),yfr=i(D),hT=n(D,"LI",{});var pRe=s(hT);mbe=n(pRe,"STRONG",{});var FTt=s(mbe);xfr=r(FTt,"blenderbot-small"),FTt.forEach(t),$fr=r(pRe," \u2014 "),qW=n(pRe,"A",{href:!0});var TTt=s(qW);kfr=r(TTt,"TFBlenderbotSmallModel"),TTt.forEach(t),Sfr=r(pRe," (BlenderbotSmall model)"),pRe.forEach(t),Rfr=i(D),pT=n(D,"LI",{});var _Re=s(pT);gbe=n(_Re,"STRONG",{});var MTt=s(gbe);Pfr=r(MTt,"camembert"),MTt.forEach(t),Bfr=r(_Re," \u2014 "),jW=n(_Re,"A",{href:!0});var ETt=s(jW);Ifr=r(ETt,"TFCamembertModel"),ETt.forEach(t),Nfr=r(_Re," (CamemBERT model)"),_Re.forEach(t),qfr=i(D),_T=n(D,"LI",{});var uRe=s(_T);hbe=n(uRe,"STRONG",{});var CTt=s(hbe);jfr=r(CTt,"clip"),CTt.forEach(t),Dfr=r(uRe," \u2014 "),DW=n(uRe,"A",{href:!0});var wTt=s(DW);Gfr=r(wTt,"TFCLIPModel"),wTt.forEach(t),Ofr=r(uRe," (CLIP model)"),uRe.forEach(t),Vfr=i(D),uT=n(D,"LI",{});var bRe=s(uT);pbe=n(bRe,"STRONG",{});var ATt=s(pbe);Xfr=r(ATt,"convbert"),ATt.forEach(t),zfr=r(bRe," \u2014 "),GW=n(bRe,"A",{href:!0});var LTt=s(GW);Wfr=r(LTt,"TFConvBertModel"),LTt.forEach(t),Qfr=r(bRe," (ConvBERT model)"),bRe.forEach(t),Hfr=i(D),bT=n(D,"LI",{});var vRe=s(bT);_be=n(vRe,"STRONG",{});var yTt=s(_be);Ufr=r(yTt,"convnext"),yTt.forEach(t),Jfr=r(vRe," \u2014 "),OW=n(vRe,"A",{href:!0});var xTt=s(OW);Yfr=r(xTt,"TFConvNextModel"),xTt.forEach(t),Kfr=r(vRe," (ConvNeXT model)"),vRe.forEach(t),Zfr=i(D),vT=n(D,"LI",{});var FRe=s(vT);ube=n(FRe,"STRONG",{});var $Tt=s(ube);emr=r($Tt,"ctrl"),$Tt.forEach(t),omr=r(FRe," \u2014 "),VW=n(FRe,"A",{href:!0});var kTt=s(VW);rmr=r(kTt,"TFCTRLModel"),kTt.forEach(t),tmr=r(FRe," (CTRL model)"),FRe.forEach(t),amr=i(D),FT=n(D,"LI",{});var TRe=s(FT);bbe=n(TRe,"STRONG",{});var STt=s(bbe);nmr=r(STt,"data2vec-vision"),STt.forEach(t),smr=r(TRe," \u2014 "),XW=n(TRe,"A",{href:!0});var RTt=s(XW);lmr=r(RTt,"TFData2VecVisionModel"),RTt.forEach(t),imr=r(TRe," (Data2VecVision model)"),TRe.forEach(t),dmr=i(D),TT=n(D,"LI",{});var MRe=s(TT);vbe=n(MRe,"STRONG",{});var PTt=s(vbe);cmr=r(PTt,"deberta"),PTt.forEach(t),fmr=r(MRe," \u2014 "),zW=n(MRe,"A",{href:!0});var BTt=s(zW);mmr=r(BTt,"TFDebertaModel"),BTt.forEach(t),gmr=r(MRe," (DeBERTa model)"),MRe.forEach(t),hmr=i(D),MT=n(D,"LI",{});var ERe=s(MT);Fbe=n(ERe,"STRONG",{});var ITt=s(Fbe);pmr=r(ITt,"deberta-v2"),ITt.forEach(t),_mr=r(ERe," \u2014 "),WW=n(ERe,"A",{href:!0});var NTt=s(WW);umr=r(NTt,"TFDebertaV2Model"),NTt.forEach(t),bmr=r(ERe," (DeBERTa-v2 model)"),ERe.forEach(t),vmr=i(D),ET=n(D,"LI",{});var CRe=s(ET);Tbe=n(CRe,"STRONG",{});var qTt=s(Tbe);Fmr=r(qTt,"distilbert"),qTt.forEach(t),Tmr=r(CRe," \u2014 "),QW=n(CRe,"A",{href:!0});var jTt=s(QW);Mmr=r(jTt,"TFDistilBertModel"),jTt.forEach(t),Emr=r(CRe," (DistilBERT model)"),CRe.forEach(t),Cmr=i(D),CT=n(D,"LI",{});var wRe=s(CT);Mbe=n(wRe,"STRONG",{});var DTt=s(Mbe);wmr=r(DTt,"dpr"),DTt.forEach(t),Amr=r(wRe," \u2014 "),HW=n(wRe,"A",{href:!0});var GTt=s(HW);Lmr=r(GTt,"TFDPRQuestionEncoder"),GTt.forEach(t),ymr=r(wRe," (DPR model)"),wRe.forEach(t),xmr=i(D),wT=n(D,"LI",{});var ARe=s(wT);Ebe=n(ARe,"STRONG",{});var OTt=s(Ebe);$mr=r(OTt,"electra"),OTt.forEach(t),kmr=r(ARe," \u2014 "),UW=n(ARe,"A",{href:!0});var VTt=s(UW);Smr=r(VTt,"TFElectraModel"),VTt.forEach(t),Rmr=r(ARe," (ELECTRA model)"),ARe.forEach(t),Pmr=i(D),AT=n(D,"LI",{});var LRe=s(AT);Cbe=n(LRe,"STRONG",{});var XTt=s(Cbe);Bmr=r(XTt,"flaubert"),XTt.forEach(t),Imr=r(LRe," \u2014 "),JW=n(LRe,"A",{href:!0});var zTt=s(JW);Nmr=r(zTt,"TFFlaubertModel"),zTt.forEach(t),qmr=r(LRe," (FlauBERT model)"),LRe.forEach(t),jmr=i(D),qs=n(D,"LI",{});var nk=s(qs);wbe=n(nk,"STRONG",{});var WTt=s(wbe);Dmr=r(WTt,"funnel"),WTt.forEach(t),Gmr=r(nk," \u2014 "),YW=n(nk,"A",{href:!0});var QTt=s(YW);Omr=r(QTt,"TFFunnelModel"),QTt.forEach(t),Vmr=r(nk," or "),KW=n(nk,"A",{href:!0});var HTt=s(KW);Xmr=r(HTt,"TFFunnelBaseModel"),HTt.forEach(t),zmr=r(nk," (Funnel Transformer model)"),nk.forEach(t),Wmr=i(D),LT=n(D,"LI",{});var yRe=s(LT);Abe=n(yRe,"STRONG",{});var UTt=s(Abe);Qmr=r(UTt,"gpt2"),UTt.forEach(t),Hmr=r(yRe," \u2014 "),ZW=n(yRe,"A",{href:!0});var JTt=s(ZW);Umr=r(JTt,"TFGPT2Model"),JTt.forEach(t),Jmr=r(yRe," (OpenAI GPT-2 model)"),yRe.forEach(t),Ymr=i(D),yT=n(D,"LI",{});var xRe=s(yT);Lbe=n(xRe,"STRONG",{});var YTt=s(Lbe);Kmr=r(YTt,"gptj"),YTt.forEach(t),Zmr=r(xRe," \u2014 "),eQ=n(xRe,"A",{href:!0});var KTt=s(eQ);egr=r(KTt,"TFGPTJModel"),KTt.forEach(t),ogr=r(xRe," (GPT-J model)"),xRe.forEach(t),rgr=i(D),xT=n(D,"LI",{});var $Re=s(xT);ybe=n($Re,"STRONG",{});var ZTt=s(ybe);tgr=r(ZTt,"hubert"),ZTt.forEach(t),agr=r($Re," \u2014 "),oQ=n($Re,"A",{href:!0});var e7t=s(oQ);ngr=r(e7t,"TFHubertModel"),e7t.forEach(t),sgr=r($Re," (Hubert model)"),$Re.forEach(t),lgr=i(D),$T=n(D,"LI",{});var kRe=s($T);xbe=n(kRe,"STRONG",{});var o7t=s(xbe);igr=r(o7t,"layoutlm"),o7t.forEach(t),dgr=r(kRe," \u2014 "),rQ=n(kRe,"A",{href:!0});var r7t=s(rQ);cgr=r(r7t,"TFLayoutLMModel"),r7t.forEach(t),fgr=r(kRe," (LayoutLM model)"),kRe.forEach(t),mgr=i(D),kT=n(D,"LI",{});var SRe=s(kT);$be=n(SRe,"STRONG",{});var t7t=s($be);ggr=r(t7t,"led"),t7t.forEach(t),hgr=r(SRe," \u2014 "),tQ=n(SRe,"A",{href:!0});var a7t=s(tQ);pgr=r(a7t,"TFLEDModel"),a7t.forEach(t),_gr=r(SRe," (LED model)"),SRe.forEach(t),ugr=i(D),ST=n(D,"LI",{});var RRe=s(ST);kbe=n(RRe,"STRONG",{});var n7t=s(kbe);bgr=r(n7t,"longformer"),n7t.forEach(t),vgr=r(RRe," \u2014 "),aQ=n(RRe,"A",{href:!0});var s7t=s(aQ);Fgr=r(s7t,"TFLongformerModel"),s7t.forEach(t),Tgr=r(RRe," (Longformer model)"),RRe.forEach(t),Mgr=i(D),RT=n(D,"LI",{});var PRe=s(RT);Sbe=n(PRe,"STRONG",{});var l7t=s(Sbe);Egr=r(l7t,"lxmert"),l7t.forEach(t),Cgr=r(PRe," \u2014 "),nQ=n(PRe,"A",{href:!0});var i7t=s(nQ);wgr=r(i7t,"TFLxmertModel"),i7t.forEach(t),Agr=r(PRe," (LXMERT model)"),PRe.forEach(t),Lgr=i(D),PT=n(D,"LI",{});var BRe=s(PT);Rbe=n(BRe,"STRONG",{});var d7t=s(Rbe);ygr=r(d7t,"marian"),d7t.forEach(t),xgr=r(BRe," \u2014 "),sQ=n(BRe,"A",{href:!0});var c7t=s(sQ);$gr=r(c7t,"TFMarianModel"),c7t.forEach(t),kgr=r(BRe," (Marian model)"),BRe.forEach(t),Sgr=i(D),BT=n(D,"LI",{});var IRe=s(BT);Pbe=n(IRe,"STRONG",{});var f7t=s(Pbe);Rgr=r(f7t,"mbart"),f7t.forEach(t),Pgr=r(IRe," \u2014 "),lQ=n(IRe,"A",{href:!0});var m7t=s(lQ);Bgr=r(m7t,"TFMBartModel"),m7t.forEach(t),Igr=r(IRe," (mBART model)"),IRe.forEach(t),Ngr=i(D),IT=n(D,"LI",{});var NRe=s(IT);Bbe=n(NRe,"STRONG",{});var g7t=s(Bbe);qgr=r(g7t,"mobilebert"),g7t.forEach(t),jgr=r(NRe," \u2014 "),iQ=n(NRe,"A",{href:!0});var h7t=s(iQ);Dgr=r(h7t,"TFMobileBertModel"),h7t.forEach(t),Ggr=r(NRe," (MobileBERT model)"),NRe.forEach(t),Ogr=i(D),NT=n(D,"LI",{});var qRe=s(NT);Ibe=n(qRe,"STRONG",{});var p7t=s(Ibe);Vgr=r(p7t,"mpnet"),p7t.forEach(t),Xgr=r(qRe," \u2014 "),dQ=n(qRe,"A",{href:!0});var _7t=s(dQ);zgr=r(_7t,"TFMPNetModel"),_7t.forEach(t),Wgr=r(qRe," (MPNet model)"),qRe.forEach(t),Qgr=i(D),qT=n(D,"LI",{});var jRe=s(qT);Nbe=n(jRe,"STRONG",{});var u7t=s(Nbe);Hgr=r(u7t,"mt5"),u7t.forEach(t),Ugr=r(jRe," \u2014 "),cQ=n(jRe,"A",{href:!0});var b7t=s(cQ);Jgr=r(b7t,"TFMT5Model"),b7t.forEach(t),Ygr=r(jRe," (MT5 model)"),jRe.forEach(t),Kgr=i(D),jT=n(D,"LI",{});var DRe=s(jT);qbe=n(DRe,"STRONG",{});var v7t=s(qbe);Zgr=r(v7t,"openai-gpt"),v7t.forEach(t),ehr=r(DRe," \u2014 "),fQ=n(DRe,"A",{href:!0});var F7t=s(fQ);ohr=r(F7t,"TFOpenAIGPTModel"),F7t.forEach(t),rhr=r(DRe," (OpenAI GPT model)"),DRe.forEach(t),thr=i(D),DT=n(D,"LI",{});var GRe=s(DT);jbe=n(GRe,"STRONG",{});var T7t=s(jbe);ahr=r(T7t,"opt"),T7t.forEach(t),nhr=r(GRe," \u2014 "),mQ=n(GRe,"A",{href:!0});var M7t=s(mQ);shr=r(M7t,"TFOPTModel"),M7t.forEach(t),lhr=r(GRe," (OPT model)"),GRe.forEach(t),ihr=i(D),GT=n(D,"LI",{});var ORe=s(GT);Dbe=n(ORe,"STRONG",{});var E7t=s(Dbe);dhr=r(E7t,"pegasus"),E7t.forEach(t),chr=r(ORe," \u2014 "),gQ=n(ORe,"A",{href:!0});var C7t=s(gQ);fhr=r(C7t,"TFPegasusModel"),C7t.forEach(t),mhr=r(ORe," (Pegasus model)"),ORe.forEach(t),ghr=i(D),OT=n(D,"LI",{});var VRe=s(OT);Gbe=n(VRe,"STRONG",{});var w7t=s(Gbe);hhr=r(w7t,"rembert"),w7t.forEach(t),phr=r(VRe," \u2014 "),hQ=n(VRe,"A",{href:!0});var A7t=s(hQ);_hr=r(A7t,"TFRemBertModel"),A7t.forEach(t),uhr=r(VRe," (RemBERT model)"),VRe.forEach(t),bhr=i(D),VT=n(D,"LI",{});var XRe=s(VT);Obe=n(XRe,"STRONG",{});var L7t=s(Obe);vhr=r(L7t,"roberta"),L7t.forEach(t),Fhr=r(XRe," \u2014 "),pQ=n(XRe,"A",{href:!0});var y7t=s(pQ);Thr=r(y7t,"TFRobertaModel"),y7t.forEach(t),Mhr=r(XRe," (RoBERTa model)"),XRe.forEach(t),Ehr=i(D),XT=n(D,"LI",{});var zRe=s(XT);Vbe=n(zRe,"STRONG",{});var x7t=s(Vbe);Chr=r(x7t,"roformer"),x7t.forEach(t),whr=r(zRe," \u2014 "),_Q=n(zRe,"A",{href:!0});var $7t=s(_Q);Ahr=r($7t,"TFRoFormerModel"),$7t.forEach(t),Lhr=r(zRe," (RoFormer model)"),zRe.forEach(t),yhr=i(D),zT=n(D,"LI",{});var WRe=s(zT);Xbe=n(WRe,"STRONG",{});var k7t=s(Xbe);xhr=r(k7t,"speech_to_text"),k7t.forEach(t),$hr=r(WRe," \u2014 "),uQ=n(WRe,"A",{href:!0});var S7t=s(uQ);khr=r(S7t,"TFSpeech2TextModel"),S7t.forEach(t),Shr=r(WRe," (Speech2Text model)"),WRe.forEach(t),Rhr=i(D),WT=n(D,"LI",{});var QRe=s(WT);zbe=n(QRe,"STRONG",{});var R7t=s(zbe);Phr=r(R7t,"swin"),R7t.forEach(t),Bhr=r(QRe," \u2014 "),bQ=n(QRe,"A",{href:!0});var P7t=s(bQ);Ihr=r(P7t,"TFSwinModel"),P7t.forEach(t),Nhr=r(QRe," (Swin Transformer model)"),QRe.forEach(t),qhr=i(D),QT=n(D,"LI",{});var HRe=s(QT);Wbe=n(HRe,"STRONG",{});var B7t=s(Wbe);jhr=r(B7t,"t5"),B7t.forEach(t),Dhr=r(HRe," \u2014 "),vQ=n(HRe,"A",{href:!0});var I7t=s(vQ);Ghr=r(I7t,"TFT5Model"),I7t.forEach(t),Ohr=r(HRe," (T5 model)"),HRe.forEach(t),Vhr=i(D),HT=n(D,"LI",{});var URe=s(HT);Qbe=n(URe,"STRONG",{});var N7t=s(Qbe);Xhr=r(N7t,"tapas"),N7t.forEach(t),zhr=r(URe," \u2014 "),FQ=n(URe,"A",{href:!0});var q7t=s(FQ);Whr=r(q7t,"TFTapasModel"),q7t.forEach(t),Qhr=r(URe," (TAPAS model)"),URe.forEach(t),Hhr=i(D),UT=n(D,"LI",{});var JRe=s(UT);Hbe=n(JRe,"STRONG",{});var j7t=s(Hbe);Uhr=r(j7t,"transfo-xl"),j7t.forEach(t),Jhr=r(JRe," \u2014 "),TQ=n(JRe,"A",{href:!0});var D7t=s(TQ);Yhr=r(D7t,"TFTransfoXLModel"),D7t.forEach(t),Khr=r(JRe," (Transformer-XL model)"),JRe.forEach(t),Zhr=i(D),JT=n(D,"LI",{});var YRe=s(JT);Ube=n(YRe,"STRONG",{});var G7t=s(Ube);epr=r(G7t,"vit"),G7t.forEach(t),opr=r(YRe," \u2014 "),MQ=n(YRe,"A",{href:!0});var O7t=s(MQ);rpr=r(O7t,"TFViTModel"),O7t.forEach(t),tpr=r(YRe," (ViT model)"),YRe.forEach(t),apr=i(D),YT=n(D,"LI",{});var KRe=s(YT);Jbe=n(KRe,"STRONG",{});var V7t=s(Jbe);npr=r(V7t,"vit_mae"),V7t.forEach(t),spr=r(KRe," \u2014 "),EQ=n(KRe,"A",{href:!0});var X7t=s(EQ);lpr=r(X7t,"TFViTMAEModel"),X7t.forEach(t),ipr=r(KRe," (ViTMAE model)"),KRe.forEach(t),dpr=i(D),KT=n(D,"LI",{});var ZRe=s(KT);Ybe=n(ZRe,"STRONG",{});var z7t=s(Ybe);cpr=r(z7t,"wav2vec2"),z7t.forEach(t),fpr=r(ZRe," \u2014 "),CQ=n(ZRe,"A",{href:!0});var W7t=s(CQ);mpr=r(W7t,"TFWav2Vec2Model"),W7t.forEach(t),gpr=r(ZRe," (Wav2Vec2 model)"),ZRe.forEach(t),hpr=i(D),ZT=n(D,"LI",{});var ePe=s(ZT);Kbe=n(ePe,"STRONG",{});var Q7t=s(Kbe);ppr=r(Q7t,"xlm"),Q7t.forEach(t),_pr=r(ePe," \u2014 "),wQ=n(ePe,"A",{href:!0});var H7t=s(wQ);upr=r(H7t,"TFXLMModel"),H7t.forEach(t),bpr=r(ePe," (XLM model)"),ePe.forEach(t),vpr=i(D),e7=n(D,"LI",{});var oPe=s(e7);Zbe=n(oPe,"STRONG",{});var U7t=s(Zbe);Fpr=r(U7t,"xlm-roberta"),U7t.forEach(t),Tpr=r(oPe," \u2014 "),AQ=n(oPe,"A",{href:!0});var J7t=s(AQ);Mpr=r(J7t,"TFXLMRobertaModel"),J7t.forEach(t),Epr=r(oPe," (XLM-RoBERTa model)"),oPe.forEach(t),Cpr=i(D),o7=n(D,"LI",{});var rPe=s(o7);e2e=n(rPe,"STRONG",{});var Y7t=s(e2e);wpr=r(Y7t,"xlnet"),Y7t.forEach(t),Apr=r(rPe," \u2014 "),LQ=n(rPe,"A",{href:!0});var K7t=s(LQ);Lpr=r(K7t,"TFXLNetModel"),K7t.forEach(t),ypr=r(rPe," (XLNet model)"),rPe.forEach(t),D.forEach(t),xpr=i(_l),T(r7.$$.fragment,_l),_l.forEach(t),pl.forEach(t),nDe=i(f),Wd=n(f,"H2",{class:!0});var fOe=s(Wd);t7=n(fOe,"A",{id:!0,class:!0,href:!0});var Z7t=s(t7);o2e=n(Z7t,"SPAN",{});var eMt=s(o2e);T(A8.$$.fragment,eMt),eMt.forEach(t),Z7t.forEach(t),$pr=i(fOe),r2e=n(fOe,"SPAN",{});var oMt=s(r2e);kpr=r(oMt,"TFAutoModelForPreTraining"),oMt.forEach(t),fOe.forEach(t),sDe=i(f),Ko=n(f,"DIV",{class:!0});var ul=s(Ko);T(L8.$$.fragment,ul),Spr=i(ul),Qd=n(ul,"P",{});var Dee=s(Qd);Rpr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yQ=n(Dee,"A",{href:!0});var rMt=s(yQ);Ppr=r(rMt,"from_pretrained()"),rMt.forEach(t),Bpr=r(Dee," class method or the "),xQ=n(Dee,"A",{href:!0});var tMt=s(xQ);Ipr=r(tMt,"from_config()"),tMt.forEach(t),Npr=r(Dee,` class
method.`),Dee.forEach(t),qpr=i(ul),y8=n(ul,"P",{});var mOe=s(y8);jpr=r(mOe,"This class cannot be instantiated directly using "),t2e=n(mOe,"CODE",{});var aMt=s(t2e);Dpr=r(aMt,"__init__()"),aMt.forEach(t),Gpr=r(mOe," (throws an error)."),mOe.forEach(t),Opr=i(ul),yt=n(ul,"DIV",{class:!0});var jA=s(yt);T(x8.$$.fragment,jA),Vpr=i(jA),a2e=n(jA,"P",{});var nMt=s(a2e);Xpr=r(nMt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nMt.forEach(t),zpr=i(jA),Hd=n(jA,"P",{});var Gee=s(Hd);Wpr=r(Gee,`Note:
Loading a model from its configuration file does `),n2e=n(Gee,"STRONG",{});var sMt=s(n2e);Qpr=r(sMt,"not"),sMt.forEach(t),Hpr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(Gee,"A",{href:!0});var lMt=s($Q);Upr=r(lMt,"from_pretrained()"),lMt.forEach(t),Jpr=r(Gee," to load the model weights."),Gee.forEach(t),Ypr=i(jA),T(a7.$$.fragment,jA),jA.forEach(t),Kpr=i(ul),Ar=n(ul,"DIV",{class:!0});var bl=s(Ar);T($8.$$.fragment,bl),Zpr=i(bl),s2e=n(bl,"P",{});var iMt=s(s2e);e_r=r(iMt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),iMt.forEach(t),o_r=i(bl),Za=n(bl,"P",{});var DA=s(Za);r_r=r(DA,"The model class to instantiate is selected based on the "),l2e=n(DA,"CODE",{});var dMt=s(l2e);t_r=r(dMt,"model_type"),dMt.forEach(t),a_r=r(DA,` property of the config object (either
passed as an argument or loaded from `),i2e=n(DA,"CODE",{});var cMt=s(i2e);n_r=r(cMt,"pretrained_model_name_or_path"),cMt.forEach(t),s_r=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=n(DA,"CODE",{});var fMt=s(d2e);l_r=r(fMt,"pretrained_model_name_or_path"),fMt.forEach(t),i_r=r(DA,":"),DA.forEach(t),d_r=i(bl),se=n(bl,"UL",{});var le=s(se);n7=n(le,"LI",{});var tPe=s(n7);c2e=n(tPe,"STRONG",{});var mMt=s(c2e);c_r=r(mMt,"albert"),mMt.forEach(t),f_r=r(tPe," \u2014 "),kQ=n(tPe,"A",{href:!0});var gMt=s(kQ);m_r=r(gMt,"TFAlbertForPreTraining"),gMt.forEach(t),g_r=r(tPe," (ALBERT model)"),tPe.forEach(t),h_r=i(le),s7=n(le,"LI",{});var aPe=s(s7);f2e=n(aPe,"STRONG",{});var hMt=s(f2e);p_r=r(hMt,"bart"),hMt.forEach(t),__r=r(aPe," \u2014 "),SQ=n(aPe,"A",{href:!0});var pMt=s(SQ);u_r=r(pMt,"TFBartForConditionalGeneration"),pMt.forEach(t),b_r=r(aPe," (BART model)"),aPe.forEach(t),v_r=i(le),l7=n(le,"LI",{});var nPe=s(l7);m2e=n(nPe,"STRONG",{});var _Mt=s(m2e);F_r=r(_Mt,"bert"),_Mt.forEach(t),T_r=r(nPe," \u2014 "),RQ=n(nPe,"A",{href:!0});var uMt=s(RQ);M_r=r(uMt,"TFBertForPreTraining"),uMt.forEach(t),E_r=r(nPe," (BERT model)"),nPe.forEach(t),C_r=i(le),i7=n(le,"LI",{});var sPe=s(i7);g2e=n(sPe,"STRONG",{});var bMt=s(g2e);w_r=r(bMt,"camembert"),bMt.forEach(t),A_r=r(sPe," \u2014 "),PQ=n(sPe,"A",{href:!0});var vMt=s(PQ);L_r=r(vMt,"TFCamembertForMaskedLM"),vMt.forEach(t),y_r=r(sPe," (CamemBERT model)"),sPe.forEach(t),x_r=i(le),d7=n(le,"LI",{});var lPe=s(d7);h2e=n(lPe,"STRONG",{});var FMt=s(h2e);$_r=r(FMt,"ctrl"),FMt.forEach(t),k_r=r(lPe," \u2014 "),BQ=n(lPe,"A",{href:!0});var TMt=s(BQ);S_r=r(TMt,"TFCTRLLMHeadModel"),TMt.forEach(t),R_r=r(lPe," (CTRL model)"),lPe.forEach(t),P_r=i(le),c7=n(le,"LI",{});var iPe=s(c7);p2e=n(iPe,"STRONG",{});var MMt=s(p2e);B_r=r(MMt,"distilbert"),MMt.forEach(t),I_r=r(iPe," \u2014 "),IQ=n(iPe,"A",{href:!0});var EMt=s(IQ);N_r=r(EMt,"TFDistilBertForMaskedLM"),EMt.forEach(t),q_r=r(iPe," (DistilBERT model)"),iPe.forEach(t),j_r=i(le),f7=n(le,"LI",{});var dPe=s(f7);_2e=n(dPe,"STRONG",{});var CMt=s(_2e);D_r=r(CMt,"electra"),CMt.forEach(t),G_r=r(dPe," \u2014 "),NQ=n(dPe,"A",{href:!0});var wMt=s(NQ);O_r=r(wMt,"TFElectraForPreTraining"),wMt.forEach(t),V_r=r(dPe," (ELECTRA model)"),dPe.forEach(t),X_r=i(le),m7=n(le,"LI",{});var cPe=s(m7);u2e=n(cPe,"STRONG",{});var AMt=s(u2e);z_r=r(AMt,"flaubert"),AMt.forEach(t),W_r=r(cPe," \u2014 "),qQ=n(cPe,"A",{href:!0});var LMt=s(qQ);Q_r=r(LMt,"TFFlaubertWithLMHeadModel"),LMt.forEach(t),H_r=r(cPe," (FlauBERT model)"),cPe.forEach(t),U_r=i(le),g7=n(le,"LI",{});var fPe=s(g7);b2e=n(fPe,"STRONG",{});var yMt=s(b2e);J_r=r(yMt,"funnel"),yMt.forEach(t),Y_r=r(fPe," \u2014 "),jQ=n(fPe,"A",{href:!0});var xMt=s(jQ);K_r=r(xMt,"TFFunnelForPreTraining"),xMt.forEach(t),Z_r=r(fPe," (Funnel Transformer model)"),fPe.forEach(t),eur=i(le),h7=n(le,"LI",{});var mPe=s(h7);v2e=n(mPe,"STRONG",{});var $Mt=s(v2e);our=r($Mt,"gpt2"),$Mt.forEach(t),rur=r(mPe," \u2014 "),DQ=n(mPe,"A",{href:!0});var kMt=s(DQ);tur=r(kMt,"TFGPT2LMHeadModel"),kMt.forEach(t),aur=r(mPe," (OpenAI GPT-2 model)"),mPe.forEach(t),nur=i(le),p7=n(le,"LI",{});var gPe=s(p7);F2e=n(gPe,"STRONG",{});var SMt=s(F2e);sur=r(SMt,"layoutlm"),SMt.forEach(t),lur=r(gPe," \u2014 "),GQ=n(gPe,"A",{href:!0});var RMt=s(GQ);iur=r(RMt,"TFLayoutLMForMaskedLM"),RMt.forEach(t),dur=r(gPe," (LayoutLM model)"),gPe.forEach(t),cur=i(le),_7=n(le,"LI",{});var hPe=s(_7);T2e=n(hPe,"STRONG",{});var PMt=s(T2e);fur=r(PMt,"lxmert"),PMt.forEach(t),mur=r(hPe," \u2014 "),OQ=n(hPe,"A",{href:!0});var BMt=s(OQ);gur=r(BMt,"TFLxmertForPreTraining"),BMt.forEach(t),hur=r(hPe," (LXMERT model)"),hPe.forEach(t),pur=i(le),u7=n(le,"LI",{});var pPe=s(u7);M2e=n(pPe,"STRONG",{});var IMt=s(M2e);_ur=r(IMt,"mobilebert"),IMt.forEach(t),uur=r(pPe," \u2014 "),VQ=n(pPe,"A",{href:!0});var NMt=s(VQ);bur=r(NMt,"TFMobileBertForPreTraining"),NMt.forEach(t),vur=r(pPe," (MobileBERT model)"),pPe.forEach(t),Fur=i(le),b7=n(le,"LI",{});var _Pe=s(b7);E2e=n(_Pe,"STRONG",{});var qMt=s(E2e);Tur=r(qMt,"mpnet"),qMt.forEach(t),Mur=r(_Pe," \u2014 "),XQ=n(_Pe,"A",{href:!0});var jMt=s(XQ);Eur=r(jMt,"TFMPNetForMaskedLM"),jMt.forEach(t),Cur=r(_Pe," (MPNet model)"),_Pe.forEach(t),wur=i(le),v7=n(le,"LI",{});var uPe=s(v7);C2e=n(uPe,"STRONG",{});var DMt=s(C2e);Aur=r(DMt,"openai-gpt"),DMt.forEach(t),Lur=r(uPe," \u2014 "),zQ=n(uPe,"A",{href:!0});var GMt=s(zQ);yur=r(GMt,"TFOpenAIGPTLMHeadModel"),GMt.forEach(t),xur=r(uPe," (OpenAI GPT model)"),uPe.forEach(t),$ur=i(le),F7=n(le,"LI",{});var bPe=s(F7);w2e=n(bPe,"STRONG",{});var OMt=s(w2e);kur=r(OMt,"roberta"),OMt.forEach(t),Sur=r(bPe," \u2014 "),WQ=n(bPe,"A",{href:!0});var VMt=s(WQ);Rur=r(VMt,"TFRobertaForMaskedLM"),VMt.forEach(t),Pur=r(bPe," (RoBERTa model)"),bPe.forEach(t),Bur=i(le),T7=n(le,"LI",{});var vPe=s(T7);A2e=n(vPe,"STRONG",{});var XMt=s(A2e);Iur=r(XMt,"t5"),XMt.forEach(t),Nur=r(vPe," \u2014 "),QQ=n(vPe,"A",{href:!0});var zMt=s(QQ);qur=r(zMt,"TFT5ForConditionalGeneration"),zMt.forEach(t),jur=r(vPe," (T5 model)"),vPe.forEach(t),Dur=i(le),M7=n(le,"LI",{});var FPe=s(M7);L2e=n(FPe,"STRONG",{});var WMt=s(L2e);Gur=r(WMt,"tapas"),WMt.forEach(t),Our=r(FPe," \u2014 "),HQ=n(FPe,"A",{href:!0});var QMt=s(HQ);Vur=r(QMt,"TFTapasForMaskedLM"),QMt.forEach(t),Xur=r(FPe," (TAPAS model)"),FPe.forEach(t),zur=i(le),E7=n(le,"LI",{});var TPe=s(E7);y2e=n(TPe,"STRONG",{});var HMt=s(y2e);Wur=r(HMt,"transfo-xl"),HMt.forEach(t),Qur=r(TPe," \u2014 "),UQ=n(TPe,"A",{href:!0});var UMt=s(UQ);Hur=r(UMt,"TFTransfoXLLMHeadModel"),UMt.forEach(t),Uur=r(TPe," (Transformer-XL model)"),TPe.forEach(t),Jur=i(le),C7=n(le,"LI",{});var MPe=s(C7);x2e=n(MPe,"STRONG",{});var JMt=s(x2e);Yur=r(JMt,"vit_mae"),JMt.forEach(t),Kur=r(MPe," \u2014 "),JQ=n(MPe,"A",{href:!0});var YMt=s(JQ);Zur=r(YMt,"TFViTMAEForPreTraining"),YMt.forEach(t),e4r=r(MPe," (ViTMAE model)"),MPe.forEach(t),o4r=i(le),w7=n(le,"LI",{});var EPe=s(w7);$2e=n(EPe,"STRONG",{});var KMt=s($2e);r4r=r(KMt,"xlm"),KMt.forEach(t),t4r=r(EPe," \u2014 "),YQ=n(EPe,"A",{href:!0});var ZMt=s(YQ);a4r=r(ZMt,"TFXLMWithLMHeadModel"),ZMt.forEach(t),n4r=r(EPe," (XLM model)"),EPe.forEach(t),s4r=i(le),A7=n(le,"LI",{});var CPe=s(A7);k2e=n(CPe,"STRONG",{});var eEt=s(k2e);l4r=r(eEt,"xlm-roberta"),eEt.forEach(t),i4r=r(CPe," \u2014 "),KQ=n(CPe,"A",{href:!0});var oEt=s(KQ);d4r=r(oEt,"TFXLMRobertaForMaskedLM"),oEt.forEach(t),c4r=r(CPe," (XLM-RoBERTa model)"),CPe.forEach(t),f4r=i(le),L7=n(le,"LI",{});var wPe=s(L7);S2e=n(wPe,"STRONG",{});var rEt=s(S2e);m4r=r(rEt,"xlnet"),rEt.forEach(t),g4r=r(wPe," \u2014 "),ZQ=n(wPe,"A",{href:!0});var tEt=s(ZQ);h4r=r(tEt,"TFXLNetLMHeadModel"),tEt.forEach(t),p4r=r(wPe," (XLNet model)"),wPe.forEach(t),le.forEach(t),_4r=i(bl),T(y7.$$.fragment,bl),bl.forEach(t),ul.forEach(t),lDe=i(f),Ud=n(f,"H2",{class:!0});var gOe=s(Ud);x7=n(gOe,"A",{id:!0,class:!0,href:!0});var aEt=s(x7);R2e=n(aEt,"SPAN",{});var nEt=s(R2e);T(k8.$$.fragment,nEt),nEt.forEach(t),aEt.forEach(t),u4r=i(gOe),P2e=n(gOe,"SPAN",{});var sEt=s(P2e);b4r=r(sEt,"TFAutoModelForCausalLM"),sEt.forEach(t),gOe.forEach(t),iDe=i(f),Zo=n(f,"DIV",{class:!0});var vl=s(Zo);T(S8.$$.fragment,vl),v4r=i(vl),Jd=n(vl,"P",{});var Oee=s(Jd);F4r=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eH=n(Oee,"A",{href:!0});var lEt=s(eH);T4r=r(lEt,"from_pretrained()"),lEt.forEach(t),M4r=r(Oee," class method or the "),oH=n(Oee,"A",{href:!0});var iEt=s(oH);E4r=r(iEt,"from_config()"),iEt.forEach(t),C4r=r(Oee,` class
method.`),Oee.forEach(t),w4r=i(vl),R8=n(vl,"P",{});var hOe=s(R8);A4r=r(hOe,"This class cannot be instantiated directly using "),B2e=n(hOe,"CODE",{});var dEt=s(B2e);L4r=r(dEt,"__init__()"),dEt.forEach(t),y4r=r(hOe," (throws an error)."),hOe.forEach(t),x4r=i(vl),xt=n(vl,"DIV",{class:!0});var GA=s(xt);T(P8.$$.fragment,GA),$4r=i(GA),I2e=n(GA,"P",{});var cEt=s(I2e);k4r=r(cEt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cEt.forEach(t),S4r=i(GA),Yd=n(GA,"P",{});var Vee=s(Yd);R4r=r(Vee,`Note:
Loading a model from its configuration file does `),N2e=n(Vee,"STRONG",{});var fEt=s(N2e);P4r=r(fEt,"not"),fEt.forEach(t),B4r=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(Vee,"A",{href:!0});var mEt=s(rH);I4r=r(mEt,"from_pretrained()"),mEt.forEach(t),N4r=r(Vee," to load the model weights."),Vee.forEach(t),q4r=i(GA),T($7.$$.fragment,GA),GA.forEach(t),j4r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(B8.$$.fragment,Fl),D4r=i(Fl),q2e=n(Fl,"P",{});var gEt=s(q2e);G4r=r(gEt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gEt.forEach(t),O4r=i(Fl),en=n(Fl,"P",{});var OA=s(en);V4r=r(OA,"The model class to instantiate is selected based on the "),j2e=n(OA,"CODE",{});var hEt=s(j2e);X4r=r(hEt,"model_type"),hEt.forEach(t),z4r=r(OA,` property of the config object (either
passed as an argument or loaded from `),D2e=n(OA,"CODE",{});var pEt=s(D2e);W4r=r(pEt,"pretrained_model_name_or_path"),pEt.forEach(t),Q4r=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G2e=n(OA,"CODE",{});var _Et=s(G2e);H4r=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),U4r=r(OA,":"),OA.forEach(t),J4r=i(Fl),Me=n(Fl,"UL",{});var Ce=s(Me);k7=n(Ce,"LI",{});var APe=s(k7);O2e=n(APe,"STRONG",{});var uEt=s(O2e);Y4r=r(uEt,"bert"),uEt.forEach(t),K4r=r(APe," \u2014 "),tH=n(APe,"A",{href:!0});var bEt=s(tH);Z4r=r(bEt,"TFBertLMHeadModel"),bEt.forEach(t),e1r=r(APe," (BERT model)"),APe.forEach(t),o1r=i(Ce),S7=n(Ce,"LI",{});var LPe=s(S7);V2e=n(LPe,"STRONG",{});var vEt=s(V2e);r1r=r(vEt,"camembert"),vEt.forEach(t),t1r=r(LPe," \u2014 "),aH=n(LPe,"A",{href:!0});var FEt=s(aH);a1r=r(FEt,"TFCamembertForCausalLM"),FEt.forEach(t),n1r=r(LPe," (CamemBERT model)"),LPe.forEach(t),s1r=i(Ce),R7=n(Ce,"LI",{});var yPe=s(R7);X2e=n(yPe,"STRONG",{});var TEt=s(X2e);l1r=r(TEt,"ctrl"),TEt.forEach(t),i1r=r(yPe," \u2014 "),nH=n(yPe,"A",{href:!0});var MEt=s(nH);d1r=r(MEt,"TFCTRLLMHeadModel"),MEt.forEach(t),c1r=r(yPe," (CTRL model)"),yPe.forEach(t),f1r=i(Ce),P7=n(Ce,"LI",{});var xPe=s(P7);z2e=n(xPe,"STRONG",{});var EEt=s(z2e);m1r=r(EEt,"gpt2"),EEt.forEach(t),g1r=r(xPe," \u2014 "),sH=n(xPe,"A",{href:!0});var CEt=s(sH);h1r=r(CEt,"TFGPT2LMHeadModel"),CEt.forEach(t),p1r=r(xPe," (OpenAI GPT-2 model)"),xPe.forEach(t),_1r=i(Ce),B7=n(Ce,"LI",{});var $Pe=s(B7);W2e=n($Pe,"STRONG",{});var wEt=s(W2e);u1r=r(wEt,"gptj"),wEt.forEach(t),b1r=r($Pe," \u2014 "),lH=n($Pe,"A",{href:!0});var AEt=s(lH);v1r=r(AEt,"TFGPTJForCausalLM"),AEt.forEach(t),F1r=r($Pe," (GPT-J model)"),$Pe.forEach(t),T1r=i(Ce),I7=n(Ce,"LI",{});var kPe=s(I7);Q2e=n(kPe,"STRONG",{});var LEt=s(Q2e);M1r=r(LEt,"openai-gpt"),LEt.forEach(t),E1r=r(kPe," \u2014 "),iH=n(kPe,"A",{href:!0});var yEt=s(iH);C1r=r(yEt,"TFOpenAIGPTLMHeadModel"),yEt.forEach(t),w1r=r(kPe," (OpenAI GPT model)"),kPe.forEach(t),A1r=i(Ce),N7=n(Ce,"LI",{});var SPe=s(N7);H2e=n(SPe,"STRONG",{});var xEt=s(H2e);L1r=r(xEt,"opt"),xEt.forEach(t),y1r=r(SPe," \u2014 "),dH=n(SPe,"A",{href:!0});var $Et=s(dH);x1r=r($Et,"TFOPTForCausalLM"),$Et.forEach(t),$1r=r(SPe," (OPT model)"),SPe.forEach(t),k1r=i(Ce),q7=n(Ce,"LI",{});var RPe=s(q7);U2e=n(RPe,"STRONG",{});var kEt=s(U2e);S1r=r(kEt,"rembert"),kEt.forEach(t),R1r=r(RPe," \u2014 "),cH=n(RPe,"A",{href:!0});var SEt=s(cH);P1r=r(SEt,"TFRemBertForCausalLM"),SEt.forEach(t),B1r=r(RPe," (RemBERT model)"),RPe.forEach(t),I1r=i(Ce),j7=n(Ce,"LI",{});var PPe=s(j7);J2e=n(PPe,"STRONG",{});var REt=s(J2e);N1r=r(REt,"roberta"),REt.forEach(t),q1r=r(PPe," \u2014 "),fH=n(PPe,"A",{href:!0});var PEt=s(fH);j1r=r(PEt,"TFRobertaForCausalLM"),PEt.forEach(t),D1r=r(PPe," (RoBERTa model)"),PPe.forEach(t),G1r=i(Ce),D7=n(Ce,"LI",{});var BPe=s(D7);Y2e=n(BPe,"STRONG",{});var BEt=s(Y2e);O1r=r(BEt,"roformer"),BEt.forEach(t),V1r=r(BPe," \u2014 "),mH=n(BPe,"A",{href:!0});var IEt=s(mH);X1r=r(IEt,"TFRoFormerForCausalLM"),IEt.forEach(t),z1r=r(BPe," (RoFormer model)"),BPe.forEach(t),W1r=i(Ce),G7=n(Ce,"LI",{});var IPe=s(G7);K2e=n(IPe,"STRONG",{});var NEt=s(K2e);Q1r=r(NEt,"transfo-xl"),NEt.forEach(t),H1r=r(IPe," \u2014 "),gH=n(IPe,"A",{href:!0});var qEt=s(gH);U1r=r(qEt,"TFTransfoXLLMHeadModel"),qEt.forEach(t),J1r=r(IPe," (Transformer-XL model)"),IPe.forEach(t),Y1r=i(Ce),O7=n(Ce,"LI",{});var NPe=s(O7);Z2e=n(NPe,"STRONG",{});var jEt=s(Z2e);K1r=r(jEt,"xlm"),jEt.forEach(t),Z1r=r(NPe," \u2014 "),hH=n(NPe,"A",{href:!0});var DEt=s(hH);ebr=r(DEt,"TFXLMWithLMHeadModel"),DEt.forEach(t),obr=r(NPe," (XLM model)"),NPe.forEach(t),rbr=i(Ce),V7=n(Ce,"LI",{});var qPe=s(V7);eve=n(qPe,"STRONG",{});var GEt=s(eve);tbr=r(GEt,"xlnet"),GEt.forEach(t),abr=r(qPe," \u2014 "),pH=n(qPe,"A",{href:!0});var OEt=s(pH);nbr=r(OEt,"TFXLNetLMHeadModel"),OEt.forEach(t),sbr=r(qPe," (XLNet model)"),qPe.forEach(t),Ce.forEach(t),lbr=i(Fl),T(X7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),dDe=i(f),Kd=n(f,"H2",{class:!0});var pOe=s(Kd);z7=n(pOe,"A",{id:!0,class:!0,href:!0});var VEt=s(z7);ove=n(VEt,"SPAN",{});var XEt=s(ove);T(I8.$$.fragment,XEt),XEt.forEach(t),VEt.forEach(t),ibr=i(pOe),rve=n(pOe,"SPAN",{});var zEt=s(rve);dbr=r(zEt,"TFAutoModelForImageClassification"),zEt.forEach(t),pOe.forEach(t),cDe=i(f),er=n(f,"DIV",{class:!0});var Tl=s(er);T(N8.$$.fragment,Tl),cbr=i(Tl),Zd=n(Tl,"P",{});var Xee=s(Zd);fbr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_H=n(Xee,"A",{href:!0});var WEt=s(_H);mbr=r(WEt,"from_pretrained()"),WEt.forEach(t),gbr=r(Xee," class method or the "),uH=n(Xee,"A",{href:!0});var QEt=s(uH);hbr=r(QEt,"from_config()"),QEt.forEach(t),pbr=r(Xee,` class
method.`),Xee.forEach(t),_br=i(Tl),q8=n(Tl,"P",{});var _Oe=s(q8);ubr=r(_Oe,"This class cannot be instantiated directly using "),tve=n(_Oe,"CODE",{});var HEt=s(tve);bbr=r(HEt,"__init__()"),HEt.forEach(t),vbr=r(_Oe," (throws an error)."),_Oe.forEach(t),Fbr=i(Tl),$t=n(Tl,"DIV",{class:!0});var VA=s($t);T(j8.$$.fragment,VA),Tbr=i(VA),ave=n(VA,"P",{});var UEt=s(ave);Mbr=r(UEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UEt.forEach(t),Ebr=i(VA),ec=n(VA,"P",{});var zee=s(ec);Cbr=r(zee,`Note:
Loading a model from its configuration file does `),nve=n(zee,"STRONG",{});var JEt=s(nve);wbr=r(JEt,"not"),JEt.forEach(t),Abr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=n(zee,"A",{href:!0});var YEt=s(bH);Lbr=r(YEt,"from_pretrained()"),YEt.forEach(t),ybr=r(zee," to load the model weights."),zee.forEach(t),xbr=i(VA),T(W7.$$.fragment,VA),VA.forEach(t),$br=i(Tl),yr=n(Tl,"DIV",{class:!0});var Ml=s(yr);T(D8.$$.fragment,Ml),kbr=i(Ml),sve=n(Ml,"P",{});var KEt=s(sve);Sbr=r(KEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),KEt.forEach(t),Rbr=i(Ml),on=n(Ml,"P",{});var XA=s(on);Pbr=r(XA,"The model class to instantiate is selected based on the "),lve=n(XA,"CODE",{});var ZEt=s(lve);Bbr=r(ZEt,"model_type"),ZEt.forEach(t),Ibr=r(XA,` property of the config object (either
passed as an argument or loaded from `),ive=n(XA,"CODE",{});var eCt=s(ive);Nbr=r(eCt,"pretrained_model_name_or_path"),eCt.forEach(t),qbr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=n(XA,"CODE",{});var oCt=s(dve);jbr=r(oCt,"pretrained_model_name_or_path"),oCt.forEach(t),Dbr=r(XA,":"),XA.forEach(t),Gbr=i(Ml),rn=n(Ml,"UL",{});var zA=s(rn);Q7=n(zA,"LI",{});var jPe=s(Q7);cve=n(jPe,"STRONG",{});var rCt=s(cve);Obr=r(rCt,"convnext"),rCt.forEach(t),Vbr=r(jPe," \u2014 "),vH=n(jPe,"A",{href:!0});var tCt=s(vH);Xbr=r(tCt,"TFConvNextForImageClassification"),tCt.forEach(t),zbr=r(jPe," (ConvNeXT model)"),jPe.forEach(t),Wbr=i(zA),H7=n(zA,"LI",{});var DPe=s(H7);fve=n(DPe,"STRONG",{});var aCt=s(fve);Qbr=r(aCt,"data2vec-vision"),aCt.forEach(t),Hbr=r(DPe," \u2014 "),FH=n(DPe,"A",{href:!0});var nCt=s(FH);Ubr=r(nCt,"TFData2VecVisionForImageClassification"),nCt.forEach(t),Jbr=r(DPe," (Data2VecVision model)"),DPe.forEach(t),Ybr=i(zA),U7=n(zA,"LI",{});var GPe=s(U7);mve=n(GPe,"STRONG",{});var sCt=s(mve);Kbr=r(sCt,"swin"),sCt.forEach(t),Zbr=r(GPe," \u2014 "),TH=n(GPe,"A",{href:!0});var lCt=s(TH);e2r=r(lCt,"TFSwinForImageClassification"),lCt.forEach(t),o2r=r(GPe," (Swin Transformer model)"),GPe.forEach(t),r2r=i(zA),J7=n(zA,"LI",{});var OPe=s(J7);gve=n(OPe,"STRONG",{});var iCt=s(gve);t2r=r(iCt,"vit"),iCt.forEach(t),a2r=r(OPe," \u2014 "),MH=n(OPe,"A",{href:!0});var dCt=s(MH);n2r=r(dCt,"TFViTForImageClassification"),dCt.forEach(t),s2r=r(OPe," (ViT model)"),OPe.forEach(t),zA.forEach(t),l2r=i(Ml),T(Y7.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),fDe=i(f),oc=n(f,"H2",{class:!0});var uOe=s(oc);K7=n(uOe,"A",{id:!0,class:!0,href:!0});var cCt=s(K7);hve=n(cCt,"SPAN",{});var fCt=s(hve);T(G8.$$.fragment,fCt),fCt.forEach(t),cCt.forEach(t),i2r=i(uOe),pve=n(uOe,"SPAN",{});var mCt=s(pve);d2r=r(mCt,"TFAutoModelForMaskedLM"),mCt.forEach(t),uOe.forEach(t),mDe=i(f),or=n(f,"DIV",{class:!0});var El=s(or);T(O8.$$.fragment,El),c2r=i(El),rc=n(El,"P",{});var Wee=s(rc);f2r=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EH=n(Wee,"A",{href:!0});var gCt=s(EH);m2r=r(gCt,"from_pretrained()"),gCt.forEach(t),g2r=r(Wee," class method or the "),CH=n(Wee,"A",{href:!0});var hCt=s(CH);h2r=r(hCt,"from_config()"),hCt.forEach(t),p2r=r(Wee,` class
method.`),Wee.forEach(t),_2r=i(El),V8=n(El,"P",{});var bOe=s(V8);u2r=r(bOe,"This class cannot be instantiated directly using "),_ve=n(bOe,"CODE",{});var pCt=s(_ve);b2r=r(pCt,"__init__()"),pCt.forEach(t),v2r=r(bOe," (throws an error)."),bOe.forEach(t),F2r=i(El),kt=n(El,"DIV",{class:!0});var WA=s(kt);T(X8.$$.fragment,WA),T2r=i(WA),uve=n(WA,"P",{});var _Ct=s(uve);M2r=r(_Ct,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Ct.forEach(t),E2r=i(WA),tc=n(WA,"P",{});var Qee=s(tc);C2r=r(Qee,`Note:
Loading a model from its configuration file does `),bve=n(Qee,"STRONG",{});var uCt=s(bve);w2r=r(uCt,"not"),uCt.forEach(t),A2r=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(Qee,"A",{href:!0});var bCt=s(wH);L2r=r(bCt,"from_pretrained()"),bCt.forEach(t),y2r=r(Qee," to load the model weights."),Qee.forEach(t),x2r=i(WA),T(Z7.$$.fragment,WA),WA.forEach(t),$2r=i(El),xr=n(El,"DIV",{class:!0});var Cl=s(xr);T(z8.$$.fragment,Cl),k2r=i(Cl),vve=n(Cl,"P",{});var vCt=s(vve);S2r=r(vCt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vCt.forEach(t),R2r=i(Cl),tn=n(Cl,"P",{});var QA=s(tn);P2r=r(QA,"The model class to instantiate is selected based on the "),Fve=n(QA,"CODE",{});var FCt=s(Fve);B2r=r(FCt,"model_type"),FCt.forEach(t),I2r=r(QA,` property of the config object (either
passed as an argument or loaded from `),Tve=n(QA,"CODE",{});var TCt=s(Tve);N2r=r(TCt,"pretrained_model_name_or_path"),TCt.forEach(t),q2r=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=n(QA,"CODE",{});var MCt=s(Mve);j2r=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),D2r=r(QA,":"),QA.forEach(t),G2r=i(Cl),ie=n(Cl,"UL",{});var fe=s(ie);eM=n(fe,"LI",{});var VPe=s(eM);Eve=n(VPe,"STRONG",{});var ECt=s(Eve);O2r=r(ECt,"albert"),ECt.forEach(t),V2r=r(VPe," \u2014 "),AH=n(VPe,"A",{href:!0});var CCt=s(AH);X2r=r(CCt,"TFAlbertForMaskedLM"),CCt.forEach(t),z2r=r(VPe," (ALBERT model)"),VPe.forEach(t),W2r=i(fe),oM=n(fe,"LI",{});var XPe=s(oM);Cve=n(XPe,"STRONG",{});var wCt=s(Cve);Q2r=r(wCt,"bert"),wCt.forEach(t),H2r=r(XPe," \u2014 "),LH=n(XPe,"A",{href:!0});var ACt=s(LH);U2r=r(ACt,"TFBertForMaskedLM"),ACt.forEach(t),J2r=r(XPe," (BERT model)"),XPe.forEach(t),Y2r=i(fe),rM=n(fe,"LI",{});var zPe=s(rM);wve=n(zPe,"STRONG",{});var LCt=s(wve);K2r=r(LCt,"camembert"),LCt.forEach(t),Z2r=r(zPe," \u2014 "),yH=n(zPe,"A",{href:!0});var yCt=s(yH);evr=r(yCt,"TFCamembertForMaskedLM"),yCt.forEach(t),ovr=r(zPe," (CamemBERT model)"),zPe.forEach(t),rvr=i(fe),tM=n(fe,"LI",{});var WPe=s(tM);Ave=n(WPe,"STRONG",{});var xCt=s(Ave);tvr=r(xCt,"convbert"),xCt.forEach(t),avr=r(WPe," \u2014 "),xH=n(WPe,"A",{href:!0});var $Ct=s(xH);nvr=r($Ct,"TFConvBertForMaskedLM"),$Ct.forEach(t),svr=r(WPe," (ConvBERT model)"),WPe.forEach(t),lvr=i(fe),aM=n(fe,"LI",{});var QPe=s(aM);Lve=n(QPe,"STRONG",{});var kCt=s(Lve);ivr=r(kCt,"deberta"),kCt.forEach(t),dvr=r(QPe," \u2014 "),$H=n(QPe,"A",{href:!0});var SCt=s($H);cvr=r(SCt,"TFDebertaForMaskedLM"),SCt.forEach(t),fvr=r(QPe," (DeBERTa model)"),QPe.forEach(t),mvr=i(fe),nM=n(fe,"LI",{});var HPe=s(nM);yve=n(HPe,"STRONG",{});var RCt=s(yve);gvr=r(RCt,"deberta-v2"),RCt.forEach(t),hvr=r(HPe," \u2014 "),kH=n(HPe,"A",{href:!0});var PCt=s(kH);pvr=r(PCt,"TFDebertaV2ForMaskedLM"),PCt.forEach(t),_vr=r(HPe," (DeBERTa-v2 model)"),HPe.forEach(t),uvr=i(fe),sM=n(fe,"LI",{});var UPe=s(sM);xve=n(UPe,"STRONG",{});var BCt=s(xve);bvr=r(BCt,"distilbert"),BCt.forEach(t),vvr=r(UPe," \u2014 "),SH=n(UPe,"A",{href:!0});var ICt=s(SH);Fvr=r(ICt,"TFDistilBertForMaskedLM"),ICt.forEach(t),Tvr=r(UPe," (DistilBERT model)"),UPe.forEach(t),Mvr=i(fe),lM=n(fe,"LI",{});var JPe=s(lM);$ve=n(JPe,"STRONG",{});var NCt=s($ve);Evr=r(NCt,"electra"),NCt.forEach(t),Cvr=r(JPe," \u2014 "),RH=n(JPe,"A",{href:!0});var qCt=s(RH);wvr=r(qCt,"TFElectraForMaskedLM"),qCt.forEach(t),Avr=r(JPe," (ELECTRA model)"),JPe.forEach(t),Lvr=i(fe),iM=n(fe,"LI",{});var YPe=s(iM);kve=n(YPe,"STRONG",{});var jCt=s(kve);yvr=r(jCt,"flaubert"),jCt.forEach(t),xvr=r(YPe," \u2014 "),PH=n(YPe,"A",{href:!0});var DCt=s(PH);$vr=r(DCt,"TFFlaubertWithLMHeadModel"),DCt.forEach(t),kvr=r(YPe," (FlauBERT model)"),YPe.forEach(t),Svr=i(fe),dM=n(fe,"LI",{});var KPe=s(dM);Sve=n(KPe,"STRONG",{});var GCt=s(Sve);Rvr=r(GCt,"funnel"),GCt.forEach(t),Pvr=r(KPe," \u2014 "),BH=n(KPe,"A",{href:!0});var OCt=s(BH);Bvr=r(OCt,"TFFunnelForMaskedLM"),OCt.forEach(t),Ivr=r(KPe," (Funnel Transformer model)"),KPe.forEach(t),Nvr=i(fe),cM=n(fe,"LI",{});var ZPe=s(cM);Rve=n(ZPe,"STRONG",{});var VCt=s(Rve);qvr=r(VCt,"layoutlm"),VCt.forEach(t),jvr=r(ZPe," \u2014 "),IH=n(ZPe,"A",{href:!0});var XCt=s(IH);Dvr=r(XCt,"TFLayoutLMForMaskedLM"),XCt.forEach(t),Gvr=r(ZPe," (LayoutLM model)"),ZPe.forEach(t),Ovr=i(fe),fM=n(fe,"LI",{});var eBe=s(fM);Pve=n(eBe,"STRONG",{});var zCt=s(Pve);Vvr=r(zCt,"longformer"),zCt.forEach(t),Xvr=r(eBe," \u2014 "),NH=n(eBe,"A",{href:!0});var WCt=s(NH);zvr=r(WCt,"TFLongformerForMaskedLM"),WCt.forEach(t),Wvr=r(eBe," (Longformer model)"),eBe.forEach(t),Qvr=i(fe),mM=n(fe,"LI",{});var oBe=s(mM);Bve=n(oBe,"STRONG",{});var QCt=s(Bve);Hvr=r(QCt,"mobilebert"),QCt.forEach(t),Uvr=r(oBe," \u2014 "),qH=n(oBe,"A",{href:!0});var HCt=s(qH);Jvr=r(HCt,"TFMobileBertForMaskedLM"),HCt.forEach(t),Yvr=r(oBe," (MobileBERT model)"),oBe.forEach(t),Kvr=i(fe),gM=n(fe,"LI",{});var rBe=s(gM);Ive=n(rBe,"STRONG",{});var UCt=s(Ive);Zvr=r(UCt,"mpnet"),UCt.forEach(t),e3r=r(rBe," \u2014 "),jH=n(rBe,"A",{href:!0});var JCt=s(jH);o3r=r(JCt,"TFMPNetForMaskedLM"),JCt.forEach(t),r3r=r(rBe," (MPNet model)"),rBe.forEach(t),t3r=i(fe),hM=n(fe,"LI",{});var tBe=s(hM);Nve=n(tBe,"STRONG",{});var YCt=s(Nve);a3r=r(YCt,"rembert"),YCt.forEach(t),n3r=r(tBe," \u2014 "),DH=n(tBe,"A",{href:!0});var KCt=s(DH);s3r=r(KCt,"TFRemBertForMaskedLM"),KCt.forEach(t),l3r=r(tBe," (RemBERT model)"),tBe.forEach(t),i3r=i(fe),pM=n(fe,"LI",{});var aBe=s(pM);qve=n(aBe,"STRONG",{});var ZCt=s(qve);d3r=r(ZCt,"roberta"),ZCt.forEach(t),c3r=r(aBe," \u2014 "),GH=n(aBe,"A",{href:!0});var e5t=s(GH);f3r=r(e5t,"TFRobertaForMaskedLM"),e5t.forEach(t),m3r=r(aBe," (RoBERTa model)"),aBe.forEach(t),g3r=i(fe),_M=n(fe,"LI",{});var nBe=s(_M);jve=n(nBe,"STRONG",{});var o5t=s(jve);h3r=r(o5t,"roformer"),o5t.forEach(t),p3r=r(nBe," \u2014 "),OH=n(nBe,"A",{href:!0});var r5t=s(OH);_3r=r(r5t,"TFRoFormerForMaskedLM"),r5t.forEach(t),u3r=r(nBe," (RoFormer model)"),nBe.forEach(t),b3r=i(fe),uM=n(fe,"LI",{});var sBe=s(uM);Dve=n(sBe,"STRONG",{});var t5t=s(Dve);v3r=r(t5t,"tapas"),t5t.forEach(t),F3r=r(sBe," \u2014 "),VH=n(sBe,"A",{href:!0});var a5t=s(VH);T3r=r(a5t,"TFTapasForMaskedLM"),a5t.forEach(t),M3r=r(sBe," (TAPAS model)"),sBe.forEach(t),E3r=i(fe),bM=n(fe,"LI",{});var lBe=s(bM);Gve=n(lBe,"STRONG",{});var n5t=s(Gve);C3r=r(n5t,"xlm"),n5t.forEach(t),w3r=r(lBe," \u2014 "),XH=n(lBe,"A",{href:!0});var s5t=s(XH);A3r=r(s5t,"TFXLMWithLMHeadModel"),s5t.forEach(t),L3r=r(lBe," (XLM model)"),lBe.forEach(t),y3r=i(fe),vM=n(fe,"LI",{});var iBe=s(vM);Ove=n(iBe,"STRONG",{});var l5t=s(Ove);x3r=r(l5t,"xlm-roberta"),l5t.forEach(t),$3r=r(iBe," \u2014 "),zH=n(iBe,"A",{href:!0});var i5t=s(zH);k3r=r(i5t,"TFXLMRobertaForMaskedLM"),i5t.forEach(t),S3r=r(iBe," (XLM-RoBERTa model)"),iBe.forEach(t),fe.forEach(t),R3r=i(Cl),T(FM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),gDe=i(f),ac=n(f,"H2",{class:!0});var vOe=s(ac);TM=n(vOe,"A",{id:!0,class:!0,href:!0});var d5t=s(TM);Vve=n(d5t,"SPAN",{});var c5t=s(Vve);T(W8.$$.fragment,c5t),c5t.forEach(t),d5t.forEach(t),P3r=i(vOe),Xve=n(vOe,"SPAN",{});var f5t=s(Xve);B3r=r(f5t,"TFAutoModelForSeq2SeqLM"),f5t.forEach(t),vOe.forEach(t),hDe=i(f),rr=n(f,"DIV",{class:!0});var wl=s(rr);T(Q8.$$.fragment,wl),I3r=i(wl),nc=n(wl,"P",{});var Hee=s(nc);N3r=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WH=n(Hee,"A",{href:!0});var m5t=s(WH);q3r=r(m5t,"from_pretrained()"),m5t.forEach(t),j3r=r(Hee," class method or the "),QH=n(Hee,"A",{href:!0});var g5t=s(QH);D3r=r(g5t,"from_config()"),g5t.forEach(t),G3r=r(Hee,` class
method.`),Hee.forEach(t),O3r=i(wl),H8=n(wl,"P",{});var FOe=s(H8);V3r=r(FOe,"This class cannot be instantiated directly using "),zve=n(FOe,"CODE",{});var h5t=s(zve);X3r=r(h5t,"__init__()"),h5t.forEach(t),z3r=r(FOe," (throws an error)."),FOe.forEach(t),W3r=i(wl),St=n(wl,"DIV",{class:!0});var HA=s(St);T(U8.$$.fragment,HA),Q3r=i(HA),Wve=n(HA,"P",{});var p5t=s(Wve);H3r=r(p5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),p5t.forEach(t),U3r=i(HA),sc=n(HA,"P",{});var Uee=s(sc);J3r=r(Uee,`Note:
Loading a model from its configuration file does `),Qve=n(Uee,"STRONG",{});var _5t=s(Qve);Y3r=r(_5t,"not"),_5t.forEach(t),K3r=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(Uee,"A",{href:!0});var u5t=s(HH);Z3r=r(u5t,"from_pretrained()"),u5t.forEach(t),eFr=r(Uee," to load the model weights."),Uee.forEach(t),oFr=i(HA),T(MM.$$.fragment,HA),HA.forEach(t),rFr=i(wl),$r=n(wl,"DIV",{class:!0});var Al=s($r);T(J8.$$.fragment,Al),tFr=i(Al),Hve=n(Al,"P",{});var b5t=s(Hve);aFr=r(b5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),b5t.forEach(t),nFr=i(Al),an=n(Al,"P",{});var UA=s(an);sFr=r(UA,"The model class to instantiate is selected based on the "),Uve=n(UA,"CODE",{});var v5t=s(Uve);lFr=r(v5t,"model_type"),v5t.forEach(t),iFr=r(UA,` property of the config object (either
passed as an argument or loaded from `),Jve=n(UA,"CODE",{});var F5t=s(Jve);dFr=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),cFr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(UA,"CODE",{});var T5t=s(Yve);fFr=r(T5t,"pretrained_model_name_or_path"),T5t.forEach(t),mFr=r(UA,":"),UA.forEach(t),gFr=i(Al),Le=n(Al,"UL",{});var Be=s(Le);EM=n(Be,"LI",{});var dBe=s(EM);Kve=n(dBe,"STRONG",{});var M5t=s(Kve);hFr=r(M5t,"bart"),M5t.forEach(t),pFr=r(dBe," \u2014 "),UH=n(dBe,"A",{href:!0});var E5t=s(UH);_Fr=r(E5t,"TFBartForConditionalGeneration"),E5t.forEach(t),uFr=r(dBe," (BART model)"),dBe.forEach(t),bFr=i(Be),CM=n(Be,"LI",{});var cBe=s(CM);Zve=n(cBe,"STRONG",{});var C5t=s(Zve);vFr=r(C5t,"blenderbot"),C5t.forEach(t),FFr=r(cBe," \u2014 "),JH=n(cBe,"A",{href:!0});var w5t=s(JH);TFr=r(w5t,"TFBlenderbotForConditionalGeneration"),w5t.forEach(t),MFr=r(cBe," (Blenderbot model)"),cBe.forEach(t),EFr=i(Be),wM=n(Be,"LI",{});var fBe=s(wM);e3e=n(fBe,"STRONG",{});var A5t=s(e3e);CFr=r(A5t,"blenderbot-small"),A5t.forEach(t),wFr=r(fBe," \u2014 "),YH=n(fBe,"A",{href:!0});var L5t=s(YH);AFr=r(L5t,"TFBlenderbotSmallForConditionalGeneration"),L5t.forEach(t),LFr=r(fBe," (BlenderbotSmall model)"),fBe.forEach(t),yFr=i(Be),AM=n(Be,"LI",{});var mBe=s(AM);o3e=n(mBe,"STRONG",{});var y5t=s(o3e);xFr=r(y5t,"encoder-decoder"),y5t.forEach(t),$Fr=r(mBe," \u2014 "),KH=n(mBe,"A",{href:!0});var x5t=s(KH);kFr=r(x5t,"TFEncoderDecoderModel"),x5t.forEach(t),SFr=r(mBe," (Encoder decoder model)"),mBe.forEach(t),RFr=i(Be),LM=n(Be,"LI",{});var gBe=s(LM);r3e=n(gBe,"STRONG",{});var $5t=s(r3e);PFr=r($5t,"led"),$5t.forEach(t),BFr=r(gBe," \u2014 "),ZH=n(gBe,"A",{href:!0});var k5t=s(ZH);IFr=r(k5t,"TFLEDForConditionalGeneration"),k5t.forEach(t),NFr=r(gBe," (LED model)"),gBe.forEach(t),qFr=i(Be),yM=n(Be,"LI",{});var hBe=s(yM);t3e=n(hBe,"STRONG",{});var S5t=s(t3e);jFr=r(S5t,"marian"),S5t.forEach(t),DFr=r(hBe," \u2014 "),eU=n(hBe,"A",{href:!0});var R5t=s(eU);GFr=r(R5t,"TFMarianMTModel"),R5t.forEach(t),OFr=r(hBe," (Marian model)"),hBe.forEach(t),VFr=i(Be),xM=n(Be,"LI",{});var pBe=s(xM);a3e=n(pBe,"STRONG",{});var P5t=s(a3e);XFr=r(P5t,"mbart"),P5t.forEach(t),zFr=r(pBe," \u2014 "),oU=n(pBe,"A",{href:!0});var B5t=s(oU);WFr=r(B5t,"TFMBartForConditionalGeneration"),B5t.forEach(t),QFr=r(pBe," (mBART model)"),pBe.forEach(t),HFr=i(Be),$M=n(Be,"LI",{});var _Be=s($M);n3e=n(_Be,"STRONG",{});var I5t=s(n3e);UFr=r(I5t,"mt5"),I5t.forEach(t),JFr=r(_Be," \u2014 "),rU=n(_Be,"A",{href:!0});var N5t=s(rU);YFr=r(N5t,"TFMT5ForConditionalGeneration"),N5t.forEach(t),KFr=r(_Be," (MT5 model)"),_Be.forEach(t),ZFr=i(Be),kM=n(Be,"LI",{});var uBe=s(kM);s3e=n(uBe,"STRONG",{});var q5t=s(s3e);eTr=r(q5t,"pegasus"),q5t.forEach(t),oTr=r(uBe," \u2014 "),tU=n(uBe,"A",{href:!0});var j5t=s(tU);rTr=r(j5t,"TFPegasusForConditionalGeneration"),j5t.forEach(t),tTr=r(uBe," (Pegasus model)"),uBe.forEach(t),aTr=i(Be),SM=n(Be,"LI",{});var bBe=s(SM);l3e=n(bBe,"STRONG",{});var D5t=s(l3e);nTr=r(D5t,"t5"),D5t.forEach(t),sTr=r(bBe," \u2014 "),aU=n(bBe,"A",{href:!0});var G5t=s(aU);lTr=r(G5t,"TFT5ForConditionalGeneration"),G5t.forEach(t),iTr=r(bBe," (T5 model)"),bBe.forEach(t),Be.forEach(t),dTr=i(Al),T(RM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),pDe=i(f),lc=n(f,"H2",{class:!0});var TOe=s(lc);PM=n(TOe,"A",{id:!0,class:!0,href:!0});var O5t=s(PM);i3e=n(O5t,"SPAN",{});var V5t=s(i3e);T(Y8.$$.fragment,V5t),V5t.forEach(t),O5t.forEach(t),cTr=i(TOe),d3e=n(TOe,"SPAN",{});var X5t=s(d3e);fTr=r(X5t,"TFAutoModelForSequenceClassification"),X5t.forEach(t),TOe.forEach(t),_De=i(f),tr=n(f,"DIV",{class:!0});var Ll=s(tr);T(K8.$$.fragment,Ll),mTr=i(Ll),ic=n(Ll,"P",{});var Jee=s(ic);gTr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nU=n(Jee,"A",{href:!0});var z5t=s(nU);hTr=r(z5t,"from_pretrained()"),z5t.forEach(t),pTr=r(Jee," class method or the "),sU=n(Jee,"A",{href:!0});var W5t=s(sU);_Tr=r(W5t,"from_config()"),W5t.forEach(t),uTr=r(Jee,` class
method.`),Jee.forEach(t),bTr=i(Ll),Z8=n(Ll,"P",{});var MOe=s(Z8);vTr=r(MOe,"This class cannot be instantiated directly using "),c3e=n(MOe,"CODE",{});var Q5t=s(c3e);FTr=r(Q5t,"__init__()"),Q5t.forEach(t),TTr=r(MOe," (throws an error)."),MOe.forEach(t),MTr=i(Ll),Rt=n(Ll,"DIV",{class:!0});var JA=s(Rt);T(e9.$$.fragment,JA),ETr=i(JA),f3e=n(JA,"P",{});var H5t=s(f3e);CTr=r(H5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),H5t.forEach(t),wTr=i(JA),dc=n(JA,"P",{});var Yee=s(dc);ATr=r(Yee,`Note:
Loading a model from its configuration file does `),m3e=n(Yee,"STRONG",{});var U5t=s(m3e);LTr=r(U5t,"not"),U5t.forEach(t),yTr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(Yee,"A",{href:!0});var J5t=s(lU);xTr=r(J5t,"from_pretrained()"),J5t.forEach(t),$Tr=r(Yee," to load the model weights."),Yee.forEach(t),kTr=i(JA),T(BM.$$.fragment,JA),JA.forEach(t),STr=i(Ll),kr=n(Ll,"DIV",{class:!0});var yl=s(kr);T(o9.$$.fragment,yl),RTr=i(yl),g3e=n(yl,"P",{});var Y5t=s(g3e);PTr=r(Y5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Y5t.forEach(t),BTr=i(yl),nn=n(yl,"P",{});var YA=s(nn);ITr=r(YA,"The model class to instantiate is selected based on the "),h3e=n(YA,"CODE",{});var K5t=s(h3e);NTr=r(K5t,"model_type"),K5t.forEach(t),qTr=r(YA,` property of the config object (either
passed as an argument or loaded from `),p3e=n(YA,"CODE",{});var Z5t=s(p3e);jTr=r(Z5t,"pretrained_model_name_or_path"),Z5t.forEach(t),DTr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_3e=n(YA,"CODE",{});var e0t=s(_3e);GTr=r(e0t,"pretrained_model_name_or_path"),e0t.forEach(t),OTr=r(YA,":"),YA.forEach(t),VTr=i(yl),oe=n(yl,"UL",{});var ae=s(oe);IM=n(ae,"LI",{});var vBe=s(IM);u3e=n(vBe,"STRONG",{});var o0t=s(u3e);XTr=r(o0t,"albert"),o0t.forEach(t),zTr=r(vBe," \u2014 "),iU=n(vBe,"A",{href:!0});var r0t=s(iU);WTr=r(r0t,"TFAlbertForSequenceClassification"),r0t.forEach(t),QTr=r(vBe," (ALBERT model)"),vBe.forEach(t),HTr=i(ae),NM=n(ae,"LI",{});var FBe=s(NM);b3e=n(FBe,"STRONG",{});var t0t=s(b3e);UTr=r(t0t,"bert"),t0t.forEach(t),JTr=r(FBe," \u2014 "),dU=n(FBe,"A",{href:!0});var a0t=s(dU);YTr=r(a0t,"TFBertForSequenceClassification"),a0t.forEach(t),KTr=r(FBe," (BERT model)"),FBe.forEach(t),ZTr=i(ae),qM=n(ae,"LI",{});var TBe=s(qM);v3e=n(TBe,"STRONG",{});var n0t=s(v3e);e7r=r(n0t,"camembert"),n0t.forEach(t),o7r=r(TBe," \u2014 "),cU=n(TBe,"A",{href:!0});var s0t=s(cU);r7r=r(s0t,"TFCamembertForSequenceClassification"),s0t.forEach(t),t7r=r(TBe," (CamemBERT model)"),TBe.forEach(t),a7r=i(ae),jM=n(ae,"LI",{});var MBe=s(jM);F3e=n(MBe,"STRONG",{});var l0t=s(F3e);n7r=r(l0t,"convbert"),l0t.forEach(t),s7r=r(MBe," \u2014 "),fU=n(MBe,"A",{href:!0});var i0t=s(fU);l7r=r(i0t,"TFConvBertForSequenceClassification"),i0t.forEach(t),i7r=r(MBe," (ConvBERT model)"),MBe.forEach(t),d7r=i(ae),DM=n(ae,"LI",{});var EBe=s(DM);T3e=n(EBe,"STRONG",{});var d0t=s(T3e);c7r=r(d0t,"ctrl"),d0t.forEach(t),f7r=r(EBe," \u2014 "),mU=n(EBe,"A",{href:!0});var c0t=s(mU);m7r=r(c0t,"TFCTRLForSequenceClassification"),c0t.forEach(t),g7r=r(EBe," (CTRL model)"),EBe.forEach(t),h7r=i(ae),GM=n(ae,"LI",{});var CBe=s(GM);M3e=n(CBe,"STRONG",{});var f0t=s(M3e);p7r=r(f0t,"deberta"),f0t.forEach(t),_7r=r(CBe," \u2014 "),gU=n(CBe,"A",{href:!0});var m0t=s(gU);u7r=r(m0t,"TFDebertaForSequenceClassification"),m0t.forEach(t),b7r=r(CBe," (DeBERTa model)"),CBe.forEach(t),v7r=i(ae),OM=n(ae,"LI",{});var wBe=s(OM);E3e=n(wBe,"STRONG",{});var g0t=s(E3e);F7r=r(g0t,"deberta-v2"),g0t.forEach(t),T7r=r(wBe," \u2014 "),hU=n(wBe,"A",{href:!0});var h0t=s(hU);M7r=r(h0t,"TFDebertaV2ForSequenceClassification"),h0t.forEach(t),E7r=r(wBe," (DeBERTa-v2 model)"),wBe.forEach(t),C7r=i(ae),VM=n(ae,"LI",{});var ABe=s(VM);C3e=n(ABe,"STRONG",{});var p0t=s(C3e);w7r=r(p0t,"distilbert"),p0t.forEach(t),A7r=r(ABe," \u2014 "),pU=n(ABe,"A",{href:!0});var _0t=s(pU);L7r=r(_0t,"TFDistilBertForSequenceClassification"),_0t.forEach(t),y7r=r(ABe," (DistilBERT model)"),ABe.forEach(t),x7r=i(ae),XM=n(ae,"LI",{});var LBe=s(XM);w3e=n(LBe,"STRONG",{});var u0t=s(w3e);$7r=r(u0t,"electra"),u0t.forEach(t),k7r=r(LBe," \u2014 "),_U=n(LBe,"A",{href:!0});var b0t=s(_U);S7r=r(b0t,"TFElectraForSequenceClassification"),b0t.forEach(t),R7r=r(LBe," (ELECTRA model)"),LBe.forEach(t),P7r=i(ae),zM=n(ae,"LI",{});var yBe=s(zM);A3e=n(yBe,"STRONG",{});var v0t=s(A3e);B7r=r(v0t,"flaubert"),v0t.forEach(t),I7r=r(yBe," \u2014 "),uU=n(yBe,"A",{href:!0});var F0t=s(uU);N7r=r(F0t,"TFFlaubertForSequenceClassification"),F0t.forEach(t),q7r=r(yBe," (FlauBERT model)"),yBe.forEach(t),j7r=i(ae),WM=n(ae,"LI",{});var xBe=s(WM);L3e=n(xBe,"STRONG",{});var T0t=s(L3e);D7r=r(T0t,"funnel"),T0t.forEach(t),G7r=r(xBe," \u2014 "),bU=n(xBe,"A",{href:!0});var M0t=s(bU);O7r=r(M0t,"TFFunnelForSequenceClassification"),M0t.forEach(t),V7r=r(xBe," (Funnel Transformer model)"),xBe.forEach(t),X7r=i(ae),QM=n(ae,"LI",{});var $Be=s(QM);y3e=n($Be,"STRONG",{});var E0t=s(y3e);z7r=r(E0t,"gpt2"),E0t.forEach(t),W7r=r($Be," \u2014 "),vU=n($Be,"A",{href:!0});var C0t=s(vU);Q7r=r(C0t,"TFGPT2ForSequenceClassification"),C0t.forEach(t),H7r=r($Be," (OpenAI GPT-2 model)"),$Be.forEach(t),U7r=i(ae),HM=n(ae,"LI",{});var kBe=s(HM);x3e=n(kBe,"STRONG",{});var w0t=s(x3e);J7r=r(w0t,"gptj"),w0t.forEach(t),Y7r=r(kBe," \u2014 "),FU=n(kBe,"A",{href:!0});var A0t=s(FU);K7r=r(A0t,"TFGPTJForSequenceClassification"),A0t.forEach(t),Z7r=r(kBe," (GPT-J model)"),kBe.forEach(t),eMr=i(ae),UM=n(ae,"LI",{});var SBe=s(UM);$3e=n(SBe,"STRONG",{});var L0t=s($3e);oMr=r(L0t,"layoutlm"),L0t.forEach(t),rMr=r(SBe," \u2014 "),TU=n(SBe,"A",{href:!0});var y0t=s(TU);tMr=r(y0t,"TFLayoutLMForSequenceClassification"),y0t.forEach(t),aMr=r(SBe," (LayoutLM model)"),SBe.forEach(t),nMr=i(ae),JM=n(ae,"LI",{});var RBe=s(JM);k3e=n(RBe,"STRONG",{});var x0t=s(k3e);sMr=r(x0t,"longformer"),x0t.forEach(t),lMr=r(RBe," \u2014 "),MU=n(RBe,"A",{href:!0});var $0t=s(MU);iMr=r($0t,"TFLongformerForSequenceClassification"),$0t.forEach(t),dMr=r(RBe," (Longformer model)"),RBe.forEach(t),cMr=i(ae),YM=n(ae,"LI",{});var PBe=s(YM);S3e=n(PBe,"STRONG",{});var k0t=s(S3e);fMr=r(k0t,"mobilebert"),k0t.forEach(t),mMr=r(PBe," \u2014 "),EU=n(PBe,"A",{href:!0});var S0t=s(EU);gMr=r(S0t,"TFMobileBertForSequenceClassification"),S0t.forEach(t),hMr=r(PBe," (MobileBERT model)"),PBe.forEach(t),pMr=i(ae),KM=n(ae,"LI",{});var BBe=s(KM);R3e=n(BBe,"STRONG",{});var R0t=s(R3e);_Mr=r(R0t,"mpnet"),R0t.forEach(t),uMr=r(BBe," \u2014 "),CU=n(BBe,"A",{href:!0});var P0t=s(CU);bMr=r(P0t,"TFMPNetForSequenceClassification"),P0t.forEach(t),vMr=r(BBe," (MPNet model)"),BBe.forEach(t),FMr=i(ae),ZM=n(ae,"LI",{});var IBe=s(ZM);P3e=n(IBe,"STRONG",{});var B0t=s(P3e);TMr=r(B0t,"openai-gpt"),B0t.forEach(t),MMr=r(IBe," \u2014 "),wU=n(IBe,"A",{href:!0});var I0t=s(wU);EMr=r(I0t,"TFOpenAIGPTForSequenceClassification"),I0t.forEach(t),CMr=r(IBe," (OpenAI GPT model)"),IBe.forEach(t),wMr=i(ae),eE=n(ae,"LI",{});var NBe=s(eE);B3e=n(NBe,"STRONG",{});var N0t=s(B3e);AMr=r(N0t,"rembert"),N0t.forEach(t),LMr=r(NBe," \u2014 "),AU=n(NBe,"A",{href:!0});var q0t=s(AU);yMr=r(q0t,"TFRemBertForSequenceClassification"),q0t.forEach(t),xMr=r(NBe," (RemBERT model)"),NBe.forEach(t),$Mr=i(ae),oE=n(ae,"LI",{});var qBe=s(oE);I3e=n(qBe,"STRONG",{});var j0t=s(I3e);kMr=r(j0t,"roberta"),j0t.forEach(t),SMr=r(qBe," \u2014 "),LU=n(qBe,"A",{href:!0});var D0t=s(LU);RMr=r(D0t,"TFRobertaForSequenceClassification"),D0t.forEach(t),PMr=r(qBe," (RoBERTa model)"),qBe.forEach(t),BMr=i(ae),rE=n(ae,"LI",{});var jBe=s(rE);N3e=n(jBe,"STRONG",{});var G0t=s(N3e);IMr=r(G0t,"roformer"),G0t.forEach(t),NMr=r(jBe," \u2014 "),yU=n(jBe,"A",{href:!0});var O0t=s(yU);qMr=r(O0t,"TFRoFormerForSequenceClassification"),O0t.forEach(t),jMr=r(jBe," (RoFormer model)"),jBe.forEach(t),DMr=i(ae),tE=n(ae,"LI",{});var DBe=s(tE);q3e=n(DBe,"STRONG",{});var V0t=s(q3e);GMr=r(V0t,"tapas"),V0t.forEach(t),OMr=r(DBe," \u2014 "),xU=n(DBe,"A",{href:!0});var X0t=s(xU);VMr=r(X0t,"TFTapasForSequenceClassification"),X0t.forEach(t),XMr=r(DBe," (TAPAS model)"),DBe.forEach(t),zMr=i(ae),aE=n(ae,"LI",{});var GBe=s(aE);j3e=n(GBe,"STRONG",{});var z0t=s(j3e);WMr=r(z0t,"transfo-xl"),z0t.forEach(t),QMr=r(GBe," \u2014 "),$U=n(GBe,"A",{href:!0});var W0t=s($U);HMr=r(W0t,"TFTransfoXLForSequenceClassification"),W0t.forEach(t),UMr=r(GBe," (Transformer-XL model)"),GBe.forEach(t),JMr=i(ae),nE=n(ae,"LI",{});var OBe=s(nE);D3e=n(OBe,"STRONG",{});var Q0t=s(D3e);YMr=r(Q0t,"xlm"),Q0t.forEach(t),KMr=r(OBe," \u2014 "),kU=n(OBe,"A",{href:!0});var H0t=s(kU);ZMr=r(H0t,"TFXLMForSequenceClassification"),H0t.forEach(t),eEr=r(OBe," (XLM model)"),OBe.forEach(t),oEr=i(ae),sE=n(ae,"LI",{});var VBe=s(sE);G3e=n(VBe,"STRONG",{});var U0t=s(G3e);rEr=r(U0t,"xlm-roberta"),U0t.forEach(t),tEr=r(VBe," \u2014 "),SU=n(VBe,"A",{href:!0});var J0t=s(SU);aEr=r(J0t,"TFXLMRobertaForSequenceClassification"),J0t.forEach(t),nEr=r(VBe," (XLM-RoBERTa model)"),VBe.forEach(t),sEr=i(ae),lE=n(ae,"LI",{});var XBe=s(lE);O3e=n(XBe,"STRONG",{});var Y0t=s(O3e);lEr=r(Y0t,"xlnet"),Y0t.forEach(t),iEr=r(XBe," \u2014 "),RU=n(XBe,"A",{href:!0});var K0t=s(RU);dEr=r(K0t,"TFXLNetForSequenceClassification"),K0t.forEach(t),cEr=r(XBe," (XLNet model)"),XBe.forEach(t),ae.forEach(t),fEr=i(yl),T(iE.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),uDe=i(f),cc=n(f,"H2",{class:!0});var EOe=s(cc);dE=n(EOe,"A",{id:!0,class:!0,href:!0});var Z0t=s(dE);V3e=n(Z0t,"SPAN",{});var ewt=s(V3e);T(r9.$$.fragment,ewt),ewt.forEach(t),Z0t.forEach(t),mEr=i(EOe),X3e=n(EOe,"SPAN",{});var owt=s(X3e);gEr=r(owt,"TFAutoModelForMultipleChoice"),owt.forEach(t),EOe.forEach(t),bDe=i(f),ar=n(f,"DIV",{class:!0});var xl=s(ar);T(t9.$$.fragment,xl),hEr=i(xl),fc=n(xl,"P",{});var Kee=s(fc);pEr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PU=n(Kee,"A",{href:!0});var rwt=s(PU);_Er=r(rwt,"from_pretrained()"),rwt.forEach(t),uEr=r(Kee," class method or the "),BU=n(Kee,"A",{href:!0});var twt=s(BU);bEr=r(twt,"from_config()"),twt.forEach(t),vEr=r(Kee,` class
method.`),Kee.forEach(t),FEr=i(xl),a9=n(xl,"P",{});var COe=s(a9);TEr=r(COe,"This class cannot be instantiated directly using "),z3e=n(COe,"CODE",{});var awt=s(z3e);MEr=r(awt,"__init__()"),awt.forEach(t),EEr=r(COe," (throws an error)."),COe.forEach(t),CEr=i(xl),Pt=n(xl,"DIV",{class:!0});var KA=s(Pt);T(n9.$$.fragment,KA),wEr=i(KA),W3e=n(KA,"P",{});var nwt=s(W3e);AEr=r(nwt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nwt.forEach(t),LEr=i(KA),mc=n(KA,"P",{});var Zee=s(mc);yEr=r(Zee,`Note:
Loading a model from its configuration file does `),Q3e=n(Zee,"STRONG",{});var swt=s(Q3e);xEr=r(swt,"not"),swt.forEach(t),$Er=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=n(Zee,"A",{href:!0});var lwt=s(IU);kEr=r(lwt,"from_pretrained()"),lwt.forEach(t),SEr=r(Zee," to load the model weights."),Zee.forEach(t),REr=i(KA),T(cE.$$.fragment,KA),KA.forEach(t),PEr=i(xl),Sr=n(xl,"DIV",{class:!0});var $l=s(Sr);T(s9.$$.fragment,$l),BEr=i($l),H3e=n($l,"P",{});var iwt=s(H3e);IEr=r(iwt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),iwt.forEach(t),NEr=i($l),sn=n($l,"P",{});var ZA=s(sn);qEr=r(ZA,"The model class to instantiate is selected based on the "),U3e=n(ZA,"CODE",{});var dwt=s(U3e);jEr=r(dwt,"model_type"),dwt.forEach(t),DEr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),J3e=n(ZA,"CODE",{});var cwt=s(J3e);GEr=r(cwt,"pretrained_model_name_or_path"),cwt.forEach(t),OEr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y3e=n(ZA,"CODE",{});var fwt=s(Y3e);VEr=r(fwt,"pretrained_model_name_or_path"),fwt.forEach(t),XEr=r(ZA,":"),ZA.forEach(t),zEr=i($l),pe=n($l,"UL",{});var be=s(pe);fE=n(be,"LI",{});var zBe=s(fE);K3e=n(zBe,"STRONG",{});var mwt=s(K3e);WEr=r(mwt,"albert"),mwt.forEach(t),QEr=r(zBe," \u2014 "),NU=n(zBe,"A",{href:!0});var gwt=s(NU);HEr=r(gwt,"TFAlbertForMultipleChoice"),gwt.forEach(t),UEr=r(zBe," (ALBERT model)"),zBe.forEach(t),JEr=i(be),mE=n(be,"LI",{});var WBe=s(mE);Z3e=n(WBe,"STRONG",{});var hwt=s(Z3e);YEr=r(hwt,"bert"),hwt.forEach(t),KEr=r(WBe," \u2014 "),qU=n(WBe,"A",{href:!0});var pwt=s(qU);ZEr=r(pwt,"TFBertForMultipleChoice"),pwt.forEach(t),eCr=r(WBe," (BERT model)"),WBe.forEach(t),oCr=i(be),gE=n(be,"LI",{});var QBe=s(gE);eFe=n(QBe,"STRONG",{});var _wt=s(eFe);rCr=r(_wt,"camembert"),_wt.forEach(t),tCr=r(QBe," \u2014 "),jU=n(QBe,"A",{href:!0});var uwt=s(jU);aCr=r(uwt,"TFCamembertForMultipleChoice"),uwt.forEach(t),nCr=r(QBe," (CamemBERT model)"),QBe.forEach(t),sCr=i(be),hE=n(be,"LI",{});var HBe=s(hE);oFe=n(HBe,"STRONG",{});var bwt=s(oFe);lCr=r(bwt,"convbert"),bwt.forEach(t),iCr=r(HBe," \u2014 "),DU=n(HBe,"A",{href:!0});var vwt=s(DU);dCr=r(vwt,"TFConvBertForMultipleChoice"),vwt.forEach(t),cCr=r(HBe," (ConvBERT model)"),HBe.forEach(t),fCr=i(be),pE=n(be,"LI",{});var UBe=s(pE);rFe=n(UBe,"STRONG",{});var Fwt=s(rFe);mCr=r(Fwt,"distilbert"),Fwt.forEach(t),gCr=r(UBe," \u2014 "),GU=n(UBe,"A",{href:!0});var Twt=s(GU);hCr=r(Twt,"TFDistilBertForMultipleChoice"),Twt.forEach(t),pCr=r(UBe," (DistilBERT model)"),UBe.forEach(t),_Cr=i(be),_E=n(be,"LI",{});var JBe=s(_E);tFe=n(JBe,"STRONG",{});var Mwt=s(tFe);uCr=r(Mwt,"electra"),Mwt.forEach(t),bCr=r(JBe," \u2014 "),OU=n(JBe,"A",{href:!0});var Ewt=s(OU);vCr=r(Ewt,"TFElectraForMultipleChoice"),Ewt.forEach(t),FCr=r(JBe," (ELECTRA model)"),JBe.forEach(t),TCr=i(be),uE=n(be,"LI",{});var YBe=s(uE);aFe=n(YBe,"STRONG",{});var Cwt=s(aFe);MCr=r(Cwt,"flaubert"),Cwt.forEach(t),ECr=r(YBe," \u2014 "),VU=n(YBe,"A",{href:!0});var wwt=s(VU);CCr=r(wwt,"TFFlaubertForMultipleChoice"),wwt.forEach(t),wCr=r(YBe," (FlauBERT model)"),YBe.forEach(t),ACr=i(be),bE=n(be,"LI",{});var KBe=s(bE);nFe=n(KBe,"STRONG",{});var Awt=s(nFe);LCr=r(Awt,"funnel"),Awt.forEach(t),yCr=r(KBe," \u2014 "),XU=n(KBe,"A",{href:!0});var Lwt=s(XU);xCr=r(Lwt,"TFFunnelForMultipleChoice"),Lwt.forEach(t),$Cr=r(KBe," (Funnel Transformer model)"),KBe.forEach(t),kCr=i(be),vE=n(be,"LI",{});var ZBe=s(vE);sFe=n(ZBe,"STRONG",{});var ywt=s(sFe);SCr=r(ywt,"longformer"),ywt.forEach(t),RCr=r(ZBe," \u2014 "),zU=n(ZBe,"A",{href:!0});var xwt=s(zU);PCr=r(xwt,"TFLongformerForMultipleChoice"),xwt.forEach(t),BCr=r(ZBe," (Longformer model)"),ZBe.forEach(t),ICr=i(be),FE=n(be,"LI",{});var eIe=s(FE);lFe=n(eIe,"STRONG",{});var $wt=s(lFe);NCr=r($wt,"mobilebert"),$wt.forEach(t),qCr=r(eIe," \u2014 "),WU=n(eIe,"A",{href:!0});var kwt=s(WU);jCr=r(kwt,"TFMobileBertForMultipleChoice"),kwt.forEach(t),DCr=r(eIe," (MobileBERT model)"),eIe.forEach(t),GCr=i(be),TE=n(be,"LI",{});var oIe=s(TE);iFe=n(oIe,"STRONG",{});var Swt=s(iFe);OCr=r(Swt,"mpnet"),Swt.forEach(t),VCr=r(oIe," \u2014 "),QU=n(oIe,"A",{href:!0});var Rwt=s(QU);XCr=r(Rwt,"TFMPNetForMultipleChoice"),Rwt.forEach(t),zCr=r(oIe," (MPNet model)"),oIe.forEach(t),WCr=i(be),ME=n(be,"LI",{});var rIe=s(ME);dFe=n(rIe,"STRONG",{});var Pwt=s(dFe);QCr=r(Pwt,"rembert"),Pwt.forEach(t),HCr=r(rIe," \u2014 "),HU=n(rIe,"A",{href:!0});var Bwt=s(HU);UCr=r(Bwt,"TFRemBertForMultipleChoice"),Bwt.forEach(t),JCr=r(rIe," (RemBERT model)"),rIe.forEach(t),YCr=i(be),EE=n(be,"LI",{});var tIe=s(EE);cFe=n(tIe,"STRONG",{});var Iwt=s(cFe);KCr=r(Iwt,"roberta"),Iwt.forEach(t),ZCr=r(tIe," \u2014 "),UU=n(tIe,"A",{href:!0});var Nwt=s(UU);e5r=r(Nwt,"TFRobertaForMultipleChoice"),Nwt.forEach(t),o5r=r(tIe," (RoBERTa model)"),tIe.forEach(t),r5r=i(be),CE=n(be,"LI",{});var aIe=s(CE);fFe=n(aIe,"STRONG",{});var qwt=s(fFe);t5r=r(qwt,"roformer"),qwt.forEach(t),a5r=r(aIe," \u2014 "),JU=n(aIe,"A",{href:!0});var jwt=s(JU);n5r=r(jwt,"TFRoFormerForMultipleChoice"),jwt.forEach(t),s5r=r(aIe," (RoFormer model)"),aIe.forEach(t),l5r=i(be),wE=n(be,"LI",{});var nIe=s(wE);mFe=n(nIe,"STRONG",{});var Dwt=s(mFe);i5r=r(Dwt,"xlm"),Dwt.forEach(t),d5r=r(nIe," \u2014 "),YU=n(nIe,"A",{href:!0});var Gwt=s(YU);c5r=r(Gwt,"TFXLMForMultipleChoice"),Gwt.forEach(t),f5r=r(nIe," (XLM model)"),nIe.forEach(t),m5r=i(be),AE=n(be,"LI",{});var sIe=s(AE);gFe=n(sIe,"STRONG",{});var Owt=s(gFe);g5r=r(Owt,"xlm-roberta"),Owt.forEach(t),h5r=r(sIe," \u2014 "),KU=n(sIe,"A",{href:!0});var Vwt=s(KU);p5r=r(Vwt,"TFXLMRobertaForMultipleChoice"),Vwt.forEach(t),_5r=r(sIe," (XLM-RoBERTa model)"),sIe.forEach(t),u5r=i(be),LE=n(be,"LI",{});var lIe=s(LE);hFe=n(lIe,"STRONG",{});var Xwt=s(hFe);b5r=r(Xwt,"xlnet"),Xwt.forEach(t),v5r=r(lIe," \u2014 "),ZU=n(lIe,"A",{href:!0});var zwt=s(ZU);F5r=r(zwt,"TFXLNetForMultipleChoice"),zwt.forEach(t),T5r=r(lIe," (XLNet model)"),lIe.forEach(t),be.forEach(t),M5r=i($l),T(yE.$$.fragment,$l),$l.forEach(t),xl.forEach(t),vDe=i(f),gc=n(f,"H2",{class:!0});var wOe=s(gc);xE=n(wOe,"A",{id:!0,class:!0,href:!0});var Wwt=s(xE);pFe=n(Wwt,"SPAN",{});var Qwt=s(pFe);T(l9.$$.fragment,Qwt),Qwt.forEach(t),Wwt.forEach(t),E5r=i(wOe),_Fe=n(wOe,"SPAN",{});var Hwt=s(_Fe);C5r=r(Hwt,"TFAutoModelForNextSentencePrediction"),Hwt.forEach(t),wOe.forEach(t),FDe=i(f),nr=n(f,"DIV",{class:!0});var kl=s(nr);T(i9.$$.fragment,kl),w5r=i(kl),hc=n(kl,"P",{});var eoe=s(hc);A5r=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eJ=n(eoe,"A",{href:!0});var Uwt=s(eJ);L5r=r(Uwt,"from_pretrained()"),Uwt.forEach(t),y5r=r(eoe," class method or the "),oJ=n(eoe,"A",{href:!0});var Jwt=s(oJ);x5r=r(Jwt,"from_config()"),Jwt.forEach(t),$5r=r(eoe,` class
method.`),eoe.forEach(t),k5r=i(kl),d9=n(kl,"P",{});var AOe=s(d9);S5r=r(AOe,"This class cannot be instantiated directly using "),uFe=n(AOe,"CODE",{});var Ywt=s(uFe);R5r=r(Ywt,"__init__()"),Ywt.forEach(t),P5r=r(AOe," (throws an error)."),AOe.forEach(t),B5r=i(kl),Bt=n(kl,"DIV",{class:!0});var e6=s(Bt);T(c9.$$.fragment,e6),I5r=i(e6),bFe=n(e6,"P",{});var Kwt=s(bFe);N5r=r(Kwt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Kwt.forEach(t),q5r=i(e6),pc=n(e6,"P",{});var ooe=s(pc);j5r=r(ooe,`Note:
Loading a model from its configuration file does `),vFe=n(ooe,"STRONG",{});var Zwt=s(vFe);D5r=r(Zwt,"not"),Zwt.forEach(t),G5r=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=n(ooe,"A",{href:!0});var eAt=s(rJ);O5r=r(eAt,"from_pretrained()"),eAt.forEach(t),V5r=r(ooe," to load the model weights."),ooe.forEach(t),X5r=i(e6),T($E.$$.fragment,e6),e6.forEach(t),z5r=i(kl),Rr=n(kl,"DIV",{class:!0});var Sl=s(Rr);T(f9.$$.fragment,Sl),W5r=i(Sl),FFe=n(Sl,"P",{});var oAt=s(FFe);Q5r=r(oAt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oAt.forEach(t),H5r=i(Sl),ln=n(Sl,"P",{});var o6=s(ln);U5r=r(o6,"The model class to instantiate is selected based on the "),TFe=n(o6,"CODE",{});var rAt=s(TFe);J5r=r(rAt,"model_type"),rAt.forEach(t),Y5r=r(o6,` property of the config object (either
passed as an argument or loaded from `),MFe=n(o6,"CODE",{});var tAt=s(MFe);K5r=r(tAt,"pretrained_model_name_or_path"),tAt.forEach(t),Z5r=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=n(o6,"CODE",{});var aAt=s(EFe);e0r=r(aAt,"pretrained_model_name_or_path"),aAt.forEach(t),o0r=r(o6,":"),o6.forEach(t),r0r=i(Sl),m9=n(Sl,"UL",{});var LOe=s(m9);kE=n(LOe,"LI",{});var iIe=s(kE);CFe=n(iIe,"STRONG",{});var nAt=s(CFe);t0r=r(nAt,"bert"),nAt.forEach(t),a0r=r(iIe," \u2014 "),tJ=n(iIe,"A",{href:!0});var sAt=s(tJ);n0r=r(sAt,"TFBertForNextSentencePrediction"),sAt.forEach(t),s0r=r(iIe," (BERT model)"),iIe.forEach(t),l0r=i(LOe),SE=n(LOe,"LI",{});var dIe=s(SE);wFe=n(dIe,"STRONG",{});var lAt=s(wFe);i0r=r(lAt,"mobilebert"),lAt.forEach(t),d0r=r(dIe," \u2014 "),aJ=n(dIe,"A",{href:!0});var iAt=s(aJ);c0r=r(iAt,"TFMobileBertForNextSentencePrediction"),iAt.forEach(t),f0r=r(dIe," (MobileBERT model)"),dIe.forEach(t),LOe.forEach(t),m0r=i(Sl),T(RE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),TDe=i(f),_c=n(f,"H2",{class:!0});var yOe=s(_c);PE=n(yOe,"A",{id:!0,class:!0,href:!0});var dAt=s(PE);AFe=n(dAt,"SPAN",{});var cAt=s(AFe);T(g9.$$.fragment,cAt),cAt.forEach(t),dAt.forEach(t),g0r=i(yOe),LFe=n(yOe,"SPAN",{});var fAt=s(LFe);h0r=r(fAt,"TFAutoModelForTableQuestionAnswering"),fAt.forEach(t),yOe.forEach(t),MDe=i(f),sr=n(f,"DIV",{class:!0});var Rl=s(sr);T(h9.$$.fragment,Rl),p0r=i(Rl),uc=n(Rl,"P",{});var roe=s(uc);_0r=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nJ=n(roe,"A",{href:!0});var mAt=s(nJ);u0r=r(mAt,"from_pretrained()"),mAt.forEach(t),b0r=r(roe," class method or the "),sJ=n(roe,"A",{href:!0});var gAt=s(sJ);v0r=r(gAt,"from_config()"),gAt.forEach(t),F0r=r(roe,` class
method.`),roe.forEach(t),T0r=i(Rl),p9=n(Rl,"P",{});var xOe=s(p9);M0r=r(xOe,"This class cannot be instantiated directly using "),yFe=n(xOe,"CODE",{});var hAt=s(yFe);E0r=r(hAt,"__init__()"),hAt.forEach(t),C0r=r(xOe," (throws an error)."),xOe.forEach(t),w0r=i(Rl),It=n(Rl,"DIV",{class:!0});var r6=s(It);T(_9.$$.fragment,r6),A0r=i(r6),xFe=n(r6,"P",{});var pAt=s(xFe);L0r=r(pAt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pAt.forEach(t),y0r=i(r6),bc=n(r6,"P",{});var toe=s(bc);x0r=r(toe,`Note:
Loading a model from its configuration file does `),$Fe=n(toe,"STRONG",{});var _At=s($Fe);$0r=r(_At,"not"),_At.forEach(t),k0r=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=n(toe,"A",{href:!0});var uAt=s(lJ);S0r=r(uAt,"from_pretrained()"),uAt.forEach(t),R0r=r(toe," to load the model weights."),toe.forEach(t),P0r=i(r6),T(BE.$$.fragment,r6),r6.forEach(t),B0r=i(Rl),Pr=n(Rl,"DIV",{class:!0});var Pl=s(Pr);T(u9.$$.fragment,Pl),I0r=i(Pl),kFe=n(Pl,"P",{});var bAt=s(kFe);N0r=r(bAt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bAt.forEach(t),q0r=i(Pl),dn=n(Pl,"P",{});var t6=s(dn);j0r=r(t6,"The model class to instantiate is selected based on the "),SFe=n(t6,"CODE",{});var vAt=s(SFe);D0r=r(vAt,"model_type"),vAt.forEach(t),G0r=r(t6,` property of the config object (either
passed as an argument or loaded from `),RFe=n(t6,"CODE",{});var FAt=s(RFe);O0r=r(FAt,"pretrained_model_name_or_path"),FAt.forEach(t),V0r=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(t6,"CODE",{});var TAt=s(PFe);X0r=r(TAt,"pretrained_model_name_or_path"),TAt.forEach(t),z0r=r(t6,":"),t6.forEach(t),W0r=i(Pl),BFe=n(Pl,"UL",{});var MAt=s(BFe);IE=n(MAt,"LI",{});var cIe=s(IE);IFe=n(cIe,"STRONG",{});var EAt=s(IFe);Q0r=r(EAt,"tapas"),EAt.forEach(t),H0r=r(cIe," \u2014 "),iJ=n(cIe,"A",{href:!0});var CAt=s(iJ);U0r=r(CAt,"TFTapasForQuestionAnswering"),CAt.forEach(t),J0r=r(cIe," (TAPAS model)"),cIe.forEach(t),MAt.forEach(t),Y0r=i(Pl),T(NE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),EDe=i(f),vc=n(f,"H2",{class:!0});var $Oe=s(vc);qE=n($Oe,"A",{id:!0,class:!0,href:!0});var wAt=s(qE);NFe=n(wAt,"SPAN",{});var AAt=s(NFe);T(b9.$$.fragment,AAt),AAt.forEach(t),wAt.forEach(t),K0r=i($Oe),qFe=n($Oe,"SPAN",{});var LAt=s(qFe);Z0r=r(LAt,"TFAutoModelForTokenClassification"),LAt.forEach(t),$Oe.forEach(t),CDe=i(f),lr=n(f,"DIV",{class:!0});var Bl=s(lr);T(v9.$$.fragment,Bl),ewr=i(Bl),Fc=n(Bl,"P",{});var aoe=s(Fc);owr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dJ=n(aoe,"A",{href:!0});var yAt=s(dJ);rwr=r(yAt,"from_pretrained()"),yAt.forEach(t),twr=r(aoe," class method or the "),cJ=n(aoe,"A",{href:!0});var xAt=s(cJ);awr=r(xAt,"from_config()"),xAt.forEach(t),nwr=r(aoe,` class
method.`),aoe.forEach(t),swr=i(Bl),F9=n(Bl,"P",{});var kOe=s(F9);lwr=r(kOe,"This class cannot be instantiated directly using "),jFe=n(kOe,"CODE",{});var $At=s(jFe);iwr=r($At,"__init__()"),$At.forEach(t),dwr=r(kOe," (throws an error)."),kOe.forEach(t),cwr=i(Bl),Nt=n(Bl,"DIV",{class:!0});var a6=s(Nt);T(T9.$$.fragment,a6),fwr=i(a6),DFe=n(a6,"P",{});var kAt=s(DFe);mwr=r(kAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kAt.forEach(t),gwr=i(a6),Tc=n(a6,"P",{});var noe=s(Tc);hwr=r(noe,`Note:
Loading a model from its configuration file does `),GFe=n(noe,"STRONG",{});var SAt=s(GFe);pwr=r(SAt,"not"),SAt.forEach(t),_wr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(noe,"A",{href:!0});var RAt=s(fJ);uwr=r(RAt,"from_pretrained()"),RAt.forEach(t),bwr=r(noe," to load the model weights."),noe.forEach(t),vwr=i(a6),T(jE.$$.fragment,a6),a6.forEach(t),Fwr=i(Bl),Br=n(Bl,"DIV",{class:!0});var Il=s(Br);T(M9.$$.fragment,Il),Twr=i(Il),OFe=n(Il,"P",{});var PAt=s(OFe);Mwr=r(PAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),PAt.forEach(t),Ewr=i(Il),cn=n(Il,"P",{});var n6=s(cn);Cwr=r(n6,"The model class to instantiate is selected based on the "),VFe=n(n6,"CODE",{});var BAt=s(VFe);wwr=r(BAt,"model_type"),BAt.forEach(t),Awr=r(n6,` property of the config object (either
passed as an argument or loaded from `),XFe=n(n6,"CODE",{});var IAt=s(XFe);Lwr=r(IAt,"pretrained_model_name_or_path"),IAt.forEach(t),ywr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=n(n6,"CODE",{});var NAt=s(zFe);xwr=r(NAt,"pretrained_model_name_or_path"),NAt.forEach(t),$wr=r(n6,":"),n6.forEach(t),kwr=i(Il),de=n(Il,"UL",{});var me=s(de);DE=n(me,"LI",{});var fIe=s(DE);WFe=n(fIe,"STRONG",{});var qAt=s(WFe);Swr=r(qAt,"albert"),qAt.forEach(t),Rwr=r(fIe," \u2014 "),mJ=n(fIe,"A",{href:!0});var jAt=s(mJ);Pwr=r(jAt,"TFAlbertForTokenClassification"),jAt.forEach(t),Bwr=r(fIe," (ALBERT model)"),fIe.forEach(t),Iwr=i(me),GE=n(me,"LI",{});var mIe=s(GE);QFe=n(mIe,"STRONG",{});var DAt=s(QFe);Nwr=r(DAt,"bert"),DAt.forEach(t),qwr=r(mIe," \u2014 "),gJ=n(mIe,"A",{href:!0});var GAt=s(gJ);jwr=r(GAt,"TFBertForTokenClassification"),GAt.forEach(t),Dwr=r(mIe," (BERT model)"),mIe.forEach(t),Gwr=i(me),OE=n(me,"LI",{});var gIe=s(OE);HFe=n(gIe,"STRONG",{});var OAt=s(HFe);Owr=r(OAt,"camembert"),OAt.forEach(t),Vwr=r(gIe," \u2014 "),hJ=n(gIe,"A",{href:!0});var VAt=s(hJ);Xwr=r(VAt,"TFCamembertForTokenClassification"),VAt.forEach(t),zwr=r(gIe," (CamemBERT model)"),gIe.forEach(t),Wwr=i(me),VE=n(me,"LI",{});var hIe=s(VE);UFe=n(hIe,"STRONG",{});var XAt=s(UFe);Qwr=r(XAt,"convbert"),XAt.forEach(t),Hwr=r(hIe," \u2014 "),pJ=n(hIe,"A",{href:!0});var zAt=s(pJ);Uwr=r(zAt,"TFConvBertForTokenClassification"),zAt.forEach(t),Jwr=r(hIe," (ConvBERT model)"),hIe.forEach(t),Ywr=i(me),XE=n(me,"LI",{});var pIe=s(XE);JFe=n(pIe,"STRONG",{});var WAt=s(JFe);Kwr=r(WAt,"deberta"),WAt.forEach(t),Zwr=r(pIe," \u2014 "),_J=n(pIe,"A",{href:!0});var QAt=s(_J);eAr=r(QAt,"TFDebertaForTokenClassification"),QAt.forEach(t),oAr=r(pIe," (DeBERTa model)"),pIe.forEach(t),rAr=i(me),zE=n(me,"LI",{});var _Ie=s(zE);YFe=n(_Ie,"STRONG",{});var HAt=s(YFe);tAr=r(HAt,"deberta-v2"),HAt.forEach(t),aAr=r(_Ie," \u2014 "),uJ=n(_Ie,"A",{href:!0});var UAt=s(uJ);nAr=r(UAt,"TFDebertaV2ForTokenClassification"),UAt.forEach(t),sAr=r(_Ie," (DeBERTa-v2 model)"),_Ie.forEach(t),lAr=i(me),WE=n(me,"LI",{});var uIe=s(WE);KFe=n(uIe,"STRONG",{});var JAt=s(KFe);iAr=r(JAt,"distilbert"),JAt.forEach(t),dAr=r(uIe," \u2014 "),bJ=n(uIe,"A",{href:!0});var YAt=s(bJ);cAr=r(YAt,"TFDistilBertForTokenClassification"),YAt.forEach(t),fAr=r(uIe," (DistilBERT model)"),uIe.forEach(t),mAr=i(me),QE=n(me,"LI",{});var bIe=s(QE);ZFe=n(bIe,"STRONG",{});var KAt=s(ZFe);gAr=r(KAt,"electra"),KAt.forEach(t),hAr=r(bIe," \u2014 "),vJ=n(bIe,"A",{href:!0});var ZAt=s(vJ);pAr=r(ZAt,"TFElectraForTokenClassification"),ZAt.forEach(t),_Ar=r(bIe," (ELECTRA model)"),bIe.forEach(t),uAr=i(me),HE=n(me,"LI",{});var vIe=s(HE);eTe=n(vIe,"STRONG",{});var e6t=s(eTe);bAr=r(e6t,"flaubert"),e6t.forEach(t),vAr=r(vIe," \u2014 "),FJ=n(vIe,"A",{href:!0});var o6t=s(FJ);FAr=r(o6t,"TFFlaubertForTokenClassification"),o6t.forEach(t),TAr=r(vIe," (FlauBERT model)"),vIe.forEach(t),MAr=i(me),UE=n(me,"LI",{});var FIe=s(UE);oTe=n(FIe,"STRONG",{});var r6t=s(oTe);EAr=r(r6t,"funnel"),r6t.forEach(t),CAr=r(FIe," \u2014 "),TJ=n(FIe,"A",{href:!0});var t6t=s(TJ);wAr=r(t6t,"TFFunnelForTokenClassification"),t6t.forEach(t),AAr=r(FIe," (Funnel Transformer model)"),FIe.forEach(t),LAr=i(me),JE=n(me,"LI",{});var TIe=s(JE);rTe=n(TIe,"STRONG",{});var a6t=s(rTe);yAr=r(a6t,"layoutlm"),a6t.forEach(t),xAr=r(TIe," \u2014 "),MJ=n(TIe,"A",{href:!0});var n6t=s(MJ);$Ar=r(n6t,"TFLayoutLMForTokenClassification"),n6t.forEach(t),kAr=r(TIe," (LayoutLM model)"),TIe.forEach(t),SAr=i(me),YE=n(me,"LI",{});var MIe=s(YE);tTe=n(MIe,"STRONG",{});var s6t=s(tTe);RAr=r(s6t,"longformer"),s6t.forEach(t),PAr=r(MIe," \u2014 "),EJ=n(MIe,"A",{href:!0});var l6t=s(EJ);BAr=r(l6t,"TFLongformerForTokenClassification"),l6t.forEach(t),IAr=r(MIe," (Longformer model)"),MIe.forEach(t),NAr=i(me),KE=n(me,"LI",{});var EIe=s(KE);aTe=n(EIe,"STRONG",{});var i6t=s(aTe);qAr=r(i6t,"mobilebert"),i6t.forEach(t),jAr=r(EIe," \u2014 "),CJ=n(EIe,"A",{href:!0});var d6t=s(CJ);DAr=r(d6t,"TFMobileBertForTokenClassification"),d6t.forEach(t),GAr=r(EIe," (MobileBERT model)"),EIe.forEach(t),OAr=i(me),ZE=n(me,"LI",{});var CIe=s(ZE);nTe=n(CIe,"STRONG",{});var c6t=s(nTe);VAr=r(c6t,"mpnet"),c6t.forEach(t),XAr=r(CIe," \u2014 "),wJ=n(CIe,"A",{href:!0});var f6t=s(wJ);zAr=r(f6t,"TFMPNetForTokenClassification"),f6t.forEach(t),WAr=r(CIe," (MPNet model)"),CIe.forEach(t),QAr=i(me),eC=n(me,"LI",{});var wIe=s(eC);sTe=n(wIe,"STRONG",{});var m6t=s(sTe);HAr=r(m6t,"rembert"),m6t.forEach(t),UAr=r(wIe," \u2014 "),AJ=n(wIe,"A",{href:!0});var g6t=s(AJ);JAr=r(g6t,"TFRemBertForTokenClassification"),g6t.forEach(t),YAr=r(wIe," (RemBERT model)"),wIe.forEach(t),KAr=i(me),oC=n(me,"LI",{});var AIe=s(oC);lTe=n(AIe,"STRONG",{});var h6t=s(lTe);ZAr=r(h6t,"roberta"),h6t.forEach(t),e6r=r(AIe," \u2014 "),LJ=n(AIe,"A",{href:!0});var p6t=s(LJ);o6r=r(p6t,"TFRobertaForTokenClassification"),p6t.forEach(t),r6r=r(AIe," (RoBERTa model)"),AIe.forEach(t),t6r=i(me),rC=n(me,"LI",{});var LIe=s(rC);iTe=n(LIe,"STRONG",{});var _6t=s(iTe);a6r=r(_6t,"roformer"),_6t.forEach(t),n6r=r(LIe," \u2014 "),yJ=n(LIe,"A",{href:!0});var u6t=s(yJ);s6r=r(u6t,"TFRoFormerForTokenClassification"),u6t.forEach(t),l6r=r(LIe," (RoFormer model)"),LIe.forEach(t),i6r=i(me),tC=n(me,"LI",{});var yIe=s(tC);dTe=n(yIe,"STRONG",{});var b6t=s(dTe);d6r=r(b6t,"xlm"),b6t.forEach(t),c6r=r(yIe," \u2014 "),xJ=n(yIe,"A",{href:!0});var v6t=s(xJ);f6r=r(v6t,"TFXLMForTokenClassification"),v6t.forEach(t),m6r=r(yIe," (XLM model)"),yIe.forEach(t),g6r=i(me),aC=n(me,"LI",{});var xIe=s(aC);cTe=n(xIe,"STRONG",{});var F6t=s(cTe);h6r=r(F6t,"xlm-roberta"),F6t.forEach(t),p6r=r(xIe," \u2014 "),$J=n(xIe,"A",{href:!0});var T6t=s($J);_6r=r(T6t,"TFXLMRobertaForTokenClassification"),T6t.forEach(t),u6r=r(xIe," (XLM-RoBERTa model)"),xIe.forEach(t),b6r=i(me),nC=n(me,"LI",{});var $Ie=s(nC);fTe=n($Ie,"STRONG",{});var M6t=s(fTe);v6r=r(M6t,"xlnet"),M6t.forEach(t),F6r=r($Ie," \u2014 "),kJ=n($Ie,"A",{href:!0});var E6t=s(kJ);T6r=r(E6t,"TFXLNetForTokenClassification"),E6t.forEach(t),M6r=r($Ie," (XLNet model)"),$Ie.forEach(t),me.forEach(t),E6r=i(Il),T(sC.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),wDe=i(f),Mc=n(f,"H2",{class:!0});var SOe=s(Mc);lC=n(SOe,"A",{id:!0,class:!0,href:!0});var C6t=s(lC);mTe=n(C6t,"SPAN",{});var w6t=s(mTe);T(E9.$$.fragment,w6t),w6t.forEach(t),C6t.forEach(t),C6r=i(SOe),gTe=n(SOe,"SPAN",{});var A6t=s(gTe);w6r=r(A6t,"TFAutoModelForQuestionAnswering"),A6t.forEach(t),SOe.forEach(t),ADe=i(f),ir=n(f,"DIV",{class:!0});var Nl=s(ir);T(C9.$$.fragment,Nl),A6r=i(Nl),Ec=n(Nl,"P",{});var soe=s(Ec);L6r=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SJ=n(soe,"A",{href:!0});var L6t=s(SJ);y6r=r(L6t,"from_pretrained()"),L6t.forEach(t),x6r=r(soe," class method or the "),RJ=n(soe,"A",{href:!0});var y6t=s(RJ);$6r=r(y6t,"from_config()"),y6t.forEach(t),k6r=r(soe,` class
method.`),soe.forEach(t),S6r=i(Nl),w9=n(Nl,"P",{});var ROe=s(w9);R6r=r(ROe,"This class cannot be instantiated directly using "),hTe=n(ROe,"CODE",{});var x6t=s(hTe);P6r=r(x6t,"__init__()"),x6t.forEach(t),B6r=r(ROe," (throws an error)."),ROe.forEach(t),I6r=i(Nl),qt=n(Nl,"DIV",{class:!0});var s6=s(qt);T(A9.$$.fragment,s6),N6r=i(s6),pTe=n(s6,"P",{});var $6t=s(pTe);q6r=r($6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$6t.forEach(t),j6r=i(s6),Cc=n(s6,"P",{});var loe=s(Cc);D6r=r(loe,`Note:
Loading a model from its configuration file does `),_Te=n(loe,"STRONG",{});var k6t=s(_Te);G6r=r(k6t,"not"),k6t.forEach(t),O6r=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=n(loe,"A",{href:!0});var S6t=s(PJ);V6r=r(S6t,"from_pretrained()"),S6t.forEach(t),X6r=r(loe," to load the model weights."),loe.forEach(t),z6r=i(s6),T(iC.$$.fragment,s6),s6.forEach(t),W6r=i(Nl),Ir=n(Nl,"DIV",{class:!0});var ql=s(Ir);T(L9.$$.fragment,ql),Q6r=i(ql),uTe=n(ql,"P",{});var R6t=s(uTe);H6r=r(R6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),R6t.forEach(t),U6r=i(ql),fn=n(ql,"P",{});var l6=s(fn);J6r=r(l6,"The model class to instantiate is selected based on the "),bTe=n(l6,"CODE",{});var P6t=s(bTe);Y6r=r(P6t,"model_type"),P6t.forEach(t),K6r=r(l6,` property of the config object (either
passed as an argument or loaded from `),vTe=n(l6,"CODE",{});var B6t=s(vTe);Z6r=r(B6t,"pretrained_model_name_or_path"),B6t.forEach(t),eLr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=n(l6,"CODE",{});var I6t=s(FTe);oLr=r(I6t,"pretrained_model_name_or_path"),I6t.forEach(t),rLr=r(l6,":"),l6.forEach(t),tLr=i(ql),ce=n(ql,"UL",{});var ge=s(ce);dC=n(ge,"LI",{});var kIe=s(dC);TTe=n(kIe,"STRONG",{});var N6t=s(TTe);aLr=r(N6t,"albert"),N6t.forEach(t),nLr=r(kIe," \u2014 "),BJ=n(kIe,"A",{href:!0});var q6t=s(BJ);sLr=r(q6t,"TFAlbertForQuestionAnswering"),q6t.forEach(t),lLr=r(kIe," (ALBERT model)"),kIe.forEach(t),iLr=i(ge),cC=n(ge,"LI",{});var SIe=s(cC);MTe=n(SIe,"STRONG",{});var j6t=s(MTe);dLr=r(j6t,"bert"),j6t.forEach(t),cLr=r(SIe," \u2014 "),IJ=n(SIe,"A",{href:!0});var D6t=s(IJ);fLr=r(D6t,"TFBertForQuestionAnswering"),D6t.forEach(t),mLr=r(SIe," (BERT model)"),SIe.forEach(t),gLr=i(ge),fC=n(ge,"LI",{});var RIe=s(fC);ETe=n(RIe,"STRONG",{});var G6t=s(ETe);hLr=r(G6t,"camembert"),G6t.forEach(t),pLr=r(RIe," \u2014 "),NJ=n(RIe,"A",{href:!0});var O6t=s(NJ);_Lr=r(O6t,"TFCamembertForQuestionAnswering"),O6t.forEach(t),uLr=r(RIe," (CamemBERT model)"),RIe.forEach(t),bLr=i(ge),mC=n(ge,"LI",{});var PIe=s(mC);CTe=n(PIe,"STRONG",{});var V6t=s(CTe);vLr=r(V6t,"convbert"),V6t.forEach(t),FLr=r(PIe," \u2014 "),qJ=n(PIe,"A",{href:!0});var X6t=s(qJ);TLr=r(X6t,"TFConvBertForQuestionAnswering"),X6t.forEach(t),MLr=r(PIe," (ConvBERT model)"),PIe.forEach(t),ELr=i(ge),gC=n(ge,"LI",{});var BIe=s(gC);wTe=n(BIe,"STRONG",{});var z6t=s(wTe);CLr=r(z6t,"deberta"),z6t.forEach(t),wLr=r(BIe," \u2014 "),jJ=n(BIe,"A",{href:!0});var W6t=s(jJ);ALr=r(W6t,"TFDebertaForQuestionAnswering"),W6t.forEach(t),LLr=r(BIe," (DeBERTa model)"),BIe.forEach(t),yLr=i(ge),hC=n(ge,"LI",{});var IIe=s(hC);ATe=n(IIe,"STRONG",{});var Q6t=s(ATe);xLr=r(Q6t,"deberta-v2"),Q6t.forEach(t),$Lr=r(IIe," \u2014 "),DJ=n(IIe,"A",{href:!0});var H6t=s(DJ);kLr=r(H6t,"TFDebertaV2ForQuestionAnswering"),H6t.forEach(t),SLr=r(IIe," (DeBERTa-v2 model)"),IIe.forEach(t),RLr=i(ge),pC=n(ge,"LI",{});var NIe=s(pC);LTe=n(NIe,"STRONG",{});var U6t=s(LTe);PLr=r(U6t,"distilbert"),U6t.forEach(t),BLr=r(NIe," \u2014 "),GJ=n(NIe,"A",{href:!0});var J6t=s(GJ);ILr=r(J6t,"TFDistilBertForQuestionAnswering"),J6t.forEach(t),NLr=r(NIe," (DistilBERT model)"),NIe.forEach(t),qLr=i(ge),_C=n(ge,"LI",{});var qIe=s(_C);yTe=n(qIe,"STRONG",{});var Y6t=s(yTe);jLr=r(Y6t,"electra"),Y6t.forEach(t),DLr=r(qIe," \u2014 "),OJ=n(qIe,"A",{href:!0});var K6t=s(OJ);GLr=r(K6t,"TFElectraForQuestionAnswering"),K6t.forEach(t),OLr=r(qIe," (ELECTRA model)"),qIe.forEach(t),VLr=i(ge),uC=n(ge,"LI",{});var jIe=s(uC);xTe=n(jIe,"STRONG",{});var Z6t=s(xTe);XLr=r(Z6t,"flaubert"),Z6t.forEach(t),zLr=r(jIe," \u2014 "),VJ=n(jIe,"A",{href:!0});var eLt=s(VJ);WLr=r(eLt,"TFFlaubertForQuestionAnsweringSimple"),eLt.forEach(t),QLr=r(jIe," (FlauBERT model)"),jIe.forEach(t),HLr=i(ge),bC=n(ge,"LI",{});var DIe=s(bC);$Te=n(DIe,"STRONG",{});var oLt=s($Te);ULr=r(oLt,"funnel"),oLt.forEach(t),JLr=r(DIe," \u2014 "),XJ=n(DIe,"A",{href:!0});var rLt=s(XJ);YLr=r(rLt,"TFFunnelForQuestionAnswering"),rLt.forEach(t),KLr=r(DIe," (Funnel Transformer model)"),DIe.forEach(t),ZLr=i(ge),vC=n(ge,"LI",{});var GIe=s(vC);kTe=n(GIe,"STRONG",{});var tLt=s(kTe);eyr=r(tLt,"gptj"),tLt.forEach(t),oyr=r(GIe," \u2014 "),zJ=n(GIe,"A",{href:!0});var aLt=s(zJ);ryr=r(aLt,"TFGPTJForQuestionAnswering"),aLt.forEach(t),tyr=r(GIe," (GPT-J model)"),GIe.forEach(t),ayr=i(ge),FC=n(ge,"LI",{});var OIe=s(FC);STe=n(OIe,"STRONG",{});var nLt=s(STe);nyr=r(nLt,"longformer"),nLt.forEach(t),syr=r(OIe," \u2014 "),WJ=n(OIe,"A",{href:!0});var sLt=s(WJ);lyr=r(sLt,"TFLongformerForQuestionAnswering"),sLt.forEach(t),iyr=r(OIe," (Longformer model)"),OIe.forEach(t),dyr=i(ge),TC=n(ge,"LI",{});var VIe=s(TC);RTe=n(VIe,"STRONG",{});var lLt=s(RTe);cyr=r(lLt,"mobilebert"),lLt.forEach(t),fyr=r(VIe," \u2014 "),QJ=n(VIe,"A",{href:!0});var iLt=s(QJ);myr=r(iLt,"TFMobileBertForQuestionAnswering"),iLt.forEach(t),gyr=r(VIe," (MobileBERT model)"),VIe.forEach(t),hyr=i(ge),MC=n(ge,"LI",{});var XIe=s(MC);PTe=n(XIe,"STRONG",{});var dLt=s(PTe);pyr=r(dLt,"mpnet"),dLt.forEach(t),_yr=r(XIe," \u2014 "),HJ=n(XIe,"A",{href:!0});var cLt=s(HJ);uyr=r(cLt,"TFMPNetForQuestionAnswering"),cLt.forEach(t),byr=r(XIe," (MPNet model)"),XIe.forEach(t),vyr=i(ge),EC=n(ge,"LI",{});var zIe=s(EC);BTe=n(zIe,"STRONG",{});var fLt=s(BTe);Fyr=r(fLt,"rembert"),fLt.forEach(t),Tyr=r(zIe," \u2014 "),UJ=n(zIe,"A",{href:!0});var mLt=s(UJ);Myr=r(mLt,"TFRemBertForQuestionAnswering"),mLt.forEach(t),Eyr=r(zIe," (RemBERT model)"),zIe.forEach(t),Cyr=i(ge),CC=n(ge,"LI",{});var WIe=s(CC);ITe=n(WIe,"STRONG",{});var gLt=s(ITe);wyr=r(gLt,"roberta"),gLt.forEach(t),Ayr=r(WIe," \u2014 "),JJ=n(WIe,"A",{href:!0});var hLt=s(JJ);Lyr=r(hLt,"TFRobertaForQuestionAnswering"),hLt.forEach(t),yyr=r(WIe," (RoBERTa model)"),WIe.forEach(t),xyr=i(ge),wC=n(ge,"LI",{});var QIe=s(wC);NTe=n(QIe,"STRONG",{});var pLt=s(NTe);$yr=r(pLt,"roformer"),pLt.forEach(t),kyr=r(QIe," \u2014 "),YJ=n(QIe,"A",{href:!0});var _Lt=s(YJ);Syr=r(_Lt,"TFRoFormerForQuestionAnswering"),_Lt.forEach(t),Ryr=r(QIe," (RoFormer model)"),QIe.forEach(t),Pyr=i(ge),AC=n(ge,"LI",{});var HIe=s(AC);qTe=n(HIe,"STRONG",{});var uLt=s(qTe);Byr=r(uLt,"xlm"),uLt.forEach(t),Iyr=r(HIe," \u2014 "),KJ=n(HIe,"A",{href:!0});var bLt=s(KJ);Nyr=r(bLt,"TFXLMForQuestionAnsweringSimple"),bLt.forEach(t),qyr=r(HIe," (XLM model)"),HIe.forEach(t),jyr=i(ge),LC=n(ge,"LI",{});var UIe=s(LC);jTe=n(UIe,"STRONG",{});var vLt=s(jTe);Dyr=r(vLt,"xlm-roberta"),vLt.forEach(t),Gyr=r(UIe," \u2014 "),ZJ=n(UIe,"A",{href:!0});var FLt=s(ZJ);Oyr=r(FLt,"TFXLMRobertaForQuestionAnswering"),FLt.forEach(t),Vyr=r(UIe," (XLM-RoBERTa model)"),UIe.forEach(t),Xyr=i(ge),yC=n(ge,"LI",{});var JIe=s(yC);DTe=n(JIe,"STRONG",{});var TLt=s(DTe);zyr=r(TLt,"xlnet"),TLt.forEach(t),Wyr=r(JIe," \u2014 "),eY=n(JIe,"A",{href:!0});var MLt=s(eY);Qyr=r(MLt,"TFXLNetForQuestionAnsweringSimple"),MLt.forEach(t),Hyr=r(JIe," (XLNet model)"),JIe.forEach(t),ge.forEach(t),Uyr=i(ql),T(xC.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),LDe=i(f),wc=n(f,"H2",{class:!0});var POe=s(wc);$C=n(POe,"A",{id:!0,class:!0,href:!0});var ELt=s($C);GTe=n(ELt,"SPAN",{});var CLt=s(GTe);T(y9.$$.fragment,CLt),CLt.forEach(t),ELt.forEach(t),Jyr=i(POe),OTe=n(POe,"SPAN",{});var wLt=s(OTe);Yyr=r(wLt,"TFAutoModelForVision2Seq"),wLt.forEach(t),POe.forEach(t),yDe=i(f),dr=n(f,"DIV",{class:!0});var jl=s(dr);T(x9.$$.fragment,jl),Kyr=i(jl),Ac=n(jl,"P",{});var ioe=s(Ac);Zyr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oY=n(ioe,"A",{href:!0});var ALt=s(oY);e8r=r(ALt,"from_pretrained()"),ALt.forEach(t),o8r=r(ioe," class method or the "),rY=n(ioe,"A",{href:!0});var LLt=s(rY);r8r=r(LLt,"from_config()"),LLt.forEach(t),t8r=r(ioe,` class
method.`),ioe.forEach(t),a8r=i(jl),$9=n(jl,"P",{});var BOe=s($9);n8r=r(BOe,"This class cannot be instantiated directly using "),VTe=n(BOe,"CODE",{});var yLt=s(VTe);s8r=r(yLt,"__init__()"),yLt.forEach(t),l8r=r(BOe," (throws an error)."),BOe.forEach(t),i8r=i(jl),jt=n(jl,"DIV",{class:!0});var i6=s(jt);T(k9.$$.fragment,i6),d8r=i(i6),XTe=n(i6,"P",{});var xLt=s(XTe);c8r=r(xLt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xLt.forEach(t),f8r=i(i6),Lc=n(i6,"P",{});var doe=s(Lc);m8r=r(doe,`Note:
Loading a model from its configuration file does `),zTe=n(doe,"STRONG",{});var $Lt=s(zTe);g8r=r($Lt,"not"),$Lt.forEach(t),h8r=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=n(doe,"A",{href:!0});var kLt=s(tY);p8r=r(kLt,"from_pretrained()"),kLt.forEach(t),_8r=r(doe," to load the model weights."),doe.forEach(t),u8r=i(i6),T(kC.$$.fragment,i6),i6.forEach(t),b8r=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(S9.$$.fragment,Dl),v8r=i(Dl),WTe=n(Dl,"P",{});var SLt=s(WTe);F8r=r(SLt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),SLt.forEach(t),T8r=i(Dl),mn=n(Dl,"P",{});var d6=s(mn);M8r=r(d6,"The model class to instantiate is selected based on the "),QTe=n(d6,"CODE",{});var RLt=s(QTe);E8r=r(RLt,"model_type"),RLt.forEach(t),C8r=r(d6,` property of the config object (either
passed as an argument or loaded from `),HTe=n(d6,"CODE",{});var PLt=s(HTe);w8r=r(PLt,"pretrained_model_name_or_path"),PLt.forEach(t),A8r=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=n(d6,"CODE",{});var BLt=s(UTe);L8r=r(BLt,"pretrained_model_name_or_path"),BLt.forEach(t),y8r=r(d6,":"),d6.forEach(t),x8r=i(Dl),JTe=n(Dl,"UL",{});var ILt=s(JTe);SC=n(ILt,"LI",{});var YIe=s(SC);YTe=n(YIe,"STRONG",{});var NLt=s(YTe);$8r=r(NLt,"vision-encoder-decoder"),NLt.forEach(t),k8r=r(YIe," \u2014 "),aY=n(YIe,"A",{href:!0});var qLt=s(aY);S8r=r(qLt,"TFVisionEncoderDecoderModel"),qLt.forEach(t),R8r=r(YIe," (Vision Encoder decoder model)"),YIe.forEach(t),ILt.forEach(t),P8r=i(Dl),T(RC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),xDe=i(f),yc=n(f,"H2",{class:!0});var IOe=s(yc);PC=n(IOe,"A",{id:!0,class:!0,href:!0});var jLt=s(PC);KTe=n(jLt,"SPAN",{});var DLt=s(KTe);T(R9.$$.fragment,DLt),DLt.forEach(t),jLt.forEach(t),B8r=i(IOe),ZTe=n(IOe,"SPAN",{});var GLt=s(ZTe);I8r=r(GLt,"TFAutoModelForSpeechSeq2Seq"),GLt.forEach(t),IOe.forEach(t),$De=i(f),cr=n(f,"DIV",{class:!0});var Gl=s(cr);T(P9.$$.fragment,Gl),N8r=i(Gl),xc=n(Gl,"P",{});var coe=s(xc);q8r=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nY=n(coe,"A",{href:!0});var OLt=s(nY);j8r=r(OLt,"from_pretrained()"),OLt.forEach(t),D8r=r(coe," class method or the "),sY=n(coe,"A",{href:!0});var VLt=s(sY);G8r=r(VLt,"from_config()"),VLt.forEach(t),O8r=r(coe,` class
method.`),coe.forEach(t),V8r=i(Gl),B9=n(Gl,"P",{});var NOe=s(B9);X8r=r(NOe,"This class cannot be instantiated directly using "),e7e=n(NOe,"CODE",{});var XLt=s(e7e);z8r=r(XLt,"__init__()"),XLt.forEach(t),W8r=r(NOe," (throws an error)."),NOe.forEach(t),Q8r=i(Gl),Dt=n(Gl,"DIV",{class:!0});var c6=s(Dt);T(I9.$$.fragment,c6),H8r=i(c6),o7e=n(c6,"P",{});var zLt=s(o7e);U8r=r(zLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zLt.forEach(t),J8r=i(c6),$c=n(c6,"P",{});var foe=s($c);Y8r=r(foe,`Note:
Loading a model from its configuration file does `),r7e=n(foe,"STRONG",{});var WLt=s(r7e);K8r=r(WLt,"not"),WLt.forEach(t),Z8r=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=n(foe,"A",{href:!0});var QLt=s(lY);e9r=r(QLt,"from_pretrained()"),QLt.forEach(t),o9r=r(foe," to load the model weights."),foe.forEach(t),r9r=i(c6),T(BC.$$.fragment,c6),c6.forEach(t),t9r=i(Gl),qr=n(Gl,"DIV",{class:!0});var Ol=s(qr);T(N9.$$.fragment,Ol),a9r=i(Ol),t7e=n(Ol,"P",{});var HLt=s(t7e);n9r=r(HLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),HLt.forEach(t),s9r=i(Ol),gn=n(Ol,"P",{});var f6=s(gn);l9r=r(f6,"The model class to instantiate is selected based on the "),a7e=n(f6,"CODE",{});var ULt=s(a7e);i9r=r(ULt,"model_type"),ULt.forEach(t),d9r=r(f6,` property of the config object (either
passed as an argument or loaded from `),n7e=n(f6,"CODE",{});var JLt=s(n7e);c9r=r(JLt,"pretrained_model_name_or_path"),JLt.forEach(t),f9r=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=n(f6,"CODE",{});var YLt=s(s7e);m9r=r(YLt,"pretrained_model_name_or_path"),YLt.forEach(t),g9r=r(f6,":"),f6.forEach(t),h9r=i(Ol),l7e=n(Ol,"UL",{});var KLt=s(l7e);IC=n(KLt,"LI",{});var KIe=s(IC);i7e=n(KIe,"STRONG",{});var ZLt=s(i7e);p9r=r(ZLt,"speech_to_text"),ZLt.forEach(t),_9r=r(KIe," \u2014 "),iY=n(KIe,"A",{href:!0});var eyt=s(iY);u9r=r(eyt,"TFSpeech2TextForConditionalGeneration"),eyt.forEach(t),b9r=r(KIe," (Speech2Text model)"),KIe.forEach(t),KLt.forEach(t),v9r=i(Ol),T(NC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),kDe=i(f),kc=n(f,"H2",{class:!0});var qOe=s(kc);qC=n(qOe,"A",{id:!0,class:!0,href:!0});var oyt=s(qC);d7e=n(oyt,"SPAN",{});var ryt=s(d7e);T(q9.$$.fragment,ryt),ryt.forEach(t),oyt.forEach(t),F9r=i(qOe),c7e=n(qOe,"SPAN",{});var tyt=s(c7e);T9r=r(tyt,"FlaxAutoModel"),tyt.forEach(t),qOe.forEach(t),SDe=i(f),fr=n(f,"DIV",{class:!0});var Vl=s(fr);T(j9.$$.fragment,Vl),M9r=i(Vl),Sc=n(Vl,"P",{});var moe=s(Sc);E9r=r(moe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dY=n(moe,"A",{href:!0});var ayt=s(dY);C9r=r(ayt,"from_pretrained()"),ayt.forEach(t),w9r=r(moe," class method or the "),cY=n(moe,"A",{href:!0});var nyt=s(cY);A9r=r(nyt,"from_config()"),nyt.forEach(t),L9r=r(moe,` class
method.`),moe.forEach(t),y9r=i(Vl),D9=n(Vl,"P",{});var jOe=s(D9);x9r=r(jOe,"This class cannot be instantiated directly using "),f7e=n(jOe,"CODE",{});var syt=s(f7e);$9r=r(syt,"__init__()"),syt.forEach(t),k9r=r(jOe," (throws an error)."),jOe.forEach(t),S9r=i(Vl),Gt=n(Vl,"DIV",{class:!0});var m6=s(Gt);T(G9.$$.fragment,m6),R9r=i(m6),m7e=n(m6,"P",{});var lyt=s(m7e);P9r=r(lyt,"Instantiates one of the base model classes of the library from a configuration."),lyt.forEach(t),B9r=i(m6),Rc=n(m6,"P",{});var goe=s(Rc);I9r=r(goe,`Note:
Loading a model from its configuration file does `),g7e=n(goe,"STRONG",{});var iyt=s(g7e);N9r=r(iyt,"not"),iyt.forEach(t),q9r=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(goe,"A",{href:!0});var dyt=s(fY);j9r=r(dyt,"from_pretrained()"),dyt.forEach(t),D9r=r(goe," to load the model weights."),goe.forEach(t),G9r=i(m6),T(jC.$$.fragment,m6),m6.forEach(t),O9r=i(Vl),jr=n(Vl,"DIV",{class:!0});var Xl=s(jr);T(O9.$$.fragment,Xl),V9r=i(Xl),h7e=n(Xl,"P",{});var cyt=s(h7e);X9r=r(cyt,"Instantiate one of the base model classes of the library from a pretrained model."),cyt.forEach(t),z9r=i(Xl),hn=n(Xl,"P",{});var g6=s(hn);W9r=r(g6,"The model class to instantiate is selected based on the "),p7e=n(g6,"CODE",{});var fyt=s(p7e);Q9r=r(fyt,"model_type"),fyt.forEach(t),H9r=r(g6,` property of the config object (either
passed as an argument or loaded from `),_7e=n(g6,"CODE",{});var myt=s(_7e);U9r=r(myt,"pretrained_model_name_or_path"),myt.forEach(t),J9r=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u7e=n(g6,"CODE",{});var gyt=s(u7e);Y9r=r(gyt,"pretrained_model_name_or_path"),gyt.forEach(t),K9r=r(g6,":"),g6.forEach(t),Z9r=i(Xl),re=n(Xl,"UL",{});var ne=s(re);DC=n(ne,"LI",{});var ZIe=s(DC);b7e=n(ZIe,"STRONG",{});var hyt=s(b7e);exr=r(hyt,"albert"),hyt.forEach(t),oxr=r(ZIe," \u2014 "),mY=n(ZIe,"A",{href:!0});var pyt=s(mY);rxr=r(pyt,"FlaxAlbertModel"),pyt.forEach(t),txr=r(ZIe," (ALBERT model)"),ZIe.forEach(t),axr=i(ne),GC=n(ne,"LI",{});var eNe=s(GC);v7e=n(eNe,"STRONG",{});var _yt=s(v7e);nxr=r(_yt,"bart"),_yt.forEach(t),sxr=r(eNe," \u2014 "),gY=n(eNe,"A",{href:!0});var uyt=s(gY);lxr=r(uyt,"FlaxBartModel"),uyt.forEach(t),ixr=r(eNe," (BART model)"),eNe.forEach(t),dxr=i(ne),OC=n(ne,"LI",{});var oNe=s(OC);F7e=n(oNe,"STRONG",{});var byt=s(F7e);cxr=r(byt,"beit"),byt.forEach(t),fxr=r(oNe," \u2014 "),hY=n(oNe,"A",{href:!0});var vyt=s(hY);mxr=r(vyt,"FlaxBeitModel"),vyt.forEach(t),gxr=r(oNe," (BEiT model)"),oNe.forEach(t),hxr=i(ne),VC=n(ne,"LI",{});var rNe=s(VC);T7e=n(rNe,"STRONG",{});var Fyt=s(T7e);pxr=r(Fyt,"bert"),Fyt.forEach(t),_xr=r(rNe," \u2014 "),pY=n(rNe,"A",{href:!0});var Tyt=s(pY);uxr=r(Tyt,"FlaxBertModel"),Tyt.forEach(t),bxr=r(rNe," (BERT model)"),rNe.forEach(t),vxr=i(ne),XC=n(ne,"LI",{});var tNe=s(XC);M7e=n(tNe,"STRONG",{});var Myt=s(M7e);Fxr=r(Myt,"big_bird"),Myt.forEach(t),Txr=r(tNe," \u2014 "),_Y=n(tNe,"A",{href:!0});var Eyt=s(_Y);Mxr=r(Eyt,"FlaxBigBirdModel"),Eyt.forEach(t),Exr=r(tNe," (BigBird model)"),tNe.forEach(t),Cxr=i(ne),zC=n(ne,"LI",{});var aNe=s(zC);E7e=n(aNe,"STRONG",{});var Cyt=s(E7e);wxr=r(Cyt,"blenderbot"),Cyt.forEach(t),Axr=r(aNe," \u2014 "),uY=n(aNe,"A",{href:!0});var wyt=s(uY);Lxr=r(wyt,"FlaxBlenderbotModel"),wyt.forEach(t),yxr=r(aNe," (Blenderbot model)"),aNe.forEach(t),xxr=i(ne),WC=n(ne,"LI",{});var nNe=s(WC);C7e=n(nNe,"STRONG",{});var Ayt=s(C7e);$xr=r(Ayt,"blenderbot-small"),Ayt.forEach(t),kxr=r(nNe," \u2014 "),bY=n(nNe,"A",{href:!0});var Lyt=s(bY);Sxr=r(Lyt,"FlaxBlenderbotSmallModel"),Lyt.forEach(t),Rxr=r(nNe," (BlenderbotSmall model)"),nNe.forEach(t),Pxr=i(ne),QC=n(ne,"LI",{});var sNe=s(QC);w7e=n(sNe,"STRONG",{});var yyt=s(w7e);Bxr=r(yyt,"clip"),yyt.forEach(t),Ixr=r(sNe," \u2014 "),vY=n(sNe,"A",{href:!0});var xyt=s(vY);Nxr=r(xyt,"FlaxCLIPModel"),xyt.forEach(t),qxr=r(sNe," (CLIP model)"),sNe.forEach(t),jxr=i(ne),HC=n(ne,"LI",{});var lNe=s(HC);A7e=n(lNe,"STRONG",{});var $yt=s(A7e);Dxr=r($yt,"distilbert"),$yt.forEach(t),Gxr=r(lNe," \u2014 "),FY=n(lNe,"A",{href:!0});var kyt=s(FY);Oxr=r(kyt,"FlaxDistilBertModel"),kyt.forEach(t),Vxr=r(lNe," (DistilBERT model)"),lNe.forEach(t),Xxr=i(ne),UC=n(ne,"LI",{});var iNe=s(UC);L7e=n(iNe,"STRONG",{});var Syt=s(L7e);zxr=r(Syt,"electra"),Syt.forEach(t),Wxr=r(iNe," \u2014 "),TY=n(iNe,"A",{href:!0});var Ryt=s(TY);Qxr=r(Ryt,"FlaxElectraModel"),Ryt.forEach(t),Hxr=r(iNe," (ELECTRA model)"),iNe.forEach(t),Uxr=i(ne),JC=n(ne,"LI",{});var dNe=s(JC);y7e=n(dNe,"STRONG",{});var Pyt=s(y7e);Jxr=r(Pyt,"gpt2"),Pyt.forEach(t),Yxr=r(dNe," \u2014 "),MY=n(dNe,"A",{href:!0});var Byt=s(MY);Kxr=r(Byt,"FlaxGPT2Model"),Byt.forEach(t),Zxr=r(dNe," (OpenAI GPT-2 model)"),dNe.forEach(t),e$r=i(ne),YC=n(ne,"LI",{});var cNe=s(YC);x7e=n(cNe,"STRONG",{});var Iyt=s(x7e);o$r=r(Iyt,"gpt_neo"),Iyt.forEach(t),r$r=r(cNe," \u2014 "),EY=n(cNe,"A",{href:!0});var Nyt=s(EY);t$r=r(Nyt,"FlaxGPTNeoModel"),Nyt.forEach(t),a$r=r(cNe," (GPT Neo model)"),cNe.forEach(t),n$r=i(ne),KC=n(ne,"LI",{});var fNe=s(KC);$7e=n(fNe,"STRONG",{});var qyt=s($7e);s$r=r(qyt,"gptj"),qyt.forEach(t),l$r=r(fNe," \u2014 "),CY=n(fNe,"A",{href:!0});var jyt=s(CY);i$r=r(jyt,"FlaxGPTJModel"),jyt.forEach(t),d$r=r(fNe," (GPT-J model)"),fNe.forEach(t),c$r=i(ne),ZC=n(ne,"LI",{});var mNe=s(ZC);k7e=n(mNe,"STRONG",{});var Dyt=s(k7e);f$r=r(Dyt,"marian"),Dyt.forEach(t),m$r=r(mNe," \u2014 "),wY=n(mNe,"A",{href:!0});var Gyt=s(wY);g$r=r(Gyt,"FlaxMarianModel"),Gyt.forEach(t),h$r=r(mNe," (Marian model)"),mNe.forEach(t),p$r=i(ne),e5=n(ne,"LI",{});var gNe=s(e5);S7e=n(gNe,"STRONG",{});var Oyt=s(S7e);_$r=r(Oyt,"mbart"),Oyt.forEach(t),u$r=r(gNe," \u2014 "),AY=n(gNe,"A",{href:!0});var Vyt=s(AY);b$r=r(Vyt,"FlaxMBartModel"),Vyt.forEach(t),v$r=r(gNe," (mBART model)"),gNe.forEach(t),F$r=i(ne),o5=n(ne,"LI",{});var hNe=s(o5);R7e=n(hNe,"STRONG",{});var Xyt=s(R7e);T$r=r(Xyt,"mt5"),Xyt.forEach(t),M$r=r(hNe," \u2014 "),LY=n(hNe,"A",{href:!0});var zyt=s(LY);E$r=r(zyt,"FlaxMT5Model"),zyt.forEach(t),C$r=r(hNe," (MT5 model)"),hNe.forEach(t),w$r=i(ne),r5=n(ne,"LI",{});var pNe=s(r5);P7e=n(pNe,"STRONG",{});var Wyt=s(P7e);A$r=r(Wyt,"opt"),Wyt.forEach(t),L$r=r(pNe," \u2014 "),yY=n(pNe,"A",{href:!0});var Qyt=s(yY);y$r=r(Qyt,"FlaxOPTModel"),Qyt.forEach(t),x$r=r(pNe," (OPT model)"),pNe.forEach(t),$$r=i(ne),t5=n(ne,"LI",{});var _Ne=s(t5);B7e=n(_Ne,"STRONG",{});var Hyt=s(B7e);k$r=r(Hyt,"pegasus"),Hyt.forEach(t),S$r=r(_Ne," \u2014 "),xY=n(_Ne,"A",{href:!0});var Uyt=s(xY);R$r=r(Uyt,"FlaxPegasusModel"),Uyt.forEach(t),P$r=r(_Ne," (Pegasus model)"),_Ne.forEach(t),B$r=i(ne),a5=n(ne,"LI",{});var uNe=s(a5);I7e=n(uNe,"STRONG",{});var Jyt=s(I7e);I$r=r(Jyt,"roberta"),Jyt.forEach(t),N$r=r(uNe," \u2014 "),$Y=n(uNe,"A",{href:!0});var Yyt=s($Y);q$r=r(Yyt,"FlaxRobertaModel"),Yyt.forEach(t),j$r=r(uNe," (RoBERTa model)"),uNe.forEach(t),D$r=i(ne),n5=n(ne,"LI",{});var bNe=s(n5);N7e=n(bNe,"STRONG",{});var Kyt=s(N7e);G$r=r(Kyt,"roformer"),Kyt.forEach(t),O$r=r(bNe," \u2014 "),kY=n(bNe,"A",{href:!0});var Zyt=s(kY);V$r=r(Zyt,"FlaxRoFormerModel"),Zyt.forEach(t),X$r=r(bNe," (RoFormer model)"),bNe.forEach(t),z$r=i(ne),s5=n(ne,"LI",{});var vNe=s(s5);q7e=n(vNe,"STRONG",{});var e8t=s(q7e);W$r=r(e8t,"t5"),e8t.forEach(t),Q$r=r(vNe," \u2014 "),SY=n(vNe,"A",{href:!0});var o8t=s(SY);H$r=r(o8t,"FlaxT5Model"),o8t.forEach(t),U$r=r(vNe," (T5 model)"),vNe.forEach(t),J$r=i(ne),l5=n(ne,"LI",{});var FNe=s(l5);j7e=n(FNe,"STRONG",{});var r8t=s(j7e);Y$r=r(r8t,"vision-text-dual-encoder"),r8t.forEach(t),K$r=r(FNe," \u2014 "),RY=n(FNe,"A",{href:!0});var t8t=s(RY);Z$r=r(t8t,"FlaxVisionTextDualEncoderModel"),t8t.forEach(t),ekr=r(FNe," (VisionTextDualEncoder model)"),FNe.forEach(t),okr=i(ne),i5=n(ne,"LI",{});var TNe=s(i5);D7e=n(TNe,"STRONG",{});var a8t=s(D7e);rkr=r(a8t,"vit"),a8t.forEach(t),tkr=r(TNe," \u2014 "),PY=n(TNe,"A",{href:!0});var n8t=s(PY);akr=r(n8t,"FlaxViTModel"),n8t.forEach(t),nkr=r(TNe," (ViT model)"),TNe.forEach(t),skr=i(ne),d5=n(ne,"LI",{});var MNe=s(d5);G7e=n(MNe,"STRONG",{});var s8t=s(G7e);lkr=r(s8t,"wav2vec2"),s8t.forEach(t),ikr=r(MNe," \u2014 "),BY=n(MNe,"A",{href:!0});var l8t=s(BY);dkr=r(l8t,"FlaxWav2Vec2Model"),l8t.forEach(t),ckr=r(MNe," (Wav2Vec2 model)"),MNe.forEach(t),fkr=i(ne),c5=n(ne,"LI",{});var ENe=s(c5);O7e=n(ENe,"STRONG",{});var i8t=s(O7e);mkr=r(i8t,"xglm"),i8t.forEach(t),gkr=r(ENe," \u2014 "),IY=n(ENe,"A",{href:!0});var d8t=s(IY);hkr=r(d8t,"FlaxXGLMModel"),d8t.forEach(t),pkr=r(ENe," (XGLM model)"),ENe.forEach(t),_kr=i(ne),f5=n(ne,"LI",{});var CNe=s(f5);V7e=n(CNe,"STRONG",{});var c8t=s(V7e);ukr=r(c8t,"xlm-roberta"),c8t.forEach(t),bkr=r(CNe," \u2014 "),NY=n(CNe,"A",{href:!0});var f8t=s(NY);vkr=r(f8t,"FlaxXLMRobertaModel"),f8t.forEach(t),Fkr=r(CNe," (XLM-RoBERTa model)"),CNe.forEach(t),ne.forEach(t),Tkr=i(Xl),T(m5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),RDe=i(f),Pc=n(f,"H2",{class:!0});var DOe=s(Pc);g5=n(DOe,"A",{id:!0,class:!0,href:!0});var m8t=s(g5);X7e=n(m8t,"SPAN",{});var g8t=s(X7e);T(V9.$$.fragment,g8t),g8t.forEach(t),m8t.forEach(t),Mkr=i(DOe),z7e=n(DOe,"SPAN",{});var h8t=s(z7e);Ekr=r(h8t,"FlaxAutoModelForCausalLM"),h8t.forEach(t),DOe.forEach(t),PDe=i(f),mr=n(f,"DIV",{class:!0});var zl=s(mr);T(X9.$$.fragment,zl),Ckr=i(zl),Bc=n(zl,"P",{});var hoe=s(Bc);wkr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qY=n(hoe,"A",{href:!0});var p8t=s(qY);Akr=r(p8t,"from_pretrained()"),p8t.forEach(t),Lkr=r(hoe," class method or the "),jY=n(hoe,"A",{href:!0});var _8t=s(jY);ykr=r(_8t,"from_config()"),_8t.forEach(t),xkr=r(hoe,` class
method.`),hoe.forEach(t),$kr=i(zl),z9=n(zl,"P",{});var GOe=s(z9);kkr=r(GOe,"This class cannot be instantiated directly using "),W7e=n(GOe,"CODE",{});var u8t=s(W7e);Skr=r(u8t,"__init__()"),u8t.forEach(t),Rkr=r(GOe," (throws an error)."),GOe.forEach(t),Pkr=i(zl),Ot=n(zl,"DIV",{class:!0});var h6=s(Ot);T(W9.$$.fragment,h6),Bkr=i(h6),Q7e=n(h6,"P",{});var b8t=s(Q7e);Ikr=r(b8t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),b8t.forEach(t),Nkr=i(h6),Ic=n(h6,"P",{});var poe=s(Ic);qkr=r(poe,`Note:
Loading a model from its configuration file does `),H7e=n(poe,"STRONG",{});var v8t=s(H7e);jkr=r(v8t,"not"),v8t.forEach(t),Dkr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=n(poe,"A",{href:!0});var F8t=s(DY);Gkr=r(F8t,"from_pretrained()"),F8t.forEach(t),Okr=r(poe," to load the model weights."),poe.forEach(t),Vkr=i(h6),T(h5.$$.fragment,h6),h6.forEach(t),Xkr=i(zl),Dr=n(zl,"DIV",{class:!0});var Wl=s(Dr);T(Q9.$$.fragment,Wl),zkr=i(Wl),U7e=n(Wl,"P",{});var T8t=s(U7e);Wkr=r(T8t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),T8t.forEach(t),Qkr=i(Wl),pn=n(Wl,"P",{});var p6=s(pn);Hkr=r(p6,"The model class to instantiate is selected based on the "),J7e=n(p6,"CODE",{});var M8t=s(J7e);Ukr=r(M8t,"model_type"),M8t.forEach(t),Jkr=r(p6,` property of the config object (either
passed as an argument or loaded from `),Y7e=n(p6,"CODE",{});var E8t=s(Y7e);Ykr=r(E8t,"pretrained_model_name_or_path"),E8t.forEach(t),Kkr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=n(p6,"CODE",{});var C8t=s(K7e);Zkr=r(C8t,"pretrained_model_name_or_path"),C8t.forEach(t),eSr=r(p6,":"),p6.forEach(t),oSr=i(Wl),ye=n(Wl,"UL",{});var Ie=s(ye);p5=n(Ie,"LI",{});var wNe=s(p5);Z7e=n(wNe,"STRONG",{});var w8t=s(Z7e);rSr=r(w8t,"bart"),w8t.forEach(t),tSr=r(wNe," \u2014 "),GY=n(wNe,"A",{href:!0});var A8t=s(GY);aSr=r(A8t,"FlaxBartForCausalLM"),A8t.forEach(t),nSr=r(wNe," (BART model)"),wNe.forEach(t),sSr=i(Ie),_5=n(Ie,"LI",{});var ANe=s(_5);eMe=n(ANe,"STRONG",{});var L8t=s(eMe);lSr=r(L8t,"bert"),L8t.forEach(t),iSr=r(ANe," \u2014 "),OY=n(ANe,"A",{href:!0});var y8t=s(OY);dSr=r(y8t,"FlaxBertForCausalLM"),y8t.forEach(t),cSr=r(ANe," (BERT model)"),ANe.forEach(t),fSr=i(Ie),u5=n(Ie,"LI",{});var LNe=s(u5);oMe=n(LNe,"STRONG",{});var x8t=s(oMe);mSr=r(x8t,"big_bird"),x8t.forEach(t),gSr=r(LNe," \u2014 "),VY=n(LNe,"A",{href:!0});var $8t=s(VY);hSr=r($8t,"FlaxBigBirdForCausalLM"),$8t.forEach(t),pSr=r(LNe," (BigBird model)"),LNe.forEach(t),_Sr=i(Ie),b5=n(Ie,"LI",{});var yNe=s(b5);rMe=n(yNe,"STRONG",{});var k8t=s(rMe);uSr=r(k8t,"electra"),k8t.forEach(t),bSr=r(yNe," \u2014 "),XY=n(yNe,"A",{href:!0});var S8t=s(XY);vSr=r(S8t,"FlaxElectraForCausalLM"),S8t.forEach(t),FSr=r(yNe," (ELECTRA model)"),yNe.forEach(t),TSr=i(Ie),v5=n(Ie,"LI",{});var xNe=s(v5);tMe=n(xNe,"STRONG",{});var R8t=s(tMe);MSr=r(R8t,"gpt2"),R8t.forEach(t),ESr=r(xNe," \u2014 "),zY=n(xNe,"A",{href:!0});var P8t=s(zY);CSr=r(P8t,"FlaxGPT2LMHeadModel"),P8t.forEach(t),wSr=r(xNe," (OpenAI GPT-2 model)"),xNe.forEach(t),ASr=i(Ie),F5=n(Ie,"LI",{});var $Ne=s(F5);aMe=n($Ne,"STRONG",{});var B8t=s(aMe);LSr=r(B8t,"gpt_neo"),B8t.forEach(t),ySr=r($Ne," \u2014 "),WY=n($Ne,"A",{href:!0});var I8t=s(WY);xSr=r(I8t,"FlaxGPTNeoForCausalLM"),I8t.forEach(t),$Sr=r($Ne," (GPT Neo model)"),$Ne.forEach(t),kSr=i(Ie),T5=n(Ie,"LI",{});var kNe=s(T5);nMe=n(kNe,"STRONG",{});var N8t=s(nMe);SSr=r(N8t,"gptj"),N8t.forEach(t),RSr=r(kNe," \u2014 "),QY=n(kNe,"A",{href:!0});var q8t=s(QY);PSr=r(q8t,"FlaxGPTJForCausalLM"),q8t.forEach(t),BSr=r(kNe," (GPT-J model)"),kNe.forEach(t),ISr=i(Ie),M5=n(Ie,"LI",{});var SNe=s(M5);sMe=n(SNe,"STRONG",{});var j8t=s(sMe);NSr=r(j8t,"opt"),j8t.forEach(t),qSr=r(SNe," \u2014 "),HY=n(SNe,"A",{href:!0});var D8t=s(HY);jSr=r(D8t,"FlaxOPTForCausalLM"),D8t.forEach(t),DSr=r(SNe," (OPT model)"),SNe.forEach(t),GSr=i(Ie),E5=n(Ie,"LI",{});var RNe=s(E5);lMe=n(RNe,"STRONG",{});var G8t=s(lMe);OSr=r(G8t,"roberta"),G8t.forEach(t),VSr=r(RNe," \u2014 "),UY=n(RNe,"A",{href:!0});var O8t=s(UY);XSr=r(O8t,"FlaxRobertaForCausalLM"),O8t.forEach(t),zSr=r(RNe," (RoBERTa model)"),RNe.forEach(t),WSr=i(Ie),C5=n(Ie,"LI",{});var PNe=s(C5);iMe=n(PNe,"STRONG",{});var V8t=s(iMe);QSr=r(V8t,"xglm"),V8t.forEach(t),HSr=r(PNe," \u2014 "),JY=n(PNe,"A",{href:!0});var X8t=s(JY);USr=r(X8t,"FlaxXGLMForCausalLM"),X8t.forEach(t),JSr=r(PNe," (XGLM model)"),PNe.forEach(t),Ie.forEach(t),YSr=i(Wl),T(w5.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),BDe=i(f),Nc=n(f,"H2",{class:!0});var OOe=s(Nc);A5=n(OOe,"A",{id:!0,class:!0,href:!0});var z8t=s(A5);dMe=n(z8t,"SPAN",{});var W8t=s(dMe);T(H9.$$.fragment,W8t),W8t.forEach(t),z8t.forEach(t),KSr=i(OOe),cMe=n(OOe,"SPAN",{});var Q8t=s(cMe);ZSr=r(Q8t,"FlaxAutoModelForPreTraining"),Q8t.forEach(t),OOe.forEach(t),IDe=i(f),gr=n(f,"DIV",{class:!0});var Ql=s(gr);T(U9.$$.fragment,Ql),eRr=i(Ql),qc=n(Ql,"P",{});var _oe=s(qc);oRr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YY=n(_oe,"A",{href:!0});var H8t=s(YY);rRr=r(H8t,"from_pretrained()"),H8t.forEach(t),tRr=r(_oe," class method or the "),KY=n(_oe,"A",{href:!0});var U8t=s(KY);aRr=r(U8t,"from_config()"),U8t.forEach(t),nRr=r(_oe,` class
method.`),_oe.forEach(t),sRr=i(Ql),J9=n(Ql,"P",{});var VOe=s(J9);lRr=r(VOe,"This class cannot be instantiated directly using "),fMe=n(VOe,"CODE",{});var J8t=s(fMe);iRr=r(J8t,"__init__()"),J8t.forEach(t),dRr=r(VOe," (throws an error)."),VOe.forEach(t),cRr=i(Ql),Vt=n(Ql,"DIV",{class:!0});var _6=s(Vt);T(Y9.$$.fragment,_6),fRr=i(_6),mMe=n(_6,"P",{});var Y8t=s(mMe);mRr=r(Y8t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Y8t.forEach(t),gRr=i(_6),jc=n(_6,"P",{});var uoe=s(jc);hRr=r(uoe,`Note:
Loading a model from its configuration file does `),gMe=n(uoe,"STRONG",{});var K8t=s(gMe);pRr=r(K8t,"not"),K8t.forEach(t),_Rr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(uoe,"A",{href:!0});var Z8t=s(ZY);uRr=r(Z8t,"from_pretrained()"),Z8t.forEach(t),bRr=r(uoe," to load the model weights."),uoe.forEach(t),vRr=i(_6),T(L5.$$.fragment,_6),_6.forEach(t),FRr=i(Ql),Gr=n(Ql,"DIV",{class:!0});var Hl=s(Gr);T(K9.$$.fragment,Hl),TRr=i(Hl),hMe=n(Hl,"P",{});var e9t=s(hMe);MRr=r(e9t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),e9t.forEach(t),ERr=i(Hl),_n=n(Hl,"P",{});var u6=s(_n);CRr=r(u6,"The model class to instantiate is selected based on the "),pMe=n(u6,"CODE",{});var o9t=s(pMe);wRr=r(o9t,"model_type"),o9t.forEach(t),ARr=r(u6,` property of the config object (either
passed as an argument or loaded from `),_Me=n(u6,"CODE",{});var r9t=s(_Me);LRr=r(r9t,"pretrained_model_name_or_path"),r9t.forEach(t),yRr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=n(u6,"CODE",{});var t9t=s(uMe);xRr=r(t9t,"pretrained_model_name_or_path"),t9t.forEach(t),$Rr=r(u6,":"),u6.forEach(t),kRr=i(Hl),Ee=n(Hl,"UL",{});var we=s(Ee);y5=n(we,"LI",{});var BNe=s(y5);bMe=n(BNe,"STRONG",{});var a9t=s(bMe);SRr=r(a9t,"albert"),a9t.forEach(t),RRr=r(BNe," \u2014 "),eK=n(BNe,"A",{href:!0});var n9t=s(eK);PRr=r(n9t,"FlaxAlbertForPreTraining"),n9t.forEach(t),BRr=r(BNe," (ALBERT model)"),BNe.forEach(t),IRr=i(we),x5=n(we,"LI",{});var INe=s(x5);vMe=n(INe,"STRONG",{});var s9t=s(vMe);NRr=r(s9t,"bart"),s9t.forEach(t),qRr=r(INe," \u2014 "),oK=n(INe,"A",{href:!0});var l9t=s(oK);jRr=r(l9t,"FlaxBartForConditionalGeneration"),l9t.forEach(t),DRr=r(INe," (BART model)"),INe.forEach(t),GRr=i(we),$5=n(we,"LI",{});var NNe=s($5);FMe=n(NNe,"STRONG",{});var i9t=s(FMe);ORr=r(i9t,"bert"),i9t.forEach(t),VRr=r(NNe," \u2014 "),rK=n(NNe,"A",{href:!0});var d9t=s(rK);XRr=r(d9t,"FlaxBertForPreTraining"),d9t.forEach(t),zRr=r(NNe," (BERT model)"),NNe.forEach(t),WRr=i(we),k5=n(we,"LI",{});var qNe=s(k5);TMe=n(qNe,"STRONG",{});var c9t=s(TMe);QRr=r(c9t,"big_bird"),c9t.forEach(t),HRr=r(qNe," \u2014 "),tK=n(qNe,"A",{href:!0});var f9t=s(tK);URr=r(f9t,"FlaxBigBirdForPreTraining"),f9t.forEach(t),JRr=r(qNe," (BigBird model)"),qNe.forEach(t),YRr=i(we),S5=n(we,"LI",{});var jNe=s(S5);MMe=n(jNe,"STRONG",{});var m9t=s(MMe);KRr=r(m9t,"electra"),m9t.forEach(t),ZRr=r(jNe," \u2014 "),aK=n(jNe,"A",{href:!0});var g9t=s(aK);ePr=r(g9t,"FlaxElectraForPreTraining"),g9t.forEach(t),oPr=r(jNe," (ELECTRA model)"),jNe.forEach(t),rPr=i(we),R5=n(we,"LI",{});var DNe=s(R5);EMe=n(DNe,"STRONG",{});var h9t=s(EMe);tPr=r(h9t,"mbart"),h9t.forEach(t),aPr=r(DNe," \u2014 "),nK=n(DNe,"A",{href:!0});var p9t=s(nK);nPr=r(p9t,"FlaxMBartForConditionalGeneration"),p9t.forEach(t),sPr=r(DNe," (mBART model)"),DNe.forEach(t),lPr=i(we),P5=n(we,"LI",{});var GNe=s(P5);CMe=n(GNe,"STRONG",{});var _9t=s(CMe);iPr=r(_9t,"mt5"),_9t.forEach(t),dPr=r(GNe," \u2014 "),sK=n(GNe,"A",{href:!0});var u9t=s(sK);cPr=r(u9t,"FlaxMT5ForConditionalGeneration"),u9t.forEach(t),fPr=r(GNe," (MT5 model)"),GNe.forEach(t),mPr=i(we),B5=n(we,"LI",{});var ONe=s(B5);wMe=n(ONe,"STRONG",{});var b9t=s(wMe);gPr=r(b9t,"roberta"),b9t.forEach(t),hPr=r(ONe," \u2014 "),lK=n(ONe,"A",{href:!0});var v9t=s(lK);pPr=r(v9t,"FlaxRobertaForMaskedLM"),v9t.forEach(t),_Pr=r(ONe," (RoBERTa model)"),ONe.forEach(t),uPr=i(we),I5=n(we,"LI",{});var VNe=s(I5);AMe=n(VNe,"STRONG",{});var F9t=s(AMe);bPr=r(F9t,"roformer"),F9t.forEach(t),vPr=r(VNe," \u2014 "),iK=n(VNe,"A",{href:!0});var T9t=s(iK);FPr=r(T9t,"FlaxRoFormerForMaskedLM"),T9t.forEach(t),TPr=r(VNe," (RoFormer model)"),VNe.forEach(t),MPr=i(we),N5=n(we,"LI",{});var XNe=s(N5);LMe=n(XNe,"STRONG",{});var M9t=s(LMe);EPr=r(M9t,"t5"),M9t.forEach(t),CPr=r(XNe," \u2014 "),dK=n(XNe,"A",{href:!0});var E9t=s(dK);wPr=r(E9t,"FlaxT5ForConditionalGeneration"),E9t.forEach(t),APr=r(XNe," (T5 model)"),XNe.forEach(t),LPr=i(we),q5=n(we,"LI",{});var zNe=s(q5);yMe=n(zNe,"STRONG",{});var C9t=s(yMe);yPr=r(C9t,"wav2vec2"),C9t.forEach(t),xPr=r(zNe," \u2014 "),cK=n(zNe,"A",{href:!0});var w9t=s(cK);$Pr=r(w9t,"FlaxWav2Vec2ForPreTraining"),w9t.forEach(t),kPr=r(zNe," (Wav2Vec2 model)"),zNe.forEach(t),SPr=i(we),j5=n(we,"LI",{});var WNe=s(j5);xMe=n(WNe,"STRONG",{});var A9t=s(xMe);RPr=r(A9t,"xlm-roberta"),A9t.forEach(t),PPr=r(WNe," \u2014 "),fK=n(WNe,"A",{href:!0});var L9t=s(fK);BPr=r(L9t,"FlaxXLMRobertaForMaskedLM"),L9t.forEach(t),IPr=r(WNe," (XLM-RoBERTa model)"),WNe.forEach(t),we.forEach(t),NPr=i(Hl),T(D5.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),NDe=i(f),Dc=n(f,"H2",{class:!0});var XOe=s(Dc);G5=n(XOe,"A",{id:!0,class:!0,href:!0});var y9t=s(G5);$Me=n(y9t,"SPAN",{});var x9t=s($Me);T(Z9.$$.fragment,x9t),x9t.forEach(t),y9t.forEach(t),qPr=i(XOe),kMe=n(XOe,"SPAN",{});var $9t=s(kMe);jPr=r($9t,"FlaxAutoModelForMaskedLM"),$9t.forEach(t),XOe.forEach(t),qDe=i(f),hr=n(f,"DIV",{class:!0});var Ul=s(hr);T(ex.$$.fragment,Ul),DPr=i(Ul),Gc=n(Ul,"P",{});var boe=s(Gc);GPr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mK=n(boe,"A",{href:!0});var k9t=s(mK);OPr=r(k9t,"from_pretrained()"),k9t.forEach(t),VPr=r(boe," class method or the "),gK=n(boe,"A",{href:!0});var S9t=s(gK);XPr=r(S9t,"from_config()"),S9t.forEach(t),zPr=r(boe,` class
method.`),boe.forEach(t),WPr=i(Ul),ox=n(Ul,"P",{});var zOe=s(ox);QPr=r(zOe,"This class cannot be instantiated directly using "),SMe=n(zOe,"CODE",{});var R9t=s(SMe);HPr=r(R9t,"__init__()"),R9t.forEach(t),UPr=r(zOe," (throws an error)."),zOe.forEach(t),JPr=i(Ul),Xt=n(Ul,"DIV",{class:!0});var b6=s(Xt);T(rx.$$.fragment,b6),YPr=i(b6),RMe=n(b6,"P",{});var P9t=s(RMe);KPr=r(P9t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P9t.forEach(t),ZPr=i(b6),Oc=n(b6,"P",{});var voe=s(Oc);eBr=r(voe,`Note:
Loading a model from its configuration file does `),PMe=n(voe,"STRONG",{});var B9t=s(PMe);oBr=r(B9t,"not"),B9t.forEach(t),rBr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(voe,"A",{href:!0});var I9t=s(hK);tBr=r(I9t,"from_pretrained()"),I9t.forEach(t),aBr=r(voe," to load the model weights."),voe.forEach(t),nBr=i(b6),T(O5.$$.fragment,b6),b6.forEach(t),sBr=i(Ul),Or=n(Ul,"DIV",{class:!0});var Jl=s(Or);T(tx.$$.fragment,Jl),lBr=i(Jl),BMe=n(Jl,"P",{});var N9t=s(BMe);iBr=r(N9t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),N9t.forEach(t),dBr=i(Jl),un=n(Jl,"P",{});var v6=s(un);cBr=r(v6,"The model class to instantiate is selected based on the "),IMe=n(v6,"CODE",{});var q9t=s(IMe);fBr=r(q9t,"model_type"),q9t.forEach(t),mBr=r(v6,` property of the config object (either
passed as an argument or loaded from `),NMe=n(v6,"CODE",{});var j9t=s(NMe);gBr=r(j9t,"pretrained_model_name_or_path"),j9t.forEach(t),hBr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=n(v6,"CODE",{});var D9t=s(qMe);pBr=r(D9t,"pretrained_model_name_or_path"),D9t.forEach(t),_Br=r(v6,":"),v6.forEach(t),uBr=i(Jl),xe=n(Jl,"UL",{});var Ne=s(xe);V5=n(Ne,"LI",{});var QNe=s(V5);jMe=n(QNe,"STRONG",{});var G9t=s(jMe);bBr=r(G9t,"albert"),G9t.forEach(t),vBr=r(QNe," \u2014 "),pK=n(QNe,"A",{href:!0});var O9t=s(pK);FBr=r(O9t,"FlaxAlbertForMaskedLM"),O9t.forEach(t),TBr=r(QNe," (ALBERT model)"),QNe.forEach(t),MBr=i(Ne),X5=n(Ne,"LI",{});var HNe=s(X5);DMe=n(HNe,"STRONG",{});var V9t=s(DMe);EBr=r(V9t,"bart"),V9t.forEach(t),CBr=r(HNe," \u2014 "),_K=n(HNe,"A",{href:!0});var X9t=s(_K);wBr=r(X9t,"FlaxBartForConditionalGeneration"),X9t.forEach(t),ABr=r(HNe," (BART model)"),HNe.forEach(t),LBr=i(Ne),z5=n(Ne,"LI",{});var UNe=s(z5);GMe=n(UNe,"STRONG",{});var z9t=s(GMe);yBr=r(z9t,"bert"),z9t.forEach(t),xBr=r(UNe," \u2014 "),uK=n(UNe,"A",{href:!0});var W9t=s(uK);$Br=r(W9t,"FlaxBertForMaskedLM"),W9t.forEach(t),kBr=r(UNe," (BERT model)"),UNe.forEach(t),SBr=i(Ne),W5=n(Ne,"LI",{});var JNe=s(W5);OMe=n(JNe,"STRONG",{});var Q9t=s(OMe);RBr=r(Q9t,"big_bird"),Q9t.forEach(t),PBr=r(JNe," \u2014 "),bK=n(JNe,"A",{href:!0});var H9t=s(bK);BBr=r(H9t,"FlaxBigBirdForMaskedLM"),H9t.forEach(t),IBr=r(JNe," (BigBird model)"),JNe.forEach(t),NBr=i(Ne),Q5=n(Ne,"LI",{});var YNe=s(Q5);VMe=n(YNe,"STRONG",{});var U9t=s(VMe);qBr=r(U9t,"distilbert"),U9t.forEach(t),jBr=r(YNe," \u2014 "),vK=n(YNe,"A",{href:!0});var J9t=s(vK);DBr=r(J9t,"FlaxDistilBertForMaskedLM"),J9t.forEach(t),GBr=r(YNe," (DistilBERT model)"),YNe.forEach(t),OBr=i(Ne),H5=n(Ne,"LI",{});var KNe=s(H5);XMe=n(KNe,"STRONG",{});var Y9t=s(XMe);VBr=r(Y9t,"electra"),Y9t.forEach(t),XBr=r(KNe," \u2014 "),FK=n(KNe,"A",{href:!0});var K9t=s(FK);zBr=r(K9t,"FlaxElectraForMaskedLM"),K9t.forEach(t),WBr=r(KNe," (ELECTRA model)"),KNe.forEach(t),QBr=i(Ne),U5=n(Ne,"LI",{});var ZNe=s(U5);zMe=n(ZNe,"STRONG",{});var Z9t=s(zMe);HBr=r(Z9t,"mbart"),Z9t.forEach(t),UBr=r(ZNe," \u2014 "),TK=n(ZNe,"A",{href:!0});var ext=s(TK);JBr=r(ext,"FlaxMBartForConditionalGeneration"),ext.forEach(t),YBr=r(ZNe," (mBART model)"),ZNe.forEach(t),KBr=i(Ne),J5=n(Ne,"LI",{});var eqe=s(J5);WMe=n(eqe,"STRONG",{});var oxt=s(WMe);ZBr=r(oxt,"roberta"),oxt.forEach(t),eIr=r(eqe," \u2014 "),MK=n(eqe,"A",{href:!0});var rxt=s(MK);oIr=r(rxt,"FlaxRobertaForMaskedLM"),rxt.forEach(t),rIr=r(eqe," (RoBERTa model)"),eqe.forEach(t),tIr=i(Ne),Y5=n(Ne,"LI",{});var oqe=s(Y5);QMe=n(oqe,"STRONG",{});var txt=s(QMe);aIr=r(txt,"roformer"),txt.forEach(t),nIr=r(oqe," \u2014 "),EK=n(oqe,"A",{href:!0});var axt=s(EK);sIr=r(axt,"FlaxRoFormerForMaskedLM"),axt.forEach(t),lIr=r(oqe," (RoFormer model)"),oqe.forEach(t),iIr=i(Ne),K5=n(Ne,"LI",{});var rqe=s(K5);HMe=n(rqe,"STRONG",{});var nxt=s(HMe);dIr=r(nxt,"xlm-roberta"),nxt.forEach(t),cIr=r(rqe," \u2014 "),CK=n(rqe,"A",{href:!0});var sxt=s(CK);fIr=r(sxt,"FlaxXLMRobertaForMaskedLM"),sxt.forEach(t),mIr=r(rqe," (XLM-RoBERTa model)"),rqe.forEach(t),Ne.forEach(t),gIr=i(Jl),T(Z5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),jDe=i(f),Vc=n(f,"H2",{class:!0});var WOe=s(Vc);e0=n(WOe,"A",{id:!0,class:!0,href:!0});var lxt=s(e0);UMe=n(lxt,"SPAN",{});var ixt=s(UMe);T(ax.$$.fragment,ixt),ixt.forEach(t),lxt.forEach(t),hIr=i(WOe),JMe=n(WOe,"SPAN",{});var dxt=s(JMe);pIr=r(dxt,"FlaxAutoModelForSeq2SeqLM"),dxt.forEach(t),WOe.forEach(t),DDe=i(f),pr=n(f,"DIV",{class:!0});var Yl=s(pr);T(nx.$$.fragment,Yl),_Ir=i(Yl),Xc=n(Yl,"P",{});var Foe=s(Xc);uIr=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wK=n(Foe,"A",{href:!0});var cxt=s(wK);bIr=r(cxt,"from_pretrained()"),cxt.forEach(t),vIr=r(Foe," class method or the "),AK=n(Foe,"A",{href:!0});var fxt=s(AK);FIr=r(fxt,"from_config()"),fxt.forEach(t),TIr=r(Foe,` class
method.`),Foe.forEach(t),MIr=i(Yl),sx=n(Yl,"P",{});var QOe=s(sx);EIr=r(QOe,"This class cannot be instantiated directly using "),YMe=n(QOe,"CODE",{});var mxt=s(YMe);CIr=r(mxt,"__init__()"),mxt.forEach(t),wIr=r(QOe," (throws an error)."),QOe.forEach(t),AIr=i(Yl),zt=n(Yl,"DIV",{class:!0});var F6=s(zt);T(lx.$$.fragment,F6),LIr=i(F6),KMe=n(F6,"P",{});var gxt=s(KMe);yIr=r(gxt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gxt.forEach(t),xIr=i(F6),zc=n(F6,"P",{});var Toe=s(zc);$Ir=r(Toe,`Note:
Loading a model from its configuration file does `),ZMe=n(Toe,"STRONG",{});var hxt=s(ZMe);kIr=r(hxt,"not"),hxt.forEach(t),SIr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=n(Toe,"A",{href:!0});var pxt=s(LK);RIr=r(pxt,"from_pretrained()"),pxt.forEach(t),PIr=r(Toe," to load the model weights."),Toe.forEach(t),BIr=i(F6),T(o0.$$.fragment,F6),F6.forEach(t),IIr=i(Yl),Vr=n(Yl,"DIV",{class:!0});var Kl=s(Vr);T(ix.$$.fragment,Kl),NIr=i(Kl),eEe=n(Kl,"P",{});var _xt=s(eEe);qIr=r(_xt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_xt.forEach(t),jIr=i(Kl),bn=n(Kl,"P",{});var T6=s(bn);DIr=r(T6,"The model class to instantiate is selected based on the "),oEe=n(T6,"CODE",{});var uxt=s(oEe);GIr=r(uxt,"model_type"),uxt.forEach(t),OIr=r(T6,` property of the config object (either
passed as an argument or loaded from `),rEe=n(T6,"CODE",{});var bxt=s(rEe);VIr=r(bxt,"pretrained_model_name_or_path"),bxt.forEach(t),XIr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=n(T6,"CODE",{});var vxt=s(tEe);zIr=r(vxt,"pretrained_model_name_or_path"),vxt.forEach(t),WIr=r(T6,":"),T6.forEach(t),QIr=i(Kl),Pe=n(Kl,"UL",{});var ze=s(Pe);r0=n(ze,"LI",{});var tqe=s(r0);aEe=n(tqe,"STRONG",{});var Fxt=s(aEe);HIr=r(Fxt,"bart"),Fxt.forEach(t),UIr=r(tqe," \u2014 "),yK=n(tqe,"A",{href:!0});var Txt=s(yK);JIr=r(Txt,"FlaxBartForConditionalGeneration"),Txt.forEach(t),YIr=r(tqe," (BART model)"),tqe.forEach(t),KIr=i(ze),t0=n(ze,"LI",{});var aqe=s(t0);nEe=n(aqe,"STRONG",{});var Mxt=s(nEe);ZIr=r(Mxt,"blenderbot"),Mxt.forEach(t),eNr=r(aqe," \u2014 "),xK=n(aqe,"A",{href:!0});var Ext=s(xK);oNr=r(Ext,"FlaxBlenderbotForConditionalGeneration"),Ext.forEach(t),rNr=r(aqe," (Blenderbot model)"),aqe.forEach(t),tNr=i(ze),a0=n(ze,"LI",{});var nqe=s(a0);sEe=n(nqe,"STRONG",{});var Cxt=s(sEe);aNr=r(Cxt,"blenderbot-small"),Cxt.forEach(t),nNr=r(nqe," \u2014 "),$K=n(nqe,"A",{href:!0});var wxt=s($K);sNr=r(wxt,"FlaxBlenderbotSmallForConditionalGeneration"),wxt.forEach(t),lNr=r(nqe," (BlenderbotSmall model)"),nqe.forEach(t),iNr=i(ze),n0=n(ze,"LI",{});var sqe=s(n0);lEe=n(sqe,"STRONG",{});var Axt=s(lEe);dNr=r(Axt,"encoder-decoder"),Axt.forEach(t),cNr=r(sqe," \u2014 "),kK=n(sqe,"A",{href:!0});var Lxt=s(kK);fNr=r(Lxt,"FlaxEncoderDecoderModel"),Lxt.forEach(t),mNr=r(sqe," (Encoder decoder model)"),sqe.forEach(t),gNr=i(ze),s0=n(ze,"LI",{});var lqe=s(s0);iEe=n(lqe,"STRONG",{});var yxt=s(iEe);hNr=r(yxt,"marian"),yxt.forEach(t),pNr=r(lqe," \u2014 "),SK=n(lqe,"A",{href:!0});var xxt=s(SK);_Nr=r(xxt,"FlaxMarianMTModel"),xxt.forEach(t),uNr=r(lqe," (Marian model)"),lqe.forEach(t),bNr=i(ze),l0=n(ze,"LI",{});var iqe=s(l0);dEe=n(iqe,"STRONG",{});var $xt=s(dEe);vNr=r($xt,"mbart"),$xt.forEach(t),FNr=r(iqe," \u2014 "),RK=n(iqe,"A",{href:!0});var kxt=s(RK);TNr=r(kxt,"FlaxMBartForConditionalGeneration"),kxt.forEach(t),MNr=r(iqe," (mBART model)"),iqe.forEach(t),ENr=i(ze),i0=n(ze,"LI",{});var dqe=s(i0);cEe=n(dqe,"STRONG",{});var Sxt=s(cEe);CNr=r(Sxt,"mt5"),Sxt.forEach(t),wNr=r(dqe," \u2014 "),PK=n(dqe,"A",{href:!0});var Rxt=s(PK);ANr=r(Rxt,"FlaxMT5ForConditionalGeneration"),Rxt.forEach(t),LNr=r(dqe," (MT5 model)"),dqe.forEach(t),yNr=i(ze),d0=n(ze,"LI",{});var cqe=s(d0);fEe=n(cqe,"STRONG",{});var Pxt=s(fEe);xNr=r(Pxt,"pegasus"),Pxt.forEach(t),$Nr=r(cqe," \u2014 "),BK=n(cqe,"A",{href:!0});var Bxt=s(BK);kNr=r(Bxt,"FlaxPegasusForConditionalGeneration"),Bxt.forEach(t),SNr=r(cqe," (Pegasus model)"),cqe.forEach(t),RNr=i(ze),c0=n(ze,"LI",{});var fqe=s(c0);mEe=n(fqe,"STRONG",{});var Ixt=s(mEe);PNr=r(Ixt,"t5"),Ixt.forEach(t),BNr=r(fqe," \u2014 "),IK=n(fqe,"A",{href:!0});var Nxt=s(IK);INr=r(Nxt,"FlaxT5ForConditionalGeneration"),Nxt.forEach(t),NNr=r(fqe," (T5 model)"),fqe.forEach(t),ze.forEach(t),qNr=i(Kl),T(f0.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),GDe=i(f),Wc=n(f,"H2",{class:!0});var HOe=s(Wc);m0=n(HOe,"A",{id:!0,class:!0,href:!0});var qxt=s(m0);gEe=n(qxt,"SPAN",{});var jxt=s(gEe);T(dx.$$.fragment,jxt),jxt.forEach(t),qxt.forEach(t),jNr=i(HOe),hEe=n(HOe,"SPAN",{});var Dxt=s(hEe);DNr=r(Dxt,"FlaxAutoModelForSequenceClassification"),Dxt.forEach(t),HOe.forEach(t),ODe=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(cx.$$.fragment,Zl),GNr=i(Zl),Qc=n(Zl,"P",{});var Moe=s(Qc);ONr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NK=n(Moe,"A",{href:!0});var Gxt=s(NK);VNr=r(Gxt,"from_pretrained()"),Gxt.forEach(t),XNr=r(Moe," class method or the "),qK=n(Moe,"A",{href:!0});var Oxt=s(qK);zNr=r(Oxt,"from_config()"),Oxt.forEach(t),WNr=r(Moe,` class
method.`),Moe.forEach(t),QNr=i(Zl),fx=n(Zl,"P",{});var UOe=s(fx);HNr=r(UOe,"This class cannot be instantiated directly using "),pEe=n(UOe,"CODE",{});var Vxt=s(pEe);UNr=r(Vxt,"__init__()"),Vxt.forEach(t),JNr=r(UOe," (throws an error)."),UOe.forEach(t),YNr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var M6=s(Wt);T(mx.$$.fragment,M6),KNr=i(M6),_Ee=n(M6,"P",{});var Xxt=s(_Ee);ZNr=r(Xxt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Xxt.forEach(t),eqr=i(M6),Hc=n(M6,"P",{});var Eoe=s(Hc);oqr=r(Eoe,`Note:
Loading a model from its configuration file does `),uEe=n(Eoe,"STRONG",{});var zxt=s(uEe);rqr=r(zxt,"not"),zxt.forEach(t),tqr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(Eoe,"A",{href:!0});var Wxt=s(jK);aqr=r(Wxt,"from_pretrained()"),Wxt.forEach(t),nqr=r(Eoe," to load the model weights."),Eoe.forEach(t),sqr=i(M6),T(g0.$$.fragment,M6),M6.forEach(t),lqr=i(Zl),Xr=n(Zl,"DIV",{class:!0});var ei=s(Xr);T(gx.$$.fragment,ei),iqr=i(ei),bEe=n(ei,"P",{});var Qxt=s(bEe);dqr=r(Qxt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Qxt.forEach(t),cqr=i(ei),vn=n(ei,"P",{});var E6=s(vn);fqr=r(E6,"The model class to instantiate is selected based on the "),vEe=n(E6,"CODE",{});var Hxt=s(vEe);mqr=r(Hxt,"model_type"),Hxt.forEach(t),gqr=r(E6,` property of the config object (either
passed as an argument or loaded from `),FEe=n(E6,"CODE",{});var Uxt=s(FEe);hqr=r(Uxt,"pretrained_model_name_or_path"),Uxt.forEach(t),pqr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TEe=n(E6,"CODE",{});var Jxt=s(TEe);_qr=r(Jxt,"pretrained_model_name_or_path"),Jxt.forEach(t),uqr=r(E6,":"),E6.forEach(t),bqr=i(ei),$e=n(ei,"UL",{});var qe=s($e);h0=n(qe,"LI",{});var mqe=s(h0);MEe=n(mqe,"STRONG",{});var Yxt=s(MEe);vqr=r(Yxt,"albert"),Yxt.forEach(t),Fqr=r(mqe," \u2014 "),DK=n(mqe,"A",{href:!0});var Kxt=s(DK);Tqr=r(Kxt,"FlaxAlbertForSequenceClassification"),Kxt.forEach(t),Mqr=r(mqe," (ALBERT model)"),mqe.forEach(t),Eqr=i(qe),p0=n(qe,"LI",{});var gqe=s(p0);EEe=n(gqe,"STRONG",{});var Zxt=s(EEe);Cqr=r(Zxt,"bart"),Zxt.forEach(t),wqr=r(gqe," \u2014 "),GK=n(gqe,"A",{href:!0});var e$t=s(GK);Aqr=r(e$t,"FlaxBartForSequenceClassification"),e$t.forEach(t),Lqr=r(gqe," (BART model)"),gqe.forEach(t),yqr=i(qe),_0=n(qe,"LI",{});var hqe=s(_0);CEe=n(hqe,"STRONG",{});var o$t=s(CEe);xqr=r(o$t,"bert"),o$t.forEach(t),$qr=r(hqe," \u2014 "),OK=n(hqe,"A",{href:!0});var r$t=s(OK);kqr=r(r$t,"FlaxBertForSequenceClassification"),r$t.forEach(t),Sqr=r(hqe," (BERT model)"),hqe.forEach(t),Rqr=i(qe),u0=n(qe,"LI",{});var pqe=s(u0);wEe=n(pqe,"STRONG",{});var t$t=s(wEe);Pqr=r(t$t,"big_bird"),t$t.forEach(t),Bqr=r(pqe," \u2014 "),VK=n(pqe,"A",{href:!0});var a$t=s(VK);Iqr=r(a$t,"FlaxBigBirdForSequenceClassification"),a$t.forEach(t),Nqr=r(pqe," (BigBird model)"),pqe.forEach(t),qqr=i(qe),b0=n(qe,"LI",{});var _qe=s(b0);AEe=n(_qe,"STRONG",{});var n$t=s(AEe);jqr=r(n$t,"distilbert"),n$t.forEach(t),Dqr=r(_qe," \u2014 "),XK=n(_qe,"A",{href:!0});var s$t=s(XK);Gqr=r(s$t,"FlaxDistilBertForSequenceClassification"),s$t.forEach(t),Oqr=r(_qe," (DistilBERT model)"),_qe.forEach(t),Vqr=i(qe),v0=n(qe,"LI",{});var uqe=s(v0);LEe=n(uqe,"STRONG",{});var l$t=s(LEe);Xqr=r(l$t,"electra"),l$t.forEach(t),zqr=r(uqe," \u2014 "),zK=n(uqe,"A",{href:!0});var i$t=s(zK);Wqr=r(i$t,"FlaxElectraForSequenceClassification"),i$t.forEach(t),Qqr=r(uqe," (ELECTRA model)"),uqe.forEach(t),Hqr=i(qe),F0=n(qe,"LI",{});var bqe=s(F0);yEe=n(bqe,"STRONG",{});var d$t=s(yEe);Uqr=r(d$t,"mbart"),d$t.forEach(t),Jqr=r(bqe," \u2014 "),WK=n(bqe,"A",{href:!0});var c$t=s(WK);Yqr=r(c$t,"FlaxMBartForSequenceClassification"),c$t.forEach(t),Kqr=r(bqe," (mBART model)"),bqe.forEach(t),Zqr=i(qe),T0=n(qe,"LI",{});var vqe=s(T0);xEe=n(vqe,"STRONG",{});var f$t=s(xEe);ejr=r(f$t,"roberta"),f$t.forEach(t),ojr=r(vqe," \u2014 "),QK=n(vqe,"A",{href:!0});var m$t=s(QK);rjr=r(m$t,"FlaxRobertaForSequenceClassification"),m$t.forEach(t),tjr=r(vqe," (RoBERTa model)"),vqe.forEach(t),ajr=i(qe),M0=n(qe,"LI",{});var Fqe=s(M0);$Ee=n(Fqe,"STRONG",{});var g$t=s($Ee);njr=r(g$t,"roformer"),g$t.forEach(t),sjr=r(Fqe," \u2014 "),HK=n(Fqe,"A",{href:!0});var h$t=s(HK);ljr=r(h$t,"FlaxRoFormerForSequenceClassification"),h$t.forEach(t),ijr=r(Fqe," (RoFormer model)"),Fqe.forEach(t),djr=i(qe),E0=n(qe,"LI",{});var Tqe=s(E0);kEe=n(Tqe,"STRONG",{});var p$t=s(kEe);cjr=r(p$t,"xlm-roberta"),p$t.forEach(t),fjr=r(Tqe," \u2014 "),UK=n(Tqe,"A",{href:!0});var _$t=s(UK);mjr=r(_$t,"FlaxXLMRobertaForSequenceClassification"),_$t.forEach(t),gjr=r(Tqe," (XLM-RoBERTa model)"),Tqe.forEach(t),qe.forEach(t),hjr=i(ei),T(C0.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),VDe=i(f),Uc=n(f,"H2",{class:!0});var JOe=s(Uc);w0=n(JOe,"A",{id:!0,class:!0,href:!0});var u$t=s(w0);SEe=n(u$t,"SPAN",{});var b$t=s(SEe);T(hx.$$.fragment,b$t),b$t.forEach(t),u$t.forEach(t),pjr=i(JOe),REe=n(JOe,"SPAN",{});var v$t=s(REe);_jr=r(v$t,"FlaxAutoModelForQuestionAnswering"),v$t.forEach(t),JOe.forEach(t),XDe=i(f),ur=n(f,"DIV",{class:!0});var oi=s(ur);T(px.$$.fragment,oi),ujr=i(oi),Jc=n(oi,"P",{});var Coe=s(Jc);bjr=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JK=n(Coe,"A",{href:!0});var F$t=s(JK);vjr=r(F$t,"from_pretrained()"),F$t.forEach(t),Fjr=r(Coe," class method or the "),YK=n(Coe,"A",{href:!0});var T$t=s(YK);Tjr=r(T$t,"from_config()"),T$t.forEach(t),Mjr=r(Coe,` class
method.`),Coe.forEach(t),Ejr=i(oi),_x=n(oi,"P",{});var YOe=s(_x);Cjr=r(YOe,"This class cannot be instantiated directly using "),PEe=n(YOe,"CODE",{});var M$t=s(PEe);wjr=r(M$t,"__init__()"),M$t.forEach(t),Ajr=r(YOe," (throws an error)."),YOe.forEach(t),Ljr=i(oi),Qt=n(oi,"DIV",{class:!0});var C6=s(Qt);T(ux.$$.fragment,C6),yjr=i(C6),BEe=n(C6,"P",{});var E$t=s(BEe);xjr=r(E$t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),E$t.forEach(t),$jr=i(C6),Yc=n(C6,"P",{});var woe=s(Yc);kjr=r(woe,`Note:
Loading a model from its configuration file does `),IEe=n(woe,"STRONG",{});var C$t=s(IEe);Sjr=r(C$t,"not"),C$t.forEach(t),Rjr=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=n(woe,"A",{href:!0});var w$t=s(KK);Pjr=r(w$t,"from_pretrained()"),w$t.forEach(t),Bjr=r(woe," to load the model weights."),woe.forEach(t),Ijr=i(C6),T(A0.$$.fragment,C6),C6.forEach(t),Njr=i(oi),zr=n(oi,"DIV",{class:!0});var ri=s(zr);T(bx.$$.fragment,ri),qjr=i(ri),NEe=n(ri,"P",{});var A$t=s(NEe);jjr=r(A$t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),A$t.forEach(t),Djr=i(ri),Fn=n(ri,"P",{});var w6=s(Fn);Gjr=r(w6,"The model class to instantiate is selected based on the "),qEe=n(w6,"CODE",{});var L$t=s(qEe);Ojr=r(L$t,"model_type"),L$t.forEach(t),Vjr=r(w6,` property of the config object (either
passed as an argument or loaded from `),jEe=n(w6,"CODE",{});var y$t=s(jEe);Xjr=r(y$t,"pretrained_model_name_or_path"),y$t.forEach(t),zjr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DEe=n(w6,"CODE",{});var x$t=s(DEe);Wjr=r(x$t,"pretrained_model_name_or_path"),x$t.forEach(t),Qjr=r(w6,":"),w6.forEach(t),Hjr=i(ri),ke=n(ri,"UL",{});var je=s(ke);L0=n(je,"LI",{});var Mqe=s(L0);GEe=n(Mqe,"STRONG",{});var $$t=s(GEe);Ujr=r($$t,"albert"),$$t.forEach(t),Jjr=r(Mqe," \u2014 "),ZK=n(Mqe,"A",{href:!0});var k$t=s(ZK);Yjr=r(k$t,"FlaxAlbertForQuestionAnswering"),k$t.forEach(t),Kjr=r(Mqe," (ALBERT model)"),Mqe.forEach(t),Zjr=i(je),y0=n(je,"LI",{});var Eqe=s(y0);OEe=n(Eqe,"STRONG",{});var S$t=s(OEe);eDr=r(S$t,"bart"),S$t.forEach(t),oDr=r(Eqe," \u2014 "),eZ=n(Eqe,"A",{href:!0});var R$t=s(eZ);rDr=r(R$t,"FlaxBartForQuestionAnswering"),R$t.forEach(t),tDr=r(Eqe," (BART model)"),Eqe.forEach(t),aDr=i(je),x0=n(je,"LI",{});var Cqe=s(x0);VEe=n(Cqe,"STRONG",{});var P$t=s(VEe);nDr=r(P$t,"bert"),P$t.forEach(t),sDr=r(Cqe," \u2014 "),oZ=n(Cqe,"A",{href:!0});var B$t=s(oZ);lDr=r(B$t,"FlaxBertForQuestionAnswering"),B$t.forEach(t),iDr=r(Cqe," (BERT model)"),Cqe.forEach(t),dDr=i(je),$0=n(je,"LI",{});var wqe=s($0);XEe=n(wqe,"STRONG",{});var I$t=s(XEe);cDr=r(I$t,"big_bird"),I$t.forEach(t),fDr=r(wqe," \u2014 "),rZ=n(wqe,"A",{href:!0});var N$t=s(rZ);mDr=r(N$t,"FlaxBigBirdForQuestionAnswering"),N$t.forEach(t),gDr=r(wqe," (BigBird model)"),wqe.forEach(t),hDr=i(je),k0=n(je,"LI",{});var Aqe=s(k0);zEe=n(Aqe,"STRONG",{});var q$t=s(zEe);pDr=r(q$t,"distilbert"),q$t.forEach(t),_Dr=r(Aqe," \u2014 "),tZ=n(Aqe,"A",{href:!0});var j$t=s(tZ);uDr=r(j$t,"FlaxDistilBertForQuestionAnswering"),j$t.forEach(t),bDr=r(Aqe," (DistilBERT model)"),Aqe.forEach(t),vDr=i(je),S0=n(je,"LI",{});var Lqe=s(S0);WEe=n(Lqe,"STRONG",{});var D$t=s(WEe);FDr=r(D$t,"electra"),D$t.forEach(t),TDr=r(Lqe," \u2014 "),aZ=n(Lqe,"A",{href:!0});var G$t=s(aZ);MDr=r(G$t,"FlaxElectraForQuestionAnswering"),G$t.forEach(t),EDr=r(Lqe," (ELECTRA model)"),Lqe.forEach(t),CDr=i(je),R0=n(je,"LI",{});var yqe=s(R0);QEe=n(yqe,"STRONG",{});var O$t=s(QEe);wDr=r(O$t,"mbart"),O$t.forEach(t),ADr=r(yqe," \u2014 "),nZ=n(yqe,"A",{href:!0});var V$t=s(nZ);LDr=r(V$t,"FlaxMBartForQuestionAnswering"),V$t.forEach(t),yDr=r(yqe," (mBART model)"),yqe.forEach(t),xDr=i(je),P0=n(je,"LI",{});var xqe=s(P0);HEe=n(xqe,"STRONG",{});var X$t=s(HEe);$Dr=r(X$t,"roberta"),X$t.forEach(t),kDr=r(xqe," \u2014 "),sZ=n(xqe,"A",{href:!0});var z$t=s(sZ);SDr=r(z$t,"FlaxRobertaForQuestionAnswering"),z$t.forEach(t),RDr=r(xqe," (RoBERTa model)"),xqe.forEach(t),PDr=i(je),B0=n(je,"LI",{});var $qe=s(B0);UEe=n($qe,"STRONG",{});var W$t=s(UEe);BDr=r(W$t,"roformer"),W$t.forEach(t),IDr=r($qe," \u2014 "),lZ=n($qe,"A",{href:!0});var Q$t=s(lZ);NDr=r(Q$t,"FlaxRoFormerForQuestionAnswering"),Q$t.forEach(t),qDr=r($qe," (RoFormer model)"),$qe.forEach(t),jDr=i(je),I0=n(je,"LI",{});var kqe=s(I0);JEe=n(kqe,"STRONG",{});var H$t=s(JEe);DDr=r(H$t,"xlm-roberta"),H$t.forEach(t),GDr=r(kqe," \u2014 "),iZ=n(kqe,"A",{href:!0});var U$t=s(iZ);ODr=r(U$t,"FlaxXLMRobertaForQuestionAnswering"),U$t.forEach(t),VDr=r(kqe," (XLM-RoBERTa model)"),kqe.forEach(t),je.forEach(t),XDr=i(ri),T(N0.$$.fragment,ri),ri.forEach(t),oi.forEach(t),zDe=i(f),Kc=n(f,"H2",{class:!0});var KOe=s(Kc);q0=n(KOe,"A",{id:!0,class:!0,href:!0});var J$t=s(q0);YEe=n(J$t,"SPAN",{});var Y$t=s(YEe);T(vx.$$.fragment,Y$t),Y$t.forEach(t),J$t.forEach(t),zDr=i(KOe),KEe=n(KOe,"SPAN",{});var K$t=s(KEe);WDr=r(K$t,"FlaxAutoModelForTokenClassification"),K$t.forEach(t),KOe.forEach(t),WDe=i(f),br=n(f,"DIV",{class:!0});var ti=s(br);T(Fx.$$.fragment,ti),QDr=i(ti),Zc=n(ti,"P",{});var Aoe=s(Zc);HDr=r(Aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dZ=n(Aoe,"A",{href:!0});var Z$t=s(dZ);UDr=r(Z$t,"from_pretrained()"),Z$t.forEach(t),JDr=r(Aoe," class method or the "),cZ=n(Aoe,"A",{href:!0});var ekt=s(cZ);YDr=r(ekt,"from_config()"),ekt.forEach(t),KDr=r(Aoe,` class
method.`),Aoe.forEach(t),ZDr=i(ti),Tx=n(ti,"P",{});var ZOe=s(Tx);eGr=r(ZOe,"This class cannot be instantiated directly using "),ZEe=n(ZOe,"CODE",{});var okt=s(ZEe);oGr=r(okt,"__init__()"),okt.forEach(t),rGr=r(ZOe," (throws an error)."),ZOe.forEach(t),tGr=i(ti),Ht=n(ti,"DIV",{class:!0});var A6=s(Ht);T(Mx.$$.fragment,A6),aGr=i(A6),eCe=n(A6,"P",{});var rkt=s(eCe);nGr=r(rkt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rkt.forEach(t),sGr=i(A6),ef=n(A6,"P",{});var Loe=s(ef);lGr=r(Loe,`Note:
Loading a model from its configuration file does `),oCe=n(Loe,"STRONG",{});var tkt=s(oCe);iGr=r(tkt,"not"),tkt.forEach(t),dGr=r(Loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=n(Loe,"A",{href:!0});var akt=s(fZ);cGr=r(akt,"from_pretrained()"),akt.forEach(t),fGr=r(Loe," to load the model weights."),Loe.forEach(t),mGr=i(A6),T(j0.$$.fragment,A6),A6.forEach(t),gGr=i(ti),Wr=n(ti,"DIV",{class:!0});var ai=s(Wr);T(Ex.$$.fragment,ai),hGr=i(ai),rCe=n(ai,"P",{});var nkt=s(rCe);pGr=r(nkt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nkt.forEach(t),_Gr=i(ai),Tn=n(ai,"P",{});var L6=s(Tn);uGr=r(L6,"The model class to instantiate is selected based on the "),tCe=n(L6,"CODE",{});var skt=s(tCe);bGr=r(skt,"model_type"),skt.forEach(t),vGr=r(L6,` property of the config object (either
passed as an argument or loaded from `),aCe=n(L6,"CODE",{});var lkt=s(aCe);FGr=r(lkt,"pretrained_model_name_or_path"),lkt.forEach(t),TGr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nCe=n(L6,"CODE",{});var ikt=s(nCe);MGr=r(ikt,"pretrained_model_name_or_path"),ikt.forEach(t),EGr=r(L6,":"),L6.forEach(t),CGr=i(ai),Ge=n(ai,"UL",{});var Fo=s(Ge);D0=n(Fo,"LI",{});var Sqe=s(D0);sCe=n(Sqe,"STRONG",{});var dkt=s(sCe);wGr=r(dkt,"albert"),dkt.forEach(t),AGr=r(Sqe," \u2014 "),mZ=n(Sqe,"A",{href:!0});var ckt=s(mZ);LGr=r(ckt,"FlaxAlbertForTokenClassification"),ckt.forEach(t),yGr=r(Sqe," (ALBERT model)"),Sqe.forEach(t),xGr=i(Fo),G0=n(Fo,"LI",{});var Rqe=s(G0);lCe=n(Rqe,"STRONG",{});var fkt=s(lCe);$Gr=r(fkt,"bert"),fkt.forEach(t),kGr=r(Rqe," \u2014 "),gZ=n(Rqe,"A",{href:!0});var mkt=s(gZ);SGr=r(mkt,"FlaxBertForTokenClassification"),mkt.forEach(t),RGr=r(Rqe," (BERT model)"),Rqe.forEach(t),PGr=i(Fo),O0=n(Fo,"LI",{});var Pqe=s(O0);iCe=n(Pqe,"STRONG",{});var gkt=s(iCe);BGr=r(gkt,"big_bird"),gkt.forEach(t),IGr=r(Pqe," \u2014 "),hZ=n(Pqe,"A",{href:!0});var hkt=s(hZ);NGr=r(hkt,"FlaxBigBirdForTokenClassification"),hkt.forEach(t),qGr=r(Pqe," (BigBird model)"),Pqe.forEach(t),jGr=i(Fo),V0=n(Fo,"LI",{});var Bqe=s(V0);dCe=n(Bqe,"STRONG",{});var pkt=s(dCe);DGr=r(pkt,"distilbert"),pkt.forEach(t),GGr=r(Bqe," \u2014 "),pZ=n(Bqe,"A",{href:!0});var _kt=s(pZ);OGr=r(_kt,"FlaxDistilBertForTokenClassification"),_kt.forEach(t),VGr=r(Bqe," (DistilBERT model)"),Bqe.forEach(t),XGr=i(Fo),X0=n(Fo,"LI",{});var Iqe=s(X0);cCe=n(Iqe,"STRONG",{});var ukt=s(cCe);zGr=r(ukt,"electra"),ukt.forEach(t),WGr=r(Iqe," \u2014 "),_Z=n(Iqe,"A",{href:!0});var bkt=s(_Z);QGr=r(bkt,"FlaxElectraForTokenClassification"),bkt.forEach(t),HGr=r(Iqe," (ELECTRA model)"),Iqe.forEach(t),UGr=i(Fo),z0=n(Fo,"LI",{});var Nqe=s(z0);fCe=n(Nqe,"STRONG",{});var vkt=s(fCe);JGr=r(vkt,"roberta"),vkt.forEach(t),YGr=r(Nqe," \u2014 "),uZ=n(Nqe,"A",{href:!0});var Fkt=s(uZ);KGr=r(Fkt,"FlaxRobertaForTokenClassification"),Fkt.forEach(t),ZGr=r(Nqe," (RoBERTa model)"),Nqe.forEach(t),eOr=i(Fo),W0=n(Fo,"LI",{});var qqe=s(W0);mCe=n(qqe,"STRONG",{});var Tkt=s(mCe);oOr=r(Tkt,"roformer"),Tkt.forEach(t),rOr=r(qqe," \u2014 "),bZ=n(qqe,"A",{href:!0});var Mkt=s(bZ);tOr=r(Mkt,"FlaxRoFormerForTokenClassification"),Mkt.forEach(t),aOr=r(qqe," (RoFormer model)"),qqe.forEach(t),nOr=i(Fo),Q0=n(Fo,"LI",{});var jqe=s(Q0);gCe=n(jqe,"STRONG",{});var Ekt=s(gCe);sOr=r(Ekt,"xlm-roberta"),Ekt.forEach(t),lOr=r(jqe," \u2014 "),vZ=n(jqe,"A",{href:!0});var Ckt=s(vZ);iOr=r(Ckt,"FlaxXLMRobertaForTokenClassification"),Ckt.forEach(t),dOr=r(jqe," (XLM-RoBERTa model)"),jqe.forEach(t),Fo.forEach(t),cOr=i(ai),T(H0.$$.fragment,ai),ai.forEach(t),ti.forEach(t),QDe=i(f),of=n(f,"H2",{class:!0});var eVe=s(of);U0=n(eVe,"A",{id:!0,class:!0,href:!0});var wkt=s(U0);hCe=n(wkt,"SPAN",{});var Akt=s(hCe);T(Cx.$$.fragment,Akt),Akt.forEach(t),wkt.forEach(t),fOr=i(eVe),pCe=n(eVe,"SPAN",{});var Lkt=s(pCe);mOr=r(Lkt,"FlaxAutoModelForMultipleChoice"),Lkt.forEach(t),eVe.forEach(t),HDe=i(f),vr=n(f,"DIV",{class:!0});var ni=s(vr);T(wx.$$.fragment,ni),gOr=i(ni),rf=n(ni,"P",{});var yoe=s(rf);hOr=r(yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FZ=n(yoe,"A",{href:!0});var ykt=s(FZ);pOr=r(ykt,"from_pretrained()"),ykt.forEach(t),_Or=r(yoe," class method or the "),TZ=n(yoe,"A",{href:!0});var xkt=s(TZ);uOr=r(xkt,"from_config()"),xkt.forEach(t),bOr=r(yoe,` class
method.`),yoe.forEach(t),vOr=i(ni),Ax=n(ni,"P",{});var oVe=s(Ax);FOr=r(oVe,"This class cannot be instantiated directly using "),_Ce=n(oVe,"CODE",{});var $kt=s(_Ce);TOr=r($kt,"__init__()"),$kt.forEach(t),MOr=r(oVe," (throws an error)."),oVe.forEach(t),EOr=i(ni),Ut=n(ni,"DIV",{class:!0});var y6=s(Ut);T(Lx.$$.fragment,y6),COr=i(y6),uCe=n(y6,"P",{});var kkt=s(uCe);wOr=r(kkt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kkt.forEach(t),AOr=i(y6),tf=n(y6,"P",{});var xoe=s(tf);LOr=r(xoe,`Note:
Loading a model from its configuration file does `),bCe=n(xoe,"STRONG",{});var Skt=s(bCe);yOr=r(Skt,"not"),Skt.forEach(t),xOr=r(xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=n(xoe,"A",{href:!0});var Rkt=s(MZ);$Or=r(Rkt,"from_pretrained()"),Rkt.forEach(t),kOr=r(xoe," to load the model weights."),xoe.forEach(t),SOr=i(y6),T(J0.$$.fragment,y6),y6.forEach(t),ROr=i(ni),Qr=n(ni,"DIV",{class:!0});var si=s(Qr);T(yx.$$.fragment,si),POr=i(si),vCe=n(si,"P",{});var Pkt=s(vCe);BOr=r(Pkt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Pkt.forEach(t),IOr=i(si),Mn=n(si,"P",{});var x6=s(Mn);NOr=r(x6,"The model class to instantiate is selected based on the "),FCe=n(x6,"CODE",{});var Bkt=s(FCe);qOr=r(Bkt,"model_type"),Bkt.forEach(t),jOr=r(x6,` property of the config object (either
passed as an argument or loaded from `),TCe=n(x6,"CODE",{});var Ikt=s(TCe);DOr=r(Ikt,"pretrained_model_name_or_path"),Ikt.forEach(t),GOr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MCe=n(x6,"CODE",{});var Nkt=s(MCe);OOr=r(Nkt,"pretrained_model_name_or_path"),Nkt.forEach(t),VOr=r(x6,":"),x6.forEach(t),XOr=i(si),Oe=n(si,"UL",{});var To=s(Oe);Y0=n(To,"LI",{});var Dqe=s(Y0);ECe=n(Dqe,"STRONG",{});var qkt=s(ECe);zOr=r(qkt,"albert"),qkt.forEach(t),WOr=r(Dqe," \u2014 "),EZ=n(Dqe,"A",{href:!0});var jkt=s(EZ);QOr=r(jkt,"FlaxAlbertForMultipleChoice"),jkt.forEach(t),HOr=r(Dqe," (ALBERT model)"),Dqe.forEach(t),UOr=i(To),K0=n(To,"LI",{});var Gqe=s(K0);CCe=n(Gqe,"STRONG",{});var Dkt=s(CCe);JOr=r(Dkt,"bert"),Dkt.forEach(t),YOr=r(Gqe," \u2014 "),CZ=n(Gqe,"A",{href:!0});var Gkt=s(CZ);KOr=r(Gkt,"FlaxBertForMultipleChoice"),Gkt.forEach(t),ZOr=r(Gqe," (BERT model)"),Gqe.forEach(t),eVr=i(To),Z0=n(To,"LI",{});var Oqe=s(Z0);wCe=n(Oqe,"STRONG",{});var Okt=s(wCe);oVr=r(Okt,"big_bird"),Okt.forEach(t),rVr=r(Oqe," \u2014 "),wZ=n(Oqe,"A",{href:!0});var Vkt=s(wZ);tVr=r(Vkt,"FlaxBigBirdForMultipleChoice"),Vkt.forEach(t),aVr=r(Oqe," (BigBird model)"),Oqe.forEach(t),nVr=i(To),ew=n(To,"LI",{});var Vqe=s(ew);ACe=n(Vqe,"STRONG",{});var Xkt=s(ACe);sVr=r(Xkt,"distilbert"),Xkt.forEach(t),lVr=r(Vqe," \u2014 "),AZ=n(Vqe,"A",{href:!0});var zkt=s(AZ);iVr=r(zkt,"FlaxDistilBertForMultipleChoice"),zkt.forEach(t),dVr=r(Vqe," (DistilBERT model)"),Vqe.forEach(t),cVr=i(To),ow=n(To,"LI",{});var Xqe=s(ow);LCe=n(Xqe,"STRONG",{});var Wkt=s(LCe);fVr=r(Wkt,"electra"),Wkt.forEach(t),mVr=r(Xqe," \u2014 "),LZ=n(Xqe,"A",{href:!0});var Qkt=s(LZ);gVr=r(Qkt,"FlaxElectraForMultipleChoice"),Qkt.forEach(t),hVr=r(Xqe," (ELECTRA model)"),Xqe.forEach(t),pVr=i(To),rw=n(To,"LI",{});var zqe=s(rw);yCe=n(zqe,"STRONG",{});var Hkt=s(yCe);_Vr=r(Hkt,"roberta"),Hkt.forEach(t),uVr=r(zqe," \u2014 "),yZ=n(zqe,"A",{href:!0});var Ukt=s(yZ);bVr=r(Ukt,"FlaxRobertaForMultipleChoice"),Ukt.forEach(t),vVr=r(zqe," (RoBERTa model)"),zqe.forEach(t),FVr=i(To),tw=n(To,"LI",{});var Wqe=s(tw);xCe=n(Wqe,"STRONG",{});var Jkt=s(xCe);TVr=r(Jkt,"roformer"),Jkt.forEach(t),MVr=r(Wqe," \u2014 "),xZ=n(Wqe,"A",{href:!0});var Ykt=s(xZ);EVr=r(Ykt,"FlaxRoFormerForMultipleChoice"),Ykt.forEach(t),CVr=r(Wqe," (RoFormer model)"),Wqe.forEach(t),wVr=i(To),aw=n(To,"LI",{});var Qqe=s(aw);$Ce=n(Qqe,"STRONG",{});var Kkt=s($Ce);AVr=r(Kkt,"xlm-roberta"),Kkt.forEach(t),LVr=r(Qqe," \u2014 "),$Z=n(Qqe,"A",{href:!0});var Zkt=s($Z);yVr=r(Zkt,"FlaxXLMRobertaForMultipleChoice"),Zkt.forEach(t),xVr=r(Qqe," (XLM-RoBERTa model)"),Qqe.forEach(t),To.forEach(t),$Vr=i(si),T(nw.$$.fragment,si),si.forEach(t),ni.forEach(t),UDe=i(f),af=n(f,"H2",{class:!0});var rVe=s(af);sw=n(rVe,"A",{id:!0,class:!0,href:!0});var eSt=s(sw);kCe=n(eSt,"SPAN",{});var oSt=s(kCe);T(xx.$$.fragment,oSt),oSt.forEach(t),eSt.forEach(t),kVr=i(rVe),SCe=n(rVe,"SPAN",{});var rSt=s(SCe);SVr=r(rSt,"FlaxAutoModelForNextSentencePrediction"),rSt.forEach(t),rVe.forEach(t),JDe=i(f),Fr=n(f,"DIV",{class:!0});var li=s(Fr);T($x.$$.fragment,li),RVr=i(li),nf=n(li,"P",{});var $oe=s(nf);PVr=r($oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kZ=n($oe,"A",{href:!0});var tSt=s(kZ);BVr=r(tSt,"from_pretrained()"),tSt.forEach(t),IVr=r($oe," class method or the "),SZ=n($oe,"A",{href:!0});var aSt=s(SZ);NVr=r(aSt,"from_config()"),aSt.forEach(t),qVr=r($oe,` class
method.`),$oe.forEach(t),jVr=i(li),kx=n(li,"P",{});var tVe=s(kx);DVr=r(tVe,"This class cannot be instantiated directly using "),RCe=n(tVe,"CODE",{});var nSt=s(RCe);GVr=r(nSt,"__init__()"),nSt.forEach(t),OVr=r(tVe," (throws an error)."),tVe.forEach(t),VVr=i(li),Jt=n(li,"DIV",{class:!0});var $6=s(Jt);T(Sx.$$.fragment,$6),XVr=i($6),PCe=n($6,"P",{});var sSt=s(PCe);zVr=r(sSt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sSt.forEach(t),WVr=i($6),sf=n($6,"P",{});var koe=s(sf);QVr=r(koe,`Note:
Loading a model from its configuration file does `),BCe=n(koe,"STRONG",{});var lSt=s(BCe);HVr=r(lSt,"not"),lSt.forEach(t),UVr=r(koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),RZ=n(koe,"A",{href:!0});var iSt=s(RZ);JVr=r(iSt,"from_pretrained()"),iSt.forEach(t),YVr=r(koe," to load the model weights."),koe.forEach(t),KVr=i($6),T(lw.$$.fragment,$6),$6.forEach(t),ZVr=i(li),Hr=n(li,"DIV",{class:!0});var ii=s(Hr);T(Rx.$$.fragment,ii),eXr=i(ii),ICe=n(ii,"P",{});var dSt=s(ICe);oXr=r(dSt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dSt.forEach(t),rXr=i(ii),En=n(ii,"P",{});var k6=s(En);tXr=r(k6,"The model class to instantiate is selected based on the "),NCe=n(k6,"CODE",{});var cSt=s(NCe);aXr=r(cSt,"model_type"),cSt.forEach(t),nXr=r(k6,` property of the config object (either
passed as an argument or loaded from `),qCe=n(k6,"CODE",{});var fSt=s(qCe);sXr=r(fSt,"pretrained_model_name_or_path"),fSt.forEach(t),lXr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jCe=n(k6,"CODE",{});var mSt=s(jCe);iXr=r(mSt,"pretrained_model_name_or_path"),mSt.forEach(t),dXr=r(k6,":"),k6.forEach(t),cXr=i(ii),DCe=n(ii,"UL",{});var gSt=s(DCe);iw=n(gSt,"LI",{});var Hqe=s(iw);GCe=n(Hqe,"STRONG",{});var hSt=s(GCe);fXr=r(hSt,"bert"),hSt.forEach(t),mXr=r(Hqe," \u2014 "),PZ=n(Hqe,"A",{href:!0});var pSt=s(PZ);gXr=r(pSt,"FlaxBertForNextSentencePrediction"),pSt.forEach(t),hXr=r(Hqe," (BERT model)"),Hqe.forEach(t),gSt.forEach(t),pXr=i(ii),T(dw.$$.fragment,ii),ii.forEach(t),li.forEach(t),YDe=i(f),lf=n(f,"H2",{class:!0});var aVe=s(lf);cw=n(aVe,"A",{id:!0,class:!0,href:!0});var _St=s(cw);OCe=n(_St,"SPAN",{});var uSt=s(OCe);T(Px.$$.fragment,uSt),uSt.forEach(t),_St.forEach(t),_Xr=i(aVe),VCe=n(aVe,"SPAN",{});var bSt=s(VCe);uXr=r(bSt,"FlaxAutoModelForImageClassification"),bSt.forEach(t),aVe.forEach(t),KDe=i(f),Tr=n(f,"DIV",{class:!0});var di=s(Tr);T(Bx.$$.fragment,di),bXr=i(di),df=n(di,"P",{});var Soe=s(df);vXr=r(Soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BZ=n(Soe,"A",{href:!0});var vSt=s(BZ);FXr=r(vSt,"from_pretrained()"),vSt.forEach(t),TXr=r(Soe," class method or the "),IZ=n(Soe,"A",{href:!0});var FSt=s(IZ);MXr=r(FSt,"from_config()"),FSt.forEach(t),EXr=r(Soe,` class
method.`),Soe.forEach(t),CXr=i(di),Ix=n(di,"P",{});var nVe=s(Ix);wXr=r(nVe,"This class cannot be instantiated directly using "),XCe=n(nVe,"CODE",{});var TSt=s(XCe);AXr=r(TSt,"__init__()"),TSt.forEach(t),LXr=r(nVe," (throws an error)."),nVe.forEach(t),yXr=i(di),Yt=n(di,"DIV",{class:!0});var S6=s(Yt);T(Nx.$$.fragment,S6),xXr=i(S6),zCe=n(S6,"P",{});var MSt=s(zCe);$Xr=r(MSt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),MSt.forEach(t),kXr=i(S6),cf=n(S6,"P",{});var Roe=s(cf);SXr=r(Roe,`Note:
Loading a model from its configuration file does `),WCe=n(Roe,"STRONG",{});var ESt=s(WCe);RXr=r(ESt,"not"),ESt.forEach(t),PXr=r(Roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NZ=n(Roe,"A",{href:!0});var CSt=s(NZ);BXr=r(CSt,"from_pretrained()"),CSt.forEach(t),IXr=r(Roe," to load the model weights."),Roe.forEach(t),NXr=i(S6),T(fw.$$.fragment,S6),S6.forEach(t),qXr=i(di),Ur=n(di,"DIV",{class:!0});var ci=s(Ur);T(qx.$$.fragment,ci),jXr=i(ci),QCe=n(ci,"P",{});var wSt=s(QCe);DXr=r(wSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wSt.forEach(t),GXr=i(ci),Cn=n(ci,"P",{});var R6=s(Cn);OXr=r(R6,"The model class to instantiate is selected based on the "),HCe=n(R6,"CODE",{});var ASt=s(HCe);VXr=r(ASt,"model_type"),ASt.forEach(t),XXr=r(R6,` property of the config object (either
passed as an argument or loaded from `),UCe=n(R6,"CODE",{});var LSt=s(UCe);zXr=r(LSt,"pretrained_model_name_or_path"),LSt.forEach(t),WXr=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JCe=n(R6,"CODE",{});var ySt=s(JCe);QXr=r(ySt,"pretrained_model_name_or_path"),ySt.forEach(t),HXr=r(R6,":"),R6.forEach(t),UXr=i(ci),jx=n(ci,"UL",{});var sVe=s(jx);mw=n(sVe,"LI",{});var Uqe=s(mw);YCe=n(Uqe,"STRONG",{});var xSt=s(YCe);JXr=r(xSt,"beit"),xSt.forEach(t),YXr=r(Uqe," \u2014 "),qZ=n(Uqe,"A",{href:!0});var $St=s(qZ);KXr=r($St,"FlaxBeitForImageClassification"),$St.forEach(t),ZXr=r(Uqe," (BEiT model)"),Uqe.forEach(t),ezr=i(sVe),gw=n(sVe,"LI",{});var Jqe=s(gw);KCe=n(Jqe,"STRONG",{});var kSt=s(KCe);ozr=r(kSt,"vit"),kSt.forEach(t),rzr=r(Jqe," \u2014 "),jZ=n(Jqe,"A",{href:!0});var SSt=s(jZ);tzr=r(SSt,"FlaxViTForImageClassification"),SSt.forEach(t),azr=r(Jqe," (ViT model)"),Jqe.forEach(t),sVe.forEach(t),nzr=i(ci),T(hw.$$.fragment,ci),ci.forEach(t),di.forEach(t),ZDe=i(f),ff=n(f,"H2",{class:!0});var lVe=s(ff);pw=n(lVe,"A",{id:!0,class:!0,href:!0});var RSt=s(pw);ZCe=n(RSt,"SPAN",{});var PSt=s(ZCe);T(Dx.$$.fragment,PSt),PSt.forEach(t),RSt.forEach(t),szr=i(lVe),e5e=n(lVe,"SPAN",{});var BSt=s(e5e);lzr=r(BSt,"FlaxAutoModelForVision2Seq"),BSt.forEach(t),lVe.forEach(t),eGe=i(f),Mr=n(f,"DIV",{class:!0});var fi=s(Mr);T(Gx.$$.fragment,fi),izr=i(fi),mf=n(fi,"P",{});var Poe=s(mf);dzr=r(Poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DZ=n(Poe,"A",{href:!0});var ISt=s(DZ);czr=r(ISt,"from_pretrained()"),ISt.forEach(t),fzr=r(Poe," class method or the "),GZ=n(Poe,"A",{href:!0});var NSt=s(GZ);mzr=r(NSt,"from_config()"),NSt.forEach(t),gzr=r(Poe,` class
method.`),Poe.forEach(t),hzr=i(fi),Ox=n(fi,"P",{});var iVe=s(Ox);pzr=r(iVe,"This class cannot be instantiated directly using "),o5e=n(iVe,"CODE",{});var qSt=s(o5e);_zr=r(qSt,"__init__()"),qSt.forEach(t),uzr=r(iVe," (throws an error)."),iVe.forEach(t),bzr=i(fi),Kt=n(fi,"DIV",{class:!0});var P6=s(Kt);T(Vx.$$.fragment,P6),vzr=i(P6),r5e=n(P6,"P",{});var jSt=s(r5e);Fzr=r(jSt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jSt.forEach(t),Tzr=i(P6),gf=n(P6,"P",{});var Boe=s(gf);Mzr=r(Boe,`Note:
Loading a model from its configuration file does `),t5e=n(Boe,"STRONG",{});var DSt=s(t5e);Ezr=r(DSt,"not"),DSt.forEach(t),Czr=r(Boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(Boe,"A",{href:!0});var GSt=s(OZ);wzr=r(GSt,"from_pretrained()"),GSt.forEach(t),Azr=r(Boe," to load the model weights."),Boe.forEach(t),Lzr=i(P6),T(_w.$$.fragment,P6),P6.forEach(t),yzr=i(fi),Jr=n(fi,"DIV",{class:!0});var mi=s(Jr);T(Xx.$$.fragment,mi),xzr=i(mi),a5e=n(mi,"P",{});var OSt=s(a5e);$zr=r(OSt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),OSt.forEach(t),kzr=i(mi),wn=n(mi,"P",{});var B6=s(wn);Szr=r(B6,"The model class to instantiate is selected based on the "),n5e=n(B6,"CODE",{});var VSt=s(n5e);Rzr=r(VSt,"model_type"),VSt.forEach(t),Pzr=r(B6,` property of the config object (either
passed as an argument or loaded from `),s5e=n(B6,"CODE",{});var XSt=s(s5e);Bzr=r(XSt,"pretrained_model_name_or_path"),XSt.forEach(t),Izr=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l5e=n(B6,"CODE",{});var zSt=s(l5e);Nzr=r(zSt,"pretrained_model_name_or_path"),zSt.forEach(t),qzr=r(B6,":"),B6.forEach(t),jzr=i(mi),i5e=n(mi,"UL",{});var WSt=s(i5e);uw=n(WSt,"LI",{});var Yqe=s(uw);d5e=n(Yqe,"STRONG",{});var QSt=s(d5e);Dzr=r(QSt,"vision-encoder-decoder"),QSt.forEach(t),Gzr=r(Yqe," \u2014 "),VZ=n(Yqe,"A",{href:!0});var HSt=s(VZ);Ozr=r(HSt,"FlaxVisionEncoderDecoderModel"),HSt.forEach(t),Vzr=r(Yqe," (Vision Encoder decoder model)"),Yqe.forEach(t),WSt.forEach(t),Xzr=i(mi),T(bw.$$.fragment,mi),mi.forEach(t),fi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(KPt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Ln,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoTokenizer"),c(vi,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertModel"),c(Tf,"id","extending-the-auto-classes"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#extending-the-auto-classes"),c(Fi,"class","relative group"),c(Ef,"id","transformers.AutoConfig"),c(Ef,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ef,"href","#transformers.AutoConfig"),c(Ti,"class","relative group"),c(mk,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(gk,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig"),c(hk,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig"),c(pk,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitConfig"),c(_k,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig"),c(uk,"href","/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(bk,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig"),c(vk,"href","/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Fk,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Tk,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Mk,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig"),c(Ek,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineConfig"),c(Ck,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPConfig"),c(wk,"href","/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenConfig"),c(Ak,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig"),c(Lk,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextConfig"),c(yk,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig"),c(xk,"href","/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtConfig"),c($k,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(kk,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Sk,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Rk,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig"),c(Pk,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Bk,"href","/docs/transformers/pr_17443/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Ik,"href","/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTConfig"),c(Nk,"href","/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrConfig"),c(qk,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig"),c(jk,"href","/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRConfig"),c(Dk,"href","/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTConfig"),c(Gk,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig"),c(Ok,"href","/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Vk,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Xk,"href","/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaConfig"),c(zk,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig"),c(Wk,"href","/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTConfig"),c(Qk,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig"),c(Hk,"href","/docs/transformers/pr_17443/en/model_doc/glpn#transformers.GLPNConfig"),c(Uk,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config"),c(Jk,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Yk,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Kk,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig"),c(Zk,"href","/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertConfig"),c(eS,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig"),c(oS,"href","/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(rS,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(tS,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(aS,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(nS,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig"),c(sS,"href","/docs/transformers/pr_17443/en/model_doc/levit#transformers.LevitConfig"),c(lS,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig"),c(iS,"href","/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeConfig"),c(dS,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertConfig"),c(cS,"href","/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100Config"),c(fS,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig"),c(mS,"href","/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(gS,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig"),c(hS,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(pS,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(_S,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig"),c(uS,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config"),c(bS,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(vS,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(FS,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig"),c(TS,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig"),c(MS,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverConfig"),c(ES,"href","/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartConfig"),c(CS,"href","/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(wS,"href","/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(AS,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(LS,"href","/docs/transformers/pr_17443/en/model_doc/rag#transformers.RagConfig"),c(yS,"href","/docs/transformers/pr_17443/en/model_doc/realm#transformers.RealmConfig"),c(xS,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerConfig"),c($S,"href","/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetConfig"),c(kS,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig"),c(SS,"href","/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetConfig"),c(RS,"href","/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertConfig"),c(PS,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig"),c(BS,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig"),c(IS,"href","/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerConfig"),c(NS,"href","/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWConfig"),c(qS,"href","/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDConfig"),c(jS,"href","/docs/transformers/pr_17443/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(DS,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(GS,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(OS,"href","/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterConfig"),c(VS,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(XS,"href","/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinConfig"),c(zS,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config"),c(WS,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig"),c(QS,"href","/docs/transformers/pr_17443/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(HS,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(US,"href","/docs/transformers/pr_17443/en/model_doc/trocr#transformers.TrOCRConfig"),c(JS,"href","/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(YS,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(KS,"href","/docs/transformers/pr_17443/en/model_doc/van#transformers.VanConfig"),c(ZS,"href","/docs/transformers/pr_17443/en/model_doc/vilt#transformers.ViltConfig"),c(eR,"href","/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(oR,"href","/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(rR,"href","/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(tR,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig"),c(aR,"href","/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(nR,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(sR,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(lR,"href","/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMConfig"),c(iR,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMConfig"),c(dR,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig"),c(cR,"href","/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(fR,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(mR,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(gR,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig"),c(hR,"href","/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosConfig"),c(pR,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xg,"id","transformers.AutoTokenizer"),c(xg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xg,"href","#transformers.AutoTokenizer"),c(Ei,"class","relative group"),c(_R,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(uR,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertTokenizer"),c(bR,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(vR,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartTokenizer"),c(FR,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartTokenizerFast"),c(TR,"href","/docs/transformers/pr_17443/en/model_doc/barthez#transformers.BarthezTokenizer"),c(MR,"href","/docs/transformers/pr_17443/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(ER,"href","/docs/transformers/pr_17443/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(CR,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizer"),c(wR,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizerFast"),c(AR,"href","/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(LR,"href","/docs/transformers/pr_17443/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(yR,"href","/docs/transformers/pr_17443/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(xR,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c($R,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(kR,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(SR,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(RR,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(PR,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(BR,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(IR,"href","/docs/transformers/pr_17443/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(NR,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertTokenizer"),c(qR,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(jR,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineTokenizer"),c(DR,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPTokenizer"),c(GR,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(OR,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(VR,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(XR,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(zR,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(WR,"href","/docs/transformers/pr_17443/en/model_doc/cpm#transformers.CpmTokenizer"),c(QR,"href","/docs/transformers/pr_17443/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(HR,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(UR,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizer"),c(JR,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(YR,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaTokenizer"),c(KR,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(eP,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(oP,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(rP,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(tP,"href","/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(aP,"href","/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(nP,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraTokenizer"),c(sP,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(lP,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(iP,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetTokenizer"),c(dP,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(cP,"href","/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(fP,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelTokenizer"),c(mP,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(gP,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(hP,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(pP,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(_P,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(uP,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(bP,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(vP,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(FP,"href","/docs/transformers/pr_17443/en/model_doc/herbert#transformers.HerbertTokenizer"),c(TP,"href","/docs/transformers/pr_17443/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(MP,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(EP,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizer"),c(CP,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(wP,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(AP,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(LP,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(yP,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(xP,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c($P,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(kP,"href","/docs/transformers/pr_17443/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(SP,"href","/docs/transformers/pr_17443/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(RP,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDTokenizer"),c(PP,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDTokenizerFast"),c(BP,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerTokenizer"),c(IP,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(NP,"href","/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeTokenizer"),c(qP,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(jP,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(DP,"href","/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(GP,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianTokenizer"),c(OP,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartTokenizer"),c(VP,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(XP,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(zP,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(WP,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizer"),c(QP,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizerFast"),c(HP,"href","/docs/transformers/pr_17443/en/model_doc/mluke#transformers.MLukeTokenizer"),c(UP,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(JP,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(YP,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(KP,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Tokenizer"),c(eB,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5TokenizerFast"),c(oB,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertTokenizer"),c(rB,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(tB,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(aB,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(nB,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sB,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(lB,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(iB,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(dB,"href","/docs/transformers/pr_17443/en/model_doc/phobert#transformers.PhobertTokenizer"),c(cB,"href","/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartTokenizer"),c(fB,"href","/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(mB,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizer"),c(gB,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizerFast"),c(hB,"href","/docs/transformers/pr_17443/en/model_doc/rag#transformers.RagTokenizer"),c(pB,"href","/docs/transformers/pr_17443/en/model_doc/realm#transformers.RealmTokenizer"),c(_B,"href","/docs/transformers/pr_17443/en/model_doc/realm#transformers.RealmTokenizerFast"),c(uB,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerTokenizer"),c(bB,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(vB,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertTokenizer"),c(FB,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(TB,"href","/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(MB,"href","/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(EB,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizer"),c(CB,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(wB,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(AB,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(LB,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(yB,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(xB,"href","/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterTokenizer"),c($B,"href","/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(kB,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(SB,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(RB,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Tokenizer"),c(PB,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5TokenizerFast"),c(BB,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasTokenizer"),c(IB,"href","/docs/transformers/pr_17443/en/model_doc/tapex#transformers.TapexTokenizer"),c(NB,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(qB,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizer"),c(jB,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizerFast"),c(DB,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(GB,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(OB,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(VB,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMTokenizer"),c(XB,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(zB,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMTokenizer"),c(WB,"href","/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(QB,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(HB,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(UB,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizer"),c(JB,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(YB,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(KB,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(ZB,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertTokenizer"),c(eI,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ch,"id","transformers.AutoFeatureExtractor"),c(ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ch,"href","#transformers.AutoFeatureExtractor"),c(Ci,"class","relative group"),c(oI,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(rI,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(lI,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(iI,"href","/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17443/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(gI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hI,"href","/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(pI,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(_I,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(uI,"href","/docs/transformers/pr_17443/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(bI,"href","/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(vI,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(FI,"href","/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(TI,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MI,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(EI,"href","/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(CI,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(wI,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(AI,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(LI,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yI,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(xI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($I,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(kI,"href","/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"id","transformers.AutoProcessor"),c(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xh,"href","#transformers.AutoProcessor"),c(wi,"class","relative group"),c(SI,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(RI,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPProcessor"),c(PI,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(BI,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(II,"href","/docs/transformers/pr_17443/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(NI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jI,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(DI,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(GI,"href","/docs/transformers/pr_17443/en/model_doc/trocr#transformers.TrOCRProcessor"),c(OI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XI,"href","/docs/transformers/pr_17443/en/model_doc/vilt#transformers.ViltProcessor"),c(zI,"href","/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(WI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(HI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fp,"id","transformers.AutoModel"),c(fp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fp,"href","#transformers.AutoModel"),c(Li,"class","relative group"),c(UI,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JI,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YI,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KI,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertModel"),c(ZI,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartModel"),c(eN,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitModel"),c(oN,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertModel"),c(rN,"href","/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(tN,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdModel"),c(aN,"href","/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(nN,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(sN,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(lN,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertModel"),c(iN,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineModel"),c(dN,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPModel"),c(cN,"href","/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenModel"),c(fN,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertModel"),c(mN,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextModel"),c(gN,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLModel"),c(hN,"href","/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtModel"),c(pN,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(_N,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(uN,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(bN,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaModel"),c(vN,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(FN,"href","/docs/transformers/pr_17443/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(TN,"href","/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTModel"),c(MN,"href","/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrModel"),c(EN,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertModel"),c(CN,"href","/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(wN,"href","/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTModel"),c(AN,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraModel"),c(LN,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertModel"),c(yN,"href","/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaModel"),c(xN,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetModel"),c($N,"href","/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTModel"),c(kN,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelModel"),c(SN,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelBaseModel"),c(RN,"href","/docs/transformers/pr_17443/en/model_doc/glpn#transformers.GLPNModel"),c(PN,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Model"),c(BN,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(IN,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(NN,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJModel"),c(qN,"href","/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertModel"),c(jN,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertModel"),c(DN,"href","/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(GN,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(ON,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(VN,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(XN,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDModel"),c(zN,"href","/docs/transformers/pr_17443/en/model_doc/levit#transformers.LevitModel"),c(WN,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerModel"),c(QN,"href","/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeModel"),c(HN,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertModel"),c(UN,"href","/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100Model"),c(JN,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianModel"),c(YN,"href","/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerModel"),c(KN,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartModel"),c(ZN,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(eq,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertModel"),c(oq,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetModel"),c(rq,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Model"),c(tq,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerModel"),c(aq,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(nq,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTModel"),c(sq,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusModel"),c(lq,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverModel"),c(iq,"href","/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartModel"),c(dq,"href","/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerModel"),c(cq,"href","/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(fq,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertModel"),c(mq,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerModel"),c(gq,"href","/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetModel"),c(hq,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertModel"),c(pq,"href","/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetModel"),c(_q,"href","/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertModel"),c(uq,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaModel"),c(bq,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerModel"),c(vq,"href","/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerModel"),c(Fq,"href","/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWModel"),c(Tq,"href","/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDModel"),c(Mq,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Eq,"href","/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterModel"),c(Cq,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(wq,"href","/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinModel"),c(Aq,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Model"),c(Lq,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasModel"),c(yq,"href","/docs/transformers/pr_17443/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(xq,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c($q,"href","/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechModel"),c(kq,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Sq,"href","/docs/transformers/pr_17443/en/model_doc/van#transformers.VanModel"),c(Rq,"href","/docs/transformers/pr_17443/en/model_doc/vilt#transformers.ViltModel"),c(Pq,"href","/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Bq,"href","/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Iq,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTModel"),c(Nq,"href","/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(qq,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(jq,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Dq,"href","/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMModel"),c(Gq,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMModel"),c(Oq,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMModel"),c(Vq,"href","/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Xq,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(zq,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Wq,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetModel"),c(Qq,"href","/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosModel"),c(Hq,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cu,"id","transformers.AutoModelForPreTraining"),c(cu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cu,"href","#transformers.AutoModelForPreTraining"),c($i,"class","relative group"),c(Uq,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jq,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yq,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kq,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Zq,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ej,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForPreTraining"),c(oj,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(rj,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(tj,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(aj,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(nj,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(sj,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(lj,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(ij,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForPreTraining"),c(dj,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(cj,"href","/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaForPreTraining"),c(fj,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForPreTraining"),c(mj,"href","/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(gj,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(hj,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(pj,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(_j,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(uj,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(bj,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(vj,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Fj,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Tj,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Mj,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Ej,"href","/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertModel"),c(Cj,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(wj,"href","/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(Aj,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(yj,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(xj,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c($j,"href","/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(kj,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Sj,"href","/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Rj,"href","/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Pj,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Bj,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(Ij,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Nj,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(qj,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(jj,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r4,"id","transformers.AutoModelForCausalLM"),c(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r4,"href","#transformers.AutoModelForCausalLM"),c(Ri,"class","relative group"),c(Dj,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gj,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oj,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vj,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForCausalLM"),c(Xj,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertLMHeadModel"),c(zj,"href","/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Wj,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Qj,"href","/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Hj,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Uj,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Jj,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Yj,"href","/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(Kj,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Zj,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(eD,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForCausalLM"),c(oD,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(rD,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(tD,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(aD,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(nD,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianForCausalLM"),c(sD,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForCausalLM"),c(lD,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(iD,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(dD,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTForCausalLM"),c(cD,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(fD,"href","/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(mD,"href","/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(gD,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(hD,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(pD,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(_D,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(uD,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(bD,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(vD,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(FD,"href","/docs/transformers/pr_17443/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(TD,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(MD,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ED,"href","/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(CD,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(wD,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(AD,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X4,"id","transformers.AutoModelForMaskedLM"),c(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X4,"href","#transformers.AutoModelForMaskedLM"),c(Ii,"class","relative group"),c(LD,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yD,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xD,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($D,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(kD,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(SD,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForMaskedLM"),c(RD,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(PD,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(BD,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(ID,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(ND,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(qD,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(jD,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(DD,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(GD,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(OD,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(VD,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(XD,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(zD,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(WD,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(QD,"href","/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeForMaskedLM"),c(HD,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(UD,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(JD,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(YD,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(KD,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(eG,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(oG,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(rG,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(tG,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(aG,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(nG,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(sG,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(lG,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(iG,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(dG,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(cG,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($1,"id","transformers.AutoModelForSeq2SeqLM"),c($1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($1,"href","#transformers.AutoModelForSeq2SeqLM"),c(ji,"class","relative group"),c(fG,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mG,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gG,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hG,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(pG,"href","/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(uG,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(bG,"href","/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(vG,"href","/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(FG,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(TG,"href","/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(MG,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianMTModel"),c(EG,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(CG,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(wG,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(AG,"href","/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(LG,"href","/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(yG,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(xG,"href","/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J1,"id","transformers.AutoModelForSequenceClassification"),c(J1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J1,"href","#transformers.AutoModelForSequenceClassification"),c(Oi,"class","relative group"),c($G,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kG,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SG,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RG,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(mO,"href","/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(gO,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(hO,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(pO,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(_O,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(uO,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(bO,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(vO,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(FO,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(TO,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(MO,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(EO,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(CO,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(wO,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qb,"id","transformers.AutoModelForMultipleChoice"),c(Qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qb,"href","#transformers.AutoModelForMultipleChoice"),c(zi,"class","relative group"),c(AO,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LO,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yO,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xO,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c($O,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(IO,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(NO,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(qO,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(jO,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(DO,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(GO,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(OO,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(VO,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(XO,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(zO,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(WO,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(QO,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(HO,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(UO,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(JO,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(YO,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(KO,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(ZO,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(eV,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(oV,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(rV,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(tV,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A2,"id","transformers.AutoModelForNextSentencePrediction"),c(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A2,"href","#transformers.AutoModelForNextSentencePrediction"),c(Hi,"class","relative group"),c(aV,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nV,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sV,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lV,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(iV,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(dV,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(cV,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(fV,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B2,"id","transformers.AutoModelForTokenClassification"),c(B2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B2,"href","#transformers.AutoModelForTokenClassification"),c(Yi,"class","relative group"),c(mV,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gV,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hV,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pV,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(_V,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForTokenClassification"),c(uV,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(bV,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(vV,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForTokenClassification"),c(FV,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(TV,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(MV,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(EV,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(CV,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(wV,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(AV,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(LV,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(yV,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(xV,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c($V,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(kV,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(SV,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(RV,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(PV,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(BV,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(IV,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(NV,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(qV,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(jV,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(DV,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(GV,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(OV,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(VV,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(XV,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(zV,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(WV,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(QV,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(HV,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vv,"id","transformers.AutoModelForQuestionAnswering"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForQuestionAnswering"),c(ed,"class","relative group"),c(UV,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(mX,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(LX,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(yX,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(xX,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c($X,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(kX,"href","/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(SX,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(RX,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(PX,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(BX,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(IX,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(NX,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d3,"id","transformers.AutoModelForTableQuestionAnswering"),c(d3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d3,"href","#transformers.AutoModelForTableQuestionAnswering"),c(td,"class","relative group"),c(qX,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jX,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DX,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GX,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h3,"id","transformers.AutoModelForImageClassification"),c(h3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h3,"href","#transformers.AutoModelForImageClassification"),c(sd,"class","relative group"),c(OX,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitForImageClassification"),c(WX,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(QX,"href","/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtForImageClassification"),c(HX,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(UX,"href","/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTForImageClassification"),c(JX,"href","/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(YX,"href","/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(KX,"href","/docs/transformers/pr_17443/en/model_doc/levit#transformers.LevitForImageClassification"),c(ZX,"href","/docs/transformers/pr_17443/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(ez,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(oz,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(rz,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(tz,"href","/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(az,"href","/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(nz,"href","/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(sz,"href","/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(lz,"href","/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinForImageClassification"),c(iz,"href","/docs/transformers/pr_17443/en/model_doc/van#transformers.VanForImageClassification"),c(dz,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($3,"id","transformers.AutoModelForVision2Seq"),c($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($3,"href","#transformers.AutoModelForVision2Seq"),c(dd,"class","relative group"),c(cz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gz,"href","/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B3,"id","transformers.AutoModelForAudioClassification"),c(B3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B3,"href","#transformers.AutoModelForAudioClassification"),c(md,"class","relative group"),c(hz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uz,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(bz,"href","/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(vz,"href","/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(Fz,"href","/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(Tz,"href","/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(Mz,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(Ez,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(Cz,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(wz,"href","/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H3,"id","transformers.AutoModelForAudioFrameClassification"),c(H3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H3,"href","#transformers.AutoModelForAudioFrameClassification"),c(pd,"class","relative group"),c(Az,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xz,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c($z,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(kz,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Sz,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Rz,"href","/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tF,"id","transformers.AutoModelForCTC"),c(tF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tF,"href","#transformers.AutoModelForCTC"),c(bd,"class","relative group"),c(Pz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nz,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(qz,"href","/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertForCTC"),c(jz,"href","/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWForCTC"),c(Dz,"href","/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Gz,"href","/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Oz,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Vz,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Xz,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(zz,"href","/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_F,"id","transformers.AutoModelForSpeechSeq2Seq"),c(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_F,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Td,"class","relative group"),c(Wz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uz,"href","/docs/transformers/pr_17443/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Jz,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForAudioXVector"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForAudioXVector"),c(Cd,"class","relative group"),c(Yz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eW,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(oW,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(rW,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(tW,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(aW,"href","/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kF,"id","transformers.AutoModelForMaskedImageModeling"),c(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ld,"class","relative group"),c(nW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(dW,"href","/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(cW,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qF,"id","transformers.AutoModelForObjectDetection"),c(qF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qF,"href","#transformers.AutoModelForObjectDetection"),c(kd,"class","relative group"),c(fW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hW,"href","/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrForObjectDetection"),c(pW,"href","/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForImageSegmentation"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForImageSegmentation"),c(Pd,"class","relative group"),c(_W,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vW,"href","/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForSemanticSegmentation"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Nd,"class","relative group"),c(FW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EW,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(CW,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(wW,"href","/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(AW,"href","/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tT,"id","transformers.AutoModelForInstanceSegmentation"),c(tT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Dd,"class","relative group"),c(LW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($W,"href","/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iT,"id","transformers.TFAutoModel"),c(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iT,"href","#transformers.TFAutoModel"),c(Vd,"class","relative group"),c(kW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PW,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertModel"),c(BW,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.TFBartModel"),c(IW,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertModel"),c(NW,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(qW,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(jW,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertModel"),c(DW,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.TFCLIPModel"),c(GW,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertModel"),c(OW,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.TFConvNextModel"),c(VW,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLModel"),c(XW,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(zW,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaModel"),c(WW,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(QW,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(HW,"href","/docs/transformers/pr_17443/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(UW,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraModel"),c(JW,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(YW,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelModel"),c(KW,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(ZW,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2Model"),c(eQ,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJModel"),c(oQ,"href","/docs/transformers/pr_17443/en/model_doc/hubert#transformers.TFHubertModel"),c(rQ,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(tQ,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.TFLEDModel"),c(aQ,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerModel"),c(nQ,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.TFLxmertModel"),c(sQ,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.TFMarianModel"),c(lQ,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.TFMBartModel"),c(iQ,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(dQ,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetModel"),c(cQ,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.TFMT5Model"),c(fQ,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(mQ,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.TFOPTModel"),c(gQ,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.TFPegasusModel"),c(hQ,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertModel"),c(pQ,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaModel"),c(_Q,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerModel"),c(uQ,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(bQ,"href","/docs/transformers/pr_17443/en/model_doc/swin#transformers.TFSwinModel"),c(vQ,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.TFT5Model"),c(FQ,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasModel"),c(TQ,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(MQ,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.TFViTModel"),c(EQ,"href","/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(CQ,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(wQ,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMModel"),c(AQ,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(LQ,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t7,"id","transformers.TFAutoModelForPreTraining"),c(t7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t7,"href","#transformers.TFAutoModelForPreTraining"),c(Wd,"class","relative group"),c(yQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Q,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kQ,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(SQ,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(RQ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForPreTraining"),c(PQ,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(IQ,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(qQ,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(jQ,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(DQ,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(GQ,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(VQ,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(XQ,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(WQ,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(HQ,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(JQ,"href","/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(YQ,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(KQ,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x7,"id","transformers.TFAutoModelForCausalLM"),c(x7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x7,"href","#transformers.TFAutoModelForCausalLM"),c(Ud,"class","relative group"),c(eH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(aH,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(nH,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(sH,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(lH,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(iH,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(dH,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(cH,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(fH,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(mH,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(gH,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(hH,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(pH,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z7,"id","transformers.TFAutoModelForImageClassification"),c(z7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z7,"href","#transformers.TFAutoModelForImageClassification"),c(Kd,"class","relative group"),c(_H,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vH,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(FH,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(TH,"href","/docs/transformers/pr_17443/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(MH,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K7,"id","transformers.TFAutoModelForMaskedLM"),c(K7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K7,"href","#transformers.TFAutoModelForMaskedLM"),c(oc,"class","relative group"),c(EH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(LH,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(yH,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(xH,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c($H,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(kH,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(SH,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(RH,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(PH,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(BH,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(IH,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(NH,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(qH,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(jH,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(DH,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(GH,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(OH,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(VH,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(XH,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zH,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ac,"class","relative group"),c(WH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(JH,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(YH,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(KH,"href","/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(ZH,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(eU,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.TFMarianMTModel"),c(oU,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(rU,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(tU,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(aU,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PM,"id","transformers.TFAutoModelForSequenceClassification"),c(PM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PM,"href","#transformers.TFAutoModelForSequenceClassification"),c(lc,"class","relative group"),c(nU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(dU,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(cU,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(fU,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(mU,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(gU,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(hU,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(pU,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(_U,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(uU,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(bU,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(vU,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(FU,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(TU,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(MU,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(EU,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(CU,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(wU,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(AU,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(LU,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(yU,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(xU,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c($U,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(kU,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(SU,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(RU,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dE,"id","transformers.TFAutoModelForMultipleChoice"),c(dE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dE,"href","#transformers.TFAutoModelForMultipleChoice"),c(cc,"class","relative group"),c(PU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NU,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(qU,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(jU,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(DU,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(GU,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(OU,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(VU,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(XU,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(zU,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(WU,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(QU,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(HU,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(UU,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(JU,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(YU,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(KU,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(ZU,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(gc,"class","relative group"),c(eJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tJ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(aJ,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(_c,"class","relative group"),c(nJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iJ,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qE,"id","transformers.TFAutoModelForTokenClassification"),c(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qE,"href","#transformers.TFAutoModelForTokenClassification"),c(vc,"class","relative group"),c(dJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(gJ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(hJ,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(pJ,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(_J,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(uJ,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(bJ,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(vJ,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(FJ,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(TJ,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(MJ,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(EJ,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(CJ,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(wJ,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(AJ,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(LJ,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(yJ,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(xJ,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c($J,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(kJ,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lC,"id","transformers.TFAutoModelForQuestionAnswering"),c(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Mc,"class","relative group"),c(SJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BJ,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(NJ,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(qJ,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(jJ,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(DJ,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(GJ,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(OJ,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(VJ,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(XJ,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(zJ,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(WJ,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(QJ,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(HJ,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(UJ,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(JJ,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(YJ,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(KJ,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(ZJ,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(eY,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($C,"id","transformers.TFAutoModelForVision2Seq"),c($C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($C,"href","#transformers.TFAutoModelForVision2Seq"),c(wc,"class","relative group"),c(oY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aY,"href","/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(nY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iY,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qC,"id","transformers.FlaxAutoModel"),c(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qC,"href","#transformers.FlaxAutoModel"),c(kc,"class","relative group"),c(dY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertModel"),c(gY,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartModel"),c(hY,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.FlaxBeitModel"),c(pY,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertModel"),c(_Y,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(uY,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(bY,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(vY,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.FlaxCLIPModel"),c(FY,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(TY,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraModel"),c(MY,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(EY,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(CY,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(wY,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.FlaxMarianModel"),c(AY,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartModel"),c(LY,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.FlaxMT5Model"),c(yY,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.FlaxOPTModel"),c(xY,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c($Y,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(kY,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(SY,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.FlaxT5Model"),c(RY,"href","/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(PY,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.FlaxViTModel"),c(BY,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(IY,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(NY,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g5,"id","transformers.FlaxAutoModelForCausalLM"),c(g5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Pc,"class","relative group"),c(qY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GY,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(OY,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(VY,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(XY,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(zY,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(WY,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(QY,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(HY,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(UY,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(JY,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A5,"id","transformers.FlaxAutoModelForPreTraining"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Nc,"class","relative group"),c(YY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(oK,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(rK,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(tK,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(aK,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(nK,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(sK,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(lK,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(iK,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(dK,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(cK,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(fK,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.FlaxAutoModelForMaskedLM"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Dc,"class","relative group"),c(mK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(_K,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(uK,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(bK,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(vK,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(FK,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(TK,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MK,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(EK,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(CK,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(e0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Vc,"class","relative group"),c(wK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yK,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xK,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c($K,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(kK,"href","/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(SK,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(RK,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(PK,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(BK,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(IK,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(m0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Wc,"class","relative group"),c(NK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(GK,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(OK,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(VK,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(XK,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(zK,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(WK,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(QK,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(HK,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(UK,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(w0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Uc,"class","relative group"),c(JK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZK,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(eZ,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(oZ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(rZ,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(tZ,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(aZ,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(nZ,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(sZ,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(lZ,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(iZ,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q0,"id","transformers.FlaxAutoModelForTokenClassification"),c(q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Kc,"class","relative group"),c(dZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mZ,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(gZ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(hZ,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(pZ,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(_Z,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(uZ,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(bZ,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(vZ,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(U0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(of,"class","relative group"),c(FZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EZ,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(CZ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(wZ,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(AZ,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(LZ,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(yZ,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(xZ,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c($Z,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(af,"class","relative group"),c(kZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PZ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cw,"id","transformers.FlaxAutoModelForImageClassification"),c(cw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cw,"href","#transformers.FlaxAutoModelForImageClassification"),c(lf,"class","relative group"),c(BZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qZ,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(jZ,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pw,"id","transformers.FlaxAutoModelForVision2Seq"),c(pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(ff,"class","relative group"),c(DZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VZ,"href","/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,gi),b(f,uf,u),b(f,rt,u),e(rt,hi),e(rt,pi),e(pi,I6),e(rt,bf),b(f,De,u),b(f,We,u),e(We,_i),e(We,Ln),e(Ln,N6),e(We,yn),e(We,xn),e(xn,q6),e(We,ui),e(We,$n),e($n,j6),e(We,bi),b(f,vf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,sk),e(Ae,vi),e(vi,lk),e(Ae,ik),b(f,Eo,u),b(f,wa,u),e(wa,dk),e(wa,Ff),e(Ff,ck),e(wa,dVe),b(f,Kqe,u),b(f,Fi,u),e(Fi,Tf),e(Tf,Ioe),M(D6,Ioe,null),e(Fi,cVe),e(Fi,Noe),e(Noe,fVe),b(f,Zqe,u),b(f,kn,u),e(kn,mVe),e(kn,qoe),e(qoe,gVe),e(kn,hVe),e(kn,joe),e(joe,pVe),e(kn,_Ve),b(f,eje,u),M(G6,f,u),b(f,oje,u),b(f,fk,u),e(fk,uVe),b(f,rje,u),M(Mf,f,u),b(f,tje,u),b(f,Ti,u),e(Ti,Ef),e(Ef,Doe),M(O6,Doe,null),e(Ti,bVe),e(Ti,Goe),e(Goe,vVe),b(f,aje,u),b(f,Co,u),M(V6,Co,null),e(Co,FVe),e(Co,X6),e(X6,TVe),e(X6,mk),e(mk,MVe),e(X6,EVe),e(Co,CVe),e(Co,z6),e(z6,wVe),e(z6,Ooe),e(Ooe,AVe),e(z6,LVe),e(Co,yVe),e(Co,Er),M(W6,Er,null),e(Er,xVe),e(Er,Voe),e(Voe,$Ve),e(Er,kVe),e(Er,Mi),e(Mi,SVe),e(Mi,Xoe),e(Xoe,RVe),e(Mi,PVe),e(Mi,zoe),e(zoe,BVe),e(Mi,IVe),e(Er,NVe),e(Er,A),e(A,Cf),e(Cf,Woe),e(Woe,qVe),e(Cf,jVe),e(Cf,gk),e(gk,DVe),e(Cf,GVe),e(A,OVe),e(A,wf),e(wf,Qoe),e(Qoe,VVe),e(wf,XVe),e(wf,hk),e(hk,zVe),e(wf,WVe),e(A,QVe),e(A,Af),e(Af,Hoe),e(Hoe,HVe),e(Af,UVe),e(Af,pk),e(pk,JVe),e(Af,YVe),e(A,KVe),e(A,Lf),e(Lf,Uoe),e(Uoe,ZVe),e(Lf,eXe),e(Lf,_k),e(_k,oXe),e(Lf,rXe),e(A,tXe),e(A,yf),e(yf,Joe),e(Joe,aXe),e(yf,nXe),e(yf,uk),e(uk,sXe),e(yf,lXe),e(A,iXe),e(A,xf),e(xf,Yoe),e(Yoe,dXe),e(xf,cXe),e(xf,bk),e(bk,fXe),e(xf,mXe),e(A,gXe),e(A,$f),e($f,Koe),e(Koe,hXe),e($f,pXe),e($f,vk),e(vk,_Xe),e($f,uXe),e(A,bXe),e(A,kf),e(kf,Zoe),e(Zoe,vXe),e(kf,FXe),e(kf,Fk),e(Fk,TXe),e(kf,MXe),e(A,EXe),e(A,Sf),e(Sf,ere),e(ere,CXe),e(Sf,wXe),e(Sf,Tk),e(Tk,AXe),e(Sf,LXe),e(A,yXe),e(A,Rf),e(Rf,ore),e(ore,xXe),e(Rf,$Xe),e(Rf,Mk),e(Mk,kXe),e(Rf,SXe),e(A,RXe),e(A,Pf),e(Pf,rre),e(rre,PXe),e(Pf,BXe),e(Pf,Ek),e(Ek,IXe),e(Pf,NXe),e(A,qXe),e(A,Bf),e(Bf,tre),e(tre,jXe),e(Bf,DXe),e(Bf,Ck),e(Ck,GXe),e(Bf,OXe),e(A,VXe),e(A,If),e(If,are),e(are,XXe),e(If,zXe),e(If,wk),e(wk,WXe),e(If,QXe),e(A,HXe),e(A,Nf),e(Nf,nre),e(nre,UXe),e(Nf,JXe),e(Nf,Ak),e(Ak,YXe),e(Nf,KXe),e(A,ZXe),e(A,qf),e(qf,sre),e(sre,eze),e(qf,oze),e(qf,Lk),e(Lk,rze),e(qf,tze),e(A,aze),e(A,jf),e(jf,lre),e(lre,nze),e(jf,sze),e(jf,yk),e(yk,lze),e(jf,ize),e(A,dze),e(A,Df),e(Df,ire),e(ire,cze),e(Df,fze),e(Df,xk),e(xk,mze),e(Df,gze),e(A,hze),e(A,Gf),e(Gf,dre),e(dre,pze),e(Gf,_ze),e(Gf,$k),e($k,uze),e(Gf,bze),e(A,vze),e(A,Of),e(Of,cre),e(cre,Fze),e(Of,Tze),e(Of,kk),e(kk,Mze),e(Of,Eze),e(A,Cze),e(A,Vf),e(Vf,fre),e(fre,wze),e(Vf,Aze),e(Vf,Sk),e(Sk,Lze),e(Vf,yze),e(A,xze),e(A,Xf),e(Xf,mre),e(mre,$ze),e(Xf,kze),e(Xf,Rk),e(Rk,Sze),e(Xf,Rze),e(A,Pze),e(A,zf),e(zf,gre),e(gre,Bze),e(zf,Ize),e(zf,Pk),e(Pk,Nze),e(zf,qze),e(A,jze),e(A,Wf),e(Wf,hre),e(hre,Dze),e(Wf,Gze),e(Wf,Bk),e(Bk,Oze),e(Wf,Vze),e(A,Xze),e(A,Qf),e(Qf,pre),e(pre,zze),e(Qf,Wze),e(Qf,Ik),e(Ik,Qze),e(Qf,Hze),e(A,Uze),e(A,Hf),e(Hf,_re),e(_re,Jze),e(Hf,Yze),e(Hf,Nk),e(Nk,Kze),e(Hf,Zze),e(A,eWe),e(A,Uf),e(Uf,ure),e(ure,oWe),e(Uf,rWe),e(Uf,qk),e(qk,tWe),e(Uf,aWe),e(A,nWe),e(A,Jf),e(Jf,bre),e(bre,sWe),e(Jf,lWe),e(Jf,jk),e(jk,iWe),e(Jf,dWe),e(A,cWe),e(A,Yf),e(Yf,vre),e(vre,fWe),e(Yf,mWe),e(Yf,Dk),e(Dk,gWe),e(Yf,hWe),e(A,pWe),e(A,Kf),e(Kf,Fre),e(Fre,_We),e(Kf,uWe),e(Kf,Gk),e(Gk,bWe),e(Kf,vWe),e(A,FWe),e(A,Zf),e(Zf,Tre),e(Tre,TWe),e(Zf,MWe),e(Zf,Ok),e(Ok,EWe),e(Zf,CWe),e(A,wWe),e(A,em),e(em,Mre),e(Mre,AWe),e(em,LWe),e(em,Vk),e(Vk,yWe),e(em,xWe),e(A,$We),e(A,om),e(om,Ere),e(Ere,kWe),e(om,SWe),e(om,Xk),e(Xk,RWe),e(om,PWe),e(A,BWe),e(A,rm),e(rm,Cre),e(Cre,IWe),e(rm,NWe),e(rm,zk),e(zk,qWe),e(rm,jWe),e(A,DWe),e(A,tm),e(tm,wre),e(wre,GWe),e(tm,OWe),e(tm,Wk),e(Wk,VWe),e(tm,XWe),e(A,zWe),e(A,am),e(am,Are),e(Are,WWe),e(am,QWe),e(am,Qk),e(Qk,HWe),e(am,UWe),e(A,JWe),e(A,nm),e(nm,Lre),e(Lre,YWe),e(nm,KWe),e(nm,Hk),e(Hk,ZWe),e(nm,eQe),e(A,oQe),e(A,sm),e(sm,yre),e(yre,rQe),e(sm,tQe),e(sm,Uk),e(Uk,aQe),e(sm,nQe),e(A,sQe),e(A,lm),e(lm,xre),e(xre,lQe),e(lm,iQe),e(lm,Jk),e(Jk,dQe),e(lm,cQe),e(A,fQe),e(A,im),e(im,$re),e($re,mQe),e(im,gQe),e(im,Yk),e(Yk,hQe),e(im,pQe),e(A,_Qe),e(A,dm),e(dm,kre),e(kre,uQe),e(dm,bQe),e(dm,Kk),e(Kk,vQe),e(dm,FQe),e(A,TQe),e(A,cm),e(cm,Sre),e(Sre,MQe),e(cm,EQe),e(cm,Zk),e(Zk,CQe),e(cm,wQe),e(A,AQe),e(A,fm),e(fm,Rre),e(Rre,LQe),e(fm,yQe),e(fm,eS),e(eS,xQe),e(fm,$Qe),e(A,kQe),e(A,mm),e(mm,Pre),e(Pre,SQe),e(mm,RQe),e(mm,oS),e(oS,PQe),e(mm,BQe),e(A,IQe),e(A,gm),e(gm,Bre),e(Bre,NQe),e(gm,qQe),e(gm,rS),e(rS,jQe),e(gm,DQe),e(A,GQe),e(A,hm),e(hm,Ire),e(Ire,OQe),e(hm,VQe),e(hm,tS),e(tS,XQe),e(hm,zQe),e(A,WQe),e(A,pm),e(pm,Nre),e(Nre,QQe),e(pm,HQe),e(pm,aS),e(aS,UQe),e(pm,JQe),e(A,YQe),e(A,_m),e(_m,qre),e(qre,KQe),e(_m,ZQe),e(_m,nS),e(nS,eHe),e(_m,oHe),e(A,rHe),e(A,um),e(um,jre),e(jre,tHe),e(um,aHe),e(um,sS),e(sS,nHe),e(um,sHe),e(A,lHe),e(A,bm),e(bm,Dre),e(Dre,iHe),e(bm,dHe),e(bm,lS),e(lS,cHe),e(bm,fHe),e(A,mHe),e(A,vm),e(vm,Gre),e(Gre,gHe),e(vm,hHe),e(vm,iS),e(iS,pHe),e(vm,_He),e(A,uHe),e(A,Fm),e(Fm,Ore),e(Ore,bHe),e(Fm,vHe),e(Fm,dS),e(dS,FHe),e(Fm,THe),e(A,MHe),e(A,Tm),e(Tm,Vre),e(Vre,EHe),e(Tm,CHe),e(Tm,cS),e(cS,wHe),e(Tm,AHe),e(A,LHe),e(A,Mm),e(Mm,Xre),e(Xre,yHe),e(Mm,xHe),e(Mm,fS),e(fS,$He),e(Mm,kHe),e(A,SHe),e(A,Em),e(Em,zre),e(zre,RHe),e(Em,PHe),e(Em,mS),e(mS,BHe),e(Em,IHe),e(A,NHe),e(A,Cm),e(Cm,Wre),e(Wre,qHe),e(Cm,jHe),e(Cm,gS),e(gS,DHe),e(Cm,GHe),e(A,OHe),e(A,wm),e(wm,Qre),e(Qre,VHe),e(wm,XHe),e(wm,hS),e(hS,zHe),e(wm,WHe),e(A,QHe),e(A,Am),e(Am,Hre),e(Hre,HHe),e(Am,UHe),e(Am,pS),e(pS,JHe),e(Am,YHe),e(A,KHe),e(A,Lm),e(Lm,Ure),e(Ure,ZHe),e(Lm,eUe),e(Lm,_S),e(_S,oUe),e(Lm,rUe),e(A,tUe),e(A,ym),e(ym,Jre),e(Jre,aUe),e(ym,nUe),e(ym,uS),e(uS,sUe),e(ym,lUe),e(A,iUe),e(A,xm),e(xm,Yre),e(Yre,dUe),e(xm,cUe),e(xm,bS),e(bS,fUe),e(xm,mUe),e(A,gUe),e(A,$m),e($m,Kre),e(Kre,hUe),e($m,pUe),e($m,vS),e(vS,_Ue),e($m,uUe),e(A,bUe),e(A,km),e(km,Zre),e(Zre,vUe),e(km,FUe),e(km,FS),e(FS,TUe),e(km,MUe),e(A,EUe),e(A,Sm),e(Sm,ete),e(ete,CUe),e(Sm,wUe),e(Sm,TS),e(TS,AUe),e(Sm,LUe),e(A,yUe),e(A,Rm),e(Rm,ote),e(ote,xUe),e(Rm,$Ue),e(Rm,MS),e(MS,kUe),e(Rm,SUe),e(A,RUe),e(A,Pm),e(Pm,rte),e(rte,PUe),e(Pm,BUe),e(Pm,ES),e(ES,IUe),e(Pm,NUe),e(A,qUe),e(A,Bm),e(Bm,tte),e(tte,jUe),e(Bm,DUe),e(Bm,CS),e(CS,GUe),e(Bm,OUe),e(A,VUe),e(A,Im),e(Im,ate),e(ate,XUe),e(Im,zUe),e(Im,wS),e(wS,WUe),e(Im,QUe),e(A,HUe),e(A,Nm),e(Nm,nte),e(nte,UUe),e(Nm,JUe),e(Nm,AS),e(AS,YUe),e(Nm,KUe),e(A,ZUe),e(A,qm),e(qm,ste),e(ste,eJe),e(qm,oJe),e(qm,LS),e(LS,rJe),e(qm,tJe),e(A,aJe),e(A,jm),e(jm,lte),e(lte,nJe),e(jm,sJe),e(jm,yS),e(yS,lJe),e(jm,iJe),e(A,dJe),e(A,Dm),e(Dm,ite),e(ite,cJe),e(Dm,fJe),e(Dm,xS),e(xS,mJe),e(Dm,gJe),e(A,hJe),e(A,Gm),e(Gm,dte),e(dte,pJe),e(Gm,_Je),e(Gm,$S),e($S,uJe),e(Gm,bJe),e(A,vJe),e(A,Om),e(Om,cte),e(cte,FJe),e(Om,TJe),e(Om,kS),e(kS,MJe),e(Om,EJe),e(A,CJe),e(A,Vm),e(Vm,fte),e(fte,wJe),e(Vm,AJe),e(Vm,SS),e(SS,LJe),e(Vm,yJe),e(A,xJe),e(A,Xm),e(Xm,mte),e(mte,$Je),e(Xm,kJe),e(Xm,RS),e(RS,SJe),e(Xm,RJe),e(A,PJe),e(A,zm),e(zm,gte),e(gte,BJe),e(zm,IJe),e(zm,PS),e(PS,NJe),e(zm,qJe),e(A,jJe),e(A,Wm),e(Wm,hte),e(hte,DJe),e(Wm,GJe),e(Wm,BS),e(BS,OJe),e(Wm,VJe),e(A,XJe),e(A,Qm),e(Qm,pte),e(pte,zJe),e(Qm,WJe),e(Qm,IS),e(IS,QJe),e(Qm,HJe),e(A,UJe),e(A,Hm),e(Hm,_te),e(_te,JJe),e(Hm,YJe),e(Hm,NS),e(NS,KJe),e(Hm,ZJe),e(A,eYe),e(A,Um),e(Um,ute),e(ute,oYe),e(Um,rYe),e(Um,qS),e(qS,tYe),e(Um,aYe),e(A,nYe),e(A,Jm),e(Jm,bte),e(bte,sYe),e(Jm,lYe),e(Jm,jS),e(jS,iYe),e(Jm,dYe),e(A,cYe),e(A,Ym),e(Ym,vte),e(vte,fYe),e(Ym,mYe),e(Ym,DS),e(DS,gYe),e(Ym,hYe),e(A,pYe),e(A,Km),e(Km,Fte),e(Fte,_Ye),e(Km,uYe),e(Km,GS),e(GS,bYe),e(Km,vYe),e(A,FYe),e(A,Zm),e(Zm,Tte),e(Tte,TYe),e(Zm,MYe),e(Zm,OS),e(OS,EYe),e(Zm,CYe),e(A,wYe),e(A,eg),e(eg,Mte),e(Mte,AYe),e(eg,LYe),e(eg,VS),e(VS,yYe),e(eg,xYe),e(A,$Ye),e(A,og),e(og,Ete),e(Ete,kYe),e(og,SYe),e(og,XS),e(XS,RYe),e(og,PYe),e(A,BYe),e(A,rg),e(rg,Cte),e(Cte,IYe),e(rg,NYe),e(rg,zS),e(zS,qYe),e(rg,jYe),e(A,DYe),e(A,tg),e(tg,wte),e(wte,GYe),e(tg,OYe),e(tg,WS),e(WS,VYe),e(tg,XYe),e(A,zYe),e(A,ag),e(ag,Ate),e(Ate,WYe),e(ag,QYe),e(ag,QS),e(QS,HYe),e(ag,UYe),e(A,JYe),e(A,ng),e(ng,Lte),e(Lte,YYe),e(ng,KYe),e(ng,HS),e(HS,ZYe),e(ng,eKe),e(A,oKe),e(A,sg),e(sg,yte),e(yte,rKe),e(sg,tKe),e(sg,US),e(US,aKe),e(sg,nKe),e(A,sKe),e(A,lg),e(lg,xte),e(xte,lKe),e(lg,iKe),e(lg,JS),e(JS,dKe),e(lg,cKe),e(A,fKe),e(A,ig),e(ig,$te),e($te,mKe),e(ig,gKe),e(ig,YS),e(YS,hKe),e(ig,pKe),e(A,_Ke),e(A,dg),e(dg,kte),e(kte,uKe),e(dg,bKe),e(dg,KS),e(KS,vKe),e(dg,FKe),e(A,TKe),e(A,cg),e(cg,Ste),e(Ste,MKe),e(cg,EKe),e(cg,ZS),e(ZS,CKe),e(cg,wKe),e(A,AKe),e(A,fg),e(fg,Rte),e(Rte,LKe),e(fg,yKe),e(fg,eR),e(eR,xKe),e(fg,$Ke),e(A,kKe),e(A,mg),e(mg,Pte),e(Pte,SKe),e(mg,RKe),e(mg,oR),e(oR,PKe),e(mg,BKe),e(A,IKe),e(A,gg),e(gg,Bte),e(Bte,NKe),e(gg,qKe),e(gg,rR),e(rR,jKe),e(gg,DKe),e(A,GKe),e(A,hg),e(hg,Ite),e(Ite,OKe),e(hg,VKe),e(hg,tR),e(tR,XKe),e(hg,zKe),e(A,WKe),e(A,pg),e(pg,Nte),e(Nte,QKe),e(pg,HKe),e(pg,aR),e(aR,UKe),e(pg,JKe),e(A,YKe),e(A,_g),e(_g,qte),e(qte,KKe),e(_g,ZKe),e(_g,nR),e(nR,eZe),e(_g,oZe),e(A,rZe),e(A,ug),e(ug,jte),e(jte,tZe),e(ug,aZe),e(ug,sR),e(sR,nZe),e(ug,sZe),e(A,lZe),e(A,bg),e(bg,Dte),e(Dte,iZe),e(bg,dZe),e(bg,lR),e(lR,cZe),e(bg,fZe),e(A,mZe),e(A,vg),e(vg,Gte),e(Gte,gZe),e(vg,hZe),e(vg,iR),e(iR,pZe),e(vg,_Ze),e(A,uZe),e(A,Fg),e(Fg,Ote),e(Ote,bZe),e(Fg,vZe),e(Fg,dR),e(dR,FZe),e(Fg,TZe),e(A,MZe),e(A,Tg),e(Tg,Vte),e(Vte,EZe),e(Tg,CZe),e(Tg,cR),e(cR,wZe),e(Tg,AZe),e(A,LZe),e(A,Mg),e(Mg,Xte),e(Xte,yZe),e(Mg,xZe),e(Mg,fR),e(fR,$Ze),e(Mg,kZe),e(A,SZe),e(A,Eg),e(Eg,zte),e(zte,RZe),e(Eg,PZe),e(Eg,mR),e(mR,BZe),e(Eg,IZe),e(A,NZe),e(A,Cg),e(Cg,Wte),e(Wte,qZe),e(Cg,jZe),e(Cg,gR),e(gR,DZe),e(Cg,GZe),e(A,OZe),e(A,wg),e(wg,Qte),e(Qte,VZe),e(wg,XZe),e(wg,hR),e(hR,zZe),e(wg,WZe),e(A,QZe),e(A,Ag),e(Ag,Hte),e(Hte,HZe),e(Ag,UZe),e(Ag,pR),e(pR,JZe),e(Ag,YZe),e(Er,KZe),M(Lg,Er,null),e(Co,ZZe),e(Co,yg),M(Q6,yg,null),e(yg,eeo),e(yg,Ute),e(Ute,oeo),b(f,nje,u),b(f,Ei,u),e(Ei,xg),e(xg,Jte),M(H6,Jte,null),e(Ei,reo),e(Ei,Yte),e(Yte,teo),b(f,sje,u),b(f,wo,u),M(U6,wo,null),e(wo,aeo),e(wo,J6),e(J6,neo),e(J6,_R),e(_R,seo),e(J6,leo),e(wo,ieo),e(wo,Y6),e(Y6,deo),e(Y6,Kte),e(Kte,ceo),e(Y6,feo),e(wo,meo),e(wo,Cr),M(K6,Cr,null),e(Cr,geo),e(Cr,Zte),e(Zte,heo),e(Cr,peo),e(Cr,Aa),e(Aa,_eo),e(Aa,eae),e(eae,ueo),e(Aa,beo),e(Aa,oae),e(oae,veo),e(Aa,Feo),e(Aa,rae),e(rae,Teo),e(Aa,Meo),e(Cr,Eeo),e(Cr,k),e(k,Sn),e(Sn,tae),e(tae,Ceo),e(Sn,weo),e(Sn,uR),e(uR,Aeo),e(Sn,Leo),e(Sn,bR),e(bR,yeo),e(Sn,xeo),e(k,$eo),e(k,Rn),e(Rn,aae),e(aae,keo),e(Rn,Seo),e(Rn,vR),e(vR,Reo),e(Rn,Peo),e(Rn,FR),e(FR,Beo),e(Rn,Ieo),e(k,Neo),e(k,Pn),e(Pn,nae),e(nae,qeo),e(Pn,jeo),e(Pn,TR),e(TR,Deo),e(Pn,Geo),e(Pn,MR),e(MR,Oeo),e(Pn,Veo),e(k,Xeo),e(k,$g),e($g,sae),e(sae,zeo),e($g,Weo),e($g,ER),e(ER,Qeo),e($g,Heo),e(k,Ueo),e(k,Bn),e(Bn,lae),e(lae,Jeo),e(Bn,Yeo),e(Bn,CR),e(CR,Keo),e(Bn,Zeo),e(Bn,wR),e(wR,eoo),e(Bn,ooo),e(k,roo),e(k,kg),e(kg,iae),e(iae,too),e(kg,aoo),e(kg,AR),e(AR,noo),e(kg,soo),e(k,loo),e(k,Sg),e(Sg,dae),e(dae,ioo),e(Sg,doo),e(Sg,LR),e(LR,coo),e(Sg,foo),e(k,moo),e(k,Rg),e(Rg,cae),e(cae,goo),e(Rg,hoo),e(Rg,yR),e(yR,poo),e(Rg,_oo),e(k,uoo),e(k,In),e(In,fae),e(fae,boo),e(In,voo),e(In,xR),e(xR,Foo),e(In,Too),e(In,$R),e($R,Moo),e(In,Eoo),e(k,Coo),e(k,Nn),e(Nn,mae),e(mae,woo),e(Nn,Aoo),e(Nn,kR),e(kR,Loo),e(Nn,yoo),e(Nn,SR),e(SR,xoo),e(Nn,$oo),e(k,koo),e(k,qn),e(qn,gae),e(gae,Soo),e(qn,Roo),e(qn,RR),e(RR,Poo),e(qn,Boo),e(qn,PR),e(PR,Ioo),e(qn,Noo),e(k,qoo),e(k,Pg),e(Pg,hae),e(hae,joo),e(Pg,Doo),e(Pg,BR),e(BR,Goo),e(Pg,Ooo),e(k,Voo),e(k,Bg),e(Bg,pae),e(pae,Xoo),e(Bg,zoo),e(Bg,IR),e(IR,Woo),e(Bg,Qoo),e(k,Hoo),e(k,jn),e(jn,_ae),e(_ae,Uoo),e(jn,Joo),e(jn,NR),e(NR,Yoo),e(jn,Koo),e(jn,qR),e(qR,Zoo),e(jn,ero),e(k,oro),e(k,Ig),e(Ig,uae),e(uae,rro),e(Ig,tro),e(Ig,jR),e(jR,aro),e(Ig,nro),e(k,sro),e(k,Dn),e(Dn,bae),e(bae,lro),e(Dn,iro),e(Dn,DR),e(DR,dro),e(Dn,cro),e(Dn,GR),e(GR,fro),e(Dn,mro),e(k,gro),e(k,Gn),e(Gn,vae),e(vae,hro),e(Gn,pro),e(Gn,OR),e(OR,_ro),e(Gn,uro),e(Gn,VR),e(VR,bro),e(Gn,vro),e(k,Fro),e(k,On),e(On,Fae),e(Fae,Tro),e(On,Mro),e(On,XR),e(XR,Ero),e(On,Cro),e(On,zR),e(zR,wro),e(On,Aro),e(k,Lro),e(k,Vn),e(Vn,Tae),e(Tae,yro),e(Vn,xro),e(Vn,WR),e(WR,$ro),e(Vn,kro),e(Vn,QR),e(QR,Sro),e(Vn,Rro),e(k,Pro),e(k,Ng),e(Ng,Mae),e(Mae,Bro),e(Ng,Iro),e(Ng,HR),e(HR,Nro),e(Ng,qro),e(k,jro),e(k,Xn),e(Xn,Eae),e(Eae,Dro),e(Xn,Gro),e(Xn,UR),e(UR,Oro),e(Xn,Vro),e(Xn,JR),e(JR,Xro),e(Xn,zro),e(k,Wro),e(k,zn),e(zn,Cae),e(Cae,Qro),e(zn,Hro),e(zn,YR),e(YR,Uro),e(zn,Jro),e(zn,KR),e(KR,Yro),e(zn,Kro),e(k,Zro),e(k,Wn),e(Wn,wae),e(wae,eto),e(Wn,oto),e(Wn,ZR),e(ZR,rto),e(Wn,tto),e(Wn,eP),e(eP,ato),e(Wn,nto),e(k,sto),e(k,Qn),e(Qn,Aae),e(Aae,lto),e(Qn,ito),e(Qn,oP),e(oP,dto),e(Qn,cto),e(Qn,rP),e(rP,fto),e(Qn,mto),e(k,gto),e(k,Hn),e(Hn,Lae),e(Lae,hto),e(Hn,pto),e(Hn,tP),e(tP,_to),e(Hn,uto),e(Hn,aP),e(aP,bto),e(Hn,vto),e(k,Fto),e(k,Un),e(Un,yae),e(yae,Tto),e(Un,Mto),e(Un,nP),e(nP,Eto),e(Un,Cto),e(Un,sP),e(sP,wto),e(Un,Ato),e(k,Lto),e(k,qg),e(qg,xae),e(xae,yto),e(qg,xto),e(qg,lP),e(lP,$to),e(qg,kto),e(k,Sto),e(k,Jn),e(Jn,$ae),e($ae,Rto),e(Jn,Pto),e(Jn,iP),e(iP,Bto),e(Jn,Ito),e(Jn,dP),e(dP,Nto),e(Jn,qto),e(k,jto),e(k,jg),e(jg,kae),e(kae,Dto),e(jg,Gto),e(jg,cP),e(cP,Oto),e(jg,Vto),e(k,Xto),e(k,Yn),e(Yn,Sae),e(Sae,zto),e(Yn,Wto),e(Yn,fP),e(fP,Qto),e(Yn,Hto),e(Yn,mP),e(mP,Uto),e(Yn,Jto),e(k,Yto),e(k,Kn),e(Kn,Rae),e(Rae,Kto),e(Kn,Zto),e(Kn,gP),e(gP,eao),e(Kn,oao),e(Kn,hP),e(hP,rao),e(Kn,tao),e(k,aao),e(k,Zn),e(Zn,Pae),e(Pae,nao),e(Zn,sao),e(Zn,pP),e(pP,lao),e(Zn,iao),e(Zn,_P),e(_P,dao),e(Zn,cao),e(k,fao),e(k,Dg),e(Dg,Bae),e(Bae,mao),e(Dg,gao),e(Dg,uP),e(uP,hao),e(Dg,pao),e(k,_ao),e(k,es),e(es,Iae),e(Iae,uao),e(es,bao),e(es,bP),e(bP,vao),e(es,Fao),e(es,vP),e(vP,Tao),e(es,Mao),e(k,Eao),e(k,os),e(os,Nae),e(Nae,Cao),e(os,wao),e(os,FP),e(FP,Aao),e(os,Lao),e(os,TP),e(TP,yao),e(os,xao),e(k,$ao),e(k,Gg),e(Gg,qae),e(qae,kao),e(Gg,Sao),e(Gg,MP),e(MP,Rao),e(Gg,Pao),e(k,Bao),e(k,rs),e(rs,jae),e(jae,Iao),e(rs,Nao),e(rs,EP),e(EP,qao),e(rs,jao),e(rs,CP),e(CP,Dao),e(rs,Gao),e(k,Oao),e(k,ts),e(ts,Dae),e(Dae,Vao),e(ts,Xao),e(ts,wP),e(wP,zao),e(ts,Wao),e(ts,AP),e(AP,Qao),e(ts,Hao),e(k,Uao),e(k,as),e(as,Gae),e(Gae,Jao),e(as,Yao),e(as,LP),e(LP,Kao),e(as,Zao),e(as,yP),e(yP,eno),e(as,ono),e(k,rno),e(k,ns),e(ns,Oae),e(Oae,tno),e(ns,ano),e(ns,xP),e(xP,nno),e(ns,sno),e(ns,$P),e($P,lno),e(ns,ino),e(k,dno),e(k,ss),e(ss,Vae),e(Vae,cno),e(ss,fno),e(ss,kP),e(kP,mno),e(ss,gno),e(ss,SP),e(SP,hno),e(ss,pno),e(k,_no),e(k,ls),e(ls,Xae),e(Xae,uno),e(ls,bno),e(ls,RP),e(RP,vno),e(ls,Fno),e(ls,PP),e(PP,Tno),e(ls,Mno),e(k,Eno),e(k,is),e(is,zae),e(zae,Cno),e(is,wno),e(is,BP),e(BP,Ano),e(is,Lno),e(is,IP),e(IP,yno),e(is,xno),e(k,$no),e(k,Og),e(Og,Wae),e(Wae,kno),e(Og,Sno),e(Og,NP),e(NP,Rno),e(Og,Pno),e(k,Bno),e(k,ds),e(ds,Qae),e(Qae,Ino),e(ds,Nno),e(ds,qP),e(qP,qno),e(ds,jno),e(ds,jP),e(jP,Dno),e(ds,Gno),e(k,Ono),e(k,Vg),e(Vg,Hae),e(Hae,Vno),e(Vg,Xno),e(Vg,DP),e(DP,zno),e(Vg,Wno),e(k,Qno),e(k,Xg),e(Xg,Uae),e(Uae,Hno),e(Xg,Uno),e(Xg,GP),e(GP,Jno),e(Xg,Yno),e(k,Kno),e(k,cs),e(cs,Jae),e(Jae,Zno),e(cs,eso),e(cs,OP),e(OP,oso),e(cs,rso),e(cs,VP),e(VP,tso),e(cs,aso),e(k,nso),e(k,fs),e(fs,Yae),e(Yae,sso),e(fs,lso),e(fs,XP),e(XP,iso),e(fs,dso),e(fs,zP),e(zP,cso),e(fs,fso),e(k,mso),e(k,ms),e(ms,Kae),e(Kae,gso),e(ms,hso),e(ms,WP),e(WP,pso),e(ms,_so),e(ms,QP),e(QP,uso),e(ms,bso),e(k,vso),e(k,zg),e(zg,Zae),e(Zae,Fso),e(zg,Tso),e(zg,HP),e(HP,Mso),e(zg,Eso),e(k,Cso),e(k,gs),e(gs,ene),e(ene,wso),e(gs,Aso),e(gs,UP),e(UP,Lso),e(gs,yso),e(gs,JP),e(JP,xso),e(gs,$so),e(k,kso),e(k,hs),e(hs,one),e(one,Sso),e(hs,Rso),e(hs,YP),e(YP,Pso),e(hs,Bso),e(hs,KP),e(KP,Iso),e(hs,Nso),e(k,qso),e(k,ps),e(ps,rne),e(rne,jso),e(ps,Dso),e(ps,ZP),e(ZP,Gso),e(ps,Oso),e(ps,eB),e(eB,Vso),e(ps,Xso),e(k,zso),e(k,_s),e(_s,tne),e(tne,Wso),e(_s,Qso),e(_s,oB),e(oB,Hso),e(_s,Uso),e(_s,rB),e(rB,Jso),e(_s,Yso),e(k,Kso),e(k,us),e(us,ane),e(ane,Zso),e(us,elo),e(us,tB),e(tB,olo),e(us,rlo),e(us,aB),e(aB,tlo),e(us,alo),e(k,nlo),e(k,Wg),e(Wg,nne),e(nne,slo),e(Wg,llo),e(Wg,nB),e(nB,ilo),e(Wg,dlo),e(k,clo),e(k,bs),e(bs,sne),e(sne,flo),e(bs,mlo),e(bs,sB),e(sB,glo),e(bs,hlo),e(bs,lB),e(lB,plo),e(bs,_lo),e(k,ulo),e(k,Qg),e(Qg,lne),e(lne,blo),e(Qg,vlo),e(Qg,iB),e(iB,Flo),e(Qg,Tlo),e(k,Mlo),e(k,Hg),e(Hg,ine),e(ine,Elo),e(Hg,Clo),e(Hg,dB),e(dB,wlo),e(Hg,Alo),e(k,Llo),e(k,Ug),e(Ug,dne),e(dne,ylo),e(Ug,xlo),e(Ug,cB),e(cB,$lo),e(Ug,klo),e(k,Slo),e(k,Jg),e(Jg,cne),e(cne,Rlo),e(Jg,Plo),e(Jg,fB),e(fB,Blo),e(Jg,Ilo),e(k,Nlo),e(k,vs),e(vs,fne),e(fne,qlo),e(vs,jlo),e(vs,mB),e(mB,Dlo),e(vs,Glo),e(vs,gB),e(gB,Olo),e(vs,Vlo),e(k,Xlo),e(k,Yg),e(Yg,mne),e(mne,zlo),e(Yg,Wlo),e(Yg,hB),e(hB,Qlo),e(Yg,Hlo),e(k,Ulo),e(k,Fs),e(Fs,gne),e(gne,Jlo),e(Fs,Ylo),e(Fs,pB),e(pB,Klo),e(Fs,Zlo),e(Fs,_B),e(_B,eio),e(Fs,oio),e(k,rio),e(k,Ts),e(Ts,hne),e(hne,tio),e(Ts,aio),e(Ts,uB),e(uB,nio),e(Ts,sio),e(Ts,bB),e(bB,lio),e(Ts,iio),e(k,dio),e(k,Ms),e(Ms,pne),e(pne,cio),e(Ms,fio),e(Ms,vB),e(vB,mio),e(Ms,gio),e(Ms,FB),e(FB,hio),e(Ms,pio),e(k,_io),e(k,Es),e(Es,_ne),e(_ne,uio),e(Es,bio),e(Es,TB),e(TB,vio),e(Es,Fio),e(Es,MB),e(MB,Tio),e(Es,Mio),e(k,Eio),e(k,Cs),e(Cs,une),e(une,Cio),e(Cs,wio),e(Cs,EB),e(EB,Aio),e(Cs,Lio),e(Cs,CB),e(CB,yio),e(Cs,xio),e(k,$io),e(k,ws),e(ws,bne),e(bne,kio),e(ws,Sio),e(ws,wB),e(wB,Rio),e(ws,Pio),e(ws,AB),e(AB,Bio),e(ws,Iio),e(k,Nio),e(k,Kg),e(Kg,vne),e(vne,qio),e(Kg,jio),e(Kg,LB),e(LB,Dio),e(Kg,Gio),e(k,Oio),e(k,Zg),e(Zg,Fne),e(Fne,Vio),e(Zg,Xio),e(Zg,yB),e(yB,zio),e(Zg,Wio),e(k,Qio),e(k,As),e(As,Tne),e(Tne,Hio),e(As,Uio),e(As,xB),e(xB,Jio),e(As,Yio),e(As,$B),e($B,Kio),e(As,Zio),e(k,edo),e(k,Ls),e(Ls,Mne),e(Mne,odo),e(Ls,rdo),e(Ls,kB),e(kB,tdo),e(Ls,ado),e(Ls,SB),e(SB,ndo),e(Ls,sdo),e(k,ldo),e(k,ys),e(ys,Ene),e(Ene,ido),e(ys,ddo),e(ys,RB),e(RB,cdo),e(ys,fdo),e(ys,PB),e(PB,mdo),e(ys,gdo),e(k,hdo),e(k,eh),e(eh,Cne),e(Cne,pdo),e(eh,_do),e(eh,BB),e(BB,udo),e(eh,bdo),e(k,vdo),e(k,oh),e(oh,wne),e(wne,Fdo),e(oh,Tdo),e(oh,IB),e(IB,Mdo),e(oh,Edo),e(k,Cdo),e(k,rh),e(rh,Ane),e(Ane,wdo),e(rh,Ado),e(rh,NB),e(NB,Ldo),e(rh,ydo),e(k,xdo),e(k,xs),e(xs,Lne),e(Lne,$do),e(xs,kdo),e(xs,qB),e(qB,Sdo),e(xs,Rdo),e(xs,jB),e(jB,Pdo),e(xs,Bdo),e(k,Ido),e(k,th),e(th,yne),e(yne,Ndo),e(th,qdo),e(th,DB),e(DB,jdo),e(th,Ddo),e(k,Gdo),e(k,ah),e(ah,xne),e(xne,Odo),e(ah,Vdo),e(ah,GB),e(GB,Xdo),e(ah,zdo),e(k,Wdo),e(k,nh),e(nh,$ne),e($ne,Qdo),e(nh,Hdo),e(nh,OB),e(OB,Udo),e(nh,Jdo),e(k,Ydo),e(k,$s),e($s,kne),e(kne,Kdo),e($s,Zdo),e($s,VB),e(VB,eco),e($s,oco),e($s,XB),e(XB,rco),e($s,tco),e(k,aco),e(k,sh),e(sh,Sne),e(Sne,nco),e(sh,sco),e(sh,zB),e(zB,lco),e(sh,ico),e(k,dco),e(k,lh),e(lh,Rne),e(Rne,cco),e(lh,fco),e(lh,WB),e(WB,mco),e(lh,gco),e(k,hco),e(k,ks),e(ks,Pne),e(Pne,pco),e(ks,_co),e(ks,QB),e(QB,uco),e(ks,bco),e(ks,HB),e(HB,vco),e(ks,Fco),e(k,Tco),e(k,Ss),e(Ss,Bne),e(Bne,Mco),e(Ss,Eco),e(Ss,UB),e(UB,Cco),e(Ss,wco),e(Ss,JB),e(JB,Aco),e(Ss,Lco),e(k,yco),e(k,Rs),e(Rs,Ine),e(Ine,xco),e(Rs,$co),e(Rs,YB),e(YB,kco),e(Rs,Sco),e(Rs,KB),e(KB,Rco),e(Rs,Pco),e(k,Bco),e(k,Ps),e(Ps,Nne),e(Nne,Ico),e(Ps,Nco),e(Ps,ZB),e(ZB,qco),e(Ps,jco),e(Ps,eI),e(eI,Dco),e(Ps,Gco),e(Cr,Oco),M(ih,Cr,null),e(wo,Vco),e(wo,dh),M(Z6,dh,null),e(dh,Xco),e(dh,qne),e(qne,zco),b(f,lje,u),b(f,Ci,u),e(Ci,ch),e(ch,jne),M(eL,jne,null),e(Ci,Wco),e(Ci,Dne),e(Dne,Qco),b(f,ije,u),b(f,Ao,u),M(oL,Ao,null),e(Ao,Hco),e(Ao,rL),e(rL,Uco),e(rL,oI),e(oI,Jco),e(rL,Yco),e(Ao,Kco),e(Ao,tL),e(tL,Zco),e(tL,Gne),e(Gne,efo),e(tL,ofo),e(Ao,rfo),e(Ao,He),M(aL,He,null),e(He,tfo),e(He,One),e(One,afo),e(He,nfo),e(He,La),e(La,sfo),e(La,Vne),e(Vne,lfo),e(La,ifo),e(La,Xne),e(Xne,dfo),e(La,cfo),e(La,zne),e(zne,ffo),e(La,mfo),e(He,gfo),e(He,Y),e(Y,fh),e(fh,Wne),e(Wne,hfo),e(fh,pfo),e(fh,rI),e(rI,_fo),e(fh,ufo),e(Y,bfo),e(Y,mh),e(mh,Qne),e(Qne,vfo),e(mh,Ffo),e(mh,tI),e(tI,Tfo),e(mh,Mfo),e(Y,Efo),e(Y,gh),e(gh,Hne),e(Hne,Cfo),e(gh,wfo),e(gh,aI),e(aI,Afo),e(gh,Lfo),e(Y,yfo),e(Y,hh),e(hh,Une),e(Une,xfo),e(hh,$fo),e(hh,nI),e(nI,kfo),e(hh,Sfo),e(Y,Rfo),e(Y,ph),e(ph,Jne),e(Jne,Pfo),e(ph,Bfo),e(ph,sI),e(sI,Ifo),e(ph,Nfo),e(Y,qfo),e(Y,_h),e(_h,Yne),e(Yne,jfo),e(_h,Dfo),e(_h,lI),e(lI,Gfo),e(_h,Ofo),e(Y,Vfo),e(Y,uh),e(uh,Kne),e(Kne,Xfo),e(uh,zfo),e(uh,iI),e(iI,Wfo),e(uh,Qfo),e(Y,Hfo),e(Y,bh),e(bh,Zne),e(Zne,Ufo),e(bh,Jfo),e(bh,dI),e(dI,Yfo),e(bh,Kfo),e(Y,Zfo),e(Y,vh),e(vh,ese),e(ese,emo),e(vh,omo),e(vh,cI),e(cI,rmo),e(vh,tmo),e(Y,amo),e(Y,Fh),e(Fh,ose),e(ose,nmo),e(Fh,smo),e(Fh,fI),e(fI,lmo),e(Fh,imo),e(Y,dmo),e(Y,Th),e(Th,rse),e(rse,cmo),e(Th,fmo),e(Th,mI),e(mI,mmo),e(Th,gmo),e(Y,hmo),e(Y,Mh),e(Mh,tse),e(tse,pmo),e(Mh,_mo),e(Mh,gI),e(gI,umo),e(Mh,bmo),e(Y,vmo),e(Y,Eh),e(Eh,ase),e(ase,Fmo),e(Eh,Tmo),e(Eh,hI),e(hI,Mmo),e(Eh,Emo),e(Y,Cmo),e(Y,Ch),e(Ch,nse),e(nse,wmo),e(Ch,Amo),e(Ch,pI),e(pI,Lmo),e(Ch,ymo),e(Y,xmo),e(Y,wh),e(wh,sse),e(sse,$mo),e(wh,kmo),e(wh,_I),e(_I,Smo),e(wh,Rmo),e(Y,Pmo),e(Y,Ah),e(Ah,lse),e(lse,Bmo),e(Ah,Imo),e(Ah,uI),e(uI,Nmo),e(Ah,qmo),e(Y,jmo),e(Y,Lh),e(Lh,ise),e(ise,Dmo),e(Lh,Gmo),e(Lh,bI),e(bI,Omo),e(Lh,Vmo),e(Y,Xmo),e(Y,yh),e(yh,dse),e(dse,zmo),e(yh,Wmo),e(yh,vI),e(vI,Qmo),e(yh,Hmo),e(Y,Umo),e(Y,xh),e(xh,cse),e(cse,Jmo),e(xh,Ymo),e(xh,FI),e(FI,Kmo),e(xh,Zmo),e(Y,ego),e(Y,$h),e($h,fse),e(fse,ogo),e($h,rgo),e($h,TI),e(TI,tgo),e($h,ago),e(Y,ngo),e(Y,kh),e(kh,mse),e(mse,sgo),e(kh,lgo),e(kh,MI),e(MI,igo),e(kh,dgo),e(Y,cgo),e(Y,Sh),e(Sh,gse),e(gse,fgo),e(Sh,mgo),e(Sh,EI),e(EI,ggo),e(Sh,hgo),e(Y,pgo),e(Y,Rh),e(Rh,hse),e(hse,_go),e(Rh,ugo),e(Rh,CI),e(CI,bgo),e(Rh,vgo),e(Y,Fgo),e(Y,Ph),e(Ph,pse),e(pse,Tgo),e(Ph,Mgo),e(Ph,wI),e(wI,Ego),e(Ph,Cgo),e(Y,wgo),e(Y,Bh),e(Bh,_se),e(_se,Ago),e(Bh,Lgo),e(Bh,AI),e(AI,ygo),e(Bh,xgo),e(Y,$go),e(Y,Ih),e(Ih,use),e(use,kgo),e(Ih,Sgo),e(Ih,LI),e(LI,Rgo),e(Ih,Pgo),e(Y,Bgo),e(Y,Nh),e(Nh,bse),e(bse,Igo),e(Nh,Ngo),e(Nh,yI),e(yI,qgo),e(Nh,jgo),e(Y,Dgo),e(Y,qh),e(qh,vse),e(vse,Ggo),e(qh,Ogo),e(qh,xI),e(xI,Vgo),e(qh,Xgo),e(Y,zgo),e(Y,jh),e(jh,Fse),e(Fse,Wgo),e(jh,Qgo),e(jh,$I),e($I,Hgo),e(jh,Ugo),e(Y,Jgo),e(Y,Dh),e(Dh,Tse),e(Tse,Ygo),e(Dh,Kgo),e(Dh,kI),e(kI,Zgo),e(Dh,eho),e(He,oho),M(Gh,He,null),e(He,rho),M(Oh,He,null),e(Ao,tho),e(Ao,Vh),M(nL,Vh,null),e(Vh,aho),e(Vh,Mse),e(Mse,nho),b(f,dje,u),b(f,wi,u),e(wi,Xh),e(Xh,Ese),M(sL,Ese,null),e(wi,sho),e(wi,Cse),e(Cse,lho),b(f,cje,u),b(f,Lo,u),M(lL,Lo,null),e(Lo,iho),e(Lo,iL),e(iL,dho),e(iL,SI),e(SI,cho),e(iL,fho),e(Lo,mho),e(Lo,dL),e(dL,gho),e(dL,wse),e(wse,hho),e(dL,pho),e(Lo,_ho),e(Lo,Ue),M(cL,Ue,null),e(Ue,uho),e(Ue,Ase),e(Ase,bho),e(Ue,vho),e(Ue,Ai),e(Ai,Fho),e(Ai,Lse),e(Lse,Tho),e(Ai,Mho),e(Ai,yse),e(yse,Eho),e(Ai,Cho),e(Ue,who),e(Ue,he),e(he,zh),e(zh,xse),e(xse,Aho),e(zh,Lho),e(zh,RI),e(RI,yho),e(zh,xho),e(he,$ho),e(he,Wh),e(Wh,$se),e($se,kho),e(Wh,Sho),e(Wh,kse),e(kse,Rho),e(Wh,Pho),e(he,Bho),e(he,Qh),e(Qh,Sse),e(Sse,Iho),e(Qh,Nho),e(Qh,PI),e(PI,qho),e(Qh,jho),e(he,Dho),e(he,Hh),e(Hh,Rse),e(Rse,Gho),e(Hh,Oho),e(Hh,BI),e(BI,Vho),e(Hh,Xho),e(he,zho),e(he,Uh),e(Uh,Pse),e(Pse,Who),e(Uh,Qho),e(Uh,II),e(II,Hho),e(Uh,Uho),e(he,Jho),e(he,Jh),e(Jh,Bse),e(Bse,Yho),e(Jh,Kho),e(Jh,NI),e(NI,Zho),e(Jh,epo),e(he,opo),e(he,Yh),e(Yh,Ise),e(Ise,rpo),e(Yh,tpo),e(Yh,qI),e(qI,apo),e(Yh,npo),e(he,spo),e(he,Kh),e(Kh,Nse),e(Nse,lpo),e(Kh,ipo),e(Kh,jI),e(jI,dpo),e(Kh,cpo),e(he,fpo),e(he,Zh),e(Zh,qse),e(qse,mpo),e(Zh,gpo),e(Zh,DI),e(DI,hpo),e(Zh,ppo),e(he,_po),e(he,ep),e(ep,jse),e(jse,upo),e(ep,bpo),e(ep,GI),e(GI,vpo),e(ep,Fpo),e(he,Tpo),e(he,op),e(op,Dse),e(Dse,Mpo),e(op,Epo),e(op,OI),e(OI,Cpo),e(op,wpo),e(he,Apo),e(he,rp),e(rp,Gse),e(Gse,Lpo),e(rp,ypo),e(rp,VI),e(VI,xpo),e(rp,$po),e(he,kpo),e(he,tp),e(tp,Ose),e(Ose,Spo),e(tp,Rpo),e(tp,XI),e(XI,Ppo),e(tp,Bpo),e(he,Ipo),e(he,ap),e(ap,Vse),e(Vse,Npo),e(ap,qpo),e(ap,zI),e(zI,jpo),e(ap,Dpo),e(he,Gpo),e(he,np),e(np,Xse),e(Xse,Opo),e(np,Vpo),e(np,WI),e(WI,Xpo),e(np,zpo),e(he,Wpo),e(he,sp),e(sp,zse),e(zse,Qpo),e(sp,Hpo),e(sp,QI),e(QI,Upo),e(sp,Jpo),e(he,Ypo),e(he,lp),e(lp,Wse),e(Wse,Kpo),e(lp,Zpo),e(lp,HI),e(HI,e_o),e(lp,o_o),e(Ue,r_o),M(ip,Ue,null),e(Ue,t_o),M(dp,Ue,null),e(Lo,a_o),e(Lo,cp),M(fL,cp,null),e(cp,n_o),e(cp,Qse),e(Qse,s_o),b(f,fje,u),b(f,Li,u),e(Li,fp),e(fp,Hse),M(mL,Hse,null),e(Li,l_o),e(Li,Use),e(Use,i_o),b(f,mje,u),b(f,yo,u),M(gL,yo,null),e(yo,d_o),e(yo,yi),e(yi,c_o),e(yi,UI),e(UI,f_o),e(yi,m_o),e(yi,JI),e(JI,g_o),e(yi,h_o),e(yo,p_o),e(yo,hL),e(hL,__o),e(hL,Jse),e(Jse,u_o),e(hL,b_o),e(yo,v_o),e(yo,tt),M(pL,tt,null),e(tt,F_o),e(tt,Yse),e(Yse,T_o),e(tt,M_o),e(tt,xi),e(xi,E_o),e(xi,Kse),e(Kse,C_o),e(xi,w_o),e(xi,YI),e(YI,A_o),e(xi,L_o),e(tt,y_o),M(mp,tt,null),e(yo,x_o),e(yo,Je),M(_L,Je,null),e(Je,$_o),e(Je,Zse),e(Zse,k_o),e(Je,S_o),e(Je,ya),e(ya,R_o),e(ya,ele),e(ele,P_o),e(ya,B_o),e(ya,ole),e(ole,I_o),e(ya,N_o),e(ya,rle),e(rle,q_o),e(ya,j_o),e(Je,D_o),e(Je,x),e(x,gp),e(gp,tle),e(tle,G_o),e(gp,O_o),e(gp,KI),e(KI,V_o),e(gp,X_o),e(x,z_o),e(x,hp),e(hp,ale),e(ale,W_o),e(hp,Q_o),e(hp,ZI),e(ZI,H_o),e(hp,U_o),e(x,J_o),e(x,pp),e(pp,nle),e(nle,Y_o),e(pp,K_o),e(pp,eN),e(eN,Z_o),e(pp,euo),e(x,ouo),e(x,_p),e(_p,sle),e(sle,ruo),e(_p,tuo),e(_p,oN),e(oN,auo),e(_p,nuo),e(x,suo),e(x,up),e(up,lle),e(lle,luo),e(up,iuo),e(up,rN),e(rN,duo),e(up,cuo),e(x,fuo),e(x,bp),e(bp,ile),e(ile,muo),e(bp,guo),e(bp,tN),e(tN,huo),e(bp,puo),e(x,_uo),e(x,vp),e(vp,dle),e(dle,uuo),e(vp,buo),e(vp,aN),e(aN,vuo),e(vp,Fuo),e(x,Tuo),e(x,Fp),e(Fp,cle),e(cle,Muo),e(Fp,Euo),e(Fp,nN),e(nN,Cuo),e(Fp,wuo),e(x,Auo),e(x,Tp),e(Tp,fle),e(fle,Luo),e(Tp,yuo),e(Tp,sN),e(sN,xuo),e(Tp,$uo),e(x,kuo),e(x,Mp),e(Mp,mle),e(mle,Suo),e(Mp,Ruo),e(Mp,lN),e(lN,Puo),e(Mp,Buo),e(x,Iuo),e(x,Ep),e(Ep,gle),e(gle,Nuo),e(Ep,quo),e(Ep,iN),e(iN,juo),e(Ep,Duo),e(x,Guo),e(x,Cp),e(Cp,hle),e(hle,Ouo),e(Cp,Vuo),e(Cp,dN),e(dN,Xuo),e(Cp,zuo),e(x,Wuo),e(x,wp),e(wp,ple),e(ple,Quo),e(wp,Huo),e(wp,cN),e(cN,Uuo),e(wp,Juo),e(x,Yuo),e(x,Ap),e(Ap,_le),e(_le,Kuo),e(Ap,Zuo),e(Ap,fN),e(fN,e4o),e(Ap,o4o),e(x,r4o),e(x,Lp),e(Lp,ule),e(ule,t4o),e(Lp,a4o),e(Lp,mN),e(mN,n4o),e(Lp,s4o),e(x,l4o),e(x,yp),e(yp,ble),e(ble,i4o),e(yp,d4o),e(yp,gN),e(gN,c4o),e(yp,f4o),e(x,m4o),e(x,xp),e(xp,vle),e(vle,g4o),e(xp,h4o),e(xp,hN),e(hN,p4o),e(xp,_4o),e(x,u4o),e(x,$p),e($p,Fle),e(Fle,b4o),e($p,v4o),e($p,pN),e(pN,F4o),e($p,T4o),e(x,M4o),e(x,kp),e(kp,Tle),e(Tle,E4o),e(kp,C4o),e(kp,_N),e(_N,w4o),e(kp,A4o),e(x,L4o),e(x,Sp),e(Sp,Mle),e(Mle,y4o),e(Sp,x4o),e(Sp,uN),e(uN,$4o),e(Sp,k4o),e(x,S4o),e(x,Rp),e(Rp,Ele),e(Ele,R4o),e(Rp,P4o),e(Rp,bN),e(bN,B4o),e(Rp,I4o),e(x,N4o),e(x,Pp),e(Pp,Cle),e(Cle,q4o),e(Pp,j4o),e(Pp,vN),e(vN,D4o),e(Pp,G4o),e(x,O4o),e(x,Bp),e(Bp,wle),e(wle,V4o),e(Bp,X4o),e(Bp,FN),e(FN,z4o),e(Bp,W4o),e(x,Q4o),e(x,Ip),e(Ip,Ale),e(Ale,H4o),e(Ip,U4o),e(Ip,TN),e(TN,J4o),e(Ip,Y4o),e(x,K4o),e(x,Np),e(Np,Lle),e(Lle,Z4o),e(Np,e1o),e(Np,MN),e(MN,o1o),e(Np,r1o),e(x,t1o),e(x,qp),e(qp,yle),e(yle,a1o),e(qp,n1o),e(qp,EN),e(EN,s1o),e(qp,l1o),e(x,i1o),e(x,jp),e(jp,xle),e(xle,d1o),e(jp,c1o),e(jp,CN),e(CN,f1o),e(jp,m1o),e(x,g1o),e(x,Dp),e(Dp,$le),e($le,h1o),e(Dp,p1o),e(Dp,wN),e(wN,_1o),e(Dp,u1o),e(x,b1o),e(x,Gp),e(Gp,kle),e(kle,v1o),e(Gp,F1o),e(Gp,AN),e(AN,T1o),e(Gp,M1o),e(x,E1o),e(x,Op),e(Op,Sle),e(Sle,C1o),e(Op,w1o),e(Op,LN),e(LN,A1o),e(Op,L1o),e(x,y1o),e(x,Vp),e(Vp,Rle),e(Rle,x1o),e(Vp,$1o),e(Vp,yN),e(yN,k1o),e(Vp,S1o),e(x,R1o),e(x,Xp),e(Xp,Ple),e(Ple,P1o),e(Xp,B1o),e(Xp,xN),e(xN,I1o),e(Xp,N1o),e(x,q1o),e(x,zp),e(zp,Ble),e(Ble,j1o),e(zp,D1o),e(zp,$N),e($N,G1o),e(zp,O1o),e(x,V1o),e(x,Bs),e(Bs,Ile),e(Ile,X1o),e(Bs,z1o),e(Bs,kN),e(kN,W1o),e(Bs,Q1o),e(Bs,SN),e(SN,H1o),e(Bs,U1o),e(x,J1o),e(x,Wp),e(Wp,Nle),e(Nle,Y1o),e(Wp,K1o),e(Wp,RN),e(RN,Z1o),e(Wp,ebo),e(x,obo),e(x,Qp),e(Qp,qle),e(qle,rbo),e(Qp,tbo),e(Qp,PN),e(PN,abo),e(Qp,nbo),e(x,sbo),e(x,Hp),e(Hp,jle),e(jle,lbo),e(Hp,ibo),e(Hp,BN),e(BN,dbo),e(Hp,cbo),e(x,fbo),e(x,Up),e(Up,Dle),e(Dle,mbo),e(Up,gbo),e(Up,IN),e(IN,hbo),e(Up,pbo),e(x,_bo),e(x,Jp),e(Jp,Gle),e(Gle,ubo),e(Jp,bbo),e(Jp,NN),e(NN,vbo),e(Jp,Fbo),e(x,Tbo),e(x,Yp),e(Yp,Ole),e(Ole,Mbo),e(Yp,Ebo),e(Yp,qN),e(qN,Cbo),e(Yp,wbo),e(x,Abo),e(x,Kp),e(Kp,Vle),e(Vle,Lbo),e(Kp,ybo),e(Kp,jN),e(jN,xbo),e(Kp,$bo),e(x,kbo),e(x,Zp),e(Zp,Xle),e(Xle,Sbo),e(Zp,Rbo),e(Zp,DN),e(DN,Pbo),e(Zp,Bbo),e(x,Ibo),e(x,e_),e(e_,zle),e(zle,Nbo),e(e_,qbo),e(e_,GN),e(GN,jbo),e(e_,Dbo),e(x,Gbo),e(x,o_),e(o_,Wle),e(Wle,Obo),e(o_,Vbo),e(o_,ON),e(ON,Xbo),e(o_,zbo),e(x,Wbo),e(x,r_),e(r_,Qle),e(Qle,Qbo),e(r_,Hbo),e(r_,VN),e(VN,Ubo),e(r_,Jbo),e(x,Ybo),e(x,t_),e(t_,Hle),e(Hle,Kbo),e(t_,Zbo),e(t_,XN),e(XN,e2o),e(t_,o2o),e(x,r2o),e(x,a_),e(a_,Ule),e(Ule,t2o),e(a_,a2o),e(a_,zN),e(zN,n2o),e(a_,s2o),e(x,l2o),e(x,n_),e(n_,Jle),e(Jle,i2o),e(n_,d2o),e(n_,WN),e(WN,c2o),e(n_,f2o),e(x,m2o),e(x,s_),e(s_,Yle),e(Yle,g2o),e(s_,h2o),e(s_,QN),e(QN,p2o),e(s_,_2o),e(x,u2o),e(x,l_),e(l_,Kle),e(Kle,b2o),e(l_,v2o),e(l_,HN),e(HN,F2o),e(l_,T2o),e(x,M2o),e(x,i_),e(i_,Zle),e(Zle,E2o),e(i_,C2o),e(i_,UN),e(UN,w2o),e(i_,A2o),e(x,L2o),e(x,d_),e(d_,eie),e(eie,y2o),e(d_,x2o),e(d_,JN),e(JN,$2o),e(d_,k2o),e(x,S2o),e(x,c_),e(c_,oie),e(oie,R2o),e(c_,P2o),e(c_,YN),e(YN,B2o),e(c_,I2o),e(x,N2o),e(x,f_),e(f_,rie),e(rie,q2o),e(f_,j2o),e(f_,KN),e(KN,D2o),e(f_,G2o),e(x,O2o),e(x,m_),e(m_,tie),e(tie,V2o),e(m_,X2o),e(m_,ZN),e(ZN,z2o),e(m_,W2o),e(x,Q2o),e(x,g_),e(g_,aie),e(aie,H2o),e(g_,U2o),e(g_,eq),e(eq,J2o),e(g_,Y2o),e(x,K2o),e(x,h_),e(h_,nie),e(nie,Z2o),e(h_,evo),e(h_,oq),e(oq,ovo),e(h_,rvo),e(x,tvo),e(x,p_),e(p_,sie),e(sie,avo),e(p_,nvo),e(p_,rq),e(rq,svo),e(p_,lvo),e(x,ivo),e(x,__),e(__,lie),e(lie,dvo),e(__,cvo),e(__,tq),e(tq,fvo),e(__,mvo),e(x,gvo),e(x,u_),e(u_,iie),e(iie,hvo),e(u_,pvo),e(u_,aq),e(aq,_vo),e(u_,uvo),e(x,bvo),e(x,b_),e(b_,die),e(die,vvo),e(b_,Fvo),e(b_,nq),e(nq,Tvo),e(b_,Mvo),e(x,Evo),e(x,v_),e(v_,cie),e(cie,Cvo),e(v_,wvo),e(v_,sq),e(sq,Avo),e(v_,Lvo),e(x,yvo),e(x,F_),e(F_,fie),e(fie,xvo),e(F_,$vo),e(F_,lq),e(lq,kvo),e(F_,Svo),e(x,Rvo),e(x,T_),e(T_,mie),e(mie,Pvo),e(T_,Bvo),e(T_,iq),e(iq,Ivo),e(T_,Nvo),e(x,qvo),e(x,M_),e(M_,gie),e(gie,jvo),e(M_,Dvo),e(M_,dq),e(dq,Gvo),e(M_,Ovo),e(x,Vvo),e(x,E_),e(E_,hie),e(hie,Xvo),e(E_,zvo),e(E_,cq),e(cq,Wvo),e(E_,Qvo),e(x,Hvo),e(x,C_),e(C_,pie),e(pie,Uvo),e(C_,Jvo),e(C_,fq),e(fq,Yvo),e(C_,Kvo),e(x,Zvo),e(x,w_),e(w_,_ie),e(_ie,e3o),e(w_,o3o),e(w_,mq),e(mq,r3o),e(w_,t3o),e(x,a3o),e(x,A_),e(A_,uie),e(uie,n3o),e(A_,s3o),e(A_,gq),e(gq,l3o),e(A_,i3o),e(x,d3o),e(x,L_),e(L_,bie),e(bie,c3o),e(L_,f3o),e(L_,hq),e(hq,m3o),e(L_,g3o),e(x,h3o),e(x,y_),e(y_,vie),e(vie,p3o),e(y_,_3o),e(y_,pq),e(pq,u3o),e(y_,b3o),e(x,v3o),e(x,x_),e(x_,Fie),e(Fie,F3o),e(x_,T3o),e(x_,_q),e(_q,M3o),e(x_,E3o),e(x,C3o),e(x,$_),e($_,Tie),e(Tie,w3o),e($_,A3o),e($_,uq),e(uq,L3o),e($_,y3o),e(x,x3o),e(x,k_),e(k_,Mie),e(Mie,$3o),e(k_,k3o),e(k_,bq),e(bq,S3o),e(k_,R3o),e(x,P3o),e(x,S_),e(S_,Eie),e(Eie,B3o),e(S_,I3o),e(S_,vq),e(vq,N3o),e(S_,q3o),e(x,j3o),e(x,R_),e(R_,Cie),e(Cie,D3o),e(R_,G3o),e(R_,Fq),e(Fq,O3o),e(R_,V3o),e(x,X3o),e(x,P_),e(P_,wie),e(wie,z3o),e(P_,W3o),e(P_,Tq),e(Tq,Q3o),e(P_,H3o),e(x,U3o),e(x,B_),e(B_,Aie),e(Aie,J3o),e(B_,Y3o),e(B_,Mq),e(Mq,K3o),e(B_,Z3o),e(x,eFo),e(x,I_),e(I_,Lie),e(Lie,oFo),e(I_,rFo),e(I_,Eq),e(Eq,tFo),e(I_,aFo),e(x,nFo),e(x,N_),e(N_,yie),e(yie,sFo),e(N_,lFo),e(N_,Cq),e(Cq,iFo),e(N_,dFo),e(x,cFo),e(x,q_),e(q_,xie),e(xie,fFo),e(q_,mFo),e(q_,wq),e(wq,gFo),e(q_,hFo),e(x,pFo),e(x,j_),e(j_,$ie),e($ie,_Fo),e(j_,uFo),e(j_,Aq),e(Aq,bFo),e(j_,vFo),e(x,FFo),e(x,D_),e(D_,kie),e(kie,TFo),e(D_,MFo),e(D_,Lq),e(Lq,EFo),e(D_,CFo),e(x,wFo),e(x,G_),e(G_,Sie),e(Sie,AFo),e(G_,LFo),e(G_,yq),e(yq,yFo),e(G_,xFo),e(x,$Fo),e(x,O_),e(O_,Rie),e(Rie,kFo),e(O_,SFo),e(O_,xq),e(xq,RFo),e(O_,PFo),e(x,BFo),e(x,V_),e(V_,Pie),e(Pie,IFo),e(V_,NFo),e(V_,$q),e($q,qFo),e(V_,jFo),e(x,DFo),e(x,X_),e(X_,Bie),e(Bie,GFo),e(X_,OFo),e(X_,kq),e(kq,VFo),e(X_,XFo),e(x,zFo),e(x,z_),e(z_,Iie),e(Iie,WFo),e(z_,QFo),e(z_,Sq),e(Sq,HFo),e(z_,UFo),e(x,JFo),e(x,W_),e(W_,Nie),e(Nie,YFo),e(W_,KFo),e(W_,Rq),e(Rq,ZFo),e(W_,eTo),e(x,oTo),e(x,Q_),e(Q_,qie),e(qie,rTo),e(Q_,tTo),e(Q_,Pq),e(Pq,aTo),e(Q_,nTo),e(x,sTo),e(x,H_),e(H_,jie),e(jie,lTo),e(H_,iTo),e(H_,Bq),e(Bq,dTo),e(H_,cTo),e(x,fTo),e(x,U_),e(U_,Die),e(Die,mTo),e(U_,gTo),e(U_,Iq),e(Iq,hTo),e(U_,pTo),e(x,_To),e(x,J_),e(J_,Gie),e(Gie,uTo),e(J_,bTo),e(J_,Nq),e(Nq,vTo),e(J_,FTo),e(x,TTo),e(x,Y_),e(Y_,Oie),e(Oie,MTo),e(Y_,ETo),e(Y_,qq),e(qq,CTo),e(Y_,wTo),e(x,ATo),e(x,K_),e(K_,Vie),e(Vie,LTo),e(K_,yTo),e(K_,jq),e(jq,xTo),e(K_,$To),e(x,kTo),e(x,Z_),e(Z_,Xie),e(Xie,STo),e(Z_,RTo),e(Z_,Dq),e(Dq,PTo),e(Z_,BTo),e(x,ITo),e(x,eu),e(eu,zie),e(zie,NTo),e(eu,qTo),e(eu,Gq),e(Gq,jTo),e(eu,DTo),e(x,GTo),e(x,ou),e(ou,Wie),e(Wie,OTo),e(ou,VTo),e(ou,Oq),e(Oq,XTo),e(ou,zTo),e(x,WTo),e(x,ru),e(ru,Qie),e(Qie,QTo),e(ru,HTo),e(ru,Vq),e(Vq,UTo),e(ru,JTo),e(x,YTo),e(x,tu),e(tu,Hie),e(Hie,KTo),e(tu,ZTo),e(tu,Xq),e(Xq,e7o),e(tu,o7o),e(x,r7o),e(x,au),e(au,Uie),e(Uie,t7o),e(au,a7o),e(au,zq),e(zq,n7o),e(au,s7o),e(x,l7o),e(x,nu),e(nu,Jie),e(Jie,i7o),e(nu,d7o),e(nu,Wq),e(Wq,c7o),e(nu,f7o),e(x,m7o),e(x,su),e(su,Yie),e(Yie,g7o),e(su,h7o),e(su,Qq),e(Qq,p7o),e(su,_7o),e(x,u7o),e(x,lu),e(lu,Kie),e(Kie,b7o),e(lu,v7o),e(lu,Hq),e(Hq,F7o),e(lu,T7o),e(Je,M7o),e(Je,iu),e(iu,E7o),e(iu,Zie),e(Zie,C7o),e(iu,w7o),e(iu,ede),e(ede,A7o),e(Je,L7o),M(du,Je,null),b(f,gje,u),b(f,$i,u),e($i,cu),e(cu,ode),M(uL,ode,null),e($i,y7o),e($i,rde),e(rde,x7o),b(f,hje,u),b(f,xo,u),M(bL,xo,null),e(xo,$7o),e(xo,ki),e(ki,k7o),e(ki,Uq),e(Uq,S7o),e(ki,R7o),e(ki,Jq),e(Jq,P7o),e(ki,B7o),e(xo,I7o),e(xo,vL),e(vL,N7o),e(vL,tde),e(tde,q7o),e(vL,j7o),e(xo,D7o),e(xo,at),M(FL,at,null),e(at,G7o),e(at,ade),e(ade,O7o),e(at,V7o),e(at,Si),e(Si,X7o),e(Si,nde),e(nde,z7o),e(Si,W7o),e(Si,Yq),e(Yq,Q7o),e(Si,H7o),e(at,U7o),M(fu,at,null),e(xo,J7o),e(xo,Ye),M(TL,Ye,null),e(Ye,Y7o),e(Ye,sde),e(sde,K7o),e(Ye,Z7o),e(Ye,xa),e(xa,eMo),e(xa,lde),e(lde,oMo),e(xa,rMo),e(xa,ide),e(ide,tMo),e(xa,aMo),e(xa,dde),e(dde,nMo),e(xa,sMo),e(Ye,lMo),e(Ye,G),e(G,mu),e(mu,cde),e(cde,iMo),e(mu,dMo),e(mu,Kq),e(Kq,cMo),e(mu,fMo),e(G,mMo),e(G,gu),e(gu,fde),e(fde,gMo),e(gu,hMo),e(gu,Zq),e(Zq,pMo),e(gu,_Mo),e(G,uMo),e(G,hu),e(hu,mde),e(mde,bMo),e(hu,vMo),e(hu,ej),e(ej,FMo),e(hu,TMo),e(G,MMo),e(G,pu),e(pu,gde),e(gde,EMo),e(pu,CMo),e(pu,oj),e(oj,wMo),e(pu,AMo),e(G,LMo),e(G,_u),e(_u,hde),e(hde,yMo),e(_u,xMo),e(_u,rj),e(rj,$Mo),e(_u,kMo),e(G,SMo),e(G,uu),e(uu,pde),e(pde,RMo),e(uu,PMo),e(uu,tj),e(tj,BMo),e(uu,IMo),e(G,NMo),e(G,bu),e(bu,_de),e(_de,qMo),e(bu,jMo),e(bu,aj),e(aj,DMo),e(bu,GMo),e(G,OMo),e(G,vu),e(vu,ude),e(ude,VMo),e(vu,XMo),e(vu,nj),e(nj,zMo),e(vu,WMo),e(G,QMo),e(G,Fu),e(Fu,bde),e(bde,HMo),e(Fu,UMo),e(Fu,sj),e(sj,JMo),e(Fu,YMo),e(G,KMo),e(G,Tu),e(Tu,vde),e(vde,ZMo),e(Tu,eEo),e(Tu,lj),e(lj,oEo),e(Tu,rEo),e(G,tEo),e(G,Mu),e(Mu,Fde),e(Fde,aEo),e(Mu,nEo),e(Mu,ij),e(ij,sEo),e(Mu,lEo),e(G,iEo),e(G,Eu),e(Eu,Tde),e(Tde,dEo),e(Eu,cEo),e(Eu,dj),e(dj,fEo),e(Eu,mEo),e(G,gEo),e(G,Cu),e(Cu,Mde),e(Mde,hEo),e(Cu,pEo),e(Cu,cj),e(cj,_Eo),e(Cu,uEo),e(G,bEo),e(G,wu),e(wu,Ede),e(Ede,vEo),e(wu,FEo),e(wu,fj),e(fj,TEo),e(wu,MEo),e(G,EEo),e(G,Au),e(Au,Cde),e(Cde,CEo),e(Au,wEo),e(Au,mj),e(mj,AEo),e(Au,LEo),e(G,yEo),e(G,Lu),e(Lu,wde),e(wde,xEo),e(Lu,$Eo),e(Lu,gj),e(gj,kEo),e(Lu,SEo),e(G,REo),e(G,yu),e(yu,Ade),e(Ade,PEo),e(yu,BEo),e(yu,hj),e(hj,IEo),e(yu,NEo),e(G,qEo),e(G,xu),e(xu,Lde),e(Lde,jEo),e(xu,DEo),e(xu,pj),e(pj,GEo),e(xu,OEo),e(G,VEo),e(G,$u),e($u,yde),e(yde,XEo),e($u,zEo),e($u,_j),e(_j,WEo),e($u,QEo),e(G,HEo),e(G,ku),e(ku,xde),e(xde,UEo),e(ku,JEo),e(ku,uj),e(uj,YEo),e(ku,KEo),e(G,ZEo),e(G,Su),e(Su,$de),e($de,eCo),e(Su,oCo),e(Su,bj),e(bj,rCo),e(Su,tCo),e(G,aCo),e(G,Ru),e(Ru,kde),e(kde,nCo),e(Ru,sCo),e(Ru,vj),e(vj,lCo),e(Ru,iCo),e(G,dCo),e(G,Pu),e(Pu,Sde),e(Sde,cCo),e(Pu,fCo),e(Pu,Fj),e(Fj,mCo),e(Pu,gCo),e(G,hCo),e(G,Bu),e(Bu,Rde),e(Rde,pCo),e(Bu,_Co),e(Bu,Tj),e(Tj,uCo),e(Bu,bCo),e(G,vCo),e(G,Iu),e(Iu,Pde),e(Pde,FCo),e(Iu,TCo),e(Iu,Mj),e(Mj,MCo),e(Iu,ECo),e(G,CCo),e(G,Nu),e(Nu,Bde),e(Bde,wCo),e(Nu,ACo),e(Nu,Ej),e(Ej,LCo),e(Nu,yCo),e(G,xCo),e(G,qu),e(qu,Ide),e(Ide,$Co),e(qu,kCo),e(qu,Cj),e(Cj,SCo),e(qu,RCo),e(G,PCo),e(G,ju),e(ju,Nde),e(Nde,BCo),e(ju,ICo),e(ju,wj),e(wj,NCo),e(ju,qCo),e(G,jCo),e(G,Du),e(Du,qde),e(qde,DCo),e(Du,GCo),e(Du,Aj),e(Aj,OCo),e(Du,VCo),e(G,XCo),e(G,Gu),e(Gu,jde),e(jde,zCo),e(Gu,WCo),e(Gu,Lj),e(Lj,QCo),e(Gu,HCo),e(G,UCo),e(G,Ou),e(Ou,Dde),e(Dde,JCo),e(Ou,YCo),e(Ou,yj),e(yj,KCo),e(Ou,ZCo),e(G,e5o),e(G,Vu),e(Vu,Gde),e(Gde,o5o),e(Vu,r5o),e(Vu,xj),e(xj,t5o),e(Vu,a5o),e(G,n5o),e(G,Xu),e(Xu,Ode),e(Ode,s5o),e(Xu,l5o),e(Xu,$j),e($j,i5o),e(Xu,d5o),e(G,c5o),e(G,zu),e(zu,Vde),e(Vde,f5o),e(zu,m5o),e(zu,kj),e(kj,g5o),e(zu,h5o),e(G,p5o),e(G,Wu),e(Wu,Xde),e(Xde,_5o),e(Wu,u5o),e(Wu,Sj),e(Sj,b5o),e(Wu,v5o),e(G,F5o),e(G,Qu),e(Qu,zde),e(zde,T5o),e(Qu,M5o),e(Qu,Rj),e(Rj,E5o),e(Qu,C5o),e(G,w5o),e(G,Hu),e(Hu,Wde),e(Wde,A5o),e(Hu,L5o),e(Hu,Pj),e(Pj,y5o),e(Hu,x5o),e(G,$5o),e(G,Uu),e(Uu,Qde),e(Qde,k5o),e(Uu,S5o),e(Uu,Bj),e(Bj,R5o),e(Uu,P5o),e(G,B5o),e(G,Ju),e(Ju,Hde),e(Hde,I5o),e(Ju,N5o),e(Ju,Ij),e(Ij,q5o),e(Ju,j5o),e(G,D5o),e(G,Yu),e(Yu,Ude),e(Ude,G5o),e(Yu,O5o),e(Yu,Nj),e(Nj,V5o),e(Yu,X5o),e(G,z5o),e(G,Ku),e(Ku,Jde),e(Jde,W5o),e(Ku,Q5o),e(Ku,qj),e(qj,H5o),e(Ku,U5o),e(G,J5o),e(G,Zu),e(Zu,Yde),e(Yde,Y5o),e(Zu,K5o),e(Zu,jj),e(jj,Z5o),e(Zu,e0o),e(Ye,o0o),e(Ye,e4),e(e4,r0o),e(e4,Kde),e(Kde,t0o),e(e4,a0o),e(e4,Zde),e(Zde,n0o),e(Ye,s0o),M(o4,Ye,null),b(f,pje,u),b(f,Ri,u),e(Ri,r4),e(r4,ece),M(ML,ece,null),e(Ri,l0o),e(Ri,oce),e(oce,i0o),b(f,_je,u),b(f,$o,u),M(EL,$o,null),e($o,d0o),e($o,Pi),e(Pi,c0o),e(Pi,Dj),e(Dj,f0o),e(Pi,m0o),e(Pi,Gj),e(Gj,g0o),e(Pi,h0o),e($o,p0o),e($o,CL),e(CL,_0o),e(CL,rce),e(rce,u0o),e(CL,b0o),e($o,v0o),e($o,nt),M(wL,nt,null),e(nt,F0o),e(nt,tce),e(tce,T0o),e(nt,M0o),e(nt,Bi),e(Bi,E0o),e(Bi,ace),e(ace,C0o),e(Bi,w0o),e(Bi,Oj),e(Oj,A0o),e(Bi,L0o),e(nt,y0o),M(t4,nt,null),e($o,x0o),e($o,Ke),M(AL,Ke,null),e(Ke,$0o),e(Ke,nce),e(nce,k0o),e(Ke,S0o),e(Ke,$a),e($a,R0o),e($a,sce),e(sce,P0o),e($a,B0o),e($a,lce),e(lce,I0o),e($a,N0o),e($a,ice),e(ice,q0o),e($a,j0o),e(Ke,D0o),e(Ke,z),e(z,a4),e(a4,dce),e(dce,G0o),e(a4,O0o),e(a4,Vj),e(Vj,V0o),e(a4,X0o),e(z,z0o),e(z,n4),e(n4,cce),e(cce,W0o),e(n4,Q0o),e(n4,Xj),e(Xj,H0o),e(n4,U0o),e(z,J0o),e(z,s4),e(s4,fce),e(fce,Y0o),e(s4,K0o),e(s4,zj),e(zj,Z0o),e(s4,ewo),e(z,owo),e(z,l4),e(l4,mce),e(mce,rwo),e(l4,two),e(l4,Wj),e(Wj,awo),e(l4,nwo),e(z,swo),e(z,i4),e(i4,gce),e(gce,lwo),e(i4,iwo),e(i4,Qj),e(Qj,dwo),e(i4,cwo),e(z,fwo),e(z,d4),e(d4,hce),e(hce,mwo),e(d4,gwo),e(d4,Hj),e(Hj,hwo),e(d4,pwo),e(z,_wo),e(z,c4),e(c4,pce),e(pce,uwo),e(c4,bwo),e(c4,Uj),e(Uj,vwo),e(c4,Fwo),e(z,Two),e(z,f4),e(f4,_ce),e(_ce,Mwo),e(f4,Ewo),e(f4,Jj),e(Jj,Cwo),e(f4,wwo),e(z,Awo),e(z,m4),e(m4,uce),e(uce,Lwo),e(m4,ywo),e(m4,Yj),e(Yj,xwo),e(m4,$wo),e(z,kwo),e(z,g4),e(g4,bce),e(bce,Swo),e(g4,Rwo),e(g4,Kj),e(Kj,Pwo),e(g4,Bwo),e(z,Iwo),e(z,h4),e(h4,vce),e(vce,Nwo),e(h4,qwo),e(h4,Zj),e(Zj,jwo),e(h4,Dwo),e(z,Gwo),e(z,p4),e(p4,Fce),e(Fce,Owo),e(p4,Vwo),e(p4,eD),e(eD,Xwo),e(p4,zwo),e(z,Wwo),e(z,_4),e(_4,Tce),e(Tce,Qwo),e(_4,Hwo),e(_4,oD),e(oD,Uwo),e(_4,Jwo),e(z,Ywo),e(z,u4),e(u4,Mce),e(Mce,Kwo),e(u4,Zwo),e(u4,rD),e(rD,eAo),e(u4,oAo),e(z,rAo),e(z,b4),e(b4,Ece),e(Ece,tAo),e(b4,aAo),e(b4,tD),e(tD,nAo),e(b4,sAo),e(z,lAo),e(z,v4),e(v4,Cce),e(Cce,iAo),e(v4,dAo),e(v4,aD),e(aD,cAo),e(v4,fAo),e(z,mAo),e(z,F4),e(F4,wce),e(wce,gAo),e(F4,hAo),e(F4,nD),e(nD,pAo),e(F4,_Ao),e(z,uAo),e(z,T4),e(T4,Ace),e(Ace,bAo),e(T4,vAo),e(T4,sD),e(sD,FAo),e(T4,TAo),e(z,MAo),e(z,M4),e(M4,Lce),e(Lce,EAo),e(M4,CAo),e(M4,lD),e(lD,wAo),e(M4,AAo),e(z,LAo),e(z,E4),e(E4,yce),e(yce,yAo),e(E4,xAo),e(E4,iD),e(iD,$Ao),e(E4,kAo),e(z,SAo),e(z,C4),e(C4,xce),e(xce,RAo),e(C4,PAo),e(C4,dD),e(dD,BAo),e(C4,IAo),e(z,NAo),e(z,w4),e(w4,$ce),e($ce,qAo),e(w4,jAo),e(w4,cD),e(cD,DAo),e(w4,GAo),e(z,OAo),e(z,A4),e(A4,kce),e(kce,VAo),e(A4,XAo),e(A4,fD),e(fD,zAo),e(A4,WAo),e(z,QAo),e(z,L4),e(L4,Sce),e(Sce,HAo),e(L4,UAo),e(L4,mD),e(mD,JAo),e(L4,YAo),e(z,KAo),e(z,y4),e(y4,Rce),e(Rce,ZAo),e(y4,e6o),e(y4,gD),e(gD,o6o),e(y4,r6o),e(z,t6o),e(z,x4),e(x4,Pce),e(Pce,a6o),e(x4,n6o),e(x4,hD),e(hD,s6o),e(x4,l6o),e(z,i6o),e(z,$4),e($4,Bce),e(Bce,d6o),e($4,c6o),e($4,pD),e(pD,f6o),e($4,m6o),e(z,g6o),e(z,k4),e(k4,Ice),e(Ice,h6o),e(k4,p6o),e(k4,_D),e(_D,_6o),e(k4,u6o),e(z,b6o),e(z,S4),e(S4,Nce),e(Nce,v6o),e(S4,F6o),e(S4,uD),e(uD,T6o),e(S4,M6o),e(z,E6o),e(z,R4),e(R4,qce),e(qce,C6o),e(R4,w6o),e(R4,bD),e(bD,A6o),e(R4,L6o),e(z,y6o),e(z,P4),e(P4,jce),e(jce,x6o),e(P4,$6o),e(P4,vD),e(vD,k6o),e(P4,S6o),e(z,R6o),e(z,B4),e(B4,Dce),e(Dce,P6o),e(B4,B6o),e(B4,FD),e(FD,I6o),e(B4,N6o),e(z,q6o),e(z,I4),e(I4,Gce),e(Gce,j6o),e(I4,D6o),e(I4,TD),e(TD,G6o),e(I4,O6o),e(z,V6o),e(z,N4),e(N4,Oce),e(Oce,X6o),e(N4,z6o),e(N4,MD),e(MD,W6o),e(N4,Q6o),e(z,H6o),e(z,q4),e(q4,Vce),e(Vce,U6o),e(q4,J6o),e(q4,ED),e(ED,Y6o),e(q4,K6o),e(z,Z6o),e(z,j4),e(j4,Xce),e(Xce,eLo),e(j4,oLo),e(j4,CD),e(CD,rLo),e(j4,tLo),e(z,aLo),e(z,D4),e(D4,zce),e(zce,nLo),e(D4,sLo),e(D4,wD),e(wD,lLo),e(D4,iLo),e(z,dLo),e(z,G4),e(G4,Wce),e(Wce,cLo),e(G4,fLo),e(G4,AD),e(AD,mLo),e(G4,gLo),e(Ke,hLo),e(Ke,O4),e(O4,pLo),e(O4,Qce),e(Qce,_Lo),e(O4,uLo),e(O4,Hce),e(Hce,bLo),e(Ke,vLo),M(V4,Ke,null),b(f,uje,u),b(f,Ii,u),e(Ii,X4),e(X4,Uce),M(LL,Uce,null),e(Ii,FLo),e(Ii,Jce),e(Jce,TLo),b(f,bje,u),b(f,ko,u),M(yL,ko,null),e(ko,MLo),e(ko,Ni),e(Ni,ELo),e(Ni,LD),e(LD,CLo),e(Ni,wLo),e(Ni,yD),e(yD,ALo),e(Ni,LLo),e(ko,yLo),e(ko,xL),e(xL,xLo),e(xL,Yce),e(Yce,$Lo),e(xL,kLo),e(ko,SLo),e(ko,st),M($L,st,null),e(st,RLo),e(st,Kce),e(Kce,PLo),e(st,BLo),e(st,qi),e(qi,ILo),e(qi,Zce),e(Zce,NLo),e(qi,qLo),e(qi,xD),e(xD,jLo),e(qi,DLo),e(st,GLo),M(z4,st,null),e(ko,OLo),e(ko,Ze),M(kL,Ze,null),e(Ze,VLo),e(Ze,efe),e(efe,XLo),e(Ze,zLo),e(Ze,ka),e(ka,WLo),e(ka,ofe),e(ofe,QLo),e(ka,HLo),e(ka,rfe),e(rfe,ULo),e(ka,JLo),e(ka,tfe),e(tfe,YLo),e(ka,KLo),e(Ze,ZLo),e(Ze,Q),e(Q,W4),e(W4,afe),e(afe,eyo),e(W4,oyo),e(W4,$D),e($D,ryo),e(W4,tyo),e(Q,ayo),e(Q,Q4),e(Q4,nfe),e(nfe,nyo),e(Q4,syo),e(Q4,kD),e(kD,lyo),e(Q4,iyo),e(Q,dyo),e(Q,H4),e(H4,sfe),e(sfe,cyo),e(H4,fyo),e(H4,SD),e(SD,myo),e(H4,gyo),e(Q,hyo),e(Q,U4),e(U4,lfe),e(lfe,pyo),e(U4,_yo),e(U4,RD),e(RD,uyo),e(U4,byo),e(Q,vyo),e(Q,J4),e(J4,ife),e(ife,Fyo),e(J4,Tyo),e(J4,PD),e(PD,Myo),e(J4,Eyo),e(Q,Cyo),e(Q,Y4),e(Y4,dfe),e(dfe,wyo),e(Y4,Ayo),e(Y4,BD),e(BD,Lyo),e(Y4,yyo),e(Q,xyo),e(Q,K4),e(K4,cfe),e(cfe,$yo),e(K4,kyo),e(K4,ID),e(ID,Syo),e(K4,Ryo),e(Q,Pyo),e(Q,Z4),e(Z4,ffe),e(ffe,Byo),e(Z4,Iyo),e(Z4,ND),e(ND,Nyo),e(Z4,qyo),e(Q,jyo),e(Q,e1),e(e1,mfe),e(mfe,Dyo),e(e1,Gyo),e(e1,qD),e(qD,Oyo),e(e1,Vyo),e(Q,Xyo),e(Q,o1),e(o1,gfe),e(gfe,zyo),e(o1,Wyo),e(o1,jD),e(jD,Qyo),e(o1,Hyo),e(Q,Uyo),e(Q,r1),e(r1,hfe),e(hfe,Jyo),e(r1,Yyo),e(r1,DD),e(DD,Kyo),e(r1,Zyo),e(Q,e8o),e(Q,t1),e(t1,pfe),e(pfe,o8o),e(t1,r8o),e(t1,GD),e(GD,t8o),e(t1,a8o),e(Q,n8o),e(Q,a1),e(a1,_fe),e(_fe,s8o),e(a1,l8o),e(a1,OD),e(OD,i8o),e(a1,d8o),e(Q,c8o),e(Q,n1),e(n1,ufe),e(ufe,f8o),e(n1,m8o),e(n1,VD),e(VD,g8o),e(n1,h8o),e(Q,p8o),e(Q,s1),e(s1,bfe),e(bfe,_8o),e(s1,u8o),e(s1,XD),e(XD,b8o),e(s1,v8o),e(Q,F8o),e(Q,l1),e(l1,vfe),e(vfe,T8o),e(l1,M8o),e(l1,zD),e(zD,E8o),e(l1,C8o),e(Q,w8o),e(Q,i1),e(i1,Ffe),e(Ffe,A8o),e(i1,L8o),e(i1,WD),e(WD,y8o),e(i1,x8o),e(Q,$8o),e(Q,d1),e(d1,Tfe),e(Tfe,k8o),e(d1,S8o),e(d1,QD),e(QD,R8o),e(d1,P8o),e(Q,B8o),e(Q,c1),e(c1,Mfe),e(Mfe,I8o),e(c1,N8o),e(c1,HD),e(HD,q8o),e(c1,j8o),e(Q,D8o),e(Q,f1),e(f1,Efe),e(Efe,G8o),e(f1,O8o),e(f1,UD),e(UD,V8o),e(f1,X8o),e(Q,z8o),e(Q,m1),e(m1,Cfe),e(Cfe,W8o),e(m1,Q8o),e(m1,JD),e(JD,H8o),e(m1,U8o),e(Q,J8o),e(Q,g1),e(g1,wfe),e(wfe,Y8o),e(g1,K8o),e(g1,YD),e(YD,Z8o),e(g1,e9o),e(Q,o9o),e(Q,h1),e(h1,Afe),e(Afe,r9o),e(h1,t9o),e(h1,KD),e(KD,a9o),e(h1,n9o),e(Q,s9o),e(Q,p1),e(p1,Lfe),e(Lfe,l9o),e(p1,i9o),e(p1,ZD),e(ZD,d9o),e(p1,c9o),e(Q,f9o),e(Q,_1),e(_1,yfe),e(yfe,m9o),e(_1,g9o),e(_1,eG),e(eG,h9o),e(_1,p9o),e(Q,_9o),e(Q,u1),e(u1,xfe),e(xfe,u9o),e(u1,b9o),e(u1,oG),e(oG,v9o),e(u1,F9o),e(Q,T9o),e(Q,b1),e(b1,$fe),e($fe,M9o),e(b1,E9o),e(b1,rG),e(rG,C9o),e(b1,w9o),e(Q,A9o),e(Q,v1),e(v1,kfe),e(kfe,L9o),e(v1,y9o),e(v1,tG),e(tG,x9o),e(v1,$9o),e(Q,k9o),e(Q,F1),e(F1,Sfe),e(Sfe,S9o),e(F1,R9o),e(F1,aG),e(aG,P9o),e(F1,B9o),e(Q,I9o),e(Q,T1),e(T1,Rfe),e(Rfe,N9o),e(T1,q9o),e(T1,nG),e(nG,j9o),e(T1,D9o),e(Q,G9o),e(Q,M1),e(M1,Pfe),e(Pfe,O9o),e(M1,V9o),e(M1,sG),e(sG,X9o),e(M1,z9o),e(Q,W9o),e(Q,E1),e(E1,Bfe),e(Bfe,Q9o),e(E1,H9o),e(E1,Ife),e(Ife,U9o),e(E1,J9o),e(Q,Y9o),e(Q,C1),e(C1,Nfe),e(Nfe,K9o),e(C1,Z9o),e(C1,lG),e(lG,exo),e(C1,oxo),e(Q,rxo),e(Q,w1),e(w1,qfe),e(qfe,txo),e(w1,axo),e(w1,iG),e(iG,nxo),e(w1,sxo),e(Q,lxo),e(Q,A1),e(A1,jfe),e(jfe,ixo),e(A1,dxo),e(A1,dG),e(dG,cxo),e(A1,fxo),e(Q,mxo),e(Q,L1),e(L1,Dfe),e(Dfe,gxo),e(L1,hxo),e(L1,cG),e(cG,pxo),e(L1,_xo),e(Ze,uxo),e(Ze,y1),e(y1,bxo),e(y1,Gfe),e(Gfe,vxo),e(y1,Fxo),e(y1,Ofe),e(Ofe,Txo),e(Ze,Mxo),M(x1,Ze,null),b(f,vje,u),b(f,ji,u),e(ji,$1),e($1,Vfe),M(SL,Vfe,null),e(ji,Exo),e(ji,Xfe),e(Xfe,Cxo),b(f,Fje,u),b(f,So,u),M(RL,So,null),e(So,wxo),e(So,Di),e(Di,Axo),e(Di,fG),e(fG,Lxo),e(Di,yxo),e(Di,mG),e(mG,xxo),e(Di,$xo),e(So,kxo),e(So,PL),e(PL,Sxo),e(PL,zfe),e(zfe,Rxo),e(PL,Pxo),e(So,Bxo),e(So,lt),M(BL,lt,null),e(lt,Ixo),e(lt,Wfe),e(Wfe,Nxo),e(lt,qxo),e(lt,Gi),e(Gi,jxo),e(Gi,Qfe),e(Qfe,Dxo),e(Gi,Gxo),e(Gi,gG),e(gG,Oxo),e(Gi,Vxo),e(lt,Xxo),M(k1,lt,null),e(So,zxo),e(So,eo),M(IL,eo,null),e(eo,Wxo),e(eo,Hfe),e(Hfe,Qxo),e(eo,Hxo),e(eo,Sa),e(Sa,Uxo),e(Sa,Ufe),e(Ufe,Jxo),e(Sa,Yxo),e(Sa,Jfe),e(Jfe,Kxo),e(Sa,Zxo),e(Sa,Yfe),e(Yfe,e$o),e(Sa,o$o),e(eo,r$o),e(eo,_e),e(_e,S1),e(S1,Kfe),e(Kfe,t$o),e(S1,a$o),e(S1,hG),e(hG,n$o),e(S1,s$o),e(_e,l$o),e(_e,R1),e(R1,Zfe),e(Zfe,i$o),e(R1,d$o),e(R1,pG),e(pG,c$o),e(R1,f$o),e(_e,m$o),e(_e,P1),e(P1,eme),e(eme,g$o),e(P1,h$o),e(P1,_G),e(_G,p$o),e(P1,_$o),e(_e,u$o),e(_e,B1),e(B1,ome),e(ome,b$o),e(B1,v$o),e(B1,uG),e(uG,F$o),e(B1,T$o),e(_e,M$o),e(_e,I1),e(I1,rme),e(rme,E$o),e(I1,C$o),e(I1,bG),e(bG,w$o),e(I1,A$o),e(_e,L$o),e(_e,N1),e(N1,tme),e(tme,y$o),e(N1,x$o),e(N1,vG),e(vG,$$o),e(N1,k$o),e(_e,S$o),e(_e,q1),e(q1,ame),e(ame,R$o),e(q1,P$o),e(q1,FG),e(FG,B$o),e(q1,I$o),e(_e,N$o),e(_e,j1),e(j1,nme),e(nme,q$o),e(j1,j$o),e(j1,TG),e(TG,D$o),e(j1,G$o),e(_e,O$o),e(_e,D1),e(D1,sme),e(sme,V$o),e(D1,X$o),e(D1,MG),e(MG,z$o),e(D1,W$o),e(_e,Q$o),e(_e,G1),e(G1,lme),e(lme,H$o),e(G1,U$o),e(G1,EG),e(EG,J$o),e(G1,Y$o),e(_e,K$o),e(_e,O1),e(O1,ime),e(ime,Z$o),e(O1,eko),e(O1,CG),e(CG,oko),e(O1,rko),e(_e,tko),e(_e,V1),e(V1,dme),e(dme,ako),e(V1,nko),e(V1,wG),e(wG,sko),e(V1,lko),e(_e,iko),e(_e,X1),e(X1,cme),e(cme,dko),e(X1,cko),e(X1,AG),e(AG,fko),e(X1,mko),e(_e,gko),e(_e,z1),e(z1,fme),e(fme,hko),e(z1,pko),e(z1,LG),e(LG,_ko),e(z1,uko),e(_e,bko),e(_e,W1),e(W1,mme),e(mme,vko),e(W1,Fko),e(W1,yG),e(yG,Tko),e(W1,Mko),e(_e,Eko),e(_e,Q1),e(Q1,gme),e(gme,Cko),e(Q1,wko),e(Q1,xG),e(xG,Ako),e(Q1,Lko),e(eo,yko),e(eo,H1),e(H1,xko),e(H1,hme),e(hme,$ko),e(H1,kko),e(H1,pme),e(pme,Sko),e(eo,Rko),M(U1,eo,null),b(f,Tje,u),b(f,Oi,u),e(Oi,J1),e(J1,_me),M(NL,_me,null),e(Oi,Pko),e(Oi,ume),e(ume,Bko),b(f,Mje,u),b(f,Ro,u),M(qL,Ro,null),e(Ro,Iko),e(Ro,Vi),e(Vi,Nko),e(Vi,$G),e($G,qko),e(Vi,jko),e(Vi,kG),e(kG,Dko),e(Vi,Gko),e(Ro,Oko),e(Ro,jL),e(jL,Vko),e(jL,bme),e(bme,Xko),e(jL,zko),e(Ro,Wko),e(Ro,it),M(DL,it,null),e(it,Qko),e(it,vme),e(vme,Hko),e(it,Uko),e(it,Xi),e(Xi,Jko),e(Xi,Fme),e(Fme,Yko),e(Xi,Kko),e(Xi,SG),e(SG,Zko),e(Xi,eSo),e(it,oSo),M(Y1,it,null),e(Ro,rSo),e(Ro,oo),M(GL,oo,null),e(oo,tSo),e(oo,Tme),e(Tme,aSo),e(oo,nSo),e(oo,Ra),e(Ra,sSo),e(Ra,Mme),e(Mme,lSo),e(Ra,iSo),e(Ra,Eme),e(Eme,dSo),e(Ra,cSo),e(Ra,Cme),e(Cme,fSo),e(Ra,mSo),e(oo,gSo),e(oo,N),e(N,K1),e(K1,wme),e(wme,hSo),e(K1,pSo),e(K1,RG),e(RG,_So),e(K1,uSo),e(N,bSo),e(N,Z1),e(Z1,Ame),e(Ame,vSo),e(Z1,FSo),e(Z1,PG),e(PG,TSo),e(Z1,MSo),e(N,ESo),e(N,eb),e(eb,Lme),e(Lme,CSo),e(eb,wSo),e(eb,BG),e(BG,ASo),e(eb,LSo),e(N,ySo),e(N,ob),e(ob,yme),e(yme,xSo),e(ob,$So),e(ob,IG),e(IG,kSo),e(ob,SSo),e(N,RSo),e(N,rb),e(rb,xme),e(xme,PSo),e(rb,BSo),e(rb,NG),e(NG,ISo),e(rb,NSo),e(N,qSo),e(N,tb),e(tb,$me),e($me,jSo),e(tb,DSo),e(tb,qG),e(qG,GSo),e(tb,OSo),e(N,VSo),e(N,ab),e(ab,kme),e(kme,XSo),e(ab,zSo),e(ab,jG),e(jG,WSo),e(ab,QSo),e(N,HSo),e(N,nb),e(nb,Sme),e(Sme,USo),e(nb,JSo),e(nb,DG),e(DG,YSo),e(nb,KSo),e(N,ZSo),e(N,sb),e(sb,Rme),e(Rme,eRo),e(sb,oRo),e(sb,GG),e(GG,rRo),e(sb,tRo),e(N,aRo),e(N,lb),e(lb,Pme),e(Pme,nRo),e(lb,sRo),e(lb,OG),e(OG,lRo),e(lb,iRo),e(N,dRo),e(N,ib),e(ib,Bme),e(Bme,cRo),e(ib,fRo),e(ib,VG),e(VG,mRo),e(ib,gRo),e(N,hRo),e(N,db),e(db,Ime),e(Ime,pRo),e(db,_Ro),e(db,XG),e(XG,uRo),e(db,bRo),e(N,vRo),e(N,cb),e(cb,Nme),e(Nme,FRo),e(cb,TRo),e(cb,zG),e(zG,MRo),e(cb,ERo),e(N,CRo),e(N,fb),e(fb,qme),e(qme,wRo),e(fb,ARo),e(fb,WG),e(WG,LRo),e(fb,yRo),e(N,xRo),e(N,mb),e(mb,jme),e(jme,$Ro),e(mb,kRo),e(mb,QG),e(QG,SRo),e(mb,RRo),e(N,PRo),e(N,gb),e(gb,Dme),e(Dme,BRo),e(gb,IRo),e(gb,HG),e(HG,NRo),e(gb,qRo),e(N,jRo),e(N,hb),e(hb,Gme),e(Gme,DRo),e(hb,GRo),e(hb,UG),e(UG,ORo),e(hb,VRo),e(N,XRo),e(N,pb),e(pb,Ome),e(Ome,zRo),e(pb,WRo),e(pb,JG),e(JG,QRo),e(pb,HRo),e(N,URo),e(N,_b),e(_b,Vme),e(Vme,JRo),e(_b,YRo),e(_b,YG),e(YG,KRo),e(_b,ZRo),e(N,ePo),e(N,ub),e(ub,Xme),e(Xme,oPo),e(ub,rPo),e(ub,KG),e(KG,tPo),e(ub,aPo),e(N,nPo),e(N,bb),e(bb,zme),e(zme,sPo),e(bb,lPo),e(bb,ZG),e(ZG,iPo),e(bb,dPo),e(N,cPo),e(N,vb),e(vb,Wme),e(Wme,fPo),e(vb,mPo),e(vb,eO),e(eO,gPo),e(vb,hPo),e(N,pPo),e(N,Fb),e(Fb,Qme),e(Qme,_Po),e(Fb,uPo),e(Fb,oO),e(oO,bPo),e(Fb,vPo),e(N,FPo),e(N,Tb),e(Tb,Hme),e(Hme,TPo),e(Tb,MPo),e(Tb,rO),e(rO,EPo),e(Tb,CPo),e(N,wPo),e(N,Mb),e(Mb,Ume),e(Ume,APo),e(Mb,LPo),e(Mb,tO),e(tO,yPo),e(Mb,xPo),e(N,$Po),e(N,Eb),e(Eb,Jme),e(Jme,kPo),e(Eb,SPo),e(Eb,aO),e(aO,RPo),e(Eb,PPo),e(N,BPo),e(N,Cb),e(Cb,Yme),e(Yme,IPo),e(Cb,NPo),e(Cb,nO),e(nO,qPo),e(Cb,jPo),e(N,DPo),e(N,wb),e(wb,Kme),e(Kme,GPo),e(wb,OPo),e(wb,sO),e(sO,VPo),e(wb,XPo),e(N,zPo),e(N,Ab),e(Ab,Zme),e(Zme,WPo),e(Ab,QPo),e(Ab,lO),e(lO,HPo),e(Ab,UPo),e(N,JPo),e(N,Lb),e(Lb,ege),e(ege,YPo),e(Lb,KPo),e(Lb,iO),e(iO,ZPo),e(Lb,eBo),e(N,oBo),e(N,yb),e(yb,oge),e(oge,rBo),e(yb,tBo),e(yb,dO),e(dO,aBo),e(yb,nBo),e(N,sBo),e(N,xb),e(xb,rge),e(rge,lBo),e(xb,iBo),e(xb,cO),e(cO,dBo),e(xb,cBo),e(N,fBo),e(N,$b),e($b,tge),e(tge,mBo),e($b,gBo),e($b,fO),e(fO,hBo),e($b,pBo),e(N,_Bo),e(N,kb),e(kb,age),e(age,uBo),e(kb,bBo),e(kb,mO),e(mO,vBo),e(kb,FBo),e(N,TBo),e(N,Sb),e(Sb,nge),e(nge,MBo),e(Sb,EBo),e(Sb,gO),e(gO,CBo),e(Sb,wBo),e(N,ABo),e(N,Rb),e(Rb,sge),e(sge,LBo),e(Rb,yBo),e(Rb,hO),e(hO,xBo),e(Rb,$Bo),e(N,kBo),e(N,Pb),e(Pb,lge),e(lge,SBo),e(Pb,RBo),e(Pb,pO),e(pO,PBo),e(Pb,BBo),e(N,IBo),e(N,Bb),e(Bb,ige),e(ige,NBo),e(Bb,qBo),e(Bb,_O),e(_O,jBo),e(Bb,DBo),e(N,GBo),e(N,Ib),e(Ib,dge),e(dge,OBo),e(Ib,VBo),e(Ib,uO),e(uO,XBo),e(Ib,zBo),e(N,WBo),e(N,Nb),e(Nb,cge),e(cge,QBo),e(Nb,HBo),e(Nb,bO),e(bO,UBo),e(Nb,JBo),e(N,YBo),e(N,qb),e(qb,fge),e(fge,KBo),e(qb,ZBo),e(qb,vO),e(vO,eIo),e(qb,oIo),e(N,rIo),e(N,jb),e(jb,mge),e(mge,tIo),e(jb,aIo),e(jb,FO),e(FO,nIo),e(jb,sIo),e(N,lIo),e(N,Db),e(Db,gge),e(gge,iIo),e(Db,dIo),e(Db,TO),e(TO,cIo),e(Db,fIo),e(N,mIo),e(N,Gb),e(Gb,hge),e(hge,gIo),e(Gb,hIo),e(Gb,MO),e(MO,pIo),e(Gb,_Io),e(N,uIo),e(N,Ob),e(Ob,pge),e(pge,bIo),e(Ob,vIo),e(Ob,EO),e(EO,FIo),e(Ob,TIo),e(N,MIo),e(N,Vb),e(Vb,_ge),e(_ge,EIo),e(Vb,CIo),e(Vb,CO),e(CO,wIo),e(Vb,AIo),e(N,LIo),e(N,Xb),e(Xb,uge),e(uge,yIo),e(Xb,xIo),e(Xb,wO),e(wO,$Io),e(Xb,kIo),e(oo,SIo),e(oo,zb),e(zb,RIo),e(zb,bge),e(bge,PIo),e(zb,BIo),e(zb,vge),e(vge,IIo),e(oo,NIo),M(Wb,oo,null),b(f,Eje,u),b(f,zi,u),e(zi,Qb),e(Qb,Fge),M(OL,Fge,null),e(zi,qIo),e(zi,Tge),e(Tge,jIo),b(f,Cje,u),b(f,Po,u),M(VL,Po,null),e(Po,DIo),e(Po,Wi),e(Wi,GIo),e(Wi,AO),e(AO,OIo),e(Wi,VIo),e(Wi,LO),e(LO,XIo),e(Wi,zIo),e(Po,WIo),e(Po,XL),e(XL,QIo),e(XL,Mge),e(Mge,HIo),e(XL,UIo),e(Po,JIo),e(Po,dt),M(zL,dt,null),e(dt,YIo),e(dt,Ege),e(Ege,KIo),e(dt,ZIo),e(dt,Qi),e(Qi,eNo),e(Qi,Cge),e(Cge,oNo),e(Qi,rNo),e(Qi,yO),e(yO,tNo),e(Qi,aNo),e(dt,nNo),M(Hb,dt,null),e(Po,sNo),e(Po,ro),M(WL,ro,null),e(ro,lNo),e(ro,wge),e(wge,iNo),e(ro,dNo),e(ro,Pa),e(Pa,cNo),e(Pa,Age),e(Age,fNo),e(Pa,mNo),e(Pa,Lge),e(Lge,gNo),e(Pa,hNo),e(Pa,yge),e(yge,pNo),e(Pa,_No),e(ro,uNo),e(ro,K),e(K,Ub),e(Ub,xge),e(xge,bNo),e(Ub,vNo),e(Ub,xO),e(xO,FNo),e(Ub,TNo),e(K,MNo),e(K,Jb),e(Jb,$ge),e($ge,ENo),e(Jb,CNo),e(Jb,$O),e($O,wNo),e(Jb,ANo),e(K,LNo),e(K,Yb),e(Yb,kge),e(kge,yNo),e(Yb,xNo),e(Yb,kO),e(kO,$No),e(Yb,kNo),e(K,SNo),e(K,Kb),e(Kb,Sge),e(Sge,RNo),e(Kb,PNo),e(Kb,SO),e(SO,BNo),e(Kb,INo),e(K,NNo),e(K,Zb),e(Zb,Rge),e(Rge,qNo),e(Zb,jNo),e(Zb,RO),e(RO,DNo),e(Zb,GNo),e(K,ONo),e(K,e2),e(e2,Pge),e(Pge,VNo),e(e2,XNo),e(e2,PO),e(PO,zNo),e(e2,WNo),e(K,QNo),e(K,o2),e(o2,Bge),e(Bge,HNo),e(o2,UNo),e(o2,BO),e(BO,JNo),e(o2,YNo),e(K,KNo),e(K,r2),e(r2,Ige),e(Ige,ZNo),e(r2,eqo),e(r2,IO),e(IO,oqo),e(r2,rqo),e(K,tqo),e(K,t2),e(t2,Nge),e(Nge,aqo),e(t2,nqo),e(t2,NO),e(NO,sqo),e(t2,lqo),e(K,iqo),e(K,a2),e(a2,qge),e(qge,dqo),e(a2,cqo),e(a2,qO),e(qO,fqo),e(a2,mqo),e(K,gqo),e(K,n2),e(n2,jge),e(jge,hqo),e(n2,pqo),e(n2,jO),e(jO,_qo),e(n2,uqo),e(K,bqo),e(K,s2),e(s2,Dge),e(Dge,vqo),e(s2,Fqo),e(s2,DO),e(DO,Tqo),e(s2,Mqo),e(K,Eqo),e(K,l2),e(l2,Gge),e(Gge,Cqo),e(l2,wqo),e(l2,GO),e(GO,Aqo),e(l2,Lqo),e(K,yqo),e(K,i2),e(i2,Oge),e(Oge,xqo),e(i2,$qo),e(i2,OO),e(OO,kqo),e(i2,Sqo),e(K,Rqo),e(K,d2),e(d2,Vge),e(Vge,Pqo),e(d2,Bqo),e(d2,VO),e(VO,Iqo),e(d2,Nqo),e(K,qqo),e(K,c2),e(c2,Xge),e(Xge,jqo),e(c2,Dqo),e(c2,XO),e(XO,Gqo),e(c2,Oqo),e(K,Vqo),e(K,f2),e(f2,zge),e(zge,Xqo),e(f2,zqo),e(f2,zO),e(zO,Wqo),e(f2,Qqo),e(K,Hqo),e(K,m2),e(m2,Wge),e(Wge,Uqo),e(m2,Jqo),e(m2,WO),e(WO,Yqo),e(m2,Kqo),e(K,Zqo),e(K,g2),e(g2,Qge),e(Qge,ejo),e(g2,ojo),e(g2,QO),e(QO,rjo),e(g2,tjo),e(K,ajo),e(K,h2),e(h2,Hge),e(Hge,njo),e(h2,sjo),e(h2,HO),e(HO,ljo),e(h2,ijo),e(K,djo),e(K,p2),e(p2,Uge),e(Uge,cjo),e(p2,fjo),e(p2,UO),e(UO,mjo),e(p2,gjo),e(K,hjo),e(K,_2),e(_2,Jge),e(Jge,pjo),e(_2,_jo),e(_2,JO),e(JO,ujo),e(_2,bjo),e(K,vjo),e(K,u2),e(u2,Yge),e(Yge,Fjo),e(u2,Tjo),e(u2,YO),e(YO,Mjo),e(u2,Ejo),e(K,Cjo),e(K,b2),e(b2,Kge),e(Kge,wjo),e(b2,Ajo),e(b2,KO),e(KO,Ljo),e(b2,yjo),e(K,xjo),e(K,v2),e(v2,Zge),e(Zge,$jo),e(v2,kjo),e(v2,ZO),e(ZO,Sjo),e(v2,Rjo),e(K,Pjo),e(K,F2),e(F2,ehe),e(ehe,Bjo),e(F2,Ijo),e(F2,eV),e(eV,Njo),e(F2,qjo),e(K,jjo),e(K,T2),e(T2,ohe),e(ohe,Djo),e(T2,Gjo),e(T2,oV),e(oV,Ojo),e(T2,Vjo),e(K,Xjo),e(K,M2),e(M2,rhe),e(rhe,zjo),e(M2,Wjo),e(M2,rV),e(rV,Qjo),e(M2,Hjo),e(K,Ujo),e(K,E2),e(E2,the),e(the,Jjo),e(E2,Yjo),e(E2,tV),e(tV,Kjo),e(E2,Zjo),e(ro,eDo),e(ro,C2),e(C2,oDo),e(C2,ahe),e(ahe,rDo),e(C2,tDo),e(C2,nhe),e(nhe,aDo),e(ro,nDo),M(w2,ro,null),b(f,wje,u),b(f,Hi,u),e(Hi,A2),e(A2,she),M(QL,she,null),e(Hi,sDo),e(Hi,lhe),e(lhe,lDo),b(f,Aje,u),b(f,Bo,u),M(HL,Bo,null),e(Bo,iDo),e(Bo,Ui),e(Ui,dDo),e(Ui,aV),e(aV,cDo),e(Ui,fDo),e(Ui,nV),e(nV,mDo),e(Ui,gDo),e(Bo,hDo),e(Bo,UL),e(UL,pDo),e(UL,ihe),e(ihe,_Do),e(UL,uDo),e(Bo,bDo),e(Bo,ct),M(JL,ct,null),e(ct,vDo),e(ct,dhe),e(dhe,FDo),e(ct,TDo),e(ct,Ji),e(Ji,MDo),e(Ji,che),e(che,EDo),e(Ji,CDo),e(Ji,sV),e(sV,wDo),e(Ji,ADo),e(ct,LDo),M(L2,ct,null),e(Bo,yDo),e(Bo,to),M(YL,to,null),e(to,xDo),e(to,fhe),e(fhe,$Do),e(to,kDo),e(to,Ba),e(Ba,SDo),e(Ba,mhe),e(mhe,RDo),e(Ba,PDo),e(Ba,ghe),e(ghe,BDo),e(Ba,IDo),e(Ba,hhe),e(hhe,NDo),e(Ba,qDo),e(to,jDo),e(to,Yr),e(Yr,y2),e(y2,phe),e(phe,DDo),e(y2,GDo),e(y2,lV),e(lV,ODo),e(y2,VDo),e(Yr,XDo),e(Yr,x2),e(x2,_he),e(_he,zDo),e(x2,WDo),e(x2,iV),e(iV,QDo),e(x2,HDo),e(Yr,UDo),e(Yr,$2),e($2,uhe),e(uhe,JDo),e($2,YDo),e($2,dV),e(dV,KDo),e($2,ZDo),e(Yr,eGo),e(Yr,k2),e(k2,bhe),e(bhe,oGo),e(k2,rGo),e(k2,cV),e(cV,tGo),e(k2,aGo),e(Yr,nGo),e(Yr,S2),e(S2,vhe),e(vhe,sGo),e(S2,lGo),e(S2,fV),e(fV,iGo),e(S2,dGo),e(to,cGo),e(to,R2),e(R2,fGo),e(R2,Fhe),e(Fhe,mGo),e(R2,gGo),e(R2,The),e(The,hGo),e(to,pGo),M(P2,to,null),b(f,Lje,u),b(f,Yi,u),e(Yi,B2),e(B2,Mhe),M(KL,Mhe,null),e(Yi,_Go),e(Yi,Ehe),e(Ehe,uGo),b(f,yje,u),b(f,Io,u),M(ZL,Io,null),e(Io,bGo),e(Io,Ki),e(Ki,vGo),e(Ki,mV),e(mV,FGo),e(Ki,TGo),e(Ki,gV),e(gV,MGo),e(Ki,EGo),e(Io,CGo),e(Io,ey),e(ey,wGo),e(ey,Che),e(Che,AGo),e(ey,LGo),e(Io,yGo),e(Io,ft),M(oy,ft,null),e(ft,xGo),e(ft,whe),e(whe,$Go),e(ft,kGo),e(ft,Zi),e(Zi,SGo),e(Zi,Ahe),e(Ahe,RGo),e(Zi,PGo),e(Zi,hV),e(hV,BGo),e(Zi,IGo),e(ft,NGo),M(I2,ft,null),e(Io,qGo),e(Io,ao),M(ry,ao,null),e(ao,jGo),e(ao,Lhe),e(Lhe,DGo),e(ao,GGo),e(ao,Ia),e(Ia,OGo),e(Ia,yhe),e(yhe,VGo),e(Ia,XGo),e(Ia,xhe),e(xhe,zGo),e(Ia,WGo),e(Ia,$he),e($he,QGo),e(Ia,HGo),e(ao,UGo),e(ao,U),e(U,N2),e(N2,khe),e(khe,JGo),e(N2,YGo),e(N2,pV),e(pV,KGo),e(N2,ZGo),e(U,eOo),e(U,q2),e(q2,She),e(She,oOo),e(q2,rOo),e(q2,_V),e(_V,tOo),e(q2,aOo),e(U,nOo),e(U,j2),e(j2,Rhe),e(Rhe,sOo),e(j2,lOo),e(j2,uV),e(uV,iOo),e(j2,dOo),e(U,cOo),e(U,D2),e(D2,Phe),e(Phe,fOo),e(D2,mOo),e(D2,bV),e(bV,gOo),e(D2,hOo),e(U,pOo),e(U,G2),e(G2,Bhe),e(Bhe,_Oo),e(G2,uOo),e(G2,vV),e(vV,bOo),e(G2,vOo),e(U,FOo),e(U,O2),e(O2,Ihe),e(Ihe,TOo),e(O2,MOo),e(O2,FV),e(FV,EOo),e(O2,COo),e(U,wOo),e(U,V2),e(V2,Nhe),e(Nhe,AOo),e(V2,LOo),e(V2,TV),e(TV,yOo),e(V2,xOo),e(U,$Oo),e(U,X2),e(X2,qhe),e(qhe,kOo),e(X2,SOo),e(X2,MV),e(MV,ROo),e(X2,POo),e(U,BOo),e(U,z2),e(z2,jhe),e(jhe,IOo),e(z2,NOo),e(z2,EV),e(EV,qOo),e(z2,jOo),e(U,DOo),e(U,W2),e(W2,Dhe),e(Dhe,GOo),e(W2,OOo),e(W2,CV),e(CV,VOo),e(W2,XOo),e(U,zOo),e(U,Q2),e(Q2,Ghe),e(Ghe,WOo),e(Q2,QOo),e(Q2,wV),e(wV,HOo),e(Q2,UOo),e(U,JOo),e(U,H2),e(H2,Ohe),e(Ohe,YOo),e(H2,KOo),e(H2,AV),e(AV,ZOo),e(H2,eVo),e(U,oVo),e(U,U2),e(U2,Vhe),e(Vhe,rVo),e(U2,tVo),e(U2,LV),e(LV,aVo),e(U2,nVo),e(U,sVo),e(U,J2),e(J2,Xhe),e(Xhe,lVo),e(J2,iVo),e(J2,yV),e(yV,dVo),e(J2,cVo),e(U,fVo),e(U,Y2),e(Y2,zhe),e(zhe,mVo),e(Y2,gVo),e(Y2,xV),e(xV,hVo),e(Y2,pVo),e(U,_Vo),e(U,K2),e(K2,Whe),e(Whe,uVo),e(K2,bVo),e(K2,$V),e($V,vVo),e(K2,FVo),e(U,TVo),e(U,Z2),e(Z2,Qhe),e(Qhe,MVo),e(Z2,EVo),e(Z2,kV),e(kV,CVo),e(Z2,wVo),e(U,AVo),e(U,ev),e(ev,Hhe),e(Hhe,LVo),e(ev,yVo),e(ev,SV),e(SV,xVo),e(ev,$Vo),e(U,kVo),e(U,ov),e(ov,Uhe),e(Uhe,SVo),e(ov,RVo),e(ov,RV),e(RV,PVo),e(ov,BVo),e(U,IVo),e(U,rv),e(rv,Jhe),e(Jhe,NVo),e(rv,qVo),e(rv,PV),e(PV,jVo),e(rv,DVo),e(U,GVo),e(U,tv),e(tv,Yhe),e(Yhe,OVo),e(tv,VVo),e(tv,BV),e(BV,XVo),e(tv,zVo),e(U,WVo),e(U,av),e(av,Khe),e(Khe,QVo),e(av,HVo),e(av,IV),e(IV,UVo),e(av,JVo),e(U,YVo),e(U,nv),e(nv,Zhe),e(Zhe,KVo),e(nv,ZVo),e(nv,NV),e(NV,eXo),e(nv,oXo),e(U,rXo),e(U,sv),e(sv,epe),e(epe,tXo),e(sv,aXo),e(sv,qV),e(qV,nXo),e(sv,sXo),e(U,lXo),e(U,lv),e(lv,ope),e(ope,iXo),e(lv,dXo),e(lv,jV),e(jV,cXo),e(lv,fXo),e(U,mXo),e(U,iv),e(iv,rpe),e(rpe,gXo),e(iv,hXo),e(iv,DV),e(DV,pXo),e(iv,_Xo),e(U,uXo),e(U,dv),e(dv,tpe),e(tpe,bXo),e(dv,vXo),e(dv,GV),e(GV,FXo),e(dv,TXo),e(U,MXo),e(U,cv),e(cv,ape),e(ape,EXo),e(cv,CXo),e(cv,OV),e(OV,wXo),e(cv,AXo),e(U,LXo),e(U,fv),e(fv,npe),e(npe,yXo),e(fv,xXo),e(fv,VV),e(VV,$Xo),e(fv,kXo),e(U,SXo),e(U,mv),e(mv,spe),e(spe,RXo),e(mv,PXo),e(mv,XV),e(XV,BXo),e(mv,IXo),e(U,NXo),e(U,gv),e(gv,lpe),e(lpe,qXo),e(gv,jXo),e(gv,zV),e(zV,DXo),e(gv,GXo),e(U,OXo),e(U,hv),e(hv,ipe),e(ipe,VXo),e(hv,XXo),e(hv,WV),e(WV,zXo),e(hv,WXo),e(U,QXo),e(U,pv),e(pv,dpe),e(dpe,HXo),e(pv,UXo),e(pv,QV),e(QV,JXo),e(pv,YXo),e(U,KXo),e(U,_v),e(_v,cpe),e(cpe,ZXo),e(_v,ezo),e(_v,HV),e(HV,ozo),e(_v,rzo),e(ao,tzo),e(ao,uv),e(uv,azo),e(uv,fpe),e(fpe,nzo),e(uv,szo),e(uv,mpe),e(mpe,lzo),e(ao,izo),M(bv,ao,null),b(f,xje,u),b(f,ed,u),e(ed,vv),e(vv,gpe),M(ty,gpe,null),e(ed,dzo),e(ed,hpe),e(hpe,czo),b(f,$je,u),b(f,No,u),M(ay,No,null),e(No,fzo),e(No,od),e(od,mzo),e(od,UV),e(UV,gzo),e(od,hzo),e(od,JV),e(JV,pzo),e(od,_zo),e(No,uzo),e(No,ny),e(ny,bzo),e(ny,ppe),e(ppe,vzo),e(ny,Fzo),e(No,Tzo),e(No,mt),M(sy,mt,null),e(mt,Mzo),e(mt,_pe),e(_pe,Ezo),e(mt,Czo),e(mt,rd),e(rd,wzo),e(rd,upe),e(upe,Azo),e(rd,Lzo),e(rd,YV),e(YV,yzo),e(rd,xzo),e(mt,$zo),M(Fv,mt,null),e(No,kzo),e(No,no),M(ly,no,null),e(no,Szo),e(no,bpe),e(bpe,Rzo),e(no,Pzo),e(no,Na),e(Na,Bzo),e(Na,vpe),e(vpe,Izo),e(Na,Nzo),e(Na,Fpe),e(Fpe,qzo),e(Na,jzo),e(Na,Tpe),e(Tpe,Dzo),e(Na,Gzo),e(no,Ozo),e(no,V),e(V,Tv),e(Tv,Mpe),e(Mpe,Vzo),e(Tv,Xzo),e(Tv,KV),e(KV,zzo),e(Tv,Wzo),e(V,Qzo),e(V,Mv),e(Mv,Epe),e(Epe,Hzo),e(Mv,Uzo),e(Mv,ZV),e(ZV,Jzo),e(Mv,Yzo),e(V,Kzo),e(V,Ev),e(Ev,Cpe),e(Cpe,Zzo),e(Ev,eWo),e(Ev,eX),e(eX,oWo),e(Ev,rWo),e(V,tWo),e(V,Cv),e(Cv,wpe),e(wpe,aWo),e(Cv,nWo),e(Cv,oX),e(oX,sWo),e(Cv,lWo),e(V,iWo),e(V,wv),e(wv,Ape),e(Ape,dWo),e(wv,cWo),e(wv,rX),e(rX,fWo),e(wv,mWo),e(V,gWo),e(V,Av),e(Av,Lpe),e(Lpe,hWo),e(Av,pWo),e(Av,tX),e(tX,_Wo),e(Av,uWo),e(V,bWo),e(V,Lv),e(Lv,ype),e(ype,vWo),e(Lv,FWo),e(Lv,aX),e(aX,TWo),e(Lv,MWo),e(V,EWo),e(V,yv),e(yv,xpe),e(xpe,CWo),e(yv,wWo),e(yv,nX),e(nX,AWo),e(yv,LWo),e(V,yWo),e(V,xv),e(xv,$pe),e($pe,xWo),e(xv,$Wo),e(xv,sX),e(sX,kWo),e(xv,SWo),e(V,RWo),e(V,$v),e($v,kpe),e(kpe,PWo),e($v,BWo),e($v,lX),e(lX,IWo),e($v,NWo),e(V,qWo),e(V,kv),e(kv,Spe),e(Spe,jWo),e(kv,DWo),e(kv,iX),e(iX,GWo),e(kv,OWo),e(V,VWo),e(V,Sv),e(Sv,Rpe),e(Rpe,XWo),e(Sv,zWo),e(Sv,dX),e(dX,WWo),e(Sv,QWo),e(V,HWo),e(V,Rv),e(Rv,Ppe),e(Ppe,UWo),e(Rv,JWo),e(Rv,cX),e(cX,YWo),e(Rv,KWo),e(V,ZWo),e(V,Pv),e(Pv,Bpe),e(Bpe,eQo),e(Pv,oQo),e(Pv,fX),e(fX,rQo),e(Pv,tQo),e(V,aQo),e(V,Bv),e(Bv,Ipe),e(Ipe,nQo),e(Bv,sQo),e(Bv,mX),e(mX,lQo),e(Bv,iQo),e(V,dQo),e(V,Iv),e(Iv,Npe),e(Npe,cQo),e(Iv,fQo),e(Iv,gX),e(gX,mQo),e(Iv,gQo),e(V,hQo),e(V,Nv),e(Nv,qpe),e(qpe,pQo),e(Nv,_Qo),e(Nv,hX),e(hX,uQo),e(Nv,bQo),e(V,vQo),e(V,qv),e(qv,jpe),e(jpe,FQo),e(qv,TQo),e(qv,pX),e(pX,MQo),e(qv,EQo),e(V,CQo),e(V,jv),e(jv,Dpe),e(Dpe,wQo),e(jv,AQo),e(jv,_X),e(_X,LQo),e(jv,yQo),e(V,xQo),e(V,Dv),e(Dv,Gpe),e(Gpe,$Qo),e(Dv,kQo),e(Dv,uX),e(uX,SQo),e(Dv,RQo),e(V,PQo),e(V,Gv),e(Gv,Ope),e(Ope,BQo),e(Gv,IQo),e(Gv,bX),e(bX,NQo),e(Gv,qQo),e(V,jQo),e(V,Ov),e(Ov,Vpe),e(Vpe,DQo),e(Ov,GQo),e(Ov,vX),e(vX,OQo),e(Ov,VQo),e(V,XQo),e(V,Vv),e(Vv,Xpe),e(Xpe,zQo),e(Vv,WQo),e(Vv,FX),e(FX,QQo),e(Vv,HQo),e(V,UQo),e(V,Xv),e(Xv,zpe),e(zpe,JQo),e(Xv,YQo),e(Xv,TX),e(TX,KQo),e(Xv,ZQo),e(V,eHo),e(V,zv),e(zv,Wpe),e(Wpe,oHo),e(zv,rHo),e(zv,MX),e(MX,tHo),e(zv,aHo),e(V,nHo),e(V,Wv),e(Wv,Qpe),e(Qpe,sHo),e(Wv,lHo),e(Wv,EX),e(EX,iHo),e(Wv,dHo),e(V,cHo),e(V,Qv),e(Qv,Hpe),e(Hpe,fHo),e(Qv,mHo),e(Qv,CX),e(CX,gHo),e(Qv,hHo),e(V,pHo),e(V,Hv),e(Hv,Upe),e(Upe,_Ho),e(Hv,uHo),e(Hv,wX),e(wX,bHo),e(Hv,vHo),e(V,FHo),e(V,Uv),e(Uv,Jpe),e(Jpe,THo),e(Uv,MHo),e(Uv,AX),e(AX,EHo),e(Uv,CHo),e(V,wHo),e(V,Jv),e(Jv,Ype),e(Ype,AHo),e(Jv,LHo),e(Jv,LX),e(LX,yHo),e(Jv,xHo),e(V,$Ho),e(V,Yv),e(Yv,Kpe),e(Kpe,kHo),e(Yv,SHo),e(Yv,yX),e(yX,RHo),e(Yv,PHo),e(V,BHo),e(V,Kv),e(Kv,Zpe),e(Zpe,IHo),e(Kv,NHo),e(Kv,xX),e(xX,qHo),e(Kv,jHo),e(V,DHo),e(V,Zv),e(Zv,e_e),e(e_e,GHo),e(Zv,OHo),e(Zv,$X),e($X,VHo),e(Zv,XHo),e(V,zHo),e(V,e3),e(e3,o_e),e(o_e,WHo),e(e3,QHo),e(e3,kX),e(kX,HHo),e(e3,UHo),e(V,JHo),e(V,o3),e(o3,r_e),e(r_e,YHo),e(o3,KHo),e(o3,SX),e(SX,ZHo),e(o3,eUo),e(V,oUo),e(V,r3),e(r3,t_e),e(t_e,rUo),e(r3,tUo),e(r3,RX),e(RX,aUo),e(r3,nUo),e(V,sUo),e(V,t3),e(t3,a_e),e(a_e,lUo),e(t3,iUo),e(t3,PX),e(PX,dUo),e(t3,cUo),e(V,fUo),e(V,a3),e(a3,n_e),e(n_e,mUo),e(a3,gUo),e(a3,BX),e(BX,hUo),e(a3,pUo),e(V,_Uo),e(V,n3),e(n3,s_e),e(s_e,uUo),e(n3,bUo),e(n3,IX),e(IX,vUo),e(n3,FUo),e(V,TUo),e(V,s3),e(s3,l_e),e(l_e,MUo),e(s3,EUo),e(s3,NX),e(NX,CUo),e(s3,wUo),e(no,AUo),e(no,l3),e(l3,LUo),e(l3,i_e),e(i_e,yUo),e(l3,xUo),e(l3,d_e),e(d_e,$Uo),e(no,kUo),M(i3,no,null),b(f,kje,u),b(f,td,u),e(td,d3),e(d3,c_e),M(iy,c_e,null),e(td,SUo),e(td,f_e),e(f_e,RUo),b(f,Sje,u),b(f,qo,u),M(dy,qo,null),e(qo,PUo),e(qo,ad),e(ad,BUo),e(ad,qX),e(qX,IUo),e(ad,NUo),e(ad,jX),e(jX,qUo),e(ad,jUo),e(qo,DUo),e(qo,cy),e(cy,GUo),e(cy,m_e),e(m_e,OUo),e(cy,VUo),e(qo,XUo),e(qo,gt),M(fy,gt,null),e(gt,zUo),e(gt,g_e),e(g_e,WUo),e(gt,QUo),e(gt,nd),e(nd,HUo),e(nd,h_e),e(h_e,UUo),e(nd,JUo),e(nd,DX),e(DX,YUo),e(nd,KUo),e(gt,ZUo),M(c3,gt,null),e(qo,eJo),e(qo,so),M(my,so,null),e(so,oJo),e(so,p_e),e(p_e,rJo),e(so,tJo),e(so,qa),e(qa,aJo),e(qa,__e),e(__e,nJo),e(qa,sJo),e(qa,u_e),e(u_e,lJo),e(qa,iJo),e(qa,b_e),e(b_e,dJo),e(qa,cJo),e(so,fJo),e(so,v_e),e(v_e,f3),e(f3,F_e),e(F_e,mJo),e(f3,gJo),e(f3,GX),e(GX,hJo),e(f3,pJo),e(so,_Jo),e(so,m3),e(m3,uJo),e(m3,T_e),e(T_e,bJo),e(m3,vJo),e(m3,M_e),e(M_e,FJo),e(so,TJo),M(g3,so,null),b(f,Rje,u),b(f,sd,u),e(sd,h3),e(h3,E_e),M(gy,E_e,null),e(sd,MJo),e(sd,C_e),e(C_e,EJo),b(f,Pje,u),b(f,jo,u),M(hy,jo,null),e(jo,CJo),e(jo,ld),e(ld,wJo),e(ld,OX),e(OX,AJo),e(ld,LJo),e(ld,VX),e(VX,yJo),e(ld,xJo),e(jo,$Jo),e(jo,py),e(py,kJo),e(py,w_e),e(w_e,SJo),e(py,RJo),e(jo,PJo),e(jo,ht),M(_y,ht,null),e(ht,BJo),e(ht,A_e),e(A_e,IJo),e(ht,NJo),e(ht,id),e(id,qJo),e(id,L_e),e(L_e,jJo),e(id,DJo),e(id,XX),e(XX,GJo),e(id,OJo),e(ht,VJo),M(p3,ht,null),e(jo,XJo),e(jo,lo),M(uy,lo,null),e(lo,zJo),e(lo,y_e),e(y_e,WJo),e(lo,QJo),e(lo,ja),e(ja,HJo),e(ja,x_e),e(x_e,UJo),e(ja,JJo),e(ja,$_e),e($_e,YJo),e(ja,KJo),e(ja,k_e),e(k_e,ZJo),e(ja,eYo),e(lo,oYo),e(lo,ve),e(ve,_3),e(_3,S_e),e(S_e,rYo),e(_3,tYo),e(_3,zX),e(zX,aYo),e(_3,nYo),e(ve,sYo),e(ve,u3),e(u3,R_e),e(R_e,lYo),e(u3,iYo),e(u3,WX),e(WX,dYo),e(u3,cYo),e(ve,fYo),e(ve,b3),e(b3,P_e),e(P_e,mYo),e(b3,gYo),e(b3,QX),e(QX,hYo),e(b3,pYo),e(ve,_Yo),e(ve,v3),e(v3,B_e),e(B_e,uYo),e(v3,bYo),e(v3,HX),e(HX,vYo),e(v3,FYo),e(ve,TYo),e(ve,Is),e(Is,I_e),e(I_e,MYo),e(Is,EYo),e(Is,UX),e(UX,CYo),e(Is,wYo),e(Is,JX),e(JX,AYo),e(Is,LYo),e(ve,yYo),e(ve,F3),e(F3,N_e),e(N_e,xYo),e(F3,$Yo),e(F3,YX),e(YX,kYo),e(F3,SYo),e(ve,RYo),e(ve,Ns),e(Ns,q_e),e(q_e,PYo),e(Ns,BYo),e(Ns,KX),e(KX,IYo),e(Ns,NYo),e(Ns,ZX),e(ZX,qYo),e(Ns,jYo),e(ve,DYo),e(ve,pt),e(pt,j_e),e(j_e,GYo),e(pt,OYo),e(pt,ez),e(ez,VYo),e(pt,XYo),e(pt,oz),e(oz,zYo),e(pt,WYo),e(pt,rz),e(rz,QYo),e(pt,HYo),e(ve,UYo),e(ve,T3),e(T3,D_e),e(D_e,JYo),e(T3,YYo),e(T3,tz),e(tz,KYo),e(T3,ZYo),e(ve,eKo),e(ve,M3),e(M3,G_e),e(G_e,oKo),e(M3,rKo),e(M3,az),e(az,tKo),e(M3,aKo),e(ve,nKo),e(ve,E3),e(E3,O_e),e(O_e,sKo),e(E3,lKo),e(E3,nz),e(nz,iKo),e(E3,dKo),e(ve,cKo),e(ve,C3),e(C3,V_e),e(V_e,fKo),e(C3,mKo),e(C3,sz),e(sz,gKo),e(C3,hKo),e(ve,pKo),e(ve,w3),e(w3,X_e),e(X_e,_Ko),e(w3,uKo),e(w3,lz),e(lz,bKo),e(w3,vKo),e(ve,FKo),e(ve,A3),e(A3,z_e),e(z_e,TKo),e(A3,MKo),e(A3,iz),e(iz,EKo),e(A3,CKo),e(ve,wKo),e(ve,L3),e(L3,W_e),e(W_e,AKo),e(L3,LKo),e(L3,dz),e(dz,yKo),e(L3,xKo),e(lo,$Ko),e(lo,y3),e(y3,kKo),e(y3,Q_e),e(Q_e,SKo),e(y3,RKo),e(y3,H_e),e(H_e,PKo),e(lo,BKo),M(x3,lo,null),b(f,Bje,u),b(f,dd,u),e(dd,$3),e($3,U_e),M(by,U_e,null),e(dd,IKo),e(dd,J_e),e(J_e,NKo),b(f,Ije,u),b(f,Do,u),M(vy,Do,null),e(Do,qKo),e(Do,cd),e(cd,jKo),e(cd,cz),e(cz,DKo),e(cd,GKo),e(cd,fz),e(fz,OKo),e(cd,VKo),e(Do,XKo),e(Do,Fy),e(Fy,zKo),e(Fy,Y_e),e(Y_e,WKo),e(Fy,QKo),e(Do,HKo),e(Do,_t),M(Ty,_t,null),e(_t,UKo),e(_t,K_e),e(K_e,JKo),e(_t,YKo),e(_t,fd),e(fd,KKo),e(fd,Z_e),e(Z_e,ZKo),e(fd,eZo),e(fd,mz),e(mz,oZo),e(fd,rZo),e(_t,tZo),M(k3,_t,null),e(Do,aZo),e(Do,io),M(My,io,null),e(io,nZo),e(io,eue),e(eue,sZo),e(io,lZo),e(io,Da),e(Da,iZo),e(Da,oue),e(oue,dZo),e(Da,cZo),e(Da,rue),e(rue,fZo),e(Da,mZo),e(Da,tue),e(tue,gZo),e(Da,hZo),e(io,pZo),e(io,aue),e(aue,S3),e(S3,nue),e(nue,_Zo),e(S3,uZo),e(S3,gz),e(gz,bZo),e(S3,vZo),e(io,FZo),e(io,R3),e(R3,TZo),e(R3,sue),e(sue,MZo),e(R3,EZo),e(R3,lue),e(lue,CZo),e(io,wZo),M(P3,io,null),b(f,Nje,u),b(f,md,u),e(md,B3),e(B3,iue),M(Ey,iue,null),e(md,AZo),e(md,due),e(due,LZo),b(f,qje,u),b(f,Go,u),M(Cy,Go,null),e(Go,yZo),e(Go,gd),e(gd,xZo),e(gd,hz),e(hz,$Zo),e(gd,kZo),e(gd,pz),e(pz,SZo),e(gd,RZo),e(Go,PZo),e(Go,wy),e(wy,BZo),e(wy,cue),e(cue,IZo),e(wy,NZo),e(Go,qZo),e(Go,ut),M(Ay,ut,null),e(ut,jZo),e(ut,fue),e(fue,DZo),e(ut,GZo),e(ut,hd),e(hd,OZo),e(hd,mue),e(mue,VZo),e(hd,XZo),e(hd,_z),e(_z,zZo),e(hd,WZo),e(ut,QZo),M(I3,ut,null),e(Go,HZo),e(Go,co),M(Ly,co,null),e(co,UZo),e(co,gue),e(gue,JZo),e(co,YZo),e(co,Ga),e(Ga,KZo),e(Ga,hue),e(hue,ZZo),e(Ga,eer),e(Ga,pue),e(pue,oer),e(Ga,rer),e(Ga,_ue),e(_ue,ter),e(Ga,aer),e(co,ner),e(co,Se),e(Se,N3),e(N3,uue),e(uue,ser),e(N3,ler),e(N3,uz),e(uz,ier),e(N3,der),e(Se,cer),e(Se,q3),e(q3,bue),e(bue,fer),e(q3,mer),e(q3,bz),e(bz,ger),e(q3,her),e(Se,per),e(Se,j3),e(j3,vue),e(vue,_er),e(j3,uer),e(j3,vz),e(vz,ber),e(j3,ver),e(Se,Fer),e(Se,D3),e(D3,Fue),e(Fue,Ter),e(D3,Mer),e(D3,Fz),e(Fz,Eer),e(D3,Cer),e(Se,wer),e(Se,G3),e(G3,Tue),e(Tue,Aer),e(G3,Ler),e(G3,Tz),e(Tz,yer),e(G3,xer),e(Se,$er),e(Se,O3),e(O3,Mue),e(Mue,ker),e(O3,Ser),e(O3,Mz),e(Mz,Rer),e(O3,Per),e(Se,Ber),e(Se,V3),e(V3,Eue),e(Eue,Ier),e(V3,Ner),e(V3,Ez),e(Ez,qer),e(V3,jer),e(Se,Der),e(Se,X3),e(X3,Cue),e(Cue,Ger),e(X3,Oer),e(X3,Cz),e(Cz,Ver),e(X3,Xer),e(Se,zer),e(Se,z3),e(z3,wue),e(wue,Wer),e(z3,Qer),e(z3,wz),e(wz,Her),e(z3,Uer),e(co,Jer),e(co,W3),e(W3,Yer),e(W3,Aue),e(Aue,Ker),e(W3,Zer),e(W3,Lue),e(Lue,eor),e(co,oor),M(Q3,co,null),b(f,jje,u),b(f,pd,u),e(pd,H3),e(H3,yue),M(yy,yue,null),e(pd,ror),e(pd,xue),e(xue,tor),b(f,Dje,u),b(f,Oo,u),M(xy,Oo,null),e(Oo,aor),e(Oo,_d),e(_d,nor),e(_d,Az),e(Az,sor),e(_d,lor),e(_d,Lz),e(Lz,ior),e(_d,dor),e(Oo,cor),e(Oo,$y),e($y,mor),e($y,$ue),e($ue,gor),e($y,hor),e(Oo,por),e(Oo,bt),M(ky,bt,null),e(bt,_or),e(bt,kue),e(kue,uor),e(bt,bor),e(bt,ud),e(ud,vor),e(ud,Sue),e(Sue,For),e(ud,Tor),e(ud,yz),e(yz,Mor),e(ud,Eor),e(bt,Cor),M(U3,bt,null),e(Oo,wor),e(Oo,fo),M(Sy,fo,null),e(fo,Aor),e(fo,Rue),e(Rue,Lor),e(fo,yor),e(fo,Oa),e(Oa,xor),e(Oa,Pue),e(Pue,$or),e(Oa,kor),e(Oa,Bue),e(Bue,Sor),e(Oa,Ror),e(Oa,Iue),e(Iue,Por),e(Oa,Bor),e(fo,Ior),e(fo,Kr),e(Kr,J3),e(J3,Nue),e(Nue,Nor),e(J3,qor),e(J3,xz),e(xz,jor),e(J3,Dor),e(Kr,Gor),e(Kr,Y3),e(Y3,que),e(que,Oor),e(Y3,Vor),e(Y3,$z),e($z,Xor),e(Y3,zor),e(Kr,Wor),e(Kr,K3),e(K3,jue),e(jue,Qor),e(K3,Hor),e(K3,kz),e(kz,Uor),e(K3,Jor),e(Kr,Yor),e(Kr,Z3),e(Z3,Due),e(Due,Kor),e(Z3,Zor),e(Z3,Sz),e(Sz,err),e(Z3,orr),e(Kr,rrr),e(Kr,eF),e(eF,Gue),e(Gue,trr),e(eF,arr),e(eF,Rz),e(Rz,nrr),e(eF,srr),e(fo,lrr),e(fo,oF),e(oF,irr),e(oF,Oue),e(Oue,drr),e(oF,crr),e(oF,Vue),e(Vue,frr),e(fo,mrr),M(rF,fo,null),b(f,Gje,u),b(f,bd,u),e(bd,tF),e(tF,Xue),M(Ry,Xue,null),e(bd,grr),e(bd,zue),e(zue,hrr),b(f,Oje,u),b(f,Vo,u),M(Py,Vo,null),e(Vo,prr),e(Vo,vd),e(vd,_rr),e(vd,Pz),e(Pz,urr),e(vd,brr),e(vd,Bz),e(Bz,vrr),e(vd,Frr),e(Vo,Trr),e(Vo,By),e(By,Mrr),e(By,Wue),e(Wue,Err),e(By,Crr),e(Vo,wrr),e(Vo,vt),M(Iy,vt,null),e(vt,Arr),e(vt,Que),e(Que,Lrr),e(vt,yrr),e(vt,Fd),e(Fd,xrr),e(Fd,Hue),e(Hue,$rr),e(Fd,krr),e(Fd,Iz),e(Iz,Srr),e(Fd,Rrr),e(vt,Prr),M(aF,vt,null),e(Vo,Brr),e(Vo,mo),M(Ny,mo,null),e(mo,Irr),e(mo,Uue),e(Uue,Nrr),e(mo,qrr),e(mo,Va),e(Va,jrr),e(Va,Jue),e(Jue,Drr),e(Va,Grr),e(Va,Yue),e(Yue,Orr),e(Va,Vrr),e(Va,Kue),e(Kue,Xrr),e(Va,zrr),e(mo,Wrr),e(mo,Re),e(Re,nF),e(nF,Zue),e(Zue,Qrr),e(nF,Hrr),e(nF,Nz),e(Nz,Urr),e(nF,Jrr),e(Re,Yrr),e(Re,sF),e(sF,e4e),e(e4e,Krr),e(sF,Zrr),e(sF,qz),e(qz,etr),e(sF,otr),e(Re,rtr),e(Re,lF),e(lF,o4e),e(o4e,ttr),e(lF,atr),e(lF,jz),e(jz,ntr),e(lF,str),e(Re,ltr),e(Re,iF),e(iF,r4e),e(r4e,itr),e(iF,dtr),e(iF,Dz),e(Dz,ctr),e(iF,ftr),e(Re,mtr),e(Re,dF),e(dF,t4e),e(t4e,gtr),e(dF,htr),e(dF,Gz),e(Gz,ptr),e(dF,_tr),e(Re,utr),e(Re,cF),e(cF,a4e),e(a4e,btr),e(cF,vtr),e(cF,Oz),e(Oz,Ftr),e(cF,Ttr),e(Re,Mtr),e(Re,fF),e(fF,n4e),e(n4e,Etr),e(fF,Ctr),e(fF,Vz),e(Vz,wtr),e(fF,Atr),e(Re,Ltr),e(Re,mF),e(mF,s4e),e(s4e,ytr),e(mF,xtr),e(mF,Xz),e(Xz,$tr),e(mF,ktr),e(Re,Str),e(Re,gF),e(gF,l4e),e(l4e,Rtr),e(gF,Ptr),e(gF,zz),e(zz,Btr),e(gF,Itr),e(mo,Ntr),e(mo,hF),e(hF,qtr),e(hF,i4e),e(i4e,jtr),e(hF,Dtr),e(hF,d4e),e(d4e,Gtr),e(mo,Otr),M(pF,mo,null),b(f,Vje,u),b(f,Td,u),e(Td,_F),e(_F,c4e),M(qy,c4e,null),e(Td,Vtr),e(Td,f4e),e(f4e,Xtr),b(f,Xje,u),b(f,Xo,u),M(jy,Xo,null),e(Xo,ztr),e(Xo,Md),e(Md,Wtr),e(Md,Wz),e(Wz,Qtr),e(Md,Htr),e(Md,Qz),e(Qz,Utr),e(Md,Jtr),e(Xo,Ytr),e(Xo,Dy),e(Dy,Ktr),e(Dy,m4e),e(m4e,Ztr),e(Dy,ear),e(Xo,oar),e(Xo,Ft),M(Gy,Ft,null),e(Ft,rar),e(Ft,g4e),e(g4e,tar),e(Ft,aar),e(Ft,Ed),e(Ed,nar),e(Ed,h4e),e(h4e,sar),e(Ed,lar),e(Ed,Hz),e(Hz,iar),e(Ed,dar),e(Ft,car),M(uF,Ft,null),e(Xo,far),e(Xo,go),M(Oy,go,null),e(go,mar),e(go,p4e),e(p4e,gar),e(go,har),e(go,Xa),e(Xa,par),e(Xa,_4e),e(_4e,_ar),e(Xa,uar),e(Xa,u4e),e(u4e,bar),e(Xa,Far),e(Xa,b4e),e(b4e,Tar),e(Xa,Mar),e(go,Ear),e(go,Vy),e(Vy,bF),e(bF,v4e),e(v4e,Car),e(bF,war),e(bF,Uz),e(Uz,Aar),e(bF,Lar),e(Vy,yar),e(Vy,vF),e(vF,F4e),e(F4e,xar),e(vF,$ar),e(vF,Jz),e(Jz,kar),e(vF,Sar),e(go,Rar),e(go,FF),e(FF,Par),e(FF,T4e),e(T4e,Bar),e(FF,Iar),e(FF,M4e),e(M4e,Nar),e(go,qar),M(TF,go,null),b(f,zje,u),b(f,Cd,u),e(Cd,MF),e(MF,E4e),M(Xy,E4e,null),e(Cd,jar),e(Cd,C4e),e(C4e,Dar),b(f,Wje,u),b(f,zo,u),M(zy,zo,null),e(zo,Gar),e(zo,wd),e(wd,Oar),e(wd,Yz),e(Yz,Var),e(wd,Xar),e(wd,Kz),e(Kz,zar),e(wd,War),e(zo,Qar),e(zo,Wy),e(Wy,Har),e(Wy,w4e),e(w4e,Uar),e(Wy,Jar),e(zo,Yar),e(zo,Tt),M(Qy,Tt,null),e(Tt,Kar),e(Tt,A4e),e(A4e,Zar),e(Tt,enr),e(Tt,Ad),e(Ad,onr),e(Ad,L4e),e(L4e,rnr),e(Ad,tnr),e(Ad,Zz),e(Zz,anr),e(Ad,nnr),e(Tt,snr),M(EF,Tt,null),e(zo,lnr),e(zo,ho),M(Hy,ho,null),e(ho,inr),e(ho,y4e),e(y4e,dnr),e(ho,cnr),e(ho,za),e(za,fnr),e(za,x4e),e(x4e,mnr),e(za,gnr),e(za,$4e),e($4e,hnr),e(za,pnr),e(za,k4e),e(k4e,_nr),e(za,unr),e(ho,bnr),e(ho,Zr),e(Zr,CF),e(CF,S4e),e(S4e,vnr),e(CF,Fnr),e(CF,eW),e(eW,Tnr),e(CF,Mnr),e(Zr,Enr),e(Zr,wF),e(wF,R4e),e(R4e,Cnr),e(wF,wnr),e(wF,oW),e(oW,Anr),e(wF,Lnr),e(Zr,ynr),e(Zr,AF),e(AF,P4e),e(P4e,xnr),e(AF,$nr),e(AF,rW),e(rW,knr),e(AF,Snr),e(Zr,Rnr),e(Zr,LF),e(LF,B4e),e(B4e,Pnr),e(LF,Bnr),e(LF,tW),e(tW,Inr),e(LF,Nnr),e(Zr,qnr),e(Zr,yF),e(yF,I4e),e(I4e,jnr),e(yF,Dnr),e(yF,aW),e(aW,Gnr),e(yF,Onr),e(ho,Vnr),e(ho,xF),e(xF,Xnr),e(xF,N4e),e(N4e,znr),e(xF,Wnr),e(xF,q4e),e(q4e,Qnr),e(ho,Hnr),M($F,ho,null),b(f,Qje,u),b(f,Ld,u),e(Ld,kF),e(kF,j4e),M(Uy,j4e,null),e(Ld,Unr),e(Ld,D4e),e(D4e,Jnr),b(f,Hje,u),b(f,Wo,u),M(Jy,Wo,null),e(Wo,Ynr),e(Wo,yd),e(yd,Knr),e(yd,nW),e(nW,Znr),e(yd,esr),e(yd,sW),e(sW,osr),e(yd,rsr),e(Wo,tsr),e(Wo,Yy),e(Yy,asr),e(Yy,G4e),e(G4e,nsr),e(Yy,ssr),e(Wo,lsr),e(Wo,Mt),M(Ky,Mt,null),e(Mt,isr),e(Mt,O4e),e(O4e,dsr),e(Mt,csr),e(Mt,xd),e(xd,fsr),e(xd,V4e),e(V4e,msr),e(xd,gsr),e(xd,lW),e(lW,hsr),e(xd,psr),e(Mt,_sr),M(SF,Mt,null),e(Wo,usr),e(Wo,po),M(Zy,po,null),e(po,bsr),e(po,X4e),e(X4e,vsr),e(po,Fsr),e(po,Wa),e(Wa,Tsr),e(Wa,z4e),e(z4e,Msr),e(Wa,Esr),e(Wa,W4e),e(W4e,Csr),e(Wa,wsr),e(Wa,Q4e),e(Q4e,Asr),e(Wa,Lsr),e(po,ysr),e(po,$d),e($d,RF),e(RF,H4e),e(H4e,xsr),e(RF,$sr),e(RF,iW),e(iW,ksr),e(RF,Ssr),e($d,Rsr),e($d,PF),e(PF,U4e),e(U4e,Psr),e(PF,Bsr),e(PF,dW),e(dW,Isr),e(PF,Nsr),e($d,qsr),e($d,BF),e(BF,J4e),e(J4e,jsr),e(BF,Dsr),e(BF,cW),e(cW,Gsr),e(BF,Osr),e(po,Vsr),e(po,IF),e(IF,Xsr),e(IF,Y4e),e(Y4e,zsr),e(IF,Wsr),e(IF,K4e),e(K4e,Qsr),e(po,Hsr),M(NF,po,null),b(f,Uje,u),b(f,kd,u),e(kd,qF),e(qF,Z4e),M(e8,Z4e,null),e(kd,Usr),e(kd,e1e),e(e1e,Jsr),b(f,Jje,u),b(f,Qo,u),M(o8,Qo,null),e(Qo,Ysr),e(Qo,Sd),e(Sd,Ksr),e(Sd,fW),e(fW,Zsr),e(Sd,elr),e(Sd,mW),e(mW,olr),e(Sd,rlr),e(Qo,tlr),e(Qo,r8),e(r8,alr),e(r8,o1e),e(o1e,nlr),e(r8,slr),e(Qo,llr),e(Qo,Et),M(t8,Et,null),e(Et,ilr),e(Et,r1e),e(r1e,dlr),e(Et,clr),e(Et,Rd),e(Rd,flr),e(Rd,t1e),e(t1e,mlr),e(Rd,glr),e(Rd,gW),e(gW,hlr),e(Rd,plr),e(Et,_lr),M(jF,Et,null),e(Qo,ulr),e(Qo,_o),M(a8,_o,null),e(_o,blr),e(_o,a1e),e(a1e,vlr),e(_o,Flr),e(_o,Qa),e(Qa,Tlr),e(Qa,n1e),e(n1e,Mlr),e(Qa,Elr),e(Qa,s1e),e(s1e,Clr),e(Qa,wlr),e(Qa,l1e),e(l1e,Alr),e(Qa,Llr),e(_o,ylr),e(_o,n8),e(n8,DF),e(DF,i1e),e(i1e,xlr),e(DF,$lr),e(DF,hW),e(hW,klr),e(DF,Slr),e(n8,Rlr),e(n8,GF),e(GF,d1e),e(d1e,Plr),e(GF,Blr),e(GF,pW),e(pW,Ilr),e(GF,Nlr),e(_o,qlr),e(_o,OF),e(OF,jlr),e(OF,c1e),e(c1e,Dlr),e(OF,Glr),e(OF,f1e),e(f1e,Olr),e(_o,Vlr),M(VF,_o,null),b(f,Yje,u),b(f,Pd,u),e(Pd,XF),e(XF,m1e),M(s8,m1e,null),e(Pd,Xlr),e(Pd,g1e),e(g1e,zlr),b(f,Kje,u),b(f,Ho,u),M(l8,Ho,null),e(Ho,Wlr),e(Ho,Bd),e(Bd,Qlr),e(Bd,_W),e(_W,Hlr),e(Bd,Ulr),e(Bd,uW),e(uW,Jlr),e(Bd,Ylr),e(Ho,Klr),e(Ho,i8),e(i8,Zlr),e(i8,h1e),e(h1e,eir),e(i8,oir),e(Ho,rir),e(Ho,Ct),M(d8,Ct,null),e(Ct,tir),e(Ct,p1e),e(p1e,air),e(Ct,nir),e(Ct,Id),e(Id,sir),e(Id,_1e),e(_1e,lir),e(Id,iir),e(Id,bW),e(bW,dir),e(Id,cir),e(Ct,fir),M(zF,Ct,null),e(Ho,mir),e(Ho,uo),M(c8,uo,null),e(uo,gir),e(uo,u1e),e(u1e,hir),e(uo,pir),e(uo,Ha),e(Ha,_ir),e(Ha,b1e),e(b1e,uir),e(Ha,bir),e(Ha,v1e),e(v1e,vir),e(Ha,Fir),e(Ha,F1e),e(F1e,Tir),e(Ha,Mir),e(uo,Eir),e(uo,T1e),e(T1e,WF),e(WF,M1e),e(M1e,Cir),e(WF,wir),e(WF,vW),e(vW,Air),e(WF,Lir),e(uo,yir),e(uo,QF),e(QF,xir),e(QF,E1e),e(E1e,$ir),e(QF,kir),e(QF,C1e),e(C1e,Sir),e(uo,Rir),M(HF,uo,null),b(f,Zje,u),b(f,Nd,u),e(Nd,UF),e(UF,w1e),M(f8,w1e,null),e(Nd,Pir),e(Nd,A1e),e(A1e,Bir),b(f,eDe,u),b(f,Uo,u),M(m8,Uo,null),e(Uo,Iir),e(Uo,qd),e(qd,Nir),e(qd,FW),e(FW,qir),e(qd,jir),e(qd,TW),e(TW,Dir),e(qd,Gir),e(Uo,Oir),e(Uo,g8),e(g8,Vir),e(g8,L1e),e(L1e,Xir),e(g8,zir),e(Uo,Wir),e(Uo,wt),M(h8,wt,null),e(wt,Qir),e(wt,y1e),e(y1e,Hir),e(wt,Uir),e(wt,jd),e(jd,Jir),e(jd,x1e),e(x1e,Yir),e(jd,Kir),e(jd,MW),e(MW,Zir),e(jd,edr),e(wt,odr),M(JF,wt,null),e(Uo,rdr),e(Uo,bo),M(p8,bo,null),e(bo,tdr),e(bo,$1e),e($1e,adr),e(bo,ndr),e(bo,Ua),e(Ua,sdr),e(Ua,k1e),e(k1e,ldr),e(Ua,idr),e(Ua,S1e),e(S1e,ddr),e(Ua,cdr),e(Ua,R1e),e(R1e,fdr),e(Ua,mdr),e(bo,gdr),e(bo,Ja),e(Ja,YF),e(YF,P1e),e(P1e,hdr),e(YF,pdr),e(YF,EW),e(EW,_dr),e(YF,udr),e(Ja,bdr),e(Ja,KF),e(KF,B1e),e(B1e,vdr),e(KF,Fdr),e(KF,CW),e(CW,Tdr),e(KF,Mdr),e(Ja,Edr),e(Ja,ZF),e(ZF,I1e),e(I1e,Cdr),e(ZF,wdr),e(ZF,wW),e(wW,Adr),e(ZF,Ldr),e(Ja,ydr),e(Ja,eT),e(eT,N1e),e(N1e,xdr),e(eT,$dr),e(eT,AW),e(AW,kdr),e(eT,Sdr),e(bo,Rdr),e(bo,oT),e(oT,Pdr),e(oT,q1e),e(q1e,Bdr),e(oT,Idr),e(oT,j1e),e(j1e,Ndr),e(bo,qdr),M(rT,bo,null),b(f,oDe,u),b(f,Dd,u),e(Dd,tT),e(tT,D1e),M(_8,D1e,null),e(Dd,jdr),e(Dd,G1e),e(G1e,Ddr),b(f,rDe,u),b(f,Jo,u),M(u8,Jo,null),e(Jo,Gdr),e(Jo,Gd),e(Gd,Odr),e(Gd,LW),e(LW,Vdr),e(Gd,Xdr),e(Gd,yW),e(yW,zdr),e(Gd,Wdr),e(Jo,Qdr),e(Jo,b8),e(b8,Hdr),e(b8,O1e),e(O1e,Udr),e(b8,Jdr),e(Jo,Ydr),e(Jo,At),M(v8,At,null),e(At,Kdr),e(At,V1e),e(V1e,Zdr),e(At,ecr),e(At,Od),e(Od,ocr),e(Od,X1e),e(X1e,rcr),e(Od,tcr),e(Od,xW),e(xW,acr),e(Od,ncr),e(At,scr),M(aT,At,null),e(Jo,lcr),e(Jo,vo),M(F8,vo,null),e(vo,icr),e(vo,z1e),e(z1e,dcr),e(vo,ccr),e(vo,Ya),e(Ya,fcr),e(Ya,W1e),e(W1e,mcr),e(Ya,gcr),e(Ya,Q1e),e(Q1e,hcr),e(Ya,pcr),e(Ya,H1e),e(H1e,_cr),e(Ya,ucr),e(vo,bcr),e(vo,U1e),e(U1e,nT),e(nT,J1e),e(J1e,vcr),e(nT,Fcr),e(nT,$W),e($W,Tcr),e(nT,Mcr),e(vo,Ecr),e(vo,sT),e(sT,Ccr),e(sT,Y1e),e(Y1e,wcr),e(sT,Acr),e(sT,K1e),e(K1e,Lcr),e(vo,ycr),M(lT,vo,null),b(f,tDe,u),b(f,Vd,u),e(Vd,iT),e(iT,Z1e),M(T8,Z1e,null),e(Vd,xcr),e(Vd,ebe),e(ebe,$cr),b(f,aDe,u),b(f,Yo,u),M(M8,Yo,null),e(Yo,kcr),e(Yo,Xd),e(Xd,Scr),e(Xd,kW),e(kW,Rcr),e(Xd,Pcr),e(Xd,SW),e(SW,Bcr),e(Xd,Icr),e(Yo,Ncr),e(Yo,E8),e(E8,qcr),e(E8,obe),e(obe,jcr),e(E8,Dcr),e(Yo,Gcr),e(Yo,Lt),M(C8,Lt,null),e(Lt,Ocr),e(Lt,rbe),e(rbe,Vcr),e(Lt,Xcr),e(Lt,zd),e(zd,zcr),e(zd,tbe),e(tbe,Wcr),e(zd,Qcr),e(zd,RW),e(RW,Hcr),e(zd,Ucr),e(Lt,Jcr),M(dT,Lt,null),e(Yo,Ycr),e(Yo,wr),M(w8,wr,null),e(wr,Kcr),e(wr,abe),e(abe,Zcr),e(wr,efr),e(wr,Ka),e(Ka,ofr),e(Ka,nbe),e(nbe,rfr),e(Ka,tfr),e(Ka,sbe),e(sbe,afr),e(Ka,nfr),e(Ka,lbe),e(lbe,sfr),e(Ka,lfr),e(wr,ifr),e(wr,q),e(q,cT),e(cT,ibe),e(ibe,dfr),e(cT,cfr),e(cT,PW),e(PW,ffr),e(cT,mfr),e(q,gfr),e(q,fT),e(fT,dbe),e(dbe,hfr),e(fT,pfr),e(fT,BW),e(BW,_fr),e(fT,ufr),e(q,bfr),e(q,mT),e(mT,cbe),e(cbe,vfr),e(mT,Ffr),e(mT,IW),e(IW,Tfr),e(mT,Mfr),e(q,Efr),e(q,gT),e(gT,fbe),e(fbe,Cfr),e(gT,wfr),e(gT,NW),e(NW,Afr),e(gT,Lfr),e(q,yfr),e(q,hT),e(hT,mbe),e(mbe,xfr),e(hT,$fr),e(hT,qW),e(qW,kfr),e(hT,Sfr),e(q,Rfr),e(q,pT),e(pT,gbe),e(gbe,Pfr),e(pT,Bfr),e(pT,jW),e(jW,Ifr),e(pT,Nfr),e(q,qfr),e(q,_T),e(_T,hbe),e(hbe,jfr),e(_T,Dfr),e(_T,DW),e(DW,Gfr),e(_T,Ofr),e(q,Vfr),e(q,uT),e(uT,pbe),e(pbe,Xfr),e(uT,zfr),e(uT,GW),e(GW,Wfr),e(uT,Qfr),e(q,Hfr),e(q,bT),e(bT,_be),e(_be,Ufr),e(bT,Jfr),e(bT,OW),e(OW,Yfr),e(bT,Kfr),e(q,Zfr),e(q,vT),e(vT,ube),e(ube,emr),e(vT,omr),e(vT,VW),e(VW,rmr),e(vT,tmr),e(q,amr),e(q,FT),e(FT,bbe),e(bbe,nmr),e(FT,smr),e(FT,XW),e(XW,lmr),e(FT,imr),e(q,dmr),e(q,TT),e(TT,vbe),e(vbe,cmr),e(TT,fmr),e(TT,zW),e(zW,mmr),e(TT,gmr),e(q,hmr),e(q,MT),e(MT,Fbe),e(Fbe,pmr),e(MT,_mr),e(MT,WW),e(WW,umr),e(MT,bmr),e(q,vmr),e(q,ET),e(ET,Tbe),e(Tbe,Fmr),e(ET,Tmr),e(ET,QW),e(QW,Mmr),e(ET,Emr),e(q,Cmr),e(q,CT),e(CT,Mbe),e(Mbe,wmr),e(CT,Amr),e(CT,HW),e(HW,Lmr),e(CT,ymr),e(q,xmr),e(q,wT),e(wT,Ebe),e(Ebe,$mr),e(wT,kmr),e(wT,UW),e(UW,Smr),e(wT,Rmr),e(q,Pmr),e(q,AT),e(AT,Cbe),e(Cbe,Bmr),e(AT,Imr),e(AT,JW),e(JW,Nmr),e(AT,qmr),e(q,jmr),e(q,qs),e(qs,wbe),e(wbe,Dmr),e(qs,Gmr),e(qs,YW),e(YW,Omr),e(qs,Vmr),e(qs,KW),e(KW,Xmr),e(qs,zmr),e(q,Wmr),e(q,LT),e(LT,Abe),e(Abe,Qmr),e(LT,Hmr),e(LT,ZW),e(ZW,Umr),e(LT,Jmr),e(q,Ymr),e(q,yT),e(yT,Lbe),e(Lbe,Kmr),e(yT,Zmr),e(yT,eQ),e(eQ,egr),e(yT,ogr),e(q,rgr),e(q,xT),e(xT,ybe),e(ybe,tgr),e(xT,agr),e(xT,oQ),e(oQ,ngr),e(xT,sgr),e(q,lgr),e(q,$T),e($T,xbe),e(xbe,igr),e($T,dgr),e($T,rQ),e(rQ,cgr),e($T,fgr),e(q,mgr),e(q,kT),e(kT,$be),e($be,ggr),e(kT,hgr),e(kT,tQ),e(tQ,pgr),e(kT,_gr),e(q,ugr),e(q,ST),e(ST,kbe),e(kbe,bgr),e(ST,vgr),e(ST,aQ),e(aQ,Fgr),e(ST,Tgr),e(q,Mgr),e(q,RT),e(RT,Sbe),e(Sbe,Egr),e(RT,Cgr),e(RT,nQ),e(nQ,wgr),e(RT,Agr),e(q,Lgr),e(q,PT),e(PT,Rbe),e(Rbe,ygr),e(PT,xgr),e(PT,sQ),e(sQ,$gr),e(PT,kgr),e(q,Sgr),e(q,BT),e(BT,Pbe),e(Pbe,Rgr),e(BT,Pgr),e(BT,lQ),e(lQ,Bgr),e(BT,Igr),e(q,Ngr),e(q,IT),e(IT,Bbe),e(Bbe,qgr),e(IT,jgr),e(IT,iQ),e(iQ,Dgr),e(IT,Ggr),e(q,Ogr),e(q,NT),e(NT,Ibe),e(Ibe,Vgr),e(NT,Xgr),e(NT,dQ),e(dQ,zgr),e(NT,Wgr),e(q,Qgr),e(q,qT),e(qT,Nbe),e(Nbe,Hgr),e(qT,Ugr),e(qT,cQ),e(cQ,Jgr),e(qT,Ygr),e(q,Kgr),e(q,jT),e(jT,qbe),e(qbe,Zgr),e(jT,ehr),e(jT,fQ),e(fQ,ohr),e(jT,rhr),e(q,thr),e(q,DT),e(DT,jbe),e(jbe,ahr),e(DT,nhr),e(DT,mQ),e(mQ,shr),e(DT,lhr),e(q,ihr),e(q,GT),e(GT,Dbe),e(Dbe,dhr),e(GT,chr),e(GT,gQ),e(gQ,fhr),e(GT,mhr),e(q,ghr),e(q,OT),e(OT,Gbe),e(Gbe,hhr),e(OT,phr),e(OT,hQ),e(hQ,_hr),e(OT,uhr),e(q,bhr),e(q,VT),e(VT,Obe),e(Obe,vhr),e(VT,Fhr),e(VT,pQ),e(pQ,Thr),e(VT,Mhr),e(q,Ehr),e(q,XT),e(XT,Vbe),e(Vbe,Chr),e(XT,whr),e(XT,_Q),e(_Q,Ahr),e(XT,Lhr),e(q,yhr),e(q,zT),e(zT,Xbe),e(Xbe,xhr),e(zT,$hr),e(zT,uQ),e(uQ,khr),e(zT,Shr),e(q,Rhr),e(q,WT),e(WT,zbe),e(zbe,Phr),e(WT,Bhr),e(WT,bQ),e(bQ,Ihr),e(WT,Nhr),e(q,qhr),e(q,QT),e(QT,Wbe),e(Wbe,jhr),e(QT,Dhr),e(QT,vQ),e(vQ,Ghr),e(QT,Ohr),e(q,Vhr),e(q,HT),e(HT,Qbe),e(Qbe,Xhr),e(HT,zhr),e(HT,FQ),e(FQ,Whr),e(HT,Qhr),e(q,Hhr),e(q,UT),e(UT,Hbe),e(Hbe,Uhr),e(UT,Jhr),e(UT,TQ),e(TQ,Yhr),e(UT,Khr),e(q,Zhr),e(q,JT),e(JT,Ube),e(Ube,epr),e(JT,opr),e(JT,MQ),e(MQ,rpr),e(JT,tpr),e(q,apr),e(q,YT),e(YT,Jbe),e(Jbe,npr),e(YT,spr),e(YT,EQ),e(EQ,lpr),e(YT,ipr),e(q,dpr),e(q,KT),e(KT,Ybe),e(Ybe,cpr),e(KT,fpr),e(KT,CQ),e(CQ,mpr),e(KT,gpr),e(q,hpr),e(q,ZT),e(ZT,Kbe),e(Kbe,ppr),e(ZT,_pr),e(ZT,wQ),e(wQ,upr),e(ZT,bpr),e(q,vpr),e(q,e7),e(e7,Zbe),e(Zbe,Fpr),e(e7,Tpr),e(e7,AQ),e(AQ,Mpr),e(e7,Epr),e(q,Cpr),e(q,o7),e(o7,e2e),e(e2e,wpr),e(o7,Apr),e(o7,LQ),e(LQ,Lpr),e(o7,ypr),e(wr,xpr),M(r7,wr,null),b(f,nDe,u),b(f,Wd,u),e(Wd,t7),e(t7,o2e),M(A8,o2e,null),e(Wd,$pr),e(Wd,r2e),e(r2e,kpr),b(f,sDe,u),b(f,Ko,u),M(L8,Ko,null),e(Ko,Spr),e(Ko,Qd),e(Qd,Rpr),e(Qd,yQ),e(yQ,Ppr),e(Qd,Bpr),e(Qd,xQ),e(xQ,Ipr),e(Qd,Npr),e(Ko,qpr),e(Ko,y8),e(y8,jpr),e(y8,t2e),e(t2e,Dpr),e(y8,Gpr),e(Ko,Opr),e(Ko,yt),M(x8,yt,null),e(yt,Vpr),e(yt,a2e),e(a2e,Xpr),e(yt,zpr),e(yt,Hd),e(Hd,Wpr),e(Hd,n2e),e(n2e,Qpr),e(Hd,Hpr),e(Hd,$Q),e($Q,Upr),e(Hd,Jpr),e(yt,Ypr),M(a7,yt,null),e(Ko,Kpr),e(Ko,Ar),M($8,Ar,null),e(Ar,Zpr),e(Ar,s2e),e(s2e,e_r),e(Ar,o_r),e(Ar,Za),e(Za,r_r),e(Za,l2e),e(l2e,t_r),e(Za,a_r),e(Za,i2e),e(i2e,n_r),e(Za,s_r),e(Za,d2e),e(d2e,l_r),e(Za,i_r),e(Ar,d_r),e(Ar,se),e(se,n7),e(n7,c2e),e(c2e,c_r),e(n7,f_r),e(n7,kQ),e(kQ,m_r),e(n7,g_r),e(se,h_r),e(se,s7),e(s7,f2e),e(f2e,p_r),e(s7,__r),e(s7,SQ),e(SQ,u_r),e(s7,b_r),e(se,v_r),e(se,l7),e(l7,m2e),e(m2e,F_r),e(l7,T_r),e(l7,RQ),e(RQ,M_r),e(l7,E_r),e(se,C_r),e(se,i7),e(i7,g2e),e(g2e,w_r),e(i7,A_r),e(i7,PQ),e(PQ,L_r),e(i7,y_r),e(se,x_r),e(se,d7),e(d7,h2e),e(h2e,$_r),e(d7,k_r),e(d7,BQ),e(BQ,S_r),e(d7,R_r),e(se,P_r),e(se,c7),e(c7,p2e),e(p2e,B_r),e(c7,I_r),e(c7,IQ),e(IQ,N_r),e(c7,q_r),e(se,j_r),e(se,f7),e(f7,_2e),e(_2e,D_r),e(f7,G_r),e(f7,NQ),e(NQ,O_r),e(f7,V_r),e(se,X_r),e(se,m7),e(m7,u2e),e(u2e,z_r),e(m7,W_r),e(m7,qQ),e(qQ,Q_r),e(m7,H_r),e(se,U_r),e(se,g7),e(g7,b2e),e(b2e,J_r),e(g7,Y_r),e(g7,jQ),e(jQ,K_r),e(g7,Z_r),e(se,eur),e(se,h7),e(h7,v2e),e(v2e,our),e(h7,rur),e(h7,DQ),e(DQ,tur),e(h7,aur),e(se,nur),e(se,p7),e(p7,F2e),e(F2e,sur),e(p7,lur),e(p7,GQ),e(GQ,iur),e(p7,dur),e(se,cur),e(se,_7),e(_7,T2e),e(T2e,fur),e(_7,mur),e(_7,OQ),e(OQ,gur),e(_7,hur),e(se,pur),e(se,u7),e(u7,M2e),e(M2e,_ur),e(u7,uur),e(u7,VQ),e(VQ,bur),e(u7,vur),e(se,Fur),e(se,b7),e(b7,E2e),e(E2e,Tur),e(b7,Mur),e(b7,XQ),e(XQ,Eur),e(b7,Cur),e(se,wur),e(se,v7),e(v7,C2e),e(C2e,Aur),e(v7,Lur),e(v7,zQ),e(zQ,yur),e(v7,xur),e(se,$ur),e(se,F7),e(F7,w2e),e(w2e,kur),e(F7,Sur),e(F7,WQ),e(WQ,Rur),e(F7,Pur),e(se,Bur),e(se,T7),e(T7,A2e),e(A2e,Iur),e(T7,Nur),e(T7,QQ),e(QQ,qur),e(T7,jur),e(se,Dur),e(se,M7),e(M7,L2e),e(L2e,Gur),e(M7,Our),e(M7,HQ),e(HQ,Vur),e(M7,Xur),e(se,zur),e(se,E7),e(E7,y2e),e(y2e,Wur),e(E7,Qur),e(E7,UQ),e(UQ,Hur),e(E7,Uur),e(se,Jur),e(se,C7),e(C7,x2e),e(x2e,Yur),e(C7,Kur),e(C7,JQ),e(JQ,Zur),e(C7,e4r),e(se,o4r),e(se,w7),e(w7,$2e),e($2e,r4r),e(w7,t4r),e(w7,YQ),e(YQ,a4r),e(w7,n4r),e(se,s4r),e(se,A7),e(A7,k2e),e(k2e,l4r),e(A7,i4r),e(A7,KQ),e(KQ,d4r),e(A7,c4r),e(se,f4r),e(se,L7),e(L7,S2e),e(S2e,m4r),e(L7,g4r),e(L7,ZQ),e(ZQ,h4r),e(L7,p4r),e(Ar,_4r),M(y7,Ar,null),b(f,lDe,u),b(f,Ud,u),e(Ud,x7),e(x7,R2e),M(k8,R2e,null),e(Ud,u4r),e(Ud,P2e),e(P2e,b4r),b(f,iDe,u),b(f,Zo,u),M(S8,Zo,null),e(Zo,v4r),e(Zo,Jd),e(Jd,F4r),e(Jd,eH),e(eH,T4r),e(Jd,M4r),e(Jd,oH),e(oH,E4r),e(Jd,C4r),e(Zo,w4r),e(Zo,R8),e(R8,A4r),e(R8,B2e),e(B2e,L4r),e(R8,y4r),e(Zo,x4r),e(Zo,xt),M(P8,xt,null),e(xt,$4r),e(xt,I2e),e(I2e,k4r),e(xt,S4r),e(xt,Yd),e(Yd,R4r),e(Yd,N2e),e(N2e,P4r),e(Yd,B4r),e(Yd,rH),e(rH,I4r),e(Yd,N4r),e(xt,q4r),M($7,xt,null),e(Zo,j4r),e(Zo,Lr),M(B8,Lr,null),e(Lr,D4r),e(Lr,q2e),e(q2e,G4r),e(Lr,O4r),e(Lr,en),e(en,V4r),e(en,j2e),e(j2e,X4r),e(en,z4r),e(en,D2e),e(D2e,W4r),e(en,Q4r),e(en,G2e),e(G2e,H4r),e(en,U4r),e(Lr,J4r),e(Lr,Me),e(Me,k7),e(k7,O2e),e(O2e,Y4r),e(k7,K4r),e(k7,tH),e(tH,Z4r),e(k7,e1r),e(Me,o1r),e(Me,S7),e(S7,V2e),e(V2e,r1r),e(S7,t1r),e(S7,aH),e(aH,a1r),e(S7,n1r),e(Me,s1r),e(Me,R7),e(R7,X2e),e(X2e,l1r),e(R7,i1r),e(R7,nH),e(nH,d1r),e(R7,c1r),e(Me,f1r),e(Me,P7),e(P7,z2e),e(z2e,m1r),e(P7,g1r),e(P7,sH),e(sH,h1r),e(P7,p1r),e(Me,_1r),e(Me,B7),e(B7,W2e),e(W2e,u1r),e(B7,b1r),e(B7,lH),e(lH,v1r),e(B7,F1r),e(Me,T1r),e(Me,I7),e(I7,Q2e),e(Q2e,M1r),e(I7,E1r),e(I7,iH),e(iH,C1r),e(I7,w1r),e(Me,A1r),e(Me,N7),e(N7,H2e),e(H2e,L1r),e(N7,y1r),e(N7,dH),e(dH,x1r),e(N7,$1r),e(Me,k1r),e(Me,q7),e(q7,U2e),e(U2e,S1r),e(q7,R1r),e(q7,cH),e(cH,P1r),e(q7,B1r),e(Me,I1r),e(Me,j7),e(j7,J2e),e(J2e,N1r),e(j7,q1r),e(j7,fH),e(fH,j1r),e(j7,D1r),e(Me,G1r),e(Me,D7),e(D7,Y2e),e(Y2e,O1r),e(D7,V1r),e(D7,mH),e(mH,X1r),e(D7,z1r),e(Me,W1r),e(Me,G7),e(G7,K2e),e(K2e,Q1r),e(G7,H1r),e(G7,gH),e(gH,U1r),e(G7,J1r),e(Me,Y1r),e(Me,O7),e(O7,Z2e),e(Z2e,K1r),e(O7,Z1r),e(O7,hH),e(hH,ebr),e(O7,obr),e(Me,rbr),e(Me,V7),e(V7,eve),e(eve,tbr),e(V7,abr),e(V7,pH),e(pH,nbr),e(V7,sbr),e(Lr,lbr),M(X7,Lr,null),b(f,dDe,u),b(f,Kd,u),e(Kd,z7),e(z7,ove),M(I8,ove,null),e(Kd,ibr),e(Kd,rve),e(rve,dbr),b(f,cDe,u),b(f,er,u),M(N8,er,null),e(er,cbr),e(er,Zd),e(Zd,fbr),e(Zd,_H),e(_H,mbr),e(Zd,gbr),e(Zd,uH),e(uH,hbr),e(Zd,pbr),e(er,_br),e(er,q8),e(q8,ubr),e(q8,tve),e(tve,bbr),e(q8,vbr),e(er,Fbr),e(er,$t),M(j8,$t,null),e($t,Tbr),e($t,ave),e(ave,Mbr),e($t,Ebr),e($t,ec),e(ec,Cbr),e(ec,nve),e(nve,wbr),e(ec,Abr),e(ec,bH),e(bH,Lbr),e(ec,ybr),e($t,xbr),M(W7,$t,null),e(er,$br),e(er,yr),M(D8,yr,null),e(yr,kbr),e(yr,sve),e(sve,Sbr),e(yr,Rbr),e(yr,on),e(on,Pbr),e(on,lve),e(lve,Bbr),e(on,Ibr),e(on,ive),e(ive,Nbr),e(on,qbr),e(on,dve),e(dve,jbr),e(on,Dbr),e(yr,Gbr),e(yr,rn),e(rn,Q7),e(Q7,cve),e(cve,Obr),e(Q7,Vbr),e(Q7,vH),e(vH,Xbr),e(Q7,zbr),e(rn,Wbr),e(rn,H7),e(H7,fve),e(fve,Qbr),e(H7,Hbr),e(H7,FH),e(FH,Ubr),e(H7,Jbr),e(rn,Ybr),e(rn,U7),e(U7,mve),e(mve,Kbr),e(U7,Zbr),e(U7,TH),e(TH,e2r),e(U7,o2r),e(rn,r2r),e(rn,J7),e(J7,gve),e(gve,t2r),e(J7,a2r),e(J7,MH),e(MH,n2r),e(J7,s2r),e(yr,l2r),M(Y7,yr,null),b(f,fDe,u),b(f,oc,u),e(oc,K7),e(K7,hve),M(G8,hve,null),e(oc,i2r),e(oc,pve),e(pve,d2r),b(f,mDe,u),b(f,or,u),M(O8,or,null),e(or,c2r),e(or,rc),e(rc,f2r),e(rc,EH),e(EH,m2r),e(rc,g2r),e(rc,CH),e(CH,h2r),e(rc,p2r),e(or,_2r),e(or,V8),e(V8,u2r),e(V8,_ve),e(_ve,b2r),e(V8,v2r),e(or,F2r),e(or,kt),M(X8,kt,null),e(kt,T2r),e(kt,uve),e(uve,M2r),e(kt,E2r),e(kt,tc),e(tc,C2r),e(tc,bve),e(bve,w2r),e(tc,A2r),e(tc,wH),e(wH,L2r),e(tc,y2r),e(kt,x2r),M(Z7,kt,null),e(or,$2r),e(or,xr),M(z8,xr,null),e(xr,k2r),e(xr,vve),e(vve,S2r),e(xr,R2r),e(xr,tn),e(tn,P2r),e(tn,Fve),e(Fve,B2r),e(tn,I2r),e(tn,Tve),e(Tve,N2r),e(tn,q2r),e(tn,Mve),e(Mve,j2r),e(tn,D2r),e(xr,G2r),e(xr,ie),e(ie,eM),e(eM,Eve),e(Eve,O2r),e(eM,V2r),e(eM,AH),e(AH,X2r),e(eM,z2r),e(ie,W2r),e(ie,oM),e(oM,Cve),e(Cve,Q2r),e(oM,H2r),e(oM,LH),e(LH,U2r),e(oM,J2r),e(ie,Y2r),e(ie,rM),e(rM,wve),e(wve,K2r),e(rM,Z2r),e(rM,yH),e(yH,evr),e(rM,ovr),e(ie,rvr),e(ie,tM),e(tM,Ave),e(Ave,tvr),e(tM,avr),e(tM,xH),e(xH,nvr),e(tM,svr),e(ie,lvr),e(ie,aM),e(aM,Lve),e(Lve,ivr),e(aM,dvr),e(aM,$H),e($H,cvr),e(aM,fvr),e(ie,mvr),e(ie,nM),e(nM,yve),e(yve,gvr),e(nM,hvr),e(nM,kH),e(kH,pvr),e(nM,_vr),e(ie,uvr),e(ie,sM),e(sM,xve),e(xve,bvr),e(sM,vvr),e(sM,SH),e(SH,Fvr),e(sM,Tvr),e(ie,Mvr),e(ie,lM),e(lM,$ve),e($ve,Evr),e(lM,Cvr),e(lM,RH),e(RH,wvr),e(lM,Avr),e(ie,Lvr),e(ie,iM),e(iM,kve),e(kve,yvr),e(iM,xvr),e(iM,PH),e(PH,$vr),e(iM,kvr),e(ie,Svr),e(ie,dM),e(dM,Sve),e(Sve,Rvr),e(dM,Pvr),e(dM,BH),e(BH,Bvr),e(dM,Ivr),e(ie,Nvr),e(ie,cM),e(cM,Rve),e(Rve,qvr),e(cM,jvr),e(cM,IH),e(IH,Dvr),e(cM,Gvr),e(ie,Ovr),e(ie,fM),e(fM,Pve),e(Pve,Vvr),e(fM,Xvr),e(fM,NH),e(NH,zvr),e(fM,Wvr),e(ie,Qvr),e(ie,mM),e(mM,Bve),e(Bve,Hvr),e(mM,Uvr),e(mM,qH),e(qH,Jvr),e(mM,Yvr),e(ie,Kvr),e(ie,gM),e(gM,Ive),e(Ive,Zvr),e(gM,e3r),e(gM,jH),e(jH,o3r),e(gM,r3r),e(ie,t3r),e(ie,hM),e(hM,Nve),e(Nve,a3r),e(hM,n3r),e(hM,DH),e(DH,s3r),e(hM,l3r),e(ie,i3r),e(ie,pM),e(pM,qve),e(qve,d3r),e(pM,c3r),e(pM,GH),e(GH,f3r),e(pM,m3r),e(ie,g3r),e(ie,_M),e(_M,jve),e(jve,h3r),e(_M,p3r),e(_M,OH),e(OH,_3r),e(_M,u3r),e(ie,b3r),e(ie,uM),e(uM,Dve),e(Dve,v3r),e(uM,F3r),e(uM,VH),e(VH,T3r),e(uM,M3r),e(ie,E3r),e(ie,bM),e(bM,Gve),e(Gve,C3r),e(bM,w3r),e(bM,XH),e(XH,A3r),e(bM,L3r),e(ie,y3r),e(ie,vM),e(vM,Ove),e(Ove,x3r),e(vM,$3r),e(vM,zH),e(zH,k3r),e(vM,S3r),e(xr,R3r),M(FM,xr,null),b(f,gDe,u),b(f,ac,u),e(ac,TM),e(TM,Vve),M(W8,Vve,null),e(ac,P3r),e(ac,Xve),e(Xve,B3r),b(f,hDe,u),b(f,rr,u),M(Q8,rr,null),e(rr,I3r),e(rr,nc),e(nc,N3r),e(nc,WH),e(WH,q3r),e(nc,j3r),e(nc,QH),e(QH,D3r),e(nc,G3r),e(rr,O3r),e(rr,H8),e(H8,V3r),e(H8,zve),e(zve,X3r),e(H8,z3r),e(rr,W3r),e(rr,St),M(U8,St,null),e(St,Q3r),e(St,Wve),e(Wve,H3r),e(St,U3r),e(St,sc),e(sc,J3r),e(sc,Qve),e(Qve,Y3r),e(sc,K3r),e(sc,HH),e(HH,Z3r),e(sc,eFr),e(St,oFr),M(MM,St,null),e(rr,rFr),e(rr,$r),M(J8,$r,null),e($r,tFr),e($r,Hve),e(Hve,aFr),e($r,nFr),e($r,an),e(an,sFr),e(an,Uve),e(Uve,lFr),e(an,iFr),e(an,Jve),e(Jve,dFr),e(an,cFr),e(an,Yve),e(Yve,fFr),e(an,mFr),e($r,gFr),e($r,Le),e(Le,EM),e(EM,Kve),e(Kve,hFr),e(EM,pFr),e(EM,UH),e(UH,_Fr),e(EM,uFr),e(Le,bFr),e(Le,CM),e(CM,Zve),e(Zve,vFr),e(CM,FFr),e(CM,JH),e(JH,TFr),e(CM,MFr),e(Le,EFr),e(Le,wM),e(wM,e3e),e(e3e,CFr),e(wM,wFr),e(wM,YH),e(YH,AFr),e(wM,LFr),e(Le,yFr),e(Le,AM),e(AM,o3e),e(o3e,xFr),e(AM,$Fr),e(AM,KH),e(KH,kFr),e(AM,SFr),e(Le,RFr),e(Le,LM),e(LM,r3e),e(r3e,PFr),e(LM,BFr),e(LM,ZH),e(ZH,IFr),e(LM,NFr),e(Le,qFr),e(Le,yM),e(yM,t3e),e(t3e,jFr),e(yM,DFr),e(yM,eU),e(eU,GFr),e(yM,OFr),e(Le,VFr),e(Le,xM),e(xM,a3e),e(a3e,XFr),e(xM,zFr),e(xM,oU),e(oU,WFr),e(xM,QFr),e(Le,HFr),e(Le,$M),e($M,n3e),e(n3e,UFr),e($M,JFr),e($M,rU),e(rU,YFr),e($M,KFr),e(Le,ZFr),e(Le,kM),e(kM,s3e),e(s3e,eTr),e(kM,oTr),e(kM,tU),e(tU,rTr),e(kM,tTr),e(Le,aTr),e(Le,SM),e(SM,l3e),e(l3e,nTr),e(SM,sTr),e(SM,aU),e(aU,lTr),e(SM,iTr),e($r,dTr),M(RM,$r,null),b(f,pDe,u),b(f,lc,u),e(lc,PM),e(PM,i3e),M(Y8,i3e,null),e(lc,cTr),e(lc,d3e),e(d3e,fTr),b(f,_De,u),b(f,tr,u),M(K8,tr,null),e(tr,mTr),e(tr,ic),e(ic,gTr),e(ic,nU),e(nU,hTr),e(ic,pTr),e(ic,sU),e(sU,_Tr),e(ic,uTr),e(tr,bTr),e(tr,Z8),e(Z8,vTr),e(Z8,c3e),e(c3e,FTr),e(Z8,TTr),e(tr,MTr),e(tr,Rt),M(e9,Rt,null),e(Rt,ETr),e(Rt,f3e),e(f3e,CTr),e(Rt,wTr),e(Rt,dc),e(dc,ATr),e(dc,m3e),e(m3e,LTr),e(dc,yTr),e(dc,lU),e(lU,xTr),e(dc,$Tr),e(Rt,kTr),M(BM,Rt,null),e(tr,STr),e(tr,kr),M(o9,kr,null),e(kr,RTr),e(kr,g3e),e(g3e,PTr),e(kr,BTr),e(kr,nn),e(nn,ITr),e(nn,h3e),e(h3e,NTr),e(nn,qTr),e(nn,p3e),e(p3e,jTr),e(nn,DTr),e(nn,_3e),e(_3e,GTr),e(nn,OTr),e(kr,VTr),e(kr,oe),e(oe,IM),e(IM,u3e),e(u3e,XTr),e(IM,zTr),e(IM,iU),e(iU,WTr),e(IM,QTr),e(oe,HTr),e(oe,NM),e(NM,b3e),e(b3e,UTr),e(NM,JTr),e(NM,dU),e(dU,YTr),e(NM,KTr),e(oe,ZTr),e(oe,qM),e(qM,v3e),e(v3e,e7r),e(qM,o7r),e(qM,cU),e(cU,r7r),e(qM,t7r),e(oe,a7r),e(oe,jM),e(jM,F3e),e(F3e,n7r),e(jM,s7r),e(jM,fU),e(fU,l7r),e(jM,i7r),e(oe,d7r),e(oe,DM),e(DM,T3e),e(T3e,c7r),e(DM,f7r),e(DM,mU),e(mU,m7r),e(DM,g7r),e(oe,h7r),e(oe,GM),e(GM,M3e),e(M3e,p7r),e(GM,_7r),e(GM,gU),e(gU,u7r),e(GM,b7r),e(oe,v7r),e(oe,OM),e(OM,E3e),e(E3e,F7r),e(OM,T7r),e(OM,hU),e(hU,M7r),e(OM,E7r),e(oe,C7r),e(oe,VM),e(VM,C3e),e(C3e,w7r),e(VM,A7r),e(VM,pU),e(pU,L7r),e(VM,y7r),e(oe,x7r),e(oe,XM),e(XM,w3e),e(w3e,$7r),e(XM,k7r),e(XM,_U),e(_U,S7r),e(XM,R7r),e(oe,P7r),e(oe,zM),e(zM,A3e),e(A3e,B7r),e(zM,I7r),e(zM,uU),e(uU,N7r),e(zM,q7r),e(oe,j7r),e(oe,WM),e(WM,L3e),e(L3e,D7r),e(WM,G7r),e(WM,bU),e(bU,O7r),e(WM,V7r),e(oe,X7r),e(oe,QM),e(QM,y3e),e(y3e,z7r),e(QM,W7r),e(QM,vU),e(vU,Q7r),e(QM,H7r),e(oe,U7r),e(oe,HM),e(HM,x3e),e(x3e,J7r),e(HM,Y7r),e(HM,FU),e(FU,K7r),e(HM,Z7r),e(oe,eMr),e(oe,UM),e(UM,$3e),e($3e,oMr),e(UM,rMr),e(UM,TU),e(TU,tMr),e(UM,aMr),e(oe,nMr),e(oe,JM),e(JM,k3e),e(k3e,sMr),e(JM,lMr),e(JM,MU),e(MU,iMr),e(JM,dMr),e(oe,cMr),e(oe,YM),e(YM,S3e),e(S3e,fMr),e(YM,mMr),e(YM,EU),e(EU,gMr),e(YM,hMr),e(oe,pMr),e(oe,KM),e(KM,R3e),e(R3e,_Mr),e(KM,uMr),e(KM,CU),e(CU,bMr),e(KM,vMr),e(oe,FMr),e(oe,ZM),e(ZM,P3e),e(P3e,TMr),e(ZM,MMr),e(ZM,wU),e(wU,EMr),e(ZM,CMr),e(oe,wMr),e(oe,eE),e(eE,B3e),e(B3e,AMr),e(eE,LMr),e(eE,AU),e(AU,yMr),e(eE,xMr),e(oe,$Mr),e(oe,oE),e(oE,I3e),e(I3e,kMr),e(oE,SMr),e(oE,LU),e(LU,RMr),e(oE,PMr),e(oe,BMr),e(oe,rE),e(rE,N3e),e(N3e,IMr),e(rE,NMr),e(rE,yU),e(yU,qMr),e(rE,jMr),e(oe,DMr),e(oe,tE),e(tE,q3e),e(q3e,GMr),e(tE,OMr),e(tE,xU),e(xU,VMr),e(tE,XMr),e(oe,zMr),e(oe,aE),e(aE,j3e),e(j3e,WMr),e(aE,QMr),e(aE,$U),e($U,HMr),e(aE,UMr),e(oe,JMr),e(oe,nE),e(nE,D3e),e(D3e,YMr),e(nE,KMr),e(nE,kU),e(kU,ZMr),e(nE,eEr),e(oe,oEr),e(oe,sE),e(sE,G3e),e(G3e,rEr),e(sE,tEr),e(sE,SU),e(SU,aEr),e(sE,nEr),e(oe,sEr),e(oe,lE),e(lE,O3e),e(O3e,lEr),e(lE,iEr),e(lE,RU),e(RU,dEr),e(lE,cEr),e(kr,fEr),M(iE,kr,null),b(f,uDe,u),b(f,cc,u),e(cc,dE),e(dE,V3e),M(r9,V3e,null),e(cc,mEr),e(cc,X3e),e(X3e,gEr),b(f,bDe,u),b(f,ar,u),M(t9,ar,null),e(ar,hEr),e(ar,fc),e(fc,pEr),e(fc,PU),e(PU,_Er),e(fc,uEr),e(fc,BU),e(BU,bEr),e(fc,vEr),e(ar,FEr),e(ar,a9),e(a9,TEr),e(a9,z3e),e(z3e,MEr),e(a9,EEr),e(ar,CEr),e(ar,Pt),M(n9,Pt,null),e(Pt,wEr),e(Pt,W3e),e(W3e,AEr),e(Pt,LEr),e(Pt,mc),e(mc,yEr),e(mc,Q3e),e(Q3e,xEr),e(mc,$Er),e(mc,IU),e(IU,kEr),e(mc,SEr),e(Pt,REr),M(cE,Pt,null),e(ar,PEr),e(ar,Sr),M(s9,Sr,null),e(Sr,BEr),e(Sr,H3e),e(H3e,IEr),e(Sr,NEr),e(Sr,sn),e(sn,qEr),e(sn,U3e),e(U3e,jEr),e(sn,DEr),e(sn,J3e),e(J3e,GEr),e(sn,OEr),e(sn,Y3e),e(Y3e,VEr),e(sn,XEr),e(Sr,zEr),e(Sr,pe),e(pe,fE),e(fE,K3e),e(K3e,WEr),e(fE,QEr),e(fE,NU),e(NU,HEr),e(fE,UEr),e(pe,JEr),e(pe,mE),e(mE,Z3e),e(Z3e,YEr),e(mE,KEr),e(mE,qU),e(qU,ZEr),e(mE,eCr),e(pe,oCr),e(pe,gE),e(gE,eFe),e(eFe,rCr),e(gE,tCr),e(gE,jU),e(jU,aCr),e(gE,nCr),e(pe,sCr),e(pe,hE),e(hE,oFe),e(oFe,lCr),e(hE,iCr),e(hE,DU),e(DU,dCr),e(hE,cCr),e(pe,fCr),e(pe,pE),e(pE,rFe),e(rFe,mCr),e(pE,gCr),e(pE,GU),e(GU,hCr),e(pE,pCr),e(pe,_Cr),e(pe,_E),e(_E,tFe),e(tFe,uCr),e(_E,bCr),e(_E,OU),e(OU,vCr),e(_E,FCr),e(pe,TCr),e(pe,uE),e(uE,aFe),e(aFe,MCr),e(uE,ECr),e(uE,VU),e(VU,CCr),e(uE,wCr),e(pe,ACr),e(pe,bE),e(bE,nFe),e(nFe,LCr),e(bE,yCr),e(bE,XU),e(XU,xCr),e(bE,$Cr),e(pe,kCr),e(pe,vE),e(vE,sFe),e(sFe,SCr),e(vE,RCr),e(vE,zU),e(zU,PCr),e(vE,BCr),e(pe,ICr),e(pe,FE),e(FE,lFe),e(lFe,NCr),e(FE,qCr),e(FE,WU),e(WU,jCr),e(FE,DCr),e(pe,GCr),e(pe,TE),e(TE,iFe),e(iFe,OCr),e(TE,VCr),e(TE,QU),e(QU,XCr),e(TE,zCr),e(pe,WCr),e(pe,ME),e(ME,dFe),e(dFe,QCr),e(ME,HCr),e(ME,HU),e(HU,UCr),e(ME,JCr),e(pe,YCr),e(pe,EE),e(EE,cFe),e(cFe,KCr),e(EE,ZCr),e(EE,UU),e(UU,e5r),e(EE,o5r),e(pe,r5r),e(pe,CE),e(CE,fFe),e(fFe,t5r),e(CE,a5r),e(CE,JU),e(JU,n5r),e(CE,s5r),e(pe,l5r),e(pe,wE),e(wE,mFe),e(mFe,i5r),e(wE,d5r),e(wE,YU),e(YU,c5r),e(wE,f5r),e(pe,m5r),e(pe,AE),e(AE,gFe),e(gFe,g5r),e(AE,h5r),e(AE,KU),e(KU,p5r),e(AE,_5r),e(pe,u5r),e(pe,LE),e(LE,hFe),e(hFe,b5r),e(LE,v5r),e(LE,ZU),e(ZU,F5r),e(LE,T5r),e(Sr,M5r),M(yE,Sr,null),b(f,vDe,u),b(f,gc,u),e(gc,xE),e(xE,pFe),M(l9,pFe,null),e(gc,E5r),e(gc,_Fe),e(_Fe,C5r),b(f,FDe,u),b(f,nr,u),M(i9,nr,null),e(nr,w5r),e(nr,hc),e(hc,A5r),e(hc,eJ),e(eJ,L5r),e(hc,y5r),e(hc,oJ),e(oJ,x5r),e(hc,$5r),e(nr,k5r),e(nr,d9),e(d9,S5r),e(d9,uFe),e(uFe,R5r),e(d9,P5r),e(nr,B5r),e(nr,Bt),M(c9,Bt,null),e(Bt,I5r),e(Bt,bFe),e(bFe,N5r),e(Bt,q5r),e(Bt,pc),e(pc,j5r),e(pc,vFe),e(vFe,D5r),e(pc,G5r),e(pc,rJ),e(rJ,O5r),e(pc,V5r),e(Bt,X5r),M($E,Bt,null),e(nr,z5r),e(nr,Rr),M(f9,Rr,null),e(Rr,W5r),e(Rr,FFe),e(FFe,Q5r),e(Rr,H5r),e(Rr,ln),e(ln,U5r),e(ln,TFe),e(TFe,J5r),e(ln,Y5r),e(ln,MFe),e(MFe,K5r),e(ln,Z5r),e(ln,EFe),e(EFe,e0r),e(ln,o0r),e(Rr,r0r),e(Rr,m9),e(m9,kE),e(kE,CFe),e(CFe,t0r),e(kE,a0r),e(kE,tJ),e(tJ,n0r),e(kE,s0r),e(m9,l0r),e(m9,SE),e(SE,wFe),e(wFe,i0r),e(SE,d0r),e(SE,aJ),e(aJ,c0r),e(SE,f0r),e(Rr,m0r),M(RE,Rr,null),b(f,TDe,u),b(f,_c,u),e(_c,PE),e(PE,AFe),M(g9,AFe,null),e(_c,g0r),e(_c,LFe),e(LFe,h0r),b(f,MDe,u),b(f,sr,u),M(h9,sr,null),e(sr,p0r),e(sr,uc),e(uc,_0r),e(uc,nJ),e(nJ,u0r),e(uc,b0r),e(uc,sJ),e(sJ,v0r),e(uc,F0r),e(sr,T0r),e(sr,p9),e(p9,M0r),e(p9,yFe),e(yFe,E0r),e(p9,C0r),e(sr,w0r),e(sr,It),M(_9,It,null),e(It,A0r),e(It,xFe),e(xFe,L0r),e(It,y0r),e(It,bc),e(bc,x0r),e(bc,$Fe),e($Fe,$0r),e(bc,k0r),e(bc,lJ),e(lJ,S0r),e(bc,R0r),e(It,P0r),M(BE,It,null),e(sr,B0r),e(sr,Pr),M(u9,Pr,null),e(Pr,I0r),e(Pr,kFe),e(kFe,N0r),e(Pr,q0r),e(Pr,dn),e(dn,j0r),e(dn,SFe),e(SFe,D0r),e(dn,G0r),e(dn,RFe),e(RFe,O0r),e(dn,V0r),e(dn,PFe),e(PFe,X0r),e(dn,z0r),e(Pr,W0r),e(Pr,BFe),e(BFe,IE),e(IE,IFe),e(IFe,Q0r),e(IE,H0r),e(IE,iJ),e(iJ,U0r),e(IE,J0r),e(Pr,Y0r),M(NE,Pr,null),b(f,EDe,u),b(f,vc,u),e(vc,qE),e(qE,NFe),M(b9,NFe,null),e(vc,K0r),e(vc,qFe),e(qFe,Z0r),b(f,CDe,u),b(f,lr,u),M(v9,lr,null),e(lr,ewr),e(lr,Fc),e(Fc,owr),e(Fc,dJ),e(dJ,rwr),e(Fc,twr),e(Fc,cJ),e(cJ,awr),e(Fc,nwr),e(lr,swr),e(lr,F9),e(F9,lwr),e(F9,jFe),e(jFe,iwr),e(F9,dwr),e(lr,cwr),e(lr,Nt),M(T9,Nt,null),e(Nt,fwr),e(Nt,DFe),e(DFe,mwr),e(Nt,gwr),e(Nt,Tc),e(Tc,hwr),e(Tc,GFe),e(GFe,pwr),e(Tc,_wr),e(Tc,fJ),e(fJ,uwr),e(Tc,bwr),e(Nt,vwr),M(jE,Nt,null),e(lr,Fwr),e(lr,Br),M(M9,Br,null),e(Br,Twr),e(Br,OFe),e(OFe,Mwr),e(Br,Ewr),e(Br,cn),e(cn,Cwr),e(cn,VFe),e(VFe,wwr),e(cn,Awr),e(cn,XFe),e(XFe,Lwr),e(cn,ywr),e(cn,zFe),e(zFe,xwr),e(cn,$wr),e(Br,kwr),e(Br,de),e(de,DE),e(DE,WFe),e(WFe,Swr),e(DE,Rwr),e(DE,mJ),e(mJ,Pwr),e(DE,Bwr),e(de,Iwr),e(de,GE),e(GE,QFe),e(QFe,Nwr),e(GE,qwr),e(GE,gJ),e(gJ,jwr),e(GE,Dwr),e(de,Gwr),e(de,OE),e(OE,HFe),e(HFe,Owr),e(OE,Vwr),e(OE,hJ),e(hJ,Xwr),e(OE,zwr),e(de,Wwr),e(de,VE),e(VE,UFe),e(UFe,Qwr),e(VE,Hwr),e(VE,pJ),e(pJ,Uwr),e(VE,Jwr),e(de,Ywr),e(de,XE),e(XE,JFe),e(JFe,Kwr),e(XE,Zwr),e(XE,_J),e(_J,eAr),e(XE,oAr),e(de,rAr),e(de,zE),e(zE,YFe),e(YFe,tAr),e(zE,aAr),e(zE,uJ),e(uJ,nAr),e(zE,sAr),e(de,lAr),e(de,WE),e(WE,KFe),e(KFe,iAr),e(WE,dAr),e(WE,bJ),e(bJ,cAr),e(WE,fAr),e(de,mAr),e(de,QE),e(QE,ZFe),e(ZFe,gAr),e(QE,hAr),e(QE,vJ),e(vJ,pAr),e(QE,_Ar),e(de,uAr),e(de,HE),e(HE,eTe),e(eTe,bAr),e(HE,vAr),e(HE,FJ),e(FJ,FAr),e(HE,TAr),e(de,MAr),e(de,UE),e(UE,oTe),e(oTe,EAr),e(UE,CAr),e(UE,TJ),e(TJ,wAr),e(UE,AAr),e(de,LAr),e(de,JE),e(JE,rTe),e(rTe,yAr),e(JE,xAr),e(JE,MJ),e(MJ,$Ar),e(JE,kAr),e(de,SAr),e(de,YE),e(YE,tTe),e(tTe,RAr),e(YE,PAr),e(YE,EJ),e(EJ,BAr),e(YE,IAr),e(de,NAr),e(de,KE),e(KE,aTe),e(aTe,qAr),e(KE,jAr),e(KE,CJ),e(CJ,DAr),e(KE,GAr),e(de,OAr),e(de,ZE),e(ZE,nTe),e(nTe,VAr),e(ZE,XAr),e(ZE,wJ),e(wJ,zAr),e(ZE,WAr),e(de,QAr),e(de,eC),e(eC,sTe),e(sTe,HAr),e(eC,UAr),e(eC,AJ),e(AJ,JAr),e(eC,YAr),e(de,KAr),e(de,oC),e(oC,lTe),e(lTe,ZAr),e(oC,e6r),e(oC,LJ),e(LJ,o6r),e(oC,r6r),e(de,t6r),e(de,rC),e(rC,iTe),e(iTe,a6r),e(rC,n6r),e(rC,yJ),e(yJ,s6r),e(rC,l6r),e(de,i6r),e(de,tC),e(tC,dTe),e(dTe,d6r),e(tC,c6r),e(tC,xJ),e(xJ,f6r),e(tC,m6r),e(de,g6r),e(de,aC),e(aC,cTe),e(cTe,h6r),e(aC,p6r),e(aC,$J),e($J,_6r),e(aC,u6r),e(de,b6r),e(de,nC),e(nC,fTe),e(fTe,v6r),e(nC,F6r),e(nC,kJ),e(kJ,T6r),e(nC,M6r),e(Br,E6r),M(sC,Br,null),b(f,wDe,u),b(f,Mc,u),e(Mc,lC),e(lC,mTe),M(E9,mTe,null),e(Mc,C6r),e(Mc,gTe),e(gTe,w6r),b(f,ADe,u),b(f,ir,u),M(C9,ir,null),e(ir,A6r),e(ir,Ec),e(Ec,L6r),e(Ec,SJ),e(SJ,y6r),e(Ec,x6r),e(Ec,RJ),e(RJ,$6r),e(Ec,k6r),e(ir,S6r),e(ir,w9),e(w9,R6r),e(w9,hTe),e(hTe,P6r),e(w9,B6r),e(ir,I6r),e(ir,qt),M(A9,qt,null),e(qt,N6r),e(qt,pTe),e(pTe,q6r),e(qt,j6r),e(qt,Cc),e(Cc,D6r),e(Cc,_Te),e(_Te,G6r),e(Cc,O6r),e(Cc,PJ),e(PJ,V6r),e(Cc,X6r),e(qt,z6r),M(iC,qt,null),e(ir,W6r),e(ir,Ir),M(L9,Ir,null),e(Ir,Q6r),e(Ir,uTe),e(uTe,H6r),e(Ir,U6r),e(Ir,fn),e(fn,J6r),e(fn,bTe),e(bTe,Y6r),e(fn,K6r),e(fn,vTe),e(vTe,Z6r),e(fn,eLr),e(fn,FTe),e(FTe,oLr),e(fn,rLr),e(Ir,tLr),e(Ir,ce),e(ce,dC),e(dC,TTe),e(TTe,aLr),e(dC,nLr),e(dC,BJ),e(BJ,sLr),e(dC,lLr),e(ce,iLr),e(ce,cC),e(cC,MTe),e(MTe,dLr),e(cC,cLr),e(cC,IJ),e(IJ,fLr),e(cC,mLr),e(ce,gLr),e(ce,fC),e(fC,ETe),e(ETe,hLr),e(fC,pLr),e(fC,NJ),e(NJ,_Lr),e(fC,uLr),e(ce,bLr),e(ce,mC),e(mC,CTe),e(CTe,vLr),e(mC,FLr),e(mC,qJ),e(qJ,TLr),e(mC,MLr),e(ce,ELr),e(ce,gC),e(gC,wTe),e(wTe,CLr),e(gC,wLr),e(gC,jJ),e(jJ,ALr),e(gC,LLr),e(ce,yLr),e(ce,hC),e(hC,ATe),e(ATe,xLr),e(hC,$Lr),e(hC,DJ),e(DJ,kLr),e(hC,SLr),e(ce,RLr),e(ce,pC),e(pC,LTe),e(LTe,PLr),e(pC,BLr),e(pC,GJ),e(GJ,ILr),e(pC,NLr),e(ce,qLr),e(ce,_C),e(_C,yTe),e(yTe,jLr),e(_C,DLr),e(_C,OJ),e(OJ,GLr),e(_C,OLr),e(ce,VLr),e(ce,uC),e(uC,xTe),e(xTe,XLr),e(uC,zLr),e(uC,VJ),e(VJ,WLr),e(uC,QLr),e(ce,HLr),e(ce,bC),e(bC,$Te),e($Te,ULr),e(bC,JLr),e(bC,XJ),e(XJ,YLr),e(bC,KLr),e(ce,ZLr),e(ce,vC),e(vC,kTe),e(kTe,eyr),e(vC,oyr),e(vC,zJ),e(zJ,ryr),e(vC,tyr),e(ce,ayr),e(ce,FC),e(FC,STe),e(STe,nyr),e(FC,syr),e(FC,WJ),e(WJ,lyr),e(FC,iyr),e(ce,dyr),e(ce,TC),e(TC,RTe),e(RTe,cyr),e(TC,fyr),e(TC,QJ),e(QJ,myr),e(TC,gyr),e(ce,hyr),e(ce,MC),e(MC,PTe),e(PTe,pyr),e(MC,_yr),e(MC,HJ),e(HJ,uyr),e(MC,byr),e(ce,vyr),e(ce,EC),e(EC,BTe),e(BTe,Fyr),e(EC,Tyr),e(EC,UJ),e(UJ,Myr),e(EC,Eyr),e(ce,Cyr),e(ce,CC),e(CC,ITe),e(ITe,wyr),e(CC,Ayr),e(CC,JJ),e(JJ,Lyr),e(CC,yyr),e(ce,xyr),e(ce,wC),e(wC,NTe),e(NTe,$yr),e(wC,kyr),e(wC,YJ),e(YJ,Syr),e(wC,Ryr),e(ce,Pyr),e(ce,AC),e(AC,qTe),e(qTe,Byr),e(AC,Iyr),e(AC,KJ),e(KJ,Nyr),e(AC,qyr),e(ce,jyr),e(ce,LC),e(LC,jTe),e(jTe,Dyr),e(LC,Gyr),e(LC,ZJ),e(ZJ,Oyr),e(LC,Vyr),e(ce,Xyr),e(ce,yC),e(yC,DTe),e(DTe,zyr),e(yC,Wyr),e(yC,eY),e(eY,Qyr),e(yC,Hyr),e(Ir,Uyr),M(xC,Ir,null),b(f,LDe,u),b(f,wc,u),e(wc,$C),e($C,GTe),M(y9,GTe,null),e(wc,Jyr),e(wc,OTe),e(OTe,Yyr),b(f,yDe,u),b(f,dr,u),M(x9,dr,null),e(dr,Kyr),e(dr,Ac),e(Ac,Zyr),e(Ac,oY),e(oY,e8r),e(Ac,o8r),e(Ac,rY),e(rY,r8r),e(Ac,t8r),e(dr,a8r),e(dr,$9),e($9,n8r),e($9,VTe),e(VTe,s8r),e($9,l8r),e(dr,i8r),e(dr,jt),M(k9,jt,null),e(jt,d8r),e(jt,XTe),e(XTe,c8r),e(jt,f8r),e(jt,Lc),e(Lc,m8r),e(Lc,zTe),e(zTe,g8r),e(Lc,h8r),e(Lc,tY),e(tY,p8r),e(Lc,_8r),e(jt,u8r),M(kC,jt,null),e(dr,b8r),e(dr,Nr),M(S9,Nr,null),e(Nr,v8r),e(Nr,WTe),e(WTe,F8r),e(Nr,T8r),e(Nr,mn),e(mn,M8r),e(mn,QTe),e(QTe,E8r),e(mn,C8r),e(mn,HTe),e(HTe,w8r),e(mn,A8r),e(mn,UTe),e(UTe,L8r),e(mn,y8r),e(Nr,x8r),e(Nr,JTe),e(JTe,SC),e(SC,YTe),e(YTe,$8r),e(SC,k8r),e(SC,aY),e(aY,S8r),e(SC,R8r),e(Nr,P8r),M(RC,Nr,null),b(f,xDe,u),b(f,yc,u),e(yc,PC),e(PC,KTe),M(R9,KTe,null),e(yc,B8r),e(yc,ZTe),e(ZTe,I8r),b(f,$De,u),b(f,cr,u),M(P9,cr,null),e(cr,N8r),e(cr,xc),e(xc,q8r),e(xc,nY),e(nY,j8r),e(xc,D8r),e(xc,sY),e(sY,G8r),e(xc,O8r),e(cr,V8r),e(cr,B9),e(B9,X8r),e(B9,e7e),e(e7e,z8r),e(B9,W8r),e(cr,Q8r),e(cr,Dt),M(I9,Dt,null),e(Dt,H8r),e(Dt,o7e),e(o7e,U8r),e(Dt,J8r),e(Dt,$c),e($c,Y8r),e($c,r7e),e(r7e,K8r),e($c,Z8r),e($c,lY),e(lY,e9r),e($c,o9r),e(Dt,r9r),M(BC,Dt,null),e(cr,t9r),e(cr,qr),M(N9,qr,null),e(qr,a9r),e(qr,t7e),e(t7e,n9r),e(qr,s9r),e(qr,gn),e(gn,l9r),e(gn,a7e),e(a7e,i9r),e(gn,d9r),e(gn,n7e),e(n7e,c9r),e(gn,f9r),e(gn,s7e),e(s7e,m9r),e(gn,g9r),e(qr,h9r),e(qr,l7e),e(l7e,IC),e(IC,i7e),e(i7e,p9r),e(IC,_9r),e(IC,iY),e(iY,u9r),e(IC,b9r),e(qr,v9r),M(NC,qr,null),b(f,kDe,u),b(f,kc,u),e(kc,qC),e(qC,d7e),M(q9,d7e,null),e(kc,F9r),e(kc,c7e),e(c7e,T9r),b(f,SDe,u),b(f,fr,u),M(j9,fr,null),e(fr,M9r),e(fr,Sc),e(Sc,E9r),e(Sc,dY),e(dY,C9r),e(Sc,w9r),e(Sc,cY),e(cY,A9r),e(Sc,L9r),e(fr,y9r),e(fr,D9),e(D9,x9r),e(D9,f7e),e(f7e,$9r),e(D9,k9r),e(fr,S9r),e(fr,Gt),M(G9,Gt,null),e(Gt,R9r),e(Gt,m7e),e(m7e,P9r),e(Gt,B9r),e(Gt,Rc),e(Rc,I9r),e(Rc,g7e),e(g7e,N9r),e(Rc,q9r),e(Rc,fY),e(fY,j9r),e(Rc,D9r),e(Gt,G9r),M(jC,Gt,null),e(fr,O9r),e(fr,jr),M(O9,jr,null),e(jr,V9r),e(jr,h7e),e(h7e,X9r),e(jr,z9r),e(jr,hn),e(hn,W9r),e(hn,p7e),e(p7e,Q9r),e(hn,H9r),e(hn,_7e),e(_7e,U9r),e(hn,J9r),e(hn,u7e),e(u7e,Y9r),e(hn,K9r),e(jr,Z9r),e(jr,re),e(re,DC),e(DC,b7e),e(b7e,exr),e(DC,oxr),e(DC,mY),e(mY,rxr),e(DC,txr),e(re,axr),e(re,GC),e(GC,v7e),e(v7e,nxr),e(GC,sxr),e(GC,gY),e(gY,lxr),e(GC,ixr),e(re,dxr),e(re,OC),e(OC,F7e),e(F7e,cxr),e(OC,fxr),e(OC,hY),e(hY,mxr),e(OC,gxr),e(re,hxr),e(re,VC),e(VC,T7e),e(T7e,pxr),e(VC,_xr),e(VC,pY),e(pY,uxr),e(VC,bxr),e(re,vxr),e(re,XC),e(XC,M7e),e(M7e,Fxr),e(XC,Txr),e(XC,_Y),e(_Y,Mxr),e(XC,Exr),e(re,Cxr),e(re,zC),e(zC,E7e),e(E7e,wxr),e(zC,Axr),e(zC,uY),e(uY,Lxr),e(zC,yxr),e(re,xxr),e(re,WC),e(WC,C7e),e(C7e,$xr),e(WC,kxr),e(WC,bY),e(bY,Sxr),e(WC,Rxr),e(re,Pxr),e(re,QC),e(QC,w7e),e(w7e,Bxr),e(QC,Ixr),e(QC,vY),e(vY,Nxr),e(QC,qxr),e(re,jxr),e(re,HC),e(HC,A7e),e(A7e,Dxr),e(HC,Gxr),e(HC,FY),e(FY,Oxr),e(HC,Vxr),e(re,Xxr),e(re,UC),e(UC,L7e),e(L7e,zxr),e(UC,Wxr),e(UC,TY),e(TY,Qxr),e(UC,Hxr),e(re,Uxr),e(re,JC),e(JC,y7e),e(y7e,Jxr),e(JC,Yxr),e(JC,MY),e(MY,Kxr),e(JC,Zxr),e(re,e$r),e(re,YC),e(YC,x7e),e(x7e,o$r),e(YC,r$r),e(YC,EY),e(EY,t$r),e(YC,a$r),e(re,n$r),e(re,KC),e(KC,$7e),e($7e,s$r),e(KC,l$r),e(KC,CY),e(CY,i$r),e(KC,d$r),e(re,c$r),e(re,ZC),e(ZC,k7e),e(k7e,f$r),e(ZC,m$r),e(ZC,wY),e(wY,g$r),e(ZC,h$r),e(re,p$r),e(re,e5),e(e5,S7e),e(S7e,_$r),e(e5,u$r),e(e5,AY),e(AY,b$r),e(e5,v$r),e(re,F$r),e(re,o5),e(o5,R7e),e(R7e,T$r),e(o5,M$r),e(o5,LY),e(LY,E$r),e(o5,C$r),e(re,w$r),e(re,r5),e(r5,P7e),e(P7e,A$r),e(r5,L$r),e(r5,yY),e(yY,y$r),e(r5,x$r),e(re,$$r),e(re,t5),e(t5,B7e),e(B7e,k$r),e(t5,S$r),e(t5,xY),e(xY,R$r),e(t5,P$r),e(re,B$r),e(re,a5),e(a5,I7e),e(I7e,I$r),e(a5,N$r),e(a5,$Y),e($Y,q$r),e(a5,j$r),e(re,D$r),e(re,n5),e(n5,N7e),e(N7e,G$r),e(n5,O$r),e(n5,kY),e(kY,V$r),e(n5,X$r),e(re,z$r),e(re,s5),e(s5,q7e),e(q7e,W$r),e(s5,Q$r),e(s5,SY),e(SY,H$r),e(s5,U$r),e(re,J$r),e(re,l5),e(l5,j7e),e(j7e,Y$r),e(l5,K$r),e(l5,RY),e(RY,Z$r),e(l5,ekr),e(re,okr),e(re,i5),e(i5,D7e),e(D7e,rkr),e(i5,tkr),e(i5,PY),e(PY,akr),e(i5,nkr),e(re,skr),e(re,d5),e(d5,G7e),e(G7e,lkr),e(d5,ikr),e(d5,BY),e(BY,dkr),e(d5,ckr),e(re,fkr),e(re,c5),e(c5,O7e),e(O7e,mkr),e(c5,gkr),e(c5,IY),e(IY,hkr),e(c5,pkr),e(re,_kr),e(re,f5),e(f5,V7e),e(V7e,ukr),e(f5,bkr),e(f5,NY),e(NY,vkr),e(f5,Fkr),e(jr,Tkr),M(m5,jr,null),b(f,RDe,u),b(f,Pc,u),e(Pc,g5),e(g5,X7e),M(V9,X7e,null),e(Pc,Mkr),e(Pc,z7e),e(z7e,Ekr),b(f,PDe,u),b(f,mr,u),M(X9,mr,null),e(mr,Ckr),e(mr,Bc),e(Bc,wkr),e(Bc,qY),e(qY,Akr),e(Bc,Lkr),e(Bc,jY),e(jY,ykr),e(Bc,xkr),e(mr,$kr),e(mr,z9),e(z9,kkr),e(z9,W7e),e(W7e,Skr),e(z9,Rkr),e(mr,Pkr),e(mr,Ot),M(W9,Ot,null),e(Ot,Bkr),e(Ot,Q7e),e(Q7e,Ikr),e(Ot,Nkr),e(Ot,Ic),e(Ic,qkr),e(Ic,H7e),e(H7e,jkr),e(Ic,Dkr),e(Ic,DY),e(DY,Gkr),e(Ic,Okr),e(Ot,Vkr),M(h5,Ot,null),e(mr,Xkr),e(mr,Dr),M(Q9,Dr,null),e(Dr,zkr),e(Dr,U7e),e(U7e,Wkr),e(Dr,Qkr),e(Dr,pn),e(pn,Hkr),e(pn,J7e),e(J7e,Ukr),e(pn,Jkr),e(pn,Y7e),e(Y7e,Ykr),e(pn,Kkr),e(pn,K7e),e(K7e,Zkr),e(pn,eSr),e(Dr,oSr),e(Dr,ye),e(ye,p5),e(p5,Z7e),e(Z7e,rSr),e(p5,tSr),e(p5,GY),e(GY,aSr),e(p5,nSr),e(ye,sSr),e(ye,_5),e(_5,eMe),e(eMe,lSr),e(_5,iSr),e(_5,OY),e(OY,dSr),e(_5,cSr),e(ye,fSr),e(ye,u5),e(u5,oMe),e(oMe,mSr),e(u5,gSr),e(u5,VY),e(VY,hSr),e(u5,pSr),e(ye,_Sr),e(ye,b5),e(b5,rMe),e(rMe,uSr),e(b5,bSr),e(b5,XY),e(XY,vSr),e(b5,FSr),e(ye,TSr),e(ye,v5),e(v5,tMe),e(tMe,MSr),e(v5,ESr),e(v5,zY),e(zY,CSr),e(v5,wSr),e(ye,ASr),e(ye,F5),e(F5,aMe),e(aMe,LSr),e(F5,ySr),e(F5,WY),e(WY,xSr),e(F5,$Sr),e(ye,kSr),e(ye,T5),e(T5,nMe),e(nMe,SSr),e(T5,RSr),e(T5,QY),e(QY,PSr),e(T5,BSr),e(ye,ISr),e(ye,M5),e(M5,sMe),e(sMe,NSr),e(M5,qSr),e(M5,HY),e(HY,jSr),e(M5,DSr),e(ye,GSr),e(ye,E5),e(E5,lMe),e(lMe,OSr),e(E5,VSr),e(E5,UY),e(UY,XSr),e(E5,zSr),e(ye,WSr),e(ye,C5),e(C5,iMe),e(iMe,QSr),e(C5,HSr),e(C5,JY),e(JY,USr),e(C5,JSr),e(Dr,YSr),M(w5,Dr,null),b(f,BDe,u),b(f,Nc,u),e(Nc,A5),e(A5,dMe),M(H9,dMe,null),e(Nc,KSr),e(Nc,cMe),e(cMe,ZSr),b(f,IDe,u),b(f,gr,u),M(U9,gr,null),e(gr,eRr),e(gr,qc),e(qc,oRr),e(qc,YY),e(YY,rRr),e(qc,tRr),e(qc,KY),e(KY,aRr),e(qc,nRr),e(gr,sRr),e(gr,J9),e(J9,lRr),e(J9,fMe),e(fMe,iRr),e(J9,dRr),e(gr,cRr),e(gr,Vt),M(Y9,Vt,null),e(Vt,fRr),e(Vt,mMe),e(mMe,mRr),e(Vt,gRr),e(Vt,jc),e(jc,hRr),e(jc,gMe),e(gMe,pRr),e(jc,_Rr),e(jc,ZY),e(ZY,uRr),e(jc,bRr),e(Vt,vRr),M(L5,Vt,null),e(gr,FRr),e(gr,Gr),M(K9,Gr,null),e(Gr,TRr),e(Gr,hMe),e(hMe,MRr),e(Gr,ERr),e(Gr,_n),e(_n,CRr),e(_n,pMe),e(pMe,wRr),e(_n,ARr),e(_n,_Me),e(_Me,LRr),e(_n,yRr),e(_n,uMe),e(uMe,xRr),e(_n,$Rr),e(Gr,kRr),e(Gr,Ee),e(Ee,y5),e(y5,bMe),e(bMe,SRr),e(y5,RRr),e(y5,eK),e(eK,PRr),e(y5,BRr),e(Ee,IRr),e(Ee,x5),e(x5,vMe),e(vMe,NRr),e(x5,qRr),e(x5,oK),e(oK,jRr),e(x5,DRr),e(Ee,GRr),e(Ee,$5),e($5,FMe),e(FMe,ORr),e($5,VRr),e($5,rK),e(rK,XRr),e($5,zRr),e(Ee,WRr),e(Ee,k5),e(k5,TMe),e(TMe,QRr),e(k5,HRr),e(k5,tK),e(tK,URr),e(k5,JRr),e(Ee,YRr),e(Ee,S5),e(S5,MMe),e(MMe,KRr),e(S5,ZRr),e(S5,aK),e(aK,ePr),e(S5,oPr),e(Ee,rPr),e(Ee,R5),e(R5,EMe),e(EMe,tPr),e(R5,aPr),e(R5,nK),e(nK,nPr),e(R5,sPr),e(Ee,lPr),e(Ee,P5),e(P5,CMe),e(CMe,iPr),e(P5,dPr),e(P5,sK),e(sK,cPr),e(P5,fPr),e(Ee,mPr),e(Ee,B5),e(B5,wMe),e(wMe,gPr),e(B5,hPr),e(B5,lK),e(lK,pPr),e(B5,_Pr),e(Ee,uPr),e(Ee,I5),e(I5,AMe),e(AMe,bPr),e(I5,vPr),e(I5,iK),e(iK,FPr),e(I5,TPr),e(Ee,MPr),e(Ee,N5),e(N5,LMe),e(LMe,EPr),e(N5,CPr),e(N5,dK),e(dK,wPr),e(N5,APr),e(Ee,LPr),e(Ee,q5),e(q5,yMe),e(yMe,yPr),e(q5,xPr),e(q5,cK),e(cK,$Pr),e(q5,kPr),e(Ee,SPr),e(Ee,j5),e(j5,xMe),e(xMe,RPr),e(j5,PPr),e(j5,fK),e(fK,BPr),e(j5,IPr),e(Gr,NPr),M(D5,Gr,null),b(f,NDe,u),b(f,Dc,u),e(Dc,G5),e(G5,$Me),M(Z9,$Me,null),e(Dc,qPr),e(Dc,kMe),e(kMe,jPr),b(f,qDe,u),b(f,hr,u),M(ex,hr,null),e(hr,DPr),e(hr,Gc),e(Gc,GPr),e(Gc,mK),e(mK,OPr),e(Gc,VPr),e(Gc,gK),e(gK,XPr),e(Gc,zPr),e(hr,WPr),e(hr,ox),e(ox,QPr),e(ox,SMe),e(SMe,HPr),e(ox,UPr),e(hr,JPr),e(hr,Xt),M(rx,Xt,null),e(Xt,YPr),e(Xt,RMe),e(RMe,KPr),e(Xt,ZPr),e(Xt,Oc),e(Oc,eBr),e(Oc,PMe),e(PMe,oBr),e(Oc,rBr),e(Oc,hK),e(hK,tBr),e(Oc,aBr),e(Xt,nBr),M(O5,Xt,null),e(hr,sBr),e(hr,Or),M(tx,Or,null),e(Or,lBr),e(Or,BMe),e(BMe,iBr),e(Or,dBr),e(Or,un),e(un,cBr),e(un,IMe),e(IMe,fBr),e(un,mBr),e(un,NMe),e(NMe,gBr),e(un,hBr),e(un,qMe),e(qMe,pBr),e(un,_Br),e(Or,uBr),e(Or,xe),e(xe,V5),e(V5,jMe),e(jMe,bBr),e(V5,vBr),e(V5,pK),e(pK,FBr),e(V5,TBr),e(xe,MBr),e(xe,X5),e(X5,DMe),e(DMe,EBr),e(X5,CBr),e(X5,_K),e(_K,wBr),e(X5,ABr),e(xe,LBr),e(xe,z5),e(z5,GMe),e(GMe,yBr),e(z5,xBr),e(z5,uK),e(uK,$Br),e(z5,kBr),e(xe,SBr),e(xe,W5),e(W5,OMe),e(OMe,RBr),e(W5,PBr),e(W5,bK),e(bK,BBr),e(W5,IBr),e(xe,NBr),e(xe,Q5),e(Q5,VMe),e(VMe,qBr),e(Q5,jBr),e(Q5,vK),e(vK,DBr),e(Q5,GBr),e(xe,OBr),e(xe,H5),e(H5,XMe),e(XMe,VBr),e(H5,XBr),e(H5,FK),e(FK,zBr),e(H5,WBr),e(xe,QBr),e(xe,U5),e(U5,zMe),e(zMe,HBr),e(U5,UBr),e(U5,TK),e(TK,JBr),e(U5,YBr),e(xe,KBr),e(xe,J5),e(J5,WMe),e(WMe,ZBr),e(J5,eIr),e(J5,MK),e(MK,oIr),e(J5,rIr),e(xe,tIr),e(xe,Y5),e(Y5,QMe),e(QMe,aIr),e(Y5,nIr),e(Y5,EK),e(EK,sIr),e(Y5,lIr),e(xe,iIr),e(xe,K5),e(K5,HMe),e(HMe,dIr),e(K5,cIr),e(K5,CK),e(CK,fIr),e(K5,mIr),e(Or,gIr),M(Z5,Or,null),b(f,jDe,u),b(f,Vc,u),e(Vc,e0),e(e0,UMe),M(ax,UMe,null),e(Vc,hIr),e(Vc,JMe),e(JMe,pIr),b(f,DDe,u),b(f,pr,u),M(nx,pr,null),e(pr,_Ir),e(pr,Xc),e(Xc,uIr),e(Xc,wK),e(wK,bIr),e(Xc,vIr),e(Xc,AK),e(AK,FIr),e(Xc,TIr),e(pr,MIr),e(pr,sx),e(sx,EIr),e(sx,YMe),e(YMe,CIr),e(sx,wIr),e(pr,AIr),e(pr,zt),M(lx,zt,null),e(zt,LIr),e(zt,KMe),e(KMe,yIr),e(zt,xIr),e(zt,zc),e(zc,$Ir),e(zc,ZMe),e(ZMe,kIr),e(zc,SIr),e(zc,LK),e(LK,RIr),e(zc,PIr),e(zt,BIr),M(o0,zt,null),e(pr,IIr),e(pr,Vr),M(ix,Vr,null),e(Vr,NIr),e(Vr,eEe),e(eEe,qIr),e(Vr,jIr),e(Vr,bn),e(bn,DIr),e(bn,oEe),e(oEe,GIr),e(bn,OIr),e(bn,rEe),e(rEe,VIr),e(bn,XIr),e(bn,tEe),e(tEe,zIr),e(bn,WIr),e(Vr,QIr),e(Vr,Pe),e(Pe,r0),e(r0,aEe),e(aEe,HIr),e(r0,UIr),e(r0,yK),e(yK,JIr),e(r0,YIr),e(Pe,KIr),e(Pe,t0),e(t0,nEe),e(nEe,ZIr),e(t0,eNr),e(t0,xK),e(xK,oNr),e(t0,rNr),e(Pe,tNr),e(Pe,a0),e(a0,sEe),e(sEe,aNr),e(a0,nNr),e(a0,$K),e($K,sNr),e(a0,lNr),e(Pe,iNr),e(Pe,n0),e(n0,lEe),e(lEe,dNr),e(n0,cNr),e(n0,kK),e(kK,fNr),e(n0,mNr),e(Pe,gNr),e(Pe,s0),e(s0,iEe),e(iEe,hNr),e(s0,pNr),e(s0,SK),e(SK,_Nr),e(s0,uNr),e(Pe,bNr),e(Pe,l0),e(l0,dEe),e(dEe,vNr),e(l0,FNr),e(l0,RK),e(RK,TNr),e(l0,MNr),e(Pe,ENr),e(Pe,i0),e(i0,cEe),e(cEe,CNr),e(i0,wNr),e(i0,PK),e(PK,ANr),e(i0,LNr),e(Pe,yNr),e(Pe,d0),e(d0,fEe),e(fEe,xNr),e(d0,$Nr),e(d0,BK),e(BK,kNr),e(d0,SNr),e(Pe,RNr),e(Pe,c0),e(c0,mEe),e(mEe,PNr),e(c0,BNr),e(c0,IK),e(IK,INr),e(c0,NNr),e(Vr,qNr),M(f0,Vr,null),b(f,GDe,u),b(f,Wc,u),e(Wc,m0),e(m0,gEe),M(dx,gEe,null),e(Wc,jNr),e(Wc,hEe),e(hEe,DNr),b(f,ODe,u),b(f,_r,u),M(cx,_r,null),e(_r,GNr),e(_r,Qc),e(Qc,ONr),e(Qc,NK),e(NK,VNr),e(Qc,XNr),e(Qc,qK),e(qK,zNr),e(Qc,WNr),e(_r,QNr),e(_r,fx),e(fx,HNr),e(fx,pEe),e(pEe,UNr),e(fx,JNr),e(_r,YNr),e(_r,Wt),M(mx,Wt,null),e(Wt,KNr),e(Wt,_Ee),e(_Ee,ZNr),e(Wt,eqr),e(Wt,Hc),e(Hc,oqr),e(Hc,uEe),e(uEe,rqr),e(Hc,tqr),e(Hc,jK),e(jK,aqr),e(Hc,nqr),e(Wt,sqr),M(g0,Wt,null),e(_r,lqr),e(_r,Xr),M(gx,Xr,null),e(Xr,iqr),e(Xr,bEe),e(bEe,dqr),e(Xr,cqr),e(Xr,vn),e(vn,fqr),e(vn,vEe),e(vEe,mqr),e(vn,gqr),e(vn,FEe),e(FEe,hqr),e(vn,pqr),e(vn,TEe),e(TEe,_qr),e(vn,uqr),e(Xr,bqr),e(Xr,$e),e($e,h0),e(h0,MEe),e(MEe,vqr),e(h0,Fqr),e(h0,DK),e(DK,Tqr),e(h0,Mqr),e($e,Eqr),e($e,p0),e(p0,EEe),e(EEe,Cqr),e(p0,wqr),e(p0,GK),e(GK,Aqr),e(p0,Lqr),e($e,yqr),e($e,_0),e(_0,CEe),e(CEe,xqr),e(_0,$qr),e(_0,OK),e(OK,kqr),e(_0,Sqr),e($e,Rqr),e($e,u0),e(u0,wEe),e(wEe,Pqr),e(u0,Bqr),e(u0,VK),e(VK,Iqr),e(u0,Nqr),e($e,qqr),e($e,b0),e(b0,AEe),e(AEe,jqr),e(b0,Dqr),e(b0,XK),e(XK,Gqr),e(b0,Oqr),e($e,Vqr),e($e,v0),e(v0,LEe),e(LEe,Xqr),e(v0,zqr),e(v0,zK),e(zK,Wqr),e(v0,Qqr),e($e,Hqr),e($e,F0),e(F0,yEe),e(yEe,Uqr),e(F0,Jqr),e(F0,WK),e(WK,Yqr),e(F0,Kqr),e($e,Zqr),e($e,T0),e(T0,xEe),e(xEe,ejr),e(T0,ojr),e(T0,QK),e(QK,rjr),e(T0,tjr),e($e,ajr),e($e,M0),e(M0,$Ee),e($Ee,njr),e(M0,sjr),e(M0,HK),e(HK,ljr),e(M0,ijr),e($e,djr),e($e,E0),e(E0,kEe),e(kEe,cjr),e(E0,fjr),e(E0,UK),e(UK,mjr),e(E0,gjr),e(Xr,hjr),M(C0,Xr,null),b(f,VDe,u),b(f,Uc,u),e(Uc,w0),e(w0,SEe),M(hx,SEe,null),e(Uc,pjr),e(Uc,REe),e(REe,_jr),b(f,XDe,u),b(f,ur,u),M(px,ur,null),e(ur,ujr),e(ur,Jc),e(Jc,bjr),e(Jc,JK),e(JK,vjr),e(Jc,Fjr),e(Jc,YK),e(YK,Tjr),e(Jc,Mjr),e(ur,Ejr),e(ur,_x),e(_x,Cjr),e(_x,PEe),e(PEe,wjr),e(_x,Ajr),e(ur,Ljr),e(ur,Qt),M(ux,Qt,null),e(Qt,yjr),e(Qt,BEe),e(BEe,xjr),e(Qt,$jr),e(Qt,Yc),e(Yc,kjr),e(Yc,IEe),e(IEe,Sjr),e(Yc,Rjr),e(Yc,KK),e(KK,Pjr),e(Yc,Bjr),e(Qt,Ijr),M(A0,Qt,null),e(ur,Njr),e(ur,zr),M(bx,zr,null),e(zr,qjr),e(zr,NEe),e(NEe,jjr),e(zr,Djr),e(zr,Fn),e(Fn,Gjr),e(Fn,qEe),e(qEe,Ojr),e(Fn,Vjr),e(Fn,jEe),e(jEe,Xjr),e(Fn,zjr),e(Fn,DEe),e(DEe,Wjr),e(Fn,Qjr),e(zr,Hjr),e(zr,ke),e(ke,L0),e(L0,GEe),e(GEe,Ujr),e(L0,Jjr),e(L0,ZK),e(ZK,Yjr),e(L0,Kjr),e(ke,Zjr),e(ke,y0),e(y0,OEe),e(OEe,eDr),e(y0,oDr),e(y0,eZ),e(eZ,rDr),e(y0,tDr),e(ke,aDr),e(ke,x0),e(x0,VEe),e(VEe,nDr),e(x0,sDr),e(x0,oZ),e(oZ,lDr),e(x0,iDr),e(ke,dDr),e(ke,$0),e($0,XEe),e(XEe,cDr),e($0,fDr),e($0,rZ),e(rZ,mDr),e($0,gDr),e(ke,hDr),e(ke,k0),e(k0,zEe),e(zEe,pDr),e(k0,_Dr),e(k0,tZ),e(tZ,uDr),e(k0,bDr),e(ke,vDr),e(ke,S0),e(S0,WEe),e(WEe,FDr),e(S0,TDr),e(S0,aZ),e(aZ,MDr),e(S0,EDr),e(ke,CDr),e(ke,R0),e(R0,QEe),e(QEe,wDr),e(R0,ADr),e(R0,nZ),e(nZ,LDr),e(R0,yDr),e(ke,xDr),e(ke,P0),e(P0,HEe),e(HEe,$Dr),e(P0,kDr),e(P0,sZ),e(sZ,SDr),e(P0,RDr),e(ke,PDr),e(ke,B0),e(B0,UEe),e(UEe,BDr),e(B0,IDr),e(B0,lZ),e(lZ,NDr),e(B0,qDr),e(ke,jDr),e(ke,I0),e(I0,JEe),e(JEe,DDr),e(I0,GDr),e(I0,iZ),e(iZ,ODr),e(I0,VDr),e(zr,XDr),M(N0,zr,null),b(f,zDe,u),b(f,Kc,u),e(Kc,q0),e(q0,YEe),M(vx,YEe,null),e(Kc,zDr),e(Kc,KEe),e(KEe,WDr),b(f,WDe,u),b(f,br,u),M(Fx,br,null),e(br,QDr),e(br,Zc),e(Zc,HDr),e(Zc,dZ),e(dZ,UDr),e(Zc,JDr),e(Zc,cZ),e(cZ,YDr),e(Zc,KDr),e(br,ZDr),e(br,Tx),e(Tx,eGr),e(Tx,ZEe),e(ZEe,oGr),e(Tx,rGr),e(br,tGr),e(br,Ht),M(Mx,Ht,null),e(Ht,aGr),e(Ht,eCe),e(eCe,nGr),e(Ht,sGr),e(Ht,ef),e(ef,lGr),e(ef,oCe),e(oCe,iGr),e(ef,dGr),e(ef,fZ),e(fZ,cGr),e(ef,fGr),e(Ht,mGr),M(j0,Ht,null),e(br,gGr),e(br,Wr),M(Ex,Wr,null),e(Wr,hGr),e(Wr,rCe),e(rCe,pGr),e(Wr,_Gr),e(Wr,Tn),e(Tn,uGr),e(Tn,tCe),e(tCe,bGr),e(Tn,vGr),e(Tn,aCe),e(aCe,FGr),e(Tn,TGr),e(Tn,nCe),e(nCe,MGr),e(Tn,EGr),e(Wr,CGr),e(Wr,Ge),e(Ge,D0),e(D0,sCe),e(sCe,wGr),e(D0,AGr),e(D0,mZ),e(mZ,LGr),e(D0,yGr),e(Ge,xGr),e(Ge,G0),e(G0,lCe),e(lCe,$Gr),e(G0,kGr),e(G0,gZ),e(gZ,SGr),e(G0,RGr),e(Ge,PGr),e(Ge,O0),e(O0,iCe),e(iCe,BGr),e(O0,IGr),e(O0,hZ),e(hZ,NGr),e(O0,qGr),e(Ge,jGr),e(Ge,V0),e(V0,dCe),e(dCe,DGr),e(V0,GGr),e(V0,pZ),e(pZ,OGr),e(V0,VGr),e(Ge,XGr),e(Ge,X0),e(X0,cCe),e(cCe,zGr),e(X0,WGr),e(X0,_Z),e(_Z,QGr),e(X0,HGr),e(Ge,UGr),e(Ge,z0),e(z0,fCe),e(fCe,JGr),e(z0,YGr),e(z0,uZ),e(uZ,KGr),e(z0,ZGr),e(Ge,eOr),e(Ge,W0),e(W0,mCe),e(mCe,oOr),e(W0,rOr),e(W0,bZ),e(bZ,tOr),e(W0,aOr),e(Ge,nOr),e(Ge,Q0),e(Q0,gCe),e(gCe,sOr),e(Q0,lOr),e(Q0,vZ),e(vZ,iOr),e(Q0,dOr),e(Wr,cOr),M(H0,Wr,null),b(f,QDe,u),b(f,of,u),e(of,U0),e(U0,hCe),M(Cx,hCe,null),e(of,fOr),e(of,pCe),e(pCe,mOr),b(f,HDe,u),b(f,vr,u),M(wx,vr,null),e(vr,gOr),e(vr,rf),e(rf,hOr),e(rf,FZ),e(FZ,pOr),e(rf,_Or),e(rf,TZ),e(TZ,uOr),e(rf,bOr),e(vr,vOr),e(vr,Ax),e(Ax,FOr),e(Ax,_Ce),e(_Ce,TOr),e(Ax,MOr),e(vr,EOr),e(vr,Ut),M(Lx,Ut,null),e(Ut,COr),e(Ut,uCe),e(uCe,wOr),e(Ut,AOr),e(Ut,tf),e(tf,LOr),e(tf,bCe),e(bCe,yOr),e(tf,xOr),e(tf,MZ),e(MZ,$Or),e(tf,kOr),e(Ut,SOr),M(J0,Ut,null),e(vr,ROr),e(vr,Qr),M(yx,Qr,null),e(Qr,POr),e(Qr,vCe),e(vCe,BOr),e(Qr,IOr),e(Qr,Mn),e(Mn,NOr),e(Mn,FCe),e(FCe,qOr),e(Mn,jOr),e(Mn,TCe),e(TCe,DOr),e(Mn,GOr),e(Mn,MCe),e(MCe,OOr),e(Mn,VOr),e(Qr,XOr),e(Qr,Oe),e(Oe,Y0),e(Y0,ECe),e(ECe,zOr),e(Y0,WOr),e(Y0,EZ),e(EZ,QOr),e(Y0,HOr),e(Oe,UOr),e(Oe,K0),e(K0,CCe),e(CCe,JOr),e(K0,YOr),e(K0,CZ),e(CZ,KOr),e(K0,ZOr),e(Oe,eVr),e(Oe,Z0),e(Z0,wCe),e(wCe,oVr),e(Z0,rVr),e(Z0,wZ),e(wZ,tVr),e(Z0,aVr),e(Oe,nVr),e(Oe,ew),e(ew,ACe),e(ACe,sVr),e(ew,lVr),e(ew,AZ),e(AZ,iVr),e(ew,dVr),e(Oe,cVr),e(Oe,ow),e(ow,LCe),e(LCe,fVr),e(ow,mVr),e(ow,LZ),e(LZ,gVr),e(ow,hVr),e(Oe,pVr),e(Oe,rw),e(rw,yCe),e(yCe,_Vr),e(rw,uVr),e(rw,yZ),e(yZ,bVr),e(rw,vVr),e(Oe,FVr),e(Oe,tw),e(tw,xCe),e(xCe,TVr),e(tw,MVr),e(tw,xZ),e(xZ,EVr),e(tw,CVr),e(Oe,wVr),e(Oe,aw),e(aw,$Ce),e($Ce,AVr),e(aw,LVr),e(aw,$Z),e($Z,yVr),e(aw,xVr),e(Qr,$Vr),M(nw,Qr,null),b(f,UDe,u),b(f,af,u),e(af,sw),e(sw,kCe),M(xx,kCe,null),e(af,kVr),e(af,SCe),e(SCe,SVr),b(f,JDe,u),b(f,Fr,u),M($x,Fr,null),e(Fr,RVr),e(Fr,nf),e(nf,PVr),e(nf,kZ),e(kZ,BVr),e(nf,IVr),e(nf,SZ),e(SZ,NVr),e(nf,qVr),e(Fr,jVr),e(Fr,kx),e(kx,DVr),e(kx,RCe),e(RCe,GVr),e(kx,OVr),e(Fr,VVr),e(Fr,Jt),M(Sx,Jt,null),e(Jt,XVr),e(Jt,PCe),e(PCe,zVr),e(Jt,WVr),e(Jt,sf),e(sf,QVr),e(sf,BCe),e(BCe,HVr),e(sf,UVr),e(sf,RZ),e(RZ,JVr),e(sf,YVr),e(Jt,KVr),M(lw,Jt,null),e(Fr,ZVr),e(Fr,Hr),M(Rx,Hr,null),e(Hr,eXr),e(Hr,ICe),e(ICe,oXr),e(Hr,rXr),e(Hr,En),e(En,tXr),e(En,NCe),e(NCe,aXr),e(En,nXr),e(En,qCe),e(qCe,sXr),e(En,lXr),e(En,jCe),e(jCe,iXr),e(En,dXr),e(Hr,cXr),e(Hr,DCe),e(DCe,iw),e(iw,GCe),e(GCe,fXr),e(iw,mXr),e(iw,PZ),e(PZ,gXr),e(iw,hXr),e(Hr,pXr),M(dw,Hr,null),b(f,YDe,u),b(f,lf,u),e(lf,cw),e(cw,OCe),M(Px,OCe,null),e(lf,_Xr),e(lf,VCe),e(VCe,uXr),b(f,KDe,u),b(f,Tr,u),M(Bx,Tr,null),e(Tr,bXr),e(Tr,df),e(df,vXr),e(df,BZ),e(BZ,FXr),e(df,TXr),e(df,IZ),e(IZ,MXr),e(df,EXr),e(Tr,CXr),e(Tr,Ix),e(Ix,wXr),e(Ix,XCe),e(XCe,AXr),e(Ix,LXr),e(Tr,yXr),e(Tr,Yt),M(Nx,Yt,null),e(Yt,xXr),e(Yt,zCe),e(zCe,$Xr),e(Yt,kXr),e(Yt,cf),e(cf,SXr),e(cf,WCe),e(WCe,RXr),e(cf,PXr),e(cf,NZ),e(NZ,BXr),e(cf,IXr),e(Yt,NXr),M(fw,Yt,null),e(Tr,qXr),e(Tr,Ur),M(qx,Ur,null),e(Ur,jXr),e(Ur,QCe),e(QCe,DXr),e(Ur,GXr),e(Ur,Cn),e(Cn,OXr),e(Cn,HCe),e(HCe,VXr),e(Cn,XXr),e(Cn,UCe),e(UCe,zXr),e(Cn,WXr),e(Cn,JCe),e(JCe,QXr),e(Cn,HXr),e(Ur,UXr),e(Ur,jx),e(jx,mw),e(mw,YCe),e(YCe,JXr),e(mw,YXr),e(mw,qZ),e(qZ,KXr),e(mw,ZXr),e(jx,ezr),e(jx,gw),e(gw,KCe),e(KCe,ozr),e(gw,rzr),e(gw,jZ),e(jZ,tzr),e(gw,azr),e(Ur,nzr),M(hw,Ur,null),b(f,ZDe,u),b(f,ff,u),e(ff,pw),e(pw,ZCe),M(Dx,ZCe,null),e(ff,szr),e(ff,e5e),e(e5e,lzr),b(f,eGe,u),b(f,Mr,u),M(Gx,Mr,null),e(Mr,izr),e(Mr,mf),e(mf,dzr),e(mf,DZ),e(DZ,czr),e(mf,fzr),e(mf,GZ),e(GZ,mzr),e(mf,gzr),e(Mr,hzr),e(Mr,Ox),e(Ox,pzr),e(Ox,o5e),e(o5e,_zr),e(Ox,uzr),e(Mr,bzr),e(Mr,Kt),M(Vx,Kt,null),e(Kt,vzr),e(Kt,r5e),e(r5e,Fzr),e(Kt,Tzr),e(Kt,gf),e(gf,Mzr),e(gf,t5e),e(t5e,Ezr),e(gf,Czr),e(gf,OZ),e(OZ,wzr),e(gf,Azr),e(Kt,Lzr),M(_w,Kt,null),e(Mr,yzr),e(Mr,Jr),M(Xx,Jr,null),e(Jr,xzr),e(Jr,a5e),e(a5e,$zr),e(Jr,kzr),e(Jr,wn),e(wn,Szr),e(wn,n5e),e(n5e,Rzr),e(wn,Pzr),e(wn,s5e),e(s5e,Bzr),e(wn,Izr),e(wn,l5e),e(l5e,Nzr),e(wn,qzr),e(Jr,jzr),e(Jr,i5e),e(i5e,uw),e(uw,d5e),e(d5e,Dzr),e(uw,Gzr),e(uw,VZ),e(VZ,Ozr),e(uw,Vzr),e(Jr,Xzr),M(bw,Jr,null),oGe=!0},p(f,[u]){const zx={};u&2&&(zx.$$scope={dirty:u,ctx:f}),Mf.$set(zx);const c5e={};u&2&&(c5e.$$scope={dirty:u,ctx:f}),Lg.$set(c5e);const f5e={};u&2&&(f5e.$$scope={dirty:u,ctx:f}),ih.$set(f5e);const m5e={};u&2&&(m5e.$$scope={dirty:u,ctx:f}),Gh.$set(m5e);const Wx={};u&2&&(Wx.$$scope={dirty:u,ctx:f}),Oh.$set(Wx);const g5e={};u&2&&(g5e.$$scope={dirty:u,ctx:f}),ip.$set(g5e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),dp.$set(An);const h5e={};u&2&&(h5e.$$scope={dirty:u,ctx:f}),mp.$set(h5e);const p5e={};u&2&&(p5e.$$scope={dirty:u,ctx:f}),du.$set(p5e);const _5e={};u&2&&(_5e.$$scope={dirty:u,ctx:f}),fu.$set(_5e);const Qx={};u&2&&(Qx.$$scope={dirty:u,ctx:f}),o4.$set(Qx);const u5e={};u&2&&(u5e.$$scope={dirty:u,ctx:f}),t4.$set(u5e);const Hx={};u&2&&(Hx.$$scope={dirty:u,ctx:f}),V4.$set(Hx);const b5e={};u&2&&(b5e.$$scope={dirty:u,ctx:f}),z4.$set(b5e);const Ux={};u&2&&(Ux.$$scope={dirty:u,ctx:f}),x1.$set(Ux);const v5e={};u&2&&(v5e.$$scope={dirty:u,ctx:f}),k1.$set(v5e);const F5e={};u&2&&(F5e.$$scope={dirty:u,ctx:f}),U1.$set(F5e);const T5e={};u&2&&(T5e.$$scope={dirty:u,ctx:f}),Y1.$set(T5e);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),Wb.$set(hf);const M5e={};u&2&&(M5e.$$scope={dirty:u,ctx:f}),Hb.$set(M5e);const E5e={};u&2&&(E5e.$$scope={dirty:u,ctx:f}),w2.$set(E5e);const C5e={};u&2&&(C5e.$$scope={dirty:u,ctx:f}),L2.$set(C5e);const Jx={};u&2&&(Jx.$$scope={dirty:u,ctx:f}),P2.$set(Jx);const w5e={};u&2&&(w5e.$$scope={dirty:u,ctx:f}),I2.$set(w5e);const A5e={};u&2&&(A5e.$$scope={dirty:u,ctx:f}),bv.$set(A5e);const L5e={};u&2&&(L5e.$$scope={dirty:u,ctx:f}),Fv.$set(L5e);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),i3.$set(et);const Yx={};u&2&&(Yx.$$scope={dirty:u,ctx:f}),c3.$set(Yx);const y5e={};u&2&&(y5e.$$scope={dirty:u,ctx:f}),g3.$set(y5e);const Kx={};u&2&&(Kx.$$scope={dirty:u,ctx:f}),p3.$set(Kx);const x5e={};u&2&&(x5e.$$scope={dirty:u,ctx:f}),x3.$set(x5e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),k3.$set(ot);const $5e={};u&2&&($5e.$$scope={dirty:u,ctx:f}),P3.$set($5e);const pf={};u&2&&(pf.$$scope={dirty:u,ctx:f}),I3.$set(pf);const k5e={};u&2&&(k5e.$$scope={dirty:u,ctx:f}),Q3.$set(k5e);const S5e={};u&2&&(S5e.$$scope={dirty:u,ctx:f}),U3.$set(S5e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),rF.$set(L);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),aF.$set(vw);const R5e={};u&2&&(R5e.$$scope={dirty:u,ctx:f}),pF.$set(R5e);const P5e={};u&2&&(P5e.$$scope={dirty:u,ctx:f}),uF.$set(P5e);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),TF.$set(Fw);const B5e={};u&2&&(B5e.$$scope={dirty:u,ctx:f}),EF.$set(B5e);const I5e={};u&2&&(I5e.$$scope={dirty:u,ctx:f}),$F.$set(I5e);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),SF.$set(Tw);const N5e={};u&2&&(N5e.$$scope={dirty:u,ctx:f}),NF.$set(N5e);const q5e={};u&2&&(q5e.$$scope={dirty:u,ctx:f}),jF.$set(q5e);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),VF.$set(Mw);const j5e={};u&2&&(j5e.$$scope={dirty:u,ctx:f}),zF.$set(j5e);const D5e={};u&2&&(D5e.$$scope={dirty:u,ctx:f}),HF.$set(D5e);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),JF.$set(Ew);const G5e={};u&2&&(G5e.$$scope={dirty:u,ctx:f}),rT.$set(G5e);const O5e={};u&2&&(O5e.$$scope={dirty:u,ctx:f}),aT.$set(O5e);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),lT.$set(Cw);const V5e={};u&2&&(V5e.$$scope={dirty:u,ctx:f}),dT.$set(V5e);const X5e={};u&2&&(X5e.$$scope={dirty:u,ctx:f}),r7.$set(X5e);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),a7.$set(ww);const z5e={};u&2&&(z5e.$$scope={dirty:u,ctx:f}),y7.$set(z5e);const W5e={};u&2&&(W5e.$$scope={dirty:u,ctx:f}),$7.$set(W5e);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),X7.$set(Aw);const Q5e={};u&2&&(Q5e.$$scope={dirty:u,ctx:f}),W7.$set(Q5e);const H5e={};u&2&&(H5e.$$scope={dirty:u,ctx:f}),Y7.$set(H5e);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),Z7.$set(Lw);const U5e={};u&2&&(U5e.$$scope={dirty:u,ctx:f}),FM.$set(U5e);const J5e={};u&2&&(J5e.$$scope={dirty:u,ctx:f}),MM.$set(J5e);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),RM.$set(yw);const Y5e={};u&2&&(Y5e.$$scope={dirty:u,ctx:f}),BM.$set(Y5e);const K5e={};u&2&&(K5e.$$scope={dirty:u,ctx:f}),iE.$set(K5e);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),cE.$set(xw);const Z5e={};u&2&&(Z5e.$$scope={dirty:u,ctx:f}),yE.$set(Z5e);const e0e={};u&2&&(e0e.$$scope={dirty:u,ctx:f}),$E.$set(e0e);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),RE.$set($w);const o0e={};u&2&&(o0e.$$scope={dirty:u,ctx:f}),BE.$set(o0e);const r0e={};u&2&&(r0e.$$scope={dirty:u,ctx:f}),NE.$set(r0e);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),jE.$set(kw);const t0e={};u&2&&(t0e.$$scope={dirty:u,ctx:f}),sC.$set(t0e);const a0e={};u&2&&(a0e.$$scope={dirty:u,ctx:f}),iC.$set(a0e);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),xC.$set(Sw);const n0e={};u&2&&(n0e.$$scope={dirty:u,ctx:f}),kC.$set(n0e);const s0e={};u&2&&(s0e.$$scope={dirty:u,ctx:f}),RC.$set(s0e);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),BC.$set(Rw);const l0e={};u&2&&(l0e.$$scope={dirty:u,ctx:f}),NC.$set(l0e);const i0e={};u&2&&(i0e.$$scope={dirty:u,ctx:f}),jC.$set(i0e);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),m5.$set(Pw);const d0e={};u&2&&(d0e.$$scope={dirty:u,ctx:f}),h5.$set(d0e);const c0e={};u&2&&(c0e.$$scope={dirty:u,ctx:f}),w5.$set(c0e);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),L5.$set(Bw);const f0e={};u&2&&(f0e.$$scope={dirty:u,ctx:f}),D5.$set(f0e);const m0e={};u&2&&(m0e.$$scope={dirty:u,ctx:f}),O5.$set(m0e);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),Z5.$set(Iw);const g0e={};u&2&&(g0e.$$scope={dirty:u,ctx:f}),o0.$set(g0e);const h0e={};u&2&&(h0e.$$scope={dirty:u,ctx:f}),f0.$set(h0e);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),g0.$set(Nw);const p0e={};u&2&&(p0e.$$scope={dirty:u,ctx:f}),C0.$set(p0e);const _0e={};u&2&&(_0e.$$scope={dirty:u,ctx:f}),A0.$set(_0e);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),N0.$set(qw);const u0e={};u&2&&(u0e.$$scope={dirty:u,ctx:f}),j0.$set(u0e);const b0e={};u&2&&(b0e.$$scope={dirty:u,ctx:f}),H0.$set(b0e);const jw={};u&2&&(jw.$$scope={dirty:u,ctx:f}),J0.$set(jw);const v0e={};u&2&&(v0e.$$scope={dirty:u,ctx:f}),nw.$set(v0e);const F0e={};u&2&&(F0e.$$scope={dirty:u,ctx:f}),lw.$set(F0e);const Dw={};u&2&&(Dw.$$scope={dirty:u,ctx:f}),dw.$set(Dw);const T0e={};u&2&&(T0e.$$scope={dirty:u,ctx:f}),fw.$set(T0e);const M0e={};u&2&&(M0e.$$scope={dirty:u,ctx:f}),hw.$set(M0e);const Gw={};u&2&&(Gw.$$scope={dirty:u,ctx:f}),_w.$set(Gw);const E0e={};u&2&&(E0e.$$scope={dirty:u,ctx:f}),bw.$set(E0e)},i(f){oGe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(D6.$$.fragment,f),E(G6.$$.fragment,f),E(Mf.$$.fragment,f),E(O6.$$.fragment,f),E(V6.$$.fragment,f),E(W6.$$.fragment,f),E(Lg.$$.fragment,f),E(Q6.$$.fragment,f),E(H6.$$.fragment,f),E(U6.$$.fragment,f),E(K6.$$.fragment,f),E(ih.$$.fragment,f),E(Z6.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(aL.$$.fragment,f),E(Gh.$$.fragment,f),E(Oh.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(cL.$$.fragment,f),E(ip.$$.fragment,f),E(dp.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(mp.$$.fragment,f),E(_L.$$.fragment,f),E(du.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(fu.$$.fragment,f),E(TL.$$.fragment,f),E(o4.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(t4.$$.fragment,f),E(AL.$$.fragment,f),E(V4.$$.fragment,f),E(LL.$$.fragment,f),E(yL.$$.fragment,f),E($L.$$.fragment,f),E(z4.$$.fragment,f),E(kL.$$.fragment,f),E(x1.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(k1.$$.fragment,f),E(IL.$$.fragment,f),E(U1.$$.fragment,f),E(NL.$$.fragment,f),E(qL.$$.fragment,f),E(DL.$$.fragment,f),E(Y1.$$.fragment,f),E(GL.$$.fragment,f),E(Wb.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(Hb.$$.fragment,f),E(WL.$$.fragment,f),E(w2.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(L2.$$.fragment,f),E(YL.$$.fragment,f),E(P2.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(oy.$$.fragment,f),E(I2.$$.fragment,f),E(ry.$$.fragment,f),E(bv.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(Fv.$$.fragment,f),E(ly.$$.fragment,f),E(i3.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(c3.$$.fragment,f),E(my.$$.fragment,f),E(g3.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(_y.$$.fragment,f),E(p3.$$.fragment,f),E(uy.$$.fragment,f),E(x3.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(k3.$$.fragment,f),E(My.$$.fragment,f),E(P3.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(I3.$$.fragment,f),E(Ly.$$.fragment,f),E(Q3.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(U3.$$.fragment,f),E(Sy.$$.fragment,f),E(rF.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(aF.$$.fragment,f),E(Ny.$$.fragment,f),E(pF.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(uF.$$.fragment,f),E(Oy.$$.fragment,f),E(TF.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(EF.$$.fragment,f),E(Hy.$$.fragment,f),E($F.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(SF.$$.fragment,f),E(Zy.$$.fragment,f),E(NF.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(jF.$$.fragment,f),E(a8.$$.fragment,f),E(VF.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(zF.$$.fragment,f),E(c8.$$.fragment,f),E(HF.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(JF.$$.fragment,f),E(p8.$$.fragment,f),E(rT.$$.fragment,f),E(_8.$$.fragment,f),E(u8.$$.fragment,f),E(v8.$$.fragment,f),E(aT.$$.fragment,f),E(F8.$$.fragment,f),E(lT.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(dT.$$.fragment,f),E(w8.$$.fragment,f),E(r7.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(a7.$$.fragment,f),E($8.$$.fragment,f),E(y7.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(P8.$$.fragment,f),E($7.$$.fragment,f),E(B8.$$.fragment,f),E(X7.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(W7.$$.fragment,f),E(D8.$$.fragment,f),E(Y7.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E(Z7.$$.fragment,f),E(z8.$$.fragment,f),E(FM.$$.fragment,f),E(W8.$$.fragment,f),E(Q8.$$.fragment,f),E(U8.$$.fragment,f),E(MM.$$.fragment,f),E(J8.$$.fragment,f),E(RM.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(e9.$$.fragment,f),E(BM.$$.fragment,f),E(o9.$$.fragment,f),E(iE.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(cE.$$.fragment,f),E(s9.$$.fragment,f),E(yE.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E($E.$$.fragment,f),E(f9.$$.fragment,f),E(RE.$$.fragment,f),E(g9.$$.fragment,f),E(h9.$$.fragment,f),E(_9.$$.fragment,f),E(BE.$$.fragment,f),E(u9.$$.fragment,f),E(NE.$$.fragment,f),E(b9.$$.fragment,f),E(v9.$$.fragment,f),E(T9.$$.fragment,f),E(jE.$$.fragment,f),E(M9.$$.fragment,f),E(sC.$$.fragment,f),E(E9.$$.fragment,f),E(C9.$$.fragment,f),E(A9.$$.fragment,f),E(iC.$$.fragment,f),E(L9.$$.fragment,f),E(xC.$$.fragment,f),E(y9.$$.fragment,f),E(x9.$$.fragment,f),E(k9.$$.fragment,f),E(kC.$$.fragment,f),E(S9.$$.fragment,f),E(RC.$$.fragment,f),E(R9.$$.fragment,f),E(P9.$$.fragment,f),E(I9.$$.fragment,f),E(BC.$$.fragment,f),E(N9.$$.fragment,f),E(NC.$$.fragment,f),E(q9.$$.fragment,f),E(j9.$$.fragment,f),E(G9.$$.fragment,f),E(jC.$$.fragment,f),E(O9.$$.fragment,f),E(m5.$$.fragment,f),E(V9.$$.fragment,f),E(X9.$$.fragment,f),E(W9.$$.fragment,f),E(h5.$$.fragment,f),E(Q9.$$.fragment,f),E(w5.$$.fragment,f),E(H9.$$.fragment,f),E(U9.$$.fragment,f),E(Y9.$$.fragment,f),E(L5.$$.fragment,f),E(K9.$$.fragment,f),E(D5.$$.fragment,f),E(Z9.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(O5.$$.fragment,f),E(tx.$$.fragment,f),E(Z5.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(o0.$$.fragment,f),E(ix.$$.fragment,f),E(f0.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(g0.$$.fragment,f),E(gx.$$.fragment,f),E(C0.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(A0.$$.fragment,f),E(bx.$$.fragment,f),E(N0.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(j0.$$.fragment,f),E(Ex.$$.fragment,f),E(H0.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(Lx.$$.fragment,f),E(J0.$$.fragment,f),E(yx.$$.fragment,f),E(nw.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(lw.$$.fragment,f),E(Rx.$$.fragment,f),E(dw.$$.fragment,f),E(Px.$$.fragment,f),E(Bx.$$.fragment,f),E(Nx.$$.fragment,f),E(fw.$$.fragment,f),E(qx.$$.fragment,f),E(hw.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(_w.$$.fragment,f),E(Xx.$$.fragment,f),E(bw.$$.fragment,f),oGe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(D6.$$.fragment,f),C(G6.$$.fragment,f),C(Mf.$$.fragment,f),C(O6.$$.fragment,f),C(V6.$$.fragment,f),C(W6.$$.fragment,f),C(Lg.$$.fragment,f),C(Q6.$$.fragment,f),C(H6.$$.fragment,f),C(U6.$$.fragment,f),C(K6.$$.fragment,f),C(ih.$$.fragment,f),C(Z6.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(aL.$$.fragment,f),C(Gh.$$.fragment,f),C(Oh.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(cL.$$.fragment,f),C(ip.$$.fragment,f),C(dp.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(mp.$$.fragment,f),C(_L.$$.fragment,f),C(du.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(fu.$$.fragment,f),C(TL.$$.fragment,f),C(o4.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(t4.$$.fragment,f),C(AL.$$.fragment,f),C(V4.$$.fragment,f),C(LL.$$.fragment,f),C(yL.$$.fragment,f),C($L.$$.fragment,f),C(z4.$$.fragment,f),C(kL.$$.fragment,f),C(x1.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(k1.$$.fragment,f),C(IL.$$.fragment,f),C(U1.$$.fragment,f),C(NL.$$.fragment,f),C(qL.$$.fragment,f),C(DL.$$.fragment,f),C(Y1.$$.fragment,f),C(GL.$$.fragment,f),C(Wb.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(Hb.$$.fragment,f),C(WL.$$.fragment,f),C(w2.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(L2.$$.fragment,f),C(YL.$$.fragment,f),C(P2.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(oy.$$.fragment,f),C(I2.$$.fragment,f),C(ry.$$.fragment,f),C(bv.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(Fv.$$.fragment,f),C(ly.$$.fragment,f),C(i3.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(c3.$$.fragment,f),C(my.$$.fragment,f),C(g3.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(_y.$$.fragment,f),C(p3.$$.fragment,f),C(uy.$$.fragment,f),C(x3.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(k3.$$.fragment,f),C(My.$$.fragment,f),C(P3.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(I3.$$.fragment,f),C(Ly.$$.fragment,f),C(Q3.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(U3.$$.fragment,f),C(Sy.$$.fragment,f),C(rF.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(aF.$$.fragment,f),C(Ny.$$.fragment,f),C(pF.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(uF.$$.fragment,f),C(Oy.$$.fragment,f),C(TF.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(EF.$$.fragment,f),C(Hy.$$.fragment,f),C($F.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(SF.$$.fragment,f),C(Zy.$$.fragment,f),C(NF.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(jF.$$.fragment,f),C(a8.$$.fragment,f),C(VF.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(zF.$$.fragment,f),C(c8.$$.fragment,f),C(HF.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(JF.$$.fragment,f),C(p8.$$.fragment,f),C(rT.$$.fragment,f),C(_8.$$.fragment,f),C(u8.$$.fragment,f),C(v8.$$.fragment,f),C(aT.$$.fragment,f),C(F8.$$.fragment,f),C(lT.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(dT.$$.fragment,f),C(w8.$$.fragment,f),C(r7.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(a7.$$.fragment,f),C($8.$$.fragment,f),C(y7.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(P8.$$.fragment,f),C($7.$$.fragment,f),C(B8.$$.fragment,f),C(X7.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(W7.$$.fragment,f),C(D8.$$.fragment,f),C(Y7.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C(Z7.$$.fragment,f),C(z8.$$.fragment,f),C(FM.$$.fragment,f),C(W8.$$.fragment,f),C(Q8.$$.fragment,f),C(U8.$$.fragment,f),C(MM.$$.fragment,f),C(J8.$$.fragment,f),C(RM.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(e9.$$.fragment,f),C(BM.$$.fragment,f),C(o9.$$.fragment,f),C(iE.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(cE.$$.fragment,f),C(s9.$$.fragment,f),C(yE.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C($E.$$.fragment,f),C(f9.$$.fragment,f),C(RE.$$.fragment,f),C(g9.$$.fragment,f),C(h9.$$.fragment,f),C(_9.$$.fragment,f),C(BE.$$.fragment,f),C(u9.$$.fragment,f),C(NE.$$.fragment,f),C(b9.$$.fragment,f),C(v9.$$.fragment,f),C(T9.$$.fragment,f),C(jE.$$.fragment,f),C(M9.$$.fragment,f),C(sC.$$.fragment,f),C(E9.$$.fragment,f),C(C9.$$.fragment,f),C(A9.$$.fragment,f),C(iC.$$.fragment,f),C(L9.$$.fragment,f),C(xC.$$.fragment,f),C(y9.$$.fragment,f),C(x9.$$.fragment,f),C(k9.$$.fragment,f),C(kC.$$.fragment,f),C(S9.$$.fragment,f),C(RC.$$.fragment,f),C(R9.$$.fragment,f),C(P9.$$.fragment,f),C(I9.$$.fragment,f),C(BC.$$.fragment,f),C(N9.$$.fragment,f),C(NC.$$.fragment,f),C(q9.$$.fragment,f),C(j9.$$.fragment,f),C(G9.$$.fragment,f),C(jC.$$.fragment,f),C(O9.$$.fragment,f),C(m5.$$.fragment,f),C(V9.$$.fragment,f),C(X9.$$.fragment,f),C(W9.$$.fragment,f),C(h5.$$.fragment,f),C(Q9.$$.fragment,f),C(w5.$$.fragment,f),C(H9.$$.fragment,f),C(U9.$$.fragment,f),C(Y9.$$.fragment,f),C(L5.$$.fragment,f),C(K9.$$.fragment,f),C(D5.$$.fragment,f),C(Z9.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(O5.$$.fragment,f),C(tx.$$.fragment,f),C(Z5.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(o0.$$.fragment,f),C(ix.$$.fragment,f),C(f0.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(g0.$$.fragment,f),C(gx.$$.fragment,f),C(C0.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(A0.$$.fragment,f),C(bx.$$.fragment,f),C(N0.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(j0.$$.fragment,f),C(Ex.$$.fragment,f),C(H0.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(Lx.$$.fragment,f),C(J0.$$.fragment,f),C(yx.$$.fragment,f),C(nw.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(lw.$$.fragment,f),C(Rx.$$.fragment,f),C(dw.$$.fragment,f),C(Px.$$.fragment,f),C(Bx.$$.fragment,f),C(Nx.$$.fragment,f),C(fw.$$.fragment,f),C(qx.$$.fragment,f),C(hw.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(_w.$$.fragment,f),C(Xx.$$.fragment,f),C(bw.$$.fragment,f),oGe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(uf),f&&t(rt),f&&t(De),f&&t(We),f&&t(vf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(Kqe),f&&t(Fi),w(D6),f&&t(Zqe),f&&t(kn),f&&t(eje),w(G6,f),f&&t(oje),f&&t(fk),f&&t(rje),w(Mf,f),f&&t(tje),f&&t(Ti),w(O6),f&&t(aje),f&&t(Co),w(V6),w(W6),w(Lg),w(Q6),f&&t(nje),f&&t(Ei),w(H6),f&&t(sje),f&&t(wo),w(U6),w(K6),w(ih),w(Z6),f&&t(lje),f&&t(Ci),w(eL),f&&t(ije),f&&t(Ao),w(oL),w(aL),w(Gh),w(Oh),w(nL),f&&t(dje),f&&t(wi),w(sL),f&&t(cje),f&&t(Lo),w(lL),w(cL),w(ip),w(dp),w(fL),f&&t(fje),f&&t(Li),w(mL),f&&t(mje),f&&t(yo),w(gL),w(pL),w(mp),w(_L),w(du),f&&t(gje),f&&t($i),w(uL),f&&t(hje),f&&t(xo),w(bL),w(FL),w(fu),w(TL),w(o4),f&&t(pje),f&&t(Ri),w(ML),f&&t(_je),f&&t($o),w(EL),w(wL),w(t4),w(AL),w(V4),f&&t(uje),f&&t(Ii),w(LL),f&&t(bje),f&&t(ko),w(yL),w($L),w(z4),w(kL),w(x1),f&&t(vje),f&&t(ji),w(SL),f&&t(Fje),f&&t(So),w(RL),w(BL),w(k1),w(IL),w(U1),f&&t(Tje),f&&t(Oi),w(NL),f&&t(Mje),f&&t(Ro),w(qL),w(DL),w(Y1),w(GL),w(Wb),f&&t(Eje),f&&t(zi),w(OL),f&&t(Cje),f&&t(Po),w(VL),w(zL),w(Hb),w(WL),w(w2),f&&t(wje),f&&t(Hi),w(QL),f&&t(Aje),f&&t(Bo),w(HL),w(JL),w(L2),w(YL),w(P2),f&&t(Lje),f&&t(Yi),w(KL),f&&t(yje),f&&t(Io),w(ZL),w(oy),w(I2),w(ry),w(bv),f&&t(xje),f&&t(ed),w(ty),f&&t($je),f&&t(No),w(ay),w(sy),w(Fv),w(ly),w(i3),f&&t(kje),f&&t(td),w(iy),f&&t(Sje),f&&t(qo),w(dy),w(fy),w(c3),w(my),w(g3),f&&t(Rje),f&&t(sd),w(gy),f&&t(Pje),f&&t(jo),w(hy),w(_y),w(p3),w(uy),w(x3),f&&t(Bje),f&&t(dd),w(by),f&&t(Ije),f&&t(Do),w(vy),w(Ty),w(k3),w(My),w(P3),f&&t(Nje),f&&t(md),w(Ey),f&&t(qje),f&&t(Go),w(Cy),w(Ay),w(I3),w(Ly),w(Q3),f&&t(jje),f&&t(pd),w(yy),f&&t(Dje),f&&t(Oo),w(xy),w(ky),w(U3),w(Sy),w(rF),f&&t(Gje),f&&t(bd),w(Ry),f&&t(Oje),f&&t(Vo),w(Py),w(Iy),w(aF),w(Ny),w(pF),f&&t(Vje),f&&t(Td),w(qy),f&&t(Xje),f&&t(Xo),w(jy),w(Gy),w(uF),w(Oy),w(TF),f&&t(zje),f&&t(Cd),w(Xy),f&&t(Wje),f&&t(zo),w(zy),w(Qy),w(EF),w(Hy),w($F),f&&t(Qje),f&&t(Ld),w(Uy),f&&t(Hje),f&&t(Wo),w(Jy),w(Ky),w(SF),w(Zy),w(NF),f&&t(Uje),f&&t(kd),w(e8),f&&t(Jje),f&&t(Qo),w(o8),w(t8),w(jF),w(a8),w(VF),f&&t(Yje),f&&t(Pd),w(s8),f&&t(Kje),f&&t(Ho),w(l8),w(d8),w(zF),w(c8),w(HF),f&&t(Zje),f&&t(Nd),w(f8),f&&t(eDe),f&&t(Uo),w(m8),w(h8),w(JF),w(p8),w(rT),f&&t(oDe),f&&t(Dd),w(_8),f&&t(rDe),f&&t(Jo),w(u8),w(v8),w(aT),w(F8),w(lT),f&&t(tDe),f&&t(Vd),w(T8),f&&t(aDe),f&&t(Yo),w(M8),w(C8),w(dT),w(w8),w(r7),f&&t(nDe),f&&t(Wd),w(A8),f&&t(sDe),f&&t(Ko),w(L8),w(x8),w(a7),w($8),w(y7),f&&t(lDe),f&&t(Ud),w(k8),f&&t(iDe),f&&t(Zo),w(S8),w(P8),w($7),w(B8),w(X7),f&&t(dDe),f&&t(Kd),w(I8),f&&t(cDe),f&&t(er),w(N8),w(j8),w(W7),w(D8),w(Y7),f&&t(fDe),f&&t(oc),w(G8),f&&t(mDe),f&&t(or),w(O8),w(X8),w(Z7),w(z8),w(FM),f&&t(gDe),f&&t(ac),w(W8),f&&t(hDe),f&&t(rr),w(Q8),w(U8),w(MM),w(J8),w(RM),f&&t(pDe),f&&t(lc),w(Y8),f&&t(_De),f&&t(tr),w(K8),w(e9),w(BM),w(o9),w(iE),f&&t(uDe),f&&t(cc),w(r9),f&&t(bDe),f&&t(ar),w(t9),w(n9),w(cE),w(s9),w(yE),f&&t(vDe),f&&t(gc),w(l9),f&&t(FDe),f&&t(nr),w(i9),w(c9),w($E),w(f9),w(RE),f&&t(TDe),f&&t(_c),w(g9),f&&t(MDe),f&&t(sr),w(h9),w(_9),w(BE),w(u9),w(NE),f&&t(EDe),f&&t(vc),w(b9),f&&t(CDe),f&&t(lr),w(v9),w(T9),w(jE),w(M9),w(sC),f&&t(wDe),f&&t(Mc),w(E9),f&&t(ADe),f&&t(ir),w(C9),w(A9),w(iC),w(L9),w(xC),f&&t(LDe),f&&t(wc),w(y9),f&&t(yDe),f&&t(dr),w(x9),w(k9),w(kC),w(S9),w(RC),f&&t(xDe),f&&t(yc),w(R9),f&&t($De),f&&t(cr),w(P9),w(I9),w(BC),w(N9),w(NC),f&&t(kDe),f&&t(kc),w(q9),f&&t(SDe),f&&t(fr),w(j9),w(G9),w(jC),w(O9),w(m5),f&&t(RDe),f&&t(Pc),w(V9),f&&t(PDe),f&&t(mr),w(X9),w(W9),w(h5),w(Q9),w(w5),f&&t(BDe),f&&t(Nc),w(H9),f&&t(IDe),f&&t(gr),w(U9),w(Y9),w(L5),w(K9),w(D5),f&&t(NDe),f&&t(Dc),w(Z9),f&&t(qDe),f&&t(hr),w(ex),w(rx),w(O5),w(tx),w(Z5),f&&t(jDe),f&&t(Vc),w(ax),f&&t(DDe),f&&t(pr),w(nx),w(lx),w(o0),w(ix),w(f0),f&&t(GDe),f&&t(Wc),w(dx),f&&t(ODe),f&&t(_r),w(cx),w(mx),w(g0),w(gx),w(C0),f&&t(VDe),f&&t(Uc),w(hx),f&&t(XDe),f&&t(ur),w(px),w(ux),w(A0),w(bx),w(N0),f&&t(zDe),f&&t(Kc),w(vx),f&&t(WDe),f&&t(br),w(Fx),w(Mx),w(j0),w(Ex),w(H0),f&&t(QDe),f&&t(of),w(Cx),f&&t(HDe),f&&t(vr),w(wx),w(Lx),w(J0),w(yx),w(nw),f&&t(UDe),f&&t(af),w(xx),f&&t(JDe),f&&t(Fr),w($x),w(Sx),w(lw),w(Rx),w(dw),f&&t(YDe),f&&t(lf),w(Px),f&&t(KDe),f&&t(Tr),w(Bx),w(Nx),w(fw),w(qx),w(hw),f&&t(ZDe),f&&t(ff),w(Dx),f&&t(eGe),f&&t(Mr),w(Gx),w(Vx),w(_w),w(Xx),w(bw)}}}const KPt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function ZPt(y){return ZSt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class sBt extends USt{constructor(g){super();JSt(this,g,ZPt,YPt,YSt,{})}}export{sBt as default,KPt as metadata};
