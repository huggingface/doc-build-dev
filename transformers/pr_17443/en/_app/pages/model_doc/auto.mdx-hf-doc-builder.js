import{S as Xkt,i as zkt,s as Wkt,e as a,k as l,w as F,t as o,M as Qkt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Hkt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as YXr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Ukt(L){let g,v,p,m,_,d,h,Mo,mi,_f,rt,gi,hi,kA,uf,De,We,pi,yn,SA,Ln,xn,RA,_i,$n,PA,ui,bf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),_f=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),gi=a("code"),hi=o('"new-model"'),kA=o(")."),uf=l(),De=a("p"),We=o("Likewise, if your "),pi=a("code"),yn=o("NewModel"),SA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),RA=o(`, make sure its
`),_i=a("code"),$n=o("config_class"),PA=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),bf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var ek=s(p);m=r(ek,"NewModelConfig"),ek.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var bi=s(d);h=r(bi,"PretrainedConfig"),bi.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var ok=s(mi);_f=r(ok,"model_type"),ok.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),gi=n(Ae,"CODE",{});var rk=s(gi);hi=r(rk,'"new-model"'),rk.forEach(t),kA=r(Ae,")."),Ae.forEach(t),uf=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),pi=n(Eo,"CODE",{});var wa=s(pi);yn=r(wa,"NewModel"),wa.forEach(t),SA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var tk=s(Ln);xn=r(tk,"PreTrainedModel"),tk.forEach(t),RA=r(Eo,`, make sure its
`),_i=n(Eo,"CODE",{});var vf=s(_i);$n=r(vf,"config_class"),vf.forEach(t),PA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var ak=s(ui);bf=r(ak,"NewModelConfig"),ak.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,_f),e(g,rt),e(g,gi),e(gi,hi),e(g,kA),b(Qe,uf,Ae),b(Qe,De,Ae),e(De,We),e(De,pi),e(pi,yn),e(De,SA),e(De,Ln),e(Ln,xn),e(De,RA),e(De,_i),e(_i,$n),e(De,PA),e(De,ui),e(ui,bf),e(De,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(De)}}}function Jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kkt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eSt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function oSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ESt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ASt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ySt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ISt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function USt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ERt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ARt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ORt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WRt(L){let g,v,p,m,_,d,h,Mo,mi,_f,rt,gi,hi,kA,uf,De,We,pi,yn,SA,Ln,xn,RA,_i,$n,PA,ui,bf,Ca,Qe,Ae,ek,bi,ok,rk,Eo,wa,tk,vf,ak,OOe,kqe,vi,Ff,Coe,BA,VOe,woe,XOe,Sqe,kn,zOe,Aoe,WOe,QOe,yoe,HOe,UOe,Rqe,IA,Pqe,nk,JOe,Bqe,Tf,Iqe,Fi,Mf,Loe,NA,YOe,xoe,KOe,Nqe,Co,qA,ZOe,jA,eVe,sk,oVe,rVe,tVe,DA,aVe,$oe,nVe,sVe,lVe,Er,GA,iVe,koe,dVe,cVe,Ti,fVe,Soe,mVe,gVe,Roe,hVe,pVe,_Ve,A,Ef,Poe,uVe,bVe,lk,vVe,FVe,TVe,Cf,Boe,MVe,EVe,ik,CVe,wVe,AVe,wf,Ioe,yVe,LVe,dk,xVe,$Ve,kVe,Af,Noe,SVe,RVe,ck,PVe,BVe,IVe,yf,qoe,NVe,qVe,fk,jVe,DVe,GVe,Lf,joe,OVe,VVe,mk,XVe,zVe,WVe,xf,Doe,QVe,HVe,gk,UVe,JVe,YVe,$f,Goe,KVe,ZVe,hk,eXe,oXe,rXe,kf,Ooe,tXe,aXe,pk,nXe,sXe,lXe,Sf,Voe,iXe,dXe,_k,cXe,fXe,mXe,Rf,Xoe,gXe,hXe,uk,pXe,_Xe,uXe,Pf,zoe,bXe,vXe,bk,FXe,TXe,MXe,Bf,Woe,EXe,CXe,vk,wXe,AXe,yXe,If,Qoe,LXe,xXe,Fk,$Xe,kXe,SXe,Nf,Hoe,RXe,PXe,Tk,BXe,IXe,NXe,qf,Uoe,qXe,jXe,Mk,DXe,GXe,OXe,jf,Joe,VXe,XXe,Ek,zXe,WXe,QXe,Df,Yoe,HXe,UXe,Ck,JXe,YXe,KXe,Gf,Koe,ZXe,eze,wk,oze,rze,tze,Of,Zoe,aze,nze,Ak,sze,lze,ize,Vf,ere,dze,cze,yk,fze,mze,gze,Xf,ore,hze,pze,Lk,_ze,uze,bze,zf,rre,vze,Fze,xk,Tze,Mze,Eze,Wf,tre,Cze,wze,$k,Aze,yze,Lze,Qf,are,xze,$ze,kk,kze,Sze,Rze,Hf,nre,Pze,Bze,Sk,Ize,Nze,qze,Uf,sre,jze,Dze,Rk,Gze,Oze,Vze,Jf,lre,Xze,zze,Pk,Wze,Qze,Hze,Yf,ire,Uze,Jze,Bk,Yze,Kze,Zze,Kf,dre,eWe,oWe,Ik,rWe,tWe,aWe,Zf,cre,nWe,sWe,Nk,lWe,iWe,dWe,em,fre,cWe,fWe,qk,mWe,gWe,hWe,om,mre,pWe,_We,jk,uWe,bWe,vWe,rm,gre,FWe,TWe,Dk,MWe,EWe,CWe,tm,hre,wWe,AWe,Gk,yWe,LWe,xWe,am,pre,$We,kWe,Ok,SWe,RWe,PWe,nm,_re,BWe,IWe,Vk,NWe,qWe,jWe,sm,ure,DWe,GWe,Xk,OWe,VWe,XWe,lm,bre,zWe,WWe,zk,QWe,HWe,UWe,im,vre,JWe,YWe,Wk,KWe,ZWe,eQe,dm,Fre,oQe,rQe,Qk,tQe,aQe,nQe,cm,Tre,sQe,lQe,Hk,iQe,dQe,cQe,fm,Mre,fQe,mQe,Uk,gQe,hQe,pQe,mm,Ere,_Qe,uQe,Jk,bQe,vQe,FQe,gm,Cre,TQe,MQe,Yk,EQe,CQe,wQe,hm,wre,AQe,yQe,Kk,LQe,xQe,$Qe,pm,Are,kQe,SQe,Zk,RQe,PQe,BQe,_m,yre,IQe,NQe,eS,qQe,jQe,DQe,um,Lre,GQe,OQe,oS,VQe,XQe,zQe,bm,xre,WQe,QQe,rS,HQe,UQe,JQe,vm,$re,YQe,KQe,tS,ZQe,eHe,oHe,Fm,kre,rHe,tHe,aS,aHe,nHe,sHe,Tm,Sre,lHe,iHe,nS,dHe,cHe,fHe,Mm,Rre,mHe,gHe,sS,hHe,pHe,_He,Em,Pre,uHe,bHe,lS,vHe,FHe,THe,Cm,Bre,MHe,EHe,iS,CHe,wHe,AHe,wm,Ire,yHe,LHe,dS,xHe,$He,kHe,Am,Nre,SHe,RHe,cS,PHe,BHe,IHe,ym,qre,NHe,qHe,fS,jHe,DHe,GHe,Lm,jre,OHe,VHe,mS,XHe,zHe,WHe,xm,Dre,QHe,HHe,gS,UHe,JHe,YHe,$m,Gre,KHe,ZHe,hS,eUe,oUe,rUe,km,Ore,tUe,aUe,pS,nUe,sUe,lUe,Sm,Vre,iUe,dUe,_S,cUe,fUe,mUe,Rm,Xre,gUe,hUe,uS,pUe,_Ue,uUe,Pm,zre,bUe,vUe,bS,FUe,TUe,MUe,Bm,Wre,EUe,CUe,vS,wUe,AUe,yUe,Im,Qre,LUe,xUe,FS,$Ue,kUe,SUe,Nm,Hre,RUe,PUe,TS,BUe,IUe,NUe,qm,Ure,qUe,jUe,MS,DUe,GUe,OUe,jm,Jre,VUe,XUe,ES,zUe,WUe,QUe,Dm,Yre,HUe,UUe,CS,JUe,YUe,KUe,Gm,Kre,ZUe,eJe,wS,oJe,rJe,tJe,Om,Zre,aJe,nJe,AS,sJe,lJe,iJe,Vm,ete,dJe,cJe,yS,fJe,mJe,gJe,Xm,ote,hJe,pJe,LS,_Je,uJe,bJe,zm,rte,vJe,FJe,xS,TJe,MJe,EJe,Wm,tte,CJe,wJe,$S,AJe,yJe,LJe,Qm,ate,xJe,$Je,kS,kJe,SJe,RJe,Hm,nte,PJe,BJe,SS,IJe,NJe,qJe,Um,ste,jJe,DJe,RS,GJe,OJe,VJe,Jm,lte,XJe,zJe,PS,WJe,QJe,HJe,Ym,ite,UJe,JJe,BS,YJe,KJe,ZJe,Km,dte,eYe,oYe,IS,rYe,tYe,aYe,Zm,cte,nYe,sYe,NS,lYe,iYe,dYe,eg,fte,cYe,fYe,qS,mYe,gYe,hYe,og,mte,pYe,_Ye,jS,uYe,bYe,vYe,rg,gte,FYe,TYe,DS,MYe,EYe,CYe,tg,hte,wYe,AYe,GS,yYe,LYe,xYe,ag,pte,$Ye,kYe,OS,SYe,RYe,PYe,ng,_te,BYe,IYe,VS,NYe,qYe,jYe,sg,ute,DYe,GYe,XS,OYe,VYe,XYe,lg,bte,zYe,WYe,zS,QYe,HYe,UYe,ig,vte,JYe,YYe,WS,KYe,ZYe,eKe,dg,Fte,oKe,rKe,QS,tKe,aKe,nKe,cg,Tte,sKe,lKe,HS,iKe,dKe,cKe,fg,Mte,fKe,mKe,US,gKe,hKe,pKe,mg,Ete,_Ke,uKe,JS,bKe,vKe,FKe,gg,Cte,TKe,MKe,YS,EKe,CKe,wKe,hg,wte,AKe,yKe,KS,LKe,xKe,$Ke,pg,Ate,kKe,SKe,ZS,RKe,PKe,BKe,_g,yte,IKe,NKe,eR,qKe,jKe,DKe,ug,Lte,GKe,OKe,oR,VKe,XKe,zKe,bg,xte,WKe,QKe,rR,HKe,UKe,JKe,vg,$te,YKe,KKe,tR,ZKe,eZe,oZe,Fg,kte,rZe,tZe,aR,aZe,nZe,sZe,Tg,Ste,lZe,iZe,nR,dZe,cZe,fZe,Mg,Rte,mZe,gZe,sR,hZe,pZe,_Ze,Eg,Pte,uZe,bZe,lR,vZe,FZe,TZe,Cg,Bte,MZe,EZe,iR,CZe,wZe,AZe,wg,yZe,Ag,OA,LZe,Ite,xZe,qqe,Mi,yg,Nte,VA,$Ze,qte,kZe,jqe,wo,XA,SZe,zA,RZe,dR,PZe,BZe,IZe,WA,NZe,jte,qZe,jZe,DZe,Cr,QA,GZe,Dte,OZe,VZe,Aa,XZe,Gte,zZe,WZe,Ote,QZe,HZe,Vte,UZe,JZe,YZe,k,Sn,Xte,KZe,ZZe,cR,eeo,oeo,fR,reo,teo,aeo,Rn,zte,neo,seo,mR,leo,ieo,gR,deo,ceo,feo,Pn,Wte,meo,geo,hR,heo,peo,pR,_eo,ueo,beo,Lg,Qte,veo,Feo,_R,Teo,Meo,Eeo,Bn,Hte,Ceo,weo,uR,Aeo,yeo,bR,Leo,xeo,$eo,xg,Ute,keo,Seo,vR,Reo,Peo,Beo,$g,Jte,Ieo,Neo,FR,qeo,jeo,Deo,kg,Yte,Geo,Oeo,TR,Veo,Xeo,zeo,In,Kte,Weo,Qeo,MR,Heo,Ueo,ER,Jeo,Yeo,Keo,Nn,Zte,Zeo,eoo,CR,ooo,roo,wR,too,aoo,noo,qn,eae,soo,loo,AR,ioo,doo,yR,coo,foo,moo,Sg,oae,goo,hoo,LR,poo,_oo,uoo,Rg,rae,boo,voo,xR,Foo,Too,Moo,jn,tae,Eoo,Coo,$R,woo,Aoo,kR,yoo,Loo,xoo,Pg,aae,$oo,koo,SR,Soo,Roo,Poo,Dn,nae,Boo,Ioo,RR,Noo,qoo,PR,joo,Doo,Goo,Gn,sae,Ooo,Voo,BR,Xoo,zoo,IR,Woo,Qoo,Hoo,On,lae,Uoo,Joo,NR,Yoo,Koo,qR,Zoo,ero,oro,Vn,iae,rro,tro,jR,aro,nro,DR,sro,lro,iro,Bg,dae,dro,cro,GR,fro,mro,gro,Xn,cae,hro,pro,OR,_ro,uro,VR,bro,vro,Fro,zn,fae,Tro,Mro,XR,Ero,Cro,zR,wro,Aro,yro,Wn,mae,Lro,xro,WR,$ro,kro,QR,Sro,Rro,Pro,Qn,gae,Bro,Iro,HR,Nro,qro,UR,jro,Dro,Gro,Hn,hae,Oro,Vro,JR,Xro,zro,YR,Wro,Qro,Hro,Un,pae,Uro,Jro,KR,Yro,Kro,ZR,Zro,eto,oto,Ig,_ae,rto,tto,eP,ato,nto,sto,Jn,uae,lto,ito,oP,dto,cto,rP,fto,mto,gto,Ng,bae,hto,pto,tP,_to,uto,bto,Yn,vae,vto,Fto,aP,Tto,Mto,nP,Eto,Cto,wto,Kn,Fae,Ato,yto,sP,Lto,xto,lP,$to,kto,Sto,Zn,Tae,Rto,Pto,iP,Bto,Ito,dP,Nto,qto,jto,qg,Mae,Dto,Gto,cP,Oto,Vto,Xto,es,Eae,zto,Wto,fP,Qto,Hto,mP,Uto,Jto,Yto,os,Cae,Kto,Zto,gP,eao,oao,hP,rao,tao,aao,jg,wae,nao,sao,pP,lao,iao,dao,rs,Aae,cao,fao,_P,mao,gao,uP,hao,pao,_ao,ts,yae,uao,bao,bP,vao,Fao,vP,Tao,Mao,Eao,as,Lae,Cao,wao,FP,Aao,yao,TP,Lao,xao,$ao,ns,xae,kao,Sao,MP,Rao,Pao,EP,Bao,Iao,Nao,ss,$ae,qao,jao,CP,Dao,Gao,wP,Oao,Vao,Xao,ls,kae,zao,Wao,AP,Qao,Hao,yP,Uao,Jao,Yao,is,Sae,Kao,Zao,LP,eno,ono,xP,rno,tno,ano,Dg,Rae,nno,sno,$P,lno,ino,dno,ds,Pae,cno,fno,kP,mno,gno,SP,hno,pno,_no,Gg,Bae,uno,bno,RP,vno,Fno,Tno,Og,Iae,Mno,Eno,PP,Cno,wno,Ano,cs,Nae,yno,Lno,BP,xno,$no,IP,kno,Sno,Rno,fs,qae,Pno,Bno,NP,Ino,Nno,qP,qno,jno,Dno,ms,jae,Gno,Ono,jP,Vno,Xno,DP,zno,Wno,Qno,Vg,Dae,Hno,Uno,GP,Jno,Yno,Kno,gs,Gae,Zno,eso,OP,oso,rso,VP,tso,aso,nso,hs,Oae,sso,lso,XP,iso,dso,zP,cso,fso,mso,ps,Vae,gso,hso,WP,pso,_so,QP,uso,bso,vso,_s,Xae,Fso,Tso,HP,Mso,Eso,UP,Cso,wso,Aso,us,zae,yso,Lso,JP,xso,$so,YP,kso,Sso,Rso,Xg,Wae,Pso,Bso,KP,Iso,Nso,qso,bs,Qae,jso,Dso,ZP,Gso,Oso,eB,Vso,Xso,zso,zg,Hae,Wso,Qso,oB,Hso,Uso,Jso,Wg,Uae,Yso,Kso,rB,Zso,elo,olo,Qg,Jae,rlo,tlo,tB,alo,nlo,slo,Hg,Yae,llo,ilo,aB,dlo,clo,flo,vs,Kae,mlo,glo,nB,hlo,plo,sB,_lo,ulo,blo,Ug,Zae,vlo,Flo,lB,Tlo,Mlo,Elo,Fs,ene,Clo,wlo,iB,Alo,ylo,dB,Llo,xlo,$lo,Ts,one,klo,Slo,cB,Rlo,Plo,fB,Blo,Ilo,Nlo,Ms,rne,qlo,jlo,mB,Dlo,Glo,gB,Olo,Vlo,Xlo,Es,tne,zlo,Wlo,hB,Qlo,Hlo,pB,Ulo,Jlo,Ylo,Cs,ane,Klo,Zlo,_B,eio,oio,uB,rio,tio,aio,ws,nne,nio,sio,bB,lio,iio,vB,dio,cio,fio,Jg,sne,mio,gio,FB,hio,pio,_io,Yg,lne,uio,bio,TB,vio,Fio,Tio,As,ine,Mio,Eio,MB,Cio,wio,EB,Aio,yio,Lio,ys,dne,xio,$io,CB,kio,Sio,wB,Rio,Pio,Bio,Ls,cne,Iio,Nio,AB,qio,jio,yB,Dio,Gio,Oio,Kg,fne,Vio,Xio,LB,zio,Wio,Qio,Zg,mne,Hio,Uio,xB,Jio,Yio,Kio,eh,gne,Zio,edo,$B,odo,rdo,tdo,xs,hne,ado,ndo,kB,sdo,ldo,SB,ido,ddo,cdo,oh,pne,fdo,mdo,RB,gdo,hdo,pdo,rh,_ne,_do,udo,PB,bdo,vdo,Fdo,th,une,Tdo,Mdo,BB,Edo,Cdo,wdo,$s,bne,Ado,ydo,IB,Ldo,xdo,NB,$do,kdo,Sdo,ah,vne,Rdo,Pdo,qB,Bdo,Ido,Ndo,nh,Fne,qdo,jdo,jB,Ddo,Gdo,Odo,ks,Tne,Vdo,Xdo,DB,zdo,Wdo,GB,Qdo,Hdo,Udo,Ss,Mne,Jdo,Ydo,OB,Kdo,Zdo,VB,eco,oco,rco,Rs,Ene,tco,aco,XB,nco,sco,zB,lco,ico,dco,Ps,Cne,cco,fco,WB,mco,gco,QB,hco,pco,_co,sh,uco,lh,HA,bco,wne,vco,Dqe,Ei,ih,Ane,UA,Fco,yne,Tco,Gqe,Ao,JA,Mco,YA,Eco,HB,Cco,wco,Aco,KA,yco,Lne,Lco,xco,$co,He,ZA,kco,xne,Sco,Rco,ya,Pco,$ne,Bco,Ico,kne,Nco,qco,Sne,jco,Dco,Gco,Y,dh,Rne,Oco,Vco,UB,Xco,zco,Wco,ch,Pne,Qco,Hco,JB,Uco,Jco,Yco,fh,Bne,Kco,Zco,YB,efo,ofo,rfo,mh,Ine,tfo,afo,KB,nfo,sfo,lfo,gh,Nne,ifo,dfo,ZB,cfo,ffo,mfo,hh,qne,gfo,hfo,eI,pfo,_fo,ufo,ph,jne,bfo,vfo,oI,Ffo,Tfo,Mfo,_h,Dne,Efo,Cfo,rI,wfo,Afo,yfo,uh,Gne,Lfo,xfo,tI,$fo,kfo,Sfo,bh,One,Rfo,Pfo,aI,Bfo,Ifo,Nfo,vh,Vne,qfo,jfo,nI,Dfo,Gfo,Ofo,Fh,Xne,Vfo,Xfo,sI,zfo,Wfo,Qfo,Th,zne,Hfo,Ufo,lI,Jfo,Yfo,Kfo,Mh,Wne,Zfo,emo,iI,omo,rmo,tmo,Eh,Qne,amo,nmo,dI,smo,lmo,imo,Ch,Hne,dmo,cmo,cI,fmo,mmo,gmo,wh,Une,hmo,pmo,fI,_mo,umo,bmo,Ah,Jne,vmo,Fmo,mI,Tmo,Mmo,Emo,yh,Yne,Cmo,wmo,gI,Amo,ymo,Lmo,Lh,Kne,xmo,$mo,hI,kmo,Smo,Rmo,xh,Zne,Pmo,Bmo,pI,Imo,Nmo,qmo,$h,ese,jmo,Dmo,_I,Gmo,Omo,Vmo,kh,ose,Xmo,zmo,uI,Wmo,Qmo,Hmo,Sh,rse,Umo,Jmo,bI,Ymo,Kmo,Zmo,Rh,tse,ego,ogo,vI,rgo,tgo,ago,Ph,ase,ngo,sgo,FI,lgo,igo,dgo,Bh,nse,cgo,fgo,TI,mgo,ggo,hgo,Ih,sse,pgo,_go,MI,ugo,bgo,vgo,Nh,lse,Fgo,Tgo,EI,Mgo,Ego,Cgo,qh,wgo,jh,Ago,Dh,ey,ygo,ise,Lgo,Oqe,Ci,Gh,dse,oy,xgo,cse,$go,Vqe,yo,ry,kgo,ty,Sgo,CI,Rgo,Pgo,Bgo,ay,Igo,fse,Ngo,qgo,jgo,Ue,ny,Dgo,mse,Ggo,Ogo,wi,Vgo,gse,Xgo,zgo,hse,Wgo,Qgo,Hgo,he,Oh,pse,Ugo,Jgo,wI,Ygo,Kgo,Zgo,Vh,_se,eho,oho,use,rho,tho,aho,Xh,bse,nho,sho,AI,lho,iho,dho,zh,vse,cho,fho,yI,mho,gho,hho,Wh,Fse,pho,_ho,LI,uho,bho,vho,Qh,Tse,Fho,Tho,xI,Mho,Eho,Cho,Hh,Mse,who,Aho,$I,yho,Lho,xho,Uh,Ese,$ho,kho,kI,Sho,Rho,Pho,Jh,Cse,Bho,Iho,SI,Nho,qho,jho,Yh,wse,Dho,Gho,RI,Oho,Vho,Xho,Kh,Ase,zho,Who,PI,Qho,Hho,Uho,Zh,yse,Jho,Yho,BI,Kho,Zho,epo,ep,Lse,opo,rpo,II,tpo,apo,npo,op,xse,spo,lpo,NI,ipo,dpo,cpo,rp,$se,fpo,mpo,qI,gpo,hpo,ppo,tp,kse,_po,upo,jI,bpo,vpo,Fpo,ap,Sse,Tpo,Mpo,DI,Epo,Cpo,wpo,np,Apo,sp,ypo,lp,sy,Lpo,Rse,xpo,Xqe,Ai,ip,Pse,ly,$po,Bse,kpo,zqe,Lo,iy,Spo,yi,Rpo,GI,Ppo,Bpo,OI,Ipo,Npo,qpo,dy,jpo,Ise,Dpo,Gpo,Opo,tt,cy,Vpo,Nse,Xpo,zpo,Li,Wpo,qse,Qpo,Hpo,VI,Upo,Jpo,Ypo,dp,Kpo,Je,fy,Zpo,jse,e_o,o_o,La,r_o,Dse,t_o,a_o,Gse,n_o,s_o,Ose,l_o,i_o,d_o,x,cp,Vse,c_o,f_o,XI,m_o,g_o,h_o,fp,Xse,p_o,__o,zI,u_o,b_o,v_o,mp,zse,F_o,T_o,WI,M_o,E_o,C_o,gp,Wse,w_o,A_o,QI,y_o,L_o,x_o,hp,Qse,$_o,k_o,HI,S_o,R_o,P_o,pp,Hse,B_o,I_o,UI,N_o,q_o,j_o,_p,Use,D_o,G_o,JI,O_o,V_o,X_o,up,Jse,z_o,W_o,YI,Q_o,H_o,U_o,bp,Yse,J_o,Y_o,KI,K_o,Z_o,euo,vp,Kse,ouo,ruo,ZI,tuo,auo,nuo,Fp,Zse,suo,luo,eN,iuo,duo,cuo,Tp,ele,fuo,muo,oN,guo,huo,puo,Mp,ole,_uo,uuo,rN,buo,vuo,Fuo,Ep,rle,Tuo,Muo,tN,Euo,Cuo,wuo,Cp,tle,Auo,yuo,aN,Luo,xuo,$uo,wp,ale,kuo,Suo,nN,Ruo,Puo,Buo,Ap,nle,Iuo,Nuo,sN,quo,juo,Duo,yp,sle,Guo,Ouo,lN,Vuo,Xuo,zuo,Lp,lle,Wuo,Quo,iN,Huo,Uuo,Juo,xp,ile,Yuo,Kuo,dN,Zuo,e4o,o4o,$p,dle,r4o,t4o,cN,a4o,n4o,s4o,kp,cle,l4o,i4o,fN,d4o,c4o,f4o,Sp,fle,m4o,g4o,mN,h4o,p4o,_4o,Rp,mle,u4o,b4o,gN,v4o,F4o,T4o,Pp,gle,M4o,E4o,hN,C4o,w4o,A4o,Bp,hle,y4o,L4o,pN,x4o,$4o,k4o,Ip,ple,S4o,R4o,_N,P4o,B4o,I4o,Np,_le,N4o,q4o,uN,j4o,D4o,G4o,qp,ule,O4o,V4o,bN,X4o,z4o,W4o,jp,ble,Q4o,H4o,vN,U4o,J4o,Y4o,Dp,vle,K4o,Z4o,FN,e1o,o1o,r1o,Gp,Fle,t1o,a1o,TN,n1o,s1o,l1o,Op,Tle,i1o,d1o,MN,c1o,f1o,m1o,Bs,Mle,g1o,h1o,EN,p1o,_1o,CN,u1o,b1o,v1o,Vp,Ele,F1o,T1o,wN,M1o,E1o,C1o,Xp,Cle,w1o,A1o,AN,y1o,L1o,x1o,zp,wle,$1o,k1o,yN,S1o,R1o,P1o,Wp,Ale,B1o,I1o,LN,N1o,q1o,j1o,Qp,yle,D1o,G1o,xN,O1o,V1o,X1o,Hp,Lle,z1o,W1o,$N,Q1o,H1o,U1o,Up,xle,J1o,Y1o,kN,K1o,Z1o,ebo,Jp,$le,obo,rbo,SN,tbo,abo,nbo,Yp,kle,sbo,lbo,RN,ibo,dbo,cbo,Kp,Sle,fbo,mbo,PN,gbo,hbo,pbo,Zp,Rle,_bo,ubo,BN,bbo,vbo,Fbo,e_,Ple,Tbo,Mbo,IN,Ebo,Cbo,wbo,o_,Ble,Abo,ybo,NN,Lbo,xbo,$bo,r_,Ile,kbo,Sbo,qN,Rbo,Pbo,Bbo,t_,Nle,Ibo,Nbo,jN,qbo,jbo,Dbo,a_,qle,Gbo,Obo,DN,Vbo,Xbo,zbo,n_,jle,Wbo,Qbo,GN,Hbo,Ubo,Jbo,s_,Dle,Ybo,Kbo,ON,Zbo,e2o,o2o,l_,Gle,r2o,t2o,VN,a2o,n2o,s2o,i_,Ole,l2o,i2o,XN,d2o,c2o,f2o,d_,Vle,m2o,g2o,zN,h2o,p2o,_2o,c_,Xle,u2o,b2o,WN,v2o,F2o,T2o,f_,zle,M2o,E2o,QN,C2o,w2o,A2o,m_,Wle,y2o,L2o,HN,x2o,$2o,k2o,g_,Qle,S2o,R2o,UN,P2o,B2o,I2o,h_,Hle,N2o,q2o,JN,j2o,D2o,G2o,p_,Ule,O2o,V2o,YN,X2o,z2o,W2o,__,Jle,Q2o,H2o,KN,U2o,J2o,Y2o,u_,Yle,K2o,Z2o,ZN,evo,ovo,rvo,b_,Kle,tvo,avo,eq,nvo,svo,lvo,v_,Zle,ivo,dvo,oq,cvo,fvo,mvo,F_,eie,gvo,hvo,rq,pvo,_vo,uvo,T_,oie,bvo,vvo,tq,Fvo,Tvo,Mvo,M_,rie,Evo,Cvo,aq,wvo,Avo,yvo,E_,tie,Lvo,xvo,nq,$vo,kvo,Svo,C_,aie,Rvo,Pvo,sq,Bvo,Ivo,Nvo,w_,nie,qvo,jvo,lq,Dvo,Gvo,Ovo,A_,sie,Vvo,Xvo,iq,zvo,Wvo,Qvo,y_,lie,Hvo,Uvo,dq,Jvo,Yvo,Kvo,L_,iie,Zvo,e3o,cq,o3o,r3o,t3o,x_,die,a3o,n3o,fq,s3o,l3o,i3o,$_,cie,d3o,c3o,mq,f3o,m3o,g3o,k_,fie,h3o,p3o,gq,_3o,u3o,b3o,S_,mie,v3o,F3o,hq,T3o,M3o,E3o,R_,gie,C3o,w3o,pq,A3o,y3o,L3o,P_,hie,x3o,$3o,_q,k3o,S3o,R3o,B_,pie,P3o,B3o,uq,I3o,N3o,q3o,I_,_ie,j3o,D3o,bq,G3o,O3o,V3o,N_,uie,X3o,z3o,vq,W3o,Q3o,H3o,q_,bie,U3o,J3o,Fq,Y3o,K3o,Z3o,j_,vie,eFo,oFo,Tq,rFo,tFo,aFo,D_,Fie,nFo,sFo,Mq,lFo,iFo,dFo,G_,Tie,cFo,fFo,Eq,mFo,gFo,hFo,O_,Mie,pFo,_Fo,Cq,uFo,bFo,vFo,V_,Eie,FFo,TFo,wq,MFo,EFo,CFo,X_,Cie,wFo,AFo,Aq,yFo,LFo,xFo,z_,wie,$Fo,kFo,yq,SFo,RFo,PFo,W_,Aie,BFo,IFo,Lq,NFo,qFo,jFo,Q_,yie,DFo,GFo,xq,OFo,VFo,XFo,H_,Lie,zFo,WFo,$q,QFo,HFo,UFo,U_,xie,JFo,YFo,kq,KFo,ZFo,eTo,J_,$ie,oTo,rTo,Sq,tTo,aTo,nTo,Y_,kie,sTo,lTo,Rq,iTo,dTo,cTo,K_,Sie,fTo,mTo,Pq,gTo,hTo,pTo,Z_,Rie,_To,uTo,Bq,bTo,vTo,FTo,eu,Pie,TTo,MTo,Iq,ETo,CTo,wTo,ou,Bie,ATo,yTo,Nq,LTo,xTo,$To,ru,Iie,kTo,STo,qq,RTo,PTo,BTo,tu,Nie,ITo,NTo,jq,qTo,jTo,DTo,au,GTo,qie,OTo,VTo,jie,XTo,zTo,nu,Wqe,xi,su,Die,my,WTo,Gie,QTo,Qqe,xo,gy,HTo,$i,UTo,Dq,JTo,YTo,Gq,KTo,ZTo,e7o,hy,o7o,Oie,r7o,t7o,a7o,at,py,n7o,Vie,s7o,l7o,ki,i7o,Xie,d7o,c7o,Oq,f7o,m7o,g7o,lu,h7o,Ye,_y,p7o,zie,_7o,u7o,xa,b7o,Wie,v7o,F7o,Qie,T7o,M7o,Hie,E7o,C7o,w7o,G,iu,Uie,A7o,y7o,Vq,L7o,x7o,$7o,du,Jie,k7o,S7o,Xq,R7o,P7o,B7o,cu,Yie,I7o,N7o,zq,q7o,j7o,D7o,fu,Kie,G7o,O7o,Wq,V7o,X7o,z7o,mu,Zie,W7o,Q7o,Qq,H7o,U7o,J7o,gu,ede,Y7o,K7o,Hq,Z7o,eMo,oMo,hu,ode,rMo,tMo,Uq,aMo,nMo,sMo,pu,rde,lMo,iMo,Jq,dMo,cMo,fMo,_u,tde,mMo,gMo,Yq,hMo,pMo,_Mo,uu,ade,uMo,bMo,Kq,vMo,FMo,TMo,bu,nde,MMo,EMo,Zq,CMo,wMo,AMo,vu,sde,yMo,LMo,ej,xMo,$Mo,kMo,Fu,lde,SMo,RMo,oj,PMo,BMo,IMo,Tu,ide,NMo,qMo,rj,jMo,DMo,GMo,Mu,dde,OMo,VMo,tj,XMo,zMo,WMo,Eu,cde,QMo,HMo,aj,UMo,JMo,YMo,Cu,fde,KMo,ZMo,nj,eEo,oEo,rEo,wu,mde,tEo,aEo,sj,nEo,sEo,lEo,Au,gde,iEo,dEo,lj,cEo,fEo,mEo,yu,hde,gEo,hEo,ij,pEo,_Eo,uEo,Lu,pde,bEo,vEo,dj,FEo,TEo,MEo,xu,_de,EEo,CEo,cj,wEo,AEo,yEo,$u,ude,LEo,xEo,fj,$Eo,kEo,SEo,ku,bde,REo,PEo,mj,BEo,IEo,NEo,Su,vde,qEo,jEo,gj,DEo,GEo,OEo,Ru,Fde,VEo,XEo,hj,zEo,WEo,QEo,Pu,Tde,HEo,UEo,pj,JEo,YEo,KEo,Bu,Mde,ZEo,eCo,_j,oCo,rCo,tCo,Iu,Ede,aCo,nCo,uj,sCo,lCo,iCo,Nu,Cde,dCo,cCo,bj,fCo,mCo,gCo,qu,wde,hCo,pCo,vj,_Co,uCo,bCo,ju,Ade,vCo,FCo,Fj,TCo,MCo,ECo,Du,yde,CCo,wCo,Tj,ACo,yCo,LCo,Gu,Lde,xCo,$Co,Mj,kCo,SCo,RCo,Ou,xde,PCo,BCo,Ej,ICo,NCo,qCo,Vu,$de,jCo,DCo,Cj,GCo,OCo,VCo,Xu,kde,XCo,zCo,wj,WCo,QCo,HCo,zu,Sde,UCo,JCo,Aj,YCo,KCo,ZCo,Wu,Rde,e5o,o5o,yj,r5o,t5o,a5o,Qu,Pde,n5o,s5o,Lj,l5o,i5o,d5o,Hu,Bde,c5o,f5o,xj,m5o,g5o,h5o,Uu,Ide,p5o,_5o,$j,u5o,b5o,v5o,Ju,F5o,Nde,T5o,M5o,qde,E5o,C5o,Yu,Hqe,Si,Ku,jde,uy,w5o,Dde,A5o,Uqe,$o,by,y5o,Ri,L5o,kj,x5o,$5o,Sj,k5o,S5o,R5o,vy,P5o,Gde,B5o,I5o,N5o,nt,Fy,q5o,Ode,j5o,D5o,Pi,G5o,Vde,O5o,V5o,Rj,X5o,z5o,W5o,Zu,Q5o,Ke,Ty,H5o,Xde,U5o,J5o,$a,Y5o,zde,K5o,Z5o,Wde,e0o,o0o,Qde,r0o,t0o,a0o,z,e4,Hde,n0o,s0o,Pj,l0o,i0o,d0o,o4,Ude,c0o,f0o,Bj,m0o,g0o,h0o,r4,Jde,p0o,_0o,Ij,u0o,b0o,v0o,t4,Yde,F0o,T0o,Nj,M0o,E0o,C0o,a4,Kde,w0o,A0o,qj,y0o,L0o,x0o,n4,Zde,$0o,k0o,jj,S0o,R0o,P0o,s4,ece,B0o,I0o,Dj,N0o,q0o,j0o,l4,oce,D0o,G0o,Gj,O0o,V0o,X0o,i4,rce,z0o,W0o,Oj,Q0o,H0o,U0o,d4,tce,J0o,Y0o,Vj,K0o,Z0o,ewo,c4,ace,owo,rwo,Xj,two,awo,nwo,f4,nce,swo,lwo,zj,iwo,dwo,cwo,m4,sce,fwo,mwo,Wj,gwo,hwo,pwo,g4,lce,_wo,uwo,Qj,bwo,vwo,Fwo,h4,ice,Two,Mwo,Hj,Ewo,Cwo,wwo,p4,dce,Awo,ywo,Uj,Lwo,xwo,$wo,_4,cce,kwo,Swo,Jj,Rwo,Pwo,Bwo,u4,fce,Iwo,Nwo,Yj,qwo,jwo,Dwo,b4,mce,Gwo,Owo,Kj,Vwo,Xwo,zwo,v4,gce,Wwo,Qwo,Zj,Hwo,Uwo,Jwo,F4,hce,Ywo,Kwo,eD,Zwo,e6o,o6o,T4,pce,r6o,t6o,oD,a6o,n6o,s6o,M4,_ce,l6o,i6o,rD,d6o,c6o,f6o,E4,uce,m6o,g6o,tD,h6o,p6o,_6o,C4,bce,u6o,b6o,aD,v6o,F6o,T6o,w4,vce,M6o,E6o,nD,C6o,w6o,A6o,A4,Fce,y6o,L6o,sD,x6o,$6o,k6o,y4,Tce,S6o,R6o,lD,P6o,B6o,I6o,L4,Mce,N6o,q6o,iD,j6o,D6o,G6o,x4,Ece,O6o,V6o,dD,X6o,z6o,W6o,$4,Cce,Q6o,H6o,cD,U6o,J6o,Y6o,k4,wce,K6o,Z6o,fD,eAo,oAo,rAo,S4,Ace,tAo,aAo,mD,nAo,sAo,lAo,R4,yce,iAo,dAo,gD,cAo,fAo,mAo,P4,Lce,gAo,hAo,hD,pAo,_Ao,uAo,B4,xce,bAo,vAo,pD,FAo,TAo,MAo,I4,$ce,EAo,CAo,_D,wAo,AAo,yAo,N4,kce,LAo,xAo,uD,$Ao,kAo,SAo,q4,RAo,Sce,PAo,BAo,Rce,IAo,NAo,j4,Jqe,Bi,D4,Pce,My,qAo,Bce,jAo,Yqe,ko,Ey,DAo,Ii,GAo,bD,OAo,VAo,vD,XAo,zAo,WAo,Cy,QAo,Ice,HAo,UAo,JAo,st,wy,YAo,Nce,KAo,ZAo,Ni,eyo,qce,oyo,ryo,FD,tyo,ayo,nyo,G4,syo,Ze,Ay,lyo,jce,iyo,dyo,ka,cyo,Dce,fyo,myo,Gce,gyo,hyo,Oce,pyo,_yo,uyo,Q,O4,Vce,byo,vyo,TD,Fyo,Tyo,Myo,V4,Xce,Eyo,Cyo,MD,wyo,Ayo,yyo,X4,zce,Lyo,xyo,ED,$yo,kyo,Syo,z4,Wce,Ryo,Pyo,CD,Byo,Iyo,Nyo,W4,Qce,qyo,jyo,wD,Dyo,Gyo,Oyo,Q4,Hce,Vyo,Xyo,AD,zyo,Wyo,Qyo,H4,Uce,Hyo,Uyo,yD,Jyo,Yyo,Kyo,U4,Jce,Zyo,eLo,LD,oLo,rLo,tLo,J4,Yce,aLo,nLo,xD,sLo,lLo,iLo,Y4,Kce,dLo,cLo,$D,fLo,mLo,gLo,K4,Zce,hLo,pLo,kD,_Lo,uLo,bLo,Z4,efe,vLo,FLo,SD,TLo,MLo,ELo,e1,ofe,CLo,wLo,RD,ALo,yLo,LLo,o1,rfe,xLo,$Lo,PD,kLo,SLo,RLo,r1,tfe,PLo,BLo,BD,ILo,NLo,qLo,t1,afe,jLo,DLo,ID,GLo,OLo,VLo,a1,nfe,XLo,zLo,ND,WLo,QLo,HLo,n1,sfe,ULo,JLo,qD,YLo,KLo,ZLo,s1,lfe,e8o,o8o,jD,r8o,t8o,a8o,l1,ife,n8o,s8o,DD,l8o,i8o,d8o,i1,dfe,c8o,f8o,GD,m8o,g8o,h8o,d1,cfe,p8o,_8o,OD,u8o,b8o,v8o,c1,ffe,F8o,T8o,VD,M8o,E8o,C8o,f1,mfe,w8o,A8o,XD,y8o,L8o,x8o,m1,gfe,$8o,k8o,zD,S8o,R8o,P8o,g1,hfe,B8o,I8o,WD,N8o,q8o,j8o,h1,pfe,D8o,G8o,QD,O8o,V8o,X8o,p1,_fe,z8o,W8o,HD,Q8o,H8o,U8o,_1,ufe,J8o,Y8o,UD,K8o,Z8o,e9o,u1,bfe,o9o,r9o,JD,t9o,a9o,n9o,b1,vfe,s9o,l9o,Ffe,i9o,d9o,c9o,v1,Tfe,f9o,m9o,YD,g9o,h9o,p9o,F1,Mfe,_9o,u9o,KD,b9o,v9o,F9o,T1,Efe,T9o,M9o,ZD,E9o,C9o,w9o,M1,Cfe,A9o,y9o,eG,L9o,x9o,$9o,E1,k9o,wfe,S9o,R9o,Afe,P9o,B9o,C1,Kqe,qi,w1,yfe,yy,I9o,Lfe,N9o,Zqe,So,Ly,q9o,ji,j9o,oG,D9o,G9o,rG,O9o,V9o,X9o,xy,z9o,xfe,W9o,Q9o,H9o,lt,$y,U9o,$fe,J9o,Y9o,Di,K9o,kfe,Z9o,exo,tG,oxo,rxo,txo,A1,axo,eo,ky,nxo,Sfe,sxo,lxo,Sa,ixo,Rfe,dxo,cxo,Pfe,fxo,mxo,Bfe,gxo,hxo,pxo,_e,y1,Ife,_xo,uxo,aG,bxo,vxo,Fxo,L1,Nfe,Txo,Mxo,nG,Exo,Cxo,wxo,x1,qfe,Axo,yxo,sG,Lxo,xxo,$xo,$1,jfe,kxo,Sxo,lG,Rxo,Pxo,Bxo,k1,Dfe,Ixo,Nxo,iG,qxo,jxo,Dxo,S1,Gfe,Gxo,Oxo,dG,Vxo,Xxo,zxo,R1,Ofe,Wxo,Qxo,cG,Hxo,Uxo,Jxo,P1,Vfe,Yxo,Kxo,fG,Zxo,e$o,o$o,B1,Xfe,r$o,t$o,mG,a$o,n$o,s$o,I1,zfe,l$o,i$o,gG,d$o,c$o,f$o,N1,Wfe,m$o,g$o,hG,h$o,p$o,_$o,q1,Qfe,u$o,b$o,pG,v$o,F$o,T$o,j1,Hfe,M$o,E$o,_G,C$o,w$o,A$o,D1,Ufe,y$o,L$o,uG,x$o,$$o,k$o,G1,Jfe,S$o,R$o,bG,P$o,B$o,I$o,O1,Yfe,N$o,q$o,vG,j$o,D$o,G$o,V1,O$o,Kfe,V$o,X$o,Zfe,z$o,W$o,X1,eje,Gi,z1,eme,Sy,Q$o,ome,H$o,oje,Ro,Ry,U$o,Oi,J$o,FG,Y$o,K$o,TG,Z$o,eko,oko,Py,rko,rme,tko,ako,nko,it,By,sko,tme,lko,iko,Vi,dko,ame,cko,fko,MG,mko,gko,hko,W1,pko,oo,Iy,_ko,nme,uko,bko,Ra,vko,sme,Fko,Tko,lme,Mko,Eko,ime,Cko,wko,Ako,N,Q1,dme,yko,Lko,EG,xko,$ko,kko,H1,cme,Sko,Rko,CG,Pko,Bko,Iko,U1,fme,Nko,qko,wG,jko,Dko,Gko,J1,mme,Oko,Vko,AG,Xko,zko,Wko,Y1,gme,Qko,Hko,yG,Uko,Jko,Yko,K1,hme,Kko,Zko,LG,eSo,oSo,rSo,Z1,pme,tSo,aSo,xG,nSo,sSo,lSo,eb,_me,iSo,dSo,$G,cSo,fSo,mSo,ob,ume,gSo,hSo,kG,pSo,_So,uSo,rb,bme,bSo,vSo,SG,FSo,TSo,MSo,tb,vme,ESo,CSo,RG,wSo,ASo,ySo,ab,Fme,LSo,xSo,PG,$So,kSo,SSo,nb,Tme,RSo,PSo,BG,BSo,ISo,NSo,sb,Mme,qSo,jSo,IG,DSo,GSo,OSo,lb,Eme,VSo,XSo,NG,zSo,WSo,QSo,ib,Cme,HSo,USo,qG,JSo,YSo,KSo,db,wme,ZSo,eRo,jG,oRo,rRo,tRo,cb,Ame,aRo,nRo,DG,sRo,lRo,iRo,fb,yme,dRo,cRo,GG,fRo,mRo,gRo,mb,Lme,hRo,pRo,OG,_Ro,uRo,bRo,gb,xme,vRo,FRo,VG,TRo,MRo,ERo,hb,$me,CRo,wRo,XG,ARo,yRo,LRo,pb,kme,xRo,$Ro,zG,kRo,SRo,RRo,_b,Sme,PRo,BRo,WG,IRo,NRo,qRo,ub,Rme,jRo,DRo,QG,GRo,ORo,VRo,bb,Pme,XRo,zRo,HG,WRo,QRo,HRo,vb,Bme,URo,JRo,UG,YRo,KRo,ZRo,Fb,Ime,ePo,oPo,JG,rPo,tPo,aPo,Tb,Nme,nPo,sPo,YG,lPo,iPo,dPo,Mb,qme,cPo,fPo,KG,mPo,gPo,hPo,Eb,jme,pPo,_Po,ZG,uPo,bPo,vPo,Cb,Dme,FPo,TPo,eO,MPo,EPo,CPo,wb,Gme,wPo,APo,oO,yPo,LPo,xPo,Ab,Ome,$Po,kPo,rO,SPo,RPo,PPo,yb,Vme,BPo,IPo,tO,NPo,qPo,jPo,Lb,Xme,DPo,GPo,aO,OPo,VPo,XPo,xb,zme,zPo,WPo,nO,QPo,HPo,UPo,$b,Wme,JPo,YPo,sO,KPo,ZPo,eBo,kb,Qme,oBo,rBo,lO,tBo,aBo,nBo,Sb,Hme,sBo,lBo,iO,iBo,dBo,cBo,Rb,Ume,fBo,mBo,dO,gBo,hBo,pBo,Pb,Jme,_Bo,uBo,cO,bBo,vBo,FBo,Bb,Yme,TBo,MBo,fO,EBo,CBo,wBo,Ib,Kme,ABo,yBo,mO,LBo,xBo,$Bo,Nb,Zme,kBo,SBo,gO,RBo,PBo,BBo,qb,ege,IBo,NBo,hO,qBo,jBo,DBo,jb,oge,GBo,OBo,pO,VBo,XBo,zBo,Db,WBo,rge,QBo,HBo,tge,UBo,JBo,Gb,rje,Xi,Ob,age,Ny,YBo,nge,KBo,tje,Po,qy,ZBo,zi,eIo,_O,oIo,rIo,uO,tIo,aIo,nIo,jy,sIo,sge,lIo,iIo,dIo,dt,Dy,cIo,lge,fIo,mIo,Wi,gIo,ige,hIo,pIo,bO,_Io,uIo,bIo,Vb,vIo,ro,Gy,FIo,dge,TIo,MIo,Pa,EIo,cge,CIo,wIo,fge,AIo,yIo,mge,LIo,xIo,$Io,K,Xb,gge,kIo,SIo,vO,RIo,PIo,BIo,zb,hge,IIo,NIo,FO,qIo,jIo,DIo,Wb,pge,GIo,OIo,TO,VIo,XIo,zIo,Qb,_ge,WIo,QIo,MO,HIo,UIo,JIo,Hb,uge,YIo,KIo,EO,ZIo,eNo,oNo,Ub,bge,rNo,tNo,CO,aNo,nNo,sNo,Jb,vge,lNo,iNo,wO,dNo,cNo,fNo,Yb,Fge,mNo,gNo,AO,hNo,pNo,_No,Kb,Tge,uNo,bNo,yO,vNo,FNo,TNo,Zb,Mge,MNo,ENo,LO,CNo,wNo,ANo,e2,Ege,yNo,LNo,xO,xNo,$No,kNo,o2,Cge,SNo,RNo,$O,PNo,BNo,INo,r2,wge,NNo,qNo,kO,jNo,DNo,GNo,t2,Age,ONo,VNo,SO,XNo,zNo,WNo,a2,yge,QNo,HNo,RO,UNo,JNo,YNo,n2,Lge,KNo,ZNo,PO,eqo,oqo,rqo,s2,xge,tqo,aqo,BO,nqo,sqo,lqo,l2,$ge,iqo,dqo,IO,cqo,fqo,mqo,i2,kge,gqo,hqo,NO,pqo,_qo,uqo,d2,Sge,bqo,vqo,qO,Fqo,Tqo,Mqo,c2,Rge,Eqo,Cqo,jO,wqo,Aqo,yqo,f2,Pge,Lqo,xqo,DO,$qo,kqo,Sqo,m2,Bge,Rqo,Pqo,GO,Bqo,Iqo,Nqo,g2,Ige,qqo,jqo,OO,Dqo,Gqo,Oqo,h2,Nge,Vqo,Xqo,VO,zqo,Wqo,Qqo,p2,qge,Hqo,Uqo,XO,Jqo,Yqo,Kqo,_2,jge,Zqo,ejo,zO,ojo,rjo,tjo,u2,Dge,ajo,njo,WO,sjo,ljo,ijo,b2,Gge,djo,cjo,QO,fjo,mjo,gjo,v2,hjo,Oge,pjo,_jo,Vge,ujo,bjo,F2,aje,Qi,T2,Xge,Oy,vjo,zge,Fjo,nje,Bo,Vy,Tjo,Hi,Mjo,HO,Ejo,Cjo,UO,wjo,Ajo,yjo,Xy,Ljo,Wge,xjo,$jo,kjo,ct,zy,Sjo,Qge,Rjo,Pjo,Ui,Bjo,Hge,Ijo,Njo,JO,qjo,jjo,Djo,M2,Gjo,to,Wy,Ojo,Uge,Vjo,Xjo,Ba,zjo,Jge,Wjo,Qjo,Yge,Hjo,Ujo,Kge,Jjo,Yjo,Kjo,Yr,E2,Zge,Zjo,eDo,YO,oDo,rDo,tDo,C2,ehe,aDo,nDo,KO,sDo,lDo,iDo,w2,ohe,dDo,cDo,ZO,fDo,mDo,gDo,A2,rhe,hDo,pDo,eV,_Do,uDo,bDo,y2,the,vDo,FDo,oV,TDo,MDo,EDo,L2,CDo,ahe,wDo,ADo,nhe,yDo,LDo,x2,sje,Ji,$2,she,Qy,xDo,lhe,$Do,lje,Io,Hy,kDo,Yi,SDo,rV,RDo,PDo,tV,BDo,IDo,NDo,Uy,qDo,ihe,jDo,DDo,GDo,ft,Jy,ODo,dhe,VDo,XDo,Ki,zDo,che,WDo,QDo,aV,HDo,UDo,JDo,k2,YDo,ao,Yy,KDo,fhe,ZDo,eGo,Ia,oGo,mhe,rGo,tGo,ghe,aGo,nGo,hhe,sGo,lGo,iGo,H,S2,phe,dGo,cGo,nV,fGo,mGo,gGo,R2,_he,hGo,pGo,sV,_Go,uGo,bGo,P2,uhe,vGo,FGo,lV,TGo,MGo,EGo,B2,bhe,CGo,wGo,iV,AGo,yGo,LGo,I2,vhe,xGo,$Go,dV,kGo,SGo,RGo,N2,Fhe,PGo,BGo,cV,IGo,NGo,qGo,q2,The,jGo,DGo,fV,GGo,OGo,VGo,j2,Mhe,XGo,zGo,mV,WGo,QGo,HGo,D2,Ehe,UGo,JGo,gV,YGo,KGo,ZGo,G2,Che,eOo,oOo,hV,rOo,tOo,aOo,O2,whe,nOo,sOo,pV,lOo,iOo,dOo,V2,Ahe,cOo,fOo,_V,mOo,gOo,hOo,X2,yhe,pOo,_Oo,uV,uOo,bOo,vOo,z2,Lhe,FOo,TOo,bV,MOo,EOo,COo,W2,xhe,wOo,AOo,vV,yOo,LOo,xOo,Q2,$he,$Oo,kOo,FV,SOo,ROo,POo,H2,khe,BOo,IOo,TV,NOo,qOo,jOo,U2,She,DOo,GOo,MV,OOo,VOo,XOo,J2,Rhe,zOo,WOo,EV,QOo,HOo,UOo,Y2,Phe,JOo,YOo,CV,KOo,ZOo,eVo,K2,Bhe,oVo,rVo,wV,tVo,aVo,nVo,Z2,Ihe,sVo,lVo,AV,iVo,dVo,cVo,ev,Nhe,fVo,mVo,yV,gVo,hVo,pVo,ov,qhe,_Vo,uVo,LV,bVo,vVo,FVo,rv,jhe,TVo,MVo,xV,EVo,CVo,wVo,tv,Dhe,AVo,yVo,$V,LVo,xVo,$Vo,av,Ghe,kVo,SVo,kV,RVo,PVo,BVo,nv,Ohe,IVo,NVo,SV,qVo,jVo,DVo,sv,Vhe,GVo,OVo,RV,VVo,XVo,zVo,lv,Xhe,WVo,QVo,PV,HVo,UVo,JVo,iv,zhe,YVo,KVo,BV,ZVo,eXo,oXo,dv,Whe,rXo,tXo,IV,aXo,nXo,sXo,cv,Qhe,lXo,iXo,NV,dXo,cXo,fXo,fv,Hhe,mXo,gXo,qV,hXo,pXo,_Xo,mv,uXo,Uhe,bXo,vXo,Jhe,FXo,TXo,gv,ije,Zi,hv,Yhe,Ky,MXo,Khe,EXo,dje,No,Zy,CXo,ed,wXo,jV,AXo,yXo,DV,LXo,xXo,$Xo,eL,kXo,Zhe,SXo,RXo,PXo,mt,oL,BXo,epe,IXo,NXo,od,qXo,ope,jXo,DXo,GV,GXo,OXo,VXo,pv,XXo,no,rL,zXo,rpe,WXo,QXo,Na,HXo,tpe,UXo,JXo,ape,YXo,KXo,npe,ZXo,ezo,ozo,V,_v,spe,rzo,tzo,OV,azo,nzo,szo,uv,lpe,lzo,izo,VV,dzo,czo,fzo,bv,ipe,mzo,gzo,XV,hzo,pzo,_zo,vv,dpe,uzo,bzo,zV,vzo,Fzo,Tzo,Fv,cpe,Mzo,Ezo,WV,Czo,wzo,Azo,Tv,fpe,yzo,Lzo,QV,xzo,$zo,kzo,Mv,mpe,Szo,Rzo,HV,Pzo,Bzo,Izo,Ev,gpe,Nzo,qzo,UV,jzo,Dzo,Gzo,Cv,hpe,Ozo,Vzo,JV,Xzo,zzo,Wzo,wv,ppe,Qzo,Hzo,YV,Uzo,Jzo,Yzo,Av,_pe,Kzo,Zzo,KV,eWo,oWo,rWo,yv,upe,tWo,aWo,ZV,nWo,sWo,lWo,Lv,bpe,iWo,dWo,eX,cWo,fWo,mWo,xv,vpe,gWo,hWo,oX,pWo,_Wo,uWo,$v,Fpe,bWo,vWo,rX,FWo,TWo,MWo,kv,Tpe,EWo,CWo,tX,wWo,AWo,yWo,Sv,Mpe,LWo,xWo,aX,$Wo,kWo,SWo,Rv,Epe,RWo,PWo,nX,BWo,IWo,NWo,Pv,Cpe,qWo,jWo,sX,DWo,GWo,OWo,Bv,wpe,VWo,XWo,lX,zWo,WWo,QWo,Iv,Ape,HWo,UWo,iX,JWo,YWo,KWo,Nv,ype,ZWo,eQo,dX,oQo,rQo,tQo,qv,Lpe,aQo,nQo,cX,sQo,lQo,iQo,jv,xpe,dQo,cQo,fX,fQo,mQo,gQo,Dv,$pe,hQo,pQo,mX,_Qo,uQo,bQo,Gv,kpe,vQo,FQo,gX,TQo,MQo,EQo,Ov,Spe,CQo,wQo,hX,AQo,yQo,LQo,Vv,Rpe,xQo,$Qo,pX,kQo,SQo,RQo,Xv,Ppe,PQo,BQo,_X,IQo,NQo,qQo,zv,Bpe,jQo,DQo,uX,GQo,OQo,VQo,Wv,Ipe,XQo,zQo,bX,WQo,QQo,HQo,Qv,Npe,UQo,JQo,vX,YQo,KQo,ZQo,Hv,qpe,eHo,oHo,FX,rHo,tHo,aHo,Uv,jpe,nHo,sHo,TX,lHo,iHo,dHo,Jv,Dpe,cHo,fHo,MX,mHo,gHo,hHo,Yv,Gpe,pHo,_Ho,EX,uHo,bHo,vHo,Kv,Ope,FHo,THo,CX,MHo,EHo,CHo,Zv,Vpe,wHo,AHo,wX,yHo,LHo,xHo,e3,Xpe,$Ho,kHo,AX,SHo,RHo,PHo,o3,zpe,BHo,IHo,yX,NHo,qHo,jHo,r3,DHo,Wpe,GHo,OHo,Qpe,VHo,XHo,t3,cje,rd,a3,Hpe,tL,zHo,Upe,WHo,fje,qo,aL,QHo,td,HHo,LX,UHo,JHo,xX,YHo,KHo,ZHo,nL,eUo,Jpe,oUo,rUo,tUo,gt,sL,aUo,Ype,nUo,sUo,ad,lUo,Kpe,iUo,dUo,$X,cUo,fUo,mUo,n3,gUo,so,lL,hUo,Zpe,pUo,_Uo,qa,uUo,e_e,bUo,vUo,o_e,FUo,TUo,r_e,MUo,EUo,CUo,t_e,s3,a_e,wUo,AUo,kX,yUo,LUo,xUo,l3,$Uo,n_e,kUo,SUo,s_e,RUo,PUo,i3,mje,nd,d3,l_e,iL,BUo,i_e,IUo,gje,jo,dL,NUo,sd,qUo,SX,jUo,DUo,RX,GUo,OUo,VUo,cL,XUo,d_e,zUo,WUo,QUo,ht,fL,HUo,c_e,UUo,JUo,ld,YUo,f_e,KUo,ZUo,PX,eJo,oJo,rJo,c3,tJo,lo,mL,aJo,m_e,nJo,sJo,ja,lJo,g_e,iJo,dJo,h_e,cJo,fJo,p_e,mJo,gJo,hJo,Fe,f3,__e,pJo,_Jo,BX,uJo,bJo,vJo,m3,u_e,FJo,TJo,IX,MJo,EJo,CJo,g3,b_e,wJo,AJo,NX,yJo,LJo,xJo,h3,v_e,$Jo,kJo,qX,SJo,RJo,PJo,Is,F_e,BJo,IJo,jX,NJo,qJo,DX,jJo,DJo,GJo,p3,T_e,OJo,VJo,GX,XJo,zJo,WJo,pt,M_e,QJo,HJo,OX,UJo,JJo,VX,YJo,KJo,XX,ZJo,eYo,oYo,_3,E_e,rYo,tYo,zX,aYo,nYo,sYo,u3,C_e,lYo,iYo,WX,dYo,cYo,fYo,b3,w_e,mYo,gYo,QX,hYo,pYo,_Yo,v3,A_e,uYo,bYo,HX,vYo,FYo,TYo,F3,y_e,MYo,EYo,UX,CYo,wYo,AYo,T3,L_e,yYo,LYo,JX,xYo,$Yo,kYo,M3,x_e,SYo,RYo,YX,PYo,BYo,IYo,E3,NYo,$_e,qYo,jYo,k_e,DYo,GYo,C3,hje,id,w3,S_e,gL,OYo,R_e,VYo,pje,Do,hL,XYo,dd,zYo,KX,WYo,QYo,ZX,HYo,UYo,JYo,pL,YYo,P_e,KYo,ZYo,eKo,_t,_L,oKo,B_e,rKo,tKo,cd,aKo,I_e,nKo,sKo,ez,lKo,iKo,dKo,A3,cKo,io,uL,fKo,N_e,mKo,gKo,Da,hKo,q_e,pKo,_Ko,j_e,uKo,bKo,D_e,vKo,FKo,TKo,G_e,y3,O_e,MKo,EKo,oz,CKo,wKo,AKo,L3,yKo,V_e,LKo,xKo,X_e,$Ko,kKo,x3,_je,fd,$3,z_e,bL,SKo,W_e,RKo,uje,Go,vL,PKo,md,BKo,rz,IKo,NKo,tz,qKo,jKo,DKo,FL,GKo,Q_e,OKo,VKo,XKo,ut,TL,zKo,H_e,WKo,QKo,gd,HKo,U_e,UKo,JKo,az,YKo,KKo,ZKo,k3,eZo,co,ML,oZo,J_e,rZo,tZo,Ga,aZo,Y_e,nZo,sZo,K_e,lZo,iZo,Z_e,dZo,cZo,fZo,Se,S3,eue,mZo,gZo,nz,hZo,pZo,_Zo,R3,oue,uZo,bZo,sz,vZo,FZo,TZo,P3,rue,MZo,EZo,lz,CZo,wZo,AZo,B3,tue,yZo,LZo,iz,xZo,$Zo,kZo,I3,aue,SZo,RZo,dz,PZo,BZo,IZo,N3,nue,NZo,qZo,cz,jZo,DZo,GZo,q3,sue,OZo,VZo,fz,XZo,zZo,WZo,j3,lue,QZo,HZo,mz,UZo,JZo,YZo,D3,iue,KZo,ZZo,gz,eer,oer,rer,G3,ter,due,aer,ner,cue,ser,ler,O3,bje,hd,V3,fue,EL,ier,mue,der,vje,Oo,CL,cer,pd,fer,hz,mer,ger,pz,her,per,_er,wL,uer,gue,ber,ver,Fer,bt,AL,Ter,hue,Mer,Eer,_d,Cer,pue,wer,Aer,_z,yer,Ler,xer,X3,$er,fo,yL,ker,_ue,Ser,Rer,Oa,Per,uue,Ber,Ier,bue,Ner,qer,vue,jer,Der,Ger,Kr,z3,Fue,Oer,Ver,uz,Xer,zer,Wer,W3,Tue,Qer,Her,bz,Uer,Jer,Yer,Q3,Mue,Ker,Zer,vz,eor,oor,ror,H3,Eue,tor,aor,Fz,nor,sor,lor,U3,Cue,ior,dor,Tz,cor,mor,gor,J3,hor,wue,por,_or,Aue,uor,bor,Y3,Fje,ud,K3,yue,LL,vor,Lue,For,Tje,Vo,xL,Tor,bd,Mor,Mz,Eor,Cor,Ez,wor,Aor,yor,$L,Lor,xue,xor,$or,kor,vt,kL,Sor,$ue,Ror,Por,vd,Bor,kue,Ior,Nor,Cz,qor,jor,Dor,Z3,Gor,mo,SL,Oor,Sue,Vor,Xor,Va,zor,Rue,Wor,Qor,Pue,Hor,Uor,Bue,Jor,Yor,Kor,Re,eF,Iue,Zor,err,wz,orr,rrr,trr,oF,Nue,arr,nrr,Az,srr,lrr,irr,rF,que,drr,crr,yz,frr,mrr,grr,tF,jue,hrr,prr,Lz,_rr,urr,brr,aF,Due,vrr,Frr,xz,Trr,Mrr,Err,nF,Gue,Crr,wrr,$z,Arr,yrr,Lrr,sF,Oue,xrr,$rr,kz,krr,Srr,Rrr,lF,Vue,Prr,Brr,Sz,Irr,Nrr,qrr,iF,Xue,jrr,Drr,Rz,Grr,Orr,Vrr,dF,Xrr,zue,zrr,Wrr,Wue,Qrr,Hrr,cF,Mje,Fd,fF,Que,RL,Urr,Hue,Jrr,Eje,Xo,PL,Yrr,Td,Krr,Pz,Zrr,etr,Bz,otr,rtr,ttr,BL,atr,Uue,ntr,str,ltr,Ft,IL,itr,Jue,dtr,ctr,Md,ftr,Yue,mtr,gtr,Iz,htr,ptr,_tr,mF,utr,go,NL,btr,Kue,vtr,Ftr,Xa,Ttr,Zue,Mtr,Etr,e4e,Ctr,wtr,o4e,Atr,ytr,Ltr,qL,gF,r4e,xtr,$tr,Nz,ktr,Str,Rtr,hF,t4e,Ptr,Btr,qz,Itr,Ntr,qtr,pF,jtr,a4e,Dtr,Gtr,n4e,Otr,Vtr,_F,Cje,Ed,uF,s4e,jL,Xtr,l4e,ztr,wje,zo,DL,Wtr,Cd,Qtr,jz,Htr,Utr,Dz,Jtr,Ytr,Ktr,GL,Ztr,i4e,ear,oar,rar,Tt,OL,tar,d4e,aar,nar,wd,sar,c4e,lar,iar,Gz,dar,car,far,bF,mar,ho,VL,gar,f4e,har,par,za,_ar,m4e,uar,bar,g4e,Far,Tar,h4e,Mar,Ear,Car,Zr,vF,p4e,war,Aar,Oz,yar,Lar,xar,FF,_4e,$ar,kar,Vz,Sar,Rar,Par,TF,u4e,Bar,Iar,Xz,Nar,qar,jar,MF,b4e,Dar,Gar,zz,Oar,Var,Xar,EF,v4e,zar,War,Wz,Qar,Har,Uar,CF,Jar,F4e,Yar,Kar,T4e,Zar,enr,wF,Aje,Ad,AF,M4e,XL,onr,E4e,rnr,yje,Wo,zL,tnr,yd,anr,Qz,nnr,snr,Hz,lnr,inr,dnr,WL,cnr,C4e,fnr,mnr,gnr,Mt,QL,hnr,w4e,pnr,_nr,Ld,unr,A4e,bnr,vnr,Uz,Fnr,Tnr,Mnr,yF,Enr,po,HL,Cnr,y4e,wnr,Anr,Wa,ynr,L4e,Lnr,xnr,x4e,$nr,knr,$4e,Snr,Rnr,Pnr,xd,LF,k4e,Bnr,Inr,Jz,Nnr,qnr,jnr,xF,S4e,Dnr,Gnr,Yz,Onr,Vnr,Xnr,$F,R4e,znr,Wnr,Kz,Qnr,Hnr,Unr,kF,Jnr,P4e,Ynr,Knr,B4e,Znr,esr,SF,Lje,$d,RF,I4e,UL,osr,N4e,rsr,xje,Qo,JL,tsr,kd,asr,Zz,nsr,ssr,eW,lsr,isr,dsr,YL,csr,q4e,fsr,msr,gsr,Et,KL,hsr,j4e,psr,_sr,Sd,usr,D4e,bsr,vsr,oW,Fsr,Tsr,Msr,PF,Esr,_o,ZL,Csr,G4e,wsr,Asr,Qa,ysr,O4e,Lsr,xsr,V4e,$sr,ksr,X4e,Ssr,Rsr,Psr,e8,BF,z4e,Bsr,Isr,rW,Nsr,qsr,jsr,IF,W4e,Dsr,Gsr,tW,Osr,Vsr,Xsr,NF,zsr,Q4e,Wsr,Qsr,H4e,Hsr,Usr,qF,$je,Rd,jF,U4e,o8,Jsr,J4e,Ysr,kje,Ho,r8,Ksr,Pd,Zsr,aW,elr,olr,nW,rlr,tlr,alr,t8,nlr,Y4e,slr,llr,ilr,Ct,a8,dlr,K4e,clr,flr,Bd,mlr,Z4e,glr,hlr,sW,plr,_lr,ulr,DF,blr,uo,n8,vlr,e1e,Flr,Tlr,Ha,Mlr,o1e,Elr,Clr,r1e,wlr,Alr,t1e,ylr,Llr,xlr,a1e,GF,n1e,$lr,klr,lW,Slr,Rlr,Plr,OF,Blr,s1e,Ilr,Nlr,l1e,qlr,jlr,VF,Sje,Id,XF,i1e,s8,Dlr,d1e,Glr,Rje,Uo,l8,Olr,Nd,Vlr,iW,Xlr,zlr,dW,Wlr,Qlr,Hlr,i8,Ulr,c1e,Jlr,Ylr,Klr,wt,d8,Zlr,f1e,eir,oir,qd,rir,m1e,tir,air,cW,nir,sir,lir,zF,iir,bo,c8,dir,g1e,cir,fir,Ua,mir,h1e,gir,hir,p1e,pir,_ir,_1e,uir,bir,vir,Ja,WF,u1e,Fir,Tir,fW,Mir,Eir,Cir,QF,b1e,wir,Air,mW,yir,Lir,xir,HF,v1e,$ir,kir,gW,Sir,Rir,Pir,UF,F1e,Bir,Iir,hW,Nir,qir,jir,JF,Dir,T1e,Gir,Oir,M1e,Vir,Xir,YF,Pje,jd,KF,E1e,f8,zir,C1e,Wir,Bje,Jo,m8,Qir,Dd,Hir,pW,Uir,Jir,_W,Yir,Kir,Zir,g8,edr,w1e,odr,rdr,tdr,At,h8,adr,A1e,ndr,sdr,Gd,ldr,y1e,idr,ddr,uW,cdr,fdr,mdr,ZF,gdr,vo,p8,hdr,L1e,pdr,_dr,Ya,udr,x1e,bdr,vdr,$1e,Fdr,Tdr,k1e,Mdr,Edr,Cdr,S1e,eT,R1e,wdr,Adr,bW,ydr,Ldr,xdr,oT,$dr,P1e,kdr,Sdr,B1e,Rdr,Pdr,rT,Ije,Od,tT,I1e,_8,Bdr,N1e,Idr,Nje,Yo,u8,Ndr,Vd,qdr,vW,jdr,Ddr,FW,Gdr,Odr,Vdr,b8,Xdr,q1e,zdr,Wdr,Qdr,yt,v8,Hdr,j1e,Udr,Jdr,Xd,Ydr,D1e,Kdr,Zdr,TW,ecr,ocr,rcr,aT,tcr,wr,F8,acr,G1e,ncr,scr,Ka,lcr,O1e,icr,dcr,V1e,ccr,fcr,X1e,mcr,gcr,hcr,q,nT,z1e,pcr,_cr,MW,ucr,bcr,vcr,sT,W1e,Fcr,Tcr,EW,Mcr,Ecr,Ccr,lT,Q1e,wcr,Acr,CW,ycr,Lcr,xcr,iT,H1e,$cr,kcr,wW,Scr,Rcr,Pcr,dT,U1e,Bcr,Icr,AW,Ncr,qcr,jcr,cT,J1e,Dcr,Gcr,yW,Ocr,Vcr,Xcr,fT,Y1e,zcr,Wcr,LW,Qcr,Hcr,Ucr,mT,K1e,Jcr,Ycr,xW,Kcr,Zcr,efr,gT,Z1e,ofr,rfr,$W,tfr,afr,nfr,hT,ebe,sfr,lfr,kW,ifr,dfr,cfr,pT,obe,ffr,mfr,SW,gfr,hfr,pfr,_T,rbe,_fr,ufr,RW,bfr,vfr,Ffr,uT,tbe,Tfr,Mfr,PW,Efr,Cfr,wfr,bT,abe,Afr,yfr,BW,Lfr,xfr,$fr,vT,nbe,kfr,Sfr,IW,Rfr,Pfr,Bfr,FT,sbe,Ifr,Nfr,NW,qfr,jfr,Dfr,TT,lbe,Gfr,Ofr,qW,Vfr,Xfr,zfr,Ns,ibe,Wfr,Qfr,jW,Hfr,Ufr,DW,Jfr,Yfr,Kfr,MT,dbe,Zfr,emr,GW,omr,rmr,tmr,ET,cbe,amr,nmr,OW,smr,lmr,imr,CT,fbe,dmr,cmr,VW,fmr,mmr,gmr,wT,mbe,hmr,pmr,XW,_mr,umr,bmr,AT,gbe,vmr,Fmr,zW,Tmr,Mmr,Emr,yT,hbe,Cmr,wmr,WW,Amr,ymr,Lmr,LT,pbe,xmr,$mr,QW,kmr,Smr,Rmr,xT,_be,Pmr,Bmr,HW,Imr,Nmr,qmr,$T,ube,jmr,Dmr,UW,Gmr,Omr,Vmr,kT,bbe,Xmr,zmr,JW,Wmr,Qmr,Hmr,ST,vbe,Umr,Jmr,YW,Ymr,Kmr,Zmr,RT,Fbe,egr,ogr,KW,rgr,tgr,agr,PT,Tbe,ngr,sgr,ZW,lgr,igr,dgr,BT,Mbe,cgr,fgr,eQ,mgr,ggr,hgr,IT,Ebe,pgr,_gr,oQ,ugr,bgr,vgr,NT,Cbe,Fgr,Tgr,rQ,Mgr,Egr,Cgr,qT,wbe,wgr,Agr,tQ,ygr,Lgr,xgr,jT,Abe,$gr,kgr,aQ,Sgr,Rgr,Pgr,DT,ybe,Bgr,Igr,nQ,Ngr,qgr,jgr,GT,Lbe,Dgr,Ggr,sQ,Ogr,Vgr,Xgr,OT,xbe,zgr,Wgr,lQ,Qgr,Hgr,Ugr,VT,$be,Jgr,Ygr,iQ,Kgr,Zgr,ehr,XT,kbe,ohr,rhr,dQ,thr,ahr,nhr,zT,Sbe,shr,lhr,cQ,ihr,dhr,chr,WT,Rbe,fhr,mhr,fQ,ghr,hhr,phr,QT,Pbe,_hr,uhr,mQ,bhr,vhr,Fhr,HT,Bbe,Thr,Mhr,gQ,Ehr,Chr,whr,UT,Ibe,Ahr,yhr,hQ,Lhr,xhr,$hr,JT,Nbe,khr,Shr,pQ,Rhr,Phr,Bhr,YT,qje,zd,KT,qbe,T8,Ihr,jbe,Nhr,jje,Ko,M8,qhr,Wd,jhr,_Q,Dhr,Ghr,uQ,Ohr,Vhr,Xhr,E8,zhr,Dbe,Whr,Qhr,Hhr,Lt,C8,Uhr,Gbe,Jhr,Yhr,Qd,Khr,Obe,Zhr,epr,bQ,opr,rpr,tpr,ZT,apr,Ar,w8,npr,Vbe,spr,lpr,Za,ipr,Xbe,dpr,cpr,zbe,fpr,mpr,Wbe,gpr,hpr,ppr,se,e7,Qbe,_pr,upr,vQ,bpr,vpr,Fpr,o7,Hbe,Tpr,Mpr,FQ,Epr,Cpr,wpr,r7,Ube,Apr,ypr,TQ,Lpr,xpr,$pr,t7,Jbe,kpr,Spr,MQ,Rpr,Ppr,Bpr,a7,Ybe,Ipr,Npr,EQ,qpr,jpr,Dpr,n7,Kbe,Gpr,Opr,CQ,Vpr,Xpr,zpr,s7,Zbe,Wpr,Qpr,wQ,Hpr,Upr,Jpr,l7,e2e,Ypr,Kpr,AQ,Zpr,e_r,o_r,i7,o2e,r_r,t_r,yQ,a_r,n_r,s_r,d7,r2e,l_r,i_r,LQ,d_r,c_r,f_r,c7,t2e,m_r,g_r,xQ,h_r,p_r,__r,f7,a2e,u_r,b_r,$Q,v_r,F_r,T_r,m7,n2e,M_r,E_r,kQ,C_r,w_r,A_r,g7,s2e,y_r,L_r,SQ,x_r,$_r,k_r,h7,l2e,S_r,R_r,RQ,P_r,B_r,I_r,p7,i2e,N_r,q_r,PQ,j_r,D_r,G_r,_7,d2e,O_r,V_r,BQ,X_r,z_r,W_r,u7,c2e,Q_r,H_r,IQ,U_r,J_r,Y_r,b7,f2e,K_r,Z_r,NQ,eur,our,rur,v7,m2e,tur,aur,qQ,nur,sur,lur,F7,g2e,iur,dur,jQ,cur,fur,mur,T7,h2e,gur,hur,DQ,pur,_ur,uur,M7,p2e,bur,vur,GQ,Fur,Tur,Mur,E7,Dje,Hd,C7,_2e,A8,Eur,u2e,Cur,Gje,Zo,y8,wur,Ud,Aur,OQ,yur,Lur,VQ,xur,$ur,kur,L8,Sur,b2e,Rur,Pur,Bur,xt,x8,Iur,v2e,Nur,qur,Jd,jur,F2e,Dur,Gur,XQ,Our,Vur,Xur,w7,zur,yr,$8,Wur,T2e,Qur,Hur,en,Uur,M2e,Jur,Yur,E2e,Kur,Zur,C2e,e4r,o4r,r4r,Te,A7,w2e,t4r,a4r,zQ,n4r,s4r,l4r,y7,A2e,i4r,d4r,WQ,c4r,f4r,m4r,L7,y2e,g4r,h4r,QQ,p4r,_4r,u4r,x7,L2e,b4r,v4r,HQ,F4r,T4r,M4r,$7,x2e,E4r,C4r,UQ,w4r,A4r,y4r,k7,$2e,L4r,x4r,JQ,$4r,k4r,S4r,S7,k2e,R4r,P4r,YQ,B4r,I4r,N4r,R7,S2e,q4r,j4r,KQ,D4r,G4r,O4r,P7,R2e,V4r,X4r,ZQ,z4r,W4r,Q4r,B7,P2e,H4r,U4r,eH,J4r,Y4r,K4r,I7,B2e,Z4r,e1r,oH,o1r,r1r,t1r,N7,I2e,a1r,n1r,rH,s1r,l1r,i1r,q7,N2e,d1r,c1r,tH,f1r,m1r,g1r,j7,Oje,Yd,D7,q2e,k8,h1r,j2e,p1r,Vje,er,S8,_1r,Kd,u1r,aH,b1r,v1r,nH,F1r,T1r,M1r,R8,E1r,D2e,C1r,w1r,A1r,$t,P8,y1r,G2e,L1r,x1r,Zd,$1r,O2e,k1r,S1r,sH,R1r,P1r,B1r,G7,I1r,Lr,B8,N1r,V2e,q1r,j1r,on,D1r,X2e,G1r,O1r,z2e,V1r,X1r,W2e,z1r,W1r,Q1r,rn,O7,Q2e,H1r,U1r,lH,J1r,Y1r,K1r,V7,H2e,Z1r,ebr,iH,obr,rbr,tbr,X7,U2e,abr,nbr,dH,sbr,lbr,ibr,z7,J2e,dbr,cbr,cH,fbr,mbr,gbr,W7,Xje,ec,Q7,Y2e,I8,hbr,K2e,pbr,zje,or,N8,_br,oc,ubr,fH,bbr,vbr,mH,Fbr,Tbr,Mbr,q8,Ebr,Z2e,Cbr,wbr,Abr,kt,j8,ybr,eve,Lbr,xbr,rc,$br,ove,kbr,Sbr,gH,Rbr,Pbr,Bbr,H7,Ibr,xr,D8,Nbr,rve,qbr,jbr,tn,Dbr,tve,Gbr,Obr,ave,Vbr,Xbr,nve,zbr,Wbr,Qbr,ie,U7,sve,Hbr,Ubr,hH,Jbr,Ybr,Kbr,J7,lve,Zbr,e2r,pH,o2r,r2r,t2r,Y7,ive,a2r,n2r,_H,s2r,l2r,i2r,K7,dve,d2r,c2r,uH,f2r,m2r,g2r,Z7,cve,h2r,p2r,bH,_2r,u2r,b2r,eM,fve,v2r,F2r,vH,T2r,M2r,E2r,oM,mve,C2r,w2r,FH,A2r,y2r,L2r,rM,gve,x2r,$2r,TH,k2r,S2r,R2r,tM,hve,P2r,B2r,MH,I2r,N2r,q2r,aM,pve,j2r,D2r,EH,G2r,O2r,V2r,nM,_ve,X2r,z2r,CH,W2r,Q2r,H2r,sM,uve,U2r,J2r,wH,Y2r,K2r,Z2r,lM,bve,evr,ovr,AH,rvr,tvr,avr,iM,vve,nvr,svr,yH,lvr,ivr,dvr,dM,Fve,cvr,fvr,LH,mvr,gvr,hvr,cM,Tve,pvr,_vr,xH,uvr,bvr,vvr,fM,Mve,Fvr,Tvr,$H,Mvr,Evr,Cvr,mM,Eve,wvr,Avr,kH,yvr,Lvr,xvr,gM,Cve,$vr,kvr,SH,Svr,Rvr,Pvr,hM,wve,Bvr,Ivr,RH,Nvr,qvr,jvr,pM,Wje,tc,_M,Ave,G8,Dvr,yve,Gvr,Qje,rr,O8,Ovr,ac,Vvr,PH,Xvr,zvr,BH,Wvr,Qvr,Hvr,V8,Uvr,Lve,Jvr,Yvr,Kvr,St,X8,Zvr,xve,e3r,o3r,nc,r3r,$ve,t3r,a3r,IH,n3r,s3r,l3r,uM,i3r,$r,z8,d3r,kve,c3r,f3r,an,m3r,Sve,g3r,h3r,Rve,p3r,_3r,Pve,u3r,b3r,v3r,ye,bM,Bve,F3r,T3r,NH,M3r,E3r,C3r,vM,Ive,w3r,A3r,qH,y3r,L3r,x3r,FM,Nve,$3r,k3r,jH,S3r,R3r,P3r,TM,qve,B3r,I3r,DH,N3r,q3r,j3r,MM,jve,D3r,G3r,GH,O3r,V3r,X3r,EM,Dve,z3r,W3r,OH,Q3r,H3r,U3r,CM,Gve,J3r,Y3r,VH,K3r,Z3r,eFr,wM,Ove,oFr,rFr,XH,tFr,aFr,nFr,AM,Vve,sFr,lFr,zH,iFr,dFr,cFr,yM,Xve,fFr,mFr,WH,gFr,hFr,pFr,LM,Hje,sc,xM,zve,W8,_Fr,Wve,uFr,Uje,tr,Q8,bFr,lc,vFr,QH,FFr,TFr,HH,MFr,EFr,CFr,H8,wFr,Qve,AFr,yFr,LFr,Rt,U8,xFr,Hve,$Fr,kFr,ic,SFr,Uve,RFr,PFr,UH,BFr,IFr,NFr,$M,qFr,kr,J8,jFr,Jve,DFr,GFr,nn,OFr,Yve,VFr,XFr,Kve,zFr,WFr,Zve,QFr,HFr,UFr,oe,kM,e3e,JFr,YFr,JH,KFr,ZFr,eTr,SM,o3e,oTr,rTr,YH,tTr,aTr,nTr,RM,r3e,sTr,lTr,KH,iTr,dTr,cTr,PM,t3e,fTr,mTr,ZH,gTr,hTr,pTr,BM,a3e,_Tr,uTr,eU,bTr,vTr,FTr,IM,n3e,TTr,MTr,oU,ETr,CTr,wTr,NM,s3e,ATr,yTr,rU,LTr,xTr,$Tr,qM,l3e,kTr,STr,tU,RTr,PTr,BTr,jM,i3e,ITr,NTr,aU,qTr,jTr,DTr,DM,d3e,GTr,OTr,nU,VTr,XTr,zTr,GM,c3e,WTr,QTr,sU,HTr,UTr,JTr,OM,f3e,YTr,KTr,lU,ZTr,e7r,o7r,VM,m3e,r7r,t7r,iU,a7r,n7r,s7r,XM,g3e,l7r,i7r,dU,d7r,c7r,f7r,zM,h3e,m7r,g7r,cU,h7r,p7r,_7r,WM,p3e,u7r,b7r,fU,v7r,F7r,T7r,QM,_3e,M7r,E7r,mU,C7r,w7r,A7r,HM,u3e,y7r,L7r,gU,x7r,$7r,k7r,UM,b3e,S7r,R7r,hU,P7r,B7r,I7r,JM,v3e,N7r,q7r,pU,j7r,D7r,G7r,YM,F3e,O7r,V7r,_U,X7r,z7r,W7r,KM,T3e,Q7r,H7r,uU,U7r,J7r,Y7r,ZM,M3e,K7r,Z7r,bU,eMr,oMr,rMr,eE,E3e,tMr,aMr,vU,nMr,sMr,lMr,oE,C3e,iMr,dMr,FU,cMr,fMr,mMr,rE,w3e,gMr,hMr,TU,pMr,_Mr,uMr,tE,Jje,dc,aE,A3e,Y8,bMr,y3e,vMr,Yje,ar,K8,FMr,cc,TMr,MU,MMr,EMr,EU,CMr,wMr,AMr,Z8,yMr,L3e,LMr,xMr,$Mr,Pt,e9,kMr,x3e,SMr,RMr,fc,PMr,$3e,BMr,IMr,CU,NMr,qMr,jMr,nE,DMr,Sr,o9,GMr,k3e,OMr,VMr,sn,XMr,S3e,zMr,WMr,R3e,QMr,HMr,P3e,UMr,JMr,YMr,pe,sE,B3e,KMr,ZMr,wU,eEr,oEr,rEr,lE,I3e,tEr,aEr,AU,nEr,sEr,lEr,iE,N3e,iEr,dEr,yU,cEr,fEr,mEr,dE,q3e,gEr,hEr,LU,pEr,_Er,uEr,cE,j3e,bEr,vEr,xU,FEr,TEr,MEr,fE,D3e,EEr,CEr,$U,wEr,AEr,yEr,mE,G3e,LEr,xEr,kU,$Er,kEr,SEr,gE,O3e,REr,PEr,SU,BEr,IEr,NEr,hE,V3e,qEr,jEr,RU,DEr,GEr,OEr,pE,X3e,VEr,XEr,PU,zEr,WEr,QEr,_E,z3e,HEr,UEr,BU,JEr,YEr,KEr,uE,W3e,ZEr,eCr,IU,oCr,rCr,tCr,bE,Q3e,aCr,nCr,NU,sCr,lCr,iCr,vE,H3e,dCr,cCr,qU,fCr,mCr,gCr,FE,U3e,hCr,pCr,jU,_Cr,uCr,bCr,TE,J3e,vCr,FCr,DU,TCr,MCr,ECr,ME,Y3e,CCr,wCr,GU,ACr,yCr,LCr,EE,Kje,mc,CE,K3e,r9,xCr,Z3e,$Cr,Zje,nr,t9,kCr,gc,SCr,OU,RCr,PCr,VU,BCr,ICr,NCr,a9,qCr,eFe,jCr,DCr,GCr,Bt,n9,OCr,oFe,VCr,XCr,hc,zCr,rFe,WCr,QCr,XU,HCr,UCr,JCr,wE,YCr,Rr,s9,KCr,tFe,ZCr,e5r,ln,o5r,aFe,r5r,t5r,nFe,a5r,n5r,sFe,s5r,l5r,i5r,l9,AE,lFe,d5r,c5r,zU,f5r,m5r,g5r,yE,iFe,h5r,p5r,WU,_5r,u5r,b5r,LE,eDe,pc,xE,dFe,i9,v5r,cFe,F5r,oDe,sr,d9,T5r,_c,M5r,QU,E5r,C5r,HU,w5r,A5r,y5r,c9,L5r,fFe,x5r,$5r,k5r,It,f9,S5r,mFe,R5r,P5r,uc,B5r,gFe,I5r,N5r,UU,q5r,j5r,D5r,$E,G5r,Pr,m9,O5r,hFe,V5r,X5r,dn,z5r,pFe,W5r,Q5r,_Fe,H5r,U5r,uFe,J5r,Y5r,K5r,bFe,kE,vFe,Z5r,e0r,JU,o0r,r0r,t0r,SE,rDe,bc,RE,FFe,g9,a0r,TFe,n0r,tDe,lr,h9,s0r,vc,l0r,YU,i0r,d0r,KU,c0r,f0r,m0r,p9,g0r,MFe,h0r,p0r,_0r,Nt,_9,u0r,EFe,b0r,v0r,Fc,F0r,CFe,T0r,M0r,ZU,E0r,C0r,w0r,PE,A0r,Br,u9,y0r,wFe,L0r,x0r,cn,$0r,AFe,k0r,S0r,yFe,R0r,P0r,LFe,B0r,I0r,N0r,de,BE,xFe,q0r,j0r,eJ,D0r,G0r,O0r,IE,$Fe,V0r,X0r,oJ,z0r,W0r,Q0r,NE,kFe,H0r,U0r,rJ,J0r,Y0r,K0r,qE,SFe,Z0r,ewr,tJ,owr,rwr,twr,jE,RFe,awr,nwr,aJ,swr,lwr,iwr,DE,PFe,dwr,cwr,nJ,fwr,mwr,gwr,GE,BFe,hwr,pwr,sJ,_wr,uwr,bwr,OE,IFe,vwr,Fwr,lJ,Twr,Mwr,Ewr,VE,NFe,Cwr,wwr,iJ,Awr,ywr,Lwr,XE,qFe,xwr,$wr,dJ,kwr,Swr,Rwr,zE,jFe,Pwr,Bwr,cJ,Iwr,Nwr,qwr,WE,DFe,jwr,Dwr,fJ,Gwr,Owr,Vwr,QE,GFe,Xwr,zwr,mJ,Wwr,Qwr,Hwr,HE,OFe,Uwr,Jwr,gJ,Ywr,Kwr,Zwr,UE,VFe,e6r,o6r,hJ,r6r,t6r,a6r,JE,XFe,n6r,s6r,pJ,l6r,i6r,d6r,YE,zFe,c6r,f6r,_J,m6r,g6r,h6r,KE,WFe,p6r,_6r,uJ,u6r,b6r,v6r,ZE,QFe,F6r,T6r,bJ,M6r,E6r,C6r,eC,HFe,w6r,A6r,vJ,y6r,L6r,x6r,oC,aDe,Tc,rC,UFe,b9,$6r,JFe,k6r,nDe,ir,v9,S6r,Mc,R6r,FJ,P6r,B6r,TJ,I6r,N6r,q6r,F9,j6r,YFe,D6r,G6r,O6r,qt,T9,V6r,KFe,X6r,z6r,Ec,W6r,ZFe,Q6r,H6r,MJ,U6r,J6r,Y6r,tC,K6r,Ir,M9,Z6r,eTe,eAr,oAr,fn,rAr,oTe,tAr,aAr,rTe,nAr,sAr,tTe,lAr,iAr,dAr,ce,aC,aTe,cAr,fAr,EJ,mAr,gAr,hAr,nC,nTe,pAr,_Ar,CJ,uAr,bAr,vAr,sC,sTe,FAr,TAr,wJ,MAr,EAr,CAr,lC,lTe,wAr,AAr,AJ,yAr,LAr,xAr,iC,iTe,$Ar,kAr,yJ,SAr,RAr,PAr,dC,dTe,BAr,IAr,LJ,NAr,qAr,jAr,cC,cTe,DAr,GAr,xJ,OAr,VAr,XAr,fC,fTe,zAr,WAr,$J,QAr,HAr,UAr,mC,mTe,JAr,YAr,kJ,KAr,ZAr,eyr,gC,gTe,oyr,ryr,SJ,tyr,ayr,nyr,hC,hTe,syr,lyr,RJ,iyr,dyr,cyr,pC,pTe,fyr,myr,PJ,gyr,hyr,pyr,_C,_Te,_yr,uyr,BJ,byr,vyr,Fyr,uC,uTe,Tyr,Myr,IJ,Eyr,Cyr,wyr,bC,bTe,Ayr,yyr,NJ,Lyr,xyr,$yr,vC,vTe,kyr,Syr,qJ,Ryr,Pyr,Byr,FC,FTe,Iyr,Nyr,jJ,qyr,jyr,Dyr,TC,TTe,Gyr,Oyr,DJ,Vyr,Xyr,zyr,MC,MTe,Wyr,Qyr,GJ,Hyr,Uyr,Jyr,EC,ETe,Yyr,Kyr,OJ,Zyr,eLr,oLr,CC,sDe,Cc,wC,CTe,E9,rLr,wTe,tLr,lDe,dr,C9,aLr,wc,nLr,VJ,sLr,lLr,XJ,iLr,dLr,cLr,w9,fLr,ATe,mLr,gLr,hLr,jt,A9,pLr,yTe,_Lr,uLr,Ac,bLr,LTe,vLr,FLr,zJ,TLr,MLr,ELr,AC,CLr,Nr,y9,wLr,xTe,ALr,yLr,mn,LLr,$Te,xLr,$Lr,kTe,kLr,SLr,STe,RLr,PLr,BLr,RTe,yC,PTe,ILr,NLr,WJ,qLr,jLr,DLr,LC,iDe,yc,xC,BTe,L9,GLr,ITe,OLr,dDe,cr,x9,VLr,Lc,XLr,QJ,zLr,WLr,HJ,QLr,HLr,ULr,$9,JLr,NTe,YLr,KLr,ZLr,Dt,k9,e8r,qTe,o8r,r8r,xc,t8r,jTe,a8r,n8r,UJ,s8r,l8r,i8r,$C,d8r,qr,S9,c8r,DTe,f8r,m8r,gn,g8r,GTe,h8r,p8r,OTe,_8r,u8r,VTe,b8r,v8r,F8r,XTe,kC,zTe,T8r,M8r,JJ,E8r,C8r,w8r,SC,cDe,$c,RC,WTe,R9,A8r,QTe,y8r,fDe,fr,P9,L8r,kc,x8r,YJ,$8r,k8r,KJ,S8r,R8r,P8r,B9,B8r,HTe,I8r,N8r,q8r,Gt,I9,j8r,UTe,D8r,G8r,Sc,O8r,JTe,V8r,X8r,ZJ,z8r,W8r,Q8r,PC,H8r,jr,N9,U8r,YTe,J8r,Y8r,hn,K8r,KTe,Z8r,e9r,ZTe,o9r,r9r,e7e,t9r,a9r,n9r,re,BC,o7e,s9r,l9r,eY,i9r,d9r,c9r,IC,r7e,f9r,m9r,oY,g9r,h9r,p9r,NC,t7e,_9r,u9r,rY,b9r,v9r,F9r,qC,a7e,T9r,M9r,tY,E9r,C9r,w9r,jC,n7e,A9r,y9r,aY,L9r,x9r,$9r,DC,s7e,k9r,S9r,nY,R9r,P9r,B9r,GC,l7e,I9r,N9r,sY,q9r,j9r,D9r,OC,i7e,G9r,O9r,lY,V9r,X9r,z9r,VC,d7e,W9r,Q9r,iY,H9r,U9r,J9r,XC,c7e,Y9r,K9r,dY,Z9r,exr,oxr,zC,f7e,rxr,txr,cY,axr,nxr,sxr,WC,m7e,lxr,ixr,fY,dxr,cxr,fxr,QC,g7e,mxr,gxr,mY,hxr,pxr,_xr,HC,h7e,uxr,bxr,gY,vxr,Fxr,Txr,UC,p7e,Mxr,Exr,hY,Cxr,wxr,Axr,JC,_7e,yxr,Lxr,pY,xxr,$xr,kxr,YC,u7e,Sxr,Rxr,_Y,Pxr,Bxr,Ixr,KC,b7e,Nxr,qxr,uY,jxr,Dxr,Gxr,ZC,v7e,Oxr,Vxr,bY,Xxr,zxr,Wxr,e5,F7e,Qxr,Hxr,vY,Uxr,Jxr,Yxr,o5,T7e,Kxr,Zxr,FY,e$r,o$r,r$r,r5,M7e,t$r,a$r,TY,n$r,s$r,l$r,t5,E7e,i$r,d$r,MY,c$r,f$r,m$r,a5,C7e,g$r,h$r,EY,p$r,_$r,u$r,n5,w7e,b$r,v$r,CY,F$r,T$r,M$r,s5,A7e,E$r,C$r,wY,w$r,A$r,y$r,l5,mDe,Rc,i5,y7e,q9,L$r,L7e,x$r,gDe,mr,j9,$$r,Pc,k$r,AY,S$r,R$r,yY,P$r,B$r,I$r,D9,N$r,x7e,q$r,j$r,D$r,Ot,G9,G$r,$7e,O$r,V$r,Bc,X$r,k7e,z$r,W$r,LY,Q$r,H$r,U$r,d5,J$r,Dr,O9,Y$r,S7e,K$r,Z$r,pn,ekr,R7e,okr,rkr,P7e,tkr,akr,B7e,nkr,skr,lkr,Le,c5,I7e,ikr,dkr,xY,ckr,fkr,mkr,f5,N7e,gkr,hkr,$Y,pkr,_kr,ukr,m5,q7e,bkr,vkr,kY,Fkr,Tkr,Mkr,g5,j7e,Ekr,Ckr,SY,wkr,Akr,ykr,h5,D7e,Lkr,xkr,RY,$kr,kkr,Skr,p5,G7e,Rkr,Pkr,PY,Bkr,Ikr,Nkr,_5,O7e,qkr,jkr,BY,Dkr,Gkr,Okr,u5,V7e,Vkr,Xkr,IY,zkr,Wkr,Qkr,b5,X7e,Hkr,Ukr,NY,Jkr,Ykr,Kkr,v5,z7e,Zkr,eSr,qY,oSr,rSr,tSr,F5,hDe,Ic,T5,W7e,V9,aSr,Q7e,nSr,pDe,gr,X9,sSr,Nc,lSr,jY,iSr,dSr,DY,cSr,fSr,mSr,z9,gSr,H7e,hSr,pSr,_Sr,Vt,W9,uSr,U7e,bSr,vSr,qc,FSr,J7e,TSr,MSr,GY,ESr,CSr,wSr,M5,ASr,Gr,Q9,ySr,Y7e,LSr,xSr,_n,$Sr,K7e,kSr,SSr,Z7e,RSr,PSr,eMe,BSr,ISr,NSr,Ee,E5,oMe,qSr,jSr,OY,DSr,GSr,OSr,C5,rMe,VSr,XSr,VY,zSr,WSr,QSr,w5,tMe,HSr,USr,XY,JSr,YSr,KSr,A5,aMe,ZSr,eRr,zY,oRr,rRr,tRr,y5,nMe,aRr,nRr,WY,sRr,lRr,iRr,L5,sMe,dRr,cRr,QY,fRr,mRr,gRr,x5,lMe,hRr,pRr,HY,_Rr,uRr,bRr,$5,iMe,vRr,FRr,UY,TRr,MRr,ERr,k5,dMe,CRr,wRr,JY,ARr,yRr,LRr,S5,cMe,xRr,$Rr,YY,kRr,SRr,RRr,R5,fMe,PRr,BRr,KY,IRr,NRr,qRr,P5,mMe,jRr,DRr,ZY,GRr,ORr,VRr,B5,_De,jc,I5,gMe,H9,XRr,hMe,zRr,uDe,hr,U9,WRr,Dc,QRr,eK,HRr,URr,oK,JRr,YRr,KRr,J9,ZRr,pMe,ePr,oPr,rPr,Xt,Y9,tPr,_Me,aPr,nPr,Gc,sPr,uMe,lPr,iPr,rK,dPr,cPr,fPr,N5,mPr,Or,K9,gPr,bMe,hPr,pPr,un,_Pr,vMe,uPr,bPr,FMe,vPr,FPr,TMe,TPr,MPr,EPr,xe,q5,MMe,CPr,wPr,tK,APr,yPr,LPr,j5,EMe,xPr,$Pr,aK,kPr,SPr,RPr,D5,CMe,PPr,BPr,nK,IPr,NPr,qPr,G5,wMe,jPr,DPr,sK,GPr,OPr,VPr,O5,AMe,XPr,zPr,lK,WPr,QPr,HPr,V5,yMe,UPr,JPr,iK,YPr,KPr,ZPr,X5,LMe,eBr,oBr,dK,rBr,tBr,aBr,z5,xMe,nBr,sBr,cK,lBr,iBr,dBr,W5,$Me,cBr,fBr,fK,mBr,gBr,hBr,Q5,kMe,pBr,_Br,mK,uBr,bBr,vBr,H5,bDe,Oc,U5,SMe,Z9,FBr,RMe,TBr,vDe,pr,ex,MBr,Vc,EBr,gK,CBr,wBr,hK,ABr,yBr,LBr,ox,xBr,PMe,$Br,kBr,SBr,zt,rx,RBr,BMe,PBr,BBr,Xc,IBr,IMe,NBr,qBr,pK,jBr,DBr,GBr,J5,OBr,Vr,tx,VBr,NMe,XBr,zBr,bn,WBr,qMe,QBr,HBr,jMe,UBr,JBr,DMe,YBr,KBr,ZBr,Pe,Y5,GMe,eIr,oIr,_K,rIr,tIr,aIr,K5,OMe,nIr,sIr,uK,lIr,iIr,dIr,Z5,VMe,cIr,fIr,bK,mIr,gIr,hIr,e0,XMe,pIr,_Ir,vK,uIr,bIr,vIr,o0,zMe,FIr,TIr,FK,MIr,EIr,CIr,r0,WMe,wIr,AIr,TK,yIr,LIr,xIr,t0,QMe,$Ir,kIr,MK,SIr,RIr,PIr,a0,HMe,BIr,IIr,EK,NIr,qIr,jIr,n0,UMe,DIr,GIr,CK,OIr,VIr,XIr,s0,FDe,zc,l0,JMe,ax,zIr,YMe,WIr,TDe,_r,nx,QIr,Wc,HIr,wK,UIr,JIr,AK,YIr,KIr,ZIr,sx,eNr,KMe,oNr,rNr,tNr,Wt,lx,aNr,ZMe,nNr,sNr,Qc,lNr,eEe,iNr,dNr,yK,cNr,fNr,mNr,i0,gNr,Xr,ix,hNr,oEe,pNr,_Nr,vn,uNr,rEe,bNr,vNr,tEe,FNr,TNr,aEe,MNr,ENr,CNr,$e,d0,nEe,wNr,ANr,LK,yNr,LNr,xNr,c0,sEe,$Nr,kNr,xK,SNr,RNr,PNr,f0,lEe,BNr,INr,$K,NNr,qNr,jNr,m0,iEe,DNr,GNr,kK,ONr,VNr,XNr,g0,dEe,zNr,WNr,SK,QNr,HNr,UNr,h0,cEe,JNr,YNr,RK,KNr,ZNr,eqr,p0,fEe,oqr,rqr,PK,tqr,aqr,nqr,_0,mEe,sqr,lqr,BK,iqr,dqr,cqr,u0,gEe,fqr,mqr,IK,gqr,hqr,pqr,b0,hEe,_qr,uqr,NK,bqr,vqr,Fqr,v0,MDe,Hc,F0,pEe,dx,Tqr,_Ee,Mqr,EDe,ur,cx,Eqr,Uc,Cqr,qK,wqr,Aqr,jK,yqr,Lqr,xqr,fx,$qr,uEe,kqr,Sqr,Rqr,Qt,mx,Pqr,bEe,Bqr,Iqr,Jc,Nqr,vEe,qqr,jqr,DK,Dqr,Gqr,Oqr,T0,Vqr,zr,gx,Xqr,FEe,zqr,Wqr,Fn,Qqr,TEe,Hqr,Uqr,MEe,Jqr,Yqr,EEe,Kqr,Zqr,ejr,ke,M0,CEe,ojr,rjr,GK,tjr,ajr,njr,E0,wEe,sjr,ljr,OK,ijr,djr,cjr,C0,AEe,fjr,mjr,VK,gjr,hjr,pjr,w0,yEe,_jr,ujr,XK,bjr,vjr,Fjr,A0,LEe,Tjr,Mjr,zK,Ejr,Cjr,wjr,y0,xEe,Ajr,yjr,WK,Ljr,xjr,$jr,L0,$Ee,kjr,Sjr,QK,Rjr,Pjr,Bjr,x0,kEe,Ijr,Njr,HK,qjr,jjr,Djr,$0,SEe,Gjr,Ojr,UK,Vjr,Xjr,zjr,k0,REe,Wjr,Qjr,JK,Hjr,Ujr,Jjr,S0,CDe,Yc,R0,PEe,hx,Yjr,BEe,Kjr,wDe,br,px,Zjr,Kc,eDr,YK,oDr,rDr,KK,tDr,aDr,nDr,_x,sDr,IEe,lDr,iDr,dDr,Ht,ux,cDr,NEe,fDr,mDr,Zc,gDr,qEe,hDr,pDr,ZK,_Dr,uDr,bDr,P0,vDr,Wr,bx,FDr,jEe,TDr,MDr,Tn,EDr,DEe,CDr,wDr,GEe,ADr,yDr,OEe,LDr,xDr,$Dr,Ge,B0,VEe,kDr,SDr,eZ,RDr,PDr,BDr,I0,XEe,IDr,NDr,oZ,qDr,jDr,DDr,N0,zEe,GDr,ODr,rZ,VDr,XDr,zDr,q0,WEe,WDr,QDr,tZ,HDr,UDr,JDr,j0,QEe,YDr,KDr,aZ,ZDr,eGr,oGr,D0,HEe,rGr,tGr,nZ,aGr,nGr,sGr,G0,UEe,lGr,iGr,sZ,dGr,cGr,fGr,O0,JEe,mGr,gGr,lZ,hGr,pGr,_Gr,V0,ADe,ef,X0,YEe,vx,uGr,KEe,bGr,yDe,vr,Fx,vGr,of,FGr,iZ,TGr,MGr,dZ,EGr,CGr,wGr,Tx,AGr,ZEe,yGr,LGr,xGr,Ut,Mx,$Gr,eCe,kGr,SGr,rf,RGr,oCe,PGr,BGr,cZ,IGr,NGr,qGr,z0,jGr,Qr,Ex,DGr,rCe,GGr,OGr,Mn,VGr,tCe,XGr,zGr,aCe,WGr,QGr,nCe,HGr,UGr,JGr,Oe,W0,sCe,YGr,KGr,fZ,ZGr,eOr,oOr,Q0,lCe,rOr,tOr,mZ,aOr,nOr,sOr,H0,iCe,lOr,iOr,gZ,dOr,cOr,fOr,U0,dCe,mOr,gOr,hZ,hOr,pOr,_Or,J0,cCe,uOr,bOr,pZ,vOr,FOr,TOr,Y0,fCe,MOr,EOr,_Z,COr,wOr,AOr,K0,mCe,yOr,LOr,uZ,xOr,$Or,kOr,Z0,gCe,SOr,ROr,bZ,POr,BOr,IOr,ew,LDe,tf,ow,hCe,Cx,NOr,pCe,qOr,xDe,Fr,wx,jOr,af,DOr,vZ,GOr,OOr,FZ,VOr,XOr,zOr,Ax,WOr,_Ce,QOr,HOr,UOr,Jt,yx,JOr,uCe,YOr,KOr,nf,ZOr,bCe,eVr,oVr,TZ,rVr,tVr,aVr,rw,nVr,Hr,Lx,sVr,vCe,lVr,iVr,En,dVr,FCe,cVr,fVr,TCe,mVr,gVr,MCe,hVr,pVr,_Vr,ECe,tw,CCe,uVr,bVr,MZ,vVr,FVr,TVr,aw,$De,sf,nw,wCe,xx,MVr,ACe,EVr,kDe,Tr,$x,CVr,lf,wVr,EZ,AVr,yVr,CZ,LVr,xVr,$Vr,kx,kVr,yCe,SVr,RVr,PVr,Yt,Sx,BVr,LCe,IVr,NVr,df,qVr,xCe,jVr,DVr,wZ,GVr,OVr,VVr,sw,XVr,Ur,Rx,zVr,$Ce,WVr,QVr,Cn,HVr,kCe,UVr,JVr,SCe,YVr,KVr,RCe,ZVr,eXr,oXr,Px,lw,PCe,rXr,tXr,AZ,aXr,nXr,sXr,iw,BCe,lXr,iXr,yZ,dXr,cXr,fXr,dw,SDe,cf,cw,ICe,Bx,mXr,NCe,gXr,RDe,Mr,Ix,hXr,ff,pXr,LZ,_Xr,uXr,xZ,bXr,vXr,FXr,Nx,TXr,qCe,MXr,EXr,CXr,Kt,qx,wXr,jCe,AXr,yXr,mf,LXr,DCe,xXr,$Xr,$Z,kXr,SXr,RXr,fw,PXr,Jr,jx,BXr,GCe,IXr,NXr,wn,qXr,OCe,jXr,DXr,VCe,GXr,OXr,XCe,VXr,XXr,zXr,zCe,mw,WCe,WXr,QXr,kZ,HXr,UXr,JXr,gw,PDe;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),BA=new te({}),IA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Tf=new YXr({props:{warning:!0,$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),NA=new te({}),qA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/configuration_auto.py#L587"}}),GA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/configuration_auto.py#L610"}}),wg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),OA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/configuration_auto.py#L733"}}),VA=new te({}),XA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/tokenization_auto.py#L391"}}),QA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17443/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/tokenization_auto.py#L405"}}),sh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),HA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/tokenization_auto.py#L604"}}),UA=new te({}),JA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),ZA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17443/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),qh=new YXr({props:{$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),jh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),ey=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),oy=new te({}),ry=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/processing_auto.py#L88"}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/processing_auto.py#L102"}}),np=new YXr({props:{$$slots:{default:[eSt]},$$scope:{ctx:L}}}),sp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),sy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/processing_auto.py#L255"}}),ly=new te({}),iy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L739"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),dp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),nu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),my=new te({}),gy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L746"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),lu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),Yu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),uy=new te({}),by=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L761"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),Zu=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),j4=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),My=new te({}),Ey=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L768"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),G4=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),C1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[dSt]},$$scope:{ctx:L}}}),yy=new te({}),Ly=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L775"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),A1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),X1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[fSt]},$$scope:{ctx:L}}}),Sy=new te({}),Ry=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L784"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),W1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),Gb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),Ny=new te({}),qy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L818"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),Vb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),F2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),Oy=new te({}),Vy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L825"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),M2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),x2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),Qy=new te({}),Hy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L811"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),k2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),gv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),Ky=new te({}),Zy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L793"}}),oL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),pv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),t3=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),tL=new te({}),aL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L800"}}),sL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),n3=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),i3=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),iL=new te({}),dL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L834"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),c3=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),gL=new te({}),hL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L873"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),bL=new te({}),vL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L880"}}),TL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),k3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),O3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),EL=new te({}),CL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L903"}}),AL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),X3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[$St]},$$scope:{ctx:L}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),Y3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[kSt]},$$scope:{ctx:L}}}),LL=new te({}),xL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L887"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),Z3=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[SSt]},$$scope:{ctx:L}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),cF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[RSt]},$$scope:{ctx:L}}}),RL=new te({}),PL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L894"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),mF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[PSt]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),_F=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[BSt]},$$scope:{ctx:L}}}),jL=new te({}),DL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L912"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),bF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[ISt]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),wF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[NSt]},$$scope:{ctx:L}}}),XL=new te({}),zL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L919"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),yF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[qSt]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),SF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[jSt]},$$scope:{ctx:L}}}),UL=new te({}),JL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L866"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),PF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[DSt]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),qF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[GSt]},$$scope:{ctx:L}}}),o8=new te({}),r8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L841"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[OSt]},$$scope:{ctx:L}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[VSt]},$$scope:{ctx:L}}}),s8=new te({}),l8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L848"}}),d8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[XSt]},$$scope:{ctx:L}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),YF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[zSt]},$$scope:{ctx:L}}}),f8=new te({}),m8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_auto.py#L857"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),ZF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[WSt]},$$scope:{ctx:L}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),rT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[QSt]},$$scope:{ctx:L}}}),_8=new te({}),u8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),v8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),aT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[HSt]},$$scope:{ctx:L}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),YT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[USt]},$$scope:{ctx:L}}}),T8=new te({}),M8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),C8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),ZT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[JSt]},$$scope:{ctx:L}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),E7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[YSt]},$$scope:{ctx:L}}}),A8=new te({}),y8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),x8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),w7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[KSt]},$$scope:{ctx:L}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),j7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ZSt]},$$scope:{ctx:L}}}),k8=new te({}),S8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),P8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),G7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[eRt]},$$scope:{ctx:L}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),W7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[oRt]},$$scope:{ctx:L}}}),I8=new te({}),N8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),j8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),H7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[rRt]},$$scope:{ctx:L}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),pM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[tRt]},$$scope:{ctx:L}}}),G8=new te({}),O8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),X8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[aRt]},$$scope:{ctx:L}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),LM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[nRt]},$$scope:{ctx:L}}}),W8=new te({}),Q8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),U8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),$M=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[sRt]},$$scope:{ctx:L}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),tE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[lRt]},$$scope:{ctx:L}}}),Y8=new te({}),K8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),e9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),nE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[iRt]},$$scope:{ctx:L}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[dRt]},$$scope:{ctx:L}}}),r9=new te({}),t9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),n9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[cRt]},$$scope:{ctx:L}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[fRt]},$$scope:{ctx:L}}}),i9=new te({}),d9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),f9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),$E=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[mRt]},$$scope:{ctx:L}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),SE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[gRt]},$$scope:{ctx:L}}}),g9=new te({}),h9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),_9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),PE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[hRt]},$$scope:{ctx:L}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),oC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[pRt]},$$scope:{ctx:L}}}),b9=new te({}),v9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),T9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),tC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[_Rt]},$$scope:{ctx:L}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[uRt]},$$scope:{ctx:L}}}),E9=new te({}),C9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),A9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),AC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[bRt]},$$scope:{ctx:L}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),LC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[vRt]},$$scope:{ctx:L}}}),L9=new te({}),x9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),k9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),$C=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[FRt]},$$scope:{ctx:L}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[TRt]},$$scope:{ctx:L}}}),R9=new te({}),P9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),I9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),PC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[MRt]},$$scope:{ctx:L}}}),N9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),l5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[ERt]},$$scope:{ctx:L}}}),q9=new te({}),j9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),G9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),d5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[CRt]},$$scope:{ctx:L}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),F5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[wRt]},$$scope:{ctx:L}}}),V9=new te({}),X9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),W9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),M5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[ARt]},$$scope:{ctx:L}}}),Q9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),B5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[yRt]},$$scope:{ctx:L}}}),H9=new te({}),U9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),N5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[LRt]},$$scope:{ctx:L}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),H5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[xRt]},$$scope:{ctx:L}}}),Z9=new te({}),ex=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),J5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[$Rt]},$$scope:{ctx:L}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),s0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[kRt]},$$scope:{ctx:L}}}),ax=new te({}),nx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),i0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[SRt]},$$scope:{ctx:L}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),v0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[RRt]},$$scope:{ctx:L}}}),dx=new te({}),cx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),T0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[PRt]},$$scope:{ctx:L}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),S0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[BRt]},$$scope:{ctx:L}}}),hx=new te({}),px=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),P0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[IRt]},$$scope:{ctx:L}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),V0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[NRt]},$$scope:{ctx:L}}}),vx=new te({}),Fx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),z0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[qRt]},$$scope:{ctx:L}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),ew=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[jRt]},$$scope:{ctx:L}}}),Cx=new te({}),wx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),rw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[DRt]},$$scope:{ctx:L}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[GRt]},$$scope:{ctx:L}}}),xx=new te({}),$x=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[ORt]},$$scope:{ctx:L}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),dw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[VRt]},$$scope:{ctx:L}}}),Bx=new te({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L389"}}),fw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[XRt]},$$scope:{ctx:L}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/auto/auto_factory.py#L417"}}),gw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[zRt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),_f=l(),rt=a("p"),gi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=a("code"),kA=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),pi=o("Instantiating one of "),yn=a("a"),SA=o("AutoConfig"),Ln=o(", "),xn=a("a"),RA=o("AutoModel"),_i=o(`, and
`),$n=a("a"),PA=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),bf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),ek=o("will create a model that is an instance of "),bi=a("a"),ok=o("BertModel"),rk=o("."),Eo=l(),wa=a("p"),tk=o("There is one class of "),vf=a("code"),ak=o("AutoModel"),OOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),kqe=l(),vi=a("h2"),Ff=a("a"),Coe=a("span"),F(BA.$$.fragment),VOe=l(),woe=a("span"),XOe=o("Extending the Auto Classes"),Sqe=l(),kn=a("p"),zOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Aoe=a("code"),WOe=o("NewModel"),QOe=o(", make sure you have a "),yoe=a("code"),HOe=o("NewModelConfig"),UOe=o(` then you can add those to the auto
classes like this:`),Rqe=l(),F(IA.$$.fragment),Pqe=l(),nk=a("p"),JOe=o("You will then be able to use the auto classes like you would usually do!"),Bqe=l(),F(Tf.$$.fragment),Iqe=l(),Fi=a("h2"),Mf=a("a"),Loe=a("span"),F(NA.$$.fragment),YOe=l(),xoe=a("span"),KOe=o("AutoConfig"),Nqe=l(),Co=a("div"),F(qA.$$.fragment),ZOe=l(),jA=a("p"),eVe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),sk=a("a"),oVe=o("from_pretrained()"),rVe=o(" class method."),tVe=l(),DA=a("p"),aVe=o("This class cannot be instantiated directly using "),$oe=a("code"),nVe=o("__init__()"),sVe=o(" (throws an error)."),lVe=l(),Er=a("div"),F(GA.$$.fragment),iVe=l(),koe=a("p"),dVe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),cVe=l(),Ti=a("p"),fVe=o("The configuration class to instantiate is selected based on the "),Soe=a("code"),mVe=o("model_type"),gVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Roe=a("code"),hVe=o("pretrained_model_name_or_path"),pVe=o(":"),_Ve=l(),A=a("ul"),Ef=a("li"),Poe=a("strong"),uVe=o("albert"),bVe=o(" \u2014 "),lk=a("a"),vVe=o("AlbertConfig"),FVe=o(" (ALBERT model)"),TVe=l(),Cf=a("li"),Boe=a("strong"),MVe=o("bart"),EVe=o(" \u2014 "),ik=a("a"),CVe=o("BartConfig"),wVe=o(" (BART model)"),AVe=l(),wf=a("li"),Ioe=a("strong"),yVe=o("beit"),LVe=o(" \u2014 "),dk=a("a"),xVe=o("BeitConfig"),$Ve=o(" (BEiT model)"),kVe=l(),Af=a("li"),Noe=a("strong"),SVe=o("bert"),RVe=o(" \u2014 "),ck=a("a"),PVe=o("BertConfig"),BVe=o(" (BERT model)"),IVe=l(),yf=a("li"),qoe=a("strong"),NVe=o("bert-generation"),qVe=o(" \u2014 "),fk=a("a"),jVe=o("BertGenerationConfig"),DVe=o(" (Bert Generation model)"),GVe=l(),Lf=a("li"),joe=a("strong"),OVe=o("big_bird"),VVe=o(" \u2014 "),mk=a("a"),XVe=o("BigBirdConfig"),zVe=o(" (BigBird model)"),WVe=l(),xf=a("li"),Doe=a("strong"),QVe=o("bigbird_pegasus"),HVe=o(" \u2014 "),gk=a("a"),UVe=o("BigBirdPegasusConfig"),JVe=o(" (BigBirdPegasus model)"),YVe=l(),$f=a("li"),Goe=a("strong"),KVe=o("blenderbot"),ZVe=o(" \u2014 "),hk=a("a"),eXe=o("BlenderbotConfig"),oXe=o(" (Blenderbot model)"),rXe=l(),kf=a("li"),Ooe=a("strong"),tXe=o("blenderbot-small"),aXe=o(" \u2014 "),pk=a("a"),nXe=o("BlenderbotSmallConfig"),sXe=o(" (BlenderbotSmall model)"),lXe=l(),Sf=a("li"),Voe=a("strong"),iXe=o("camembert"),dXe=o(" \u2014 "),_k=a("a"),cXe=o("CamembertConfig"),fXe=o(" (CamemBERT model)"),mXe=l(),Rf=a("li"),Xoe=a("strong"),gXe=o("canine"),hXe=o(" \u2014 "),uk=a("a"),pXe=o("CanineConfig"),_Xe=o(" (Canine model)"),uXe=l(),Pf=a("li"),zoe=a("strong"),bXe=o("clip"),vXe=o(" \u2014 "),bk=a("a"),FXe=o("CLIPConfig"),TXe=o(" (CLIP model)"),MXe=l(),Bf=a("li"),Woe=a("strong"),EXe=o("codegen"),CXe=o(" \u2014 "),vk=a("a"),wXe=o("CodeGenConfig"),AXe=o(" (CodeGen model)"),yXe=l(),If=a("li"),Qoe=a("strong"),LXe=o("convbert"),xXe=o(" \u2014 "),Fk=a("a"),$Xe=o("ConvBertConfig"),kXe=o(" (ConvBERT model)"),SXe=l(),Nf=a("li"),Hoe=a("strong"),RXe=o("convnext"),PXe=o(" \u2014 "),Tk=a("a"),BXe=o("ConvNextConfig"),IXe=o(" (ConvNext model)"),NXe=l(),qf=a("li"),Uoe=a("strong"),qXe=o("ctrl"),jXe=o(" \u2014 "),Mk=a("a"),DXe=o("CTRLConfig"),GXe=o(" (CTRL model)"),OXe=l(),jf=a("li"),Joe=a("strong"),VXe=o("cvt"),XXe=o(" \u2014 "),Ek=a("a"),zXe=o("CvtConfig"),WXe=o(" (CvT model)"),QXe=l(),Df=a("li"),Yoe=a("strong"),HXe=o("data2vec-audio"),UXe=o(" \u2014 "),Ck=a("a"),JXe=o("Data2VecAudioConfig"),YXe=o(" (Data2VecAudio model)"),KXe=l(),Gf=a("li"),Koe=a("strong"),ZXe=o("data2vec-text"),eze=o(" \u2014 "),wk=a("a"),oze=o("Data2VecTextConfig"),rze=o(" (Data2VecText model)"),tze=l(),Of=a("li"),Zoe=a("strong"),aze=o("data2vec-vision"),nze=o(" \u2014 "),Ak=a("a"),sze=o("Data2VecVisionConfig"),lze=o(" (Data2VecVision model)"),ize=l(),Vf=a("li"),ere=a("strong"),dze=o("deberta"),cze=o(" \u2014 "),yk=a("a"),fze=o("DebertaConfig"),mze=o(" (DeBERTa model)"),gze=l(),Xf=a("li"),ore=a("strong"),hze=o("deberta-v2"),pze=o(" \u2014 "),Lk=a("a"),_ze=o("DebertaV2Config"),uze=o(" (DeBERTa-v2 model)"),bze=l(),zf=a("li"),rre=a("strong"),vze=o("decision_transformer"),Fze=o(" \u2014 "),xk=a("a"),Tze=o("DecisionTransformerConfig"),Mze=o(" (Decision Transformer model)"),Eze=l(),Wf=a("li"),tre=a("strong"),Cze=o("deit"),wze=o(" \u2014 "),$k=a("a"),Aze=o("DeiTConfig"),yze=o(" (DeiT model)"),Lze=l(),Qf=a("li"),are=a("strong"),xze=o("detr"),$ze=o(" \u2014 "),kk=a("a"),kze=o("DetrConfig"),Sze=o(" (DETR model)"),Rze=l(),Hf=a("li"),nre=a("strong"),Pze=o("distilbert"),Bze=o(" \u2014 "),Sk=a("a"),Ize=o("DistilBertConfig"),Nze=o(" (DistilBERT model)"),qze=l(),Uf=a("li"),sre=a("strong"),jze=o("dpr"),Dze=o(" \u2014 "),Rk=a("a"),Gze=o("DPRConfig"),Oze=o(" (DPR model)"),Vze=l(),Jf=a("li"),lre=a("strong"),Xze=o("dpt"),zze=o(" \u2014 "),Pk=a("a"),Wze=o("DPTConfig"),Qze=o(" (DPT model)"),Hze=l(),Yf=a("li"),ire=a("strong"),Uze=o("electra"),Jze=o(" \u2014 "),Bk=a("a"),Yze=o("ElectraConfig"),Kze=o(" (ELECTRA model)"),Zze=l(),Kf=a("li"),dre=a("strong"),eWe=o("encoder-decoder"),oWe=o(" \u2014 "),Ik=a("a"),rWe=o("EncoderDecoderConfig"),tWe=o(" (Encoder decoder model)"),aWe=l(),Zf=a("li"),cre=a("strong"),nWe=o("flaubert"),sWe=o(" \u2014 "),Nk=a("a"),lWe=o("FlaubertConfig"),iWe=o(" (FlauBERT model)"),dWe=l(),em=a("li"),fre=a("strong"),cWe=o("flava"),fWe=o(" \u2014 "),qk=a("a"),mWe=o("FlavaConfig"),gWe=o(" (Flava model)"),hWe=l(),om=a("li"),mre=a("strong"),pWe=o("fnet"),_We=o(" \u2014 "),jk=a("a"),uWe=o("FNetConfig"),bWe=o(" (FNet model)"),vWe=l(),rm=a("li"),gre=a("strong"),FWe=o("fsmt"),TWe=o(" \u2014 "),Dk=a("a"),MWe=o("FSMTConfig"),EWe=o(" (FairSeq Machine-Translation model)"),CWe=l(),tm=a("li"),hre=a("strong"),wWe=o("funnel"),AWe=o(" \u2014 "),Gk=a("a"),yWe=o("FunnelConfig"),LWe=o(" (Funnel Transformer model)"),xWe=l(),am=a("li"),pre=a("strong"),$We=o("glpn"),kWe=o(" \u2014 "),Ok=a("a"),SWe=o("GLPNConfig"),RWe=o(" (GLPN model)"),PWe=l(),nm=a("li"),_re=a("strong"),BWe=o("gpt2"),IWe=o(" \u2014 "),Vk=a("a"),NWe=o("GPT2Config"),qWe=o(" (OpenAI GPT-2 model)"),jWe=l(),sm=a("li"),ure=a("strong"),DWe=o("gpt_neo"),GWe=o(" \u2014 "),Xk=a("a"),OWe=o("GPTNeoConfig"),VWe=o(" (GPT Neo model)"),XWe=l(),lm=a("li"),bre=a("strong"),zWe=o("gpt_neox"),WWe=o(" \u2014 "),zk=a("a"),QWe=o("GPTNeoXConfig"),HWe=o(" (GPT NeoX model)"),UWe=l(),im=a("li"),vre=a("strong"),JWe=o("gptj"),YWe=o(" \u2014 "),Wk=a("a"),KWe=o("GPTJConfig"),ZWe=o(" (GPT-J model)"),eQe=l(),dm=a("li"),Fre=a("strong"),oQe=o("hubert"),rQe=o(" \u2014 "),Qk=a("a"),tQe=o("HubertConfig"),aQe=o(" (Hubert model)"),nQe=l(),cm=a("li"),Tre=a("strong"),sQe=o("ibert"),lQe=o(" \u2014 "),Hk=a("a"),iQe=o("IBertConfig"),dQe=o(" (I-BERT model)"),cQe=l(),fm=a("li"),Mre=a("strong"),fQe=o("imagegpt"),mQe=o(" \u2014 "),Uk=a("a"),gQe=o("ImageGPTConfig"),hQe=o(" (ImageGPT model)"),pQe=l(),mm=a("li"),Ere=a("strong"),_Qe=o("layoutlm"),uQe=o(" \u2014 "),Jk=a("a"),bQe=o("LayoutLMConfig"),vQe=o(" (LayoutLM model)"),FQe=l(),gm=a("li"),Cre=a("strong"),TQe=o("layoutlmv2"),MQe=o(" \u2014 "),Yk=a("a"),EQe=o("LayoutLMv2Config"),CQe=o(" (LayoutLMv2 model)"),wQe=l(),hm=a("li"),wre=a("strong"),AQe=o("layoutlmv3"),yQe=o(" \u2014 "),Kk=a("a"),LQe=o("LayoutLMv3Config"),xQe=o(" (LayoutLMv3 model)"),$Qe=l(),pm=a("li"),Are=a("strong"),kQe=o("led"),SQe=o(" \u2014 "),Zk=a("a"),RQe=o("LEDConfig"),PQe=o(" (LED model)"),BQe=l(),_m=a("li"),yre=a("strong"),IQe=o("longformer"),NQe=o(" \u2014 "),eS=a("a"),qQe=o("LongformerConfig"),jQe=o(" (Longformer model)"),DQe=l(),um=a("li"),Lre=a("strong"),GQe=o("luke"),OQe=o(" \u2014 "),oS=a("a"),VQe=o("LukeConfig"),XQe=o(" (LUKE model)"),zQe=l(),bm=a("li"),xre=a("strong"),WQe=o("lxmert"),QQe=o(" \u2014 "),rS=a("a"),HQe=o("LxmertConfig"),UQe=o(" (LXMERT model)"),JQe=l(),vm=a("li"),$re=a("strong"),YQe=o("m2m_100"),KQe=o(" \u2014 "),tS=a("a"),ZQe=o("M2M100Config"),eHe=o(" (M2M100 model)"),oHe=l(),Fm=a("li"),kre=a("strong"),rHe=o("marian"),tHe=o(" \u2014 "),aS=a("a"),aHe=o("MarianConfig"),nHe=o(" (Marian model)"),sHe=l(),Tm=a("li"),Sre=a("strong"),lHe=o("maskformer"),iHe=o(" \u2014 "),nS=a("a"),dHe=o("MaskFormerConfig"),cHe=o(" (MaskFormer model)"),fHe=l(),Mm=a("li"),Rre=a("strong"),mHe=o("mbart"),gHe=o(" \u2014 "),sS=a("a"),hHe=o("MBartConfig"),pHe=o(" (mBART model)"),_He=l(),Em=a("li"),Pre=a("strong"),uHe=o("megatron-bert"),bHe=o(" \u2014 "),lS=a("a"),vHe=o("MegatronBertConfig"),FHe=o(" (MegatronBert model)"),THe=l(),Cm=a("li"),Bre=a("strong"),MHe=o("mobilebert"),EHe=o(" \u2014 "),iS=a("a"),CHe=o("MobileBertConfig"),wHe=o(" (MobileBERT model)"),AHe=l(),wm=a("li"),Ire=a("strong"),yHe=o("mpnet"),LHe=o(" \u2014 "),dS=a("a"),xHe=o("MPNetConfig"),$He=o(" (MPNet model)"),kHe=l(),Am=a("li"),Nre=a("strong"),SHe=o("mt5"),RHe=o(" \u2014 "),cS=a("a"),PHe=o("MT5Config"),BHe=o(" (mT5 model)"),IHe=l(),ym=a("li"),qre=a("strong"),NHe=o("nystromformer"),qHe=o(" \u2014 "),fS=a("a"),jHe=o("NystromformerConfig"),DHe=o(" (Nystromformer model)"),GHe=l(),Lm=a("li"),jre=a("strong"),OHe=o("openai-gpt"),VHe=o(" \u2014 "),mS=a("a"),XHe=o("OpenAIGPTConfig"),zHe=o(" (OpenAI GPT model)"),WHe=l(),xm=a("li"),Dre=a("strong"),QHe=o("opt"),HHe=o(" \u2014 "),gS=a("a"),UHe=o("OPTConfig"),JHe=o(" (OPT model)"),YHe=l(),$m=a("li"),Gre=a("strong"),KHe=o("pegasus"),ZHe=o(" \u2014 "),hS=a("a"),eUe=o("PegasusConfig"),oUe=o(" (Pegasus model)"),rUe=l(),km=a("li"),Ore=a("strong"),tUe=o("perceiver"),aUe=o(" \u2014 "),pS=a("a"),nUe=o("PerceiverConfig"),sUe=o(" (Perceiver model)"),lUe=l(),Sm=a("li"),Vre=a("strong"),iUe=o("plbart"),dUe=o(" \u2014 "),_S=a("a"),cUe=o("PLBartConfig"),fUe=o(" (PLBart model)"),mUe=l(),Rm=a("li"),Xre=a("strong"),gUe=o("poolformer"),hUe=o(" \u2014 "),uS=a("a"),pUe=o("PoolFormerConfig"),_Ue=o(" (PoolFormer model)"),uUe=l(),Pm=a("li"),zre=a("strong"),bUe=o("prophetnet"),vUe=o(" \u2014 "),bS=a("a"),FUe=o("ProphetNetConfig"),TUe=o(" (ProphetNet model)"),MUe=l(),Bm=a("li"),Wre=a("strong"),EUe=o("qdqbert"),CUe=o(" \u2014 "),vS=a("a"),wUe=o("QDQBertConfig"),AUe=o(" (QDQBert model)"),yUe=l(),Im=a("li"),Qre=a("strong"),LUe=o("rag"),xUe=o(" \u2014 "),FS=a("a"),$Ue=o("RagConfig"),kUe=o(" (RAG model)"),SUe=l(),Nm=a("li"),Hre=a("strong"),RUe=o("realm"),PUe=o(" \u2014 "),TS=a("a"),BUe=o("RealmConfig"),IUe=o(" (Realm model)"),NUe=l(),qm=a("li"),Ure=a("strong"),qUe=o("reformer"),jUe=o(" \u2014 "),MS=a("a"),DUe=o("ReformerConfig"),GUe=o(" (Reformer model)"),OUe=l(),jm=a("li"),Jre=a("strong"),VUe=o("regnet"),XUe=o(" \u2014 "),ES=a("a"),zUe=o("RegNetConfig"),WUe=o(" (RegNet model)"),QUe=l(),Dm=a("li"),Yre=a("strong"),HUe=o("rembert"),UUe=o(" \u2014 "),CS=a("a"),JUe=o("RemBertConfig"),YUe=o(" (RemBERT model)"),KUe=l(),Gm=a("li"),Kre=a("strong"),ZUe=o("resnet"),eJe=o(" \u2014 "),wS=a("a"),oJe=o("ResNetConfig"),rJe=o(" (ResNet model)"),tJe=l(),Om=a("li"),Zre=a("strong"),aJe=o("retribert"),nJe=o(" \u2014 "),AS=a("a"),sJe=o("RetriBertConfig"),lJe=o(" (RetriBERT model)"),iJe=l(),Vm=a("li"),ete=a("strong"),dJe=o("roberta"),cJe=o(" \u2014 "),yS=a("a"),fJe=o("RobertaConfig"),mJe=o(" (RoBERTa model)"),gJe=l(),Xm=a("li"),ote=a("strong"),hJe=o("roformer"),pJe=o(" \u2014 "),LS=a("a"),_Je=o("RoFormerConfig"),uJe=o(" (RoFormer model)"),bJe=l(),zm=a("li"),rte=a("strong"),vJe=o("segformer"),FJe=o(" \u2014 "),xS=a("a"),TJe=o("SegformerConfig"),MJe=o(" (SegFormer model)"),EJe=l(),Wm=a("li"),tte=a("strong"),CJe=o("sew"),wJe=o(" \u2014 "),$S=a("a"),AJe=o("SEWConfig"),yJe=o(" (SEW model)"),LJe=l(),Qm=a("li"),ate=a("strong"),xJe=o("sew-d"),$Je=o(" \u2014 "),kS=a("a"),kJe=o("SEWDConfig"),SJe=o(" (SEW-D model)"),RJe=l(),Hm=a("li"),nte=a("strong"),PJe=o("speech-encoder-decoder"),BJe=o(" \u2014 "),SS=a("a"),IJe=o("SpeechEncoderDecoderConfig"),NJe=o(" (Speech Encoder decoder model)"),qJe=l(),Um=a("li"),ste=a("strong"),jJe=o("speech_to_text"),DJe=o(" \u2014 "),RS=a("a"),GJe=o("Speech2TextConfig"),OJe=o(" (Speech2Text model)"),VJe=l(),Jm=a("li"),lte=a("strong"),XJe=o("speech_to_text_2"),zJe=o(" \u2014 "),PS=a("a"),WJe=o("Speech2Text2Config"),QJe=o(" (Speech2Text2 model)"),HJe=l(),Ym=a("li"),ite=a("strong"),UJe=o("splinter"),JJe=o(" \u2014 "),BS=a("a"),YJe=o("SplinterConfig"),KJe=o(" (Splinter model)"),ZJe=l(),Km=a("li"),dte=a("strong"),eYe=o("squeezebert"),oYe=o(" \u2014 "),IS=a("a"),rYe=o("SqueezeBertConfig"),tYe=o(" (SqueezeBERT model)"),aYe=l(),Zm=a("li"),cte=a("strong"),nYe=o("swin"),sYe=o(" \u2014 "),NS=a("a"),lYe=o("SwinConfig"),iYe=o(" (Swin model)"),dYe=l(),eg=a("li"),fte=a("strong"),cYe=o("t5"),fYe=o(" \u2014 "),qS=a("a"),mYe=o("T5Config"),gYe=o(" (T5 model)"),hYe=l(),og=a("li"),mte=a("strong"),pYe=o("tapas"),_Ye=o(" \u2014 "),jS=a("a"),uYe=o("TapasConfig"),bYe=o(" (TAPAS model)"),vYe=l(),rg=a("li"),gte=a("strong"),FYe=o("trajectory_transformer"),TYe=o(" \u2014 "),DS=a("a"),MYe=o("TrajectoryTransformerConfig"),EYe=o(" (Trajectory Transformer model)"),CYe=l(),tg=a("li"),hte=a("strong"),wYe=o("transfo-xl"),AYe=o(" \u2014 "),GS=a("a"),yYe=o("TransfoXLConfig"),LYe=o(" (Transformer-XL model)"),xYe=l(),ag=a("li"),pte=a("strong"),$Ye=o("trocr"),kYe=o(" \u2014 "),OS=a("a"),SYe=o("TrOCRConfig"),RYe=o(" (TrOCR model)"),PYe=l(),ng=a("li"),_te=a("strong"),BYe=o("unispeech"),IYe=o(" \u2014 "),VS=a("a"),NYe=o("UniSpeechConfig"),qYe=o(" (UniSpeech model)"),jYe=l(),sg=a("li"),ute=a("strong"),DYe=o("unispeech-sat"),GYe=o(" \u2014 "),XS=a("a"),OYe=o("UniSpeechSatConfig"),VYe=o(" (UniSpeechSat model)"),XYe=l(),lg=a("li"),bte=a("strong"),zYe=o("van"),WYe=o(" \u2014 "),zS=a("a"),QYe=o("VanConfig"),HYe=o(" (VAN model)"),UYe=l(),ig=a("li"),vte=a("strong"),JYe=o("vilt"),YYe=o(" \u2014 "),WS=a("a"),KYe=o("ViltConfig"),ZYe=o(" (ViLT model)"),eKe=l(),dg=a("li"),Fte=a("strong"),oKe=o("vision-encoder-decoder"),rKe=o(" \u2014 "),QS=a("a"),tKe=o("VisionEncoderDecoderConfig"),aKe=o(" (Vision Encoder decoder model)"),nKe=l(),cg=a("li"),Tte=a("strong"),sKe=o("vision-text-dual-encoder"),lKe=o(" \u2014 "),HS=a("a"),iKe=o("VisionTextDualEncoderConfig"),dKe=o(" (VisionTextDualEncoder model)"),cKe=l(),fg=a("li"),Mte=a("strong"),fKe=o("visual_bert"),mKe=o(" \u2014 "),US=a("a"),gKe=o("VisualBertConfig"),hKe=o(" (VisualBert model)"),pKe=l(),mg=a("li"),Ete=a("strong"),_Ke=o("vit"),uKe=o(" \u2014 "),JS=a("a"),bKe=o("ViTConfig"),vKe=o(" (ViT model)"),FKe=l(),gg=a("li"),Cte=a("strong"),TKe=o("vit_mae"),MKe=o(" \u2014 "),YS=a("a"),EKe=o("ViTMAEConfig"),CKe=o(" (ViTMAE model)"),wKe=l(),hg=a("li"),wte=a("strong"),AKe=o("wav2vec2"),yKe=o(" \u2014 "),KS=a("a"),LKe=o("Wav2Vec2Config"),xKe=o(" (Wav2Vec2 model)"),$Ke=l(),pg=a("li"),Ate=a("strong"),kKe=o("wav2vec2-conformer"),SKe=o(" \u2014 "),ZS=a("a"),RKe=o("Wav2Vec2ConformerConfig"),PKe=o(" (Wav2Vec2-Conformer model)"),BKe=l(),_g=a("li"),yte=a("strong"),IKe=o("wavlm"),NKe=o(" \u2014 "),eR=a("a"),qKe=o("WavLMConfig"),jKe=o(" (WavLM model)"),DKe=l(),ug=a("li"),Lte=a("strong"),GKe=o("xglm"),OKe=o(" \u2014 "),oR=a("a"),VKe=o("XGLMConfig"),XKe=o(" (XGLM model)"),zKe=l(),bg=a("li"),xte=a("strong"),WKe=o("xlm"),QKe=o(" \u2014 "),rR=a("a"),HKe=o("XLMConfig"),UKe=o(" (XLM model)"),JKe=l(),vg=a("li"),$te=a("strong"),YKe=o("xlm-prophetnet"),KKe=o(" \u2014 "),tR=a("a"),ZKe=o("XLMProphetNetConfig"),eZe=o(" (XLMProphetNet model)"),oZe=l(),Fg=a("li"),kte=a("strong"),rZe=o("xlm-roberta"),tZe=o(" \u2014 "),aR=a("a"),aZe=o("XLMRobertaConfig"),nZe=o(" (XLM-RoBERTa model)"),sZe=l(),Tg=a("li"),Ste=a("strong"),lZe=o("xlm-roberta-xl"),iZe=o(" \u2014 "),nR=a("a"),dZe=o("XLMRobertaXLConfig"),cZe=o(" (XLM-RoBERTa-XL model)"),fZe=l(),Mg=a("li"),Rte=a("strong"),mZe=o("xlnet"),gZe=o(" \u2014 "),sR=a("a"),hZe=o("XLNetConfig"),pZe=o(" (XLNet model)"),_Ze=l(),Eg=a("li"),Pte=a("strong"),uZe=o("yolos"),bZe=o(" \u2014 "),lR=a("a"),vZe=o("YolosConfig"),FZe=o(" (YOLOS model)"),TZe=l(),Cg=a("li"),Bte=a("strong"),MZe=o("yoso"),EZe=o(" \u2014 "),iR=a("a"),CZe=o("YosoConfig"),wZe=o(" (YOSO model)"),AZe=l(),F(wg.$$.fragment),yZe=l(),Ag=a("div"),F(OA.$$.fragment),LZe=l(),Ite=a("p"),xZe=o("Register a new configuration for this class."),qqe=l(),Mi=a("h2"),yg=a("a"),Nte=a("span"),F(VA.$$.fragment),$Ze=l(),qte=a("span"),kZe=o("AutoTokenizer"),jqe=l(),wo=a("div"),F(XA.$$.fragment),SZe=l(),zA=a("p"),RZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),dR=a("a"),PZe=o("AutoTokenizer.from_pretrained()"),BZe=o(" class method."),IZe=l(),WA=a("p"),NZe=o("This class cannot be instantiated directly using "),jte=a("code"),qZe=o("__init__()"),jZe=o(" (throws an error)."),DZe=l(),Cr=a("div"),F(QA.$$.fragment),GZe=l(),Dte=a("p"),OZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),VZe=l(),Aa=a("p"),XZe=o("The tokenizer class to instantiate is selected based on the "),Gte=a("code"),zZe=o("model_type"),WZe=o(` property of the config object (either
passed as an argument or loaded from `),Ote=a("code"),QZe=o("pretrained_model_name_or_path"),HZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vte=a("code"),UZe=o("pretrained_model_name_or_path"),JZe=o(":"),YZe=l(),k=a("ul"),Sn=a("li"),Xte=a("strong"),KZe=o("albert"),ZZe=o(" \u2014 "),cR=a("a"),eeo=o("AlbertTokenizer"),oeo=o(" or "),fR=a("a"),reo=o("AlbertTokenizerFast"),teo=o(" (ALBERT model)"),aeo=l(),Rn=a("li"),zte=a("strong"),neo=o("bart"),seo=o(" \u2014 "),mR=a("a"),leo=o("BartTokenizer"),ieo=o(" or "),gR=a("a"),deo=o("BartTokenizerFast"),ceo=o(" (BART model)"),feo=l(),Pn=a("li"),Wte=a("strong"),meo=o("barthez"),geo=o(" \u2014 "),hR=a("a"),heo=o("BarthezTokenizer"),peo=o(" or "),pR=a("a"),_eo=o("BarthezTokenizerFast"),ueo=o(" (BARThez model)"),beo=l(),Lg=a("li"),Qte=a("strong"),veo=o("bartpho"),Feo=o(" \u2014 "),_R=a("a"),Teo=o("BartphoTokenizer"),Meo=o(" (BARTpho model)"),Eeo=l(),Bn=a("li"),Hte=a("strong"),Ceo=o("bert"),weo=o(" \u2014 "),uR=a("a"),Aeo=o("BertTokenizer"),yeo=o(" or "),bR=a("a"),Leo=o("BertTokenizerFast"),xeo=o(" (BERT model)"),$eo=l(),xg=a("li"),Ute=a("strong"),keo=o("bert-generation"),Seo=o(" \u2014 "),vR=a("a"),Reo=o("BertGenerationTokenizer"),Peo=o(" (Bert Generation model)"),Beo=l(),$g=a("li"),Jte=a("strong"),Ieo=o("bert-japanese"),Neo=o(" \u2014 "),FR=a("a"),qeo=o("BertJapaneseTokenizer"),jeo=o(" (BertJapanese model)"),Deo=l(),kg=a("li"),Yte=a("strong"),Geo=o("bertweet"),Oeo=o(" \u2014 "),TR=a("a"),Veo=o("BertweetTokenizer"),Xeo=o(" (Bertweet model)"),zeo=l(),In=a("li"),Kte=a("strong"),Weo=o("big_bird"),Qeo=o(" \u2014 "),MR=a("a"),Heo=o("BigBirdTokenizer"),Ueo=o(" or "),ER=a("a"),Jeo=o("BigBirdTokenizerFast"),Yeo=o(" (BigBird model)"),Keo=l(),Nn=a("li"),Zte=a("strong"),Zeo=o("bigbird_pegasus"),eoo=o(" \u2014 "),CR=a("a"),ooo=o("PegasusTokenizer"),roo=o(" or "),wR=a("a"),too=o("PegasusTokenizerFast"),aoo=o(" (BigBirdPegasus model)"),noo=l(),qn=a("li"),eae=a("strong"),soo=o("blenderbot"),loo=o(" \u2014 "),AR=a("a"),ioo=o("BlenderbotTokenizer"),doo=o(" or "),yR=a("a"),coo=o("BlenderbotTokenizerFast"),foo=o(" (Blenderbot model)"),moo=l(),Sg=a("li"),oae=a("strong"),goo=o("blenderbot-small"),hoo=o(" \u2014 "),LR=a("a"),poo=o("BlenderbotSmallTokenizer"),_oo=o(" (BlenderbotSmall model)"),uoo=l(),Rg=a("li"),rae=a("strong"),boo=o("byt5"),voo=o(" \u2014 "),xR=a("a"),Foo=o("ByT5Tokenizer"),Too=o(" (ByT5 model)"),Moo=l(),jn=a("li"),tae=a("strong"),Eoo=o("camembert"),Coo=o(" \u2014 "),$R=a("a"),woo=o("CamembertTokenizer"),Aoo=o(" or "),kR=a("a"),yoo=o("CamembertTokenizerFast"),Loo=o(" (CamemBERT model)"),xoo=l(),Pg=a("li"),aae=a("strong"),$oo=o("canine"),koo=o(" \u2014 "),SR=a("a"),Soo=o("CanineTokenizer"),Roo=o(" (Canine model)"),Poo=l(),Dn=a("li"),nae=a("strong"),Boo=o("clip"),Ioo=o(" \u2014 "),RR=a("a"),Noo=o("CLIPTokenizer"),qoo=o(" or "),PR=a("a"),joo=o("CLIPTokenizerFast"),Doo=o(" (CLIP model)"),Goo=l(),Gn=a("li"),sae=a("strong"),Ooo=o("codegen"),Voo=o(" \u2014 "),BR=a("a"),Xoo=o("GPT2Tokenizer"),zoo=o(" or "),IR=a("a"),Woo=o("GPT2TokenizerFast"),Qoo=o(" (CodeGen model)"),Hoo=l(),On=a("li"),lae=a("strong"),Uoo=o("convbert"),Joo=o(" \u2014 "),NR=a("a"),Yoo=o("ConvBertTokenizer"),Koo=o(" or "),qR=a("a"),Zoo=o("ConvBertTokenizerFast"),ero=o(" (ConvBERT model)"),oro=l(),Vn=a("li"),iae=a("strong"),rro=o("cpm"),tro=o(" \u2014 "),jR=a("a"),aro=o("CpmTokenizer"),nro=o(" or "),DR=a("a"),sro=o("CpmTokenizerFast"),lro=o(" (CPM model)"),iro=l(),Bg=a("li"),dae=a("strong"),dro=o("ctrl"),cro=o(" \u2014 "),GR=a("a"),fro=o("CTRLTokenizer"),mro=o(" (CTRL model)"),gro=l(),Xn=a("li"),cae=a("strong"),hro=o("data2vec-text"),pro=o(" \u2014 "),OR=a("a"),_ro=o("RobertaTokenizer"),uro=o(" or "),VR=a("a"),bro=o("RobertaTokenizerFast"),vro=o(" (Data2VecText model)"),Fro=l(),zn=a("li"),fae=a("strong"),Tro=o("deberta"),Mro=o(" \u2014 "),XR=a("a"),Ero=o("DebertaTokenizer"),Cro=o(" or "),zR=a("a"),wro=o("DebertaTokenizerFast"),Aro=o(" (DeBERTa model)"),yro=l(),Wn=a("li"),mae=a("strong"),Lro=o("deberta-v2"),xro=o(" \u2014 "),WR=a("a"),$ro=o("DebertaV2Tokenizer"),kro=o(" or "),QR=a("a"),Sro=o("DebertaV2TokenizerFast"),Rro=o(" (DeBERTa-v2 model)"),Pro=l(),Qn=a("li"),gae=a("strong"),Bro=o("distilbert"),Iro=o(" \u2014 "),HR=a("a"),Nro=o("DistilBertTokenizer"),qro=o(" or "),UR=a("a"),jro=o("DistilBertTokenizerFast"),Dro=o(" (DistilBERT model)"),Gro=l(),Hn=a("li"),hae=a("strong"),Oro=o("dpr"),Vro=o(" \u2014 "),JR=a("a"),Xro=o("DPRQuestionEncoderTokenizer"),zro=o(" or "),YR=a("a"),Wro=o("DPRQuestionEncoderTokenizerFast"),Qro=o(" (DPR model)"),Hro=l(),Un=a("li"),pae=a("strong"),Uro=o("electra"),Jro=o(" \u2014 "),KR=a("a"),Yro=o("ElectraTokenizer"),Kro=o(" or "),ZR=a("a"),Zro=o("ElectraTokenizerFast"),eto=o(" (ELECTRA model)"),oto=l(),Ig=a("li"),_ae=a("strong"),rto=o("flaubert"),tto=o(" \u2014 "),eP=a("a"),ato=o("FlaubertTokenizer"),nto=o(" (FlauBERT model)"),sto=l(),Jn=a("li"),uae=a("strong"),lto=o("fnet"),ito=o(" \u2014 "),oP=a("a"),dto=o("FNetTokenizer"),cto=o(" or "),rP=a("a"),fto=o("FNetTokenizerFast"),mto=o(" (FNet model)"),gto=l(),Ng=a("li"),bae=a("strong"),hto=o("fsmt"),pto=o(" \u2014 "),tP=a("a"),_to=o("FSMTTokenizer"),uto=o(" (FairSeq Machine-Translation model)"),bto=l(),Yn=a("li"),vae=a("strong"),vto=o("funnel"),Fto=o(" \u2014 "),aP=a("a"),Tto=o("FunnelTokenizer"),Mto=o(" or "),nP=a("a"),Eto=o("FunnelTokenizerFast"),Cto=o(" (Funnel Transformer model)"),wto=l(),Kn=a("li"),Fae=a("strong"),Ato=o("gpt2"),yto=o(" \u2014 "),sP=a("a"),Lto=o("GPT2Tokenizer"),xto=o(" or "),lP=a("a"),$to=o("GPT2TokenizerFast"),kto=o(" (OpenAI GPT-2 model)"),Sto=l(),Zn=a("li"),Tae=a("strong"),Rto=o("gpt_neo"),Pto=o(" \u2014 "),iP=a("a"),Bto=o("GPT2Tokenizer"),Ito=o(" or "),dP=a("a"),Nto=o("GPT2TokenizerFast"),qto=o(" (GPT Neo model)"),jto=l(),qg=a("li"),Mae=a("strong"),Dto=o("gpt_neox"),Gto=o(" \u2014 "),cP=a("a"),Oto=o("GPTNeoXTokenizerFast"),Vto=o(" (GPT NeoX model)"),Xto=l(),es=a("li"),Eae=a("strong"),zto=o("gptj"),Wto=o(" \u2014 "),fP=a("a"),Qto=o("GPT2Tokenizer"),Hto=o(" or "),mP=a("a"),Uto=o("GPT2TokenizerFast"),Jto=o(" (GPT-J model)"),Yto=l(),os=a("li"),Cae=a("strong"),Kto=o("herbert"),Zto=o(" \u2014 "),gP=a("a"),eao=o("HerbertTokenizer"),oao=o(" or "),hP=a("a"),rao=o("HerbertTokenizerFast"),tao=o(" (HerBERT model)"),aao=l(),jg=a("li"),wae=a("strong"),nao=o("hubert"),sao=o(" \u2014 "),pP=a("a"),lao=o("Wav2Vec2CTCTokenizer"),iao=o(" (Hubert model)"),dao=l(),rs=a("li"),Aae=a("strong"),cao=o("ibert"),fao=o(" \u2014 "),_P=a("a"),mao=o("RobertaTokenizer"),gao=o(" or "),uP=a("a"),hao=o("RobertaTokenizerFast"),pao=o(" (I-BERT model)"),_ao=l(),ts=a("li"),yae=a("strong"),uao=o("layoutlm"),bao=o(" \u2014 "),bP=a("a"),vao=o("LayoutLMTokenizer"),Fao=o(" or "),vP=a("a"),Tao=o("LayoutLMTokenizerFast"),Mao=o(" (LayoutLM model)"),Eao=l(),as=a("li"),Lae=a("strong"),Cao=o("layoutlmv2"),wao=o(" \u2014 "),FP=a("a"),Aao=o("LayoutLMv2Tokenizer"),yao=o(" or "),TP=a("a"),Lao=o("LayoutLMv2TokenizerFast"),xao=o(" (LayoutLMv2 model)"),$ao=l(),ns=a("li"),xae=a("strong"),kao=o("layoutlmv3"),Sao=o(" \u2014 "),MP=a("a"),Rao=o("LayoutLMv3Tokenizer"),Pao=o(" or "),EP=a("a"),Bao=o("LayoutLMv3TokenizerFast"),Iao=o(" (LayoutLMv3 model)"),Nao=l(),ss=a("li"),$ae=a("strong"),qao=o("layoutxlm"),jao=o(" \u2014 "),CP=a("a"),Dao=o("LayoutXLMTokenizer"),Gao=o(" or "),wP=a("a"),Oao=o("LayoutXLMTokenizerFast"),Vao=o(" (LayoutXLM model)"),Xao=l(),ls=a("li"),kae=a("strong"),zao=o("led"),Wao=o(" \u2014 "),AP=a("a"),Qao=o("LEDTokenizer"),Hao=o(" or "),yP=a("a"),Uao=o("LEDTokenizerFast"),Jao=o(" (LED model)"),Yao=l(),is=a("li"),Sae=a("strong"),Kao=o("longformer"),Zao=o(" \u2014 "),LP=a("a"),eno=o("LongformerTokenizer"),ono=o(" or "),xP=a("a"),rno=o("LongformerTokenizerFast"),tno=o(" (Longformer model)"),ano=l(),Dg=a("li"),Rae=a("strong"),nno=o("luke"),sno=o(" \u2014 "),$P=a("a"),lno=o("LukeTokenizer"),ino=o(" (LUKE model)"),dno=l(),ds=a("li"),Pae=a("strong"),cno=o("lxmert"),fno=o(" \u2014 "),kP=a("a"),mno=o("LxmertTokenizer"),gno=o(" or "),SP=a("a"),hno=o("LxmertTokenizerFast"),pno=o(" (LXMERT model)"),_no=l(),Gg=a("li"),Bae=a("strong"),uno=o("m2m_100"),bno=o(" \u2014 "),RP=a("a"),vno=o("M2M100Tokenizer"),Fno=o(" (M2M100 model)"),Tno=l(),Og=a("li"),Iae=a("strong"),Mno=o("marian"),Eno=o(" \u2014 "),PP=a("a"),Cno=o("MarianTokenizer"),wno=o(" (Marian model)"),Ano=l(),cs=a("li"),Nae=a("strong"),yno=o("mbart"),Lno=o(" \u2014 "),BP=a("a"),xno=o("MBartTokenizer"),$no=o(" or "),IP=a("a"),kno=o("MBartTokenizerFast"),Sno=o(" (mBART model)"),Rno=l(),fs=a("li"),qae=a("strong"),Pno=o("mbart50"),Bno=o(" \u2014 "),NP=a("a"),Ino=o("MBart50Tokenizer"),Nno=o(" or "),qP=a("a"),qno=o("MBart50TokenizerFast"),jno=o(" (mBART-50 model)"),Dno=l(),ms=a("li"),jae=a("strong"),Gno=o("megatron-bert"),Ono=o(" \u2014 "),jP=a("a"),Vno=o("BertTokenizer"),Xno=o(" or "),DP=a("a"),zno=o("BertTokenizerFast"),Wno=o(" (MegatronBert model)"),Qno=l(),Vg=a("li"),Dae=a("strong"),Hno=o("mluke"),Uno=o(" \u2014 "),GP=a("a"),Jno=o("MLukeTokenizer"),Yno=o(" (mLUKE model)"),Kno=l(),gs=a("li"),Gae=a("strong"),Zno=o("mobilebert"),eso=o(" \u2014 "),OP=a("a"),oso=o("MobileBertTokenizer"),rso=o(" or "),VP=a("a"),tso=o("MobileBertTokenizerFast"),aso=o(" (MobileBERT model)"),nso=l(),hs=a("li"),Oae=a("strong"),sso=o("mpnet"),lso=o(" \u2014 "),XP=a("a"),iso=o("MPNetTokenizer"),dso=o(" or "),zP=a("a"),cso=o("MPNetTokenizerFast"),fso=o(" (MPNet model)"),mso=l(),ps=a("li"),Vae=a("strong"),gso=o("mt5"),hso=o(" \u2014 "),WP=a("a"),pso=o("MT5Tokenizer"),_so=o(" or "),QP=a("a"),uso=o("MT5TokenizerFast"),bso=o(" (mT5 model)"),vso=l(),_s=a("li"),Xae=a("strong"),Fso=o("nystromformer"),Tso=o(" \u2014 "),HP=a("a"),Mso=o("AlbertTokenizer"),Eso=o(" or "),UP=a("a"),Cso=o("AlbertTokenizerFast"),wso=o(" (Nystromformer model)"),Aso=l(),us=a("li"),zae=a("strong"),yso=o("openai-gpt"),Lso=o(" \u2014 "),JP=a("a"),xso=o("OpenAIGPTTokenizer"),$so=o(" or "),YP=a("a"),kso=o("OpenAIGPTTokenizerFast"),Sso=o(" (OpenAI GPT model)"),Rso=l(),Xg=a("li"),Wae=a("strong"),Pso=o("opt"),Bso=o(" \u2014 "),KP=a("a"),Iso=o("GPT2Tokenizer"),Nso=o(" (OPT model)"),qso=l(),bs=a("li"),Qae=a("strong"),jso=o("pegasus"),Dso=o(" \u2014 "),ZP=a("a"),Gso=o("PegasusTokenizer"),Oso=o(" or "),eB=a("a"),Vso=o("PegasusTokenizerFast"),Xso=o(" (Pegasus model)"),zso=l(),zg=a("li"),Hae=a("strong"),Wso=o("perceiver"),Qso=o(" \u2014 "),oB=a("a"),Hso=o("PerceiverTokenizer"),Uso=o(" (Perceiver model)"),Jso=l(),Wg=a("li"),Uae=a("strong"),Yso=o("phobert"),Kso=o(" \u2014 "),rB=a("a"),Zso=o("PhobertTokenizer"),elo=o(" (PhoBERT model)"),olo=l(),Qg=a("li"),Jae=a("strong"),rlo=o("plbart"),tlo=o(" \u2014 "),tB=a("a"),alo=o("PLBartTokenizer"),nlo=o(" (PLBart model)"),slo=l(),Hg=a("li"),Yae=a("strong"),llo=o("prophetnet"),ilo=o(" \u2014 "),aB=a("a"),dlo=o("ProphetNetTokenizer"),clo=o(" (ProphetNet model)"),flo=l(),vs=a("li"),Kae=a("strong"),mlo=o("qdqbert"),glo=o(" \u2014 "),nB=a("a"),hlo=o("BertTokenizer"),plo=o(" or "),sB=a("a"),_lo=o("BertTokenizerFast"),ulo=o(" (QDQBert model)"),blo=l(),Ug=a("li"),Zae=a("strong"),vlo=o("rag"),Flo=o(" \u2014 "),lB=a("a"),Tlo=o("RagTokenizer"),Mlo=o(" (RAG model)"),Elo=l(),Fs=a("li"),ene=a("strong"),Clo=o("realm"),wlo=o(" \u2014 "),iB=a("a"),Alo=o("RealmTokenizer"),ylo=o(" or "),dB=a("a"),Llo=o("RealmTokenizerFast"),xlo=o(" (Realm model)"),$lo=l(),Ts=a("li"),one=a("strong"),klo=o("reformer"),Slo=o(" \u2014 "),cB=a("a"),Rlo=o("ReformerTokenizer"),Plo=o(" or "),fB=a("a"),Blo=o("ReformerTokenizerFast"),Ilo=o(" (Reformer model)"),Nlo=l(),Ms=a("li"),rne=a("strong"),qlo=o("rembert"),jlo=o(" \u2014 "),mB=a("a"),Dlo=o("RemBertTokenizer"),Glo=o(" or "),gB=a("a"),Olo=o("RemBertTokenizerFast"),Vlo=o(" (RemBERT model)"),Xlo=l(),Es=a("li"),tne=a("strong"),zlo=o("retribert"),Wlo=o(" \u2014 "),hB=a("a"),Qlo=o("RetriBertTokenizer"),Hlo=o(" or "),pB=a("a"),Ulo=o("RetriBertTokenizerFast"),Jlo=o(" (RetriBERT model)"),Ylo=l(),Cs=a("li"),ane=a("strong"),Klo=o("roberta"),Zlo=o(" \u2014 "),_B=a("a"),eio=o("RobertaTokenizer"),oio=o(" or "),uB=a("a"),rio=o("RobertaTokenizerFast"),tio=o(" (RoBERTa model)"),aio=l(),ws=a("li"),nne=a("strong"),nio=o("roformer"),sio=o(" \u2014 "),bB=a("a"),lio=o("RoFormerTokenizer"),iio=o(" or "),vB=a("a"),dio=o("RoFormerTokenizerFast"),cio=o(" (RoFormer model)"),fio=l(),Jg=a("li"),sne=a("strong"),mio=o("speech_to_text"),gio=o(" \u2014 "),FB=a("a"),hio=o("Speech2TextTokenizer"),pio=o(" (Speech2Text model)"),_io=l(),Yg=a("li"),lne=a("strong"),uio=o("speech_to_text_2"),bio=o(" \u2014 "),TB=a("a"),vio=o("Speech2Text2Tokenizer"),Fio=o(" (Speech2Text2 model)"),Tio=l(),As=a("li"),ine=a("strong"),Mio=o("splinter"),Eio=o(" \u2014 "),MB=a("a"),Cio=o("SplinterTokenizer"),wio=o(" or "),EB=a("a"),Aio=o("SplinterTokenizerFast"),yio=o(" (Splinter model)"),Lio=l(),ys=a("li"),dne=a("strong"),xio=o("squeezebert"),$io=o(" \u2014 "),CB=a("a"),kio=o("SqueezeBertTokenizer"),Sio=o(" or "),wB=a("a"),Rio=o("SqueezeBertTokenizerFast"),Pio=o(" (SqueezeBERT model)"),Bio=l(),Ls=a("li"),cne=a("strong"),Iio=o("t5"),Nio=o(" \u2014 "),AB=a("a"),qio=o("T5Tokenizer"),jio=o(" or "),yB=a("a"),Dio=o("T5TokenizerFast"),Gio=o(" (T5 model)"),Oio=l(),Kg=a("li"),fne=a("strong"),Vio=o("tapas"),Xio=o(" \u2014 "),LB=a("a"),zio=o("TapasTokenizer"),Wio=o(" (TAPAS model)"),Qio=l(),Zg=a("li"),mne=a("strong"),Hio=o("tapex"),Uio=o(" \u2014 "),xB=a("a"),Jio=o("TapexTokenizer"),Yio=o(" (TAPEX model)"),Kio=l(),eh=a("li"),gne=a("strong"),Zio=o("transfo-xl"),edo=o(" \u2014 "),$B=a("a"),odo=o("TransfoXLTokenizer"),rdo=o(" (Transformer-XL model)"),tdo=l(),xs=a("li"),hne=a("strong"),ado=o("visual_bert"),ndo=o(" \u2014 "),kB=a("a"),sdo=o("BertTokenizer"),ldo=o(" or "),SB=a("a"),ido=o("BertTokenizerFast"),ddo=o(" (VisualBert model)"),cdo=l(),oh=a("li"),pne=a("strong"),fdo=o("wav2vec2"),mdo=o(" \u2014 "),RB=a("a"),gdo=o("Wav2Vec2CTCTokenizer"),hdo=o(" (Wav2Vec2 model)"),pdo=l(),rh=a("li"),_ne=a("strong"),_do=o("wav2vec2-conformer"),udo=o(" \u2014 "),PB=a("a"),bdo=o("Wav2Vec2CTCTokenizer"),vdo=o(" (Wav2Vec2-Conformer model)"),Fdo=l(),th=a("li"),une=a("strong"),Tdo=o("wav2vec2_phoneme"),Mdo=o(" \u2014 "),BB=a("a"),Edo=o("Wav2Vec2PhonemeCTCTokenizer"),Cdo=o(" (Wav2Vec2Phoneme model)"),wdo=l(),$s=a("li"),bne=a("strong"),Ado=o("xglm"),ydo=o(" \u2014 "),IB=a("a"),Ldo=o("XGLMTokenizer"),xdo=o(" or "),NB=a("a"),$do=o("XGLMTokenizerFast"),kdo=o(" (XGLM model)"),Sdo=l(),ah=a("li"),vne=a("strong"),Rdo=o("xlm"),Pdo=o(" \u2014 "),qB=a("a"),Bdo=o("XLMTokenizer"),Ido=o(" (XLM model)"),Ndo=l(),nh=a("li"),Fne=a("strong"),qdo=o("xlm-prophetnet"),jdo=o(" \u2014 "),jB=a("a"),Ddo=o("XLMProphetNetTokenizer"),Gdo=o(" (XLMProphetNet model)"),Odo=l(),ks=a("li"),Tne=a("strong"),Vdo=o("xlm-roberta"),Xdo=o(" \u2014 "),DB=a("a"),zdo=o("XLMRobertaTokenizer"),Wdo=o(" or "),GB=a("a"),Qdo=o("XLMRobertaTokenizerFast"),Hdo=o(" (XLM-RoBERTa model)"),Udo=l(),Ss=a("li"),Mne=a("strong"),Jdo=o("xlm-roberta-xl"),Ydo=o(" \u2014 "),OB=a("a"),Kdo=o("RobertaTokenizer"),Zdo=o(" or "),VB=a("a"),eco=o("RobertaTokenizerFast"),oco=o(" (XLM-RoBERTa-XL model)"),rco=l(),Rs=a("li"),Ene=a("strong"),tco=o("xlnet"),aco=o(" \u2014 "),XB=a("a"),nco=o("XLNetTokenizer"),sco=o(" or "),zB=a("a"),lco=o("XLNetTokenizerFast"),ico=o(" (XLNet model)"),dco=l(),Ps=a("li"),Cne=a("strong"),cco=o("yoso"),fco=o(" \u2014 "),WB=a("a"),mco=o("AlbertTokenizer"),gco=o(" or "),QB=a("a"),hco=o("AlbertTokenizerFast"),pco=o(" (YOSO model)"),_co=l(),F(sh.$$.fragment),uco=l(),lh=a("div"),F(HA.$$.fragment),bco=l(),wne=a("p"),vco=o("Register a new tokenizer in this mapping."),Dqe=l(),Ei=a("h2"),ih=a("a"),Ane=a("span"),F(UA.$$.fragment),Fco=l(),yne=a("span"),Tco=o("AutoFeatureExtractor"),Gqe=l(),Ao=a("div"),F(JA.$$.fragment),Mco=l(),YA=a("p"),Eco=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),HB=a("a"),Cco=o("AutoFeatureExtractor.from_pretrained()"),wco=o(" class method."),Aco=l(),KA=a("p"),yco=o("This class cannot be instantiated directly using "),Lne=a("code"),Lco=o("__init__()"),xco=o(" (throws an error)."),$co=l(),He=a("div"),F(ZA.$$.fragment),kco=l(),xne=a("p"),Sco=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Rco=l(),ya=a("p"),Pco=o("The feature extractor class to instantiate is selected based on the "),$ne=a("code"),Bco=o("model_type"),Ico=o(` property of the config object
(either passed as an argument or loaded from `),kne=a("code"),Nco=o("pretrained_model_name_or_path"),qco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Sne=a("code"),jco=o("pretrained_model_name_or_path"),Dco=o(":"),Gco=l(),Y=a("ul"),dh=a("li"),Rne=a("strong"),Oco=o("beit"),Vco=o(" \u2014 "),UB=a("a"),Xco=o("BeitFeatureExtractor"),zco=o(" (BEiT model)"),Wco=l(),ch=a("li"),Pne=a("strong"),Qco=o("clip"),Hco=o(" \u2014 "),JB=a("a"),Uco=o("CLIPFeatureExtractor"),Jco=o(" (CLIP model)"),Yco=l(),fh=a("li"),Bne=a("strong"),Kco=o("convnext"),Zco=o(" \u2014 "),YB=a("a"),efo=o("ConvNextFeatureExtractor"),ofo=o(" (ConvNext model)"),rfo=l(),mh=a("li"),Ine=a("strong"),tfo=o("cvt"),afo=o(" \u2014 "),KB=a("a"),nfo=o("ConvNextFeatureExtractor"),sfo=o(" (CvT model)"),lfo=l(),gh=a("li"),Nne=a("strong"),ifo=o("data2vec-audio"),dfo=o(" \u2014 "),ZB=a("a"),cfo=o("Wav2Vec2FeatureExtractor"),ffo=o(" (Data2VecAudio model)"),mfo=l(),hh=a("li"),qne=a("strong"),gfo=o("data2vec-vision"),hfo=o(" \u2014 "),eI=a("a"),pfo=o("BeitFeatureExtractor"),_fo=o(" (Data2VecVision model)"),ufo=l(),ph=a("li"),jne=a("strong"),bfo=o("deit"),vfo=o(" \u2014 "),oI=a("a"),Ffo=o("DeiTFeatureExtractor"),Tfo=o(" (DeiT model)"),Mfo=l(),_h=a("li"),Dne=a("strong"),Efo=o("detr"),Cfo=o(" \u2014 "),rI=a("a"),wfo=o("DetrFeatureExtractor"),Afo=o(" (DETR model)"),yfo=l(),uh=a("li"),Gne=a("strong"),Lfo=o("dpt"),xfo=o(" \u2014 "),tI=a("a"),$fo=o("DPTFeatureExtractor"),kfo=o(" (DPT model)"),Sfo=l(),bh=a("li"),One=a("strong"),Rfo=o("flava"),Pfo=o(" \u2014 "),aI=a("a"),Bfo=o("FlavaFeatureExtractor"),Ifo=o(" (Flava model)"),Nfo=l(),vh=a("li"),Vne=a("strong"),qfo=o("glpn"),jfo=o(" \u2014 "),nI=a("a"),Dfo=o("GLPNFeatureExtractor"),Gfo=o(" (GLPN model)"),Ofo=l(),Fh=a("li"),Xne=a("strong"),Vfo=o("hubert"),Xfo=o(" \u2014 "),sI=a("a"),zfo=o("Wav2Vec2FeatureExtractor"),Wfo=o(" (Hubert model)"),Qfo=l(),Th=a("li"),zne=a("strong"),Hfo=o("imagegpt"),Ufo=o(" \u2014 "),lI=a("a"),Jfo=o("ImageGPTFeatureExtractor"),Yfo=o(" (ImageGPT model)"),Kfo=l(),Mh=a("li"),Wne=a("strong"),Zfo=o("layoutlmv2"),emo=o(" \u2014 "),iI=a("a"),omo=o("LayoutLMv2FeatureExtractor"),rmo=o(" (LayoutLMv2 model)"),tmo=l(),Eh=a("li"),Qne=a("strong"),amo=o("layoutlmv3"),nmo=o(" \u2014 "),dI=a("a"),smo=o("LayoutLMv3FeatureExtractor"),lmo=o(" (LayoutLMv3 model)"),imo=l(),Ch=a("li"),Hne=a("strong"),dmo=o("maskformer"),cmo=o(" \u2014 "),cI=a("a"),fmo=o("MaskFormerFeatureExtractor"),mmo=o(" (MaskFormer model)"),gmo=l(),wh=a("li"),Une=a("strong"),hmo=o("perceiver"),pmo=o(" \u2014 "),fI=a("a"),_mo=o("PerceiverFeatureExtractor"),umo=o(" (Perceiver model)"),bmo=l(),Ah=a("li"),Jne=a("strong"),vmo=o("poolformer"),Fmo=o(" \u2014 "),mI=a("a"),Tmo=o("PoolFormerFeatureExtractor"),Mmo=o(" (PoolFormer model)"),Emo=l(),yh=a("li"),Yne=a("strong"),Cmo=o("regnet"),wmo=o(" \u2014 "),gI=a("a"),Amo=o("ConvNextFeatureExtractor"),ymo=o(" (RegNet model)"),Lmo=l(),Lh=a("li"),Kne=a("strong"),xmo=o("resnet"),$mo=o(" \u2014 "),hI=a("a"),kmo=o("ConvNextFeatureExtractor"),Smo=o(" (ResNet model)"),Rmo=l(),xh=a("li"),Zne=a("strong"),Pmo=o("segformer"),Bmo=o(" \u2014 "),pI=a("a"),Imo=o("SegformerFeatureExtractor"),Nmo=o(" (SegFormer model)"),qmo=l(),$h=a("li"),ese=a("strong"),jmo=o("speech_to_text"),Dmo=o(" \u2014 "),_I=a("a"),Gmo=o("Speech2TextFeatureExtractor"),Omo=o(" (Speech2Text model)"),Vmo=l(),kh=a("li"),ose=a("strong"),Xmo=o("swin"),zmo=o(" \u2014 "),uI=a("a"),Wmo=o("ViTFeatureExtractor"),Qmo=o(" (Swin model)"),Hmo=l(),Sh=a("li"),rse=a("strong"),Umo=o("van"),Jmo=o(" \u2014 "),bI=a("a"),Ymo=o("ConvNextFeatureExtractor"),Kmo=o(" (VAN model)"),Zmo=l(),Rh=a("li"),tse=a("strong"),ego=o("vit"),ogo=o(" \u2014 "),vI=a("a"),rgo=o("ViTFeatureExtractor"),tgo=o(" (ViT model)"),ago=l(),Ph=a("li"),ase=a("strong"),ngo=o("vit_mae"),sgo=o(" \u2014 "),FI=a("a"),lgo=o("ViTFeatureExtractor"),igo=o(" (ViTMAE model)"),dgo=l(),Bh=a("li"),nse=a("strong"),cgo=o("wav2vec2"),fgo=o(" \u2014 "),TI=a("a"),mgo=o("Wav2Vec2FeatureExtractor"),ggo=o(" (Wav2Vec2 model)"),hgo=l(),Ih=a("li"),sse=a("strong"),pgo=o("wav2vec2-conformer"),_go=o(" \u2014 "),MI=a("a"),ugo=o("Wav2Vec2FeatureExtractor"),bgo=o(" (Wav2Vec2-Conformer model)"),vgo=l(),Nh=a("li"),lse=a("strong"),Fgo=o("yolos"),Tgo=o(" \u2014 "),EI=a("a"),Mgo=o("YolosFeatureExtractor"),Ego=o(" (YOLOS model)"),Cgo=l(),F(qh.$$.fragment),wgo=l(),F(jh.$$.fragment),Ago=l(),Dh=a("div"),F(ey.$$.fragment),ygo=l(),ise=a("p"),Lgo=o("Register a new feature extractor for this class."),Oqe=l(),Ci=a("h2"),Gh=a("a"),dse=a("span"),F(oy.$$.fragment),xgo=l(),cse=a("span"),$go=o("AutoProcessor"),Vqe=l(),yo=a("div"),F(ry.$$.fragment),kgo=l(),ty=a("p"),Sgo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),CI=a("a"),Rgo=o("AutoProcessor.from_pretrained()"),Pgo=o(" class method."),Bgo=l(),ay=a("p"),Igo=o("This class cannot be instantiated directly using "),fse=a("code"),Ngo=o("__init__()"),qgo=o(" (throws an error)."),jgo=l(),Ue=a("div"),F(ny.$$.fragment),Dgo=l(),mse=a("p"),Ggo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ogo=l(),wi=a("p"),Vgo=o("The processor class to instantiate is selected based on the "),gse=a("code"),Xgo=o("model_type"),zgo=o(` property of the config object (either
passed as an argument or loaded from `),hse=a("code"),Wgo=o("pretrained_model_name_or_path"),Qgo=o(" if possible):"),Hgo=l(),he=a("ul"),Oh=a("li"),pse=a("strong"),Ugo=o("clip"),Jgo=o(" \u2014 "),wI=a("a"),Ygo=o("CLIPProcessor"),Kgo=o(" (CLIP model)"),Zgo=l(),Vh=a("li"),_se=a("strong"),eho=o("flava"),oho=o(" \u2014 "),use=a("code"),rho=o("FLAVAProcessor"),tho=o(" (Flava model)"),aho=l(),Xh=a("li"),bse=a("strong"),nho=o("layoutlmv2"),sho=o(" \u2014 "),AI=a("a"),lho=o("LayoutLMv2Processor"),iho=o(" (LayoutLMv2 model)"),dho=l(),zh=a("li"),vse=a("strong"),cho=o("layoutlmv3"),fho=o(" \u2014 "),yI=a("a"),mho=o("LayoutLMv3Processor"),gho=o(" (LayoutLMv3 model)"),hho=l(),Wh=a("li"),Fse=a("strong"),pho=o("layoutxlm"),_ho=o(" \u2014 "),LI=a("a"),uho=o("LayoutXLMProcessor"),bho=o(" (LayoutXLM model)"),vho=l(),Qh=a("li"),Tse=a("strong"),Fho=o("sew"),Tho=o(" \u2014 "),xI=a("a"),Mho=o("Wav2Vec2Processor"),Eho=o(" (SEW model)"),Cho=l(),Hh=a("li"),Mse=a("strong"),who=o("sew-d"),Aho=o(" \u2014 "),$I=a("a"),yho=o("Wav2Vec2Processor"),Lho=o(" (SEW-D model)"),xho=l(),Uh=a("li"),Ese=a("strong"),$ho=o("speech_to_text"),kho=o(" \u2014 "),kI=a("a"),Sho=o("Speech2TextProcessor"),Rho=o(" (Speech2Text model)"),Pho=l(),Jh=a("li"),Cse=a("strong"),Bho=o("speech_to_text_2"),Iho=o(" \u2014 "),SI=a("a"),Nho=o("Speech2Text2Processor"),qho=o(" (Speech2Text2 model)"),jho=l(),Yh=a("li"),wse=a("strong"),Dho=o("trocr"),Gho=o(" \u2014 "),RI=a("a"),Oho=o("TrOCRProcessor"),Vho=o(" (TrOCR model)"),Xho=l(),Kh=a("li"),Ase=a("strong"),zho=o("unispeech"),Who=o(" \u2014 "),PI=a("a"),Qho=o("Wav2Vec2Processor"),Hho=o(" (UniSpeech model)"),Uho=l(),Zh=a("li"),yse=a("strong"),Jho=o("unispeech-sat"),Yho=o(" \u2014 "),BI=a("a"),Kho=o("Wav2Vec2Processor"),Zho=o(" (UniSpeechSat model)"),epo=l(),ep=a("li"),Lse=a("strong"),opo=o("vilt"),rpo=o(" \u2014 "),II=a("a"),tpo=o("ViltProcessor"),apo=o(" (ViLT model)"),npo=l(),op=a("li"),xse=a("strong"),spo=o("vision-text-dual-encoder"),lpo=o(" \u2014 "),NI=a("a"),ipo=o("VisionTextDualEncoderProcessor"),dpo=o(" (VisionTextDualEncoder model)"),cpo=l(),rp=a("li"),$se=a("strong"),fpo=o("wav2vec2"),mpo=o(" \u2014 "),qI=a("a"),gpo=o("Wav2Vec2Processor"),hpo=o(" (Wav2Vec2 model)"),ppo=l(),tp=a("li"),kse=a("strong"),_po=o("wav2vec2-conformer"),upo=o(" \u2014 "),jI=a("a"),bpo=o("Wav2Vec2Processor"),vpo=o(" (Wav2Vec2-Conformer model)"),Fpo=l(),ap=a("li"),Sse=a("strong"),Tpo=o("wavlm"),Mpo=o(" \u2014 "),DI=a("a"),Epo=o("Wav2Vec2Processor"),Cpo=o(" (WavLM model)"),wpo=l(),F(np.$$.fragment),Apo=l(),F(sp.$$.fragment),ypo=l(),lp=a("div"),F(sy.$$.fragment),Lpo=l(),Rse=a("p"),xpo=o("Register a new processor for this class."),Xqe=l(),Ai=a("h2"),ip=a("a"),Pse=a("span"),F(ly.$$.fragment),$po=l(),Bse=a("span"),kpo=o("AutoModel"),zqe=l(),Lo=a("div"),F(iy.$$.fragment),Spo=l(),yi=a("p"),Rpo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GI=a("a"),Ppo=o("from_pretrained()"),Bpo=o(" class method or the "),OI=a("a"),Ipo=o("from_config()"),Npo=o(` class
method.`),qpo=l(),dy=a("p"),jpo=o("This class cannot be instantiated directly using "),Ise=a("code"),Dpo=o("__init__()"),Gpo=o(" (throws an error)."),Opo=l(),tt=a("div"),F(cy.$$.fragment),Vpo=l(),Nse=a("p"),Xpo=o("Instantiates one of the base model classes of the library from a configuration."),zpo=l(),Li=a("p"),Wpo=o(`Note:
Loading a model from its configuration file does `),qse=a("strong"),Qpo=o("not"),Hpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VI=a("a"),Upo=o("from_pretrained()"),Jpo=o(" to load the model weights."),Ypo=l(),F(dp.$$.fragment),Kpo=l(),Je=a("div"),F(fy.$$.fragment),Zpo=l(),jse=a("p"),e_o=o("Instantiate one of the base model classes of the library from a pretrained model."),o_o=l(),La=a("p"),r_o=o("The model class to instantiate is selected based on the "),Dse=a("code"),t_o=o("model_type"),a_o=o(` property of the config object (either
passed as an argument or loaded from `),Gse=a("code"),n_o=o("pretrained_model_name_or_path"),s_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ose=a("code"),l_o=o("pretrained_model_name_or_path"),i_o=o(":"),d_o=l(),x=a("ul"),cp=a("li"),Vse=a("strong"),c_o=o("albert"),f_o=o(" \u2014 "),XI=a("a"),m_o=o("AlbertModel"),g_o=o(" (ALBERT model)"),h_o=l(),fp=a("li"),Xse=a("strong"),p_o=o("bart"),__o=o(" \u2014 "),zI=a("a"),u_o=o("BartModel"),b_o=o(" (BART model)"),v_o=l(),mp=a("li"),zse=a("strong"),F_o=o("beit"),T_o=o(" \u2014 "),WI=a("a"),M_o=o("BeitModel"),E_o=o(" (BEiT model)"),C_o=l(),gp=a("li"),Wse=a("strong"),w_o=o("bert"),A_o=o(" \u2014 "),QI=a("a"),y_o=o("BertModel"),L_o=o(" (BERT model)"),x_o=l(),hp=a("li"),Qse=a("strong"),$_o=o("bert-generation"),k_o=o(" \u2014 "),HI=a("a"),S_o=o("BertGenerationEncoder"),R_o=o(" (Bert Generation model)"),P_o=l(),pp=a("li"),Hse=a("strong"),B_o=o("big_bird"),I_o=o(" \u2014 "),UI=a("a"),N_o=o("BigBirdModel"),q_o=o(" (BigBird model)"),j_o=l(),_p=a("li"),Use=a("strong"),D_o=o("bigbird_pegasus"),G_o=o(" \u2014 "),JI=a("a"),O_o=o("BigBirdPegasusModel"),V_o=o(" (BigBirdPegasus model)"),X_o=l(),up=a("li"),Jse=a("strong"),z_o=o("blenderbot"),W_o=o(" \u2014 "),YI=a("a"),Q_o=o("BlenderbotModel"),H_o=o(" (Blenderbot model)"),U_o=l(),bp=a("li"),Yse=a("strong"),J_o=o("blenderbot-small"),Y_o=o(" \u2014 "),KI=a("a"),K_o=o("BlenderbotSmallModel"),Z_o=o(" (BlenderbotSmall model)"),euo=l(),vp=a("li"),Kse=a("strong"),ouo=o("camembert"),ruo=o(" \u2014 "),ZI=a("a"),tuo=o("CamembertModel"),auo=o(" (CamemBERT model)"),nuo=l(),Fp=a("li"),Zse=a("strong"),suo=o("canine"),luo=o(" \u2014 "),eN=a("a"),iuo=o("CanineModel"),duo=o(" (Canine model)"),cuo=l(),Tp=a("li"),ele=a("strong"),fuo=o("clip"),muo=o(" \u2014 "),oN=a("a"),guo=o("CLIPModel"),huo=o(" (CLIP model)"),puo=l(),Mp=a("li"),ole=a("strong"),_uo=o("codegen"),uuo=o(" \u2014 "),rN=a("a"),buo=o("CodeGenModel"),vuo=o(" (CodeGen model)"),Fuo=l(),Ep=a("li"),rle=a("strong"),Tuo=o("convbert"),Muo=o(" \u2014 "),tN=a("a"),Euo=o("ConvBertModel"),Cuo=o(" (ConvBERT model)"),wuo=l(),Cp=a("li"),tle=a("strong"),Auo=o("convnext"),yuo=o(" \u2014 "),aN=a("a"),Luo=o("ConvNextModel"),xuo=o(" (ConvNext model)"),$uo=l(),wp=a("li"),ale=a("strong"),kuo=o("ctrl"),Suo=o(" \u2014 "),nN=a("a"),Ruo=o("CTRLModel"),Puo=o(" (CTRL model)"),Buo=l(),Ap=a("li"),nle=a("strong"),Iuo=o("cvt"),Nuo=o(" \u2014 "),sN=a("a"),quo=o("CvtModel"),juo=o(" (CvT model)"),Duo=l(),yp=a("li"),sle=a("strong"),Guo=o("data2vec-audio"),Ouo=o(" \u2014 "),lN=a("a"),Vuo=o("Data2VecAudioModel"),Xuo=o(" (Data2VecAudio model)"),zuo=l(),Lp=a("li"),lle=a("strong"),Wuo=o("data2vec-text"),Quo=o(" \u2014 "),iN=a("a"),Huo=o("Data2VecTextModel"),Uuo=o(" (Data2VecText model)"),Juo=l(),xp=a("li"),ile=a("strong"),Yuo=o("data2vec-vision"),Kuo=o(" \u2014 "),dN=a("a"),Zuo=o("Data2VecVisionModel"),e4o=o(" (Data2VecVision model)"),o4o=l(),$p=a("li"),dle=a("strong"),r4o=o("deberta"),t4o=o(" \u2014 "),cN=a("a"),a4o=o("DebertaModel"),n4o=o(" (DeBERTa model)"),s4o=l(),kp=a("li"),cle=a("strong"),l4o=o("deberta-v2"),i4o=o(" \u2014 "),fN=a("a"),d4o=o("DebertaV2Model"),c4o=o(" (DeBERTa-v2 model)"),f4o=l(),Sp=a("li"),fle=a("strong"),m4o=o("decision_transformer"),g4o=o(" \u2014 "),mN=a("a"),h4o=o("DecisionTransformerModel"),p4o=o(" (Decision Transformer model)"),_4o=l(),Rp=a("li"),mle=a("strong"),u4o=o("deit"),b4o=o(" \u2014 "),gN=a("a"),v4o=o("DeiTModel"),F4o=o(" (DeiT model)"),T4o=l(),Pp=a("li"),gle=a("strong"),M4o=o("detr"),E4o=o(" \u2014 "),hN=a("a"),C4o=o("DetrModel"),w4o=o(" (DETR model)"),A4o=l(),Bp=a("li"),hle=a("strong"),y4o=o("distilbert"),L4o=o(" \u2014 "),pN=a("a"),x4o=o("DistilBertModel"),$4o=o(" (DistilBERT model)"),k4o=l(),Ip=a("li"),ple=a("strong"),S4o=o("dpr"),R4o=o(" \u2014 "),_N=a("a"),P4o=o("DPRQuestionEncoder"),B4o=o(" (DPR model)"),I4o=l(),Np=a("li"),_le=a("strong"),N4o=o("dpt"),q4o=o(" \u2014 "),uN=a("a"),j4o=o("DPTModel"),D4o=o(" (DPT model)"),G4o=l(),qp=a("li"),ule=a("strong"),O4o=o("electra"),V4o=o(" \u2014 "),bN=a("a"),X4o=o("ElectraModel"),z4o=o(" (ELECTRA model)"),W4o=l(),jp=a("li"),ble=a("strong"),Q4o=o("flaubert"),H4o=o(" \u2014 "),vN=a("a"),U4o=o("FlaubertModel"),J4o=o(" (FlauBERT model)"),Y4o=l(),Dp=a("li"),vle=a("strong"),K4o=o("flava"),Z4o=o(" \u2014 "),FN=a("a"),e1o=o("FlavaModel"),o1o=o(" (Flava model)"),r1o=l(),Gp=a("li"),Fle=a("strong"),t1o=o("fnet"),a1o=o(" \u2014 "),TN=a("a"),n1o=o("FNetModel"),s1o=o(" (FNet model)"),l1o=l(),Op=a("li"),Tle=a("strong"),i1o=o("fsmt"),d1o=o(" \u2014 "),MN=a("a"),c1o=o("FSMTModel"),f1o=o(" (FairSeq Machine-Translation model)"),m1o=l(),Bs=a("li"),Mle=a("strong"),g1o=o("funnel"),h1o=o(" \u2014 "),EN=a("a"),p1o=o("FunnelModel"),_1o=o(" or "),CN=a("a"),u1o=o("FunnelBaseModel"),b1o=o(" (Funnel Transformer model)"),v1o=l(),Vp=a("li"),Ele=a("strong"),F1o=o("glpn"),T1o=o(" \u2014 "),wN=a("a"),M1o=o("GLPNModel"),E1o=o(" (GLPN model)"),C1o=l(),Xp=a("li"),Cle=a("strong"),w1o=o("gpt2"),A1o=o(" \u2014 "),AN=a("a"),y1o=o("GPT2Model"),L1o=o(" (OpenAI GPT-2 model)"),x1o=l(),zp=a("li"),wle=a("strong"),$1o=o("gpt_neo"),k1o=o(" \u2014 "),yN=a("a"),S1o=o("GPTNeoModel"),R1o=o(" (GPT Neo model)"),P1o=l(),Wp=a("li"),Ale=a("strong"),B1o=o("gpt_neox"),I1o=o(" \u2014 "),LN=a("a"),N1o=o("GPTNeoXModel"),q1o=o(" (GPT NeoX model)"),j1o=l(),Qp=a("li"),yle=a("strong"),D1o=o("gptj"),G1o=o(" \u2014 "),xN=a("a"),O1o=o("GPTJModel"),V1o=o(" (GPT-J model)"),X1o=l(),Hp=a("li"),Lle=a("strong"),z1o=o("hubert"),W1o=o(" \u2014 "),$N=a("a"),Q1o=o("HubertModel"),H1o=o(" (Hubert model)"),U1o=l(),Up=a("li"),xle=a("strong"),J1o=o("ibert"),Y1o=o(" \u2014 "),kN=a("a"),K1o=o("IBertModel"),Z1o=o(" (I-BERT model)"),ebo=l(),Jp=a("li"),$le=a("strong"),obo=o("imagegpt"),rbo=o(" \u2014 "),SN=a("a"),tbo=o("ImageGPTModel"),abo=o(" (ImageGPT model)"),nbo=l(),Yp=a("li"),kle=a("strong"),sbo=o("layoutlm"),lbo=o(" \u2014 "),RN=a("a"),ibo=o("LayoutLMModel"),dbo=o(" (LayoutLM model)"),cbo=l(),Kp=a("li"),Sle=a("strong"),fbo=o("layoutlmv2"),mbo=o(" \u2014 "),PN=a("a"),gbo=o("LayoutLMv2Model"),hbo=o(" (LayoutLMv2 model)"),pbo=l(),Zp=a("li"),Rle=a("strong"),_bo=o("layoutlmv3"),ubo=o(" \u2014 "),BN=a("a"),bbo=o("LayoutLMv3Model"),vbo=o(" (LayoutLMv3 model)"),Fbo=l(),e_=a("li"),Ple=a("strong"),Tbo=o("led"),Mbo=o(" \u2014 "),IN=a("a"),Ebo=o("LEDModel"),Cbo=o(" (LED model)"),wbo=l(),o_=a("li"),Ble=a("strong"),Abo=o("longformer"),ybo=o(" \u2014 "),NN=a("a"),Lbo=o("LongformerModel"),xbo=o(" (Longformer model)"),$bo=l(),r_=a("li"),Ile=a("strong"),kbo=o("luke"),Sbo=o(" \u2014 "),qN=a("a"),Rbo=o("LukeModel"),Pbo=o(" (LUKE model)"),Bbo=l(),t_=a("li"),Nle=a("strong"),Ibo=o("lxmert"),Nbo=o(" \u2014 "),jN=a("a"),qbo=o("LxmertModel"),jbo=o(" (LXMERT model)"),Dbo=l(),a_=a("li"),qle=a("strong"),Gbo=o("m2m_100"),Obo=o(" \u2014 "),DN=a("a"),Vbo=o("M2M100Model"),Xbo=o(" (M2M100 model)"),zbo=l(),n_=a("li"),jle=a("strong"),Wbo=o("marian"),Qbo=o(" \u2014 "),GN=a("a"),Hbo=o("MarianModel"),Ubo=o(" (Marian model)"),Jbo=l(),s_=a("li"),Dle=a("strong"),Ybo=o("maskformer"),Kbo=o(" \u2014 "),ON=a("a"),Zbo=o("MaskFormerModel"),e2o=o(" (MaskFormer model)"),o2o=l(),l_=a("li"),Gle=a("strong"),r2o=o("mbart"),t2o=o(" \u2014 "),VN=a("a"),a2o=o("MBartModel"),n2o=o(" (mBART model)"),s2o=l(),i_=a("li"),Ole=a("strong"),l2o=o("megatron-bert"),i2o=o(" \u2014 "),XN=a("a"),d2o=o("MegatronBertModel"),c2o=o(" (MegatronBert model)"),f2o=l(),d_=a("li"),Vle=a("strong"),m2o=o("mobilebert"),g2o=o(" \u2014 "),zN=a("a"),h2o=o("MobileBertModel"),p2o=o(" (MobileBERT model)"),_2o=l(),c_=a("li"),Xle=a("strong"),u2o=o("mpnet"),b2o=o(" \u2014 "),WN=a("a"),v2o=o("MPNetModel"),F2o=o(" (MPNet model)"),T2o=l(),f_=a("li"),zle=a("strong"),M2o=o("mt5"),E2o=o(" \u2014 "),QN=a("a"),C2o=o("MT5Model"),w2o=o(" (mT5 model)"),A2o=l(),m_=a("li"),Wle=a("strong"),y2o=o("nystromformer"),L2o=o(" \u2014 "),HN=a("a"),x2o=o("NystromformerModel"),$2o=o(" (Nystromformer model)"),k2o=l(),g_=a("li"),Qle=a("strong"),S2o=o("openai-gpt"),R2o=o(" \u2014 "),UN=a("a"),P2o=o("OpenAIGPTModel"),B2o=o(" (OpenAI GPT model)"),I2o=l(),h_=a("li"),Hle=a("strong"),N2o=o("opt"),q2o=o(" \u2014 "),JN=a("a"),j2o=o("OPTModel"),D2o=o(" (OPT model)"),G2o=l(),p_=a("li"),Ule=a("strong"),O2o=o("pegasus"),V2o=o(" \u2014 "),YN=a("a"),X2o=o("PegasusModel"),z2o=o(" (Pegasus model)"),W2o=l(),__=a("li"),Jle=a("strong"),Q2o=o("perceiver"),H2o=o(" \u2014 "),KN=a("a"),U2o=o("PerceiverModel"),J2o=o(" (Perceiver model)"),Y2o=l(),u_=a("li"),Yle=a("strong"),K2o=o("plbart"),Z2o=o(" \u2014 "),ZN=a("a"),evo=o("PLBartModel"),ovo=o(" (PLBart model)"),rvo=l(),b_=a("li"),Kle=a("strong"),tvo=o("poolformer"),avo=o(" \u2014 "),eq=a("a"),nvo=o("PoolFormerModel"),svo=o(" (PoolFormer model)"),lvo=l(),v_=a("li"),Zle=a("strong"),ivo=o("prophetnet"),dvo=o(" \u2014 "),oq=a("a"),cvo=o("ProphetNetModel"),fvo=o(" (ProphetNet model)"),mvo=l(),F_=a("li"),eie=a("strong"),gvo=o("qdqbert"),hvo=o(" \u2014 "),rq=a("a"),pvo=o("QDQBertModel"),_vo=o(" (QDQBert model)"),uvo=l(),T_=a("li"),oie=a("strong"),bvo=o("reformer"),vvo=o(" \u2014 "),tq=a("a"),Fvo=o("ReformerModel"),Tvo=o(" (Reformer model)"),Mvo=l(),M_=a("li"),rie=a("strong"),Evo=o("regnet"),Cvo=o(" \u2014 "),aq=a("a"),wvo=o("RegNetModel"),Avo=o(" (RegNet model)"),yvo=l(),E_=a("li"),tie=a("strong"),Lvo=o("rembert"),xvo=o(" \u2014 "),nq=a("a"),$vo=o("RemBertModel"),kvo=o(" (RemBERT model)"),Svo=l(),C_=a("li"),aie=a("strong"),Rvo=o("resnet"),Pvo=o(" \u2014 "),sq=a("a"),Bvo=o("ResNetModel"),Ivo=o(" (ResNet model)"),Nvo=l(),w_=a("li"),nie=a("strong"),qvo=o("retribert"),jvo=o(" \u2014 "),lq=a("a"),Dvo=o("RetriBertModel"),Gvo=o(" (RetriBERT model)"),Ovo=l(),A_=a("li"),sie=a("strong"),Vvo=o("roberta"),Xvo=o(" \u2014 "),iq=a("a"),zvo=o("RobertaModel"),Wvo=o(" (RoBERTa model)"),Qvo=l(),y_=a("li"),lie=a("strong"),Hvo=o("roformer"),Uvo=o(" \u2014 "),dq=a("a"),Jvo=o("RoFormerModel"),Yvo=o(" (RoFormer model)"),Kvo=l(),L_=a("li"),iie=a("strong"),Zvo=o("segformer"),e3o=o(" \u2014 "),cq=a("a"),o3o=o("SegformerModel"),r3o=o(" (SegFormer model)"),t3o=l(),x_=a("li"),die=a("strong"),a3o=o("sew"),n3o=o(" \u2014 "),fq=a("a"),s3o=o("SEWModel"),l3o=o(" (SEW model)"),i3o=l(),$_=a("li"),cie=a("strong"),d3o=o("sew-d"),c3o=o(" \u2014 "),mq=a("a"),f3o=o("SEWDModel"),m3o=o(" (SEW-D model)"),g3o=l(),k_=a("li"),fie=a("strong"),h3o=o("speech_to_text"),p3o=o(" \u2014 "),gq=a("a"),_3o=o("Speech2TextModel"),u3o=o(" (Speech2Text model)"),b3o=l(),S_=a("li"),mie=a("strong"),v3o=o("splinter"),F3o=o(" \u2014 "),hq=a("a"),T3o=o("SplinterModel"),M3o=o(" (Splinter model)"),E3o=l(),R_=a("li"),gie=a("strong"),C3o=o("squeezebert"),w3o=o(" \u2014 "),pq=a("a"),A3o=o("SqueezeBertModel"),y3o=o(" (SqueezeBERT model)"),L3o=l(),P_=a("li"),hie=a("strong"),x3o=o("swin"),$3o=o(" \u2014 "),_q=a("a"),k3o=o("SwinModel"),S3o=o(" (Swin model)"),R3o=l(),B_=a("li"),pie=a("strong"),P3o=o("t5"),B3o=o(" \u2014 "),uq=a("a"),I3o=o("T5Model"),N3o=o(" (T5 model)"),q3o=l(),I_=a("li"),_ie=a("strong"),j3o=o("tapas"),D3o=o(" \u2014 "),bq=a("a"),G3o=o("TapasModel"),O3o=o(" (TAPAS model)"),V3o=l(),N_=a("li"),uie=a("strong"),X3o=o("trajectory_transformer"),z3o=o(" \u2014 "),vq=a("a"),W3o=o("TrajectoryTransformerModel"),Q3o=o(" (Trajectory Transformer model)"),H3o=l(),q_=a("li"),bie=a("strong"),U3o=o("transfo-xl"),J3o=o(" \u2014 "),Fq=a("a"),Y3o=o("TransfoXLModel"),K3o=o(" (Transformer-XL model)"),Z3o=l(),j_=a("li"),vie=a("strong"),eFo=o("unispeech"),oFo=o(" \u2014 "),Tq=a("a"),rFo=o("UniSpeechModel"),tFo=o(" (UniSpeech model)"),aFo=l(),D_=a("li"),Fie=a("strong"),nFo=o("unispeech-sat"),sFo=o(" \u2014 "),Mq=a("a"),lFo=o("UniSpeechSatModel"),iFo=o(" (UniSpeechSat model)"),dFo=l(),G_=a("li"),Tie=a("strong"),cFo=o("van"),fFo=o(" \u2014 "),Eq=a("a"),mFo=o("VanModel"),gFo=o(" (VAN model)"),hFo=l(),O_=a("li"),Mie=a("strong"),pFo=o("vilt"),_Fo=o(" \u2014 "),Cq=a("a"),uFo=o("ViltModel"),bFo=o(" (ViLT model)"),vFo=l(),V_=a("li"),Eie=a("strong"),FFo=o("vision-text-dual-encoder"),TFo=o(" \u2014 "),wq=a("a"),MFo=o("VisionTextDualEncoderModel"),EFo=o(" (VisionTextDualEncoder model)"),CFo=l(),X_=a("li"),Cie=a("strong"),wFo=o("visual_bert"),AFo=o(" \u2014 "),Aq=a("a"),yFo=o("VisualBertModel"),LFo=o(" (VisualBert model)"),xFo=l(),z_=a("li"),wie=a("strong"),$Fo=o("vit"),kFo=o(" \u2014 "),yq=a("a"),SFo=o("ViTModel"),RFo=o(" (ViT model)"),PFo=l(),W_=a("li"),Aie=a("strong"),BFo=o("vit_mae"),IFo=o(" \u2014 "),Lq=a("a"),NFo=o("ViTMAEModel"),qFo=o(" (ViTMAE model)"),jFo=l(),Q_=a("li"),yie=a("strong"),DFo=o("wav2vec2"),GFo=o(" \u2014 "),xq=a("a"),OFo=o("Wav2Vec2Model"),VFo=o(" (Wav2Vec2 model)"),XFo=l(),H_=a("li"),Lie=a("strong"),zFo=o("wav2vec2-conformer"),WFo=o(" \u2014 "),$q=a("a"),QFo=o("Wav2Vec2ConformerModel"),HFo=o(" (Wav2Vec2-Conformer model)"),UFo=l(),U_=a("li"),xie=a("strong"),JFo=o("wavlm"),YFo=o(" \u2014 "),kq=a("a"),KFo=o("WavLMModel"),ZFo=o(" (WavLM model)"),eTo=l(),J_=a("li"),$ie=a("strong"),oTo=o("xglm"),rTo=o(" \u2014 "),Sq=a("a"),tTo=o("XGLMModel"),aTo=o(" (XGLM model)"),nTo=l(),Y_=a("li"),kie=a("strong"),sTo=o("xlm"),lTo=o(" \u2014 "),Rq=a("a"),iTo=o("XLMModel"),dTo=o(" (XLM model)"),cTo=l(),K_=a("li"),Sie=a("strong"),fTo=o("xlm-prophetnet"),mTo=o(" \u2014 "),Pq=a("a"),gTo=o("XLMProphetNetModel"),hTo=o(" (XLMProphetNet model)"),pTo=l(),Z_=a("li"),Rie=a("strong"),_To=o("xlm-roberta"),uTo=o(" \u2014 "),Bq=a("a"),bTo=o("XLMRobertaModel"),vTo=o(" (XLM-RoBERTa model)"),FTo=l(),eu=a("li"),Pie=a("strong"),TTo=o("xlm-roberta-xl"),MTo=o(" \u2014 "),Iq=a("a"),ETo=o("XLMRobertaXLModel"),CTo=o(" (XLM-RoBERTa-XL model)"),wTo=l(),ou=a("li"),Bie=a("strong"),ATo=o("xlnet"),yTo=o(" \u2014 "),Nq=a("a"),LTo=o("XLNetModel"),xTo=o(" (XLNet model)"),$To=l(),ru=a("li"),Iie=a("strong"),kTo=o("yolos"),STo=o(" \u2014 "),qq=a("a"),RTo=o("YolosModel"),PTo=o(" (YOLOS model)"),BTo=l(),tu=a("li"),Nie=a("strong"),ITo=o("yoso"),NTo=o(" \u2014 "),jq=a("a"),qTo=o("YosoModel"),jTo=o(" (YOSO model)"),DTo=l(),au=a("p"),GTo=o("The model is set in evaluation mode by default using "),qie=a("code"),OTo=o("model.eval()"),VTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=a("code"),XTo=o("model.train()"),zTo=l(),F(nu.$$.fragment),Wqe=l(),xi=a("h2"),su=a("a"),Die=a("span"),F(my.$$.fragment),WTo=l(),Gie=a("span"),QTo=o("AutoModelForPreTraining"),Qqe=l(),xo=a("div"),F(gy.$$.fragment),HTo=l(),$i=a("p"),UTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Dq=a("a"),JTo=o("from_pretrained()"),YTo=o(" class method or the "),Gq=a("a"),KTo=o("from_config()"),ZTo=o(` class
method.`),e7o=l(),hy=a("p"),o7o=o("This class cannot be instantiated directly using "),Oie=a("code"),r7o=o("__init__()"),t7o=o(" (throws an error)."),a7o=l(),at=a("div"),F(py.$$.fragment),n7o=l(),Vie=a("p"),s7o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),l7o=l(),ki=a("p"),i7o=o(`Note:
Loading a model from its configuration file does `),Xie=a("strong"),d7o=o("not"),c7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oq=a("a"),f7o=o("from_pretrained()"),m7o=o(" to load the model weights."),g7o=l(),F(lu.$$.fragment),h7o=l(),Ye=a("div"),F(_y.$$.fragment),p7o=l(),zie=a("p"),_7o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),u7o=l(),xa=a("p"),b7o=o("The model class to instantiate is selected based on the "),Wie=a("code"),v7o=o("model_type"),F7o=o(` property of the config object (either
passed as an argument or loaded from `),Qie=a("code"),T7o=o("pretrained_model_name_or_path"),M7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hie=a("code"),E7o=o("pretrained_model_name_or_path"),C7o=o(":"),w7o=l(),G=a("ul"),iu=a("li"),Uie=a("strong"),A7o=o("albert"),y7o=o(" \u2014 "),Vq=a("a"),L7o=o("AlbertForPreTraining"),x7o=o(" (ALBERT model)"),$7o=l(),du=a("li"),Jie=a("strong"),k7o=o("bart"),S7o=o(" \u2014 "),Xq=a("a"),R7o=o("BartForConditionalGeneration"),P7o=o(" (BART model)"),B7o=l(),cu=a("li"),Yie=a("strong"),I7o=o("bert"),N7o=o(" \u2014 "),zq=a("a"),q7o=o("BertForPreTraining"),j7o=o(" (BERT model)"),D7o=l(),fu=a("li"),Kie=a("strong"),G7o=o("big_bird"),O7o=o(" \u2014 "),Wq=a("a"),V7o=o("BigBirdForPreTraining"),X7o=o(" (BigBird model)"),z7o=l(),mu=a("li"),Zie=a("strong"),W7o=o("camembert"),Q7o=o(" \u2014 "),Qq=a("a"),H7o=o("CamembertForMaskedLM"),U7o=o(" (CamemBERT model)"),J7o=l(),gu=a("li"),ede=a("strong"),Y7o=o("ctrl"),K7o=o(" \u2014 "),Hq=a("a"),Z7o=o("CTRLLMHeadModel"),eMo=o(" (CTRL model)"),oMo=l(),hu=a("li"),ode=a("strong"),rMo=o("data2vec-text"),tMo=o(" \u2014 "),Uq=a("a"),aMo=o("Data2VecTextForMaskedLM"),nMo=o(" (Data2VecText model)"),sMo=l(),pu=a("li"),rde=a("strong"),lMo=o("deberta"),iMo=o(" \u2014 "),Jq=a("a"),dMo=o("DebertaForMaskedLM"),cMo=o(" (DeBERTa model)"),fMo=l(),_u=a("li"),tde=a("strong"),mMo=o("deberta-v2"),gMo=o(" \u2014 "),Yq=a("a"),hMo=o("DebertaV2ForMaskedLM"),pMo=o(" (DeBERTa-v2 model)"),_Mo=l(),uu=a("li"),ade=a("strong"),uMo=o("distilbert"),bMo=o(" \u2014 "),Kq=a("a"),vMo=o("DistilBertForMaskedLM"),FMo=o(" (DistilBERT model)"),TMo=l(),bu=a("li"),nde=a("strong"),MMo=o("electra"),EMo=o(" \u2014 "),Zq=a("a"),CMo=o("ElectraForPreTraining"),wMo=o(" (ELECTRA model)"),AMo=l(),vu=a("li"),sde=a("strong"),yMo=o("flaubert"),LMo=o(" \u2014 "),ej=a("a"),xMo=o("FlaubertWithLMHeadModel"),$Mo=o(" (FlauBERT model)"),kMo=l(),Fu=a("li"),lde=a("strong"),SMo=o("flava"),RMo=o(" \u2014 "),oj=a("a"),PMo=o("FlavaForPreTraining"),BMo=o(" (Flava model)"),IMo=l(),Tu=a("li"),ide=a("strong"),NMo=o("fnet"),qMo=o(" \u2014 "),rj=a("a"),jMo=o("FNetForPreTraining"),DMo=o(" (FNet model)"),GMo=l(),Mu=a("li"),dde=a("strong"),OMo=o("fsmt"),VMo=o(" \u2014 "),tj=a("a"),XMo=o("FSMTForConditionalGeneration"),zMo=o(" (FairSeq Machine-Translation model)"),WMo=l(),Eu=a("li"),cde=a("strong"),QMo=o("funnel"),HMo=o(" \u2014 "),aj=a("a"),UMo=o("FunnelForPreTraining"),JMo=o(" (Funnel Transformer model)"),YMo=l(),Cu=a("li"),fde=a("strong"),KMo=o("gpt2"),ZMo=o(" \u2014 "),nj=a("a"),eEo=o("GPT2LMHeadModel"),oEo=o(" (OpenAI GPT-2 model)"),rEo=l(),wu=a("li"),mde=a("strong"),tEo=o("ibert"),aEo=o(" \u2014 "),sj=a("a"),nEo=o("IBertForMaskedLM"),sEo=o(" (I-BERT model)"),lEo=l(),Au=a("li"),gde=a("strong"),iEo=o("layoutlm"),dEo=o(" \u2014 "),lj=a("a"),cEo=o("LayoutLMForMaskedLM"),fEo=o(" (LayoutLM model)"),mEo=l(),yu=a("li"),hde=a("strong"),gEo=o("longformer"),hEo=o(" \u2014 "),ij=a("a"),pEo=o("LongformerForMaskedLM"),_Eo=o(" (Longformer model)"),uEo=l(),Lu=a("li"),pde=a("strong"),bEo=o("lxmert"),vEo=o(" \u2014 "),dj=a("a"),FEo=o("LxmertForPreTraining"),TEo=o(" (LXMERT model)"),MEo=l(),xu=a("li"),_de=a("strong"),EEo=o("megatron-bert"),CEo=o(" \u2014 "),cj=a("a"),wEo=o("MegatronBertForPreTraining"),AEo=o(" (MegatronBert model)"),yEo=l(),$u=a("li"),ude=a("strong"),LEo=o("mobilebert"),xEo=o(" \u2014 "),fj=a("a"),$Eo=o("MobileBertForPreTraining"),kEo=o(" (MobileBERT model)"),SEo=l(),ku=a("li"),bde=a("strong"),REo=o("mpnet"),PEo=o(" \u2014 "),mj=a("a"),BEo=o("MPNetForMaskedLM"),IEo=o(" (MPNet model)"),NEo=l(),Su=a("li"),vde=a("strong"),qEo=o("openai-gpt"),jEo=o(" \u2014 "),gj=a("a"),DEo=o("OpenAIGPTLMHeadModel"),GEo=o(" (OpenAI GPT model)"),OEo=l(),Ru=a("li"),Fde=a("strong"),VEo=o("retribert"),XEo=o(" \u2014 "),hj=a("a"),zEo=o("RetriBertModel"),WEo=o(" (RetriBERT model)"),QEo=l(),Pu=a("li"),Tde=a("strong"),HEo=o("roberta"),UEo=o(" \u2014 "),pj=a("a"),JEo=o("RobertaForMaskedLM"),YEo=o(" (RoBERTa model)"),KEo=l(),Bu=a("li"),Mde=a("strong"),ZEo=o("splinter"),eCo=o(" \u2014 "),_j=a("a"),oCo=o("SplinterForPreTraining"),rCo=o(" (Splinter model)"),tCo=l(),Iu=a("li"),Ede=a("strong"),aCo=o("squeezebert"),nCo=o(" \u2014 "),uj=a("a"),sCo=o("SqueezeBertForMaskedLM"),lCo=o(" (SqueezeBERT model)"),iCo=l(),Nu=a("li"),Cde=a("strong"),dCo=o("t5"),cCo=o(" \u2014 "),bj=a("a"),fCo=o("T5ForConditionalGeneration"),mCo=o(" (T5 model)"),gCo=l(),qu=a("li"),wde=a("strong"),hCo=o("tapas"),pCo=o(" \u2014 "),vj=a("a"),_Co=o("TapasForMaskedLM"),uCo=o(" (TAPAS model)"),bCo=l(),ju=a("li"),Ade=a("strong"),vCo=o("transfo-xl"),FCo=o(" \u2014 "),Fj=a("a"),TCo=o("TransfoXLLMHeadModel"),MCo=o(" (Transformer-XL model)"),ECo=l(),Du=a("li"),yde=a("strong"),CCo=o("unispeech"),wCo=o(" \u2014 "),Tj=a("a"),ACo=o("UniSpeechForPreTraining"),yCo=o(" (UniSpeech model)"),LCo=l(),Gu=a("li"),Lde=a("strong"),xCo=o("unispeech-sat"),$Co=o(" \u2014 "),Mj=a("a"),kCo=o("UniSpeechSatForPreTraining"),SCo=o(" (UniSpeechSat model)"),RCo=l(),Ou=a("li"),xde=a("strong"),PCo=o("visual_bert"),BCo=o(" \u2014 "),Ej=a("a"),ICo=o("VisualBertForPreTraining"),NCo=o(" (VisualBert model)"),qCo=l(),Vu=a("li"),$de=a("strong"),jCo=o("vit_mae"),DCo=o(" \u2014 "),Cj=a("a"),GCo=o("ViTMAEForPreTraining"),OCo=o(" (ViTMAE model)"),VCo=l(),Xu=a("li"),kde=a("strong"),XCo=o("wav2vec2"),zCo=o(" \u2014 "),wj=a("a"),WCo=o("Wav2Vec2ForPreTraining"),QCo=o(" (Wav2Vec2 model)"),HCo=l(),zu=a("li"),Sde=a("strong"),UCo=o("wav2vec2-conformer"),JCo=o(" \u2014 "),Aj=a("a"),YCo=o("Wav2Vec2ConformerForPreTraining"),KCo=o(" (Wav2Vec2-Conformer model)"),ZCo=l(),Wu=a("li"),Rde=a("strong"),e5o=o("xlm"),o5o=o(" \u2014 "),yj=a("a"),r5o=o("XLMWithLMHeadModel"),t5o=o(" (XLM model)"),a5o=l(),Qu=a("li"),Pde=a("strong"),n5o=o("xlm-roberta"),s5o=o(" \u2014 "),Lj=a("a"),l5o=o("XLMRobertaForMaskedLM"),i5o=o(" (XLM-RoBERTa model)"),d5o=l(),Hu=a("li"),Bde=a("strong"),c5o=o("xlm-roberta-xl"),f5o=o(" \u2014 "),xj=a("a"),m5o=o("XLMRobertaXLForMaskedLM"),g5o=o(" (XLM-RoBERTa-XL model)"),h5o=l(),Uu=a("li"),Ide=a("strong"),p5o=o("xlnet"),_5o=o(" \u2014 "),$j=a("a"),u5o=o("XLNetLMHeadModel"),b5o=o(" (XLNet model)"),v5o=l(),Ju=a("p"),F5o=o("The model is set in evaluation mode by default using "),Nde=a("code"),T5o=o("model.eval()"),M5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qde=a("code"),E5o=o("model.train()"),C5o=l(),F(Yu.$$.fragment),Hqe=l(),Si=a("h2"),Ku=a("a"),jde=a("span"),F(uy.$$.fragment),w5o=l(),Dde=a("span"),A5o=o("AutoModelForCausalLM"),Uqe=l(),$o=a("div"),F(by.$$.fragment),y5o=l(),Ri=a("p"),L5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kj=a("a"),x5o=o("from_pretrained()"),$5o=o(" class method or the "),Sj=a("a"),k5o=o("from_config()"),S5o=o(` class
method.`),R5o=l(),vy=a("p"),P5o=o("This class cannot be instantiated directly using "),Gde=a("code"),B5o=o("__init__()"),I5o=o(" (throws an error)."),N5o=l(),nt=a("div"),F(Fy.$$.fragment),q5o=l(),Ode=a("p"),j5o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),D5o=l(),Pi=a("p"),G5o=o(`Note:
Loading a model from its configuration file does `),Vde=a("strong"),O5o=o("not"),V5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rj=a("a"),X5o=o("from_pretrained()"),z5o=o(" to load the model weights."),W5o=l(),F(Zu.$$.fragment),Q5o=l(),Ke=a("div"),F(Ty.$$.fragment),H5o=l(),Xde=a("p"),U5o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),J5o=l(),$a=a("p"),Y5o=o("The model class to instantiate is selected based on the "),zde=a("code"),K5o=o("model_type"),Z5o=o(` property of the config object (either
passed as an argument or loaded from `),Wde=a("code"),e0o=o("pretrained_model_name_or_path"),o0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qde=a("code"),r0o=o("pretrained_model_name_or_path"),t0o=o(":"),a0o=l(),z=a("ul"),e4=a("li"),Hde=a("strong"),n0o=o("bart"),s0o=o(" \u2014 "),Pj=a("a"),l0o=o("BartForCausalLM"),i0o=o(" (BART model)"),d0o=l(),o4=a("li"),Ude=a("strong"),c0o=o("bert"),f0o=o(" \u2014 "),Bj=a("a"),m0o=o("BertLMHeadModel"),g0o=o(" (BERT model)"),h0o=l(),r4=a("li"),Jde=a("strong"),p0o=o("bert-generation"),_0o=o(" \u2014 "),Ij=a("a"),u0o=o("BertGenerationDecoder"),b0o=o(" (Bert Generation model)"),v0o=l(),t4=a("li"),Yde=a("strong"),F0o=o("big_bird"),T0o=o(" \u2014 "),Nj=a("a"),M0o=o("BigBirdForCausalLM"),E0o=o(" (BigBird model)"),C0o=l(),a4=a("li"),Kde=a("strong"),w0o=o("bigbird_pegasus"),A0o=o(" \u2014 "),qj=a("a"),y0o=o("BigBirdPegasusForCausalLM"),L0o=o(" (BigBirdPegasus model)"),x0o=l(),n4=a("li"),Zde=a("strong"),$0o=o("blenderbot"),k0o=o(" \u2014 "),jj=a("a"),S0o=o("BlenderbotForCausalLM"),R0o=o(" (Blenderbot model)"),P0o=l(),s4=a("li"),ece=a("strong"),B0o=o("blenderbot-small"),I0o=o(" \u2014 "),Dj=a("a"),N0o=o("BlenderbotSmallForCausalLM"),q0o=o(" (BlenderbotSmall model)"),j0o=l(),l4=a("li"),oce=a("strong"),D0o=o("camembert"),G0o=o(" \u2014 "),Gj=a("a"),O0o=o("CamembertForCausalLM"),V0o=o(" (CamemBERT model)"),X0o=l(),i4=a("li"),rce=a("strong"),z0o=o("codegen"),W0o=o(" \u2014 "),Oj=a("a"),Q0o=o("CodeGenForCausalLM"),H0o=o(" (CodeGen model)"),U0o=l(),d4=a("li"),tce=a("strong"),J0o=o("ctrl"),Y0o=o(" \u2014 "),Vj=a("a"),K0o=o("CTRLLMHeadModel"),Z0o=o(" (CTRL model)"),ewo=l(),c4=a("li"),ace=a("strong"),owo=o("data2vec-text"),rwo=o(" \u2014 "),Xj=a("a"),two=o("Data2VecTextForCausalLM"),awo=o(" (Data2VecText model)"),nwo=l(),f4=a("li"),nce=a("strong"),swo=o("electra"),lwo=o(" \u2014 "),zj=a("a"),iwo=o("ElectraForCausalLM"),dwo=o(" (ELECTRA model)"),cwo=l(),m4=a("li"),sce=a("strong"),fwo=o("gpt2"),mwo=o(" \u2014 "),Wj=a("a"),gwo=o("GPT2LMHeadModel"),hwo=o(" (OpenAI GPT-2 model)"),pwo=l(),g4=a("li"),lce=a("strong"),_wo=o("gpt_neo"),uwo=o(" \u2014 "),Qj=a("a"),bwo=o("GPTNeoForCausalLM"),vwo=o(" (GPT Neo model)"),Fwo=l(),h4=a("li"),ice=a("strong"),Two=o("gpt_neox"),Mwo=o(" \u2014 "),Hj=a("a"),Ewo=o("GPTNeoXForCausalLM"),Cwo=o(" (GPT NeoX model)"),wwo=l(),p4=a("li"),dce=a("strong"),Awo=o("gptj"),ywo=o(" \u2014 "),Uj=a("a"),Lwo=o("GPTJForCausalLM"),xwo=o(" (GPT-J model)"),$wo=l(),_4=a("li"),cce=a("strong"),kwo=o("marian"),Swo=o(" \u2014 "),Jj=a("a"),Rwo=o("MarianForCausalLM"),Pwo=o(" (Marian model)"),Bwo=l(),u4=a("li"),fce=a("strong"),Iwo=o("mbart"),Nwo=o(" \u2014 "),Yj=a("a"),qwo=o("MBartForCausalLM"),jwo=o(" (mBART model)"),Dwo=l(),b4=a("li"),mce=a("strong"),Gwo=o("megatron-bert"),Owo=o(" \u2014 "),Kj=a("a"),Vwo=o("MegatronBertForCausalLM"),Xwo=o(" (MegatronBert model)"),zwo=l(),v4=a("li"),gce=a("strong"),Wwo=o("openai-gpt"),Qwo=o(" \u2014 "),Zj=a("a"),Hwo=o("OpenAIGPTLMHeadModel"),Uwo=o(" (OpenAI GPT model)"),Jwo=l(),F4=a("li"),hce=a("strong"),Ywo=o("opt"),Kwo=o(" \u2014 "),eD=a("a"),Zwo=o("OPTForCausalLM"),e6o=o(" (OPT model)"),o6o=l(),T4=a("li"),pce=a("strong"),r6o=o("pegasus"),t6o=o(" \u2014 "),oD=a("a"),a6o=o("PegasusForCausalLM"),n6o=o(" (Pegasus model)"),s6o=l(),M4=a("li"),_ce=a("strong"),l6o=o("plbart"),i6o=o(" \u2014 "),rD=a("a"),d6o=o("PLBartForCausalLM"),c6o=o(" (PLBart model)"),f6o=l(),E4=a("li"),uce=a("strong"),m6o=o("prophetnet"),g6o=o(" \u2014 "),tD=a("a"),h6o=o("ProphetNetForCausalLM"),p6o=o(" (ProphetNet model)"),_6o=l(),C4=a("li"),bce=a("strong"),u6o=o("qdqbert"),b6o=o(" \u2014 "),aD=a("a"),v6o=o("QDQBertLMHeadModel"),F6o=o(" (QDQBert model)"),T6o=l(),w4=a("li"),vce=a("strong"),M6o=o("reformer"),E6o=o(" \u2014 "),nD=a("a"),C6o=o("ReformerModelWithLMHead"),w6o=o(" (Reformer model)"),A6o=l(),A4=a("li"),Fce=a("strong"),y6o=o("rembert"),L6o=o(" \u2014 "),sD=a("a"),x6o=o("RemBertForCausalLM"),$6o=o(" (RemBERT model)"),k6o=l(),y4=a("li"),Tce=a("strong"),S6o=o("roberta"),R6o=o(" \u2014 "),lD=a("a"),P6o=o("RobertaForCausalLM"),B6o=o(" (RoBERTa model)"),I6o=l(),L4=a("li"),Mce=a("strong"),N6o=o("roformer"),q6o=o(" \u2014 "),iD=a("a"),j6o=o("RoFormerForCausalLM"),D6o=o(" (RoFormer model)"),G6o=l(),x4=a("li"),Ece=a("strong"),O6o=o("speech_to_text_2"),V6o=o(" \u2014 "),dD=a("a"),X6o=o("Speech2Text2ForCausalLM"),z6o=o(" (Speech2Text2 model)"),W6o=l(),$4=a("li"),Cce=a("strong"),Q6o=o("transfo-xl"),H6o=o(" \u2014 "),cD=a("a"),U6o=o("TransfoXLLMHeadModel"),J6o=o(" (Transformer-XL model)"),Y6o=l(),k4=a("li"),wce=a("strong"),K6o=o("trocr"),Z6o=o(" \u2014 "),fD=a("a"),eAo=o("TrOCRForCausalLM"),oAo=o(" (TrOCR model)"),rAo=l(),S4=a("li"),Ace=a("strong"),tAo=o("xglm"),aAo=o(" \u2014 "),mD=a("a"),nAo=o("XGLMForCausalLM"),sAo=o(" (XGLM model)"),lAo=l(),R4=a("li"),yce=a("strong"),iAo=o("xlm"),dAo=o(" \u2014 "),gD=a("a"),cAo=o("XLMWithLMHeadModel"),fAo=o(" (XLM model)"),mAo=l(),P4=a("li"),Lce=a("strong"),gAo=o("xlm-prophetnet"),hAo=o(" \u2014 "),hD=a("a"),pAo=o("XLMProphetNetForCausalLM"),_Ao=o(" (XLMProphetNet model)"),uAo=l(),B4=a("li"),xce=a("strong"),bAo=o("xlm-roberta"),vAo=o(" \u2014 "),pD=a("a"),FAo=o("XLMRobertaForCausalLM"),TAo=o(" (XLM-RoBERTa model)"),MAo=l(),I4=a("li"),$ce=a("strong"),EAo=o("xlm-roberta-xl"),CAo=o(" \u2014 "),_D=a("a"),wAo=o("XLMRobertaXLForCausalLM"),AAo=o(" (XLM-RoBERTa-XL model)"),yAo=l(),N4=a("li"),kce=a("strong"),LAo=o("xlnet"),xAo=o(" \u2014 "),uD=a("a"),$Ao=o("XLNetLMHeadModel"),kAo=o(" (XLNet model)"),SAo=l(),q4=a("p"),RAo=o("The model is set in evaluation mode by default using "),Sce=a("code"),PAo=o("model.eval()"),BAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rce=a("code"),IAo=o("model.train()"),NAo=l(),F(j4.$$.fragment),Jqe=l(),Bi=a("h2"),D4=a("a"),Pce=a("span"),F(My.$$.fragment),qAo=l(),Bce=a("span"),jAo=o("AutoModelForMaskedLM"),Yqe=l(),ko=a("div"),F(Ey.$$.fragment),DAo=l(),Ii=a("p"),GAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bD=a("a"),OAo=o("from_pretrained()"),VAo=o(" class method or the "),vD=a("a"),XAo=o("from_config()"),zAo=o(` class
method.`),WAo=l(),Cy=a("p"),QAo=o("This class cannot be instantiated directly using "),Ice=a("code"),HAo=o("__init__()"),UAo=o(" (throws an error)."),JAo=l(),st=a("div"),F(wy.$$.fragment),YAo=l(),Nce=a("p"),KAo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ZAo=l(),Ni=a("p"),eyo=o(`Note:
Loading a model from its configuration file does `),qce=a("strong"),oyo=o("not"),ryo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=a("a"),tyo=o("from_pretrained()"),ayo=o(" to load the model weights."),nyo=l(),F(G4.$$.fragment),syo=l(),Ze=a("div"),F(Ay.$$.fragment),lyo=l(),jce=a("p"),iyo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dyo=l(),ka=a("p"),cyo=o("The model class to instantiate is selected based on the "),Dce=a("code"),fyo=o("model_type"),myo=o(` property of the config object (either
passed as an argument or loaded from `),Gce=a("code"),gyo=o("pretrained_model_name_or_path"),hyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=a("code"),pyo=o("pretrained_model_name_or_path"),_yo=o(":"),uyo=l(),Q=a("ul"),O4=a("li"),Vce=a("strong"),byo=o("albert"),vyo=o(" \u2014 "),TD=a("a"),Fyo=o("AlbertForMaskedLM"),Tyo=o(" (ALBERT model)"),Myo=l(),V4=a("li"),Xce=a("strong"),Eyo=o("bart"),Cyo=o(" \u2014 "),MD=a("a"),wyo=o("BartForConditionalGeneration"),Ayo=o(" (BART model)"),yyo=l(),X4=a("li"),zce=a("strong"),Lyo=o("bert"),xyo=o(" \u2014 "),ED=a("a"),$yo=o("BertForMaskedLM"),kyo=o(" (BERT model)"),Syo=l(),z4=a("li"),Wce=a("strong"),Ryo=o("big_bird"),Pyo=o(" \u2014 "),CD=a("a"),Byo=o("BigBirdForMaskedLM"),Iyo=o(" (BigBird model)"),Nyo=l(),W4=a("li"),Qce=a("strong"),qyo=o("camembert"),jyo=o(" \u2014 "),wD=a("a"),Dyo=o("CamembertForMaskedLM"),Gyo=o(" (CamemBERT model)"),Oyo=l(),Q4=a("li"),Hce=a("strong"),Vyo=o("convbert"),Xyo=o(" \u2014 "),AD=a("a"),zyo=o("ConvBertForMaskedLM"),Wyo=o(" (ConvBERT model)"),Qyo=l(),H4=a("li"),Uce=a("strong"),Hyo=o("data2vec-text"),Uyo=o(" \u2014 "),yD=a("a"),Jyo=o("Data2VecTextForMaskedLM"),Yyo=o(" (Data2VecText model)"),Kyo=l(),U4=a("li"),Jce=a("strong"),Zyo=o("deberta"),eLo=o(" \u2014 "),LD=a("a"),oLo=o("DebertaForMaskedLM"),rLo=o(" (DeBERTa model)"),tLo=l(),J4=a("li"),Yce=a("strong"),aLo=o("deberta-v2"),nLo=o(" \u2014 "),xD=a("a"),sLo=o("DebertaV2ForMaskedLM"),lLo=o(" (DeBERTa-v2 model)"),iLo=l(),Y4=a("li"),Kce=a("strong"),dLo=o("distilbert"),cLo=o(" \u2014 "),$D=a("a"),fLo=o("DistilBertForMaskedLM"),mLo=o(" (DistilBERT model)"),gLo=l(),K4=a("li"),Zce=a("strong"),hLo=o("electra"),pLo=o(" \u2014 "),kD=a("a"),_Lo=o("ElectraForMaskedLM"),uLo=o(" (ELECTRA model)"),bLo=l(),Z4=a("li"),efe=a("strong"),vLo=o("flaubert"),FLo=o(" \u2014 "),SD=a("a"),TLo=o("FlaubertWithLMHeadModel"),MLo=o(" (FlauBERT model)"),ELo=l(),e1=a("li"),ofe=a("strong"),CLo=o("fnet"),wLo=o(" \u2014 "),RD=a("a"),ALo=o("FNetForMaskedLM"),yLo=o(" (FNet model)"),LLo=l(),o1=a("li"),rfe=a("strong"),xLo=o("funnel"),$Lo=o(" \u2014 "),PD=a("a"),kLo=o("FunnelForMaskedLM"),SLo=o(" (Funnel Transformer model)"),RLo=l(),r1=a("li"),tfe=a("strong"),PLo=o("ibert"),BLo=o(" \u2014 "),BD=a("a"),ILo=o("IBertForMaskedLM"),NLo=o(" (I-BERT model)"),qLo=l(),t1=a("li"),afe=a("strong"),jLo=o("layoutlm"),DLo=o(" \u2014 "),ID=a("a"),GLo=o("LayoutLMForMaskedLM"),OLo=o(" (LayoutLM model)"),VLo=l(),a1=a("li"),nfe=a("strong"),XLo=o("longformer"),zLo=o(" \u2014 "),ND=a("a"),WLo=o("LongformerForMaskedLM"),QLo=o(" (Longformer model)"),HLo=l(),n1=a("li"),sfe=a("strong"),ULo=o("mbart"),JLo=o(" \u2014 "),qD=a("a"),YLo=o("MBartForConditionalGeneration"),KLo=o(" (mBART model)"),ZLo=l(),s1=a("li"),lfe=a("strong"),e8o=o("megatron-bert"),o8o=o(" \u2014 "),jD=a("a"),r8o=o("MegatronBertForMaskedLM"),t8o=o(" (MegatronBert model)"),a8o=l(),l1=a("li"),ife=a("strong"),n8o=o("mobilebert"),s8o=o(" \u2014 "),DD=a("a"),l8o=o("MobileBertForMaskedLM"),i8o=o(" (MobileBERT model)"),d8o=l(),i1=a("li"),dfe=a("strong"),c8o=o("mpnet"),f8o=o(" \u2014 "),GD=a("a"),m8o=o("MPNetForMaskedLM"),g8o=o(" (MPNet model)"),h8o=l(),d1=a("li"),cfe=a("strong"),p8o=o("nystromformer"),_8o=o(" \u2014 "),OD=a("a"),u8o=o("NystromformerForMaskedLM"),b8o=o(" (Nystromformer model)"),v8o=l(),c1=a("li"),ffe=a("strong"),F8o=o("perceiver"),T8o=o(" \u2014 "),VD=a("a"),M8o=o("PerceiverForMaskedLM"),E8o=o(" (Perceiver model)"),C8o=l(),f1=a("li"),mfe=a("strong"),w8o=o("qdqbert"),A8o=o(" \u2014 "),XD=a("a"),y8o=o("QDQBertForMaskedLM"),L8o=o(" (QDQBert model)"),x8o=l(),m1=a("li"),gfe=a("strong"),$8o=o("reformer"),k8o=o(" \u2014 "),zD=a("a"),S8o=o("ReformerForMaskedLM"),R8o=o(" (Reformer model)"),P8o=l(),g1=a("li"),hfe=a("strong"),B8o=o("rembert"),I8o=o(" \u2014 "),WD=a("a"),N8o=o("RemBertForMaskedLM"),q8o=o(" (RemBERT model)"),j8o=l(),h1=a("li"),pfe=a("strong"),D8o=o("roberta"),G8o=o(" \u2014 "),QD=a("a"),O8o=o("RobertaForMaskedLM"),V8o=o(" (RoBERTa model)"),X8o=l(),p1=a("li"),_fe=a("strong"),z8o=o("roformer"),W8o=o(" \u2014 "),HD=a("a"),Q8o=o("RoFormerForMaskedLM"),H8o=o(" (RoFormer model)"),U8o=l(),_1=a("li"),ufe=a("strong"),J8o=o("squeezebert"),Y8o=o(" \u2014 "),UD=a("a"),K8o=o("SqueezeBertForMaskedLM"),Z8o=o(" (SqueezeBERT model)"),e9o=l(),u1=a("li"),bfe=a("strong"),o9o=o("tapas"),r9o=o(" \u2014 "),JD=a("a"),t9o=o("TapasForMaskedLM"),a9o=o(" (TAPAS model)"),n9o=l(),b1=a("li"),vfe=a("strong"),s9o=o("wav2vec2"),l9o=o(" \u2014 "),Ffe=a("code"),i9o=o("Wav2Vec2ForMaskedLM"),d9o=o(" (Wav2Vec2 model)"),c9o=l(),v1=a("li"),Tfe=a("strong"),f9o=o("xlm"),m9o=o(" \u2014 "),YD=a("a"),g9o=o("XLMWithLMHeadModel"),h9o=o(" (XLM model)"),p9o=l(),F1=a("li"),Mfe=a("strong"),_9o=o("xlm-roberta"),u9o=o(" \u2014 "),KD=a("a"),b9o=o("XLMRobertaForMaskedLM"),v9o=o(" (XLM-RoBERTa model)"),F9o=l(),T1=a("li"),Efe=a("strong"),T9o=o("xlm-roberta-xl"),M9o=o(" \u2014 "),ZD=a("a"),E9o=o("XLMRobertaXLForMaskedLM"),C9o=o(" (XLM-RoBERTa-XL model)"),w9o=l(),M1=a("li"),Cfe=a("strong"),A9o=o("yoso"),y9o=o(" \u2014 "),eG=a("a"),L9o=o("YosoForMaskedLM"),x9o=o(" (YOSO model)"),$9o=l(),E1=a("p"),k9o=o("The model is set in evaluation mode by default using "),wfe=a("code"),S9o=o("model.eval()"),R9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Afe=a("code"),P9o=o("model.train()"),B9o=l(),F(C1.$$.fragment),Kqe=l(),qi=a("h2"),w1=a("a"),yfe=a("span"),F(yy.$$.fragment),I9o=l(),Lfe=a("span"),N9o=o("AutoModelForSeq2SeqLM"),Zqe=l(),So=a("div"),F(Ly.$$.fragment),q9o=l(),ji=a("p"),j9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oG=a("a"),D9o=o("from_pretrained()"),G9o=o(" class method or the "),rG=a("a"),O9o=o("from_config()"),V9o=o(` class
method.`),X9o=l(),xy=a("p"),z9o=o("This class cannot be instantiated directly using "),xfe=a("code"),W9o=o("__init__()"),Q9o=o(" (throws an error)."),H9o=l(),lt=a("div"),F($y.$$.fragment),U9o=l(),$fe=a("p"),J9o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Y9o=l(),Di=a("p"),K9o=o(`Note:
Loading a model from its configuration file does `),kfe=a("strong"),Z9o=o("not"),exo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),oxo=o("from_pretrained()"),rxo=o(" to load the model weights."),txo=l(),F(A1.$$.fragment),axo=l(),eo=a("div"),F(ky.$$.fragment),nxo=l(),Sfe=a("p"),sxo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lxo=l(),Sa=a("p"),ixo=o("The model class to instantiate is selected based on the "),Rfe=a("code"),dxo=o("model_type"),cxo=o(` property of the config object (either
passed as an argument or loaded from `),Pfe=a("code"),fxo=o("pretrained_model_name_or_path"),mxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bfe=a("code"),gxo=o("pretrained_model_name_or_path"),hxo=o(":"),pxo=l(),_e=a("ul"),y1=a("li"),Ife=a("strong"),_xo=o("bart"),uxo=o(" \u2014 "),aG=a("a"),bxo=o("BartForConditionalGeneration"),vxo=o(" (BART model)"),Fxo=l(),L1=a("li"),Nfe=a("strong"),Txo=o("bigbird_pegasus"),Mxo=o(" \u2014 "),nG=a("a"),Exo=o("BigBirdPegasusForConditionalGeneration"),Cxo=o(" (BigBirdPegasus model)"),wxo=l(),x1=a("li"),qfe=a("strong"),Axo=o("blenderbot"),yxo=o(" \u2014 "),sG=a("a"),Lxo=o("BlenderbotForConditionalGeneration"),xxo=o(" (Blenderbot model)"),$xo=l(),$1=a("li"),jfe=a("strong"),kxo=o("blenderbot-small"),Sxo=o(" \u2014 "),lG=a("a"),Rxo=o("BlenderbotSmallForConditionalGeneration"),Pxo=o(" (BlenderbotSmall model)"),Bxo=l(),k1=a("li"),Dfe=a("strong"),Ixo=o("encoder-decoder"),Nxo=o(" \u2014 "),iG=a("a"),qxo=o("EncoderDecoderModel"),jxo=o(" (Encoder decoder model)"),Dxo=l(),S1=a("li"),Gfe=a("strong"),Gxo=o("fsmt"),Oxo=o(" \u2014 "),dG=a("a"),Vxo=o("FSMTForConditionalGeneration"),Xxo=o(" (FairSeq Machine-Translation model)"),zxo=l(),R1=a("li"),Ofe=a("strong"),Wxo=o("led"),Qxo=o(" \u2014 "),cG=a("a"),Hxo=o("LEDForConditionalGeneration"),Uxo=o(" (LED model)"),Jxo=l(),P1=a("li"),Vfe=a("strong"),Yxo=o("m2m_100"),Kxo=o(" \u2014 "),fG=a("a"),Zxo=o("M2M100ForConditionalGeneration"),e$o=o(" (M2M100 model)"),o$o=l(),B1=a("li"),Xfe=a("strong"),r$o=o("marian"),t$o=o(" \u2014 "),mG=a("a"),a$o=o("MarianMTModel"),n$o=o(" (Marian model)"),s$o=l(),I1=a("li"),zfe=a("strong"),l$o=o("mbart"),i$o=o(" \u2014 "),gG=a("a"),d$o=o("MBartForConditionalGeneration"),c$o=o(" (mBART model)"),f$o=l(),N1=a("li"),Wfe=a("strong"),m$o=o("mt5"),g$o=o(" \u2014 "),hG=a("a"),h$o=o("MT5ForConditionalGeneration"),p$o=o(" (mT5 model)"),_$o=l(),q1=a("li"),Qfe=a("strong"),u$o=o("pegasus"),b$o=o(" \u2014 "),pG=a("a"),v$o=o("PegasusForConditionalGeneration"),F$o=o(" (Pegasus model)"),T$o=l(),j1=a("li"),Hfe=a("strong"),M$o=o("plbart"),E$o=o(" \u2014 "),_G=a("a"),C$o=o("PLBartForConditionalGeneration"),w$o=o(" (PLBart model)"),A$o=l(),D1=a("li"),Ufe=a("strong"),y$o=o("prophetnet"),L$o=o(" \u2014 "),uG=a("a"),x$o=o("ProphetNetForConditionalGeneration"),$$o=o(" (ProphetNet model)"),k$o=l(),G1=a("li"),Jfe=a("strong"),S$o=o("t5"),R$o=o(" \u2014 "),bG=a("a"),P$o=o("T5ForConditionalGeneration"),B$o=o(" (T5 model)"),I$o=l(),O1=a("li"),Yfe=a("strong"),N$o=o("xlm-prophetnet"),q$o=o(" \u2014 "),vG=a("a"),j$o=o("XLMProphetNetForConditionalGeneration"),D$o=o(" (XLMProphetNet model)"),G$o=l(),V1=a("p"),O$o=o("The model is set in evaluation mode by default using "),Kfe=a("code"),V$o=o("model.eval()"),X$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=a("code"),z$o=o("model.train()"),W$o=l(),F(X1.$$.fragment),eje=l(),Gi=a("h2"),z1=a("a"),eme=a("span"),F(Sy.$$.fragment),Q$o=l(),ome=a("span"),H$o=o("AutoModelForSequenceClassification"),oje=l(),Ro=a("div"),F(Ry.$$.fragment),U$o=l(),Oi=a("p"),J$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FG=a("a"),Y$o=o("from_pretrained()"),K$o=o(" class method or the "),TG=a("a"),Z$o=o("from_config()"),eko=o(` class
method.`),oko=l(),Py=a("p"),rko=o("This class cannot be instantiated directly using "),rme=a("code"),tko=o("__init__()"),ako=o(" (throws an error)."),nko=l(),it=a("div"),F(By.$$.fragment),sko=l(),tme=a("p"),lko=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iko=l(),Vi=a("p"),dko=o(`Note:
Loading a model from its configuration file does `),ame=a("strong"),cko=o("not"),fko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=a("a"),mko=o("from_pretrained()"),gko=o(" to load the model weights."),hko=l(),F(W1.$$.fragment),pko=l(),oo=a("div"),F(Iy.$$.fragment),_ko=l(),nme=a("p"),uko=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),bko=l(),Ra=a("p"),vko=o("The model class to instantiate is selected based on the "),sme=a("code"),Fko=o("model_type"),Tko=o(` property of the config object (either
passed as an argument or loaded from `),lme=a("code"),Mko=o("pretrained_model_name_or_path"),Eko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ime=a("code"),Cko=o("pretrained_model_name_or_path"),wko=o(":"),Ako=l(),N=a("ul"),Q1=a("li"),dme=a("strong"),yko=o("albert"),Lko=o(" \u2014 "),EG=a("a"),xko=o("AlbertForSequenceClassification"),$ko=o(" (ALBERT model)"),kko=l(),H1=a("li"),cme=a("strong"),Sko=o("bart"),Rko=o(" \u2014 "),CG=a("a"),Pko=o("BartForSequenceClassification"),Bko=o(" (BART model)"),Iko=l(),U1=a("li"),fme=a("strong"),Nko=o("bert"),qko=o(" \u2014 "),wG=a("a"),jko=o("BertForSequenceClassification"),Dko=o(" (BERT model)"),Gko=l(),J1=a("li"),mme=a("strong"),Oko=o("big_bird"),Vko=o(" \u2014 "),AG=a("a"),Xko=o("BigBirdForSequenceClassification"),zko=o(" (BigBird model)"),Wko=l(),Y1=a("li"),gme=a("strong"),Qko=o("bigbird_pegasus"),Hko=o(" \u2014 "),yG=a("a"),Uko=o("BigBirdPegasusForSequenceClassification"),Jko=o(" (BigBirdPegasus model)"),Yko=l(),K1=a("li"),hme=a("strong"),Kko=o("camembert"),Zko=o(" \u2014 "),LG=a("a"),eSo=o("CamembertForSequenceClassification"),oSo=o(" (CamemBERT model)"),rSo=l(),Z1=a("li"),pme=a("strong"),tSo=o("canine"),aSo=o(" \u2014 "),xG=a("a"),nSo=o("CanineForSequenceClassification"),sSo=o(" (Canine model)"),lSo=l(),eb=a("li"),_me=a("strong"),iSo=o("convbert"),dSo=o(" \u2014 "),$G=a("a"),cSo=o("ConvBertForSequenceClassification"),fSo=o(" (ConvBERT model)"),mSo=l(),ob=a("li"),ume=a("strong"),gSo=o("ctrl"),hSo=o(" \u2014 "),kG=a("a"),pSo=o("CTRLForSequenceClassification"),_So=o(" (CTRL model)"),uSo=l(),rb=a("li"),bme=a("strong"),bSo=o("data2vec-text"),vSo=o(" \u2014 "),SG=a("a"),FSo=o("Data2VecTextForSequenceClassification"),TSo=o(" (Data2VecText model)"),MSo=l(),tb=a("li"),vme=a("strong"),ESo=o("deberta"),CSo=o(" \u2014 "),RG=a("a"),wSo=o("DebertaForSequenceClassification"),ASo=o(" (DeBERTa model)"),ySo=l(),ab=a("li"),Fme=a("strong"),LSo=o("deberta-v2"),xSo=o(" \u2014 "),PG=a("a"),$So=o("DebertaV2ForSequenceClassification"),kSo=o(" (DeBERTa-v2 model)"),SSo=l(),nb=a("li"),Tme=a("strong"),RSo=o("distilbert"),PSo=o(" \u2014 "),BG=a("a"),BSo=o("DistilBertForSequenceClassification"),ISo=o(" (DistilBERT model)"),NSo=l(),sb=a("li"),Mme=a("strong"),qSo=o("electra"),jSo=o(" \u2014 "),IG=a("a"),DSo=o("ElectraForSequenceClassification"),GSo=o(" (ELECTRA model)"),OSo=l(),lb=a("li"),Eme=a("strong"),VSo=o("flaubert"),XSo=o(" \u2014 "),NG=a("a"),zSo=o("FlaubertForSequenceClassification"),WSo=o(" (FlauBERT model)"),QSo=l(),ib=a("li"),Cme=a("strong"),HSo=o("fnet"),USo=o(" \u2014 "),qG=a("a"),JSo=o("FNetForSequenceClassification"),YSo=o(" (FNet model)"),KSo=l(),db=a("li"),wme=a("strong"),ZSo=o("funnel"),eRo=o(" \u2014 "),jG=a("a"),oRo=o("FunnelForSequenceClassification"),rRo=o(" (Funnel Transformer model)"),tRo=l(),cb=a("li"),Ame=a("strong"),aRo=o("gpt2"),nRo=o(" \u2014 "),DG=a("a"),sRo=o("GPT2ForSequenceClassification"),lRo=o(" (OpenAI GPT-2 model)"),iRo=l(),fb=a("li"),yme=a("strong"),dRo=o("gpt_neo"),cRo=o(" \u2014 "),GG=a("a"),fRo=o("GPTNeoForSequenceClassification"),mRo=o(" (GPT Neo model)"),gRo=l(),mb=a("li"),Lme=a("strong"),hRo=o("gptj"),pRo=o(" \u2014 "),OG=a("a"),_Ro=o("GPTJForSequenceClassification"),uRo=o(" (GPT-J model)"),bRo=l(),gb=a("li"),xme=a("strong"),vRo=o("ibert"),FRo=o(" \u2014 "),VG=a("a"),TRo=o("IBertForSequenceClassification"),MRo=o(" (I-BERT model)"),ERo=l(),hb=a("li"),$me=a("strong"),CRo=o("layoutlm"),wRo=o(" \u2014 "),XG=a("a"),ARo=o("LayoutLMForSequenceClassification"),yRo=o(" (LayoutLM model)"),LRo=l(),pb=a("li"),kme=a("strong"),xRo=o("layoutlmv2"),$Ro=o(" \u2014 "),zG=a("a"),kRo=o("LayoutLMv2ForSequenceClassification"),SRo=o(" (LayoutLMv2 model)"),RRo=l(),_b=a("li"),Sme=a("strong"),PRo=o("layoutlmv3"),BRo=o(" \u2014 "),WG=a("a"),IRo=o("LayoutLMv3ForSequenceClassification"),NRo=o(" (LayoutLMv3 model)"),qRo=l(),ub=a("li"),Rme=a("strong"),jRo=o("led"),DRo=o(" \u2014 "),QG=a("a"),GRo=o("LEDForSequenceClassification"),ORo=o(" (LED model)"),VRo=l(),bb=a("li"),Pme=a("strong"),XRo=o("longformer"),zRo=o(" \u2014 "),HG=a("a"),WRo=o("LongformerForSequenceClassification"),QRo=o(" (Longformer model)"),HRo=l(),vb=a("li"),Bme=a("strong"),URo=o("mbart"),JRo=o(" \u2014 "),UG=a("a"),YRo=o("MBartForSequenceClassification"),KRo=o(" (mBART model)"),ZRo=l(),Fb=a("li"),Ime=a("strong"),ePo=o("megatron-bert"),oPo=o(" \u2014 "),JG=a("a"),rPo=o("MegatronBertForSequenceClassification"),tPo=o(" (MegatronBert model)"),aPo=l(),Tb=a("li"),Nme=a("strong"),nPo=o("mobilebert"),sPo=o(" \u2014 "),YG=a("a"),lPo=o("MobileBertForSequenceClassification"),iPo=o(" (MobileBERT model)"),dPo=l(),Mb=a("li"),qme=a("strong"),cPo=o("mpnet"),fPo=o(" \u2014 "),KG=a("a"),mPo=o("MPNetForSequenceClassification"),gPo=o(" (MPNet model)"),hPo=l(),Eb=a("li"),jme=a("strong"),pPo=o("nystromformer"),_Po=o(" \u2014 "),ZG=a("a"),uPo=o("NystromformerForSequenceClassification"),bPo=o(" (Nystromformer model)"),vPo=l(),Cb=a("li"),Dme=a("strong"),FPo=o("openai-gpt"),TPo=o(" \u2014 "),eO=a("a"),MPo=o("OpenAIGPTForSequenceClassification"),EPo=o(" (OpenAI GPT model)"),CPo=l(),wb=a("li"),Gme=a("strong"),wPo=o("perceiver"),APo=o(" \u2014 "),oO=a("a"),yPo=o("PerceiverForSequenceClassification"),LPo=o(" (Perceiver model)"),xPo=l(),Ab=a("li"),Ome=a("strong"),$Po=o("plbart"),kPo=o(" \u2014 "),rO=a("a"),SPo=o("PLBartForSequenceClassification"),RPo=o(" (PLBart model)"),PPo=l(),yb=a("li"),Vme=a("strong"),BPo=o("qdqbert"),IPo=o(" \u2014 "),tO=a("a"),NPo=o("QDQBertForSequenceClassification"),qPo=o(" (QDQBert model)"),jPo=l(),Lb=a("li"),Xme=a("strong"),DPo=o("reformer"),GPo=o(" \u2014 "),aO=a("a"),OPo=o("ReformerForSequenceClassification"),VPo=o(" (Reformer model)"),XPo=l(),xb=a("li"),zme=a("strong"),zPo=o("rembert"),WPo=o(" \u2014 "),nO=a("a"),QPo=o("RemBertForSequenceClassification"),HPo=o(" (RemBERT model)"),UPo=l(),$b=a("li"),Wme=a("strong"),JPo=o("roberta"),YPo=o(" \u2014 "),sO=a("a"),KPo=o("RobertaForSequenceClassification"),ZPo=o(" (RoBERTa model)"),eBo=l(),kb=a("li"),Qme=a("strong"),oBo=o("roformer"),rBo=o(" \u2014 "),lO=a("a"),tBo=o("RoFormerForSequenceClassification"),aBo=o(" (RoFormer model)"),nBo=l(),Sb=a("li"),Hme=a("strong"),sBo=o("squeezebert"),lBo=o(" \u2014 "),iO=a("a"),iBo=o("SqueezeBertForSequenceClassification"),dBo=o(" (SqueezeBERT model)"),cBo=l(),Rb=a("li"),Ume=a("strong"),fBo=o("tapas"),mBo=o(" \u2014 "),dO=a("a"),gBo=o("TapasForSequenceClassification"),hBo=o(" (TAPAS model)"),pBo=l(),Pb=a("li"),Jme=a("strong"),_Bo=o("transfo-xl"),uBo=o(" \u2014 "),cO=a("a"),bBo=o("TransfoXLForSequenceClassification"),vBo=o(" (Transformer-XL model)"),FBo=l(),Bb=a("li"),Yme=a("strong"),TBo=o("xlm"),MBo=o(" \u2014 "),fO=a("a"),EBo=o("XLMForSequenceClassification"),CBo=o(" (XLM model)"),wBo=l(),Ib=a("li"),Kme=a("strong"),ABo=o("xlm-roberta"),yBo=o(" \u2014 "),mO=a("a"),LBo=o("XLMRobertaForSequenceClassification"),xBo=o(" (XLM-RoBERTa model)"),$Bo=l(),Nb=a("li"),Zme=a("strong"),kBo=o("xlm-roberta-xl"),SBo=o(" \u2014 "),gO=a("a"),RBo=o("XLMRobertaXLForSequenceClassification"),PBo=o(" (XLM-RoBERTa-XL model)"),BBo=l(),qb=a("li"),ege=a("strong"),IBo=o("xlnet"),NBo=o(" \u2014 "),hO=a("a"),qBo=o("XLNetForSequenceClassification"),jBo=o(" (XLNet model)"),DBo=l(),jb=a("li"),oge=a("strong"),GBo=o("yoso"),OBo=o(" \u2014 "),pO=a("a"),VBo=o("YosoForSequenceClassification"),XBo=o(" (YOSO model)"),zBo=l(),Db=a("p"),WBo=o("The model is set in evaluation mode by default using "),rge=a("code"),QBo=o("model.eval()"),HBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tge=a("code"),UBo=o("model.train()"),JBo=l(),F(Gb.$$.fragment),rje=l(),Xi=a("h2"),Ob=a("a"),age=a("span"),F(Ny.$$.fragment),YBo=l(),nge=a("span"),KBo=o("AutoModelForMultipleChoice"),tje=l(),Po=a("div"),F(qy.$$.fragment),ZBo=l(),zi=a("p"),eIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_O=a("a"),oIo=o("from_pretrained()"),rIo=o(" class method or the "),uO=a("a"),tIo=o("from_config()"),aIo=o(` class
method.`),nIo=l(),jy=a("p"),sIo=o("This class cannot be instantiated directly using "),sge=a("code"),lIo=o("__init__()"),iIo=o(" (throws an error)."),dIo=l(),dt=a("div"),F(Dy.$$.fragment),cIo=l(),lge=a("p"),fIo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mIo=l(),Wi=a("p"),gIo=o(`Note:
Loading a model from its configuration file does `),ige=a("strong"),hIo=o("not"),pIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=a("a"),_Io=o("from_pretrained()"),uIo=o(" to load the model weights."),bIo=l(),F(Vb.$$.fragment),vIo=l(),ro=a("div"),F(Gy.$$.fragment),FIo=l(),dge=a("p"),TIo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),MIo=l(),Pa=a("p"),EIo=o("The model class to instantiate is selected based on the "),cge=a("code"),CIo=o("model_type"),wIo=o(` property of the config object (either
passed as an argument or loaded from `),fge=a("code"),AIo=o("pretrained_model_name_or_path"),yIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mge=a("code"),LIo=o("pretrained_model_name_or_path"),xIo=o(":"),$Io=l(),K=a("ul"),Xb=a("li"),gge=a("strong"),kIo=o("albert"),SIo=o(" \u2014 "),vO=a("a"),RIo=o("AlbertForMultipleChoice"),PIo=o(" (ALBERT model)"),BIo=l(),zb=a("li"),hge=a("strong"),IIo=o("bert"),NIo=o(" \u2014 "),FO=a("a"),qIo=o("BertForMultipleChoice"),jIo=o(" (BERT model)"),DIo=l(),Wb=a("li"),pge=a("strong"),GIo=o("big_bird"),OIo=o(" \u2014 "),TO=a("a"),VIo=o("BigBirdForMultipleChoice"),XIo=o(" (BigBird model)"),zIo=l(),Qb=a("li"),_ge=a("strong"),WIo=o("camembert"),QIo=o(" \u2014 "),MO=a("a"),HIo=o("CamembertForMultipleChoice"),UIo=o(" (CamemBERT model)"),JIo=l(),Hb=a("li"),uge=a("strong"),YIo=o("canine"),KIo=o(" \u2014 "),EO=a("a"),ZIo=o("CanineForMultipleChoice"),eNo=o(" (Canine model)"),oNo=l(),Ub=a("li"),bge=a("strong"),rNo=o("convbert"),tNo=o(" \u2014 "),CO=a("a"),aNo=o("ConvBertForMultipleChoice"),nNo=o(" (ConvBERT model)"),sNo=l(),Jb=a("li"),vge=a("strong"),lNo=o("data2vec-text"),iNo=o(" \u2014 "),wO=a("a"),dNo=o("Data2VecTextForMultipleChoice"),cNo=o(" (Data2VecText model)"),fNo=l(),Yb=a("li"),Fge=a("strong"),mNo=o("deberta-v2"),gNo=o(" \u2014 "),AO=a("a"),hNo=o("DebertaV2ForMultipleChoice"),pNo=o(" (DeBERTa-v2 model)"),_No=l(),Kb=a("li"),Tge=a("strong"),uNo=o("distilbert"),bNo=o(" \u2014 "),yO=a("a"),vNo=o("DistilBertForMultipleChoice"),FNo=o(" (DistilBERT model)"),TNo=l(),Zb=a("li"),Mge=a("strong"),MNo=o("electra"),ENo=o(" \u2014 "),LO=a("a"),CNo=o("ElectraForMultipleChoice"),wNo=o(" (ELECTRA model)"),ANo=l(),e2=a("li"),Ege=a("strong"),yNo=o("flaubert"),LNo=o(" \u2014 "),xO=a("a"),xNo=o("FlaubertForMultipleChoice"),$No=o(" (FlauBERT model)"),kNo=l(),o2=a("li"),Cge=a("strong"),SNo=o("fnet"),RNo=o(" \u2014 "),$O=a("a"),PNo=o("FNetForMultipleChoice"),BNo=o(" (FNet model)"),INo=l(),r2=a("li"),wge=a("strong"),NNo=o("funnel"),qNo=o(" \u2014 "),kO=a("a"),jNo=o("FunnelForMultipleChoice"),DNo=o(" (Funnel Transformer model)"),GNo=l(),t2=a("li"),Age=a("strong"),ONo=o("ibert"),VNo=o(" \u2014 "),SO=a("a"),XNo=o("IBertForMultipleChoice"),zNo=o(" (I-BERT model)"),WNo=l(),a2=a("li"),yge=a("strong"),QNo=o("longformer"),HNo=o(" \u2014 "),RO=a("a"),UNo=o("LongformerForMultipleChoice"),JNo=o(" (Longformer model)"),YNo=l(),n2=a("li"),Lge=a("strong"),KNo=o("megatron-bert"),ZNo=o(" \u2014 "),PO=a("a"),eqo=o("MegatronBertForMultipleChoice"),oqo=o(" (MegatronBert model)"),rqo=l(),s2=a("li"),xge=a("strong"),tqo=o("mobilebert"),aqo=o(" \u2014 "),BO=a("a"),nqo=o("MobileBertForMultipleChoice"),sqo=o(" (MobileBERT model)"),lqo=l(),l2=a("li"),$ge=a("strong"),iqo=o("mpnet"),dqo=o(" \u2014 "),IO=a("a"),cqo=o("MPNetForMultipleChoice"),fqo=o(" (MPNet model)"),mqo=l(),i2=a("li"),kge=a("strong"),gqo=o("nystromformer"),hqo=o(" \u2014 "),NO=a("a"),pqo=o("NystromformerForMultipleChoice"),_qo=o(" (Nystromformer model)"),uqo=l(),d2=a("li"),Sge=a("strong"),bqo=o("qdqbert"),vqo=o(" \u2014 "),qO=a("a"),Fqo=o("QDQBertForMultipleChoice"),Tqo=o(" (QDQBert model)"),Mqo=l(),c2=a("li"),Rge=a("strong"),Eqo=o("rembert"),Cqo=o(" \u2014 "),jO=a("a"),wqo=o("RemBertForMultipleChoice"),Aqo=o(" (RemBERT model)"),yqo=l(),f2=a("li"),Pge=a("strong"),Lqo=o("roberta"),xqo=o(" \u2014 "),DO=a("a"),$qo=o("RobertaForMultipleChoice"),kqo=o(" (RoBERTa model)"),Sqo=l(),m2=a("li"),Bge=a("strong"),Rqo=o("roformer"),Pqo=o(" \u2014 "),GO=a("a"),Bqo=o("RoFormerForMultipleChoice"),Iqo=o(" (RoFormer model)"),Nqo=l(),g2=a("li"),Ige=a("strong"),qqo=o("squeezebert"),jqo=o(" \u2014 "),OO=a("a"),Dqo=o("SqueezeBertForMultipleChoice"),Gqo=o(" (SqueezeBERT model)"),Oqo=l(),h2=a("li"),Nge=a("strong"),Vqo=o("xlm"),Xqo=o(" \u2014 "),VO=a("a"),zqo=o("XLMForMultipleChoice"),Wqo=o(" (XLM model)"),Qqo=l(),p2=a("li"),qge=a("strong"),Hqo=o("xlm-roberta"),Uqo=o(" \u2014 "),XO=a("a"),Jqo=o("XLMRobertaForMultipleChoice"),Yqo=o(" (XLM-RoBERTa model)"),Kqo=l(),_2=a("li"),jge=a("strong"),Zqo=o("xlm-roberta-xl"),ejo=o(" \u2014 "),zO=a("a"),ojo=o("XLMRobertaXLForMultipleChoice"),rjo=o(" (XLM-RoBERTa-XL model)"),tjo=l(),u2=a("li"),Dge=a("strong"),ajo=o("xlnet"),njo=o(" \u2014 "),WO=a("a"),sjo=o("XLNetForMultipleChoice"),ljo=o(" (XLNet model)"),ijo=l(),b2=a("li"),Gge=a("strong"),djo=o("yoso"),cjo=o(" \u2014 "),QO=a("a"),fjo=o("YosoForMultipleChoice"),mjo=o(" (YOSO model)"),gjo=l(),v2=a("p"),hjo=o("The model is set in evaluation mode by default using "),Oge=a("code"),pjo=o("model.eval()"),_jo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=a("code"),ujo=o("model.train()"),bjo=l(),F(F2.$$.fragment),aje=l(),Qi=a("h2"),T2=a("a"),Xge=a("span"),F(Oy.$$.fragment),vjo=l(),zge=a("span"),Fjo=o("AutoModelForNextSentencePrediction"),nje=l(),Bo=a("div"),F(Vy.$$.fragment),Tjo=l(),Hi=a("p"),Mjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HO=a("a"),Ejo=o("from_pretrained()"),Cjo=o(" class method or the "),UO=a("a"),wjo=o("from_config()"),Ajo=o(` class
method.`),yjo=l(),Xy=a("p"),Ljo=o("This class cannot be instantiated directly using "),Wge=a("code"),xjo=o("__init__()"),$jo=o(" (throws an error)."),kjo=l(),ct=a("div"),F(zy.$$.fragment),Sjo=l(),Qge=a("p"),Rjo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Pjo=l(),Ui=a("p"),Bjo=o(`Note:
Loading a model from its configuration file does `),Hge=a("strong"),Ijo=o("not"),Njo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=a("a"),qjo=o("from_pretrained()"),jjo=o(" to load the model weights."),Djo=l(),F(M2.$$.fragment),Gjo=l(),to=a("div"),F(Wy.$$.fragment),Ojo=l(),Uge=a("p"),Vjo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Xjo=l(),Ba=a("p"),zjo=o("The model class to instantiate is selected based on the "),Jge=a("code"),Wjo=o("model_type"),Qjo=o(` property of the config object (either
passed as an argument or loaded from `),Yge=a("code"),Hjo=o("pretrained_model_name_or_path"),Ujo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kge=a("code"),Jjo=o("pretrained_model_name_or_path"),Yjo=o(":"),Kjo=l(),Yr=a("ul"),E2=a("li"),Zge=a("strong"),Zjo=o("bert"),eDo=o(" \u2014 "),YO=a("a"),oDo=o("BertForNextSentencePrediction"),rDo=o(" (BERT model)"),tDo=l(),C2=a("li"),ehe=a("strong"),aDo=o("fnet"),nDo=o(" \u2014 "),KO=a("a"),sDo=o("FNetForNextSentencePrediction"),lDo=o(" (FNet model)"),iDo=l(),w2=a("li"),ohe=a("strong"),dDo=o("megatron-bert"),cDo=o(" \u2014 "),ZO=a("a"),fDo=o("MegatronBertForNextSentencePrediction"),mDo=o(" (MegatronBert model)"),gDo=l(),A2=a("li"),rhe=a("strong"),hDo=o("mobilebert"),pDo=o(" \u2014 "),eV=a("a"),_Do=o("MobileBertForNextSentencePrediction"),uDo=o(" (MobileBERT model)"),bDo=l(),y2=a("li"),the=a("strong"),vDo=o("qdqbert"),FDo=o(" \u2014 "),oV=a("a"),TDo=o("QDQBertForNextSentencePrediction"),MDo=o(" (QDQBert model)"),EDo=l(),L2=a("p"),CDo=o("The model is set in evaluation mode by default using "),ahe=a("code"),wDo=o("model.eval()"),ADo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nhe=a("code"),yDo=o("model.train()"),LDo=l(),F(x2.$$.fragment),sje=l(),Ji=a("h2"),$2=a("a"),she=a("span"),F(Qy.$$.fragment),xDo=l(),lhe=a("span"),$Do=o("AutoModelForTokenClassification"),lje=l(),Io=a("div"),F(Hy.$$.fragment),kDo=l(),Yi=a("p"),SDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rV=a("a"),RDo=o("from_pretrained()"),PDo=o(" class method or the "),tV=a("a"),BDo=o("from_config()"),IDo=o(` class
method.`),NDo=l(),Uy=a("p"),qDo=o("This class cannot be instantiated directly using "),ihe=a("code"),jDo=o("__init__()"),DDo=o(" (throws an error)."),GDo=l(),ft=a("div"),F(Jy.$$.fragment),ODo=l(),dhe=a("p"),VDo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),XDo=l(),Ki=a("p"),zDo=o(`Note:
Loading a model from its configuration file does `),che=a("strong"),WDo=o("not"),QDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=a("a"),HDo=o("from_pretrained()"),UDo=o(" to load the model weights."),JDo=l(),F(k2.$$.fragment),YDo=l(),ao=a("div"),F(Yy.$$.fragment),KDo=l(),fhe=a("p"),ZDo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),eGo=l(),Ia=a("p"),oGo=o("The model class to instantiate is selected based on the "),mhe=a("code"),rGo=o("model_type"),tGo=o(` property of the config object (either
passed as an argument or loaded from `),ghe=a("code"),aGo=o("pretrained_model_name_or_path"),nGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hhe=a("code"),sGo=o("pretrained_model_name_or_path"),lGo=o(":"),iGo=l(),H=a("ul"),S2=a("li"),phe=a("strong"),dGo=o("albert"),cGo=o(" \u2014 "),nV=a("a"),fGo=o("AlbertForTokenClassification"),mGo=o(" (ALBERT model)"),gGo=l(),R2=a("li"),_he=a("strong"),hGo=o("bert"),pGo=o(" \u2014 "),sV=a("a"),_Go=o("BertForTokenClassification"),uGo=o(" (BERT model)"),bGo=l(),P2=a("li"),uhe=a("strong"),vGo=o("big_bird"),FGo=o(" \u2014 "),lV=a("a"),TGo=o("BigBirdForTokenClassification"),MGo=o(" (BigBird model)"),EGo=l(),B2=a("li"),bhe=a("strong"),CGo=o("camembert"),wGo=o(" \u2014 "),iV=a("a"),AGo=o("CamembertForTokenClassification"),yGo=o(" (CamemBERT model)"),LGo=l(),I2=a("li"),vhe=a("strong"),xGo=o("canine"),$Go=o(" \u2014 "),dV=a("a"),kGo=o("CanineForTokenClassification"),SGo=o(" (Canine model)"),RGo=l(),N2=a("li"),Fhe=a("strong"),PGo=o("convbert"),BGo=o(" \u2014 "),cV=a("a"),IGo=o("ConvBertForTokenClassification"),NGo=o(" (ConvBERT model)"),qGo=l(),q2=a("li"),The=a("strong"),jGo=o("data2vec-text"),DGo=o(" \u2014 "),fV=a("a"),GGo=o("Data2VecTextForTokenClassification"),OGo=o(" (Data2VecText model)"),VGo=l(),j2=a("li"),Mhe=a("strong"),XGo=o("deberta"),zGo=o(" \u2014 "),mV=a("a"),WGo=o("DebertaForTokenClassification"),QGo=o(" (DeBERTa model)"),HGo=l(),D2=a("li"),Ehe=a("strong"),UGo=o("deberta-v2"),JGo=o(" \u2014 "),gV=a("a"),YGo=o("DebertaV2ForTokenClassification"),KGo=o(" (DeBERTa-v2 model)"),ZGo=l(),G2=a("li"),Che=a("strong"),eOo=o("distilbert"),oOo=o(" \u2014 "),hV=a("a"),rOo=o("DistilBertForTokenClassification"),tOo=o(" (DistilBERT model)"),aOo=l(),O2=a("li"),whe=a("strong"),nOo=o("electra"),sOo=o(" \u2014 "),pV=a("a"),lOo=o("ElectraForTokenClassification"),iOo=o(" (ELECTRA model)"),dOo=l(),V2=a("li"),Ahe=a("strong"),cOo=o("flaubert"),fOo=o(" \u2014 "),_V=a("a"),mOo=o("FlaubertForTokenClassification"),gOo=o(" (FlauBERT model)"),hOo=l(),X2=a("li"),yhe=a("strong"),pOo=o("fnet"),_Oo=o(" \u2014 "),uV=a("a"),uOo=o("FNetForTokenClassification"),bOo=o(" (FNet model)"),vOo=l(),z2=a("li"),Lhe=a("strong"),FOo=o("funnel"),TOo=o(" \u2014 "),bV=a("a"),MOo=o("FunnelForTokenClassification"),EOo=o(" (Funnel Transformer model)"),COo=l(),W2=a("li"),xhe=a("strong"),wOo=o("gpt2"),AOo=o(" \u2014 "),vV=a("a"),yOo=o("GPT2ForTokenClassification"),LOo=o(" (OpenAI GPT-2 model)"),xOo=l(),Q2=a("li"),$he=a("strong"),$Oo=o("ibert"),kOo=o(" \u2014 "),FV=a("a"),SOo=o("IBertForTokenClassification"),ROo=o(" (I-BERT model)"),POo=l(),H2=a("li"),khe=a("strong"),BOo=o("layoutlm"),IOo=o(" \u2014 "),TV=a("a"),NOo=o("LayoutLMForTokenClassification"),qOo=o(" (LayoutLM model)"),jOo=l(),U2=a("li"),She=a("strong"),DOo=o("layoutlmv2"),GOo=o(" \u2014 "),MV=a("a"),OOo=o("LayoutLMv2ForTokenClassification"),VOo=o(" (LayoutLMv2 model)"),XOo=l(),J2=a("li"),Rhe=a("strong"),zOo=o("layoutlmv3"),WOo=o(" \u2014 "),EV=a("a"),QOo=o("LayoutLMv3ForTokenClassification"),HOo=o(" (LayoutLMv3 model)"),UOo=l(),Y2=a("li"),Phe=a("strong"),JOo=o("longformer"),YOo=o(" \u2014 "),CV=a("a"),KOo=o("LongformerForTokenClassification"),ZOo=o(" (Longformer model)"),eVo=l(),K2=a("li"),Bhe=a("strong"),oVo=o("megatron-bert"),rVo=o(" \u2014 "),wV=a("a"),tVo=o("MegatronBertForTokenClassification"),aVo=o(" (MegatronBert model)"),nVo=l(),Z2=a("li"),Ihe=a("strong"),sVo=o("mobilebert"),lVo=o(" \u2014 "),AV=a("a"),iVo=o("MobileBertForTokenClassification"),dVo=o(" (MobileBERT model)"),cVo=l(),ev=a("li"),Nhe=a("strong"),fVo=o("mpnet"),mVo=o(" \u2014 "),yV=a("a"),gVo=o("MPNetForTokenClassification"),hVo=o(" (MPNet model)"),pVo=l(),ov=a("li"),qhe=a("strong"),_Vo=o("nystromformer"),uVo=o(" \u2014 "),LV=a("a"),bVo=o("NystromformerForTokenClassification"),vVo=o(" (Nystromformer model)"),FVo=l(),rv=a("li"),jhe=a("strong"),TVo=o("qdqbert"),MVo=o(" \u2014 "),xV=a("a"),EVo=o("QDQBertForTokenClassification"),CVo=o(" (QDQBert model)"),wVo=l(),tv=a("li"),Dhe=a("strong"),AVo=o("rembert"),yVo=o(" \u2014 "),$V=a("a"),LVo=o("RemBertForTokenClassification"),xVo=o(" (RemBERT model)"),$Vo=l(),av=a("li"),Ghe=a("strong"),kVo=o("roberta"),SVo=o(" \u2014 "),kV=a("a"),RVo=o("RobertaForTokenClassification"),PVo=o(" (RoBERTa model)"),BVo=l(),nv=a("li"),Ohe=a("strong"),IVo=o("roformer"),NVo=o(" \u2014 "),SV=a("a"),qVo=o("RoFormerForTokenClassification"),jVo=o(" (RoFormer model)"),DVo=l(),sv=a("li"),Vhe=a("strong"),GVo=o("squeezebert"),OVo=o(" \u2014 "),RV=a("a"),VVo=o("SqueezeBertForTokenClassification"),XVo=o(" (SqueezeBERT model)"),zVo=l(),lv=a("li"),Xhe=a("strong"),WVo=o("xlm"),QVo=o(" \u2014 "),PV=a("a"),HVo=o("XLMForTokenClassification"),UVo=o(" (XLM model)"),JVo=l(),iv=a("li"),zhe=a("strong"),YVo=o("xlm-roberta"),KVo=o(" \u2014 "),BV=a("a"),ZVo=o("XLMRobertaForTokenClassification"),eXo=o(" (XLM-RoBERTa model)"),oXo=l(),dv=a("li"),Whe=a("strong"),rXo=o("xlm-roberta-xl"),tXo=o(" \u2014 "),IV=a("a"),aXo=o("XLMRobertaXLForTokenClassification"),nXo=o(" (XLM-RoBERTa-XL model)"),sXo=l(),cv=a("li"),Qhe=a("strong"),lXo=o("xlnet"),iXo=o(" \u2014 "),NV=a("a"),dXo=o("XLNetForTokenClassification"),cXo=o(" (XLNet model)"),fXo=l(),fv=a("li"),Hhe=a("strong"),mXo=o("yoso"),gXo=o(" \u2014 "),qV=a("a"),hXo=o("YosoForTokenClassification"),pXo=o(" (YOSO model)"),_Xo=l(),mv=a("p"),uXo=o("The model is set in evaluation mode by default using "),Uhe=a("code"),bXo=o("model.eval()"),vXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jhe=a("code"),FXo=o("model.train()"),TXo=l(),F(gv.$$.fragment),ije=l(),Zi=a("h2"),hv=a("a"),Yhe=a("span"),F(Ky.$$.fragment),MXo=l(),Khe=a("span"),EXo=o("AutoModelForQuestionAnswering"),dje=l(),No=a("div"),F(Zy.$$.fragment),CXo=l(),ed=a("p"),wXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jV=a("a"),AXo=o("from_pretrained()"),yXo=o(" class method or the "),DV=a("a"),LXo=o("from_config()"),xXo=o(` class
method.`),$Xo=l(),eL=a("p"),kXo=o("This class cannot be instantiated directly using "),Zhe=a("code"),SXo=o("__init__()"),RXo=o(" (throws an error)."),PXo=l(),mt=a("div"),F(oL.$$.fragment),BXo=l(),epe=a("p"),IXo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NXo=l(),od=a("p"),qXo=o(`Note:
Loading a model from its configuration file does `),ope=a("strong"),jXo=o("not"),DXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),GXo=o("from_pretrained()"),OXo=o(" to load the model weights."),VXo=l(),F(pv.$$.fragment),XXo=l(),no=a("div"),F(rL.$$.fragment),zXo=l(),rpe=a("p"),WXo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),QXo=l(),Na=a("p"),HXo=o("The model class to instantiate is selected based on the "),tpe=a("code"),UXo=o("model_type"),JXo=o(` property of the config object (either
passed as an argument or loaded from `),ape=a("code"),YXo=o("pretrained_model_name_or_path"),KXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),npe=a("code"),ZXo=o("pretrained_model_name_or_path"),ezo=o(":"),ozo=l(),V=a("ul"),_v=a("li"),spe=a("strong"),rzo=o("albert"),tzo=o(" \u2014 "),OV=a("a"),azo=o("AlbertForQuestionAnswering"),nzo=o(" (ALBERT model)"),szo=l(),uv=a("li"),lpe=a("strong"),lzo=o("bart"),izo=o(" \u2014 "),VV=a("a"),dzo=o("BartForQuestionAnswering"),czo=o(" (BART model)"),fzo=l(),bv=a("li"),ipe=a("strong"),mzo=o("bert"),gzo=o(" \u2014 "),XV=a("a"),hzo=o("BertForQuestionAnswering"),pzo=o(" (BERT model)"),_zo=l(),vv=a("li"),dpe=a("strong"),uzo=o("big_bird"),bzo=o(" \u2014 "),zV=a("a"),vzo=o("BigBirdForQuestionAnswering"),Fzo=o(" (BigBird model)"),Tzo=l(),Fv=a("li"),cpe=a("strong"),Mzo=o("bigbird_pegasus"),Ezo=o(" \u2014 "),WV=a("a"),Czo=o("BigBirdPegasusForQuestionAnswering"),wzo=o(" (BigBirdPegasus model)"),Azo=l(),Tv=a("li"),fpe=a("strong"),yzo=o("camembert"),Lzo=o(" \u2014 "),QV=a("a"),xzo=o("CamembertForQuestionAnswering"),$zo=o(" (CamemBERT model)"),kzo=l(),Mv=a("li"),mpe=a("strong"),Szo=o("canine"),Rzo=o(" \u2014 "),HV=a("a"),Pzo=o("CanineForQuestionAnswering"),Bzo=o(" (Canine model)"),Izo=l(),Ev=a("li"),gpe=a("strong"),Nzo=o("convbert"),qzo=o(" \u2014 "),UV=a("a"),jzo=o("ConvBertForQuestionAnswering"),Dzo=o(" (ConvBERT model)"),Gzo=l(),Cv=a("li"),hpe=a("strong"),Ozo=o("data2vec-text"),Vzo=o(" \u2014 "),JV=a("a"),Xzo=o("Data2VecTextForQuestionAnswering"),zzo=o(" (Data2VecText model)"),Wzo=l(),wv=a("li"),ppe=a("strong"),Qzo=o("deberta"),Hzo=o(" \u2014 "),YV=a("a"),Uzo=o("DebertaForQuestionAnswering"),Jzo=o(" (DeBERTa model)"),Yzo=l(),Av=a("li"),_pe=a("strong"),Kzo=o("deberta-v2"),Zzo=o(" \u2014 "),KV=a("a"),eWo=o("DebertaV2ForQuestionAnswering"),oWo=o(" (DeBERTa-v2 model)"),rWo=l(),yv=a("li"),upe=a("strong"),tWo=o("distilbert"),aWo=o(" \u2014 "),ZV=a("a"),nWo=o("DistilBertForQuestionAnswering"),sWo=o(" (DistilBERT model)"),lWo=l(),Lv=a("li"),bpe=a("strong"),iWo=o("electra"),dWo=o(" \u2014 "),eX=a("a"),cWo=o("ElectraForQuestionAnswering"),fWo=o(" (ELECTRA model)"),mWo=l(),xv=a("li"),vpe=a("strong"),gWo=o("flaubert"),hWo=o(" \u2014 "),oX=a("a"),pWo=o("FlaubertForQuestionAnsweringSimple"),_Wo=o(" (FlauBERT model)"),uWo=l(),$v=a("li"),Fpe=a("strong"),bWo=o("fnet"),vWo=o(" \u2014 "),rX=a("a"),FWo=o("FNetForQuestionAnswering"),TWo=o(" (FNet model)"),MWo=l(),kv=a("li"),Tpe=a("strong"),EWo=o("funnel"),CWo=o(" \u2014 "),tX=a("a"),wWo=o("FunnelForQuestionAnswering"),AWo=o(" (Funnel Transformer model)"),yWo=l(),Sv=a("li"),Mpe=a("strong"),LWo=o("gptj"),xWo=o(" \u2014 "),aX=a("a"),$Wo=o("GPTJForQuestionAnswering"),kWo=o(" (GPT-J model)"),SWo=l(),Rv=a("li"),Epe=a("strong"),RWo=o("ibert"),PWo=o(" \u2014 "),nX=a("a"),BWo=o("IBertForQuestionAnswering"),IWo=o(" (I-BERT model)"),NWo=l(),Pv=a("li"),Cpe=a("strong"),qWo=o("layoutlmv2"),jWo=o(" \u2014 "),sX=a("a"),DWo=o("LayoutLMv2ForQuestionAnswering"),GWo=o(" (LayoutLMv2 model)"),OWo=l(),Bv=a("li"),wpe=a("strong"),VWo=o("layoutlmv3"),XWo=o(" \u2014 "),lX=a("a"),zWo=o("LayoutLMv3ForQuestionAnswering"),WWo=o(" (LayoutLMv3 model)"),QWo=l(),Iv=a("li"),Ape=a("strong"),HWo=o("led"),UWo=o(" \u2014 "),iX=a("a"),JWo=o("LEDForQuestionAnswering"),YWo=o(" (LED model)"),KWo=l(),Nv=a("li"),ype=a("strong"),ZWo=o("longformer"),eQo=o(" \u2014 "),dX=a("a"),oQo=o("LongformerForQuestionAnswering"),rQo=o(" (Longformer model)"),tQo=l(),qv=a("li"),Lpe=a("strong"),aQo=o("lxmert"),nQo=o(" \u2014 "),cX=a("a"),sQo=o("LxmertForQuestionAnswering"),lQo=o(" (LXMERT model)"),iQo=l(),jv=a("li"),xpe=a("strong"),dQo=o("mbart"),cQo=o(" \u2014 "),fX=a("a"),fQo=o("MBartForQuestionAnswering"),mQo=o(" (mBART model)"),gQo=l(),Dv=a("li"),$pe=a("strong"),hQo=o("megatron-bert"),pQo=o(" \u2014 "),mX=a("a"),_Qo=o("MegatronBertForQuestionAnswering"),uQo=o(" (MegatronBert model)"),bQo=l(),Gv=a("li"),kpe=a("strong"),vQo=o("mobilebert"),FQo=o(" \u2014 "),gX=a("a"),TQo=o("MobileBertForQuestionAnswering"),MQo=o(" (MobileBERT model)"),EQo=l(),Ov=a("li"),Spe=a("strong"),CQo=o("mpnet"),wQo=o(" \u2014 "),hX=a("a"),AQo=o("MPNetForQuestionAnswering"),yQo=o(" (MPNet model)"),LQo=l(),Vv=a("li"),Rpe=a("strong"),xQo=o("nystromformer"),$Qo=o(" \u2014 "),pX=a("a"),kQo=o("NystromformerForQuestionAnswering"),SQo=o(" (Nystromformer model)"),RQo=l(),Xv=a("li"),Ppe=a("strong"),PQo=o("qdqbert"),BQo=o(" \u2014 "),_X=a("a"),IQo=o("QDQBertForQuestionAnswering"),NQo=o(" (QDQBert model)"),qQo=l(),zv=a("li"),Bpe=a("strong"),jQo=o("reformer"),DQo=o(" \u2014 "),uX=a("a"),GQo=o("ReformerForQuestionAnswering"),OQo=o(" (Reformer model)"),VQo=l(),Wv=a("li"),Ipe=a("strong"),XQo=o("rembert"),zQo=o(" \u2014 "),bX=a("a"),WQo=o("RemBertForQuestionAnswering"),QQo=o(" (RemBERT model)"),HQo=l(),Qv=a("li"),Npe=a("strong"),UQo=o("roberta"),JQo=o(" \u2014 "),vX=a("a"),YQo=o("RobertaForQuestionAnswering"),KQo=o(" (RoBERTa model)"),ZQo=l(),Hv=a("li"),qpe=a("strong"),eHo=o("roformer"),oHo=o(" \u2014 "),FX=a("a"),rHo=o("RoFormerForQuestionAnswering"),tHo=o(" (RoFormer model)"),aHo=l(),Uv=a("li"),jpe=a("strong"),nHo=o("splinter"),sHo=o(" \u2014 "),TX=a("a"),lHo=o("SplinterForQuestionAnswering"),iHo=o(" (Splinter model)"),dHo=l(),Jv=a("li"),Dpe=a("strong"),cHo=o("squeezebert"),fHo=o(" \u2014 "),MX=a("a"),mHo=o("SqueezeBertForQuestionAnswering"),gHo=o(" (SqueezeBERT model)"),hHo=l(),Yv=a("li"),Gpe=a("strong"),pHo=o("xlm"),_Ho=o(" \u2014 "),EX=a("a"),uHo=o("XLMForQuestionAnsweringSimple"),bHo=o(" (XLM model)"),vHo=l(),Kv=a("li"),Ope=a("strong"),FHo=o("xlm-roberta"),THo=o(" \u2014 "),CX=a("a"),MHo=o("XLMRobertaForQuestionAnswering"),EHo=o(" (XLM-RoBERTa model)"),CHo=l(),Zv=a("li"),Vpe=a("strong"),wHo=o("xlm-roberta-xl"),AHo=o(" \u2014 "),wX=a("a"),yHo=o("XLMRobertaXLForQuestionAnswering"),LHo=o(" (XLM-RoBERTa-XL model)"),xHo=l(),e3=a("li"),Xpe=a("strong"),$Ho=o("xlnet"),kHo=o(" \u2014 "),AX=a("a"),SHo=o("XLNetForQuestionAnsweringSimple"),RHo=o(" (XLNet model)"),PHo=l(),o3=a("li"),zpe=a("strong"),BHo=o("yoso"),IHo=o(" \u2014 "),yX=a("a"),NHo=o("YosoForQuestionAnswering"),qHo=o(" (YOSO model)"),jHo=l(),r3=a("p"),DHo=o("The model is set in evaluation mode by default using "),Wpe=a("code"),GHo=o("model.eval()"),OHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qpe=a("code"),VHo=o("model.train()"),XHo=l(),F(t3.$$.fragment),cje=l(),rd=a("h2"),a3=a("a"),Hpe=a("span"),F(tL.$$.fragment),zHo=l(),Upe=a("span"),WHo=o("AutoModelForTableQuestionAnswering"),fje=l(),qo=a("div"),F(aL.$$.fragment),QHo=l(),td=a("p"),HHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LX=a("a"),UHo=o("from_pretrained()"),JHo=o(" class method or the "),xX=a("a"),YHo=o("from_config()"),KHo=o(` class
method.`),ZHo=l(),nL=a("p"),eUo=o("This class cannot be instantiated directly using "),Jpe=a("code"),oUo=o("__init__()"),rUo=o(" (throws an error)."),tUo=l(),gt=a("div"),F(sL.$$.fragment),aUo=l(),Ype=a("p"),nUo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),sUo=l(),ad=a("p"),lUo=o(`Note:
Loading a model from its configuration file does `),Kpe=a("strong"),iUo=o("not"),dUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),cUo=o("from_pretrained()"),fUo=o(" to load the model weights."),mUo=l(),F(n3.$$.fragment),gUo=l(),so=a("div"),F(lL.$$.fragment),hUo=l(),Zpe=a("p"),pUo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_Uo=l(),qa=a("p"),uUo=o("The model class to instantiate is selected based on the "),e_e=a("code"),bUo=o("model_type"),vUo=o(` property of the config object (either
passed as an argument or loaded from `),o_e=a("code"),FUo=o("pretrained_model_name_or_path"),TUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=a("code"),MUo=o("pretrained_model_name_or_path"),EUo=o(":"),CUo=l(),t_e=a("ul"),s3=a("li"),a_e=a("strong"),wUo=o("tapas"),AUo=o(" \u2014 "),kX=a("a"),yUo=o("TapasForQuestionAnswering"),LUo=o(" (TAPAS model)"),xUo=l(),l3=a("p"),$Uo=o("The model is set in evaluation mode by default using "),n_e=a("code"),kUo=o("model.eval()"),SUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s_e=a("code"),RUo=o("model.train()"),PUo=l(),F(i3.$$.fragment),mje=l(),nd=a("h2"),d3=a("a"),l_e=a("span"),F(iL.$$.fragment),BUo=l(),i_e=a("span"),IUo=o("AutoModelForImageClassification"),gje=l(),jo=a("div"),F(dL.$$.fragment),NUo=l(),sd=a("p"),qUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SX=a("a"),jUo=o("from_pretrained()"),DUo=o(" class method or the "),RX=a("a"),GUo=o("from_config()"),OUo=o(` class
method.`),VUo=l(),cL=a("p"),XUo=o("This class cannot be instantiated directly using "),d_e=a("code"),zUo=o("__init__()"),WUo=o(" (throws an error)."),QUo=l(),ht=a("div"),F(fL.$$.fragment),HUo=l(),c_e=a("p"),UUo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),JUo=l(),ld=a("p"),YUo=o(`Note:
Loading a model from its configuration file does `),f_e=a("strong"),KUo=o("not"),ZUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),eJo=o("from_pretrained()"),oJo=o(" to load the model weights."),rJo=l(),F(c3.$$.fragment),tJo=l(),lo=a("div"),F(mL.$$.fragment),aJo=l(),m_e=a("p"),nJo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),sJo=l(),ja=a("p"),lJo=o("The model class to instantiate is selected based on the "),g_e=a("code"),iJo=o("model_type"),dJo=o(` property of the config object (either
passed as an argument or loaded from `),h_e=a("code"),cJo=o("pretrained_model_name_or_path"),fJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=a("code"),mJo=o("pretrained_model_name_or_path"),gJo=o(":"),hJo=l(),Fe=a("ul"),f3=a("li"),__e=a("strong"),pJo=o("beit"),_Jo=o(" \u2014 "),BX=a("a"),uJo=o("BeitForImageClassification"),bJo=o(" (BEiT model)"),vJo=l(),m3=a("li"),u_e=a("strong"),FJo=o("convnext"),TJo=o(" \u2014 "),IX=a("a"),MJo=o("ConvNextForImageClassification"),EJo=o(" (ConvNext model)"),CJo=l(),g3=a("li"),b_e=a("strong"),wJo=o("cvt"),AJo=o(" \u2014 "),NX=a("a"),yJo=o("CvtForImageClassification"),LJo=o(" (CvT model)"),xJo=l(),h3=a("li"),v_e=a("strong"),$Jo=o("data2vec-vision"),kJo=o(" \u2014 "),qX=a("a"),SJo=o("Data2VecVisionForImageClassification"),RJo=o(" (Data2VecVision model)"),PJo=l(),Is=a("li"),F_e=a("strong"),BJo=o("deit"),IJo=o(" \u2014 "),jX=a("a"),NJo=o("DeiTForImageClassification"),qJo=o(" or "),DX=a("a"),jJo=o("DeiTForImageClassificationWithTeacher"),DJo=o(" (DeiT model)"),GJo=l(),p3=a("li"),T_e=a("strong"),OJo=o("imagegpt"),VJo=o(" \u2014 "),GX=a("a"),XJo=o("ImageGPTForImageClassification"),zJo=o(" (ImageGPT model)"),WJo=l(),pt=a("li"),M_e=a("strong"),QJo=o("perceiver"),HJo=o(" \u2014 "),OX=a("a"),UJo=o("PerceiverForImageClassificationLearned"),JJo=o(" or "),VX=a("a"),YJo=o("PerceiverForImageClassificationFourier"),KJo=o(" or "),XX=a("a"),ZJo=o("PerceiverForImageClassificationConvProcessing"),eYo=o(" (Perceiver model)"),oYo=l(),_3=a("li"),E_e=a("strong"),rYo=o("poolformer"),tYo=o(" \u2014 "),zX=a("a"),aYo=o("PoolFormerForImageClassification"),nYo=o(" (PoolFormer model)"),sYo=l(),u3=a("li"),C_e=a("strong"),lYo=o("regnet"),iYo=o(" \u2014 "),WX=a("a"),dYo=o("RegNetForImageClassification"),cYo=o(" (RegNet model)"),fYo=l(),b3=a("li"),w_e=a("strong"),mYo=o("resnet"),gYo=o(" \u2014 "),QX=a("a"),hYo=o("ResNetForImageClassification"),pYo=o(" (ResNet model)"),_Yo=l(),v3=a("li"),A_e=a("strong"),uYo=o("segformer"),bYo=o(" \u2014 "),HX=a("a"),vYo=o("SegformerForImageClassification"),FYo=o(" (SegFormer model)"),TYo=l(),F3=a("li"),y_e=a("strong"),MYo=o("swin"),EYo=o(" \u2014 "),UX=a("a"),CYo=o("SwinForImageClassification"),wYo=o(" (Swin model)"),AYo=l(),T3=a("li"),L_e=a("strong"),yYo=o("van"),LYo=o(" \u2014 "),JX=a("a"),xYo=o("VanForImageClassification"),$Yo=o(" (VAN model)"),kYo=l(),M3=a("li"),x_e=a("strong"),SYo=o("vit"),RYo=o(" \u2014 "),YX=a("a"),PYo=o("ViTForImageClassification"),BYo=o(" (ViT model)"),IYo=l(),E3=a("p"),NYo=o("The model is set in evaluation mode by default using "),$_e=a("code"),qYo=o("model.eval()"),jYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=a("code"),DYo=o("model.train()"),GYo=l(),F(C3.$$.fragment),hje=l(),id=a("h2"),w3=a("a"),S_e=a("span"),F(gL.$$.fragment),OYo=l(),R_e=a("span"),VYo=o("AutoModelForVision2Seq"),pje=l(),Do=a("div"),F(hL.$$.fragment),XYo=l(),dd=a("p"),zYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KX=a("a"),WYo=o("from_pretrained()"),QYo=o(" class method or the "),ZX=a("a"),HYo=o("from_config()"),UYo=o(` class
method.`),JYo=l(),pL=a("p"),YYo=o("This class cannot be instantiated directly using "),P_e=a("code"),KYo=o("__init__()"),ZYo=o(" (throws an error)."),eKo=l(),_t=a("div"),F(_L.$$.fragment),oKo=l(),B_e=a("p"),rKo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tKo=l(),cd=a("p"),aKo=o(`Note:
Loading a model from its configuration file does `),I_e=a("strong"),nKo=o("not"),sKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=a("a"),lKo=o("from_pretrained()"),iKo=o(" to load the model weights."),dKo=l(),F(A3.$$.fragment),cKo=l(),io=a("div"),F(uL.$$.fragment),fKo=l(),N_e=a("p"),mKo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gKo=l(),Da=a("p"),hKo=o("The model class to instantiate is selected based on the "),q_e=a("code"),pKo=o("model_type"),_Ko=o(` property of the config object (either
passed as an argument or loaded from `),j_e=a("code"),uKo=o("pretrained_model_name_or_path"),bKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=a("code"),vKo=o("pretrained_model_name_or_path"),FKo=o(":"),TKo=l(),G_e=a("ul"),y3=a("li"),O_e=a("strong"),MKo=o("vision-encoder-decoder"),EKo=o(" \u2014 "),oz=a("a"),CKo=o("VisionEncoderDecoderModel"),wKo=o(" (Vision Encoder decoder model)"),AKo=l(),L3=a("p"),yKo=o("The model is set in evaluation mode by default using "),V_e=a("code"),LKo=o("model.eval()"),xKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X_e=a("code"),$Ko=o("model.train()"),kKo=l(),F(x3.$$.fragment),_je=l(),fd=a("h2"),$3=a("a"),z_e=a("span"),F(bL.$$.fragment),SKo=l(),W_e=a("span"),RKo=o("AutoModelForAudioClassification"),uje=l(),Go=a("div"),F(vL.$$.fragment),PKo=l(),md=a("p"),BKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),rz=a("a"),IKo=o("from_pretrained()"),NKo=o(" class method or the "),tz=a("a"),qKo=o("from_config()"),jKo=o(` class
method.`),DKo=l(),FL=a("p"),GKo=o("This class cannot be instantiated directly using "),Q_e=a("code"),OKo=o("__init__()"),VKo=o(" (throws an error)."),XKo=l(),ut=a("div"),F(TL.$$.fragment),zKo=l(),H_e=a("p"),WKo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),QKo=l(),gd=a("p"),HKo=o(`Note:
Loading a model from its configuration file does `),U_e=a("strong"),UKo=o("not"),JKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),az=a("a"),YKo=o("from_pretrained()"),KKo=o(" to load the model weights."),ZKo=l(),F(k3.$$.fragment),eZo=l(),co=a("div"),F(ML.$$.fragment),oZo=l(),J_e=a("p"),rZo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),tZo=l(),Ga=a("p"),aZo=o("The model class to instantiate is selected based on the "),Y_e=a("code"),nZo=o("model_type"),sZo=o(` property of the config object (either
passed as an argument or loaded from `),K_e=a("code"),lZo=o("pretrained_model_name_or_path"),iZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=a("code"),dZo=o("pretrained_model_name_or_path"),cZo=o(":"),fZo=l(),Se=a("ul"),S3=a("li"),eue=a("strong"),mZo=o("data2vec-audio"),gZo=o(" \u2014 "),nz=a("a"),hZo=o("Data2VecAudioForSequenceClassification"),pZo=o(" (Data2VecAudio model)"),_Zo=l(),R3=a("li"),oue=a("strong"),uZo=o("hubert"),bZo=o(" \u2014 "),sz=a("a"),vZo=o("HubertForSequenceClassification"),FZo=o(" (Hubert model)"),TZo=l(),P3=a("li"),rue=a("strong"),MZo=o("sew"),EZo=o(" \u2014 "),lz=a("a"),CZo=o("SEWForSequenceClassification"),wZo=o(" (SEW model)"),AZo=l(),B3=a("li"),tue=a("strong"),yZo=o("sew-d"),LZo=o(" \u2014 "),iz=a("a"),xZo=o("SEWDForSequenceClassification"),$Zo=o(" (SEW-D model)"),kZo=l(),I3=a("li"),aue=a("strong"),SZo=o("unispeech"),RZo=o(" \u2014 "),dz=a("a"),PZo=o("UniSpeechForSequenceClassification"),BZo=o(" (UniSpeech model)"),IZo=l(),N3=a("li"),nue=a("strong"),NZo=o("unispeech-sat"),qZo=o(" \u2014 "),cz=a("a"),jZo=o("UniSpeechSatForSequenceClassification"),DZo=o(" (UniSpeechSat model)"),GZo=l(),q3=a("li"),sue=a("strong"),OZo=o("wav2vec2"),VZo=o(" \u2014 "),fz=a("a"),XZo=o("Wav2Vec2ForSequenceClassification"),zZo=o(" (Wav2Vec2 model)"),WZo=l(),j3=a("li"),lue=a("strong"),QZo=o("wav2vec2-conformer"),HZo=o(" \u2014 "),mz=a("a"),UZo=o("Wav2Vec2ConformerForSequenceClassification"),JZo=o(" (Wav2Vec2-Conformer model)"),YZo=l(),D3=a("li"),iue=a("strong"),KZo=o("wavlm"),ZZo=o(" \u2014 "),gz=a("a"),eer=o("WavLMForSequenceClassification"),oer=o(" (WavLM model)"),rer=l(),G3=a("p"),ter=o("The model is set in evaluation mode by default using "),due=a("code"),aer=o("model.eval()"),ner=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=a("code"),ser=o("model.train()"),ler=l(),F(O3.$$.fragment),bje=l(),hd=a("h2"),V3=a("a"),fue=a("span"),F(EL.$$.fragment),ier=l(),mue=a("span"),der=o("AutoModelForAudioFrameClassification"),vje=l(),Oo=a("div"),F(CL.$$.fragment),cer=l(),pd=a("p"),fer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hz=a("a"),mer=o("from_pretrained()"),ger=o(" class method or the "),pz=a("a"),her=o("from_config()"),per=o(` class
method.`),_er=l(),wL=a("p"),uer=o("This class cannot be instantiated directly using "),gue=a("code"),ber=o("__init__()"),ver=o(" (throws an error)."),Fer=l(),bt=a("div"),F(AL.$$.fragment),Ter=l(),hue=a("p"),Mer=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Eer=l(),_d=a("p"),Cer=o(`Note:
Loading a model from its configuration file does `),pue=a("strong"),wer=o("not"),Aer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),yer=o("from_pretrained()"),Ler=o(" to load the model weights."),xer=l(),F(X3.$$.fragment),$er=l(),fo=a("div"),F(yL.$$.fragment),ker=l(),_ue=a("p"),Ser=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Rer=l(),Oa=a("p"),Per=o("The model class to instantiate is selected based on the "),uue=a("code"),Ber=o("model_type"),Ier=o(` property of the config object (either
passed as an argument or loaded from `),bue=a("code"),Ner=o("pretrained_model_name_or_path"),qer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=a("code"),jer=o("pretrained_model_name_or_path"),Der=o(":"),Ger=l(),Kr=a("ul"),z3=a("li"),Fue=a("strong"),Oer=o("data2vec-audio"),Ver=o(" \u2014 "),uz=a("a"),Xer=o("Data2VecAudioForAudioFrameClassification"),zer=o(" (Data2VecAudio model)"),Wer=l(),W3=a("li"),Tue=a("strong"),Qer=o("unispeech-sat"),Her=o(" \u2014 "),bz=a("a"),Uer=o("UniSpeechSatForAudioFrameClassification"),Jer=o(" (UniSpeechSat model)"),Yer=l(),Q3=a("li"),Mue=a("strong"),Ker=o("wav2vec2"),Zer=o(" \u2014 "),vz=a("a"),eor=o("Wav2Vec2ForAudioFrameClassification"),oor=o(" (Wav2Vec2 model)"),ror=l(),H3=a("li"),Eue=a("strong"),tor=o("wav2vec2-conformer"),aor=o(" \u2014 "),Fz=a("a"),nor=o("Wav2Vec2ConformerForAudioFrameClassification"),sor=o(" (Wav2Vec2-Conformer model)"),lor=l(),U3=a("li"),Cue=a("strong"),ior=o("wavlm"),dor=o(" \u2014 "),Tz=a("a"),cor=o("WavLMForAudioFrameClassification"),mor=o(" (WavLM model)"),gor=l(),J3=a("p"),hor=o("The model is set in evaluation mode by default using "),wue=a("code"),por=o("model.eval()"),_or=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=a("code"),uor=o("model.train()"),bor=l(),F(Y3.$$.fragment),Fje=l(),ud=a("h2"),K3=a("a"),yue=a("span"),F(LL.$$.fragment),vor=l(),Lue=a("span"),For=o("AutoModelForCTC"),Tje=l(),Vo=a("div"),F(xL.$$.fragment),Tor=l(),bd=a("p"),Mor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Mz=a("a"),Eor=o("from_pretrained()"),Cor=o(" class method or the "),Ez=a("a"),wor=o("from_config()"),Aor=o(` class
method.`),yor=l(),$L=a("p"),Lor=o("This class cannot be instantiated directly using "),xue=a("code"),xor=o("__init__()"),$or=o(" (throws an error)."),kor=l(),vt=a("div"),F(kL.$$.fragment),Sor=l(),$ue=a("p"),Ror=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Por=l(),vd=a("p"),Bor=o(`Note:
Loading a model from its configuration file does `),kue=a("strong"),Ior=o("not"),Nor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=a("a"),qor=o("from_pretrained()"),jor=o(" to load the model weights."),Dor=l(),F(Z3.$$.fragment),Gor=l(),mo=a("div"),F(SL.$$.fragment),Oor=l(),Sue=a("p"),Vor=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Xor=l(),Va=a("p"),zor=o("The model class to instantiate is selected based on the "),Rue=a("code"),Wor=o("model_type"),Qor=o(` property of the config object (either
passed as an argument or loaded from `),Pue=a("code"),Hor=o("pretrained_model_name_or_path"),Uor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=a("code"),Jor=o("pretrained_model_name_or_path"),Yor=o(":"),Kor=l(),Re=a("ul"),eF=a("li"),Iue=a("strong"),Zor=o("data2vec-audio"),err=o(" \u2014 "),wz=a("a"),orr=o("Data2VecAudioForCTC"),rrr=o(" (Data2VecAudio model)"),trr=l(),oF=a("li"),Nue=a("strong"),arr=o("hubert"),nrr=o(" \u2014 "),Az=a("a"),srr=o("HubertForCTC"),lrr=o(" (Hubert model)"),irr=l(),rF=a("li"),que=a("strong"),drr=o("sew"),crr=o(" \u2014 "),yz=a("a"),frr=o("SEWForCTC"),mrr=o(" (SEW model)"),grr=l(),tF=a("li"),jue=a("strong"),hrr=o("sew-d"),prr=o(" \u2014 "),Lz=a("a"),_rr=o("SEWDForCTC"),urr=o(" (SEW-D model)"),brr=l(),aF=a("li"),Due=a("strong"),vrr=o("unispeech"),Frr=o(" \u2014 "),xz=a("a"),Trr=o("UniSpeechForCTC"),Mrr=o(" (UniSpeech model)"),Err=l(),nF=a("li"),Gue=a("strong"),Crr=o("unispeech-sat"),wrr=o(" \u2014 "),$z=a("a"),Arr=o("UniSpeechSatForCTC"),yrr=o(" (UniSpeechSat model)"),Lrr=l(),sF=a("li"),Oue=a("strong"),xrr=o("wav2vec2"),$rr=o(" \u2014 "),kz=a("a"),krr=o("Wav2Vec2ForCTC"),Srr=o(" (Wav2Vec2 model)"),Rrr=l(),lF=a("li"),Vue=a("strong"),Prr=o("wav2vec2-conformer"),Brr=o(" \u2014 "),Sz=a("a"),Irr=o("Wav2Vec2ConformerForCTC"),Nrr=o(" (Wav2Vec2-Conformer model)"),qrr=l(),iF=a("li"),Xue=a("strong"),jrr=o("wavlm"),Drr=o(" \u2014 "),Rz=a("a"),Grr=o("WavLMForCTC"),Orr=o(" (WavLM model)"),Vrr=l(),dF=a("p"),Xrr=o("The model is set in evaluation mode by default using "),zue=a("code"),zrr=o("model.eval()"),Wrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=a("code"),Qrr=o("model.train()"),Hrr=l(),F(cF.$$.fragment),Mje=l(),Fd=a("h2"),fF=a("a"),Que=a("span"),F(RL.$$.fragment),Urr=l(),Hue=a("span"),Jrr=o("AutoModelForSpeechSeq2Seq"),Eje=l(),Xo=a("div"),F(PL.$$.fragment),Yrr=l(),Td=a("p"),Krr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Pz=a("a"),Zrr=o("from_pretrained()"),etr=o(" class method or the "),Bz=a("a"),otr=o("from_config()"),rtr=o(` class
method.`),ttr=l(),BL=a("p"),atr=o("This class cannot be instantiated directly using "),Uue=a("code"),ntr=o("__init__()"),str=o(" (throws an error)."),ltr=l(),Ft=a("div"),F(IL.$$.fragment),itr=l(),Jue=a("p"),dtr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ctr=l(),Md=a("p"),ftr=o(`Note:
Loading a model from its configuration file does `),Yue=a("strong"),mtr=o("not"),gtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=a("a"),htr=o("from_pretrained()"),ptr=o(" to load the model weights."),_tr=l(),F(mF.$$.fragment),utr=l(),go=a("div"),F(NL.$$.fragment),btr=l(),Kue=a("p"),vtr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ftr=l(),Xa=a("p"),Ttr=o("The model class to instantiate is selected based on the "),Zue=a("code"),Mtr=o("model_type"),Etr=o(` property of the config object (either
passed as an argument or loaded from `),e4e=a("code"),Ctr=o("pretrained_model_name_or_path"),wtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=a("code"),Atr=o("pretrained_model_name_or_path"),ytr=o(":"),Ltr=l(),qL=a("ul"),gF=a("li"),r4e=a("strong"),xtr=o("speech-encoder-decoder"),$tr=o(" \u2014 "),Nz=a("a"),ktr=o("SpeechEncoderDecoderModel"),Str=o(" (Speech Encoder decoder model)"),Rtr=l(),hF=a("li"),t4e=a("strong"),Ptr=o("speech_to_text"),Btr=o(" \u2014 "),qz=a("a"),Itr=o("Speech2TextForConditionalGeneration"),Ntr=o(" (Speech2Text model)"),qtr=l(),pF=a("p"),jtr=o("The model is set in evaluation mode by default using "),a4e=a("code"),Dtr=o("model.eval()"),Gtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n4e=a("code"),Otr=o("model.train()"),Vtr=l(),F(_F.$$.fragment),Cje=l(),Ed=a("h2"),uF=a("a"),s4e=a("span"),F(jL.$$.fragment),Xtr=l(),l4e=a("span"),ztr=o("AutoModelForAudioXVector"),wje=l(),zo=a("div"),F(DL.$$.fragment),Wtr=l(),Cd=a("p"),Qtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jz=a("a"),Htr=o("from_pretrained()"),Utr=o(" class method or the "),Dz=a("a"),Jtr=o("from_config()"),Ytr=o(` class
method.`),Ktr=l(),GL=a("p"),Ztr=o("This class cannot be instantiated directly using "),i4e=a("code"),ear=o("__init__()"),oar=o(" (throws an error)."),rar=l(),Tt=a("div"),F(OL.$$.fragment),tar=l(),d4e=a("p"),aar=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),nar=l(),wd=a("p"),sar=o(`Note:
Loading a model from its configuration file does `),c4e=a("strong"),lar=o("not"),iar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),dar=o("from_pretrained()"),car=o(" to load the model weights."),far=l(),F(bF.$$.fragment),mar=l(),ho=a("div"),F(VL.$$.fragment),gar=l(),f4e=a("p"),har=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),par=l(),za=a("p"),_ar=o("The model class to instantiate is selected based on the "),m4e=a("code"),uar=o("model_type"),bar=o(` property of the config object (either
passed as an argument or loaded from `),g4e=a("code"),Far=o("pretrained_model_name_or_path"),Tar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=a("code"),Mar=o("pretrained_model_name_or_path"),Ear=o(":"),Car=l(),Zr=a("ul"),vF=a("li"),p4e=a("strong"),war=o("data2vec-audio"),Aar=o(" \u2014 "),Oz=a("a"),yar=o("Data2VecAudioForXVector"),Lar=o(" (Data2VecAudio model)"),xar=l(),FF=a("li"),_4e=a("strong"),$ar=o("unispeech-sat"),kar=o(" \u2014 "),Vz=a("a"),Sar=o("UniSpeechSatForXVector"),Rar=o(" (UniSpeechSat model)"),Par=l(),TF=a("li"),u4e=a("strong"),Bar=o("wav2vec2"),Iar=o(" \u2014 "),Xz=a("a"),Nar=o("Wav2Vec2ForXVector"),qar=o(" (Wav2Vec2 model)"),jar=l(),MF=a("li"),b4e=a("strong"),Dar=o("wav2vec2-conformer"),Gar=o(" \u2014 "),zz=a("a"),Oar=o("Wav2Vec2ConformerForXVector"),Var=o(" (Wav2Vec2-Conformer model)"),Xar=l(),EF=a("li"),v4e=a("strong"),zar=o("wavlm"),War=o(" \u2014 "),Wz=a("a"),Qar=o("WavLMForXVector"),Har=o(" (WavLM model)"),Uar=l(),CF=a("p"),Jar=o("The model is set in evaluation mode by default using "),F4e=a("code"),Yar=o("model.eval()"),Kar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T4e=a("code"),Zar=o("model.train()"),enr=l(),F(wF.$$.fragment),Aje=l(),Ad=a("h2"),AF=a("a"),M4e=a("span"),F(XL.$$.fragment),onr=l(),E4e=a("span"),rnr=o("AutoModelForMaskedImageModeling"),yje=l(),Wo=a("div"),F(zL.$$.fragment),tnr=l(),yd=a("p"),anr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Qz=a("a"),nnr=o("from_pretrained()"),snr=o(" class method or the "),Hz=a("a"),lnr=o("from_config()"),inr=o(` class
method.`),dnr=l(),WL=a("p"),cnr=o("This class cannot be instantiated directly using "),C4e=a("code"),fnr=o("__init__()"),mnr=o(" (throws an error)."),gnr=l(),Mt=a("div"),F(QL.$$.fragment),hnr=l(),w4e=a("p"),pnr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),_nr=l(),Ld=a("p"),unr=o(`Note:
Loading a model from its configuration file does `),A4e=a("strong"),bnr=o("not"),vnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=a("a"),Fnr=o("from_pretrained()"),Tnr=o(" to load the model weights."),Mnr=l(),F(yF.$$.fragment),Enr=l(),po=a("div"),F(HL.$$.fragment),Cnr=l(),y4e=a("p"),wnr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Anr=l(),Wa=a("p"),ynr=o("The model class to instantiate is selected based on the "),L4e=a("code"),Lnr=o("model_type"),xnr=o(` property of the config object (either
passed as an argument or loaded from `),x4e=a("code"),$nr=o("pretrained_model_name_or_path"),knr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=a("code"),Snr=o("pretrained_model_name_or_path"),Rnr=o(":"),Pnr=l(),xd=a("ul"),LF=a("li"),k4e=a("strong"),Bnr=o("deit"),Inr=o(" \u2014 "),Jz=a("a"),Nnr=o("DeiTForMaskedImageModeling"),qnr=o(" (DeiT model)"),jnr=l(),xF=a("li"),S4e=a("strong"),Dnr=o("swin"),Gnr=o(" \u2014 "),Yz=a("a"),Onr=o("SwinForMaskedImageModeling"),Vnr=o(" (Swin model)"),Xnr=l(),$F=a("li"),R4e=a("strong"),znr=o("vit"),Wnr=o(" \u2014 "),Kz=a("a"),Qnr=o("ViTForMaskedImageModeling"),Hnr=o(" (ViT model)"),Unr=l(),kF=a("p"),Jnr=o("The model is set in evaluation mode by default using "),P4e=a("code"),Ynr=o("model.eval()"),Knr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B4e=a("code"),Znr=o("model.train()"),esr=l(),F(SF.$$.fragment),Lje=l(),$d=a("h2"),RF=a("a"),I4e=a("span"),F(UL.$$.fragment),osr=l(),N4e=a("span"),rsr=o("AutoModelForObjectDetection"),xje=l(),Qo=a("div"),F(JL.$$.fragment),tsr=l(),kd=a("p"),asr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Zz=a("a"),nsr=o("from_pretrained()"),ssr=o(" class method or the "),eW=a("a"),lsr=o("from_config()"),isr=o(` class
method.`),dsr=l(),YL=a("p"),csr=o("This class cannot be instantiated directly using "),q4e=a("code"),fsr=o("__init__()"),msr=o(" (throws an error)."),gsr=l(),Et=a("div"),F(KL.$$.fragment),hsr=l(),j4e=a("p"),psr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),_sr=l(),Sd=a("p"),usr=o(`Note:
Loading a model from its configuration file does `),D4e=a("strong"),bsr=o("not"),vsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=a("a"),Fsr=o("from_pretrained()"),Tsr=o(" to load the model weights."),Msr=l(),F(PF.$$.fragment),Esr=l(),_o=a("div"),F(ZL.$$.fragment),Csr=l(),G4e=a("p"),wsr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Asr=l(),Qa=a("p"),ysr=o("The model class to instantiate is selected based on the "),O4e=a("code"),Lsr=o("model_type"),xsr=o(` property of the config object (either
passed as an argument or loaded from `),V4e=a("code"),$sr=o("pretrained_model_name_or_path"),ksr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=a("code"),Ssr=o("pretrained_model_name_or_path"),Rsr=o(":"),Psr=l(),e8=a("ul"),BF=a("li"),z4e=a("strong"),Bsr=o("detr"),Isr=o(" \u2014 "),rW=a("a"),Nsr=o("DetrForObjectDetection"),qsr=o(" (DETR model)"),jsr=l(),IF=a("li"),W4e=a("strong"),Dsr=o("yolos"),Gsr=o(" \u2014 "),tW=a("a"),Osr=o("YolosForObjectDetection"),Vsr=o(" (YOLOS model)"),Xsr=l(),NF=a("p"),zsr=o("The model is set in evaluation mode by default using "),Q4e=a("code"),Wsr=o("model.eval()"),Qsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H4e=a("code"),Hsr=o("model.train()"),Usr=l(),F(qF.$$.fragment),$je=l(),Rd=a("h2"),jF=a("a"),U4e=a("span"),F(o8.$$.fragment),Jsr=l(),J4e=a("span"),Ysr=o("AutoModelForImageSegmentation"),kje=l(),Ho=a("div"),F(r8.$$.fragment),Ksr=l(),Pd=a("p"),Zsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),aW=a("a"),elr=o("from_pretrained()"),olr=o(" class method or the "),nW=a("a"),rlr=o("from_config()"),tlr=o(` class
method.`),alr=l(),t8=a("p"),nlr=o("This class cannot be instantiated directly using "),Y4e=a("code"),slr=o("__init__()"),llr=o(" (throws an error)."),ilr=l(),Ct=a("div"),F(a8.$$.fragment),dlr=l(),K4e=a("p"),clr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),flr=l(),Bd=a("p"),mlr=o(`Note:
Loading a model from its configuration file does `),Z4e=a("strong"),glr=o("not"),hlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=a("a"),plr=o("from_pretrained()"),_lr=o(" to load the model weights."),ulr=l(),F(DF.$$.fragment),blr=l(),uo=a("div"),F(n8.$$.fragment),vlr=l(),e1e=a("p"),Flr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Tlr=l(),Ha=a("p"),Mlr=o("The model class to instantiate is selected based on the "),o1e=a("code"),Elr=o("model_type"),Clr=o(` property of the config object (either
passed as an argument or loaded from `),r1e=a("code"),wlr=o("pretrained_model_name_or_path"),Alr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=a("code"),ylr=o("pretrained_model_name_or_path"),Llr=o(":"),xlr=l(),a1e=a("ul"),GF=a("li"),n1e=a("strong"),$lr=o("detr"),klr=o(" \u2014 "),lW=a("a"),Slr=o("DetrForSegmentation"),Rlr=o(" (DETR model)"),Plr=l(),OF=a("p"),Blr=o("The model is set in evaluation mode by default using "),s1e=a("code"),Ilr=o("model.eval()"),Nlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l1e=a("code"),qlr=o("model.train()"),jlr=l(),F(VF.$$.fragment),Sje=l(),Id=a("h2"),XF=a("a"),i1e=a("span"),F(s8.$$.fragment),Dlr=l(),d1e=a("span"),Glr=o("AutoModelForSemanticSegmentation"),Rje=l(),Uo=a("div"),F(l8.$$.fragment),Olr=l(),Nd=a("p"),Vlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iW=a("a"),Xlr=o("from_pretrained()"),zlr=o(" class method or the "),dW=a("a"),Wlr=o("from_config()"),Qlr=o(` class
method.`),Hlr=l(),i8=a("p"),Ulr=o("This class cannot be instantiated directly using "),c1e=a("code"),Jlr=o("__init__()"),Ylr=o(" (throws an error)."),Klr=l(),wt=a("div"),F(d8.$$.fragment),Zlr=l(),f1e=a("p"),eir=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),oir=l(),qd=a("p"),rir=o(`Note:
Loading a model from its configuration file does `),m1e=a("strong"),tir=o("not"),air=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=a("a"),nir=o("from_pretrained()"),sir=o(" to load the model weights."),lir=l(),F(zF.$$.fragment),iir=l(),bo=a("div"),F(c8.$$.fragment),dir=l(),g1e=a("p"),cir=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),fir=l(),Ua=a("p"),mir=o("The model class to instantiate is selected based on the "),h1e=a("code"),gir=o("model_type"),hir=o(` property of the config object (either
passed as an argument or loaded from `),p1e=a("code"),pir=o("pretrained_model_name_or_path"),_ir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=a("code"),uir=o("pretrained_model_name_or_path"),bir=o(":"),vir=l(),Ja=a("ul"),WF=a("li"),u1e=a("strong"),Fir=o("beit"),Tir=o(" \u2014 "),fW=a("a"),Mir=o("BeitForSemanticSegmentation"),Eir=o(" (BEiT model)"),Cir=l(),QF=a("li"),b1e=a("strong"),wir=o("data2vec-vision"),Air=o(" \u2014 "),mW=a("a"),yir=o("Data2VecVisionForSemanticSegmentation"),Lir=o(" (Data2VecVision model)"),xir=l(),HF=a("li"),v1e=a("strong"),$ir=o("dpt"),kir=o(" \u2014 "),gW=a("a"),Sir=o("DPTForSemanticSegmentation"),Rir=o(" (DPT model)"),Pir=l(),UF=a("li"),F1e=a("strong"),Bir=o("segformer"),Iir=o(" \u2014 "),hW=a("a"),Nir=o("SegformerForSemanticSegmentation"),qir=o(" (SegFormer model)"),jir=l(),JF=a("p"),Dir=o("The model is set in evaluation mode by default using "),T1e=a("code"),Gir=o("model.eval()"),Oir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M1e=a("code"),Vir=o("model.train()"),Xir=l(),F(YF.$$.fragment),Pje=l(),jd=a("h2"),KF=a("a"),E1e=a("span"),F(f8.$$.fragment),zir=l(),C1e=a("span"),Wir=o("AutoModelForInstanceSegmentation"),Bje=l(),Jo=a("div"),F(m8.$$.fragment),Qir=l(),Dd=a("p"),Hir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pW=a("a"),Uir=o("from_pretrained()"),Jir=o(" class method or the "),_W=a("a"),Yir=o("from_config()"),Kir=o(` class
method.`),Zir=l(),g8=a("p"),edr=o("This class cannot be instantiated directly using "),w1e=a("code"),odr=o("__init__()"),rdr=o(" (throws an error)."),tdr=l(),At=a("div"),F(h8.$$.fragment),adr=l(),A1e=a("p"),ndr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),sdr=l(),Gd=a("p"),ldr=o(`Note:
Loading a model from its configuration file does `),y1e=a("strong"),idr=o("not"),ddr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),cdr=o("from_pretrained()"),fdr=o(" to load the model weights."),mdr=l(),F(ZF.$$.fragment),gdr=l(),vo=a("div"),F(p8.$$.fragment),hdr=l(),L1e=a("p"),pdr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),_dr=l(),Ya=a("p"),udr=o("The model class to instantiate is selected based on the "),x1e=a("code"),bdr=o("model_type"),vdr=o(` property of the config object (either
passed as an argument or loaded from `),$1e=a("code"),Fdr=o("pretrained_model_name_or_path"),Tdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k1e=a("code"),Mdr=o("pretrained_model_name_or_path"),Edr=o(":"),Cdr=l(),S1e=a("ul"),eT=a("li"),R1e=a("strong"),wdr=o("maskformer"),Adr=o(" \u2014 "),bW=a("a"),ydr=o("MaskFormerForInstanceSegmentation"),Ldr=o(" (MaskFormer model)"),xdr=l(),oT=a("p"),$dr=o("The model is set in evaluation mode by default using "),P1e=a("code"),kdr=o("model.eval()"),Sdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B1e=a("code"),Rdr=o("model.train()"),Pdr=l(),F(rT.$$.fragment),Ije=l(),Od=a("h2"),tT=a("a"),I1e=a("span"),F(_8.$$.fragment),Bdr=l(),N1e=a("span"),Idr=o("TFAutoModel"),Nje=l(),Yo=a("div"),F(u8.$$.fragment),Ndr=l(),Vd=a("p"),qdr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vW=a("a"),jdr=o("from_pretrained()"),Ddr=o(" class method or the "),FW=a("a"),Gdr=o("from_config()"),Odr=o(` class
method.`),Vdr=l(),b8=a("p"),Xdr=o("This class cannot be instantiated directly using "),q1e=a("code"),zdr=o("__init__()"),Wdr=o(" (throws an error)."),Qdr=l(),yt=a("div"),F(v8.$$.fragment),Hdr=l(),j1e=a("p"),Udr=o("Instantiates one of the base model classes of the library from a configuration."),Jdr=l(),Xd=a("p"),Ydr=o(`Note:
Loading a model from its configuration file does `),D1e=a("strong"),Kdr=o("not"),Zdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),ecr=o("from_pretrained()"),ocr=o(" to load the model weights."),rcr=l(),F(aT.$$.fragment),tcr=l(),wr=a("div"),F(F8.$$.fragment),acr=l(),G1e=a("p"),ncr=o("Instantiate one of the base model classes of the library from a pretrained model."),scr=l(),Ka=a("p"),lcr=o("The model class to instantiate is selected based on the "),O1e=a("code"),icr=o("model_type"),dcr=o(` property of the config object (either
passed as an argument or loaded from `),V1e=a("code"),ccr=o("pretrained_model_name_or_path"),fcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=a("code"),mcr=o("pretrained_model_name_or_path"),gcr=o(":"),hcr=l(),q=a("ul"),nT=a("li"),z1e=a("strong"),pcr=o("albert"),_cr=o(" \u2014 "),MW=a("a"),ucr=o("TFAlbertModel"),bcr=o(" (ALBERT model)"),vcr=l(),sT=a("li"),W1e=a("strong"),Fcr=o("bart"),Tcr=o(" \u2014 "),EW=a("a"),Mcr=o("TFBartModel"),Ecr=o(" (BART model)"),Ccr=l(),lT=a("li"),Q1e=a("strong"),wcr=o("bert"),Acr=o(" \u2014 "),CW=a("a"),ycr=o("TFBertModel"),Lcr=o(" (BERT model)"),xcr=l(),iT=a("li"),H1e=a("strong"),$cr=o("blenderbot"),kcr=o(" \u2014 "),wW=a("a"),Scr=o("TFBlenderbotModel"),Rcr=o(" (Blenderbot model)"),Pcr=l(),dT=a("li"),U1e=a("strong"),Bcr=o("blenderbot-small"),Icr=o(" \u2014 "),AW=a("a"),Ncr=o("TFBlenderbotSmallModel"),qcr=o(" (BlenderbotSmall model)"),jcr=l(),cT=a("li"),J1e=a("strong"),Dcr=o("camembert"),Gcr=o(" \u2014 "),yW=a("a"),Ocr=o("TFCamembertModel"),Vcr=o(" (CamemBERT model)"),Xcr=l(),fT=a("li"),Y1e=a("strong"),zcr=o("clip"),Wcr=o(" \u2014 "),LW=a("a"),Qcr=o("TFCLIPModel"),Hcr=o(" (CLIP model)"),Ucr=l(),mT=a("li"),K1e=a("strong"),Jcr=o("convbert"),Ycr=o(" \u2014 "),xW=a("a"),Kcr=o("TFConvBertModel"),Zcr=o(" (ConvBERT model)"),efr=l(),gT=a("li"),Z1e=a("strong"),ofr=o("convnext"),rfr=o(" \u2014 "),$W=a("a"),tfr=o("TFConvNextModel"),afr=o(" (ConvNext model)"),nfr=l(),hT=a("li"),ebe=a("strong"),sfr=o("ctrl"),lfr=o(" \u2014 "),kW=a("a"),ifr=o("TFCTRLModel"),dfr=o(" (CTRL model)"),cfr=l(),pT=a("li"),obe=a("strong"),ffr=o("data2vec-vision"),mfr=o(" \u2014 "),SW=a("a"),gfr=o("TFData2VecVisionModel"),hfr=o(" (Data2VecVision model)"),pfr=l(),_T=a("li"),rbe=a("strong"),_fr=o("deberta"),ufr=o(" \u2014 "),RW=a("a"),bfr=o("TFDebertaModel"),vfr=o(" (DeBERTa model)"),Ffr=l(),uT=a("li"),tbe=a("strong"),Tfr=o("deberta-v2"),Mfr=o(" \u2014 "),PW=a("a"),Efr=o("TFDebertaV2Model"),Cfr=o(" (DeBERTa-v2 model)"),wfr=l(),bT=a("li"),abe=a("strong"),Afr=o("distilbert"),yfr=o(" \u2014 "),BW=a("a"),Lfr=o("TFDistilBertModel"),xfr=o(" (DistilBERT model)"),$fr=l(),vT=a("li"),nbe=a("strong"),kfr=o("dpr"),Sfr=o(" \u2014 "),IW=a("a"),Rfr=o("TFDPRQuestionEncoder"),Pfr=o(" (DPR model)"),Bfr=l(),FT=a("li"),sbe=a("strong"),Ifr=o("electra"),Nfr=o(" \u2014 "),NW=a("a"),qfr=o("TFElectraModel"),jfr=o(" (ELECTRA model)"),Dfr=l(),TT=a("li"),lbe=a("strong"),Gfr=o("flaubert"),Ofr=o(" \u2014 "),qW=a("a"),Vfr=o("TFFlaubertModel"),Xfr=o(" (FlauBERT model)"),zfr=l(),Ns=a("li"),ibe=a("strong"),Wfr=o("funnel"),Qfr=o(" \u2014 "),jW=a("a"),Hfr=o("TFFunnelModel"),Ufr=o(" or "),DW=a("a"),Jfr=o("TFFunnelBaseModel"),Yfr=o(" (Funnel Transformer model)"),Kfr=l(),MT=a("li"),dbe=a("strong"),Zfr=o("gpt2"),emr=o(" \u2014 "),GW=a("a"),omr=o("TFGPT2Model"),rmr=o(" (OpenAI GPT-2 model)"),tmr=l(),ET=a("li"),cbe=a("strong"),amr=o("gptj"),nmr=o(" \u2014 "),OW=a("a"),smr=o("TFGPTJModel"),lmr=o(" (GPT-J model)"),imr=l(),CT=a("li"),fbe=a("strong"),dmr=o("hubert"),cmr=o(" \u2014 "),VW=a("a"),fmr=o("TFHubertModel"),mmr=o(" (Hubert model)"),gmr=l(),wT=a("li"),mbe=a("strong"),hmr=o("layoutlm"),pmr=o(" \u2014 "),XW=a("a"),_mr=o("TFLayoutLMModel"),umr=o(" (LayoutLM model)"),bmr=l(),AT=a("li"),gbe=a("strong"),vmr=o("led"),Fmr=o(" \u2014 "),zW=a("a"),Tmr=o("TFLEDModel"),Mmr=o(" (LED model)"),Emr=l(),yT=a("li"),hbe=a("strong"),Cmr=o("longformer"),wmr=o(" \u2014 "),WW=a("a"),Amr=o("TFLongformerModel"),ymr=o(" (Longformer model)"),Lmr=l(),LT=a("li"),pbe=a("strong"),xmr=o("lxmert"),$mr=o(" \u2014 "),QW=a("a"),kmr=o("TFLxmertModel"),Smr=o(" (LXMERT model)"),Rmr=l(),xT=a("li"),_be=a("strong"),Pmr=o("marian"),Bmr=o(" \u2014 "),HW=a("a"),Imr=o("TFMarianModel"),Nmr=o(" (Marian model)"),qmr=l(),$T=a("li"),ube=a("strong"),jmr=o("mbart"),Dmr=o(" \u2014 "),UW=a("a"),Gmr=o("TFMBartModel"),Omr=o(" (mBART model)"),Vmr=l(),kT=a("li"),bbe=a("strong"),Xmr=o("mobilebert"),zmr=o(" \u2014 "),JW=a("a"),Wmr=o("TFMobileBertModel"),Qmr=o(" (MobileBERT model)"),Hmr=l(),ST=a("li"),vbe=a("strong"),Umr=o("mpnet"),Jmr=o(" \u2014 "),YW=a("a"),Ymr=o("TFMPNetModel"),Kmr=o(" (MPNet model)"),Zmr=l(),RT=a("li"),Fbe=a("strong"),egr=o("mt5"),ogr=o(" \u2014 "),KW=a("a"),rgr=o("TFMT5Model"),tgr=o(" (mT5 model)"),agr=l(),PT=a("li"),Tbe=a("strong"),ngr=o("openai-gpt"),sgr=o(" \u2014 "),ZW=a("a"),lgr=o("TFOpenAIGPTModel"),igr=o(" (OpenAI GPT model)"),dgr=l(),BT=a("li"),Mbe=a("strong"),cgr=o("opt"),fgr=o(" \u2014 "),eQ=a("a"),mgr=o("TFOPTModel"),ggr=o(" (OPT model)"),hgr=l(),IT=a("li"),Ebe=a("strong"),pgr=o("pegasus"),_gr=o(" \u2014 "),oQ=a("a"),ugr=o("TFPegasusModel"),bgr=o(" (Pegasus model)"),vgr=l(),NT=a("li"),Cbe=a("strong"),Fgr=o("rembert"),Tgr=o(" \u2014 "),rQ=a("a"),Mgr=o("TFRemBertModel"),Egr=o(" (RemBERT model)"),Cgr=l(),qT=a("li"),wbe=a("strong"),wgr=o("roberta"),Agr=o(" \u2014 "),tQ=a("a"),ygr=o("TFRobertaModel"),Lgr=o(" (RoBERTa model)"),xgr=l(),jT=a("li"),Abe=a("strong"),$gr=o("roformer"),kgr=o(" \u2014 "),aQ=a("a"),Sgr=o("TFRoFormerModel"),Rgr=o(" (RoFormer model)"),Pgr=l(),DT=a("li"),ybe=a("strong"),Bgr=o("speech_to_text"),Igr=o(" \u2014 "),nQ=a("a"),Ngr=o("TFSpeech2TextModel"),qgr=o(" (Speech2Text model)"),jgr=l(),GT=a("li"),Lbe=a("strong"),Dgr=o("swin"),Ggr=o(" \u2014 "),sQ=a("a"),Ogr=o("TFSwinModel"),Vgr=o(" (Swin model)"),Xgr=l(),OT=a("li"),xbe=a("strong"),zgr=o("t5"),Wgr=o(" \u2014 "),lQ=a("a"),Qgr=o("TFT5Model"),Hgr=o(" (T5 model)"),Ugr=l(),VT=a("li"),$be=a("strong"),Jgr=o("tapas"),Ygr=o(" \u2014 "),iQ=a("a"),Kgr=o("TFTapasModel"),Zgr=o(" (TAPAS model)"),ehr=l(),XT=a("li"),kbe=a("strong"),ohr=o("transfo-xl"),rhr=o(" \u2014 "),dQ=a("a"),thr=o("TFTransfoXLModel"),ahr=o(" (Transformer-XL model)"),nhr=l(),zT=a("li"),Sbe=a("strong"),shr=o("vit"),lhr=o(" \u2014 "),cQ=a("a"),ihr=o("TFViTModel"),dhr=o(" (ViT model)"),chr=l(),WT=a("li"),Rbe=a("strong"),fhr=o("vit_mae"),mhr=o(" \u2014 "),fQ=a("a"),ghr=o("TFViTMAEModel"),hhr=o(" (ViTMAE model)"),phr=l(),QT=a("li"),Pbe=a("strong"),_hr=o("wav2vec2"),uhr=o(" \u2014 "),mQ=a("a"),bhr=o("TFWav2Vec2Model"),vhr=o(" (Wav2Vec2 model)"),Fhr=l(),HT=a("li"),Bbe=a("strong"),Thr=o("xlm"),Mhr=o(" \u2014 "),gQ=a("a"),Ehr=o("TFXLMModel"),Chr=o(" (XLM model)"),whr=l(),UT=a("li"),Ibe=a("strong"),Ahr=o("xlm-roberta"),yhr=o(" \u2014 "),hQ=a("a"),Lhr=o("TFXLMRobertaModel"),xhr=o(" (XLM-RoBERTa model)"),$hr=l(),JT=a("li"),Nbe=a("strong"),khr=o("xlnet"),Shr=o(" \u2014 "),pQ=a("a"),Rhr=o("TFXLNetModel"),Phr=o(" (XLNet model)"),Bhr=l(),F(YT.$$.fragment),qje=l(),zd=a("h2"),KT=a("a"),qbe=a("span"),F(T8.$$.fragment),Ihr=l(),jbe=a("span"),Nhr=o("TFAutoModelForPreTraining"),jje=l(),Ko=a("div"),F(M8.$$.fragment),qhr=l(),Wd=a("p"),jhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_Q=a("a"),Dhr=o("from_pretrained()"),Ghr=o(" class method or the "),uQ=a("a"),Ohr=o("from_config()"),Vhr=o(` class
method.`),Xhr=l(),E8=a("p"),zhr=o("This class cannot be instantiated directly using "),Dbe=a("code"),Whr=o("__init__()"),Qhr=o(" (throws an error)."),Hhr=l(),Lt=a("div"),F(C8.$$.fragment),Uhr=l(),Gbe=a("p"),Jhr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Yhr=l(),Qd=a("p"),Khr=o(`Note:
Loading a model from its configuration file does `),Obe=a("strong"),Zhr=o("not"),epr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),opr=o("from_pretrained()"),rpr=o(" to load the model weights."),tpr=l(),F(ZT.$$.fragment),apr=l(),Ar=a("div"),F(w8.$$.fragment),npr=l(),Vbe=a("p"),spr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lpr=l(),Za=a("p"),ipr=o("The model class to instantiate is selected based on the "),Xbe=a("code"),dpr=o("model_type"),cpr=o(` property of the config object (either
passed as an argument or loaded from `),zbe=a("code"),fpr=o("pretrained_model_name_or_path"),mpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=a("code"),gpr=o("pretrained_model_name_or_path"),hpr=o(":"),ppr=l(),se=a("ul"),e7=a("li"),Qbe=a("strong"),_pr=o("albert"),upr=o(" \u2014 "),vQ=a("a"),bpr=o("TFAlbertForPreTraining"),vpr=o(" (ALBERT model)"),Fpr=l(),o7=a("li"),Hbe=a("strong"),Tpr=o("bart"),Mpr=o(" \u2014 "),FQ=a("a"),Epr=o("TFBartForConditionalGeneration"),Cpr=o(" (BART model)"),wpr=l(),r7=a("li"),Ube=a("strong"),Apr=o("bert"),ypr=o(" \u2014 "),TQ=a("a"),Lpr=o("TFBertForPreTraining"),xpr=o(" (BERT model)"),$pr=l(),t7=a("li"),Jbe=a("strong"),kpr=o("camembert"),Spr=o(" \u2014 "),MQ=a("a"),Rpr=o("TFCamembertForMaskedLM"),Ppr=o(" (CamemBERT model)"),Bpr=l(),a7=a("li"),Ybe=a("strong"),Ipr=o("ctrl"),Npr=o(" \u2014 "),EQ=a("a"),qpr=o("TFCTRLLMHeadModel"),jpr=o(" (CTRL model)"),Dpr=l(),n7=a("li"),Kbe=a("strong"),Gpr=o("distilbert"),Opr=o(" \u2014 "),CQ=a("a"),Vpr=o("TFDistilBertForMaskedLM"),Xpr=o(" (DistilBERT model)"),zpr=l(),s7=a("li"),Zbe=a("strong"),Wpr=o("electra"),Qpr=o(" \u2014 "),wQ=a("a"),Hpr=o("TFElectraForPreTraining"),Upr=o(" (ELECTRA model)"),Jpr=l(),l7=a("li"),e2e=a("strong"),Ypr=o("flaubert"),Kpr=o(" \u2014 "),AQ=a("a"),Zpr=o("TFFlaubertWithLMHeadModel"),e_r=o(" (FlauBERT model)"),o_r=l(),i7=a("li"),o2e=a("strong"),r_r=o("funnel"),t_r=o(" \u2014 "),yQ=a("a"),a_r=o("TFFunnelForPreTraining"),n_r=o(" (Funnel Transformer model)"),s_r=l(),d7=a("li"),r2e=a("strong"),l_r=o("gpt2"),i_r=o(" \u2014 "),LQ=a("a"),d_r=o("TFGPT2LMHeadModel"),c_r=o(" (OpenAI GPT-2 model)"),f_r=l(),c7=a("li"),t2e=a("strong"),m_r=o("layoutlm"),g_r=o(" \u2014 "),xQ=a("a"),h_r=o("TFLayoutLMForMaskedLM"),p_r=o(" (LayoutLM model)"),__r=l(),f7=a("li"),a2e=a("strong"),u_r=o("lxmert"),b_r=o(" \u2014 "),$Q=a("a"),v_r=o("TFLxmertForPreTraining"),F_r=o(" (LXMERT model)"),T_r=l(),m7=a("li"),n2e=a("strong"),M_r=o("mobilebert"),E_r=o(" \u2014 "),kQ=a("a"),C_r=o("TFMobileBertForPreTraining"),w_r=o(" (MobileBERT model)"),A_r=l(),g7=a("li"),s2e=a("strong"),y_r=o("mpnet"),L_r=o(" \u2014 "),SQ=a("a"),x_r=o("TFMPNetForMaskedLM"),$_r=o(" (MPNet model)"),k_r=l(),h7=a("li"),l2e=a("strong"),S_r=o("openai-gpt"),R_r=o(" \u2014 "),RQ=a("a"),P_r=o("TFOpenAIGPTLMHeadModel"),B_r=o(" (OpenAI GPT model)"),I_r=l(),p7=a("li"),i2e=a("strong"),N_r=o("roberta"),q_r=o(" \u2014 "),PQ=a("a"),j_r=o("TFRobertaForMaskedLM"),D_r=o(" (RoBERTa model)"),G_r=l(),_7=a("li"),d2e=a("strong"),O_r=o("t5"),V_r=o(" \u2014 "),BQ=a("a"),X_r=o("TFT5ForConditionalGeneration"),z_r=o(" (T5 model)"),W_r=l(),u7=a("li"),c2e=a("strong"),Q_r=o("tapas"),H_r=o(" \u2014 "),IQ=a("a"),U_r=o("TFTapasForMaskedLM"),J_r=o(" (TAPAS model)"),Y_r=l(),b7=a("li"),f2e=a("strong"),K_r=o("transfo-xl"),Z_r=o(" \u2014 "),NQ=a("a"),eur=o("TFTransfoXLLMHeadModel"),our=o(" (Transformer-XL model)"),rur=l(),v7=a("li"),m2e=a("strong"),tur=o("vit_mae"),aur=o(" \u2014 "),qQ=a("a"),nur=o("TFViTMAEForPreTraining"),sur=o(" (ViTMAE model)"),lur=l(),F7=a("li"),g2e=a("strong"),iur=o("xlm"),dur=o(" \u2014 "),jQ=a("a"),cur=o("TFXLMWithLMHeadModel"),fur=o(" (XLM model)"),mur=l(),T7=a("li"),h2e=a("strong"),gur=o("xlm-roberta"),hur=o(" \u2014 "),DQ=a("a"),pur=o("TFXLMRobertaForMaskedLM"),_ur=o(" (XLM-RoBERTa model)"),uur=l(),M7=a("li"),p2e=a("strong"),bur=o("xlnet"),vur=o(" \u2014 "),GQ=a("a"),Fur=o("TFXLNetLMHeadModel"),Tur=o(" (XLNet model)"),Mur=l(),F(E7.$$.fragment),Dje=l(),Hd=a("h2"),C7=a("a"),_2e=a("span"),F(A8.$$.fragment),Eur=l(),u2e=a("span"),Cur=o("TFAutoModelForCausalLM"),Gje=l(),Zo=a("div"),F(y8.$$.fragment),wur=l(),Ud=a("p"),Aur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OQ=a("a"),yur=o("from_pretrained()"),Lur=o(" class method or the "),VQ=a("a"),xur=o("from_config()"),$ur=o(` class
method.`),kur=l(),L8=a("p"),Sur=o("This class cannot be instantiated directly using "),b2e=a("code"),Rur=o("__init__()"),Pur=o(" (throws an error)."),Bur=l(),xt=a("div"),F(x8.$$.fragment),Iur=l(),v2e=a("p"),Nur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qur=l(),Jd=a("p"),jur=o(`Note:
Loading a model from its configuration file does `),F2e=a("strong"),Dur=o("not"),Gur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),Our=o("from_pretrained()"),Vur=o(" to load the model weights."),Xur=l(),F(w7.$$.fragment),zur=l(),yr=a("div"),F($8.$$.fragment),Wur=l(),T2e=a("p"),Qur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Hur=l(),en=a("p"),Uur=o("The model class to instantiate is selected based on the "),M2e=a("code"),Jur=o("model_type"),Yur=o(` property of the config object (either
passed as an argument or loaded from `),E2e=a("code"),Kur=o("pretrained_model_name_or_path"),Zur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=a("code"),e4r=o("pretrained_model_name_or_path"),o4r=o(":"),r4r=l(),Te=a("ul"),A7=a("li"),w2e=a("strong"),t4r=o("bert"),a4r=o(" \u2014 "),zQ=a("a"),n4r=o("TFBertLMHeadModel"),s4r=o(" (BERT model)"),l4r=l(),y7=a("li"),A2e=a("strong"),i4r=o("camembert"),d4r=o(" \u2014 "),WQ=a("a"),c4r=o("TFCamembertForCausalLM"),f4r=o(" (CamemBERT model)"),m4r=l(),L7=a("li"),y2e=a("strong"),g4r=o("ctrl"),h4r=o(" \u2014 "),QQ=a("a"),p4r=o("TFCTRLLMHeadModel"),_4r=o(" (CTRL model)"),u4r=l(),x7=a("li"),L2e=a("strong"),b4r=o("gpt2"),v4r=o(" \u2014 "),HQ=a("a"),F4r=o("TFGPT2LMHeadModel"),T4r=o(" (OpenAI GPT-2 model)"),M4r=l(),$7=a("li"),x2e=a("strong"),E4r=o("gptj"),C4r=o(" \u2014 "),UQ=a("a"),w4r=o("TFGPTJForCausalLM"),A4r=o(" (GPT-J model)"),y4r=l(),k7=a("li"),$2e=a("strong"),L4r=o("openai-gpt"),x4r=o(" \u2014 "),JQ=a("a"),$4r=o("TFOpenAIGPTLMHeadModel"),k4r=o(" (OpenAI GPT model)"),S4r=l(),S7=a("li"),k2e=a("strong"),R4r=o("opt"),P4r=o(" \u2014 "),YQ=a("a"),B4r=o("TFOPTForCausalLM"),I4r=o(" (OPT model)"),N4r=l(),R7=a("li"),S2e=a("strong"),q4r=o("rembert"),j4r=o(" \u2014 "),KQ=a("a"),D4r=o("TFRemBertForCausalLM"),G4r=o(" (RemBERT model)"),O4r=l(),P7=a("li"),R2e=a("strong"),V4r=o("roberta"),X4r=o(" \u2014 "),ZQ=a("a"),z4r=o("TFRobertaForCausalLM"),W4r=o(" (RoBERTa model)"),Q4r=l(),B7=a("li"),P2e=a("strong"),H4r=o("roformer"),U4r=o(" \u2014 "),eH=a("a"),J4r=o("TFRoFormerForCausalLM"),Y4r=o(" (RoFormer model)"),K4r=l(),I7=a("li"),B2e=a("strong"),Z4r=o("transfo-xl"),e1r=o(" \u2014 "),oH=a("a"),o1r=o("TFTransfoXLLMHeadModel"),r1r=o(" (Transformer-XL model)"),t1r=l(),N7=a("li"),I2e=a("strong"),a1r=o("xlm"),n1r=o(" \u2014 "),rH=a("a"),s1r=o("TFXLMWithLMHeadModel"),l1r=o(" (XLM model)"),i1r=l(),q7=a("li"),N2e=a("strong"),d1r=o("xlnet"),c1r=o(" \u2014 "),tH=a("a"),f1r=o("TFXLNetLMHeadModel"),m1r=o(" (XLNet model)"),g1r=l(),F(j7.$$.fragment),Oje=l(),Yd=a("h2"),D7=a("a"),q2e=a("span"),F(k8.$$.fragment),h1r=l(),j2e=a("span"),p1r=o("TFAutoModelForImageClassification"),Vje=l(),er=a("div"),F(S8.$$.fragment),_1r=l(),Kd=a("p"),u1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aH=a("a"),b1r=o("from_pretrained()"),v1r=o(" class method or the "),nH=a("a"),F1r=o("from_config()"),T1r=o(` class
method.`),M1r=l(),R8=a("p"),E1r=o("This class cannot be instantiated directly using "),D2e=a("code"),C1r=o("__init__()"),w1r=o(" (throws an error)."),A1r=l(),$t=a("div"),F(P8.$$.fragment),y1r=l(),G2e=a("p"),L1r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),x1r=l(),Zd=a("p"),$1r=o(`Note:
Loading a model from its configuration file does `),O2e=a("strong"),k1r=o("not"),S1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),R1r=o("from_pretrained()"),P1r=o(" to load the model weights."),B1r=l(),F(G7.$$.fragment),I1r=l(),Lr=a("div"),F(B8.$$.fragment),N1r=l(),V2e=a("p"),q1r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),j1r=l(),on=a("p"),D1r=o("The model class to instantiate is selected based on the "),X2e=a("code"),G1r=o("model_type"),O1r=o(` property of the config object (either
passed as an argument or loaded from `),z2e=a("code"),V1r=o("pretrained_model_name_or_path"),X1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=a("code"),z1r=o("pretrained_model_name_or_path"),W1r=o(":"),Q1r=l(),rn=a("ul"),O7=a("li"),Q2e=a("strong"),H1r=o("convnext"),U1r=o(" \u2014 "),lH=a("a"),J1r=o("TFConvNextForImageClassification"),Y1r=o(" (ConvNext model)"),K1r=l(),V7=a("li"),H2e=a("strong"),Z1r=o("data2vec-vision"),ebr=o(" \u2014 "),iH=a("a"),obr=o("TFData2VecVisionForImageClassification"),rbr=o(" (Data2VecVision model)"),tbr=l(),X7=a("li"),U2e=a("strong"),abr=o("swin"),nbr=o(" \u2014 "),dH=a("a"),sbr=o("TFSwinForImageClassification"),lbr=o(" (Swin model)"),ibr=l(),z7=a("li"),J2e=a("strong"),dbr=o("vit"),cbr=o(" \u2014 "),cH=a("a"),fbr=o("TFViTForImageClassification"),mbr=o(" (ViT model)"),gbr=l(),F(W7.$$.fragment),Xje=l(),ec=a("h2"),Q7=a("a"),Y2e=a("span"),F(I8.$$.fragment),hbr=l(),K2e=a("span"),pbr=o("TFAutoModelForMaskedLM"),zje=l(),or=a("div"),F(N8.$$.fragment),_br=l(),oc=a("p"),ubr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fH=a("a"),bbr=o("from_pretrained()"),vbr=o(" class method or the "),mH=a("a"),Fbr=o("from_config()"),Tbr=o(` class
method.`),Mbr=l(),q8=a("p"),Ebr=o("This class cannot be instantiated directly using "),Z2e=a("code"),Cbr=o("__init__()"),wbr=o(" (throws an error)."),Abr=l(),kt=a("div"),F(j8.$$.fragment),ybr=l(),eve=a("p"),Lbr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xbr=l(),rc=a("p"),$br=o(`Note:
Loading a model from its configuration file does `),ove=a("strong"),kbr=o("not"),Sbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=a("a"),Rbr=o("from_pretrained()"),Pbr=o(" to load the model weights."),Bbr=l(),F(H7.$$.fragment),Ibr=l(),xr=a("div"),F(D8.$$.fragment),Nbr=l(),rve=a("p"),qbr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jbr=l(),tn=a("p"),Dbr=o("The model class to instantiate is selected based on the "),tve=a("code"),Gbr=o("model_type"),Obr=o(` property of the config object (either
passed as an argument or loaded from `),ave=a("code"),Vbr=o("pretrained_model_name_or_path"),Xbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=a("code"),zbr=o("pretrained_model_name_or_path"),Wbr=o(":"),Qbr=l(),ie=a("ul"),U7=a("li"),sve=a("strong"),Hbr=o("albert"),Ubr=o(" \u2014 "),hH=a("a"),Jbr=o("TFAlbertForMaskedLM"),Ybr=o(" (ALBERT model)"),Kbr=l(),J7=a("li"),lve=a("strong"),Zbr=o("bert"),e2r=o(" \u2014 "),pH=a("a"),o2r=o("TFBertForMaskedLM"),r2r=o(" (BERT model)"),t2r=l(),Y7=a("li"),ive=a("strong"),a2r=o("camembert"),n2r=o(" \u2014 "),_H=a("a"),s2r=o("TFCamembertForMaskedLM"),l2r=o(" (CamemBERT model)"),i2r=l(),K7=a("li"),dve=a("strong"),d2r=o("convbert"),c2r=o(" \u2014 "),uH=a("a"),f2r=o("TFConvBertForMaskedLM"),m2r=o(" (ConvBERT model)"),g2r=l(),Z7=a("li"),cve=a("strong"),h2r=o("deberta"),p2r=o(" \u2014 "),bH=a("a"),_2r=o("TFDebertaForMaskedLM"),u2r=o(" (DeBERTa model)"),b2r=l(),eM=a("li"),fve=a("strong"),v2r=o("deberta-v2"),F2r=o(" \u2014 "),vH=a("a"),T2r=o("TFDebertaV2ForMaskedLM"),M2r=o(" (DeBERTa-v2 model)"),E2r=l(),oM=a("li"),mve=a("strong"),C2r=o("distilbert"),w2r=o(" \u2014 "),FH=a("a"),A2r=o("TFDistilBertForMaskedLM"),y2r=o(" (DistilBERT model)"),L2r=l(),rM=a("li"),gve=a("strong"),x2r=o("electra"),$2r=o(" \u2014 "),TH=a("a"),k2r=o("TFElectraForMaskedLM"),S2r=o(" (ELECTRA model)"),R2r=l(),tM=a("li"),hve=a("strong"),P2r=o("flaubert"),B2r=o(" \u2014 "),MH=a("a"),I2r=o("TFFlaubertWithLMHeadModel"),N2r=o(" (FlauBERT model)"),q2r=l(),aM=a("li"),pve=a("strong"),j2r=o("funnel"),D2r=o(" \u2014 "),EH=a("a"),G2r=o("TFFunnelForMaskedLM"),O2r=o(" (Funnel Transformer model)"),V2r=l(),nM=a("li"),_ve=a("strong"),X2r=o("layoutlm"),z2r=o(" \u2014 "),CH=a("a"),W2r=o("TFLayoutLMForMaskedLM"),Q2r=o(" (LayoutLM model)"),H2r=l(),sM=a("li"),uve=a("strong"),U2r=o("longformer"),J2r=o(" \u2014 "),wH=a("a"),Y2r=o("TFLongformerForMaskedLM"),K2r=o(" (Longformer model)"),Z2r=l(),lM=a("li"),bve=a("strong"),evr=o("mobilebert"),ovr=o(" \u2014 "),AH=a("a"),rvr=o("TFMobileBertForMaskedLM"),tvr=o(" (MobileBERT model)"),avr=l(),iM=a("li"),vve=a("strong"),nvr=o("mpnet"),svr=o(" \u2014 "),yH=a("a"),lvr=o("TFMPNetForMaskedLM"),ivr=o(" (MPNet model)"),dvr=l(),dM=a("li"),Fve=a("strong"),cvr=o("rembert"),fvr=o(" \u2014 "),LH=a("a"),mvr=o("TFRemBertForMaskedLM"),gvr=o(" (RemBERT model)"),hvr=l(),cM=a("li"),Tve=a("strong"),pvr=o("roberta"),_vr=o(" \u2014 "),xH=a("a"),uvr=o("TFRobertaForMaskedLM"),bvr=o(" (RoBERTa model)"),vvr=l(),fM=a("li"),Mve=a("strong"),Fvr=o("roformer"),Tvr=o(" \u2014 "),$H=a("a"),Mvr=o("TFRoFormerForMaskedLM"),Evr=o(" (RoFormer model)"),Cvr=l(),mM=a("li"),Eve=a("strong"),wvr=o("tapas"),Avr=o(" \u2014 "),kH=a("a"),yvr=o("TFTapasForMaskedLM"),Lvr=o(" (TAPAS model)"),xvr=l(),gM=a("li"),Cve=a("strong"),$vr=o("xlm"),kvr=o(" \u2014 "),SH=a("a"),Svr=o("TFXLMWithLMHeadModel"),Rvr=o(" (XLM model)"),Pvr=l(),hM=a("li"),wve=a("strong"),Bvr=o("xlm-roberta"),Ivr=o(" \u2014 "),RH=a("a"),Nvr=o("TFXLMRobertaForMaskedLM"),qvr=o(" (XLM-RoBERTa model)"),jvr=l(),F(pM.$$.fragment),Wje=l(),tc=a("h2"),_M=a("a"),Ave=a("span"),F(G8.$$.fragment),Dvr=l(),yve=a("span"),Gvr=o("TFAutoModelForSeq2SeqLM"),Qje=l(),rr=a("div"),F(O8.$$.fragment),Ovr=l(),ac=a("p"),Vvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PH=a("a"),Xvr=o("from_pretrained()"),zvr=o(" class method or the "),BH=a("a"),Wvr=o("from_config()"),Qvr=o(` class
method.`),Hvr=l(),V8=a("p"),Uvr=o("This class cannot be instantiated directly using "),Lve=a("code"),Jvr=o("__init__()"),Yvr=o(" (throws an error)."),Kvr=l(),St=a("div"),F(X8.$$.fragment),Zvr=l(),xve=a("p"),e3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),o3r=l(),nc=a("p"),r3r=o(`Note:
Loading a model from its configuration file does `),$ve=a("strong"),t3r=o("not"),a3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),n3r=o("from_pretrained()"),s3r=o(" to load the model weights."),l3r=l(),F(uM.$$.fragment),i3r=l(),$r=a("div"),F(z8.$$.fragment),d3r=l(),kve=a("p"),c3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),f3r=l(),an=a("p"),m3r=o("The model class to instantiate is selected based on the "),Sve=a("code"),g3r=o("model_type"),h3r=o(` property of the config object (either
passed as an argument or loaded from `),Rve=a("code"),p3r=o("pretrained_model_name_or_path"),_3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pve=a("code"),u3r=o("pretrained_model_name_or_path"),b3r=o(":"),v3r=l(),ye=a("ul"),bM=a("li"),Bve=a("strong"),F3r=o("bart"),T3r=o(" \u2014 "),NH=a("a"),M3r=o("TFBartForConditionalGeneration"),E3r=o(" (BART model)"),C3r=l(),vM=a("li"),Ive=a("strong"),w3r=o("blenderbot"),A3r=o(" \u2014 "),qH=a("a"),y3r=o("TFBlenderbotForConditionalGeneration"),L3r=o(" (Blenderbot model)"),x3r=l(),FM=a("li"),Nve=a("strong"),$3r=o("blenderbot-small"),k3r=o(" \u2014 "),jH=a("a"),S3r=o("TFBlenderbotSmallForConditionalGeneration"),R3r=o(" (BlenderbotSmall model)"),P3r=l(),TM=a("li"),qve=a("strong"),B3r=o("encoder-decoder"),I3r=o(" \u2014 "),DH=a("a"),N3r=o("TFEncoderDecoderModel"),q3r=o(" (Encoder decoder model)"),j3r=l(),MM=a("li"),jve=a("strong"),D3r=o("led"),G3r=o(" \u2014 "),GH=a("a"),O3r=o("TFLEDForConditionalGeneration"),V3r=o(" (LED model)"),X3r=l(),EM=a("li"),Dve=a("strong"),z3r=o("marian"),W3r=o(" \u2014 "),OH=a("a"),Q3r=o("TFMarianMTModel"),H3r=o(" (Marian model)"),U3r=l(),CM=a("li"),Gve=a("strong"),J3r=o("mbart"),Y3r=o(" \u2014 "),VH=a("a"),K3r=o("TFMBartForConditionalGeneration"),Z3r=o(" (mBART model)"),eFr=l(),wM=a("li"),Ove=a("strong"),oFr=o("mt5"),rFr=o(" \u2014 "),XH=a("a"),tFr=o("TFMT5ForConditionalGeneration"),aFr=o(" (mT5 model)"),nFr=l(),AM=a("li"),Vve=a("strong"),sFr=o("pegasus"),lFr=o(" \u2014 "),zH=a("a"),iFr=o("TFPegasusForConditionalGeneration"),dFr=o(" (Pegasus model)"),cFr=l(),yM=a("li"),Xve=a("strong"),fFr=o("t5"),mFr=o(" \u2014 "),WH=a("a"),gFr=o("TFT5ForConditionalGeneration"),hFr=o(" (T5 model)"),pFr=l(),F(LM.$$.fragment),Hje=l(),sc=a("h2"),xM=a("a"),zve=a("span"),F(W8.$$.fragment),_Fr=l(),Wve=a("span"),uFr=o("TFAutoModelForSequenceClassification"),Uje=l(),tr=a("div"),F(Q8.$$.fragment),bFr=l(),lc=a("p"),vFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QH=a("a"),FFr=o("from_pretrained()"),TFr=o(" class method or the "),HH=a("a"),MFr=o("from_config()"),EFr=o(` class
method.`),CFr=l(),H8=a("p"),wFr=o("This class cannot be instantiated directly using "),Qve=a("code"),AFr=o("__init__()"),yFr=o(" (throws an error)."),LFr=l(),Rt=a("div"),F(U8.$$.fragment),xFr=l(),Hve=a("p"),$Fr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kFr=l(),ic=a("p"),SFr=o(`Note:
Loading a model from its configuration file does `),Uve=a("strong"),RFr=o("not"),PFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),BFr=o("from_pretrained()"),IFr=o(" to load the model weights."),NFr=l(),F($M.$$.fragment),qFr=l(),kr=a("div"),F(J8.$$.fragment),jFr=l(),Jve=a("p"),DFr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),GFr=l(),nn=a("p"),OFr=o("The model class to instantiate is selected based on the "),Yve=a("code"),VFr=o("model_type"),XFr=o(` property of the config object (either
passed as an argument or loaded from `),Kve=a("code"),zFr=o("pretrained_model_name_or_path"),WFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=a("code"),QFr=o("pretrained_model_name_or_path"),HFr=o(":"),UFr=l(),oe=a("ul"),kM=a("li"),e3e=a("strong"),JFr=o("albert"),YFr=o(" \u2014 "),JH=a("a"),KFr=o("TFAlbertForSequenceClassification"),ZFr=o(" (ALBERT model)"),eTr=l(),SM=a("li"),o3e=a("strong"),oTr=o("bert"),rTr=o(" \u2014 "),YH=a("a"),tTr=o("TFBertForSequenceClassification"),aTr=o(" (BERT model)"),nTr=l(),RM=a("li"),r3e=a("strong"),sTr=o("camembert"),lTr=o(" \u2014 "),KH=a("a"),iTr=o("TFCamembertForSequenceClassification"),dTr=o(" (CamemBERT model)"),cTr=l(),PM=a("li"),t3e=a("strong"),fTr=o("convbert"),mTr=o(" \u2014 "),ZH=a("a"),gTr=o("TFConvBertForSequenceClassification"),hTr=o(" (ConvBERT model)"),pTr=l(),BM=a("li"),a3e=a("strong"),_Tr=o("ctrl"),uTr=o(" \u2014 "),eU=a("a"),bTr=o("TFCTRLForSequenceClassification"),vTr=o(" (CTRL model)"),FTr=l(),IM=a("li"),n3e=a("strong"),TTr=o("deberta"),MTr=o(" \u2014 "),oU=a("a"),ETr=o("TFDebertaForSequenceClassification"),CTr=o(" (DeBERTa model)"),wTr=l(),NM=a("li"),s3e=a("strong"),ATr=o("deberta-v2"),yTr=o(" \u2014 "),rU=a("a"),LTr=o("TFDebertaV2ForSequenceClassification"),xTr=o(" (DeBERTa-v2 model)"),$Tr=l(),qM=a("li"),l3e=a("strong"),kTr=o("distilbert"),STr=o(" \u2014 "),tU=a("a"),RTr=o("TFDistilBertForSequenceClassification"),PTr=o(" (DistilBERT model)"),BTr=l(),jM=a("li"),i3e=a("strong"),ITr=o("electra"),NTr=o(" \u2014 "),aU=a("a"),qTr=o("TFElectraForSequenceClassification"),jTr=o(" (ELECTRA model)"),DTr=l(),DM=a("li"),d3e=a("strong"),GTr=o("flaubert"),OTr=o(" \u2014 "),nU=a("a"),VTr=o("TFFlaubertForSequenceClassification"),XTr=o(" (FlauBERT model)"),zTr=l(),GM=a("li"),c3e=a("strong"),WTr=o("funnel"),QTr=o(" \u2014 "),sU=a("a"),HTr=o("TFFunnelForSequenceClassification"),UTr=o(" (Funnel Transformer model)"),JTr=l(),OM=a("li"),f3e=a("strong"),YTr=o("gpt2"),KTr=o(" \u2014 "),lU=a("a"),ZTr=o("TFGPT2ForSequenceClassification"),e7r=o(" (OpenAI GPT-2 model)"),o7r=l(),VM=a("li"),m3e=a("strong"),r7r=o("gptj"),t7r=o(" \u2014 "),iU=a("a"),a7r=o("TFGPTJForSequenceClassification"),n7r=o(" (GPT-J model)"),s7r=l(),XM=a("li"),g3e=a("strong"),l7r=o("layoutlm"),i7r=o(" \u2014 "),dU=a("a"),d7r=o("TFLayoutLMForSequenceClassification"),c7r=o(" (LayoutLM model)"),f7r=l(),zM=a("li"),h3e=a("strong"),m7r=o("longformer"),g7r=o(" \u2014 "),cU=a("a"),h7r=o("TFLongformerForSequenceClassification"),p7r=o(" (Longformer model)"),_7r=l(),WM=a("li"),p3e=a("strong"),u7r=o("mobilebert"),b7r=o(" \u2014 "),fU=a("a"),v7r=o("TFMobileBertForSequenceClassification"),F7r=o(" (MobileBERT model)"),T7r=l(),QM=a("li"),_3e=a("strong"),M7r=o("mpnet"),E7r=o(" \u2014 "),mU=a("a"),C7r=o("TFMPNetForSequenceClassification"),w7r=o(" (MPNet model)"),A7r=l(),HM=a("li"),u3e=a("strong"),y7r=o("openai-gpt"),L7r=o(" \u2014 "),gU=a("a"),x7r=o("TFOpenAIGPTForSequenceClassification"),$7r=o(" (OpenAI GPT model)"),k7r=l(),UM=a("li"),b3e=a("strong"),S7r=o("rembert"),R7r=o(" \u2014 "),hU=a("a"),P7r=o("TFRemBertForSequenceClassification"),B7r=o(" (RemBERT model)"),I7r=l(),JM=a("li"),v3e=a("strong"),N7r=o("roberta"),q7r=o(" \u2014 "),pU=a("a"),j7r=o("TFRobertaForSequenceClassification"),D7r=o(" (RoBERTa model)"),G7r=l(),YM=a("li"),F3e=a("strong"),O7r=o("roformer"),V7r=o(" \u2014 "),_U=a("a"),X7r=o("TFRoFormerForSequenceClassification"),z7r=o(" (RoFormer model)"),W7r=l(),KM=a("li"),T3e=a("strong"),Q7r=o("tapas"),H7r=o(" \u2014 "),uU=a("a"),U7r=o("TFTapasForSequenceClassification"),J7r=o(" (TAPAS model)"),Y7r=l(),ZM=a("li"),M3e=a("strong"),K7r=o("transfo-xl"),Z7r=o(" \u2014 "),bU=a("a"),eMr=o("TFTransfoXLForSequenceClassification"),oMr=o(" (Transformer-XL model)"),rMr=l(),eE=a("li"),E3e=a("strong"),tMr=o("xlm"),aMr=o(" \u2014 "),vU=a("a"),nMr=o("TFXLMForSequenceClassification"),sMr=o(" (XLM model)"),lMr=l(),oE=a("li"),C3e=a("strong"),iMr=o("xlm-roberta"),dMr=o(" \u2014 "),FU=a("a"),cMr=o("TFXLMRobertaForSequenceClassification"),fMr=o(" (XLM-RoBERTa model)"),mMr=l(),rE=a("li"),w3e=a("strong"),gMr=o("xlnet"),hMr=o(" \u2014 "),TU=a("a"),pMr=o("TFXLNetForSequenceClassification"),_Mr=o(" (XLNet model)"),uMr=l(),F(tE.$$.fragment),Jje=l(),dc=a("h2"),aE=a("a"),A3e=a("span"),F(Y8.$$.fragment),bMr=l(),y3e=a("span"),vMr=o("TFAutoModelForMultipleChoice"),Yje=l(),ar=a("div"),F(K8.$$.fragment),FMr=l(),cc=a("p"),TMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MU=a("a"),MMr=o("from_pretrained()"),EMr=o(" class method or the "),EU=a("a"),CMr=o("from_config()"),wMr=o(` class
method.`),AMr=l(),Z8=a("p"),yMr=o("This class cannot be instantiated directly using "),L3e=a("code"),LMr=o("__init__()"),xMr=o(" (throws an error)."),$Mr=l(),Pt=a("div"),F(e9.$$.fragment),kMr=l(),x3e=a("p"),SMr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),RMr=l(),fc=a("p"),PMr=o(`Note:
Loading a model from its configuration file does `),$3e=a("strong"),BMr=o("not"),IMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),NMr=o("from_pretrained()"),qMr=o(" to load the model weights."),jMr=l(),F(nE.$$.fragment),DMr=l(),Sr=a("div"),F(o9.$$.fragment),GMr=l(),k3e=a("p"),OMr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),VMr=l(),sn=a("p"),XMr=o("The model class to instantiate is selected based on the "),S3e=a("code"),zMr=o("model_type"),WMr=o(` property of the config object (either
passed as an argument or loaded from `),R3e=a("code"),QMr=o("pretrained_model_name_or_path"),HMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=a("code"),UMr=o("pretrained_model_name_or_path"),JMr=o(":"),YMr=l(),pe=a("ul"),sE=a("li"),B3e=a("strong"),KMr=o("albert"),ZMr=o(" \u2014 "),wU=a("a"),eEr=o("TFAlbertForMultipleChoice"),oEr=o(" (ALBERT model)"),rEr=l(),lE=a("li"),I3e=a("strong"),tEr=o("bert"),aEr=o(" \u2014 "),AU=a("a"),nEr=o("TFBertForMultipleChoice"),sEr=o(" (BERT model)"),lEr=l(),iE=a("li"),N3e=a("strong"),iEr=o("camembert"),dEr=o(" \u2014 "),yU=a("a"),cEr=o("TFCamembertForMultipleChoice"),fEr=o(" (CamemBERT model)"),mEr=l(),dE=a("li"),q3e=a("strong"),gEr=o("convbert"),hEr=o(" \u2014 "),LU=a("a"),pEr=o("TFConvBertForMultipleChoice"),_Er=o(" (ConvBERT model)"),uEr=l(),cE=a("li"),j3e=a("strong"),bEr=o("distilbert"),vEr=o(" \u2014 "),xU=a("a"),FEr=o("TFDistilBertForMultipleChoice"),TEr=o(" (DistilBERT model)"),MEr=l(),fE=a("li"),D3e=a("strong"),EEr=o("electra"),CEr=o(" \u2014 "),$U=a("a"),wEr=o("TFElectraForMultipleChoice"),AEr=o(" (ELECTRA model)"),yEr=l(),mE=a("li"),G3e=a("strong"),LEr=o("flaubert"),xEr=o(" \u2014 "),kU=a("a"),$Er=o("TFFlaubertForMultipleChoice"),kEr=o(" (FlauBERT model)"),SEr=l(),gE=a("li"),O3e=a("strong"),REr=o("funnel"),PEr=o(" \u2014 "),SU=a("a"),BEr=o("TFFunnelForMultipleChoice"),IEr=o(" (Funnel Transformer model)"),NEr=l(),hE=a("li"),V3e=a("strong"),qEr=o("longformer"),jEr=o(" \u2014 "),RU=a("a"),DEr=o("TFLongformerForMultipleChoice"),GEr=o(" (Longformer model)"),OEr=l(),pE=a("li"),X3e=a("strong"),VEr=o("mobilebert"),XEr=o(" \u2014 "),PU=a("a"),zEr=o("TFMobileBertForMultipleChoice"),WEr=o(" (MobileBERT model)"),QEr=l(),_E=a("li"),z3e=a("strong"),HEr=o("mpnet"),UEr=o(" \u2014 "),BU=a("a"),JEr=o("TFMPNetForMultipleChoice"),YEr=o(" (MPNet model)"),KEr=l(),uE=a("li"),W3e=a("strong"),ZEr=o("rembert"),eCr=o(" \u2014 "),IU=a("a"),oCr=o("TFRemBertForMultipleChoice"),rCr=o(" (RemBERT model)"),tCr=l(),bE=a("li"),Q3e=a("strong"),aCr=o("roberta"),nCr=o(" \u2014 "),NU=a("a"),sCr=o("TFRobertaForMultipleChoice"),lCr=o(" (RoBERTa model)"),iCr=l(),vE=a("li"),H3e=a("strong"),dCr=o("roformer"),cCr=o(" \u2014 "),qU=a("a"),fCr=o("TFRoFormerForMultipleChoice"),mCr=o(" (RoFormer model)"),gCr=l(),FE=a("li"),U3e=a("strong"),hCr=o("xlm"),pCr=o(" \u2014 "),jU=a("a"),_Cr=o("TFXLMForMultipleChoice"),uCr=o(" (XLM model)"),bCr=l(),TE=a("li"),J3e=a("strong"),vCr=o("xlm-roberta"),FCr=o(" \u2014 "),DU=a("a"),TCr=o("TFXLMRobertaForMultipleChoice"),MCr=o(" (XLM-RoBERTa model)"),ECr=l(),ME=a("li"),Y3e=a("strong"),CCr=o("xlnet"),wCr=o(" \u2014 "),GU=a("a"),ACr=o("TFXLNetForMultipleChoice"),yCr=o(" (XLNet model)"),LCr=l(),F(EE.$$.fragment),Kje=l(),mc=a("h2"),CE=a("a"),K3e=a("span"),F(r9.$$.fragment),xCr=l(),Z3e=a("span"),$Cr=o("TFAutoModelForNextSentencePrediction"),Zje=l(),nr=a("div"),F(t9.$$.fragment),kCr=l(),gc=a("p"),SCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OU=a("a"),RCr=o("from_pretrained()"),PCr=o(" class method or the "),VU=a("a"),BCr=o("from_config()"),ICr=o(` class
method.`),NCr=l(),a9=a("p"),qCr=o("This class cannot be instantiated directly using "),eFe=a("code"),jCr=o("__init__()"),DCr=o(" (throws an error)."),GCr=l(),Bt=a("div"),F(n9.$$.fragment),OCr=l(),oFe=a("p"),VCr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),XCr=l(),hc=a("p"),zCr=o(`Note:
Loading a model from its configuration file does `),rFe=a("strong"),WCr=o("not"),QCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=a("a"),HCr=o("from_pretrained()"),UCr=o(" to load the model weights."),JCr=l(),F(wE.$$.fragment),YCr=l(),Rr=a("div"),F(s9.$$.fragment),KCr=l(),tFe=a("p"),ZCr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),e5r=l(),ln=a("p"),o5r=o("The model class to instantiate is selected based on the "),aFe=a("code"),r5r=o("model_type"),t5r=o(` property of the config object (either
passed as an argument or loaded from `),nFe=a("code"),a5r=o("pretrained_model_name_or_path"),n5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sFe=a("code"),s5r=o("pretrained_model_name_or_path"),l5r=o(":"),i5r=l(),l9=a("ul"),AE=a("li"),lFe=a("strong"),d5r=o("bert"),c5r=o(" \u2014 "),zU=a("a"),f5r=o("TFBertForNextSentencePrediction"),m5r=o(" (BERT model)"),g5r=l(),yE=a("li"),iFe=a("strong"),h5r=o("mobilebert"),p5r=o(" \u2014 "),WU=a("a"),_5r=o("TFMobileBertForNextSentencePrediction"),u5r=o(" (MobileBERT model)"),b5r=l(),F(LE.$$.fragment),eDe=l(),pc=a("h2"),xE=a("a"),dFe=a("span"),F(i9.$$.fragment),v5r=l(),cFe=a("span"),F5r=o("TFAutoModelForTableQuestionAnswering"),oDe=l(),sr=a("div"),F(d9.$$.fragment),T5r=l(),_c=a("p"),M5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QU=a("a"),E5r=o("from_pretrained()"),C5r=o(" class method or the "),HU=a("a"),w5r=o("from_config()"),A5r=o(` class
method.`),y5r=l(),c9=a("p"),L5r=o("This class cannot be instantiated directly using "),fFe=a("code"),x5r=o("__init__()"),$5r=o(" (throws an error)."),k5r=l(),It=a("div"),F(f9.$$.fragment),S5r=l(),mFe=a("p"),R5r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),P5r=l(),uc=a("p"),B5r=o(`Note:
Loading a model from its configuration file does `),gFe=a("strong"),I5r=o("not"),N5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=a("a"),q5r=o("from_pretrained()"),j5r=o(" to load the model weights."),D5r=l(),F($E.$$.fragment),G5r=l(),Pr=a("div"),F(m9.$$.fragment),O5r=l(),hFe=a("p"),V5r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),X5r=l(),dn=a("p"),z5r=o("The model class to instantiate is selected based on the "),pFe=a("code"),W5r=o("model_type"),Q5r=o(` property of the config object (either
passed as an argument or loaded from `),_Fe=a("code"),H5r=o("pretrained_model_name_or_path"),U5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=a("code"),J5r=o("pretrained_model_name_or_path"),Y5r=o(":"),K5r=l(),bFe=a("ul"),kE=a("li"),vFe=a("strong"),Z5r=o("tapas"),e0r=o(" \u2014 "),JU=a("a"),o0r=o("TFTapasForQuestionAnswering"),r0r=o(" (TAPAS model)"),t0r=l(),F(SE.$$.fragment),rDe=l(),bc=a("h2"),RE=a("a"),FFe=a("span"),F(g9.$$.fragment),a0r=l(),TFe=a("span"),n0r=o("TFAutoModelForTokenClassification"),tDe=l(),lr=a("div"),F(h9.$$.fragment),s0r=l(),vc=a("p"),l0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YU=a("a"),i0r=o("from_pretrained()"),d0r=o(" class method or the "),KU=a("a"),c0r=o("from_config()"),f0r=o(` class
method.`),m0r=l(),p9=a("p"),g0r=o("This class cannot be instantiated directly using "),MFe=a("code"),h0r=o("__init__()"),p0r=o(" (throws an error)."),_0r=l(),Nt=a("div"),F(_9.$$.fragment),u0r=l(),EFe=a("p"),b0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),v0r=l(),Fc=a("p"),F0r=o(`Note:
Loading a model from its configuration file does `),CFe=a("strong"),T0r=o("not"),M0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=a("a"),E0r=o("from_pretrained()"),C0r=o(" to load the model weights."),w0r=l(),F(PE.$$.fragment),A0r=l(),Br=a("div"),F(u9.$$.fragment),y0r=l(),wFe=a("p"),L0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),x0r=l(),cn=a("p"),$0r=o("The model class to instantiate is selected based on the "),AFe=a("code"),k0r=o("model_type"),S0r=o(` property of the config object (either
passed as an argument or loaded from `),yFe=a("code"),R0r=o("pretrained_model_name_or_path"),P0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=a("code"),B0r=o("pretrained_model_name_or_path"),I0r=o(":"),N0r=l(),de=a("ul"),BE=a("li"),xFe=a("strong"),q0r=o("albert"),j0r=o(" \u2014 "),eJ=a("a"),D0r=o("TFAlbertForTokenClassification"),G0r=o(" (ALBERT model)"),O0r=l(),IE=a("li"),$Fe=a("strong"),V0r=o("bert"),X0r=o(" \u2014 "),oJ=a("a"),z0r=o("TFBertForTokenClassification"),W0r=o(" (BERT model)"),Q0r=l(),NE=a("li"),kFe=a("strong"),H0r=o("camembert"),U0r=o(" \u2014 "),rJ=a("a"),J0r=o("TFCamembertForTokenClassification"),Y0r=o(" (CamemBERT model)"),K0r=l(),qE=a("li"),SFe=a("strong"),Z0r=o("convbert"),ewr=o(" \u2014 "),tJ=a("a"),owr=o("TFConvBertForTokenClassification"),rwr=o(" (ConvBERT model)"),twr=l(),jE=a("li"),RFe=a("strong"),awr=o("deberta"),nwr=o(" \u2014 "),aJ=a("a"),swr=o("TFDebertaForTokenClassification"),lwr=o(" (DeBERTa model)"),iwr=l(),DE=a("li"),PFe=a("strong"),dwr=o("deberta-v2"),cwr=o(" \u2014 "),nJ=a("a"),fwr=o("TFDebertaV2ForTokenClassification"),mwr=o(" (DeBERTa-v2 model)"),gwr=l(),GE=a("li"),BFe=a("strong"),hwr=o("distilbert"),pwr=o(" \u2014 "),sJ=a("a"),_wr=o("TFDistilBertForTokenClassification"),uwr=o(" (DistilBERT model)"),bwr=l(),OE=a("li"),IFe=a("strong"),vwr=o("electra"),Fwr=o(" \u2014 "),lJ=a("a"),Twr=o("TFElectraForTokenClassification"),Mwr=o(" (ELECTRA model)"),Ewr=l(),VE=a("li"),NFe=a("strong"),Cwr=o("flaubert"),wwr=o(" \u2014 "),iJ=a("a"),Awr=o("TFFlaubertForTokenClassification"),ywr=o(" (FlauBERT model)"),Lwr=l(),XE=a("li"),qFe=a("strong"),xwr=o("funnel"),$wr=o(" \u2014 "),dJ=a("a"),kwr=o("TFFunnelForTokenClassification"),Swr=o(" (Funnel Transformer model)"),Rwr=l(),zE=a("li"),jFe=a("strong"),Pwr=o("layoutlm"),Bwr=o(" \u2014 "),cJ=a("a"),Iwr=o("TFLayoutLMForTokenClassification"),Nwr=o(" (LayoutLM model)"),qwr=l(),WE=a("li"),DFe=a("strong"),jwr=o("longformer"),Dwr=o(" \u2014 "),fJ=a("a"),Gwr=o("TFLongformerForTokenClassification"),Owr=o(" (Longformer model)"),Vwr=l(),QE=a("li"),GFe=a("strong"),Xwr=o("mobilebert"),zwr=o(" \u2014 "),mJ=a("a"),Wwr=o("TFMobileBertForTokenClassification"),Qwr=o(" (MobileBERT model)"),Hwr=l(),HE=a("li"),OFe=a("strong"),Uwr=o("mpnet"),Jwr=o(" \u2014 "),gJ=a("a"),Ywr=o("TFMPNetForTokenClassification"),Kwr=o(" (MPNet model)"),Zwr=l(),UE=a("li"),VFe=a("strong"),e6r=o("rembert"),o6r=o(" \u2014 "),hJ=a("a"),r6r=o("TFRemBertForTokenClassification"),t6r=o(" (RemBERT model)"),a6r=l(),JE=a("li"),XFe=a("strong"),n6r=o("roberta"),s6r=o(" \u2014 "),pJ=a("a"),l6r=o("TFRobertaForTokenClassification"),i6r=o(" (RoBERTa model)"),d6r=l(),YE=a("li"),zFe=a("strong"),c6r=o("roformer"),f6r=o(" \u2014 "),_J=a("a"),m6r=o("TFRoFormerForTokenClassification"),g6r=o(" (RoFormer model)"),h6r=l(),KE=a("li"),WFe=a("strong"),p6r=o("xlm"),_6r=o(" \u2014 "),uJ=a("a"),u6r=o("TFXLMForTokenClassification"),b6r=o(" (XLM model)"),v6r=l(),ZE=a("li"),QFe=a("strong"),F6r=o("xlm-roberta"),T6r=o(" \u2014 "),bJ=a("a"),M6r=o("TFXLMRobertaForTokenClassification"),E6r=o(" (XLM-RoBERTa model)"),C6r=l(),eC=a("li"),HFe=a("strong"),w6r=o("xlnet"),A6r=o(" \u2014 "),vJ=a("a"),y6r=o("TFXLNetForTokenClassification"),L6r=o(" (XLNet model)"),x6r=l(),F(oC.$$.fragment),aDe=l(),Tc=a("h2"),rC=a("a"),UFe=a("span"),F(b9.$$.fragment),$6r=l(),JFe=a("span"),k6r=o("TFAutoModelForQuestionAnswering"),nDe=l(),ir=a("div"),F(v9.$$.fragment),S6r=l(),Mc=a("p"),R6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FJ=a("a"),P6r=o("from_pretrained()"),B6r=o(" class method or the "),TJ=a("a"),I6r=o("from_config()"),N6r=o(` class
method.`),q6r=l(),F9=a("p"),j6r=o("This class cannot be instantiated directly using "),YFe=a("code"),D6r=o("__init__()"),G6r=o(" (throws an error)."),O6r=l(),qt=a("div"),F(T9.$$.fragment),V6r=l(),KFe=a("p"),X6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),z6r=l(),Ec=a("p"),W6r=o(`Note:
Loading a model from its configuration file does `),ZFe=a("strong"),Q6r=o("not"),H6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=a("a"),U6r=o("from_pretrained()"),J6r=o(" to load the model weights."),Y6r=l(),F(tC.$$.fragment),K6r=l(),Ir=a("div"),F(M9.$$.fragment),Z6r=l(),eTe=a("p"),eAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oAr=l(),fn=a("p"),rAr=o("The model class to instantiate is selected based on the "),oTe=a("code"),tAr=o("model_type"),aAr=o(` property of the config object (either
passed as an argument or loaded from `),rTe=a("code"),nAr=o("pretrained_model_name_or_path"),sAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=a("code"),lAr=o("pretrained_model_name_or_path"),iAr=o(":"),dAr=l(),ce=a("ul"),aC=a("li"),aTe=a("strong"),cAr=o("albert"),fAr=o(" \u2014 "),EJ=a("a"),mAr=o("TFAlbertForQuestionAnswering"),gAr=o(" (ALBERT model)"),hAr=l(),nC=a("li"),nTe=a("strong"),pAr=o("bert"),_Ar=o(" \u2014 "),CJ=a("a"),uAr=o("TFBertForQuestionAnswering"),bAr=o(" (BERT model)"),vAr=l(),sC=a("li"),sTe=a("strong"),FAr=o("camembert"),TAr=o(" \u2014 "),wJ=a("a"),MAr=o("TFCamembertForQuestionAnswering"),EAr=o(" (CamemBERT model)"),CAr=l(),lC=a("li"),lTe=a("strong"),wAr=o("convbert"),AAr=o(" \u2014 "),AJ=a("a"),yAr=o("TFConvBertForQuestionAnswering"),LAr=o(" (ConvBERT model)"),xAr=l(),iC=a("li"),iTe=a("strong"),$Ar=o("deberta"),kAr=o(" \u2014 "),yJ=a("a"),SAr=o("TFDebertaForQuestionAnswering"),RAr=o(" (DeBERTa model)"),PAr=l(),dC=a("li"),dTe=a("strong"),BAr=o("deberta-v2"),IAr=o(" \u2014 "),LJ=a("a"),NAr=o("TFDebertaV2ForQuestionAnswering"),qAr=o(" (DeBERTa-v2 model)"),jAr=l(),cC=a("li"),cTe=a("strong"),DAr=o("distilbert"),GAr=o(" \u2014 "),xJ=a("a"),OAr=o("TFDistilBertForQuestionAnswering"),VAr=o(" (DistilBERT model)"),XAr=l(),fC=a("li"),fTe=a("strong"),zAr=o("electra"),WAr=o(" \u2014 "),$J=a("a"),QAr=o("TFElectraForQuestionAnswering"),HAr=o(" (ELECTRA model)"),UAr=l(),mC=a("li"),mTe=a("strong"),JAr=o("flaubert"),YAr=o(" \u2014 "),kJ=a("a"),KAr=o("TFFlaubertForQuestionAnsweringSimple"),ZAr=o(" (FlauBERT model)"),eyr=l(),gC=a("li"),gTe=a("strong"),oyr=o("funnel"),ryr=o(" \u2014 "),SJ=a("a"),tyr=o("TFFunnelForQuestionAnswering"),ayr=o(" (Funnel Transformer model)"),nyr=l(),hC=a("li"),hTe=a("strong"),syr=o("gptj"),lyr=o(" \u2014 "),RJ=a("a"),iyr=o("TFGPTJForQuestionAnswering"),dyr=o(" (GPT-J model)"),cyr=l(),pC=a("li"),pTe=a("strong"),fyr=o("longformer"),myr=o(" \u2014 "),PJ=a("a"),gyr=o("TFLongformerForQuestionAnswering"),hyr=o(" (Longformer model)"),pyr=l(),_C=a("li"),_Te=a("strong"),_yr=o("mobilebert"),uyr=o(" \u2014 "),BJ=a("a"),byr=o("TFMobileBertForQuestionAnswering"),vyr=o(" (MobileBERT model)"),Fyr=l(),uC=a("li"),uTe=a("strong"),Tyr=o("mpnet"),Myr=o(" \u2014 "),IJ=a("a"),Eyr=o("TFMPNetForQuestionAnswering"),Cyr=o(" (MPNet model)"),wyr=l(),bC=a("li"),bTe=a("strong"),Ayr=o("rembert"),yyr=o(" \u2014 "),NJ=a("a"),Lyr=o("TFRemBertForQuestionAnswering"),xyr=o(" (RemBERT model)"),$yr=l(),vC=a("li"),vTe=a("strong"),kyr=o("roberta"),Syr=o(" \u2014 "),qJ=a("a"),Ryr=o("TFRobertaForQuestionAnswering"),Pyr=o(" (RoBERTa model)"),Byr=l(),FC=a("li"),FTe=a("strong"),Iyr=o("roformer"),Nyr=o(" \u2014 "),jJ=a("a"),qyr=o("TFRoFormerForQuestionAnswering"),jyr=o(" (RoFormer model)"),Dyr=l(),TC=a("li"),TTe=a("strong"),Gyr=o("xlm"),Oyr=o(" \u2014 "),DJ=a("a"),Vyr=o("TFXLMForQuestionAnsweringSimple"),Xyr=o(" (XLM model)"),zyr=l(),MC=a("li"),MTe=a("strong"),Wyr=o("xlm-roberta"),Qyr=o(" \u2014 "),GJ=a("a"),Hyr=o("TFXLMRobertaForQuestionAnswering"),Uyr=o(" (XLM-RoBERTa model)"),Jyr=l(),EC=a("li"),ETe=a("strong"),Yyr=o("xlnet"),Kyr=o(" \u2014 "),OJ=a("a"),Zyr=o("TFXLNetForQuestionAnsweringSimple"),eLr=o(" (XLNet model)"),oLr=l(),F(CC.$$.fragment),sDe=l(),Cc=a("h2"),wC=a("a"),CTe=a("span"),F(E9.$$.fragment),rLr=l(),wTe=a("span"),tLr=o("TFAutoModelForVision2Seq"),lDe=l(),dr=a("div"),F(C9.$$.fragment),aLr=l(),wc=a("p"),nLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VJ=a("a"),sLr=o("from_pretrained()"),lLr=o(" class method or the "),XJ=a("a"),iLr=o("from_config()"),dLr=o(` class
method.`),cLr=l(),w9=a("p"),fLr=o("This class cannot be instantiated directly using "),ATe=a("code"),mLr=o("__init__()"),gLr=o(" (throws an error)."),hLr=l(),jt=a("div"),F(A9.$$.fragment),pLr=l(),yTe=a("p"),_Lr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uLr=l(),Ac=a("p"),bLr=o(`Note:
Loading a model from its configuration file does `),LTe=a("strong"),vLr=o("not"),FLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),TLr=o("from_pretrained()"),MLr=o(" to load the model weights."),ELr=l(),F(AC.$$.fragment),CLr=l(),Nr=a("div"),F(y9.$$.fragment),wLr=l(),xTe=a("p"),ALr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yLr=l(),mn=a("p"),LLr=o("The model class to instantiate is selected based on the "),$Te=a("code"),xLr=o("model_type"),$Lr=o(` property of the config object (either
passed as an argument or loaded from `),kTe=a("code"),kLr=o("pretrained_model_name_or_path"),SLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=a("code"),RLr=o("pretrained_model_name_or_path"),PLr=o(":"),BLr=l(),RTe=a("ul"),yC=a("li"),PTe=a("strong"),ILr=o("vision-encoder-decoder"),NLr=o(" \u2014 "),WJ=a("a"),qLr=o("TFVisionEncoderDecoderModel"),jLr=o(" (Vision Encoder decoder model)"),DLr=l(),F(LC.$$.fragment),iDe=l(),yc=a("h2"),xC=a("a"),BTe=a("span"),F(L9.$$.fragment),GLr=l(),ITe=a("span"),OLr=o("TFAutoModelForSpeechSeq2Seq"),dDe=l(),cr=a("div"),F(x9.$$.fragment),VLr=l(),Lc=a("p"),XLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QJ=a("a"),zLr=o("from_pretrained()"),WLr=o(" class method or the "),HJ=a("a"),QLr=o("from_config()"),HLr=o(` class
method.`),ULr=l(),$9=a("p"),JLr=o("This class cannot be instantiated directly using "),NTe=a("code"),YLr=o("__init__()"),KLr=o(" (throws an error)."),ZLr=l(),Dt=a("div"),F(k9.$$.fragment),e8r=l(),qTe=a("p"),o8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),r8r=l(),xc=a("p"),t8r=o(`Note:
Loading a model from its configuration file does `),jTe=a("strong"),a8r=o("not"),n8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=a("a"),s8r=o("from_pretrained()"),l8r=o(" to load the model weights."),i8r=l(),F($C.$$.fragment),d8r=l(),qr=a("div"),F(S9.$$.fragment),c8r=l(),DTe=a("p"),f8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),m8r=l(),gn=a("p"),g8r=o("The model class to instantiate is selected based on the "),GTe=a("code"),h8r=o("model_type"),p8r=o(` property of the config object (either
passed as an argument or loaded from `),OTe=a("code"),_8r=o("pretrained_model_name_or_path"),u8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=a("code"),b8r=o("pretrained_model_name_or_path"),v8r=o(":"),F8r=l(),XTe=a("ul"),kC=a("li"),zTe=a("strong"),T8r=o("speech_to_text"),M8r=o(" \u2014 "),JJ=a("a"),E8r=o("TFSpeech2TextForConditionalGeneration"),C8r=o(" (Speech2Text model)"),w8r=l(),F(SC.$$.fragment),cDe=l(),$c=a("h2"),RC=a("a"),WTe=a("span"),F(R9.$$.fragment),A8r=l(),QTe=a("span"),y8r=o("FlaxAutoModel"),fDe=l(),fr=a("div"),F(P9.$$.fragment),L8r=l(),kc=a("p"),x8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YJ=a("a"),$8r=o("from_pretrained()"),k8r=o(" class method or the "),KJ=a("a"),S8r=o("from_config()"),R8r=o(` class
method.`),P8r=l(),B9=a("p"),B8r=o("This class cannot be instantiated directly using "),HTe=a("code"),I8r=o("__init__()"),N8r=o(" (throws an error)."),q8r=l(),Gt=a("div"),F(I9.$$.fragment),j8r=l(),UTe=a("p"),D8r=o("Instantiates one of the base model classes of the library from a configuration."),G8r=l(),Sc=a("p"),O8r=o(`Note:
Loading a model from its configuration file does `),JTe=a("strong"),V8r=o("not"),X8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=a("a"),z8r=o("from_pretrained()"),W8r=o(" to load the model weights."),Q8r=l(),F(PC.$$.fragment),H8r=l(),jr=a("div"),F(N9.$$.fragment),U8r=l(),YTe=a("p"),J8r=o("Instantiate one of the base model classes of the library from a pretrained model."),Y8r=l(),hn=a("p"),K8r=o("The model class to instantiate is selected based on the "),KTe=a("code"),Z8r=o("model_type"),e9r=o(` property of the config object (either
passed as an argument or loaded from `),ZTe=a("code"),o9r=o("pretrained_model_name_or_path"),r9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e7e=a("code"),t9r=o("pretrained_model_name_or_path"),a9r=o(":"),n9r=l(),re=a("ul"),BC=a("li"),o7e=a("strong"),s9r=o("albert"),l9r=o(" \u2014 "),eY=a("a"),i9r=o("FlaxAlbertModel"),d9r=o(" (ALBERT model)"),c9r=l(),IC=a("li"),r7e=a("strong"),f9r=o("bart"),m9r=o(" \u2014 "),oY=a("a"),g9r=o("FlaxBartModel"),h9r=o(" (BART model)"),p9r=l(),NC=a("li"),t7e=a("strong"),_9r=o("beit"),u9r=o(" \u2014 "),rY=a("a"),b9r=o("FlaxBeitModel"),v9r=o(" (BEiT model)"),F9r=l(),qC=a("li"),a7e=a("strong"),T9r=o("bert"),M9r=o(" \u2014 "),tY=a("a"),E9r=o("FlaxBertModel"),C9r=o(" (BERT model)"),w9r=l(),jC=a("li"),n7e=a("strong"),A9r=o("big_bird"),y9r=o(" \u2014 "),aY=a("a"),L9r=o("FlaxBigBirdModel"),x9r=o(" (BigBird model)"),$9r=l(),DC=a("li"),s7e=a("strong"),k9r=o("blenderbot"),S9r=o(" \u2014 "),nY=a("a"),R9r=o("FlaxBlenderbotModel"),P9r=o(" (Blenderbot model)"),B9r=l(),GC=a("li"),l7e=a("strong"),I9r=o("blenderbot-small"),N9r=o(" \u2014 "),sY=a("a"),q9r=o("FlaxBlenderbotSmallModel"),j9r=o(" (BlenderbotSmall model)"),D9r=l(),OC=a("li"),i7e=a("strong"),G9r=o("clip"),O9r=o(" \u2014 "),lY=a("a"),V9r=o("FlaxCLIPModel"),X9r=o(" (CLIP model)"),z9r=l(),VC=a("li"),d7e=a("strong"),W9r=o("distilbert"),Q9r=o(" \u2014 "),iY=a("a"),H9r=o("FlaxDistilBertModel"),U9r=o(" (DistilBERT model)"),J9r=l(),XC=a("li"),c7e=a("strong"),Y9r=o("electra"),K9r=o(" \u2014 "),dY=a("a"),Z9r=o("FlaxElectraModel"),exr=o(" (ELECTRA model)"),oxr=l(),zC=a("li"),f7e=a("strong"),rxr=o("gpt2"),txr=o(" \u2014 "),cY=a("a"),axr=o("FlaxGPT2Model"),nxr=o(" (OpenAI GPT-2 model)"),sxr=l(),WC=a("li"),m7e=a("strong"),lxr=o("gpt_neo"),ixr=o(" \u2014 "),fY=a("a"),dxr=o("FlaxGPTNeoModel"),cxr=o(" (GPT Neo model)"),fxr=l(),QC=a("li"),g7e=a("strong"),mxr=o("gptj"),gxr=o(" \u2014 "),mY=a("a"),hxr=o("FlaxGPTJModel"),pxr=o(" (GPT-J model)"),_xr=l(),HC=a("li"),h7e=a("strong"),uxr=o("marian"),bxr=o(" \u2014 "),gY=a("a"),vxr=o("FlaxMarianModel"),Fxr=o(" (Marian model)"),Txr=l(),UC=a("li"),p7e=a("strong"),Mxr=o("mbart"),Exr=o(" \u2014 "),hY=a("a"),Cxr=o("FlaxMBartModel"),wxr=o(" (mBART model)"),Axr=l(),JC=a("li"),_7e=a("strong"),yxr=o("mt5"),Lxr=o(" \u2014 "),pY=a("a"),xxr=o("FlaxMT5Model"),$xr=o(" (mT5 model)"),kxr=l(),YC=a("li"),u7e=a("strong"),Sxr=o("opt"),Rxr=o(" \u2014 "),_Y=a("a"),Pxr=o("FlaxOPTModel"),Bxr=o(" (OPT model)"),Ixr=l(),KC=a("li"),b7e=a("strong"),Nxr=o("pegasus"),qxr=o(" \u2014 "),uY=a("a"),jxr=o("FlaxPegasusModel"),Dxr=o(" (Pegasus model)"),Gxr=l(),ZC=a("li"),v7e=a("strong"),Oxr=o("roberta"),Vxr=o(" \u2014 "),bY=a("a"),Xxr=o("FlaxRobertaModel"),zxr=o(" (RoBERTa model)"),Wxr=l(),e5=a("li"),F7e=a("strong"),Qxr=o("roformer"),Hxr=o(" \u2014 "),vY=a("a"),Uxr=o("FlaxRoFormerModel"),Jxr=o(" (RoFormer model)"),Yxr=l(),o5=a("li"),T7e=a("strong"),Kxr=o("t5"),Zxr=o(" \u2014 "),FY=a("a"),e$r=o("FlaxT5Model"),o$r=o(" (T5 model)"),r$r=l(),r5=a("li"),M7e=a("strong"),t$r=o("vision-text-dual-encoder"),a$r=o(" \u2014 "),TY=a("a"),n$r=o("FlaxVisionTextDualEncoderModel"),s$r=o(" (VisionTextDualEncoder model)"),l$r=l(),t5=a("li"),E7e=a("strong"),i$r=o("vit"),d$r=o(" \u2014 "),MY=a("a"),c$r=o("FlaxViTModel"),f$r=o(" (ViT model)"),m$r=l(),a5=a("li"),C7e=a("strong"),g$r=o("wav2vec2"),h$r=o(" \u2014 "),EY=a("a"),p$r=o("FlaxWav2Vec2Model"),_$r=o(" (Wav2Vec2 model)"),u$r=l(),n5=a("li"),w7e=a("strong"),b$r=o("xglm"),v$r=o(" \u2014 "),CY=a("a"),F$r=o("FlaxXGLMModel"),T$r=o(" (XGLM model)"),M$r=l(),s5=a("li"),A7e=a("strong"),E$r=o("xlm-roberta"),C$r=o(" \u2014 "),wY=a("a"),w$r=o("FlaxXLMRobertaModel"),A$r=o(" (XLM-RoBERTa model)"),y$r=l(),F(l5.$$.fragment),mDe=l(),Rc=a("h2"),i5=a("a"),y7e=a("span"),F(q9.$$.fragment),L$r=l(),L7e=a("span"),x$r=o("FlaxAutoModelForCausalLM"),gDe=l(),mr=a("div"),F(j9.$$.fragment),$$r=l(),Pc=a("p"),k$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AY=a("a"),S$r=o("from_pretrained()"),R$r=o(" class method or the "),yY=a("a"),P$r=o("from_config()"),B$r=o(` class
method.`),I$r=l(),D9=a("p"),N$r=o("This class cannot be instantiated directly using "),x7e=a("code"),q$r=o("__init__()"),j$r=o(" (throws an error)."),D$r=l(),Ot=a("div"),F(G9.$$.fragment),G$r=l(),$7e=a("p"),O$r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),V$r=l(),Bc=a("p"),X$r=o(`Note:
Loading a model from its configuration file does `),k7e=a("strong"),z$r=o("not"),W$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=a("a"),Q$r=o("from_pretrained()"),H$r=o(" to load the model weights."),U$r=l(),F(d5.$$.fragment),J$r=l(),Dr=a("div"),F(O9.$$.fragment),Y$r=l(),S7e=a("p"),K$r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Z$r=l(),pn=a("p"),ekr=o("The model class to instantiate is selected based on the "),R7e=a("code"),okr=o("model_type"),rkr=o(` property of the config object (either
passed as an argument or loaded from `),P7e=a("code"),tkr=o("pretrained_model_name_or_path"),akr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B7e=a("code"),nkr=o("pretrained_model_name_or_path"),skr=o(":"),lkr=l(),Le=a("ul"),c5=a("li"),I7e=a("strong"),ikr=o("bart"),dkr=o(" \u2014 "),xY=a("a"),ckr=o("FlaxBartForCausalLM"),fkr=o(" (BART model)"),mkr=l(),f5=a("li"),N7e=a("strong"),gkr=o("bert"),hkr=o(" \u2014 "),$Y=a("a"),pkr=o("FlaxBertForCausalLM"),_kr=o(" (BERT model)"),ukr=l(),m5=a("li"),q7e=a("strong"),bkr=o("big_bird"),vkr=o(" \u2014 "),kY=a("a"),Fkr=o("FlaxBigBirdForCausalLM"),Tkr=o(" (BigBird model)"),Mkr=l(),g5=a("li"),j7e=a("strong"),Ekr=o("electra"),Ckr=o(" \u2014 "),SY=a("a"),wkr=o("FlaxElectraForCausalLM"),Akr=o(" (ELECTRA model)"),ykr=l(),h5=a("li"),D7e=a("strong"),Lkr=o("gpt2"),xkr=o(" \u2014 "),RY=a("a"),$kr=o("FlaxGPT2LMHeadModel"),kkr=o(" (OpenAI GPT-2 model)"),Skr=l(),p5=a("li"),G7e=a("strong"),Rkr=o("gpt_neo"),Pkr=o(" \u2014 "),PY=a("a"),Bkr=o("FlaxGPTNeoForCausalLM"),Ikr=o(" (GPT Neo model)"),Nkr=l(),_5=a("li"),O7e=a("strong"),qkr=o("gptj"),jkr=o(" \u2014 "),BY=a("a"),Dkr=o("FlaxGPTJForCausalLM"),Gkr=o(" (GPT-J model)"),Okr=l(),u5=a("li"),V7e=a("strong"),Vkr=o("opt"),Xkr=o(" \u2014 "),IY=a("a"),zkr=o("FlaxOPTForCausalLM"),Wkr=o(" (OPT model)"),Qkr=l(),b5=a("li"),X7e=a("strong"),Hkr=o("roberta"),Ukr=o(" \u2014 "),NY=a("a"),Jkr=o("FlaxRobertaForCausalLM"),Ykr=o(" (RoBERTa model)"),Kkr=l(),v5=a("li"),z7e=a("strong"),Zkr=o("xglm"),eSr=o(" \u2014 "),qY=a("a"),oSr=o("FlaxXGLMForCausalLM"),rSr=o(" (XGLM model)"),tSr=l(),F(F5.$$.fragment),hDe=l(),Ic=a("h2"),T5=a("a"),W7e=a("span"),F(V9.$$.fragment),aSr=l(),Q7e=a("span"),nSr=o("FlaxAutoModelForPreTraining"),pDe=l(),gr=a("div"),F(X9.$$.fragment),sSr=l(),Nc=a("p"),lSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jY=a("a"),iSr=o("from_pretrained()"),dSr=o(" class method or the "),DY=a("a"),cSr=o("from_config()"),fSr=o(` class
method.`),mSr=l(),z9=a("p"),gSr=o("This class cannot be instantiated directly using "),H7e=a("code"),hSr=o("__init__()"),pSr=o(" (throws an error)."),_Sr=l(),Vt=a("div"),F(W9.$$.fragment),uSr=l(),U7e=a("p"),bSr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vSr=l(),qc=a("p"),FSr=o(`Note:
Loading a model from its configuration file does `),J7e=a("strong"),TSr=o("not"),MSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("a"),ESr=o("from_pretrained()"),CSr=o(" to load the model weights."),wSr=l(),F(M5.$$.fragment),ASr=l(),Gr=a("div"),F(Q9.$$.fragment),ySr=l(),Y7e=a("p"),LSr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xSr=l(),_n=a("p"),$Sr=o("The model class to instantiate is selected based on the "),K7e=a("code"),kSr=o("model_type"),SSr=o(` property of the config object (either
passed as an argument or loaded from `),Z7e=a("code"),RSr=o("pretrained_model_name_or_path"),PSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eMe=a("code"),BSr=o("pretrained_model_name_or_path"),ISr=o(":"),NSr=l(),Ee=a("ul"),E5=a("li"),oMe=a("strong"),qSr=o("albert"),jSr=o(" \u2014 "),OY=a("a"),DSr=o("FlaxAlbertForPreTraining"),GSr=o(" (ALBERT model)"),OSr=l(),C5=a("li"),rMe=a("strong"),VSr=o("bart"),XSr=o(" \u2014 "),VY=a("a"),zSr=o("FlaxBartForConditionalGeneration"),WSr=o(" (BART model)"),QSr=l(),w5=a("li"),tMe=a("strong"),HSr=o("bert"),USr=o(" \u2014 "),XY=a("a"),JSr=o("FlaxBertForPreTraining"),YSr=o(" (BERT model)"),KSr=l(),A5=a("li"),aMe=a("strong"),ZSr=o("big_bird"),eRr=o(" \u2014 "),zY=a("a"),oRr=o("FlaxBigBirdForPreTraining"),rRr=o(" (BigBird model)"),tRr=l(),y5=a("li"),nMe=a("strong"),aRr=o("electra"),nRr=o(" \u2014 "),WY=a("a"),sRr=o("FlaxElectraForPreTraining"),lRr=o(" (ELECTRA model)"),iRr=l(),L5=a("li"),sMe=a("strong"),dRr=o("mbart"),cRr=o(" \u2014 "),QY=a("a"),fRr=o("FlaxMBartForConditionalGeneration"),mRr=o(" (mBART model)"),gRr=l(),x5=a("li"),lMe=a("strong"),hRr=o("mt5"),pRr=o(" \u2014 "),HY=a("a"),_Rr=o("FlaxMT5ForConditionalGeneration"),uRr=o(" (mT5 model)"),bRr=l(),$5=a("li"),iMe=a("strong"),vRr=o("roberta"),FRr=o(" \u2014 "),UY=a("a"),TRr=o("FlaxRobertaForMaskedLM"),MRr=o(" (RoBERTa model)"),ERr=l(),k5=a("li"),dMe=a("strong"),CRr=o("roformer"),wRr=o(" \u2014 "),JY=a("a"),ARr=o("FlaxRoFormerForMaskedLM"),yRr=o(" (RoFormer model)"),LRr=l(),S5=a("li"),cMe=a("strong"),xRr=o("t5"),$Rr=o(" \u2014 "),YY=a("a"),kRr=o("FlaxT5ForConditionalGeneration"),SRr=o(" (T5 model)"),RRr=l(),R5=a("li"),fMe=a("strong"),PRr=o("wav2vec2"),BRr=o(" \u2014 "),KY=a("a"),IRr=o("FlaxWav2Vec2ForPreTraining"),NRr=o(" (Wav2Vec2 model)"),qRr=l(),P5=a("li"),mMe=a("strong"),jRr=o("xlm-roberta"),DRr=o(" \u2014 "),ZY=a("a"),GRr=o("FlaxXLMRobertaForMaskedLM"),ORr=o(" (XLM-RoBERTa model)"),VRr=l(),F(B5.$$.fragment),_De=l(),jc=a("h2"),I5=a("a"),gMe=a("span"),F(H9.$$.fragment),XRr=l(),hMe=a("span"),zRr=o("FlaxAutoModelForMaskedLM"),uDe=l(),hr=a("div"),F(U9.$$.fragment),WRr=l(),Dc=a("p"),QRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eK=a("a"),HRr=o("from_pretrained()"),URr=o(" class method or the "),oK=a("a"),JRr=o("from_config()"),YRr=o(` class
method.`),KRr=l(),J9=a("p"),ZRr=o("This class cannot be instantiated directly using "),pMe=a("code"),ePr=o("__init__()"),oPr=o(" (throws an error)."),rPr=l(),Xt=a("div"),F(Y9.$$.fragment),tPr=l(),_Me=a("p"),aPr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nPr=l(),Gc=a("p"),sPr=o(`Note:
Loading a model from its configuration file does `),uMe=a("strong"),lPr=o("not"),iPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=a("a"),dPr=o("from_pretrained()"),cPr=o(" to load the model weights."),fPr=l(),F(N5.$$.fragment),mPr=l(),Or=a("div"),F(K9.$$.fragment),gPr=l(),bMe=a("p"),hPr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pPr=l(),un=a("p"),_Pr=o("The model class to instantiate is selected based on the "),vMe=a("code"),uPr=o("model_type"),bPr=o(` property of the config object (either
passed as an argument or loaded from `),FMe=a("code"),vPr=o("pretrained_model_name_or_path"),FPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TMe=a("code"),TPr=o("pretrained_model_name_or_path"),MPr=o(":"),EPr=l(),xe=a("ul"),q5=a("li"),MMe=a("strong"),CPr=o("albert"),wPr=o(" \u2014 "),tK=a("a"),APr=o("FlaxAlbertForMaskedLM"),yPr=o(" (ALBERT model)"),LPr=l(),j5=a("li"),EMe=a("strong"),xPr=o("bart"),$Pr=o(" \u2014 "),aK=a("a"),kPr=o("FlaxBartForConditionalGeneration"),SPr=o(" (BART model)"),RPr=l(),D5=a("li"),CMe=a("strong"),PPr=o("bert"),BPr=o(" \u2014 "),nK=a("a"),IPr=o("FlaxBertForMaskedLM"),NPr=o(" (BERT model)"),qPr=l(),G5=a("li"),wMe=a("strong"),jPr=o("big_bird"),DPr=o(" \u2014 "),sK=a("a"),GPr=o("FlaxBigBirdForMaskedLM"),OPr=o(" (BigBird model)"),VPr=l(),O5=a("li"),AMe=a("strong"),XPr=o("distilbert"),zPr=o(" \u2014 "),lK=a("a"),WPr=o("FlaxDistilBertForMaskedLM"),QPr=o(" (DistilBERT model)"),HPr=l(),V5=a("li"),yMe=a("strong"),UPr=o("electra"),JPr=o(" \u2014 "),iK=a("a"),YPr=o("FlaxElectraForMaskedLM"),KPr=o(" (ELECTRA model)"),ZPr=l(),X5=a("li"),LMe=a("strong"),eBr=o("mbart"),oBr=o(" \u2014 "),dK=a("a"),rBr=o("FlaxMBartForConditionalGeneration"),tBr=o(" (mBART model)"),aBr=l(),z5=a("li"),xMe=a("strong"),nBr=o("roberta"),sBr=o(" \u2014 "),cK=a("a"),lBr=o("FlaxRobertaForMaskedLM"),iBr=o(" (RoBERTa model)"),dBr=l(),W5=a("li"),$Me=a("strong"),cBr=o("roformer"),fBr=o(" \u2014 "),fK=a("a"),mBr=o("FlaxRoFormerForMaskedLM"),gBr=o(" (RoFormer model)"),hBr=l(),Q5=a("li"),kMe=a("strong"),pBr=o("xlm-roberta"),_Br=o(" \u2014 "),mK=a("a"),uBr=o("FlaxXLMRobertaForMaskedLM"),bBr=o(" (XLM-RoBERTa model)"),vBr=l(),F(H5.$$.fragment),bDe=l(),Oc=a("h2"),U5=a("a"),SMe=a("span"),F(Z9.$$.fragment),FBr=l(),RMe=a("span"),TBr=o("FlaxAutoModelForSeq2SeqLM"),vDe=l(),pr=a("div"),F(ex.$$.fragment),MBr=l(),Vc=a("p"),EBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gK=a("a"),CBr=o("from_pretrained()"),wBr=o(" class method or the "),hK=a("a"),ABr=o("from_config()"),yBr=o(` class
method.`),LBr=l(),ox=a("p"),xBr=o("This class cannot be instantiated directly using "),PMe=a("code"),$Br=o("__init__()"),kBr=o(" (throws an error)."),SBr=l(),zt=a("div"),F(rx.$$.fragment),RBr=l(),BMe=a("p"),PBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),BBr=l(),Xc=a("p"),IBr=o(`Note:
Loading a model from its configuration file does `),IMe=a("strong"),NBr=o("not"),qBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=a("a"),jBr=o("from_pretrained()"),DBr=o(" to load the model weights."),GBr=l(),F(J5.$$.fragment),OBr=l(),Vr=a("div"),F(tx.$$.fragment),VBr=l(),NMe=a("p"),XBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zBr=l(),bn=a("p"),WBr=o("The model class to instantiate is selected based on the "),qMe=a("code"),QBr=o("model_type"),HBr=o(` property of the config object (either
passed as an argument or loaded from `),jMe=a("code"),UBr=o("pretrained_model_name_or_path"),JBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=a("code"),YBr=o("pretrained_model_name_or_path"),KBr=o(":"),ZBr=l(),Pe=a("ul"),Y5=a("li"),GMe=a("strong"),eIr=o("bart"),oIr=o(" \u2014 "),_K=a("a"),rIr=o("FlaxBartForConditionalGeneration"),tIr=o(" (BART model)"),aIr=l(),K5=a("li"),OMe=a("strong"),nIr=o("blenderbot"),sIr=o(" \u2014 "),uK=a("a"),lIr=o("FlaxBlenderbotForConditionalGeneration"),iIr=o(" (Blenderbot model)"),dIr=l(),Z5=a("li"),VMe=a("strong"),cIr=o("blenderbot-small"),fIr=o(" \u2014 "),bK=a("a"),mIr=o("FlaxBlenderbotSmallForConditionalGeneration"),gIr=o(" (BlenderbotSmall model)"),hIr=l(),e0=a("li"),XMe=a("strong"),pIr=o("encoder-decoder"),_Ir=o(" \u2014 "),vK=a("a"),uIr=o("FlaxEncoderDecoderModel"),bIr=o(" (Encoder decoder model)"),vIr=l(),o0=a("li"),zMe=a("strong"),FIr=o("marian"),TIr=o(" \u2014 "),FK=a("a"),MIr=o("FlaxMarianMTModel"),EIr=o(" (Marian model)"),CIr=l(),r0=a("li"),WMe=a("strong"),wIr=o("mbart"),AIr=o(" \u2014 "),TK=a("a"),yIr=o("FlaxMBartForConditionalGeneration"),LIr=o(" (mBART model)"),xIr=l(),t0=a("li"),QMe=a("strong"),$Ir=o("mt5"),kIr=o(" \u2014 "),MK=a("a"),SIr=o("FlaxMT5ForConditionalGeneration"),RIr=o(" (mT5 model)"),PIr=l(),a0=a("li"),HMe=a("strong"),BIr=o("pegasus"),IIr=o(" \u2014 "),EK=a("a"),NIr=o("FlaxPegasusForConditionalGeneration"),qIr=o(" (Pegasus model)"),jIr=l(),n0=a("li"),UMe=a("strong"),DIr=o("t5"),GIr=o(" \u2014 "),CK=a("a"),OIr=o("FlaxT5ForConditionalGeneration"),VIr=o(" (T5 model)"),XIr=l(),F(s0.$$.fragment),FDe=l(),zc=a("h2"),l0=a("a"),JMe=a("span"),F(ax.$$.fragment),zIr=l(),YMe=a("span"),WIr=o("FlaxAutoModelForSequenceClassification"),TDe=l(),_r=a("div"),F(nx.$$.fragment),QIr=l(),Wc=a("p"),HIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wK=a("a"),UIr=o("from_pretrained()"),JIr=o(" class method or the "),AK=a("a"),YIr=o("from_config()"),KIr=o(` class
method.`),ZIr=l(),sx=a("p"),eNr=o("This class cannot be instantiated directly using "),KMe=a("code"),oNr=o("__init__()"),rNr=o(" (throws an error)."),tNr=l(),Wt=a("div"),F(lx.$$.fragment),aNr=l(),ZMe=a("p"),nNr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sNr=l(),Qc=a("p"),lNr=o(`Note:
Loading a model from its configuration file does `),eEe=a("strong"),iNr=o("not"),dNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=a("a"),cNr=o("from_pretrained()"),fNr=o(" to load the model weights."),mNr=l(),F(i0.$$.fragment),gNr=l(),Xr=a("div"),F(ix.$$.fragment),hNr=l(),oEe=a("p"),pNr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_Nr=l(),vn=a("p"),uNr=o("The model class to instantiate is selected based on the "),rEe=a("code"),bNr=o("model_type"),vNr=o(` property of the config object (either
passed as an argument or loaded from `),tEe=a("code"),FNr=o("pretrained_model_name_or_path"),TNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=a("code"),MNr=o("pretrained_model_name_or_path"),ENr=o(":"),CNr=l(),$e=a("ul"),d0=a("li"),nEe=a("strong"),wNr=o("albert"),ANr=o(" \u2014 "),LK=a("a"),yNr=o("FlaxAlbertForSequenceClassification"),LNr=o(" (ALBERT model)"),xNr=l(),c0=a("li"),sEe=a("strong"),$Nr=o("bart"),kNr=o(" \u2014 "),xK=a("a"),SNr=o("FlaxBartForSequenceClassification"),RNr=o(" (BART model)"),PNr=l(),f0=a("li"),lEe=a("strong"),BNr=o("bert"),INr=o(" \u2014 "),$K=a("a"),NNr=o("FlaxBertForSequenceClassification"),qNr=o(" (BERT model)"),jNr=l(),m0=a("li"),iEe=a("strong"),DNr=o("big_bird"),GNr=o(" \u2014 "),kK=a("a"),ONr=o("FlaxBigBirdForSequenceClassification"),VNr=o(" (BigBird model)"),XNr=l(),g0=a("li"),dEe=a("strong"),zNr=o("distilbert"),WNr=o(" \u2014 "),SK=a("a"),QNr=o("FlaxDistilBertForSequenceClassification"),HNr=o(" (DistilBERT model)"),UNr=l(),h0=a("li"),cEe=a("strong"),JNr=o("electra"),YNr=o(" \u2014 "),RK=a("a"),KNr=o("FlaxElectraForSequenceClassification"),ZNr=o(" (ELECTRA model)"),eqr=l(),p0=a("li"),fEe=a("strong"),oqr=o("mbart"),rqr=o(" \u2014 "),PK=a("a"),tqr=o("FlaxMBartForSequenceClassification"),aqr=o(" (mBART model)"),nqr=l(),_0=a("li"),mEe=a("strong"),sqr=o("roberta"),lqr=o(" \u2014 "),BK=a("a"),iqr=o("FlaxRobertaForSequenceClassification"),dqr=o(" (RoBERTa model)"),cqr=l(),u0=a("li"),gEe=a("strong"),fqr=o("roformer"),mqr=o(" \u2014 "),IK=a("a"),gqr=o("FlaxRoFormerForSequenceClassification"),hqr=o(" (RoFormer model)"),pqr=l(),b0=a("li"),hEe=a("strong"),_qr=o("xlm-roberta"),uqr=o(" \u2014 "),NK=a("a"),bqr=o("FlaxXLMRobertaForSequenceClassification"),vqr=o(" (XLM-RoBERTa model)"),Fqr=l(),F(v0.$$.fragment),MDe=l(),Hc=a("h2"),F0=a("a"),pEe=a("span"),F(dx.$$.fragment),Tqr=l(),_Ee=a("span"),Mqr=o("FlaxAutoModelForQuestionAnswering"),EDe=l(),ur=a("div"),F(cx.$$.fragment),Eqr=l(),Uc=a("p"),Cqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qK=a("a"),wqr=o("from_pretrained()"),Aqr=o(" class method or the "),jK=a("a"),yqr=o("from_config()"),Lqr=o(` class
method.`),xqr=l(),fx=a("p"),$qr=o("This class cannot be instantiated directly using "),uEe=a("code"),kqr=o("__init__()"),Sqr=o(" (throws an error)."),Rqr=l(),Qt=a("div"),F(mx.$$.fragment),Pqr=l(),bEe=a("p"),Bqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Iqr=l(),Jc=a("p"),Nqr=o(`Note:
Loading a model from its configuration file does `),vEe=a("strong"),qqr=o("not"),jqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=a("a"),Dqr=o("from_pretrained()"),Gqr=o(" to load the model weights."),Oqr=l(),F(T0.$$.fragment),Vqr=l(),zr=a("div"),F(gx.$$.fragment),Xqr=l(),FEe=a("p"),zqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Wqr=l(),Fn=a("p"),Qqr=o("The model class to instantiate is selected based on the "),TEe=a("code"),Hqr=o("model_type"),Uqr=o(` property of the config object (either
passed as an argument or loaded from `),MEe=a("code"),Jqr=o("pretrained_model_name_or_path"),Yqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=a("code"),Kqr=o("pretrained_model_name_or_path"),Zqr=o(":"),ejr=l(),ke=a("ul"),M0=a("li"),CEe=a("strong"),ojr=o("albert"),rjr=o(" \u2014 "),GK=a("a"),tjr=o("FlaxAlbertForQuestionAnswering"),ajr=o(" (ALBERT model)"),njr=l(),E0=a("li"),wEe=a("strong"),sjr=o("bart"),ljr=o(" \u2014 "),OK=a("a"),ijr=o("FlaxBartForQuestionAnswering"),djr=o(" (BART model)"),cjr=l(),C0=a("li"),AEe=a("strong"),fjr=o("bert"),mjr=o(" \u2014 "),VK=a("a"),gjr=o("FlaxBertForQuestionAnswering"),hjr=o(" (BERT model)"),pjr=l(),w0=a("li"),yEe=a("strong"),_jr=o("big_bird"),ujr=o(" \u2014 "),XK=a("a"),bjr=o("FlaxBigBirdForQuestionAnswering"),vjr=o(" (BigBird model)"),Fjr=l(),A0=a("li"),LEe=a("strong"),Tjr=o("distilbert"),Mjr=o(" \u2014 "),zK=a("a"),Ejr=o("FlaxDistilBertForQuestionAnswering"),Cjr=o(" (DistilBERT model)"),wjr=l(),y0=a("li"),xEe=a("strong"),Ajr=o("electra"),yjr=o(" \u2014 "),WK=a("a"),Ljr=o("FlaxElectraForQuestionAnswering"),xjr=o(" (ELECTRA model)"),$jr=l(),L0=a("li"),$Ee=a("strong"),kjr=o("mbart"),Sjr=o(" \u2014 "),QK=a("a"),Rjr=o("FlaxMBartForQuestionAnswering"),Pjr=o(" (mBART model)"),Bjr=l(),x0=a("li"),kEe=a("strong"),Ijr=o("roberta"),Njr=o(" \u2014 "),HK=a("a"),qjr=o("FlaxRobertaForQuestionAnswering"),jjr=o(" (RoBERTa model)"),Djr=l(),$0=a("li"),SEe=a("strong"),Gjr=o("roformer"),Ojr=o(" \u2014 "),UK=a("a"),Vjr=o("FlaxRoFormerForQuestionAnswering"),Xjr=o(" (RoFormer model)"),zjr=l(),k0=a("li"),REe=a("strong"),Wjr=o("xlm-roberta"),Qjr=o(" \u2014 "),JK=a("a"),Hjr=o("FlaxXLMRobertaForQuestionAnswering"),Ujr=o(" (XLM-RoBERTa model)"),Jjr=l(),F(S0.$$.fragment),CDe=l(),Yc=a("h2"),R0=a("a"),PEe=a("span"),F(hx.$$.fragment),Yjr=l(),BEe=a("span"),Kjr=o("FlaxAutoModelForTokenClassification"),wDe=l(),br=a("div"),F(px.$$.fragment),Zjr=l(),Kc=a("p"),eDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YK=a("a"),oDr=o("from_pretrained()"),rDr=o(" class method or the "),KK=a("a"),tDr=o("from_config()"),aDr=o(` class
method.`),nDr=l(),_x=a("p"),sDr=o("This class cannot be instantiated directly using "),IEe=a("code"),lDr=o("__init__()"),iDr=o(" (throws an error)."),dDr=l(),Ht=a("div"),F(ux.$$.fragment),cDr=l(),NEe=a("p"),fDr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mDr=l(),Zc=a("p"),gDr=o(`Note:
Loading a model from its configuration file does `),qEe=a("strong"),hDr=o("not"),pDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=a("a"),_Dr=o("from_pretrained()"),uDr=o(" to load the model weights."),bDr=l(),F(P0.$$.fragment),vDr=l(),Wr=a("div"),F(bx.$$.fragment),FDr=l(),jEe=a("p"),TDr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),MDr=l(),Tn=a("p"),EDr=o("The model class to instantiate is selected based on the "),DEe=a("code"),CDr=o("model_type"),wDr=o(` property of the config object (either
passed as an argument or loaded from `),GEe=a("code"),ADr=o("pretrained_model_name_or_path"),yDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OEe=a("code"),LDr=o("pretrained_model_name_or_path"),xDr=o(":"),$Dr=l(),Ge=a("ul"),B0=a("li"),VEe=a("strong"),kDr=o("albert"),SDr=o(" \u2014 "),eZ=a("a"),RDr=o("FlaxAlbertForTokenClassification"),PDr=o(" (ALBERT model)"),BDr=l(),I0=a("li"),XEe=a("strong"),IDr=o("bert"),NDr=o(" \u2014 "),oZ=a("a"),qDr=o("FlaxBertForTokenClassification"),jDr=o(" (BERT model)"),DDr=l(),N0=a("li"),zEe=a("strong"),GDr=o("big_bird"),ODr=o(" \u2014 "),rZ=a("a"),VDr=o("FlaxBigBirdForTokenClassification"),XDr=o(" (BigBird model)"),zDr=l(),q0=a("li"),WEe=a("strong"),WDr=o("distilbert"),QDr=o(" \u2014 "),tZ=a("a"),HDr=o("FlaxDistilBertForTokenClassification"),UDr=o(" (DistilBERT model)"),JDr=l(),j0=a("li"),QEe=a("strong"),YDr=o("electra"),KDr=o(" \u2014 "),aZ=a("a"),ZDr=o("FlaxElectraForTokenClassification"),eGr=o(" (ELECTRA model)"),oGr=l(),D0=a("li"),HEe=a("strong"),rGr=o("roberta"),tGr=o(" \u2014 "),nZ=a("a"),aGr=o("FlaxRobertaForTokenClassification"),nGr=o(" (RoBERTa model)"),sGr=l(),G0=a("li"),UEe=a("strong"),lGr=o("roformer"),iGr=o(" \u2014 "),sZ=a("a"),dGr=o("FlaxRoFormerForTokenClassification"),cGr=o(" (RoFormer model)"),fGr=l(),O0=a("li"),JEe=a("strong"),mGr=o("xlm-roberta"),gGr=o(" \u2014 "),lZ=a("a"),hGr=o("FlaxXLMRobertaForTokenClassification"),pGr=o(" (XLM-RoBERTa model)"),_Gr=l(),F(V0.$$.fragment),ADe=l(),ef=a("h2"),X0=a("a"),YEe=a("span"),F(vx.$$.fragment),uGr=l(),KEe=a("span"),bGr=o("FlaxAutoModelForMultipleChoice"),yDe=l(),vr=a("div"),F(Fx.$$.fragment),vGr=l(),of=a("p"),FGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iZ=a("a"),TGr=o("from_pretrained()"),MGr=o(" class method or the "),dZ=a("a"),EGr=o("from_config()"),CGr=o(` class
method.`),wGr=l(),Tx=a("p"),AGr=o("This class cannot be instantiated directly using "),ZEe=a("code"),yGr=o("__init__()"),LGr=o(" (throws an error)."),xGr=l(),Ut=a("div"),F(Mx.$$.fragment),$Gr=l(),eCe=a("p"),kGr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),SGr=l(),rf=a("p"),RGr=o(`Note:
Loading a model from its configuration file does `),oCe=a("strong"),PGr=o("not"),BGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cZ=a("a"),IGr=o("from_pretrained()"),NGr=o(" to load the model weights."),qGr=l(),F(z0.$$.fragment),jGr=l(),Qr=a("div"),F(Ex.$$.fragment),DGr=l(),rCe=a("p"),GGr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),OGr=l(),Mn=a("p"),VGr=o("The model class to instantiate is selected based on the "),tCe=a("code"),XGr=o("model_type"),zGr=o(` property of the config object (either
passed as an argument or loaded from `),aCe=a("code"),WGr=o("pretrained_model_name_or_path"),QGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nCe=a("code"),HGr=o("pretrained_model_name_or_path"),UGr=o(":"),JGr=l(),Oe=a("ul"),W0=a("li"),sCe=a("strong"),YGr=o("albert"),KGr=o(" \u2014 "),fZ=a("a"),ZGr=o("FlaxAlbertForMultipleChoice"),eOr=o(" (ALBERT model)"),oOr=l(),Q0=a("li"),lCe=a("strong"),rOr=o("bert"),tOr=o(" \u2014 "),mZ=a("a"),aOr=o("FlaxBertForMultipleChoice"),nOr=o(" (BERT model)"),sOr=l(),H0=a("li"),iCe=a("strong"),lOr=o("big_bird"),iOr=o(" \u2014 "),gZ=a("a"),dOr=o("FlaxBigBirdForMultipleChoice"),cOr=o(" (BigBird model)"),fOr=l(),U0=a("li"),dCe=a("strong"),mOr=o("distilbert"),gOr=o(" \u2014 "),hZ=a("a"),hOr=o("FlaxDistilBertForMultipleChoice"),pOr=o(" (DistilBERT model)"),_Or=l(),J0=a("li"),cCe=a("strong"),uOr=o("electra"),bOr=o(" \u2014 "),pZ=a("a"),vOr=o("FlaxElectraForMultipleChoice"),FOr=o(" (ELECTRA model)"),TOr=l(),Y0=a("li"),fCe=a("strong"),MOr=o("roberta"),EOr=o(" \u2014 "),_Z=a("a"),COr=o("FlaxRobertaForMultipleChoice"),wOr=o(" (RoBERTa model)"),AOr=l(),K0=a("li"),mCe=a("strong"),yOr=o("roformer"),LOr=o(" \u2014 "),uZ=a("a"),xOr=o("FlaxRoFormerForMultipleChoice"),$Or=o(" (RoFormer model)"),kOr=l(),Z0=a("li"),gCe=a("strong"),SOr=o("xlm-roberta"),ROr=o(" \u2014 "),bZ=a("a"),POr=o("FlaxXLMRobertaForMultipleChoice"),BOr=o(" (XLM-RoBERTa model)"),IOr=l(),F(ew.$$.fragment),LDe=l(),tf=a("h2"),ow=a("a"),hCe=a("span"),F(Cx.$$.fragment),NOr=l(),pCe=a("span"),qOr=o("FlaxAutoModelForNextSentencePrediction"),xDe=l(),Fr=a("div"),F(wx.$$.fragment),jOr=l(),af=a("p"),DOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vZ=a("a"),GOr=o("from_pretrained()"),OOr=o(" class method or the "),FZ=a("a"),VOr=o("from_config()"),XOr=o(` class
method.`),zOr=l(),Ax=a("p"),WOr=o("This class cannot be instantiated directly using "),_Ce=a("code"),QOr=o("__init__()"),HOr=o(" (throws an error)."),UOr=l(),Jt=a("div"),F(yx.$$.fragment),JOr=l(),uCe=a("p"),YOr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),KOr=l(),nf=a("p"),ZOr=o(`Note:
Loading a model from its configuration file does `),bCe=a("strong"),eVr=o("not"),oVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=a("a"),rVr=o("from_pretrained()"),tVr=o(" to load the model weights."),aVr=l(),F(rw.$$.fragment),nVr=l(),Hr=a("div"),F(Lx.$$.fragment),sVr=l(),vCe=a("p"),lVr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),iVr=l(),En=a("p"),dVr=o("The model class to instantiate is selected based on the "),FCe=a("code"),cVr=o("model_type"),fVr=o(` property of the config object (either
passed as an argument or loaded from `),TCe=a("code"),mVr=o("pretrained_model_name_or_path"),gVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MCe=a("code"),hVr=o("pretrained_model_name_or_path"),pVr=o(":"),_Vr=l(),ECe=a("ul"),tw=a("li"),CCe=a("strong"),uVr=o("bert"),bVr=o(" \u2014 "),MZ=a("a"),vVr=o("FlaxBertForNextSentencePrediction"),FVr=o(" (BERT model)"),TVr=l(),F(aw.$$.fragment),$De=l(),sf=a("h2"),nw=a("a"),wCe=a("span"),F(xx.$$.fragment),MVr=l(),ACe=a("span"),EVr=o("FlaxAutoModelForImageClassification"),kDe=l(),Tr=a("div"),F($x.$$.fragment),CVr=l(),lf=a("p"),wVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EZ=a("a"),AVr=o("from_pretrained()"),yVr=o(" class method or the "),CZ=a("a"),LVr=o("from_config()"),xVr=o(` class
method.`),$Vr=l(),kx=a("p"),kVr=o("This class cannot be instantiated directly using "),yCe=a("code"),SVr=o("__init__()"),RVr=o(" (throws an error)."),PVr=l(),Yt=a("div"),F(Sx.$$.fragment),BVr=l(),LCe=a("p"),IVr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NVr=l(),df=a("p"),qVr=o(`Note:
Loading a model from its configuration file does `),xCe=a("strong"),jVr=o("not"),DVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=a("a"),GVr=o("from_pretrained()"),OVr=o(" to load the model weights."),VVr=l(),F(sw.$$.fragment),XVr=l(),Ur=a("div"),F(Rx.$$.fragment),zVr=l(),$Ce=a("p"),WVr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QVr=l(),Cn=a("p"),HVr=o("The model class to instantiate is selected based on the "),kCe=a("code"),UVr=o("model_type"),JVr=o(` property of the config object (either
passed as an argument or loaded from `),SCe=a("code"),YVr=o("pretrained_model_name_or_path"),KVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RCe=a("code"),ZVr=o("pretrained_model_name_or_path"),eXr=o(":"),oXr=l(),Px=a("ul"),lw=a("li"),PCe=a("strong"),rXr=o("beit"),tXr=o(" \u2014 "),AZ=a("a"),aXr=o("FlaxBeitForImageClassification"),nXr=o(" (BEiT model)"),sXr=l(),iw=a("li"),BCe=a("strong"),lXr=o("vit"),iXr=o(" \u2014 "),yZ=a("a"),dXr=o("FlaxViTForImageClassification"),cXr=o(" (ViT model)"),fXr=l(),F(dw.$$.fragment),SDe=l(),cf=a("h2"),cw=a("a"),ICe=a("span"),F(Bx.$$.fragment),mXr=l(),NCe=a("span"),gXr=o("FlaxAutoModelForVision2Seq"),RDe=l(),Mr=a("div"),F(Ix.$$.fragment),hXr=l(),ff=a("p"),pXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LZ=a("a"),_Xr=o("from_pretrained()"),uXr=o(" class method or the "),xZ=a("a"),bXr=o("from_config()"),vXr=o(` class
method.`),FXr=l(),Nx=a("p"),TXr=o("This class cannot be instantiated directly using "),qCe=a("code"),MXr=o("__init__()"),EXr=o(" (throws an error)."),CXr=l(),Kt=a("div"),F(qx.$$.fragment),wXr=l(),jCe=a("p"),AXr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yXr=l(),mf=a("p"),LXr=o(`Note:
Loading a model from its configuration file does `),DCe=a("strong"),xXr=o("not"),$Xr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=a("a"),kXr=o("from_pretrained()"),SXr=o(" to load the model weights."),RXr=l(),F(fw.$$.fragment),PXr=l(),Jr=a("div"),F(jx.$$.fragment),BXr=l(),GCe=a("p"),IXr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NXr=l(),wn=a("p"),qXr=o("The model class to instantiate is selected based on the "),OCe=a("code"),jXr=o("model_type"),DXr=o(` property of the config object (either
passed as an argument or loaded from `),VCe=a("code"),GXr=o("pretrained_model_name_or_path"),OXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XCe=a("code"),VXr=o("pretrained_model_name_or_path"),XXr=o(":"),zXr=l(),zCe=a("ul"),mw=a("li"),WCe=a("strong"),WXr=o("vision-encoder-decoder"),QXr=o(" \u2014 "),kZ=a("a"),HXr=o("FlaxVisionEncoderDecoderModel"),UXr=o(" (Vision Encoder decoder model)"),JXr=l(),F(gw.$$.fragment),this.h()},l(f){const u=Qkt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Dx=s(p);m=n(Dx,"A",{id:!0,class:!0,href:!0});var QCe=s(m);_=n(QCe,"SPAN",{});var HCe=s(_);T(d.$$.fragment,HCe),HCe.forEach(t),QCe.forEach(t),h=i(Dx),Mo=n(Dx,"SPAN",{});var UCe=s(Mo);mi=r(UCe,"Auto Classes"),UCe.forEach(t),Dx.forEach(t),_f=i(f),rt=n(f,"P",{});var Gx=s(rt);gi=r(Gx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=n(Gx,"CODE",{});var JCe=s(hi);kA=r(JCe,"from_pretrained()"),JCe.forEach(t),uf=r(Gx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Gx.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);pi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var YCe=s(yn);SA=r(YCe,"AutoConfig"),YCe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var KCe=s(xn);RA=r(KCe,"AutoModel"),KCe.forEach(t),_i=r(An,`, and
`),$n=n(An,"A",{href:!0});var ZCe=s($n);PA=r(ZCe,"AutoTokenizer"),ZCe.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),bf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Ox=s(Ae);ek=r(Ox,"will create a model that is an instance of "),bi=n(Ox,"A",{href:!0});var e5e=s(bi);ok=r(e5e,"BertModel"),e5e.forEach(t),rk=r(Ox,"."),Ox.forEach(t),Eo=i(f),wa=n(f,"P",{});var Vx=s(wa);tk=r(Vx,"There is one class of "),vf=n(Vx,"CODE",{});var o5e=s(vf);ak=r(o5e,"AutoModel"),o5e.forEach(t),OOe=r(Vx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Vx.forEach(t),kqe=i(f),vi=n(f,"H2",{class:!0});var Xx=s(vi);Ff=n(Xx,"A",{id:!0,class:!0,href:!0});var r5e=s(Ff);Coe=n(r5e,"SPAN",{});var t5e=s(Coe);T(BA.$$.fragment,t5e),t5e.forEach(t),r5e.forEach(t),VOe=i(Xx),woe=n(Xx,"SPAN",{});var a5e=s(woe);XOe=r(a5e,"Extending the Auto Classes"),a5e.forEach(t),Xx.forEach(t),Sqe=i(f),kn=n(f,"P",{});var gf=s(kn);zOe=r(gf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Aoe=n(gf,"CODE",{});var n5e=s(Aoe);WOe=r(n5e,"NewModel"),n5e.forEach(t),QOe=r(gf,", make sure you have a "),yoe=n(gf,"CODE",{});var s5e=s(yoe);HOe=r(s5e,"NewModelConfig"),s5e.forEach(t),UOe=r(gf,` then you can add those to the auto
classes like this:`),gf.forEach(t),Rqe=i(f),T(IA.$$.fragment,f),Pqe=i(f),nk=n(f,"P",{});var l5e=s(nk);JOe=r(l5e,"You will then be able to use the auto classes like you would usually do!"),l5e.forEach(t),Bqe=i(f),T(Tf.$$.fragment,f),Iqe=i(f),Fi=n(f,"H2",{class:!0});var zx=s(Fi);Mf=n(zx,"A",{id:!0,class:!0,href:!0});var i5e=s(Mf);Loe=n(i5e,"SPAN",{});var d5e=s(Loe);T(NA.$$.fragment,d5e),d5e.forEach(t),i5e.forEach(t),YOe=i(zx),xoe=n(zx,"SPAN",{});var c5e=s(xoe);KOe=r(c5e,"AutoConfig"),c5e.forEach(t),zx.forEach(t),Nqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(qA.$$.fragment,et),ZOe=i(et),jA=n(et,"P",{});var Wx=s(jA);eVe=r(Wx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),sk=n(Wx,"A",{href:!0});var f5e=s(sk);oVe=r(f5e,"from_pretrained()"),f5e.forEach(t),rVe=r(Wx," class method."),Wx.forEach(t),tVe=i(et),DA=n(et,"P",{});var Qx=s(DA);aVe=r(Qx,"This class cannot be instantiated directly using "),$oe=n(Qx,"CODE",{});var m5e=s($oe);nVe=r(m5e,"__init__()"),m5e.forEach(t),sVe=r(Qx," (throws an error)."),Qx.forEach(t),lVe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(GA.$$.fragment,ot),iVe=i(ot),koe=n(ot,"P",{});var g5e=s(koe);dVe=r(g5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),g5e.forEach(t),cVe=i(ot),Ti=n(ot,"P",{});var hf=s(Ti);fVe=r(hf,"The configuration class to instantiate is selected based on the "),Soe=n(hf,"CODE",{});var h5e=s(Soe);mVe=r(h5e,"model_type"),h5e.forEach(t),gVe=r(hf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Roe=n(hf,"CODE",{});var p5e=s(Roe);hVe=r(p5e,"pretrained_model_name_or_path"),p5e.forEach(t),pVe=r(hf,":"),hf.forEach(t),_Ve=i(ot),A=n(ot,"UL",{});var y=s(A);Ef=n(y,"LI",{});var hw=s(Ef);Poe=n(hw,"STRONG",{});var _5e=s(Poe);uVe=r(_5e,"albert"),_5e.forEach(t),bVe=r(hw," \u2014 "),lk=n(hw,"A",{href:!0});var u5e=s(lk);vVe=r(u5e,"AlbertConfig"),u5e.forEach(t),FVe=r(hw," (ALBERT model)"),hw.forEach(t),TVe=i(y),Cf=n(y,"LI",{});var pw=s(Cf);Boe=n(pw,"STRONG",{});var b5e=s(Boe);MVe=r(b5e,"bart"),b5e.forEach(t),EVe=r(pw," \u2014 "),ik=n(pw,"A",{href:!0});var v5e=s(ik);CVe=r(v5e,"BartConfig"),v5e.forEach(t),wVe=r(pw," (BART model)"),pw.forEach(t),AVe=i(y),wf=n(y,"LI",{});var _w=s(wf);Ioe=n(_w,"STRONG",{});var F5e=s(Ioe);yVe=r(F5e,"beit"),F5e.forEach(t),LVe=r(_w," \u2014 "),dk=n(_w,"A",{href:!0});var T5e=s(dk);xVe=r(T5e,"BeitConfig"),T5e.forEach(t),$Ve=r(_w," (BEiT model)"),_w.forEach(t),kVe=i(y),Af=n(y,"LI",{});var uw=s(Af);Noe=n(uw,"STRONG",{});var M5e=s(Noe);SVe=r(M5e,"bert"),M5e.forEach(t),RVe=r(uw," \u2014 "),ck=n(uw,"A",{href:!0});var E5e=s(ck);PVe=r(E5e,"BertConfig"),E5e.forEach(t),BVe=r(uw," (BERT model)"),uw.forEach(t),IVe=i(y),yf=n(y,"LI",{});var bw=s(yf);qoe=n(bw,"STRONG",{});var C5e=s(qoe);NVe=r(C5e,"bert-generation"),C5e.forEach(t),qVe=r(bw," \u2014 "),fk=n(bw,"A",{href:!0});var w5e=s(fk);jVe=r(w5e,"BertGenerationConfig"),w5e.forEach(t),DVe=r(bw," (Bert Generation model)"),bw.forEach(t),GVe=i(y),Lf=n(y,"LI",{});var vw=s(Lf);joe=n(vw,"STRONG",{});var A5e=s(joe);OVe=r(A5e,"big_bird"),A5e.forEach(t),VVe=r(vw," \u2014 "),mk=n(vw,"A",{href:!0});var y5e=s(mk);XVe=r(y5e,"BigBirdConfig"),y5e.forEach(t),zVe=r(vw," (BigBird model)"),vw.forEach(t),WVe=i(y),xf=n(y,"LI",{});var Fw=s(xf);Doe=n(Fw,"STRONG",{});var L5e=s(Doe);QVe=r(L5e,"bigbird_pegasus"),L5e.forEach(t),HVe=r(Fw," \u2014 "),gk=n(Fw,"A",{href:!0});var x5e=s(gk);UVe=r(x5e,"BigBirdPegasusConfig"),x5e.forEach(t),JVe=r(Fw," (BigBirdPegasus model)"),Fw.forEach(t),YVe=i(y),$f=n(y,"LI",{});var Tw=s($f);Goe=n(Tw,"STRONG",{});var $5e=s(Goe);KVe=r($5e,"blenderbot"),$5e.forEach(t),ZVe=r(Tw," \u2014 "),hk=n(Tw,"A",{href:!0});var k5e=s(hk);eXe=r(k5e,"BlenderbotConfig"),k5e.forEach(t),oXe=r(Tw," (Blenderbot model)"),Tw.forEach(t),rXe=i(y),kf=n(y,"LI",{});var Mw=s(kf);Ooe=n(Mw,"STRONG",{});var S5e=s(Ooe);tXe=r(S5e,"blenderbot-small"),S5e.forEach(t),aXe=r(Mw," \u2014 "),pk=n(Mw,"A",{href:!0});var R5e=s(pk);nXe=r(R5e,"BlenderbotSmallConfig"),R5e.forEach(t),sXe=r(Mw," (BlenderbotSmall model)"),Mw.forEach(t),lXe=i(y),Sf=n(y,"LI",{});var Ew=s(Sf);Voe=n(Ew,"STRONG",{});var P5e=s(Voe);iXe=r(P5e,"camembert"),P5e.forEach(t),dXe=r(Ew," \u2014 "),_k=n(Ew,"A",{href:!0});var B5e=s(_k);cXe=r(B5e,"CamembertConfig"),B5e.forEach(t),fXe=r(Ew," (CamemBERT model)"),Ew.forEach(t),mXe=i(y),Rf=n(y,"LI",{});var Cw=s(Rf);Xoe=n(Cw,"STRONG",{});var I5e=s(Xoe);gXe=r(I5e,"canine"),I5e.forEach(t),hXe=r(Cw," \u2014 "),uk=n(Cw,"A",{href:!0});var N5e=s(uk);pXe=r(N5e,"CanineConfig"),N5e.forEach(t),_Xe=r(Cw," (Canine model)"),Cw.forEach(t),uXe=i(y),Pf=n(y,"LI",{});var ww=s(Pf);zoe=n(ww,"STRONG",{});var q5e=s(zoe);bXe=r(q5e,"clip"),q5e.forEach(t),vXe=r(ww," \u2014 "),bk=n(ww,"A",{href:!0});var j5e=s(bk);FXe=r(j5e,"CLIPConfig"),j5e.forEach(t),TXe=r(ww," (CLIP model)"),ww.forEach(t),MXe=i(y),Bf=n(y,"LI",{});var Aw=s(Bf);Woe=n(Aw,"STRONG",{});var D5e=s(Woe);EXe=r(D5e,"codegen"),D5e.forEach(t),CXe=r(Aw," \u2014 "),vk=n(Aw,"A",{href:!0});var G5e=s(vk);wXe=r(G5e,"CodeGenConfig"),G5e.forEach(t),AXe=r(Aw," (CodeGen model)"),Aw.forEach(t),yXe=i(y),If=n(y,"LI",{});var yw=s(If);Qoe=n(yw,"STRONG",{});var O5e=s(Qoe);LXe=r(O5e,"convbert"),O5e.forEach(t),xXe=r(yw," \u2014 "),Fk=n(yw,"A",{href:!0});var V5e=s(Fk);$Xe=r(V5e,"ConvBertConfig"),V5e.forEach(t),kXe=r(yw," (ConvBERT model)"),yw.forEach(t),SXe=i(y),Nf=n(y,"LI",{});var Lw=s(Nf);Hoe=n(Lw,"STRONG",{});var X5e=s(Hoe);RXe=r(X5e,"convnext"),X5e.forEach(t),PXe=r(Lw," \u2014 "),Tk=n(Lw,"A",{href:!0});var z5e=s(Tk);BXe=r(z5e,"ConvNextConfig"),z5e.forEach(t),IXe=r(Lw," (ConvNext model)"),Lw.forEach(t),NXe=i(y),qf=n(y,"LI",{});var xw=s(qf);Uoe=n(xw,"STRONG",{});var W5e=s(Uoe);qXe=r(W5e,"ctrl"),W5e.forEach(t),jXe=r(xw," \u2014 "),Mk=n(xw,"A",{href:!0});var Q5e=s(Mk);DXe=r(Q5e,"CTRLConfig"),Q5e.forEach(t),GXe=r(xw," (CTRL model)"),xw.forEach(t),OXe=i(y),jf=n(y,"LI",{});var $w=s(jf);Joe=n($w,"STRONG",{});var H5e=s(Joe);VXe=r(H5e,"cvt"),H5e.forEach(t),XXe=r($w," \u2014 "),Ek=n($w,"A",{href:!0});var U5e=s(Ek);zXe=r(U5e,"CvtConfig"),U5e.forEach(t),WXe=r($w," (CvT model)"),$w.forEach(t),QXe=i(y),Df=n(y,"LI",{});var kw=s(Df);Yoe=n(kw,"STRONG",{});var J5e=s(Yoe);HXe=r(J5e,"data2vec-audio"),J5e.forEach(t),UXe=r(kw," \u2014 "),Ck=n(kw,"A",{href:!0});var Y5e=s(Ck);JXe=r(Y5e,"Data2VecAudioConfig"),Y5e.forEach(t),YXe=r(kw," (Data2VecAudio model)"),kw.forEach(t),KXe=i(y),Gf=n(y,"LI",{});var Sw=s(Gf);Koe=n(Sw,"STRONG",{});var K5e=s(Koe);ZXe=r(K5e,"data2vec-text"),K5e.forEach(t),eze=r(Sw," \u2014 "),wk=n(Sw,"A",{href:!0});var Z5e=s(wk);oze=r(Z5e,"Data2VecTextConfig"),Z5e.forEach(t),rze=r(Sw," (Data2VecText model)"),Sw.forEach(t),tze=i(y),Of=n(y,"LI",{});var Rw=s(Of);Zoe=n(Rw,"STRONG",{});var e0e=s(Zoe);aze=r(e0e,"data2vec-vision"),e0e.forEach(t),nze=r(Rw," \u2014 "),Ak=n(Rw,"A",{href:!0});var o0e=s(Ak);sze=r(o0e,"Data2VecVisionConfig"),o0e.forEach(t),lze=r(Rw," (Data2VecVision model)"),Rw.forEach(t),ize=i(y),Vf=n(y,"LI",{});var Pw=s(Vf);ere=n(Pw,"STRONG",{});var r0e=s(ere);dze=r(r0e,"deberta"),r0e.forEach(t),cze=r(Pw," \u2014 "),yk=n(Pw,"A",{href:!0});var t0e=s(yk);fze=r(t0e,"DebertaConfig"),t0e.forEach(t),mze=r(Pw," (DeBERTa model)"),Pw.forEach(t),gze=i(y),Xf=n(y,"LI",{});var Bw=s(Xf);ore=n(Bw,"STRONG",{});var a0e=s(ore);hze=r(a0e,"deberta-v2"),a0e.forEach(t),pze=r(Bw," \u2014 "),Lk=n(Bw,"A",{href:!0});var n0e=s(Lk);_ze=r(n0e,"DebertaV2Config"),n0e.forEach(t),uze=r(Bw," (DeBERTa-v2 model)"),Bw.forEach(t),bze=i(y),zf=n(y,"LI",{});var Iw=s(zf);rre=n(Iw,"STRONG",{});var s0e=s(rre);vze=r(s0e,"decision_transformer"),s0e.forEach(t),Fze=r(Iw," \u2014 "),xk=n(Iw,"A",{href:!0});var KXr=s(xk);Tze=r(KXr,"DecisionTransformerConfig"),KXr.forEach(t),Mze=r(Iw," (Decision Transformer model)"),Iw.forEach(t),Eze=i(y),Wf=n(y,"LI",{});var l0e=s(Wf);tre=n(l0e,"STRONG",{});var ZXr=s(tre);Cze=r(ZXr,"deit"),ZXr.forEach(t),wze=r(l0e," \u2014 "),$k=n(l0e,"A",{href:!0});var ezr=s($k);Aze=r(ezr,"DeiTConfig"),ezr.forEach(t),yze=r(l0e," (DeiT model)"),l0e.forEach(t),Lze=i(y),Qf=n(y,"LI",{});var i0e=s(Qf);are=n(i0e,"STRONG",{});var ozr=s(are);xze=r(ozr,"detr"),ozr.forEach(t),$ze=r(i0e," \u2014 "),kk=n(i0e,"A",{href:!0});var rzr=s(kk);kze=r(rzr,"DetrConfig"),rzr.forEach(t),Sze=r(i0e," (DETR model)"),i0e.forEach(t),Rze=i(y),Hf=n(y,"LI",{});var d0e=s(Hf);nre=n(d0e,"STRONG",{});var tzr=s(nre);Pze=r(tzr,"distilbert"),tzr.forEach(t),Bze=r(d0e," \u2014 "),Sk=n(d0e,"A",{href:!0});var azr=s(Sk);Ize=r(azr,"DistilBertConfig"),azr.forEach(t),Nze=r(d0e," (DistilBERT model)"),d0e.forEach(t),qze=i(y),Uf=n(y,"LI",{});var c0e=s(Uf);sre=n(c0e,"STRONG",{});var nzr=s(sre);jze=r(nzr,"dpr"),nzr.forEach(t),Dze=r(c0e," \u2014 "),Rk=n(c0e,"A",{href:!0});var szr=s(Rk);Gze=r(szr,"DPRConfig"),szr.forEach(t),Oze=r(c0e," (DPR model)"),c0e.forEach(t),Vze=i(y),Jf=n(y,"LI",{});var f0e=s(Jf);lre=n(f0e,"STRONG",{});var lzr=s(lre);Xze=r(lzr,"dpt"),lzr.forEach(t),zze=r(f0e," \u2014 "),Pk=n(f0e,"A",{href:!0});var izr=s(Pk);Wze=r(izr,"DPTConfig"),izr.forEach(t),Qze=r(f0e," (DPT model)"),f0e.forEach(t),Hze=i(y),Yf=n(y,"LI",{});var m0e=s(Yf);ire=n(m0e,"STRONG",{});var dzr=s(ire);Uze=r(dzr,"electra"),dzr.forEach(t),Jze=r(m0e," \u2014 "),Bk=n(m0e,"A",{href:!0});var czr=s(Bk);Yze=r(czr,"ElectraConfig"),czr.forEach(t),Kze=r(m0e," (ELECTRA model)"),m0e.forEach(t),Zze=i(y),Kf=n(y,"LI",{});var g0e=s(Kf);dre=n(g0e,"STRONG",{});var fzr=s(dre);eWe=r(fzr,"encoder-decoder"),fzr.forEach(t),oWe=r(g0e," \u2014 "),Ik=n(g0e,"A",{href:!0});var mzr=s(Ik);rWe=r(mzr,"EncoderDecoderConfig"),mzr.forEach(t),tWe=r(g0e," (Encoder decoder model)"),g0e.forEach(t),aWe=i(y),Zf=n(y,"LI",{});var h0e=s(Zf);cre=n(h0e,"STRONG",{});var gzr=s(cre);nWe=r(gzr,"flaubert"),gzr.forEach(t),sWe=r(h0e," \u2014 "),Nk=n(h0e,"A",{href:!0});var hzr=s(Nk);lWe=r(hzr,"FlaubertConfig"),hzr.forEach(t),iWe=r(h0e," (FlauBERT model)"),h0e.forEach(t),dWe=i(y),em=n(y,"LI",{});var p0e=s(em);fre=n(p0e,"STRONG",{});var pzr=s(fre);cWe=r(pzr,"flava"),pzr.forEach(t),fWe=r(p0e," \u2014 "),qk=n(p0e,"A",{href:!0});var _zr=s(qk);mWe=r(_zr,"FlavaConfig"),_zr.forEach(t),gWe=r(p0e," (Flava model)"),p0e.forEach(t),hWe=i(y),om=n(y,"LI",{});var _0e=s(om);mre=n(_0e,"STRONG",{});var uzr=s(mre);pWe=r(uzr,"fnet"),uzr.forEach(t),_We=r(_0e," \u2014 "),jk=n(_0e,"A",{href:!0});var bzr=s(jk);uWe=r(bzr,"FNetConfig"),bzr.forEach(t),bWe=r(_0e," (FNet model)"),_0e.forEach(t),vWe=i(y),rm=n(y,"LI",{});var u0e=s(rm);gre=n(u0e,"STRONG",{});var vzr=s(gre);FWe=r(vzr,"fsmt"),vzr.forEach(t),TWe=r(u0e," \u2014 "),Dk=n(u0e,"A",{href:!0});var Fzr=s(Dk);MWe=r(Fzr,"FSMTConfig"),Fzr.forEach(t),EWe=r(u0e," (FairSeq Machine-Translation model)"),u0e.forEach(t),CWe=i(y),tm=n(y,"LI",{});var b0e=s(tm);hre=n(b0e,"STRONG",{});var Tzr=s(hre);wWe=r(Tzr,"funnel"),Tzr.forEach(t),AWe=r(b0e," \u2014 "),Gk=n(b0e,"A",{href:!0});var Mzr=s(Gk);yWe=r(Mzr,"FunnelConfig"),Mzr.forEach(t),LWe=r(b0e," (Funnel Transformer model)"),b0e.forEach(t),xWe=i(y),am=n(y,"LI",{});var v0e=s(am);pre=n(v0e,"STRONG",{});var Ezr=s(pre);$We=r(Ezr,"glpn"),Ezr.forEach(t),kWe=r(v0e," \u2014 "),Ok=n(v0e,"A",{href:!0});var Czr=s(Ok);SWe=r(Czr,"GLPNConfig"),Czr.forEach(t),RWe=r(v0e," (GLPN model)"),v0e.forEach(t),PWe=i(y),nm=n(y,"LI",{});var F0e=s(nm);_re=n(F0e,"STRONG",{});var wzr=s(_re);BWe=r(wzr,"gpt2"),wzr.forEach(t),IWe=r(F0e," \u2014 "),Vk=n(F0e,"A",{href:!0});var Azr=s(Vk);NWe=r(Azr,"GPT2Config"),Azr.forEach(t),qWe=r(F0e," (OpenAI GPT-2 model)"),F0e.forEach(t),jWe=i(y),sm=n(y,"LI",{});var T0e=s(sm);ure=n(T0e,"STRONG",{});var yzr=s(ure);DWe=r(yzr,"gpt_neo"),yzr.forEach(t),GWe=r(T0e," \u2014 "),Xk=n(T0e,"A",{href:!0});var Lzr=s(Xk);OWe=r(Lzr,"GPTNeoConfig"),Lzr.forEach(t),VWe=r(T0e," (GPT Neo model)"),T0e.forEach(t),XWe=i(y),lm=n(y,"LI",{});var M0e=s(lm);bre=n(M0e,"STRONG",{});var xzr=s(bre);zWe=r(xzr,"gpt_neox"),xzr.forEach(t),WWe=r(M0e," \u2014 "),zk=n(M0e,"A",{href:!0});var $zr=s(zk);QWe=r($zr,"GPTNeoXConfig"),$zr.forEach(t),HWe=r(M0e," (GPT NeoX model)"),M0e.forEach(t),UWe=i(y),im=n(y,"LI",{});var E0e=s(im);vre=n(E0e,"STRONG",{});var kzr=s(vre);JWe=r(kzr,"gptj"),kzr.forEach(t),YWe=r(E0e," \u2014 "),Wk=n(E0e,"A",{href:!0});var Szr=s(Wk);KWe=r(Szr,"GPTJConfig"),Szr.forEach(t),ZWe=r(E0e," (GPT-J model)"),E0e.forEach(t),eQe=i(y),dm=n(y,"LI",{});var C0e=s(dm);Fre=n(C0e,"STRONG",{});var Rzr=s(Fre);oQe=r(Rzr,"hubert"),Rzr.forEach(t),rQe=r(C0e," \u2014 "),Qk=n(C0e,"A",{href:!0});var Pzr=s(Qk);tQe=r(Pzr,"HubertConfig"),Pzr.forEach(t),aQe=r(C0e," (Hubert model)"),C0e.forEach(t),nQe=i(y),cm=n(y,"LI",{});var w0e=s(cm);Tre=n(w0e,"STRONG",{});var Bzr=s(Tre);sQe=r(Bzr,"ibert"),Bzr.forEach(t),lQe=r(w0e," \u2014 "),Hk=n(w0e,"A",{href:!0});var Izr=s(Hk);iQe=r(Izr,"IBertConfig"),Izr.forEach(t),dQe=r(w0e," (I-BERT model)"),w0e.forEach(t),cQe=i(y),fm=n(y,"LI",{});var A0e=s(fm);Mre=n(A0e,"STRONG",{});var Nzr=s(Mre);fQe=r(Nzr,"imagegpt"),Nzr.forEach(t),mQe=r(A0e," \u2014 "),Uk=n(A0e,"A",{href:!0});var qzr=s(Uk);gQe=r(qzr,"ImageGPTConfig"),qzr.forEach(t),hQe=r(A0e," (ImageGPT model)"),A0e.forEach(t),pQe=i(y),mm=n(y,"LI",{});var y0e=s(mm);Ere=n(y0e,"STRONG",{});var jzr=s(Ere);_Qe=r(jzr,"layoutlm"),jzr.forEach(t),uQe=r(y0e," \u2014 "),Jk=n(y0e,"A",{href:!0});var Dzr=s(Jk);bQe=r(Dzr,"LayoutLMConfig"),Dzr.forEach(t),vQe=r(y0e," (LayoutLM model)"),y0e.forEach(t),FQe=i(y),gm=n(y,"LI",{});var L0e=s(gm);Cre=n(L0e,"STRONG",{});var Gzr=s(Cre);TQe=r(Gzr,"layoutlmv2"),Gzr.forEach(t),MQe=r(L0e," \u2014 "),Yk=n(L0e,"A",{href:!0});var Ozr=s(Yk);EQe=r(Ozr,"LayoutLMv2Config"),Ozr.forEach(t),CQe=r(L0e," (LayoutLMv2 model)"),L0e.forEach(t),wQe=i(y),hm=n(y,"LI",{});var x0e=s(hm);wre=n(x0e,"STRONG",{});var Vzr=s(wre);AQe=r(Vzr,"layoutlmv3"),Vzr.forEach(t),yQe=r(x0e," \u2014 "),Kk=n(x0e,"A",{href:!0});var Xzr=s(Kk);LQe=r(Xzr,"LayoutLMv3Config"),Xzr.forEach(t),xQe=r(x0e," (LayoutLMv3 model)"),x0e.forEach(t),$Qe=i(y),pm=n(y,"LI",{});var $0e=s(pm);Are=n($0e,"STRONG",{});var zzr=s(Are);kQe=r(zzr,"led"),zzr.forEach(t),SQe=r($0e," \u2014 "),Zk=n($0e,"A",{href:!0});var Wzr=s(Zk);RQe=r(Wzr,"LEDConfig"),Wzr.forEach(t),PQe=r($0e," (LED model)"),$0e.forEach(t),BQe=i(y),_m=n(y,"LI",{});var k0e=s(_m);yre=n(k0e,"STRONG",{});var Qzr=s(yre);IQe=r(Qzr,"longformer"),Qzr.forEach(t),NQe=r(k0e," \u2014 "),eS=n(k0e,"A",{href:!0});var Hzr=s(eS);qQe=r(Hzr,"LongformerConfig"),Hzr.forEach(t),jQe=r(k0e," (Longformer model)"),k0e.forEach(t),DQe=i(y),um=n(y,"LI",{});var S0e=s(um);Lre=n(S0e,"STRONG",{});var Uzr=s(Lre);GQe=r(Uzr,"luke"),Uzr.forEach(t),OQe=r(S0e," \u2014 "),oS=n(S0e,"A",{href:!0});var Jzr=s(oS);VQe=r(Jzr,"LukeConfig"),Jzr.forEach(t),XQe=r(S0e," (LUKE model)"),S0e.forEach(t),zQe=i(y),bm=n(y,"LI",{});var R0e=s(bm);xre=n(R0e,"STRONG",{});var Yzr=s(xre);WQe=r(Yzr,"lxmert"),Yzr.forEach(t),QQe=r(R0e," \u2014 "),rS=n(R0e,"A",{href:!0});var Kzr=s(rS);HQe=r(Kzr,"LxmertConfig"),Kzr.forEach(t),UQe=r(R0e," (LXMERT model)"),R0e.forEach(t),JQe=i(y),vm=n(y,"LI",{});var P0e=s(vm);$re=n(P0e,"STRONG",{});var Zzr=s($re);YQe=r(Zzr,"m2m_100"),Zzr.forEach(t),KQe=r(P0e," \u2014 "),tS=n(P0e,"A",{href:!0});var eWr=s(tS);ZQe=r(eWr,"M2M100Config"),eWr.forEach(t),eHe=r(P0e," (M2M100 model)"),P0e.forEach(t),oHe=i(y),Fm=n(y,"LI",{});var B0e=s(Fm);kre=n(B0e,"STRONG",{});var oWr=s(kre);rHe=r(oWr,"marian"),oWr.forEach(t),tHe=r(B0e," \u2014 "),aS=n(B0e,"A",{href:!0});var rWr=s(aS);aHe=r(rWr,"MarianConfig"),rWr.forEach(t),nHe=r(B0e," (Marian model)"),B0e.forEach(t),sHe=i(y),Tm=n(y,"LI",{});var I0e=s(Tm);Sre=n(I0e,"STRONG",{});var tWr=s(Sre);lHe=r(tWr,"maskformer"),tWr.forEach(t),iHe=r(I0e," \u2014 "),nS=n(I0e,"A",{href:!0});var aWr=s(nS);dHe=r(aWr,"MaskFormerConfig"),aWr.forEach(t),cHe=r(I0e," (MaskFormer model)"),I0e.forEach(t),fHe=i(y),Mm=n(y,"LI",{});var N0e=s(Mm);Rre=n(N0e,"STRONG",{});var nWr=s(Rre);mHe=r(nWr,"mbart"),nWr.forEach(t),gHe=r(N0e," \u2014 "),sS=n(N0e,"A",{href:!0});var sWr=s(sS);hHe=r(sWr,"MBartConfig"),sWr.forEach(t),pHe=r(N0e," (mBART model)"),N0e.forEach(t),_He=i(y),Em=n(y,"LI",{});var q0e=s(Em);Pre=n(q0e,"STRONG",{});var lWr=s(Pre);uHe=r(lWr,"megatron-bert"),lWr.forEach(t),bHe=r(q0e," \u2014 "),lS=n(q0e,"A",{href:!0});var iWr=s(lS);vHe=r(iWr,"MegatronBertConfig"),iWr.forEach(t),FHe=r(q0e," (MegatronBert model)"),q0e.forEach(t),THe=i(y),Cm=n(y,"LI",{});var j0e=s(Cm);Bre=n(j0e,"STRONG",{});var dWr=s(Bre);MHe=r(dWr,"mobilebert"),dWr.forEach(t),EHe=r(j0e," \u2014 "),iS=n(j0e,"A",{href:!0});var cWr=s(iS);CHe=r(cWr,"MobileBertConfig"),cWr.forEach(t),wHe=r(j0e," (MobileBERT model)"),j0e.forEach(t),AHe=i(y),wm=n(y,"LI",{});var D0e=s(wm);Ire=n(D0e,"STRONG",{});var fWr=s(Ire);yHe=r(fWr,"mpnet"),fWr.forEach(t),LHe=r(D0e," \u2014 "),dS=n(D0e,"A",{href:!0});var mWr=s(dS);xHe=r(mWr,"MPNetConfig"),mWr.forEach(t),$He=r(D0e," (MPNet model)"),D0e.forEach(t),kHe=i(y),Am=n(y,"LI",{});var G0e=s(Am);Nre=n(G0e,"STRONG",{});var gWr=s(Nre);SHe=r(gWr,"mt5"),gWr.forEach(t),RHe=r(G0e," \u2014 "),cS=n(G0e,"A",{href:!0});var hWr=s(cS);PHe=r(hWr,"MT5Config"),hWr.forEach(t),BHe=r(G0e," (mT5 model)"),G0e.forEach(t),IHe=i(y),ym=n(y,"LI",{});var O0e=s(ym);qre=n(O0e,"STRONG",{});var pWr=s(qre);NHe=r(pWr,"nystromformer"),pWr.forEach(t),qHe=r(O0e," \u2014 "),fS=n(O0e,"A",{href:!0});var _Wr=s(fS);jHe=r(_Wr,"NystromformerConfig"),_Wr.forEach(t),DHe=r(O0e," (Nystromformer model)"),O0e.forEach(t),GHe=i(y),Lm=n(y,"LI",{});var V0e=s(Lm);jre=n(V0e,"STRONG",{});var uWr=s(jre);OHe=r(uWr,"openai-gpt"),uWr.forEach(t),VHe=r(V0e," \u2014 "),mS=n(V0e,"A",{href:!0});var bWr=s(mS);XHe=r(bWr,"OpenAIGPTConfig"),bWr.forEach(t),zHe=r(V0e," (OpenAI GPT model)"),V0e.forEach(t),WHe=i(y),xm=n(y,"LI",{});var X0e=s(xm);Dre=n(X0e,"STRONG",{});var vWr=s(Dre);QHe=r(vWr,"opt"),vWr.forEach(t),HHe=r(X0e," \u2014 "),gS=n(X0e,"A",{href:!0});var FWr=s(gS);UHe=r(FWr,"OPTConfig"),FWr.forEach(t),JHe=r(X0e," (OPT model)"),X0e.forEach(t),YHe=i(y),$m=n(y,"LI",{});var z0e=s($m);Gre=n(z0e,"STRONG",{});var TWr=s(Gre);KHe=r(TWr,"pegasus"),TWr.forEach(t),ZHe=r(z0e," \u2014 "),hS=n(z0e,"A",{href:!0});var MWr=s(hS);eUe=r(MWr,"PegasusConfig"),MWr.forEach(t),oUe=r(z0e," (Pegasus model)"),z0e.forEach(t),rUe=i(y),km=n(y,"LI",{});var W0e=s(km);Ore=n(W0e,"STRONG",{});var EWr=s(Ore);tUe=r(EWr,"perceiver"),EWr.forEach(t),aUe=r(W0e," \u2014 "),pS=n(W0e,"A",{href:!0});var CWr=s(pS);nUe=r(CWr,"PerceiverConfig"),CWr.forEach(t),sUe=r(W0e," (Perceiver model)"),W0e.forEach(t),lUe=i(y),Sm=n(y,"LI",{});var Q0e=s(Sm);Vre=n(Q0e,"STRONG",{});var wWr=s(Vre);iUe=r(wWr,"plbart"),wWr.forEach(t),dUe=r(Q0e," \u2014 "),_S=n(Q0e,"A",{href:!0});var AWr=s(_S);cUe=r(AWr,"PLBartConfig"),AWr.forEach(t),fUe=r(Q0e," (PLBart model)"),Q0e.forEach(t),mUe=i(y),Rm=n(y,"LI",{});var H0e=s(Rm);Xre=n(H0e,"STRONG",{});var yWr=s(Xre);gUe=r(yWr,"poolformer"),yWr.forEach(t),hUe=r(H0e," \u2014 "),uS=n(H0e,"A",{href:!0});var LWr=s(uS);pUe=r(LWr,"PoolFormerConfig"),LWr.forEach(t),_Ue=r(H0e," (PoolFormer model)"),H0e.forEach(t),uUe=i(y),Pm=n(y,"LI",{});var U0e=s(Pm);zre=n(U0e,"STRONG",{});var xWr=s(zre);bUe=r(xWr,"prophetnet"),xWr.forEach(t),vUe=r(U0e," \u2014 "),bS=n(U0e,"A",{href:!0});var $Wr=s(bS);FUe=r($Wr,"ProphetNetConfig"),$Wr.forEach(t),TUe=r(U0e," (ProphetNet model)"),U0e.forEach(t),MUe=i(y),Bm=n(y,"LI",{});var J0e=s(Bm);Wre=n(J0e,"STRONG",{});var kWr=s(Wre);EUe=r(kWr,"qdqbert"),kWr.forEach(t),CUe=r(J0e," \u2014 "),vS=n(J0e,"A",{href:!0});var SWr=s(vS);wUe=r(SWr,"QDQBertConfig"),SWr.forEach(t),AUe=r(J0e," (QDQBert model)"),J0e.forEach(t),yUe=i(y),Im=n(y,"LI",{});var Y0e=s(Im);Qre=n(Y0e,"STRONG",{});var RWr=s(Qre);LUe=r(RWr,"rag"),RWr.forEach(t),xUe=r(Y0e," \u2014 "),FS=n(Y0e,"A",{href:!0});var PWr=s(FS);$Ue=r(PWr,"RagConfig"),PWr.forEach(t),kUe=r(Y0e," (RAG model)"),Y0e.forEach(t),SUe=i(y),Nm=n(y,"LI",{});var K0e=s(Nm);Hre=n(K0e,"STRONG",{});var BWr=s(Hre);RUe=r(BWr,"realm"),BWr.forEach(t),PUe=r(K0e," \u2014 "),TS=n(K0e,"A",{href:!0});var IWr=s(TS);BUe=r(IWr,"RealmConfig"),IWr.forEach(t),IUe=r(K0e," (Realm model)"),K0e.forEach(t),NUe=i(y),qm=n(y,"LI",{});var Z0e=s(qm);Ure=n(Z0e,"STRONG",{});var NWr=s(Ure);qUe=r(NWr,"reformer"),NWr.forEach(t),jUe=r(Z0e," \u2014 "),MS=n(Z0e,"A",{href:!0});var qWr=s(MS);DUe=r(qWr,"ReformerConfig"),qWr.forEach(t),GUe=r(Z0e," (Reformer model)"),Z0e.forEach(t),OUe=i(y),jm=n(y,"LI",{});var ewe=s(jm);Jre=n(ewe,"STRONG",{});var jWr=s(Jre);VUe=r(jWr,"regnet"),jWr.forEach(t),XUe=r(ewe," \u2014 "),ES=n(ewe,"A",{href:!0});var DWr=s(ES);zUe=r(DWr,"RegNetConfig"),DWr.forEach(t),WUe=r(ewe," (RegNet model)"),ewe.forEach(t),QUe=i(y),Dm=n(y,"LI",{});var owe=s(Dm);Yre=n(owe,"STRONG",{});var GWr=s(Yre);HUe=r(GWr,"rembert"),GWr.forEach(t),UUe=r(owe," \u2014 "),CS=n(owe,"A",{href:!0});var OWr=s(CS);JUe=r(OWr,"RemBertConfig"),OWr.forEach(t),YUe=r(owe," (RemBERT model)"),owe.forEach(t),KUe=i(y),Gm=n(y,"LI",{});var rwe=s(Gm);Kre=n(rwe,"STRONG",{});var VWr=s(Kre);ZUe=r(VWr,"resnet"),VWr.forEach(t),eJe=r(rwe," \u2014 "),wS=n(rwe,"A",{href:!0});var XWr=s(wS);oJe=r(XWr,"ResNetConfig"),XWr.forEach(t),rJe=r(rwe," (ResNet model)"),rwe.forEach(t),tJe=i(y),Om=n(y,"LI",{});var twe=s(Om);Zre=n(twe,"STRONG",{});var zWr=s(Zre);aJe=r(zWr,"retribert"),zWr.forEach(t),nJe=r(twe," \u2014 "),AS=n(twe,"A",{href:!0});var WWr=s(AS);sJe=r(WWr,"RetriBertConfig"),WWr.forEach(t),lJe=r(twe," (RetriBERT model)"),twe.forEach(t),iJe=i(y),Vm=n(y,"LI",{});var awe=s(Vm);ete=n(awe,"STRONG",{});var QWr=s(ete);dJe=r(QWr,"roberta"),QWr.forEach(t),cJe=r(awe," \u2014 "),yS=n(awe,"A",{href:!0});var HWr=s(yS);fJe=r(HWr,"RobertaConfig"),HWr.forEach(t),mJe=r(awe," (RoBERTa model)"),awe.forEach(t),gJe=i(y),Xm=n(y,"LI",{});var nwe=s(Xm);ote=n(nwe,"STRONG",{});var UWr=s(ote);hJe=r(UWr,"roformer"),UWr.forEach(t),pJe=r(nwe," \u2014 "),LS=n(nwe,"A",{href:!0});var JWr=s(LS);_Je=r(JWr,"RoFormerConfig"),JWr.forEach(t),uJe=r(nwe," (RoFormer model)"),nwe.forEach(t),bJe=i(y),zm=n(y,"LI",{});var swe=s(zm);rte=n(swe,"STRONG",{});var YWr=s(rte);vJe=r(YWr,"segformer"),YWr.forEach(t),FJe=r(swe," \u2014 "),xS=n(swe,"A",{href:!0});var KWr=s(xS);TJe=r(KWr,"SegformerConfig"),KWr.forEach(t),MJe=r(swe," (SegFormer model)"),swe.forEach(t),EJe=i(y),Wm=n(y,"LI",{});var lwe=s(Wm);tte=n(lwe,"STRONG",{});var ZWr=s(tte);CJe=r(ZWr,"sew"),ZWr.forEach(t),wJe=r(lwe," \u2014 "),$S=n(lwe,"A",{href:!0});var eQr=s($S);AJe=r(eQr,"SEWConfig"),eQr.forEach(t),yJe=r(lwe," (SEW model)"),lwe.forEach(t),LJe=i(y),Qm=n(y,"LI",{});var iwe=s(Qm);ate=n(iwe,"STRONG",{});var oQr=s(ate);xJe=r(oQr,"sew-d"),oQr.forEach(t),$Je=r(iwe," \u2014 "),kS=n(iwe,"A",{href:!0});var rQr=s(kS);kJe=r(rQr,"SEWDConfig"),rQr.forEach(t),SJe=r(iwe," (SEW-D model)"),iwe.forEach(t),RJe=i(y),Hm=n(y,"LI",{});var dwe=s(Hm);nte=n(dwe,"STRONG",{});var tQr=s(nte);PJe=r(tQr,"speech-encoder-decoder"),tQr.forEach(t),BJe=r(dwe," \u2014 "),SS=n(dwe,"A",{href:!0});var aQr=s(SS);IJe=r(aQr,"SpeechEncoderDecoderConfig"),aQr.forEach(t),NJe=r(dwe," (Speech Encoder decoder model)"),dwe.forEach(t),qJe=i(y),Um=n(y,"LI",{});var cwe=s(Um);ste=n(cwe,"STRONG",{});var nQr=s(ste);jJe=r(nQr,"speech_to_text"),nQr.forEach(t),DJe=r(cwe," \u2014 "),RS=n(cwe,"A",{href:!0});var sQr=s(RS);GJe=r(sQr,"Speech2TextConfig"),sQr.forEach(t),OJe=r(cwe," (Speech2Text model)"),cwe.forEach(t),VJe=i(y),Jm=n(y,"LI",{});var fwe=s(Jm);lte=n(fwe,"STRONG",{});var lQr=s(lte);XJe=r(lQr,"speech_to_text_2"),lQr.forEach(t),zJe=r(fwe," \u2014 "),PS=n(fwe,"A",{href:!0});var iQr=s(PS);WJe=r(iQr,"Speech2Text2Config"),iQr.forEach(t),QJe=r(fwe," (Speech2Text2 model)"),fwe.forEach(t),HJe=i(y),Ym=n(y,"LI",{});var mwe=s(Ym);ite=n(mwe,"STRONG",{});var dQr=s(ite);UJe=r(dQr,"splinter"),dQr.forEach(t),JJe=r(mwe," \u2014 "),BS=n(mwe,"A",{href:!0});var cQr=s(BS);YJe=r(cQr,"SplinterConfig"),cQr.forEach(t),KJe=r(mwe," (Splinter model)"),mwe.forEach(t),ZJe=i(y),Km=n(y,"LI",{});var gwe=s(Km);dte=n(gwe,"STRONG",{});var fQr=s(dte);eYe=r(fQr,"squeezebert"),fQr.forEach(t),oYe=r(gwe," \u2014 "),IS=n(gwe,"A",{href:!0});var mQr=s(IS);rYe=r(mQr,"SqueezeBertConfig"),mQr.forEach(t),tYe=r(gwe," (SqueezeBERT model)"),gwe.forEach(t),aYe=i(y),Zm=n(y,"LI",{});var hwe=s(Zm);cte=n(hwe,"STRONG",{});var gQr=s(cte);nYe=r(gQr,"swin"),gQr.forEach(t),sYe=r(hwe," \u2014 "),NS=n(hwe,"A",{href:!0});var hQr=s(NS);lYe=r(hQr,"SwinConfig"),hQr.forEach(t),iYe=r(hwe," (Swin model)"),hwe.forEach(t),dYe=i(y),eg=n(y,"LI",{});var pwe=s(eg);fte=n(pwe,"STRONG",{});var pQr=s(fte);cYe=r(pQr,"t5"),pQr.forEach(t),fYe=r(pwe," \u2014 "),qS=n(pwe,"A",{href:!0});var _Qr=s(qS);mYe=r(_Qr,"T5Config"),_Qr.forEach(t),gYe=r(pwe," (T5 model)"),pwe.forEach(t),hYe=i(y),og=n(y,"LI",{});var _we=s(og);mte=n(_we,"STRONG",{});var uQr=s(mte);pYe=r(uQr,"tapas"),uQr.forEach(t),_Ye=r(_we," \u2014 "),jS=n(_we,"A",{href:!0});var bQr=s(jS);uYe=r(bQr,"TapasConfig"),bQr.forEach(t),bYe=r(_we," (TAPAS model)"),_we.forEach(t),vYe=i(y),rg=n(y,"LI",{});var uwe=s(rg);gte=n(uwe,"STRONG",{});var vQr=s(gte);FYe=r(vQr,"trajectory_transformer"),vQr.forEach(t),TYe=r(uwe," \u2014 "),DS=n(uwe,"A",{href:!0});var FQr=s(DS);MYe=r(FQr,"TrajectoryTransformerConfig"),FQr.forEach(t),EYe=r(uwe," (Trajectory Transformer model)"),uwe.forEach(t),CYe=i(y),tg=n(y,"LI",{});var bwe=s(tg);hte=n(bwe,"STRONG",{});var TQr=s(hte);wYe=r(TQr,"transfo-xl"),TQr.forEach(t),AYe=r(bwe," \u2014 "),GS=n(bwe,"A",{href:!0});var MQr=s(GS);yYe=r(MQr,"TransfoXLConfig"),MQr.forEach(t),LYe=r(bwe," (Transformer-XL model)"),bwe.forEach(t),xYe=i(y),ag=n(y,"LI",{});var vwe=s(ag);pte=n(vwe,"STRONG",{});var EQr=s(pte);$Ye=r(EQr,"trocr"),EQr.forEach(t),kYe=r(vwe," \u2014 "),OS=n(vwe,"A",{href:!0});var CQr=s(OS);SYe=r(CQr,"TrOCRConfig"),CQr.forEach(t),RYe=r(vwe," (TrOCR model)"),vwe.forEach(t),PYe=i(y),ng=n(y,"LI",{});var Fwe=s(ng);_te=n(Fwe,"STRONG",{});var wQr=s(_te);BYe=r(wQr,"unispeech"),wQr.forEach(t),IYe=r(Fwe," \u2014 "),VS=n(Fwe,"A",{href:!0});var AQr=s(VS);NYe=r(AQr,"UniSpeechConfig"),AQr.forEach(t),qYe=r(Fwe," (UniSpeech model)"),Fwe.forEach(t),jYe=i(y),sg=n(y,"LI",{});var Twe=s(sg);ute=n(Twe,"STRONG",{});var yQr=s(ute);DYe=r(yQr,"unispeech-sat"),yQr.forEach(t),GYe=r(Twe," \u2014 "),XS=n(Twe,"A",{href:!0});var LQr=s(XS);OYe=r(LQr,"UniSpeechSatConfig"),LQr.forEach(t),VYe=r(Twe," (UniSpeechSat model)"),Twe.forEach(t),XYe=i(y),lg=n(y,"LI",{});var Mwe=s(lg);bte=n(Mwe,"STRONG",{});var xQr=s(bte);zYe=r(xQr,"van"),xQr.forEach(t),WYe=r(Mwe," \u2014 "),zS=n(Mwe,"A",{href:!0});var $Qr=s(zS);QYe=r($Qr,"VanConfig"),$Qr.forEach(t),HYe=r(Mwe," (VAN model)"),Mwe.forEach(t),UYe=i(y),ig=n(y,"LI",{});var Ewe=s(ig);vte=n(Ewe,"STRONG",{});var kQr=s(vte);JYe=r(kQr,"vilt"),kQr.forEach(t),YYe=r(Ewe," \u2014 "),WS=n(Ewe,"A",{href:!0});var SQr=s(WS);KYe=r(SQr,"ViltConfig"),SQr.forEach(t),ZYe=r(Ewe," (ViLT model)"),Ewe.forEach(t),eKe=i(y),dg=n(y,"LI",{});var Cwe=s(dg);Fte=n(Cwe,"STRONG",{});var RQr=s(Fte);oKe=r(RQr,"vision-encoder-decoder"),RQr.forEach(t),rKe=r(Cwe," \u2014 "),QS=n(Cwe,"A",{href:!0});var PQr=s(QS);tKe=r(PQr,"VisionEncoderDecoderConfig"),PQr.forEach(t),aKe=r(Cwe," (Vision Encoder decoder model)"),Cwe.forEach(t),nKe=i(y),cg=n(y,"LI",{});var wwe=s(cg);Tte=n(wwe,"STRONG",{});var BQr=s(Tte);sKe=r(BQr,"vision-text-dual-encoder"),BQr.forEach(t),lKe=r(wwe," \u2014 "),HS=n(wwe,"A",{href:!0});var IQr=s(HS);iKe=r(IQr,"VisionTextDualEncoderConfig"),IQr.forEach(t),dKe=r(wwe," (VisionTextDualEncoder model)"),wwe.forEach(t),cKe=i(y),fg=n(y,"LI",{});var Awe=s(fg);Mte=n(Awe,"STRONG",{});var NQr=s(Mte);fKe=r(NQr,"visual_bert"),NQr.forEach(t),mKe=r(Awe," \u2014 "),US=n(Awe,"A",{href:!0});var qQr=s(US);gKe=r(qQr,"VisualBertConfig"),qQr.forEach(t),hKe=r(Awe," (VisualBert model)"),Awe.forEach(t),pKe=i(y),mg=n(y,"LI",{});var ywe=s(mg);Ete=n(ywe,"STRONG",{});var jQr=s(Ete);_Ke=r(jQr,"vit"),jQr.forEach(t),uKe=r(ywe," \u2014 "),JS=n(ywe,"A",{href:!0});var DQr=s(JS);bKe=r(DQr,"ViTConfig"),DQr.forEach(t),vKe=r(ywe," (ViT model)"),ywe.forEach(t),FKe=i(y),gg=n(y,"LI",{});var Lwe=s(gg);Cte=n(Lwe,"STRONG",{});var GQr=s(Cte);TKe=r(GQr,"vit_mae"),GQr.forEach(t),MKe=r(Lwe," \u2014 "),YS=n(Lwe,"A",{href:!0});var OQr=s(YS);EKe=r(OQr,"ViTMAEConfig"),OQr.forEach(t),CKe=r(Lwe," (ViTMAE model)"),Lwe.forEach(t),wKe=i(y),hg=n(y,"LI",{});var xwe=s(hg);wte=n(xwe,"STRONG",{});var VQr=s(wte);AKe=r(VQr,"wav2vec2"),VQr.forEach(t),yKe=r(xwe," \u2014 "),KS=n(xwe,"A",{href:!0});var XQr=s(KS);LKe=r(XQr,"Wav2Vec2Config"),XQr.forEach(t),xKe=r(xwe," (Wav2Vec2 model)"),xwe.forEach(t),$Ke=i(y),pg=n(y,"LI",{});var $we=s(pg);Ate=n($we,"STRONG",{});var zQr=s(Ate);kKe=r(zQr,"wav2vec2-conformer"),zQr.forEach(t),SKe=r($we," \u2014 "),ZS=n($we,"A",{href:!0});var WQr=s(ZS);RKe=r(WQr,"Wav2Vec2ConformerConfig"),WQr.forEach(t),PKe=r($we," (Wav2Vec2-Conformer model)"),$we.forEach(t),BKe=i(y),_g=n(y,"LI",{});var kwe=s(_g);yte=n(kwe,"STRONG",{});var QQr=s(yte);IKe=r(QQr,"wavlm"),QQr.forEach(t),NKe=r(kwe," \u2014 "),eR=n(kwe,"A",{href:!0});var HQr=s(eR);qKe=r(HQr,"WavLMConfig"),HQr.forEach(t),jKe=r(kwe," (WavLM model)"),kwe.forEach(t),DKe=i(y),ug=n(y,"LI",{});var Swe=s(ug);Lte=n(Swe,"STRONG",{});var UQr=s(Lte);GKe=r(UQr,"xglm"),UQr.forEach(t),OKe=r(Swe," \u2014 "),oR=n(Swe,"A",{href:!0});var JQr=s(oR);VKe=r(JQr,"XGLMConfig"),JQr.forEach(t),XKe=r(Swe," (XGLM model)"),Swe.forEach(t),zKe=i(y),bg=n(y,"LI",{});var Rwe=s(bg);xte=n(Rwe,"STRONG",{});var YQr=s(xte);WKe=r(YQr,"xlm"),YQr.forEach(t),QKe=r(Rwe," \u2014 "),rR=n(Rwe,"A",{href:!0});var KQr=s(rR);HKe=r(KQr,"XLMConfig"),KQr.forEach(t),UKe=r(Rwe," (XLM model)"),Rwe.forEach(t),JKe=i(y),vg=n(y,"LI",{});var Pwe=s(vg);$te=n(Pwe,"STRONG",{});var ZQr=s($te);YKe=r(ZQr,"xlm-prophetnet"),ZQr.forEach(t),KKe=r(Pwe," \u2014 "),tR=n(Pwe,"A",{href:!0});var eHr=s(tR);ZKe=r(eHr,"XLMProphetNetConfig"),eHr.forEach(t),eZe=r(Pwe," (XLMProphetNet model)"),Pwe.forEach(t),oZe=i(y),Fg=n(y,"LI",{});var Bwe=s(Fg);kte=n(Bwe,"STRONG",{});var oHr=s(kte);rZe=r(oHr,"xlm-roberta"),oHr.forEach(t),tZe=r(Bwe," \u2014 "),aR=n(Bwe,"A",{href:!0});var rHr=s(aR);aZe=r(rHr,"XLMRobertaConfig"),rHr.forEach(t),nZe=r(Bwe," (XLM-RoBERTa model)"),Bwe.forEach(t),sZe=i(y),Tg=n(y,"LI",{});var Iwe=s(Tg);Ste=n(Iwe,"STRONG",{});var tHr=s(Ste);lZe=r(tHr,"xlm-roberta-xl"),tHr.forEach(t),iZe=r(Iwe," \u2014 "),nR=n(Iwe,"A",{href:!0});var aHr=s(nR);dZe=r(aHr,"XLMRobertaXLConfig"),aHr.forEach(t),cZe=r(Iwe," (XLM-RoBERTa-XL model)"),Iwe.forEach(t),fZe=i(y),Mg=n(y,"LI",{});var Nwe=s(Mg);Rte=n(Nwe,"STRONG",{});var nHr=s(Rte);mZe=r(nHr,"xlnet"),nHr.forEach(t),gZe=r(Nwe," \u2014 "),sR=n(Nwe,"A",{href:!0});var sHr=s(sR);hZe=r(sHr,"XLNetConfig"),sHr.forEach(t),pZe=r(Nwe," (XLNet model)"),Nwe.forEach(t),_Ze=i(y),Eg=n(y,"LI",{});var qwe=s(Eg);Pte=n(qwe,"STRONG",{});var lHr=s(Pte);uZe=r(lHr,"yolos"),lHr.forEach(t),bZe=r(qwe," \u2014 "),lR=n(qwe,"A",{href:!0});var iHr=s(lR);vZe=r(iHr,"YolosConfig"),iHr.forEach(t),FZe=r(qwe," (YOLOS model)"),qwe.forEach(t),TZe=i(y),Cg=n(y,"LI",{});var jwe=s(Cg);Bte=n(jwe,"STRONG",{});var dHr=s(Bte);MZe=r(dHr,"yoso"),dHr.forEach(t),EZe=r(jwe," \u2014 "),iR=n(jwe,"A",{href:!0});var cHr=s(iR);CZe=r(cHr,"YosoConfig"),cHr.forEach(t),wZe=r(jwe," (YOSO model)"),jwe.forEach(t),y.forEach(t),AZe=i(ot),T(wg.$$.fragment,ot),ot.forEach(t),yZe=i(et),Ag=n(et,"DIV",{class:!0});var BDe=s(Ag);T(OA.$$.fragment,BDe),LZe=i(BDe),Ite=n(BDe,"P",{});var fHr=s(Ite);xZe=r(fHr,"Register a new configuration for this class."),fHr.forEach(t),BDe.forEach(t),et.forEach(t),qqe=i(f),Mi=n(f,"H2",{class:!0});var IDe=s(Mi);yg=n(IDe,"A",{id:!0,class:!0,href:!0});var mHr=s(yg);Nte=n(mHr,"SPAN",{});var gHr=s(Nte);T(VA.$$.fragment,gHr),gHr.forEach(t),mHr.forEach(t),$Ze=i(IDe),qte=n(IDe,"SPAN",{});var hHr=s(qte);kZe=r(hHr,"AutoTokenizer"),hHr.forEach(t),IDe.forEach(t),jqe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(XA.$$.fragment,qs),SZe=i(qs),zA=n(qs,"P",{});var NDe=s(zA);RZe=r(NDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),dR=n(NDe,"A",{href:!0});var pHr=s(dR);PZe=r(pHr,"AutoTokenizer.from_pretrained()"),pHr.forEach(t),BZe=r(NDe," class method."),NDe.forEach(t),IZe=i(qs),WA=n(qs,"P",{});var qDe=s(WA);NZe=r(qDe,"This class cannot be instantiated directly using "),jte=n(qDe,"CODE",{});var _Hr=s(jte);qZe=r(_Hr,"__init__()"),_Hr.forEach(t),jZe=r(qDe," (throws an error)."),qDe.forEach(t),DZe=i(qs),Cr=n(qs,"DIV",{class:!0});var js=s(Cr);T(QA.$$.fragment,js),GZe=i(js),Dte=n(js,"P",{});var uHr=s(Dte);OZe=r(uHr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),uHr.forEach(t),VZe=i(js),Aa=n(js,"P",{});var Nw=s(Aa);XZe=r(Nw,"The tokenizer class to instantiate is selected based on the "),Gte=n(Nw,"CODE",{});var bHr=s(Gte);zZe=r(bHr,"model_type"),bHr.forEach(t),WZe=r(Nw,` property of the config object (either
passed as an argument or loaded from `),Ote=n(Nw,"CODE",{});var vHr=s(Ote);QZe=r(vHr,"pretrained_model_name_or_path"),vHr.forEach(t),HZe=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vte=n(Nw,"CODE",{});var FHr=s(Vte);UZe=r(FHr,"pretrained_model_name_or_path"),FHr.forEach(t),JZe=r(Nw,":"),Nw.forEach(t),YZe=i(js),k=n(js,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Hx=s(Sn);Xte=n(Hx,"STRONG",{});var THr=s(Xte);KZe=r(THr,"albert"),THr.forEach(t),ZZe=r(Hx," \u2014 "),cR=n(Hx,"A",{href:!0});var MHr=s(cR);eeo=r(MHr,"AlbertTokenizer"),MHr.forEach(t),oeo=r(Hx," or "),fR=n(Hx,"A",{href:!0});var EHr=s(fR);reo=r(EHr,"AlbertTokenizerFast"),EHr.forEach(t),teo=r(Hx," (ALBERT model)"),Hx.forEach(t),aeo=i(S),Rn=n(S,"LI",{});var Ux=s(Rn);zte=n(Ux,"STRONG",{});var CHr=s(zte);neo=r(CHr,"bart"),CHr.forEach(t),seo=r(Ux," \u2014 "),mR=n(Ux,"A",{href:!0});var wHr=s(mR);leo=r(wHr,"BartTokenizer"),wHr.forEach(t),ieo=r(Ux," or "),gR=n(Ux,"A",{href:!0});var AHr=s(gR);deo=r(AHr,"BartTokenizerFast"),AHr.forEach(t),ceo=r(Ux," (BART model)"),Ux.forEach(t),feo=i(S),Pn=n(S,"LI",{});var Jx=s(Pn);Wte=n(Jx,"STRONG",{});var yHr=s(Wte);meo=r(yHr,"barthez"),yHr.forEach(t),geo=r(Jx," \u2014 "),hR=n(Jx,"A",{href:!0});var LHr=s(hR);heo=r(LHr,"BarthezTokenizer"),LHr.forEach(t),peo=r(Jx," or "),pR=n(Jx,"A",{href:!0});var xHr=s(pR);_eo=r(xHr,"BarthezTokenizerFast"),xHr.forEach(t),ueo=r(Jx," (BARThez model)"),Jx.forEach(t),beo=i(S),Lg=n(S,"LI",{});var Dwe=s(Lg);Qte=n(Dwe,"STRONG",{});var $Hr=s(Qte);veo=r($Hr,"bartpho"),$Hr.forEach(t),Feo=r(Dwe," \u2014 "),_R=n(Dwe,"A",{href:!0});var kHr=s(_R);Teo=r(kHr,"BartphoTokenizer"),kHr.forEach(t),Meo=r(Dwe," (BARTpho model)"),Dwe.forEach(t),Eeo=i(S),Bn=n(S,"LI",{});var Yx=s(Bn);Hte=n(Yx,"STRONG",{});var SHr=s(Hte);Ceo=r(SHr,"bert"),SHr.forEach(t),weo=r(Yx," \u2014 "),uR=n(Yx,"A",{href:!0});var RHr=s(uR);Aeo=r(RHr,"BertTokenizer"),RHr.forEach(t),yeo=r(Yx," or "),bR=n(Yx,"A",{href:!0});var PHr=s(bR);Leo=r(PHr,"BertTokenizerFast"),PHr.forEach(t),xeo=r(Yx," (BERT model)"),Yx.forEach(t),$eo=i(S),xg=n(S,"LI",{});var Gwe=s(xg);Ute=n(Gwe,"STRONG",{});var BHr=s(Ute);keo=r(BHr,"bert-generation"),BHr.forEach(t),Seo=r(Gwe," \u2014 "),vR=n(Gwe,"A",{href:!0});var IHr=s(vR);Reo=r(IHr,"BertGenerationTokenizer"),IHr.forEach(t),Peo=r(Gwe," (Bert Generation model)"),Gwe.forEach(t),Beo=i(S),$g=n(S,"LI",{});var Owe=s($g);Jte=n(Owe,"STRONG",{});var NHr=s(Jte);Ieo=r(NHr,"bert-japanese"),NHr.forEach(t),Neo=r(Owe," \u2014 "),FR=n(Owe,"A",{href:!0});var qHr=s(FR);qeo=r(qHr,"BertJapaneseTokenizer"),qHr.forEach(t),jeo=r(Owe," (BertJapanese model)"),Owe.forEach(t),Deo=i(S),kg=n(S,"LI",{});var Vwe=s(kg);Yte=n(Vwe,"STRONG",{});var jHr=s(Yte);Geo=r(jHr,"bertweet"),jHr.forEach(t),Oeo=r(Vwe," \u2014 "),TR=n(Vwe,"A",{href:!0});var DHr=s(TR);Veo=r(DHr,"BertweetTokenizer"),DHr.forEach(t),Xeo=r(Vwe," (Bertweet model)"),Vwe.forEach(t),zeo=i(S),In=n(S,"LI",{});var Kx=s(In);Kte=n(Kx,"STRONG",{});var GHr=s(Kte);Weo=r(GHr,"big_bird"),GHr.forEach(t),Qeo=r(Kx," \u2014 "),MR=n(Kx,"A",{href:!0});var OHr=s(MR);Heo=r(OHr,"BigBirdTokenizer"),OHr.forEach(t),Ueo=r(Kx," or "),ER=n(Kx,"A",{href:!0});var VHr=s(ER);Jeo=r(VHr,"BigBirdTokenizerFast"),VHr.forEach(t),Yeo=r(Kx," (BigBird model)"),Kx.forEach(t),Keo=i(S),Nn=n(S,"LI",{});var Zx=s(Nn);Zte=n(Zx,"STRONG",{});var XHr=s(Zte);Zeo=r(XHr,"bigbird_pegasus"),XHr.forEach(t),eoo=r(Zx," \u2014 "),CR=n(Zx,"A",{href:!0});var zHr=s(CR);ooo=r(zHr,"PegasusTokenizer"),zHr.forEach(t),roo=r(Zx," or "),wR=n(Zx,"A",{href:!0});var WHr=s(wR);too=r(WHr,"PegasusTokenizerFast"),WHr.forEach(t),aoo=r(Zx," (BigBirdPegasus model)"),Zx.forEach(t),noo=i(S),qn=n(S,"LI",{});var e$=s(qn);eae=n(e$,"STRONG",{});var QHr=s(eae);soo=r(QHr,"blenderbot"),QHr.forEach(t),loo=r(e$," \u2014 "),AR=n(e$,"A",{href:!0});var HHr=s(AR);ioo=r(HHr,"BlenderbotTokenizer"),HHr.forEach(t),doo=r(e$," or "),yR=n(e$,"A",{href:!0});var UHr=s(yR);coo=r(UHr,"BlenderbotTokenizerFast"),UHr.forEach(t),foo=r(e$," (Blenderbot model)"),e$.forEach(t),moo=i(S),Sg=n(S,"LI",{});var Xwe=s(Sg);oae=n(Xwe,"STRONG",{});var JHr=s(oae);goo=r(JHr,"blenderbot-small"),JHr.forEach(t),hoo=r(Xwe," \u2014 "),LR=n(Xwe,"A",{href:!0});var YHr=s(LR);poo=r(YHr,"BlenderbotSmallTokenizer"),YHr.forEach(t),_oo=r(Xwe," (BlenderbotSmall model)"),Xwe.forEach(t),uoo=i(S),Rg=n(S,"LI",{});var zwe=s(Rg);rae=n(zwe,"STRONG",{});var KHr=s(rae);boo=r(KHr,"byt5"),KHr.forEach(t),voo=r(zwe," \u2014 "),xR=n(zwe,"A",{href:!0});var ZHr=s(xR);Foo=r(ZHr,"ByT5Tokenizer"),ZHr.forEach(t),Too=r(zwe," (ByT5 model)"),zwe.forEach(t),Moo=i(S),jn=n(S,"LI",{});var o$=s(jn);tae=n(o$,"STRONG",{});var eUr=s(tae);Eoo=r(eUr,"camembert"),eUr.forEach(t),Coo=r(o$," \u2014 "),$R=n(o$,"A",{href:!0});var oUr=s($R);woo=r(oUr,"CamembertTokenizer"),oUr.forEach(t),Aoo=r(o$," or "),kR=n(o$,"A",{href:!0});var rUr=s(kR);yoo=r(rUr,"CamembertTokenizerFast"),rUr.forEach(t),Loo=r(o$," (CamemBERT model)"),o$.forEach(t),xoo=i(S),Pg=n(S,"LI",{});var Wwe=s(Pg);aae=n(Wwe,"STRONG",{});var tUr=s(aae);$oo=r(tUr,"canine"),tUr.forEach(t),koo=r(Wwe," \u2014 "),SR=n(Wwe,"A",{href:!0});var aUr=s(SR);Soo=r(aUr,"CanineTokenizer"),aUr.forEach(t),Roo=r(Wwe," (Canine model)"),Wwe.forEach(t),Poo=i(S),Dn=n(S,"LI",{});var r$=s(Dn);nae=n(r$,"STRONG",{});var nUr=s(nae);Boo=r(nUr,"clip"),nUr.forEach(t),Ioo=r(r$," \u2014 "),RR=n(r$,"A",{href:!0});var sUr=s(RR);Noo=r(sUr,"CLIPTokenizer"),sUr.forEach(t),qoo=r(r$," or "),PR=n(r$,"A",{href:!0});var lUr=s(PR);joo=r(lUr,"CLIPTokenizerFast"),lUr.forEach(t),Doo=r(r$," (CLIP model)"),r$.forEach(t),Goo=i(S),Gn=n(S,"LI",{});var t$=s(Gn);sae=n(t$,"STRONG",{});var iUr=s(sae);Ooo=r(iUr,"codegen"),iUr.forEach(t),Voo=r(t$," \u2014 "),BR=n(t$,"A",{href:!0});var dUr=s(BR);Xoo=r(dUr,"GPT2Tokenizer"),dUr.forEach(t),zoo=r(t$," or "),IR=n(t$,"A",{href:!0});var cUr=s(IR);Woo=r(cUr,"GPT2TokenizerFast"),cUr.forEach(t),Qoo=r(t$," (CodeGen model)"),t$.forEach(t),Hoo=i(S),On=n(S,"LI",{});var a$=s(On);lae=n(a$,"STRONG",{});var fUr=s(lae);Uoo=r(fUr,"convbert"),fUr.forEach(t),Joo=r(a$," \u2014 "),NR=n(a$,"A",{href:!0});var mUr=s(NR);Yoo=r(mUr,"ConvBertTokenizer"),mUr.forEach(t),Koo=r(a$," or "),qR=n(a$,"A",{href:!0});var gUr=s(qR);Zoo=r(gUr,"ConvBertTokenizerFast"),gUr.forEach(t),ero=r(a$," (ConvBERT model)"),a$.forEach(t),oro=i(S),Vn=n(S,"LI",{});var n$=s(Vn);iae=n(n$,"STRONG",{});var hUr=s(iae);rro=r(hUr,"cpm"),hUr.forEach(t),tro=r(n$," \u2014 "),jR=n(n$,"A",{href:!0});var pUr=s(jR);aro=r(pUr,"CpmTokenizer"),pUr.forEach(t),nro=r(n$," or "),DR=n(n$,"A",{href:!0});var _Ur=s(DR);sro=r(_Ur,"CpmTokenizerFast"),_Ur.forEach(t),lro=r(n$," (CPM model)"),n$.forEach(t),iro=i(S),Bg=n(S,"LI",{});var Qwe=s(Bg);dae=n(Qwe,"STRONG",{});var uUr=s(dae);dro=r(uUr,"ctrl"),uUr.forEach(t),cro=r(Qwe," \u2014 "),GR=n(Qwe,"A",{href:!0});var bUr=s(GR);fro=r(bUr,"CTRLTokenizer"),bUr.forEach(t),mro=r(Qwe," (CTRL model)"),Qwe.forEach(t),gro=i(S),Xn=n(S,"LI",{});var s$=s(Xn);cae=n(s$,"STRONG",{});var vUr=s(cae);hro=r(vUr,"data2vec-text"),vUr.forEach(t),pro=r(s$," \u2014 "),OR=n(s$,"A",{href:!0});var FUr=s(OR);_ro=r(FUr,"RobertaTokenizer"),FUr.forEach(t),uro=r(s$," or "),VR=n(s$,"A",{href:!0});var TUr=s(VR);bro=r(TUr,"RobertaTokenizerFast"),TUr.forEach(t),vro=r(s$," (Data2VecText model)"),s$.forEach(t),Fro=i(S),zn=n(S,"LI",{});var l$=s(zn);fae=n(l$,"STRONG",{});var MUr=s(fae);Tro=r(MUr,"deberta"),MUr.forEach(t),Mro=r(l$," \u2014 "),XR=n(l$,"A",{href:!0});var EUr=s(XR);Ero=r(EUr,"DebertaTokenizer"),EUr.forEach(t),Cro=r(l$," or "),zR=n(l$,"A",{href:!0});var CUr=s(zR);wro=r(CUr,"DebertaTokenizerFast"),CUr.forEach(t),Aro=r(l$," (DeBERTa model)"),l$.forEach(t),yro=i(S),Wn=n(S,"LI",{});var i$=s(Wn);mae=n(i$,"STRONG",{});var wUr=s(mae);Lro=r(wUr,"deberta-v2"),wUr.forEach(t),xro=r(i$," \u2014 "),WR=n(i$,"A",{href:!0});var AUr=s(WR);$ro=r(AUr,"DebertaV2Tokenizer"),AUr.forEach(t),kro=r(i$," or "),QR=n(i$,"A",{href:!0});var yUr=s(QR);Sro=r(yUr,"DebertaV2TokenizerFast"),yUr.forEach(t),Rro=r(i$," (DeBERTa-v2 model)"),i$.forEach(t),Pro=i(S),Qn=n(S,"LI",{});var d$=s(Qn);gae=n(d$,"STRONG",{});var LUr=s(gae);Bro=r(LUr,"distilbert"),LUr.forEach(t),Iro=r(d$," \u2014 "),HR=n(d$,"A",{href:!0});var xUr=s(HR);Nro=r(xUr,"DistilBertTokenizer"),xUr.forEach(t),qro=r(d$," or "),UR=n(d$,"A",{href:!0});var $Ur=s(UR);jro=r($Ur,"DistilBertTokenizerFast"),$Ur.forEach(t),Dro=r(d$," (DistilBERT model)"),d$.forEach(t),Gro=i(S),Hn=n(S,"LI",{});var c$=s(Hn);hae=n(c$,"STRONG",{});var kUr=s(hae);Oro=r(kUr,"dpr"),kUr.forEach(t),Vro=r(c$," \u2014 "),JR=n(c$,"A",{href:!0});var SUr=s(JR);Xro=r(SUr,"DPRQuestionEncoderTokenizer"),SUr.forEach(t),zro=r(c$," or "),YR=n(c$,"A",{href:!0});var RUr=s(YR);Wro=r(RUr,"DPRQuestionEncoderTokenizerFast"),RUr.forEach(t),Qro=r(c$," (DPR model)"),c$.forEach(t),Hro=i(S),Un=n(S,"LI",{});var f$=s(Un);pae=n(f$,"STRONG",{});var PUr=s(pae);Uro=r(PUr,"electra"),PUr.forEach(t),Jro=r(f$," \u2014 "),KR=n(f$,"A",{href:!0});var BUr=s(KR);Yro=r(BUr,"ElectraTokenizer"),BUr.forEach(t),Kro=r(f$," or "),ZR=n(f$,"A",{href:!0});var IUr=s(ZR);Zro=r(IUr,"ElectraTokenizerFast"),IUr.forEach(t),eto=r(f$," (ELECTRA model)"),f$.forEach(t),oto=i(S),Ig=n(S,"LI",{});var Hwe=s(Ig);_ae=n(Hwe,"STRONG",{});var NUr=s(_ae);rto=r(NUr,"flaubert"),NUr.forEach(t),tto=r(Hwe," \u2014 "),eP=n(Hwe,"A",{href:!0});var qUr=s(eP);ato=r(qUr,"FlaubertTokenizer"),qUr.forEach(t),nto=r(Hwe," (FlauBERT model)"),Hwe.forEach(t),sto=i(S),Jn=n(S,"LI",{});var m$=s(Jn);uae=n(m$,"STRONG",{});var jUr=s(uae);lto=r(jUr,"fnet"),jUr.forEach(t),ito=r(m$," \u2014 "),oP=n(m$,"A",{href:!0});var DUr=s(oP);dto=r(DUr,"FNetTokenizer"),DUr.forEach(t),cto=r(m$," or "),rP=n(m$,"A",{href:!0});var GUr=s(rP);fto=r(GUr,"FNetTokenizerFast"),GUr.forEach(t),mto=r(m$," (FNet model)"),m$.forEach(t),gto=i(S),Ng=n(S,"LI",{});var Uwe=s(Ng);bae=n(Uwe,"STRONG",{});var OUr=s(bae);hto=r(OUr,"fsmt"),OUr.forEach(t),pto=r(Uwe," \u2014 "),tP=n(Uwe,"A",{href:!0});var VUr=s(tP);_to=r(VUr,"FSMTTokenizer"),VUr.forEach(t),uto=r(Uwe," (FairSeq Machine-Translation model)"),Uwe.forEach(t),bto=i(S),Yn=n(S,"LI",{});var g$=s(Yn);vae=n(g$,"STRONG",{});var XUr=s(vae);vto=r(XUr,"funnel"),XUr.forEach(t),Fto=r(g$," \u2014 "),aP=n(g$,"A",{href:!0});var zUr=s(aP);Tto=r(zUr,"FunnelTokenizer"),zUr.forEach(t),Mto=r(g$," or "),nP=n(g$,"A",{href:!0});var WUr=s(nP);Eto=r(WUr,"FunnelTokenizerFast"),WUr.forEach(t),Cto=r(g$," (Funnel Transformer model)"),g$.forEach(t),wto=i(S),Kn=n(S,"LI",{});var h$=s(Kn);Fae=n(h$,"STRONG",{});var QUr=s(Fae);Ato=r(QUr,"gpt2"),QUr.forEach(t),yto=r(h$," \u2014 "),sP=n(h$,"A",{href:!0});var HUr=s(sP);Lto=r(HUr,"GPT2Tokenizer"),HUr.forEach(t),xto=r(h$," or "),lP=n(h$,"A",{href:!0});var UUr=s(lP);$to=r(UUr,"GPT2TokenizerFast"),UUr.forEach(t),kto=r(h$," (OpenAI GPT-2 model)"),h$.forEach(t),Sto=i(S),Zn=n(S,"LI",{});var p$=s(Zn);Tae=n(p$,"STRONG",{});var JUr=s(Tae);Rto=r(JUr,"gpt_neo"),JUr.forEach(t),Pto=r(p$," \u2014 "),iP=n(p$,"A",{href:!0});var YUr=s(iP);Bto=r(YUr,"GPT2Tokenizer"),YUr.forEach(t),Ito=r(p$," or "),dP=n(p$,"A",{href:!0});var KUr=s(dP);Nto=r(KUr,"GPT2TokenizerFast"),KUr.forEach(t),qto=r(p$," (GPT Neo model)"),p$.forEach(t),jto=i(S),qg=n(S,"LI",{});var Jwe=s(qg);Mae=n(Jwe,"STRONG",{});var ZUr=s(Mae);Dto=r(ZUr,"gpt_neox"),ZUr.forEach(t),Gto=r(Jwe," \u2014 "),cP=n(Jwe,"A",{href:!0});var eJr=s(cP);Oto=r(eJr,"GPTNeoXTokenizerFast"),eJr.forEach(t),Vto=r(Jwe," (GPT NeoX model)"),Jwe.forEach(t),Xto=i(S),es=n(S,"LI",{});var _$=s(es);Eae=n(_$,"STRONG",{});var oJr=s(Eae);zto=r(oJr,"gptj"),oJr.forEach(t),Wto=r(_$," \u2014 "),fP=n(_$,"A",{href:!0});var rJr=s(fP);Qto=r(rJr,"GPT2Tokenizer"),rJr.forEach(t),Hto=r(_$," or "),mP=n(_$,"A",{href:!0});var tJr=s(mP);Uto=r(tJr,"GPT2TokenizerFast"),tJr.forEach(t),Jto=r(_$," (GPT-J model)"),_$.forEach(t),Yto=i(S),os=n(S,"LI",{});var u$=s(os);Cae=n(u$,"STRONG",{});var aJr=s(Cae);Kto=r(aJr,"herbert"),aJr.forEach(t),Zto=r(u$," \u2014 "),gP=n(u$,"A",{href:!0});var nJr=s(gP);eao=r(nJr,"HerbertTokenizer"),nJr.forEach(t),oao=r(u$," or "),hP=n(u$,"A",{href:!0});var sJr=s(hP);rao=r(sJr,"HerbertTokenizerFast"),sJr.forEach(t),tao=r(u$," (HerBERT model)"),u$.forEach(t),aao=i(S),jg=n(S,"LI",{});var Ywe=s(jg);wae=n(Ywe,"STRONG",{});var lJr=s(wae);nao=r(lJr,"hubert"),lJr.forEach(t),sao=r(Ywe," \u2014 "),pP=n(Ywe,"A",{href:!0});var iJr=s(pP);lao=r(iJr,"Wav2Vec2CTCTokenizer"),iJr.forEach(t),iao=r(Ywe," (Hubert model)"),Ywe.forEach(t),dao=i(S),rs=n(S,"LI",{});var b$=s(rs);Aae=n(b$,"STRONG",{});var dJr=s(Aae);cao=r(dJr,"ibert"),dJr.forEach(t),fao=r(b$," \u2014 "),_P=n(b$,"A",{href:!0});var cJr=s(_P);mao=r(cJr,"RobertaTokenizer"),cJr.forEach(t),gao=r(b$," or "),uP=n(b$,"A",{href:!0});var fJr=s(uP);hao=r(fJr,"RobertaTokenizerFast"),fJr.forEach(t),pao=r(b$," (I-BERT model)"),b$.forEach(t),_ao=i(S),ts=n(S,"LI",{});var v$=s(ts);yae=n(v$,"STRONG",{});var mJr=s(yae);uao=r(mJr,"layoutlm"),mJr.forEach(t),bao=r(v$," \u2014 "),bP=n(v$,"A",{href:!0});var gJr=s(bP);vao=r(gJr,"LayoutLMTokenizer"),gJr.forEach(t),Fao=r(v$," or "),vP=n(v$,"A",{href:!0});var hJr=s(vP);Tao=r(hJr,"LayoutLMTokenizerFast"),hJr.forEach(t),Mao=r(v$," (LayoutLM model)"),v$.forEach(t),Eao=i(S),as=n(S,"LI",{});var F$=s(as);Lae=n(F$,"STRONG",{});var pJr=s(Lae);Cao=r(pJr,"layoutlmv2"),pJr.forEach(t),wao=r(F$," \u2014 "),FP=n(F$,"A",{href:!0});var _Jr=s(FP);Aao=r(_Jr,"LayoutLMv2Tokenizer"),_Jr.forEach(t),yao=r(F$," or "),TP=n(F$,"A",{href:!0});var uJr=s(TP);Lao=r(uJr,"LayoutLMv2TokenizerFast"),uJr.forEach(t),xao=r(F$," (LayoutLMv2 model)"),F$.forEach(t),$ao=i(S),ns=n(S,"LI",{});var T$=s(ns);xae=n(T$,"STRONG",{});var bJr=s(xae);kao=r(bJr,"layoutlmv3"),bJr.forEach(t),Sao=r(T$," \u2014 "),MP=n(T$,"A",{href:!0});var vJr=s(MP);Rao=r(vJr,"LayoutLMv3Tokenizer"),vJr.forEach(t),Pao=r(T$," or "),EP=n(T$,"A",{href:!0});var FJr=s(EP);Bao=r(FJr,"LayoutLMv3TokenizerFast"),FJr.forEach(t),Iao=r(T$," (LayoutLMv3 model)"),T$.forEach(t),Nao=i(S),ss=n(S,"LI",{});var M$=s(ss);$ae=n(M$,"STRONG",{});var TJr=s($ae);qao=r(TJr,"layoutxlm"),TJr.forEach(t),jao=r(M$," \u2014 "),CP=n(M$,"A",{href:!0});var MJr=s(CP);Dao=r(MJr,"LayoutXLMTokenizer"),MJr.forEach(t),Gao=r(M$," or "),wP=n(M$,"A",{href:!0});var EJr=s(wP);Oao=r(EJr,"LayoutXLMTokenizerFast"),EJr.forEach(t),Vao=r(M$," (LayoutXLM model)"),M$.forEach(t),Xao=i(S),ls=n(S,"LI",{});var E$=s(ls);kae=n(E$,"STRONG",{});var CJr=s(kae);zao=r(CJr,"led"),CJr.forEach(t),Wao=r(E$," \u2014 "),AP=n(E$,"A",{href:!0});var wJr=s(AP);Qao=r(wJr,"LEDTokenizer"),wJr.forEach(t),Hao=r(E$," or "),yP=n(E$,"A",{href:!0});var AJr=s(yP);Uao=r(AJr,"LEDTokenizerFast"),AJr.forEach(t),Jao=r(E$," (LED model)"),E$.forEach(t),Yao=i(S),is=n(S,"LI",{});var C$=s(is);Sae=n(C$,"STRONG",{});var yJr=s(Sae);Kao=r(yJr,"longformer"),yJr.forEach(t),Zao=r(C$," \u2014 "),LP=n(C$,"A",{href:!0});var LJr=s(LP);eno=r(LJr,"LongformerTokenizer"),LJr.forEach(t),ono=r(C$," or "),xP=n(C$,"A",{href:!0});var xJr=s(xP);rno=r(xJr,"LongformerTokenizerFast"),xJr.forEach(t),tno=r(C$," (Longformer model)"),C$.forEach(t),ano=i(S),Dg=n(S,"LI",{});var Kwe=s(Dg);Rae=n(Kwe,"STRONG",{});var $Jr=s(Rae);nno=r($Jr,"luke"),$Jr.forEach(t),sno=r(Kwe," \u2014 "),$P=n(Kwe,"A",{href:!0});var kJr=s($P);lno=r(kJr,"LukeTokenizer"),kJr.forEach(t),ino=r(Kwe," (LUKE model)"),Kwe.forEach(t),dno=i(S),ds=n(S,"LI",{});var w$=s(ds);Pae=n(w$,"STRONG",{});var SJr=s(Pae);cno=r(SJr,"lxmert"),SJr.forEach(t),fno=r(w$," \u2014 "),kP=n(w$,"A",{href:!0});var RJr=s(kP);mno=r(RJr,"LxmertTokenizer"),RJr.forEach(t),gno=r(w$," or "),SP=n(w$,"A",{href:!0});var PJr=s(SP);hno=r(PJr,"LxmertTokenizerFast"),PJr.forEach(t),pno=r(w$," (LXMERT model)"),w$.forEach(t),_no=i(S),Gg=n(S,"LI",{});var Zwe=s(Gg);Bae=n(Zwe,"STRONG",{});var BJr=s(Bae);uno=r(BJr,"m2m_100"),BJr.forEach(t),bno=r(Zwe," \u2014 "),RP=n(Zwe,"A",{href:!0});var IJr=s(RP);vno=r(IJr,"M2M100Tokenizer"),IJr.forEach(t),Fno=r(Zwe," (M2M100 model)"),Zwe.forEach(t),Tno=i(S),Og=n(S,"LI",{});var e6e=s(Og);Iae=n(e6e,"STRONG",{});var NJr=s(Iae);Mno=r(NJr,"marian"),NJr.forEach(t),Eno=r(e6e," \u2014 "),PP=n(e6e,"A",{href:!0});var qJr=s(PP);Cno=r(qJr,"MarianTokenizer"),qJr.forEach(t),wno=r(e6e," (Marian model)"),e6e.forEach(t),Ano=i(S),cs=n(S,"LI",{});var A$=s(cs);Nae=n(A$,"STRONG",{});var jJr=s(Nae);yno=r(jJr,"mbart"),jJr.forEach(t),Lno=r(A$," \u2014 "),BP=n(A$,"A",{href:!0});var DJr=s(BP);xno=r(DJr,"MBartTokenizer"),DJr.forEach(t),$no=r(A$," or "),IP=n(A$,"A",{href:!0});var GJr=s(IP);kno=r(GJr,"MBartTokenizerFast"),GJr.forEach(t),Sno=r(A$," (mBART model)"),A$.forEach(t),Rno=i(S),fs=n(S,"LI",{});var y$=s(fs);qae=n(y$,"STRONG",{});var OJr=s(qae);Pno=r(OJr,"mbart50"),OJr.forEach(t),Bno=r(y$," \u2014 "),NP=n(y$,"A",{href:!0});var VJr=s(NP);Ino=r(VJr,"MBart50Tokenizer"),VJr.forEach(t),Nno=r(y$," or "),qP=n(y$,"A",{href:!0});var XJr=s(qP);qno=r(XJr,"MBart50TokenizerFast"),XJr.forEach(t),jno=r(y$," (mBART-50 model)"),y$.forEach(t),Dno=i(S),ms=n(S,"LI",{});var L$=s(ms);jae=n(L$,"STRONG",{});var zJr=s(jae);Gno=r(zJr,"megatron-bert"),zJr.forEach(t),Ono=r(L$," \u2014 "),jP=n(L$,"A",{href:!0});var WJr=s(jP);Vno=r(WJr,"BertTokenizer"),WJr.forEach(t),Xno=r(L$," or "),DP=n(L$,"A",{href:!0});var QJr=s(DP);zno=r(QJr,"BertTokenizerFast"),QJr.forEach(t),Wno=r(L$," (MegatronBert model)"),L$.forEach(t),Qno=i(S),Vg=n(S,"LI",{});var o6e=s(Vg);Dae=n(o6e,"STRONG",{});var HJr=s(Dae);Hno=r(HJr,"mluke"),HJr.forEach(t),Uno=r(o6e," \u2014 "),GP=n(o6e,"A",{href:!0});var UJr=s(GP);Jno=r(UJr,"MLukeTokenizer"),UJr.forEach(t),Yno=r(o6e," (mLUKE model)"),o6e.forEach(t),Kno=i(S),gs=n(S,"LI",{});var x$=s(gs);Gae=n(x$,"STRONG",{});var JJr=s(Gae);Zno=r(JJr,"mobilebert"),JJr.forEach(t),eso=r(x$," \u2014 "),OP=n(x$,"A",{href:!0});var YJr=s(OP);oso=r(YJr,"MobileBertTokenizer"),YJr.forEach(t),rso=r(x$," or "),VP=n(x$,"A",{href:!0});var KJr=s(VP);tso=r(KJr,"MobileBertTokenizerFast"),KJr.forEach(t),aso=r(x$," (MobileBERT model)"),x$.forEach(t),nso=i(S),hs=n(S,"LI",{});var $$=s(hs);Oae=n($$,"STRONG",{});var ZJr=s(Oae);sso=r(ZJr,"mpnet"),ZJr.forEach(t),lso=r($$," \u2014 "),XP=n($$,"A",{href:!0});var eYr=s(XP);iso=r(eYr,"MPNetTokenizer"),eYr.forEach(t),dso=r($$," or "),zP=n($$,"A",{href:!0});var oYr=s(zP);cso=r(oYr,"MPNetTokenizerFast"),oYr.forEach(t),fso=r($$," (MPNet model)"),$$.forEach(t),mso=i(S),ps=n(S,"LI",{});var k$=s(ps);Vae=n(k$,"STRONG",{});var rYr=s(Vae);gso=r(rYr,"mt5"),rYr.forEach(t),hso=r(k$," \u2014 "),WP=n(k$,"A",{href:!0});var tYr=s(WP);pso=r(tYr,"MT5Tokenizer"),tYr.forEach(t),_so=r(k$," or "),QP=n(k$,"A",{href:!0});var aYr=s(QP);uso=r(aYr,"MT5TokenizerFast"),aYr.forEach(t),bso=r(k$," (mT5 model)"),k$.forEach(t),vso=i(S),_s=n(S,"LI",{});var S$=s(_s);Xae=n(S$,"STRONG",{});var nYr=s(Xae);Fso=r(nYr,"nystromformer"),nYr.forEach(t),Tso=r(S$," \u2014 "),HP=n(S$,"A",{href:!0});var sYr=s(HP);Mso=r(sYr,"AlbertTokenizer"),sYr.forEach(t),Eso=r(S$," or "),UP=n(S$,"A",{href:!0});var lYr=s(UP);Cso=r(lYr,"AlbertTokenizerFast"),lYr.forEach(t),wso=r(S$," (Nystromformer model)"),S$.forEach(t),Aso=i(S),us=n(S,"LI",{});var R$=s(us);zae=n(R$,"STRONG",{});var iYr=s(zae);yso=r(iYr,"openai-gpt"),iYr.forEach(t),Lso=r(R$," \u2014 "),JP=n(R$,"A",{href:!0});var dYr=s(JP);xso=r(dYr,"OpenAIGPTTokenizer"),dYr.forEach(t),$so=r(R$," or "),YP=n(R$,"A",{href:!0});var cYr=s(YP);kso=r(cYr,"OpenAIGPTTokenizerFast"),cYr.forEach(t),Sso=r(R$," (OpenAI GPT model)"),R$.forEach(t),Rso=i(S),Xg=n(S,"LI",{});var r6e=s(Xg);Wae=n(r6e,"STRONG",{});var fYr=s(Wae);Pso=r(fYr,"opt"),fYr.forEach(t),Bso=r(r6e," \u2014 "),KP=n(r6e,"A",{href:!0});var mYr=s(KP);Iso=r(mYr,"GPT2Tokenizer"),mYr.forEach(t),Nso=r(r6e," (OPT model)"),r6e.forEach(t),qso=i(S),bs=n(S,"LI",{});var P$=s(bs);Qae=n(P$,"STRONG",{});var gYr=s(Qae);jso=r(gYr,"pegasus"),gYr.forEach(t),Dso=r(P$," \u2014 "),ZP=n(P$,"A",{href:!0});var hYr=s(ZP);Gso=r(hYr,"PegasusTokenizer"),hYr.forEach(t),Oso=r(P$," or "),eB=n(P$,"A",{href:!0});var pYr=s(eB);Vso=r(pYr,"PegasusTokenizerFast"),pYr.forEach(t),Xso=r(P$," (Pegasus model)"),P$.forEach(t),zso=i(S),zg=n(S,"LI",{});var t6e=s(zg);Hae=n(t6e,"STRONG",{});var _Yr=s(Hae);Wso=r(_Yr,"perceiver"),_Yr.forEach(t),Qso=r(t6e," \u2014 "),oB=n(t6e,"A",{href:!0});var uYr=s(oB);Hso=r(uYr,"PerceiverTokenizer"),uYr.forEach(t),Uso=r(t6e," (Perceiver model)"),t6e.forEach(t),Jso=i(S),Wg=n(S,"LI",{});var a6e=s(Wg);Uae=n(a6e,"STRONG",{});var bYr=s(Uae);Yso=r(bYr,"phobert"),bYr.forEach(t),Kso=r(a6e," \u2014 "),rB=n(a6e,"A",{href:!0});var vYr=s(rB);Zso=r(vYr,"PhobertTokenizer"),vYr.forEach(t),elo=r(a6e," (PhoBERT model)"),a6e.forEach(t),olo=i(S),Qg=n(S,"LI",{});var n6e=s(Qg);Jae=n(n6e,"STRONG",{});var FYr=s(Jae);rlo=r(FYr,"plbart"),FYr.forEach(t),tlo=r(n6e," \u2014 "),tB=n(n6e,"A",{href:!0});var TYr=s(tB);alo=r(TYr,"PLBartTokenizer"),TYr.forEach(t),nlo=r(n6e," (PLBart model)"),n6e.forEach(t),slo=i(S),Hg=n(S,"LI",{});var s6e=s(Hg);Yae=n(s6e,"STRONG",{});var MYr=s(Yae);llo=r(MYr,"prophetnet"),MYr.forEach(t),ilo=r(s6e," \u2014 "),aB=n(s6e,"A",{href:!0});var EYr=s(aB);dlo=r(EYr,"ProphetNetTokenizer"),EYr.forEach(t),clo=r(s6e," (ProphetNet model)"),s6e.forEach(t),flo=i(S),vs=n(S,"LI",{});var B$=s(vs);Kae=n(B$,"STRONG",{});var CYr=s(Kae);mlo=r(CYr,"qdqbert"),CYr.forEach(t),glo=r(B$," \u2014 "),nB=n(B$,"A",{href:!0});var wYr=s(nB);hlo=r(wYr,"BertTokenizer"),wYr.forEach(t),plo=r(B$," or "),sB=n(B$,"A",{href:!0});var AYr=s(sB);_lo=r(AYr,"BertTokenizerFast"),AYr.forEach(t),ulo=r(B$," (QDQBert model)"),B$.forEach(t),blo=i(S),Ug=n(S,"LI",{});var l6e=s(Ug);Zae=n(l6e,"STRONG",{});var yYr=s(Zae);vlo=r(yYr,"rag"),yYr.forEach(t),Flo=r(l6e," \u2014 "),lB=n(l6e,"A",{href:!0});var LYr=s(lB);Tlo=r(LYr,"RagTokenizer"),LYr.forEach(t),Mlo=r(l6e," (RAG model)"),l6e.forEach(t),Elo=i(S),Fs=n(S,"LI",{});var I$=s(Fs);ene=n(I$,"STRONG",{});var xYr=s(ene);Clo=r(xYr,"realm"),xYr.forEach(t),wlo=r(I$," \u2014 "),iB=n(I$,"A",{href:!0});var $Yr=s(iB);Alo=r($Yr,"RealmTokenizer"),$Yr.forEach(t),ylo=r(I$," or "),dB=n(I$,"A",{href:!0});var kYr=s(dB);Llo=r(kYr,"RealmTokenizerFast"),kYr.forEach(t),xlo=r(I$," (Realm model)"),I$.forEach(t),$lo=i(S),Ts=n(S,"LI",{});var N$=s(Ts);one=n(N$,"STRONG",{});var SYr=s(one);klo=r(SYr,"reformer"),SYr.forEach(t),Slo=r(N$," \u2014 "),cB=n(N$,"A",{href:!0});var RYr=s(cB);Rlo=r(RYr,"ReformerTokenizer"),RYr.forEach(t),Plo=r(N$," or "),fB=n(N$,"A",{href:!0});var PYr=s(fB);Blo=r(PYr,"ReformerTokenizerFast"),PYr.forEach(t),Ilo=r(N$," (Reformer model)"),N$.forEach(t),Nlo=i(S),Ms=n(S,"LI",{});var q$=s(Ms);rne=n(q$,"STRONG",{});var BYr=s(rne);qlo=r(BYr,"rembert"),BYr.forEach(t),jlo=r(q$," \u2014 "),mB=n(q$,"A",{href:!0});var IYr=s(mB);Dlo=r(IYr,"RemBertTokenizer"),IYr.forEach(t),Glo=r(q$," or "),gB=n(q$,"A",{href:!0});var NYr=s(gB);Olo=r(NYr,"RemBertTokenizerFast"),NYr.forEach(t),Vlo=r(q$," (RemBERT model)"),q$.forEach(t),Xlo=i(S),Es=n(S,"LI",{});var j$=s(Es);tne=n(j$,"STRONG",{});var qYr=s(tne);zlo=r(qYr,"retribert"),qYr.forEach(t),Wlo=r(j$," \u2014 "),hB=n(j$,"A",{href:!0});var jYr=s(hB);Qlo=r(jYr,"RetriBertTokenizer"),jYr.forEach(t),Hlo=r(j$," or "),pB=n(j$,"A",{href:!0});var DYr=s(pB);Ulo=r(DYr,"RetriBertTokenizerFast"),DYr.forEach(t),Jlo=r(j$," (RetriBERT model)"),j$.forEach(t),Ylo=i(S),Cs=n(S,"LI",{});var D$=s(Cs);ane=n(D$,"STRONG",{});var GYr=s(ane);Klo=r(GYr,"roberta"),GYr.forEach(t),Zlo=r(D$," \u2014 "),_B=n(D$,"A",{href:!0});var OYr=s(_B);eio=r(OYr,"RobertaTokenizer"),OYr.forEach(t),oio=r(D$," or "),uB=n(D$,"A",{href:!0});var VYr=s(uB);rio=r(VYr,"RobertaTokenizerFast"),VYr.forEach(t),tio=r(D$," (RoBERTa model)"),D$.forEach(t),aio=i(S),ws=n(S,"LI",{});var G$=s(ws);nne=n(G$,"STRONG",{});var XYr=s(nne);nio=r(XYr,"roformer"),XYr.forEach(t),sio=r(G$," \u2014 "),bB=n(G$,"A",{href:!0});var zYr=s(bB);lio=r(zYr,"RoFormerTokenizer"),zYr.forEach(t),iio=r(G$," or "),vB=n(G$,"A",{href:!0});var WYr=s(vB);dio=r(WYr,"RoFormerTokenizerFast"),WYr.forEach(t),cio=r(G$," (RoFormer model)"),G$.forEach(t),fio=i(S),Jg=n(S,"LI",{});var i6e=s(Jg);sne=n(i6e,"STRONG",{});var QYr=s(sne);mio=r(QYr,"speech_to_text"),QYr.forEach(t),gio=r(i6e," \u2014 "),FB=n(i6e,"A",{href:!0});var HYr=s(FB);hio=r(HYr,"Speech2TextTokenizer"),HYr.forEach(t),pio=r(i6e," (Speech2Text model)"),i6e.forEach(t),_io=i(S),Yg=n(S,"LI",{});var d6e=s(Yg);lne=n(d6e,"STRONG",{});var UYr=s(lne);uio=r(UYr,"speech_to_text_2"),UYr.forEach(t),bio=r(d6e," \u2014 "),TB=n(d6e,"A",{href:!0});var JYr=s(TB);vio=r(JYr,"Speech2Text2Tokenizer"),JYr.forEach(t),Fio=r(d6e," (Speech2Text2 model)"),d6e.forEach(t),Tio=i(S),As=n(S,"LI",{});var O$=s(As);ine=n(O$,"STRONG",{});var YYr=s(ine);Mio=r(YYr,"splinter"),YYr.forEach(t),Eio=r(O$," \u2014 "),MB=n(O$,"A",{href:!0});var KYr=s(MB);Cio=r(KYr,"SplinterTokenizer"),KYr.forEach(t),wio=r(O$," or "),EB=n(O$,"A",{href:!0});var ZYr=s(EB);Aio=r(ZYr,"SplinterTokenizerFast"),ZYr.forEach(t),yio=r(O$," (Splinter model)"),O$.forEach(t),Lio=i(S),ys=n(S,"LI",{});var V$=s(ys);dne=n(V$,"STRONG",{});var eKr=s(dne);xio=r(eKr,"squeezebert"),eKr.forEach(t),$io=r(V$," \u2014 "),CB=n(V$,"A",{href:!0});var oKr=s(CB);kio=r(oKr,"SqueezeBertTokenizer"),oKr.forEach(t),Sio=r(V$," or "),wB=n(V$,"A",{href:!0});var rKr=s(wB);Rio=r(rKr,"SqueezeBertTokenizerFast"),rKr.forEach(t),Pio=r(V$," (SqueezeBERT model)"),V$.forEach(t),Bio=i(S),Ls=n(S,"LI",{});var X$=s(Ls);cne=n(X$,"STRONG",{});var tKr=s(cne);Iio=r(tKr,"t5"),tKr.forEach(t),Nio=r(X$," \u2014 "),AB=n(X$,"A",{href:!0});var aKr=s(AB);qio=r(aKr,"T5Tokenizer"),aKr.forEach(t),jio=r(X$," or "),yB=n(X$,"A",{href:!0});var nKr=s(yB);Dio=r(nKr,"T5TokenizerFast"),nKr.forEach(t),Gio=r(X$," (T5 model)"),X$.forEach(t),Oio=i(S),Kg=n(S,"LI",{});var c6e=s(Kg);fne=n(c6e,"STRONG",{});var sKr=s(fne);Vio=r(sKr,"tapas"),sKr.forEach(t),Xio=r(c6e," \u2014 "),LB=n(c6e,"A",{href:!0});var lKr=s(LB);zio=r(lKr,"TapasTokenizer"),lKr.forEach(t),Wio=r(c6e," (TAPAS model)"),c6e.forEach(t),Qio=i(S),Zg=n(S,"LI",{});var f6e=s(Zg);mne=n(f6e,"STRONG",{});var iKr=s(mne);Hio=r(iKr,"tapex"),iKr.forEach(t),Uio=r(f6e," \u2014 "),xB=n(f6e,"A",{href:!0});var dKr=s(xB);Jio=r(dKr,"TapexTokenizer"),dKr.forEach(t),Yio=r(f6e," (TAPEX model)"),f6e.forEach(t),Kio=i(S),eh=n(S,"LI",{});var m6e=s(eh);gne=n(m6e,"STRONG",{});var cKr=s(gne);Zio=r(cKr,"transfo-xl"),cKr.forEach(t),edo=r(m6e," \u2014 "),$B=n(m6e,"A",{href:!0});var fKr=s($B);odo=r(fKr,"TransfoXLTokenizer"),fKr.forEach(t),rdo=r(m6e," (Transformer-XL model)"),m6e.forEach(t),tdo=i(S),xs=n(S,"LI",{});var z$=s(xs);hne=n(z$,"STRONG",{});var mKr=s(hne);ado=r(mKr,"visual_bert"),mKr.forEach(t),ndo=r(z$," \u2014 "),kB=n(z$,"A",{href:!0});var gKr=s(kB);sdo=r(gKr,"BertTokenizer"),gKr.forEach(t),ldo=r(z$," or "),SB=n(z$,"A",{href:!0});var hKr=s(SB);ido=r(hKr,"BertTokenizerFast"),hKr.forEach(t),ddo=r(z$," (VisualBert model)"),z$.forEach(t),cdo=i(S),oh=n(S,"LI",{});var g6e=s(oh);pne=n(g6e,"STRONG",{});var pKr=s(pne);fdo=r(pKr,"wav2vec2"),pKr.forEach(t),mdo=r(g6e," \u2014 "),RB=n(g6e,"A",{href:!0});var _Kr=s(RB);gdo=r(_Kr,"Wav2Vec2CTCTokenizer"),_Kr.forEach(t),hdo=r(g6e," (Wav2Vec2 model)"),g6e.forEach(t),pdo=i(S),rh=n(S,"LI",{});var h6e=s(rh);_ne=n(h6e,"STRONG",{});var uKr=s(_ne);_do=r(uKr,"wav2vec2-conformer"),uKr.forEach(t),udo=r(h6e," \u2014 "),PB=n(h6e,"A",{href:!0});var bKr=s(PB);bdo=r(bKr,"Wav2Vec2CTCTokenizer"),bKr.forEach(t),vdo=r(h6e," (Wav2Vec2-Conformer model)"),h6e.forEach(t),Fdo=i(S),th=n(S,"LI",{});var p6e=s(th);une=n(p6e,"STRONG",{});var vKr=s(une);Tdo=r(vKr,"wav2vec2_phoneme"),vKr.forEach(t),Mdo=r(p6e," \u2014 "),BB=n(p6e,"A",{href:!0});var FKr=s(BB);Edo=r(FKr,"Wav2Vec2PhonemeCTCTokenizer"),FKr.forEach(t),Cdo=r(p6e," (Wav2Vec2Phoneme model)"),p6e.forEach(t),wdo=i(S),$s=n(S,"LI",{});var W$=s($s);bne=n(W$,"STRONG",{});var TKr=s(bne);Ado=r(TKr,"xglm"),TKr.forEach(t),ydo=r(W$," \u2014 "),IB=n(W$,"A",{href:!0});var MKr=s(IB);Ldo=r(MKr,"XGLMTokenizer"),MKr.forEach(t),xdo=r(W$," or "),NB=n(W$,"A",{href:!0});var EKr=s(NB);$do=r(EKr,"XGLMTokenizerFast"),EKr.forEach(t),kdo=r(W$," (XGLM model)"),W$.forEach(t),Sdo=i(S),ah=n(S,"LI",{});var _6e=s(ah);vne=n(_6e,"STRONG",{});var CKr=s(vne);Rdo=r(CKr,"xlm"),CKr.forEach(t),Pdo=r(_6e," \u2014 "),qB=n(_6e,"A",{href:!0});var wKr=s(qB);Bdo=r(wKr,"XLMTokenizer"),wKr.forEach(t),Ido=r(_6e," (XLM model)"),_6e.forEach(t),Ndo=i(S),nh=n(S,"LI",{});var u6e=s(nh);Fne=n(u6e,"STRONG",{});var AKr=s(Fne);qdo=r(AKr,"xlm-prophetnet"),AKr.forEach(t),jdo=r(u6e," \u2014 "),jB=n(u6e,"A",{href:!0});var yKr=s(jB);Ddo=r(yKr,"XLMProphetNetTokenizer"),yKr.forEach(t),Gdo=r(u6e," (XLMProphetNet model)"),u6e.forEach(t),Odo=i(S),ks=n(S,"LI",{});var Q$=s(ks);Tne=n(Q$,"STRONG",{});var LKr=s(Tne);Vdo=r(LKr,"xlm-roberta"),LKr.forEach(t),Xdo=r(Q$," \u2014 "),DB=n(Q$,"A",{href:!0});var xKr=s(DB);zdo=r(xKr,"XLMRobertaTokenizer"),xKr.forEach(t),Wdo=r(Q$," or "),GB=n(Q$,"A",{href:!0});var $Kr=s(GB);Qdo=r($Kr,"XLMRobertaTokenizerFast"),$Kr.forEach(t),Hdo=r(Q$," (XLM-RoBERTa model)"),Q$.forEach(t),Udo=i(S),Ss=n(S,"LI",{});var H$=s(Ss);Mne=n(H$,"STRONG",{});var kKr=s(Mne);Jdo=r(kKr,"xlm-roberta-xl"),kKr.forEach(t),Ydo=r(H$," \u2014 "),OB=n(H$,"A",{href:!0});var SKr=s(OB);Kdo=r(SKr,"RobertaTokenizer"),SKr.forEach(t),Zdo=r(H$," or "),VB=n(H$,"A",{href:!0});var RKr=s(VB);eco=r(RKr,"RobertaTokenizerFast"),RKr.forEach(t),oco=r(H$," (XLM-RoBERTa-XL model)"),H$.forEach(t),rco=i(S),Rs=n(S,"LI",{});var U$=s(Rs);Ene=n(U$,"STRONG",{});var PKr=s(Ene);tco=r(PKr,"xlnet"),PKr.forEach(t),aco=r(U$," \u2014 "),XB=n(U$,"A",{href:!0});var BKr=s(XB);nco=r(BKr,"XLNetTokenizer"),BKr.forEach(t),sco=r(U$," or "),zB=n(U$,"A",{href:!0});var IKr=s(zB);lco=r(IKr,"XLNetTokenizerFast"),IKr.forEach(t),ico=r(U$," (XLNet model)"),U$.forEach(t),dco=i(S),Ps=n(S,"LI",{});var J$=s(Ps);Cne=n(J$,"STRONG",{});var NKr=s(Cne);cco=r(NKr,"yoso"),NKr.forEach(t),fco=r(J$," \u2014 "),WB=n(J$,"A",{href:!0});var qKr=s(WB);mco=r(qKr,"AlbertTokenizer"),qKr.forEach(t),gco=r(J$," or "),QB=n(J$,"A",{href:!0});var jKr=s(QB);hco=r(jKr,"AlbertTokenizerFast"),jKr.forEach(t),pco=r(J$," (YOSO model)"),J$.forEach(t),S.forEach(t),_co=i(js),T(sh.$$.fragment,js),js.forEach(t),uco=i(qs),lh=n(qs,"DIV",{class:!0});var jDe=s(lh);T(HA.$$.fragment,jDe),bco=i(jDe),wne=n(jDe,"P",{});var DKr=s(wne);vco=r(DKr,"Register a new tokenizer in this mapping."),DKr.forEach(t),jDe.forEach(t),qs.forEach(t),Dqe=i(f),Ei=n(f,"H2",{class:!0});var DDe=s(Ei);ih=n(DDe,"A",{id:!0,class:!0,href:!0});var GKr=s(ih);Ane=n(GKr,"SPAN",{});var OKr=s(Ane);T(UA.$$.fragment,OKr),OKr.forEach(t),GKr.forEach(t),Fco=i(DDe),yne=n(DDe,"SPAN",{});var VKr=s(yne);Tco=r(VKr,"AutoFeatureExtractor"),VKr.forEach(t),DDe.forEach(t),Gqe=i(f),Ao=n(f,"DIV",{class:!0});var Ds=s(Ao);T(JA.$$.fragment,Ds),Mco=i(Ds),YA=n(Ds,"P",{});var GDe=s(YA);Eco=r(GDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),HB=n(GDe,"A",{href:!0});var XKr=s(HB);Cco=r(XKr,"AutoFeatureExtractor.from_pretrained()"),XKr.forEach(t),wco=r(GDe," class method."),GDe.forEach(t),Aco=i(Ds),KA=n(Ds,"P",{});var ODe=s(KA);yco=r(ODe,"This class cannot be instantiated directly using "),Lne=n(ODe,"CODE",{});var zKr=s(Lne);Lco=r(zKr,"__init__()"),zKr.forEach(t),xco=r(ODe," (throws an error)."),ODe.forEach(t),$co=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(ZA.$$.fragment,Zt),kco=i(Zt),xne=n(Zt,"P",{});var WKr=s(xne);Sco=r(WKr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),WKr.forEach(t),Rco=i(Zt),ya=n(Zt,"P",{});var qw=s(ya);Pco=r(qw,"The feature extractor class to instantiate is selected based on the "),$ne=n(qw,"CODE",{});var QKr=s($ne);Bco=r(QKr,"model_type"),QKr.forEach(t),Ico=r(qw,` property of the config object
(either passed as an argument or loaded from `),kne=n(qw,"CODE",{});var HKr=s(kne);Nco=r(HKr,"pretrained_model_name_or_path"),HKr.forEach(t),qco=r(qw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Sne=n(qw,"CODE",{});var UKr=s(Sne);jco=r(UKr,"pretrained_model_name_or_path"),UKr.forEach(t),Dco=r(qw,":"),qw.forEach(t),Gco=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);dh=n(Z,"LI",{});var b6e=s(dh);Rne=n(b6e,"STRONG",{});var JKr=s(Rne);Oco=r(JKr,"beit"),JKr.forEach(t),Vco=r(b6e," \u2014 "),UB=n(b6e,"A",{href:!0});var YKr=s(UB);Xco=r(YKr,"BeitFeatureExtractor"),YKr.forEach(t),zco=r(b6e," (BEiT model)"),b6e.forEach(t),Wco=i(Z),ch=n(Z,"LI",{});var v6e=s(ch);Pne=n(v6e,"STRONG",{});var KKr=s(Pne);Qco=r(KKr,"clip"),KKr.forEach(t),Hco=r(v6e," \u2014 "),JB=n(v6e,"A",{href:!0});var ZKr=s(JB);Uco=r(ZKr,"CLIPFeatureExtractor"),ZKr.forEach(t),Jco=r(v6e," (CLIP model)"),v6e.forEach(t),Yco=i(Z),fh=n(Z,"LI",{});var F6e=s(fh);Bne=n(F6e,"STRONG",{});var eZr=s(Bne);Kco=r(eZr,"convnext"),eZr.forEach(t),Zco=r(F6e," \u2014 "),YB=n(F6e,"A",{href:!0});var oZr=s(YB);efo=r(oZr,"ConvNextFeatureExtractor"),oZr.forEach(t),ofo=r(F6e," (ConvNext model)"),F6e.forEach(t),rfo=i(Z),mh=n(Z,"LI",{});var T6e=s(mh);Ine=n(T6e,"STRONG",{});var rZr=s(Ine);tfo=r(rZr,"cvt"),rZr.forEach(t),afo=r(T6e," \u2014 "),KB=n(T6e,"A",{href:!0});var tZr=s(KB);nfo=r(tZr,"ConvNextFeatureExtractor"),tZr.forEach(t),sfo=r(T6e," (CvT model)"),T6e.forEach(t),lfo=i(Z),gh=n(Z,"LI",{});var M6e=s(gh);Nne=n(M6e,"STRONG",{});var aZr=s(Nne);ifo=r(aZr,"data2vec-audio"),aZr.forEach(t),dfo=r(M6e," \u2014 "),ZB=n(M6e,"A",{href:!0});var nZr=s(ZB);cfo=r(nZr,"Wav2Vec2FeatureExtractor"),nZr.forEach(t),ffo=r(M6e," (Data2VecAudio model)"),M6e.forEach(t),mfo=i(Z),hh=n(Z,"LI",{});var E6e=s(hh);qne=n(E6e,"STRONG",{});var sZr=s(qne);gfo=r(sZr,"data2vec-vision"),sZr.forEach(t),hfo=r(E6e," \u2014 "),eI=n(E6e,"A",{href:!0});var lZr=s(eI);pfo=r(lZr,"BeitFeatureExtractor"),lZr.forEach(t),_fo=r(E6e," (Data2VecVision model)"),E6e.forEach(t),ufo=i(Z),ph=n(Z,"LI",{});var C6e=s(ph);jne=n(C6e,"STRONG",{});var iZr=s(jne);bfo=r(iZr,"deit"),iZr.forEach(t),vfo=r(C6e," \u2014 "),oI=n(C6e,"A",{href:!0});var dZr=s(oI);Ffo=r(dZr,"DeiTFeatureExtractor"),dZr.forEach(t),Tfo=r(C6e," (DeiT model)"),C6e.forEach(t),Mfo=i(Z),_h=n(Z,"LI",{});var w6e=s(_h);Dne=n(w6e,"STRONG",{});var cZr=s(Dne);Efo=r(cZr,"detr"),cZr.forEach(t),Cfo=r(w6e," \u2014 "),rI=n(w6e,"A",{href:!0});var fZr=s(rI);wfo=r(fZr,"DetrFeatureExtractor"),fZr.forEach(t),Afo=r(w6e," (DETR model)"),w6e.forEach(t),yfo=i(Z),uh=n(Z,"LI",{});var A6e=s(uh);Gne=n(A6e,"STRONG",{});var mZr=s(Gne);Lfo=r(mZr,"dpt"),mZr.forEach(t),xfo=r(A6e," \u2014 "),tI=n(A6e,"A",{href:!0});var gZr=s(tI);$fo=r(gZr,"DPTFeatureExtractor"),gZr.forEach(t),kfo=r(A6e," (DPT model)"),A6e.forEach(t),Sfo=i(Z),bh=n(Z,"LI",{});var y6e=s(bh);One=n(y6e,"STRONG",{});var hZr=s(One);Rfo=r(hZr,"flava"),hZr.forEach(t),Pfo=r(y6e," \u2014 "),aI=n(y6e,"A",{href:!0});var pZr=s(aI);Bfo=r(pZr,"FlavaFeatureExtractor"),pZr.forEach(t),Ifo=r(y6e," (Flava model)"),y6e.forEach(t),Nfo=i(Z),vh=n(Z,"LI",{});var L6e=s(vh);Vne=n(L6e,"STRONG",{});var _Zr=s(Vne);qfo=r(_Zr,"glpn"),_Zr.forEach(t),jfo=r(L6e," \u2014 "),nI=n(L6e,"A",{href:!0});var uZr=s(nI);Dfo=r(uZr,"GLPNFeatureExtractor"),uZr.forEach(t),Gfo=r(L6e," (GLPN model)"),L6e.forEach(t),Ofo=i(Z),Fh=n(Z,"LI",{});var x6e=s(Fh);Xne=n(x6e,"STRONG",{});var bZr=s(Xne);Vfo=r(bZr,"hubert"),bZr.forEach(t),Xfo=r(x6e," \u2014 "),sI=n(x6e,"A",{href:!0});var vZr=s(sI);zfo=r(vZr,"Wav2Vec2FeatureExtractor"),vZr.forEach(t),Wfo=r(x6e," (Hubert model)"),x6e.forEach(t),Qfo=i(Z),Th=n(Z,"LI",{});var $6e=s(Th);zne=n($6e,"STRONG",{});var FZr=s(zne);Hfo=r(FZr,"imagegpt"),FZr.forEach(t),Ufo=r($6e," \u2014 "),lI=n($6e,"A",{href:!0});var TZr=s(lI);Jfo=r(TZr,"ImageGPTFeatureExtractor"),TZr.forEach(t),Yfo=r($6e," (ImageGPT model)"),$6e.forEach(t),Kfo=i(Z),Mh=n(Z,"LI",{});var k6e=s(Mh);Wne=n(k6e,"STRONG",{});var MZr=s(Wne);Zfo=r(MZr,"layoutlmv2"),MZr.forEach(t),emo=r(k6e," \u2014 "),iI=n(k6e,"A",{href:!0});var EZr=s(iI);omo=r(EZr,"LayoutLMv2FeatureExtractor"),EZr.forEach(t),rmo=r(k6e," (LayoutLMv2 model)"),k6e.forEach(t),tmo=i(Z),Eh=n(Z,"LI",{});var S6e=s(Eh);Qne=n(S6e,"STRONG",{});var CZr=s(Qne);amo=r(CZr,"layoutlmv3"),CZr.forEach(t),nmo=r(S6e," \u2014 "),dI=n(S6e,"A",{href:!0});var wZr=s(dI);smo=r(wZr,"LayoutLMv3FeatureExtractor"),wZr.forEach(t),lmo=r(S6e," (LayoutLMv3 model)"),S6e.forEach(t),imo=i(Z),Ch=n(Z,"LI",{});var R6e=s(Ch);Hne=n(R6e,"STRONG",{});var AZr=s(Hne);dmo=r(AZr,"maskformer"),AZr.forEach(t),cmo=r(R6e," \u2014 "),cI=n(R6e,"A",{href:!0});var yZr=s(cI);fmo=r(yZr,"MaskFormerFeatureExtractor"),yZr.forEach(t),mmo=r(R6e," (MaskFormer model)"),R6e.forEach(t),gmo=i(Z),wh=n(Z,"LI",{});var P6e=s(wh);Une=n(P6e,"STRONG",{});var LZr=s(Une);hmo=r(LZr,"perceiver"),LZr.forEach(t),pmo=r(P6e," \u2014 "),fI=n(P6e,"A",{href:!0});var xZr=s(fI);_mo=r(xZr,"PerceiverFeatureExtractor"),xZr.forEach(t),umo=r(P6e," (Perceiver model)"),P6e.forEach(t),bmo=i(Z),Ah=n(Z,"LI",{});var B6e=s(Ah);Jne=n(B6e,"STRONG",{});var $Zr=s(Jne);vmo=r($Zr,"poolformer"),$Zr.forEach(t),Fmo=r(B6e," \u2014 "),mI=n(B6e,"A",{href:!0});var kZr=s(mI);Tmo=r(kZr,"PoolFormerFeatureExtractor"),kZr.forEach(t),Mmo=r(B6e," (PoolFormer model)"),B6e.forEach(t),Emo=i(Z),yh=n(Z,"LI",{});var I6e=s(yh);Yne=n(I6e,"STRONG",{});var SZr=s(Yne);Cmo=r(SZr,"regnet"),SZr.forEach(t),wmo=r(I6e," \u2014 "),gI=n(I6e,"A",{href:!0});var RZr=s(gI);Amo=r(RZr,"ConvNextFeatureExtractor"),RZr.forEach(t),ymo=r(I6e," (RegNet model)"),I6e.forEach(t),Lmo=i(Z),Lh=n(Z,"LI",{});var N6e=s(Lh);Kne=n(N6e,"STRONG",{});var PZr=s(Kne);xmo=r(PZr,"resnet"),PZr.forEach(t),$mo=r(N6e," \u2014 "),hI=n(N6e,"A",{href:!0});var BZr=s(hI);kmo=r(BZr,"ConvNextFeatureExtractor"),BZr.forEach(t),Smo=r(N6e," (ResNet model)"),N6e.forEach(t),Rmo=i(Z),xh=n(Z,"LI",{});var q6e=s(xh);Zne=n(q6e,"STRONG",{});var IZr=s(Zne);Pmo=r(IZr,"segformer"),IZr.forEach(t),Bmo=r(q6e," \u2014 "),pI=n(q6e,"A",{href:!0});var NZr=s(pI);Imo=r(NZr,"SegformerFeatureExtractor"),NZr.forEach(t),Nmo=r(q6e," (SegFormer model)"),q6e.forEach(t),qmo=i(Z),$h=n(Z,"LI",{});var j6e=s($h);ese=n(j6e,"STRONG",{});var qZr=s(ese);jmo=r(qZr,"speech_to_text"),qZr.forEach(t),Dmo=r(j6e," \u2014 "),_I=n(j6e,"A",{href:!0});var jZr=s(_I);Gmo=r(jZr,"Speech2TextFeatureExtractor"),jZr.forEach(t),Omo=r(j6e," (Speech2Text model)"),j6e.forEach(t),Vmo=i(Z),kh=n(Z,"LI",{});var D6e=s(kh);ose=n(D6e,"STRONG",{});var DZr=s(ose);Xmo=r(DZr,"swin"),DZr.forEach(t),zmo=r(D6e," \u2014 "),uI=n(D6e,"A",{href:!0});var GZr=s(uI);Wmo=r(GZr,"ViTFeatureExtractor"),GZr.forEach(t),Qmo=r(D6e," (Swin model)"),D6e.forEach(t),Hmo=i(Z),Sh=n(Z,"LI",{});var G6e=s(Sh);rse=n(G6e,"STRONG",{});var OZr=s(rse);Umo=r(OZr,"van"),OZr.forEach(t),Jmo=r(G6e," \u2014 "),bI=n(G6e,"A",{href:!0});var VZr=s(bI);Ymo=r(VZr,"ConvNextFeatureExtractor"),VZr.forEach(t),Kmo=r(G6e," (VAN model)"),G6e.forEach(t),Zmo=i(Z),Rh=n(Z,"LI",{});var O6e=s(Rh);tse=n(O6e,"STRONG",{});var XZr=s(tse);ego=r(XZr,"vit"),XZr.forEach(t),ogo=r(O6e," \u2014 "),vI=n(O6e,"A",{href:!0});var zZr=s(vI);rgo=r(zZr,"ViTFeatureExtractor"),zZr.forEach(t),tgo=r(O6e," (ViT model)"),O6e.forEach(t),ago=i(Z),Ph=n(Z,"LI",{});var V6e=s(Ph);ase=n(V6e,"STRONG",{});var WZr=s(ase);ngo=r(WZr,"vit_mae"),WZr.forEach(t),sgo=r(V6e," \u2014 "),FI=n(V6e,"A",{href:!0});var QZr=s(FI);lgo=r(QZr,"ViTFeatureExtractor"),QZr.forEach(t),igo=r(V6e," (ViTMAE model)"),V6e.forEach(t),dgo=i(Z),Bh=n(Z,"LI",{});var X6e=s(Bh);nse=n(X6e,"STRONG",{});var HZr=s(nse);cgo=r(HZr,"wav2vec2"),HZr.forEach(t),fgo=r(X6e," \u2014 "),TI=n(X6e,"A",{href:!0});var UZr=s(TI);mgo=r(UZr,"Wav2Vec2FeatureExtractor"),UZr.forEach(t),ggo=r(X6e," (Wav2Vec2 model)"),X6e.forEach(t),hgo=i(Z),Ih=n(Z,"LI",{});var z6e=s(Ih);sse=n(z6e,"STRONG",{});var JZr=s(sse);pgo=r(JZr,"wav2vec2-conformer"),JZr.forEach(t),_go=r(z6e," \u2014 "),MI=n(z6e,"A",{href:!0});var YZr=s(MI);ugo=r(YZr,"Wav2Vec2FeatureExtractor"),YZr.forEach(t),bgo=r(z6e," (Wav2Vec2-Conformer model)"),z6e.forEach(t),vgo=i(Z),Nh=n(Z,"LI",{});var W6e=s(Nh);lse=n(W6e,"STRONG",{});var KZr=s(lse);Fgo=r(KZr,"yolos"),KZr.forEach(t),Tgo=r(W6e," \u2014 "),EI=n(W6e,"A",{href:!0});var ZZr=s(EI);Mgo=r(ZZr,"YolosFeatureExtractor"),ZZr.forEach(t),Ego=r(W6e," (YOLOS model)"),W6e.forEach(t),Z.forEach(t),Cgo=i(Zt),T(qh.$$.fragment,Zt),wgo=i(Zt),T(jh.$$.fragment,Zt),Zt.forEach(t),Ago=i(Ds),Dh=n(Ds,"DIV",{class:!0});var VDe=s(Dh);T(ey.$$.fragment,VDe),ygo=i(VDe),ise=n(VDe,"P",{});var eet=s(ise);Lgo=r(eet,"Register a new feature extractor for this class."),eet.forEach(t),VDe.forEach(t),Ds.forEach(t),Oqe=i(f),Ci=n(f,"H2",{class:!0});var XDe=s(Ci);Gh=n(XDe,"A",{id:!0,class:!0,href:!0});var oet=s(Gh);dse=n(oet,"SPAN",{});var ret=s(dse);T(oy.$$.fragment,ret),ret.forEach(t),oet.forEach(t),xgo=i(XDe),cse=n(XDe,"SPAN",{});var tet=s(cse);$go=r(tet,"AutoProcessor"),tet.forEach(t),XDe.forEach(t),Vqe=i(f),yo=n(f,"DIV",{class:!0});var Gs=s(yo);T(ry.$$.fragment,Gs),kgo=i(Gs),ty=n(Gs,"P",{});var zDe=s(ty);Sgo=r(zDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),CI=n(zDe,"A",{href:!0});var aet=s(CI);Rgo=r(aet,"AutoProcessor.from_pretrained()"),aet.forEach(t),Pgo=r(zDe," class method."),zDe.forEach(t),Bgo=i(Gs),ay=n(Gs,"P",{});var WDe=s(ay);Igo=r(WDe,"This class cannot be instantiated directly using "),fse=n(WDe,"CODE",{});var net=s(fse);Ngo=r(net,"__init__()"),net.forEach(t),qgo=r(WDe," (throws an error)."),WDe.forEach(t),jgo=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(ny.$$.fragment,ea),Dgo=i(ea),mse=n(ea,"P",{});var set=s(mse);Ggo=r(set,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),set.forEach(t),Ogo=i(ea),wi=n(ea,"P",{});var SZ=s(wi);Vgo=r(SZ,"The processor class to instantiate is selected based on the "),gse=n(SZ,"CODE",{});var iet=s(gse);Xgo=r(iet,"model_type"),iet.forEach(t),zgo=r(SZ,` property of the config object (either
passed as an argument or loaded from `),hse=n(SZ,"CODE",{});var det=s(hse);Wgo=r(det,"pretrained_model_name_or_path"),det.forEach(t),Qgo=r(SZ," if possible):"),SZ.forEach(t),Hgo=i(ea),he=n(ea,"UL",{});var ue=s(he);Oh=n(ue,"LI",{});var Q6e=s(Oh);pse=n(Q6e,"STRONG",{});var cet=s(pse);Ugo=r(cet,"clip"),cet.forEach(t),Jgo=r(Q6e," \u2014 "),wI=n(Q6e,"A",{href:!0});var fet=s(wI);Ygo=r(fet,"CLIPProcessor"),fet.forEach(t),Kgo=r(Q6e," (CLIP model)"),Q6e.forEach(t),Zgo=i(ue),Vh=n(ue,"LI",{});var H6e=s(Vh);_se=n(H6e,"STRONG",{});var met=s(_se);eho=r(met,"flava"),met.forEach(t),oho=r(H6e," \u2014 "),use=n(H6e,"CODE",{});var get=s(use);rho=r(get,"FLAVAProcessor"),get.forEach(t),tho=r(H6e," (Flava model)"),H6e.forEach(t),aho=i(ue),Xh=n(ue,"LI",{});var U6e=s(Xh);bse=n(U6e,"STRONG",{});var het=s(bse);nho=r(het,"layoutlmv2"),het.forEach(t),sho=r(U6e," \u2014 "),AI=n(U6e,"A",{href:!0});var pet=s(AI);lho=r(pet,"LayoutLMv2Processor"),pet.forEach(t),iho=r(U6e," (LayoutLMv2 model)"),U6e.forEach(t),dho=i(ue),zh=n(ue,"LI",{});var J6e=s(zh);vse=n(J6e,"STRONG",{});var _et=s(vse);cho=r(_et,"layoutlmv3"),_et.forEach(t),fho=r(J6e," \u2014 "),yI=n(J6e,"A",{href:!0});var uet=s(yI);mho=r(uet,"LayoutLMv3Processor"),uet.forEach(t),gho=r(J6e," (LayoutLMv3 model)"),J6e.forEach(t),hho=i(ue),Wh=n(ue,"LI",{});var Y6e=s(Wh);Fse=n(Y6e,"STRONG",{});var bet=s(Fse);pho=r(bet,"layoutxlm"),bet.forEach(t),_ho=r(Y6e," \u2014 "),LI=n(Y6e,"A",{href:!0});var vet=s(LI);uho=r(vet,"LayoutXLMProcessor"),vet.forEach(t),bho=r(Y6e," (LayoutXLM model)"),Y6e.forEach(t),vho=i(ue),Qh=n(ue,"LI",{});var K6e=s(Qh);Tse=n(K6e,"STRONG",{});var Fet=s(Tse);Fho=r(Fet,"sew"),Fet.forEach(t),Tho=r(K6e," \u2014 "),xI=n(K6e,"A",{href:!0});var Tet=s(xI);Mho=r(Tet,"Wav2Vec2Processor"),Tet.forEach(t),Eho=r(K6e," (SEW model)"),K6e.forEach(t),Cho=i(ue),Hh=n(ue,"LI",{});var Z6e=s(Hh);Mse=n(Z6e,"STRONG",{});var Met=s(Mse);who=r(Met,"sew-d"),Met.forEach(t),Aho=r(Z6e," \u2014 "),$I=n(Z6e,"A",{href:!0});var Eet=s($I);yho=r(Eet,"Wav2Vec2Processor"),Eet.forEach(t),Lho=r(Z6e," (SEW-D model)"),Z6e.forEach(t),xho=i(ue),Uh=n(ue,"LI",{});var eAe=s(Uh);Ese=n(eAe,"STRONG",{});var Cet=s(Ese);$ho=r(Cet,"speech_to_text"),Cet.forEach(t),kho=r(eAe," \u2014 "),kI=n(eAe,"A",{href:!0});var wet=s(kI);Sho=r(wet,"Speech2TextProcessor"),wet.forEach(t),Rho=r(eAe," (Speech2Text model)"),eAe.forEach(t),Pho=i(ue),Jh=n(ue,"LI",{});var oAe=s(Jh);Cse=n(oAe,"STRONG",{});var Aet=s(Cse);Bho=r(Aet,"speech_to_text_2"),Aet.forEach(t),Iho=r(oAe," \u2014 "),SI=n(oAe,"A",{href:!0});var yet=s(SI);Nho=r(yet,"Speech2Text2Processor"),yet.forEach(t),qho=r(oAe," (Speech2Text2 model)"),oAe.forEach(t),jho=i(ue),Yh=n(ue,"LI",{});var rAe=s(Yh);wse=n(rAe,"STRONG",{});var Let=s(wse);Dho=r(Let,"trocr"),Let.forEach(t),Gho=r(rAe," \u2014 "),RI=n(rAe,"A",{href:!0});var xet=s(RI);Oho=r(xet,"TrOCRProcessor"),xet.forEach(t),Vho=r(rAe," (TrOCR model)"),rAe.forEach(t),Xho=i(ue),Kh=n(ue,"LI",{});var tAe=s(Kh);Ase=n(tAe,"STRONG",{});var $et=s(Ase);zho=r($et,"unispeech"),$et.forEach(t),Who=r(tAe," \u2014 "),PI=n(tAe,"A",{href:!0});var ket=s(PI);Qho=r(ket,"Wav2Vec2Processor"),ket.forEach(t),Hho=r(tAe," (UniSpeech model)"),tAe.forEach(t),Uho=i(ue),Zh=n(ue,"LI",{});var aAe=s(Zh);yse=n(aAe,"STRONG",{});var Set=s(yse);Jho=r(Set,"unispeech-sat"),Set.forEach(t),Yho=r(aAe," \u2014 "),BI=n(aAe,"A",{href:!0});var Ret=s(BI);Kho=r(Ret,"Wav2Vec2Processor"),Ret.forEach(t),Zho=r(aAe," (UniSpeechSat model)"),aAe.forEach(t),epo=i(ue),ep=n(ue,"LI",{});var nAe=s(ep);Lse=n(nAe,"STRONG",{});var Pet=s(Lse);opo=r(Pet,"vilt"),Pet.forEach(t),rpo=r(nAe," \u2014 "),II=n(nAe,"A",{href:!0});var Bet=s(II);tpo=r(Bet,"ViltProcessor"),Bet.forEach(t),apo=r(nAe," (ViLT model)"),nAe.forEach(t),npo=i(ue),op=n(ue,"LI",{});var sAe=s(op);xse=n(sAe,"STRONG",{});var Iet=s(xse);spo=r(Iet,"vision-text-dual-encoder"),Iet.forEach(t),lpo=r(sAe," \u2014 "),NI=n(sAe,"A",{href:!0});var Net=s(NI);ipo=r(Net,"VisionTextDualEncoderProcessor"),Net.forEach(t),dpo=r(sAe," (VisionTextDualEncoder model)"),sAe.forEach(t),cpo=i(ue),rp=n(ue,"LI",{});var lAe=s(rp);$se=n(lAe,"STRONG",{});var qet=s($se);fpo=r(qet,"wav2vec2"),qet.forEach(t),mpo=r(lAe," \u2014 "),qI=n(lAe,"A",{href:!0});var jet=s(qI);gpo=r(jet,"Wav2Vec2Processor"),jet.forEach(t),hpo=r(lAe," (Wav2Vec2 model)"),lAe.forEach(t),ppo=i(ue),tp=n(ue,"LI",{});var iAe=s(tp);kse=n(iAe,"STRONG",{});var Det=s(kse);_po=r(Det,"wav2vec2-conformer"),Det.forEach(t),upo=r(iAe," \u2014 "),jI=n(iAe,"A",{href:!0});var Get=s(jI);bpo=r(Get,"Wav2Vec2Processor"),Get.forEach(t),vpo=r(iAe," (Wav2Vec2-Conformer model)"),iAe.forEach(t),Fpo=i(ue),ap=n(ue,"LI",{});var dAe=s(ap);Sse=n(dAe,"STRONG",{});var Oet=s(Sse);Tpo=r(Oet,"wavlm"),Oet.forEach(t),Mpo=r(dAe," \u2014 "),DI=n(dAe,"A",{href:!0});var Vet=s(DI);Epo=r(Vet,"Wav2Vec2Processor"),Vet.forEach(t),Cpo=r(dAe," (WavLM model)"),dAe.forEach(t),ue.forEach(t),wpo=i(ea),T(np.$$.fragment,ea),Apo=i(ea),T(sp.$$.fragment,ea),ea.forEach(t),ypo=i(Gs),lp=n(Gs,"DIV",{class:!0});var QDe=s(lp);T(sy.$$.fragment,QDe),Lpo=i(QDe),Rse=n(QDe,"P",{});var Xet=s(Rse);xpo=r(Xet,"Register a new processor for this class."),Xet.forEach(t),QDe.forEach(t),Gs.forEach(t),Xqe=i(f),Ai=n(f,"H2",{class:!0});var HDe=s(Ai);ip=n(HDe,"A",{id:!0,class:!0,href:!0});var zet=s(ip);Pse=n(zet,"SPAN",{});var Wet=s(Pse);T(ly.$$.fragment,Wet),Wet.forEach(t),zet.forEach(t),$po=i(HDe),Bse=n(HDe,"SPAN",{});var Qet=s(Bse);kpo=r(Qet,"AutoModel"),Qet.forEach(t),HDe.forEach(t),zqe=i(f),Lo=n(f,"DIV",{class:!0});var Os=s(Lo);T(iy.$$.fragment,Os),Spo=i(Os),yi=n(Os,"P",{});var RZ=s(yi);Rpo=r(RZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GI=n(RZ,"A",{href:!0});var Het=s(GI);Ppo=r(Het,"from_pretrained()"),Het.forEach(t),Bpo=r(RZ," class method or the "),OI=n(RZ,"A",{href:!0});var Uet=s(OI);Ipo=r(Uet,"from_config()"),Uet.forEach(t),Npo=r(RZ,` class
method.`),RZ.forEach(t),qpo=i(Os),dy=n(Os,"P",{});var UDe=s(dy);jpo=r(UDe,"This class cannot be instantiated directly using "),Ise=n(UDe,"CODE",{});var Jet=s(Ise);Dpo=r(Jet,"__init__()"),Jet.forEach(t),Gpo=r(UDe," (throws an error)."),UDe.forEach(t),Opo=i(Os),tt=n(Os,"DIV",{class:!0});var jw=s(tt);T(cy.$$.fragment,jw),Vpo=i(jw),Nse=n(jw,"P",{});var Yet=s(Nse);Xpo=r(Yet,"Instantiates one of the base model classes of the library from a configuration."),Yet.forEach(t),zpo=i(jw),Li=n(jw,"P",{});var PZ=s(Li);Wpo=r(PZ,`Note:
Loading a model from its configuration file does `),qse=n(PZ,"STRONG",{});var Ket=s(qse);Qpo=r(Ket,"not"),Ket.forEach(t),Hpo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VI=n(PZ,"A",{href:!0});var Zet=s(VI);Upo=r(Zet,"from_pretrained()"),Zet.forEach(t),Jpo=r(PZ," to load the model weights."),PZ.forEach(t),Ypo=i(jw),T(dp.$$.fragment,jw),jw.forEach(t),Kpo=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(fy.$$.fragment,oa),Zpo=i(oa),jse=n(oa,"P",{});var eot=s(jse);e_o=r(eot,"Instantiate one of the base model classes of the library from a pretrained model."),eot.forEach(t),o_o=i(oa),La=n(oa,"P",{});var Dw=s(La);r_o=r(Dw,"The model class to instantiate is selected based on the "),Dse=n(Dw,"CODE",{});var oot=s(Dse);t_o=r(oot,"model_type"),oot.forEach(t),a_o=r(Dw,` property of the config object (either
passed as an argument or loaded from `),Gse=n(Dw,"CODE",{});var rot=s(Gse);n_o=r(rot,"pretrained_model_name_or_path"),rot.forEach(t),s_o=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ose=n(Dw,"CODE",{});var tot=s(Ose);l_o=r(tot,"pretrained_model_name_or_path"),tot.forEach(t),i_o=r(Dw,":"),Dw.forEach(t),d_o=i(oa),x=n(oa,"UL",{});var $=s(x);cp=n($,"LI",{});var cAe=s(cp);Vse=n(cAe,"STRONG",{});var aot=s(Vse);c_o=r(aot,"albert"),aot.forEach(t),f_o=r(cAe," \u2014 "),XI=n(cAe,"A",{href:!0});var not=s(XI);m_o=r(not,"AlbertModel"),not.forEach(t),g_o=r(cAe," (ALBERT model)"),cAe.forEach(t),h_o=i($),fp=n($,"LI",{});var fAe=s(fp);Xse=n(fAe,"STRONG",{});var sot=s(Xse);p_o=r(sot,"bart"),sot.forEach(t),__o=r(fAe," \u2014 "),zI=n(fAe,"A",{href:!0});var lot=s(zI);u_o=r(lot,"BartModel"),lot.forEach(t),b_o=r(fAe," (BART model)"),fAe.forEach(t),v_o=i($),mp=n($,"LI",{});var mAe=s(mp);zse=n(mAe,"STRONG",{});var iot=s(zse);F_o=r(iot,"beit"),iot.forEach(t),T_o=r(mAe," \u2014 "),WI=n(mAe,"A",{href:!0});var dot=s(WI);M_o=r(dot,"BeitModel"),dot.forEach(t),E_o=r(mAe," (BEiT model)"),mAe.forEach(t),C_o=i($),gp=n($,"LI",{});var gAe=s(gp);Wse=n(gAe,"STRONG",{});var cot=s(Wse);w_o=r(cot,"bert"),cot.forEach(t),A_o=r(gAe," \u2014 "),QI=n(gAe,"A",{href:!0});var fot=s(QI);y_o=r(fot,"BertModel"),fot.forEach(t),L_o=r(gAe," (BERT model)"),gAe.forEach(t),x_o=i($),hp=n($,"LI",{});var hAe=s(hp);Qse=n(hAe,"STRONG",{});var mot=s(Qse);$_o=r(mot,"bert-generation"),mot.forEach(t),k_o=r(hAe," \u2014 "),HI=n(hAe,"A",{href:!0});var got=s(HI);S_o=r(got,"BertGenerationEncoder"),got.forEach(t),R_o=r(hAe," (Bert Generation model)"),hAe.forEach(t),P_o=i($),pp=n($,"LI",{});var pAe=s(pp);Hse=n(pAe,"STRONG",{});var hot=s(Hse);B_o=r(hot,"big_bird"),hot.forEach(t),I_o=r(pAe," \u2014 "),UI=n(pAe,"A",{href:!0});var pot=s(UI);N_o=r(pot,"BigBirdModel"),pot.forEach(t),q_o=r(pAe," (BigBird model)"),pAe.forEach(t),j_o=i($),_p=n($,"LI",{});var _Ae=s(_p);Use=n(_Ae,"STRONG",{});var _ot=s(Use);D_o=r(_ot,"bigbird_pegasus"),_ot.forEach(t),G_o=r(_Ae," \u2014 "),JI=n(_Ae,"A",{href:!0});var uot=s(JI);O_o=r(uot,"BigBirdPegasusModel"),uot.forEach(t),V_o=r(_Ae," (BigBirdPegasus model)"),_Ae.forEach(t),X_o=i($),up=n($,"LI",{});var uAe=s(up);Jse=n(uAe,"STRONG",{});var bot=s(Jse);z_o=r(bot,"blenderbot"),bot.forEach(t),W_o=r(uAe," \u2014 "),YI=n(uAe,"A",{href:!0});var vot=s(YI);Q_o=r(vot,"BlenderbotModel"),vot.forEach(t),H_o=r(uAe," (Blenderbot model)"),uAe.forEach(t),U_o=i($),bp=n($,"LI",{});var bAe=s(bp);Yse=n(bAe,"STRONG",{});var Fot=s(Yse);J_o=r(Fot,"blenderbot-small"),Fot.forEach(t),Y_o=r(bAe," \u2014 "),KI=n(bAe,"A",{href:!0});var Tot=s(KI);K_o=r(Tot,"BlenderbotSmallModel"),Tot.forEach(t),Z_o=r(bAe," (BlenderbotSmall model)"),bAe.forEach(t),euo=i($),vp=n($,"LI",{});var vAe=s(vp);Kse=n(vAe,"STRONG",{});var Mot=s(Kse);ouo=r(Mot,"camembert"),Mot.forEach(t),ruo=r(vAe," \u2014 "),ZI=n(vAe,"A",{href:!0});var Eot=s(ZI);tuo=r(Eot,"CamembertModel"),Eot.forEach(t),auo=r(vAe," (CamemBERT model)"),vAe.forEach(t),nuo=i($),Fp=n($,"LI",{});var FAe=s(Fp);Zse=n(FAe,"STRONG",{});var Cot=s(Zse);suo=r(Cot,"canine"),Cot.forEach(t),luo=r(FAe," \u2014 "),eN=n(FAe,"A",{href:!0});var wot=s(eN);iuo=r(wot,"CanineModel"),wot.forEach(t),duo=r(FAe," (Canine model)"),FAe.forEach(t),cuo=i($),Tp=n($,"LI",{});var TAe=s(Tp);ele=n(TAe,"STRONG",{});var Aot=s(ele);fuo=r(Aot,"clip"),Aot.forEach(t),muo=r(TAe," \u2014 "),oN=n(TAe,"A",{href:!0});var yot=s(oN);guo=r(yot,"CLIPModel"),yot.forEach(t),huo=r(TAe," (CLIP model)"),TAe.forEach(t),puo=i($),Mp=n($,"LI",{});var MAe=s(Mp);ole=n(MAe,"STRONG",{});var Lot=s(ole);_uo=r(Lot,"codegen"),Lot.forEach(t),uuo=r(MAe," \u2014 "),rN=n(MAe,"A",{href:!0});var xot=s(rN);buo=r(xot,"CodeGenModel"),xot.forEach(t),vuo=r(MAe," (CodeGen model)"),MAe.forEach(t),Fuo=i($),Ep=n($,"LI",{});var EAe=s(Ep);rle=n(EAe,"STRONG",{});var $ot=s(rle);Tuo=r($ot,"convbert"),$ot.forEach(t),Muo=r(EAe," \u2014 "),tN=n(EAe,"A",{href:!0});var kot=s(tN);Euo=r(kot,"ConvBertModel"),kot.forEach(t),Cuo=r(EAe," (ConvBERT model)"),EAe.forEach(t),wuo=i($),Cp=n($,"LI",{});var CAe=s(Cp);tle=n(CAe,"STRONG",{});var Sot=s(tle);Auo=r(Sot,"convnext"),Sot.forEach(t),yuo=r(CAe," \u2014 "),aN=n(CAe,"A",{href:!0});var Rot=s(aN);Luo=r(Rot,"ConvNextModel"),Rot.forEach(t),xuo=r(CAe," (ConvNext model)"),CAe.forEach(t),$uo=i($),wp=n($,"LI",{});var wAe=s(wp);ale=n(wAe,"STRONG",{});var Pot=s(ale);kuo=r(Pot,"ctrl"),Pot.forEach(t),Suo=r(wAe," \u2014 "),nN=n(wAe,"A",{href:!0});var Bot=s(nN);Ruo=r(Bot,"CTRLModel"),Bot.forEach(t),Puo=r(wAe," (CTRL model)"),wAe.forEach(t),Buo=i($),Ap=n($,"LI",{});var AAe=s(Ap);nle=n(AAe,"STRONG",{});var Iot=s(nle);Iuo=r(Iot,"cvt"),Iot.forEach(t),Nuo=r(AAe," \u2014 "),sN=n(AAe,"A",{href:!0});var Not=s(sN);quo=r(Not,"CvtModel"),Not.forEach(t),juo=r(AAe," (CvT model)"),AAe.forEach(t),Duo=i($),yp=n($,"LI",{});var yAe=s(yp);sle=n(yAe,"STRONG",{});var qot=s(sle);Guo=r(qot,"data2vec-audio"),qot.forEach(t),Ouo=r(yAe," \u2014 "),lN=n(yAe,"A",{href:!0});var jot=s(lN);Vuo=r(jot,"Data2VecAudioModel"),jot.forEach(t),Xuo=r(yAe," (Data2VecAudio model)"),yAe.forEach(t),zuo=i($),Lp=n($,"LI",{});var LAe=s(Lp);lle=n(LAe,"STRONG",{});var Dot=s(lle);Wuo=r(Dot,"data2vec-text"),Dot.forEach(t),Quo=r(LAe," \u2014 "),iN=n(LAe,"A",{href:!0});var Got=s(iN);Huo=r(Got,"Data2VecTextModel"),Got.forEach(t),Uuo=r(LAe," (Data2VecText model)"),LAe.forEach(t),Juo=i($),xp=n($,"LI",{});var xAe=s(xp);ile=n(xAe,"STRONG",{});var Oot=s(ile);Yuo=r(Oot,"data2vec-vision"),Oot.forEach(t),Kuo=r(xAe," \u2014 "),dN=n(xAe,"A",{href:!0});var Vot=s(dN);Zuo=r(Vot,"Data2VecVisionModel"),Vot.forEach(t),e4o=r(xAe," (Data2VecVision model)"),xAe.forEach(t),o4o=i($),$p=n($,"LI",{});var $Ae=s($p);dle=n($Ae,"STRONG",{});var Xot=s(dle);r4o=r(Xot,"deberta"),Xot.forEach(t),t4o=r($Ae," \u2014 "),cN=n($Ae,"A",{href:!0});var zot=s(cN);a4o=r(zot,"DebertaModel"),zot.forEach(t),n4o=r($Ae," (DeBERTa model)"),$Ae.forEach(t),s4o=i($),kp=n($,"LI",{});var kAe=s(kp);cle=n(kAe,"STRONG",{});var Wot=s(cle);l4o=r(Wot,"deberta-v2"),Wot.forEach(t),i4o=r(kAe," \u2014 "),fN=n(kAe,"A",{href:!0});var Qot=s(fN);d4o=r(Qot,"DebertaV2Model"),Qot.forEach(t),c4o=r(kAe," (DeBERTa-v2 model)"),kAe.forEach(t),f4o=i($),Sp=n($,"LI",{});var SAe=s(Sp);fle=n(SAe,"STRONG",{});var Hot=s(fle);m4o=r(Hot,"decision_transformer"),Hot.forEach(t),g4o=r(SAe," \u2014 "),mN=n(SAe,"A",{href:!0});var Uot=s(mN);h4o=r(Uot,"DecisionTransformerModel"),Uot.forEach(t),p4o=r(SAe," (Decision Transformer model)"),SAe.forEach(t),_4o=i($),Rp=n($,"LI",{});var RAe=s(Rp);mle=n(RAe,"STRONG",{});var Jot=s(mle);u4o=r(Jot,"deit"),Jot.forEach(t),b4o=r(RAe," \u2014 "),gN=n(RAe,"A",{href:!0});var Yot=s(gN);v4o=r(Yot,"DeiTModel"),Yot.forEach(t),F4o=r(RAe," (DeiT model)"),RAe.forEach(t),T4o=i($),Pp=n($,"LI",{});var PAe=s(Pp);gle=n(PAe,"STRONG",{});var Kot=s(gle);M4o=r(Kot,"detr"),Kot.forEach(t),E4o=r(PAe," \u2014 "),hN=n(PAe,"A",{href:!0});var Zot=s(hN);C4o=r(Zot,"DetrModel"),Zot.forEach(t),w4o=r(PAe," (DETR model)"),PAe.forEach(t),A4o=i($),Bp=n($,"LI",{});var BAe=s(Bp);hle=n(BAe,"STRONG",{});var ert=s(hle);y4o=r(ert,"distilbert"),ert.forEach(t),L4o=r(BAe," \u2014 "),pN=n(BAe,"A",{href:!0});var ort=s(pN);x4o=r(ort,"DistilBertModel"),ort.forEach(t),$4o=r(BAe," (DistilBERT model)"),BAe.forEach(t),k4o=i($),Ip=n($,"LI",{});var IAe=s(Ip);ple=n(IAe,"STRONG",{});var rrt=s(ple);S4o=r(rrt,"dpr"),rrt.forEach(t),R4o=r(IAe," \u2014 "),_N=n(IAe,"A",{href:!0});var trt=s(_N);P4o=r(trt,"DPRQuestionEncoder"),trt.forEach(t),B4o=r(IAe," (DPR model)"),IAe.forEach(t),I4o=i($),Np=n($,"LI",{});var NAe=s(Np);_le=n(NAe,"STRONG",{});var art=s(_le);N4o=r(art,"dpt"),art.forEach(t),q4o=r(NAe," \u2014 "),uN=n(NAe,"A",{href:!0});var nrt=s(uN);j4o=r(nrt,"DPTModel"),nrt.forEach(t),D4o=r(NAe," (DPT model)"),NAe.forEach(t),G4o=i($),qp=n($,"LI",{});var qAe=s(qp);ule=n(qAe,"STRONG",{});var srt=s(ule);O4o=r(srt,"electra"),srt.forEach(t),V4o=r(qAe," \u2014 "),bN=n(qAe,"A",{href:!0});var lrt=s(bN);X4o=r(lrt,"ElectraModel"),lrt.forEach(t),z4o=r(qAe," (ELECTRA model)"),qAe.forEach(t),W4o=i($),jp=n($,"LI",{});var jAe=s(jp);ble=n(jAe,"STRONG",{});var irt=s(ble);Q4o=r(irt,"flaubert"),irt.forEach(t),H4o=r(jAe," \u2014 "),vN=n(jAe,"A",{href:!0});var drt=s(vN);U4o=r(drt,"FlaubertModel"),drt.forEach(t),J4o=r(jAe," (FlauBERT model)"),jAe.forEach(t),Y4o=i($),Dp=n($,"LI",{});var DAe=s(Dp);vle=n(DAe,"STRONG",{});var crt=s(vle);K4o=r(crt,"flava"),crt.forEach(t),Z4o=r(DAe," \u2014 "),FN=n(DAe,"A",{href:!0});var frt=s(FN);e1o=r(frt,"FlavaModel"),frt.forEach(t),o1o=r(DAe," (Flava model)"),DAe.forEach(t),r1o=i($),Gp=n($,"LI",{});var GAe=s(Gp);Fle=n(GAe,"STRONG",{});var mrt=s(Fle);t1o=r(mrt,"fnet"),mrt.forEach(t),a1o=r(GAe," \u2014 "),TN=n(GAe,"A",{href:!0});var grt=s(TN);n1o=r(grt,"FNetModel"),grt.forEach(t),s1o=r(GAe," (FNet model)"),GAe.forEach(t),l1o=i($),Op=n($,"LI",{});var OAe=s(Op);Tle=n(OAe,"STRONG",{});var hrt=s(Tle);i1o=r(hrt,"fsmt"),hrt.forEach(t),d1o=r(OAe," \u2014 "),MN=n(OAe,"A",{href:!0});var prt=s(MN);c1o=r(prt,"FSMTModel"),prt.forEach(t),f1o=r(OAe," (FairSeq Machine-Translation model)"),OAe.forEach(t),m1o=i($),Bs=n($,"LI",{});var Y$=s(Bs);Mle=n(Y$,"STRONG",{});var _rt=s(Mle);g1o=r(_rt,"funnel"),_rt.forEach(t),h1o=r(Y$," \u2014 "),EN=n(Y$,"A",{href:!0});var urt=s(EN);p1o=r(urt,"FunnelModel"),urt.forEach(t),_1o=r(Y$," or "),CN=n(Y$,"A",{href:!0});var brt=s(CN);u1o=r(brt,"FunnelBaseModel"),brt.forEach(t),b1o=r(Y$," (Funnel Transformer model)"),Y$.forEach(t),v1o=i($),Vp=n($,"LI",{});var VAe=s(Vp);Ele=n(VAe,"STRONG",{});var vrt=s(Ele);F1o=r(vrt,"glpn"),vrt.forEach(t),T1o=r(VAe," \u2014 "),wN=n(VAe,"A",{href:!0});var Frt=s(wN);M1o=r(Frt,"GLPNModel"),Frt.forEach(t),E1o=r(VAe," (GLPN model)"),VAe.forEach(t),C1o=i($),Xp=n($,"LI",{});var XAe=s(Xp);Cle=n(XAe,"STRONG",{});var Trt=s(Cle);w1o=r(Trt,"gpt2"),Trt.forEach(t),A1o=r(XAe," \u2014 "),AN=n(XAe,"A",{href:!0});var Mrt=s(AN);y1o=r(Mrt,"GPT2Model"),Mrt.forEach(t),L1o=r(XAe," (OpenAI GPT-2 model)"),XAe.forEach(t),x1o=i($),zp=n($,"LI",{});var zAe=s(zp);wle=n(zAe,"STRONG",{});var Ert=s(wle);$1o=r(Ert,"gpt_neo"),Ert.forEach(t),k1o=r(zAe," \u2014 "),yN=n(zAe,"A",{href:!0});var Crt=s(yN);S1o=r(Crt,"GPTNeoModel"),Crt.forEach(t),R1o=r(zAe," (GPT Neo model)"),zAe.forEach(t),P1o=i($),Wp=n($,"LI",{});var WAe=s(Wp);Ale=n(WAe,"STRONG",{});var wrt=s(Ale);B1o=r(wrt,"gpt_neox"),wrt.forEach(t),I1o=r(WAe," \u2014 "),LN=n(WAe,"A",{href:!0});var Art=s(LN);N1o=r(Art,"GPTNeoXModel"),Art.forEach(t),q1o=r(WAe," (GPT NeoX model)"),WAe.forEach(t),j1o=i($),Qp=n($,"LI",{});var QAe=s(Qp);yle=n(QAe,"STRONG",{});var yrt=s(yle);D1o=r(yrt,"gptj"),yrt.forEach(t),G1o=r(QAe," \u2014 "),xN=n(QAe,"A",{href:!0});var Lrt=s(xN);O1o=r(Lrt,"GPTJModel"),Lrt.forEach(t),V1o=r(QAe," (GPT-J model)"),QAe.forEach(t),X1o=i($),Hp=n($,"LI",{});var HAe=s(Hp);Lle=n(HAe,"STRONG",{});var xrt=s(Lle);z1o=r(xrt,"hubert"),xrt.forEach(t),W1o=r(HAe," \u2014 "),$N=n(HAe,"A",{href:!0});var $rt=s($N);Q1o=r($rt,"HubertModel"),$rt.forEach(t),H1o=r(HAe," (Hubert model)"),HAe.forEach(t),U1o=i($),Up=n($,"LI",{});var UAe=s(Up);xle=n(UAe,"STRONG",{});var krt=s(xle);J1o=r(krt,"ibert"),krt.forEach(t),Y1o=r(UAe," \u2014 "),kN=n(UAe,"A",{href:!0});var Srt=s(kN);K1o=r(Srt,"IBertModel"),Srt.forEach(t),Z1o=r(UAe," (I-BERT model)"),UAe.forEach(t),ebo=i($),Jp=n($,"LI",{});var JAe=s(Jp);$le=n(JAe,"STRONG",{});var Rrt=s($le);obo=r(Rrt,"imagegpt"),Rrt.forEach(t),rbo=r(JAe," \u2014 "),SN=n(JAe,"A",{href:!0});var Prt=s(SN);tbo=r(Prt,"ImageGPTModel"),Prt.forEach(t),abo=r(JAe," (ImageGPT model)"),JAe.forEach(t),nbo=i($),Yp=n($,"LI",{});var YAe=s(Yp);kle=n(YAe,"STRONG",{});var Brt=s(kle);sbo=r(Brt,"layoutlm"),Brt.forEach(t),lbo=r(YAe," \u2014 "),RN=n(YAe,"A",{href:!0});var Irt=s(RN);ibo=r(Irt,"LayoutLMModel"),Irt.forEach(t),dbo=r(YAe," (LayoutLM model)"),YAe.forEach(t),cbo=i($),Kp=n($,"LI",{});var KAe=s(Kp);Sle=n(KAe,"STRONG",{});var Nrt=s(Sle);fbo=r(Nrt,"layoutlmv2"),Nrt.forEach(t),mbo=r(KAe," \u2014 "),PN=n(KAe,"A",{href:!0});var qrt=s(PN);gbo=r(qrt,"LayoutLMv2Model"),qrt.forEach(t),hbo=r(KAe," (LayoutLMv2 model)"),KAe.forEach(t),pbo=i($),Zp=n($,"LI",{});var ZAe=s(Zp);Rle=n(ZAe,"STRONG",{});var jrt=s(Rle);_bo=r(jrt,"layoutlmv3"),jrt.forEach(t),ubo=r(ZAe," \u2014 "),BN=n(ZAe,"A",{href:!0});var Drt=s(BN);bbo=r(Drt,"LayoutLMv3Model"),Drt.forEach(t),vbo=r(ZAe," (LayoutLMv3 model)"),ZAe.forEach(t),Fbo=i($),e_=n($,"LI",{});var eye=s(e_);Ple=n(eye,"STRONG",{});var Grt=s(Ple);Tbo=r(Grt,"led"),Grt.forEach(t),Mbo=r(eye," \u2014 "),IN=n(eye,"A",{href:!0});var Ort=s(IN);Ebo=r(Ort,"LEDModel"),Ort.forEach(t),Cbo=r(eye," (LED model)"),eye.forEach(t),wbo=i($),o_=n($,"LI",{});var oye=s(o_);Ble=n(oye,"STRONG",{});var Vrt=s(Ble);Abo=r(Vrt,"longformer"),Vrt.forEach(t),ybo=r(oye," \u2014 "),NN=n(oye,"A",{href:!0});var Xrt=s(NN);Lbo=r(Xrt,"LongformerModel"),Xrt.forEach(t),xbo=r(oye," (Longformer model)"),oye.forEach(t),$bo=i($),r_=n($,"LI",{});var rye=s(r_);Ile=n(rye,"STRONG",{});var zrt=s(Ile);kbo=r(zrt,"luke"),zrt.forEach(t),Sbo=r(rye," \u2014 "),qN=n(rye,"A",{href:!0});var Wrt=s(qN);Rbo=r(Wrt,"LukeModel"),Wrt.forEach(t),Pbo=r(rye," (LUKE model)"),rye.forEach(t),Bbo=i($),t_=n($,"LI",{});var tye=s(t_);Nle=n(tye,"STRONG",{});var Qrt=s(Nle);Ibo=r(Qrt,"lxmert"),Qrt.forEach(t),Nbo=r(tye," \u2014 "),jN=n(tye,"A",{href:!0});var Hrt=s(jN);qbo=r(Hrt,"LxmertModel"),Hrt.forEach(t),jbo=r(tye," (LXMERT model)"),tye.forEach(t),Dbo=i($),a_=n($,"LI",{});var aye=s(a_);qle=n(aye,"STRONG",{});var Urt=s(qle);Gbo=r(Urt,"m2m_100"),Urt.forEach(t),Obo=r(aye," \u2014 "),DN=n(aye,"A",{href:!0});var Jrt=s(DN);Vbo=r(Jrt,"M2M100Model"),Jrt.forEach(t),Xbo=r(aye," (M2M100 model)"),aye.forEach(t),zbo=i($),n_=n($,"LI",{});var nye=s(n_);jle=n(nye,"STRONG",{});var Yrt=s(jle);Wbo=r(Yrt,"marian"),Yrt.forEach(t),Qbo=r(nye," \u2014 "),GN=n(nye,"A",{href:!0});var Krt=s(GN);Hbo=r(Krt,"MarianModel"),Krt.forEach(t),Ubo=r(nye," (Marian model)"),nye.forEach(t),Jbo=i($),s_=n($,"LI",{});var sye=s(s_);Dle=n(sye,"STRONG",{});var Zrt=s(Dle);Ybo=r(Zrt,"maskformer"),Zrt.forEach(t),Kbo=r(sye," \u2014 "),ON=n(sye,"A",{href:!0});var ett=s(ON);Zbo=r(ett,"MaskFormerModel"),ett.forEach(t),e2o=r(sye," (MaskFormer model)"),sye.forEach(t),o2o=i($),l_=n($,"LI",{});var lye=s(l_);Gle=n(lye,"STRONG",{});var ott=s(Gle);r2o=r(ott,"mbart"),ott.forEach(t),t2o=r(lye," \u2014 "),VN=n(lye,"A",{href:!0});var rtt=s(VN);a2o=r(rtt,"MBartModel"),rtt.forEach(t),n2o=r(lye," (mBART model)"),lye.forEach(t),s2o=i($),i_=n($,"LI",{});var iye=s(i_);Ole=n(iye,"STRONG",{});var ttt=s(Ole);l2o=r(ttt,"megatron-bert"),ttt.forEach(t),i2o=r(iye," \u2014 "),XN=n(iye,"A",{href:!0});var att=s(XN);d2o=r(att,"MegatronBertModel"),att.forEach(t),c2o=r(iye," (MegatronBert model)"),iye.forEach(t),f2o=i($),d_=n($,"LI",{});var dye=s(d_);Vle=n(dye,"STRONG",{});var ntt=s(Vle);m2o=r(ntt,"mobilebert"),ntt.forEach(t),g2o=r(dye," \u2014 "),zN=n(dye,"A",{href:!0});var stt=s(zN);h2o=r(stt,"MobileBertModel"),stt.forEach(t),p2o=r(dye," (MobileBERT model)"),dye.forEach(t),_2o=i($),c_=n($,"LI",{});var cye=s(c_);Xle=n(cye,"STRONG",{});var ltt=s(Xle);u2o=r(ltt,"mpnet"),ltt.forEach(t),b2o=r(cye," \u2014 "),WN=n(cye,"A",{href:!0});var itt=s(WN);v2o=r(itt,"MPNetModel"),itt.forEach(t),F2o=r(cye," (MPNet model)"),cye.forEach(t),T2o=i($),f_=n($,"LI",{});var fye=s(f_);zle=n(fye,"STRONG",{});var dtt=s(zle);M2o=r(dtt,"mt5"),dtt.forEach(t),E2o=r(fye," \u2014 "),QN=n(fye,"A",{href:!0});var ctt=s(QN);C2o=r(ctt,"MT5Model"),ctt.forEach(t),w2o=r(fye," (mT5 model)"),fye.forEach(t),A2o=i($),m_=n($,"LI",{});var mye=s(m_);Wle=n(mye,"STRONG",{});var ftt=s(Wle);y2o=r(ftt,"nystromformer"),ftt.forEach(t),L2o=r(mye," \u2014 "),HN=n(mye,"A",{href:!0});var mtt=s(HN);x2o=r(mtt,"NystromformerModel"),mtt.forEach(t),$2o=r(mye," (Nystromformer model)"),mye.forEach(t),k2o=i($),g_=n($,"LI",{});var gye=s(g_);Qle=n(gye,"STRONG",{});var gtt=s(Qle);S2o=r(gtt,"openai-gpt"),gtt.forEach(t),R2o=r(gye," \u2014 "),UN=n(gye,"A",{href:!0});var htt=s(UN);P2o=r(htt,"OpenAIGPTModel"),htt.forEach(t),B2o=r(gye," (OpenAI GPT model)"),gye.forEach(t),I2o=i($),h_=n($,"LI",{});var hye=s(h_);Hle=n(hye,"STRONG",{});var ptt=s(Hle);N2o=r(ptt,"opt"),ptt.forEach(t),q2o=r(hye," \u2014 "),JN=n(hye,"A",{href:!0});var _tt=s(JN);j2o=r(_tt,"OPTModel"),_tt.forEach(t),D2o=r(hye," (OPT model)"),hye.forEach(t),G2o=i($),p_=n($,"LI",{});var pye=s(p_);Ule=n(pye,"STRONG",{});var utt=s(Ule);O2o=r(utt,"pegasus"),utt.forEach(t),V2o=r(pye," \u2014 "),YN=n(pye,"A",{href:!0});var btt=s(YN);X2o=r(btt,"PegasusModel"),btt.forEach(t),z2o=r(pye," (Pegasus model)"),pye.forEach(t),W2o=i($),__=n($,"LI",{});var _ye=s(__);Jle=n(_ye,"STRONG",{});var vtt=s(Jle);Q2o=r(vtt,"perceiver"),vtt.forEach(t),H2o=r(_ye," \u2014 "),KN=n(_ye,"A",{href:!0});var Ftt=s(KN);U2o=r(Ftt,"PerceiverModel"),Ftt.forEach(t),J2o=r(_ye," (Perceiver model)"),_ye.forEach(t),Y2o=i($),u_=n($,"LI",{});var uye=s(u_);Yle=n(uye,"STRONG",{});var Ttt=s(Yle);K2o=r(Ttt,"plbart"),Ttt.forEach(t),Z2o=r(uye," \u2014 "),ZN=n(uye,"A",{href:!0});var Mtt=s(ZN);evo=r(Mtt,"PLBartModel"),Mtt.forEach(t),ovo=r(uye," (PLBart model)"),uye.forEach(t),rvo=i($),b_=n($,"LI",{});var bye=s(b_);Kle=n(bye,"STRONG",{});var Ett=s(Kle);tvo=r(Ett,"poolformer"),Ett.forEach(t),avo=r(bye," \u2014 "),eq=n(bye,"A",{href:!0});var Ctt=s(eq);nvo=r(Ctt,"PoolFormerModel"),Ctt.forEach(t),svo=r(bye," (PoolFormer model)"),bye.forEach(t),lvo=i($),v_=n($,"LI",{});var vye=s(v_);Zle=n(vye,"STRONG",{});var wtt=s(Zle);ivo=r(wtt,"prophetnet"),wtt.forEach(t),dvo=r(vye," \u2014 "),oq=n(vye,"A",{href:!0});var Att=s(oq);cvo=r(Att,"ProphetNetModel"),Att.forEach(t),fvo=r(vye," (ProphetNet model)"),vye.forEach(t),mvo=i($),F_=n($,"LI",{});var Fye=s(F_);eie=n(Fye,"STRONG",{});var ytt=s(eie);gvo=r(ytt,"qdqbert"),ytt.forEach(t),hvo=r(Fye," \u2014 "),rq=n(Fye,"A",{href:!0});var Ltt=s(rq);pvo=r(Ltt,"QDQBertModel"),Ltt.forEach(t),_vo=r(Fye," (QDQBert model)"),Fye.forEach(t),uvo=i($),T_=n($,"LI",{});var Tye=s(T_);oie=n(Tye,"STRONG",{});var xtt=s(oie);bvo=r(xtt,"reformer"),xtt.forEach(t),vvo=r(Tye," \u2014 "),tq=n(Tye,"A",{href:!0});var $tt=s(tq);Fvo=r($tt,"ReformerModel"),$tt.forEach(t),Tvo=r(Tye," (Reformer model)"),Tye.forEach(t),Mvo=i($),M_=n($,"LI",{});var Mye=s(M_);rie=n(Mye,"STRONG",{});var ktt=s(rie);Evo=r(ktt,"regnet"),ktt.forEach(t),Cvo=r(Mye," \u2014 "),aq=n(Mye,"A",{href:!0});var Stt=s(aq);wvo=r(Stt,"RegNetModel"),Stt.forEach(t),Avo=r(Mye," (RegNet model)"),Mye.forEach(t),yvo=i($),E_=n($,"LI",{});var Eye=s(E_);tie=n(Eye,"STRONG",{});var Rtt=s(tie);Lvo=r(Rtt,"rembert"),Rtt.forEach(t),xvo=r(Eye," \u2014 "),nq=n(Eye,"A",{href:!0});var Ptt=s(nq);$vo=r(Ptt,"RemBertModel"),Ptt.forEach(t),kvo=r(Eye," (RemBERT model)"),Eye.forEach(t),Svo=i($),C_=n($,"LI",{});var Cye=s(C_);aie=n(Cye,"STRONG",{});var Btt=s(aie);Rvo=r(Btt,"resnet"),Btt.forEach(t),Pvo=r(Cye," \u2014 "),sq=n(Cye,"A",{href:!0});var Itt=s(sq);Bvo=r(Itt,"ResNetModel"),Itt.forEach(t),Ivo=r(Cye," (ResNet model)"),Cye.forEach(t),Nvo=i($),w_=n($,"LI",{});var wye=s(w_);nie=n(wye,"STRONG",{});var Ntt=s(nie);qvo=r(Ntt,"retribert"),Ntt.forEach(t),jvo=r(wye," \u2014 "),lq=n(wye,"A",{href:!0});var qtt=s(lq);Dvo=r(qtt,"RetriBertModel"),qtt.forEach(t),Gvo=r(wye," (RetriBERT model)"),wye.forEach(t),Ovo=i($),A_=n($,"LI",{});var Aye=s(A_);sie=n(Aye,"STRONG",{});var jtt=s(sie);Vvo=r(jtt,"roberta"),jtt.forEach(t),Xvo=r(Aye," \u2014 "),iq=n(Aye,"A",{href:!0});var Dtt=s(iq);zvo=r(Dtt,"RobertaModel"),Dtt.forEach(t),Wvo=r(Aye," (RoBERTa model)"),Aye.forEach(t),Qvo=i($),y_=n($,"LI",{});var yye=s(y_);lie=n(yye,"STRONG",{});var Gtt=s(lie);Hvo=r(Gtt,"roformer"),Gtt.forEach(t),Uvo=r(yye," \u2014 "),dq=n(yye,"A",{href:!0});var Ott=s(dq);Jvo=r(Ott,"RoFormerModel"),Ott.forEach(t),Yvo=r(yye," (RoFormer model)"),yye.forEach(t),Kvo=i($),L_=n($,"LI",{});var Lye=s(L_);iie=n(Lye,"STRONG",{});var Vtt=s(iie);Zvo=r(Vtt,"segformer"),Vtt.forEach(t),e3o=r(Lye," \u2014 "),cq=n(Lye,"A",{href:!0});var Xtt=s(cq);o3o=r(Xtt,"SegformerModel"),Xtt.forEach(t),r3o=r(Lye," (SegFormer model)"),Lye.forEach(t),t3o=i($),x_=n($,"LI",{});var xye=s(x_);die=n(xye,"STRONG",{});var ztt=s(die);a3o=r(ztt,"sew"),ztt.forEach(t),n3o=r(xye," \u2014 "),fq=n(xye,"A",{href:!0});var Wtt=s(fq);s3o=r(Wtt,"SEWModel"),Wtt.forEach(t),l3o=r(xye," (SEW model)"),xye.forEach(t),i3o=i($),$_=n($,"LI",{});var $ye=s($_);cie=n($ye,"STRONG",{});var Qtt=s(cie);d3o=r(Qtt,"sew-d"),Qtt.forEach(t),c3o=r($ye," \u2014 "),mq=n($ye,"A",{href:!0});var Htt=s(mq);f3o=r(Htt,"SEWDModel"),Htt.forEach(t),m3o=r($ye," (SEW-D model)"),$ye.forEach(t),g3o=i($),k_=n($,"LI",{});var kye=s(k_);fie=n(kye,"STRONG",{});var Utt=s(fie);h3o=r(Utt,"speech_to_text"),Utt.forEach(t),p3o=r(kye," \u2014 "),gq=n(kye,"A",{href:!0});var Jtt=s(gq);_3o=r(Jtt,"Speech2TextModel"),Jtt.forEach(t),u3o=r(kye," (Speech2Text model)"),kye.forEach(t),b3o=i($),S_=n($,"LI",{});var Sye=s(S_);mie=n(Sye,"STRONG",{});var Ytt=s(mie);v3o=r(Ytt,"splinter"),Ytt.forEach(t),F3o=r(Sye," \u2014 "),hq=n(Sye,"A",{href:!0});var Ktt=s(hq);T3o=r(Ktt,"SplinterModel"),Ktt.forEach(t),M3o=r(Sye," (Splinter model)"),Sye.forEach(t),E3o=i($),R_=n($,"LI",{});var Rye=s(R_);gie=n(Rye,"STRONG",{});var Ztt=s(gie);C3o=r(Ztt,"squeezebert"),Ztt.forEach(t),w3o=r(Rye," \u2014 "),pq=n(Rye,"A",{href:!0});var eat=s(pq);A3o=r(eat,"SqueezeBertModel"),eat.forEach(t),y3o=r(Rye," (SqueezeBERT model)"),Rye.forEach(t),L3o=i($),P_=n($,"LI",{});var Pye=s(P_);hie=n(Pye,"STRONG",{});var oat=s(hie);x3o=r(oat,"swin"),oat.forEach(t),$3o=r(Pye," \u2014 "),_q=n(Pye,"A",{href:!0});var rat=s(_q);k3o=r(rat,"SwinModel"),rat.forEach(t),S3o=r(Pye," (Swin model)"),Pye.forEach(t),R3o=i($),B_=n($,"LI",{});var Bye=s(B_);pie=n(Bye,"STRONG",{});var tat=s(pie);P3o=r(tat,"t5"),tat.forEach(t),B3o=r(Bye," \u2014 "),uq=n(Bye,"A",{href:!0});var aat=s(uq);I3o=r(aat,"T5Model"),aat.forEach(t),N3o=r(Bye," (T5 model)"),Bye.forEach(t),q3o=i($),I_=n($,"LI",{});var Iye=s(I_);_ie=n(Iye,"STRONG",{});var nat=s(_ie);j3o=r(nat,"tapas"),nat.forEach(t),D3o=r(Iye," \u2014 "),bq=n(Iye,"A",{href:!0});var sat=s(bq);G3o=r(sat,"TapasModel"),sat.forEach(t),O3o=r(Iye," (TAPAS model)"),Iye.forEach(t),V3o=i($),N_=n($,"LI",{});var Nye=s(N_);uie=n(Nye,"STRONG",{});var lat=s(uie);X3o=r(lat,"trajectory_transformer"),lat.forEach(t),z3o=r(Nye," \u2014 "),vq=n(Nye,"A",{href:!0});var iat=s(vq);W3o=r(iat,"TrajectoryTransformerModel"),iat.forEach(t),Q3o=r(Nye," (Trajectory Transformer model)"),Nye.forEach(t),H3o=i($),q_=n($,"LI",{});var qye=s(q_);bie=n(qye,"STRONG",{});var dat=s(bie);U3o=r(dat,"transfo-xl"),dat.forEach(t),J3o=r(qye," \u2014 "),Fq=n(qye,"A",{href:!0});var cat=s(Fq);Y3o=r(cat,"TransfoXLModel"),cat.forEach(t),K3o=r(qye," (Transformer-XL model)"),qye.forEach(t),Z3o=i($),j_=n($,"LI",{});var jye=s(j_);vie=n(jye,"STRONG",{});var fat=s(vie);eFo=r(fat,"unispeech"),fat.forEach(t),oFo=r(jye," \u2014 "),Tq=n(jye,"A",{href:!0});var mat=s(Tq);rFo=r(mat,"UniSpeechModel"),mat.forEach(t),tFo=r(jye," (UniSpeech model)"),jye.forEach(t),aFo=i($),D_=n($,"LI",{});var Dye=s(D_);Fie=n(Dye,"STRONG",{});var gat=s(Fie);nFo=r(gat,"unispeech-sat"),gat.forEach(t),sFo=r(Dye," \u2014 "),Mq=n(Dye,"A",{href:!0});var hat=s(Mq);lFo=r(hat,"UniSpeechSatModel"),hat.forEach(t),iFo=r(Dye," (UniSpeechSat model)"),Dye.forEach(t),dFo=i($),G_=n($,"LI",{});var Gye=s(G_);Tie=n(Gye,"STRONG",{});var pat=s(Tie);cFo=r(pat,"van"),pat.forEach(t),fFo=r(Gye," \u2014 "),Eq=n(Gye,"A",{href:!0});var _at=s(Eq);mFo=r(_at,"VanModel"),_at.forEach(t),gFo=r(Gye," (VAN model)"),Gye.forEach(t),hFo=i($),O_=n($,"LI",{});var Oye=s(O_);Mie=n(Oye,"STRONG",{});var uat=s(Mie);pFo=r(uat,"vilt"),uat.forEach(t),_Fo=r(Oye," \u2014 "),Cq=n(Oye,"A",{href:!0});var bat=s(Cq);uFo=r(bat,"ViltModel"),bat.forEach(t),bFo=r(Oye," (ViLT model)"),Oye.forEach(t),vFo=i($),V_=n($,"LI",{});var Vye=s(V_);Eie=n(Vye,"STRONG",{});var vat=s(Eie);FFo=r(vat,"vision-text-dual-encoder"),vat.forEach(t),TFo=r(Vye," \u2014 "),wq=n(Vye,"A",{href:!0});var Fat=s(wq);MFo=r(Fat,"VisionTextDualEncoderModel"),Fat.forEach(t),EFo=r(Vye," (VisionTextDualEncoder model)"),Vye.forEach(t),CFo=i($),X_=n($,"LI",{});var Xye=s(X_);Cie=n(Xye,"STRONG",{});var Tat=s(Cie);wFo=r(Tat,"visual_bert"),Tat.forEach(t),AFo=r(Xye," \u2014 "),Aq=n(Xye,"A",{href:!0});var Mat=s(Aq);yFo=r(Mat,"VisualBertModel"),Mat.forEach(t),LFo=r(Xye," (VisualBert model)"),Xye.forEach(t),xFo=i($),z_=n($,"LI",{});var zye=s(z_);wie=n(zye,"STRONG",{});var Eat=s(wie);$Fo=r(Eat,"vit"),Eat.forEach(t),kFo=r(zye," \u2014 "),yq=n(zye,"A",{href:!0});var Cat=s(yq);SFo=r(Cat,"ViTModel"),Cat.forEach(t),RFo=r(zye," (ViT model)"),zye.forEach(t),PFo=i($),W_=n($,"LI",{});var Wye=s(W_);Aie=n(Wye,"STRONG",{});var wat=s(Aie);BFo=r(wat,"vit_mae"),wat.forEach(t),IFo=r(Wye," \u2014 "),Lq=n(Wye,"A",{href:!0});var Aat=s(Lq);NFo=r(Aat,"ViTMAEModel"),Aat.forEach(t),qFo=r(Wye," (ViTMAE model)"),Wye.forEach(t),jFo=i($),Q_=n($,"LI",{});var Qye=s(Q_);yie=n(Qye,"STRONG",{});var yat=s(yie);DFo=r(yat,"wav2vec2"),yat.forEach(t),GFo=r(Qye," \u2014 "),xq=n(Qye,"A",{href:!0});var Lat=s(xq);OFo=r(Lat,"Wav2Vec2Model"),Lat.forEach(t),VFo=r(Qye," (Wav2Vec2 model)"),Qye.forEach(t),XFo=i($),H_=n($,"LI",{});var Hye=s(H_);Lie=n(Hye,"STRONG",{});var xat=s(Lie);zFo=r(xat,"wav2vec2-conformer"),xat.forEach(t),WFo=r(Hye," \u2014 "),$q=n(Hye,"A",{href:!0});var $at=s($q);QFo=r($at,"Wav2Vec2ConformerModel"),$at.forEach(t),HFo=r(Hye," (Wav2Vec2-Conformer model)"),Hye.forEach(t),UFo=i($),U_=n($,"LI",{});var Uye=s(U_);xie=n(Uye,"STRONG",{});var kat=s(xie);JFo=r(kat,"wavlm"),kat.forEach(t),YFo=r(Uye," \u2014 "),kq=n(Uye,"A",{href:!0});var Sat=s(kq);KFo=r(Sat,"WavLMModel"),Sat.forEach(t),ZFo=r(Uye," (WavLM model)"),Uye.forEach(t),eTo=i($),J_=n($,"LI",{});var Jye=s(J_);$ie=n(Jye,"STRONG",{});var Rat=s($ie);oTo=r(Rat,"xglm"),Rat.forEach(t),rTo=r(Jye," \u2014 "),Sq=n(Jye,"A",{href:!0});var Pat=s(Sq);tTo=r(Pat,"XGLMModel"),Pat.forEach(t),aTo=r(Jye," (XGLM model)"),Jye.forEach(t),nTo=i($),Y_=n($,"LI",{});var Yye=s(Y_);kie=n(Yye,"STRONG",{});var Bat=s(kie);sTo=r(Bat,"xlm"),Bat.forEach(t),lTo=r(Yye," \u2014 "),Rq=n(Yye,"A",{href:!0});var Iat=s(Rq);iTo=r(Iat,"XLMModel"),Iat.forEach(t),dTo=r(Yye," (XLM model)"),Yye.forEach(t),cTo=i($),K_=n($,"LI",{});var Kye=s(K_);Sie=n(Kye,"STRONG",{});var Nat=s(Sie);fTo=r(Nat,"xlm-prophetnet"),Nat.forEach(t),mTo=r(Kye," \u2014 "),Pq=n(Kye,"A",{href:!0});var qat=s(Pq);gTo=r(qat,"XLMProphetNetModel"),qat.forEach(t),hTo=r(Kye," (XLMProphetNet model)"),Kye.forEach(t),pTo=i($),Z_=n($,"LI",{});var Zye=s(Z_);Rie=n(Zye,"STRONG",{});var jat=s(Rie);_To=r(jat,"xlm-roberta"),jat.forEach(t),uTo=r(Zye," \u2014 "),Bq=n(Zye,"A",{href:!0});var Dat=s(Bq);bTo=r(Dat,"XLMRobertaModel"),Dat.forEach(t),vTo=r(Zye," (XLM-RoBERTa model)"),Zye.forEach(t),FTo=i($),eu=n($,"LI",{});var eLe=s(eu);Pie=n(eLe,"STRONG",{});var Gat=s(Pie);TTo=r(Gat,"xlm-roberta-xl"),Gat.forEach(t),MTo=r(eLe," \u2014 "),Iq=n(eLe,"A",{href:!0});var Oat=s(Iq);ETo=r(Oat,"XLMRobertaXLModel"),Oat.forEach(t),CTo=r(eLe," (XLM-RoBERTa-XL model)"),eLe.forEach(t),wTo=i($),ou=n($,"LI",{});var oLe=s(ou);Bie=n(oLe,"STRONG",{});var Vat=s(Bie);ATo=r(Vat,"xlnet"),Vat.forEach(t),yTo=r(oLe," \u2014 "),Nq=n(oLe,"A",{href:!0});var Xat=s(Nq);LTo=r(Xat,"XLNetModel"),Xat.forEach(t),xTo=r(oLe," (XLNet model)"),oLe.forEach(t),$To=i($),ru=n($,"LI",{});var rLe=s(ru);Iie=n(rLe,"STRONG",{});var zat=s(Iie);kTo=r(zat,"yolos"),zat.forEach(t),STo=r(rLe," \u2014 "),qq=n(rLe,"A",{href:!0});var Wat=s(qq);RTo=r(Wat,"YolosModel"),Wat.forEach(t),PTo=r(rLe," (YOLOS model)"),rLe.forEach(t),BTo=i($),tu=n($,"LI",{});var tLe=s(tu);Nie=n(tLe,"STRONG",{});var Qat=s(Nie);ITo=r(Qat,"yoso"),Qat.forEach(t),NTo=r(tLe," \u2014 "),jq=n(tLe,"A",{href:!0});var Hat=s(jq);qTo=r(Hat,"YosoModel"),Hat.forEach(t),jTo=r(tLe," (YOSO model)"),tLe.forEach(t),$.forEach(t),DTo=i(oa),au=n(oa,"P",{});var aLe=s(au);GTo=r(aLe,"The model is set in evaluation mode by default using "),qie=n(aLe,"CODE",{});var Uat=s(qie);OTo=r(Uat,"model.eval()"),Uat.forEach(t),VTo=r(aLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=n(aLe,"CODE",{});var Jat=s(jie);XTo=r(Jat,"model.train()"),Jat.forEach(t),aLe.forEach(t),zTo=i(oa),T(nu.$$.fragment,oa),oa.forEach(t),Os.forEach(t),Wqe=i(f),xi=n(f,"H2",{class:!0});var JDe=s(xi);su=n(JDe,"A",{id:!0,class:!0,href:!0});var Yat=s(su);Die=n(Yat,"SPAN",{});var Kat=s(Die);T(my.$$.fragment,Kat),Kat.forEach(t),Yat.forEach(t),WTo=i(JDe),Gie=n(JDe,"SPAN",{});var Zat=s(Gie);QTo=r(Zat,"AutoModelForPreTraining"),Zat.forEach(t),JDe.forEach(t),Qqe=i(f),xo=n(f,"DIV",{class:!0});var Vs=s(xo);T(gy.$$.fragment,Vs),HTo=i(Vs),$i=n(Vs,"P",{});var BZ=s($i);UTo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Dq=n(BZ,"A",{href:!0});var ent=s(Dq);JTo=r(ent,"from_pretrained()"),ent.forEach(t),YTo=r(BZ," class method or the "),Gq=n(BZ,"A",{href:!0});var ont=s(Gq);KTo=r(ont,"from_config()"),ont.forEach(t),ZTo=r(BZ,` class
method.`),BZ.forEach(t),e7o=i(Vs),hy=n(Vs,"P",{});var YDe=s(hy);o7o=r(YDe,"This class cannot be instantiated directly using "),Oie=n(YDe,"CODE",{});var rnt=s(Oie);r7o=r(rnt,"__init__()"),rnt.forEach(t),t7o=r(YDe," (throws an error)."),YDe.forEach(t),a7o=i(Vs),at=n(Vs,"DIV",{class:!0});var Gw=s(at);T(py.$$.fragment,Gw),n7o=i(Gw),Vie=n(Gw,"P",{});var tnt=s(Vie);s7o=r(tnt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tnt.forEach(t),l7o=i(Gw),ki=n(Gw,"P",{});var IZ=s(ki);i7o=r(IZ,`Note:
Loading a model from its configuration file does `),Xie=n(IZ,"STRONG",{});var ant=s(Xie);d7o=r(ant,"not"),ant.forEach(t),c7o=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oq=n(IZ,"A",{href:!0});var nnt=s(Oq);f7o=r(nnt,"from_pretrained()"),nnt.forEach(t),m7o=r(IZ," to load the model weights."),IZ.forEach(t),g7o=i(Gw),T(lu.$$.fragment,Gw),Gw.forEach(t),h7o=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(_y.$$.fragment,ra),p7o=i(ra),zie=n(ra,"P",{});var snt=s(zie);_7o=r(snt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),snt.forEach(t),u7o=i(ra),xa=n(ra,"P",{});var Ow=s(xa);b7o=r(Ow,"The model class to instantiate is selected based on the "),Wie=n(Ow,"CODE",{});var lnt=s(Wie);v7o=r(lnt,"model_type"),lnt.forEach(t),F7o=r(Ow,` property of the config object (either
passed as an argument or loaded from `),Qie=n(Ow,"CODE",{});var int=s(Qie);T7o=r(int,"pretrained_model_name_or_path"),int.forEach(t),M7o=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hie=n(Ow,"CODE",{});var dnt=s(Hie);E7o=r(dnt,"pretrained_model_name_or_path"),dnt.forEach(t),C7o=r(Ow,":"),Ow.forEach(t),w7o=i(ra),G=n(ra,"UL",{});var O=s(G);iu=n(O,"LI",{});var nLe=s(iu);Uie=n(nLe,"STRONG",{});var cnt=s(Uie);A7o=r(cnt,"albert"),cnt.forEach(t),y7o=r(nLe," \u2014 "),Vq=n(nLe,"A",{href:!0});var fnt=s(Vq);L7o=r(fnt,"AlbertForPreTraining"),fnt.forEach(t),x7o=r(nLe," (ALBERT model)"),nLe.forEach(t),$7o=i(O),du=n(O,"LI",{});var sLe=s(du);Jie=n(sLe,"STRONG",{});var mnt=s(Jie);k7o=r(mnt,"bart"),mnt.forEach(t),S7o=r(sLe," \u2014 "),Xq=n(sLe,"A",{href:!0});var gnt=s(Xq);R7o=r(gnt,"BartForConditionalGeneration"),gnt.forEach(t),P7o=r(sLe," (BART model)"),sLe.forEach(t),B7o=i(O),cu=n(O,"LI",{});var lLe=s(cu);Yie=n(lLe,"STRONG",{});var hnt=s(Yie);I7o=r(hnt,"bert"),hnt.forEach(t),N7o=r(lLe," \u2014 "),zq=n(lLe,"A",{href:!0});var pnt=s(zq);q7o=r(pnt,"BertForPreTraining"),pnt.forEach(t),j7o=r(lLe," (BERT model)"),lLe.forEach(t),D7o=i(O),fu=n(O,"LI",{});var iLe=s(fu);Kie=n(iLe,"STRONG",{});var _nt=s(Kie);G7o=r(_nt,"big_bird"),_nt.forEach(t),O7o=r(iLe," \u2014 "),Wq=n(iLe,"A",{href:!0});var unt=s(Wq);V7o=r(unt,"BigBirdForPreTraining"),unt.forEach(t),X7o=r(iLe," (BigBird model)"),iLe.forEach(t),z7o=i(O),mu=n(O,"LI",{});var dLe=s(mu);Zie=n(dLe,"STRONG",{});var bnt=s(Zie);W7o=r(bnt,"camembert"),bnt.forEach(t),Q7o=r(dLe," \u2014 "),Qq=n(dLe,"A",{href:!0});var vnt=s(Qq);H7o=r(vnt,"CamembertForMaskedLM"),vnt.forEach(t),U7o=r(dLe," (CamemBERT model)"),dLe.forEach(t),J7o=i(O),gu=n(O,"LI",{});var cLe=s(gu);ede=n(cLe,"STRONG",{});var Fnt=s(ede);Y7o=r(Fnt,"ctrl"),Fnt.forEach(t),K7o=r(cLe," \u2014 "),Hq=n(cLe,"A",{href:!0});var Tnt=s(Hq);Z7o=r(Tnt,"CTRLLMHeadModel"),Tnt.forEach(t),eMo=r(cLe," (CTRL model)"),cLe.forEach(t),oMo=i(O),hu=n(O,"LI",{});var fLe=s(hu);ode=n(fLe,"STRONG",{});var Mnt=s(ode);rMo=r(Mnt,"data2vec-text"),Mnt.forEach(t),tMo=r(fLe," \u2014 "),Uq=n(fLe,"A",{href:!0});var Ent=s(Uq);aMo=r(Ent,"Data2VecTextForMaskedLM"),Ent.forEach(t),nMo=r(fLe," (Data2VecText model)"),fLe.forEach(t),sMo=i(O),pu=n(O,"LI",{});var mLe=s(pu);rde=n(mLe,"STRONG",{});var Cnt=s(rde);lMo=r(Cnt,"deberta"),Cnt.forEach(t),iMo=r(mLe," \u2014 "),Jq=n(mLe,"A",{href:!0});var wnt=s(Jq);dMo=r(wnt,"DebertaForMaskedLM"),wnt.forEach(t),cMo=r(mLe," (DeBERTa model)"),mLe.forEach(t),fMo=i(O),_u=n(O,"LI",{});var gLe=s(_u);tde=n(gLe,"STRONG",{});var Ant=s(tde);mMo=r(Ant,"deberta-v2"),Ant.forEach(t),gMo=r(gLe," \u2014 "),Yq=n(gLe,"A",{href:!0});var ynt=s(Yq);hMo=r(ynt,"DebertaV2ForMaskedLM"),ynt.forEach(t),pMo=r(gLe," (DeBERTa-v2 model)"),gLe.forEach(t),_Mo=i(O),uu=n(O,"LI",{});var hLe=s(uu);ade=n(hLe,"STRONG",{});var Lnt=s(ade);uMo=r(Lnt,"distilbert"),Lnt.forEach(t),bMo=r(hLe," \u2014 "),Kq=n(hLe,"A",{href:!0});var xnt=s(Kq);vMo=r(xnt,"DistilBertForMaskedLM"),xnt.forEach(t),FMo=r(hLe," (DistilBERT model)"),hLe.forEach(t),TMo=i(O),bu=n(O,"LI",{});var pLe=s(bu);nde=n(pLe,"STRONG",{});var $nt=s(nde);MMo=r($nt,"electra"),$nt.forEach(t),EMo=r(pLe," \u2014 "),Zq=n(pLe,"A",{href:!0});var knt=s(Zq);CMo=r(knt,"ElectraForPreTraining"),knt.forEach(t),wMo=r(pLe," (ELECTRA model)"),pLe.forEach(t),AMo=i(O),vu=n(O,"LI",{});var _Le=s(vu);sde=n(_Le,"STRONG",{});var Snt=s(sde);yMo=r(Snt,"flaubert"),Snt.forEach(t),LMo=r(_Le," \u2014 "),ej=n(_Le,"A",{href:!0});var Rnt=s(ej);xMo=r(Rnt,"FlaubertWithLMHeadModel"),Rnt.forEach(t),$Mo=r(_Le," (FlauBERT model)"),_Le.forEach(t),kMo=i(O),Fu=n(O,"LI",{});var uLe=s(Fu);lde=n(uLe,"STRONG",{});var Pnt=s(lde);SMo=r(Pnt,"flava"),Pnt.forEach(t),RMo=r(uLe," \u2014 "),oj=n(uLe,"A",{href:!0});var Bnt=s(oj);PMo=r(Bnt,"FlavaForPreTraining"),Bnt.forEach(t),BMo=r(uLe," (Flava model)"),uLe.forEach(t),IMo=i(O),Tu=n(O,"LI",{});var bLe=s(Tu);ide=n(bLe,"STRONG",{});var Int=s(ide);NMo=r(Int,"fnet"),Int.forEach(t),qMo=r(bLe," \u2014 "),rj=n(bLe,"A",{href:!0});var Nnt=s(rj);jMo=r(Nnt,"FNetForPreTraining"),Nnt.forEach(t),DMo=r(bLe," (FNet model)"),bLe.forEach(t),GMo=i(O),Mu=n(O,"LI",{});var vLe=s(Mu);dde=n(vLe,"STRONG",{});var qnt=s(dde);OMo=r(qnt,"fsmt"),qnt.forEach(t),VMo=r(vLe," \u2014 "),tj=n(vLe,"A",{href:!0});var jnt=s(tj);XMo=r(jnt,"FSMTForConditionalGeneration"),jnt.forEach(t),zMo=r(vLe," (FairSeq Machine-Translation model)"),vLe.forEach(t),WMo=i(O),Eu=n(O,"LI",{});var FLe=s(Eu);cde=n(FLe,"STRONG",{});var Dnt=s(cde);QMo=r(Dnt,"funnel"),Dnt.forEach(t),HMo=r(FLe," \u2014 "),aj=n(FLe,"A",{href:!0});var Gnt=s(aj);UMo=r(Gnt,"FunnelForPreTraining"),Gnt.forEach(t),JMo=r(FLe," (Funnel Transformer model)"),FLe.forEach(t),YMo=i(O),Cu=n(O,"LI",{});var TLe=s(Cu);fde=n(TLe,"STRONG",{});var Ont=s(fde);KMo=r(Ont,"gpt2"),Ont.forEach(t),ZMo=r(TLe," \u2014 "),nj=n(TLe,"A",{href:!0});var Vnt=s(nj);eEo=r(Vnt,"GPT2LMHeadModel"),Vnt.forEach(t),oEo=r(TLe," (OpenAI GPT-2 model)"),TLe.forEach(t),rEo=i(O),wu=n(O,"LI",{});var MLe=s(wu);mde=n(MLe,"STRONG",{});var Xnt=s(mde);tEo=r(Xnt,"ibert"),Xnt.forEach(t),aEo=r(MLe," \u2014 "),sj=n(MLe,"A",{href:!0});var znt=s(sj);nEo=r(znt,"IBertForMaskedLM"),znt.forEach(t),sEo=r(MLe," (I-BERT model)"),MLe.forEach(t),lEo=i(O),Au=n(O,"LI",{});var ELe=s(Au);gde=n(ELe,"STRONG",{});var Wnt=s(gde);iEo=r(Wnt,"layoutlm"),Wnt.forEach(t),dEo=r(ELe," \u2014 "),lj=n(ELe,"A",{href:!0});var Qnt=s(lj);cEo=r(Qnt,"LayoutLMForMaskedLM"),Qnt.forEach(t),fEo=r(ELe," (LayoutLM model)"),ELe.forEach(t),mEo=i(O),yu=n(O,"LI",{});var CLe=s(yu);hde=n(CLe,"STRONG",{});var Hnt=s(hde);gEo=r(Hnt,"longformer"),Hnt.forEach(t),hEo=r(CLe," \u2014 "),ij=n(CLe,"A",{href:!0});var Unt=s(ij);pEo=r(Unt,"LongformerForMaskedLM"),Unt.forEach(t),_Eo=r(CLe," (Longformer model)"),CLe.forEach(t),uEo=i(O),Lu=n(O,"LI",{});var wLe=s(Lu);pde=n(wLe,"STRONG",{});var Jnt=s(pde);bEo=r(Jnt,"lxmert"),Jnt.forEach(t),vEo=r(wLe," \u2014 "),dj=n(wLe,"A",{href:!0});var Ynt=s(dj);FEo=r(Ynt,"LxmertForPreTraining"),Ynt.forEach(t),TEo=r(wLe," (LXMERT model)"),wLe.forEach(t),MEo=i(O),xu=n(O,"LI",{});var ALe=s(xu);_de=n(ALe,"STRONG",{});var Knt=s(_de);EEo=r(Knt,"megatron-bert"),Knt.forEach(t),CEo=r(ALe," \u2014 "),cj=n(ALe,"A",{href:!0});var Znt=s(cj);wEo=r(Znt,"MegatronBertForPreTraining"),Znt.forEach(t),AEo=r(ALe," (MegatronBert model)"),ALe.forEach(t),yEo=i(O),$u=n(O,"LI",{});var yLe=s($u);ude=n(yLe,"STRONG",{});var est=s(ude);LEo=r(est,"mobilebert"),est.forEach(t),xEo=r(yLe," \u2014 "),fj=n(yLe,"A",{href:!0});var ost=s(fj);$Eo=r(ost,"MobileBertForPreTraining"),ost.forEach(t),kEo=r(yLe," (MobileBERT model)"),yLe.forEach(t),SEo=i(O),ku=n(O,"LI",{});var LLe=s(ku);bde=n(LLe,"STRONG",{});var rst=s(bde);REo=r(rst,"mpnet"),rst.forEach(t),PEo=r(LLe," \u2014 "),mj=n(LLe,"A",{href:!0});var tst=s(mj);BEo=r(tst,"MPNetForMaskedLM"),tst.forEach(t),IEo=r(LLe," (MPNet model)"),LLe.forEach(t),NEo=i(O),Su=n(O,"LI",{});var xLe=s(Su);vde=n(xLe,"STRONG",{});var ast=s(vde);qEo=r(ast,"openai-gpt"),ast.forEach(t),jEo=r(xLe," \u2014 "),gj=n(xLe,"A",{href:!0});var nst=s(gj);DEo=r(nst,"OpenAIGPTLMHeadModel"),nst.forEach(t),GEo=r(xLe," (OpenAI GPT model)"),xLe.forEach(t),OEo=i(O),Ru=n(O,"LI",{});var $Le=s(Ru);Fde=n($Le,"STRONG",{});var sst=s(Fde);VEo=r(sst,"retribert"),sst.forEach(t),XEo=r($Le," \u2014 "),hj=n($Le,"A",{href:!0});var lst=s(hj);zEo=r(lst,"RetriBertModel"),lst.forEach(t),WEo=r($Le," (RetriBERT model)"),$Le.forEach(t),QEo=i(O),Pu=n(O,"LI",{});var kLe=s(Pu);Tde=n(kLe,"STRONG",{});var ist=s(Tde);HEo=r(ist,"roberta"),ist.forEach(t),UEo=r(kLe," \u2014 "),pj=n(kLe,"A",{href:!0});var dst=s(pj);JEo=r(dst,"RobertaForMaskedLM"),dst.forEach(t),YEo=r(kLe," (RoBERTa model)"),kLe.forEach(t),KEo=i(O),Bu=n(O,"LI",{});var SLe=s(Bu);Mde=n(SLe,"STRONG",{});var cst=s(Mde);ZEo=r(cst,"splinter"),cst.forEach(t),eCo=r(SLe," \u2014 "),_j=n(SLe,"A",{href:!0});var fst=s(_j);oCo=r(fst,"SplinterForPreTraining"),fst.forEach(t),rCo=r(SLe," (Splinter model)"),SLe.forEach(t),tCo=i(O),Iu=n(O,"LI",{});var RLe=s(Iu);Ede=n(RLe,"STRONG",{});var mst=s(Ede);aCo=r(mst,"squeezebert"),mst.forEach(t),nCo=r(RLe," \u2014 "),uj=n(RLe,"A",{href:!0});var gst=s(uj);sCo=r(gst,"SqueezeBertForMaskedLM"),gst.forEach(t),lCo=r(RLe," (SqueezeBERT model)"),RLe.forEach(t),iCo=i(O),Nu=n(O,"LI",{});var PLe=s(Nu);Cde=n(PLe,"STRONG",{});var hst=s(Cde);dCo=r(hst,"t5"),hst.forEach(t),cCo=r(PLe," \u2014 "),bj=n(PLe,"A",{href:!0});var pst=s(bj);fCo=r(pst,"T5ForConditionalGeneration"),pst.forEach(t),mCo=r(PLe," (T5 model)"),PLe.forEach(t),gCo=i(O),qu=n(O,"LI",{});var BLe=s(qu);wde=n(BLe,"STRONG",{});var _st=s(wde);hCo=r(_st,"tapas"),_st.forEach(t),pCo=r(BLe," \u2014 "),vj=n(BLe,"A",{href:!0});var ust=s(vj);_Co=r(ust,"TapasForMaskedLM"),ust.forEach(t),uCo=r(BLe," (TAPAS model)"),BLe.forEach(t),bCo=i(O),ju=n(O,"LI",{});var ILe=s(ju);Ade=n(ILe,"STRONG",{});var bst=s(Ade);vCo=r(bst,"transfo-xl"),bst.forEach(t),FCo=r(ILe," \u2014 "),Fj=n(ILe,"A",{href:!0});var vst=s(Fj);TCo=r(vst,"TransfoXLLMHeadModel"),vst.forEach(t),MCo=r(ILe," (Transformer-XL model)"),ILe.forEach(t),ECo=i(O),Du=n(O,"LI",{});var NLe=s(Du);yde=n(NLe,"STRONG",{});var Fst=s(yde);CCo=r(Fst,"unispeech"),Fst.forEach(t),wCo=r(NLe," \u2014 "),Tj=n(NLe,"A",{href:!0});var Tst=s(Tj);ACo=r(Tst,"UniSpeechForPreTraining"),Tst.forEach(t),yCo=r(NLe," (UniSpeech model)"),NLe.forEach(t),LCo=i(O),Gu=n(O,"LI",{});var qLe=s(Gu);Lde=n(qLe,"STRONG",{});var Mst=s(Lde);xCo=r(Mst,"unispeech-sat"),Mst.forEach(t),$Co=r(qLe," \u2014 "),Mj=n(qLe,"A",{href:!0});var Est=s(Mj);kCo=r(Est,"UniSpeechSatForPreTraining"),Est.forEach(t),SCo=r(qLe," (UniSpeechSat model)"),qLe.forEach(t),RCo=i(O),Ou=n(O,"LI",{});var jLe=s(Ou);xde=n(jLe,"STRONG",{});var Cst=s(xde);PCo=r(Cst,"visual_bert"),Cst.forEach(t),BCo=r(jLe," \u2014 "),Ej=n(jLe,"A",{href:!0});var wst=s(Ej);ICo=r(wst,"VisualBertForPreTraining"),wst.forEach(t),NCo=r(jLe," (VisualBert model)"),jLe.forEach(t),qCo=i(O),Vu=n(O,"LI",{});var DLe=s(Vu);$de=n(DLe,"STRONG",{});var Ast=s($de);jCo=r(Ast,"vit_mae"),Ast.forEach(t),DCo=r(DLe," \u2014 "),Cj=n(DLe,"A",{href:!0});var yst=s(Cj);GCo=r(yst,"ViTMAEForPreTraining"),yst.forEach(t),OCo=r(DLe," (ViTMAE model)"),DLe.forEach(t),VCo=i(O),Xu=n(O,"LI",{});var GLe=s(Xu);kde=n(GLe,"STRONG",{});var Lst=s(kde);XCo=r(Lst,"wav2vec2"),Lst.forEach(t),zCo=r(GLe," \u2014 "),wj=n(GLe,"A",{href:!0});var xst=s(wj);WCo=r(xst,"Wav2Vec2ForPreTraining"),xst.forEach(t),QCo=r(GLe," (Wav2Vec2 model)"),GLe.forEach(t),HCo=i(O),zu=n(O,"LI",{});var OLe=s(zu);Sde=n(OLe,"STRONG",{});var $st=s(Sde);UCo=r($st,"wav2vec2-conformer"),$st.forEach(t),JCo=r(OLe," \u2014 "),Aj=n(OLe,"A",{href:!0});var kst=s(Aj);YCo=r(kst,"Wav2Vec2ConformerForPreTraining"),kst.forEach(t),KCo=r(OLe," (Wav2Vec2-Conformer model)"),OLe.forEach(t),ZCo=i(O),Wu=n(O,"LI",{});var VLe=s(Wu);Rde=n(VLe,"STRONG",{});var Sst=s(Rde);e5o=r(Sst,"xlm"),Sst.forEach(t),o5o=r(VLe," \u2014 "),yj=n(VLe,"A",{href:!0});var Rst=s(yj);r5o=r(Rst,"XLMWithLMHeadModel"),Rst.forEach(t),t5o=r(VLe," (XLM model)"),VLe.forEach(t),a5o=i(O),Qu=n(O,"LI",{});var XLe=s(Qu);Pde=n(XLe,"STRONG",{});var Pst=s(Pde);n5o=r(Pst,"xlm-roberta"),Pst.forEach(t),s5o=r(XLe," \u2014 "),Lj=n(XLe,"A",{href:!0});var Bst=s(Lj);l5o=r(Bst,"XLMRobertaForMaskedLM"),Bst.forEach(t),i5o=r(XLe," (XLM-RoBERTa model)"),XLe.forEach(t),d5o=i(O),Hu=n(O,"LI",{});var zLe=s(Hu);Bde=n(zLe,"STRONG",{});var Ist=s(Bde);c5o=r(Ist,"xlm-roberta-xl"),Ist.forEach(t),f5o=r(zLe," \u2014 "),xj=n(zLe,"A",{href:!0});var Nst=s(xj);m5o=r(Nst,"XLMRobertaXLForMaskedLM"),Nst.forEach(t),g5o=r(zLe," (XLM-RoBERTa-XL model)"),zLe.forEach(t),h5o=i(O),Uu=n(O,"LI",{});var WLe=s(Uu);Ide=n(WLe,"STRONG",{});var qst=s(Ide);p5o=r(qst,"xlnet"),qst.forEach(t),_5o=r(WLe," \u2014 "),$j=n(WLe,"A",{href:!0});var jst=s($j);u5o=r(jst,"XLNetLMHeadModel"),jst.forEach(t),b5o=r(WLe," (XLNet model)"),WLe.forEach(t),O.forEach(t),v5o=i(ra),Ju=n(ra,"P",{});var QLe=s(Ju);F5o=r(QLe,"The model is set in evaluation mode by default using "),Nde=n(QLe,"CODE",{});var Dst=s(Nde);T5o=r(Dst,"model.eval()"),Dst.forEach(t),M5o=r(QLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qde=n(QLe,"CODE",{});var Gst=s(qde);E5o=r(Gst,"model.train()"),Gst.forEach(t),QLe.forEach(t),C5o=i(ra),T(Yu.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),Hqe=i(f),Si=n(f,"H2",{class:!0});var KDe=s(Si);Ku=n(KDe,"A",{id:!0,class:!0,href:!0});var Ost=s(Ku);jde=n(Ost,"SPAN",{});var Vst=s(jde);T(uy.$$.fragment,Vst),Vst.forEach(t),Ost.forEach(t),w5o=i(KDe),Dde=n(KDe,"SPAN",{});var Xst=s(Dde);A5o=r(Xst,"AutoModelForCausalLM"),Xst.forEach(t),KDe.forEach(t),Uqe=i(f),$o=n(f,"DIV",{class:!0});var Xs=s($o);T(by.$$.fragment,Xs),y5o=i(Xs),Ri=n(Xs,"P",{});var NZ=s(Ri);L5o=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kj=n(NZ,"A",{href:!0});var zst=s(kj);x5o=r(zst,"from_pretrained()"),zst.forEach(t),$5o=r(NZ," class method or the "),Sj=n(NZ,"A",{href:!0});var Wst=s(Sj);k5o=r(Wst,"from_config()"),Wst.forEach(t),S5o=r(NZ,` class
method.`),NZ.forEach(t),R5o=i(Xs),vy=n(Xs,"P",{});var ZDe=s(vy);P5o=r(ZDe,"This class cannot be instantiated directly using "),Gde=n(ZDe,"CODE",{});var Qst=s(Gde);B5o=r(Qst,"__init__()"),Qst.forEach(t),I5o=r(ZDe," (throws an error)."),ZDe.forEach(t),N5o=i(Xs),nt=n(Xs,"DIV",{class:!0});var Vw=s(nt);T(Fy.$$.fragment,Vw),q5o=i(Vw),Ode=n(Vw,"P",{});var Hst=s(Ode);j5o=r(Hst,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Hst.forEach(t),D5o=i(Vw),Pi=n(Vw,"P",{});var qZ=s(Pi);G5o=r(qZ,`Note:
Loading a model from its configuration file does `),Vde=n(qZ,"STRONG",{});var Ust=s(Vde);O5o=r(Ust,"not"),Ust.forEach(t),V5o=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rj=n(qZ,"A",{href:!0});var Jst=s(Rj);X5o=r(Jst,"from_pretrained()"),Jst.forEach(t),z5o=r(qZ," to load the model weights."),qZ.forEach(t),W5o=i(Vw),T(Zu.$$.fragment,Vw),Vw.forEach(t),Q5o=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(Ty.$$.fragment,ta),H5o=i(ta),Xde=n(ta,"P",{});var Yst=s(Xde);U5o=r(Yst,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Yst.forEach(t),J5o=i(ta),$a=n(ta,"P",{});var Xw=s($a);Y5o=r(Xw,"The model class to instantiate is selected based on the "),zde=n(Xw,"CODE",{});var Kst=s(zde);K5o=r(Kst,"model_type"),Kst.forEach(t),Z5o=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Wde=n(Xw,"CODE",{});var Zst=s(Wde);e0o=r(Zst,"pretrained_model_name_or_path"),Zst.forEach(t),o0o=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qde=n(Xw,"CODE",{});var elt=s(Qde);r0o=r(elt,"pretrained_model_name_or_path"),elt.forEach(t),t0o=r(Xw,":"),Xw.forEach(t),a0o=i(ta),z=n(ta,"UL",{});var W=s(z);e4=n(W,"LI",{});var HLe=s(e4);Hde=n(HLe,"STRONG",{});var olt=s(Hde);n0o=r(olt,"bart"),olt.forEach(t),s0o=r(HLe," \u2014 "),Pj=n(HLe,"A",{href:!0});var rlt=s(Pj);l0o=r(rlt,"BartForCausalLM"),rlt.forEach(t),i0o=r(HLe," (BART model)"),HLe.forEach(t),d0o=i(W),o4=n(W,"LI",{});var ULe=s(o4);Ude=n(ULe,"STRONG",{});var tlt=s(Ude);c0o=r(tlt,"bert"),tlt.forEach(t),f0o=r(ULe," \u2014 "),Bj=n(ULe,"A",{href:!0});var alt=s(Bj);m0o=r(alt,"BertLMHeadModel"),alt.forEach(t),g0o=r(ULe," (BERT model)"),ULe.forEach(t),h0o=i(W),r4=n(W,"LI",{});var JLe=s(r4);Jde=n(JLe,"STRONG",{});var nlt=s(Jde);p0o=r(nlt,"bert-generation"),nlt.forEach(t),_0o=r(JLe," \u2014 "),Ij=n(JLe,"A",{href:!0});var slt=s(Ij);u0o=r(slt,"BertGenerationDecoder"),slt.forEach(t),b0o=r(JLe," (Bert Generation model)"),JLe.forEach(t),v0o=i(W),t4=n(W,"LI",{});var YLe=s(t4);Yde=n(YLe,"STRONG",{});var llt=s(Yde);F0o=r(llt,"big_bird"),llt.forEach(t),T0o=r(YLe," \u2014 "),Nj=n(YLe,"A",{href:!0});var ilt=s(Nj);M0o=r(ilt,"BigBirdForCausalLM"),ilt.forEach(t),E0o=r(YLe," (BigBird model)"),YLe.forEach(t),C0o=i(W),a4=n(W,"LI",{});var KLe=s(a4);Kde=n(KLe,"STRONG",{});var dlt=s(Kde);w0o=r(dlt,"bigbird_pegasus"),dlt.forEach(t),A0o=r(KLe," \u2014 "),qj=n(KLe,"A",{href:!0});var clt=s(qj);y0o=r(clt,"BigBirdPegasusForCausalLM"),clt.forEach(t),L0o=r(KLe," (BigBirdPegasus model)"),KLe.forEach(t),x0o=i(W),n4=n(W,"LI",{});var ZLe=s(n4);Zde=n(ZLe,"STRONG",{});var flt=s(Zde);$0o=r(flt,"blenderbot"),flt.forEach(t),k0o=r(ZLe," \u2014 "),jj=n(ZLe,"A",{href:!0});var mlt=s(jj);S0o=r(mlt,"BlenderbotForCausalLM"),mlt.forEach(t),R0o=r(ZLe," (Blenderbot model)"),ZLe.forEach(t),P0o=i(W),s4=n(W,"LI",{});var e8e=s(s4);ece=n(e8e,"STRONG",{});var glt=s(ece);B0o=r(glt,"blenderbot-small"),glt.forEach(t),I0o=r(e8e," \u2014 "),Dj=n(e8e,"A",{href:!0});var hlt=s(Dj);N0o=r(hlt,"BlenderbotSmallForCausalLM"),hlt.forEach(t),q0o=r(e8e," (BlenderbotSmall model)"),e8e.forEach(t),j0o=i(W),l4=n(W,"LI",{});var o8e=s(l4);oce=n(o8e,"STRONG",{});var plt=s(oce);D0o=r(plt,"camembert"),plt.forEach(t),G0o=r(o8e," \u2014 "),Gj=n(o8e,"A",{href:!0});var _lt=s(Gj);O0o=r(_lt,"CamembertForCausalLM"),_lt.forEach(t),V0o=r(o8e," (CamemBERT model)"),o8e.forEach(t),X0o=i(W),i4=n(W,"LI",{});var r8e=s(i4);rce=n(r8e,"STRONG",{});var ult=s(rce);z0o=r(ult,"codegen"),ult.forEach(t),W0o=r(r8e," \u2014 "),Oj=n(r8e,"A",{href:!0});var blt=s(Oj);Q0o=r(blt,"CodeGenForCausalLM"),blt.forEach(t),H0o=r(r8e," (CodeGen model)"),r8e.forEach(t),U0o=i(W),d4=n(W,"LI",{});var t8e=s(d4);tce=n(t8e,"STRONG",{});var vlt=s(tce);J0o=r(vlt,"ctrl"),vlt.forEach(t),Y0o=r(t8e," \u2014 "),Vj=n(t8e,"A",{href:!0});var Flt=s(Vj);K0o=r(Flt,"CTRLLMHeadModel"),Flt.forEach(t),Z0o=r(t8e," (CTRL model)"),t8e.forEach(t),ewo=i(W),c4=n(W,"LI",{});var a8e=s(c4);ace=n(a8e,"STRONG",{});var Tlt=s(ace);owo=r(Tlt,"data2vec-text"),Tlt.forEach(t),rwo=r(a8e," \u2014 "),Xj=n(a8e,"A",{href:!0});var Mlt=s(Xj);two=r(Mlt,"Data2VecTextForCausalLM"),Mlt.forEach(t),awo=r(a8e," (Data2VecText model)"),a8e.forEach(t),nwo=i(W),f4=n(W,"LI",{});var n8e=s(f4);nce=n(n8e,"STRONG",{});var Elt=s(nce);swo=r(Elt,"electra"),Elt.forEach(t),lwo=r(n8e," \u2014 "),zj=n(n8e,"A",{href:!0});var Clt=s(zj);iwo=r(Clt,"ElectraForCausalLM"),Clt.forEach(t),dwo=r(n8e," (ELECTRA model)"),n8e.forEach(t),cwo=i(W),m4=n(W,"LI",{});var s8e=s(m4);sce=n(s8e,"STRONG",{});var wlt=s(sce);fwo=r(wlt,"gpt2"),wlt.forEach(t),mwo=r(s8e," \u2014 "),Wj=n(s8e,"A",{href:!0});var Alt=s(Wj);gwo=r(Alt,"GPT2LMHeadModel"),Alt.forEach(t),hwo=r(s8e," (OpenAI GPT-2 model)"),s8e.forEach(t),pwo=i(W),g4=n(W,"LI",{});var l8e=s(g4);lce=n(l8e,"STRONG",{});var ylt=s(lce);_wo=r(ylt,"gpt_neo"),ylt.forEach(t),uwo=r(l8e," \u2014 "),Qj=n(l8e,"A",{href:!0});var Llt=s(Qj);bwo=r(Llt,"GPTNeoForCausalLM"),Llt.forEach(t),vwo=r(l8e," (GPT Neo model)"),l8e.forEach(t),Fwo=i(W),h4=n(W,"LI",{});var i8e=s(h4);ice=n(i8e,"STRONG",{});var xlt=s(ice);Two=r(xlt,"gpt_neox"),xlt.forEach(t),Mwo=r(i8e," \u2014 "),Hj=n(i8e,"A",{href:!0});var $lt=s(Hj);Ewo=r($lt,"GPTNeoXForCausalLM"),$lt.forEach(t),Cwo=r(i8e," (GPT NeoX model)"),i8e.forEach(t),wwo=i(W),p4=n(W,"LI",{});var d8e=s(p4);dce=n(d8e,"STRONG",{});var klt=s(dce);Awo=r(klt,"gptj"),klt.forEach(t),ywo=r(d8e," \u2014 "),Uj=n(d8e,"A",{href:!0});var Slt=s(Uj);Lwo=r(Slt,"GPTJForCausalLM"),Slt.forEach(t),xwo=r(d8e," (GPT-J model)"),d8e.forEach(t),$wo=i(W),_4=n(W,"LI",{});var c8e=s(_4);cce=n(c8e,"STRONG",{});var Rlt=s(cce);kwo=r(Rlt,"marian"),Rlt.forEach(t),Swo=r(c8e," \u2014 "),Jj=n(c8e,"A",{href:!0});var Plt=s(Jj);Rwo=r(Plt,"MarianForCausalLM"),Plt.forEach(t),Pwo=r(c8e," (Marian model)"),c8e.forEach(t),Bwo=i(W),u4=n(W,"LI",{});var f8e=s(u4);fce=n(f8e,"STRONG",{});var Blt=s(fce);Iwo=r(Blt,"mbart"),Blt.forEach(t),Nwo=r(f8e," \u2014 "),Yj=n(f8e,"A",{href:!0});var Ilt=s(Yj);qwo=r(Ilt,"MBartForCausalLM"),Ilt.forEach(t),jwo=r(f8e," (mBART model)"),f8e.forEach(t),Dwo=i(W),b4=n(W,"LI",{});var m8e=s(b4);mce=n(m8e,"STRONG",{});var Nlt=s(mce);Gwo=r(Nlt,"megatron-bert"),Nlt.forEach(t),Owo=r(m8e," \u2014 "),Kj=n(m8e,"A",{href:!0});var qlt=s(Kj);Vwo=r(qlt,"MegatronBertForCausalLM"),qlt.forEach(t),Xwo=r(m8e," (MegatronBert model)"),m8e.forEach(t),zwo=i(W),v4=n(W,"LI",{});var g8e=s(v4);gce=n(g8e,"STRONG",{});var jlt=s(gce);Wwo=r(jlt,"openai-gpt"),jlt.forEach(t),Qwo=r(g8e," \u2014 "),Zj=n(g8e,"A",{href:!0});var Dlt=s(Zj);Hwo=r(Dlt,"OpenAIGPTLMHeadModel"),Dlt.forEach(t),Uwo=r(g8e," (OpenAI GPT model)"),g8e.forEach(t),Jwo=i(W),F4=n(W,"LI",{});var h8e=s(F4);hce=n(h8e,"STRONG",{});var Glt=s(hce);Ywo=r(Glt,"opt"),Glt.forEach(t),Kwo=r(h8e," \u2014 "),eD=n(h8e,"A",{href:!0});var Olt=s(eD);Zwo=r(Olt,"OPTForCausalLM"),Olt.forEach(t),e6o=r(h8e," (OPT model)"),h8e.forEach(t),o6o=i(W),T4=n(W,"LI",{});var p8e=s(T4);pce=n(p8e,"STRONG",{});var Vlt=s(pce);r6o=r(Vlt,"pegasus"),Vlt.forEach(t),t6o=r(p8e," \u2014 "),oD=n(p8e,"A",{href:!0});var Xlt=s(oD);a6o=r(Xlt,"PegasusForCausalLM"),Xlt.forEach(t),n6o=r(p8e," (Pegasus model)"),p8e.forEach(t),s6o=i(W),M4=n(W,"LI",{});var _8e=s(M4);_ce=n(_8e,"STRONG",{});var zlt=s(_ce);l6o=r(zlt,"plbart"),zlt.forEach(t),i6o=r(_8e," \u2014 "),rD=n(_8e,"A",{href:!0});var Wlt=s(rD);d6o=r(Wlt,"PLBartForCausalLM"),Wlt.forEach(t),c6o=r(_8e," (PLBart model)"),_8e.forEach(t),f6o=i(W),E4=n(W,"LI",{});var u8e=s(E4);uce=n(u8e,"STRONG",{});var Qlt=s(uce);m6o=r(Qlt,"prophetnet"),Qlt.forEach(t),g6o=r(u8e," \u2014 "),tD=n(u8e,"A",{href:!0});var Hlt=s(tD);h6o=r(Hlt,"ProphetNetForCausalLM"),Hlt.forEach(t),p6o=r(u8e," (ProphetNet model)"),u8e.forEach(t),_6o=i(W),C4=n(W,"LI",{});var b8e=s(C4);bce=n(b8e,"STRONG",{});var Ult=s(bce);u6o=r(Ult,"qdqbert"),Ult.forEach(t),b6o=r(b8e," \u2014 "),aD=n(b8e,"A",{href:!0});var Jlt=s(aD);v6o=r(Jlt,"QDQBertLMHeadModel"),Jlt.forEach(t),F6o=r(b8e," (QDQBert model)"),b8e.forEach(t),T6o=i(W),w4=n(W,"LI",{});var v8e=s(w4);vce=n(v8e,"STRONG",{});var Ylt=s(vce);M6o=r(Ylt,"reformer"),Ylt.forEach(t),E6o=r(v8e," \u2014 "),nD=n(v8e,"A",{href:!0});var Klt=s(nD);C6o=r(Klt,"ReformerModelWithLMHead"),Klt.forEach(t),w6o=r(v8e," (Reformer model)"),v8e.forEach(t),A6o=i(W),A4=n(W,"LI",{});var F8e=s(A4);Fce=n(F8e,"STRONG",{});var Zlt=s(Fce);y6o=r(Zlt,"rembert"),Zlt.forEach(t),L6o=r(F8e," \u2014 "),sD=n(F8e,"A",{href:!0});var eit=s(sD);x6o=r(eit,"RemBertForCausalLM"),eit.forEach(t),$6o=r(F8e," (RemBERT model)"),F8e.forEach(t),k6o=i(W),y4=n(W,"LI",{});var T8e=s(y4);Tce=n(T8e,"STRONG",{});var oit=s(Tce);S6o=r(oit,"roberta"),oit.forEach(t),R6o=r(T8e," \u2014 "),lD=n(T8e,"A",{href:!0});var rit=s(lD);P6o=r(rit,"RobertaForCausalLM"),rit.forEach(t),B6o=r(T8e," (RoBERTa model)"),T8e.forEach(t),I6o=i(W),L4=n(W,"LI",{});var M8e=s(L4);Mce=n(M8e,"STRONG",{});var tit=s(Mce);N6o=r(tit,"roformer"),tit.forEach(t),q6o=r(M8e," \u2014 "),iD=n(M8e,"A",{href:!0});var ait=s(iD);j6o=r(ait,"RoFormerForCausalLM"),ait.forEach(t),D6o=r(M8e," (RoFormer model)"),M8e.forEach(t),G6o=i(W),x4=n(W,"LI",{});var E8e=s(x4);Ece=n(E8e,"STRONG",{});var nit=s(Ece);O6o=r(nit,"speech_to_text_2"),nit.forEach(t),V6o=r(E8e," \u2014 "),dD=n(E8e,"A",{href:!0});var sit=s(dD);X6o=r(sit,"Speech2Text2ForCausalLM"),sit.forEach(t),z6o=r(E8e," (Speech2Text2 model)"),E8e.forEach(t),W6o=i(W),$4=n(W,"LI",{});var C8e=s($4);Cce=n(C8e,"STRONG",{});var lit=s(Cce);Q6o=r(lit,"transfo-xl"),lit.forEach(t),H6o=r(C8e," \u2014 "),cD=n(C8e,"A",{href:!0});var iit=s(cD);U6o=r(iit,"TransfoXLLMHeadModel"),iit.forEach(t),J6o=r(C8e," (Transformer-XL model)"),C8e.forEach(t),Y6o=i(W),k4=n(W,"LI",{});var w8e=s(k4);wce=n(w8e,"STRONG",{});var dit=s(wce);K6o=r(dit,"trocr"),dit.forEach(t),Z6o=r(w8e," \u2014 "),fD=n(w8e,"A",{href:!0});var cit=s(fD);eAo=r(cit,"TrOCRForCausalLM"),cit.forEach(t),oAo=r(w8e," (TrOCR model)"),w8e.forEach(t),rAo=i(W),S4=n(W,"LI",{});var A8e=s(S4);Ace=n(A8e,"STRONG",{});var fit=s(Ace);tAo=r(fit,"xglm"),fit.forEach(t),aAo=r(A8e," \u2014 "),mD=n(A8e,"A",{href:!0});var mit=s(mD);nAo=r(mit,"XGLMForCausalLM"),mit.forEach(t),sAo=r(A8e," (XGLM model)"),A8e.forEach(t),lAo=i(W),R4=n(W,"LI",{});var y8e=s(R4);yce=n(y8e,"STRONG",{});var git=s(yce);iAo=r(git,"xlm"),git.forEach(t),dAo=r(y8e," \u2014 "),gD=n(y8e,"A",{href:!0});var hit=s(gD);cAo=r(hit,"XLMWithLMHeadModel"),hit.forEach(t),fAo=r(y8e," (XLM model)"),y8e.forEach(t),mAo=i(W),P4=n(W,"LI",{});var L8e=s(P4);Lce=n(L8e,"STRONG",{});var pit=s(Lce);gAo=r(pit,"xlm-prophetnet"),pit.forEach(t),hAo=r(L8e," \u2014 "),hD=n(L8e,"A",{href:!0});var _it=s(hD);pAo=r(_it,"XLMProphetNetForCausalLM"),_it.forEach(t),_Ao=r(L8e," (XLMProphetNet model)"),L8e.forEach(t),uAo=i(W),B4=n(W,"LI",{});var x8e=s(B4);xce=n(x8e,"STRONG",{});var uit=s(xce);bAo=r(uit,"xlm-roberta"),uit.forEach(t),vAo=r(x8e," \u2014 "),pD=n(x8e,"A",{href:!0});var bit=s(pD);FAo=r(bit,"XLMRobertaForCausalLM"),bit.forEach(t),TAo=r(x8e," (XLM-RoBERTa model)"),x8e.forEach(t),MAo=i(W),I4=n(W,"LI",{});var $8e=s(I4);$ce=n($8e,"STRONG",{});var vit=s($ce);EAo=r(vit,"xlm-roberta-xl"),vit.forEach(t),CAo=r($8e," \u2014 "),_D=n($8e,"A",{href:!0});var Fit=s(_D);wAo=r(Fit,"XLMRobertaXLForCausalLM"),Fit.forEach(t),AAo=r($8e," (XLM-RoBERTa-XL model)"),$8e.forEach(t),yAo=i(W),N4=n(W,"LI",{});var k8e=s(N4);kce=n(k8e,"STRONG",{});var Tit=s(kce);LAo=r(Tit,"xlnet"),Tit.forEach(t),xAo=r(k8e," \u2014 "),uD=n(k8e,"A",{href:!0});var Mit=s(uD);$Ao=r(Mit,"XLNetLMHeadModel"),Mit.forEach(t),kAo=r(k8e," (XLNet model)"),k8e.forEach(t),W.forEach(t),SAo=i(ta),q4=n(ta,"P",{});var S8e=s(q4);RAo=r(S8e,"The model is set in evaluation mode by default using "),Sce=n(S8e,"CODE",{});var Eit=s(Sce);PAo=r(Eit,"model.eval()"),Eit.forEach(t),BAo=r(S8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rce=n(S8e,"CODE",{});var Cit=s(Rce);IAo=r(Cit,"model.train()"),Cit.forEach(t),S8e.forEach(t),NAo=i(ta),T(j4.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),Jqe=i(f),Bi=n(f,"H2",{class:!0});var eGe=s(Bi);D4=n(eGe,"A",{id:!0,class:!0,href:!0});var wit=s(D4);Pce=n(wit,"SPAN",{});var Ait=s(Pce);T(My.$$.fragment,Ait),Ait.forEach(t),wit.forEach(t),qAo=i(eGe),Bce=n(eGe,"SPAN",{});var yit=s(Bce);jAo=r(yit,"AutoModelForMaskedLM"),yit.forEach(t),eGe.forEach(t),Yqe=i(f),ko=n(f,"DIV",{class:!0});var zs=s(ko);T(Ey.$$.fragment,zs),DAo=i(zs),Ii=n(zs,"P",{});var jZ=s(Ii);GAo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bD=n(jZ,"A",{href:!0});var Lit=s(bD);OAo=r(Lit,"from_pretrained()"),Lit.forEach(t),VAo=r(jZ," class method or the "),vD=n(jZ,"A",{href:!0});var xit=s(vD);XAo=r(xit,"from_config()"),xit.forEach(t),zAo=r(jZ,` class
method.`),jZ.forEach(t),WAo=i(zs),Cy=n(zs,"P",{});var oGe=s(Cy);QAo=r(oGe,"This class cannot be instantiated directly using "),Ice=n(oGe,"CODE",{});var $it=s(Ice);HAo=r($it,"__init__()"),$it.forEach(t),UAo=r(oGe," (throws an error)."),oGe.forEach(t),JAo=i(zs),st=n(zs,"DIV",{class:!0});var zw=s(st);T(wy.$$.fragment,zw),YAo=i(zw),Nce=n(zw,"P",{});var kit=s(Nce);KAo=r(kit,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kit.forEach(t),ZAo=i(zw),Ni=n(zw,"P",{});var DZ=s(Ni);eyo=r(DZ,`Note:
Loading a model from its configuration file does `),qce=n(DZ,"STRONG",{});var Sit=s(qce);oyo=r(Sit,"not"),Sit.forEach(t),ryo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=n(DZ,"A",{href:!0});var Rit=s(FD);tyo=r(Rit,"from_pretrained()"),Rit.forEach(t),ayo=r(DZ," to load the model weights."),DZ.forEach(t),nyo=i(zw),T(G4.$$.fragment,zw),zw.forEach(t),syo=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(Ay.$$.fragment,aa),lyo=i(aa),jce=n(aa,"P",{});var Pit=s(jce);iyo=r(Pit,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Pit.forEach(t),dyo=i(aa),ka=n(aa,"P",{});var Ww=s(ka);cyo=r(Ww,"The model class to instantiate is selected based on the "),Dce=n(Ww,"CODE",{});var Bit=s(Dce);fyo=r(Bit,"model_type"),Bit.forEach(t),myo=r(Ww,` property of the config object (either
passed as an argument or loaded from `),Gce=n(Ww,"CODE",{});var Iit=s(Gce);gyo=r(Iit,"pretrained_model_name_or_path"),Iit.forEach(t),hyo=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=n(Ww,"CODE",{});var Nit=s(Oce);pyo=r(Nit,"pretrained_model_name_or_path"),Nit.forEach(t),_yo=r(Ww,":"),Ww.forEach(t),uyo=i(aa),Q=n(aa,"UL",{});var U=s(Q);O4=n(U,"LI",{});var R8e=s(O4);Vce=n(R8e,"STRONG",{});var qit=s(Vce);byo=r(qit,"albert"),qit.forEach(t),vyo=r(R8e," \u2014 "),TD=n(R8e,"A",{href:!0});var jit=s(TD);Fyo=r(jit,"AlbertForMaskedLM"),jit.forEach(t),Tyo=r(R8e," (ALBERT model)"),R8e.forEach(t),Myo=i(U),V4=n(U,"LI",{});var P8e=s(V4);Xce=n(P8e,"STRONG",{});var Dit=s(Xce);Eyo=r(Dit,"bart"),Dit.forEach(t),Cyo=r(P8e," \u2014 "),MD=n(P8e,"A",{href:!0});var Git=s(MD);wyo=r(Git,"BartForConditionalGeneration"),Git.forEach(t),Ayo=r(P8e," (BART model)"),P8e.forEach(t),yyo=i(U),X4=n(U,"LI",{});var B8e=s(X4);zce=n(B8e,"STRONG",{});var Oit=s(zce);Lyo=r(Oit,"bert"),Oit.forEach(t),xyo=r(B8e," \u2014 "),ED=n(B8e,"A",{href:!0});var Vit=s(ED);$yo=r(Vit,"BertForMaskedLM"),Vit.forEach(t),kyo=r(B8e," (BERT model)"),B8e.forEach(t),Syo=i(U),z4=n(U,"LI",{});var I8e=s(z4);Wce=n(I8e,"STRONG",{});var Xit=s(Wce);Ryo=r(Xit,"big_bird"),Xit.forEach(t),Pyo=r(I8e," \u2014 "),CD=n(I8e,"A",{href:!0});var zit=s(CD);Byo=r(zit,"BigBirdForMaskedLM"),zit.forEach(t),Iyo=r(I8e," (BigBird model)"),I8e.forEach(t),Nyo=i(U),W4=n(U,"LI",{});var N8e=s(W4);Qce=n(N8e,"STRONG",{});var Wit=s(Qce);qyo=r(Wit,"camembert"),Wit.forEach(t),jyo=r(N8e," \u2014 "),wD=n(N8e,"A",{href:!0});var Qit=s(wD);Dyo=r(Qit,"CamembertForMaskedLM"),Qit.forEach(t),Gyo=r(N8e," (CamemBERT model)"),N8e.forEach(t),Oyo=i(U),Q4=n(U,"LI",{});var q8e=s(Q4);Hce=n(q8e,"STRONG",{});var Hit=s(Hce);Vyo=r(Hit,"convbert"),Hit.forEach(t),Xyo=r(q8e," \u2014 "),AD=n(q8e,"A",{href:!0});var Uit=s(AD);zyo=r(Uit,"ConvBertForMaskedLM"),Uit.forEach(t),Wyo=r(q8e," (ConvBERT model)"),q8e.forEach(t),Qyo=i(U),H4=n(U,"LI",{});var j8e=s(H4);Uce=n(j8e,"STRONG",{});var Jit=s(Uce);Hyo=r(Jit,"data2vec-text"),Jit.forEach(t),Uyo=r(j8e," \u2014 "),yD=n(j8e,"A",{href:!0});var Yit=s(yD);Jyo=r(Yit,"Data2VecTextForMaskedLM"),Yit.forEach(t),Yyo=r(j8e," (Data2VecText model)"),j8e.forEach(t),Kyo=i(U),U4=n(U,"LI",{});var D8e=s(U4);Jce=n(D8e,"STRONG",{});var Kit=s(Jce);Zyo=r(Kit,"deberta"),Kit.forEach(t),eLo=r(D8e," \u2014 "),LD=n(D8e,"A",{href:!0});var Zit=s(LD);oLo=r(Zit,"DebertaForMaskedLM"),Zit.forEach(t),rLo=r(D8e," (DeBERTa model)"),D8e.forEach(t),tLo=i(U),J4=n(U,"LI",{});var G8e=s(J4);Yce=n(G8e,"STRONG",{});var edt=s(Yce);aLo=r(edt,"deberta-v2"),edt.forEach(t),nLo=r(G8e," \u2014 "),xD=n(G8e,"A",{href:!0});var odt=s(xD);sLo=r(odt,"DebertaV2ForMaskedLM"),odt.forEach(t),lLo=r(G8e," (DeBERTa-v2 model)"),G8e.forEach(t),iLo=i(U),Y4=n(U,"LI",{});var O8e=s(Y4);Kce=n(O8e,"STRONG",{});var rdt=s(Kce);dLo=r(rdt,"distilbert"),rdt.forEach(t),cLo=r(O8e," \u2014 "),$D=n(O8e,"A",{href:!0});var tdt=s($D);fLo=r(tdt,"DistilBertForMaskedLM"),tdt.forEach(t),mLo=r(O8e," (DistilBERT model)"),O8e.forEach(t),gLo=i(U),K4=n(U,"LI",{});var V8e=s(K4);Zce=n(V8e,"STRONG",{});var adt=s(Zce);hLo=r(adt,"electra"),adt.forEach(t),pLo=r(V8e," \u2014 "),kD=n(V8e,"A",{href:!0});var ndt=s(kD);_Lo=r(ndt,"ElectraForMaskedLM"),ndt.forEach(t),uLo=r(V8e," (ELECTRA model)"),V8e.forEach(t),bLo=i(U),Z4=n(U,"LI",{});var X8e=s(Z4);efe=n(X8e,"STRONG",{});var sdt=s(efe);vLo=r(sdt,"flaubert"),sdt.forEach(t),FLo=r(X8e," \u2014 "),SD=n(X8e,"A",{href:!0});var ldt=s(SD);TLo=r(ldt,"FlaubertWithLMHeadModel"),ldt.forEach(t),MLo=r(X8e," (FlauBERT model)"),X8e.forEach(t),ELo=i(U),e1=n(U,"LI",{});var z8e=s(e1);ofe=n(z8e,"STRONG",{});var idt=s(ofe);CLo=r(idt,"fnet"),idt.forEach(t),wLo=r(z8e," \u2014 "),RD=n(z8e,"A",{href:!0});var ddt=s(RD);ALo=r(ddt,"FNetForMaskedLM"),ddt.forEach(t),yLo=r(z8e," (FNet model)"),z8e.forEach(t),LLo=i(U),o1=n(U,"LI",{});var W8e=s(o1);rfe=n(W8e,"STRONG",{});var cdt=s(rfe);xLo=r(cdt,"funnel"),cdt.forEach(t),$Lo=r(W8e," \u2014 "),PD=n(W8e,"A",{href:!0});var fdt=s(PD);kLo=r(fdt,"FunnelForMaskedLM"),fdt.forEach(t),SLo=r(W8e," (Funnel Transformer model)"),W8e.forEach(t),RLo=i(U),r1=n(U,"LI",{});var Q8e=s(r1);tfe=n(Q8e,"STRONG",{});var mdt=s(tfe);PLo=r(mdt,"ibert"),mdt.forEach(t),BLo=r(Q8e," \u2014 "),BD=n(Q8e,"A",{href:!0});var gdt=s(BD);ILo=r(gdt,"IBertForMaskedLM"),gdt.forEach(t),NLo=r(Q8e," (I-BERT model)"),Q8e.forEach(t),qLo=i(U),t1=n(U,"LI",{});var H8e=s(t1);afe=n(H8e,"STRONG",{});var hdt=s(afe);jLo=r(hdt,"layoutlm"),hdt.forEach(t),DLo=r(H8e," \u2014 "),ID=n(H8e,"A",{href:!0});var pdt=s(ID);GLo=r(pdt,"LayoutLMForMaskedLM"),pdt.forEach(t),OLo=r(H8e," (LayoutLM model)"),H8e.forEach(t),VLo=i(U),a1=n(U,"LI",{});var U8e=s(a1);nfe=n(U8e,"STRONG",{});var _dt=s(nfe);XLo=r(_dt,"longformer"),_dt.forEach(t),zLo=r(U8e," \u2014 "),ND=n(U8e,"A",{href:!0});var udt=s(ND);WLo=r(udt,"LongformerForMaskedLM"),udt.forEach(t),QLo=r(U8e," (Longformer model)"),U8e.forEach(t),HLo=i(U),n1=n(U,"LI",{});var J8e=s(n1);sfe=n(J8e,"STRONG",{});var bdt=s(sfe);ULo=r(bdt,"mbart"),bdt.forEach(t),JLo=r(J8e," \u2014 "),qD=n(J8e,"A",{href:!0});var vdt=s(qD);YLo=r(vdt,"MBartForConditionalGeneration"),vdt.forEach(t),KLo=r(J8e," (mBART model)"),J8e.forEach(t),ZLo=i(U),s1=n(U,"LI",{});var Y8e=s(s1);lfe=n(Y8e,"STRONG",{});var Fdt=s(lfe);e8o=r(Fdt,"megatron-bert"),Fdt.forEach(t),o8o=r(Y8e," \u2014 "),jD=n(Y8e,"A",{href:!0});var Tdt=s(jD);r8o=r(Tdt,"MegatronBertForMaskedLM"),Tdt.forEach(t),t8o=r(Y8e," (MegatronBert model)"),Y8e.forEach(t),a8o=i(U),l1=n(U,"LI",{});var K8e=s(l1);ife=n(K8e,"STRONG",{});var Mdt=s(ife);n8o=r(Mdt,"mobilebert"),Mdt.forEach(t),s8o=r(K8e," \u2014 "),DD=n(K8e,"A",{href:!0});var Edt=s(DD);l8o=r(Edt,"MobileBertForMaskedLM"),Edt.forEach(t),i8o=r(K8e," (MobileBERT model)"),K8e.forEach(t),d8o=i(U),i1=n(U,"LI",{});var Z8e=s(i1);dfe=n(Z8e,"STRONG",{});var Cdt=s(dfe);c8o=r(Cdt,"mpnet"),Cdt.forEach(t),f8o=r(Z8e," \u2014 "),GD=n(Z8e,"A",{href:!0});var wdt=s(GD);m8o=r(wdt,"MPNetForMaskedLM"),wdt.forEach(t),g8o=r(Z8e," (MPNet model)"),Z8e.forEach(t),h8o=i(U),d1=n(U,"LI",{});var e9e=s(d1);cfe=n(e9e,"STRONG",{});var Adt=s(cfe);p8o=r(Adt,"nystromformer"),Adt.forEach(t),_8o=r(e9e," \u2014 "),OD=n(e9e,"A",{href:!0});var ydt=s(OD);u8o=r(ydt,"NystromformerForMaskedLM"),ydt.forEach(t),b8o=r(e9e," (Nystromformer model)"),e9e.forEach(t),v8o=i(U),c1=n(U,"LI",{});var o9e=s(c1);ffe=n(o9e,"STRONG",{});var Ldt=s(ffe);F8o=r(Ldt,"perceiver"),Ldt.forEach(t),T8o=r(o9e," \u2014 "),VD=n(o9e,"A",{href:!0});var xdt=s(VD);M8o=r(xdt,"PerceiverForMaskedLM"),xdt.forEach(t),E8o=r(o9e," (Perceiver model)"),o9e.forEach(t),C8o=i(U),f1=n(U,"LI",{});var r9e=s(f1);mfe=n(r9e,"STRONG",{});var $dt=s(mfe);w8o=r($dt,"qdqbert"),$dt.forEach(t),A8o=r(r9e," \u2014 "),XD=n(r9e,"A",{href:!0});var kdt=s(XD);y8o=r(kdt,"QDQBertForMaskedLM"),kdt.forEach(t),L8o=r(r9e," (QDQBert model)"),r9e.forEach(t),x8o=i(U),m1=n(U,"LI",{});var t9e=s(m1);gfe=n(t9e,"STRONG",{});var Sdt=s(gfe);$8o=r(Sdt,"reformer"),Sdt.forEach(t),k8o=r(t9e," \u2014 "),zD=n(t9e,"A",{href:!0});var Rdt=s(zD);S8o=r(Rdt,"ReformerForMaskedLM"),Rdt.forEach(t),R8o=r(t9e," (Reformer model)"),t9e.forEach(t),P8o=i(U),g1=n(U,"LI",{});var a9e=s(g1);hfe=n(a9e,"STRONG",{});var Pdt=s(hfe);B8o=r(Pdt,"rembert"),Pdt.forEach(t),I8o=r(a9e," \u2014 "),WD=n(a9e,"A",{href:!0});var Bdt=s(WD);N8o=r(Bdt,"RemBertForMaskedLM"),Bdt.forEach(t),q8o=r(a9e," (RemBERT model)"),a9e.forEach(t),j8o=i(U),h1=n(U,"LI",{});var n9e=s(h1);pfe=n(n9e,"STRONG",{});var Idt=s(pfe);D8o=r(Idt,"roberta"),Idt.forEach(t),G8o=r(n9e," \u2014 "),QD=n(n9e,"A",{href:!0});var Ndt=s(QD);O8o=r(Ndt,"RobertaForMaskedLM"),Ndt.forEach(t),V8o=r(n9e," (RoBERTa model)"),n9e.forEach(t),X8o=i(U),p1=n(U,"LI",{});var s9e=s(p1);_fe=n(s9e,"STRONG",{});var qdt=s(_fe);z8o=r(qdt,"roformer"),qdt.forEach(t),W8o=r(s9e," \u2014 "),HD=n(s9e,"A",{href:!0});var jdt=s(HD);Q8o=r(jdt,"RoFormerForMaskedLM"),jdt.forEach(t),H8o=r(s9e," (RoFormer model)"),s9e.forEach(t),U8o=i(U),_1=n(U,"LI",{});var l9e=s(_1);ufe=n(l9e,"STRONG",{});var Ddt=s(ufe);J8o=r(Ddt,"squeezebert"),Ddt.forEach(t),Y8o=r(l9e," \u2014 "),UD=n(l9e,"A",{href:!0});var Gdt=s(UD);K8o=r(Gdt,"SqueezeBertForMaskedLM"),Gdt.forEach(t),Z8o=r(l9e," (SqueezeBERT model)"),l9e.forEach(t),e9o=i(U),u1=n(U,"LI",{});var i9e=s(u1);bfe=n(i9e,"STRONG",{});var Odt=s(bfe);o9o=r(Odt,"tapas"),Odt.forEach(t),r9o=r(i9e," \u2014 "),JD=n(i9e,"A",{href:!0});var Vdt=s(JD);t9o=r(Vdt,"TapasForMaskedLM"),Vdt.forEach(t),a9o=r(i9e," (TAPAS model)"),i9e.forEach(t),n9o=i(U),b1=n(U,"LI",{});var d9e=s(b1);vfe=n(d9e,"STRONG",{});var Xdt=s(vfe);s9o=r(Xdt,"wav2vec2"),Xdt.forEach(t),l9o=r(d9e," \u2014 "),Ffe=n(d9e,"CODE",{});var zdt=s(Ffe);i9o=r(zdt,"Wav2Vec2ForMaskedLM"),zdt.forEach(t),d9o=r(d9e," (Wav2Vec2 model)"),d9e.forEach(t),c9o=i(U),v1=n(U,"LI",{});var c9e=s(v1);Tfe=n(c9e,"STRONG",{});var Wdt=s(Tfe);f9o=r(Wdt,"xlm"),Wdt.forEach(t),m9o=r(c9e," \u2014 "),YD=n(c9e,"A",{href:!0});var Qdt=s(YD);g9o=r(Qdt,"XLMWithLMHeadModel"),Qdt.forEach(t),h9o=r(c9e," (XLM model)"),c9e.forEach(t),p9o=i(U),F1=n(U,"LI",{});var f9e=s(F1);Mfe=n(f9e,"STRONG",{});var Hdt=s(Mfe);_9o=r(Hdt,"xlm-roberta"),Hdt.forEach(t),u9o=r(f9e," \u2014 "),KD=n(f9e,"A",{href:!0});var Udt=s(KD);b9o=r(Udt,"XLMRobertaForMaskedLM"),Udt.forEach(t),v9o=r(f9e," (XLM-RoBERTa model)"),f9e.forEach(t),F9o=i(U),T1=n(U,"LI",{});var m9e=s(T1);Efe=n(m9e,"STRONG",{});var Jdt=s(Efe);T9o=r(Jdt,"xlm-roberta-xl"),Jdt.forEach(t),M9o=r(m9e," \u2014 "),ZD=n(m9e,"A",{href:!0});var Ydt=s(ZD);E9o=r(Ydt,"XLMRobertaXLForMaskedLM"),Ydt.forEach(t),C9o=r(m9e," (XLM-RoBERTa-XL model)"),m9e.forEach(t),w9o=i(U),M1=n(U,"LI",{});var g9e=s(M1);Cfe=n(g9e,"STRONG",{});var Kdt=s(Cfe);A9o=r(Kdt,"yoso"),Kdt.forEach(t),y9o=r(g9e," \u2014 "),eG=n(g9e,"A",{href:!0});var Zdt=s(eG);L9o=r(Zdt,"YosoForMaskedLM"),Zdt.forEach(t),x9o=r(g9e," (YOSO model)"),g9e.forEach(t),U.forEach(t),$9o=i(aa),E1=n(aa,"P",{});var h9e=s(E1);k9o=r(h9e,"The model is set in evaluation mode by default using "),wfe=n(h9e,"CODE",{});var ect=s(wfe);S9o=r(ect,"model.eval()"),ect.forEach(t),R9o=r(h9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Afe=n(h9e,"CODE",{});var oct=s(Afe);P9o=r(oct,"model.train()"),oct.forEach(t),h9e.forEach(t),B9o=i(aa),T(C1.$$.fragment,aa),aa.forEach(t),zs.forEach(t),Kqe=i(f),qi=n(f,"H2",{class:!0});var rGe=s(qi);w1=n(rGe,"A",{id:!0,class:!0,href:!0});var rct=s(w1);yfe=n(rct,"SPAN",{});var tct=s(yfe);T(yy.$$.fragment,tct),tct.forEach(t),rct.forEach(t),I9o=i(rGe),Lfe=n(rGe,"SPAN",{});var act=s(Lfe);N9o=r(act,"AutoModelForSeq2SeqLM"),act.forEach(t),rGe.forEach(t),Zqe=i(f),So=n(f,"DIV",{class:!0});var Ws=s(So);T(Ly.$$.fragment,Ws),q9o=i(Ws),ji=n(Ws,"P",{});var GZ=s(ji);j9o=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oG=n(GZ,"A",{href:!0});var nct=s(oG);D9o=r(nct,"from_pretrained()"),nct.forEach(t),G9o=r(GZ," class method or the "),rG=n(GZ,"A",{href:!0});var sct=s(rG);O9o=r(sct,"from_config()"),sct.forEach(t),V9o=r(GZ,` class
method.`),GZ.forEach(t),X9o=i(Ws),xy=n(Ws,"P",{});var tGe=s(xy);z9o=r(tGe,"This class cannot be instantiated directly using "),xfe=n(tGe,"CODE",{});var lct=s(xfe);W9o=r(lct,"__init__()"),lct.forEach(t),Q9o=r(tGe," (throws an error)."),tGe.forEach(t),H9o=i(Ws),lt=n(Ws,"DIV",{class:!0});var Qw=s(lt);T($y.$$.fragment,Qw),U9o=i(Qw),$fe=n(Qw,"P",{});var ict=s($fe);J9o=r(ict,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ict.forEach(t),Y9o=i(Qw),Di=n(Qw,"P",{});var OZ=s(Di);K9o=r(OZ,`Note:
Loading a model from its configuration file does `),kfe=n(OZ,"STRONG",{});var dct=s(kfe);Z9o=r(dct,"not"),dct.forEach(t),exo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(OZ,"A",{href:!0});var cct=s(tG);oxo=r(cct,"from_pretrained()"),cct.forEach(t),rxo=r(OZ," to load the model weights."),OZ.forEach(t),txo=i(Qw),T(A1.$$.fragment,Qw),Qw.forEach(t),axo=i(Ws),eo=n(Ws,"DIV",{class:!0});var na=s(eo);T(ky.$$.fragment,na),nxo=i(na),Sfe=n(na,"P",{});var fct=s(Sfe);sxo=r(fct,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fct.forEach(t),lxo=i(na),Sa=n(na,"P",{});var Hw=s(Sa);ixo=r(Hw,"The model class to instantiate is selected based on the "),Rfe=n(Hw,"CODE",{});var mct=s(Rfe);dxo=r(mct,"model_type"),mct.forEach(t),cxo=r(Hw,` property of the config object (either
passed as an argument or loaded from `),Pfe=n(Hw,"CODE",{});var gct=s(Pfe);fxo=r(gct,"pretrained_model_name_or_path"),gct.forEach(t),mxo=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bfe=n(Hw,"CODE",{});var hct=s(Bfe);gxo=r(hct,"pretrained_model_name_or_path"),hct.forEach(t),hxo=r(Hw,":"),Hw.forEach(t),pxo=i(na),_e=n(na,"UL",{});var ve=s(_e);y1=n(ve,"LI",{});var p9e=s(y1);Ife=n(p9e,"STRONG",{});var pct=s(Ife);_xo=r(pct,"bart"),pct.forEach(t),uxo=r(p9e," \u2014 "),aG=n(p9e,"A",{href:!0});var _ct=s(aG);bxo=r(_ct,"BartForConditionalGeneration"),_ct.forEach(t),vxo=r(p9e," (BART model)"),p9e.forEach(t),Fxo=i(ve),L1=n(ve,"LI",{});var _9e=s(L1);Nfe=n(_9e,"STRONG",{});var uct=s(Nfe);Txo=r(uct,"bigbird_pegasus"),uct.forEach(t),Mxo=r(_9e," \u2014 "),nG=n(_9e,"A",{href:!0});var bct=s(nG);Exo=r(bct,"BigBirdPegasusForConditionalGeneration"),bct.forEach(t),Cxo=r(_9e," (BigBirdPegasus model)"),_9e.forEach(t),wxo=i(ve),x1=n(ve,"LI",{});var u9e=s(x1);qfe=n(u9e,"STRONG",{});var vct=s(qfe);Axo=r(vct,"blenderbot"),vct.forEach(t),yxo=r(u9e," \u2014 "),sG=n(u9e,"A",{href:!0});var Fct=s(sG);Lxo=r(Fct,"BlenderbotForConditionalGeneration"),Fct.forEach(t),xxo=r(u9e," (Blenderbot model)"),u9e.forEach(t),$xo=i(ve),$1=n(ve,"LI",{});var b9e=s($1);jfe=n(b9e,"STRONG",{});var Tct=s(jfe);kxo=r(Tct,"blenderbot-small"),Tct.forEach(t),Sxo=r(b9e," \u2014 "),lG=n(b9e,"A",{href:!0});var Mct=s(lG);Rxo=r(Mct,"BlenderbotSmallForConditionalGeneration"),Mct.forEach(t),Pxo=r(b9e," (BlenderbotSmall model)"),b9e.forEach(t),Bxo=i(ve),k1=n(ve,"LI",{});var v9e=s(k1);Dfe=n(v9e,"STRONG",{});var Ect=s(Dfe);Ixo=r(Ect,"encoder-decoder"),Ect.forEach(t),Nxo=r(v9e," \u2014 "),iG=n(v9e,"A",{href:!0});var Cct=s(iG);qxo=r(Cct,"EncoderDecoderModel"),Cct.forEach(t),jxo=r(v9e," (Encoder decoder model)"),v9e.forEach(t),Dxo=i(ve),S1=n(ve,"LI",{});var F9e=s(S1);Gfe=n(F9e,"STRONG",{});var wct=s(Gfe);Gxo=r(wct,"fsmt"),wct.forEach(t),Oxo=r(F9e," \u2014 "),dG=n(F9e,"A",{href:!0});var Act=s(dG);Vxo=r(Act,"FSMTForConditionalGeneration"),Act.forEach(t),Xxo=r(F9e," (FairSeq Machine-Translation model)"),F9e.forEach(t),zxo=i(ve),R1=n(ve,"LI",{});var T9e=s(R1);Ofe=n(T9e,"STRONG",{});var yct=s(Ofe);Wxo=r(yct,"led"),yct.forEach(t),Qxo=r(T9e," \u2014 "),cG=n(T9e,"A",{href:!0});var Lct=s(cG);Hxo=r(Lct,"LEDForConditionalGeneration"),Lct.forEach(t),Uxo=r(T9e," (LED model)"),T9e.forEach(t),Jxo=i(ve),P1=n(ve,"LI",{});var M9e=s(P1);Vfe=n(M9e,"STRONG",{});var xct=s(Vfe);Yxo=r(xct,"m2m_100"),xct.forEach(t),Kxo=r(M9e," \u2014 "),fG=n(M9e,"A",{href:!0});var $ct=s(fG);Zxo=r($ct,"M2M100ForConditionalGeneration"),$ct.forEach(t),e$o=r(M9e," (M2M100 model)"),M9e.forEach(t),o$o=i(ve),B1=n(ve,"LI",{});var E9e=s(B1);Xfe=n(E9e,"STRONG",{});var kct=s(Xfe);r$o=r(kct,"marian"),kct.forEach(t),t$o=r(E9e," \u2014 "),mG=n(E9e,"A",{href:!0});var Sct=s(mG);a$o=r(Sct,"MarianMTModel"),Sct.forEach(t),n$o=r(E9e," (Marian model)"),E9e.forEach(t),s$o=i(ve),I1=n(ve,"LI",{});var C9e=s(I1);zfe=n(C9e,"STRONG",{});var Rct=s(zfe);l$o=r(Rct,"mbart"),Rct.forEach(t),i$o=r(C9e," \u2014 "),gG=n(C9e,"A",{href:!0});var Pct=s(gG);d$o=r(Pct,"MBartForConditionalGeneration"),Pct.forEach(t),c$o=r(C9e," (mBART model)"),C9e.forEach(t),f$o=i(ve),N1=n(ve,"LI",{});var w9e=s(N1);Wfe=n(w9e,"STRONG",{});var Bct=s(Wfe);m$o=r(Bct,"mt5"),Bct.forEach(t),g$o=r(w9e," \u2014 "),hG=n(w9e,"A",{href:!0});var Ict=s(hG);h$o=r(Ict,"MT5ForConditionalGeneration"),Ict.forEach(t),p$o=r(w9e," (mT5 model)"),w9e.forEach(t),_$o=i(ve),q1=n(ve,"LI",{});var A9e=s(q1);Qfe=n(A9e,"STRONG",{});var Nct=s(Qfe);u$o=r(Nct,"pegasus"),Nct.forEach(t),b$o=r(A9e," \u2014 "),pG=n(A9e,"A",{href:!0});var qct=s(pG);v$o=r(qct,"PegasusForConditionalGeneration"),qct.forEach(t),F$o=r(A9e," (Pegasus model)"),A9e.forEach(t),T$o=i(ve),j1=n(ve,"LI",{});var y9e=s(j1);Hfe=n(y9e,"STRONG",{});var jct=s(Hfe);M$o=r(jct,"plbart"),jct.forEach(t),E$o=r(y9e," \u2014 "),_G=n(y9e,"A",{href:!0});var Dct=s(_G);C$o=r(Dct,"PLBartForConditionalGeneration"),Dct.forEach(t),w$o=r(y9e," (PLBart model)"),y9e.forEach(t),A$o=i(ve),D1=n(ve,"LI",{});var L9e=s(D1);Ufe=n(L9e,"STRONG",{});var Gct=s(Ufe);y$o=r(Gct,"prophetnet"),Gct.forEach(t),L$o=r(L9e," \u2014 "),uG=n(L9e,"A",{href:!0});var Oct=s(uG);x$o=r(Oct,"ProphetNetForConditionalGeneration"),Oct.forEach(t),$$o=r(L9e," (ProphetNet model)"),L9e.forEach(t),k$o=i(ve),G1=n(ve,"LI",{});var x9e=s(G1);Jfe=n(x9e,"STRONG",{});var Vct=s(Jfe);S$o=r(Vct,"t5"),Vct.forEach(t),R$o=r(x9e," \u2014 "),bG=n(x9e,"A",{href:!0});var Xct=s(bG);P$o=r(Xct,"T5ForConditionalGeneration"),Xct.forEach(t),B$o=r(x9e," (T5 model)"),x9e.forEach(t),I$o=i(ve),O1=n(ve,"LI",{});var $9e=s(O1);Yfe=n($9e,"STRONG",{});var zct=s(Yfe);N$o=r(zct,"xlm-prophetnet"),zct.forEach(t),q$o=r($9e," \u2014 "),vG=n($9e,"A",{href:!0});var Wct=s(vG);j$o=r(Wct,"XLMProphetNetForConditionalGeneration"),Wct.forEach(t),D$o=r($9e," (XLMProphetNet model)"),$9e.forEach(t),ve.forEach(t),G$o=i(na),V1=n(na,"P",{});var k9e=s(V1);O$o=r(k9e,"The model is set in evaluation mode by default using "),Kfe=n(k9e,"CODE",{});var Qct=s(Kfe);V$o=r(Qct,"model.eval()"),Qct.forEach(t),X$o=r(k9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=n(k9e,"CODE",{});var Hct=s(Zfe);z$o=r(Hct,"model.train()"),Hct.forEach(t),k9e.forEach(t),W$o=i(na),T(X1.$$.fragment,na),na.forEach(t),Ws.forEach(t),eje=i(f),Gi=n(f,"H2",{class:!0});var aGe=s(Gi);z1=n(aGe,"A",{id:!0,class:!0,href:!0});var Uct=s(z1);eme=n(Uct,"SPAN",{});var Jct=s(eme);T(Sy.$$.fragment,Jct),Jct.forEach(t),Uct.forEach(t),Q$o=i(aGe),ome=n(aGe,"SPAN",{});var Yct=s(ome);H$o=r(Yct,"AutoModelForSequenceClassification"),Yct.forEach(t),aGe.forEach(t),oje=i(f),Ro=n(f,"DIV",{class:!0});var Qs=s(Ro);T(Ry.$$.fragment,Qs),U$o=i(Qs),Oi=n(Qs,"P",{});var VZ=s(Oi);J$o=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FG=n(VZ,"A",{href:!0});var Kct=s(FG);Y$o=r(Kct,"from_pretrained()"),Kct.forEach(t),K$o=r(VZ," class method or the "),TG=n(VZ,"A",{href:!0});var Zct=s(TG);Z$o=r(Zct,"from_config()"),Zct.forEach(t),eko=r(VZ,` class
method.`),VZ.forEach(t),oko=i(Qs),Py=n(Qs,"P",{});var nGe=s(Py);rko=r(nGe,"This class cannot be instantiated directly using "),rme=n(nGe,"CODE",{});var eft=s(rme);tko=r(eft,"__init__()"),eft.forEach(t),ako=r(nGe," (throws an error)."),nGe.forEach(t),nko=i(Qs),it=n(Qs,"DIV",{class:!0});var Uw=s(it);T(By.$$.fragment,Uw),sko=i(Uw),tme=n(Uw,"P",{});var oft=s(tme);lko=r(oft,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),oft.forEach(t),iko=i(Uw),Vi=n(Uw,"P",{});var XZ=s(Vi);dko=r(XZ,`Note:
Loading a model from its configuration file does `),ame=n(XZ,"STRONG",{});var rft=s(ame);cko=r(rft,"not"),rft.forEach(t),fko=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=n(XZ,"A",{href:!0});var tft=s(MG);mko=r(tft,"from_pretrained()"),tft.forEach(t),gko=r(XZ," to load the model weights."),XZ.forEach(t),hko=i(Uw),T(W1.$$.fragment,Uw),Uw.forEach(t),pko=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(Iy.$$.fragment,sa),_ko=i(sa),nme=n(sa,"P",{});var aft=s(nme);uko=r(aft,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),aft.forEach(t),bko=i(sa),Ra=n(sa,"P",{});var Jw=s(Ra);vko=r(Jw,"The model class to instantiate is selected based on the "),sme=n(Jw,"CODE",{});var nft=s(sme);Fko=r(nft,"model_type"),nft.forEach(t),Tko=r(Jw,` property of the config object (either
passed as an argument or loaded from `),lme=n(Jw,"CODE",{});var sft=s(lme);Mko=r(sft,"pretrained_model_name_or_path"),sft.forEach(t),Eko=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ime=n(Jw,"CODE",{});var lft=s(ime);Cko=r(lft,"pretrained_model_name_or_path"),lft.forEach(t),wko=r(Jw,":"),Jw.forEach(t),Ako=i(sa),N=n(sa,"UL",{});var j=s(N);Q1=n(j,"LI",{});var S9e=s(Q1);dme=n(S9e,"STRONG",{});var ift=s(dme);yko=r(ift,"albert"),ift.forEach(t),Lko=r(S9e," \u2014 "),EG=n(S9e,"A",{href:!0});var dft=s(EG);xko=r(dft,"AlbertForSequenceClassification"),dft.forEach(t),$ko=r(S9e," (ALBERT model)"),S9e.forEach(t),kko=i(j),H1=n(j,"LI",{});var R9e=s(H1);cme=n(R9e,"STRONG",{});var cft=s(cme);Sko=r(cft,"bart"),cft.forEach(t),Rko=r(R9e," \u2014 "),CG=n(R9e,"A",{href:!0});var fft=s(CG);Pko=r(fft,"BartForSequenceClassification"),fft.forEach(t),Bko=r(R9e," (BART model)"),R9e.forEach(t),Iko=i(j),U1=n(j,"LI",{});var P9e=s(U1);fme=n(P9e,"STRONG",{});var mft=s(fme);Nko=r(mft,"bert"),mft.forEach(t),qko=r(P9e," \u2014 "),wG=n(P9e,"A",{href:!0});var gft=s(wG);jko=r(gft,"BertForSequenceClassification"),gft.forEach(t),Dko=r(P9e," (BERT model)"),P9e.forEach(t),Gko=i(j),J1=n(j,"LI",{});var B9e=s(J1);mme=n(B9e,"STRONG",{});var hft=s(mme);Oko=r(hft,"big_bird"),hft.forEach(t),Vko=r(B9e," \u2014 "),AG=n(B9e,"A",{href:!0});var pft=s(AG);Xko=r(pft,"BigBirdForSequenceClassification"),pft.forEach(t),zko=r(B9e," (BigBird model)"),B9e.forEach(t),Wko=i(j),Y1=n(j,"LI",{});var I9e=s(Y1);gme=n(I9e,"STRONG",{});var _ft=s(gme);Qko=r(_ft,"bigbird_pegasus"),_ft.forEach(t),Hko=r(I9e," \u2014 "),yG=n(I9e,"A",{href:!0});var uft=s(yG);Uko=r(uft,"BigBirdPegasusForSequenceClassification"),uft.forEach(t),Jko=r(I9e," (BigBirdPegasus model)"),I9e.forEach(t),Yko=i(j),K1=n(j,"LI",{});var N9e=s(K1);hme=n(N9e,"STRONG",{});var bft=s(hme);Kko=r(bft,"camembert"),bft.forEach(t),Zko=r(N9e," \u2014 "),LG=n(N9e,"A",{href:!0});var vft=s(LG);eSo=r(vft,"CamembertForSequenceClassification"),vft.forEach(t),oSo=r(N9e," (CamemBERT model)"),N9e.forEach(t),rSo=i(j),Z1=n(j,"LI",{});var q9e=s(Z1);pme=n(q9e,"STRONG",{});var Fft=s(pme);tSo=r(Fft,"canine"),Fft.forEach(t),aSo=r(q9e," \u2014 "),xG=n(q9e,"A",{href:!0});var Tft=s(xG);nSo=r(Tft,"CanineForSequenceClassification"),Tft.forEach(t),sSo=r(q9e," (Canine model)"),q9e.forEach(t),lSo=i(j),eb=n(j,"LI",{});var j9e=s(eb);_me=n(j9e,"STRONG",{});var Mft=s(_me);iSo=r(Mft,"convbert"),Mft.forEach(t),dSo=r(j9e," \u2014 "),$G=n(j9e,"A",{href:!0});var Eft=s($G);cSo=r(Eft,"ConvBertForSequenceClassification"),Eft.forEach(t),fSo=r(j9e," (ConvBERT model)"),j9e.forEach(t),mSo=i(j),ob=n(j,"LI",{});var D9e=s(ob);ume=n(D9e,"STRONG",{});var Cft=s(ume);gSo=r(Cft,"ctrl"),Cft.forEach(t),hSo=r(D9e," \u2014 "),kG=n(D9e,"A",{href:!0});var wft=s(kG);pSo=r(wft,"CTRLForSequenceClassification"),wft.forEach(t),_So=r(D9e," (CTRL model)"),D9e.forEach(t),uSo=i(j),rb=n(j,"LI",{});var G9e=s(rb);bme=n(G9e,"STRONG",{});var Aft=s(bme);bSo=r(Aft,"data2vec-text"),Aft.forEach(t),vSo=r(G9e," \u2014 "),SG=n(G9e,"A",{href:!0});var yft=s(SG);FSo=r(yft,"Data2VecTextForSequenceClassification"),yft.forEach(t),TSo=r(G9e," (Data2VecText model)"),G9e.forEach(t),MSo=i(j),tb=n(j,"LI",{});var O9e=s(tb);vme=n(O9e,"STRONG",{});var Lft=s(vme);ESo=r(Lft,"deberta"),Lft.forEach(t),CSo=r(O9e," \u2014 "),RG=n(O9e,"A",{href:!0});var xft=s(RG);wSo=r(xft,"DebertaForSequenceClassification"),xft.forEach(t),ASo=r(O9e," (DeBERTa model)"),O9e.forEach(t),ySo=i(j),ab=n(j,"LI",{});var V9e=s(ab);Fme=n(V9e,"STRONG",{});var $ft=s(Fme);LSo=r($ft,"deberta-v2"),$ft.forEach(t),xSo=r(V9e," \u2014 "),PG=n(V9e,"A",{href:!0});var kft=s(PG);$So=r(kft,"DebertaV2ForSequenceClassification"),kft.forEach(t),kSo=r(V9e," (DeBERTa-v2 model)"),V9e.forEach(t),SSo=i(j),nb=n(j,"LI",{});var X9e=s(nb);Tme=n(X9e,"STRONG",{});var Sft=s(Tme);RSo=r(Sft,"distilbert"),Sft.forEach(t),PSo=r(X9e," \u2014 "),BG=n(X9e,"A",{href:!0});var Rft=s(BG);BSo=r(Rft,"DistilBertForSequenceClassification"),Rft.forEach(t),ISo=r(X9e," (DistilBERT model)"),X9e.forEach(t),NSo=i(j),sb=n(j,"LI",{});var z9e=s(sb);Mme=n(z9e,"STRONG",{});var Pft=s(Mme);qSo=r(Pft,"electra"),Pft.forEach(t),jSo=r(z9e," \u2014 "),IG=n(z9e,"A",{href:!0});var Bft=s(IG);DSo=r(Bft,"ElectraForSequenceClassification"),Bft.forEach(t),GSo=r(z9e," (ELECTRA model)"),z9e.forEach(t),OSo=i(j),lb=n(j,"LI",{});var W9e=s(lb);Eme=n(W9e,"STRONG",{});var Ift=s(Eme);VSo=r(Ift,"flaubert"),Ift.forEach(t),XSo=r(W9e," \u2014 "),NG=n(W9e,"A",{href:!0});var Nft=s(NG);zSo=r(Nft,"FlaubertForSequenceClassification"),Nft.forEach(t),WSo=r(W9e," (FlauBERT model)"),W9e.forEach(t),QSo=i(j),ib=n(j,"LI",{});var Q9e=s(ib);Cme=n(Q9e,"STRONG",{});var qft=s(Cme);HSo=r(qft,"fnet"),qft.forEach(t),USo=r(Q9e," \u2014 "),qG=n(Q9e,"A",{href:!0});var jft=s(qG);JSo=r(jft,"FNetForSequenceClassification"),jft.forEach(t),YSo=r(Q9e," (FNet model)"),Q9e.forEach(t),KSo=i(j),db=n(j,"LI",{});var H9e=s(db);wme=n(H9e,"STRONG",{});var Dft=s(wme);ZSo=r(Dft,"funnel"),Dft.forEach(t),eRo=r(H9e," \u2014 "),jG=n(H9e,"A",{href:!0});var Gft=s(jG);oRo=r(Gft,"FunnelForSequenceClassification"),Gft.forEach(t),rRo=r(H9e," (Funnel Transformer model)"),H9e.forEach(t),tRo=i(j),cb=n(j,"LI",{});var U9e=s(cb);Ame=n(U9e,"STRONG",{});var Oft=s(Ame);aRo=r(Oft,"gpt2"),Oft.forEach(t),nRo=r(U9e," \u2014 "),DG=n(U9e,"A",{href:!0});var Vft=s(DG);sRo=r(Vft,"GPT2ForSequenceClassification"),Vft.forEach(t),lRo=r(U9e," (OpenAI GPT-2 model)"),U9e.forEach(t),iRo=i(j),fb=n(j,"LI",{});var J9e=s(fb);yme=n(J9e,"STRONG",{});var Xft=s(yme);dRo=r(Xft,"gpt_neo"),Xft.forEach(t),cRo=r(J9e," \u2014 "),GG=n(J9e,"A",{href:!0});var zft=s(GG);fRo=r(zft,"GPTNeoForSequenceClassification"),zft.forEach(t),mRo=r(J9e," (GPT Neo model)"),J9e.forEach(t),gRo=i(j),mb=n(j,"LI",{});var Y9e=s(mb);Lme=n(Y9e,"STRONG",{});var Wft=s(Lme);hRo=r(Wft,"gptj"),Wft.forEach(t),pRo=r(Y9e," \u2014 "),OG=n(Y9e,"A",{href:!0});var Qft=s(OG);_Ro=r(Qft,"GPTJForSequenceClassification"),Qft.forEach(t),uRo=r(Y9e," (GPT-J model)"),Y9e.forEach(t),bRo=i(j),gb=n(j,"LI",{});var K9e=s(gb);xme=n(K9e,"STRONG",{});var Hft=s(xme);vRo=r(Hft,"ibert"),Hft.forEach(t),FRo=r(K9e," \u2014 "),VG=n(K9e,"A",{href:!0});var Uft=s(VG);TRo=r(Uft,"IBertForSequenceClassification"),Uft.forEach(t),MRo=r(K9e," (I-BERT model)"),K9e.forEach(t),ERo=i(j),hb=n(j,"LI",{});var Z9e=s(hb);$me=n(Z9e,"STRONG",{});var Jft=s($me);CRo=r(Jft,"layoutlm"),Jft.forEach(t),wRo=r(Z9e," \u2014 "),XG=n(Z9e,"A",{href:!0});var Yft=s(XG);ARo=r(Yft,"LayoutLMForSequenceClassification"),Yft.forEach(t),yRo=r(Z9e," (LayoutLM model)"),Z9e.forEach(t),LRo=i(j),pb=n(j,"LI",{});var exe=s(pb);kme=n(exe,"STRONG",{});var Kft=s(kme);xRo=r(Kft,"layoutlmv2"),Kft.forEach(t),$Ro=r(exe," \u2014 "),zG=n(exe,"A",{href:!0});var Zft=s(zG);kRo=r(Zft,"LayoutLMv2ForSequenceClassification"),Zft.forEach(t),SRo=r(exe," (LayoutLMv2 model)"),exe.forEach(t),RRo=i(j),_b=n(j,"LI",{});var oxe=s(_b);Sme=n(oxe,"STRONG",{});var emt=s(Sme);PRo=r(emt,"layoutlmv3"),emt.forEach(t),BRo=r(oxe," \u2014 "),WG=n(oxe,"A",{href:!0});var omt=s(WG);IRo=r(omt,"LayoutLMv3ForSequenceClassification"),omt.forEach(t),NRo=r(oxe," (LayoutLMv3 model)"),oxe.forEach(t),qRo=i(j),ub=n(j,"LI",{});var rxe=s(ub);Rme=n(rxe,"STRONG",{});var rmt=s(Rme);jRo=r(rmt,"led"),rmt.forEach(t),DRo=r(rxe," \u2014 "),QG=n(rxe,"A",{href:!0});var tmt=s(QG);GRo=r(tmt,"LEDForSequenceClassification"),tmt.forEach(t),ORo=r(rxe," (LED model)"),rxe.forEach(t),VRo=i(j),bb=n(j,"LI",{});var txe=s(bb);Pme=n(txe,"STRONG",{});var amt=s(Pme);XRo=r(amt,"longformer"),amt.forEach(t),zRo=r(txe," \u2014 "),HG=n(txe,"A",{href:!0});var nmt=s(HG);WRo=r(nmt,"LongformerForSequenceClassification"),nmt.forEach(t),QRo=r(txe," (Longformer model)"),txe.forEach(t),HRo=i(j),vb=n(j,"LI",{});var axe=s(vb);Bme=n(axe,"STRONG",{});var smt=s(Bme);URo=r(smt,"mbart"),smt.forEach(t),JRo=r(axe," \u2014 "),UG=n(axe,"A",{href:!0});var lmt=s(UG);YRo=r(lmt,"MBartForSequenceClassification"),lmt.forEach(t),KRo=r(axe," (mBART model)"),axe.forEach(t),ZRo=i(j),Fb=n(j,"LI",{});var nxe=s(Fb);Ime=n(nxe,"STRONG",{});var imt=s(Ime);ePo=r(imt,"megatron-bert"),imt.forEach(t),oPo=r(nxe," \u2014 "),JG=n(nxe,"A",{href:!0});var dmt=s(JG);rPo=r(dmt,"MegatronBertForSequenceClassification"),dmt.forEach(t),tPo=r(nxe," (MegatronBert model)"),nxe.forEach(t),aPo=i(j),Tb=n(j,"LI",{});var sxe=s(Tb);Nme=n(sxe,"STRONG",{});var cmt=s(Nme);nPo=r(cmt,"mobilebert"),cmt.forEach(t),sPo=r(sxe," \u2014 "),YG=n(sxe,"A",{href:!0});var fmt=s(YG);lPo=r(fmt,"MobileBertForSequenceClassification"),fmt.forEach(t),iPo=r(sxe," (MobileBERT model)"),sxe.forEach(t),dPo=i(j),Mb=n(j,"LI",{});var lxe=s(Mb);qme=n(lxe,"STRONG",{});var mmt=s(qme);cPo=r(mmt,"mpnet"),mmt.forEach(t),fPo=r(lxe," \u2014 "),KG=n(lxe,"A",{href:!0});var gmt=s(KG);mPo=r(gmt,"MPNetForSequenceClassification"),gmt.forEach(t),gPo=r(lxe," (MPNet model)"),lxe.forEach(t),hPo=i(j),Eb=n(j,"LI",{});var ixe=s(Eb);jme=n(ixe,"STRONG",{});var hmt=s(jme);pPo=r(hmt,"nystromformer"),hmt.forEach(t),_Po=r(ixe," \u2014 "),ZG=n(ixe,"A",{href:!0});var pmt=s(ZG);uPo=r(pmt,"NystromformerForSequenceClassification"),pmt.forEach(t),bPo=r(ixe," (Nystromformer model)"),ixe.forEach(t),vPo=i(j),Cb=n(j,"LI",{});var dxe=s(Cb);Dme=n(dxe,"STRONG",{});var _mt=s(Dme);FPo=r(_mt,"openai-gpt"),_mt.forEach(t),TPo=r(dxe," \u2014 "),eO=n(dxe,"A",{href:!0});var umt=s(eO);MPo=r(umt,"OpenAIGPTForSequenceClassification"),umt.forEach(t),EPo=r(dxe," (OpenAI GPT model)"),dxe.forEach(t),CPo=i(j),wb=n(j,"LI",{});var cxe=s(wb);Gme=n(cxe,"STRONG",{});var bmt=s(Gme);wPo=r(bmt,"perceiver"),bmt.forEach(t),APo=r(cxe," \u2014 "),oO=n(cxe,"A",{href:!0});var vmt=s(oO);yPo=r(vmt,"PerceiverForSequenceClassification"),vmt.forEach(t),LPo=r(cxe," (Perceiver model)"),cxe.forEach(t),xPo=i(j),Ab=n(j,"LI",{});var fxe=s(Ab);Ome=n(fxe,"STRONG",{});var Fmt=s(Ome);$Po=r(Fmt,"plbart"),Fmt.forEach(t),kPo=r(fxe," \u2014 "),rO=n(fxe,"A",{href:!0});var Tmt=s(rO);SPo=r(Tmt,"PLBartForSequenceClassification"),Tmt.forEach(t),RPo=r(fxe," (PLBart model)"),fxe.forEach(t),PPo=i(j),yb=n(j,"LI",{});var mxe=s(yb);Vme=n(mxe,"STRONG",{});var Mmt=s(Vme);BPo=r(Mmt,"qdqbert"),Mmt.forEach(t),IPo=r(mxe," \u2014 "),tO=n(mxe,"A",{href:!0});var Emt=s(tO);NPo=r(Emt,"QDQBertForSequenceClassification"),Emt.forEach(t),qPo=r(mxe," (QDQBert model)"),mxe.forEach(t),jPo=i(j),Lb=n(j,"LI",{});var gxe=s(Lb);Xme=n(gxe,"STRONG",{});var Cmt=s(Xme);DPo=r(Cmt,"reformer"),Cmt.forEach(t),GPo=r(gxe," \u2014 "),aO=n(gxe,"A",{href:!0});var wmt=s(aO);OPo=r(wmt,"ReformerForSequenceClassification"),wmt.forEach(t),VPo=r(gxe," (Reformer model)"),gxe.forEach(t),XPo=i(j),xb=n(j,"LI",{});var hxe=s(xb);zme=n(hxe,"STRONG",{});var Amt=s(zme);zPo=r(Amt,"rembert"),Amt.forEach(t),WPo=r(hxe," \u2014 "),nO=n(hxe,"A",{href:!0});var ymt=s(nO);QPo=r(ymt,"RemBertForSequenceClassification"),ymt.forEach(t),HPo=r(hxe," (RemBERT model)"),hxe.forEach(t),UPo=i(j),$b=n(j,"LI",{});var pxe=s($b);Wme=n(pxe,"STRONG",{});var Lmt=s(Wme);JPo=r(Lmt,"roberta"),Lmt.forEach(t),YPo=r(pxe," \u2014 "),sO=n(pxe,"A",{href:!0});var xmt=s(sO);KPo=r(xmt,"RobertaForSequenceClassification"),xmt.forEach(t),ZPo=r(pxe," (RoBERTa model)"),pxe.forEach(t),eBo=i(j),kb=n(j,"LI",{});var _xe=s(kb);Qme=n(_xe,"STRONG",{});var $mt=s(Qme);oBo=r($mt,"roformer"),$mt.forEach(t),rBo=r(_xe," \u2014 "),lO=n(_xe,"A",{href:!0});var kmt=s(lO);tBo=r(kmt,"RoFormerForSequenceClassification"),kmt.forEach(t),aBo=r(_xe," (RoFormer model)"),_xe.forEach(t),nBo=i(j),Sb=n(j,"LI",{});var uxe=s(Sb);Hme=n(uxe,"STRONG",{});var Smt=s(Hme);sBo=r(Smt,"squeezebert"),Smt.forEach(t),lBo=r(uxe," \u2014 "),iO=n(uxe,"A",{href:!0});var Rmt=s(iO);iBo=r(Rmt,"SqueezeBertForSequenceClassification"),Rmt.forEach(t),dBo=r(uxe," (SqueezeBERT model)"),uxe.forEach(t),cBo=i(j),Rb=n(j,"LI",{});var bxe=s(Rb);Ume=n(bxe,"STRONG",{});var Pmt=s(Ume);fBo=r(Pmt,"tapas"),Pmt.forEach(t),mBo=r(bxe," \u2014 "),dO=n(bxe,"A",{href:!0});var Bmt=s(dO);gBo=r(Bmt,"TapasForSequenceClassification"),Bmt.forEach(t),hBo=r(bxe," (TAPAS model)"),bxe.forEach(t),pBo=i(j),Pb=n(j,"LI",{});var vxe=s(Pb);Jme=n(vxe,"STRONG",{});var Imt=s(Jme);_Bo=r(Imt,"transfo-xl"),Imt.forEach(t),uBo=r(vxe," \u2014 "),cO=n(vxe,"A",{href:!0});var Nmt=s(cO);bBo=r(Nmt,"TransfoXLForSequenceClassification"),Nmt.forEach(t),vBo=r(vxe," (Transformer-XL model)"),vxe.forEach(t),FBo=i(j),Bb=n(j,"LI",{});var Fxe=s(Bb);Yme=n(Fxe,"STRONG",{});var qmt=s(Yme);TBo=r(qmt,"xlm"),qmt.forEach(t),MBo=r(Fxe," \u2014 "),fO=n(Fxe,"A",{href:!0});var jmt=s(fO);EBo=r(jmt,"XLMForSequenceClassification"),jmt.forEach(t),CBo=r(Fxe," (XLM model)"),Fxe.forEach(t),wBo=i(j),Ib=n(j,"LI",{});var Txe=s(Ib);Kme=n(Txe,"STRONG",{});var Dmt=s(Kme);ABo=r(Dmt,"xlm-roberta"),Dmt.forEach(t),yBo=r(Txe," \u2014 "),mO=n(Txe,"A",{href:!0});var Gmt=s(mO);LBo=r(Gmt,"XLMRobertaForSequenceClassification"),Gmt.forEach(t),xBo=r(Txe," (XLM-RoBERTa model)"),Txe.forEach(t),$Bo=i(j),Nb=n(j,"LI",{});var Mxe=s(Nb);Zme=n(Mxe,"STRONG",{});var Omt=s(Zme);kBo=r(Omt,"xlm-roberta-xl"),Omt.forEach(t),SBo=r(Mxe," \u2014 "),gO=n(Mxe,"A",{href:!0});var Vmt=s(gO);RBo=r(Vmt,"XLMRobertaXLForSequenceClassification"),Vmt.forEach(t),PBo=r(Mxe," (XLM-RoBERTa-XL model)"),Mxe.forEach(t),BBo=i(j),qb=n(j,"LI",{});var Exe=s(qb);ege=n(Exe,"STRONG",{});var Xmt=s(ege);IBo=r(Xmt,"xlnet"),Xmt.forEach(t),NBo=r(Exe," \u2014 "),hO=n(Exe,"A",{href:!0});var zmt=s(hO);qBo=r(zmt,"XLNetForSequenceClassification"),zmt.forEach(t),jBo=r(Exe," (XLNet model)"),Exe.forEach(t),DBo=i(j),jb=n(j,"LI",{});var Cxe=s(jb);oge=n(Cxe,"STRONG",{});var Wmt=s(oge);GBo=r(Wmt,"yoso"),Wmt.forEach(t),OBo=r(Cxe," \u2014 "),pO=n(Cxe,"A",{href:!0});var Qmt=s(pO);VBo=r(Qmt,"YosoForSequenceClassification"),Qmt.forEach(t),XBo=r(Cxe," (YOSO model)"),Cxe.forEach(t),j.forEach(t),zBo=i(sa),Db=n(sa,"P",{});var wxe=s(Db);WBo=r(wxe,"The model is set in evaluation mode by default using "),rge=n(wxe,"CODE",{});var Hmt=s(rge);QBo=r(Hmt,"model.eval()"),Hmt.forEach(t),HBo=r(wxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tge=n(wxe,"CODE",{});var Umt=s(tge);UBo=r(Umt,"model.train()"),Umt.forEach(t),wxe.forEach(t),JBo=i(sa),T(Gb.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),rje=i(f),Xi=n(f,"H2",{class:!0});var sGe=s(Xi);Ob=n(sGe,"A",{id:!0,class:!0,href:!0});var Jmt=s(Ob);age=n(Jmt,"SPAN",{});var Ymt=s(age);T(Ny.$$.fragment,Ymt),Ymt.forEach(t),Jmt.forEach(t),YBo=i(sGe),nge=n(sGe,"SPAN",{});var Kmt=s(nge);KBo=r(Kmt,"AutoModelForMultipleChoice"),Kmt.forEach(t),sGe.forEach(t),tje=i(f),Po=n(f,"DIV",{class:!0});var Hs=s(Po);T(qy.$$.fragment,Hs),ZBo=i(Hs),zi=n(Hs,"P",{});var zZ=s(zi);eIo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_O=n(zZ,"A",{href:!0});var Zmt=s(_O);oIo=r(Zmt,"from_pretrained()"),Zmt.forEach(t),rIo=r(zZ," class method or the "),uO=n(zZ,"A",{href:!0});var egt=s(uO);tIo=r(egt,"from_config()"),egt.forEach(t),aIo=r(zZ,` class
method.`),zZ.forEach(t),nIo=i(Hs),jy=n(Hs,"P",{});var lGe=s(jy);sIo=r(lGe,"This class cannot be instantiated directly using "),sge=n(lGe,"CODE",{});var ogt=s(sge);lIo=r(ogt,"__init__()"),ogt.forEach(t),iIo=r(lGe," (throws an error)."),lGe.forEach(t),dIo=i(Hs),dt=n(Hs,"DIV",{class:!0});var Yw=s(dt);T(Dy.$$.fragment,Yw),cIo=i(Yw),lge=n(Yw,"P",{});var rgt=s(lge);fIo=r(rgt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rgt.forEach(t),mIo=i(Yw),Wi=n(Yw,"P",{});var WZ=s(Wi);gIo=r(WZ,`Note:
Loading a model from its configuration file does `),ige=n(WZ,"STRONG",{});var tgt=s(ige);hIo=r(tgt,"not"),tgt.forEach(t),pIo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=n(WZ,"A",{href:!0});var agt=s(bO);_Io=r(agt,"from_pretrained()"),agt.forEach(t),uIo=r(WZ," to load the model weights."),WZ.forEach(t),bIo=i(Yw),T(Vb.$$.fragment,Yw),Yw.forEach(t),vIo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(Gy.$$.fragment,la),FIo=i(la),dge=n(la,"P",{});var ngt=s(dge);TIo=r(ngt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ngt.forEach(t),MIo=i(la),Pa=n(la,"P",{});var Kw=s(Pa);EIo=r(Kw,"The model class to instantiate is selected based on the "),cge=n(Kw,"CODE",{});var sgt=s(cge);CIo=r(sgt,"model_type"),sgt.forEach(t),wIo=r(Kw,` property of the config object (either
passed as an argument or loaded from `),fge=n(Kw,"CODE",{});var lgt=s(fge);AIo=r(lgt,"pretrained_model_name_or_path"),lgt.forEach(t),yIo=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mge=n(Kw,"CODE",{});var igt=s(mge);LIo=r(igt,"pretrained_model_name_or_path"),igt.forEach(t),xIo=r(Kw,":"),Kw.forEach(t),$Io=i(la),K=n(la,"UL",{});var ee=s(K);Xb=n(ee,"LI",{});var Axe=s(Xb);gge=n(Axe,"STRONG",{});var dgt=s(gge);kIo=r(dgt,"albert"),dgt.forEach(t),SIo=r(Axe," \u2014 "),vO=n(Axe,"A",{href:!0});var cgt=s(vO);RIo=r(cgt,"AlbertForMultipleChoice"),cgt.forEach(t),PIo=r(Axe," (ALBERT model)"),Axe.forEach(t),BIo=i(ee),zb=n(ee,"LI",{});var yxe=s(zb);hge=n(yxe,"STRONG",{});var fgt=s(hge);IIo=r(fgt,"bert"),fgt.forEach(t),NIo=r(yxe," \u2014 "),FO=n(yxe,"A",{href:!0});var mgt=s(FO);qIo=r(mgt,"BertForMultipleChoice"),mgt.forEach(t),jIo=r(yxe," (BERT model)"),yxe.forEach(t),DIo=i(ee),Wb=n(ee,"LI",{});var Lxe=s(Wb);pge=n(Lxe,"STRONG",{});var ggt=s(pge);GIo=r(ggt,"big_bird"),ggt.forEach(t),OIo=r(Lxe," \u2014 "),TO=n(Lxe,"A",{href:!0});var hgt=s(TO);VIo=r(hgt,"BigBirdForMultipleChoice"),hgt.forEach(t),XIo=r(Lxe," (BigBird model)"),Lxe.forEach(t),zIo=i(ee),Qb=n(ee,"LI",{});var xxe=s(Qb);_ge=n(xxe,"STRONG",{});var pgt=s(_ge);WIo=r(pgt,"camembert"),pgt.forEach(t),QIo=r(xxe," \u2014 "),MO=n(xxe,"A",{href:!0});var _gt=s(MO);HIo=r(_gt,"CamembertForMultipleChoice"),_gt.forEach(t),UIo=r(xxe," (CamemBERT model)"),xxe.forEach(t),JIo=i(ee),Hb=n(ee,"LI",{});var $xe=s(Hb);uge=n($xe,"STRONG",{});var ugt=s(uge);YIo=r(ugt,"canine"),ugt.forEach(t),KIo=r($xe," \u2014 "),EO=n($xe,"A",{href:!0});var bgt=s(EO);ZIo=r(bgt,"CanineForMultipleChoice"),bgt.forEach(t),eNo=r($xe," (Canine model)"),$xe.forEach(t),oNo=i(ee),Ub=n(ee,"LI",{});var kxe=s(Ub);bge=n(kxe,"STRONG",{});var vgt=s(bge);rNo=r(vgt,"convbert"),vgt.forEach(t),tNo=r(kxe," \u2014 "),CO=n(kxe,"A",{href:!0});var Fgt=s(CO);aNo=r(Fgt,"ConvBertForMultipleChoice"),Fgt.forEach(t),nNo=r(kxe," (ConvBERT model)"),kxe.forEach(t),sNo=i(ee),Jb=n(ee,"LI",{});var Sxe=s(Jb);vge=n(Sxe,"STRONG",{});var Tgt=s(vge);lNo=r(Tgt,"data2vec-text"),Tgt.forEach(t),iNo=r(Sxe," \u2014 "),wO=n(Sxe,"A",{href:!0});var Mgt=s(wO);dNo=r(Mgt,"Data2VecTextForMultipleChoice"),Mgt.forEach(t),cNo=r(Sxe," (Data2VecText model)"),Sxe.forEach(t),fNo=i(ee),Yb=n(ee,"LI",{});var Rxe=s(Yb);Fge=n(Rxe,"STRONG",{});var Egt=s(Fge);mNo=r(Egt,"deberta-v2"),Egt.forEach(t),gNo=r(Rxe," \u2014 "),AO=n(Rxe,"A",{href:!0});var Cgt=s(AO);hNo=r(Cgt,"DebertaV2ForMultipleChoice"),Cgt.forEach(t),pNo=r(Rxe," (DeBERTa-v2 model)"),Rxe.forEach(t),_No=i(ee),Kb=n(ee,"LI",{});var Pxe=s(Kb);Tge=n(Pxe,"STRONG",{});var wgt=s(Tge);uNo=r(wgt,"distilbert"),wgt.forEach(t),bNo=r(Pxe," \u2014 "),yO=n(Pxe,"A",{href:!0});var Agt=s(yO);vNo=r(Agt,"DistilBertForMultipleChoice"),Agt.forEach(t),FNo=r(Pxe," (DistilBERT model)"),Pxe.forEach(t),TNo=i(ee),Zb=n(ee,"LI",{});var Bxe=s(Zb);Mge=n(Bxe,"STRONG",{});var ygt=s(Mge);MNo=r(ygt,"electra"),ygt.forEach(t),ENo=r(Bxe," \u2014 "),LO=n(Bxe,"A",{href:!0});var Lgt=s(LO);CNo=r(Lgt,"ElectraForMultipleChoice"),Lgt.forEach(t),wNo=r(Bxe," (ELECTRA model)"),Bxe.forEach(t),ANo=i(ee),e2=n(ee,"LI",{});var Ixe=s(e2);Ege=n(Ixe,"STRONG",{});var xgt=s(Ege);yNo=r(xgt,"flaubert"),xgt.forEach(t),LNo=r(Ixe," \u2014 "),xO=n(Ixe,"A",{href:!0});var $gt=s(xO);xNo=r($gt,"FlaubertForMultipleChoice"),$gt.forEach(t),$No=r(Ixe," (FlauBERT model)"),Ixe.forEach(t),kNo=i(ee),o2=n(ee,"LI",{});var Nxe=s(o2);Cge=n(Nxe,"STRONG",{});var kgt=s(Cge);SNo=r(kgt,"fnet"),kgt.forEach(t),RNo=r(Nxe," \u2014 "),$O=n(Nxe,"A",{href:!0});var Sgt=s($O);PNo=r(Sgt,"FNetForMultipleChoice"),Sgt.forEach(t),BNo=r(Nxe," (FNet model)"),Nxe.forEach(t),INo=i(ee),r2=n(ee,"LI",{});var qxe=s(r2);wge=n(qxe,"STRONG",{});var Rgt=s(wge);NNo=r(Rgt,"funnel"),Rgt.forEach(t),qNo=r(qxe," \u2014 "),kO=n(qxe,"A",{href:!0});var Pgt=s(kO);jNo=r(Pgt,"FunnelForMultipleChoice"),Pgt.forEach(t),DNo=r(qxe," (Funnel Transformer model)"),qxe.forEach(t),GNo=i(ee),t2=n(ee,"LI",{});var jxe=s(t2);Age=n(jxe,"STRONG",{});var Bgt=s(Age);ONo=r(Bgt,"ibert"),Bgt.forEach(t),VNo=r(jxe," \u2014 "),SO=n(jxe,"A",{href:!0});var Igt=s(SO);XNo=r(Igt,"IBertForMultipleChoice"),Igt.forEach(t),zNo=r(jxe," (I-BERT model)"),jxe.forEach(t),WNo=i(ee),a2=n(ee,"LI",{});var Dxe=s(a2);yge=n(Dxe,"STRONG",{});var Ngt=s(yge);QNo=r(Ngt,"longformer"),Ngt.forEach(t),HNo=r(Dxe," \u2014 "),RO=n(Dxe,"A",{href:!0});var qgt=s(RO);UNo=r(qgt,"LongformerForMultipleChoice"),qgt.forEach(t),JNo=r(Dxe," (Longformer model)"),Dxe.forEach(t),YNo=i(ee),n2=n(ee,"LI",{});var Gxe=s(n2);Lge=n(Gxe,"STRONG",{});var jgt=s(Lge);KNo=r(jgt,"megatron-bert"),jgt.forEach(t),ZNo=r(Gxe," \u2014 "),PO=n(Gxe,"A",{href:!0});var Dgt=s(PO);eqo=r(Dgt,"MegatronBertForMultipleChoice"),Dgt.forEach(t),oqo=r(Gxe," (MegatronBert model)"),Gxe.forEach(t),rqo=i(ee),s2=n(ee,"LI",{});var Oxe=s(s2);xge=n(Oxe,"STRONG",{});var Ggt=s(xge);tqo=r(Ggt,"mobilebert"),Ggt.forEach(t),aqo=r(Oxe," \u2014 "),BO=n(Oxe,"A",{href:!0});var Ogt=s(BO);nqo=r(Ogt,"MobileBertForMultipleChoice"),Ogt.forEach(t),sqo=r(Oxe," (MobileBERT model)"),Oxe.forEach(t),lqo=i(ee),l2=n(ee,"LI",{});var Vxe=s(l2);$ge=n(Vxe,"STRONG",{});var Vgt=s($ge);iqo=r(Vgt,"mpnet"),Vgt.forEach(t),dqo=r(Vxe," \u2014 "),IO=n(Vxe,"A",{href:!0});var Xgt=s(IO);cqo=r(Xgt,"MPNetForMultipleChoice"),Xgt.forEach(t),fqo=r(Vxe," (MPNet model)"),Vxe.forEach(t),mqo=i(ee),i2=n(ee,"LI",{});var Xxe=s(i2);kge=n(Xxe,"STRONG",{});var zgt=s(kge);gqo=r(zgt,"nystromformer"),zgt.forEach(t),hqo=r(Xxe," \u2014 "),NO=n(Xxe,"A",{href:!0});var Wgt=s(NO);pqo=r(Wgt,"NystromformerForMultipleChoice"),Wgt.forEach(t),_qo=r(Xxe," (Nystromformer model)"),Xxe.forEach(t),uqo=i(ee),d2=n(ee,"LI",{});var zxe=s(d2);Sge=n(zxe,"STRONG",{});var Qgt=s(Sge);bqo=r(Qgt,"qdqbert"),Qgt.forEach(t),vqo=r(zxe," \u2014 "),qO=n(zxe,"A",{href:!0});var Hgt=s(qO);Fqo=r(Hgt,"QDQBertForMultipleChoice"),Hgt.forEach(t),Tqo=r(zxe," (QDQBert model)"),zxe.forEach(t),Mqo=i(ee),c2=n(ee,"LI",{});var Wxe=s(c2);Rge=n(Wxe,"STRONG",{});var Ugt=s(Rge);Eqo=r(Ugt,"rembert"),Ugt.forEach(t),Cqo=r(Wxe," \u2014 "),jO=n(Wxe,"A",{href:!0});var Jgt=s(jO);wqo=r(Jgt,"RemBertForMultipleChoice"),Jgt.forEach(t),Aqo=r(Wxe," (RemBERT model)"),Wxe.forEach(t),yqo=i(ee),f2=n(ee,"LI",{});var Qxe=s(f2);Pge=n(Qxe,"STRONG",{});var Ygt=s(Pge);Lqo=r(Ygt,"roberta"),Ygt.forEach(t),xqo=r(Qxe," \u2014 "),DO=n(Qxe,"A",{href:!0});var Kgt=s(DO);$qo=r(Kgt,"RobertaForMultipleChoice"),Kgt.forEach(t),kqo=r(Qxe," (RoBERTa model)"),Qxe.forEach(t),Sqo=i(ee),m2=n(ee,"LI",{});var Hxe=s(m2);Bge=n(Hxe,"STRONG",{});var Zgt=s(Bge);Rqo=r(Zgt,"roformer"),Zgt.forEach(t),Pqo=r(Hxe," \u2014 "),GO=n(Hxe,"A",{href:!0});var eht=s(GO);Bqo=r(eht,"RoFormerForMultipleChoice"),eht.forEach(t),Iqo=r(Hxe," (RoFormer model)"),Hxe.forEach(t),Nqo=i(ee),g2=n(ee,"LI",{});var Uxe=s(g2);Ige=n(Uxe,"STRONG",{});var oht=s(Ige);qqo=r(oht,"squeezebert"),oht.forEach(t),jqo=r(Uxe," \u2014 "),OO=n(Uxe,"A",{href:!0});var rht=s(OO);Dqo=r(rht,"SqueezeBertForMultipleChoice"),rht.forEach(t),Gqo=r(Uxe," (SqueezeBERT model)"),Uxe.forEach(t),Oqo=i(ee),h2=n(ee,"LI",{});var Jxe=s(h2);Nge=n(Jxe,"STRONG",{});var tht=s(Nge);Vqo=r(tht,"xlm"),tht.forEach(t),Xqo=r(Jxe," \u2014 "),VO=n(Jxe,"A",{href:!0});var aht=s(VO);zqo=r(aht,"XLMForMultipleChoice"),aht.forEach(t),Wqo=r(Jxe," (XLM model)"),Jxe.forEach(t),Qqo=i(ee),p2=n(ee,"LI",{});var Yxe=s(p2);qge=n(Yxe,"STRONG",{});var nht=s(qge);Hqo=r(nht,"xlm-roberta"),nht.forEach(t),Uqo=r(Yxe," \u2014 "),XO=n(Yxe,"A",{href:!0});var sht=s(XO);Jqo=r(sht,"XLMRobertaForMultipleChoice"),sht.forEach(t),Yqo=r(Yxe," (XLM-RoBERTa model)"),Yxe.forEach(t),Kqo=i(ee),_2=n(ee,"LI",{});var Kxe=s(_2);jge=n(Kxe,"STRONG",{});var lht=s(jge);Zqo=r(lht,"xlm-roberta-xl"),lht.forEach(t),ejo=r(Kxe," \u2014 "),zO=n(Kxe,"A",{href:!0});var iht=s(zO);ojo=r(iht,"XLMRobertaXLForMultipleChoice"),iht.forEach(t),rjo=r(Kxe," (XLM-RoBERTa-XL model)"),Kxe.forEach(t),tjo=i(ee),u2=n(ee,"LI",{});var Zxe=s(u2);Dge=n(Zxe,"STRONG",{});var dht=s(Dge);ajo=r(dht,"xlnet"),dht.forEach(t),njo=r(Zxe," \u2014 "),WO=n(Zxe,"A",{href:!0});var cht=s(WO);sjo=r(cht,"XLNetForMultipleChoice"),cht.forEach(t),ljo=r(Zxe," (XLNet model)"),Zxe.forEach(t),ijo=i(ee),b2=n(ee,"LI",{});var e$e=s(b2);Gge=n(e$e,"STRONG",{});var fht=s(Gge);djo=r(fht,"yoso"),fht.forEach(t),cjo=r(e$e," \u2014 "),QO=n(e$e,"A",{href:!0});var mht=s(QO);fjo=r(mht,"YosoForMultipleChoice"),mht.forEach(t),mjo=r(e$e," (YOSO model)"),e$e.forEach(t),ee.forEach(t),gjo=i(la),v2=n(la,"P",{});var o$e=s(v2);hjo=r(o$e,"The model is set in evaluation mode by default using "),Oge=n(o$e,"CODE",{});var ght=s(Oge);pjo=r(ght,"model.eval()"),ght.forEach(t),_jo=r(o$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=n(o$e,"CODE",{});var hht=s(Vge);ujo=r(hht,"model.train()"),hht.forEach(t),o$e.forEach(t),bjo=i(la),T(F2.$$.fragment,la),la.forEach(t),Hs.forEach(t),aje=i(f),Qi=n(f,"H2",{class:!0});var iGe=s(Qi);T2=n(iGe,"A",{id:!0,class:!0,href:!0});var pht=s(T2);Xge=n(pht,"SPAN",{});var _ht=s(Xge);T(Oy.$$.fragment,_ht),_ht.forEach(t),pht.forEach(t),vjo=i(iGe),zge=n(iGe,"SPAN",{});var uht=s(zge);Fjo=r(uht,"AutoModelForNextSentencePrediction"),uht.forEach(t),iGe.forEach(t),nje=i(f),Bo=n(f,"DIV",{class:!0});var Us=s(Bo);T(Vy.$$.fragment,Us),Tjo=i(Us),Hi=n(Us,"P",{});var QZ=s(Hi);Mjo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HO=n(QZ,"A",{href:!0});var bht=s(HO);Ejo=r(bht,"from_pretrained()"),bht.forEach(t),Cjo=r(QZ," class method or the "),UO=n(QZ,"A",{href:!0});var vht=s(UO);wjo=r(vht,"from_config()"),vht.forEach(t),Ajo=r(QZ,` class
method.`),QZ.forEach(t),yjo=i(Us),Xy=n(Us,"P",{});var dGe=s(Xy);Ljo=r(dGe,"This class cannot be instantiated directly using "),Wge=n(dGe,"CODE",{});var Fht=s(Wge);xjo=r(Fht,"__init__()"),Fht.forEach(t),$jo=r(dGe," (throws an error)."),dGe.forEach(t),kjo=i(Us),ct=n(Us,"DIV",{class:!0});var Zw=s(ct);T(zy.$$.fragment,Zw),Sjo=i(Zw),Qge=n(Zw,"P",{});var Tht=s(Qge);Rjo=r(Tht,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Tht.forEach(t),Pjo=i(Zw),Ui=n(Zw,"P",{});var HZ=s(Ui);Bjo=r(HZ,`Note:
Loading a model from its configuration file does `),Hge=n(HZ,"STRONG",{});var Mht=s(Hge);Ijo=r(Mht,"not"),Mht.forEach(t),Njo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=n(HZ,"A",{href:!0});var Eht=s(JO);qjo=r(Eht,"from_pretrained()"),Eht.forEach(t),jjo=r(HZ," to load the model weights."),HZ.forEach(t),Djo=i(Zw),T(M2.$$.fragment,Zw),Zw.forEach(t),Gjo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(Wy.$$.fragment,ia),Ojo=i(ia),Uge=n(ia,"P",{});var Cht=s(Uge);Vjo=r(Cht,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Cht.forEach(t),Xjo=i(ia),Ba=n(ia,"P",{});var e6=s(Ba);zjo=r(e6,"The model class to instantiate is selected based on the "),Jge=n(e6,"CODE",{});var wht=s(Jge);Wjo=r(wht,"model_type"),wht.forEach(t),Qjo=r(e6,` property of the config object (either
passed as an argument or loaded from `),Yge=n(e6,"CODE",{});var Aht=s(Yge);Hjo=r(Aht,"pretrained_model_name_or_path"),Aht.forEach(t),Ujo=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kge=n(e6,"CODE",{});var yht=s(Kge);Jjo=r(yht,"pretrained_model_name_or_path"),yht.forEach(t),Yjo=r(e6,":"),e6.forEach(t),Kjo=i(ia),Yr=n(ia,"UL",{});var Js=s(Yr);E2=n(Js,"LI",{});var r$e=s(E2);Zge=n(r$e,"STRONG",{});var Lht=s(Zge);Zjo=r(Lht,"bert"),Lht.forEach(t),eDo=r(r$e," \u2014 "),YO=n(r$e,"A",{href:!0});var xht=s(YO);oDo=r(xht,"BertForNextSentencePrediction"),xht.forEach(t),rDo=r(r$e," (BERT model)"),r$e.forEach(t),tDo=i(Js),C2=n(Js,"LI",{});var t$e=s(C2);ehe=n(t$e,"STRONG",{});var $ht=s(ehe);aDo=r($ht,"fnet"),$ht.forEach(t),nDo=r(t$e," \u2014 "),KO=n(t$e,"A",{href:!0});var kht=s(KO);sDo=r(kht,"FNetForNextSentencePrediction"),kht.forEach(t),lDo=r(t$e," (FNet model)"),t$e.forEach(t),iDo=i(Js),w2=n(Js,"LI",{});var a$e=s(w2);ohe=n(a$e,"STRONG",{});var Sht=s(ohe);dDo=r(Sht,"megatron-bert"),Sht.forEach(t),cDo=r(a$e," \u2014 "),ZO=n(a$e,"A",{href:!0});var Rht=s(ZO);fDo=r(Rht,"MegatronBertForNextSentencePrediction"),Rht.forEach(t),mDo=r(a$e," (MegatronBert model)"),a$e.forEach(t),gDo=i(Js),A2=n(Js,"LI",{});var n$e=s(A2);rhe=n(n$e,"STRONG",{});var Pht=s(rhe);hDo=r(Pht,"mobilebert"),Pht.forEach(t),pDo=r(n$e," \u2014 "),eV=n(n$e,"A",{href:!0});var Bht=s(eV);_Do=r(Bht,"MobileBertForNextSentencePrediction"),Bht.forEach(t),uDo=r(n$e," (MobileBERT model)"),n$e.forEach(t),bDo=i(Js),y2=n(Js,"LI",{});var s$e=s(y2);the=n(s$e,"STRONG",{});var Iht=s(the);vDo=r(Iht,"qdqbert"),Iht.forEach(t),FDo=r(s$e," \u2014 "),oV=n(s$e,"A",{href:!0});var Nht=s(oV);TDo=r(Nht,"QDQBertForNextSentencePrediction"),Nht.forEach(t),MDo=r(s$e," (QDQBert model)"),s$e.forEach(t),Js.forEach(t),EDo=i(ia),L2=n(ia,"P",{});var l$e=s(L2);CDo=r(l$e,"The model is set in evaluation mode by default using "),ahe=n(l$e,"CODE",{});var qht=s(ahe);wDo=r(qht,"model.eval()"),qht.forEach(t),ADo=r(l$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nhe=n(l$e,"CODE",{});var jht=s(nhe);yDo=r(jht,"model.train()"),jht.forEach(t),l$e.forEach(t),LDo=i(ia),T(x2.$$.fragment,ia),ia.forEach(t),Us.forEach(t),sje=i(f),Ji=n(f,"H2",{class:!0});var cGe=s(Ji);$2=n(cGe,"A",{id:!0,class:!0,href:!0});var Dht=s($2);she=n(Dht,"SPAN",{});var Ght=s(she);T(Qy.$$.fragment,Ght),Ght.forEach(t),Dht.forEach(t),xDo=i(cGe),lhe=n(cGe,"SPAN",{});var Oht=s(lhe);$Do=r(Oht,"AutoModelForTokenClassification"),Oht.forEach(t),cGe.forEach(t),lje=i(f),Io=n(f,"DIV",{class:!0});var Ys=s(Io);T(Hy.$$.fragment,Ys),kDo=i(Ys),Yi=n(Ys,"P",{});var UZ=s(Yi);SDo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rV=n(UZ,"A",{href:!0});var Vht=s(rV);RDo=r(Vht,"from_pretrained()"),Vht.forEach(t),PDo=r(UZ," class method or the "),tV=n(UZ,"A",{href:!0});var Xht=s(tV);BDo=r(Xht,"from_config()"),Xht.forEach(t),IDo=r(UZ,` class
method.`),UZ.forEach(t),NDo=i(Ys),Uy=n(Ys,"P",{});var fGe=s(Uy);qDo=r(fGe,"This class cannot be instantiated directly using "),ihe=n(fGe,"CODE",{});var zht=s(ihe);jDo=r(zht,"__init__()"),zht.forEach(t),DDo=r(fGe," (throws an error)."),fGe.forEach(t),GDo=i(Ys),ft=n(Ys,"DIV",{class:!0});var o6=s(ft);T(Jy.$$.fragment,o6),ODo=i(o6),dhe=n(o6,"P",{});var Wht=s(dhe);VDo=r(Wht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Wht.forEach(t),XDo=i(o6),Ki=n(o6,"P",{});var JZ=s(Ki);zDo=r(JZ,`Note:
Loading a model from its configuration file does `),che=n(JZ,"STRONG",{});var Qht=s(che);WDo=r(Qht,"not"),Qht.forEach(t),QDo=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=n(JZ,"A",{href:!0});var Hht=s(aV);HDo=r(Hht,"from_pretrained()"),Hht.forEach(t),UDo=r(JZ," to load the model weights."),JZ.forEach(t),JDo=i(o6),T(k2.$$.fragment,o6),o6.forEach(t),YDo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(Yy.$$.fragment,da),KDo=i(da),fhe=n(da,"P",{});var Uht=s(fhe);ZDo=r(Uht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Uht.forEach(t),eGo=i(da),Ia=n(da,"P",{});var r6=s(Ia);oGo=r(r6,"The model class to instantiate is selected based on the "),mhe=n(r6,"CODE",{});var Jht=s(mhe);rGo=r(Jht,"model_type"),Jht.forEach(t),tGo=r(r6,` property of the config object (either
passed as an argument or loaded from `),ghe=n(r6,"CODE",{});var Yht=s(ghe);aGo=r(Yht,"pretrained_model_name_or_path"),Yht.forEach(t),nGo=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hhe=n(r6,"CODE",{});var Kht=s(hhe);sGo=r(Kht,"pretrained_model_name_or_path"),Kht.forEach(t),lGo=r(r6,":"),r6.forEach(t),iGo=i(da),H=n(da,"UL",{});var J=s(H);S2=n(J,"LI",{});var i$e=s(S2);phe=n(i$e,"STRONG",{});var Zht=s(phe);dGo=r(Zht,"albert"),Zht.forEach(t),cGo=r(i$e," \u2014 "),nV=n(i$e,"A",{href:!0});var ept=s(nV);fGo=r(ept,"AlbertForTokenClassification"),ept.forEach(t),mGo=r(i$e," (ALBERT model)"),i$e.forEach(t),gGo=i(J),R2=n(J,"LI",{});var d$e=s(R2);_he=n(d$e,"STRONG",{});var opt=s(_he);hGo=r(opt,"bert"),opt.forEach(t),pGo=r(d$e," \u2014 "),sV=n(d$e,"A",{href:!0});var rpt=s(sV);_Go=r(rpt,"BertForTokenClassification"),rpt.forEach(t),uGo=r(d$e," (BERT model)"),d$e.forEach(t),bGo=i(J),P2=n(J,"LI",{});var c$e=s(P2);uhe=n(c$e,"STRONG",{});var tpt=s(uhe);vGo=r(tpt,"big_bird"),tpt.forEach(t),FGo=r(c$e," \u2014 "),lV=n(c$e,"A",{href:!0});var apt=s(lV);TGo=r(apt,"BigBirdForTokenClassification"),apt.forEach(t),MGo=r(c$e," (BigBird model)"),c$e.forEach(t),EGo=i(J),B2=n(J,"LI",{});var f$e=s(B2);bhe=n(f$e,"STRONG",{});var npt=s(bhe);CGo=r(npt,"camembert"),npt.forEach(t),wGo=r(f$e," \u2014 "),iV=n(f$e,"A",{href:!0});var spt=s(iV);AGo=r(spt,"CamembertForTokenClassification"),spt.forEach(t),yGo=r(f$e," (CamemBERT model)"),f$e.forEach(t),LGo=i(J),I2=n(J,"LI",{});var m$e=s(I2);vhe=n(m$e,"STRONG",{});var lpt=s(vhe);xGo=r(lpt,"canine"),lpt.forEach(t),$Go=r(m$e," \u2014 "),dV=n(m$e,"A",{href:!0});var ipt=s(dV);kGo=r(ipt,"CanineForTokenClassification"),ipt.forEach(t),SGo=r(m$e," (Canine model)"),m$e.forEach(t),RGo=i(J),N2=n(J,"LI",{});var g$e=s(N2);Fhe=n(g$e,"STRONG",{});var dpt=s(Fhe);PGo=r(dpt,"convbert"),dpt.forEach(t),BGo=r(g$e," \u2014 "),cV=n(g$e,"A",{href:!0});var cpt=s(cV);IGo=r(cpt,"ConvBertForTokenClassification"),cpt.forEach(t),NGo=r(g$e," (ConvBERT model)"),g$e.forEach(t),qGo=i(J),q2=n(J,"LI",{});var h$e=s(q2);The=n(h$e,"STRONG",{});var fpt=s(The);jGo=r(fpt,"data2vec-text"),fpt.forEach(t),DGo=r(h$e," \u2014 "),fV=n(h$e,"A",{href:!0});var mpt=s(fV);GGo=r(mpt,"Data2VecTextForTokenClassification"),mpt.forEach(t),OGo=r(h$e," (Data2VecText model)"),h$e.forEach(t),VGo=i(J),j2=n(J,"LI",{});var p$e=s(j2);Mhe=n(p$e,"STRONG",{});var gpt=s(Mhe);XGo=r(gpt,"deberta"),gpt.forEach(t),zGo=r(p$e," \u2014 "),mV=n(p$e,"A",{href:!0});var hpt=s(mV);WGo=r(hpt,"DebertaForTokenClassification"),hpt.forEach(t),QGo=r(p$e," (DeBERTa model)"),p$e.forEach(t),HGo=i(J),D2=n(J,"LI",{});var _$e=s(D2);Ehe=n(_$e,"STRONG",{});var ppt=s(Ehe);UGo=r(ppt,"deberta-v2"),ppt.forEach(t),JGo=r(_$e," \u2014 "),gV=n(_$e,"A",{href:!0});var _pt=s(gV);YGo=r(_pt,"DebertaV2ForTokenClassification"),_pt.forEach(t),KGo=r(_$e," (DeBERTa-v2 model)"),_$e.forEach(t),ZGo=i(J),G2=n(J,"LI",{});var u$e=s(G2);Che=n(u$e,"STRONG",{});var upt=s(Che);eOo=r(upt,"distilbert"),upt.forEach(t),oOo=r(u$e," \u2014 "),hV=n(u$e,"A",{href:!0});var bpt=s(hV);rOo=r(bpt,"DistilBertForTokenClassification"),bpt.forEach(t),tOo=r(u$e," (DistilBERT model)"),u$e.forEach(t),aOo=i(J),O2=n(J,"LI",{});var b$e=s(O2);whe=n(b$e,"STRONG",{});var vpt=s(whe);nOo=r(vpt,"electra"),vpt.forEach(t),sOo=r(b$e," \u2014 "),pV=n(b$e,"A",{href:!0});var Fpt=s(pV);lOo=r(Fpt,"ElectraForTokenClassification"),Fpt.forEach(t),iOo=r(b$e," (ELECTRA model)"),b$e.forEach(t),dOo=i(J),V2=n(J,"LI",{});var v$e=s(V2);Ahe=n(v$e,"STRONG",{});var Tpt=s(Ahe);cOo=r(Tpt,"flaubert"),Tpt.forEach(t),fOo=r(v$e," \u2014 "),_V=n(v$e,"A",{href:!0});var Mpt=s(_V);mOo=r(Mpt,"FlaubertForTokenClassification"),Mpt.forEach(t),gOo=r(v$e," (FlauBERT model)"),v$e.forEach(t),hOo=i(J),X2=n(J,"LI",{});var F$e=s(X2);yhe=n(F$e,"STRONG",{});var Ept=s(yhe);pOo=r(Ept,"fnet"),Ept.forEach(t),_Oo=r(F$e," \u2014 "),uV=n(F$e,"A",{href:!0});var Cpt=s(uV);uOo=r(Cpt,"FNetForTokenClassification"),Cpt.forEach(t),bOo=r(F$e," (FNet model)"),F$e.forEach(t),vOo=i(J),z2=n(J,"LI",{});var T$e=s(z2);Lhe=n(T$e,"STRONG",{});var wpt=s(Lhe);FOo=r(wpt,"funnel"),wpt.forEach(t),TOo=r(T$e," \u2014 "),bV=n(T$e,"A",{href:!0});var Apt=s(bV);MOo=r(Apt,"FunnelForTokenClassification"),Apt.forEach(t),EOo=r(T$e," (Funnel Transformer model)"),T$e.forEach(t),COo=i(J),W2=n(J,"LI",{});var M$e=s(W2);xhe=n(M$e,"STRONG",{});var ypt=s(xhe);wOo=r(ypt,"gpt2"),ypt.forEach(t),AOo=r(M$e," \u2014 "),vV=n(M$e,"A",{href:!0});var Lpt=s(vV);yOo=r(Lpt,"GPT2ForTokenClassification"),Lpt.forEach(t),LOo=r(M$e," (OpenAI GPT-2 model)"),M$e.forEach(t),xOo=i(J),Q2=n(J,"LI",{});var E$e=s(Q2);$he=n(E$e,"STRONG",{});var xpt=s($he);$Oo=r(xpt,"ibert"),xpt.forEach(t),kOo=r(E$e," \u2014 "),FV=n(E$e,"A",{href:!0});var $pt=s(FV);SOo=r($pt,"IBertForTokenClassification"),$pt.forEach(t),ROo=r(E$e," (I-BERT model)"),E$e.forEach(t),POo=i(J),H2=n(J,"LI",{});var C$e=s(H2);khe=n(C$e,"STRONG",{});var kpt=s(khe);BOo=r(kpt,"layoutlm"),kpt.forEach(t),IOo=r(C$e," \u2014 "),TV=n(C$e,"A",{href:!0});var Spt=s(TV);NOo=r(Spt,"LayoutLMForTokenClassification"),Spt.forEach(t),qOo=r(C$e," (LayoutLM model)"),C$e.forEach(t),jOo=i(J),U2=n(J,"LI",{});var w$e=s(U2);She=n(w$e,"STRONG",{});var Rpt=s(She);DOo=r(Rpt,"layoutlmv2"),Rpt.forEach(t),GOo=r(w$e," \u2014 "),MV=n(w$e,"A",{href:!0});var Ppt=s(MV);OOo=r(Ppt,"LayoutLMv2ForTokenClassification"),Ppt.forEach(t),VOo=r(w$e," (LayoutLMv2 model)"),w$e.forEach(t),XOo=i(J),J2=n(J,"LI",{});var A$e=s(J2);Rhe=n(A$e,"STRONG",{});var Bpt=s(Rhe);zOo=r(Bpt,"layoutlmv3"),Bpt.forEach(t),WOo=r(A$e," \u2014 "),EV=n(A$e,"A",{href:!0});var Ipt=s(EV);QOo=r(Ipt,"LayoutLMv3ForTokenClassification"),Ipt.forEach(t),HOo=r(A$e," (LayoutLMv3 model)"),A$e.forEach(t),UOo=i(J),Y2=n(J,"LI",{});var y$e=s(Y2);Phe=n(y$e,"STRONG",{});var Npt=s(Phe);JOo=r(Npt,"longformer"),Npt.forEach(t),YOo=r(y$e," \u2014 "),CV=n(y$e,"A",{href:!0});var qpt=s(CV);KOo=r(qpt,"LongformerForTokenClassification"),qpt.forEach(t),ZOo=r(y$e," (Longformer model)"),y$e.forEach(t),eVo=i(J),K2=n(J,"LI",{});var L$e=s(K2);Bhe=n(L$e,"STRONG",{});var jpt=s(Bhe);oVo=r(jpt,"megatron-bert"),jpt.forEach(t),rVo=r(L$e," \u2014 "),wV=n(L$e,"A",{href:!0});var Dpt=s(wV);tVo=r(Dpt,"MegatronBertForTokenClassification"),Dpt.forEach(t),aVo=r(L$e," (MegatronBert model)"),L$e.forEach(t),nVo=i(J),Z2=n(J,"LI",{});var x$e=s(Z2);Ihe=n(x$e,"STRONG",{});var Gpt=s(Ihe);sVo=r(Gpt,"mobilebert"),Gpt.forEach(t),lVo=r(x$e," \u2014 "),AV=n(x$e,"A",{href:!0});var Opt=s(AV);iVo=r(Opt,"MobileBertForTokenClassification"),Opt.forEach(t),dVo=r(x$e," (MobileBERT model)"),x$e.forEach(t),cVo=i(J),ev=n(J,"LI",{});var $$e=s(ev);Nhe=n($$e,"STRONG",{});var Vpt=s(Nhe);fVo=r(Vpt,"mpnet"),Vpt.forEach(t),mVo=r($$e," \u2014 "),yV=n($$e,"A",{href:!0});var Xpt=s(yV);gVo=r(Xpt,"MPNetForTokenClassification"),Xpt.forEach(t),hVo=r($$e," (MPNet model)"),$$e.forEach(t),pVo=i(J),ov=n(J,"LI",{});var k$e=s(ov);qhe=n(k$e,"STRONG",{});var zpt=s(qhe);_Vo=r(zpt,"nystromformer"),zpt.forEach(t),uVo=r(k$e," \u2014 "),LV=n(k$e,"A",{href:!0});var Wpt=s(LV);bVo=r(Wpt,"NystromformerForTokenClassification"),Wpt.forEach(t),vVo=r(k$e," (Nystromformer model)"),k$e.forEach(t),FVo=i(J),rv=n(J,"LI",{});var S$e=s(rv);jhe=n(S$e,"STRONG",{});var Qpt=s(jhe);TVo=r(Qpt,"qdqbert"),Qpt.forEach(t),MVo=r(S$e," \u2014 "),xV=n(S$e,"A",{href:!0});var Hpt=s(xV);EVo=r(Hpt,"QDQBertForTokenClassification"),Hpt.forEach(t),CVo=r(S$e," (QDQBert model)"),S$e.forEach(t),wVo=i(J),tv=n(J,"LI",{});var R$e=s(tv);Dhe=n(R$e,"STRONG",{});var Upt=s(Dhe);AVo=r(Upt,"rembert"),Upt.forEach(t),yVo=r(R$e," \u2014 "),$V=n(R$e,"A",{href:!0});var Jpt=s($V);LVo=r(Jpt,"RemBertForTokenClassification"),Jpt.forEach(t),xVo=r(R$e," (RemBERT model)"),R$e.forEach(t),$Vo=i(J),av=n(J,"LI",{});var P$e=s(av);Ghe=n(P$e,"STRONG",{});var Ypt=s(Ghe);kVo=r(Ypt,"roberta"),Ypt.forEach(t),SVo=r(P$e," \u2014 "),kV=n(P$e,"A",{href:!0});var Kpt=s(kV);RVo=r(Kpt,"RobertaForTokenClassification"),Kpt.forEach(t),PVo=r(P$e," (RoBERTa model)"),P$e.forEach(t),BVo=i(J),nv=n(J,"LI",{});var B$e=s(nv);Ohe=n(B$e,"STRONG",{});var Zpt=s(Ohe);IVo=r(Zpt,"roformer"),Zpt.forEach(t),NVo=r(B$e," \u2014 "),SV=n(B$e,"A",{href:!0});var e_t=s(SV);qVo=r(e_t,"RoFormerForTokenClassification"),e_t.forEach(t),jVo=r(B$e," (RoFormer model)"),B$e.forEach(t),DVo=i(J),sv=n(J,"LI",{});var I$e=s(sv);Vhe=n(I$e,"STRONG",{});var o_t=s(Vhe);GVo=r(o_t,"squeezebert"),o_t.forEach(t),OVo=r(I$e," \u2014 "),RV=n(I$e,"A",{href:!0});var r_t=s(RV);VVo=r(r_t,"SqueezeBertForTokenClassification"),r_t.forEach(t),XVo=r(I$e," (SqueezeBERT model)"),I$e.forEach(t),zVo=i(J),lv=n(J,"LI",{});var N$e=s(lv);Xhe=n(N$e,"STRONG",{});var t_t=s(Xhe);WVo=r(t_t,"xlm"),t_t.forEach(t),QVo=r(N$e," \u2014 "),PV=n(N$e,"A",{href:!0});var a_t=s(PV);HVo=r(a_t,"XLMForTokenClassification"),a_t.forEach(t),UVo=r(N$e," (XLM model)"),N$e.forEach(t),JVo=i(J),iv=n(J,"LI",{});var q$e=s(iv);zhe=n(q$e,"STRONG",{});var n_t=s(zhe);YVo=r(n_t,"xlm-roberta"),n_t.forEach(t),KVo=r(q$e," \u2014 "),BV=n(q$e,"A",{href:!0});var s_t=s(BV);ZVo=r(s_t,"XLMRobertaForTokenClassification"),s_t.forEach(t),eXo=r(q$e," (XLM-RoBERTa model)"),q$e.forEach(t),oXo=i(J),dv=n(J,"LI",{});var j$e=s(dv);Whe=n(j$e,"STRONG",{});var l_t=s(Whe);rXo=r(l_t,"xlm-roberta-xl"),l_t.forEach(t),tXo=r(j$e," \u2014 "),IV=n(j$e,"A",{href:!0});var i_t=s(IV);aXo=r(i_t,"XLMRobertaXLForTokenClassification"),i_t.forEach(t),nXo=r(j$e," (XLM-RoBERTa-XL model)"),j$e.forEach(t),sXo=i(J),cv=n(J,"LI",{});var D$e=s(cv);Qhe=n(D$e,"STRONG",{});var d_t=s(Qhe);lXo=r(d_t,"xlnet"),d_t.forEach(t),iXo=r(D$e," \u2014 "),NV=n(D$e,"A",{href:!0});var c_t=s(NV);dXo=r(c_t,"XLNetForTokenClassification"),c_t.forEach(t),cXo=r(D$e," (XLNet model)"),D$e.forEach(t),fXo=i(J),fv=n(J,"LI",{});var G$e=s(fv);Hhe=n(G$e,"STRONG",{});var f_t=s(Hhe);mXo=r(f_t,"yoso"),f_t.forEach(t),gXo=r(G$e," \u2014 "),qV=n(G$e,"A",{href:!0});var m_t=s(qV);hXo=r(m_t,"YosoForTokenClassification"),m_t.forEach(t),pXo=r(G$e," (YOSO model)"),G$e.forEach(t),J.forEach(t),_Xo=i(da),mv=n(da,"P",{});var O$e=s(mv);uXo=r(O$e,"The model is set in evaluation mode by default using "),Uhe=n(O$e,"CODE",{});var g_t=s(Uhe);bXo=r(g_t,"model.eval()"),g_t.forEach(t),vXo=r(O$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jhe=n(O$e,"CODE",{});var h_t=s(Jhe);FXo=r(h_t,"model.train()"),h_t.forEach(t),O$e.forEach(t),TXo=i(da),T(gv.$$.fragment,da),da.forEach(t),Ys.forEach(t),ije=i(f),Zi=n(f,"H2",{class:!0});var mGe=s(Zi);hv=n(mGe,"A",{id:!0,class:!0,href:!0});var p_t=s(hv);Yhe=n(p_t,"SPAN",{});var __t=s(Yhe);T(Ky.$$.fragment,__t),__t.forEach(t),p_t.forEach(t),MXo=i(mGe),Khe=n(mGe,"SPAN",{});var u_t=s(Khe);EXo=r(u_t,"AutoModelForQuestionAnswering"),u_t.forEach(t),mGe.forEach(t),dje=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(Zy.$$.fragment,Ks),CXo=i(Ks),ed=n(Ks,"P",{});var YZ=s(ed);wXo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jV=n(YZ,"A",{href:!0});var b_t=s(jV);AXo=r(b_t,"from_pretrained()"),b_t.forEach(t),yXo=r(YZ," class method or the "),DV=n(YZ,"A",{href:!0});var v_t=s(DV);LXo=r(v_t,"from_config()"),v_t.forEach(t),xXo=r(YZ,` class
method.`),YZ.forEach(t),$Xo=i(Ks),eL=n(Ks,"P",{});var gGe=s(eL);kXo=r(gGe,"This class cannot be instantiated directly using "),Zhe=n(gGe,"CODE",{});var F_t=s(Zhe);SXo=r(F_t,"__init__()"),F_t.forEach(t),RXo=r(gGe," (throws an error)."),gGe.forEach(t),PXo=i(Ks),mt=n(Ks,"DIV",{class:!0});var t6=s(mt);T(oL.$$.fragment,t6),BXo=i(t6),epe=n(t6,"P",{});var T_t=s(epe);IXo=r(T_t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),T_t.forEach(t),NXo=i(t6),od=n(t6,"P",{});var KZ=s(od);qXo=r(KZ,`Note:
Loading a model from its configuration file does `),ope=n(KZ,"STRONG",{});var M_t=s(ope);jXo=r(M_t,"not"),M_t.forEach(t),DXo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(KZ,"A",{href:!0});var E_t=s(GV);GXo=r(E_t,"from_pretrained()"),E_t.forEach(t),OXo=r(KZ," to load the model weights."),KZ.forEach(t),VXo=i(t6),T(pv.$$.fragment,t6),t6.forEach(t),XXo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(rL.$$.fragment,ca),zXo=i(ca),rpe=n(ca,"P",{});var C_t=s(rpe);WXo=r(C_t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),C_t.forEach(t),QXo=i(ca),Na=n(ca,"P",{});var a6=s(Na);HXo=r(a6,"The model class to instantiate is selected based on the "),tpe=n(a6,"CODE",{});var w_t=s(tpe);UXo=r(w_t,"model_type"),w_t.forEach(t),JXo=r(a6,` property of the config object (either
passed as an argument or loaded from `),ape=n(a6,"CODE",{});var A_t=s(ape);YXo=r(A_t,"pretrained_model_name_or_path"),A_t.forEach(t),KXo=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),npe=n(a6,"CODE",{});var y_t=s(npe);ZXo=r(y_t,"pretrained_model_name_or_path"),y_t.forEach(t),ezo=r(a6,":"),a6.forEach(t),ozo=i(ca),V=n(ca,"UL",{});var X=s(V);_v=n(X,"LI",{});var V$e=s(_v);spe=n(V$e,"STRONG",{});var L_t=s(spe);rzo=r(L_t,"albert"),L_t.forEach(t),tzo=r(V$e," \u2014 "),OV=n(V$e,"A",{href:!0});var x_t=s(OV);azo=r(x_t,"AlbertForQuestionAnswering"),x_t.forEach(t),nzo=r(V$e," (ALBERT model)"),V$e.forEach(t),szo=i(X),uv=n(X,"LI",{});var X$e=s(uv);lpe=n(X$e,"STRONG",{});var $_t=s(lpe);lzo=r($_t,"bart"),$_t.forEach(t),izo=r(X$e," \u2014 "),VV=n(X$e,"A",{href:!0});var k_t=s(VV);dzo=r(k_t,"BartForQuestionAnswering"),k_t.forEach(t),czo=r(X$e," (BART model)"),X$e.forEach(t),fzo=i(X),bv=n(X,"LI",{});var z$e=s(bv);ipe=n(z$e,"STRONG",{});var S_t=s(ipe);mzo=r(S_t,"bert"),S_t.forEach(t),gzo=r(z$e," \u2014 "),XV=n(z$e,"A",{href:!0});var R_t=s(XV);hzo=r(R_t,"BertForQuestionAnswering"),R_t.forEach(t),pzo=r(z$e," (BERT model)"),z$e.forEach(t),_zo=i(X),vv=n(X,"LI",{});var W$e=s(vv);dpe=n(W$e,"STRONG",{});var P_t=s(dpe);uzo=r(P_t,"big_bird"),P_t.forEach(t),bzo=r(W$e," \u2014 "),zV=n(W$e,"A",{href:!0});var B_t=s(zV);vzo=r(B_t,"BigBirdForQuestionAnswering"),B_t.forEach(t),Fzo=r(W$e," (BigBird model)"),W$e.forEach(t),Tzo=i(X),Fv=n(X,"LI",{});var Q$e=s(Fv);cpe=n(Q$e,"STRONG",{});var I_t=s(cpe);Mzo=r(I_t,"bigbird_pegasus"),I_t.forEach(t),Ezo=r(Q$e," \u2014 "),WV=n(Q$e,"A",{href:!0});var N_t=s(WV);Czo=r(N_t,"BigBirdPegasusForQuestionAnswering"),N_t.forEach(t),wzo=r(Q$e," (BigBirdPegasus model)"),Q$e.forEach(t),Azo=i(X),Tv=n(X,"LI",{});var H$e=s(Tv);fpe=n(H$e,"STRONG",{});var q_t=s(fpe);yzo=r(q_t,"camembert"),q_t.forEach(t),Lzo=r(H$e," \u2014 "),QV=n(H$e,"A",{href:!0});var j_t=s(QV);xzo=r(j_t,"CamembertForQuestionAnswering"),j_t.forEach(t),$zo=r(H$e," (CamemBERT model)"),H$e.forEach(t),kzo=i(X),Mv=n(X,"LI",{});var U$e=s(Mv);mpe=n(U$e,"STRONG",{});var D_t=s(mpe);Szo=r(D_t,"canine"),D_t.forEach(t),Rzo=r(U$e," \u2014 "),HV=n(U$e,"A",{href:!0});var G_t=s(HV);Pzo=r(G_t,"CanineForQuestionAnswering"),G_t.forEach(t),Bzo=r(U$e," (Canine model)"),U$e.forEach(t),Izo=i(X),Ev=n(X,"LI",{});var J$e=s(Ev);gpe=n(J$e,"STRONG",{});var O_t=s(gpe);Nzo=r(O_t,"convbert"),O_t.forEach(t),qzo=r(J$e," \u2014 "),UV=n(J$e,"A",{href:!0});var V_t=s(UV);jzo=r(V_t,"ConvBertForQuestionAnswering"),V_t.forEach(t),Dzo=r(J$e," (ConvBERT model)"),J$e.forEach(t),Gzo=i(X),Cv=n(X,"LI",{});var Y$e=s(Cv);hpe=n(Y$e,"STRONG",{});var X_t=s(hpe);Ozo=r(X_t,"data2vec-text"),X_t.forEach(t),Vzo=r(Y$e," \u2014 "),JV=n(Y$e,"A",{href:!0});var z_t=s(JV);Xzo=r(z_t,"Data2VecTextForQuestionAnswering"),z_t.forEach(t),zzo=r(Y$e," (Data2VecText model)"),Y$e.forEach(t),Wzo=i(X),wv=n(X,"LI",{});var K$e=s(wv);ppe=n(K$e,"STRONG",{});var W_t=s(ppe);Qzo=r(W_t,"deberta"),W_t.forEach(t),Hzo=r(K$e," \u2014 "),YV=n(K$e,"A",{href:!0});var Q_t=s(YV);Uzo=r(Q_t,"DebertaForQuestionAnswering"),Q_t.forEach(t),Jzo=r(K$e," (DeBERTa model)"),K$e.forEach(t),Yzo=i(X),Av=n(X,"LI",{});var Z$e=s(Av);_pe=n(Z$e,"STRONG",{});var H_t=s(_pe);Kzo=r(H_t,"deberta-v2"),H_t.forEach(t),Zzo=r(Z$e," \u2014 "),KV=n(Z$e,"A",{href:!0});var U_t=s(KV);eWo=r(U_t,"DebertaV2ForQuestionAnswering"),U_t.forEach(t),oWo=r(Z$e," (DeBERTa-v2 model)"),Z$e.forEach(t),rWo=i(X),yv=n(X,"LI",{});var eke=s(yv);upe=n(eke,"STRONG",{});var J_t=s(upe);tWo=r(J_t,"distilbert"),J_t.forEach(t),aWo=r(eke," \u2014 "),ZV=n(eke,"A",{href:!0});var Y_t=s(ZV);nWo=r(Y_t,"DistilBertForQuestionAnswering"),Y_t.forEach(t),sWo=r(eke," (DistilBERT model)"),eke.forEach(t),lWo=i(X),Lv=n(X,"LI",{});var oke=s(Lv);bpe=n(oke,"STRONG",{});var K_t=s(bpe);iWo=r(K_t,"electra"),K_t.forEach(t),dWo=r(oke," \u2014 "),eX=n(oke,"A",{href:!0});var Z_t=s(eX);cWo=r(Z_t,"ElectraForQuestionAnswering"),Z_t.forEach(t),fWo=r(oke," (ELECTRA model)"),oke.forEach(t),mWo=i(X),xv=n(X,"LI",{});var rke=s(xv);vpe=n(rke,"STRONG",{});var eut=s(vpe);gWo=r(eut,"flaubert"),eut.forEach(t),hWo=r(rke," \u2014 "),oX=n(rke,"A",{href:!0});var out=s(oX);pWo=r(out,"FlaubertForQuestionAnsweringSimple"),out.forEach(t),_Wo=r(rke," (FlauBERT model)"),rke.forEach(t),uWo=i(X),$v=n(X,"LI",{});var tke=s($v);Fpe=n(tke,"STRONG",{});var rut=s(Fpe);bWo=r(rut,"fnet"),rut.forEach(t),vWo=r(tke," \u2014 "),rX=n(tke,"A",{href:!0});var tut=s(rX);FWo=r(tut,"FNetForQuestionAnswering"),tut.forEach(t),TWo=r(tke," (FNet model)"),tke.forEach(t),MWo=i(X),kv=n(X,"LI",{});var ake=s(kv);Tpe=n(ake,"STRONG",{});var aut=s(Tpe);EWo=r(aut,"funnel"),aut.forEach(t),CWo=r(ake," \u2014 "),tX=n(ake,"A",{href:!0});var nut=s(tX);wWo=r(nut,"FunnelForQuestionAnswering"),nut.forEach(t),AWo=r(ake," (Funnel Transformer model)"),ake.forEach(t),yWo=i(X),Sv=n(X,"LI",{});var nke=s(Sv);Mpe=n(nke,"STRONG",{});var sut=s(Mpe);LWo=r(sut,"gptj"),sut.forEach(t),xWo=r(nke," \u2014 "),aX=n(nke,"A",{href:!0});var lut=s(aX);$Wo=r(lut,"GPTJForQuestionAnswering"),lut.forEach(t),kWo=r(nke," (GPT-J model)"),nke.forEach(t),SWo=i(X),Rv=n(X,"LI",{});var ske=s(Rv);Epe=n(ske,"STRONG",{});var iut=s(Epe);RWo=r(iut,"ibert"),iut.forEach(t),PWo=r(ske," \u2014 "),nX=n(ske,"A",{href:!0});var dut=s(nX);BWo=r(dut,"IBertForQuestionAnswering"),dut.forEach(t),IWo=r(ske," (I-BERT model)"),ske.forEach(t),NWo=i(X),Pv=n(X,"LI",{});var lke=s(Pv);Cpe=n(lke,"STRONG",{});var cut=s(Cpe);qWo=r(cut,"layoutlmv2"),cut.forEach(t),jWo=r(lke," \u2014 "),sX=n(lke,"A",{href:!0});var fut=s(sX);DWo=r(fut,"LayoutLMv2ForQuestionAnswering"),fut.forEach(t),GWo=r(lke," (LayoutLMv2 model)"),lke.forEach(t),OWo=i(X),Bv=n(X,"LI",{});var ike=s(Bv);wpe=n(ike,"STRONG",{});var mut=s(wpe);VWo=r(mut,"layoutlmv3"),mut.forEach(t),XWo=r(ike," \u2014 "),lX=n(ike,"A",{href:!0});var gut=s(lX);zWo=r(gut,"LayoutLMv3ForQuestionAnswering"),gut.forEach(t),WWo=r(ike," (LayoutLMv3 model)"),ike.forEach(t),QWo=i(X),Iv=n(X,"LI",{});var dke=s(Iv);Ape=n(dke,"STRONG",{});var hut=s(Ape);HWo=r(hut,"led"),hut.forEach(t),UWo=r(dke," \u2014 "),iX=n(dke,"A",{href:!0});var put=s(iX);JWo=r(put,"LEDForQuestionAnswering"),put.forEach(t),YWo=r(dke," (LED model)"),dke.forEach(t),KWo=i(X),Nv=n(X,"LI",{});var cke=s(Nv);ype=n(cke,"STRONG",{});var _ut=s(ype);ZWo=r(_ut,"longformer"),_ut.forEach(t),eQo=r(cke," \u2014 "),dX=n(cke,"A",{href:!0});var uut=s(dX);oQo=r(uut,"LongformerForQuestionAnswering"),uut.forEach(t),rQo=r(cke," (Longformer model)"),cke.forEach(t),tQo=i(X),qv=n(X,"LI",{});var fke=s(qv);Lpe=n(fke,"STRONG",{});var but=s(Lpe);aQo=r(but,"lxmert"),but.forEach(t),nQo=r(fke," \u2014 "),cX=n(fke,"A",{href:!0});var vut=s(cX);sQo=r(vut,"LxmertForQuestionAnswering"),vut.forEach(t),lQo=r(fke," (LXMERT model)"),fke.forEach(t),iQo=i(X),jv=n(X,"LI",{});var mke=s(jv);xpe=n(mke,"STRONG",{});var Fut=s(xpe);dQo=r(Fut,"mbart"),Fut.forEach(t),cQo=r(mke," \u2014 "),fX=n(mke,"A",{href:!0});var Tut=s(fX);fQo=r(Tut,"MBartForQuestionAnswering"),Tut.forEach(t),mQo=r(mke," (mBART model)"),mke.forEach(t),gQo=i(X),Dv=n(X,"LI",{});var gke=s(Dv);$pe=n(gke,"STRONG",{});var Mut=s($pe);hQo=r(Mut,"megatron-bert"),Mut.forEach(t),pQo=r(gke," \u2014 "),mX=n(gke,"A",{href:!0});var Eut=s(mX);_Qo=r(Eut,"MegatronBertForQuestionAnswering"),Eut.forEach(t),uQo=r(gke," (MegatronBert model)"),gke.forEach(t),bQo=i(X),Gv=n(X,"LI",{});var hke=s(Gv);kpe=n(hke,"STRONG",{});var Cut=s(kpe);vQo=r(Cut,"mobilebert"),Cut.forEach(t),FQo=r(hke," \u2014 "),gX=n(hke,"A",{href:!0});var wut=s(gX);TQo=r(wut,"MobileBertForQuestionAnswering"),wut.forEach(t),MQo=r(hke," (MobileBERT model)"),hke.forEach(t),EQo=i(X),Ov=n(X,"LI",{});var pke=s(Ov);Spe=n(pke,"STRONG",{});var Aut=s(Spe);CQo=r(Aut,"mpnet"),Aut.forEach(t),wQo=r(pke," \u2014 "),hX=n(pke,"A",{href:!0});var yut=s(hX);AQo=r(yut,"MPNetForQuestionAnswering"),yut.forEach(t),yQo=r(pke," (MPNet model)"),pke.forEach(t),LQo=i(X),Vv=n(X,"LI",{});var _ke=s(Vv);Rpe=n(_ke,"STRONG",{});var Lut=s(Rpe);xQo=r(Lut,"nystromformer"),Lut.forEach(t),$Qo=r(_ke," \u2014 "),pX=n(_ke,"A",{href:!0});var xut=s(pX);kQo=r(xut,"NystromformerForQuestionAnswering"),xut.forEach(t),SQo=r(_ke," (Nystromformer model)"),_ke.forEach(t),RQo=i(X),Xv=n(X,"LI",{});var uke=s(Xv);Ppe=n(uke,"STRONG",{});var $ut=s(Ppe);PQo=r($ut,"qdqbert"),$ut.forEach(t),BQo=r(uke," \u2014 "),_X=n(uke,"A",{href:!0});var kut=s(_X);IQo=r(kut,"QDQBertForQuestionAnswering"),kut.forEach(t),NQo=r(uke," (QDQBert model)"),uke.forEach(t),qQo=i(X),zv=n(X,"LI",{});var bke=s(zv);Bpe=n(bke,"STRONG",{});var Sut=s(Bpe);jQo=r(Sut,"reformer"),Sut.forEach(t),DQo=r(bke," \u2014 "),uX=n(bke,"A",{href:!0});var Rut=s(uX);GQo=r(Rut,"ReformerForQuestionAnswering"),Rut.forEach(t),OQo=r(bke," (Reformer model)"),bke.forEach(t),VQo=i(X),Wv=n(X,"LI",{});var vke=s(Wv);Ipe=n(vke,"STRONG",{});var Put=s(Ipe);XQo=r(Put,"rembert"),Put.forEach(t),zQo=r(vke," \u2014 "),bX=n(vke,"A",{href:!0});var But=s(bX);WQo=r(But,"RemBertForQuestionAnswering"),But.forEach(t),QQo=r(vke," (RemBERT model)"),vke.forEach(t),HQo=i(X),Qv=n(X,"LI",{});var Fke=s(Qv);Npe=n(Fke,"STRONG",{});var Iut=s(Npe);UQo=r(Iut,"roberta"),Iut.forEach(t),JQo=r(Fke," \u2014 "),vX=n(Fke,"A",{href:!0});var Nut=s(vX);YQo=r(Nut,"RobertaForQuestionAnswering"),Nut.forEach(t),KQo=r(Fke," (RoBERTa model)"),Fke.forEach(t),ZQo=i(X),Hv=n(X,"LI",{});var Tke=s(Hv);qpe=n(Tke,"STRONG",{});var qut=s(qpe);eHo=r(qut,"roformer"),qut.forEach(t),oHo=r(Tke," \u2014 "),FX=n(Tke,"A",{href:!0});var jut=s(FX);rHo=r(jut,"RoFormerForQuestionAnswering"),jut.forEach(t),tHo=r(Tke," (RoFormer model)"),Tke.forEach(t),aHo=i(X),Uv=n(X,"LI",{});var Mke=s(Uv);jpe=n(Mke,"STRONG",{});var Dut=s(jpe);nHo=r(Dut,"splinter"),Dut.forEach(t),sHo=r(Mke," \u2014 "),TX=n(Mke,"A",{href:!0});var Gut=s(TX);lHo=r(Gut,"SplinterForQuestionAnswering"),Gut.forEach(t),iHo=r(Mke," (Splinter model)"),Mke.forEach(t),dHo=i(X),Jv=n(X,"LI",{});var Eke=s(Jv);Dpe=n(Eke,"STRONG",{});var Out=s(Dpe);cHo=r(Out,"squeezebert"),Out.forEach(t),fHo=r(Eke," \u2014 "),MX=n(Eke,"A",{href:!0});var Vut=s(MX);mHo=r(Vut,"SqueezeBertForQuestionAnswering"),Vut.forEach(t),gHo=r(Eke," (SqueezeBERT model)"),Eke.forEach(t),hHo=i(X),Yv=n(X,"LI",{});var Cke=s(Yv);Gpe=n(Cke,"STRONG",{});var Xut=s(Gpe);pHo=r(Xut,"xlm"),Xut.forEach(t),_Ho=r(Cke," \u2014 "),EX=n(Cke,"A",{href:!0});var zut=s(EX);uHo=r(zut,"XLMForQuestionAnsweringSimple"),zut.forEach(t),bHo=r(Cke," (XLM model)"),Cke.forEach(t),vHo=i(X),Kv=n(X,"LI",{});var wke=s(Kv);Ope=n(wke,"STRONG",{});var Wut=s(Ope);FHo=r(Wut,"xlm-roberta"),Wut.forEach(t),THo=r(wke," \u2014 "),CX=n(wke,"A",{href:!0});var Qut=s(CX);MHo=r(Qut,"XLMRobertaForQuestionAnswering"),Qut.forEach(t),EHo=r(wke," (XLM-RoBERTa model)"),wke.forEach(t),CHo=i(X),Zv=n(X,"LI",{});var Ake=s(Zv);Vpe=n(Ake,"STRONG",{});var Hut=s(Vpe);wHo=r(Hut,"xlm-roberta-xl"),Hut.forEach(t),AHo=r(Ake," \u2014 "),wX=n(Ake,"A",{href:!0});var Uut=s(wX);yHo=r(Uut,"XLMRobertaXLForQuestionAnswering"),Uut.forEach(t),LHo=r(Ake," (XLM-RoBERTa-XL model)"),Ake.forEach(t),xHo=i(X),e3=n(X,"LI",{});var yke=s(e3);Xpe=n(yke,"STRONG",{});var Jut=s(Xpe);$Ho=r(Jut,"xlnet"),Jut.forEach(t),kHo=r(yke," \u2014 "),AX=n(yke,"A",{href:!0});var Yut=s(AX);SHo=r(Yut,"XLNetForQuestionAnsweringSimple"),Yut.forEach(t),RHo=r(yke," (XLNet model)"),yke.forEach(t),PHo=i(X),o3=n(X,"LI",{});var Lke=s(o3);zpe=n(Lke,"STRONG",{});var Kut=s(zpe);BHo=r(Kut,"yoso"),Kut.forEach(t),IHo=r(Lke," \u2014 "),yX=n(Lke,"A",{href:!0});var Zut=s(yX);NHo=r(Zut,"YosoForQuestionAnswering"),Zut.forEach(t),qHo=r(Lke," (YOSO model)"),Lke.forEach(t),X.forEach(t),jHo=i(ca),r3=n(ca,"P",{});var xke=s(r3);DHo=r(xke,"The model is set in evaluation mode by default using "),Wpe=n(xke,"CODE",{});var e4t=s(Wpe);GHo=r(e4t,"model.eval()"),e4t.forEach(t),OHo=r(xke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qpe=n(xke,"CODE",{});var o4t=s(Qpe);VHo=r(o4t,"model.train()"),o4t.forEach(t),xke.forEach(t),XHo=i(ca),T(t3.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),cje=i(f),rd=n(f,"H2",{class:!0});var hGe=s(rd);a3=n(hGe,"A",{id:!0,class:!0,href:!0});var r4t=s(a3);Hpe=n(r4t,"SPAN",{});var t4t=s(Hpe);T(tL.$$.fragment,t4t),t4t.forEach(t),r4t.forEach(t),zHo=i(hGe),Upe=n(hGe,"SPAN",{});var a4t=s(Upe);WHo=r(a4t,"AutoModelForTableQuestionAnswering"),a4t.forEach(t),hGe.forEach(t),fje=i(f),qo=n(f,"DIV",{class:!0});var Zs=s(qo);T(aL.$$.fragment,Zs),QHo=i(Zs),td=n(Zs,"P",{});var ZZ=s(td);HHo=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LX=n(ZZ,"A",{href:!0});var n4t=s(LX);UHo=r(n4t,"from_pretrained()"),n4t.forEach(t),JHo=r(ZZ," class method or the "),xX=n(ZZ,"A",{href:!0});var s4t=s(xX);YHo=r(s4t,"from_config()"),s4t.forEach(t),KHo=r(ZZ,` class
method.`),ZZ.forEach(t),ZHo=i(Zs),nL=n(Zs,"P",{});var pGe=s(nL);eUo=r(pGe,"This class cannot be instantiated directly using "),Jpe=n(pGe,"CODE",{});var l4t=s(Jpe);oUo=r(l4t,"__init__()"),l4t.forEach(t),rUo=r(pGe," (throws an error)."),pGe.forEach(t),tUo=i(Zs),gt=n(Zs,"DIV",{class:!0});var n6=s(gt);T(sL.$$.fragment,n6),aUo=i(n6),Ype=n(n6,"P",{});var i4t=s(Ype);nUo=r(i4t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),i4t.forEach(t),sUo=i(n6),ad=n(n6,"P",{});var eee=s(ad);lUo=r(eee,`Note:
Loading a model from its configuration file does `),Kpe=n(eee,"STRONG",{});var d4t=s(Kpe);iUo=r(d4t,"not"),d4t.forEach(t),dUo=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(eee,"A",{href:!0});var c4t=s($X);cUo=r(c4t,"from_pretrained()"),c4t.forEach(t),fUo=r(eee," to load the model weights."),eee.forEach(t),mUo=i(n6),T(n3.$$.fragment,n6),n6.forEach(t),gUo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(lL.$$.fragment,fa),hUo=i(fa),Zpe=n(fa,"P",{});var f4t=s(Zpe);pUo=r(f4t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),f4t.forEach(t),_Uo=i(fa),qa=n(fa,"P",{});var s6=s(qa);uUo=r(s6,"The model class to instantiate is selected based on the "),e_e=n(s6,"CODE",{});var m4t=s(e_e);bUo=r(m4t,"model_type"),m4t.forEach(t),vUo=r(s6,` property of the config object (either
passed as an argument or loaded from `),o_e=n(s6,"CODE",{});var g4t=s(o_e);FUo=r(g4t,"pretrained_model_name_or_path"),g4t.forEach(t),TUo=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=n(s6,"CODE",{});var h4t=s(r_e);MUo=r(h4t,"pretrained_model_name_or_path"),h4t.forEach(t),EUo=r(s6,":"),s6.forEach(t),CUo=i(fa),t_e=n(fa,"UL",{});var p4t=s(t_e);s3=n(p4t,"LI",{});var $ke=s(s3);a_e=n($ke,"STRONG",{});var _4t=s(a_e);wUo=r(_4t,"tapas"),_4t.forEach(t),AUo=r($ke," \u2014 "),kX=n($ke,"A",{href:!0});var u4t=s(kX);yUo=r(u4t,"TapasForQuestionAnswering"),u4t.forEach(t),LUo=r($ke," (TAPAS model)"),$ke.forEach(t),p4t.forEach(t),xUo=i(fa),l3=n(fa,"P",{});var kke=s(l3);$Uo=r(kke,"The model is set in evaluation mode by default using "),n_e=n(kke,"CODE",{});var b4t=s(n_e);kUo=r(b4t,"model.eval()"),b4t.forEach(t),SUo=r(kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s_e=n(kke,"CODE",{});var v4t=s(s_e);RUo=r(v4t,"model.train()"),v4t.forEach(t),kke.forEach(t),PUo=i(fa),T(i3.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),mje=i(f),nd=n(f,"H2",{class:!0});var _Ge=s(nd);d3=n(_Ge,"A",{id:!0,class:!0,href:!0});var F4t=s(d3);l_e=n(F4t,"SPAN",{});var T4t=s(l_e);T(iL.$$.fragment,T4t),T4t.forEach(t),F4t.forEach(t),BUo=i(_Ge),i_e=n(_Ge,"SPAN",{});var M4t=s(i_e);IUo=r(M4t,"AutoModelForImageClassification"),M4t.forEach(t),_Ge.forEach(t),gje=i(f),jo=n(f,"DIV",{class:!0});var el=s(jo);T(dL.$$.fragment,el),NUo=i(el),sd=n(el,"P",{});var oee=s(sd);qUo=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SX=n(oee,"A",{href:!0});var E4t=s(SX);jUo=r(E4t,"from_pretrained()"),E4t.forEach(t),DUo=r(oee," class method or the "),RX=n(oee,"A",{href:!0});var C4t=s(RX);GUo=r(C4t,"from_config()"),C4t.forEach(t),OUo=r(oee,` class
method.`),oee.forEach(t),VUo=i(el),cL=n(el,"P",{});var uGe=s(cL);XUo=r(uGe,"This class cannot be instantiated directly using "),d_e=n(uGe,"CODE",{});var w4t=s(d_e);zUo=r(w4t,"__init__()"),w4t.forEach(t),WUo=r(uGe," (throws an error)."),uGe.forEach(t),QUo=i(el),ht=n(el,"DIV",{class:!0});var l6=s(ht);T(fL.$$.fragment,l6),HUo=i(l6),c_e=n(l6,"P",{});var A4t=s(c_e);UUo=r(A4t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),A4t.forEach(t),JUo=i(l6),ld=n(l6,"P",{});var ree=s(ld);YUo=r(ree,`Note:
Loading a model from its configuration file does `),f_e=n(ree,"STRONG",{});var y4t=s(f_e);KUo=r(y4t,"not"),y4t.forEach(t),ZUo=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(ree,"A",{href:!0});var L4t=s(PX);eJo=r(L4t,"from_pretrained()"),L4t.forEach(t),oJo=r(ree," to load the model weights."),ree.forEach(t),rJo=i(l6),T(c3.$$.fragment,l6),l6.forEach(t),tJo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(mL.$$.fragment,ma),aJo=i(ma),m_e=n(ma,"P",{});var x4t=s(m_e);nJo=r(x4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),x4t.forEach(t),sJo=i(ma),ja=n(ma,"P",{});var i6=s(ja);lJo=r(i6,"The model class to instantiate is selected based on the "),g_e=n(i6,"CODE",{});var $4t=s(g_e);iJo=r($4t,"model_type"),$4t.forEach(t),dJo=r(i6,` property of the config object (either
passed as an argument or loaded from `),h_e=n(i6,"CODE",{});var k4t=s(h_e);cJo=r(k4t,"pretrained_model_name_or_path"),k4t.forEach(t),fJo=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=n(i6,"CODE",{});var S4t=s(p_e);mJo=r(S4t,"pretrained_model_name_or_path"),S4t.forEach(t),gJo=r(i6,":"),i6.forEach(t),hJo=i(ma),Fe=n(ma,"UL",{});var Me=s(Fe);f3=n(Me,"LI",{});var Ske=s(f3);__e=n(Ske,"STRONG",{});var R4t=s(__e);pJo=r(R4t,"beit"),R4t.forEach(t),_Jo=r(Ske," \u2014 "),BX=n(Ske,"A",{href:!0});var P4t=s(BX);uJo=r(P4t,"BeitForImageClassification"),P4t.forEach(t),bJo=r(Ske," (BEiT model)"),Ske.forEach(t),vJo=i(Me),m3=n(Me,"LI",{});var Rke=s(m3);u_e=n(Rke,"STRONG",{});var B4t=s(u_e);FJo=r(B4t,"convnext"),B4t.forEach(t),TJo=r(Rke," \u2014 "),IX=n(Rke,"A",{href:!0});var I4t=s(IX);MJo=r(I4t,"ConvNextForImageClassification"),I4t.forEach(t),EJo=r(Rke," (ConvNext model)"),Rke.forEach(t),CJo=i(Me),g3=n(Me,"LI",{});var Pke=s(g3);b_e=n(Pke,"STRONG",{});var N4t=s(b_e);wJo=r(N4t,"cvt"),N4t.forEach(t),AJo=r(Pke," \u2014 "),NX=n(Pke,"A",{href:!0});var q4t=s(NX);yJo=r(q4t,"CvtForImageClassification"),q4t.forEach(t),LJo=r(Pke," (CvT model)"),Pke.forEach(t),xJo=i(Me),h3=n(Me,"LI",{});var Bke=s(h3);v_e=n(Bke,"STRONG",{});var j4t=s(v_e);$Jo=r(j4t,"data2vec-vision"),j4t.forEach(t),kJo=r(Bke," \u2014 "),qX=n(Bke,"A",{href:!0});var D4t=s(qX);SJo=r(D4t,"Data2VecVisionForImageClassification"),D4t.forEach(t),RJo=r(Bke," (Data2VecVision model)"),Bke.forEach(t),PJo=i(Me),Is=n(Me,"LI",{});var K$=s(Is);F_e=n(K$,"STRONG",{});var G4t=s(F_e);BJo=r(G4t,"deit"),G4t.forEach(t),IJo=r(K$," \u2014 "),jX=n(K$,"A",{href:!0});var O4t=s(jX);NJo=r(O4t,"DeiTForImageClassification"),O4t.forEach(t),qJo=r(K$," or "),DX=n(K$,"A",{href:!0});var V4t=s(DX);jJo=r(V4t,"DeiTForImageClassificationWithTeacher"),V4t.forEach(t),DJo=r(K$," (DeiT model)"),K$.forEach(t),GJo=i(Me),p3=n(Me,"LI",{});var Ike=s(p3);T_e=n(Ike,"STRONG",{});var X4t=s(T_e);OJo=r(X4t,"imagegpt"),X4t.forEach(t),VJo=r(Ike," \u2014 "),GX=n(Ike,"A",{href:!0});var z4t=s(GX);XJo=r(z4t,"ImageGPTForImageClassification"),z4t.forEach(t),zJo=r(Ike," (ImageGPT model)"),Ike.forEach(t),WJo=i(Me),pt=n(Me,"LI",{});var pf=s(pt);M_e=n(pf,"STRONG",{});var W4t=s(M_e);QJo=r(W4t,"perceiver"),W4t.forEach(t),HJo=r(pf," \u2014 "),OX=n(pf,"A",{href:!0});var Q4t=s(OX);UJo=r(Q4t,"PerceiverForImageClassificationLearned"),Q4t.forEach(t),JJo=r(pf," or "),VX=n(pf,"A",{href:!0});var H4t=s(VX);YJo=r(H4t,"PerceiverForImageClassificationFourier"),H4t.forEach(t),KJo=r(pf," or "),XX=n(pf,"A",{href:!0});var U4t=s(XX);ZJo=r(U4t,"PerceiverForImageClassificationConvProcessing"),U4t.forEach(t),eYo=r(pf," (Perceiver model)"),pf.forEach(t),oYo=i(Me),_3=n(Me,"LI",{});var Nke=s(_3);E_e=n(Nke,"STRONG",{});var J4t=s(E_e);rYo=r(J4t,"poolformer"),J4t.forEach(t),tYo=r(Nke," \u2014 "),zX=n(Nke,"A",{href:!0});var Y4t=s(zX);aYo=r(Y4t,"PoolFormerForImageClassification"),Y4t.forEach(t),nYo=r(Nke," (PoolFormer model)"),Nke.forEach(t),sYo=i(Me),u3=n(Me,"LI",{});var qke=s(u3);C_e=n(qke,"STRONG",{});var K4t=s(C_e);lYo=r(K4t,"regnet"),K4t.forEach(t),iYo=r(qke," \u2014 "),WX=n(qke,"A",{href:!0});var Z4t=s(WX);dYo=r(Z4t,"RegNetForImageClassification"),Z4t.forEach(t),cYo=r(qke," (RegNet model)"),qke.forEach(t),fYo=i(Me),b3=n(Me,"LI",{});var jke=s(b3);w_e=n(jke,"STRONG",{});var e1t=s(w_e);mYo=r(e1t,"resnet"),e1t.forEach(t),gYo=r(jke," \u2014 "),QX=n(jke,"A",{href:!0});var o1t=s(QX);hYo=r(o1t,"ResNetForImageClassification"),o1t.forEach(t),pYo=r(jke," (ResNet model)"),jke.forEach(t),_Yo=i(Me),v3=n(Me,"LI",{});var Dke=s(v3);A_e=n(Dke,"STRONG",{});var r1t=s(A_e);uYo=r(r1t,"segformer"),r1t.forEach(t),bYo=r(Dke," \u2014 "),HX=n(Dke,"A",{href:!0});var t1t=s(HX);vYo=r(t1t,"SegformerForImageClassification"),t1t.forEach(t),FYo=r(Dke," (SegFormer model)"),Dke.forEach(t),TYo=i(Me),F3=n(Me,"LI",{});var Gke=s(F3);y_e=n(Gke,"STRONG",{});var a1t=s(y_e);MYo=r(a1t,"swin"),a1t.forEach(t),EYo=r(Gke," \u2014 "),UX=n(Gke,"A",{href:!0});var n1t=s(UX);CYo=r(n1t,"SwinForImageClassification"),n1t.forEach(t),wYo=r(Gke," (Swin model)"),Gke.forEach(t),AYo=i(Me),T3=n(Me,"LI",{});var Oke=s(T3);L_e=n(Oke,"STRONG",{});var s1t=s(L_e);yYo=r(s1t,"van"),s1t.forEach(t),LYo=r(Oke," \u2014 "),JX=n(Oke,"A",{href:!0});var l1t=s(JX);xYo=r(l1t,"VanForImageClassification"),l1t.forEach(t),$Yo=r(Oke," (VAN model)"),Oke.forEach(t),kYo=i(Me),M3=n(Me,"LI",{});var Vke=s(M3);x_e=n(Vke,"STRONG",{});var i1t=s(x_e);SYo=r(i1t,"vit"),i1t.forEach(t),RYo=r(Vke," \u2014 "),YX=n(Vke,"A",{href:!0});var d1t=s(YX);PYo=r(d1t,"ViTForImageClassification"),d1t.forEach(t),BYo=r(Vke," (ViT model)"),Vke.forEach(t),Me.forEach(t),IYo=i(ma),E3=n(ma,"P",{});var Xke=s(E3);NYo=r(Xke,"The model is set in evaluation mode by default using "),$_e=n(Xke,"CODE",{});var c1t=s($_e);qYo=r(c1t,"model.eval()"),c1t.forEach(t),jYo=r(Xke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=n(Xke,"CODE",{});var f1t=s(k_e);DYo=r(f1t,"model.train()"),f1t.forEach(t),Xke.forEach(t),GYo=i(ma),T(C3.$$.fragment,ma),ma.forEach(t),el.forEach(t),hje=i(f),id=n(f,"H2",{class:!0});var bGe=s(id);w3=n(bGe,"A",{id:!0,class:!0,href:!0});var m1t=s(w3);S_e=n(m1t,"SPAN",{});var g1t=s(S_e);T(gL.$$.fragment,g1t),g1t.forEach(t),m1t.forEach(t),OYo=i(bGe),R_e=n(bGe,"SPAN",{});var h1t=s(R_e);VYo=r(h1t,"AutoModelForVision2Seq"),h1t.forEach(t),bGe.forEach(t),pje=i(f),Do=n(f,"DIV",{class:!0});var ol=s(Do);T(hL.$$.fragment,ol),XYo=i(ol),dd=n(ol,"P",{});var tee=s(dd);zYo=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KX=n(tee,"A",{href:!0});var p1t=s(KX);WYo=r(p1t,"from_pretrained()"),p1t.forEach(t),QYo=r(tee," class method or the "),ZX=n(tee,"A",{href:!0});var _1t=s(ZX);HYo=r(_1t,"from_config()"),_1t.forEach(t),UYo=r(tee,` class
method.`),tee.forEach(t),JYo=i(ol),pL=n(ol,"P",{});var vGe=s(pL);YYo=r(vGe,"This class cannot be instantiated directly using "),P_e=n(vGe,"CODE",{});var u1t=s(P_e);KYo=r(u1t,"__init__()"),u1t.forEach(t),ZYo=r(vGe," (throws an error)."),vGe.forEach(t),eKo=i(ol),_t=n(ol,"DIV",{class:!0});var d6=s(_t);T(_L.$$.fragment,d6),oKo=i(d6),B_e=n(d6,"P",{});var b1t=s(B_e);rKo=r(b1t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),b1t.forEach(t),tKo=i(d6),cd=n(d6,"P",{});var aee=s(cd);aKo=r(aee,`Note:
Loading a model from its configuration file does `),I_e=n(aee,"STRONG",{});var v1t=s(I_e);nKo=r(v1t,"not"),v1t.forEach(t),sKo=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=n(aee,"A",{href:!0});var F1t=s(ez);lKo=r(F1t,"from_pretrained()"),F1t.forEach(t),iKo=r(aee," to load the model weights."),aee.forEach(t),dKo=i(d6),T(A3.$$.fragment,d6),d6.forEach(t),cKo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(uL.$$.fragment,ga),fKo=i(ga),N_e=n(ga,"P",{});var T1t=s(N_e);mKo=r(T1t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),T1t.forEach(t),gKo=i(ga),Da=n(ga,"P",{});var c6=s(Da);hKo=r(c6,"The model class to instantiate is selected based on the "),q_e=n(c6,"CODE",{});var M1t=s(q_e);pKo=r(M1t,"model_type"),M1t.forEach(t),_Ko=r(c6,` property of the config object (either
passed as an argument or loaded from `),j_e=n(c6,"CODE",{});var E1t=s(j_e);uKo=r(E1t,"pretrained_model_name_or_path"),E1t.forEach(t),bKo=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=n(c6,"CODE",{});var C1t=s(D_e);vKo=r(C1t,"pretrained_model_name_or_path"),C1t.forEach(t),FKo=r(c6,":"),c6.forEach(t),TKo=i(ga),G_e=n(ga,"UL",{});var w1t=s(G_e);y3=n(w1t,"LI",{});var zke=s(y3);O_e=n(zke,"STRONG",{});var A1t=s(O_e);MKo=r(A1t,"vision-encoder-decoder"),A1t.forEach(t),EKo=r(zke," \u2014 "),oz=n(zke,"A",{href:!0});var y1t=s(oz);CKo=r(y1t,"VisionEncoderDecoderModel"),y1t.forEach(t),wKo=r(zke," (Vision Encoder decoder model)"),zke.forEach(t),w1t.forEach(t),AKo=i(ga),L3=n(ga,"P",{});var Wke=s(L3);yKo=r(Wke,"The model is set in evaluation mode by default using "),V_e=n(Wke,"CODE",{});var L1t=s(V_e);LKo=r(L1t,"model.eval()"),L1t.forEach(t),xKo=r(Wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X_e=n(Wke,"CODE",{});var x1t=s(X_e);$Ko=r(x1t,"model.train()"),x1t.forEach(t),Wke.forEach(t),kKo=i(ga),T(x3.$$.fragment,ga),ga.forEach(t),ol.forEach(t),_je=i(f),fd=n(f,"H2",{class:!0});var FGe=s(fd);$3=n(FGe,"A",{id:!0,class:!0,href:!0});var $1t=s($3);z_e=n($1t,"SPAN",{});var k1t=s(z_e);T(bL.$$.fragment,k1t),k1t.forEach(t),$1t.forEach(t),SKo=i(FGe),W_e=n(FGe,"SPAN",{});var S1t=s(W_e);RKo=r(S1t,"AutoModelForAudioClassification"),S1t.forEach(t),FGe.forEach(t),uje=i(f),Go=n(f,"DIV",{class:!0});var rl=s(Go);T(vL.$$.fragment,rl),PKo=i(rl),md=n(rl,"P",{});var nee=s(md);BKo=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),rz=n(nee,"A",{href:!0});var R1t=s(rz);IKo=r(R1t,"from_pretrained()"),R1t.forEach(t),NKo=r(nee," class method or the "),tz=n(nee,"A",{href:!0});var P1t=s(tz);qKo=r(P1t,"from_config()"),P1t.forEach(t),jKo=r(nee,` class
method.`),nee.forEach(t),DKo=i(rl),FL=n(rl,"P",{});var TGe=s(FL);GKo=r(TGe,"This class cannot be instantiated directly using "),Q_e=n(TGe,"CODE",{});var B1t=s(Q_e);OKo=r(B1t,"__init__()"),B1t.forEach(t),VKo=r(TGe," (throws an error)."),TGe.forEach(t),XKo=i(rl),ut=n(rl,"DIV",{class:!0});var f6=s(ut);T(TL.$$.fragment,f6),zKo=i(f6),H_e=n(f6,"P",{});var I1t=s(H_e);WKo=r(I1t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),I1t.forEach(t),QKo=i(f6),gd=n(f6,"P",{});var see=s(gd);HKo=r(see,`Note:
Loading a model from its configuration file does `),U_e=n(see,"STRONG",{});var N1t=s(U_e);UKo=r(N1t,"not"),N1t.forEach(t),JKo=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),az=n(see,"A",{href:!0});var q1t=s(az);YKo=r(q1t,"from_pretrained()"),q1t.forEach(t),KKo=r(see," to load the model weights."),see.forEach(t),ZKo=i(f6),T(k3.$$.fragment,f6),f6.forEach(t),eZo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(ML.$$.fragment,ha),oZo=i(ha),J_e=n(ha,"P",{});var j1t=s(J_e);rZo=r(j1t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),j1t.forEach(t),tZo=i(ha),Ga=n(ha,"P",{});var m6=s(Ga);aZo=r(m6,"The model class to instantiate is selected based on the "),Y_e=n(m6,"CODE",{});var D1t=s(Y_e);nZo=r(D1t,"model_type"),D1t.forEach(t),sZo=r(m6,` property of the config object (either
passed as an argument or loaded from `),K_e=n(m6,"CODE",{});var G1t=s(K_e);lZo=r(G1t,"pretrained_model_name_or_path"),G1t.forEach(t),iZo=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=n(m6,"CODE",{});var O1t=s(Z_e);dZo=r(O1t,"pretrained_model_name_or_path"),O1t.forEach(t),cZo=r(m6,":"),m6.forEach(t),fZo=i(ha),Se=n(ha,"UL",{});var Ve=s(Se);S3=n(Ve,"LI",{});var Qke=s(S3);eue=n(Qke,"STRONG",{});var V1t=s(eue);mZo=r(V1t,"data2vec-audio"),V1t.forEach(t),gZo=r(Qke," \u2014 "),nz=n(Qke,"A",{href:!0});var X1t=s(nz);hZo=r(X1t,"Data2VecAudioForSequenceClassification"),X1t.forEach(t),pZo=r(Qke," (Data2VecAudio model)"),Qke.forEach(t),_Zo=i(Ve),R3=n(Ve,"LI",{});var Hke=s(R3);oue=n(Hke,"STRONG",{});var z1t=s(oue);uZo=r(z1t,"hubert"),z1t.forEach(t),bZo=r(Hke," \u2014 "),sz=n(Hke,"A",{href:!0});var W1t=s(sz);vZo=r(W1t,"HubertForSequenceClassification"),W1t.forEach(t),FZo=r(Hke," (Hubert model)"),Hke.forEach(t),TZo=i(Ve),P3=n(Ve,"LI",{});var Uke=s(P3);rue=n(Uke,"STRONG",{});var Q1t=s(rue);MZo=r(Q1t,"sew"),Q1t.forEach(t),EZo=r(Uke," \u2014 "),lz=n(Uke,"A",{href:!0});var H1t=s(lz);CZo=r(H1t,"SEWForSequenceClassification"),H1t.forEach(t),wZo=r(Uke," (SEW model)"),Uke.forEach(t),AZo=i(Ve),B3=n(Ve,"LI",{});var Jke=s(B3);tue=n(Jke,"STRONG",{});var U1t=s(tue);yZo=r(U1t,"sew-d"),U1t.forEach(t),LZo=r(Jke," \u2014 "),iz=n(Jke,"A",{href:!0});var J1t=s(iz);xZo=r(J1t,"SEWDForSequenceClassification"),J1t.forEach(t),$Zo=r(Jke," (SEW-D model)"),Jke.forEach(t),kZo=i(Ve),I3=n(Ve,"LI",{});var Yke=s(I3);aue=n(Yke,"STRONG",{});var Y1t=s(aue);SZo=r(Y1t,"unispeech"),Y1t.forEach(t),RZo=r(Yke," \u2014 "),dz=n(Yke,"A",{href:!0});var K1t=s(dz);PZo=r(K1t,"UniSpeechForSequenceClassification"),K1t.forEach(t),BZo=r(Yke," (UniSpeech model)"),Yke.forEach(t),IZo=i(Ve),N3=n(Ve,"LI",{});var Kke=s(N3);nue=n(Kke,"STRONG",{});var Z1t=s(nue);NZo=r(Z1t,"unispeech-sat"),Z1t.forEach(t),qZo=r(Kke," \u2014 "),cz=n(Kke,"A",{href:!0});var ebt=s(cz);jZo=r(ebt,"UniSpeechSatForSequenceClassification"),ebt.forEach(t),DZo=r(Kke," (UniSpeechSat model)"),Kke.forEach(t),GZo=i(Ve),q3=n(Ve,"LI",{});var Zke=s(q3);sue=n(Zke,"STRONG",{});var obt=s(sue);OZo=r(obt,"wav2vec2"),obt.forEach(t),VZo=r(Zke," \u2014 "),fz=n(Zke,"A",{href:!0});var rbt=s(fz);XZo=r(rbt,"Wav2Vec2ForSequenceClassification"),rbt.forEach(t),zZo=r(Zke," (Wav2Vec2 model)"),Zke.forEach(t),WZo=i(Ve),j3=n(Ve,"LI",{});var eSe=s(j3);lue=n(eSe,"STRONG",{});var tbt=s(lue);QZo=r(tbt,"wav2vec2-conformer"),tbt.forEach(t),HZo=r(eSe," \u2014 "),mz=n(eSe,"A",{href:!0});var abt=s(mz);UZo=r(abt,"Wav2Vec2ConformerForSequenceClassification"),abt.forEach(t),JZo=r(eSe," (Wav2Vec2-Conformer model)"),eSe.forEach(t),YZo=i(Ve),D3=n(Ve,"LI",{});var oSe=s(D3);iue=n(oSe,"STRONG",{});var nbt=s(iue);KZo=r(nbt,"wavlm"),nbt.forEach(t),ZZo=r(oSe," \u2014 "),gz=n(oSe,"A",{href:!0});var sbt=s(gz);eer=r(sbt,"WavLMForSequenceClassification"),sbt.forEach(t),oer=r(oSe," (WavLM model)"),oSe.forEach(t),Ve.forEach(t),rer=i(ha),G3=n(ha,"P",{});var rSe=s(G3);ter=r(rSe,"The model is set in evaluation mode by default using "),due=n(rSe,"CODE",{});var lbt=s(due);aer=r(lbt,"model.eval()"),lbt.forEach(t),ner=r(rSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=n(rSe,"CODE",{});var ibt=s(cue);ser=r(ibt,"model.train()"),ibt.forEach(t),rSe.forEach(t),ler=i(ha),T(O3.$$.fragment,ha),ha.forEach(t),rl.forEach(t),bje=i(f),hd=n(f,"H2",{class:!0});var MGe=s(hd);V3=n(MGe,"A",{id:!0,class:!0,href:!0});var dbt=s(V3);fue=n(dbt,"SPAN",{});var cbt=s(fue);T(EL.$$.fragment,cbt),cbt.forEach(t),dbt.forEach(t),ier=i(MGe),mue=n(MGe,"SPAN",{});var fbt=s(mue);der=r(fbt,"AutoModelForAudioFrameClassification"),fbt.forEach(t),MGe.forEach(t),vje=i(f),Oo=n(f,"DIV",{class:!0});var tl=s(Oo);T(CL.$$.fragment,tl),cer=i(tl),pd=n(tl,"P",{});var lee=s(pd);fer=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hz=n(lee,"A",{href:!0});var mbt=s(hz);mer=r(mbt,"from_pretrained()"),mbt.forEach(t),ger=r(lee," class method or the "),pz=n(lee,"A",{href:!0});var gbt=s(pz);her=r(gbt,"from_config()"),gbt.forEach(t),per=r(lee,` class
method.`),lee.forEach(t),_er=i(tl),wL=n(tl,"P",{});var EGe=s(wL);uer=r(EGe,"This class cannot be instantiated directly using "),gue=n(EGe,"CODE",{});var hbt=s(gue);ber=r(hbt,"__init__()"),hbt.forEach(t),ver=r(EGe," (throws an error)."),EGe.forEach(t),Fer=i(tl),bt=n(tl,"DIV",{class:!0});var g6=s(bt);T(AL.$$.fragment,g6),Ter=i(g6),hue=n(g6,"P",{});var pbt=s(hue);Mer=r(pbt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),pbt.forEach(t),Eer=i(g6),_d=n(g6,"P",{});var iee=s(_d);Cer=r(iee,`Note:
Loading a model from its configuration file does `),pue=n(iee,"STRONG",{});var _bt=s(pue);wer=r(_bt,"not"),_bt.forEach(t),Aer=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(iee,"A",{href:!0});var ubt=s(_z);yer=r(ubt,"from_pretrained()"),ubt.forEach(t),Ler=r(iee," to load the model weights."),iee.forEach(t),xer=i(g6),T(X3.$$.fragment,g6),g6.forEach(t),$er=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(yL.$$.fragment,pa),ker=i(pa),_ue=n(pa,"P",{});var bbt=s(_ue);Ser=r(bbt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),bbt.forEach(t),Rer=i(pa),Oa=n(pa,"P",{});var h6=s(Oa);Per=r(h6,"The model class to instantiate is selected based on the "),uue=n(h6,"CODE",{});var vbt=s(uue);Ber=r(vbt,"model_type"),vbt.forEach(t),Ier=r(h6,` property of the config object (either
passed as an argument or loaded from `),bue=n(h6,"CODE",{});var Fbt=s(bue);Ner=r(Fbt,"pretrained_model_name_or_path"),Fbt.forEach(t),qer=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=n(h6,"CODE",{});var Tbt=s(vue);jer=r(Tbt,"pretrained_model_name_or_path"),Tbt.forEach(t),Der=r(h6,":"),h6.forEach(t),Ger=i(pa),Kr=n(pa,"UL",{});var al=s(Kr);z3=n(al,"LI",{});var tSe=s(z3);Fue=n(tSe,"STRONG",{});var Mbt=s(Fue);Oer=r(Mbt,"data2vec-audio"),Mbt.forEach(t),Ver=r(tSe," \u2014 "),uz=n(tSe,"A",{href:!0});var Ebt=s(uz);Xer=r(Ebt,"Data2VecAudioForAudioFrameClassification"),Ebt.forEach(t),zer=r(tSe," (Data2VecAudio model)"),tSe.forEach(t),Wer=i(al),W3=n(al,"LI",{});var aSe=s(W3);Tue=n(aSe,"STRONG",{});var Cbt=s(Tue);Qer=r(Cbt,"unispeech-sat"),Cbt.forEach(t),Her=r(aSe," \u2014 "),bz=n(aSe,"A",{href:!0});var wbt=s(bz);Uer=r(wbt,"UniSpeechSatForAudioFrameClassification"),wbt.forEach(t),Jer=r(aSe," (UniSpeechSat model)"),aSe.forEach(t),Yer=i(al),Q3=n(al,"LI",{});var nSe=s(Q3);Mue=n(nSe,"STRONG",{});var Abt=s(Mue);Ker=r(Abt,"wav2vec2"),Abt.forEach(t),Zer=r(nSe," \u2014 "),vz=n(nSe,"A",{href:!0});var ybt=s(vz);eor=r(ybt,"Wav2Vec2ForAudioFrameClassification"),ybt.forEach(t),oor=r(nSe," (Wav2Vec2 model)"),nSe.forEach(t),ror=i(al),H3=n(al,"LI",{});var sSe=s(H3);Eue=n(sSe,"STRONG",{});var Lbt=s(Eue);tor=r(Lbt,"wav2vec2-conformer"),Lbt.forEach(t),aor=r(sSe," \u2014 "),Fz=n(sSe,"A",{href:!0});var xbt=s(Fz);nor=r(xbt,"Wav2Vec2ConformerForAudioFrameClassification"),xbt.forEach(t),sor=r(sSe," (Wav2Vec2-Conformer model)"),sSe.forEach(t),lor=i(al),U3=n(al,"LI",{});var lSe=s(U3);Cue=n(lSe,"STRONG",{});var $bt=s(Cue);ior=r($bt,"wavlm"),$bt.forEach(t),dor=r(lSe," \u2014 "),Tz=n(lSe,"A",{href:!0});var kbt=s(Tz);cor=r(kbt,"WavLMForAudioFrameClassification"),kbt.forEach(t),mor=r(lSe," (WavLM model)"),lSe.forEach(t),al.forEach(t),gor=i(pa),J3=n(pa,"P",{});var iSe=s(J3);hor=r(iSe,"The model is set in evaluation mode by default using "),wue=n(iSe,"CODE",{});var Sbt=s(wue);por=r(Sbt,"model.eval()"),Sbt.forEach(t),_or=r(iSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=n(iSe,"CODE",{});var Rbt=s(Aue);uor=r(Rbt,"model.train()"),Rbt.forEach(t),iSe.forEach(t),bor=i(pa),T(Y3.$$.fragment,pa),pa.forEach(t),tl.forEach(t),Fje=i(f),ud=n(f,"H2",{class:!0});var CGe=s(ud);K3=n(CGe,"A",{id:!0,class:!0,href:!0});var Pbt=s(K3);yue=n(Pbt,"SPAN",{});var Bbt=s(yue);T(LL.$$.fragment,Bbt),Bbt.forEach(t),Pbt.forEach(t),vor=i(CGe),Lue=n(CGe,"SPAN",{});var Ibt=s(Lue);For=r(Ibt,"AutoModelForCTC"),Ibt.forEach(t),CGe.forEach(t),Tje=i(f),Vo=n(f,"DIV",{class:!0});var nl=s(Vo);T(xL.$$.fragment,nl),Tor=i(nl),bd=n(nl,"P",{});var dee=s(bd);Mor=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Mz=n(dee,"A",{href:!0});var Nbt=s(Mz);Eor=r(Nbt,"from_pretrained()"),Nbt.forEach(t),Cor=r(dee," class method or the "),Ez=n(dee,"A",{href:!0});var qbt=s(Ez);wor=r(qbt,"from_config()"),qbt.forEach(t),Aor=r(dee,` class
method.`),dee.forEach(t),yor=i(nl),$L=n(nl,"P",{});var wGe=s($L);Lor=r(wGe,"This class cannot be instantiated directly using "),xue=n(wGe,"CODE",{});var jbt=s(xue);xor=r(jbt,"__init__()"),jbt.forEach(t),$or=r(wGe," (throws an error)."),wGe.forEach(t),kor=i(nl),vt=n(nl,"DIV",{class:!0});var p6=s(vt);T(kL.$$.fragment,p6),Sor=i(p6),$ue=n(p6,"P",{});var Dbt=s($ue);Ror=r(Dbt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Dbt.forEach(t),Por=i(p6),vd=n(p6,"P",{});var cee=s(vd);Bor=r(cee,`Note:
Loading a model from its configuration file does `),kue=n(cee,"STRONG",{});var Gbt=s(kue);Ior=r(Gbt,"not"),Gbt.forEach(t),Nor=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=n(cee,"A",{href:!0});var Obt=s(Cz);qor=r(Obt,"from_pretrained()"),Obt.forEach(t),jor=r(cee," to load the model weights."),cee.forEach(t),Dor=i(p6),T(Z3.$$.fragment,p6),p6.forEach(t),Gor=i(nl),mo=n(nl,"DIV",{class:!0});var _a=s(mo);T(SL.$$.fragment,_a),Oor=i(_a),Sue=n(_a,"P",{});var Vbt=s(Sue);Vor=r(Vbt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Vbt.forEach(t),Xor=i(_a),Va=n(_a,"P",{});var _6=s(Va);zor=r(_6,"The model class to instantiate is selected based on the "),Rue=n(_6,"CODE",{});var Xbt=s(Rue);Wor=r(Xbt,"model_type"),Xbt.forEach(t),Qor=r(_6,` property of the config object (either
passed as an argument or loaded from `),Pue=n(_6,"CODE",{});var zbt=s(Pue);Hor=r(zbt,"pretrained_model_name_or_path"),zbt.forEach(t),Uor=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=n(_6,"CODE",{});var Wbt=s(Bue);Jor=r(Wbt,"pretrained_model_name_or_path"),Wbt.forEach(t),Yor=r(_6,":"),_6.forEach(t),Kor=i(_a),Re=n(_a,"UL",{});var Xe=s(Re);eF=n(Xe,"LI",{});var dSe=s(eF);Iue=n(dSe,"STRONG",{});var Qbt=s(Iue);Zor=r(Qbt,"data2vec-audio"),Qbt.forEach(t),err=r(dSe," \u2014 "),wz=n(dSe,"A",{href:!0});var Hbt=s(wz);orr=r(Hbt,"Data2VecAudioForCTC"),Hbt.forEach(t),rrr=r(dSe," (Data2VecAudio model)"),dSe.forEach(t),trr=i(Xe),oF=n(Xe,"LI",{});var cSe=s(oF);Nue=n(cSe,"STRONG",{});var Ubt=s(Nue);arr=r(Ubt,"hubert"),Ubt.forEach(t),nrr=r(cSe," \u2014 "),Az=n(cSe,"A",{href:!0});var Jbt=s(Az);srr=r(Jbt,"HubertForCTC"),Jbt.forEach(t),lrr=r(cSe," (Hubert model)"),cSe.forEach(t),irr=i(Xe),rF=n(Xe,"LI",{});var fSe=s(rF);que=n(fSe,"STRONG",{});var Ybt=s(que);drr=r(Ybt,"sew"),Ybt.forEach(t),crr=r(fSe," \u2014 "),yz=n(fSe,"A",{href:!0});var Kbt=s(yz);frr=r(Kbt,"SEWForCTC"),Kbt.forEach(t),mrr=r(fSe," (SEW model)"),fSe.forEach(t),grr=i(Xe),tF=n(Xe,"LI",{});var mSe=s(tF);jue=n(mSe,"STRONG",{});var Zbt=s(jue);hrr=r(Zbt,"sew-d"),Zbt.forEach(t),prr=r(mSe," \u2014 "),Lz=n(mSe,"A",{href:!0});var e2t=s(Lz);_rr=r(e2t,"SEWDForCTC"),e2t.forEach(t),urr=r(mSe," (SEW-D model)"),mSe.forEach(t),brr=i(Xe),aF=n(Xe,"LI",{});var gSe=s(aF);Due=n(gSe,"STRONG",{});var o2t=s(Due);vrr=r(o2t,"unispeech"),o2t.forEach(t),Frr=r(gSe," \u2014 "),xz=n(gSe,"A",{href:!0});var r2t=s(xz);Trr=r(r2t,"UniSpeechForCTC"),r2t.forEach(t),Mrr=r(gSe," (UniSpeech model)"),gSe.forEach(t),Err=i(Xe),nF=n(Xe,"LI",{});var hSe=s(nF);Gue=n(hSe,"STRONG",{});var t2t=s(Gue);Crr=r(t2t,"unispeech-sat"),t2t.forEach(t),wrr=r(hSe," \u2014 "),$z=n(hSe,"A",{href:!0});var a2t=s($z);Arr=r(a2t,"UniSpeechSatForCTC"),a2t.forEach(t),yrr=r(hSe," (UniSpeechSat model)"),hSe.forEach(t),Lrr=i(Xe),sF=n(Xe,"LI",{});var pSe=s(sF);Oue=n(pSe,"STRONG",{});var n2t=s(Oue);xrr=r(n2t,"wav2vec2"),n2t.forEach(t),$rr=r(pSe," \u2014 "),kz=n(pSe,"A",{href:!0});var s2t=s(kz);krr=r(s2t,"Wav2Vec2ForCTC"),s2t.forEach(t),Srr=r(pSe," (Wav2Vec2 model)"),pSe.forEach(t),Rrr=i(Xe),lF=n(Xe,"LI",{});var _Se=s(lF);Vue=n(_Se,"STRONG",{});var l2t=s(Vue);Prr=r(l2t,"wav2vec2-conformer"),l2t.forEach(t),Brr=r(_Se," \u2014 "),Sz=n(_Se,"A",{href:!0});var i2t=s(Sz);Irr=r(i2t,"Wav2Vec2ConformerForCTC"),i2t.forEach(t),Nrr=r(_Se," (Wav2Vec2-Conformer model)"),_Se.forEach(t),qrr=i(Xe),iF=n(Xe,"LI",{});var uSe=s(iF);Xue=n(uSe,"STRONG",{});var d2t=s(Xue);jrr=r(d2t,"wavlm"),d2t.forEach(t),Drr=r(uSe," \u2014 "),Rz=n(uSe,"A",{href:!0});var c2t=s(Rz);Grr=r(c2t,"WavLMForCTC"),c2t.forEach(t),Orr=r(uSe," (WavLM model)"),uSe.forEach(t),Xe.forEach(t),Vrr=i(_a),dF=n(_a,"P",{});var bSe=s(dF);Xrr=r(bSe,"The model is set in evaluation mode by default using "),zue=n(bSe,"CODE",{});var f2t=s(zue);zrr=r(f2t,"model.eval()"),f2t.forEach(t),Wrr=r(bSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=n(bSe,"CODE",{});var m2t=s(Wue);Qrr=r(m2t,"model.train()"),m2t.forEach(t),bSe.forEach(t),Hrr=i(_a),T(cF.$$.fragment,_a),_a.forEach(t),nl.forEach(t),Mje=i(f),Fd=n(f,"H2",{class:!0});var AGe=s(Fd);fF=n(AGe,"A",{id:!0,class:!0,href:!0});var g2t=s(fF);Que=n(g2t,"SPAN",{});var h2t=s(Que);T(RL.$$.fragment,h2t),h2t.forEach(t),g2t.forEach(t),Urr=i(AGe),Hue=n(AGe,"SPAN",{});var p2t=s(Hue);Jrr=r(p2t,"AutoModelForSpeechSeq2Seq"),p2t.forEach(t),AGe.forEach(t),Eje=i(f),Xo=n(f,"DIV",{class:!0});var sl=s(Xo);T(PL.$$.fragment,sl),Yrr=i(sl),Td=n(sl,"P",{});var fee=s(Td);Krr=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Pz=n(fee,"A",{href:!0});var _2t=s(Pz);Zrr=r(_2t,"from_pretrained()"),_2t.forEach(t),etr=r(fee," class method or the "),Bz=n(fee,"A",{href:!0});var u2t=s(Bz);otr=r(u2t,"from_config()"),u2t.forEach(t),rtr=r(fee,` class
method.`),fee.forEach(t),ttr=i(sl),BL=n(sl,"P",{});var yGe=s(BL);atr=r(yGe,"This class cannot be instantiated directly using "),Uue=n(yGe,"CODE",{});var b2t=s(Uue);ntr=r(b2t,"__init__()"),b2t.forEach(t),str=r(yGe," (throws an error)."),yGe.forEach(t),ltr=i(sl),Ft=n(sl,"DIV",{class:!0});var u6=s(Ft);T(IL.$$.fragment,u6),itr=i(u6),Jue=n(u6,"P",{});var v2t=s(Jue);dtr=r(v2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),v2t.forEach(t),ctr=i(u6),Md=n(u6,"P",{});var mee=s(Md);ftr=r(mee,`Note:
Loading a model from its configuration file does `),Yue=n(mee,"STRONG",{});var F2t=s(Yue);mtr=r(F2t,"not"),F2t.forEach(t),gtr=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=n(mee,"A",{href:!0});var T2t=s(Iz);htr=r(T2t,"from_pretrained()"),T2t.forEach(t),ptr=r(mee," to load the model weights."),mee.forEach(t),_tr=i(u6),T(mF.$$.fragment,u6),u6.forEach(t),utr=i(sl),go=n(sl,"DIV",{class:!0});var ua=s(go);T(NL.$$.fragment,ua),btr=i(ua),Kue=n(ua,"P",{});var M2t=s(Kue);vtr=r(M2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),M2t.forEach(t),Ftr=i(ua),Xa=n(ua,"P",{});var b6=s(Xa);Ttr=r(b6,"The model class to instantiate is selected based on the "),Zue=n(b6,"CODE",{});var E2t=s(Zue);Mtr=r(E2t,"model_type"),E2t.forEach(t),Etr=r(b6,` property of the config object (either
passed as an argument or loaded from `),e4e=n(b6,"CODE",{});var C2t=s(e4e);Ctr=r(C2t,"pretrained_model_name_or_path"),C2t.forEach(t),wtr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=n(b6,"CODE",{});var w2t=s(o4e);Atr=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),ytr=r(b6,":"),b6.forEach(t),Ltr=i(ua),qL=n(ua,"UL",{});var LGe=s(qL);gF=n(LGe,"LI",{});var vSe=s(gF);r4e=n(vSe,"STRONG",{});var A2t=s(r4e);xtr=r(A2t,"speech-encoder-decoder"),A2t.forEach(t),$tr=r(vSe," \u2014 "),Nz=n(vSe,"A",{href:!0});var y2t=s(Nz);ktr=r(y2t,"SpeechEncoderDecoderModel"),y2t.forEach(t),Str=r(vSe," (Speech Encoder decoder model)"),vSe.forEach(t),Rtr=i(LGe),hF=n(LGe,"LI",{});var FSe=s(hF);t4e=n(FSe,"STRONG",{});var L2t=s(t4e);Ptr=r(L2t,"speech_to_text"),L2t.forEach(t),Btr=r(FSe," \u2014 "),qz=n(FSe,"A",{href:!0});var x2t=s(qz);Itr=r(x2t,"Speech2TextForConditionalGeneration"),x2t.forEach(t),Ntr=r(FSe," (Speech2Text model)"),FSe.forEach(t),LGe.forEach(t),qtr=i(ua),pF=n(ua,"P",{});var TSe=s(pF);jtr=r(TSe,"The model is set in evaluation mode by default using "),a4e=n(TSe,"CODE",{});var $2t=s(a4e);Dtr=r($2t,"model.eval()"),$2t.forEach(t),Gtr=r(TSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n4e=n(TSe,"CODE",{});var k2t=s(n4e);Otr=r(k2t,"model.train()"),k2t.forEach(t),TSe.forEach(t),Vtr=i(ua),T(_F.$$.fragment,ua),ua.forEach(t),sl.forEach(t),Cje=i(f),Ed=n(f,"H2",{class:!0});var xGe=s(Ed);uF=n(xGe,"A",{id:!0,class:!0,href:!0});var S2t=s(uF);s4e=n(S2t,"SPAN",{});var R2t=s(s4e);T(jL.$$.fragment,R2t),R2t.forEach(t),S2t.forEach(t),Xtr=i(xGe),l4e=n(xGe,"SPAN",{});var P2t=s(l4e);ztr=r(P2t,"AutoModelForAudioXVector"),P2t.forEach(t),xGe.forEach(t),wje=i(f),zo=n(f,"DIV",{class:!0});var ll=s(zo);T(DL.$$.fragment,ll),Wtr=i(ll),Cd=n(ll,"P",{});var gee=s(Cd);Qtr=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jz=n(gee,"A",{href:!0});var B2t=s(jz);Htr=r(B2t,"from_pretrained()"),B2t.forEach(t),Utr=r(gee," class method or the "),Dz=n(gee,"A",{href:!0});var I2t=s(Dz);Jtr=r(I2t,"from_config()"),I2t.forEach(t),Ytr=r(gee,` class
method.`),gee.forEach(t),Ktr=i(ll),GL=n(ll,"P",{});var $Ge=s(GL);Ztr=r($Ge,"This class cannot be instantiated directly using "),i4e=n($Ge,"CODE",{});var N2t=s(i4e);ear=r(N2t,"__init__()"),N2t.forEach(t),oar=r($Ge," (throws an error)."),$Ge.forEach(t),rar=i(ll),Tt=n(ll,"DIV",{class:!0});var v6=s(Tt);T(OL.$$.fragment,v6),tar=i(v6),d4e=n(v6,"P",{});var q2t=s(d4e);aar=r(q2t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),q2t.forEach(t),nar=i(v6),wd=n(v6,"P",{});var hee=s(wd);sar=r(hee,`Note:
Loading a model from its configuration file does `),c4e=n(hee,"STRONG",{});var j2t=s(c4e);lar=r(j2t,"not"),j2t.forEach(t),iar=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(hee,"A",{href:!0});var D2t=s(Gz);dar=r(D2t,"from_pretrained()"),D2t.forEach(t),car=r(hee," to load the model weights."),hee.forEach(t),far=i(v6),T(bF.$$.fragment,v6),v6.forEach(t),mar=i(ll),ho=n(ll,"DIV",{class:!0});var ba=s(ho);T(VL.$$.fragment,ba),gar=i(ba),f4e=n(ba,"P",{});var G2t=s(f4e);har=r(G2t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),G2t.forEach(t),par=i(ba),za=n(ba,"P",{});var F6=s(za);_ar=r(F6,"The model class to instantiate is selected based on the "),m4e=n(F6,"CODE",{});var O2t=s(m4e);uar=r(O2t,"model_type"),O2t.forEach(t),bar=r(F6,` property of the config object (either
passed as an argument or loaded from `),g4e=n(F6,"CODE",{});var V2t=s(g4e);Far=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),Tar=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=n(F6,"CODE",{});var X2t=s(h4e);Mar=r(X2t,"pretrained_model_name_or_path"),X2t.forEach(t),Ear=r(F6,":"),F6.forEach(t),Car=i(ba),Zr=n(ba,"UL",{});var il=s(Zr);vF=n(il,"LI",{});var MSe=s(vF);p4e=n(MSe,"STRONG",{});var z2t=s(p4e);war=r(z2t,"data2vec-audio"),z2t.forEach(t),Aar=r(MSe," \u2014 "),Oz=n(MSe,"A",{href:!0});var W2t=s(Oz);yar=r(W2t,"Data2VecAudioForXVector"),W2t.forEach(t),Lar=r(MSe," (Data2VecAudio model)"),MSe.forEach(t),xar=i(il),FF=n(il,"LI",{});var ESe=s(FF);_4e=n(ESe,"STRONG",{});var Q2t=s(_4e);$ar=r(Q2t,"unispeech-sat"),Q2t.forEach(t),kar=r(ESe," \u2014 "),Vz=n(ESe,"A",{href:!0});var H2t=s(Vz);Sar=r(H2t,"UniSpeechSatForXVector"),H2t.forEach(t),Rar=r(ESe," (UniSpeechSat model)"),ESe.forEach(t),Par=i(il),TF=n(il,"LI",{});var CSe=s(TF);u4e=n(CSe,"STRONG",{});var U2t=s(u4e);Bar=r(U2t,"wav2vec2"),U2t.forEach(t),Iar=r(CSe," \u2014 "),Xz=n(CSe,"A",{href:!0});var J2t=s(Xz);Nar=r(J2t,"Wav2Vec2ForXVector"),J2t.forEach(t),qar=r(CSe," (Wav2Vec2 model)"),CSe.forEach(t),jar=i(il),MF=n(il,"LI",{});var wSe=s(MF);b4e=n(wSe,"STRONG",{});var Y2t=s(b4e);Dar=r(Y2t,"wav2vec2-conformer"),Y2t.forEach(t),Gar=r(wSe," \u2014 "),zz=n(wSe,"A",{href:!0});var K2t=s(zz);Oar=r(K2t,"Wav2Vec2ConformerForXVector"),K2t.forEach(t),Var=r(wSe," (Wav2Vec2-Conformer model)"),wSe.forEach(t),Xar=i(il),EF=n(il,"LI",{});var ASe=s(EF);v4e=n(ASe,"STRONG",{});var Z2t=s(v4e);zar=r(Z2t,"wavlm"),Z2t.forEach(t),War=r(ASe," \u2014 "),Wz=n(ASe,"A",{href:!0});var evt=s(Wz);Qar=r(evt,"WavLMForXVector"),evt.forEach(t),Har=r(ASe," (WavLM model)"),ASe.forEach(t),il.forEach(t),Uar=i(ba),CF=n(ba,"P",{});var ySe=s(CF);Jar=r(ySe,"The model is set in evaluation mode by default using "),F4e=n(ySe,"CODE",{});var ovt=s(F4e);Yar=r(ovt,"model.eval()"),ovt.forEach(t),Kar=r(ySe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T4e=n(ySe,"CODE",{});var rvt=s(T4e);Zar=r(rvt,"model.train()"),rvt.forEach(t),ySe.forEach(t),enr=i(ba),T(wF.$$.fragment,ba),ba.forEach(t),ll.forEach(t),Aje=i(f),Ad=n(f,"H2",{class:!0});var kGe=s(Ad);AF=n(kGe,"A",{id:!0,class:!0,href:!0});var tvt=s(AF);M4e=n(tvt,"SPAN",{});var avt=s(M4e);T(XL.$$.fragment,avt),avt.forEach(t),tvt.forEach(t),onr=i(kGe),E4e=n(kGe,"SPAN",{});var nvt=s(E4e);rnr=r(nvt,"AutoModelForMaskedImageModeling"),nvt.forEach(t),kGe.forEach(t),yje=i(f),Wo=n(f,"DIV",{class:!0});var dl=s(Wo);T(zL.$$.fragment,dl),tnr=i(dl),yd=n(dl,"P",{});var pee=s(yd);anr=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Qz=n(pee,"A",{href:!0});var svt=s(Qz);nnr=r(svt,"from_pretrained()"),svt.forEach(t),snr=r(pee," class method or the "),Hz=n(pee,"A",{href:!0});var lvt=s(Hz);lnr=r(lvt,"from_config()"),lvt.forEach(t),inr=r(pee,` class
method.`),pee.forEach(t),dnr=i(dl),WL=n(dl,"P",{});var SGe=s(WL);cnr=r(SGe,"This class cannot be instantiated directly using "),C4e=n(SGe,"CODE",{});var ivt=s(C4e);fnr=r(ivt,"__init__()"),ivt.forEach(t),mnr=r(SGe," (throws an error)."),SGe.forEach(t),gnr=i(dl),Mt=n(dl,"DIV",{class:!0});var T6=s(Mt);T(QL.$$.fragment,T6),hnr=i(T6),w4e=n(T6,"P",{});var dvt=s(w4e);pnr=r(dvt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),dvt.forEach(t),_nr=i(T6),Ld=n(T6,"P",{});var _ee=s(Ld);unr=r(_ee,`Note:
Loading a model from its configuration file does `),A4e=n(_ee,"STRONG",{});var cvt=s(A4e);bnr=r(cvt,"not"),cvt.forEach(t),vnr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=n(_ee,"A",{href:!0});var fvt=s(Uz);Fnr=r(fvt,"from_pretrained()"),fvt.forEach(t),Tnr=r(_ee," to load the model weights."),_ee.forEach(t),Mnr=i(T6),T(yF.$$.fragment,T6),T6.forEach(t),Enr=i(dl),po=n(dl,"DIV",{class:!0});var va=s(po);T(HL.$$.fragment,va),Cnr=i(va),y4e=n(va,"P",{});var mvt=s(y4e);wnr=r(mvt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),mvt.forEach(t),Anr=i(va),Wa=n(va,"P",{});var M6=s(Wa);ynr=r(M6,"The model class to instantiate is selected based on the "),L4e=n(M6,"CODE",{});var gvt=s(L4e);Lnr=r(gvt,"model_type"),gvt.forEach(t),xnr=r(M6,` property of the config object (either
passed as an argument or loaded from `),x4e=n(M6,"CODE",{});var hvt=s(x4e);$nr=r(hvt,"pretrained_model_name_or_path"),hvt.forEach(t),knr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=n(M6,"CODE",{});var pvt=s($4e);Snr=r(pvt,"pretrained_model_name_or_path"),pvt.forEach(t),Rnr=r(M6,":"),M6.forEach(t),Pnr=i(va),xd=n(va,"UL",{});var uee=s(xd);LF=n(uee,"LI",{});var LSe=s(LF);k4e=n(LSe,"STRONG",{});var _vt=s(k4e);Bnr=r(_vt,"deit"),_vt.forEach(t),Inr=r(LSe," \u2014 "),Jz=n(LSe,"A",{href:!0});var uvt=s(Jz);Nnr=r(uvt,"DeiTForMaskedImageModeling"),uvt.forEach(t),qnr=r(LSe," (DeiT model)"),LSe.forEach(t),jnr=i(uee),xF=n(uee,"LI",{});var xSe=s(xF);S4e=n(xSe,"STRONG",{});var bvt=s(S4e);Dnr=r(bvt,"swin"),bvt.forEach(t),Gnr=r(xSe," \u2014 "),Yz=n(xSe,"A",{href:!0});var vvt=s(Yz);Onr=r(vvt,"SwinForMaskedImageModeling"),vvt.forEach(t),Vnr=r(xSe," (Swin model)"),xSe.forEach(t),Xnr=i(uee),$F=n(uee,"LI",{});var $Se=s($F);R4e=n($Se,"STRONG",{});var Fvt=s(R4e);znr=r(Fvt,"vit"),Fvt.forEach(t),Wnr=r($Se," \u2014 "),Kz=n($Se,"A",{href:!0});var Tvt=s(Kz);Qnr=r(Tvt,"ViTForMaskedImageModeling"),Tvt.forEach(t),Hnr=r($Se," (ViT model)"),$Se.forEach(t),uee.forEach(t),Unr=i(va),kF=n(va,"P",{});var kSe=s(kF);Jnr=r(kSe,"The model is set in evaluation mode by default using "),P4e=n(kSe,"CODE",{});var Mvt=s(P4e);Ynr=r(Mvt,"model.eval()"),Mvt.forEach(t),Knr=r(kSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B4e=n(kSe,"CODE",{});var Evt=s(B4e);Znr=r(Evt,"model.train()"),Evt.forEach(t),kSe.forEach(t),esr=i(va),T(SF.$$.fragment,va),va.forEach(t),dl.forEach(t),Lje=i(f),$d=n(f,"H2",{class:!0});var RGe=s($d);RF=n(RGe,"A",{id:!0,class:!0,href:!0});var Cvt=s(RF);I4e=n(Cvt,"SPAN",{});var wvt=s(I4e);T(UL.$$.fragment,wvt),wvt.forEach(t),Cvt.forEach(t),osr=i(RGe),N4e=n(RGe,"SPAN",{});var Avt=s(N4e);rsr=r(Avt,"AutoModelForObjectDetection"),Avt.forEach(t),RGe.forEach(t),xje=i(f),Qo=n(f,"DIV",{class:!0});var cl=s(Qo);T(JL.$$.fragment,cl),tsr=i(cl),kd=n(cl,"P",{});var bee=s(kd);asr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Zz=n(bee,"A",{href:!0});var yvt=s(Zz);nsr=r(yvt,"from_pretrained()"),yvt.forEach(t),ssr=r(bee," class method or the "),eW=n(bee,"A",{href:!0});var Lvt=s(eW);lsr=r(Lvt,"from_config()"),Lvt.forEach(t),isr=r(bee,` class
method.`),bee.forEach(t),dsr=i(cl),YL=n(cl,"P",{});var PGe=s(YL);csr=r(PGe,"This class cannot be instantiated directly using "),q4e=n(PGe,"CODE",{});var xvt=s(q4e);fsr=r(xvt,"__init__()"),xvt.forEach(t),msr=r(PGe," (throws an error)."),PGe.forEach(t),gsr=i(cl),Et=n(cl,"DIV",{class:!0});var E6=s(Et);T(KL.$$.fragment,E6),hsr=i(E6),j4e=n(E6,"P",{});var $vt=s(j4e);psr=r($vt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),$vt.forEach(t),_sr=i(E6),Sd=n(E6,"P",{});var vee=s(Sd);usr=r(vee,`Note:
Loading a model from its configuration file does `),D4e=n(vee,"STRONG",{});var kvt=s(D4e);bsr=r(kvt,"not"),kvt.forEach(t),vsr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=n(vee,"A",{href:!0});var Svt=s(oW);Fsr=r(Svt,"from_pretrained()"),Svt.forEach(t),Tsr=r(vee," to load the model weights."),vee.forEach(t),Msr=i(E6),T(PF.$$.fragment,E6),E6.forEach(t),Esr=i(cl),_o=n(cl,"DIV",{class:!0});var Fa=s(_o);T(ZL.$$.fragment,Fa),Csr=i(Fa),G4e=n(Fa,"P",{});var Rvt=s(G4e);wsr=r(Rvt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Rvt.forEach(t),Asr=i(Fa),Qa=n(Fa,"P",{});var C6=s(Qa);ysr=r(C6,"The model class to instantiate is selected based on the "),O4e=n(C6,"CODE",{});var Pvt=s(O4e);Lsr=r(Pvt,"model_type"),Pvt.forEach(t),xsr=r(C6,` property of the config object (either
passed as an argument or loaded from `),V4e=n(C6,"CODE",{});var Bvt=s(V4e);$sr=r(Bvt,"pretrained_model_name_or_path"),Bvt.forEach(t),ksr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=n(C6,"CODE",{});var Ivt=s(X4e);Ssr=r(Ivt,"pretrained_model_name_or_path"),Ivt.forEach(t),Rsr=r(C6,":"),C6.forEach(t),Psr=i(Fa),e8=n(Fa,"UL",{});var BGe=s(e8);BF=n(BGe,"LI",{});var SSe=s(BF);z4e=n(SSe,"STRONG",{});var Nvt=s(z4e);Bsr=r(Nvt,"detr"),Nvt.forEach(t),Isr=r(SSe," \u2014 "),rW=n(SSe,"A",{href:!0});var qvt=s(rW);Nsr=r(qvt,"DetrForObjectDetection"),qvt.forEach(t),qsr=r(SSe," (DETR model)"),SSe.forEach(t),jsr=i(BGe),IF=n(BGe,"LI",{});var RSe=s(IF);W4e=n(RSe,"STRONG",{});var jvt=s(W4e);Dsr=r(jvt,"yolos"),jvt.forEach(t),Gsr=r(RSe," \u2014 "),tW=n(RSe,"A",{href:!0});var Dvt=s(tW);Osr=r(Dvt,"YolosForObjectDetection"),Dvt.forEach(t),Vsr=r(RSe," (YOLOS model)"),RSe.forEach(t),BGe.forEach(t),Xsr=i(Fa),NF=n(Fa,"P",{});var PSe=s(NF);zsr=r(PSe,"The model is set in evaluation mode by default using "),Q4e=n(PSe,"CODE",{});var Gvt=s(Q4e);Wsr=r(Gvt,"model.eval()"),Gvt.forEach(t),Qsr=r(PSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H4e=n(PSe,"CODE",{});var Ovt=s(H4e);Hsr=r(Ovt,"model.train()"),Ovt.forEach(t),PSe.forEach(t),Usr=i(Fa),T(qF.$$.fragment,Fa),Fa.forEach(t),cl.forEach(t),$je=i(f),Rd=n(f,"H2",{class:!0});var IGe=s(Rd);jF=n(IGe,"A",{id:!0,class:!0,href:!0});var Vvt=s(jF);U4e=n(Vvt,"SPAN",{});var Xvt=s(U4e);T(o8.$$.fragment,Xvt),Xvt.forEach(t),Vvt.forEach(t),Jsr=i(IGe),J4e=n(IGe,"SPAN",{});var zvt=s(J4e);Ysr=r(zvt,"AutoModelForImageSegmentation"),zvt.forEach(t),IGe.forEach(t),kje=i(f),Ho=n(f,"DIV",{class:!0});var fl=s(Ho);T(r8.$$.fragment,fl),Ksr=i(fl),Pd=n(fl,"P",{});var Fee=s(Pd);Zsr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),aW=n(Fee,"A",{href:!0});var Wvt=s(aW);elr=r(Wvt,"from_pretrained()"),Wvt.forEach(t),olr=r(Fee," class method or the "),nW=n(Fee,"A",{href:!0});var Qvt=s(nW);rlr=r(Qvt,"from_config()"),Qvt.forEach(t),tlr=r(Fee,` class
method.`),Fee.forEach(t),alr=i(fl),t8=n(fl,"P",{});var NGe=s(t8);nlr=r(NGe,"This class cannot be instantiated directly using "),Y4e=n(NGe,"CODE",{});var Hvt=s(Y4e);slr=r(Hvt,"__init__()"),Hvt.forEach(t),llr=r(NGe," (throws an error)."),NGe.forEach(t),ilr=i(fl),Ct=n(fl,"DIV",{class:!0});var w6=s(Ct);T(a8.$$.fragment,w6),dlr=i(w6),K4e=n(w6,"P",{});var Uvt=s(K4e);clr=r(Uvt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Uvt.forEach(t),flr=i(w6),Bd=n(w6,"P",{});var Tee=s(Bd);mlr=r(Tee,`Note:
Loading a model from its configuration file does `),Z4e=n(Tee,"STRONG",{});var Jvt=s(Z4e);glr=r(Jvt,"not"),Jvt.forEach(t),hlr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=n(Tee,"A",{href:!0});var Yvt=s(sW);plr=r(Yvt,"from_pretrained()"),Yvt.forEach(t),_lr=r(Tee," to load the model weights."),Tee.forEach(t),ulr=i(w6),T(DF.$$.fragment,w6),w6.forEach(t),blr=i(fl),uo=n(fl,"DIV",{class:!0});var Ta=s(uo);T(n8.$$.fragment,Ta),vlr=i(Ta),e1e=n(Ta,"P",{});var Kvt=s(e1e);Flr=r(Kvt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Kvt.forEach(t),Tlr=i(Ta),Ha=n(Ta,"P",{});var A6=s(Ha);Mlr=r(A6,"The model class to instantiate is selected based on the "),o1e=n(A6,"CODE",{});var Zvt=s(o1e);Elr=r(Zvt,"model_type"),Zvt.forEach(t),Clr=r(A6,` property of the config object (either
passed as an argument or loaded from `),r1e=n(A6,"CODE",{});var e3t=s(r1e);wlr=r(e3t,"pretrained_model_name_or_path"),e3t.forEach(t),Alr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=n(A6,"CODE",{});var o3t=s(t1e);ylr=r(o3t,"pretrained_model_name_or_path"),o3t.forEach(t),Llr=r(A6,":"),A6.forEach(t),xlr=i(Ta),a1e=n(Ta,"UL",{});var r3t=s(a1e);GF=n(r3t,"LI",{});var BSe=s(GF);n1e=n(BSe,"STRONG",{});var t3t=s(n1e);$lr=r(t3t,"detr"),t3t.forEach(t),klr=r(BSe," \u2014 "),lW=n(BSe,"A",{href:!0});var a3t=s(lW);Slr=r(a3t,"DetrForSegmentation"),a3t.forEach(t),Rlr=r(BSe," (DETR model)"),BSe.forEach(t),r3t.forEach(t),Plr=i(Ta),OF=n(Ta,"P",{});var ISe=s(OF);Blr=r(ISe,"The model is set in evaluation mode by default using "),s1e=n(ISe,"CODE",{});var n3t=s(s1e);Ilr=r(n3t,"model.eval()"),n3t.forEach(t),Nlr=r(ISe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l1e=n(ISe,"CODE",{});var s3t=s(l1e);qlr=r(s3t,"model.train()"),s3t.forEach(t),ISe.forEach(t),jlr=i(Ta),T(VF.$$.fragment,Ta),Ta.forEach(t),fl.forEach(t),Sje=i(f),Id=n(f,"H2",{class:!0});var qGe=s(Id);XF=n(qGe,"A",{id:!0,class:!0,href:!0});var l3t=s(XF);i1e=n(l3t,"SPAN",{});var i3t=s(i1e);T(s8.$$.fragment,i3t),i3t.forEach(t),l3t.forEach(t),Dlr=i(qGe),d1e=n(qGe,"SPAN",{});var d3t=s(d1e);Glr=r(d3t,"AutoModelForSemanticSegmentation"),d3t.forEach(t),qGe.forEach(t),Rje=i(f),Uo=n(f,"DIV",{class:!0});var ml=s(Uo);T(l8.$$.fragment,ml),Olr=i(ml),Nd=n(ml,"P",{});var Mee=s(Nd);Vlr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iW=n(Mee,"A",{href:!0});var c3t=s(iW);Xlr=r(c3t,"from_pretrained()"),c3t.forEach(t),zlr=r(Mee," class method or the "),dW=n(Mee,"A",{href:!0});var f3t=s(dW);Wlr=r(f3t,"from_config()"),f3t.forEach(t),Qlr=r(Mee,` class
method.`),Mee.forEach(t),Hlr=i(ml),i8=n(ml,"P",{});var jGe=s(i8);Ulr=r(jGe,"This class cannot be instantiated directly using "),c1e=n(jGe,"CODE",{});var m3t=s(c1e);Jlr=r(m3t,"__init__()"),m3t.forEach(t),Ylr=r(jGe," (throws an error)."),jGe.forEach(t),Klr=i(ml),wt=n(ml,"DIV",{class:!0});var y6=s(wt);T(d8.$$.fragment,y6),Zlr=i(y6),f1e=n(y6,"P",{});var g3t=s(f1e);eir=r(g3t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),g3t.forEach(t),oir=i(y6),qd=n(y6,"P",{});var Eee=s(qd);rir=r(Eee,`Note:
Loading a model from its configuration file does `),m1e=n(Eee,"STRONG",{});var h3t=s(m1e);tir=r(h3t,"not"),h3t.forEach(t),air=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=n(Eee,"A",{href:!0});var p3t=s(cW);nir=r(p3t,"from_pretrained()"),p3t.forEach(t),sir=r(Eee," to load the model weights."),Eee.forEach(t),lir=i(y6),T(zF.$$.fragment,y6),y6.forEach(t),iir=i(ml),bo=n(ml,"DIV",{class:!0});var Ma=s(bo);T(c8.$$.fragment,Ma),dir=i(Ma),g1e=n(Ma,"P",{});var _3t=s(g1e);cir=r(_3t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),_3t.forEach(t),fir=i(Ma),Ua=n(Ma,"P",{});var L6=s(Ua);mir=r(L6,"The model class to instantiate is selected based on the "),h1e=n(L6,"CODE",{});var u3t=s(h1e);gir=r(u3t,"model_type"),u3t.forEach(t),hir=r(L6,` property of the config object (either
passed as an argument or loaded from `),p1e=n(L6,"CODE",{});var b3t=s(p1e);pir=r(b3t,"pretrained_model_name_or_path"),b3t.forEach(t),_ir=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=n(L6,"CODE",{});var v3t=s(_1e);uir=r(v3t,"pretrained_model_name_or_path"),v3t.forEach(t),bir=r(L6,":"),L6.forEach(t),vir=i(Ma),Ja=n(Ma,"UL",{});var x6=s(Ja);WF=n(x6,"LI",{});var NSe=s(WF);u1e=n(NSe,"STRONG",{});var F3t=s(u1e);Fir=r(F3t,"beit"),F3t.forEach(t),Tir=r(NSe," \u2014 "),fW=n(NSe,"A",{href:!0});var T3t=s(fW);Mir=r(T3t,"BeitForSemanticSegmentation"),T3t.forEach(t),Eir=r(NSe," (BEiT model)"),NSe.forEach(t),Cir=i(x6),QF=n(x6,"LI",{});var qSe=s(QF);b1e=n(qSe,"STRONG",{});var M3t=s(b1e);wir=r(M3t,"data2vec-vision"),M3t.forEach(t),Air=r(qSe," \u2014 "),mW=n(qSe,"A",{href:!0});var E3t=s(mW);yir=r(E3t,"Data2VecVisionForSemanticSegmentation"),E3t.forEach(t),Lir=r(qSe," (Data2VecVision model)"),qSe.forEach(t),xir=i(x6),HF=n(x6,"LI",{});var jSe=s(HF);v1e=n(jSe,"STRONG",{});var C3t=s(v1e);$ir=r(C3t,"dpt"),C3t.forEach(t),kir=r(jSe," \u2014 "),gW=n(jSe,"A",{href:!0});var w3t=s(gW);Sir=r(w3t,"DPTForSemanticSegmentation"),w3t.forEach(t),Rir=r(jSe," (DPT model)"),jSe.forEach(t),Pir=i(x6),UF=n(x6,"LI",{});var DSe=s(UF);F1e=n(DSe,"STRONG",{});var A3t=s(F1e);Bir=r(A3t,"segformer"),A3t.forEach(t),Iir=r(DSe," \u2014 "),hW=n(DSe,"A",{href:!0});var y3t=s(hW);Nir=r(y3t,"SegformerForSemanticSegmentation"),y3t.forEach(t),qir=r(DSe," (SegFormer model)"),DSe.forEach(t),x6.forEach(t),jir=i(Ma),JF=n(Ma,"P",{});var GSe=s(JF);Dir=r(GSe,"The model is set in evaluation mode by default using "),T1e=n(GSe,"CODE",{});var L3t=s(T1e);Gir=r(L3t,"model.eval()"),L3t.forEach(t),Oir=r(GSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M1e=n(GSe,"CODE",{});var x3t=s(M1e);Vir=r(x3t,"model.train()"),x3t.forEach(t),GSe.forEach(t),Xir=i(Ma),T(YF.$$.fragment,Ma),Ma.forEach(t),ml.forEach(t),Pje=i(f),jd=n(f,"H2",{class:!0});var DGe=s(jd);KF=n(DGe,"A",{id:!0,class:!0,href:!0});var $3t=s(KF);E1e=n($3t,"SPAN",{});var k3t=s(E1e);T(f8.$$.fragment,k3t),k3t.forEach(t),$3t.forEach(t),zir=i(DGe),C1e=n(DGe,"SPAN",{});var S3t=s(C1e);Wir=r(S3t,"AutoModelForInstanceSegmentation"),S3t.forEach(t),DGe.forEach(t),Bje=i(f),Jo=n(f,"DIV",{class:!0});var gl=s(Jo);T(m8.$$.fragment,gl),Qir=i(gl),Dd=n(gl,"P",{});var Cee=s(Dd);Hir=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pW=n(Cee,"A",{href:!0});var R3t=s(pW);Uir=r(R3t,"from_pretrained()"),R3t.forEach(t),Jir=r(Cee," class method or the "),_W=n(Cee,"A",{href:!0});var P3t=s(_W);Yir=r(P3t,"from_config()"),P3t.forEach(t),Kir=r(Cee,` class
method.`),Cee.forEach(t),Zir=i(gl),g8=n(gl,"P",{});var GGe=s(g8);edr=r(GGe,"This class cannot be instantiated directly using "),w1e=n(GGe,"CODE",{});var B3t=s(w1e);odr=r(B3t,"__init__()"),B3t.forEach(t),rdr=r(GGe," (throws an error)."),GGe.forEach(t),tdr=i(gl),At=n(gl,"DIV",{class:!0});var $6=s(At);T(h8.$$.fragment,$6),adr=i($6),A1e=n($6,"P",{});var I3t=s(A1e);ndr=r(I3t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),I3t.forEach(t),sdr=i($6),Gd=n($6,"P",{});var wee=s(Gd);ldr=r(wee,`Note:
Loading a model from its configuration file does `),y1e=n(wee,"STRONG",{});var N3t=s(y1e);idr=r(N3t,"not"),N3t.forEach(t),ddr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(wee,"A",{href:!0});var q3t=s(uW);cdr=r(q3t,"from_pretrained()"),q3t.forEach(t),fdr=r(wee," to load the model weights."),wee.forEach(t),mdr=i($6),T(ZF.$$.fragment,$6),$6.forEach(t),gdr=i(gl),vo=n(gl,"DIV",{class:!0});var Ea=s(vo);T(p8.$$.fragment,Ea),hdr=i(Ea),L1e=n(Ea,"P",{});var j3t=s(L1e);pdr=r(j3t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),j3t.forEach(t),_dr=i(Ea),Ya=n(Ea,"P",{});var k6=s(Ya);udr=r(k6,"The model class to instantiate is selected based on the "),x1e=n(k6,"CODE",{});var D3t=s(x1e);bdr=r(D3t,"model_type"),D3t.forEach(t),vdr=r(k6,` property of the config object (either
passed as an argument or loaded from `),$1e=n(k6,"CODE",{});var G3t=s($1e);Fdr=r(G3t,"pretrained_model_name_or_path"),G3t.forEach(t),Tdr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k1e=n(k6,"CODE",{});var O3t=s(k1e);Mdr=r(O3t,"pretrained_model_name_or_path"),O3t.forEach(t),Edr=r(k6,":"),k6.forEach(t),Cdr=i(Ea),S1e=n(Ea,"UL",{});var V3t=s(S1e);eT=n(V3t,"LI",{});var OSe=s(eT);R1e=n(OSe,"STRONG",{});var X3t=s(R1e);wdr=r(X3t,"maskformer"),X3t.forEach(t),Adr=r(OSe," \u2014 "),bW=n(OSe,"A",{href:!0});var z3t=s(bW);ydr=r(z3t,"MaskFormerForInstanceSegmentation"),z3t.forEach(t),Ldr=r(OSe," (MaskFormer model)"),OSe.forEach(t),V3t.forEach(t),xdr=i(Ea),oT=n(Ea,"P",{});var VSe=s(oT);$dr=r(VSe,"The model is set in evaluation mode by default using "),P1e=n(VSe,"CODE",{});var W3t=s(P1e);kdr=r(W3t,"model.eval()"),W3t.forEach(t),Sdr=r(VSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B1e=n(VSe,"CODE",{});var Q3t=s(B1e);Rdr=r(Q3t,"model.train()"),Q3t.forEach(t),VSe.forEach(t),Pdr=i(Ea),T(rT.$$.fragment,Ea),Ea.forEach(t),gl.forEach(t),Ije=i(f),Od=n(f,"H2",{class:!0});var OGe=s(Od);tT=n(OGe,"A",{id:!0,class:!0,href:!0});var H3t=s(tT);I1e=n(H3t,"SPAN",{});var U3t=s(I1e);T(_8.$$.fragment,U3t),U3t.forEach(t),H3t.forEach(t),Bdr=i(OGe),N1e=n(OGe,"SPAN",{});var J3t=s(N1e);Idr=r(J3t,"TFAutoModel"),J3t.forEach(t),OGe.forEach(t),Nje=i(f),Yo=n(f,"DIV",{class:!0});var hl=s(Yo);T(u8.$$.fragment,hl),Ndr=i(hl),Vd=n(hl,"P",{});var Aee=s(Vd);qdr=r(Aee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vW=n(Aee,"A",{href:!0});var Y3t=s(vW);jdr=r(Y3t,"from_pretrained()"),Y3t.forEach(t),Ddr=r(Aee," class method or the "),FW=n(Aee,"A",{href:!0});var K3t=s(FW);Gdr=r(K3t,"from_config()"),K3t.forEach(t),Odr=r(Aee,` class
method.`),Aee.forEach(t),Vdr=i(hl),b8=n(hl,"P",{});var VGe=s(b8);Xdr=r(VGe,"This class cannot be instantiated directly using "),q1e=n(VGe,"CODE",{});var Z3t=s(q1e);zdr=r(Z3t,"__init__()"),Z3t.forEach(t),Wdr=r(VGe," (throws an error)."),VGe.forEach(t),Qdr=i(hl),yt=n(hl,"DIV",{class:!0});var S6=s(yt);T(v8.$$.fragment,S6),Hdr=i(S6),j1e=n(S6,"P",{});var eFt=s(j1e);Udr=r(eFt,"Instantiates one of the base model classes of the library from a configuration."),eFt.forEach(t),Jdr=i(S6),Xd=n(S6,"P",{});var yee=s(Xd);Ydr=r(yee,`Note:
Loading a model from its configuration file does `),D1e=n(yee,"STRONG",{});var oFt=s(D1e);Kdr=r(oFt,"not"),oFt.forEach(t),Zdr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(yee,"A",{href:!0});var rFt=s(TW);ecr=r(rFt,"from_pretrained()"),rFt.forEach(t),ocr=r(yee," to load the model weights."),yee.forEach(t),rcr=i(S6),T(aT.$$.fragment,S6),S6.forEach(t),tcr=i(hl),wr=n(hl,"DIV",{class:!0});var pl=s(wr);T(F8.$$.fragment,pl),acr=i(pl),G1e=n(pl,"P",{});var tFt=s(G1e);ncr=r(tFt,"Instantiate one of the base model classes of the library from a pretrained model."),tFt.forEach(t),scr=i(pl),Ka=n(pl,"P",{});var R6=s(Ka);lcr=r(R6,"The model class to instantiate is selected based on the "),O1e=n(R6,"CODE",{});var aFt=s(O1e);icr=r(aFt,"model_type"),aFt.forEach(t),dcr=r(R6,` property of the config object (either
passed as an argument or loaded from `),V1e=n(R6,"CODE",{});var nFt=s(V1e);ccr=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),fcr=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=n(R6,"CODE",{});var sFt=s(X1e);mcr=r(sFt,"pretrained_model_name_or_path"),sFt.forEach(t),gcr=r(R6,":"),R6.forEach(t),hcr=i(pl),q=n(pl,"UL",{});var D=s(q);nT=n(D,"LI",{});var XSe=s(nT);z1e=n(XSe,"STRONG",{});var lFt=s(z1e);pcr=r(lFt,"albert"),lFt.forEach(t),_cr=r(XSe," \u2014 "),MW=n(XSe,"A",{href:!0});var iFt=s(MW);ucr=r(iFt,"TFAlbertModel"),iFt.forEach(t),bcr=r(XSe," (ALBERT model)"),XSe.forEach(t),vcr=i(D),sT=n(D,"LI",{});var zSe=s(sT);W1e=n(zSe,"STRONG",{});var dFt=s(W1e);Fcr=r(dFt,"bart"),dFt.forEach(t),Tcr=r(zSe," \u2014 "),EW=n(zSe,"A",{href:!0});var cFt=s(EW);Mcr=r(cFt,"TFBartModel"),cFt.forEach(t),Ecr=r(zSe," (BART model)"),zSe.forEach(t),Ccr=i(D),lT=n(D,"LI",{});var WSe=s(lT);Q1e=n(WSe,"STRONG",{});var fFt=s(Q1e);wcr=r(fFt,"bert"),fFt.forEach(t),Acr=r(WSe," \u2014 "),CW=n(WSe,"A",{href:!0});var mFt=s(CW);ycr=r(mFt,"TFBertModel"),mFt.forEach(t),Lcr=r(WSe," (BERT model)"),WSe.forEach(t),xcr=i(D),iT=n(D,"LI",{});var QSe=s(iT);H1e=n(QSe,"STRONG",{});var gFt=s(H1e);$cr=r(gFt,"blenderbot"),gFt.forEach(t),kcr=r(QSe," \u2014 "),wW=n(QSe,"A",{href:!0});var hFt=s(wW);Scr=r(hFt,"TFBlenderbotModel"),hFt.forEach(t),Rcr=r(QSe," (Blenderbot model)"),QSe.forEach(t),Pcr=i(D),dT=n(D,"LI",{});var HSe=s(dT);U1e=n(HSe,"STRONG",{});var pFt=s(U1e);Bcr=r(pFt,"blenderbot-small"),pFt.forEach(t),Icr=r(HSe," \u2014 "),AW=n(HSe,"A",{href:!0});var _Ft=s(AW);Ncr=r(_Ft,"TFBlenderbotSmallModel"),_Ft.forEach(t),qcr=r(HSe," (BlenderbotSmall model)"),HSe.forEach(t),jcr=i(D),cT=n(D,"LI",{});var USe=s(cT);J1e=n(USe,"STRONG",{});var uFt=s(J1e);Dcr=r(uFt,"camembert"),uFt.forEach(t),Gcr=r(USe," \u2014 "),yW=n(USe,"A",{href:!0});var bFt=s(yW);Ocr=r(bFt,"TFCamembertModel"),bFt.forEach(t),Vcr=r(USe," (CamemBERT model)"),USe.forEach(t),Xcr=i(D),fT=n(D,"LI",{});var JSe=s(fT);Y1e=n(JSe,"STRONG",{});var vFt=s(Y1e);zcr=r(vFt,"clip"),vFt.forEach(t),Wcr=r(JSe," \u2014 "),LW=n(JSe,"A",{href:!0});var FFt=s(LW);Qcr=r(FFt,"TFCLIPModel"),FFt.forEach(t),Hcr=r(JSe," (CLIP model)"),JSe.forEach(t),Ucr=i(D),mT=n(D,"LI",{});var YSe=s(mT);K1e=n(YSe,"STRONG",{});var TFt=s(K1e);Jcr=r(TFt,"convbert"),TFt.forEach(t),Ycr=r(YSe," \u2014 "),xW=n(YSe,"A",{href:!0});var MFt=s(xW);Kcr=r(MFt,"TFConvBertModel"),MFt.forEach(t),Zcr=r(YSe," (ConvBERT model)"),YSe.forEach(t),efr=i(D),gT=n(D,"LI",{});var KSe=s(gT);Z1e=n(KSe,"STRONG",{});var EFt=s(Z1e);ofr=r(EFt,"convnext"),EFt.forEach(t),rfr=r(KSe," \u2014 "),$W=n(KSe,"A",{href:!0});var CFt=s($W);tfr=r(CFt,"TFConvNextModel"),CFt.forEach(t),afr=r(KSe," (ConvNext model)"),KSe.forEach(t),nfr=i(D),hT=n(D,"LI",{});var ZSe=s(hT);ebe=n(ZSe,"STRONG",{});var wFt=s(ebe);sfr=r(wFt,"ctrl"),wFt.forEach(t),lfr=r(ZSe," \u2014 "),kW=n(ZSe,"A",{href:!0});var AFt=s(kW);ifr=r(AFt,"TFCTRLModel"),AFt.forEach(t),dfr=r(ZSe," (CTRL model)"),ZSe.forEach(t),cfr=i(D),pT=n(D,"LI",{});var eRe=s(pT);obe=n(eRe,"STRONG",{});var yFt=s(obe);ffr=r(yFt,"data2vec-vision"),yFt.forEach(t),mfr=r(eRe," \u2014 "),SW=n(eRe,"A",{href:!0});var LFt=s(SW);gfr=r(LFt,"TFData2VecVisionModel"),LFt.forEach(t),hfr=r(eRe," (Data2VecVision model)"),eRe.forEach(t),pfr=i(D),_T=n(D,"LI",{});var oRe=s(_T);rbe=n(oRe,"STRONG",{});var xFt=s(rbe);_fr=r(xFt,"deberta"),xFt.forEach(t),ufr=r(oRe," \u2014 "),RW=n(oRe,"A",{href:!0});var $Ft=s(RW);bfr=r($Ft,"TFDebertaModel"),$Ft.forEach(t),vfr=r(oRe," (DeBERTa model)"),oRe.forEach(t),Ffr=i(D),uT=n(D,"LI",{});var rRe=s(uT);tbe=n(rRe,"STRONG",{});var kFt=s(tbe);Tfr=r(kFt,"deberta-v2"),kFt.forEach(t),Mfr=r(rRe," \u2014 "),PW=n(rRe,"A",{href:!0});var SFt=s(PW);Efr=r(SFt,"TFDebertaV2Model"),SFt.forEach(t),Cfr=r(rRe," (DeBERTa-v2 model)"),rRe.forEach(t),wfr=i(D),bT=n(D,"LI",{});var tRe=s(bT);abe=n(tRe,"STRONG",{});var RFt=s(abe);Afr=r(RFt,"distilbert"),RFt.forEach(t),yfr=r(tRe," \u2014 "),BW=n(tRe,"A",{href:!0});var PFt=s(BW);Lfr=r(PFt,"TFDistilBertModel"),PFt.forEach(t),xfr=r(tRe," (DistilBERT model)"),tRe.forEach(t),$fr=i(D),vT=n(D,"LI",{});var aRe=s(vT);nbe=n(aRe,"STRONG",{});var BFt=s(nbe);kfr=r(BFt,"dpr"),BFt.forEach(t),Sfr=r(aRe," \u2014 "),IW=n(aRe,"A",{href:!0});var IFt=s(IW);Rfr=r(IFt,"TFDPRQuestionEncoder"),IFt.forEach(t),Pfr=r(aRe," (DPR model)"),aRe.forEach(t),Bfr=i(D),FT=n(D,"LI",{});var nRe=s(FT);sbe=n(nRe,"STRONG",{});var NFt=s(sbe);Ifr=r(NFt,"electra"),NFt.forEach(t),Nfr=r(nRe," \u2014 "),NW=n(nRe,"A",{href:!0});var qFt=s(NW);qfr=r(qFt,"TFElectraModel"),qFt.forEach(t),jfr=r(nRe," (ELECTRA model)"),nRe.forEach(t),Dfr=i(D),TT=n(D,"LI",{});var sRe=s(TT);lbe=n(sRe,"STRONG",{});var jFt=s(lbe);Gfr=r(jFt,"flaubert"),jFt.forEach(t),Ofr=r(sRe," \u2014 "),qW=n(sRe,"A",{href:!0});var DFt=s(qW);Vfr=r(DFt,"TFFlaubertModel"),DFt.forEach(t),Xfr=r(sRe," (FlauBERT model)"),sRe.forEach(t),zfr=i(D),Ns=n(D,"LI",{});var Z$=s(Ns);ibe=n(Z$,"STRONG",{});var GFt=s(ibe);Wfr=r(GFt,"funnel"),GFt.forEach(t),Qfr=r(Z$," \u2014 "),jW=n(Z$,"A",{href:!0});var OFt=s(jW);Hfr=r(OFt,"TFFunnelModel"),OFt.forEach(t),Ufr=r(Z$," or "),DW=n(Z$,"A",{href:!0});var VFt=s(DW);Jfr=r(VFt,"TFFunnelBaseModel"),VFt.forEach(t),Yfr=r(Z$," (Funnel Transformer model)"),Z$.forEach(t),Kfr=i(D),MT=n(D,"LI",{});var lRe=s(MT);dbe=n(lRe,"STRONG",{});var XFt=s(dbe);Zfr=r(XFt,"gpt2"),XFt.forEach(t),emr=r(lRe," \u2014 "),GW=n(lRe,"A",{href:!0});var zFt=s(GW);omr=r(zFt,"TFGPT2Model"),zFt.forEach(t),rmr=r(lRe," (OpenAI GPT-2 model)"),lRe.forEach(t),tmr=i(D),ET=n(D,"LI",{});var iRe=s(ET);cbe=n(iRe,"STRONG",{});var WFt=s(cbe);amr=r(WFt,"gptj"),WFt.forEach(t),nmr=r(iRe," \u2014 "),OW=n(iRe,"A",{href:!0});var QFt=s(OW);smr=r(QFt,"TFGPTJModel"),QFt.forEach(t),lmr=r(iRe," (GPT-J model)"),iRe.forEach(t),imr=i(D),CT=n(D,"LI",{});var dRe=s(CT);fbe=n(dRe,"STRONG",{});var HFt=s(fbe);dmr=r(HFt,"hubert"),HFt.forEach(t),cmr=r(dRe," \u2014 "),VW=n(dRe,"A",{href:!0});var UFt=s(VW);fmr=r(UFt,"TFHubertModel"),UFt.forEach(t),mmr=r(dRe," (Hubert model)"),dRe.forEach(t),gmr=i(D),wT=n(D,"LI",{});var cRe=s(wT);mbe=n(cRe,"STRONG",{});var JFt=s(mbe);hmr=r(JFt,"layoutlm"),JFt.forEach(t),pmr=r(cRe," \u2014 "),XW=n(cRe,"A",{href:!0});var YFt=s(XW);_mr=r(YFt,"TFLayoutLMModel"),YFt.forEach(t),umr=r(cRe," (LayoutLM model)"),cRe.forEach(t),bmr=i(D),AT=n(D,"LI",{});var fRe=s(AT);gbe=n(fRe,"STRONG",{});var KFt=s(gbe);vmr=r(KFt,"led"),KFt.forEach(t),Fmr=r(fRe," \u2014 "),zW=n(fRe,"A",{href:!0});var ZFt=s(zW);Tmr=r(ZFt,"TFLEDModel"),ZFt.forEach(t),Mmr=r(fRe," (LED model)"),fRe.forEach(t),Emr=i(D),yT=n(D,"LI",{});var mRe=s(yT);hbe=n(mRe,"STRONG",{});var eTt=s(hbe);Cmr=r(eTt,"longformer"),eTt.forEach(t),wmr=r(mRe," \u2014 "),WW=n(mRe,"A",{href:!0});var oTt=s(WW);Amr=r(oTt,"TFLongformerModel"),oTt.forEach(t),ymr=r(mRe," (Longformer model)"),mRe.forEach(t),Lmr=i(D),LT=n(D,"LI",{});var gRe=s(LT);pbe=n(gRe,"STRONG",{});var rTt=s(pbe);xmr=r(rTt,"lxmert"),rTt.forEach(t),$mr=r(gRe," \u2014 "),QW=n(gRe,"A",{href:!0});var tTt=s(QW);kmr=r(tTt,"TFLxmertModel"),tTt.forEach(t),Smr=r(gRe," (LXMERT model)"),gRe.forEach(t),Rmr=i(D),xT=n(D,"LI",{});var hRe=s(xT);_be=n(hRe,"STRONG",{});var aTt=s(_be);Pmr=r(aTt,"marian"),aTt.forEach(t),Bmr=r(hRe," \u2014 "),HW=n(hRe,"A",{href:!0});var nTt=s(HW);Imr=r(nTt,"TFMarianModel"),nTt.forEach(t),Nmr=r(hRe," (Marian model)"),hRe.forEach(t),qmr=i(D),$T=n(D,"LI",{});var pRe=s($T);ube=n(pRe,"STRONG",{});var sTt=s(ube);jmr=r(sTt,"mbart"),sTt.forEach(t),Dmr=r(pRe," \u2014 "),UW=n(pRe,"A",{href:!0});var lTt=s(UW);Gmr=r(lTt,"TFMBartModel"),lTt.forEach(t),Omr=r(pRe," (mBART model)"),pRe.forEach(t),Vmr=i(D),kT=n(D,"LI",{});var _Re=s(kT);bbe=n(_Re,"STRONG",{});var iTt=s(bbe);Xmr=r(iTt,"mobilebert"),iTt.forEach(t),zmr=r(_Re," \u2014 "),JW=n(_Re,"A",{href:!0});var dTt=s(JW);Wmr=r(dTt,"TFMobileBertModel"),dTt.forEach(t),Qmr=r(_Re," (MobileBERT model)"),_Re.forEach(t),Hmr=i(D),ST=n(D,"LI",{});var uRe=s(ST);vbe=n(uRe,"STRONG",{});var cTt=s(vbe);Umr=r(cTt,"mpnet"),cTt.forEach(t),Jmr=r(uRe," \u2014 "),YW=n(uRe,"A",{href:!0});var fTt=s(YW);Ymr=r(fTt,"TFMPNetModel"),fTt.forEach(t),Kmr=r(uRe," (MPNet model)"),uRe.forEach(t),Zmr=i(D),RT=n(D,"LI",{});var bRe=s(RT);Fbe=n(bRe,"STRONG",{});var mTt=s(Fbe);egr=r(mTt,"mt5"),mTt.forEach(t),ogr=r(bRe," \u2014 "),KW=n(bRe,"A",{href:!0});var gTt=s(KW);rgr=r(gTt,"TFMT5Model"),gTt.forEach(t),tgr=r(bRe," (mT5 model)"),bRe.forEach(t),agr=i(D),PT=n(D,"LI",{});var vRe=s(PT);Tbe=n(vRe,"STRONG",{});var hTt=s(Tbe);ngr=r(hTt,"openai-gpt"),hTt.forEach(t),sgr=r(vRe," \u2014 "),ZW=n(vRe,"A",{href:!0});var pTt=s(ZW);lgr=r(pTt,"TFOpenAIGPTModel"),pTt.forEach(t),igr=r(vRe," (OpenAI GPT model)"),vRe.forEach(t),dgr=i(D),BT=n(D,"LI",{});var FRe=s(BT);Mbe=n(FRe,"STRONG",{});var _Tt=s(Mbe);cgr=r(_Tt,"opt"),_Tt.forEach(t),fgr=r(FRe," \u2014 "),eQ=n(FRe,"A",{href:!0});var uTt=s(eQ);mgr=r(uTt,"TFOPTModel"),uTt.forEach(t),ggr=r(FRe," (OPT model)"),FRe.forEach(t),hgr=i(D),IT=n(D,"LI",{});var TRe=s(IT);Ebe=n(TRe,"STRONG",{});var bTt=s(Ebe);pgr=r(bTt,"pegasus"),bTt.forEach(t),_gr=r(TRe," \u2014 "),oQ=n(TRe,"A",{href:!0});var vTt=s(oQ);ugr=r(vTt,"TFPegasusModel"),vTt.forEach(t),bgr=r(TRe," (Pegasus model)"),TRe.forEach(t),vgr=i(D),NT=n(D,"LI",{});var MRe=s(NT);Cbe=n(MRe,"STRONG",{});var FTt=s(Cbe);Fgr=r(FTt,"rembert"),FTt.forEach(t),Tgr=r(MRe," \u2014 "),rQ=n(MRe,"A",{href:!0});var TTt=s(rQ);Mgr=r(TTt,"TFRemBertModel"),TTt.forEach(t),Egr=r(MRe," (RemBERT model)"),MRe.forEach(t),Cgr=i(D),qT=n(D,"LI",{});var ERe=s(qT);wbe=n(ERe,"STRONG",{});var MTt=s(wbe);wgr=r(MTt,"roberta"),MTt.forEach(t),Agr=r(ERe," \u2014 "),tQ=n(ERe,"A",{href:!0});var ETt=s(tQ);ygr=r(ETt,"TFRobertaModel"),ETt.forEach(t),Lgr=r(ERe," (RoBERTa model)"),ERe.forEach(t),xgr=i(D),jT=n(D,"LI",{});var CRe=s(jT);Abe=n(CRe,"STRONG",{});var CTt=s(Abe);$gr=r(CTt,"roformer"),CTt.forEach(t),kgr=r(CRe," \u2014 "),aQ=n(CRe,"A",{href:!0});var wTt=s(aQ);Sgr=r(wTt,"TFRoFormerModel"),wTt.forEach(t),Rgr=r(CRe," (RoFormer model)"),CRe.forEach(t),Pgr=i(D),DT=n(D,"LI",{});var wRe=s(DT);ybe=n(wRe,"STRONG",{});var ATt=s(ybe);Bgr=r(ATt,"speech_to_text"),ATt.forEach(t),Igr=r(wRe," \u2014 "),nQ=n(wRe,"A",{href:!0});var yTt=s(nQ);Ngr=r(yTt,"TFSpeech2TextModel"),yTt.forEach(t),qgr=r(wRe," (Speech2Text model)"),wRe.forEach(t),jgr=i(D),GT=n(D,"LI",{});var ARe=s(GT);Lbe=n(ARe,"STRONG",{});var LTt=s(Lbe);Dgr=r(LTt,"swin"),LTt.forEach(t),Ggr=r(ARe," \u2014 "),sQ=n(ARe,"A",{href:!0});var xTt=s(sQ);Ogr=r(xTt,"TFSwinModel"),xTt.forEach(t),Vgr=r(ARe," (Swin model)"),ARe.forEach(t),Xgr=i(D),OT=n(D,"LI",{});var yRe=s(OT);xbe=n(yRe,"STRONG",{});var $Tt=s(xbe);zgr=r($Tt,"t5"),$Tt.forEach(t),Wgr=r(yRe," \u2014 "),lQ=n(yRe,"A",{href:!0});var kTt=s(lQ);Qgr=r(kTt,"TFT5Model"),kTt.forEach(t),Hgr=r(yRe," (T5 model)"),yRe.forEach(t),Ugr=i(D),VT=n(D,"LI",{});var LRe=s(VT);$be=n(LRe,"STRONG",{});var STt=s($be);Jgr=r(STt,"tapas"),STt.forEach(t),Ygr=r(LRe," \u2014 "),iQ=n(LRe,"A",{href:!0});var RTt=s(iQ);Kgr=r(RTt,"TFTapasModel"),RTt.forEach(t),Zgr=r(LRe," (TAPAS model)"),LRe.forEach(t),ehr=i(D),XT=n(D,"LI",{});var xRe=s(XT);kbe=n(xRe,"STRONG",{});var PTt=s(kbe);ohr=r(PTt,"transfo-xl"),PTt.forEach(t),rhr=r(xRe," \u2014 "),dQ=n(xRe,"A",{href:!0});var BTt=s(dQ);thr=r(BTt,"TFTransfoXLModel"),BTt.forEach(t),ahr=r(xRe," (Transformer-XL model)"),xRe.forEach(t),nhr=i(D),zT=n(D,"LI",{});var $Re=s(zT);Sbe=n($Re,"STRONG",{});var ITt=s(Sbe);shr=r(ITt,"vit"),ITt.forEach(t),lhr=r($Re," \u2014 "),cQ=n($Re,"A",{href:!0});var NTt=s(cQ);ihr=r(NTt,"TFViTModel"),NTt.forEach(t),dhr=r($Re," (ViT model)"),$Re.forEach(t),chr=i(D),WT=n(D,"LI",{});var kRe=s(WT);Rbe=n(kRe,"STRONG",{});var qTt=s(Rbe);fhr=r(qTt,"vit_mae"),qTt.forEach(t),mhr=r(kRe," \u2014 "),fQ=n(kRe,"A",{href:!0});var jTt=s(fQ);ghr=r(jTt,"TFViTMAEModel"),jTt.forEach(t),hhr=r(kRe," (ViTMAE model)"),kRe.forEach(t),phr=i(D),QT=n(D,"LI",{});var SRe=s(QT);Pbe=n(SRe,"STRONG",{});var DTt=s(Pbe);_hr=r(DTt,"wav2vec2"),DTt.forEach(t),uhr=r(SRe," \u2014 "),mQ=n(SRe,"A",{href:!0});var GTt=s(mQ);bhr=r(GTt,"TFWav2Vec2Model"),GTt.forEach(t),vhr=r(SRe," (Wav2Vec2 model)"),SRe.forEach(t),Fhr=i(D),HT=n(D,"LI",{});var RRe=s(HT);Bbe=n(RRe,"STRONG",{});var OTt=s(Bbe);Thr=r(OTt,"xlm"),OTt.forEach(t),Mhr=r(RRe," \u2014 "),gQ=n(RRe,"A",{href:!0});var VTt=s(gQ);Ehr=r(VTt,"TFXLMModel"),VTt.forEach(t),Chr=r(RRe," (XLM model)"),RRe.forEach(t),whr=i(D),UT=n(D,"LI",{});var PRe=s(UT);Ibe=n(PRe,"STRONG",{});var XTt=s(Ibe);Ahr=r(XTt,"xlm-roberta"),XTt.forEach(t),yhr=r(PRe," \u2014 "),hQ=n(PRe,"A",{href:!0});var zTt=s(hQ);Lhr=r(zTt,"TFXLMRobertaModel"),zTt.forEach(t),xhr=r(PRe," (XLM-RoBERTa model)"),PRe.forEach(t),$hr=i(D),JT=n(D,"LI",{});var BRe=s(JT);Nbe=n(BRe,"STRONG",{});var WTt=s(Nbe);khr=r(WTt,"xlnet"),WTt.forEach(t),Shr=r(BRe," \u2014 "),pQ=n(BRe,"A",{href:!0});var QTt=s(pQ);Rhr=r(QTt,"TFXLNetModel"),QTt.forEach(t),Phr=r(BRe," (XLNet model)"),BRe.forEach(t),D.forEach(t),Bhr=i(pl),T(YT.$$.fragment,pl),pl.forEach(t),hl.forEach(t),qje=i(f),zd=n(f,"H2",{class:!0});var XGe=s(zd);KT=n(XGe,"A",{id:!0,class:!0,href:!0});var HTt=s(KT);qbe=n(HTt,"SPAN",{});var UTt=s(qbe);T(T8.$$.fragment,UTt),UTt.forEach(t),HTt.forEach(t),Ihr=i(XGe),jbe=n(XGe,"SPAN",{});var JTt=s(jbe);Nhr=r(JTt,"TFAutoModelForPreTraining"),JTt.forEach(t),XGe.forEach(t),jje=i(f),Ko=n(f,"DIV",{class:!0});var _l=s(Ko);T(M8.$$.fragment,_l),qhr=i(_l),Wd=n(_l,"P",{});var Lee=s(Wd);jhr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_Q=n(Lee,"A",{href:!0});var YTt=s(_Q);Dhr=r(YTt,"from_pretrained()"),YTt.forEach(t),Ghr=r(Lee," class method or the "),uQ=n(Lee,"A",{href:!0});var KTt=s(uQ);Ohr=r(KTt,"from_config()"),KTt.forEach(t),Vhr=r(Lee,` class
method.`),Lee.forEach(t),Xhr=i(_l),E8=n(_l,"P",{});var zGe=s(E8);zhr=r(zGe,"This class cannot be instantiated directly using "),Dbe=n(zGe,"CODE",{});var ZTt=s(Dbe);Whr=r(ZTt,"__init__()"),ZTt.forEach(t),Qhr=r(zGe," (throws an error)."),zGe.forEach(t),Hhr=i(_l),Lt=n(_l,"DIV",{class:!0});var P6=s(Lt);T(C8.$$.fragment,P6),Uhr=i(P6),Gbe=n(P6,"P",{});var e7t=s(Gbe);Jhr=r(e7t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),e7t.forEach(t),Yhr=i(P6),Qd=n(P6,"P",{});var xee=s(Qd);Khr=r(xee,`Note:
Loading a model from its configuration file does `),Obe=n(xee,"STRONG",{});var o7t=s(Obe);Zhr=r(o7t,"not"),o7t.forEach(t),epr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(xee,"A",{href:!0});var r7t=s(bQ);opr=r(r7t,"from_pretrained()"),r7t.forEach(t),rpr=r(xee," to load the model weights."),xee.forEach(t),tpr=i(P6),T(ZT.$$.fragment,P6),P6.forEach(t),apr=i(_l),Ar=n(_l,"DIV",{class:!0});var ul=s(Ar);T(w8.$$.fragment,ul),npr=i(ul),Vbe=n(ul,"P",{});var t7t=s(Vbe);spr=r(t7t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),t7t.forEach(t),lpr=i(ul),Za=n(ul,"P",{});var B6=s(Za);ipr=r(B6,"The model class to instantiate is selected based on the "),Xbe=n(B6,"CODE",{});var a7t=s(Xbe);dpr=r(a7t,"model_type"),a7t.forEach(t),cpr=r(B6,` property of the config object (either
passed as an argument or loaded from `),zbe=n(B6,"CODE",{});var n7t=s(zbe);fpr=r(n7t,"pretrained_model_name_or_path"),n7t.forEach(t),mpr=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=n(B6,"CODE",{});var s7t=s(Wbe);gpr=r(s7t,"pretrained_model_name_or_path"),s7t.forEach(t),hpr=r(B6,":"),B6.forEach(t),ppr=i(ul),se=n(ul,"UL",{});var le=s(se);e7=n(le,"LI",{});var IRe=s(e7);Qbe=n(IRe,"STRONG",{});var l7t=s(Qbe);_pr=r(l7t,"albert"),l7t.forEach(t),upr=r(IRe," \u2014 "),vQ=n(IRe,"A",{href:!0});var i7t=s(vQ);bpr=r(i7t,"TFAlbertForPreTraining"),i7t.forEach(t),vpr=r(IRe," (ALBERT model)"),IRe.forEach(t),Fpr=i(le),o7=n(le,"LI",{});var NRe=s(o7);Hbe=n(NRe,"STRONG",{});var d7t=s(Hbe);Tpr=r(d7t,"bart"),d7t.forEach(t),Mpr=r(NRe," \u2014 "),FQ=n(NRe,"A",{href:!0});var c7t=s(FQ);Epr=r(c7t,"TFBartForConditionalGeneration"),c7t.forEach(t),Cpr=r(NRe," (BART model)"),NRe.forEach(t),wpr=i(le),r7=n(le,"LI",{});var qRe=s(r7);Ube=n(qRe,"STRONG",{});var f7t=s(Ube);Apr=r(f7t,"bert"),f7t.forEach(t),ypr=r(qRe," \u2014 "),TQ=n(qRe,"A",{href:!0});var m7t=s(TQ);Lpr=r(m7t,"TFBertForPreTraining"),m7t.forEach(t),xpr=r(qRe," (BERT model)"),qRe.forEach(t),$pr=i(le),t7=n(le,"LI",{});var jRe=s(t7);Jbe=n(jRe,"STRONG",{});var g7t=s(Jbe);kpr=r(g7t,"camembert"),g7t.forEach(t),Spr=r(jRe," \u2014 "),MQ=n(jRe,"A",{href:!0});var h7t=s(MQ);Rpr=r(h7t,"TFCamembertForMaskedLM"),h7t.forEach(t),Ppr=r(jRe," (CamemBERT model)"),jRe.forEach(t),Bpr=i(le),a7=n(le,"LI",{});var DRe=s(a7);Ybe=n(DRe,"STRONG",{});var p7t=s(Ybe);Ipr=r(p7t,"ctrl"),p7t.forEach(t),Npr=r(DRe," \u2014 "),EQ=n(DRe,"A",{href:!0});var _7t=s(EQ);qpr=r(_7t,"TFCTRLLMHeadModel"),_7t.forEach(t),jpr=r(DRe," (CTRL model)"),DRe.forEach(t),Dpr=i(le),n7=n(le,"LI",{});var GRe=s(n7);Kbe=n(GRe,"STRONG",{});var u7t=s(Kbe);Gpr=r(u7t,"distilbert"),u7t.forEach(t),Opr=r(GRe," \u2014 "),CQ=n(GRe,"A",{href:!0});var b7t=s(CQ);Vpr=r(b7t,"TFDistilBertForMaskedLM"),b7t.forEach(t),Xpr=r(GRe," (DistilBERT model)"),GRe.forEach(t),zpr=i(le),s7=n(le,"LI",{});var ORe=s(s7);Zbe=n(ORe,"STRONG",{});var v7t=s(Zbe);Wpr=r(v7t,"electra"),v7t.forEach(t),Qpr=r(ORe," \u2014 "),wQ=n(ORe,"A",{href:!0});var F7t=s(wQ);Hpr=r(F7t,"TFElectraForPreTraining"),F7t.forEach(t),Upr=r(ORe," (ELECTRA model)"),ORe.forEach(t),Jpr=i(le),l7=n(le,"LI",{});var VRe=s(l7);e2e=n(VRe,"STRONG",{});var T7t=s(e2e);Ypr=r(T7t,"flaubert"),T7t.forEach(t),Kpr=r(VRe," \u2014 "),AQ=n(VRe,"A",{href:!0});var M7t=s(AQ);Zpr=r(M7t,"TFFlaubertWithLMHeadModel"),M7t.forEach(t),e_r=r(VRe," (FlauBERT model)"),VRe.forEach(t),o_r=i(le),i7=n(le,"LI",{});var XRe=s(i7);o2e=n(XRe,"STRONG",{});var E7t=s(o2e);r_r=r(E7t,"funnel"),E7t.forEach(t),t_r=r(XRe," \u2014 "),yQ=n(XRe,"A",{href:!0});var C7t=s(yQ);a_r=r(C7t,"TFFunnelForPreTraining"),C7t.forEach(t),n_r=r(XRe," (Funnel Transformer model)"),XRe.forEach(t),s_r=i(le),d7=n(le,"LI",{});var zRe=s(d7);r2e=n(zRe,"STRONG",{});var w7t=s(r2e);l_r=r(w7t,"gpt2"),w7t.forEach(t),i_r=r(zRe," \u2014 "),LQ=n(zRe,"A",{href:!0});var A7t=s(LQ);d_r=r(A7t,"TFGPT2LMHeadModel"),A7t.forEach(t),c_r=r(zRe," (OpenAI GPT-2 model)"),zRe.forEach(t),f_r=i(le),c7=n(le,"LI",{});var WRe=s(c7);t2e=n(WRe,"STRONG",{});var y7t=s(t2e);m_r=r(y7t,"layoutlm"),y7t.forEach(t),g_r=r(WRe," \u2014 "),xQ=n(WRe,"A",{href:!0});var L7t=s(xQ);h_r=r(L7t,"TFLayoutLMForMaskedLM"),L7t.forEach(t),p_r=r(WRe," (LayoutLM model)"),WRe.forEach(t),__r=i(le),f7=n(le,"LI",{});var QRe=s(f7);a2e=n(QRe,"STRONG",{});var x7t=s(a2e);u_r=r(x7t,"lxmert"),x7t.forEach(t),b_r=r(QRe," \u2014 "),$Q=n(QRe,"A",{href:!0});var $7t=s($Q);v_r=r($7t,"TFLxmertForPreTraining"),$7t.forEach(t),F_r=r(QRe," (LXMERT model)"),QRe.forEach(t),T_r=i(le),m7=n(le,"LI",{});var HRe=s(m7);n2e=n(HRe,"STRONG",{});var k7t=s(n2e);M_r=r(k7t,"mobilebert"),k7t.forEach(t),E_r=r(HRe," \u2014 "),kQ=n(HRe,"A",{href:!0});var S7t=s(kQ);C_r=r(S7t,"TFMobileBertForPreTraining"),S7t.forEach(t),w_r=r(HRe," (MobileBERT model)"),HRe.forEach(t),A_r=i(le),g7=n(le,"LI",{});var URe=s(g7);s2e=n(URe,"STRONG",{});var R7t=s(s2e);y_r=r(R7t,"mpnet"),R7t.forEach(t),L_r=r(URe," \u2014 "),SQ=n(URe,"A",{href:!0});var P7t=s(SQ);x_r=r(P7t,"TFMPNetForMaskedLM"),P7t.forEach(t),$_r=r(URe," (MPNet model)"),URe.forEach(t),k_r=i(le),h7=n(le,"LI",{});var JRe=s(h7);l2e=n(JRe,"STRONG",{});var B7t=s(l2e);S_r=r(B7t,"openai-gpt"),B7t.forEach(t),R_r=r(JRe," \u2014 "),RQ=n(JRe,"A",{href:!0});var I7t=s(RQ);P_r=r(I7t,"TFOpenAIGPTLMHeadModel"),I7t.forEach(t),B_r=r(JRe," (OpenAI GPT model)"),JRe.forEach(t),I_r=i(le),p7=n(le,"LI",{});var YRe=s(p7);i2e=n(YRe,"STRONG",{});var N7t=s(i2e);N_r=r(N7t,"roberta"),N7t.forEach(t),q_r=r(YRe," \u2014 "),PQ=n(YRe,"A",{href:!0});var q7t=s(PQ);j_r=r(q7t,"TFRobertaForMaskedLM"),q7t.forEach(t),D_r=r(YRe," (RoBERTa model)"),YRe.forEach(t),G_r=i(le),_7=n(le,"LI",{});var KRe=s(_7);d2e=n(KRe,"STRONG",{});var j7t=s(d2e);O_r=r(j7t,"t5"),j7t.forEach(t),V_r=r(KRe," \u2014 "),BQ=n(KRe,"A",{href:!0});var D7t=s(BQ);X_r=r(D7t,"TFT5ForConditionalGeneration"),D7t.forEach(t),z_r=r(KRe," (T5 model)"),KRe.forEach(t),W_r=i(le),u7=n(le,"LI",{});var ZRe=s(u7);c2e=n(ZRe,"STRONG",{});var G7t=s(c2e);Q_r=r(G7t,"tapas"),G7t.forEach(t),H_r=r(ZRe," \u2014 "),IQ=n(ZRe,"A",{href:!0});var O7t=s(IQ);U_r=r(O7t,"TFTapasForMaskedLM"),O7t.forEach(t),J_r=r(ZRe," (TAPAS model)"),ZRe.forEach(t),Y_r=i(le),b7=n(le,"LI",{});var ePe=s(b7);f2e=n(ePe,"STRONG",{});var V7t=s(f2e);K_r=r(V7t,"transfo-xl"),V7t.forEach(t),Z_r=r(ePe," \u2014 "),NQ=n(ePe,"A",{href:!0});var X7t=s(NQ);eur=r(X7t,"TFTransfoXLLMHeadModel"),X7t.forEach(t),our=r(ePe," (Transformer-XL model)"),ePe.forEach(t),rur=i(le),v7=n(le,"LI",{});var oPe=s(v7);m2e=n(oPe,"STRONG",{});var z7t=s(m2e);tur=r(z7t,"vit_mae"),z7t.forEach(t),aur=r(oPe," \u2014 "),qQ=n(oPe,"A",{href:!0});var W7t=s(qQ);nur=r(W7t,"TFViTMAEForPreTraining"),W7t.forEach(t),sur=r(oPe," (ViTMAE model)"),oPe.forEach(t),lur=i(le),F7=n(le,"LI",{});var rPe=s(F7);g2e=n(rPe,"STRONG",{});var Q7t=s(g2e);iur=r(Q7t,"xlm"),Q7t.forEach(t),dur=r(rPe," \u2014 "),jQ=n(rPe,"A",{href:!0});var H7t=s(jQ);cur=r(H7t,"TFXLMWithLMHeadModel"),H7t.forEach(t),fur=r(rPe," (XLM model)"),rPe.forEach(t),mur=i(le),T7=n(le,"LI",{});var tPe=s(T7);h2e=n(tPe,"STRONG",{});var U7t=s(h2e);gur=r(U7t,"xlm-roberta"),U7t.forEach(t),hur=r(tPe," \u2014 "),DQ=n(tPe,"A",{href:!0});var J7t=s(DQ);pur=r(J7t,"TFXLMRobertaForMaskedLM"),J7t.forEach(t),_ur=r(tPe," (XLM-RoBERTa model)"),tPe.forEach(t),uur=i(le),M7=n(le,"LI",{});var aPe=s(M7);p2e=n(aPe,"STRONG",{});var Y7t=s(p2e);bur=r(Y7t,"xlnet"),Y7t.forEach(t),vur=r(aPe," \u2014 "),GQ=n(aPe,"A",{href:!0});var K7t=s(GQ);Fur=r(K7t,"TFXLNetLMHeadModel"),K7t.forEach(t),Tur=r(aPe," (XLNet model)"),aPe.forEach(t),le.forEach(t),Mur=i(ul),T(E7.$$.fragment,ul),ul.forEach(t),_l.forEach(t),Dje=i(f),Hd=n(f,"H2",{class:!0});var WGe=s(Hd);C7=n(WGe,"A",{id:!0,class:!0,href:!0});var Z7t=s(C7);_2e=n(Z7t,"SPAN",{});var eMt=s(_2e);T(A8.$$.fragment,eMt),eMt.forEach(t),Z7t.forEach(t),Eur=i(WGe),u2e=n(WGe,"SPAN",{});var oMt=s(u2e);Cur=r(oMt,"TFAutoModelForCausalLM"),oMt.forEach(t),WGe.forEach(t),Gje=i(f),Zo=n(f,"DIV",{class:!0});var bl=s(Zo);T(y8.$$.fragment,bl),wur=i(bl),Ud=n(bl,"P",{});var $ee=s(Ud);Aur=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OQ=n($ee,"A",{href:!0});var rMt=s(OQ);yur=r(rMt,"from_pretrained()"),rMt.forEach(t),Lur=r($ee," class method or the "),VQ=n($ee,"A",{href:!0});var tMt=s(VQ);xur=r(tMt,"from_config()"),tMt.forEach(t),$ur=r($ee,` class
method.`),$ee.forEach(t),kur=i(bl),L8=n(bl,"P",{});var QGe=s(L8);Sur=r(QGe,"This class cannot be instantiated directly using "),b2e=n(QGe,"CODE",{});var aMt=s(b2e);Rur=r(aMt,"__init__()"),aMt.forEach(t),Pur=r(QGe," (throws an error)."),QGe.forEach(t),Bur=i(bl),xt=n(bl,"DIV",{class:!0});var I6=s(xt);T(x8.$$.fragment,I6),Iur=i(I6),v2e=n(I6,"P",{});var nMt=s(v2e);Nur=r(nMt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nMt.forEach(t),qur=i(I6),Jd=n(I6,"P",{});var kee=s(Jd);jur=r(kee,`Note:
Loading a model from its configuration file does `),F2e=n(kee,"STRONG",{});var sMt=s(F2e);Dur=r(sMt,"not"),sMt.forEach(t),Gur=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(kee,"A",{href:!0});var lMt=s(XQ);Our=r(lMt,"from_pretrained()"),lMt.forEach(t),Vur=r(kee," to load the model weights."),kee.forEach(t),Xur=i(I6),T(w7.$$.fragment,I6),I6.forEach(t),zur=i(bl),yr=n(bl,"DIV",{class:!0});var vl=s(yr);T($8.$$.fragment,vl),Wur=i(vl),T2e=n(vl,"P",{});var iMt=s(T2e);Qur=r(iMt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iMt.forEach(t),Hur=i(vl),en=n(vl,"P",{});var N6=s(en);Uur=r(N6,"The model class to instantiate is selected based on the "),M2e=n(N6,"CODE",{});var dMt=s(M2e);Jur=r(dMt,"model_type"),dMt.forEach(t),Yur=r(N6,` property of the config object (either
passed as an argument or loaded from `),E2e=n(N6,"CODE",{});var cMt=s(E2e);Kur=r(cMt,"pretrained_model_name_or_path"),cMt.forEach(t),Zur=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=n(N6,"CODE",{});var fMt=s(C2e);e4r=r(fMt,"pretrained_model_name_or_path"),fMt.forEach(t),o4r=r(N6,":"),N6.forEach(t),r4r=i(vl),Te=n(vl,"UL",{});var Ce=s(Te);A7=n(Ce,"LI",{});var nPe=s(A7);w2e=n(nPe,"STRONG",{});var mMt=s(w2e);t4r=r(mMt,"bert"),mMt.forEach(t),a4r=r(nPe," \u2014 "),zQ=n(nPe,"A",{href:!0});var gMt=s(zQ);n4r=r(gMt,"TFBertLMHeadModel"),gMt.forEach(t),s4r=r(nPe," (BERT model)"),nPe.forEach(t),l4r=i(Ce),y7=n(Ce,"LI",{});var sPe=s(y7);A2e=n(sPe,"STRONG",{});var hMt=s(A2e);i4r=r(hMt,"camembert"),hMt.forEach(t),d4r=r(sPe," \u2014 "),WQ=n(sPe,"A",{href:!0});var pMt=s(WQ);c4r=r(pMt,"TFCamembertForCausalLM"),pMt.forEach(t),f4r=r(sPe," (CamemBERT model)"),sPe.forEach(t),m4r=i(Ce),L7=n(Ce,"LI",{});var lPe=s(L7);y2e=n(lPe,"STRONG",{});var _Mt=s(y2e);g4r=r(_Mt,"ctrl"),_Mt.forEach(t),h4r=r(lPe," \u2014 "),QQ=n(lPe,"A",{href:!0});var uMt=s(QQ);p4r=r(uMt,"TFCTRLLMHeadModel"),uMt.forEach(t),_4r=r(lPe," (CTRL model)"),lPe.forEach(t),u4r=i(Ce),x7=n(Ce,"LI",{});var iPe=s(x7);L2e=n(iPe,"STRONG",{});var bMt=s(L2e);b4r=r(bMt,"gpt2"),bMt.forEach(t),v4r=r(iPe," \u2014 "),HQ=n(iPe,"A",{href:!0});var vMt=s(HQ);F4r=r(vMt,"TFGPT2LMHeadModel"),vMt.forEach(t),T4r=r(iPe," (OpenAI GPT-2 model)"),iPe.forEach(t),M4r=i(Ce),$7=n(Ce,"LI",{});var dPe=s($7);x2e=n(dPe,"STRONG",{});var FMt=s(x2e);E4r=r(FMt,"gptj"),FMt.forEach(t),C4r=r(dPe," \u2014 "),UQ=n(dPe,"A",{href:!0});var TMt=s(UQ);w4r=r(TMt,"TFGPTJForCausalLM"),TMt.forEach(t),A4r=r(dPe," (GPT-J model)"),dPe.forEach(t),y4r=i(Ce),k7=n(Ce,"LI",{});var cPe=s(k7);$2e=n(cPe,"STRONG",{});var MMt=s($2e);L4r=r(MMt,"openai-gpt"),MMt.forEach(t),x4r=r(cPe," \u2014 "),JQ=n(cPe,"A",{href:!0});var EMt=s(JQ);$4r=r(EMt,"TFOpenAIGPTLMHeadModel"),EMt.forEach(t),k4r=r(cPe," (OpenAI GPT model)"),cPe.forEach(t),S4r=i(Ce),S7=n(Ce,"LI",{});var fPe=s(S7);k2e=n(fPe,"STRONG",{});var CMt=s(k2e);R4r=r(CMt,"opt"),CMt.forEach(t),P4r=r(fPe," \u2014 "),YQ=n(fPe,"A",{href:!0});var wMt=s(YQ);B4r=r(wMt,"TFOPTForCausalLM"),wMt.forEach(t),I4r=r(fPe," (OPT model)"),fPe.forEach(t),N4r=i(Ce),R7=n(Ce,"LI",{});var mPe=s(R7);S2e=n(mPe,"STRONG",{});var AMt=s(S2e);q4r=r(AMt,"rembert"),AMt.forEach(t),j4r=r(mPe," \u2014 "),KQ=n(mPe,"A",{href:!0});var yMt=s(KQ);D4r=r(yMt,"TFRemBertForCausalLM"),yMt.forEach(t),G4r=r(mPe," (RemBERT model)"),mPe.forEach(t),O4r=i(Ce),P7=n(Ce,"LI",{});var gPe=s(P7);R2e=n(gPe,"STRONG",{});var LMt=s(R2e);V4r=r(LMt,"roberta"),LMt.forEach(t),X4r=r(gPe," \u2014 "),ZQ=n(gPe,"A",{href:!0});var xMt=s(ZQ);z4r=r(xMt,"TFRobertaForCausalLM"),xMt.forEach(t),W4r=r(gPe," (RoBERTa model)"),gPe.forEach(t),Q4r=i(Ce),B7=n(Ce,"LI",{});var hPe=s(B7);P2e=n(hPe,"STRONG",{});var $Mt=s(P2e);H4r=r($Mt,"roformer"),$Mt.forEach(t),U4r=r(hPe," \u2014 "),eH=n(hPe,"A",{href:!0});var kMt=s(eH);J4r=r(kMt,"TFRoFormerForCausalLM"),kMt.forEach(t),Y4r=r(hPe," (RoFormer model)"),hPe.forEach(t),K4r=i(Ce),I7=n(Ce,"LI",{});var pPe=s(I7);B2e=n(pPe,"STRONG",{});var SMt=s(B2e);Z4r=r(SMt,"transfo-xl"),SMt.forEach(t),e1r=r(pPe," \u2014 "),oH=n(pPe,"A",{href:!0});var RMt=s(oH);o1r=r(RMt,"TFTransfoXLLMHeadModel"),RMt.forEach(t),r1r=r(pPe," (Transformer-XL model)"),pPe.forEach(t),t1r=i(Ce),N7=n(Ce,"LI",{});var _Pe=s(N7);I2e=n(_Pe,"STRONG",{});var PMt=s(I2e);a1r=r(PMt,"xlm"),PMt.forEach(t),n1r=r(_Pe," \u2014 "),rH=n(_Pe,"A",{href:!0});var BMt=s(rH);s1r=r(BMt,"TFXLMWithLMHeadModel"),BMt.forEach(t),l1r=r(_Pe," (XLM model)"),_Pe.forEach(t),i1r=i(Ce),q7=n(Ce,"LI",{});var uPe=s(q7);N2e=n(uPe,"STRONG",{});var IMt=s(N2e);d1r=r(IMt,"xlnet"),IMt.forEach(t),c1r=r(uPe," \u2014 "),tH=n(uPe,"A",{href:!0});var NMt=s(tH);f1r=r(NMt,"TFXLNetLMHeadModel"),NMt.forEach(t),m1r=r(uPe," (XLNet model)"),uPe.forEach(t),Ce.forEach(t),g1r=i(vl),T(j7.$$.fragment,vl),vl.forEach(t),bl.forEach(t),Oje=i(f),Yd=n(f,"H2",{class:!0});var HGe=s(Yd);D7=n(HGe,"A",{id:!0,class:!0,href:!0});var qMt=s(D7);q2e=n(qMt,"SPAN",{});var jMt=s(q2e);T(k8.$$.fragment,jMt),jMt.forEach(t),qMt.forEach(t),h1r=i(HGe),j2e=n(HGe,"SPAN",{});var DMt=s(j2e);p1r=r(DMt,"TFAutoModelForImageClassification"),DMt.forEach(t),HGe.forEach(t),Vje=i(f),er=n(f,"DIV",{class:!0});var Fl=s(er);T(S8.$$.fragment,Fl),_1r=i(Fl),Kd=n(Fl,"P",{});var See=s(Kd);u1r=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aH=n(See,"A",{href:!0});var GMt=s(aH);b1r=r(GMt,"from_pretrained()"),GMt.forEach(t),v1r=r(See," class method or the "),nH=n(See,"A",{href:!0});var OMt=s(nH);F1r=r(OMt,"from_config()"),OMt.forEach(t),T1r=r(See,` class
method.`),See.forEach(t),M1r=i(Fl),R8=n(Fl,"P",{});var UGe=s(R8);E1r=r(UGe,"This class cannot be instantiated directly using "),D2e=n(UGe,"CODE",{});var VMt=s(D2e);C1r=r(VMt,"__init__()"),VMt.forEach(t),w1r=r(UGe," (throws an error)."),UGe.forEach(t),A1r=i(Fl),$t=n(Fl,"DIV",{class:!0});var q6=s($t);T(P8.$$.fragment,q6),y1r=i(q6),G2e=n(q6,"P",{});var XMt=s(G2e);L1r=r(XMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),XMt.forEach(t),x1r=i(q6),Zd=n(q6,"P",{});var Ree=s(Zd);$1r=r(Ree,`Note:
Loading a model from its configuration file does `),O2e=n(Ree,"STRONG",{});var zMt=s(O2e);k1r=r(zMt,"not"),zMt.forEach(t),S1r=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n(Ree,"A",{href:!0});var WMt=s(sH);R1r=r(WMt,"from_pretrained()"),WMt.forEach(t),P1r=r(Ree," to load the model weights."),Ree.forEach(t),B1r=i(q6),T(G7.$$.fragment,q6),q6.forEach(t),I1r=i(Fl),Lr=n(Fl,"DIV",{class:!0});var Tl=s(Lr);T(B8.$$.fragment,Tl),N1r=i(Tl),V2e=n(Tl,"P",{});var QMt=s(V2e);q1r=r(QMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QMt.forEach(t),j1r=i(Tl),on=n(Tl,"P",{});var j6=s(on);D1r=r(j6,"The model class to instantiate is selected based on the "),X2e=n(j6,"CODE",{});var HMt=s(X2e);G1r=r(HMt,"model_type"),HMt.forEach(t),O1r=r(j6,` property of the config object (either
passed as an argument or loaded from `),z2e=n(j6,"CODE",{});var UMt=s(z2e);V1r=r(UMt,"pretrained_model_name_or_path"),UMt.forEach(t),X1r=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=n(j6,"CODE",{});var JMt=s(W2e);z1r=r(JMt,"pretrained_model_name_or_path"),JMt.forEach(t),W1r=r(j6,":"),j6.forEach(t),Q1r=i(Tl),rn=n(Tl,"UL",{});var D6=s(rn);O7=n(D6,"LI",{});var bPe=s(O7);Q2e=n(bPe,"STRONG",{});var YMt=s(Q2e);H1r=r(YMt,"convnext"),YMt.forEach(t),U1r=r(bPe," \u2014 "),lH=n(bPe,"A",{href:!0});var KMt=s(lH);J1r=r(KMt,"TFConvNextForImageClassification"),KMt.forEach(t),Y1r=r(bPe," (ConvNext model)"),bPe.forEach(t),K1r=i(D6),V7=n(D6,"LI",{});var vPe=s(V7);H2e=n(vPe,"STRONG",{});var ZMt=s(H2e);Z1r=r(ZMt,"data2vec-vision"),ZMt.forEach(t),ebr=r(vPe," \u2014 "),iH=n(vPe,"A",{href:!0});var eEt=s(iH);obr=r(eEt,"TFData2VecVisionForImageClassification"),eEt.forEach(t),rbr=r(vPe," (Data2VecVision model)"),vPe.forEach(t),tbr=i(D6),X7=n(D6,"LI",{});var FPe=s(X7);U2e=n(FPe,"STRONG",{});var oEt=s(U2e);abr=r(oEt,"swin"),oEt.forEach(t),nbr=r(FPe," \u2014 "),dH=n(FPe,"A",{href:!0});var rEt=s(dH);sbr=r(rEt,"TFSwinForImageClassification"),rEt.forEach(t),lbr=r(FPe," (Swin model)"),FPe.forEach(t),ibr=i(D6),z7=n(D6,"LI",{});var TPe=s(z7);J2e=n(TPe,"STRONG",{});var tEt=s(J2e);dbr=r(tEt,"vit"),tEt.forEach(t),cbr=r(TPe," \u2014 "),cH=n(TPe,"A",{href:!0});var aEt=s(cH);fbr=r(aEt,"TFViTForImageClassification"),aEt.forEach(t),mbr=r(TPe," (ViT model)"),TPe.forEach(t),D6.forEach(t),gbr=i(Tl),T(W7.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),Xje=i(f),ec=n(f,"H2",{class:!0});var JGe=s(ec);Q7=n(JGe,"A",{id:!0,class:!0,href:!0});var nEt=s(Q7);Y2e=n(nEt,"SPAN",{});var sEt=s(Y2e);T(I8.$$.fragment,sEt),sEt.forEach(t),nEt.forEach(t),hbr=i(JGe),K2e=n(JGe,"SPAN",{});var lEt=s(K2e);pbr=r(lEt,"TFAutoModelForMaskedLM"),lEt.forEach(t),JGe.forEach(t),zje=i(f),or=n(f,"DIV",{class:!0});var Ml=s(or);T(N8.$$.fragment,Ml),_br=i(Ml),oc=n(Ml,"P",{});var Pee=s(oc);ubr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fH=n(Pee,"A",{href:!0});var iEt=s(fH);bbr=r(iEt,"from_pretrained()"),iEt.forEach(t),vbr=r(Pee," class method or the "),mH=n(Pee,"A",{href:!0});var dEt=s(mH);Fbr=r(dEt,"from_config()"),dEt.forEach(t),Tbr=r(Pee,` class
method.`),Pee.forEach(t),Mbr=i(Ml),q8=n(Ml,"P",{});var YGe=s(q8);Ebr=r(YGe,"This class cannot be instantiated directly using "),Z2e=n(YGe,"CODE",{});var cEt=s(Z2e);Cbr=r(cEt,"__init__()"),cEt.forEach(t),wbr=r(YGe," (throws an error)."),YGe.forEach(t),Abr=i(Ml),kt=n(Ml,"DIV",{class:!0});var G6=s(kt);T(j8.$$.fragment,G6),ybr=i(G6),eve=n(G6,"P",{});var fEt=s(eve);Lbr=r(fEt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),fEt.forEach(t),xbr=i(G6),rc=n(G6,"P",{});var Bee=s(rc);$br=r(Bee,`Note:
Loading a model from its configuration file does `),ove=n(Bee,"STRONG",{});var mEt=s(ove);kbr=r(mEt,"not"),mEt.forEach(t),Sbr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=n(Bee,"A",{href:!0});var gEt=s(gH);Rbr=r(gEt,"from_pretrained()"),gEt.forEach(t),Pbr=r(Bee," to load the model weights."),Bee.forEach(t),Bbr=i(G6),T(H7.$$.fragment,G6),G6.forEach(t),Ibr=i(Ml),xr=n(Ml,"DIV",{class:!0});var El=s(xr);T(D8.$$.fragment,El),Nbr=i(El),rve=n(El,"P",{});var hEt=s(rve);qbr=r(hEt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),hEt.forEach(t),jbr=i(El),tn=n(El,"P",{});var O6=s(tn);Dbr=r(O6,"The model class to instantiate is selected based on the "),tve=n(O6,"CODE",{});var pEt=s(tve);Gbr=r(pEt,"model_type"),pEt.forEach(t),Obr=r(O6,` property of the config object (either
passed as an argument or loaded from `),ave=n(O6,"CODE",{});var _Et=s(ave);Vbr=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),Xbr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=n(O6,"CODE",{});var uEt=s(nve);zbr=r(uEt,"pretrained_model_name_or_path"),uEt.forEach(t),Wbr=r(O6,":"),O6.forEach(t),Qbr=i(El),ie=n(El,"UL",{});var fe=s(ie);U7=n(fe,"LI",{});var MPe=s(U7);sve=n(MPe,"STRONG",{});var bEt=s(sve);Hbr=r(bEt,"albert"),bEt.forEach(t),Ubr=r(MPe," \u2014 "),hH=n(MPe,"A",{href:!0});var vEt=s(hH);Jbr=r(vEt,"TFAlbertForMaskedLM"),vEt.forEach(t),Ybr=r(MPe," (ALBERT model)"),MPe.forEach(t),Kbr=i(fe),J7=n(fe,"LI",{});var EPe=s(J7);lve=n(EPe,"STRONG",{});var FEt=s(lve);Zbr=r(FEt,"bert"),FEt.forEach(t),e2r=r(EPe," \u2014 "),pH=n(EPe,"A",{href:!0});var TEt=s(pH);o2r=r(TEt,"TFBertForMaskedLM"),TEt.forEach(t),r2r=r(EPe," (BERT model)"),EPe.forEach(t),t2r=i(fe),Y7=n(fe,"LI",{});var CPe=s(Y7);ive=n(CPe,"STRONG",{});var MEt=s(ive);a2r=r(MEt,"camembert"),MEt.forEach(t),n2r=r(CPe," \u2014 "),_H=n(CPe,"A",{href:!0});var EEt=s(_H);s2r=r(EEt,"TFCamembertForMaskedLM"),EEt.forEach(t),l2r=r(CPe," (CamemBERT model)"),CPe.forEach(t),i2r=i(fe),K7=n(fe,"LI",{});var wPe=s(K7);dve=n(wPe,"STRONG",{});var CEt=s(dve);d2r=r(CEt,"convbert"),CEt.forEach(t),c2r=r(wPe," \u2014 "),uH=n(wPe,"A",{href:!0});var wEt=s(uH);f2r=r(wEt,"TFConvBertForMaskedLM"),wEt.forEach(t),m2r=r(wPe," (ConvBERT model)"),wPe.forEach(t),g2r=i(fe),Z7=n(fe,"LI",{});var APe=s(Z7);cve=n(APe,"STRONG",{});var AEt=s(cve);h2r=r(AEt,"deberta"),AEt.forEach(t),p2r=r(APe," \u2014 "),bH=n(APe,"A",{href:!0});var yEt=s(bH);_2r=r(yEt,"TFDebertaForMaskedLM"),yEt.forEach(t),u2r=r(APe," (DeBERTa model)"),APe.forEach(t),b2r=i(fe),eM=n(fe,"LI",{});var yPe=s(eM);fve=n(yPe,"STRONG",{});var LEt=s(fve);v2r=r(LEt,"deberta-v2"),LEt.forEach(t),F2r=r(yPe," \u2014 "),vH=n(yPe,"A",{href:!0});var xEt=s(vH);T2r=r(xEt,"TFDebertaV2ForMaskedLM"),xEt.forEach(t),M2r=r(yPe," (DeBERTa-v2 model)"),yPe.forEach(t),E2r=i(fe),oM=n(fe,"LI",{});var LPe=s(oM);mve=n(LPe,"STRONG",{});var $Et=s(mve);C2r=r($Et,"distilbert"),$Et.forEach(t),w2r=r(LPe," \u2014 "),FH=n(LPe,"A",{href:!0});var kEt=s(FH);A2r=r(kEt,"TFDistilBertForMaskedLM"),kEt.forEach(t),y2r=r(LPe," (DistilBERT model)"),LPe.forEach(t),L2r=i(fe),rM=n(fe,"LI",{});var xPe=s(rM);gve=n(xPe,"STRONG",{});var SEt=s(gve);x2r=r(SEt,"electra"),SEt.forEach(t),$2r=r(xPe," \u2014 "),TH=n(xPe,"A",{href:!0});var REt=s(TH);k2r=r(REt,"TFElectraForMaskedLM"),REt.forEach(t),S2r=r(xPe," (ELECTRA model)"),xPe.forEach(t),R2r=i(fe),tM=n(fe,"LI",{});var $Pe=s(tM);hve=n($Pe,"STRONG",{});var PEt=s(hve);P2r=r(PEt,"flaubert"),PEt.forEach(t),B2r=r($Pe," \u2014 "),MH=n($Pe,"A",{href:!0});var BEt=s(MH);I2r=r(BEt,"TFFlaubertWithLMHeadModel"),BEt.forEach(t),N2r=r($Pe," (FlauBERT model)"),$Pe.forEach(t),q2r=i(fe),aM=n(fe,"LI",{});var kPe=s(aM);pve=n(kPe,"STRONG",{});var IEt=s(pve);j2r=r(IEt,"funnel"),IEt.forEach(t),D2r=r(kPe," \u2014 "),EH=n(kPe,"A",{href:!0});var NEt=s(EH);G2r=r(NEt,"TFFunnelForMaskedLM"),NEt.forEach(t),O2r=r(kPe," (Funnel Transformer model)"),kPe.forEach(t),V2r=i(fe),nM=n(fe,"LI",{});var SPe=s(nM);_ve=n(SPe,"STRONG",{});var qEt=s(_ve);X2r=r(qEt,"layoutlm"),qEt.forEach(t),z2r=r(SPe," \u2014 "),CH=n(SPe,"A",{href:!0});var jEt=s(CH);W2r=r(jEt,"TFLayoutLMForMaskedLM"),jEt.forEach(t),Q2r=r(SPe," (LayoutLM model)"),SPe.forEach(t),H2r=i(fe),sM=n(fe,"LI",{});var RPe=s(sM);uve=n(RPe,"STRONG",{});var DEt=s(uve);U2r=r(DEt,"longformer"),DEt.forEach(t),J2r=r(RPe," \u2014 "),wH=n(RPe,"A",{href:!0});var GEt=s(wH);Y2r=r(GEt,"TFLongformerForMaskedLM"),GEt.forEach(t),K2r=r(RPe," (Longformer model)"),RPe.forEach(t),Z2r=i(fe),lM=n(fe,"LI",{});var PPe=s(lM);bve=n(PPe,"STRONG",{});var OEt=s(bve);evr=r(OEt,"mobilebert"),OEt.forEach(t),ovr=r(PPe," \u2014 "),AH=n(PPe,"A",{href:!0});var VEt=s(AH);rvr=r(VEt,"TFMobileBertForMaskedLM"),VEt.forEach(t),tvr=r(PPe," (MobileBERT model)"),PPe.forEach(t),avr=i(fe),iM=n(fe,"LI",{});var BPe=s(iM);vve=n(BPe,"STRONG",{});var XEt=s(vve);nvr=r(XEt,"mpnet"),XEt.forEach(t),svr=r(BPe," \u2014 "),yH=n(BPe,"A",{href:!0});var zEt=s(yH);lvr=r(zEt,"TFMPNetForMaskedLM"),zEt.forEach(t),ivr=r(BPe," (MPNet model)"),BPe.forEach(t),dvr=i(fe),dM=n(fe,"LI",{});var IPe=s(dM);Fve=n(IPe,"STRONG",{});var WEt=s(Fve);cvr=r(WEt,"rembert"),WEt.forEach(t),fvr=r(IPe," \u2014 "),LH=n(IPe,"A",{href:!0});var QEt=s(LH);mvr=r(QEt,"TFRemBertForMaskedLM"),QEt.forEach(t),gvr=r(IPe," (RemBERT model)"),IPe.forEach(t),hvr=i(fe),cM=n(fe,"LI",{});var NPe=s(cM);Tve=n(NPe,"STRONG",{});var HEt=s(Tve);pvr=r(HEt,"roberta"),HEt.forEach(t),_vr=r(NPe," \u2014 "),xH=n(NPe,"A",{href:!0});var UEt=s(xH);uvr=r(UEt,"TFRobertaForMaskedLM"),UEt.forEach(t),bvr=r(NPe," (RoBERTa model)"),NPe.forEach(t),vvr=i(fe),fM=n(fe,"LI",{});var qPe=s(fM);Mve=n(qPe,"STRONG",{});var JEt=s(Mve);Fvr=r(JEt,"roformer"),JEt.forEach(t),Tvr=r(qPe," \u2014 "),$H=n(qPe,"A",{href:!0});var YEt=s($H);Mvr=r(YEt,"TFRoFormerForMaskedLM"),YEt.forEach(t),Evr=r(qPe," (RoFormer model)"),qPe.forEach(t),Cvr=i(fe),mM=n(fe,"LI",{});var jPe=s(mM);Eve=n(jPe,"STRONG",{});var KEt=s(Eve);wvr=r(KEt,"tapas"),KEt.forEach(t),Avr=r(jPe," \u2014 "),kH=n(jPe,"A",{href:!0});var ZEt=s(kH);yvr=r(ZEt,"TFTapasForMaskedLM"),ZEt.forEach(t),Lvr=r(jPe," (TAPAS model)"),jPe.forEach(t),xvr=i(fe),gM=n(fe,"LI",{});var DPe=s(gM);Cve=n(DPe,"STRONG",{});var eCt=s(Cve);$vr=r(eCt,"xlm"),eCt.forEach(t),kvr=r(DPe," \u2014 "),SH=n(DPe,"A",{href:!0});var oCt=s(SH);Svr=r(oCt,"TFXLMWithLMHeadModel"),oCt.forEach(t),Rvr=r(DPe," (XLM model)"),DPe.forEach(t),Pvr=i(fe),hM=n(fe,"LI",{});var GPe=s(hM);wve=n(GPe,"STRONG",{});var rCt=s(wve);Bvr=r(rCt,"xlm-roberta"),rCt.forEach(t),Ivr=r(GPe," \u2014 "),RH=n(GPe,"A",{href:!0});var tCt=s(RH);Nvr=r(tCt,"TFXLMRobertaForMaskedLM"),tCt.forEach(t),qvr=r(GPe," (XLM-RoBERTa model)"),GPe.forEach(t),fe.forEach(t),jvr=i(El),T(pM.$$.fragment,El),El.forEach(t),Ml.forEach(t),Wje=i(f),tc=n(f,"H2",{class:!0});var KGe=s(tc);_M=n(KGe,"A",{id:!0,class:!0,href:!0});var aCt=s(_M);Ave=n(aCt,"SPAN",{});var nCt=s(Ave);T(G8.$$.fragment,nCt),nCt.forEach(t),aCt.forEach(t),Dvr=i(KGe),yve=n(KGe,"SPAN",{});var sCt=s(yve);Gvr=r(sCt,"TFAutoModelForSeq2SeqLM"),sCt.forEach(t),KGe.forEach(t),Qje=i(f),rr=n(f,"DIV",{class:!0});var Cl=s(rr);T(O8.$$.fragment,Cl),Ovr=i(Cl),ac=n(Cl,"P",{});var Iee=s(ac);Vvr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PH=n(Iee,"A",{href:!0});var lCt=s(PH);Xvr=r(lCt,"from_pretrained()"),lCt.forEach(t),zvr=r(Iee," class method or the "),BH=n(Iee,"A",{href:!0});var iCt=s(BH);Wvr=r(iCt,"from_config()"),iCt.forEach(t),Qvr=r(Iee,` class
method.`),Iee.forEach(t),Hvr=i(Cl),V8=n(Cl,"P",{});var ZGe=s(V8);Uvr=r(ZGe,"This class cannot be instantiated directly using "),Lve=n(ZGe,"CODE",{});var dCt=s(Lve);Jvr=r(dCt,"__init__()"),dCt.forEach(t),Yvr=r(ZGe," (throws an error)."),ZGe.forEach(t),Kvr=i(Cl),St=n(Cl,"DIV",{class:!0});var V6=s(St);T(X8.$$.fragment,V6),Zvr=i(V6),xve=n(V6,"P",{});var cCt=s(xve);e3r=r(cCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),cCt.forEach(t),o3r=i(V6),nc=n(V6,"P",{});var Nee=s(nc);r3r=r(Nee,`Note:
Loading a model from its configuration file does `),$ve=n(Nee,"STRONG",{});var fCt=s($ve);t3r=r(fCt,"not"),fCt.forEach(t),a3r=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(Nee,"A",{href:!0});var mCt=s(IH);n3r=r(mCt,"from_pretrained()"),mCt.forEach(t),s3r=r(Nee," to load the model weights."),Nee.forEach(t),l3r=i(V6),T(uM.$$.fragment,V6),V6.forEach(t),i3r=i(Cl),$r=n(Cl,"DIV",{class:!0});var wl=s($r);T(z8.$$.fragment,wl),d3r=i(wl),kve=n(wl,"P",{});var gCt=s(kve);c3r=r(gCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gCt.forEach(t),f3r=i(wl),an=n(wl,"P",{});var X6=s(an);m3r=r(X6,"The model class to instantiate is selected based on the "),Sve=n(X6,"CODE",{});var hCt=s(Sve);g3r=r(hCt,"model_type"),hCt.forEach(t),h3r=r(X6,` property of the config object (either
passed as an argument or loaded from `),Rve=n(X6,"CODE",{});var pCt=s(Rve);p3r=r(pCt,"pretrained_model_name_or_path"),pCt.forEach(t),_3r=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pve=n(X6,"CODE",{});var _Ct=s(Pve);u3r=r(_Ct,"pretrained_model_name_or_path"),_Ct.forEach(t),b3r=r(X6,":"),X6.forEach(t),v3r=i(wl),ye=n(wl,"UL",{});var Be=s(ye);bM=n(Be,"LI",{});var OPe=s(bM);Bve=n(OPe,"STRONG",{});var uCt=s(Bve);F3r=r(uCt,"bart"),uCt.forEach(t),T3r=r(OPe," \u2014 "),NH=n(OPe,"A",{href:!0});var bCt=s(NH);M3r=r(bCt,"TFBartForConditionalGeneration"),bCt.forEach(t),E3r=r(OPe," (BART model)"),OPe.forEach(t),C3r=i(Be),vM=n(Be,"LI",{});var VPe=s(vM);Ive=n(VPe,"STRONG",{});var vCt=s(Ive);w3r=r(vCt,"blenderbot"),vCt.forEach(t),A3r=r(VPe," \u2014 "),qH=n(VPe,"A",{href:!0});var FCt=s(qH);y3r=r(FCt,"TFBlenderbotForConditionalGeneration"),FCt.forEach(t),L3r=r(VPe," (Blenderbot model)"),VPe.forEach(t),x3r=i(Be),FM=n(Be,"LI",{});var XPe=s(FM);Nve=n(XPe,"STRONG",{});var TCt=s(Nve);$3r=r(TCt,"blenderbot-small"),TCt.forEach(t),k3r=r(XPe," \u2014 "),jH=n(XPe,"A",{href:!0});var MCt=s(jH);S3r=r(MCt,"TFBlenderbotSmallForConditionalGeneration"),MCt.forEach(t),R3r=r(XPe," (BlenderbotSmall model)"),XPe.forEach(t),P3r=i(Be),TM=n(Be,"LI",{});var zPe=s(TM);qve=n(zPe,"STRONG",{});var ECt=s(qve);B3r=r(ECt,"encoder-decoder"),ECt.forEach(t),I3r=r(zPe," \u2014 "),DH=n(zPe,"A",{href:!0});var CCt=s(DH);N3r=r(CCt,"TFEncoderDecoderModel"),CCt.forEach(t),q3r=r(zPe," (Encoder decoder model)"),zPe.forEach(t),j3r=i(Be),MM=n(Be,"LI",{});var WPe=s(MM);jve=n(WPe,"STRONG",{});var wCt=s(jve);D3r=r(wCt,"led"),wCt.forEach(t),G3r=r(WPe," \u2014 "),GH=n(WPe,"A",{href:!0});var ACt=s(GH);O3r=r(ACt,"TFLEDForConditionalGeneration"),ACt.forEach(t),V3r=r(WPe," (LED model)"),WPe.forEach(t),X3r=i(Be),EM=n(Be,"LI",{});var QPe=s(EM);Dve=n(QPe,"STRONG",{});var yCt=s(Dve);z3r=r(yCt,"marian"),yCt.forEach(t),W3r=r(QPe," \u2014 "),OH=n(QPe,"A",{href:!0});var LCt=s(OH);Q3r=r(LCt,"TFMarianMTModel"),LCt.forEach(t),H3r=r(QPe," (Marian model)"),QPe.forEach(t),U3r=i(Be),CM=n(Be,"LI",{});var HPe=s(CM);Gve=n(HPe,"STRONG",{});var xCt=s(Gve);J3r=r(xCt,"mbart"),xCt.forEach(t),Y3r=r(HPe," \u2014 "),VH=n(HPe,"A",{href:!0});var $Ct=s(VH);K3r=r($Ct,"TFMBartForConditionalGeneration"),$Ct.forEach(t),Z3r=r(HPe," (mBART model)"),HPe.forEach(t),eFr=i(Be),wM=n(Be,"LI",{});var UPe=s(wM);Ove=n(UPe,"STRONG",{});var kCt=s(Ove);oFr=r(kCt,"mt5"),kCt.forEach(t),rFr=r(UPe," \u2014 "),XH=n(UPe,"A",{href:!0});var SCt=s(XH);tFr=r(SCt,"TFMT5ForConditionalGeneration"),SCt.forEach(t),aFr=r(UPe," (mT5 model)"),UPe.forEach(t),nFr=i(Be),AM=n(Be,"LI",{});var JPe=s(AM);Vve=n(JPe,"STRONG",{});var RCt=s(Vve);sFr=r(RCt,"pegasus"),RCt.forEach(t),lFr=r(JPe," \u2014 "),zH=n(JPe,"A",{href:!0});var PCt=s(zH);iFr=r(PCt,"TFPegasusForConditionalGeneration"),PCt.forEach(t),dFr=r(JPe," (Pegasus model)"),JPe.forEach(t),cFr=i(Be),yM=n(Be,"LI",{});var YPe=s(yM);Xve=n(YPe,"STRONG",{});var BCt=s(Xve);fFr=r(BCt,"t5"),BCt.forEach(t),mFr=r(YPe," \u2014 "),WH=n(YPe,"A",{href:!0});var ICt=s(WH);gFr=r(ICt,"TFT5ForConditionalGeneration"),ICt.forEach(t),hFr=r(YPe," (T5 model)"),YPe.forEach(t),Be.forEach(t),pFr=i(wl),T(LM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),Hje=i(f),sc=n(f,"H2",{class:!0});var eOe=s(sc);xM=n(eOe,"A",{id:!0,class:!0,href:!0});var NCt=s(xM);zve=n(NCt,"SPAN",{});var qCt=s(zve);T(W8.$$.fragment,qCt),qCt.forEach(t),NCt.forEach(t),_Fr=i(eOe),Wve=n(eOe,"SPAN",{});var jCt=s(Wve);uFr=r(jCt,"TFAutoModelForSequenceClassification"),jCt.forEach(t),eOe.forEach(t),Uje=i(f),tr=n(f,"DIV",{class:!0});var Al=s(tr);T(Q8.$$.fragment,Al),bFr=i(Al),lc=n(Al,"P",{});var qee=s(lc);vFr=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QH=n(qee,"A",{href:!0});var DCt=s(QH);FFr=r(DCt,"from_pretrained()"),DCt.forEach(t),TFr=r(qee," class method or the "),HH=n(qee,"A",{href:!0});var GCt=s(HH);MFr=r(GCt,"from_config()"),GCt.forEach(t),EFr=r(qee,` class
method.`),qee.forEach(t),CFr=i(Al),H8=n(Al,"P",{});var oOe=s(H8);wFr=r(oOe,"This class cannot be instantiated directly using "),Qve=n(oOe,"CODE",{});var OCt=s(Qve);AFr=r(OCt,"__init__()"),OCt.forEach(t),yFr=r(oOe," (throws an error)."),oOe.forEach(t),LFr=i(Al),Rt=n(Al,"DIV",{class:!0});var z6=s(Rt);T(U8.$$.fragment,z6),xFr=i(z6),Hve=n(z6,"P",{});var VCt=s(Hve);$Fr=r(VCt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VCt.forEach(t),kFr=i(z6),ic=n(z6,"P",{});var jee=s(ic);SFr=r(jee,`Note:
Loading a model from its configuration file does `),Uve=n(jee,"STRONG",{});var XCt=s(Uve);RFr=r(XCt,"not"),XCt.forEach(t),PFr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(jee,"A",{href:!0});var zCt=s(UH);BFr=r(zCt,"from_pretrained()"),zCt.forEach(t),IFr=r(jee," to load the model weights."),jee.forEach(t),NFr=i(z6),T($M.$$.fragment,z6),z6.forEach(t),qFr=i(Al),kr=n(Al,"DIV",{class:!0});var yl=s(kr);T(J8.$$.fragment,yl),jFr=i(yl),Jve=n(yl,"P",{});var WCt=s(Jve);DFr=r(WCt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),WCt.forEach(t),GFr=i(yl),nn=n(yl,"P",{});var W6=s(nn);OFr=r(W6,"The model class to instantiate is selected based on the "),Yve=n(W6,"CODE",{});var QCt=s(Yve);VFr=r(QCt,"model_type"),QCt.forEach(t),XFr=r(W6,` property of the config object (either
passed as an argument or loaded from `),Kve=n(W6,"CODE",{});var HCt=s(Kve);zFr=r(HCt,"pretrained_model_name_or_path"),HCt.forEach(t),WFr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=n(W6,"CODE",{});var UCt=s(Zve);QFr=r(UCt,"pretrained_model_name_or_path"),UCt.forEach(t),HFr=r(W6,":"),W6.forEach(t),UFr=i(yl),oe=n(yl,"UL",{});var ae=s(oe);kM=n(ae,"LI",{});var KPe=s(kM);e3e=n(KPe,"STRONG",{});var JCt=s(e3e);JFr=r(JCt,"albert"),JCt.forEach(t),YFr=r(KPe," \u2014 "),JH=n(KPe,"A",{href:!0});var YCt=s(JH);KFr=r(YCt,"TFAlbertForSequenceClassification"),YCt.forEach(t),ZFr=r(KPe," (ALBERT model)"),KPe.forEach(t),eTr=i(ae),SM=n(ae,"LI",{});var ZPe=s(SM);o3e=n(ZPe,"STRONG",{});var KCt=s(o3e);oTr=r(KCt,"bert"),KCt.forEach(t),rTr=r(ZPe," \u2014 "),YH=n(ZPe,"A",{href:!0});var ZCt=s(YH);tTr=r(ZCt,"TFBertForSequenceClassification"),ZCt.forEach(t),aTr=r(ZPe," (BERT model)"),ZPe.forEach(t),nTr=i(ae),RM=n(ae,"LI",{});var eBe=s(RM);r3e=n(eBe,"STRONG",{});var e5t=s(r3e);sTr=r(e5t,"camembert"),e5t.forEach(t),lTr=r(eBe," \u2014 "),KH=n(eBe,"A",{href:!0});var o5t=s(KH);iTr=r(o5t,"TFCamembertForSequenceClassification"),o5t.forEach(t),dTr=r(eBe," (CamemBERT model)"),eBe.forEach(t),cTr=i(ae),PM=n(ae,"LI",{});var oBe=s(PM);t3e=n(oBe,"STRONG",{});var r5t=s(t3e);fTr=r(r5t,"convbert"),r5t.forEach(t),mTr=r(oBe," \u2014 "),ZH=n(oBe,"A",{href:!0});var t5t=s(ZH);gTr=r(t5t,"TFConvBertForSequenceClassification"),t5t.forEach(t),hTr=r(oBe," (ConvBERT model)"),oBe.forEach(t),pTr=i(ae),BM=n(ae,"LI",{});var rBe=s(BM);a3e=n(rBe,"STRONG",{});var a5t=s(a3e);_Tr=r(a5t,"ctrl"),a5t.forEach(t),uTr=r(rBe," \u2014 "),eU=n(rBe,"A",{href:!0});var n5t=s(eU);bTr=r(n5t,"TFCTRLForSequenceClassification"),n5t.forEach(t),vTr=r(rBe," (CTRL model)"),rBe.forEach(t),FTr=i(ae),IM=n(ae,"LI",{});var tBe=s(IM);n3e=n(tBe,"STRONG",{});var s5t=s(n3e);TTr=r(s5t,"deberta"),s5t.forEach(t),MTr=r(tBe," \u2014 "),oU=n(tBe,"A",{href:!0});var l5t=s(oU);ETr=r(l5t,"TFDebertaForSequenceClassification"),l5t.forEach(t),CTr=r(tBe," (DeBERTa model)"),tBe.forEach(t),wTr=i(ae),NM=n(ae,"LI",{});var aBe=s(NM);s3e=n(aBe,"STRONG",{});var i5t=s(s3e);ATr=r(i5t,"deberta-v2"),i5t.forEach(t),yTr=r(aBe," \u2014 "),rU=n(aBe,"A",{href:!0});var d5t=s(rU);LTr=r(d5t,"TFDebertaV2ForSequenceClassification"),d5t.forEach(t),xTr=r(aBe," (DeBERTa-v2 model)"),aBe.forEach(t),$Tr=i(ae),qM=n(ae,"LI",{});var nBe=s(qM);l3e=n(nBe,"STRONG",{});var c5t=s(l3e);kTr=r(c5t,"distilbert"),c5t.forEach(t),STr=r(nBe," \u2014 "),tU=n(nBe,"A",{href:!0});var f5t=s(tU);RTr=r(f5t,"TFDistilBertForSequenceClassification"),f5t.forEach(t),PTr=r(nBe," (DistilBERT model)"),nBe.forEach(t),BTr=i(ae),jM=n(ae,"LI",{});var sBe=s(jM);i3e=n(sBe,"STRONG",{});var m5t=s(i3e);ITr=r(m5t,"electra"),m5t.forEach(t),NTr=r(sBe," \u2014 "),aU=n(sBe,"A",{href:!0});var g5t=s(aU);qTr=r(g5t,"TFElectraForSequenceClassification"),g5t.forEach(t),jTr=r(sBe," (ELECTRA model)"),sBe.forEach(t),DTr=i(ae),DM=n(ae,"LI",{});var lBe=s(DM);d3e=n(lBe,"STRONG",{});var h5t=s(d3e);GTr=r(h5t,"flaubert"),h5t.forEach(t),OTr=r(lBe," \u2014 "),nU=n(lBe,"A",{href:!0});var p5t=s(nU);VTr=r(p5t,"TFFlaubertForSequenceClassification"),p5t.forEach(t),XTr=r(lBe," (FlauBERT model)"),lBe.forEach(t),zTr=i(ae),GM=n(ae,"LI",{});var iBe=s(GM);c3e=n(iBe,"STRONG",{});var _5t=s(c3e);WTr=r(_5t,"funnel"),_5t.forEach(t),QTr=r(iBe," \u2014 "),sU=n(iBe,"A",{href:!0});var u5t=s(sU);HTr=r(u5t,"TFFunnelForSequenceClassification"),u5t.forEach(t),UTr=r(iBe," (Funnel Transformer model)"),iBe.forEach(t),JTr=i(ae),OM=n(ae,"LI",{});var dBe=s(OM);f3e=n(dBe,"STRONG",{});var b5t=s(f3e);YTr=r(b5t,"gpt2"),b5t.forEach(t),KTr=r(dBe," \u2014 "),lU=n(dBe,"A",{href:!0});var v5t=s(lU);ZTr=r(v5t,"TFGPT2ForSequenceClassification"),v5t.forEach(t),e7r=r(dBe," (OpenAI GPT-2 model)"),dBe.forEach(t),o7r=i(ae),VM=n(ae,"LI",{});var cBe=s(VM);m3e=n(cBe,"STRONG",{});var F5t=s(m3e);r7r=r(F5t,"gptj"),F5t.forEach(t),t7r=r(cBe," \u2014 "),iU=n(cBe,"A",{href:!0});var T5t=s(iU);a7r=r(T5t,"TFGPTJForSequenceClassification"),T5t.forEach(t),n7r=r(cBe," (GPT-J model)"),cBe.forEach(t),s7r=i(ae),XM=n(ae,"LI",{});var fBe=s(XM);g3e=n(fBe,"STRONG",{});var M5t=s(g3e);l7r=r(M5t,"layoutlm"),M5t.forEach(t),i7r=r(fBe," \u2014 "),dU=n(fBe,"A",{href:!0});var E5t=s(dU);d7r=r(E5t,"TFLayoutLMForSequenceClassification"),E5t.forEach(t),c7r=r(fBe," (LayoutLM model)"),fBe.forEach(t),f7r=i(ae),zM=n(ae,"LI",{});var mBe=s(zM);h3e=n(mBe,"STRONG",{});var C5t=s(h3e);m7r=r(C5t,"longformer"),C5t.forEach(t),g7r=r(mBe," \u2014 "),cU=n(mBe,"A",{href:!0});var w5t=s(cU);h7r=r(w5t,"TFLongformerForSequenceClassification"),w5t.forEach(t),p7r=r(mBe," (Longformer model)"),mBe.forEach(t),_7r=i(ae),WM=n(ae,"LI",{});var gBe=s(WM);p3e=n(gBe,"STRONG",{});var A5t=s(p3e);u7r=r(A5t,"mobilebert"),A5t.forEach(t),b7r=r(gBe," \u2014 "),fU=n(gBe,"A",{href:!0});var y5t=s(fU);v7r=r(y5t,"TFMobileBertForSequenceClassification"),y5t.forEach(t),F7r=r(gBe," (MobileBERT model)"),gBe.forEach(t),T7r=i(ae),QM=n(ae,"LI",{});var hBe=s(QM);_3e=n(hBe,"STRONG",{});var L5t=s(_3e);M7r=r(L5t,"mpnet"),L5t.forEach(t),E7r=r(hBe," \u2014 "),mU=n(hBe,"A",{href:!0});var x5t=s(mU);C7r=r(x5t,"TFMPNetForSequenceClassification"),x5t.forEach(t),w7r=r(hBe," (MPNet model)"),hBe.forEach(t),A7r=i(ae),HM=n(ae,"LI",{});var pBe=s(HM);u3e=n(pBe,"STRONG",{});var $5t=s(u3e);y7r=r($5t,"openai-gpt"),$5t.forEach(t),L7r=r(pBe," \u2014 "),gU=n(pBe,"A",{href:!0});var k5t=s(gU);x7r=r(k5t,"TFOpenAIGPTForSequenceClassification"),k5t.forEach(t),$7r=r(pBe," (OpenAI GPT model)"),pBe.forEach(t),k7r=i(ae),UM=n(ae,"LI",{});var _Be=s(UM);b3e=n(_Be,"STRONG",{});var S5t=s(b3e);S7r=r(S5t,"rembert"),S5t.forEach(t),R7r=r(_Be," \u2014 "),hU=n(_Be,"A",{href:!0});var R5t=s(hU);P7r=r(R5t,"TFRemBertForSequenceClassification"),R5t.forEach(t),B7r=r(_Be," (RemBERT model)"),_Be.forEach(t),I7r=i(ae),JM=n(ae,"LI",{});var uBe=s(JM);v3e=n(uBe,"STRONG",{});var P5t=s(v3e);N7r=r(P5t,"roberta"),P5t.forEach(t),q7r=r(uBe," \u2014 "),pU=n(uBe,"A",{href:!0});var B5t=s(pU);j7r=r(B5t,"TFRobertaForSequenceClassification"),B5t.forEach(t),D7r=r(uBe," (RoBERTa model)"),uBe.forEach(t),G7r=i(ae),YM=n(ae,"LI",{});var bBe=s(YM);F3e=n(bBe,"STRONG",{});var I5t=s(F3e);O7r=r(I5t,"roformer"),I5t.forEach(t),V7r=r(bBe," \u2014 "),_U=n(bBe,"A",{href:!0});var N5t=s(_U);X7r=r(N5t,"TFRoFormerForSequenceClassification"),N5t.forEach(t),z7r=r(bBe," (RoFormer model)"),bBe.forEach(t),W7r=i(ae),KM=n(ae,"LI",{});var vBe=s(KM);T3e=n(vBe,"STRONG",{});var q5t=s(T3e);Q7r=r(q5t,"tapas"),q5t.forEach(t),H7r=r(vBe," \u2014 "),uU=n(vBe,"A",{href:!0});var j5t=s(uU);U7r=r(j5t,"TFTapasForSequenceClassification"),j5t.forEach(t),J7r=r(vBe," (TAPAS model)"),vBe.forEach(t),Y7r=i(ae),ZM=n(ae,"LI",{});var FBe=s(ZM);M3e=n(FBe,"STRONG",{});var D5t=s(M3e);K7r=r(D5t,"transfo-xl"),D5t.forEach(t),Z7r=r(FBe," \u2014 "),bU=n(FBe,"A",{href:!0});var G5t=s(bU);eMr=r(G5t,"TFTransfoXLForSequenceClassification"),G5t.forEach(t),oMr=r(FBe," (Transformer-XL model)"),FBe.forEach(t),rMr=i(ae),eE=n(ae,"LI",{});var TBe=s(eE);E3e=n(TBe,"STRONG",{});var O5t=s(E3e);tMr=r(O5t,"xlm"),O5t.forEach(t),aMr=r(TBe," \u2014 "),vU=n(TBe,"A",{href:!0});var V5t=s(vU);nMr=r(V5t,"TFXLMForSequenceClassification"),V5t.forEach(t),sMr=r(TBe," (XLM model)"),TBe.forEach(t),lMr=i(ae),oE=n(ae,"LI",{});var MBe=s(oE);C3e=n(MBe,"STRONG",{});var X5t=s(C3e);iMr=r(X5t,"xlm-roberta"),X5t.forEach(t),dMr=r(MBe," \u2014 "),FU=n(MBe,"A",{href:!0});var z5t=s(FU);cMr=r(z5t,"TFXLMRobertaForSequenceClassification"),z5t.forEach(t),fMr=r(MBe," (XLM-RoBERTa model)"),MBe.forEach(t),mMr=i(ae),rE=n(ae,"LI",{});var EBe=s(rE);w3e=n(EBe,"STRONG",{});var W5t=s(w3e);gMr=r(W5t,"xlnet"),W5t.forEach(t),hMr=r(EBe," \u2014 "),TU=n(EBe,"A",{href:!0});var Q5t=s(TU);pMr=r(Q5t,"TFXLNetForSequenceClassification"),Q5t.forEach(t),_Mr=r(EBe," (XLNet model)"),EBe.forEach(t),ae.forEach(t),uMr=i(yl),T(tE.$$.fragment,yl),yl.forEach(t),Al.forEach(t),Jje=i(f),dc=n(f,"H2",{class:!0});var rOe=s(dc);aE=n(rOe,"A",{id:!0,class:!0,href:!0});var H5t=s(aE);A3e=n(H5t,"SPAN",{});var U5t=s(A3e);T(Y8.$$.fragment,U5t),U5t.forEach(t),H5t.forEach(t),bMr=i(rOe),y3e=n(rOe,"SPAN",{});var J5t=s(y3e);vMr=r(J5t,"TFAutoModelForMultipleChoice"),J5t.forEach(t),rOe.forEach(t),Yje=i(f),ar=n(f,"DIV",{class:!0});var Ll=s(ar);T(K8.$$.fragment,Ll),FMr=i(Ll),cc=n(Ll,"P",{});var Dee=s(cc);TMr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MU=n(Dee,"A",{href:!0});var Y5t=s(MU);MMr=r(Y5t,"from_pretrained()"),Y5t.forEach(t),EMr=r(Dee," class method or the "),EU=n(Dee,"A",{href:!0});var K5t=s(EU);CMr=r(K5t,"from_config()"),K5t.forEach(t),wMr=r(Dee,` class
method.`),Dee.forEach(t),AMr=i(Ll),Z8=n(Ll,"P",{});var tOe=s(Z8);yMr=r(tOe,"This class cannot be instantiated directly using "),L3e=n(tOe,"CODE",{});var Z5t=s(L3e);LMr=r(Z5t,"__init__()"),Z5t.forEach(t),xMr=r(tOe," (throws an error)."),tOe.forEach(t),$Mr=i(Ll),Pt=n(Ll,"DIV",{class:!0});var Q6=s(Pt);T(e9.$$.fragment,Q6),kMr=i(Q6),x3e=n(Q6,"P",{});var e0t=s(x3e);SMr=r(e0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),e0t.forEach(t),RMr=i(Q6),fc=n(Q6,"P",{});var Gee=s(fc);PMr=r(Gee,`Note:
Loading a model from its configuration file does `),$3e=n(Gee,"STRONG",{});var o0t=s($3e);BMr=r(o0t,"not"),o0t.forEach(t),IMr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(Gee,"A",{href:!0});var r0t=s(CU);NMr=r(r0t,"from_pretrained()"),r0t.forEach(t),qMr=r(Gee," to load the model weights."),Gee.forEach(t),jMr=i(Q6),T(nE.$$.fragment,Q6),Q6.forEach(t),DMr=i(Ll),Sr=n(Ll,"DIV",{class:!0});var xl=s(Sr);T(o9.$$.fragment,xl),GMr=i(xl),k3e=n(xl,"P",{});var t0t=s(k3e);OMr=r(t0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),t0t.forEach(t),VMr=i(xl),sn=n(xl,"P",{});var H6=s(sn);XMr=r(H6,"The model class to instantiate is selected based on the "),S3e=n(H6,"CODE",{});var a0t=s(S3e);zMr=r(a0t,"model_type"),a0t.forEach(t),WMr=r(H6,` property of the config object (either
passed as an argument or loaded from `),R3e=n(H6,"CODE",{});var n0t=s(R3e);QMr=r(n0t,"pretrained_model_name_or_path"),n0t.forEach(t),HMr=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=n(H6,"CODE",{});var s0t=s(P3e);UMr=r(s0t,"pretrained_model_name_or_path"),s0t.forEach(t),JMr=r(H6,":"),H6.forEach(t),YMr=i(xl),pe=n(xl,"UL",{});var be=s(pe);sE=n(be,"LI",{});var CBe=s(sE);B3e=n(CBe,"STRONG",{});var l0t=s(B3e);KMr=r(l0t,"albert"),l0t.forEach(t),ZMr=r(CBe," \u2014 "),wU=n(CBe,"A",{href:!0});var i0t=s(wU);eEr=r(i0t,"TFAlbertForMultipleChoice"),i0t.forEach(t),oEr=r(CBe," (ALBERT model)"),CBe.forEach(t),rEr=i(be),lE=n(be,"LI",{});var wBe=s(lE);I3e=n(wBe,"STRONG",{});var d0t=s(I3e);tEr=r(d0t,"bert"),d0t.forEach(t),aEr=r(wBe," \u2014 "),AU=n(wBe,"A",{href:!0});var c0t=s(AU);nEr=r(c0t,"TFBertForMultipleChoice"),c0t.forEach(t),sEr=r(wBe," (BERT model)"),wBe.forEach(t),lEr=i(be),iE=n(be,"LI",{});var ABe=s(iE);N3e=n(ABe,"STRONG",{});var f0t=s(N3e);iEr=r(f0t,"camembert"),f0t.forEach(t),dEr=r(ABe," \u2014 "),yU=n(ABe,"A",{href:!0});var m0t=s(yU);cEr=r(m0t,"TFCamembertForMultipleChoice"),m0t.forEach(t),fEr=r(ABe," (CamemBERT model)"),ABe.forEach(t),mEr=i(be),dE=n(be,"LI",{});var yBe=s(dE);q3e=n(yBe,"STRONG",{});var g0t=s(q3e);gEr=r(g0t,"convbert"),g0t.forEach(t),hEr=r(yBe," \u2014 "),LU=n(yBe,"A",{href:!0});var h0t=s(LU);pEr=r(h0t,"TFConvBertForMultipleChoice"),h0t.forEach(t),_Er=r(yBe," (ConvBERT model)"),yBe.forEach(t),uEr=i(be),cE=n(be,"LI",{});var LBe=s(cE);j3e=n(LBe,"STRONG",{});var p0t=s(j3e);bEr=r(p0t,"distilbert"),p0t.forEach(t),vEr=r(LBe," \u2014 "),xU=n(LBe,"A",{href:!0});var _0t=s(xU);FEr=r(_0t,"TFDistilBertForMultipleChoice"),_0t.forEach(t),TEr=r(LBe," (DistilBERT model)"),LBe.forEach(t),MEr=i(be),fE=n(be,"LI",{});var xBe=s(fE);D3e=n(xBe,"STRONG",{});var u0t=s(D3e);EEr=r(u0t,"electra"),u0t.forEach(t),CEr=r(xBe," \u2014 "),$U=n(xBe,"A",{href:!0});var b0t=s($U);wEr=r(b0t,"TFElectraForMultipleChoice"),b0t.forEach(t),AEr=r(xBe," (ELECTRA model)"),xBe.forEach(t),yEr=i(be),mE=n(be,"LI",{});var $Be=s(mE);G3e=n($Be,"STRONG",{});var v0t=s(G3e);LEr=r(v0t,"flaubert"),v0t.forEach(t),xEr=r($Be," \u2014 "),kU=n($Be,"A",{href:!0});var F0t=s(kU);$Er=r(F0t,"TFFlaubertForMultipleChoice"),F0t.forEach(t),kEr=r($Be," (FlauBERT model)"),$Be.forEach(t),SEr=i(be),gE=n(be,"LI",{});var kBe=s(gE);O3e=n(kBe,"STRONG",{});var T0t=s(O3e);REr=r(T0t,"funnel"),T0t.forEach(t),PEr=r(kBe," \u2014 "),SU=n(kBe,"A",{href:!0});var M0t=s(SU);BEr=r(M0t,"TFFunnelForMultipleChoice"),M0t.forEach(t),IEr=r(kBe," (Funnel Transformer model)"),kBe.forEach(t),NEr=i(be),hE=n(be,"LI",{});var SBe=s(hE);V3e=n(SBe,"STRONG",{});var E0t=s(V3e);qEr=r(E0t,"longformer"),E0t.forEach(t),jEr=r(SBe," \u2014 "),RU=n(SBe,"A",{href:!0});var C0t=s(RU);DEr=r(C0t,"TFLongformerForMultipleChoice"),C0t.forEach(t),GEr=r(SBe," (Longformer model)"),SBe.forEach(t),OEr=i(be),pE=n(be,"LI",{});var RBe=s(pE);X3e=n(RBe,"STRONG",{});var w0t=s(X3e);VEr=r(w0t,"mobilebert"),w0t.forEach(t),XEr=r(RBe," \u2014 "),PU=n(RBe,"A",{href:!0});var A0t=s(PU);zEr=r(A0t,"TFMobileBertForMultipleChoice"),A0t.forEach(t),WEr=r(RBe," (MobileBERT model)"),RBe.forEach(t),QEr=i(be),_E=n(be,"LI",{});var PBe=s(_E);z3e=n(PBe,"STRONG",{});var y0t=s(z3e);HEr=r(y0t,"mpnet"),y0t.forEach(t),UEr=r(PBe," \u2014 "),BU=n(PBe,"A",{href:!0});var L0t=s(BU);JEr=r(L0t,"TFMPNetForMultipleChoice"),L0t.forEach(t),YEr=r(PBe," (MPNet model)"),PBe.forEach(t),KEr=i(be),uE=n(be,"LI",{});var BBe=s(uE);W3e=n(BBe,"STRONG",{});var x0t=s(W3e);ZEr=r(x0t,"rembert"),x0t.forEach(t),eCr=r(BBe," \u2014 "),IU=n(BBe,"A",{href:!0});var $0t=s(IU);oCr=r($0t,"TFRemBertForMultipleChoice"),$0t.forEach(t),rCr=r(BBe," (RemBERT model)"),BBe.forEach(t),tCr=i(be),bE=n(be,"LI",{});var IBe=s(bE);Q3e=n(IBe,"STRONG",{});var k0t=s(Q3e);aCr=r(k0t,"roberta"),k0t.forEach(t),nCr=r(IBe," \u2014 "),NU=n(IBe,"A",{href:!0});var S0t=s(NU);sCr=r(S0t,"TFRobertaForMultipleChoice"),S0t.forEach(t),lCr=r(IBe," (RoBERTa model)"),IBe.forEach(t),iCr=i(be),vE=n(be,"LI",{});var NBe=s(vE);H3e=n(NBe,"STRONG",{});var R0t=s(H3e);dCr=r(R0t,"roformer"),R0t.forEach(t),cCr=r(NBe," \u2014 "),qU=n(NBe,"A",{href:!0});var P0t=s(qU);fCr=r(P0t,"TFRoFormerForMultipleChoice"),P0t.forEach(t),mCr=r(NBe," (RoFormer model)"),NBe.forEach(t),gCr=i(be),FE=n(be,"LI",{});var qBe=s(FE);U3e=n(qBe,"STRONG",{});var B0t=s(U3e);hCr=r(B0t,"xlm"),B0t.forEach(t),pCr=r(qBe," \u2014 "),jU=n(qBe,"A",{href:!0});var I0t=s(jU);_Cr=r(I0t,"TFXLMForMultipleChoice"),I0t.forEach(t),uCr=r(qBe," (XLM model)"),qBe.forEach(t),bCr=i(be),TE=n(be,"LI",{});var jBe=s(TE);J3e=n(jBe,"STRONG",{});var N0t=s(J3e);vCr=r(N0t,"xlm-roberta"),N0t.forEach(t),FCr=r(jBe," \u2014 "),DU=n(jBe,"A",{href:!0});var q0t=s(DU);TCr=r(q0t,"TFXLMRobertaForMultipleChoice"),q0t.forEach(t),MCr=r(jBe," (XLM-RoBERTa model)"),jBe.forEach(t),ECr=i(be),ME=n(be,"LI",{});var DBe=s(ME);Y3e=n(DBe,"STRONG",{});var j0t=s(Y3e);CCr=r(j0t,"xlnet"),j0t.forEach(t),wCr=r(DBe," \u2014 "),GU=n(DBe,"A",{href:!0});var D0t=s(GU);ACr=r(D0t,"TFXLNetForMultipleChoice"),D0t.forEach(t),yCr=r(DBe," (XLNet model)"),DBe.forEach(t),be.forEach(t),LCr=i(xl),T(EE.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),Kje=i(f),mc=n(f,"H2",{class:!0});var aOe=s(mc);CE=n(aOe,"A",{id:!0,class:!0,href:!0});var G0t=s(CE);K3e=n(G0t,"SPAN",{});var O0t=s(K3e);T(r9.$$.fragment,O0t),O0t.forEach(t),G0t.forEach(t),xCr=i(aOe),Z3e=n(aOe,"SPAN",{});var V0t=s(Z3e);$Cr=r(V0t,"TFAutoModelForNextSentencePrediction"),V0t.forEach(t),aOe.forEach(t),Zje=i(f),nr=n(f,"DIV",{class:!0});var $l=s(nr);T(t9.$$.fragment,$l),kCr=i($l),gc=n($l,"P",{});var Oee=s(gc);SCr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OU=n(Oee,"A",{href:!0});var X0t=s(OU);RCr=r(X0t,"from_pretrained()"),X0t.forEach(t),PCr=r(Oee," class method or the "),VU=n(Oee,"A",{href:!0});var z0t=s(VU);BCr=r(z0t,"from_config()"),z0t.forEach(t),ICr=r(Oee,` class
method.`),Oee.forEach(t),NCr=i($l),a9=n($l,"P",{});var nOe=s(a9);qCr=r(nOe,"This class cannot be instantiated directly using "),eFe=n(nOe,"CODE",{});var W0t=s(eFe);jCr=r(W0t,"__init__()"),W0t.forEach(t),DCr=r(nOe," (throws an error)."),nOe.forEach(t),GCr=i($l),Bt=n($l,"DIV",{class:!0});var U6=s(Bt);T(n9.$$.fragment,U6),OCr=i(U6),oFe=n(U6,"P",{});var Q0t=s(oFe);VCr=r(Q0t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Q0t.forEach(t),XCr=i(U6),hc=n(U6,"P",{});var Vee=s(hc);zCr=r(Vee,`Note:
Loading a model from its configuration file does `),rFe=n(Vee,"STRONG",{});var H0t=s(rFe);WCr=r(H0t,"not"),H0t.forEach(t),QCr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=n(Vee,"A",{href:!0});var U0t=s(XU);HCr=r(U0t,"from_pretrained()"),U0t.forEach(t),UCr=r(Vee," to load the model weights."),Vee.forEach(t),JCr=i(U6),T(wE.$$.fragment,U6),U6.forEach(t),YCr=i($l),Rr=n($l,"DIV",{class:!0});var kl=s(Rr);T(s9.$$.fragment,kl),KCr=i(kl),tFe=n(kl,"P",{});var J0t=s(tFe);ZCr=r(J0t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),J0t.forEach(t),e5r=i(kl),ln=n(kl,"P",{});var J6=s(ln);o5r=r(J6,"The model class to instantiate is selected based on the "),aFe=n(J6,"CODE",{});var Y0t=s(aFe);r5r=r(Y0t,"model_type"),Y0t.forEach(t),t5r=r(J6,` property of the config object (either
passed as an argument or loaded from `),nFe=n(J6,"CODE",{});var K0t=s(nFe);a5r=r(K0t,"pretrained_model_name_or_path"),K0t.forEach(t),n5r=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sFe=n(J6,"CODE",{});var Z0t=s(sFe);s5r=r(Z0t,"pretrained_model_name_or_path"),Z0t.forEach(t),l5r=r(J6,":"),J6.forEach(t),i5r=i(kl),l9=n(kl,"UL",{});var sOe=s(l9);AE=n(sOe,"LI",{});var GBe=s(AE);lFe=n(GBe,"STRONG",{});var ewt=s(lFe);d5r=r(ewt,"bert"),ewt.forEach(t),c5r=r(GBe," \u2014 "),zU=n(GBe,"A",{href:!0});var owt=s(zU);f5r=r(owt,"TFBertForNextSentencePrediction"),owt.forEach(t),m5r=r(GBe," (BERT model)"),GBe.forEach(t),g5r=i(sOe),yE=n(sOe,"LI",{});var OBe=s(yE);iFe=n(OBe,"STRONG",{});var rwt=s(iFe);h5r=r(rwt,"mobilebert"),rwt.forEach(t),p5r=r(OBe," \u2014 "),WU=n(OBe,"A",{href:!0});var twt=s(WU);_5r=r(twt,"TFMobileBertForNextSentencePrediction"),twt.forEach(t),u5r=r(OBe," (MobileBERT model)"),OBe.forEach(t),sOe.forEach(t),b5r=i(kl),T(LE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),eDe=i(f),pc=n(f,"H2",{class:!0});var lOe=s(pc);xE=n(lOe,"A",{id:!0,class:!0,href:!0});var awt=s(xE);dFe=n(awt,"SPAN",{});var nwt=s(dFe);T(i9.$$.fragment,nwt),nwt.forEach(t),awt.forEach(t),v5r=i(lOe),cFe=n(lOe,"SPAN",{});var swt=s(cFe);F5r=r(swt,"TFAutoModelForTableQuestionAnswering"),swt.forEach(t),lOe.forEach(t),oDe=i(f),sr=n(f,"DIV",{class:!0});var Sl=s(sr);T(d9.$$.fragment,Sl),T5r=i(Sl),_c=n(Sl,"P",{});var Xee=s(_c);M5r=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QU=n(Xee,"A",{href:!0});var lwt=s(QU);E5r=r(lwt,"from_pretrained()"),lwt.forEach(t),C5r=r(Xee," class method or the "),HU=n(Xee,"A",{href:!0});var iwt=s(HU);w5r=r(iwt,"from_config()"),iwt.forEach(t),A5r=r(Xee,` class
method.`),Xee.forEach(t),y5r=i(Sl),c9=n(Sl,"P",{});var iOe=s(c9);L5r=r(iOe,"This class cannot be instantiated directly using "),fFe=n(iOe,"CODE",{});var dwt=s(fFe);x5r=r(dwt,"__init__()"),dwt.forEach(t),$5r=r(iOe," (throws an error)."),iOe.forEach(t),k5r=i(Sl),It=n(Sl,"DIV",{class:!0});var Y6=s(It);T(f9.$$.fragment,Y6),S5r=i(Y6),mFe=n(Y6,"P",{});var cwt=s(mFe);R5r=r(cwt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),cwt.forEach(t),P5r=i(Y6),uc=n(Y6,"P",{});var zee=s(uc);B5r=r(zee,`Note:
Loading a model from its configuration file does `),gFe=n(zee,"STRONG",{});var fwt=s(gFe);I5r=r(fwt,"not"),fwt.forEach(t),N5r=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=n(zee,"A",{href:!0});var mwt=s(UU);q5r=r(mwt,"from_pretrained()"),mwt.forEach(t),j5r=r(zee," to load the model weights."),zee.forEach(t),D5r=i(Y6),T($E.$$.fragment,Y6),Y6.forEach(t),G5r=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(m9.$$.fragment,Rl),O5r=i(Rl),hFe=n(Rl,"P",{});var gwt=s(hFe);V5r=r(gwt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),gwt.forEach(t),X5r=i(Rl),dn=n(Rl,"P",{});var K6=s(dn);z5r=r(K6,"The model class to instantiate is selected based on the "),pFe=n(K6,"CODE",{});var hwt=s(pFe);W5r=r(hwt,"model_type"),hwt.forEach(t),Q5r=r(K6,` property of the config object (either
passed as an argument or loaded from `),_Fe=n(K6,"CODE",{});var pwt=s(_Fe);H5r=r(pwt,"pretrained_model_name_or_path"),pwt.forEach(t),U5r=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=n(K6,"CODE",{});var _wt=s(uFe);J5r=r(_wt,"pretrained_model_name_or_path"),_wt.forEach(t),Y5r=r(K6,":"),K6.forEach(t),K5r=i(Rl),bFe=n(Rl,"UL",{});var uwt=s(bFe);kE=n(uwt,"LI",{});var VBe=s(kE);vFe=n(VBe,"STRONG",{});var bwt=s(vFe);Z5r=r(bwt,"tapas"),bwt.forEach(t),e0r=r(VBe," \u2014 "),JU=n(VBe,"A",{href:!0});var vwt=s(JU);o0r=r(vwt,"TFTapasForQuestionAnswering"),vwt.forEach(t),r0r=r(VBe," (TAPAS model)"),VBe.forEach(t),uwt.forEach(t),t0r=i(Rl),T(SE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),rDe=i(f),bc=n(f,"H2",{class:!0});var dOe=s(bc);RE=n(dOe,"A",{id:!0,class:!0,href:!0});var Fwt=s(RE);FFe=n(Fwt,"SPAN",{});var Twt=s(FFe);T(g9.$$.fragment,Twt),Twt.forEach(t),Fwt.forEach(t),a0r=i(dOe),TFe=n(dOe,"SPAN",{});var Mwt=s(TFe);n0r=r(Mwt,"TFAutoModelForTokenClassification"),Mwt.forEach(t),dOe.forEach(t),tDe=i(f),lr=n(f,"DIV",{class:!0});var Pl=s(lr);T(h9.$$.fragment,Pl),s0r=i(Pl),vc=n(Pl,"P",{});var Wee=s(vc);l0r=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YU=n(Wee,"A",{href:!0});var Ewt=s(YU);i0r=r(Ewt,"from_pretrained()"),Ewt.forEach(t),d0r=r(Wee," class method or the "),KU=n(Wee,"A",{href:!0});var Cwt=s(KU);c0r=r(Cwt,"from_config()"),Cwt.forEach(t),f0r=r(Wee,` class
method.`),Wee.forEach(t),m0r=i(Pl),p9=n(Pl,"P",{});var cOe=s(p9);g0r=r(cOe,"This class cannot be instantiated directly using "),MFe=n(cOe,"CODE",{});var wwt=s(MFe);h0r=r(wwt,"__init__()"),wwt.forEach(t),p0r=r(cOe," (throws an error)."),cOe.forEach(t),_0r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var Z6=s(Nt);T(_9.$$.fragment,Z6),u0r=i(Z6),EFe=n(Z6,"P",{});var Awt=s(EFe);b0r=r(Awt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Awt.forEach(t),v0r=i(Z6),Fc=n(Z6,"P",{});var Qee=s(Fc);F0r=r(Qee,`Note:
Loading a model from its configuration file does `),CFe=n(Qee,"STRONG",{});var ywt=s(CFe);T0r=r(ywt,"not"),ywt.forEach(t),M0r=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=n(Qee,"A",{href:!0});var Lwt=s(ZU);E0r=r(Lwt,"from_pretrained()"),Lwt.forEach(t),C0r=r(Qee," to load the model weights."),Qee.forEach(t),w0r=i(Z6),T(PE.$$.fragment,Z6),Z6.forEach(t),A0r=i(Pl),Br=n(Pl,"DIV",{class:!0});var Bl=s(Br);T(u9.$$.fragment,Bl),y0r=i(Bl),wFe=n(Bl,"P",{});var xwt=s(wFe);L0r=r(xwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xwt.forEach(t),x0r=i(Bl),cn=n(Bl,"P",{});var eA=s(cn);$0r=r(eA,"The model class to instantiate is selected based on the "),AFe=n(eA,"CODE",{});var $wt=s(AFe);k0r=r($wt,"model_type"),$wt.forEach(t),S0r=r(eA,` property of the config object (either
passed as an argument or loaded from `),yFe=n(eA,"CODE",{});var kwt=s(yFe);R0r=r(kwt,"pretrained_model_name_or_path"),kwt.forEach(t),P0r=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=n(eA,"CODE",{});var Swt=s(LFe);B0r=r(Swt,"pretrained_model_name_or_path"),Swt.forEach(t),I0r=r(eA,":"),eA.forEach(t),N0r=i(Bl),de=n(Bl,"UL",{});var me=s(de);BE=n(me,"LI",{});var XBe=s(BE);xFe=n(XBe,"STRONG",{});var Rwt=s(xFe);q0r=r(Rwt,"albert"),Rwt.forEach(t),j0r=r(XBe," \u2014 "),eJ=n(XBe,"A",{href:!0});var Pwt=s(eJ);D0r=r(Pwt,"TFAlbertForTokenClassification"),Pwt.forEach(t),G0r=r(XBe," (ALBERT model)"),XBe.forEach(t),O0r=i(me),IE=n(me,"LI",{});var zBe=s(IE);$Fe=n(zBe,"STRONG",{});var Bwt=s($Fe);V0r=r(Bwt,"bert"),Bwt.forEach(t),X0r=r(zBe," \u2014 "),oJ=n(zBe,"A",{href:!0});var Iwt=s(oJ);z0r=r(Iwt,"TFBertForTokenClassification"),Iwt.forEach(t),W0r=r(zBe," (BERT model)"),zBe.forEach(t),Q0r=i(me),NE=n(me,"LI",{});var WBe=s(NE);kFe=n(WBe,"STRONG",{});var Nwt=s(kFe);H0r=r(Nwt,"camembert"),Nwt.forEach(t),U0r=r(WBe," \u2014 "),rJ=n(WBe,"A",{href:!0});var qwt=s(rJ);J0r=r(qwt,"TFCamembertForTokenClassification"),qwt.forEach(t),Y0r=r(WBe," (CamemBERT model)"),WBe.forEach(t),K0r=i(me),qE=n(me,"LI",{});var QBe=s(qE);SFe=n(QBe,"STRONG",{});var jwt=s(SFe);Z0r=r(jwt,"convbert"),jwt.forEach(t),ewr=r(QBe," \u2014 "),tJ=n(QBe,"A",{href:!0});var Dwt=s(tJ);owr=r(Dwt,"TFConvBertForTokenClassification"),Dwt.forEach(t),rwr=r(QBe," (ConvBERT model)"),QBe.forEach(t),twr=i(me),jE=n(me,"LI",{});var HBe=s(jE);RFe=n(HBe,"STRONG",{});var Gwt=s(RFe);awr=r(Gwt,"deberta"),Gwt.forEach(t),nwr=r(HBe," \u2014 "),aJ=n(HBe,"A",{href:!0});var Owt=s(aJ);swr=r(Owt,"TFDebertaForTokenClassification"),Owt.forEach(t),lwr=r(HBe," (DeBERTa model)"),HBe.forEach(t),iwr=i(me),DE=n(me,"LI",{});var UBe=s(DE);PFe=n(UBe,"STRONG",{});var Vwt=s(PFe);dwr=r(Vwt,"deberta-v2"),Vwt.forEach(t),cwr=r(UBe," \u2014 "),nJ=n(UBe,"A",{href:!0});var Xwt=s(nJ);fwr=r(Xwt,"TFDebertaV2ForTokenClassification"),Xwt.forEach(t),mwr=r(UBe," (DeBERTa-v2 model)"),UBe.forEach(t),gwr=i(me),GE=n(me,"LI",{});var JBe=s(GE);BFe=n(JBe,"STRONG",{});var zwt=s(BFe);hwr=r(zwt,"distilbert"),zwt.forEach(t),pwr=r(JBe," \u2014 "),sJ=n(JBe,"A",{href:!0});var Wwt=s(sJ);_wr=r(Wwt,"TFDistilBertForTokenClassification"),Wwt.forEach(t),uwr=r(JBe," (DistilBERT model)"),JBe.forEach(t),bwr=i(me),OE=n(me,"LI",{});var YBe=s(OE);IFe=n(YBe,"STRONG",{});var Qwt=s(IFe);vwr=r(Qwt,"electra"),Qwt.forEach(t),Fwr=r(YBe," \u2014 "),lJ=n(YBe,"A",{href:!0});var Hwt=s(lJ);Twr=r(Hwt,"TFElectraForTokenClassification"),Hwt.forEach(t),Mwr=r(YBe," (ELECTRA model)"),YBe.forEach(t),Ewr=i(me),VE=n(me,"LI",{});var KBe=s(VE);NFe=n(KBe,"STRONG",{});var Uwt=s(NFe);Cwr=r(Uwt,"flaubert"),Uwt.forEach(t),wwr=r(KBe," \u2014 "),iJ=n(KBe,"A",{href:!0});var Jwt=s(iJ);Awr=r(Jwt,"TFFlaubertForTokenClassification"),Jwt.forEach(t),ywr=r(KBe," (FlauBERT model)"),KBe.forEach(t),Lwr=i(me),XE=n(me,"LI",{});var ZBe=s(XE);qFe=n(ZBe,"STRONG",{});var Ywt=s(qFe);xwr=r(Ywt,"funnel"),Ywt.forEach(t),$wr=r(ZBe," \u2014 "),dJ=n(ZBe,"A",{href:!0});var Kwt=s(dJ);kwr=r(Kwt,"TFFunnelForTokenClassification"),Kwt.forEach(t),Swr=r(ZBe," (Funnel Transformer model)"),ZBe.forEach(t),Rwr=i(me),zE=n(me,"LI",{});var eIe=s(zE);jFe=n(eIe,"STRONG",{});var Zwt=s(jFe);Pwr=r(Zwt,"layoutlm"),Zwt.forEach(t),Bwr=r(eIe," \u2014 "),cJ=n(eIe,"A",{href:!0});var e6t=s(cJ);Iwr=r(e6t,"TFLayoutLMForTokenClassification"),e6t.forEach(t),Nwr=r(eIe," (LayoutLM model)"),eIe.forEach(t),qwr=i(me),WE=n(me,"LI",{});var oIe=s(WE);DFe=n(oIe,"STRONG",{});var o6t=s(DFe);jwr=r(o6t,"longformer"),o6t.forEach(t),Dwr=r(oIe," \u2014 "),fJ=n(oIe,"A",{href:!0});var r6t=s(fJ);Gwr=r(r6t,"TFLongformerForTokenClassification"),r6t.forEach(t),Owr=r(oIe," (Longformer model)"),oIe.forEach(t),Vwr=i(me),QE=n(me,"LI",{});var rIe=s(QE);GFe=n(rIe,"STRONG",{});var t6t=s(GFe);Xwr=r(t6t,"mobilebert"),t6t.forEach(t),zwr=r(rIe," \u2014 "),mJ=n(rIe,"A",{href:!0});var a6t=s(mJ);Wwr=r(a6t,"TFMobileBertForTokenClassification"),a6t.forEach(t),Qwr=r(rIe," (MobileBERT model)"),rIe.forEach(t),Hwr=i(me),HE=n(me,"LI",{});var tIe=s(HE);OFe=n(tIe,"STRONG",{});var n6t=s(OFe);Uwr=r(n6t,"mpnet"),n6t.forEach(t),Jwr=r(tIe," \u2014 "),gJ=n(tIe,"A",{href:!0});var s6t=s(gJ);Ywr=r(s6t,"TFMPNetForTokenClassification"),s6t.forEach(t),Kwr=r(tIe," (MPNet model)"),tIe.forEach(t),Zwr=i(me),UE=n(me,"LI",{});var aIe=s(UE);VFe=n(aIe,"STRONG",{});var l6t=s(VFe);e6r=r(l6t,"rembert"),l6t.forEach(t),o6r=r(aIe," \u2014 "),hJ=n(aIe,"A",{href:!0});var i6t=s(hJ);r6r=r(i6t,"TFRemBertForTokenClassification"),i6t.forEach(t),t6r=r(aIe," (RemBERT model)"),aIe.forEach(t),a6r=i(me),JE=n(me,"LI",{});var nIe=s(JE);XFe=n(nIe,"STRONG",{});var d6t=s(XFe);n6r=r(d6t,"roberta"),d6t.forEach(t),s6r=r(nIe," \u2014 "),pJ=n(nIe,"A",{href:!0});var c6t=s(pJ);l6r=r(c6t,"TFRobertaForTokenClassification"),c6t.forEach(t),i6r=r(nIe," (RoBERTa model)"),nIe.forEach(t),d6r=i(me),YE=n(me,"LI",{});var sIe=s(YE);zFe=n(sIe,"STRONG",{});var f6t=s(zFe);c6r=r(f6t,"roformer"),f6t.forEach(t),f6r=r(sIe," \u2014 "),_J=n(sIe,"A",{href:!0});var m6t=s(_J);m6r=r(m6t,"TFRoFormerForTokenClassification"),m6t.forEach(t),g6r=r(sIe," (RoFormer model)"),sIe.forEach(t),h6r=i(me),KE=n(me,"LI",{});var lIe=s(KE);WFe=n(lIe,"STRONG",{});var g6t=s(WFe);p6r=r(g6t,"xlm"),g6t.forEach(t),_6r=r(lIe," \u2014 "),uJ=n(lIe,"A",{href:!0});var h6t=s(uJ);u6r=r(h6t,"TFXLMForTokenClassification"),h6t.forEach(t),b6r=r(lIe," (XLM model)"),lIe.forEach(t),v6r=i(me),ZE=n(me,"LI",{});var iIe=s(ZE);QFe=n(iIe,"STRONG",{});var p6t=s(QFe);F6r=r(p6t,"xlm-roberta"),p6t.forEach(t),T6r=r(iIe," \u2014 "),bJ=n(iIe,"A",{href:!0});var _6t=s(bJ);M6r=r(_6t,"TFXLMRobertaForTokenClassification"),_6t.forEach(t),E6r=r(iIe," (XLM-RoBERTa model)"),iIe.forEach(t),C6r=i(me),eC=n(me,"LI",{});var dIe=s(eC);HFe=n(dIe,"STRONG",{});var u6t=s(HFe);w6r=r(u6t,"xlnet"),u6t.forEach(t),A6r=r(dIe," \u2014 "),vJ=n(dIe,"A",{href:!0});var b6t=s(vJ);y6r=r(b6t,"TFXLNetForTokenClassification"),b6t.forEach(t),L6r=r(dIe," (XLNet model)"),dIe.forEach(t),me.forEach(t),x6r=i(Bl),T(oC.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),aDe=i(f),Tc=n(f,"H2",{class:!0});var fOe=s(Tc);rC=n(fOe,"A",{id:!0,class:!0,href:!0});var v6t=s(rC);UFe=n(v6t,"SPAN",{});var F6t=s(UFe);T(b9.$$.fragment,F6t),F6t.forEach(t),v6t.forEach(t),$6r=i(fOe),JFe=n(fOe,"SPAN",{});var T6t=s(JFe);k6r=r(T6t,"TFAutoModelForQuestionAnswering"),T6t.forEach(t),fOe.forEach(t),nDe=i(f),ir=n(f,"DIV",{class:!0});var Il=s(ir);T(v9.$$.fragment,Il),S6r=i(Il),Mc=n(Il,"P",{});var Hee=s(Mc);R6r=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FJ=n(Hee,"A",{href:!0});var M6t=s(FJ);P6r=r(M6t,"from_pretrained()"),M6t.forEach(t),B6r=r(Hee," class method or the "),TJ=n(Hee,"A",{href:!0});var E6t=s(TJ);I6r=r(E6t,"from_config()"),E6t.forEach(t),N6r=r(Hee,` class
method.`),Hee.forEach(t),q6r=i(Il),F9=n(Il,"P",{});var mOe=s(F9);j6r=r(mOe,"This class cannot be instantiated directly using "),YFe=n(mOe,"CODE",{});var C6t=s(YFe);D6r=r(C6t,"__init__()"),C6t.forEach(t),G6r=r(mOe," (throws an error)."),mOe.forEach(t),O6r=i(Il),qt=n(Il,"DIV",{class:!0});var oA=s(qt);T(T9.$$.fragment,oA),V6r=i(oA),KFe=n(oA,"P",{});var w6t=s(KFe);X6r=r(w6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),w6t.forEach(t),z6r=i(oA),Ec=n(oA,"P",{});var Uee=s(Ec);W6r=r(Uee,`Note:
Loading a model from its configuration file does `),ZFe=n(Uee,"STRONG",{});var A6t=s(ZFe);Q6r=r(A6t,"not"),A6t.forEach(t),H6r=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=n(Uee,"A",{href:!0});var y6t=s(MJ);U6r=r(y6t,"from_pretrained()"),y6t.forEach(t),J6r=r(Uee," to load the model weights."),Uee.forEach(t),Y6r=i(oA),T(tC.$$.fragment,oA),oA.forEach(t),K6r=i(Il),Ir=n(Il,"DIV",{class:!0});var Nl=s(Ir);T(M9.$$.fragment,Nl),Z6r=i(Nl),eTe=n(Nl,"P",{});var L6t=s(eTe);eAr=r(L6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),L6t.forEach(t),oAr=i(Nl),fn=n(Nl,"P",{});var rA=s(fn);rAr=r(rA,"The model class to instantiate is selected based on the "),oTe=n(rA,"CODE",{});var x6t=s(oTe);tAr=r(x6t,"model_type"),x6t.forEach(t),aAr=r(rA,` property of the config object (either
passed as an argument or loaded from `),rTe=n(rA,"CODE",{});var $6t=s(rTe);nAr=r($6t,"pretrained_model_name_or_path"),$6t.forEach(t),sAr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=n(rA,"CODE",{});var k6t=s(tTe);lAr=r(k6t,"pretrained_model_name_or_path"),k6t.forEach(t),iAr=r(rA,":"),rA.forEach(t),dAr=i(Nl),ce=n(Nl,"UL",{});var ge=s(ce);aC=n(ge,"LI",{});var cIe=s(aC);aTe=n(cIe,"STRONG",{});var S6t=s(aTe);cAr=r(S6t,"albert"),S6t.forEach(t),fAr=r(cIe," \u2014 "),EJ=n(cIe,"A",{href:!0});var R6t=s(EJ);mAr=r(R6t,"TFAlbertForQuestionAnswering"),R6t.forEach(t),gAr=r(cIe," (ALBERT model)"),cIe.forEach(t),hAr=i(ge),nC=n(ge,"LI",{});var fIe=s(nC);nTe=n(fIe,"STRONG",{});var P6t=s(nTe);pAr=r(P6t,"bert"),P6t.forEach(t),_Ar=r(fIe," \u2014 "),CJ=n(fIe,"A",{href:!0});var B6t=s(CJ);uAr=r(B6t,"TFBertForQuestionAnswering"),B6t.forEach(t),bAr=r(fIe," (BERT model)"),fIe.forEach(t),vAr=i(ge),sC=n(ge,"LI",{});var mIe=s(sC);sTe=n(mIe,"STRONG",{});var I6t=s(sTe);FAr=r(I6t,"camembert"),I6t.forEach(t),TAr=r(mIe," \u2014 "),wJ=n(mIe,"A",{href:!0});var N6t=s(wJ);MAr=r(N6t,"TFCamembertForQuestionAnswering"),N6t.forEach(t),EAr=r(mIe," (CamemBERT model)"),mIe.forEach(t),CAr=i(ge),lC=n(ge,"LI",{});var gIe=s(lC);lTe=n(gIe,"STRONG",{});var q6t=s(lTe);wAr=r(q6t,"convbert"),q6t.forEach(t),AAr=r(gIe," \u2014 "),AJ=n(gIe,"A",{href:!0});var j6t=s(AJ);yAr=r(j6t,"TFConvBertForQuestionAnswering"),j6t.forEach(t),LAr=r(gIe," (ConvBERT model)"),gIe.forEach(t),xAr=i(ge),iC=n(ge,"LI",{});var hIe=s(iC);iTe=n(hIe,"STRONG",{});var D6t=s(iTe);$Ar=r(D6t,"deberta"),D6t.forEach(t),kAr=r(hIe," \u2014 "),yJ=n(hIe,"A",{href:!0});var G6t=s(yJ);SAr=r(G6t,"TFDebertaForQuestionAnswering"),G6t.forEach(t),RAr=r(hIe," (DeBERTa model)"),hIe.forEach(t),PAr=i(ge),dC=n(ge,"LI",{});var pIe=s(dC);dTe=n(pIe,"STRONG",{});var O6t=s(dTe);BAr=r(O6t,"deberta-v2"),O6t.forEach(t),IAr=r(pIe," \u2014 "),LJ=n(pIe,"A",{href:!0});var V6t=s(LJ);NAr=r(V6t,"TFDebertaV2ForQuestionAnswering"),V6t.forEach(t),qAr=r(pIe," (DeBERTa-v2 model)"),pIe.forEach(t),jAr=i(ge),cC=n(ge,"LI",{});var _Ie=s(cC);cTe=n(_Ie,"STRONG",{});var X6t=s(cTe);DAr=r(X6t,"distilbert"),X6t.forEach(t),GAr=r(_Ie," \u2014 "),xJ=n(_Ie,"A",{href:!0});var z6t=s(xJ);OAr=r(z6t,"TFDistilBertForQuestionAnswering"),z6t.forEach(t),VAr=r(_Ie," (DistilBERT model)"),_Ie.forEach(t),XAr=i(ge),fC=n(ge,"LI",{});var uIe=s(fC);fTe=n(uIe,"STRONG",{});var W6t=s(fTe);zAr=r(W6t,"electra"),W6t.forEach(t),WAr=r(uIe," \u2014 "),$J=n(uIe,"A",{href:!0});var Q6t=s($J);QAr=r(Q6t,"TFElectraForQuestionAnswering"),Q6t.forEach(t),HAr=r(uIe," (ELECTRA model)"),uIe.forEach(t),UAr=i(ge),mC=n(ge,"LI",{});var bIe=s(mC);mTe=n(bIe,"STRONG",{});var H6t=s(mTe);JAr=r(H6t,"flaubert"),H6t.forEach(t),YAr=r(bIe," \u2014 "),kJ=n(bIe,"A",{href:!0});var U6t=s(kJ);KAr=r(U6t,"TFFlaubertForQuestionAnsweringSimple"),U6t.forEach(t),ZAr=r(bIe," (FlauBERT model)"),bIe.forEach(t),eyr=i(ge),gC=n(ge,"LI",{});var vIe=s(gC);gTe=n(vIe,"STRONG",{});var J6t=s(gTe);oyr=r(J6t,"funnel"),J6t.forEach(t),ryr=r(vIe," \u2014 "),SJ=n(vIe,"A",{href:!0});var Y6t=s(SJ);tyr=r(Y6t,"TFFunnelForQuestionAnswering"),Y6t.forEach(t),ayr=r(vIe," (Funnel Transformer model)"),vIe.forEach(t),nyr=i(ge),hC=n(ge,"LI",{});var FIe=s(hC);hTe=n(FIe,"STRONG",{});var K6t=s(hTe);syr=r(K6t,"gptj"),K6t.forEach(t),lyr=r(FIe," \u2014 "),RJ=n(FIe,"A",{href:!0});var Z6t=s(RJ);iyr=r(Z6t,"TFGPTJForQuestionAnswering"),Z6t.forEach(t),dyr=r(FIe," (GPT-J model)"),FIe.forEach(t),cyr=i(ge),pC=n(ge,"LI",{});var TIe=s(pC);pTe=n(TIe,"STRONG",{});var eAt=s(pTe);fyr=r(eAt,"longformer"),eAt.forEach(t),myr=r(TIe," \u2014 "),PJ=n(TIe,"A",{href:!0});var oAt=s(PJ);gyr=r(oAt,"TFLongformerForQuestionAnswering"),oAt.forEach(t),hyr=r(TIe," (Longformer model)"),TIe.forEach(t),pyr=i(ge),_C=n(ge,"LI",{});var MIe=s(_C);_Te=n(MIe,"STRONG",{});var rAt=s(_Te);_yr=r(rAt,"mobilebert"),rAt.forEach(t),uyr=r(MIe," \u2014 "),BJ=n(MIe,"A",{href:!0});var tAt=s(BJ);byr=r(tAt,"TFMobileBertForQuestionAnswering"),tAt.forEach(t),vyr=r(MIe," (MobileBERT model)"),MIe.forEach(t),Fyr=i(ge),uC=n(ge,"LI",{});var EIe=s(uC);uTe=n(EIe,"STRONG",{});var aAt=s(uTe);Tyr=r(aAt,"mpnet"),aAt.forEach(t),Myr=r(EIe," \u2014 "),IJ=n(EIe,"A",{href:!0});var nAt=s(IJ);Eyr=r(nAt,"TFMPNetForQuestionAnswering"),nAt.forEach(t),Cyr=r(EIe," (MPNet model)"),EIe.forEach(t),wyr=i(ge),bC=n(ge,"LI",{});var CIe=s(bC);bTe=n(CIe,"STRONG",{});var sAt=s(bTe);Ayr=r(sAt,"rembert"),sAt.forEach(t),yyr=r(CIe," \u2014 "),NJ=n(CIe,"A",{href:!0});var lAt=s(NJ);Lyr=r(lAt,"TFRemBertForQuestionAnswering"),lAt.forEach(t),xyr=r(CIe," (RemBERT model)"),CIe.forEach(t),$yr=i(ge),vC=n(ge,"LI",{});var wIe=s(vC);vTe=n(wIe,"STRONG",{});var iAt=s(vTe);kyr=r(iAt,"roberta"),iAt.forEach(t),Syr=r(wIe," \u2014 "),qJ=n(wIe,"A",{href:!0});var dAt=s(qJ);Ryr=r(dAt,"TFRobertaForQuestionAnswering"),dAt.forEach(t),Pyr=r(wIe," (RoBERTa model)"),wIe.forEach(t),Byr=i(ge),FC=n(ge,"LI",{});var AIe=s(FC);FTe=n(AIe,"STRONG",{});var cAt=s(FTe);Iyr=r(cAt,"roformer"),cAt.forEach(t),Nyr=r(AIe," \u2014 "),jJ=n(AIe,"A",{href:!0});var fAt=s(jJ);qyr=r(fAt,"TFRoFormerForQuestionAnswering"),fAt.forEach(t),jyr=r(AIe," (RoFormer model)"),AIe.forEach(t),Dyr=i(ge),TC=n(ge,"LI",{});var yIe=s(TC);TTe=n(yIe,"STRONG",{});var mAt=s(TTe);Gyr=r(mAt,"xlm"),mAt.forEach(t),Oyr=r(yIe," \u2014 "),DJ=n(yIe,"A",{href:!0});var gAt=s(DJ);Vyr=r(gAt,"TFXLMForQuestionAnsweringSimple"),gAt.forEach(t),Xyr=r(yIe," (XLM model)"),yIe.forEach(t),zyr=i(ge),MC=n(ge,"LI",{});var LIe=s(MC);MTe=n(LIe,"STRONG",{});var hAt=s(MTe);Wyr=r(hAt,"xlm-roberta"),hAt.forEach(t),Qyr=r(LIe," \u2014 "),GJ=n(LIe,"A",{href:!0});var pAt=s(GJ);Hyr=r(pAt,"TFXLMRobertaForQuestionAnswering"),pAt.forEach(t),Uyr=r(LIe," (XLM-RoBERTa model)"),LIe.forEach(t),Jyr=i(ge),EC=n(ge,"LI",{});var xIe=s(EC);ETe=n(xIe,"STRONG",{});var _At=s(ETe);Yyr=r(_At,"xlnet"),_At.forEach(t),Kyr=r(xIe," \u2014 "),OJ=n(xIe,"A",{href:!0});var uAt=s(OJ);Zyr=r(uAt,"TFXLNetForQuestionAnsweringSimple"),uAt.forEach(t),eLr=r(xIe," (XLNet model)"),xIe.forEach(t),ge.forEach(t),oLr=i(Nl),T(CC.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),sDe=i(f),Cc=n(f,"H2",{class:!0});var gOe=s(Cc);wC=n(gOe,"A",{id:!0,class:!0,href:!0});var bAt=s(wC);CTe=n(bAt,"SPAN",{});var vAt=s(CTe);T(E9.$$.fragment,vAt),vAt.forEach(t),bAt.forEach(t),rLr=i(gOe),wTe=n(gOe,"SPAN",{});var FAt=s(wTe);tLr=r(FAt,"TFAutoModelForVision2Seq"),FAt.forEach(t),gOe.forEach(t),lDe=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(C9.$$.fragment,ql),aLr=i(ql),wc=n(ql,"P",{});var Jee=s(wc);nLr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VJ=n(Jee,"A",{href:!0});var TAt=s(VJ);sLr=r(TAt,"from_pretrained()"),TAt.forEach(t),lLr=r(Jee," class method or the "),XJ=n(Jee,"A",{href:!0});var MAt=s(XJ);iLr=r(MAt,"from_config()"),MAt.forEach(t),dLr=r(Jee,` class
method.`),Jee.forEach(t),cLr=i(ql),w9=n(ql,"P",{});var hOe=s(w9);fLr=r(hOe,"This class cannot be instantiated directly using "),ATe=n(hOe,"CODE",{});var EAt=s(ATe);mLr=r(EAt,"__init__()"),EAt.forEach(t),gLr=r(hOe," (throws an error)."),hOe.forEach(t),hLr=i(ql),jt=n(ql,"DIV",{class:!0});var tA=s(jt);T(A9.$$.fragment,tA),pLr=i(tA),yTe=n(tA,"P",{});var CAt=s(yTe);_Lr=r(CAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),CAt.forEach(t),uLr=i(tA),Ac=n(tA,"P",{});var Yee=s(Ac);bLr=r(Yee,`Note:
Loading a model from its configuration file does `),LTe=n(Yee,"STRONG",{});var wAt=s(LTe);vLr=r(wAt,"not"),wAt.forEach(t),FLr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(Yee,"A",{href:!0});var AAt=s(zJ);TLr=r(AAt,"from_pretrained()"),AAt.forEach(t),MLr=r(Yee," to load the model weights."),Yee.forEach(t),ELr=i(tA),T(AC.$$.fragment,tA),tA.forEach(t),CLr=i(ql),Nr=n(ql,"DIV",{class:!0});var jl=s(Nr);T(y9.$$.fragment,jl),wLr=i(jl),xTe=n(jl,"P",{});var yAt=s(xTe);ALr=r(yAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yAt.forEach(t),yLr=i(jl),mn=n(jl,"P",{});var aA=s(mn);LLr=r(aA,"The model class to instantiate is selected based on the "),$Te=n(aA,"CODE",{});var LAt=s($Te);xLr=r(LAt,"model_type"),LAt.forEach(t),$Lr=r(aA,` property of the config object (either
passed as an argument or loaded from `),kTe=n(aA,"CODE",{});var xAt=s(kTe);kLr=r(xAt,"pretrained_model_name_or_path"),xAt.forEach(t),SLr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=n(aA,"CODE",{});var $At=s(STe);RLr=r($At,"pretrained_model_name_or_path"),$At.forEach(t),PLr=r(aA,":"),aA.forEach(t),BLr=i(jl),RTe=n(jl,"UL",{});var kAt=s(RTe);yC=n(kAt,"LI",{});var $Ie=s(yC);PTe=n($Ie,"STRONG",{});var SAt=s(PTe);ILr=r(SAt,"vision-encoder-decoder"),SAt.forEach(t),NLr=r($Ie," \u2014 "),WJ=n($Ie,"A",{href:!0});var RAt=s(WJ);qLr=r(RAt,"TFVisionEncoderDecoderModel"),RAt.forEach(t),jLr=r($Ie," (Vision Encoder decoder model)"),$Ie.forEach(t),kAt.forEach(t),DLr=i(jl),T(LC.$$.fragment,jl),jl.forEach(t),ql.forEach(t),iDe=i(f),yc=n(f,"H2",{class:!0});var pOe=s(yc);xC=n(pOe,"A",{id:!0,class:!0,href:!0});var PAt=s(xC);BTe=n(PAt,"SPAN",{});var BAt=s(BTe);T(L9.$$.fragment,BAt),BAt.forEach(t),PAt.forEach(t),GLr=i(pOe),ITe=n(pOe,"SPAN",{});var IAt=s(ITe);OLr=r(IAt,"TFAutoModelForSpeechSeq2Seq"),IAt.forEach(t),pOe.forEach(t),dDe=i(f),cr=n(f,"DIV",{class:!0});var Dl=s(cr);T(x9.$$.fragment,Dl),VLr=i(Dl),Lc=n(Dl,"P",{});var Kee=s(Lc);XLr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QJ=n(Kee,"A",{href:!0});var NAt=s(QJ);zLr=r(NAt,"from_pretrained()"),NAt.forEach(t),WLr=r(Kee," class method or the "),HJ=n(Kee,"A",{href:!0});var qAt=s(HJ);QLr=r(qAt,"from_config()"),qAt.forEach(t),HLr=r(Kee,` class
method.`),Kee.forEach(t),ULr=i(Dl),$9=n(Dl,"P",{});var _Oe=s($9);JLr=r(_Oe,"This class cannot be instantiated directly using "),NTe=n(_Oe,"CODE",{});var jAt=s(NTe);YLr=r(jAt,"__init__()"),jAt.forEach(t),KLr=r(_Oe," (throws an error)."),_Oe.forEach(t),ZLr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var nA=s(Dt);T(k9.$$.fragment,nA),e8r=i(nA),qTe=n(nA,"P",{});var DAt=s(qTe);o8r=r(DAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),DAt.forEach(t),r8r=i(nA),xc=n(nA,"P",{});var Zee=s(xc);t8r=r(Zee,`Note:
Loading a model from its configuration file does `),jTe=n(Zee,"STRONG",{});var GAt=s(jTe);a8r=r(GAt,"not"),GAt.forEach(t),n8r=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=n(Zee,"A",{href:!0});var OAt=s(UJ);s8r=r(OAt,"from_pretrained()"),OAt.forEach(t),l8r=r(Zee," to load the model weights."),Zee.forEach(t),i8r=i(nA),T($C.$$.fragment,nA),nA.forEach(t),d8r=i(Dl),qr=n(Dl,"DIV",{class:!0});var Gl=s(qr);T(S9.$$.fragment,Gl),c8r=i(Gl),DTe=n(Gl,"P",{});var VAt=s(DTe);f8r=r(VAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),VAt.forEach(t),m8r=i(Gl),gn=n(Gl,"P",{});var sA=s(gn);g8r=r(sA,"The model class to instantiate is selected based on the "),GTe=n(sA,"CODE",{});var XAt=s(GTe);h8r=r(XAt,"model_type"),XAt.forEach(t),p8r=r(sA,` property of the config object (either
passed as an argument or loaded from `),OTe=n(sA,"CODE",{});var zAt=s(OTe);_8r=r(zAt,"pretrained_model_name_or_path"),zAt.forEach(t),u8r=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=n(sA,"CODE",{});var WAt=s(VTe);b8r=r(WAt,"pretrained_model_name_or_path"),WAt.forEach(t),v8r=r(sA,":"),sA.forEach(t),F8r=i(Gl),XTe=n(Gl,"UL",{});var QAt=s(XTe);kC=n(QAt,"LI",{});var kIe=s(kC);zTe=n(kIe,"STRONG",{});var HAt=s(zTe);T8r=r(HAt,"speech_to_text"),HAt.forEach(t),M8r=r(kIe," \u2014 "),JJ=n(kIe,"A",{href:!0});var UAt=s(JJ);E8r=r(UAt,"TFSpeech2TextForConditionalGeneration"),UAt.forEach(t),C8r=r(kIe," (Speech2Text model)"),kIe.forEach(t),QAt.forEach(t),w8r=i(Gl),T(SC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),cDe=i(f),$c=n(f,"H2",{class:!0});var uOe=s($c);RC=n(uOe,"A",{id:!0,class:!0,href:!0});var JAt=s(RC);WTe=n(JAt,"SPAN",{});var YAt=s(WTe);T(R9.$$.fragment,YAt),YAt.forEach(t),JAt.forEach(t),A8r=i(uOe),QTe=n(uOe,"SPAN",{});var KAt=s(QTe);y8r=r(KAt,"FlaxAutoModel"),KAt.forEach(t),uOe.forEach(t),fDe=i(f),fr=n(f,"DIV",{class:!0});var Ol=s(fr);T(P9.$$.fragment,Ol),L8r=i(Ol),kc=n(Ol,"P",{});var eoe=s(kc);x8r=r(eoe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YJ=n(eoe,"A",{href:!0});var ZAt=s(YJ);$8r=r(ZAt,"from_pretrained()"),ZAt.forEach(t),k8r=r(eoe," class method or the "),KJ=n(eoe,"A",{href:!0});var eyt=s(KJ);S8r=r(eyt,"from_config()"),eyt.forEach(t),R8r=r(eoe,` class
method.`),eoe.forEach(t),P8r=i(Ol),B9=n(Ol,"P",{});var bOe=s(B9);B8r=r(bOe,"This class cannot be instantiated directly using "),HTe=n(bOe,"CODE",{});var oyt=s(HTe);I8r=r(oyt,"__init__()"),oyt.forEach(t),N8r=r(bOe," (throws an error)."),bOe.forEach(t),q8r=i(Ol),Gt=n(Ol,"DIV",{class:!0});var lA=s(Gt);T(I9.$$.fragment,lA),j8r=i(lA),UTe=n(lA,"P",{});var ryt=s(UTe);D8r=r(ryt,"Instantiates one of the base model classes of the library from a configuration."),ryt.forEach(t),G8r=i(lA),Sc=n(lA,"P",{});var ooe=s(Sc);O8r=r(ooe,`Note:
Loading a model from its configuration file does `),JTe=n(ooe,"STRONG",{});var tyt=s(JTe);V8r=r(tyt,"not"),tyt.forEach(t),X8r=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=n(ooe,"A",{href:!0});var ayt=s(ZJ);z8r=r(ayt,"from_pretrained()"),ayt.forEach(t),W8r=r(ooe," to load the model weights."),ooe.forEach(t),Q8r=i(lA),T(PC.$$.fragment,lA),lA.forEach(t),H8r=i(Ol),jr=n(Ol,"DIV",{class:!0});var Vl=s(jr);T(N9.$$.fragment,Vl),U8r=i(Vl),YTe=n(Vl,"P",{});var nyt=s(YTe);J8r=r(nyt,"Instantiate one of the base model classes of the library from a pretrained model."),nyt.forEach(t),Y8r=i(Vl),hn=n(Vl,"P",{});var iA=s(hn);K8r=r(iA,"The model class to instantiate is selected based on the "),KTe=n(iA,"CODE",{});var syt=s(KTe);Z8r=r(syt,"model_type"),syt.forEach(t),e9r=r(iA,` property of the config object (either
passed as an argument or loaded from `),ZTe=n(iA,"CODE",{});var lyt=s(ZTe);o9r=r(lyt,"pretrained_model_name_or_path"),lyt.forEach(t),r9r=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e7e=n(iA,"CODE",{});var iyt=s(e7e);t9r=r(iyt,"pretrained_model_name_or_path"),iyt.forEach(t),a9r=r(iA,":"),iA.forEach(t),n9r=i(Vl),re=n(Vl,"UL",{});var ne=s(re);BC=n(ne,"LI",{});var SIe=s(BC);o7e=n(SIe,"STRONG",{});var dyt=s(o7e);s9r=r(dyt,"albert"),dyt.forEach(t),l9r=r(SIe," \u2014 "),eY=n(SIe,"A",{href:!0});var cyt=s(eY);i9r=r(cyt,"FlaxAlbertModel"),cyt.forEach(t),d9r=r(SIe," (ALBERT model)"),SIe.forEach(t),c9r=i(ne),IC=n(ne,"LI",{});var RIe=s(IC);r7e=n(RIe,"STRONG",{});var fyt=s(r7e);f9r=r(fyt,"bart"),fyt.forEach(t),m9r=r(RIe," \u2014 "),oY=n(RIe,"A",{href:!0});var myt=s(oY);g9r=r(myt,"FlaxBartModel"),myt.forEach(t),h9r=r(RIe," (BART model)"),RIe.forEach(t),p9r=i(ne),NC=n(ne,"LI",{});var PIe=s(NC);t7e=n(PIe,"STRONG",{});var gyt=s(t7e);_9r=r(gyt,"beit"),gyt.forEach(t),u9r=r(PIe," \u2014 "),rY=n(PIe,"A",{href:!0});var hyt=s(rY);b9r=r(hyt,"FlaxBeitModel"),hyt.forEach(t),v9r=r(PIe," (BEiT model)"),PIe.forEach(t),F9r=i(ne),qC=n(ne,"LI",{});var BIe=s(qC);a7e=n(BIe,"STRONG",{});var pyt=s(a7e);T9r=r(pyt,"bert"),pyt.forEach(t),M9r=r(BIe," \u2014 "),tY=n(BIe,"A",{href:!0});var _yt=s(tY);E9r=r(_yt,"FlaxBertModel"),_yt.forEach(t),C9r=r(BIe," (BERT model)"),BIe.forEach(t),w9r=i(ne),jC=n(ne,"LI",{});var IIe=s(jC);n7e=n(IIe,"STRONG",{});var uyt=s(n7e);A9r=r(uyt,"big_bird"),uyt.forEach(t),y9r=r(IIe," \u2014 "),aY=n(IIe,"A",{href:!0});var byt=s(aY);L9r=r(byt,"FlaxBigBirdModel"),byt.forEach(t),x9r=r(IIe," (BigBird model)"),IIe.forEach(t),$9r=i(ne),DC=n(ne,"LI",{});var NIe=s(DC);s7e=n(NIe,"STRONG",{});var vyt=s(s7e);k9r=r(vyt,"blenderbot"),vyt.forEach(t),S9r=r(NIe," \u2014 "),nY=n(NIe,"A",{href:!0});var Fyt=s(nY);R9r=r(Fyt,"FlaxBlenderbotModel"),Fyt.forEach(t),P9r=r(NIe," (Blenderbot model)"),NIe.forEach(t),B9r=i(ne),GC=n(ne,"LI",{});var qIe=s(GC);l7e=n(qIe,"STRONG",{});var Tyt=s(l7e);I9r=r(Tyt,"blenderbot-small"),Tyt.forEach(t),N9r=r(qIe," \u2014 "),sY=n(qIe,"A",{href:!0});var Myt=s(sY);q9r=r(Myt,"FlaxBlenderbotSmallModel"),Myt.forEach(t),j9r=r(qIe," (BlenderbotSmall model)"),qIe.forEach(t),D9r=i(ne),OC=n(ne,"LI",{});var jIe=s(OC);i7e=n(jIe,"STRONG",{});var Eyt=s(i7e);G9r=r(Eyt,"clip"),Eyt.forEach(t),O9r=r(jIe," \u2014 "),lY=n(jIe,"A",{href:!0});var Cyt=s(lY);V9r=r(Cyt,"FlaxCLIPModel"),Cyt.forEach(t),X9r=r(jIe," (CLIP model)"),jIe.forEach(t),z9r=i(ne),VC=n(ne,"LI",{});var DIe=s(VC);d7e=n(DIe,"STRONG",{});var wyt=s(d7e);W9r=r(wyt,"distilbert"),wyt.forEach(t),Q9r=r(DIe," \u2014 "),iY=n(DIe,"A",{href:!0});var Ayt=s(iY);H9r=r(Ayt,"FlaxDistilBertModel"),Ayt.forEach(t),U9r=r(DIe," (DistilBERT model)"),DIe.forEach(t),J9r=i(ne),XC=n(ne,"LI",{});var GIe=s(XC);c7e=n(GIe,"STRONG",{});var yyt=s(c7e);Y9r=r(yyt,"electra"),yyt.forEach(t),K9r=r(GIe," \u2014 "),dY=n(GIe,"A",{href:!0});var Lyt=s(dY);Z9r=r(Lyt,"FlaxElectraModel"),Lyt.forEach(t),exr=r(GIe," (ELECTRA model)"),GIe.forEach(t),oxr=i(ne),zC=n(ne,"LI",{});var OIe=s(zC);f7e=n(OIe,"STRONG",{});var xyt=s(f7e);rxr=r(xyt,"gpt2"),xyt.forEach(t),txr=r(OIe," \u2014 "),cY=n(OIe,"A",{href:!0});var $yt=s(cY);axr=r($yt,"FlaxGPT2Model"),$yt.forEach(t),nxr=r(OIe," (OpenAI GPT-2 model)"),OIe.forEach(t),sxr=i(ne),WC=n(ne,"LI",{});var VIe=s(WC);m7e=n(VIe,"STRONG",{});var kyt=s(m7e);lxr=r(kyt,"gpt_neo"),kyt.forEach(t),ixr=r(VIe," \u2014 "),fY=n(VIe,"A",{href:!0});var Syt=s(fY);dxr=r(Syt,"FlaxGPTNeoModel"),Syt.forEach(t),cxr=r(VIe," (GPT Neo model)"),VIe.forEach(t),fxr=i(ne),QC=n(ne,"LI",{});var XIe=s(QC);g7e=n(XIe,"STRONG",{});var Ryt=s(g7e);mxr=r(Ryt,"gptj"),Ryt.forEach(t),gxr=r(XIe," \u2014 "),mY=n(XIe,"A",{href:!0});var Pyt=s(mY);hxr=r(Pyt,"FlaxGPTJModel"),Pyt.forEach(t),pxr=r(XIe," (GPT-J model)"),XIe.forEach(t),_xr=i(ne),HC=n(ne,"LI",{});var zIe=s(HC);h7e=n(zIe,"STRONG",{});var Byt=s(h7e);uxr=r(Byt,"marian"),Byt.forEach(t),bxr=r(zIe," \u2014 "),gY=n(zIe,"A",{href:!0});var Iyt=s(gY);vxr=r(Iyt,"FlaxMarianModel"),Iyt.forEach(t),Fxr=r(zIe," (Marian model)"),zIe.forEach(t),Txr=i(ne),UC=n(ne,"LI",{});var WIe=s(UC);p7e=n(WIe,"STRONG",{});var Nyt=s(p7e);Mxr=r(Nyt,"mbart"),Nyt.forEach(t),Exr=r(WIe," \u2014 "),hY=n(WIe,"A",{href:!0});var qyt=s(hY);Cxr=r(qyt,"FlaxMBartModel"),qyt.forEach(t),wxr=r(WIe," (mBART model)"),WIe.forEach(t),Axr=i(ne),JC=n(ne,"LI",{});var QIe=s(JC);_7e=n(QIe,"STRONG",{});var jyt=s(_7e);yxr=r(jyt,"mt5"),jyt.forEach(t),Lxr=r(QIe," \u2014 "),pY=n(QIe,"A",{href:!0});var Dyt=s(pY);xxr=r(Dyt,"FlaxMT5Model"),Dyt.forEach(t),$xr=r(QIe," (mT5 model)"),QIe.forEach(t),kxr=i(ne),YC=n(ne,"LI",{});var HIe=s(YC);u7e=n(HIe,"STRONG",{});var Gyt=s(u7e);Sxr=r(Gyt,"opt"),Gyt.forEach(t),Rxr=r(HIe," \u2014 "),_Y=n(HIe,"A",{href:!0});var Oyt=s(_Y);Pxr=r(Oyt,"FlaxOPTModel"),Oyt.forEach(t),Bxr=r(HIe," (OPT model)"),HIe.forEach(t),Ixr=i(ne),KC=n(ne,"LI",{});var UIe=s(KC);b7e=n(UIe,"STRONG",{});var Vyt=s(b7e);Nxr=r(Vyt,"pegasus"),Vyt.forEach(t),qxr=r(UIe," \u2014 "),uY=n(UIe,"A",{href:!0});var Xyt=s(uY);jxr=r(Xyt,"FlaxPegasusModel"),Xyt.forEach(t),Dxr=r(UIe," (Pegasus model)"),UIe.forEach(t),Gxr=i(ne),ZC=n(ne,"LI",{});var JIe=s(ZC);v7e=n(JIe,"STRONG",{});var zyt=s(v7e);Oxr=r(zyt,"roberta"),zyt.forEach(t),Vxr=r(JIe," \u2014 "),bY=n(JIe,"A",{href:!0});var Wyt=s(bY);Xxr=r(Wyt,"FlaxRobertaModel"),Wyt.forEach(t),zxr=r(JIe," (RoBERTa model)"),JIe.forEach(t),Wxr=i(ne),e5=n(ne,"LI",{});var YIe=s(e5);F7e=n(YIe,"STRONG",{});var Qyt=s(F7e);Qxr=r(Qyt,"roformer"),Qyt.forEach(t),Hxr=r(YIe," \u2014 "),vY=n(YIe,"A",{href:!0});var Hyt=s(vY);Uxr=r(Hyt,"FlaxRoFormerModel"),Hyt.forEach(t),Jxr=r(YIe," (RoFormer model)"),YIe.forEach(t),Yxr=i(ne),o5=n(ne,"LI",{});var KIe=s(o5);T7e=n(KIe,"STRONG",{});var Uyt=s(T7e);Kxr=r(Uyt,"t5"),Uyt.forEach(t),Zxr=r(KIe," \u2014 "),FY=n(KIe,"A",{href:!0});var Jyt=s(FY);e$r=r(Jyt,"FlaxT5Model"),Jyt.forEach(t),o$r=r(KIe," (T5 model)"),KIe.forEach(t),r$r=i(ne),r5=n(ne,"LI",{});var ZIe=s(r5);M7e=n(ZIe,"STRONG",{});var Yyt=s(M7e);t$r=r(Yyt,"vision-text-dual-encoder"),Yyt.forEach(t),a$r=r(ZIe," \u2014 "),TY=n(ZIe,"A",{href:!0});var Kyt=s(TY);n$r=r(Kyt,"FlaxVisionTextDualEncoderModel"),Kyt.forEach(t),s$r=r(ZIe," (VisionTextDualEncoder model)"),ZIe.forEach(t),l$r=i(ne),t5=n(ne,"LI",{});var eNe=s(t5);E7e=n(eNe,"STRONG",{});var Zyt=s(E7e);i$r=r(Zyt,"vit"),Zyt.forEach(t),d$r=r(eNe," \u2014 "),MY=n(eNe,"A",{href:!0});var eLt=s(MY);c$r=r(eLt,"FlaxViTModel"),eLt.forEach(t),f$r=r(eNe," (ViT model)"),eNe.forEach(t),m$r=i(ne),a5=n(ne,"LI",{});var oNe=s(a5);C7e=n(oNe,"STRONG",{});var oLt=s(C7e);g$r=r(oLt,"wav2vec2"),oLt.forEach(t),h$r=r(oNe," \u2014 "),EY=n(oNe,"A",{href:!0});var rLt=s(EY);p$r=r(rLt,"FlaxWav2Vec2Model"),rLt.forEach(t),_$r=r(oNe," (Wav2Vec2 model)"),oNe.forEach(t),u$r=i(ne),n5=n(ne,"LI",{});var rNe=s(n5);w7e=n(rNe,"STRONG",{});var tLt=s(w7e);b$r=r(tLt,"xglm"),tLt.forEach(t),v$r=r(rNe," \u2014 "),CY=n(rNe,"A",{href:!0});var aLt=s(CY);F$r=r(aLt,"FlaxXGLMModel"),aLt.forEach(t),T$r=r(rNe," (XGLM model)"),rNe.forEach(t),M$r=i(ne),s5=n(ne,"LI",{});var tNe=s(s5);A7e=n(tNe,"STRONG",{});var nLt=s(A7e);E$r=r(nLt,"xlm-roberta"),nLt.forEach(t),C$r=r(tNe," \u2014 "),wY=n(tNe,"A",{href:!0});var sLt=s(wY);w$r=r(sLt,"FlaxXLMRobertaModel"),sLt.forEach(t),A$r=r(tNe," (XLM-RoBERTa model)"),tNe.forEach(t),ne.forEach(t),y$r=i(Vl),T(l5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),mDe=i(f),Rc=n(f,"H2",{class:!0});var vOe=s(Rc);i5=n(vOe,"A",{id:!0,class:!0,href:!0});var lLt=s(i5);y7e=n(lLt,"SPAN",{});var iLt=s(y7e);T(q9.$$.fragment,iLt),iLt.forEach(t),lLt.forEach(t),L$r=i(vOe),L7e=n(vOe,"SPAN",{});var dLt=s(L7e);x$r=r(dLt,"FlaxAutoModelForCausalLM"),dLt.forEach(t),vOe.forEach(t),gDe=i(f),mr=n(f,"DIV",{class:!0});var Xl=s(mr);T(j9.$$.fragment,Xl),$$r=i(Xl),Pc=n(Xl,"P",{});var roe=s(Pc);k$r=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AY=n(roe,"A",{href:!0});var cLt=s(AY);S$r=r(cLt,"from_pretrained()"),cLt.forEach(t),R$r=r(roe," class method or the "),yY=n(roe,"A",{href:!0});var fLt=s(yY);P$r=r(fLt,"from_config()"),fLt.forEach(t),B$r=r(roe,` class
method.`),roe.forEach(t),I$r=i(Xl),D9=n(Xl,"P",{});var FOe=s(D9);N$r=r(FOe,"This class cannot be instantiated directly using "),x7e=n(FOe,"CODE",{});var mLt=s(x7e);q$r=r(mLt,"__init__()"),mLt.forEach(t),j$r=r(FOe," (throws an error)."),FOe.forEach(t),D$r=i(Xl),Ot=n(Xl,"DIV",{class:!0});var dA=s(Ot);T(G9.$$.fragment,dA),G$r=i(dA),$7e=n(dA,"P",{});var gLt=s($7e);O$r=r(gLt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gLt.forEach(t),V$r=i(dA),Bc=n(dA,"P",{});var toe=s(Bc);X$r=r(toe,`Note:
Loading a model from its configuration file does `),k7e=n(toe,"STRONG",{});var hLt=s(k7e);z$r=r(hLt,"not"),hLt.forEach(t),W$r=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=n(toe,"A",{href:!0});var pLt=s(LY);Q$r=r(pLt,"from_pretrained()"),pLt.forEach(t),H$r=r(toe," to load the model weights."),toe.forEach(t),U$r=i(dA),T(d5.$$.fragment,dA),dA.forEach(t),J$r=i(Xl),Dr=n(Xl,"DIV",{class:!0});var zl=s(Dr);T(O9.$$.fragment,zl),Y$r=i(zl),S7e=n(zl,"P",{});var _Lt=s(S7e);K$r=r(_Lt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_Lt.forEach(t),Z$r=i(zl),pn=n(zl,"P",{});var cA=s(pn);ekr=r(cA,"The model class to instantiate is selected based on the "),R7e=n(cA,"CODE",{});var uLt=s(R7e);okr=r(uLt,"model_type"),uLt.forEach(t),rkr=r(cA,` property of the config object (either
passed as an argument or loaded from `),P7e=n(cA,"CODE",{});var bLt=s(P7e);tkr=r(bLt,"pretrained_model_name_or_path"),bLt.forEach(t),akr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B7e=n(cA,"CODE",{});var vLt=s(B7e);nkr=r(vLt,"pretrained_model_name_or_path"),vLt.forEach(t),skr=r(cA,":"),cA.forEach(t),lkr=i(zl),Le=n(zl,"UL",{});var Ie=s(Le);c5=n(Ie,"LI",{});var aNe=s(c5);I7e=n(aNe,"STRONG",{});var FLt=s(I7e);ikr=r(FLt,"bart"),FLt.forEach(t),dkr=r(aNe," \u2014 "),xY=n(aNe,"A",{href:!0});var TLt=s(xY);ckr=r(TLt,"FlaxBartForCausalLM"),TLt.forEach(t),fkr=r(aNe," (BART model)"),aNe.forEach(t),mkr=i(Ie),f5=n(Ie,"LI",{});var nNe=s(f5);N7e=n(nNe,"STRONG",{});var MLt=s(N7e);gkr=r(MLt,"bert"),MLt.forEach(t),hkr=r(nNe," \u2014 "),$Y=n(nNe,"A",{href:!0});var ELt=s($Y);pkr=r(ELt,"FlaxBertForCausalLM"),ELt.forEach(t),_kr=r(nNe," (BERT model)"),nNe.forEach(t),ukr=i(Ie),m5=n(Ie,"LI",{});var sNe=s(m5);q7e=n(sNe,"STRONG",{});var CLt=s(q7e);bkr=r(CLt,"big_bird"),CLt.forEach(t),vkr=r(sNe," \u2014 "),kY=n(sNe,"A",{href:!0});var wLt=s(kY);Fkr=r(wLt,"FlaxBigBirdForCausalLM"),wLt.forEach(t),Tkr=r(sNe," (BigBird model)"),sNe.forEach(t),Mkr=i(Ie),g5=n(Ie,"LI",{});var lNe=s(g5);j7e=n(lNe,"STRONG",{});var ALt=s(j7e);Ekr=r(ALt,"electra"),ALt.forEach(t),Ckr=r(lNe," \u2014 "),SY=n(lNe,"A",{href:!0});var yLt=s(SY);wkr=r(yLt,"FlaxElectraForCausalLM"),yLt.forEach(t),Akr=r(lNe," (ELECTRA model)"),lNe.forEach(t),ykr=i(Ie),h5=n(Ie,"LI",{});var iNe=s(h5);D7e=n(iNe,"STRONG",{});var LLt=s(D7e);Lkr=r(LLt,"gpt2"),LLt.forEach(t),xkr=r(iNe," \u2014 "),RY=n(iNe,"A",{href:!0});var xLt=s(RY);$kr=r(xLt,"FlaxGPT2LMHeadModel"),xLt.forEach(t),kkr=r(iNe," (OpenAI GPT-2 model)"),iNe.forEach(t),Skr=i(Ie),p5=n(Ie,"LI",{});var dNe=s(p5);G7e=n(dNe,"STRONG",{});var $Lt=s(G7e);Rkr=r($Lt,"gpt_neo"),$Lt.forEach(t),Pkr=r(dNe," \u2014 "),PY=n(dNe,"A",{href:!0});var kLt=s(PY);Bkr=r(kLt,"FlaxGPTNeoForCausalLM"),kLt.forEach(t),Ikr=r(dNe," (GPT Neo model)"),dNe.forEach(t),Nkr=i(Ie),_5=n(Ie,"LI",{});var cNe=s(_5);O7e=n(cNe,"STRONG",{});var SLt=s(O7e);qkr=r(SLt,"gptj"),SLt.forEach(t),jkr=r(cNe," \u2014 "),BY=n(cNe,"A",{href:!0});var RLt=s(BY);Dkr=r(RLt,"FlaxGPTJForCausalLM"),RLt.forEach(t),Gkr=r(cNe," (GPT-J model)"),cNe.forEach(t),Okr=i(Ie),u5=n(Ie,"LI",{});var fNe=s(u5);V7e=n(fNe,"STRONG",{});var PLt=s(V7e);Vkr=r(PLt,"opt"),PLt.forEach(t),Xkr=r(fNe," \u2014 "),IY=n(fNe,"A",{href:!0});var BLt=s(IY);zkr=r(BLt,"FlaxOPTForCausalLM"),BLt.forEach(t),Wkr=r(fNe," (OPT model)"),fNe.forEach(t),Qkr=i(Ie),b5=n(Ie,"LI",{});var mNe=s(b5);X7e=n(mNe,"STRONG",{});var ILt=s(X7e);Hkr=r(ILt,"roberta"),ILt.forEach(t),Ukr=r(mNe," \u2014 "),NY=n(mNe,"A",{href:!0});var NLt=s(NY);Jkr=r(NLt,"FlaxRobertaForCausalLM"),NLt.forEach(t),Ykr=r(mNe," (RoBERTa model)"),mNe.forEach(t),Kkr=i(Ie),v5=n(Ie,"LI",{});var gNe=s(v5);z7e=n(gNe,"STRONG",{});var qLt=s(z7e);Zkr=r(qLt,"xglm"),qLt.forEach(t),eSr=r(gNe," \u2014 "),qY=n(gNe,"A",{href:!0});var jLt=s(qY);oSr=r(jLt,"FlaxXGLMForCausalLM"),jLt.forEach(t),rSr=r(gNe," (XGLM model)"),gNe.forEach(t),Ie.forEach(t),tSr=i(zl),T(F5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),hDe=i(f),Ic=n(f,"H2",{class:!0});var TOe=s(Ic);T5=n(TOe,"A",{id:!0,class:!0,href:!0});var DLt=s(T5);W7e=n(DLt,"SPAN",{});var GLt=s(W7e);T(V9.$$.fragment,GLt),GLt.forEach(t),DLt.forEach(t),aSr=i(TOe),Q7e=n(TOe,"SPAN",{});var OLt=s(Q7e);nSr=r(OLt,"FlaxAutoModelForPreTraining"),OLt.forEach(t),TOe.forEach(t),pDe=i(f),gr=n(f,"DIV",{class:!0});var Wl=s(gr);T(X9.$$.fragment,Wl),sSr=i(Wl),Nc=n(Wl,"P",{});var aoe=s(Nc);lSr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jY=n(aoe,"A",{href:!0});var VLt=s(jY);iSr=r(VLt,"from_pretrained()"),VLt.forEach(t),dSr=r(aoe," class method or the "),DY=n(aoe,"A",{href:!0});var XLt=s(DY);cSr=r(XLt,"from_config()"),XLt.forEach(t),fSr=r(aoe,` class
method.`),aoe.forEach(t),mSr=i(Wl),z9=n(Wl,"P",{});var MOe=s(z9);gSr=r(MOe,"This class cannot be instantiated directly using "),H7e=n(MOe,"CODE",{});var zLt=s(H7e);hSr=r(zLt,"__init__()"),zLt.forEach(t),pSr=r(MOe," (throws an error)."),MOe.forEach(t),_Sr=i(Wl),Vt=n(Wl,"DIV",{class:!0});var fA=s(Vt);T(W9.$$.fragment,fA),uSr=i(fA),U7e=n(fA,"P",{});var WLt=s(U7e);bSr=r(WLt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),WLt.forEach(t),vSr=i(fA),qc=n(fA,"P",{});var noe=s(qc);FSr=r(noe,`Note:
Loading a model from its configuration file does `),J7e=n(noe,"STRONG",{});var QLt=s(J7e);TSr=r(QLt,"not"),QLt.forEach(t),MSr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=n(noe,"A",{href:!0});var HLt=s(GY);ESr=r(HLt,"from_pretrained()"),HLt.forEach(t),CSr=r(noe," to load the model weights."),noe.forEach(t),wSr=i(fA),T(M5.$$.fragment,fA),fA.forEach(t),ASr=i(Wl),Gr=n(Wl,"DIV",{class:!0});var Ql=s(Gr);T(Q9.$$.fragment,Ql),ySr=i(Ql),Y7e=n(Ql,"P",{});var ULt=s(Y7e);LSr=r(ULt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ULt.forEach(t),xSr=i(Ql),_n=n(Ql,"P",{});var mA=s(_n);$Sr=r(mA,"The model class to instantiate is selected based on the "),K7e=n(mA,"CODE",{});var JLt=s(K7e);kSr=r(JLt,"model_type"),JLt.forEach(t),SSr=r(mA,` property of the config object (either
passed as an argument or loaded from `),Z7e=n(mA,"CODE",{});var YLt=s(Z7e);RSr=r(YLt,"pretrained_model_name_or_path"),YLt.forEach(t),PSr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eMe=n(mA,"CODE",{});var KLt=s(eMe);BSr=r(KLt,"pretrained_model_name_or_path"),KLt.forEach(t),ISr=r(mA,":"),mA.forEach(t),NSr=i(Ql),Ee=n(Ql,"UL",{});var we=s(Ee);E5=n(we,"LI",{});var hNe=s(E5);oMe=n(hNe,"STRONG",{});var ZLt=s(oMe);qSr=r(ZLt,"albert"),ZLt.forEach(t),jSr=r(hNe," \u2014 "),OY=n(hNe,"A",{href:!0});var e8t=s(OY);DSr=r(e8t,"FlaxAlbertForPreTraining"),e8t.forEach(t),GSr=r(hNe," (ALBERT model)"),hNe.forEach(t),OSr=i(we),C5=n(we,"LI",{});var pNe=s(C5);rMe=n(pNe,"STRONG",{});var o8t=s(rMe);VSr=r(o8t,"bart"),o8t.forEach(t),XSr=r(pNe," \u2014 "),VY=n(pNe,"A",{href:!0});var r8t=s(VY);zSr=r(r8t,"FlaxBartForConditionalGeneration"),r8t.forEach(t),WSr=r(pNe," (BART model)"),pNe.forEach(t),QSr=i(we),w5=n(we,"LI",{});var _Ne=s(w5);tMe=n(_Ne,"STRONG",{});var t8t=s(tMe);HSr=r(t8t,"bert"),t8t.forEach(t),USr=r(_Ne," \u2014 "),XY=n(_Ne,"A",{href:!0});var a8t=s(XY);JSr=r(a8t,"FlaxBertForPreTraining"),a8t.forEach(t),YSr=r(_Ne," (BERT model)"),_Ne.forEach(t),KSr=i(we),A5=n(we,"LI",{});var uNe=s(A5);aMe=n(uNe,"STRONG",{});var n8t=s(aMe);ZSr=r(n8t,"big_bird"),n8t.forEach(t),eRr=r(uNe," \u2014 "),zY=n(uNe,"A",{href:!0});var s8t=s(zY);oRr=r(s8t,"FlaxBigBirdForPreTraining"),s8t.forEach(t),rRr=r(uNe," (BigBird model)"),uNe.forEach(t),tRr=i(we),y5=n(we,"LI",{});var bNe=s(y5);nMe=n(bNe,"STRONG",{});var l8t=s(nMe);aRr=r(l8t,"electra"),l8t.forEach(t),nRr=r(bNe," \u2014 "),WY=n(bNe,"A",{href:!0});var i8t=s(WY);sRr=r(i8t,"FlaxElectraForPreTraining"),i8t.forEach(t),lRr=r(bNe," (ELECTRA model)"),bNe.forEach(t),iRr=i(we),L5=n(we,"LI",{});var vNe=s(L5);sMe=n(vNe,"STRONG",{});var d8t=s(sMe);dRr=r(d8t,"mbart"),d8t.forEach(t),cRr=r(vNe," \u2014 "),QY=n(vNe,"A",{href:!0});var c8t=s(QY);fRr=r(c8t,"FlaxMBartForConditionalGeneration"),c8t.forEach(t),mRr=r(vNe," (mBART model)"),vNe.forEach(t),gRr=i(we),x5=n(we,"LI",{});var FNe=s(x5);lMe=n(FNe,"STRONG",{});var f8t=s(lMe);hRr=r(f8t,"mt5"),f8t.forEach(t),pRr=r(FNe," \u2014 "),HY=n(FNe,"A",{href:!0});var m8t=s(HY);_Rr=r(m8t,"FlaxMT5ForConditionalGeneration"),m8t.forEach(t),uRr=r(FNe," (mT5 model)"),FNe.forEach(t),bRr=i(we),$5=n(we,"LI",{});var TNe=s($5);iMe=n(TNe,"STRONG",{});var g8t=s(iMe);vRr=r(g8t,"roberta"),g8t.forEach(t),FRr=r(TNe," \u2014 "),UY=n(TNe,"A",{href:!0});var h8t=s(UY);TRr=r(h8t,"FlaxRobertaForMaskedLM"),h8t.forEach(t),MRr=r(TNe," (RoBERTa model)"),TNe.forEach(t),ERr=i(we),k5=n(we,"LI",{});var MNe=s(k5);dMe=n(MNe,"STRONG",{});var p8t=s(dMe);CRr=r(p8t,"roformer"),p8t.forEach(t),wRr=r(MNe," \u2014 "),JY=n(MNe,"A",{href:!0});var _8t=s(JY);ARr=r(_8t,"FlaxRoFormerForMaskedLM"),_8t.forEach(t),yRr=r(MNe," (RoFormer model)"),MNe.forEach(t),LRr=i(we),S5=n(we,"LI",{});var ENe=s(S5);cMe=n(ENe,"STRONG",{});var u8t=s(cMe);xRr=r(u8t,"t5"),u8t.forEach(t),$Rr=r(ENe," \u2014 "),YY=n(ENe,"A",{href:!0});var b8t=s(YY);kRr=r(b8t,"FlaxT5ForConditionalGeneration"),b8t.forEach(t),SRr=r(ENe," (T5 model)"),ENe.forEach(t),RRr=i(we),R5=n(we,"LI",{});var CNe=s(R5);fMe=n(CNe,"STRONG",{});var v8t=s(fMe);PRr=r(v8t,"wav2vec2"),v8t.forEach(t),BRr=r(CNe," \u2014 "),KY=n(CNe,"A",{href:!0});var F8t=s(KY);IRr=r(F8t,"FlaxWav2Vec2ForPreTraining"),F8t.forEach(t),NRr=r(CNe," (Wav2Vec2 model)"),CNe.forEach(t),qRr=i(we),P5=n(we,"LI",{});var wNe=s(P5);mMe=n(wNe,"STRONG",{});var T8t=s(mMe);jRr=r(T8t,"xlm-roberta"),T8t.forEach(t),DRr=r(wNe," \u2014 "),ZY=n(wNe,"A",{href:!0});var M8t=s(ZY);GRr=r(M8t,"FlaxXLMRobertaForMaskedLM"),M8t.forEach(t),ORr=r(wNe," (XLM-RoBERTa model)"),wNe.forEach(t),we.forEach(t),VRr=i(Ql),T(B5.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),_De=i(f),jc=n(f,"H2",{class:!0});var EOe=s(jc);I5=n(EOe,"A",{id:!0,class:!0,href:!0});var E8t=s(I5);gMe=n(E8t,"SPAN",{});var C8t=s(gMe);T(H9.$$.fragment,C8t),C8t.forEach(t),E8t.forEach(t),XRr=i(EOe),hMe=n(EOe,"SPAN",{});var w8t=s(hMe);zRr=r(w8t,"FlaxAutoModelForMaskedLM"),w8t.forEach(t),EOe.forEach(t),uDe=i(f),hr=n(f,"DIV",{class:!0});var Hl=s(hr);T(U9.$$.fragment,Hl),WRr=i(Hl),Dc=n(Hl,"P",{});var soe=s(Dc);QRr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eK=n(soe,"A",{href:!0});var A8t=s(eK);HRr=r(A8t,"from_pretrained()"),A8t.forEach(t),URr=r(soe," class method or the "),oK=n(soe,"A",{href:!0});var y8t=s(oK);JRr=r(y8t,"from_config()"),y8t.forEach(t),YRr=r(soe,` class
method.`),soe.forEach(t),KRr=i(Hl),J9=n(Hl,"P",{});var COe=s(J9);ZRr=r(COe,"This class cannot be instantiated directly using "),pMe=n(COe,"CODE",{});var L8t=s(pMe);ePr=r(L8t,"__init__()"),L8t.forEach(t),oPr=r(COe," (throws an error)."),COe.forEach(t),rPr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var gA=s(Xt);T(Y9.$$.fragment,gA),tPr=i(gA),_Me=n(gA,"P",{});var x8t=s(_Me);aPr=r(x8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),x8t.forEach(t),nPr=i(gA),Gc=n(gA,"P",{});var loe=s(Gc);sPr=r(loe,`Note:
Loading a model from its configuration file does `),uMe=n(loe,"STRONG",{});var $8t=s(uMe);lPr=r($8t,"not"),$8t.forEach(t),iPr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=n(loe,"A",{href:!0});var k8t=s(rK);dPr=r(k8t,"from_pretrained()"),k8t.forEach(t),cPr=r(loe," to load the model weights."),loe.forEach(t),fPr=i(gA),T(N5.$$.fragment,gA),gA.forEach(t),mPr=i(Hl),Or=n(Hl,"DIV",{class:!0});var Ul=s(Or);T(K9.$$.fragment,Ul),gPr=i(Ul),bMe=n(Ul,"P",{});var S8t=s(bMe);hPr=r(S8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),S8t.forEach(t),pPr=i(Ul),un=n(Ul,"P",{});var hA=s(un);_Pr=r(hA,"The model class to instantiate is selected based on the "),vMe=n(hA,"CODE",{});var R8t=s(vMe);uPr=r(R8t,"model_type"),R8t.forEach(t),bPr=r(hA,` property of the config object (either
passed as an argument or loaded from `),FMe=n(hA,"CODE",{});var P8t=s(FMe);vPr=r(P8t,"pretrained_model_name_or_path"),P8t.forEach(t),FPr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TMe=n(hA,"CODE",{});var B8t=s(TMe);TPr=r(B8t,"pretrained_model_name_or_path"),B8t.forEach(t),MPr=r(hA,":"),hA.forEach(t),EPr=i(Ul),xe=n(Ul,"UL",{});var Ne=s(xe);q5=n(Ne,"LI",{});var ANe=s(q5);MMe=n(ANe,"STRONG",{});var I8t=s(MMe);CPr=r(I8t,"albert"),I8t.forEach(t),wPr=r(ANe," \u2014 "),tK=n(ANe,"A",{href:!0});var N8t=s(tK);APr=r(N8t,"FlaxAlbertForMaskedLM"),N8t.forEach(t),yPr=r(ANe," (ALBERT model)"),ANe.forEach(t),LPr=i(Ne),j5=n(Ne,"LI",{});var yNe=s(j5);EMe=n(yNe,"STRONG",{});var q8t=s(EMe);xPr=r(q8t,"bart"),q8t.forEach(t),$Pr=r(yNe," \u2014 "),aK=n(yNe,"A",{href:!0});var j8t=s(aK);kPr=r(j8t,"FlaxBartForConditionalGeneration"),j8t.forEach(t),SPr=r(yNe," (BART model)"),yNe.forEach(t),RPr=i(Ne),D5=n(Ne,"LI",{});var LNe=s(D5);CMe=n(LNe,"STRONG",{});var D8t=s(CMe);PPr=r(D8t,"bert"),D8t.forEach(t),BPr=r(LNe," \u2014 "),nK=n(LNe,"A",{href:!0});var G8t=s(nK);IPr=r(G8t,"FlaxBertForMaskedLM"),G8t.forEach(t),NPr=r(LNe," (BERT model)"),LNe.forEach(t),qPr=i(Ne),G5=n(Ne,"LI",{});var xNe=s(G5);wMe=n(xNe,"STRONG",{});var O8t=s(wMe);jPr=r(O8t,"big_bird"),O8t.forEach(t),DPr=r(xNe," \u2014 "),sK=n(xNe,"A",{href:!0});var V8t=s(sK);GPr=r(V8t,"FlaxBigBirdForMaskedLM"),V8t.forEach(t),OPr=r(xNe," (BigBird model)"),xNe.forEach(t),VPr=i(Ne),O5=n(Ne,"LI",{});var $Ne=s(O5);AMe=n($Ne,"STRONG",{});var X8t=s(AMe);XPr=r(X8t,"distilbert"),X8t.forEach(t),zPr=r($Ne," \u2014 "),lK=n($Ne,"A",{href:!0});var z8t=s(lK);WPr=r(z8t,"FlaxDistilBertForMaskedLM"),z8t.forEach(t),QPr=r($Ne," (DistilBERT model)"),$Ne.forEach(t),HPr=i(Ne),V5=n(Ne,"LI",{});var kNe=s(V5);yMe=n(kNe,"STRONG",{});var W8t=s(yMe);UPr=r(W8t,"electra"),W8t.forEach(t),JPr=r(kNe," \u2014 "),iK=n(kNe,"A",{href:!0});var Q8t=s(iK);YPr=r(Q8t,"FlaxElectraForMaskedLM"),Q8t.forEach(t),KPr=r(kNe," (ELECTRA model)"),kNe.forEach(t),ZPr=i(Ne),X5=n(Ne,"LI",{});var SNe=s(X5);LMe=n(SNe,"STRONG",{});var H8t=s(LMe);eBr=r(H8t,"mbart"),H8t.forEach(t),oBr=r(SNe," \u2014 "),dK=n(SNe,"A",{href:!0});var U8t=s(dK);rBr=r(U8t,"FlaxMBartForConditionalGeneration"),U8t.forEach(t),tBr=r(SNe," (mBART model)"),SNe.forEach(t),aBr=i(Ne),z5=n(Ne,"LI",{});var RNe=s(z5);xMe=n(RNe,"STRONG",{});var J8t=s(xMe);nBr=r(J8t,"roberta"),J8t.forEach(t),sBr=r(RNe," \u2014 "),cK=n(RNe,"A",{href:!0});var Y8t=s(cK);lBr=r(Y8t,"FlaxRobertaForMaskedLM"),Y8t.forEach(t),iBr=r(RNe," (RoBERTa model)"),RNe.forEach(t),dBr=i(Ne),W5=n(Ne,"LI",{});var PNe=s(W5);$Me=n(PNe,"STRONG",{});var K8t=s($Me);cBr=r(K8t,"roformer"),K8t.forEach(t),fBr=r(PNe," \u2014 "),fK=n(PNe,"A",{href:!0});var Z8t=s(fK);mBr=r(Z8t,"FlaxRoFormerForMaskedLM"),Z8t.forEach(t),gBr=r(PNe," (RoFormer model)"),PNe.forEach(t),hBr=i(Ne),Q5=n(Ne,"LI",{});var BNe=s(Q5);kMe=n(BNe,"STRONG",{});var e9t=s(kMe);pBr=r(e9t,"xlm-roberta"),e9t.forEach(t),_Br=r(BNe," \u2014 "),mK=n(BNe,"A",{href:!0});var o9t=s(mK);uBr=r(o9t,"FlaxXLMRobertaForMaskedLM"),o9t.forEach(t),bBr=r(BNe," (XLM-RoBERTa model)"),BNe.forEach(t),Ne.forEach(t),vBr=i(Ul),T(H5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),bDe=i(f),Oc=n(f,"H2",{class:!0});var wOe=s(Oc);U5=n(wOe,"A",{id:!0,class:!0,href:!0});var r9t=s(U5);SMe=n(r9t,"SPAN",{});var t9t=s(SMe);T(Z9.$$.fragment,t9t),t9t.forEach(t),r9t.forEach(t),FBr=i(wOe),RMe=n(wOe,"SPAN",{});var a9t=s(RMe);TBr=r(a9t,"FlaxAutoModelForSeq2SeqLM"),a9t.forEach(t),wOe.forEach(t),vDe=i(f),pr=n(f,"DIV",{class:!0});var Jl=s(pr);T(ex.$$.fragment,Jl),MBr=i(Jl),Vc=n(Jl,"P",{});var ioe=s(Vc);EBr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gK=n(ioe,"A",{href:!0});var n9t=s(gK);CBr=r(n9t,"from_pretrained()"),n9t.forEach(t),wBr=r(ioe," class method or the "),hK=n(ioe,"A",{href:!0});var s9t=s(hK);ABr=r(s9t,"from_config()"),s9t.forEach(t),yBr=r(ioe,` class
method.`),ioe.forEach(t),LBr=i(Jl),ox=n(Jl,"P",{});var AOe=s(ox);xBr=r(AOe,"This class cannot be instantiated directly using "),PMe=n(AOe,"CODE",{});var l9t=s(PMe);$Br=r(l9t,"__init__()"),l9t.forEach(t),kBr=r(AOe," (throws an error)."),AOe.forEach(t),SBr=i(Jl),zt=n(Jl,"DIV",{class:!0});var pA=s(zt);T(rx.$$.fragment,pA),RBr=i(pA),BMe=n(pA,"P",{});var i9t=s(BMe);PBr=r(i9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),i9t.forEach(t),BBr=i(pA),Xc=n(pA,"P",{});var doe=s(Xc);IBr=r(doe,`Note:
Loading a model from its configuration file does `),IMe=n(doe,"STRONG",{});var d9t=s(IMe);NBr=r(d9t,"not"),d9t.forEach(t),qBr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=n(doe,"A",{href:!0});var c9t=s(pK);jBr=r(c9t,"from_pretrained()"),c9t.forEach(t),DBr=r(doe," to load the model weights."),doe.forEach(t),GBr=i(pA),T(J5.$$.fragment,pA),pA.forEach(t),OBr=i(Jl),Vr=n(Jl,"DIV",{class:!0});var Yl=s(Vr);T(tx.$$.fragment,Yl),VBr=i(Yl),NMe=n(Yl,"P",{});var f9t=s(NMe);XBr=r(f9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),f9t.forEach(t),zBr=i(Yl),bn=n(Yl,"P",{});var _A=s(bn);WBr=r(_A,"The model class to instantiate is selected based on the "),qMe=n(_A,"CODE",{});var m9t=s(qMe);QBr=r(m9t,"model_type"),m9t.forEach(t),HBr=r(_A,` property of the config object (either
passed as an argument or loaded from `),jMe=n(_A,"CODE",{});var g9t=s(jMe);UBr=r(g9t,"pretrained_model_name_or_path"),g9t.forEach(t),JBr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=n(_A,"CODE",{});var h9t=s(DMe);YBr=r(h9t,"pretrained_model_name_or_path"),h9t.forEach(t),KBr=r(_A,":"),_A.forEach(t),ZBr=i(Yl),Pe=n(Yl,"UL",{});var ze=s(Pe);Y5=n(ze,"LI",{});var INe=s(Y5);GMe=n(INe,"STRONG",{});var p9t=s(GMe);eIr=r(p9t,"bart"),p9t.forEach(t),oIr=r(INe," \u2014 "),_K=n(INe,"A",{href:!0});var _9t=s(_K);rIr=r(_9t,"FlaxBartForConditionalGeneration"),_9t.forEach(t),tIr=r(INe," (BART model)"),INe.forEach(t),aIr=i(ze),K5=n(ze,"LI",{});var NNe=s(K5);OMe=n(NNe,"STRONG",{});var u9t=s(OMe);nIr=r(u9t,"blenderbot"),u9t.forEach(t),sIr=r(NNe," \u2014 "),uK=n(NNe,"A",{href:!0});var b9t=s(uK);lIr=r(b9t,"FlaxBlenderbotForConditionalGeneration"),b9t.forEach(t),iIr=r(NNe," (Blenderbot model)"),NNe.forEach(t),dIr=i(ze),Z5=n(ze,"LI",{});var qNe=s(Z5);VMe=n(qNe,"STRONG",{});var v9t=s(VMe);cIr=r(v9t,"blenderbot-small"),v9t.forEach(t),fIr=r(qNe," \u2014 "),bK=n(qNe,"A",{href:!0});var F9t=s(bK);mIr=r(F9t,"FlaxBlenderbotSmallForConditionalGeneration"),F9t.forEach(t),gIr=r(qNe," (BlenderbotSmall model)"),qNe.forEach(t),hIr=i(ze),e0=n(ze,"LI",{});var jNe=s(e0);XMe=n(jNe,"STRONG",{});var T9t=s(XMe);pIr=r(T9t,"encoder-decoder"),T9t.forEach(t),_Ir=r(jNe," \u2014 "),vK=n(jNe,"A",{href:!0});var M9t=s(vK);uIr=r(M9t,"FlaxEncoderDecoderModel"),M9t.forEach(t),bIr=r(jNe," (Encoder decoder model)"),jNe.forEach(t),vIr=i(ze),o0=n(ze,"LI",{});var DNe=s(o0);zMe=n(DNe,"STRONG",{});var E9t=s(zMe);FIr=r(E9t,"marian"),E9t.forEach(t),TIr=r(DNe," \u2014 "),FK=n(DNe,"A",{href:!0});var C9t=s(FK);MIr=r(C9t,"FlaxMarianMTModel"),C9t.forEach(t),EIr=r(DNe," (Marian model)"),DNe.forEach(t),CIr=i(ze),r0=n(ze,"LI",{});var GNe=s(r0);WMe=n(GNe,"STRONG",{});var w9t=s(WMe);wIr=r(w9t,"mbart"),w9t.forEach(t),AIr=r(GNe," \u2014 "),TK=n(GNe,"A",{href:!0});var A9t=s(TK);yIr=r(A9t,"FlaxMBartForConditionalGeneration"),A9t.forEach(t),LIr=r(GNe," (mBART model)"),GNe.forEach(t),xIr=i(ze),t0=n(ze,"LI",{});var ONe=s(t0);QMe=n(ONe,"STRONG",{});var y9t=s(QMe);$Ir=r(y9t,"mt5"),y9t.forEach(t),kIr=r(ONe," \u2014 "),MK=n(ONe,"A",{href:!0});var L9t=s(MK);SIr=r(L9t,"FlaxMT5ForConditionalGeneration"),L9t.forEach(t),RIr=r(ONe," (mT5 model)"),ONe.forEach(t),PIr=i(ze),a0=n(ze,"LI",{});var VNe=s(a0);HMe=n(VNe,"STRONG",{});var x9t=s(HMe);BIr=r(x9t,"pegasus"),x9t.forEach(t),IIr=r(VNe," \u2014 "),EK=n(VNe,"A",{href:!0});var $9t=s(EK);NIr=r($9t,"FlaxPegasusForConditionalGeneration"),$9t.forEach(t),qIr=r(VNe," (Pegasus model)"),VNe.forEach(t),jIr=i(ze),n0=n(ze,"LI",{});var XNe=s(n0);UMe=n(XNe,"STRONG",{});var k9t=s(UMe);DIr=r(k9t,"t5"),k9t.forEach(t),GIr=r(XNe," \u2014 "),CK=n(XNe,"A",{href:!0});var S9t=s(CK);OIr=r(S9t,"FlaxT5ForConditionalGeneration"),S9t.forEach(t),VIr=r(XNe," (T5 model)"),XNe.forEach(t),ze.forEach(t),XIr=i(Yl),T(s0.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),FDe=i(f),zc=n(f,"H2",{class:!0});var yOe=s(zc);l0=n(yOe,"A",{id:!0,class:!0,href:!0});var R9t=s(l0);JMe=n(R9t,"SPAN",{});var P9t=s(JMe);T(ax.$$.fragment,P9t),P9t.forEach(t),R9t.forEach(t),zIr=i(yOe),YMe=n(yOe,"SPAN",{});var B9t=s(YMe);WIr=r(B9t,"FlaxAutoModelForSequenceClassification"),B9t.forEach(t),yOe.forEach(t),TDe=i(f),_r=n(f,"DIV",{class:!0});var Kl=s(_r);T(nx.$$.fragment,Kl),QIr=i(Kl),Wc=n(Kl,"P",{});var coe=s(Wc);HIr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wK=n(coe,"A",{href:!0});var I9t=s(wK);UIr=r(I9t,"from_pretrained()"),I9t.forEach(t),JIr=r(coe," class method or the "),AK=n(coe,"A",{href:!0});var N9t=s(AK);YIr=r(N9t,"from_config()"),N9t.forEach(t),KIr=r(coe,` class
method.`),coe.forEach(t),ZIr=i(Kl),sx=n(Kl,"P",{});var LOe=s(sx);eNr=r(LOe,"This class cannot be instantiated directly using "),KMe=n(LOe,"CODE",{});var q9t=s(KMe);oNr=r(q9t,"__init__()"),q9t.forEach(t),rNr=r(LOe," (throws an error)."),LOe.forEach(t),tNr=i(Kl),Wt=n(Kl,"DIV",{class:!0});var uA=s(Wt);T(lx.$$.fragment,uA),aNr=i(uA),ZMe=n(uA,"P",{});var j9t=s(ZMe);nNr=r(j9t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),j9t.forEach(t),sNr=i(uA),Qc=n(uA,"P",{});var foe=s(Qc);lNr=r(foe,`Note:
Loading a model from its configuration file does `),eEe=n(foe,"STRONG",{});var D9t=s(eEe);iNr=r(D9t,"not"),D9t.forEach(t),dNr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=n(foe,"A",{href:!0});var G9t=s(yK);cNr=r(G9t,"from_pretrained()"),G9t.forEach(t),fNr=r(foe," to load the model weights."),foe.forEach(t),mNr=i(uA),T(i0.$$.fragment,uA),uA.forEach(t),gNr=i(Kl),Xr=n(Kl,"DIV",{class:!0});var Zl=s(Xr);T(ix.$$.fragment,Zl),hNr=i(Zl),oEe=n(Zl,"P",{});var O9t=s(oEe);pNr=r(O9t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),O9t.forEach(t),_Nr=i(Zl),vn=n(Zl,"P",{});var bA=s(vn);uNr=r(bA,"The model class to instantiate is selected based on the "),rEe=n(bA,"CODE",{});var V9t=s(rEe);bNr=r(V9t,"model_type"),V9t.forEach(t),vNr=r(bA,` property of the config object (either
passed as an argument or loaded from `),tEe=n(bA,"CODE",{});var X9t=s(tEe);FNr=r(X9t,"pretrained_model_name_or_path"),X9t.forEach(t),TNr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=n(bA,"CODE",{});var z9t=s(aEe);MNr=r(z9t,"pretrained_model_name_or_path"),z9t.forEach(t),ENr=r(bA,":"),bA.forEach(t),CNr=i(Zl),$e=n(Zl,"UL",{});var qe=s($e);d0=n(qe,"LI",{});var zNe=s(d0);nEe=n(zNe,"STRONG",{});var W9t=s(nEe);wNr=r(W9t,"albert"),W9t.forEach(t),ANr=r(zNe," \u2014 "),LK=n(zNe,"A",{href:!0});var Q9t=s(LK);yNr=r(Q9t,"FlaxAlbertForSequenceClassification"),Q9t.forEach(t),LNr=r(zNe," (ALBERT model)"),zNe.forEach(t),xNr=i(qe),c0=n(qe,"LI",{});var WNe=s(c0);sEe=n(WNe,"STRONG",{});var H9t=s(sEe);$Nr=r(H9t,"bart"),H9t.forEach(t),kNr=r(WNe," \u2014 "),xK=n(WNe,"A",{href:!0});var U9t=s(xK);SNr=r(U9t,"FlaxBartForSequenceClassification"),U9t.forEach(t),RNr=r(WNe," (BART model)"),WNe.forEach(t),PNr=i(qe),f0=n(qe,"LI",{});var QNe=s(f0);lEe=n(QNe,"STRONG",{});var J9t=s(lEe);BNr=r(J9t,"bert"),J9t.forEach(t),INr=r(QNe," \u2014 "),$K=n(QNe,"A",{href:!0});var Y9t=s($K);NNr=r(Y9t,"FlaxBertForSequenceClassification"),Y9t.forEach(t),qNr=r(QNe," (BERT model)"),QNe.forEach(t),jNr=i(qe),m0=n(qe,"LI",{});var HNe=s(m0);iEe=n(HNe,"STRONG",{});var K9t=s(iEe);DNr=r(K9t,"big_bird"),K9t.forEach(t),GNr=r(HNe," \u2014 "),kK=n(HNe,"A",{href:!0});var Z9t=s(kK);ONr=r(Z9t,"FlaxBigBirdForSequenceClassification"),Z9t.forEach(t),VNr=r(HNe," (BigBird model)"),HNe.forEach(t),XNr=i(qe),g0=n(qe,"LI",{});var UNe=s(g0);dEe=n(UNe,"STRONG",{});var ext=s(dEe);zNr=r(ext,"distilbert"),ext.forEach(t),WNr=r(UNe," \u2014 "),SK=n(UNe,"A",{href:!0});var oxt=s(SK);QNr=r(oxt,"FlaxDistilBertForSequenceClassification"),oxt.forEach(t),HNr=r(UNe," (DistilBERT model)"),UNe.forEach(t),UNr=i(qe),h0=n(qe,"LI",{});var JNe=s(h0);cEe=n(JNe,"STRONG",{});var rxt=s(cEe);JNr=r(rxt,"electra"),rxt.forEach(t),YNr=r(JNe," \u2014 "),RK=n(JNe,"A",{href:!0});var txt=s(RK);KNr=r(txt,"FlaxElectraForSequenceClassification"),txt.forEach(t),ZNr=r(JNe," (ELECTRA model)"),JNe.forEach(t),eqr=i(qe),p0=n(qe,"LI",{});var YNe=s(p0);fEe=n(YNe,"STRONG",{});var axt=s(fEe);oqr=r(axt,"mbart"),axt.forEach(t),rqr=r(YNe," \u2014 "),PK=n(YNe,"A",{href:!0});var nxt=s(PK);tqr=r(nxt,"FlaxMBartForSequenceClassification"),nxt.forEach(t),aqr=r(YNe," (mBART model)"),YNe.forEach(t),nqr=i(qe),_0=n(qe,"LI",{});var KNe=s(_0);mEe=n(KNe,"STRONG",{});var sxt=s(mEe);sqr=r(sxt,"roberta"),sxt.forEach(t),lqr=r(KNe," \u2014 "),BK=n(KNe,"A",{href:!0});var lxt=s(BK);iqr=r(lxt,"FlaxRobertaForSequenceClassification"),lxt.forEach(t),dqr=r(KNe," (RoBERTa model)"),KNe.forEach(t),cqr=i(qe),u0=n(qe,"LI",{});var ZNe=s(u0);gEe=n(ZNe,"STRONG",{});var ixt=s(gEe);fqr=r(ixt,"roformer"),ixt.forEach(t),mqr=r(ZNe," \u2014 "),IK=n(ZNe,"A",{href:!0});var dxt=s(IK);gqr=r(dxt,"FlaxRoFormerForSequenceClassification"),dxt.forEach(t),hqr=r(ZNe," (RoFormer model)"),ZNe.forEach(t),pqr=i(qe),b0=n(qe,"LI",{});var eqe=s(b0);hEe=n(eqe,"STRONG",{});var cxt=s(hEe);_qr=r(cxt,"xlm-roberta"),cxt.forEach(t),uqr=r(eqe," \u2014 "),NK=n(eqe,"A",{href:!0});var fxt=s(NK);bqr=r(fxt,"FlaxXLMRobertaForSequenceClassification"),fxt.forEach(t),vqr=r(eqe," (XLM-RoBERTa model)"),eqe.forEach(t),qe.forEach(t),Fqr=i(Zl),T(v0.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),MDe=i(f),Hc=n(f,"H2",{class:!0});var xOe=s(Hc);F0=n(xOe,"A",{id:!0,class:!0,href:!0});var mxt=s(F0);pEe=n(mxt,"SPAN",{});var gxt=s(pEe);T(dx.$$.fragment,gxt),gxt.forEach(t),mxt.forEach(t),Tqr=i(xOe),_Ee=n(xOe,"SPAN",{});var hxt=s(_Ee);Mqr=r(hxt,"FlaxAutoModelForQuestionAnswering"),hxt.forEach(t),xOe.forEach(t),EDe=i(f),ur=n(f,"DIV",{class:!0});var ei=s(ur);T(cx.$$.fragment,ei),Eqr=i(ei),Uc=n(ei,"P",{});var moe=s(Uc);Cqr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qK=n(moe,"A",{href:!0});var pxt=s(qK);wqr=r(pxt,"from_pretrained()"),pxt.forEach(t),Aqr=r(moe," class method or the "),jK=n(moe,"A",{href:!0});var _xt=s(jK);yqr=r(_xt,"from_config()"),_xt.forEach(t),Lqr=r(moe,` class
method.`),moe.forEach(t),xqr=i(ei),fx=n(ei,"P",{});var $Oe=s(fx);$qr=r($Oe,"This class cannot be instantiated directly using "),uEe=n($Oe,"CODE",{});var uxt=s(uEe);kqr=r(uxt,"__init__()"),uxt.forEach(t),Sqr=r($Oe," (throws an error)."),$Oe.forEach(t),Rqr=i(ei),Qt=n(ei,"DIV",{class:!0});var vA=s(Qt);T(mx.$$.fragment,vA),Pqr=i(vA),bEe=n(vA,"P",{});var bxt=s(bEe);Bqr=r(bxt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bxt.forEach(t),Iqr=i(vA),Jc=n(vA,"P",{});var goe=s(Jc);Nqr=r(goe,`Note:
Loading a model from its configuration file does `),vEe=n(goe,"STRONG",{});var vxt=s(vEe);qqr=r(vxt,"not"),vxt.forEach(t),jqr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=n(goe,"A",{href:!0});var Fxt=s(DK);Dqr=r(Fxt,"from_pretrained()"),Fxt.forEach(t),Gqr=r(goe," to load the model weights."),goe.forEach(t),Oqr=i(vA),T(T0.$$.fragment,vA),vA.forEach(t),Vqr=i(ei),zr=n(ei,"DIV",{class:!0});var oi=s(zr);T(gx.$$.fragment,oi),Xqr=i(oi),FEe=n(oi,"P",{});var Txt=s(FEe);zqr=r(Txt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Txt.forEach(t),Wqr=i(oi),Fn=n(oi,"P",{});var FA=s(Fn);Qqr=r(FA,"The model class to instantiate is selected based on the "),TEe=n(FA,"CODE",{});var Mxt=s(TEe);Hqr=r(Mxt,"model_type"),Mxt.forEach(t),Uqr=r(FA,` property of the config object (either
passed as an argument or loaded from `),MEe=n(FA,"CODE",{});var Ext=s(MEe);Jqr=r(Ext,"pretrained_model_name_or_path"),Ext.forEach(t),Yqr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=n(FA,"CODE",{});var Cxt=s(EEe);Kqr=r(Cxt,"pretrained_model_name_or_path"),Cxt.forEach(t),Zqr=r(FA,":"),FA.forEach(t),ejr=i(oi),ke=n(oi,"UL",{});var je=s(ke);M0=n(je,"LI",{});var oqe=s(M0);CEe=n(oqe,"STRONG",{});var wxt=s(CEe);ojr=r(wxt,"albert"),wxt.forEach(t),rjr=r(oqe," \u2014 "),GK=n(oqe,"A",{href:!0});var Axt=s(GK);tjr=r(Axt,"FlaxAlbertForQuestionAnswering"),Axt.forEach(t),ajr=r(oqe," (ALBERT model)"),oqe.forEach(t),njr=i(je),E0=n(je,"LI",{});var rqe=s(E0);wEe=n(rqe,"STRONG",{});var yxt=s(wEe);sjr=r(yxt,"bart"),yxt.forEach(t),ljr=r(rqe," \u2014 "),OK=n(rqe,"A",{href:!0});var Lxt=s(OK);ijr=r(Lxt,"FlaxBartForQuestionAnswering"),Lxt.forEach(t),djr=r(rqe," (BART model)"),rqe.forEach(t),cjr=i(je),C0=n(je,"LI",{});var tqe=s(C0);AEe=n(tqe,"STRONG",{});var xxt=s(AEe);fjr=r(xxt,"bert"),xxt.forEach(t),mjr=r(tqe," \u2014 "),VK=n(tqe,"A",{href:!0});var $xt=s(VK);gjr=r($xt,"FlaxBertForQuestionAnswering"),$xt.forEach(t),hjr=r(tqe," (BERT model)"),tqe.forEach(t),pjr=i(je),w0=n(je,"LI",{});var aqe=s(w0);yEe=n(aqe,"STRONG",{});var kxt=s(yEe);_jr=r(kxt,"big_bird"),kxt.forEach(t),ujr=r(aqe," \u2014 "),XK=n(aqe,"A",{href:!0});var Sxt=s(XK);bjr=r(Sxt,"FlaxBigBirdForQuestionAnswering"),Sxt.forEach(t),vjr=r(aqe," (BigBird model)"),aqe.forEach(t),Fjr=i(je),A0=n(je,"LI",{});var nqe=s(A0);LEe=n(nqe,"STRONG",{});var Rxt=s(LEe);Tjr=r(Rxt,"distilbert"),Rxt.forEach(t),Mjr=r(nqe," \u2014 "),zK=n(nqe,"A",{href:!0});var Pxt=s(zK);Ejr=r(Pxt,"FlaxDistilBertForQuestionAnswering"),Pxt.forEach(t),Cjr=r(nqe," (DistilBERT model)"),nqe.forEach(t),wjr=i(je),y0=n(je,"LI",{});var sqe=s(y0);xEe=n(sqe,"STRONG",{});var Bxt=s(xEe);Ajr=r(Bxt,"electra"),Bxt.forEach(t),yjr=r(sqe," \u2014 "),WK=n(sqe,"A",{href:!0});var Ixt=s(WK);Ljr=r(Ixt,"FlaxElectraForQuestionAnswering"),Ixt.forEach(t),xjr=r(sqe," (ELECTRA model)"),sqe.forEach(t),$jr=i(je),L0=n(je,"LI",{});var lqe=s(L0);$Ee=n(lqe,"STRONG",{});var Nxt=s($Ee);kjr=r(Nxt,"mbart"),Nxt.forEach(t),Sjr=r(lqe," \u2014 "),QK=n(lqe,"A",{href:!0});var qxt=s(QK);Rjr=r(qxt,"FlaxMBartForQuestionAnswering"),qxt.forEach(t),Pjr=r(lqe," (mBART model)"),lqe.forEach(t),Bjr=i(je),x0=n(je,"LI",{});var iqe=s(x0);kEe=n(iqe,"STRONG",{});var jxt=s(kEe);Ijr=r(jxt,"roberta"),jxt.forEach(t),Njr=r(iqe," \u2014 "),HK=n(iqe,"A",{href:!0});var Dxt=s(HK);qjr=r(Dxt,"FlaxRobertaForQuestionAnswering"),Dxt.forEach(t),jjr=r(iqe," (RoBERTa model)"),iqe.forEach(t),Djr=i(je),$0=n(je,"LI",{});var dqe=s($0);SEe=n(dqe,"STRONG",{});var Gxt=s(SEe);Gjr=r(Gxt,"roformer"),Gxt.forEach(t),Ojr=r(dqe," \u2014 "),UK=n(dqe,"A",{href:!0});var Oxt=s(UK);Vjr=r(Oxt,"FlaxRoFormerForQuestionAnswering"),Oxt.forEach(t),Xjr=r(dqe," (RoFormer model)"),dqe.forEach(t),zjr=i(je),k0=n(je,"LI",{});var cqe=s(k0);REe=n(cqe,"STRONG",{});var Vxt=s(REe);Wjr=r(Vxt,"xlm-roberta"),Vxt.forEach(t),Qjr=r(cqe," \u2014 "),JK=n(cqe,"A",{href:!0});var Xxt=s(JK);Hjr=r(Xxt,"FlaxXLMRobertaForQuestionAnswering"),Xxt.forEach(t),Ujr=r(cqe," (XLM-RoBERTa model)"),cqe.forEach(t),je.forEach(t),Jjr=i(oi),T(S0.$$.fragment,oi),oi.forEach(t),ei.forEach(t),CDe=i(f),Yc=n(f,"H2",{class:!0});var kOe=s(Yc);R0=n(kOe,"A",{id:!0,class:!0,href:!0});var zxt=s(R0);PEe=n(zxt,"SPAN",{});var Wxt=s(PEe);T(hx.$$.fragment,Wxt),Wxt.forEach(t),zxt.forEach(t),Yjr=i(kOe),BEe=n(kOe,"SPAN",{});var Qxt=s(BEe);Kjr=r(Qxt,"FlaxAutoModelForTokenClassification"),Qxt.forEach(t),kOe.forEach(t),wDe=i(f),br=n(f,"DIV",{class:!0});var ri=s(br);T(px.$$.fragment,ri),Zjr=i(ri),Kc=n(ri,"P",{});var hoe=s(Kc);eDr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YK=n(hoe,"A",{href:!0});var Hxt=s(YK);oDr=r(Hxt,"from_pretrained()"),Hxt.forEach(t),rDr=r(hoe," class method or the "),KK=n(hoe,"A",{href:!0});var Uxt=s(KK);tDr=r(Uxt,"from_config()"),Uxt.forEach(t),aDr=r(hoe,` class
method.`),hoe.forEach(t),nDr=i(ri),_x=n(ri,"P",{});var SOe=s(_x);sDr=r(SOe,"This class cannot be instantiated directly using "),IEe=n(SOe,"CODE",{});var Jxt=s(IEe);lDr=r(Jxt,"__init__()"),Jxt.forEach(t),iDr=r(SOe," (throws an error)."),SOe.forEach(t),dDr=i(ri),Ht=n(ri,"DIV",{class:!0});var TA=s(Ht);T(ux.$$.fragment,TA),cDr=i(TA),NEe=n(TA,"P",{});var Yxt=s(NEe);fDr=r(Yxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Yxt.forEach(t),mDr=i(TA),Zc=n(TA,"P",{});var poe=s(Zc);gDr=r(poe,`Note:
Loading a model from its configuration file does `),qEe=n(poe,"STRONG",{});var Kxt=s(qEe);hDr=r(Kxt,"not"),Kxt.forEach(t),pDr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=n(poe,"A",{href:!0});var Zxt=s(ZK);_Dr=r(Zxt,"from_pretrained()"),Zxt.forEach(t),uDr=r(poe," to load the model weights."),poe.forEach(t),bDr=i(TA),T(P0.$$.fragment,TA),TA.forEach(t),vDr=i(ri),Wr=n(ri,"DIV",{class:!0});var ti=s(Wr);T(bx.$$.fragment,ti),FDr=i(ti),jEe=n(ti,"P",{});var e$t=s(jEe);TDr=r(e$t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),e$t.forEach(t),MDr=i(ti),Tn=n(ti,"P",{});var MA=s(Tn);EDr=r(MA,"The model class to instantiate is selected based on the "),DEe=n(MA,"CODE",{});var o$t=s(DEe);CDr=r(o$t,"model_type"),o$t.forEach(t),wDr=r(MA,` property of the config object (either
passed as an argument or loaded from `),GEe=n(MA,"CODE",{});var r$t=s(GEe);ADr=r(r$t,"pretrained_model_name_or_path"),r$t.forEach(t),yDr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OEe=n(MA,"CODE",{});var t$t=s(OEe);LDr=r(t$t,"pretrained_model_name_or_path"),t$t.forEach(t),xDr=r(MA,":"),MA.forEach(t),$Dr=i(ti),Ge=n(ti,"UL",{});var Fo=s(Ge);B0=n(Fo,"LI",{});var fqe=s(B0);VEe=n(fqe,"STRONG",{});var a$t=s(VEe);kDr=r(a$t,"albert"),a$t.forEach(t),SDr=r(fqe," \u2014 "),eZ=n(fqe,"A",{href:!0});var n$t=s(eZ);RDr=r(n$t,"FlaxAlbertForTokenClassification"),n$t.forEach(t),PDr=r(fqe," (ALBERT model)"),fqe.forEach(t),BDr=i(Fo),I0=n(Fo,"LI",{});var mqe=s(I0);XEe=n(mqe,"STRONG",{});var s$t=s(XEe);IDr=r(s$t,"bert"),s$t.forEach(t),NDr=r(mqe," \u2014 "),oZ=n(mqe,"A",{href:!0});var l$t=s(oZ);qDr=r(l$t,"FlaxBertForTokenClassification"),l$t.forEach(t),jDr=r(mqe," (BERT model)"),mqe.forEach(t),DDr=i(Fo),N0=n(Fo,"LI",{});var gqe=s(N0);zEe=n(gqe,"STRONG",{});var i$t=s(zEe);GDr=r(i$t,"big_bird"),i$t.forEach(t),ODr=r(gqe," \u2014 "),rZ=n(gqe,"A",{href:!0});var d$t=s(rZ);VDr=r(d$t,"FlaxBigBirdForTokenClassification"),d$t.forEach(t),XDr=r(gqe," (BigBird model)"),gqe.forEach(t),zDr=i(Fo),q0=n(Fo,"LI",{});var hqe=s(q0);WEe=n(hqe,"STRONG",{});var c$t=s(WEe);WDr=r(c$t,"distilbert"),c$t.forEach(t),QDr=r(hqe," \u2014 "),tZ=n(hqe,"A",{href:!0});var f$t=s(tZ);HDr=r(f$t,"FlaxDistilBertForTokenClassification"),f$t.forEach(t),UDr=r(hqe," (DistilBERT model)"),hqe.forEach(t),JDr=i(Fo),j0=n(Fo,"LI",{});var pqe=s(j0);QEe=n(pqe,"STRONG",{});var m$t=s(QEe);YDr=r(m$t,"electra"),m$t.forEach(t),KDr=r(pqe," \u2014 "),aZ=n(pqe,"A",{href:!0});var g$t=s(aZ);ZDr=r(g$t,"FlaxElectraForTokenClassification"),g$t.forEach(t),eGr=r(pqe," (ELECTRA model)"),pqe.forEach(t),oGr=i(Fo),D0=n(Fo,"LI",{});var _qe=s(D0);HEe=n(_qe,"STRONG",{});var h$t=s(HEe);rGr=r(h$t,"roberta"),h$t.forEach(t),tGr=r(_qe," \u2014 "),nZ=n(_qe,"A",{href:!0});var p$t=s(nZ);aGr=r(p$t,"FlaxRobertaForTokenClassification"),p$t.forEach(t),nGr=r(_qe," (RoBERTa model)"),_qe.forEach(t),sGr=i(Fo),G0=n(Fo,"LI",{});var uqe=s(G0);UEe=n(uqe,"STRONG",{});var _$t=s(UEe);lGr=r(_$t,"roformer"),_$t.forEach(t),iGr=r(uqe," \u2014 "),sZ=n(uqe,"A",{href:!0});var u$t=s(sZ);dGr=r(u$t,"FlaxRoFormerForTokenClassification"),u$t.forEach(t),cGr=r(uqe," (RoFormer model)"),uqe.forEach(t),fGr=i(Fo),O0=n(Fo,"LI",{});var bqe=s(O0);JEe=n(bqe,"STRONG",{});var b$t=s(JEe);mGr=r(b$t,"xlm-roberta"),b$t.forEach(t),gGr=r(bqe," \u2014 "),lZ=n(bqe,"A",{href:!0});var v$t=s(lZ);hGr=r(v$t,"FlaxXLMRobertaForTokenClassification"),v$t.forEach(t),pGr=r(bqe," (XLM-RoBERTa model)"),bqe.forEach(t),Fo.forEach(t),_Gr=i(ti),T(V0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),ADe=i(f),ef=n(f,"H2",{class:!0});var ROe=s(ef);X0=n(ROe,"A",{id:!0,class:!0,href:!0});var F$t=s(X0);YEe=n(F$t,"SPAN",{});var T$t=s(YEe);T(vx.$$.fragment,T$t),T$t.forEach(t),F$t.forEach(t),uGr=i(ROe),KEe=n(ROe,"SPAN",{});var M$t=s(KEe);bGr=r(M$t,"FlaxAutoModelForMultipleChoice"),M$t.forEach(t),ROe.forEach(t),yDe=i(f),vr=n(f,"DIV",{class:!0});var ai=s(vr);T(Fx.$$.fragment,ai),vGr=i(ai),of=n(ai,"P",{});var _oe=s(of);FGr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iZ=n(_oe,"A",{href:!0});var E$t=s(iZ);TGr=r(E$t,"from_pretrained()"),E$t.forEach(t),MGr=r(_oe," class method or the "),dZ=n(_oe,"A",{href:!0});var C$t=s(dZ);EGr=r(C$t,"from_config()"),C$t.forEach(t),CGr=r(_oe,` class
method.`),_oe.forEach(t),wGr=i(ai),Tx=n(ai,"P",{});var POe=s(Tx);AGr=r(POe,"This class cannot be instantiated directly using "),ZEe=n(POe,"CODE",{});var w$t=s(ZEe);yGr=r(w$t,"__init__()"),w$t.forEach(t),LGr=r(POe," (throws an error)."),POe.forEach(t),xGr=i(ai),Ut=n(ai,"DIV",{class:!0});var EA=s(Ut);T(Mx.$$.fragment,EA),$Gr=i(EA),eCe=n(EA,"P",{});var A$t=s(eCe);kGr=r(A$t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),A$t.forEach(t),SGr=i(EA),rf=n(EA,"P",{});var uoe=s(rf);RGr=r(uoe,`Note:
Loading a model from its configuration file does `),oCe=n(uoe,"STRONG",{});var y$t=s(oCe);PGr=r(y$t,"not"),y$t.forEach(t),BGr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cZ=n(uoe,"A",{href:!0});var L$t=s(cZ);IGr=r(L$t,"from_pretrained()"),L$t.forEach(t),NGr=r(uoe," to load the model weights."),uoe.forEach(t),qGr=i(EA),T(z0.$$.fragment,EA),EA.forEach(t),jGr=i(ai),Qr=n(ai,"DIV",{class:!0});var ni=s(Qr);T(Ex.$$.fragment,ni),DGr=i(ni),rCe=n(ni,"P",{});var x$t=s(rCe);GGr=r(x$t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),x$t.forEach(t),OGr=i(ni),Mn=n(ni,"P",{});var CA=s(Mn);VGr=r(CA,"The model class to instantiate is selected based on the "),tCe=n(CA,"CODE",{});var $$t=s(tCe);XGr=r($$t,"model_type"),$$t.forEach(t),zGr=r(CA,` property of the config object (either
passed as an argument or loaded from `),aCe=n(CA,"CODE",{});var k$t=s(aCe);WGr=r(k$t,"pretrained_model_name_or_path"),k$t.forEach(t),QGr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nCe=n(CA,"CODE",{});var S$t=s(nCe);HGr=r(S$t,"pretrained_model_name_or_path"),S$t.forEach(t),UGr=r(CA,":"),CA.forEach(t),JGr=i(ni),Oe=n(ni,"UL",{});var To=s(Oe);W0=n(To,"LI",{});var vqe=s(W0);sCe=n(vqe,"STRONG",{});var R$t=s(sCe);YGr=r(R$t,"albert"),R$t.forEach(t),KGr=r(vqe," \u2014 "),fZ=n(vqe,"A",{href:!0});var P$t=s(fZ);ZGr=r(P$t,"FlaxAlbertForMultipleChoice"),P$t.forEach(t),eOr=r(vqe," (ALBERT model)"),vqe.forEach(t),oOr=i(To),Q0=n(To,"LI",{});var Fqe=s(Q0);lCe=n(Fqe,"STRONG",{});var B$t=s(lCe);rOr=r(B$t,"bert"),B$t.forEach(t),tOr=r(Fqe," \u2014 "),mZ=n(Fqe,"A",{href:!0});var I$t=s(mZ);aOr=r(I$t,"FlaxBertForMultipleChoice"),I$t.forEach(t),nOr=r(Fqe," (BERT model)"),Fqe.forEach(t),sOr=i(To),H0=n(To,"LI",{});var Tqe=s(H0);iCe=n(Tqe,"STRONG",{});var N$t=s(iCe);lOr=r(N$t,"big_bird"),N$t.forEach(t),iOr=r(Tqe," \u2014 "),gZ=n(Tqe,"A",{href:!0});var q$t=s(gZ);dOr=r(q$t,"FlaxBigBirdForMultipleChoice"),q$t.forEach(t),cOr=r(Tqe," (BigBird model)"),Tqe.forEach(t),fOr=i(To),U0=n(To,"LI",{});var Mqe=s(U0);dCe=n(Mqe,"STRONG",{});var j$t=s(dCe);mOr=r(j$t,"distilbert"),j$t.forEach(t),gOr=r(Mqe," \u2014 "),hZ=n(Mqe,"A",{href:!0});var D$t=s(hZ);hOr=r(D$t,"FlaxDistilBertForMultipleChoice"),D$t.forEach(t),pOr=r(Mqe," (DistilBERT model)"),Mqe.forEach(t),_Or=i(To),J0=n(To,"LI",{});var Eqe=s(J0);cCe=n(Eqe,"STRONG",{});var G$t=s(cCe);uOr=r(G$t,"electra"),G$t.forEach(t),bOr=r(Eqe," \u2014 "),pZ=n(Eqe,"A",{href:!0});var O$t=s(pZ);vOr=r(O$t,"FlaxElectraForMultipleChoice"),O$t.forEach(t),FOr=r(Eqe," (ELECTRA model)"),Eqe.forEach(t),TOr=i(To),Y0=n(To,"LI",{});var Cqe=s(Y0);fCe=n(Cqe,"STRONG",{});var V$t=s(fCe);MOr=r(V$t,"roberta"),V$t.forEach(t),EOr=r(Cqe," \u2014 "),_Z=n(Cqe,"A",{href:!0});var X$t=s(_Z);COr=r(X$t,"FlaxRobertaForMultipleChoice"),X$t.forEach(t),wOr=r(Cqe," (RoBERTa model)"),Cqe.forEach(t),AOr=i(To),K0=n(To,"LI",{});var wqe=s(K0);mCe=n(wqe,"STRONG",{});var z$t=s(mCe);yOr=r(z$t,"roformer"),z$t.forEach(t),LOr=r(wqe," \u2014 "),uZ=n(wqe,"A",{href:!0});var W$t=s(uZ);xOr=r(W$t,"FlaxRoFormerForMultipleChoice"),W$t.forEach(t),$Or=r(wqe," (RoFormer model)"),wqe.forEach(t),kOr=i(To),Z0=n(To,"LI",{});var Aqe=s(Z0);gCe=n(Aqe,"STRONG",{});var Q$t=s(gCe);SOr=r(Q$t,"xlm-roberta"),Q$t.forEach(t),ROr=r(Aqe," \u2014 "),bZ=n(Aqe,"A",{href:!0});var H$t=s(bZ);POr=r(H$t,"FlaxXLMRobertaForMultipleChoice"),H$t.forEach(t),BOr=r(Aqe," (XLM-RoBERTa model)"),Aqe.forEach(t),To.forEach(t),IOr=i(ni),T(ew.$$.fragment,ni),ni.forEach(t),ai.forEach(t),LDe=i(f),tf=n(f,"H2",{class:!0});var BOe=s(tf);ow=n(BOe,"A",{id:!0,class:!0,href:!0});var U$t=s(ow);hCe=n(U$t,"SPAN",{});var J$t=s(hCe);T(Cx.$$.fragment,J$t),J$t.forEach(t),U$t.forEach(t),NOr=i(BOe),pCe=n(BOe,"SPAN",{});var Y$t=s(pCe);qOr=r(Y$t,"FlaxAutoModelForNextSentencePrediction"),Y$t.forEach(t),BOe.forEach(t),xDe=i(f),Fr=n(f,"DIV",{class:!0});var si=s(Fr);T(wx.$$.fragment,si),jOr=i(si),af=n(si,"P",{});var boe=s(af);DOr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vZ=n(boe,"A",{href:!0});var K$t=s(vZ);GOr=r(K$t,"from_pretrained()"),K$t.forEach(t),OOr=r(boe," class method or the "),FZ=n(boe,"A",{href:!0});var Z$t=s(FZ);VOr=r(Z$t,"from_config()"),Z$t.forEach(t),XOr=r(boe,` class
method.`),boe.forEach(t),zOr=i(si),Ax=n(si,"P",{});var IOe=s(Ax);WOr=r(IOe,"This class cannot be instantiated directly using "),_Ce=n(IOe,"CODE",{});var ekt=s(_Ce);QOr=r(ekt,"__init__()"),ekt.forEach(t),HOr=r(IOe," (throws an error)."),IOe.forEach(t),UOr=i(si),Jt=n(si,"DIV",{class:!0});var wA=s(Jt);T(yx.$$.fragment,wA),JOr=i(wA),uCe=n(wA,"P",{});var okt=s(uCe);YOr=r(okt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),okt.forEach(t),KOr=i(wA),nf=n(wA,"P",{});var voe=s(nf);ZOr=r(voe,`Note:
Loading a model from its configuration file does `),bCe=n(voe,"STRONG",{});var rkt=s(bCe);eVr=r(rkt,"not"),rkt.forEach(t),oVr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=n(voe,"A",{href:!0});var tkt=s(TZ);rVr=r(tkt,"from_pretrained()"),tkt.forEach(t),tVr=r(voe," to load the model weights."),voe.forEach(t),aVr=i(wA),T(rw.$$.fragment,wA),wA.forEach(t),nVr=i(si),Hr=n(si,"DIV",{class:!0});var li=s(Hr);T(Lx.$$.fragment,li),sVr=i(li),vCe=n(li,"P",{});var akt=s(vCe);lVr=r(akt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),akt.forEach(t),iVr=i(li),En=n(li,"P",{});var AA=s(En);dVr=r(AA,"The model class to instantiate is selected based on the "),FCe=n(AA,"CODE",{});var nkt=s(FCe);cVr=r(nkt,"model_type"),nkt.forEach(t),fVr=r(AA,` property of the config object (either
passed as an argument or loaded from `),TCe=n(AA,"CODE",{});var skt=s(TCe);mVr=r(skt,"pretrained_model_name_or_path"),skt.forEach(t),gVr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MCe=n(AA,"CODE",{});var lkt=s(MCe);hVr=r(lkt,"pretrained_model_name_or_path"),lkt.forEach(t),pVr=r(AA,":"),AA.forEach(t),_Vr=i(li),ECe=n(li,"UL",{});var ikt=s(ECe);tw=n(ikt,"LI",{});var yqe=s(tw);CCe=n(yqe,"STRONG",{});var dkt=s(CCe);uVr=r(dkt,"bert"),dkt.forEach(t),bVr=r(yqe," \u2014 "),MZ=n(yqe,"A",{href:!0});var ckt=s(MZ);vVr=r(ckt,"FlaxBertForNextSentencePrediction"),ckt.forEach(t),FVr=r(yqe," (BERT model)"),yqe.forEach(t),ikt.forEach(t),TVr=i(li),T(aw.$$.fragment,li),li.forEach(t),si.forEach(t),$De=i(f),sf=n(f,"H2",{class:!0});var NOe=s(sf);nw=n(NOe,"A",{id:!0,class:!0,href:!0});var fkt=s(nw);wCe=n(fkt,"SPAN",{});var mkt=s(wCe);T(xx.$$.fragment,mkt),mkt.forEach(t),fkt.forEach(t),MVr=i(NOe),ACe=n(NOe,"SPAN",{});var gkt=s(ACe);EVr=r(gkt,"FlaxAutoModelForImageClassification"),gkt.forEach(t),NOe.forEach(t),kDe=i(f),Tr=n(f,"DIV",{class:!0});var ii=s(Tr);T($x.$$.fragment,ii),CVr=i(ii),lf=n(ii,"P",{});var Foe=s(lf);wVr=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EZ=n(Foe,"A",{href:!0});var hkt=s(EZ);AVr=r(hkt,"from_pretrained()"),hkt.forEach(t),yVr=r(Foe," class method or the "),CZ=n(Foe,"A",{href:!0});var pkt=s(CZ);LVr=r(pkt,"from_config()"),pkt.forEach(t),xVr=r(Foe,` class
method.`),Foe.forEach(t),$Vr=i(ii),kx=n(ii,"P",{});var qOe=s(kx);kVr=r(qOe,"This class cannot be instantiated directly using "),yCe=n(qOe,"CODE",{});var _kt=s(yCe);SVr=r(_kt,"__init__()"),_kt.forEach(t),RVr=r(qOe," (throws an error)."),qOe.forEach(t),PVr=i(ii),Yt=n(ii,"DIV",{class:!0});var yA=s(Yt);T(Sx.$$.fragment,yA),BVr=i(yA),LCe=n(yA,"P",{});var ukt=s(LCe);IVr=r(ukt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ukt.forEach(t),NVr=i(yA),df=n(yA,"P",{});var Toe=s(df);qVr=r(Toe,`Note:
Loading a model from its configuration file does `),xCe=n(Toe,"STRONG",{});var bkt=s(xCe);jVr=r(bkt,"not"),bkt.forEach(t),DVr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=n(Toe,"A",{href:!0});var vkt=s(wZ);GVr=r(vkt,"from_pretrained()"),vkt.forEach(t),OVr=r(Toe," to load the model weights."),Toe.forEach(t),VVr=i(yA),T(sw.$$.fragment,yA),yA.forEach(t),XVr=i(ii),Ur=n(ii,"DIV",{class:!0});var di=s(Ur);T(Rx.$$.fragment,di),zVr=i(di),$Ce=n(di,"P",{});var Fkt=s($Ce);WVr=r(Fkt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Fkt.forEach(t),QVr=i(di),Cn=n(di,"P",{});var LA=s(Cn);HVr=r(LA,"The model class to instantiate is selected based on the "),kCe=n(LA,"CODE",{});var Tkt=s(kCe);UVr=r(Tkt,"model_type"),Tkt.forEach(t),JVr=r(LA,` property of the config object (either
passed as an argument or loaded from `),SCe=n(LA,"CODE",{});var Mkt=s(SCe);YVr=r(Mkt,"pretrained_model_name_or_path"),Mkt.forEach(t),KVr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RCe=n(LA,"CODE",{});var Ekt=s(RCe);ZVr=r(Ekt,"pretrained_model_name_or_path"),Ekt.forEach(t),eXr=r(LA,":"),LA.forEach(t),oXr=i(di),Px=n(di,"UL",{});var jOe=s(Px);lw=n(jOe,"LI",{});var Lqe=s(lw);PCe=n(Lqe,"STRONG",{});var Ckt=s(PCe);rXr=r(Ckt,"beit"),Ckt.forEach(t),tXr=r(Lqe," \u2014 "),AZ=n(Lqe,"A",{href:!0});var wkt=s(AZ);aXr=r(wkt,"FlaxBeitForImageClassification"),wkt.forEach(t),nXr=r(Lqe," (BEiT model)"),Lqe.forEach(t),sXr=i(jOe),iw=n(jOe,"LI",{});var xqe=s(iw);BCe=n(xqe,"STRONG",{});var Akt=s(BCe);lXr=r(Akt,"vit"),Akt.forEach(t),iXr=r(xqe," \u2014 "),yZ=n(xqe,"A",{href:!0});var ykt=s(yZ);dXr=r(ykt,"FlaxViTForImageClassification"),ykt.forEach(t),cXr=r(xqe," (ViT model)"),xqe.forEach(t),jOe.forEach(t),fXr=i(di),T(dw.$$.fragment,di),di.forEach(t),ii.forEach(t),SDe=i(f),cf=n(f,"H2",{class:!0});var DOe=s(cf);cw=n(DOe,"A",{id:!0,class:!0,href:!0});var Lkt=s(cw);ICe=n(Lkt,"SPAN",{});var xkt=s(ICe);T(Bx.$$.fragment,xkt),xkt.forEach(t),Lkt.forEach(t),mXr=i(DOe),NCe=n(DOe,"SPAN",{});var $kt=s(NCe);gXr=r($kt,"FlaxAutoModelForVision2Seq"),$kt.forEach(t),DOe.forEach(t),RDe=i(f),Mr=n(f,"DIV",{class:!0});var ci=s(Mr);T(Ix.$$.fragment,ci),hXr=i(ci),ff=n(ci,"P",{});var Moe=s(ff);pXr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LZ=n(Moe,"A",{href:!0});var kkt=s(LZ);_Xr=r(kkt,"from_pretrained()"),kkt.forEach(t),uXr=r(Moe," class method or the "),xZ=n(Moe,"A",{href:!0});var Skt=s(xZ);bXr=r(Skt,"from_config()"),Skt.forEach(t),vXr=r(Moe,` class
method.`),Moe.forEach(t),FXr=i(ci),Nx=n(ci,"P",{});var GOe=s(Nx);TXr=r(GOe,"This class cannot be instantiated directly using "),qCe=n(GOe,"CODE",{});var Rkt=s(qCe);MXr=r(Rkt,"__init__()"),Rkt.forEach(t),EXr=r(GOe," (throws an error)."),GOe.forEach(t),CXr=i(ci),Kt=n(ci,"DIV",{class:!0});var xA=s(Kt);T(qx.$$.fragment,xA),wXr=i(xA),jCe=n(xA,"P",{});var Pkt=s(jCe);AXr=r(Pkt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pkt.forEach(t),yXr=i(xA),mf=n(xA,"P",{});var Eoe=s(mf);LXr=r(Eoe,`Note:
Loading a model from its configuration file does `),DCe=n(Eoe,"STRONG",{});var Bkt=s(DCe);xXr=r(Bkt,"not"),Bkt.forEach(t),$Xr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=n(Eoe,"A",{href:!0});var Ikt=s($Z);kXr=r(Ikt,"from_pretrained()"),Ikt.forEach(t),SXr=r(Eoe," to load the model weights."),Eoe.forEach(t),RXr=i(xA),T(fw.$$.fragment,xA),xA.forEach(t),PXr=i(ci),Jr=n(ci,"DIV",{class:!0});var fi=s(Jr);T(jx.$$.fragment,fi),BXr=i(fi),GCe=n(fi,"P",{});var Nkt=s(GCe);IXr=r(Nkt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Nkt.forEach(t),NXr=i(fi),wn=n(fi,"P",{});var $A=s(wn);qXr=r($A,"The model class to instantiate is selected based on the "),OCe=n($A,"CODE",{});var qkt=s(OCe);jXr=r(qkt,"model_type"),qkt.forEach(t),DXr=r($A,` property of the config object (either
passed as an argument or loaded from `),VCe=n($A,"CODE",{});var jkt=s(VCe);GXr=r(jkt,"pretrained_model_name_or_path"),jkt.forEach(t),OXr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XCe=n($A,"CODE",{});var Dkt=s(XCe);VXr=r(Dkt,"pretrained_model_name_or_path"),Dkt.forEach(t),XXr=r($A,":"),$A.forEach(t),zXr=i(fi),zCe=n(fi,"UL",{});var Gkt=s(zCe);mw=n(Gkt,"LI",{});var $qe=s(mw);WCe=n($qe,"STRONG",{});var Okt=s(WCe);WXr=r(Okt,"vision-encoder-decoder"),Okt.forEach(t),QXr=r($qe," \u2014 "),kZ=n($qe,"A",{href:!0});var Vkt=s(kZ);HXr=r(Vkt,"FlaxVisionEncoderDecoderModel"),Vkt.forEach(t),UXr=r($qe," (Vision Encoder decoder model)"),$qe.forEach(t),Gkt.forEach(t),JXr=i(fi),T(gw.$$.fragment,fi),fi.forEach(t),ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(QRt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoTokenizer"),c(bi,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertModel"),c(Ff,"id","extending-the-auto-classes"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#extending-the-auto-classes"),c(vi,"class","relative group"),c(Mf,"id","transformers.AutoConfig"),c(Mf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mf,"href","#transformers.AutoConfig"),c(Fi,"class","relative group"),c(sk,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(lk,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertConfig"),c(ik,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartConfig"),c(dk,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitConfig"),c(ck,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertConfig"),c(fk,"href","/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(mk,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdConfig"),c(gk,"href","/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(hk,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(pk,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(_k,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertConfig"),c(uk,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineConfig"),c(bk,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPConfig"),c(vk,"href","/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenConfig"),c(Fk,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertConfig"),c(Tk,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextConfig"),c(Mk,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLConfig"),c(Ek,"href","/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtConfig"),c(Ck,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(wk,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Ak,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(yk,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaConfig"),c(Lk,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(xk,"href","/docs/transformers/pr_17443/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c($k,"href","/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTConfig"),c(kk,"href","/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrConfig"),c(Sk,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Rk,"href","/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRConfig"),c(Pk,"href","/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTConfig"),c(Bk,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraConfig"),c(Ik,"href","/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Nk,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertConfig"),c(qk,"href","/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaConfig"),c(jk,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetConfig"),c(Dk,"href","/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTConfig"),c(Gk,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelConfig"),c(Ok,"href","/docs/transformers/pr_17443/en/model_doc/glpn#transformers.GLPNConfig"),c(Vk,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Config"),c(Xk,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(zk,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Wk,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJConfig"),c(Qk,"href","/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertConfig"),c(Hk,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertConfig"),c(Uk,"href","/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Jk,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Yk,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Kk,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Zk,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDConfig"),c(eS,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerConfig"),c(oS,"href","/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeConfig"),c(rS,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertConfig"),c(tS,"href","/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100Config"),c(aS,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianConfig"),c(nS,"href","/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(sS,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartConfig"),c(lS,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(iS,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(dS,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetConfig"),c(cS,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Config"),c(fS,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(mS,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(gS,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTConfig"),c(hS,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusConfig"),c(pS,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverConfig"),c(_S,"href","/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartConfig"),c(uS,"href","/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(bS,"href","/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(vS,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(FS,"href","/docs/transformers/pr_17443/en/model_doc/rag#transformers.RagConfig"),c(TS,"href","/docs/transformers/pr_17443/en/model_doc/realm#transformers.RealmConfig"),c(MS,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerConfig"),c(ES,"href","/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetConfig"),c(CS,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertConfig"),c(wS,"href","/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetConfig"),c(AS,"href","/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertConfig"),c(yS,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaConfig"),c(LS,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerConfig"),c(xS,"href","/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerConfig"),c($S,"href","/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWConfig"),c(kS,"href","/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDConfig"),c(SS,"href","/docs/transformers/pr_17443/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(RS,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(PS,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(BS,"href","/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterConfig"),c(IS,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(NS,"href","/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinConfig"),c(qS,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Config"),c(jS,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasConfig"),c(DS,"href","/docs/transformers/pr_17443/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(GS,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(OS,"href","/docs/transformers/pr_17443/en/model_doc/trocr#transformers.TrOCRConfig"),c(VS,"href","/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(XS,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(zS,"href","/docs/transformers/pr_17443/en/model_doc/van#transformers.VanConfig"),c(WS,"href","/docs/transformers/pr_17443/en/model_doc/vilt#transformers.ViltConfig"),c(QS,"href","/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(HS,"href","/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(US,"href","/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(JS,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTConfig"),c(YS,"href","/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(KS,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(ZS,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(eR,"href","/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMConfig"),c(oR,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMConfig"),c(rR,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMConfig"),c(tR,"href","/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(aR,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(nR,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(sR,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetConfig"),c(lR,"href","/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosConfig"),c(iR,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ag,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yg,"id","transformers.AutoTokenizer"),c(yg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yg,"href","#transformers.AutoTokenizer"),c(Mi,"class","relative group"),c(dR,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(cR,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertTokenizer"),c(fR,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(mR,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartTokenizer"),c(gR,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartTokenizerFast"),c(hR,"href","/docs/transformers/pr_17443/en/model_doc/barthez#transformers.BarthezTokenizer"),c(pR,"href","/docs/transformers/pr_17443/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(_R,"href","/docs/transformers/pr_17443/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(uR,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizer"),c(bR,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizerFast"),c(vR,"href","/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(FR,"href","/docs/transformers/pr_17443/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(TR,"href","/docs/transformers/pr_17443/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(MR,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(ER,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(CR,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(wR,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(AR,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(yR,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(LR,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(xR,"href","/docs/transformers/pr_17443/en/model_doc/byt5#transformers.ByT5Tokenizer"),c($R,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertTokenizer"),c(kR,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(SR,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineTokenizer"),c(RR,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPTokenizer"),c(PR,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(BR,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(IR,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(NR,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(qR,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(jR,"href","/docs/transformers/pr_17443/en/model_doc/cpm#transformers.CpmTokenizer"),c(DR,"href","/docs/transformers/pr_17443/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(GR,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(OR,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizer"),c(VR,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(XR,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaTokenizer"),c(zR,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(WR,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(QR,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(HR,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(UR,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(JR,"href","/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(YR,"href","/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(KR,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraTokenizer"),c(ZR,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(eP,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(oP,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetTokenizer"),c(rP,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(tP,"href","/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(aP,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelTokenizer"),c(nP,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(sP,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lP,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(iP,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(dP,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(cP,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(fP,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(mP,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(gP,"href","/docs/transformers/pr_17443/en/model_doc/herbert#transformers.HerbertTokenizer"),c(hP,"href","/docs/transformers/pr_17443/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(pP,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(_P,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uP,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bP,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(vP,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(FP,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(TP,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(MP,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(EP,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(CP,"href","/docs/transformers/pr_17443/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(wP,"href","/docs/transformers/pr_17443/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(AP,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDTokenizer"),c(yP,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDTokenizerFast"),c(LP,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerTokenizer"),c(xP,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c($P,"href","/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeTokenizer"),c(kP,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(SP,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(RP,"href","/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(PP,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianTokenizer"),c(BP,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartTokenizer"),c(IP,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(NP,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(qP,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(jP,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizer"),c(DP,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizerFast"),c(GP,"href","/docs/transformers/pr_17443/en/model_doc/mluke#transformers.MLukeTokenizer"),c(OP,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(VP,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(XP,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(zP,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(WP,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Tokenizer"),c(QP,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5TokenizerFast"),c(HP,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertTokenizer"),c(UP,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(JP,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(YP,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(KP,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZP,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(eB,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(oB,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(rB,"href","/docs/transformers/pr_17443/en/model_doc/phobert#transformers.PhobertTokenizer"),c(tB,"href","/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartTokenizer"),c(aB,"href","/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(nB,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizer"),c(sB,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizerFast"),c(lB,"href","/docs/transformers/pr_17443/en/model_doc/rag#transformers.RagTokenizer"),c(iB,"href","/docs/transformers/pr_17443/en/model_doc/realm#transformers.RealmTokenizer"),c(dB,"href","/docs/transformers/pr_17443/en/model_doc/realm#transformers.RealmTokenizerFast"),c(cB,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerTokenizer"),c(fB,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(mB,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertTokenizer"),c(gB,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(hB,"href","/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(pB,"href","/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(_B,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uB,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bB,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(vB,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(FB,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(TB,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(MB,"href","/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterTokenizer"),c(EB,"href","/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(CB,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(wB,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(AB,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Tokenizer"),c(yB,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5TokenizerFast"),c(LB,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasTokenizer"),c(xB,"href","/docs/transformers/pr_17443/en/model_doc/tapex#transformers.TapexTokenizer"),c($B,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(kB,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizer"),c(SB,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertTokenizerFast"),c(RB,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PB,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(BB,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(IB,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMTokenizer"),c(NB,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(qB,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMTokenizer"),c(jB,"href","/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(DB,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(GB,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(OB,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizer"),c(VB,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(XB,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(zB,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(WB,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertTokenizer"),c(QB,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ih,"id","transformers.AutoFeatureExtractor"),c(ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ih,"href","#transformers.AutoFeatureExtractor"),c(Ei,"class","relative group"),c(HB,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(UB,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eI,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17443/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(lI,"href","/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(iI,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(dI,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(cI,"href","/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(gI,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hI,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(pI,"href","/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(_I,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(uI,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(bI,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vI,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(FI,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(TI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(MI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(EI,"href","/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gh,"id","transformers.AutoProcessor"),c(Gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gh,"href","#transformers.AutoProcessor"),c(Ci,"class","relative group"),c(CI,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(wI,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPProcessor"),c(AI,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(yI,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(LI,"href","/docs/transformers/pr_17443/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(xI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($I,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kI,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(SI,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(RI,"href","/docs/transformers/pr_17443/en/model_doc/trocr#transformers.TrOCRProcessor"),c(PI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(II,"href","/docs/transformers/pr_17443/en/model_doc/vilt#transformers.ViltProcessor"),c(NI,"href","/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(qI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DI,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ip,"id","transformers.AutoModel"),c(ip,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ip,"href","#transformers.AutoModel"),c(Ai,"class","relative group"),c(GI,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OI,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VI,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XI,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertModel"),c(zI,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartModel"),c(WI,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitModel"),c(QI,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertModel"),c(HI,"href","/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(UI,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdModel"),c(JI,"href","/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(YI,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(KI,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(ZI,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertModel"),c(eN,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineModel"),c(oN,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.CLIPModel"),c(rN,"href","/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenModel"),c(tN,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertModel"),c(aN,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextModel"),c(nN,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLModel"),c(sN,"href","/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtModel"),c(lN,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(iN,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(dN,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(cN,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaModel"),c(fN,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(mN,"href","/docs/transformers/pr_17443/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(gN,"href","/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTModel"),c(hN,"href","/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrModel"),c(pN,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertModel"),c(_N,"href","/docs/transformers/pr_17443/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(uN,"href","/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTModel"),c(bN,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraModel"),c(vN,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertModel"),c(FN,"href","/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaModel"),c(TN,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetModel"),c(MN,"href","/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTModel"),c(EN,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelModel"),c(CN,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelBaseModel"),c(wN,"href","/docs/transformers/pr_17443/en/model_doc/glpn#transformers.GLPNModel"),c(AN,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Model"),c(yN,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(LN,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(xN,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJModel"),c($N,"href","/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertModel"),c(kN,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertModel"),c(SN,"href","/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(RN,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(PN,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(BN,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(IN,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDModel"),c(NN,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerModel"),c(qN,"href","/docs/transformers/pr_17443/en/model_doc/luke#transformers.LukeModel"),c(jN,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertModel"),c(DN,"href","/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100Model"),c(GN,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianModel"),c(ON,"href","/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerModel"),c(VN,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartModel"),c(XN,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(zN,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertModel"),c(WN,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetModel"),c(QN,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5Model"),c(HN,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerModel"),c(UN,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(JN,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTModel"),c(YN,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusModel"),c(KN,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverModel"),c(ZN,"href","/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartModel"),c(eq,"href","/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerModel"),c(oq,"href","/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(rq,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertModel"),c(tq,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerModel"),c(aq,"href","/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetModel"),c(nq,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertModel"),c(sq,"href","/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetModel"),c(lq,"href","/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertModel"),c(iq,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaModel"),c(dq,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerModel"),c(cq,"href","/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerModel"),c(fq,"href","/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWModel"),c(mq,"href","/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDModel"),c(gq,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(hq,"href","/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterModel"),c(pq,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(_q,"href","/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinModel"),c(uq,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5Model"),c(bq,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasModel"),c(vq,"href","/docs/transformers/pr_17443/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Fq,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Tq,"href","/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Mq,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Eq,"href","/docs/transformers/pr_17443/en/model_doc/van#transformers.VanModel"),c(Cq,"href","/docs/transformers/pr_17443/en/model_doc/vilt#transformers.ViltModel"),c(wq,"href","/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Aq,"href","/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertModel"),c(yq,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTModel"),c(Lq,"href","/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(xq,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c($q,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(kq,"href","/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMModel"),c(Sq,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMModel"),c(Rq,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMModel"),c(Pq,"href","/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Bq,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Iq,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Nq,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetModel"),c(qq,"href","/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosModel"),c(jq,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(su,"id","transformers.AutoModelForPreTraining"),c(su,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(su,"href","#transformers.AutoModelForPreTraining"),c(xi,"class","relative group"),c(Dq,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gq,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oq,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vq,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Xq,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zq,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForPreTraining"),c(Wq,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Qq,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Hq,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Uq,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Jq,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Yq,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Kq,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Zq,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForPreTraining"),c(ej,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(oj,"href","/docs/transformers/pr_17443/en/model_doc/flava#transformers.FlavaForPreTraining"),c(rj,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForPreTraining"),c(tj,"href","/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(aj,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(nj,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(sj,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(lj,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ij,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(dj,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(cj,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(fj,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(mj,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(gj,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(hj,"href","/docs/transformers/pr_17443/en/model_doc/retribert#transformers.RetriBertModel"),c(pj,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(_j,"href","/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(uj,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(bj,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(vj,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Tj,"href","/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Mj,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Ej,"href","/docs/transformers/pr_17443/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Cj,"href","/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(wj,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Aj,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(yj,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Lj,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(xj,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c($j,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ku,"id","transformers.AutoModelForCausalLM"),c(Ku,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ku,"href","#transformers.AutoModelForCausalLM"),c(Si,"class","relative group"),c(kj,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sj,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rj,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pj,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForCausalLM"),c(Bj,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertLMHeadModel"),c(Ij,"href","/docs/transformers/pr_17443/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Nj,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(qj,"href","/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(jj,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Dj,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Gj,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Oj,"href","/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(Vj,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Xj,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(zj,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Wj,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Qj,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Hj,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Uj,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Jj,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianForCausalLM"),c(Yj,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Kj,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Zj,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(eD,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.OPTForCausalLM"),c(oD,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(rD,"href","/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(tD,"href","/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(aD,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(nD,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(sD,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(lD,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(iD,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(dD,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(cD,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(fD,"href","/docs/transformers/pr_17443/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(mD,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(gD,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(hD,"href","/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(pD,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(_D,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(uD,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D4,"id","transformers.AutoModelForMaskedLM"),c(D4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D4,"href","#transformers.AutoModelForMaskedLM"),c(Bi,"class","relative group"),c(bD,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vD,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FD,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TD,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(MD,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForMaskedLM"),c(CD,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(wD,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(AD,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(yD,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(LD,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(xD,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c($D,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(kD,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(SD,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(RD,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(PD,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(BD,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(ID,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ND,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(qD,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(jD,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(DD,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(GD,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(OD,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(VD,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(XD,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(zD,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(WD,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(QD,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(HD,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(UD,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(JD,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(YD,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(KD,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(eG,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w1,"id","transformers.AutoModelForSeq2SeqLM"),c(w1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w1,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(oG,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rG,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tG,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aG,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(dG,"href","/docs/transformers/pr_17443/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(cG,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(fG,"href","/docs/transformers/pr_17443/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(mG,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.MarianMTModel"),c(gG,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(hG,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(pG,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(uG,"href","/docs/transformers/pr_17443/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(bG,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(vG,"href","/docs/transformers/pr_17443/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z1,"id","transformers.AutoModelForSequenceClassification"),c(z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z1,"href","#transformers.AutoModelForSequenceClassification"),c(Gi,"class","relative group"),c(FG,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TG,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MG,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EG,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForSequenceClassification"),c($G,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17443/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(mO,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(gO,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(hO,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(pO,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ob,"id","transformers.AutoModelForMultipleChoice"),c(Ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ob,"href","#transformers.AutoModelForMultipleChoice"),c(Xi,"class","relative group"),c(_O,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uO,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bO,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vO,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c($O,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(IO,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(NO,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(qO,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(jO,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(DO,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(GO,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(OO,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(VO,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(XO,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(zO,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(WO,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(QO,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T2,"id","transformers.AutoModelForNextSentencePrediction"),c(T2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T2,"href","#transformers.AutoModelForNextSentencePrediction"),c(Qi,"class","relative group"),c(HO,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UO,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JO,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YO,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(KO,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(ZO,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(eV,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(oV,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($2,"id","transformers.AutoModelForTokenClassification"),c($2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($2,"href","#transformers.AutoModelForTokenClassification"),c(Ji,"class","relative group"),c(rV,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tV,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aV,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nV,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(sV,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForTokenClassification"),c(lV,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(iV,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(dV,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForTokenClassification"),c(cV,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(fV,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(mV,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(gV,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(hV,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(pV,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(_V,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(uV,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(bV,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(vV,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(FV,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(TV,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(MV,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(EV,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(CV,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(wV,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(AV,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(yV,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(LV,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(xV,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c($V,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(kV,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(SV,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(RV,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(PV,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(BV,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(IV,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(NV,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(qV,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hv,"id","transformers.AutoModelForQuestionAnswering"),c(hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hv,"href","#transformers.AutoModelForQuestionAnswering"),c(Zi,"class","relative group"),c(jV,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DV,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GV,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OV,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17443/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17443/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(rX,"href","/docs/transformers/pr_17443/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17443/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17443/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17443/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17443/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17443/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17443/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_17443/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_17443/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(CX,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(yX,"href","/docs/transformers/pr_17443/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a3,"id","transformers.AutoModelForTableQuestionAnswering"),c(a3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a3,"href","#transformers.AutoModelForTableQuestionAnswering"),c(rd,"class","relative group"),c(LX,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d3,"id","transformers.AutoModelForImageClassification"),c(d3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d3,"href","#transformers.AutoModelForImageClassification"),c(nd,"class","relative group"),c(SX,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitForImageClassification"),c(IX,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(NX,"href","/docs/transformers/pr_17443/en/model_doc/cvt#transformers.CvtForImageClassification"),c(qX,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(jX,"href","/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTForImageClassification"),c(DX,"href","/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(GX,"href","/docs/transformers/pr_17443/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(OX,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(VX,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(XX,"href","/docs/transformers/pr_17443/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(zX,"href","/docs/transformers/pr_17443/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(WX,"href","/docs/transformers/pr_17443/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(QX,"href","/docs/transformers/pr_17443/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(HX,"href","/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(UX,"href","/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinForImageClassification"),c(JX,"href","/docs/transformers/pr_17443/en/model_doc/van#transformers.VanForImageClassification"),c(YX,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w3,"id","transformers.AutoModelForVision2Seq"),c(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w3,"href","#transformers.AutoModelForVision2Seq"),c(id,"class","relative group"),c(KX,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZX,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ez,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oz,"href","/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($3,"id","transformers.AutoModelForAudioClassification"),c($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($3,"href","#transformers.AutoModelForAudioClassification"),c(fd,"class","relative group"),c(rz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(az,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nz,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(sz,"href","/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(lz,"href","/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(iz,"href","/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(dz,"href","/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(cz,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(fz,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(mz,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(gz,"href","/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V3,"id","transformers.AutoModelForAudioFrameClassification"),c(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V3,"href","#transformers.AutoModelForAudioFrameClassification"),c(hd,"class","relative group"),c(hz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uz,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(bz,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(vz,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Fz,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Tz,"href","/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K3,"id","transformers.AutoModelForCTC"),c(K3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K3,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(Mz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ez,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wz,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(Az,"href","/docs/transformers/pr_17443/en/model_doc/hubert#transformers.HubertForCTC"),c(yz,"href","/docs/transformers/pr_17443/en/model_doc/sew#transformers.SEWForCTC"),c(Lz,"href","/docs/transformers/pr_17443/en/model_doc/sew-d#transformers.SEWDForCTC"),c(xz,"href","/docs/transformers/pr_17443/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c($z,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(kz,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Sz,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Rz,"href","/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Fd,"class","relative group"),c(Pz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nz,"href","/docs/transformers/pr_17443/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(qz,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uF,"id","transformers.AutoModelForAudioXVector"),c(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uF,"href","#transformers.AutoModelForAudioXVector"),c(Ed,"class","relative group"),c(jz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Vz,"href","/docs/transformers/pr_17443/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Xz,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(zz,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Wz,"href","/docs/transformers/pr_17443/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AF,"id","transformers.AutoModelForMaskedImageModeling"),c(AF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ad,"class","relative group"),c(Qz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jz,"href","/docs/transformers/pr_17443/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Yz,"href","/docs/transformers/pr_17443/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Kz,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RF,"id","transformers.AutoModelForObjectDetection"),c(RF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RF,"href","#transformers.AutoModelForObjectDetection"),c($d,"class","relative group"),c(Zz,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rW,"href","/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrForObjectDetection"),c(tW,"href","/docs/transformers/pr_17443/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForImageSegmentation"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForImageSegmentation"),c(Rd,"class","relative group"),c(aW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lW,"href","/docs/transformers/pr_17443/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForSemanticSegmentation"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Id,"class","relative group"),c(iW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fW,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(mW,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(gW,"href","/docs/transformers/pr_17443/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(hW,"href","/docs/transformers/pr_17443/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KF,"id","transformers.AutoModelForInstanceSegmentation"),c(KF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KF,"href","#transformers.AutoModelForInstanceSegmentation"),c(jd,"class","relative group"),c(pW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_17443/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tT,"id","transformers.TFAutoModel"),c(tT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tT,"href","#transformers.TFAutoModel"),c(Od,"class","relative group"),c(vW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertModel"),c(EW,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.TFBartModel"),c(CW,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertModel"),c(wW,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(AW,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(yW,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertModel"),c(LW,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.TFCLIPModel"),c(xW,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertModel"),c($W,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.TFConvNextModel"),c(kW,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLModel"),c(SW,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(RW,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaModel"),c(PW,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(BW,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(IW,"href","/docs/transformers/pr_17443/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(NW,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraModel"),c(qW,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(jW,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelModel"),c(DW,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(GW,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2Model"),c(OW,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJModel"),c(VW,"href","/docs/transformers/pr_17443/en/model_doc/hubert#transformers.TFHubertModel"),c(XW,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(zW,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.TFLEDModel"),c(WW,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerModel"),c(QW,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.TFLxmertModel"),c(HW,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.TFMarianModel"),c(UW,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.TFMBartModel"),c(JW,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(YW,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetModel"),c(KW,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.TFMT5Model"),c(ZW,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(eQ,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.TFOPTModel"),c(oQ,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.TFPegasusModel"),c(rQ,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertModel"),c(tQ,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaModel"),c(aQ,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerModel"),c(nQ,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(sQ,"href","/docs/transformers/pr_17443/en/model_doc/swin#transformers.TFSwinModel"),c(lQ,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.TFT5Model"),c(iQ,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasModel"),c(dQ,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(cQ,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.TFViTModel"),c(fQ,"href","/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(mQ,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(gQ,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMModel"),c(hQ,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(pQ,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KT,"id","transformers.TFAutoModelForPreTraining"),c(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KT,"href","#transformers.TFAutoModelForPreTraining"),c(zd,"class","relative group"),c(_Q,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vQ,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(FQ,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(TQ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForPreTraining"),c(MQ,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(EQ,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(CQ,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(AQ,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(yQ,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(LQ,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(xQ,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c($Q,"href","/docs/transformers/pr_17443/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(kQ,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(SQ,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(RQ,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(PQ,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(IQ,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(qQ,"href","/docs/transformers/pr_17443/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(jQ,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(DQ,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(GQ,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C7,"id","transformers.TFAutoModelForCausalLM"),c(C7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C7,"href","#transformers.TFAutoModelForCausalLM"),c(Hd,"class","relative group"),c(OQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XQ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zQ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(WQ,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(QQ,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(HQ,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(UQ,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(JQ,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(YQ,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(KQ,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(ZQ,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(eH,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(oH,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(rH,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(tH,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D7,"id","transformers.TFAutoModelForImageClassification"),c(D7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D7,"href","#transformers.TFAutoModelForImageClassification"),c(Yd,"class","relative group"),c(aH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lH,"href","/docs/transformers/pr_17443/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(iH,"href","/docs/transformers/pr_17443/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(dH,"href","/docs/transformers/pr_17443/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(cH,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q7,"id","transformers.TFAutoModelForMaskedLM"),c(Q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q7,"href","#transformers.TFAutoModelForMaskedLM"),c(ec,"class","relative group"),c(fH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hH,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(pH,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(_H,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(uH,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(bH,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(vH,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(FH,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(TH,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(MH,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(EH,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(CH,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(wH,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(AH,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(yH,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(LH,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(xH,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c($H,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(kH,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(SH,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(RH,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_M,"id","transformers.TFAutoModelForSeq2SeqLM"),c(_M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_M,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(tc,"class","relative group"),c(PH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(qH,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(jH,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(DH,"href","/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(GH,"href","/docs/transformers/pr_17443/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(OH,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.TFMarianMTModel"),c(VH,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(XH,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(zH,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(WH,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xM,"id","transformers.TFAutoModelForSequenceClassification"),c(xM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xM,"href","#transformers.TFAutoModelForSequenceClassification"),c(sc,"class","relative group"),c(QH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UH,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JH,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(YH,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(KH,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(eU,"href","/docs/transformers/pr_17443/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(oU,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(rU,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(tU,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(aU,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(nU,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(sU,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(lU,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(iU,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(dU,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(cU,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(fU,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(mU,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(gU,"href","/docs/transformers/pr_17443/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(hU,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(pU,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(_U,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(uU,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(bU,"href","/docs/transformers/pr_17443/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(vU,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(FU,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(TU,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aE,"id","transformers.TFAutoModelForMultipleChoice"),c(aE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aE,"href","#transformers.TFAutoModelForMultipleChoice"),c(dc,"class","relative group"),c(MU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wU,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(AU,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(yU,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(LU,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(xU,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c($U,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(kU,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(SU,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(RU,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(PU,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(BU,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(IU,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(NU,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(qU,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(jU,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(DU,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(GU,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c(OU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zU,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(WU,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(pc,"class","relative group"),c(QU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JU,"href","/docs/transformers/pr_17443/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RE,"id","transformers.TFAutoModelForTokenClassification"),c(RE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RE,"href","#transformers.TFAutoModelForTokenClassification"),c(bc,"class","relative group"),c(YU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZU,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eJ,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(oJ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(rJ,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(tJ,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(aJ,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(nJ,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(sJ,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(lJ,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(iJ,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(dJ,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(cJ,"href","/docs/transformers/pr_17443/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(fJ,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(mJ,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(gJ,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(hJ,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(pJ,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(_J,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(uJ,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(bJ,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(vJ,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rC,"id","transformers.TFAutoModelForQuestionAnswering"),c(rC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Tc,"class","relative group"),c(FJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EJ,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_17443/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_17443/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_17443/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_17443/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(xJ,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c($J,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(kJ,"href","/docs/transformers/pr_17443/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(SJ,"href","/docs/transformers/pr_17443/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(RJ,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(PJ,"href","/docs/transformers/pr_17443/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(BJ,"href","/docs/transformers/pr_17443/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_17443/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(NJ,"href","/docs/transformers/pr_17443/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(qJ,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(jJ,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(DJ,"href","/docs/transformers/pr_17443/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(GJ,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(OJ,"href","/docs/transformers/pr_17443/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wC,"id","transformers.TFAutoModelForVision2Seq"),c(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wC,"href","#transformers.TFAutoModelForVision2Seq"),c(Cc,"class","relative group"),c(VJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(xC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(QJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/pr_17443/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RC,"id","transformers.FlaxAutoModel"),c(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RC,"href","#transformers.FlaxAutoModel"),c($c,"class","relative group"),c(YJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZJ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertModel"),c(oY,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartModel"),c(rY,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.FlaxBeitModel"),c(tY,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertModel"),c(aY,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(nY,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(sY,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(lY,"href","/docs/transformers/pr_17443/en/model_doc/clip#transformers.FlaxCLIPModel"),c(iY,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(dY,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraModel"),c(cY,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(fY,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(mY,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(gY,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.FlaxMarianModel"),c(hY,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartModel"),c(pY,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.FlaxMT5Model"),c(_Y,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.FlaxOPTModel"),c(uY,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(bY,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(vY,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(FY,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.FlaxT5Model"),c(TY,"href","/docs/transformers/pr_17443/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(MY,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.FlaxViTModel"),c(EY,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(CY,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(wY,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i5,"id","transformers.FlaxAutoModelForCausalLM"),c(i5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Rc,"class","relative group"),c(AY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xY,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c($Y,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(kY,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(SY,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(RY,"href","/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(PY,"href","/docs/transformers/pr_17443/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(BY,"href","/docs/transformers/pr_17443/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(IY,"href","/docs/transformers/pr_17443/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(NY,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(qY,"href","/docs/transformers/pr_17443/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T5,"id","transformers.FlaxAutoModelForPreTraining"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ic,"class","relative group"),c(jY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GY,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OY,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(VY,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(XY,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(zY,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(WY,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(QY,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(HY,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(UY,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(JY,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(YY,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(KY,"href","/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(ZY,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I5,"id","transformers.FlaxAutoModelForMaskedLM"),c(I5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(jc,"class","relative group"),c(eK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tK,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(aK,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(nK,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(sK,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(lK,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(iK,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(dK,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(cK,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(fK,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(mK,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Oc,"class","relative group"),c(gK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_K,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(uK,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(bK,"href","/docs/transformers/pr_17443/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(vK,"href","/docs/transformers/pr_17443/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(FK,"href","/docs/transformers/pr_17443/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(TK,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MK,"href","/docs/transformers/pr_17443/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(EK,"href","/docs/transformers/pr_17443/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(CK,"href","/docs/transformers/pr_17443/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(l0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(zc,"class","relative group"),c(wK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LK,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(xK,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c($K,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(kK,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(SK,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(RK,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(PK,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(BK,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(IK,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(NK,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(F0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Hc,"class","relative group"),c(qK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GK,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(OK,"href","/docs/transformers/pr_17443/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(VK,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(XK,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(zK,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(WK,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(QK,"href","/docs/transformers/pr_17443/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(HK,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(UK,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(JK,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R0,"id","transformers.FlaxAutoModelForTokenClassification"),c(R0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Yc,"class","relative group"),c(YK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZK,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eZ,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(oZ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(rZ,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(tZ,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(aZ,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(nZ,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(sZ,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(lZ,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(X0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ef,"class","relative group"),c(iZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fZ,"href","/docs/transformers/pr_17443/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(mZ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(gZ,"href","/docs/transformers/pr_17443/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(hZ,"href","/docs/transformers/pr_17443/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(pZ,"href","/docs/transformers/pr_17443/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(_Z,"href","/docs/transformers/pr_17443/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(uZ,"href","/docs/transformers/pr_17443/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(bZ,"href","/docs/transformers/pr_17443/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ow,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ow,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(tf,"class","relative group"),c(vZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MZ,"href","/docs/transformers/pr_17443/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nw,"id","transformers.FlaxAutoModelForImageClassification"),c(nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nw,"href","#transformers.FlaxAutoModelForImageClassification"),c(sf,"class","relative group"),c(EZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AZ,"href","/docs/transformers/pr_17443/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(yZ,"href","/docs/transformers/pr_17443/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cw,"id","transformers.FlaxAutoModelForVision2Seq"),c(cw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(cf,"class","relative group"),c(LZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xZ,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Z,"href","/docs/transformers/pr_17443/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kZ,"href","/docs/transformers/pr_17443/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,mi),b(f,_f,u),b(f,rt,u),e(rt,gi),e(rt,hi),e(hi,kA),e(rt,uf),b(f,De,u),b(f,We,u),e(We,pi),e(We,yn),e(yn,SA),e(We,Ln),e(We,xn),e(xn,RA),e(We,_i),e(We,$n),e($n,PA),e(We,ui),b(f,bf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,ek),e(Ae,bi),e(bi,ok),e(Ae,rk),b(f,Eo,u),b(f,wa,u),e(wa,tk),e(wa,vf),e(vf,ak),e(wa,OOe),b(f,kqe,u),b(f,vi,u),e(vi,Ff),e(Ff,Coe),M(BA,Coe,null),e(vi,VOe),e(vi,woe),e(woe,XOe),b(f,Sqe,u),b(f,kn,u),e(kn,zOe),e(kn,Aoe),e(Aoe,WOe),e(kn,QOe),e(kn,yoe),e(yoe,HOe),e(kn,UOe),b(f,Rqe,u),M(IA,f,u),b(f,Pqe,u),b(f,nk,u),e(nk,JOe),b(f,Bqe,u),M(Tf,f,u),b(f,Iqe,u),b(f,Fi,u),e(Fi,Mf),e(Mf,Loe),M(NA,Loe,null),e(Fi,YOe),e(Fi,xoe),e(xoe,KOe),b(f,Nqe,u),b(f,Co,u),M(qA,Co,null),e(Co,ZOe),e(Co,jA),e(jA,eVe),e(jA,sk),e(sk,oVe),e(jA,rVe),e(Co,tVe),e(Co,DA),e(DA,aVe),e(DA,$oe),e($oe,nVe),e(DA,sVe),e(Co,lVe),e(Co,Er),M(GA,Er,null),e(Er,iVe),e(Er,koe),e(koe,dVe),e(Er,cVe),e(Er,Ti),e(Ti,fVe),e(Ti,Soe),e(Soe,mVe),e(Ti,gVe),e(Ti,Roe),e(Roe,hVe),e(Ti,pVe),e(Er,_Ve),e(Er,A),e(A,Ef),e(Ef,Poe),e(Poe,uVe),e(Ef,bVe),e(Ef,lk),e(lk,vVe),e(Ef,FVe),e(A,TVe),e(A,Cf),e(Cf,Boe),e(Boe,MVe),e(Cf,EVe),e(Cf,ik),e(ik,CVe),e(Cf,wVe),e(A,AVe),e(A,wf),e(wf,Ioe),e(Ioe,yVe),e(wf,LVe),e(wf,dk),e(dk,xVe),e(wf,$Ve),e(A,kVe),e(A,Af),e(Af,Noe),e(Noe,SVe),e(Af,RVe),e(Af,ck),e(ck,PVe),e(Af,BVe),e(A,IVe),e(A,yf),e(yf,qoe),e(qoe,NVe),e(yf,qVe),e(yf,fk),e(fk,jVe),e(yf,DVe),e(A,GVe),e(A,Lf),e(Lf,joe),e(joe,OVe),e(Lf,VVe),e(Lf,mk),e(mk,XVe),e(Lf,zVe),e(A,WVe),e(A,xf),e(xf,Doe),e(Doe,QVe),e(xf,HVe),e(xf,gk),e(gk,UVe),e(xf,JVe),e(A,YVe),e(A,$f),e($f,Goe),e(Goe,KVe),e($f,ZVe),e($f,hk),e(hk,eXe),e($f,oXe),e(A,rXe),e(A,kf),e(kf,Ooe),e(Ooe,tXe),e(kf,aXe),e(kf,pk),e(pk,nXe),e(kf,sXe),e(A,lXe),e(A,Sf),e(Sf,Voe),e(Voe,iXe),e(Sf,dXe),e(Sf,_k),e(_k,cXe),e(Sf,fXe),e(A,mXe),e(A,Rf),e(Rf,Xoe),e(Xoe,gXe),e(Rf,hXe),e(Rf,uk),e(uk,pXe),e(Rf,_Xe),e(A,uXe),e(A,Pf),e(Pf,zoe),e(zoe,bXe),e(Pf,vXe),e(Pf,bk),e(bk,FXe),e(Pf,TXe),e(A,MXe),e(A,Bf),e(Bf,Woe),e(Woe,EXe),e(Bf,CXe),e(Bf,vk),e(vk,wXe),e(Bf,AXe),e(A,yXe),e(A,If),e(If,Qoe),e(Qoe,LXe),e(If,xXe),e(If,Fk),e(Fk,$Xe),e(If,kXe),e(A,SXe),e(A,Nf),e(Nf,Hoe),e(Hoe,RXe),e(Nf,PXe),e(Nf,Tk),e(Tk,BXe),e(Nf,IXe),e(A,NXe),e(A,qf),e(qf,Uoe),e(Uoe,qXe),e(qf,jXe),e(qf,Mk),e(Mk,DXe),e(qf,GXe),e(A,OXe),e(A,jf),e(jf,Joe),e(Joe,VXe),e(jf,XXe),e(jf,Ek),e(Ek,zXe),e(jf,WXe),e(A,QXe),e(A,Df),e(Df,Yoe),e(Yoe,HXe),e(Df,UXe),e(Df,Ck),e(Ck,JXe),e(Df,YXe),e(A,KXe),e(A,Gf),e(Gf,Koe),e(Koe,ZXe),e(Gf,eze),e(Gf,wk),e(wk,oze),e(Gf,rze),e(A,tze),e(A,Of),e(Of,Zoe),e(Zoe,aze),e(Of,nze),e(Of,Ak),e(Ak,sze),e(Of,lze),e(A,ize),e(A,Vf),e(Vf,ere),e(ere,dze),e(Vf,cze),e(Vf,yk),e(yk,fze),e(Vf,mze),e(A,gze),e(A,Xf),e(Xf,ore),e(ore,hze),e(Xf,pze),e(Xf,Lk),e(Lk,_ze),e(Xf,uze),e(A,bze),e(A,zf),e(zf,rre),e(rre,vze),e(zf,Fze),e(zf,xk),e(xk,Tze),e(zf,Mze),e(A,Eze),e(A,Wf),e(Wf,tre),e(tre,Cze),e(Wf,wze),e(Wf,$k),e($k,Aze),e(Wf,yze),e(A,Lze),e(A,Qf),e(Qf,are),e(are,xze),e(Qf,$ze),e(Qf,kk),e(kk,kze),e(Qf,Sze),e(A,Rze),e(A,Hf),e(Hf,nre),e(nre,Pze),e(Hf,Bze),e(Hf,Sk),e(Sk,Ize),e(Hf,Nze),e(A,qze),e(A,Uf),e(Uf,sre),e(sre,jze),e(Uf,Dze),e(Uf,Rk),e(Rk,Gze),e(Uf,Oze),e(A,Vze),e(A,Jf),e(Jf,lre),e(lre,Xze),e(Jf,zze),e(Jf,Pk),e(Pk,Wze),e(Jf,Qze),e(A,Hze),e(A,Yf),e(Yf,ire),e(ire,Uze),e(Yf,Jze),e(Yf,Bk),e(Bk,Yze),e(Yf,Kze),e(A,Zze),e(A,Kf),e(Kf,dre),e(dre,eWe),e(Kf,oWe),e(Kf,Ik),e(Ik,rWe),e(Kf,tWe),e(A,aWe),e(A,Zf),e(Zf,cre),e(cre,nWe),e(Zf,sWe),e(Zf,Nk),e(Nk,lWe),e(Zf,iWe),e(A,dWe),e(A,em),e(em,fre),e(fre,cWe),e(em,fWe),e(em,qk),e(qk,mWe),e(em,gWe),e(A,hWe),e(A,om),e(om,mre),e(mre,pWe),e(om,_We),e(om,jk),e(jk,uWe),e(om,bWe),e(A,vWe),e(A,rm),e(rm,gre),e(gre,FWe),e(rm,TWe),e(rm,Dk),e(Dk,MWe),e(rm,EWe),e(A,CWe),e(A,tm),e(tm,hre),e(hre,wWe),e(tm,AWe),e(tm,Gk),e(Gk,yWe),e(tm,LWe),e(A,xWe),e(A,am),e(am,pre),e(pre,$We),e(am,kWe),e(am,Ok),e(Ok,SWe),e(am,RWe),e(A,PWe),e(A,nm),e(nm,_re),e(_re,BWe),e(nm,IWe),e(nm,Vk),e(Vk,NWe),e(nm,qWe),e(A,jWe),e(A,sm),e(sm,ure),e(ure,DWe),e(sm,GWe),e(sm,Xk),e(Xk,OWe),e(sm,VWe),e(A,XWe),e(A,lm),e(lm,bre),e(bre,zWe),e(lm,WWe),e(lm,zk),e(zk,QWe),e(lm,HWe),e(A,UWe),e(A,im),e(im,vre),e(vre,JWe),e(im,YWe),e(im,Wk),e(Wk,KWe),e(im,ZWe),e(A,eQe),e(A,dm),e(dm,Fre),e(Fre,oQe),e(dm,rQe),e(dm,Qk),e(Qk,tQe),e(dm,aQe),e(A,nQe),e(A,cm),e(cm,Tre),e(Tre,sQe),e(cm,lQe),e(cm,Hk),e(Hk,iQe),e(cm,dQe),e(A,cQe),e(A,fm),e(fm,Mre),e(Mre,fQe),e(fm,mQe),e(fm,Uk),e(Uk,gQe),e(fm,hQe),e(A,pQe),e(A,mm),e(mm,Ere),e(Ere,_Qe),e(mm,uQe),e(mm,Jk),e(Jk,bQe),e(mm,vQe),e(A,FQe),e(A,gm),e(gm,Cre),e(Cre,TQe),e(gm,MQe),e(gm,Yk),e(Yk,EQe),e(gm,CQe),e(A,wQe),e(A,hm),e(hm,wre),e(wre,AQe),e(hm,yQe),e(hm,Kk),e(Kk,LQe),e(hm,xQe),e(A,$Qe),e(A,pm),e(pm,Are),e(Are,kQe),e(pm,SQe),e(pm,Zk),e(Zk,RQe),e(pm,PQe),e(A,BQe),e(A,_m),e(_m,yre),e(yre,IQe),e(_m,NQe),e(_m,eS),e(eS,qQe),e(_m,jQe),e(A,DQe),e(A,um),e(um,Lre),e(Lre,GQe),e(um,OQe),e(um,oS),e(oS,VQe),e(um,XQe),e(A,zQe),e(A,bm),e(bm,xre),e(xre,WQe),e(bm,QQe),e(bm,rS),e(rS,HQe),e(bm,UQe),e(A,JQe),e(A,vm),e(vm,$re),e($re,YQe),e(vm,KQe),e(vm,tS),e(tS,ZQe),e(vm,eHe),e(A,oHe),e(A,Fm),e(Fm,kre),e(kre,rHe),e(Fm,tHe),e(Fm,aS),e(aS,aHe),e(Fm,nHe),e(A,sHe),e(A,Tm),e(Tm,Sre),e(Sre,lHe),e(Tm,iHe),e(Tm,nS),e(nS,dHe),e(Tm,cHe),e(A,fHe),e(A,Mm),e(Mm,Rre),e(Rre,mHe),e(Mm,gHe),e(Mm,sS),e(sS,hHe),e(Mm,pHe),e(A,_He),e(A,Em),e(Em,Pre),e(Pre,uHe),e(Em,bHe),e(Em,lS),e(lS,vHe),e(Em,FHe),e(A,THe),e(A,Cm),e(Cm,Bre),e(Bre,MHe),e(Cm,EHe),e(Cm,iS),e(iS,CHe),e(Cm,wHe),e(A,AHe),e(A,wm),e(wm,Ire),e(Ire,yHe),e(wm,LHe),e(wm,dS),e(dS,xHe),e(wm,$He),e(A,kHe),e(A,Am),e(Am,Nre),e(Nre,SHe),e(Am,RHe),e(Am,cS),e(cS,PHe),e(Am,BHe),e(A,IHe),e(A,ym),e(ym,qre),e(qre,NHe),e(ym,qHe),e(ym,fS),e(fS,jHe),e(ym,DHe),e(A,GHe),e(A,Lm),e(Lm,jre),e(jre,OHe),e(Lm,VHe),e(Lm,mS),e(mS,XHe),e(Lm,zHe),e(A,WHe),e(A,xm),e(xm,Dre),e(Dre,QHe),e(xm,HHe),e(xm,gS),e(gS,UHe),e(xm,JHe),e(A,YHe),e(A,$m),e($m,Gre),e(Gre,KHe),e($m,ZHe),e($m,hS),e(hS,eUe),e($m,oUe),e(A,rUe),e(A,km),e(km,Ore),e(Ore,tUe),e(km,aUe),e(km,pS),e(pS,nUe),e(km,sUe),e(A,lUe),e(A,Sm),e(Sm,Vre),e(Vre,iUe),e(Sm,dUe),e(Sm,_S),e(_S,cUe),e(Sm,fUe),e(A,mUe),e(A,Rm),e(Rm,Xre),e(Xre,gUe),e(Rm,hUe),e(Rm,uS),e(uS,pUe),e(Rm,_Ue),e(A,uUe),e(A,Pm),e(Pm,zre),e(zre,bUe),e(Pm,vUe),e(Pm,bS),e(bS,FUe),e(Pm,TUe),e(A,MUe),e(A,Bm),e(Bm,Wre),e(Wre,EUe),e(Bm,CUe),e(Bm,vS),e(vS,wUe),e(Bm,AUe),e(A,yUe),e(A,Im),e(Im,Qre),e(Qre,LUe),e(Im,xUe),e(Im,FS),e(FS,$Ue),e(Im,kUe),e(A,SUe),e(A,Nm),e(Nm,Hre),e(Hre,RUe),e(Nm,PUe),e(Nm,TS),e(TS,BUe),e(Nm,IUe),e(A,NUe),e(A,qm),e(qm,Ure),e(Ure,qUe),e(qm,jUe),e(qm,MS),e(MS,DUe),e(qm,GUe),e(A,OUe),e(A,jm),e(jm,Jre),e(Jre,VUe),e(jm,XUe),e(jm,ES),e(ES,zUe),e(jm,WUe),e(A,QUe),e(A,Dm),e(Dm,Yre),e(Yre,HUe),e(Dm,UUe),e(Dm,CS),e(CS,JUe),e(Dm,YUe),e(A,KUe),e(A,Gm),e(Gm,Kre),e(Kre,ZUe),e(Gm,eJe),e(Gm,wS),e(wS,oJe),e(Gm,rJe),e(A,tJe),e(A,Om),e(Om,Zre),e(Zre,aJe),e(Om,nJe),e(Om,AS),e(AS,sJe),e(Om,lJe),e(A,iJe),e(A,Vm),e(Vm,ete),e(ete,dJe),e(Vm,cJe),e(Vm,yS),e(yS,fJe),e(Vm,mJe),e(A,gJe),e(A,Xm),e(Xm,ote),e(ote,hJe),e(Xm,pJe),e(Xm,LS),e(LS,_Je),e(Xm,uJe),e(A,bJe),e(A,zm),e(zm,rte),e(rte,vJe),e(zm,FJe),e(zm,xS),e(xS,TJe),e(zm,MJe),e(A,EJe),e(A,Wm),e(Wm,tte),e(tte,CJe),e(Wm,wJe),e(Wm,$S),e($S,AJe),e(Wm,yJe),e(A,LJe),e(A,Qm),e(Qm,ate),e(ate,xJe),e(Qm,$Je),e(Qm,kS),e(kS,kJe),e(Qm,SJe),e(A,RJe),e(A,Hm),e(Hm,nte),e(nte,PJe),e(Hm,BJe),e(Hm,SS),e(SS,IJe),e(Hm,NJe),e(A,qJe),e(A,Um),e(Um,ste),e(ste,jJe),e(Um,DJe),e(Um,RS),e(RS,GJe),e(Um,OJe),e(A,VJe),e(A,Jm),e(Jm,lte),e(lte,XJe),e(Jm,zJe),e(Jm,PS),e(PS,WJe),e(Jm,QJe),e(A,HJe),e(A,Ym),e(Ym,ite),e(ite,UJe),e(Ym,JJe),e(Ym,BS),e(BS,YJe),e(Ym,KJe),e(A,ZJe),e(A,Km),e(Km,dte),e(dte,eYe),e(Km,oYe),e(Km,IS),e(IS,rYe),e(Km,tYe),e(A,aYe),e(A,Zm),e(Zm,cte),e(cte,nYe),e(Zm,sYe),e(Zm,NS),e(NS,lYe),e(Zm,iYe),e(A,dYe),e(A,eg),e(eg,fte),e(fte,cYe),e(eg,fYe),e(eg,qS),e(qS,mYe),e(eg,gYe),e(A,hYe),e(A,og),e(og,mte),e(mte,pYe),e(og,_Ye),e(og,jS),e(jS,uYe),e(og,bYe),e(A,vYe),e(A,rg),e(rg,gte),e(gte,FYe),e(rg,TYe),e(rg,DS),e(DS,MYe),e(rg,EYe),e(A,CYe),e(A,tg),e(tg,hte),e(hte,wYe),e(tg,AYe),e(tg,GS),e(GS,yYe),e(tg,LYe),e(A,xYe),e(A,ag),e(ag,pte),e(pte,$Ye),e(ag,kYe),e(ag,OS),e(OS,SYe),e(ag,RYe),e(A,PYe),e(A,ng),e(ng,_te),e(_te,BYe),e(ng,IYe),e(ng,VS),e(VS,NYe),e(ng,qYe),e(A,jYe),e(A,sg),e(sg,ute),e(ute,DYe),e(sg,GYe),e(sg,XS),e(XS,OYe),e(sg,VYe),e(A,XYe),e(A,lg),e(lg,bte),e(bte,zYe),e(lg,WYe),e(lg,zS),e(zS,QYe),e(lg,HYe),e(A,UYe),e(A,ig),e(ig,vte),e(vte,JYe),e(ig,YYe),e(ig,WS),e(WS,KYe),e(ig,ZYe),e(A,eKe),e(A,dg),e(dg,Fte),e(Fte,oKe),e(dg,rKe),e(dg,QS),e(QS,tKe),e(dg,aKe),e(A,nKe),e(A,cg),e(cg,Tte),e(Tte,sKe),e(cg,lKe),e(cg,HS),e(HS,iKe),e(cg,dKe),e(A,cKe),e(A,fg),e(fg,Mte),e(Mte,fKe),e(fg,mKe),e(fg,US),e(US,gKe),e(fg,hKe),e(A,pKe),e(A,mg),e(mg,Ete),e(Ete,_Ke),e(mg,uKe),e(mg,JS),e(JS,bKe),e(mg,vKe),e(A,FKe),e(A,gg),e(gg,Cte),e(Cte,TKe),e(gg,MKe),e(gg,YS),e(YS,EKe),e(gg,CKe),e(A,wKe),e(A,hg),e(hg,wte),e(wte,AKe),e(hg,yKe),e(hg,KS),e(KS,LKe),e(hg,xKe),e(A,$Ke),e(A,pg),e(pg,Ate),e(Ate,kKe),e(pg,SKe),e(pg,ZS),e(ZS,RKe),e(pg,PKe),e(A,BKe),e(A,_g),e(_g,yte),e(yte,IKe),e(_g,NKe),e(_g,eR),e(eR,qKe),e(_g,jKe),e(A,DKe),e(A,ug),e(ug,Lte),e(Lte,GKe),e(ug,OKe),e(ug,oR),e(oR,VKe),e(ug,XKe),e(A,zKe),e(A,bg),e(bg,xte),e(xte,WKe),e(bg,QKe),e(bg,rR),e(rR,HKe),e(bg,UKe),e(A,JKe),e(A,vg),e(vg,$te),e($te,YKe),e(vg,KKe),e(vg,tR),e(tR,ZKe),e(vg,eZe),e(A,oZe),e(A,Fg),e(Fg,kte),e(kte,rZe),e(Fg,tZe),e(Fg,aR),e(aR,aZe),e(Fg,nZe),e(A,sZe),e(A,Tg),e(Tg,Ste),e(Ste,lZe),e(Tg,iZe),e(Tg,nR),e(nR,dZe),e(Tg,cZe),e(A,fZe),e(A,Mg),e(Mg,Rte),e(Rte,mZe),e(Mg,gZe),e(Mg,sR),e(sR,hZe),e(Mg,pZe),e(A,_Ze),e(A,Eg),e(Eg,Pte),e(Pte,uZe),e(Eg,bZe),e(Eg,lR),e(lR,vZe),e(Eg,FZe),e(A,TZe),e(A,Cg),e(Cg,Bte),e(Bte,MZe),e(Cg,EZe),e(Cg,iR),e(iR,CZe),e(Cg,wZe),e(Er,AZe),M(wg,Er,null),e(Co,yZe),e(Co,Ag),M(OA,Ag,null),e(Ag,LZe),e(Ag,Ite),e(Ite,xZe),b(f,qqe,u),b(f,Mi,u),e(Mi,yg),e(yg,Nte),M(VA,Nte,null),e(Mi,$Ze),e(Mi,qte),e(qte,kZe),b(f,jqe,u),b(f,wo,u),M(XA,wo,null),e(wo,SZe),e(wo,zA),e(zA,RZe),e(zA,dR),e(dR,PZe),e(zA,BZe),e(wo,IZe),e(wo,WA),e(WA,NZe),e(WA,jte),e(jte,qZe),e(WA,jZe),e(wo,DZe),e(wo,Cr),M(QA,Cr,null),e(Cr,GZe),e(Cr,Dte),e(Dte,OZe),e(Cr,VZe),e(Cr,Aa),e(Aa,XZe),e(Aa,Gte),e(Gte,zZe),e(Aa,WZe),e(Aa,Ote),e(Ote,QZe),e(Aa,HZe),e(Aa,Vte),e(Vte,UZe),e(Aa,JZe),e(Cr,YZe),e(Cr,k),e(k,Sn),e(Sn,Xte),e(Xte,KZe),e(Sn,ZZe),e(Sn,cR),e(cR,eeo),e(Sn,oeo),e(Sn,fR),e(fR,reo),e(Sn,teo),e(k,aeo),e(k,Rn),e(Rn,zte),e(zte,neo),e(Rn,seo),e(Rn,mR),e(mR,leo),e(Rn,ieo),e(Rn,gR),e(gR,deo),e(Rn,ceo),e(k,feo),e(k,Pn),e(Pn,Wte),e(Wte,meo),e(Pn,geo),e(Pn,hR),e(hR,heo),e(Pn,peo),e(Pn,pR),e(pR,_eo),e(Pn,ueo),e(k,beo),e(k,Lg),e(Lg,Qte),e(Qte,veo),e(Lg,Feo),e(Lg,_R),e(_R,Teo),e(Lg,Meo),e(k,Eeo),e(k,Bn),e(Bn,Hte),e(Hte,Ceo),e(Bn,weo),e(Bn,uR),e(uR,Aeo),e(Bn,yeo),e(Bn,bR),e(bR,Leo),e(Bn,xeo),e(k,$eo),e(k,xg),e(xg,Ute),e(Ute,keo),e(xg,Seo),e(xg,vR),e(vR,Reo),e(xg,Peo),e(k,Beo),e(k,$g),e($g,Jte),e(Jte,Ieo),e($g,Neo),e($g,FR),e(FR,qeo),e($g,jeo),e(k,Deo),e(k,kg),e(kg,Yte),e(Yte,Geo),e(kg,Oeo),e(kg,TR),e(TR,Veo),e(kg,Xeo),e(k,zeo),e(k,In),e(In,Kte),e(Kte,Weo),e(In,Qeo),e(In,MR),e(MR,Heo),e(In,Ueo),e(In,ER),e(ER,Jeo),e(In,Yeo),e(k,Keo),e(k,Nn),e(Nn,Zte),e(Zte,Zeo),e(Nn,eoo),e(Nn,CR),e(CR,ooo),e(Nn,roo),e(Nn,wR),e(wR,too),e(Nn,aoo),e(k,noo),e(k,qn),e(qn,eae),e(eae,soo),e(qn,loo),e(qn,AR),e(AR,ioo),e(qn,doo),e(qn,yR),e(yR,coo),e(qn,foo),e(k,moo),e(k,Sg),e(Sg,oae),e(oae,goo),e(Sg,hoo),e(Sg,LR),e(LR,poo),e(Sg,_oo),e(k,uoo),e(k,Rg),e(Rg,rae),e(rae,boo),e(Rg,voo),e(Rg,xR),e(xR,Foo),e(Rg,Too),e(k,Moo),e(k,jn),e(jn,tae),e(tae,Eoo),e(jn,Coo),e(jn,$R),e($R,woo),e(jn,Aoo),e(jn,kR),e(kR,yoo),e(jn,Loo),e(k,xoo),e(k,Pg),e(Pg,aae),e(aae,$oo),e(Pg,koo),e(Pg,SR),e(SR,Soo),e(Pg,Roo),e(k,Poo),e(k,Dn),e(Dn,nae),e(nae,Boo),e(Dn,Ioo),e(Dn,RR),e(RR,Noo),e(Dn,qoo),e(Dn,PR),e(PR,joo),e(Dn,Doo),e(k,Goo),e(k,Gn),e(Gn,sae),e(sae,Ooo),e(Gn,Voo),e(Gn,BR),e(BR,Xoo),e(Gn,zoo),e(Gn,IR),e(IR,Woo),e(Gn,Qoo),e(k,Hoo),e(k,On),e(On,lae),e(lae,Uoo),e(On,Joo),e(On,NR),e(NR,Yoo),e(On,Koo),e(On,qR),e(qR,Zoo),e(On,ero),e(k,oro),e(k,Vn),e(Vn,iae),e(iae,rro),e(Vn,tro),e(Vn,jR),e(jR,aro),e(Vn,nro),e(Vn,DR),e(DR,sro),e(Vn,lro),e(k,iro),e(k,Bg),e(Bg,dae),e(dae,dro),e(Bg,cro),e(Bg,GR),e(GR,fro),e(Bg,mro),e(k,gro),e(k,Xn),e(Xn,cae),e(cae,hro),e(Xn,pro),e(Xn,OR),e(OR,_ro),e(Xn,uro),e(Xn,VR),e(VR,bro),e(Xn,vro),e(k,Fro),e(k,zn),e(zn,fae),e(fae,Tro),e(zn,Mro),e(zn,XR),e(XR,Ero),e(zn,Cro),e(zn,zR),e(zR,wro),e(zn,Aro),e(k,yro),e(k,Wn),e(Wn,mae),e(mae,Lro),e(Wn,xro),e(Wn,WR),e(WR,$ro),e(Wn,kro),e(Wn,QR),e(QR,Sro),e(Wn,Rro),e(k,Pro),e(k,Qn),e(Qn,gae),e(gae,Bro),e(Qn,Iro),e(Qn,HR),e(HR,Nro),e(Qn,qro),e(Qn,UR),e(UR,jro),e(Qn,Dro),e(k,Gro),e(k,Hn),e(Hn,hae),e(hae,Oro),e(Hn,Vro),e(Hn,JR),e(JR,Xro),e(Hn,zro),e(Hn,YR),e(YR,Wro),e(Hn,Qro),e(k,Hro),e(k,Un),e(Un,pae),e(pae,Uro),e(Un,Jro),e(Un,KR),e(KR,Yro),e(Un,Kro),e(Un,ZR),e(ZR,Zro),e(Un,eto),e(k,oto),e(k,Ig),e(Ig,_ae),e(_ae,rto),e(Ig,tto),e(Ig,eP),e(eP,ato),e(Ig,nto),e(k,sto),e(k,Jn),e(Jn,uae),e(uae,lto),e(Jn,ito),e(Jn,oP),e(oP,dto),e(Jn,cto),e(Jn,rP),e(rP,fto),e(Jn,mto),e(k,gto),e(k,Ng),e(Ng,bae),e(bae,hto),e(Ng,pto),e(Ng,tP),e(tP,_to),e(Ng,uto),e(k,bto),e(k,Yn),e(Yn,vae),e(vae,vto),e(Yn,Fto),e(Yn,aP),e(aP,Tto),e(Yn,Mto),e(Yn,nP),e(nP,Eto),e(Yn,Cto),e(k,wto),e(k,Kn),e(Kn,Fae),e(Fae,Ato),e(Kn,yto),e(Kn,sP),e(sP,Lto),e(Kn,xto),e(Kn,lP),e(lP,$to),e(Kn,kto),e(k,Sto),e(k,Zn),e(Zn,Tae),e(Tae,Rto),e(Zn,Pto),e(Zn,iP),e(iP,Bto),e(Zn,Ito),e(Zn,dP),e(dP,Nto),e(Zn,qto),e(k,jto),e(k,qg),e(qg,Mae),e(Mae,Dto),e(qg,Gto),e(qg,cP),e(cP,Oto),e(qg,Vto),e(k,Xto),e(k,es),e(es,Eae),e(Eae,zto),e(es,Wto),e(es,fP),e(fP,Qto),e(es,Hto),e(es,mP),e(mP,Uto),e(es,Jto),e(k,Yto),e(k,os),e(os,Cae),e(Cae,Kto),e(os,Zto),e(os,gP),e(gP,eao),e(os,oao),e(os,hP),e(hP,rao),e(os,tao),e(k,aao),e(k,jg),e(jg,wae),e(wae,nao),e(jg,sao),e(jg,pP),e(pP,lao),e(jg,iao),e(k,dao),e(k,rs),e(rs,Aae),e(Aae,cao),e(rs,fao),e(rs,_P),e(_P,mao),e(rs,gao),e(rs,uP),e(uP,hao),e(rs,pao),e(k,_ao),e(k,ts),e(ts,yae),e(yae,uao),e(ts,bao),e(ts,bP),e(bP,vao),e(ts,Fao),e(ts,vP),e(vP,Tao),e(ts,Mao),e(k,Eao),e(k,as),e(as,Lae),e(Lae,Cao),e(as,wao),e(as,FP),e(FP,Aao),e(as,yao),e(as,TP),e(TP,Lao),e(as,xao),e(k,$ao),e(k,ns),e(ns,xae),e(xae,kao),e(ns,Sao),e(ns,MP),e(MP,Rao),e(ns,Pao),e(ns,EP),e(EP,Bao),e(ns,Iao),e(k,Nao),e(k,ss),e(ss,$ae),e($ae,qao),e(ss,jao),e(ss,CP),e(CP,Dao),e(ss,Gao),e(ss,wP),e(wP,Oao),e(ss,Vao),e(k,Xao),e(k,ls),e(ls,kae),e(kae,zao),e(ls,Wao),e(ls,AP),e(AP,Qao),e(ls,Hao),e(ls,yP),e(yP,Uao),e(ls,Jao),e(k,Yao),e(k,is),e(is,Sae),e(Sae,Kao),e(is,Zao),e(is,LP),e(LP,eno),e(is,ono),e(is,xP),e(xP,rno),e(is,tno),e(k,ano),e(k,Dg),e(Dg,Rae),e(Rae,nno),e(Dg,sno),e(Dg,$P),e($P,lno),e(Dg,ino),e(k,dno),e(k,ds),e(ds,Pae),e(Pae,cno),e(ds,fno),e(ds,kP),e(kP,mno),e(ds,gno),e(ds,SP),e(SP,hno),e(ds,pno),e(k,_no),e(k,Gg),e(Gg,Bae),e(Bae,uno),e(Gg,bno),e(Gg,RP),e(RP,vno),e(Gg,Fno),e(k,Tno),e(k,Og),e(Og,Iae),e(Iae,Mno),e(Og,Eno),e(Og,PP),e(PP,Cno),e(Og,wno),e(k,Ano),e(k,cs),e(cs,Nae),e(Nae,yno),e(cs,Lno),e(cs,BP),e(BP,xno),e(cs,$no),e(cs,IP),e(IP,kno),e(cs,Sno),e(k,Rno),e(k,fs),e(fs,qae),e(qae,Pno),e(fs,Bno),e(fs,NP),e(NP,Ino),e(fs,Nno),e(fs,qP),e(qP,qno),e(fs,jno),e(k,Dno),e(k,ms),e(ms,jae),e(jae,Gno),e(ms,Ono),e(ms,jP),e(jP,Vno),e(ms,Xno),e(ms,DP),e(DP,zno),e(ms,Wno),e(k,Qno),e(k,Vg),e(Vg,Dae),e(Dae,Hno),e(Vg,Uno),e(Vg,GP),e(GP,Jno),e(Vg,Yno),e(k,Kno),e(k,gs),e(gs,Gae),e(Gae,Zno),e(gs,eso),e(gs,OP),e(OP,oso),e(gs,rso),e(gs,VP),e(VP,tso),e(gs,aso),e(k,nso),e(k,hs),e(hs,Oae),e(Oae,sso),e(hs,lso),e(hs,XP),e(XP,iso),e(hs,dso),e(hs,zP),e(zP,cso),e(hs,fso),e(k,mso),e(k,ps),e(ps,Vae),e(Vae,gso),e(ps,hso),e(ps,WP),e(WP,pso),e(ps,_so),e(ps,QP),e(QP,uso),e(ps,bso),e(k,vso),e(k,_s),e(_s,Xae),e(Xae,Fso),e(_s,Tso),e(_s,HP),e(HP,Mso),e(_s,Eso),e(_s,UP),e(UP,Cso),e(_s,wso),e(k,Aso),e(k,us),e(us,zae),e(zae,yso),e(us,Lso),e(us,JP),e(JP,xso),e(us,$so),e(us,YP),e(YP,kso),e(us,Sso),e(k,Rso),e(k,Xg),e(Xg,Wae),e(Wae,Pso),e(Xg,Bso),e(Xg,KP),e(KP,Iso),e(Xg,Nso),e(k,qso),e(k,bs),e(bs,Qae),e(Qae,jso),e(bs,Dso),e(bs,ZP),e(ZP,Gso),e(bs,Oso),e(bs,eB),e(eB,Vso),e(bs,Xso),e(k,zso),e(k,zg),e(zg,Hae),e(Hae,Wso),e(zg,Qso),e(zg,oB),e(oB,Hso),e(zg,Uso),e(k,Jso),e(k,Wg),e(Wg,Uae),e(Uae,Yso),e(Wg,Kso),e(Wg,rB),e(rB,Zso),e(Wg,elo),e(k,olo),e(k,Qg),e(Qg,Jae),e(Jae,rlo),e(Qg,tlo),e(Qg,tB),e(tB,alo),e(Qg,nlo),e(k,slo),e(k,Hg),e(Hg,Yae),e(Yae,llo),e(Hg,ilo),e(Hg,aB),e(aB,dlo),e(Hg,clo),e(k,flo),e(k,vs),e(vs,Kae),e(Kae,mlo),e(vs,glo),e(vs,nB),e(nB,hlo),e(vs,plo),e(vs,sB),e(sB,_lo),e(vs,ulo),e(k,blo),e(k,Ug),e(Ug,Zae),e(Zae,vlo),e(Ug,Flo),e(Ug,lB),e(lB,Tlo),e(Ug,Mlo),e(k,Elo),e(k,Fs),e(Fs,ene),e(ene,Clo),e(Fs,wlo),e(Fs,iB),e(iB,Alo),e(Fs,ylo),e(Fs,dB),e(dB,Llo),e(Fs,xlo),e(k,$lo),e(k,Ts),e(Ts,one),e(one,klo),e(Ts,Slo),e(Ts,cB),e(cB,Rlo),e(Ts,Plo),e(Ts,fB),e(fB,Blo),e(Ts,Ilo),e(k,Nlo),e(k,Ms),e(Ms,rne),e(rne,qlo),e(Ms,jlo),e(Ms,mB),e(mB,Dlo),e(Ms,Glo),e(Ms,gB),e(gB,Olo),e(Ms,Vlo),e(k,Xlo),e(k,Es),e(Es,tne),e(tne,zlo),e(Es,Wlo),e(Es,hB),e(hB,Qlo),e(Es,Hlo),e(Es,pB),e(pB,Ulo),e(Es,Jlo),e(k,Ylo),e(k,Cs),e(Cs,ane),e(ane,Klo),e(Cs,Zlo),e(Cs,_B),e(_B,eio),e(Cs,oio),e(Cs,uB),e(uB,rio),e(Cs,tio),e(k,aio),e(k,ws),e(ws,nne),e(nne,nio),e(ws,sio),e(ws,bB),e(bB,lio),e(ws,iio),e(ws,vB),e(vB,dio),e(ws,cio),e(k,fio),e(k,Jg),e(Jg,sne),e(sne,mio),e(Jg,gio),e(Jg,FB),e(FB,hio),e(Jg,pio),e(k,_io),e(k,Yg),e(Yg,lne),e(lne,uio),e(Yg,bio),e(Yg,TB),e(TB,vio),e(Yg,Fio),e(k,Tio),e(k,As),e(As,ine),e(ine,Mio),e(As,Eio),e(As,MB),e(MB,Cio),e(As,wio),e(As,EB),e(EB,Aio),e(As,yio),e(k,Lio),e(k,ys),e(ys,dne),e(dne,xio),e(ys,$io),e(ys,CB),e(CB,kio),e(ys,Sio),e(ys,wB),e(wB,Rio),e(ys,Pio),e(k,Bio),e(k,Ls),e(Ls,cne),e(cne,Iio),e(Ls,Nio),e(Ls,AB),e(AB,qio),e(Ls,jio),e(Ls,yB),e(yB,Dio),e(Ls,Gio),e(k,Oio),e(k,Kg),e(Kg,fne),e(fne,Vio),e(Kg,Xio),e(Kg,LB),e(LB,zio),e(Kg,Wio),e(k,Qio),e(k,Zg),e(Zg,mne),e(mne,Hio),e(Zg,Uio),e(Zg,xB),e(xB,Jio),e(Zg,Yio),e(k,Kio),e(k,eh),e(eh,gne),e(gne,Zio),e(eh,edo),e(eh,$B),e($B,odo),e(eh,rdo),e(k,tdo),e(k,xs),e(xs,hne),e(hne,ado),e(xs,ndo),e(xs,kB),e(kB,sdo),e(xs,ldo),e(xs,SB),e(SB,ido),e(xs,ddo),e(k,cdo),e(k,oh),e(oh,pne),e(pne,fdo),e(oh,mdo),e(oh,RB),e(RB,gdo),e(oh,hdo),e(k,pdo),e(k,rh),e(rh,_ne),e(_ne,_do),e(rh,udo),e(rh,PB),e(PB,bdo),e(rh,vdo),e(k,Fdo),e(k,th),e(th,une),e(une,Tdo),e(th,Mdo),e(th,BB),e(BB,Edo),e(th,Cdo),e(k,wdo),e(k,$s),e($s,bne),e(bne,Ado),e($s,ydo),e($s,IB),e(IB,Ldo),e($s,xdo),e($s,NB),e(NB,$do),e($s,kdo),e(k,Sdo),e(k,ah),e(ah,vne),e(vne,Rdo),e(ah,Pdo),e(ah,qB),e(qB,Bdo),e(ah,Ido),e(k,Ndo),e(k,nh),e(nh,Fne),e(Fne,qdo),e(nh,jdo),e(nh,jB),e(jB,Ddo),e(nh,Gdo),e(k,Odo),e(k,ks),e(ks,Tne),e(Tne,Vdo),e(ks,Xdo),e(ks,DB),e(DB,zdo),e(ks,Wdo),e(ks,GB),e(GB,Qdo),e(ks,Hdo),e(k,Udo),e(k,Ss),e(Ss,Mne),e(Mne,Jdo),e(Ss,Ydo),e(Ss,OB),e(OB,Kdo),e(Ss,Zdo),e(Ss,VB),e(VB,eco),e(Ss,oco),e(k,rco),e(k,Rs),e(Rs,Ene),e(Ene,tco),e(Rs,aco),e(Rs,XB),e(XB,nco),e(Rs,sco),e(Rs,zB),e(zB,lco),e(Rs,ico),e(k,dco),e(k,Ps),e(Ps,Cne),e(Cne,cco),e(Ps,fco),e(Ps,WB),e(WB,mco),e(Ps,gco),e(Ps,QB),e(QB,hco),e(Ps,pco),e(Cr,_co),M(sh,Cr,null),e(wo,uco),e(wo,lh),M(HA,lh,null),e(lh,bco),e(lh,wne),e(wne,vco),b(f,Dqe,u),b(f,Ei,u),e(Ei,ih),e(ih,Ane),M(UA,Ane,null),e(Ei,Fco),e(Ei,yne),e(yne,Tco),b(f,Gqe,u),b(f,Ao,u),M(JA,Ao,null),e(Ao,Mco),e(Ao,YA),e(YA,Eco),e(YA,HB),e(HB,Cco),e(YA,wco),e(Ao,Aco),e(Ao,KA),e(KA,yco),e(KA,Lne),e(Lne,Lco),e(KA,xco),e(Ao,$co),e(Ao,He),M(ZA,He,null),e(He,kco),e(He,xne),e(xne,Sco),e(He,Rco),e(He,ya),e(ya,Pco),e(ya,$ne),e($ne,Bco),e(ya,Ico),e(ya,kne),e(kne,Nco),e(ya,qco),e(ya,Sne),e(Sne,jco),e(ya,Dco),e(He,Gco),e(He,Y),e(Y,dh),e(dh,Rne),e(Rne,Oco),e(dh,Vco),e(dh,UB),e(UB,Xco),e(dh,zco),e(Y,Wco),e(Y,ch),e(ch,Pne),e(Pne,Qco),e(ch,Hco),e(ch,JB),e(JB,Uco),e(ch,Jco),e(Y,Yco),e(Y,fh),e(fh,Bne),e(Bne,Kco),e(fh,Zco),e(fh,YB),e(YB,efo),e(fh,ofo),e(Y,rfo),e(Y,mh),e(mh,Ine),e(Ine,tfo),e(mh,afo),e(mh,KB),e(KB,nfo),e(mh,sfo),e(Y,lfo),e(Y,gh),e(gh,Nne),e(Nne,ifo),e(gh,dfo),e(gh,ZB),e(ZB,cfo),e(gh,ffo),e(Y,mfo),e(Y,hh),e(hh,qne),e(qne,gfo),e(hh,hfo),e(hh,eI),e(eI,pfo),e(hh,_fo),e(Y,ufo),e(Y,ph),e(ph,jne),e(jne,bfo),e(ph,vfo),e(ph,oI),e(oI,Ffo),e(ph,Tfo),e(Y,Mfo),e(Y,_h),e(_h,Dne),e(Dne,Efo),e(_h,Cfo),e(_h,rI),e(rI,wfo),e(_h,Afo),e(Y,yfo),e(Y,uh),e(uh,Gne),e(Gne,Lfo),e(uh,xfo),e(uh,tI),e(tI,$fo),e(uh,kfo),e(Y,Sfo),e(Y,bh),e(bh,One),e(One,Rfo),e(bh,Pfo),e(bh,aI),e(aI,Bfo),e(bh,Ifo),e(Y,Nfo),e(Y,vh),e(vh,Vne),e(Vne,qfo),e(vh,jfo),e(vh,nI),e(nI,Dfo),e(vh,Gfo),e(Y,Ofo),e(Y,Fh),e(Fh,Xne),e(Xne,Vfo),e(Fh,Xfo),e(Fh,sI),e(sI,zfo),e(Fh,Wfo),e(Y,Qfo),e(Y,Th),e(Th,zne),e(zne,Hfo),e(Th,Ufo),e(Th,lI),e(lI,Jfo),e(Th,Yfo),e(Y,Kfo),e(Y,Mh),e(Mh,Wne),e(Wne,Zfo),e(Mh,emo),e(Mh,iI),e(iI,omo),e(Mh,rmo),e(Y,tmo),e(Y,Eh),e(Eh,Qne),e(Qne,amo),e(Eh,nmo),e(Eh,dI),e(dI,smo),e(Eh,lmo),e(Y,imo),e(Y,Ch),e(Ch,Hne),e(Hne,dmo),e(Ch,cmo),e(Ch,cI),e(cI,fmo),e(Ch,mmo),e(Y,gmo),e(Y,wh),e(wh,Une),e(Une,hmo),e(wh,pmo),e(wh,fI),e(fI,_mo),e(wh,umo),e(Y,bmo),e(Y,Ah),e(Ah,Jne),e(Jne,vmo),e(Ah,Fmo),e(Ah,mI),e(mI,Tmo),e(Ah,Mmo),e(Y,Emo),e(Y,yh),e(yh,Yne),e(Yne,Cmo),e(yh,wmo),e(yh,gI),e(gI,Amo),e(yh,ymo),e(Y,Lmo),e(Y,Lh),e(Lh,Kne),e(Kne,xmo),e(Lh,$mo),e(Lh,hI),e(hI,kmo),e(Lh,Smo),e(Y,Rmo),e(Y,xh),e(xh,Zne),e(Zne,Pmo),e(xh,Bmo),e(xh,pI),e(pI,Imo),e(xh,Nmo),e(Y,qmo),e(Y,$h),e($h,ese),e(ese,jmo),e($h,Dmo),e($h,_I),e(_I,Gmo),e($h,Omo),e(Y,Vmo),e(Y,kh),e(kh,ose),e(ose,Xmo),e(kh,zmo),e(kh,uI),e(uI,Wmo),e(kh,Qmo),e(Y,Hmo),e(Y,Sh),e(Sh,rse),e(rse,Umo),e(Sh,Jmo),e(Sh,bI),e(bI,Ymo),e(Sh,Kmo),e(Y,Zmo),e(Y,Rh),e(Rh,tse),e(tse,ego),e(Rh,ogo),e(Rh,vI),e(vI,rgo),e(Rh,tgo),e(Y,ago),e(Y,Ph),e(Ph,ase),e(ase,ngo),e(Ph,sgo),e(Ph,FI),e(FI,lgo),e(Ph,igo),e(Y,dgo),e(Y,Bh),e(Bh,nse),e(nse,cgo),e(Bh,fgo),e(Bh,TI),e(TI,mgo),e(Bh,ggo),e(Y,hgo),e(Y,Ih),e(Ih,sse),e(sse,pgo),e(Ih,_go),e(Ih,MI),e(MI,ugo),e(Ih,bgo),e(Y,vgo),e(Y,Nh),e(Nh,lse),e(lse,Fgo),e(Nh,Tgo),e(Nh,EI),e(EI,Mgo),e(Nh,Ego),e(He,Cgo),M(qh,He,null),e(He,wgo),M(jh,He,null),e(Ao,Ago),e(Ao,Dh),M(ey,Dh,null),e(Dh,ygo),e(Dh,ise),e(ise,Lgo),b(f,Oqe,u),b(f,Ci,u),e(Ci,Gh),e(Gh,dse),M(oy,dse,null),e(Ci,xgo),e(Ci,cse),e(cse,$go),b(f,Vqe,u),b(f,yo,u),M(ry,yo,null),e(yo,kgo),e(yo,ty),e(ty,Sgo),e(ty,CI),e(CI,Rgo),e(ty,Pgo),e(yo,Bgo),e(yo,ay),e(ay,Igo),e(ay,fse),e(fse,Ngo),e(ay,qgo),e(yo,jgo),e(yo,Ue),M(ny,Ue,null),e(Ue,Dgo),e(Ue,mse),e(mse,Ggo),e(Ue,Ogo),e(Ue,wi),e(wi,Vgo),e(wi,gse),e(gse,Xgo),e(wi,zgo),e(wi,hse),e(hse,Wgo),e(wi,Qgo),e(Ue,Hgo),e(Ue,he),e(he,Oh),e(Oh,pse),e(pse,Ugo),e(Oh,Jgo),e(Oh,wI),e(wI,Ygo),e(Oh,Kgo),e(he,Zgo),e(he,Vh),e(Vh,_se),e(_se,eho),e(Vh,oho),e(Vh,use),e(use,rho),e(Vh,tho),e(he,aho),e(he,Xh),e(Xh,bse),e(bse,nho),e(Xh,sho),e(Xh,AI),e(AI,lho),e(Xh,iho),e(he,dho),e(he,zh),e(zh,vse),e(vse,cho),e(zh,fho),e(zh,yI),e(yI,mho),e(zh,gho),e(he,hho),e(he,Wh),e(Wh,Fse),e(Fse,pho),e(Wh,_ho),e(Wh,LI),e(LI,uho),e(Wh,bho),e(he,vho),e(he,Qh),e(Qh,Tse),e(Tse,Fho),e(Qh,Tho),e(Qh,xI),e(xI,Mho),e(Qh,Eho),e(he,Cho),e(he,Hh),e(Hh,Mse),e(Mse,who),e(Hh,Aho),e(Hh,$I),e($I,yho),e(Hh,Lho),e(he,xho),e(he,Uh),e(Uh,Ese),e(Ese,$ho),e(Uh,kho),e(Uh,kI),e(kI,Sho),e(Uh,Rho),e(he,Pho),e(he,Jh),e(Jh,Cse),e(Cse,Bho),e(Jh,Iho),e(Jh,SI),e(SI,Nho),e(Jh,qho),e(he,jho),e(he,Yh),e(Yh,wse),e(wse,Dho),e(Yh,Gho),e(Yh,RI),e(RI,Oho),e(Yh,Vho),e(he,Xho),e(he,Kh),e(Kh,Ase),e(Ase,zho),e(Kh,Who),e(Kh,PI),e(PI,Qho),e(Kh,Hho),e(he,Uho),e(he,Zh),e(Zh,yse),e(yse,Jho),e(Zh,Yho),e(Zh,BI),e(BI,Kho),e(Zh,Zho),e(he,epo),e(he,ep),e(ep,Lse),e(Lse,opo),e(ep,rpo),e(ep,II),e(II,tpo),e(ep,apo),e(he,npo),e(he,op),e(op,xse),e(xse,spo),e(op,lpo),e(op,NI),e(NI,ipo),e(op,dpo),e(he,cpo),e(he,rp),e(rp,$se),e($se,fpo),e(rp,mpo),e(rp,qI),e(qI,gpo),e(rp,hpo),e(he,ppo),e(he,tp),e(tp,kse),e(kse,_po),e(tp,upo),e(tp,jI),e(jI,bpo),e(tp,vpo),e(he,Fpo),e(he,ap),e(ap,Sse),e(Sse,Tpo),e(ap,Mpo),e(ap,DI),e(DI,Epo),e(ap,Cpo),e(Ue,wpo),M(np,Ue,null),e(Ue,Apo),M(sp,Ue,null),e(yo,ypo),e(yo,lp),M(sy,lp,null),e(lp,Lpo),e(lp,Rse),e(Rse,xpo),b(f,Xqe,u),b(f,Ai,u),e(Ai,ip),e(ip,Pse),M(ly,Pse,null),e(Ai,$po),e(Ai,Bse),e(Bse,kpo),b(f,zqe,u),b(f,Lo,u),M(iy,Lo,null),e(Lo,Spo),e(Lo,yi),e(yi,Rpo),e(yi,GI),e(GI,Ppo),e(yi,Bpo),e(yi,OI),e(OI,Ipo),e(yi,Npo),e(Lo,qpo),e(Lo,dy),e(dy,jpo),e(dy,Ise),e(Ise,Dpo),e(dy,Gpo),e(Lo,Opo),e(Lo,tt),M(cy,tt,null),e(tt,Vpo),e(tt,Nse),e(Nse,Xpo),e(tt,zpo),e(tt,Li),e(Li,Wpo),e(Li,qse),e(qse,Qpo),e(Li,Hpo),e(Li,VI),e(VI,Upo),e(Li,Jpo),e(tt,Ypo),M(dp,tt,null),e(Lo,Kpo),e(Lo,Je),M(fy,Je,null),e(Je,Zpo),e(Je,jse),e(jse,e_o),e(Je,o_o),e(Je,La),e(La,r_o),e(La,Dse),e(Dse,t_o),e(La,a_o),e(La,Gse),e(Gse,n_o),e(La,s_o),e(La,Ose),e(Ose,l_o),e(La,i_o),e(Je,d_o),e(Je,x),e(x,cp),e(cp,Vse),e(Vse,c_o),e(cp,f_o),e(cp,XI),e(XI,m_o),e(cp,g_o),e(x,h_o),e(x,fp),e(fp,Xse),e(Xse,p_o),e(fp,__o),e(fp,zI),e(zI,u_o),e(fp,b_o),e(x,v_o),e(x,mp),e(mp,zse),e(zse,F_o),e(mp,T_o),e(mp,WI),e(WI,M_o),e(mp,E_o),e(x,C_o),e(x,gp),e(gp,Wse),e(Wse,w_o),e(gp,A_o),e(gp,QI),e(QI,y_o),e(gp,L_o),e(x,x_o),e(x,hp),e(hp,Qse),e(Qse,$_o),e(hp,k_o),e(hp,HI),e(HI,S_o),e(hp,R_o),e(x,P_o),e(x,pp),e(pp,Hse),e(Hse,B_o),e(pp,I_o),e(pp,UI),e(UI,N_o),e(pp,q_o),e(x,j_o),e(x,_p),e(_p,Use),e(Use,D_o),e(_p,G_o),e(_p,JI),e(JI,O_o),e(_p,V_o),e(x,X_o),e(x,up),e(up,Jse),e(Jse,z_o),e(up,W_o),e(up,YI),e(YI,Q_o),e(up,H_o),e(x,U_o),e(x,bp),e(bp,Yse),e(Yse,J_o),e(bp,Y_o),e(bp,KI),e(KI,K_o),e(bp,Z_o),e(x,euo),e(x,vp),e(vp,Kse),e(Kse,ouo),e(vp,ruo),e(vp,ZI),e(ZI,tuo),e(vp,auo),e(x,nuo),e(x,Fp),e(Fp,Zse),e(Zse,suo),e(Fp,luo),e(Fp,eN),e(eN,iuo),e(Fp,duo),e(x,cuo),e(x,Tp),e(Tp,ele),e(ele,fuo),e(Tp,muo),e(Tp,oN),e(oN,guo),e(Tp,huo),e(x,puo),e(x,Mp),e(Mp,ole),e(ole,_uo),e(Mp,uuo),e(Mp,rN),e(rN,buo),e(Mp,vuo),e(x,Fuo),e(x,Ep),e(Ep,rle),e(rle,Tuo),e(Ep,Muo),e(Ep,tN),e(tN,Euo),e(Ep,Cuo),e(x,wuo),e(x,Cp),e(Cp,tle),e(tle,Auo),e(Cp,yuo),e(Cp,aN),e(aN,Luo),e(Cp,xuo),e(x,$uo),e(x,wp),e(wp,ale),e(ale,kuo),e(wp,Suo),e(wp,nN),e(nN,Ruo),e(wp,Puo),e(x,Buo),e(x,Ap),e(Ap,nle),e(nle,Iuo),e(Ap,Nuo),e(Ap,sN),e(sN,quo),e(Ap,juo),e(x,Duo),e(x,yp),e(yp,sle),e(sle,Guo),e(yp,Ouo),e(yp,lN),e(lN,Vuo),e(yp,Xuo),e(x,zuo),e(x,Lp),e(Lp,lle),e(lle,Wuo),e(Lp,Quo),e(Lp,iN),e(iN,Huo),e(Lp,Uuo),e(x,Juo),e(x,xp),e(xp,ile),e(ile,Yuo),e(xp,Kuo),e(xp,dN),e(dN,Zuo),e(xp,e4o),e(x,o4o),e(x,$p),e($p,dle),e(dle,r4o),e($p,t4o),e($p,cN),e(cN,a4o),e($p,n4o),e(x,s4o),e(x,kp),e(kp,cle),e(cle,l4o),e(kp,i4o),e(kp,fN),e(fN,d4o),e(kp,c4o),e(x,f4o),e(x,Sp),e(Sp,fle),e(fle,m4o),e(Sp,g4o),e(Sp,mN),e(mN,h4o),e(Sp,p4o),e(x,_4o),e(x,Rp),e(Rp,mle),e(mle,u4o),e(Rp,b4o),e(Rp,gN),e(gN,v4o),e(Rp,F4o),e(x,T4o),e(x,Pp),e(Pp,gle),e(gle,M4o),e(Pp,E4o),e(Pp,hN),e(hN,C4o),e(Pp,w4o),e(x,A4o),e(x,Bp),e(Bp,hle),e(hle,y4o),e(Bp,L4o),e(Bp,pN),e(pN,x4o),e(Bp,$4o),e(x,k4o),e(x,Ip),e(Ip,ple),e(ple,S4o),e(Ip,R4o),e(Ip,_N),e(_N,P4o),e(Ip,B4o),e(x,I4o),e(x,Np),e(Np,_le),e(_le,N4o),e(Np,q4o),e(Np,uN),e(uN,j4o),e(Np,D4o),e(x,G4o),e(x,qp),e(qp,ule),e(ule,O4o),e(qp,V4o),e(qp,bN),e(bN,X4o),e(qp,z4o),e(x,W4o),e(x,jp),e(jp,ble),e(ble,Q4o),e(jp,H4o),e(jp,vN),e(vN,U4o),e(jp,J4o),e(x,Y4o),e(x,Dp),e(Dp,vle),e(vle,K4o),e(Dp,Z4o),e(Dp,FN),e(FN,e1o),e(Dp,o1o),e(x,r1o),e(x,Gp),e(Gp,Fle),e(Fle,t1o),e(Gp,a1o),e(Gp,TN),e(TN,n1o),e(Gp,s1o),e(x,l1o),e(x,Op),e(Op,Tle),e(Tle,i1o),e(Op,d1o),e(Op,MN),e(MN,c1o),e(Op,f1o),e(x,m1o),e(x,Bs),e(Bs,Mle),e(Mle,g1o),e(Bs,h1o),e(Bs,EN),e(EN,p1o),e(Bs,_1o),e(Bs,CN),e(CN,u1o),e(Bs,b1o),e(x,v1o),e(x,Vp),e(Vp,Ele),e(Ele,F1o),e(Vp,T1o),e(Vp,wN),e(wN,M1o),e(Vp,E1o),e(x,C1o),e(x,Xp),e(Xp,Cle),e(Cle,w1o),e(Xp,A1o),e(Xp,AN),e(AN,y1o),e(Xp,L1o),e(x,x1o),e(x,zp),e(zp,wle),e(wle,$1o),e(zp,k1o),e(zp,yN),e(yN,S1o),e(zp,R1o),e(x,P1o),e(x,Wp),e(Wp,Ale),e(Ale,B1o),e(Wp,I1o),e(Wp,LN),e(LN,N1o),e(Wp,q1o),e(x,j1o),e(x,Qp),e(Qp,yle),e(yle,D1o),e(Qp,G1o),e(Qp,xN),e(xN,O1o),e(Qp,V1o),e(x,X1o),e(x,Hp),e(Hp,Lle),e(Lle,z1o),e(Hp,W1o),e(Hp,$N),e($N,Q1o),e(Hp,H1o),e(x,U1o),e(x,Up),e(Up,xle),e(xle,J1o),e(Up,Y1o),e(Up,kN),e(kN,K1o),e(Up,Z1o),e(x,ebo),e(x,Jp),e(Jp,$le),e($le,obo),e(Jp,rbo),e(Jp,SN),e(SN,tbo),e(Jp,abo),e(x,nbo),e(x,Yp),e(Yp,kle),e(kle,sbo),e(Yp,lbo),e(Yp,RN),e(RN,ibo),e(Yp,dbo),e(x,cbo),e(x,Kp),e(Kp,Sle),e(Sle,fbo),e(Kp,mbo),e(Kp,PN),e(PN,gbo),e(Kp,hbo),e(x,pbo),e(x,Zp),e(Zp,Rle),e(Rle,_bo),e(Zp,ubo),e(Zp,BN),e(BN,bbo),e(Zp,vbo),e(x,Fbo),e(x,e_),e(e_,Ple),e(Ple,Tbo),e(e_,Mbo),e(e_,IN),e(IN,Ebo),e(e_,Cbo),e(x,wbo),e(x,o_),e(o_,Ble),e(Ble,Abo),e(o_,ybo),e(o_,NN),e(NN,Lbo),e(o_,xbo),e(x,$bo),e(x,r_),e(r_,Ile),e(Ile,kbo),e(r_,Sbo),e(r_,qN),e(qN,Rbo),e(r_,Pbo),e(x,Bbo),e(x,t_),e(t_,Nle),e(Nle,Ibo),e(t_,Nbo),e(t_,jN),e(jN,qbo),e(t_,jbo),e(x,Dbo),e(x,a_),e(a_,qle),e(qle,Gbo),e(a_,Obo),e(a_,DN),e(DN,Vbo),e(a_,Xbo),e(x,zbo),e(x,n_),e(n_,jle),e(jle,Wbo),e(n_,Qbo),e(n_,GN),e(GN,Hbo),e(n_,Ubo),e(x,Jbo),e(x,s_),e(s_,Dle),e(Dle,Ybo),e(s_,Kbo),e(s_,ON),e(ON,Zbo),e(s_,e2o),e(x,o2o),e(x,l_),e(l_,Gle),e(Gle,r2o),e(l_,t2o),e(l_,VN),e(VN,a2o),e(l_,n2o),e(x,s2o),e(x,i_),e(i_,Ole),e(Ole,l2o),e(i_,i2o),e(i_,XN),e(XN,d2o),e(i_,c2o),e(x,f2o),e(x,d_),e(d_,Vle),e(Vle,m2o),e(d_,g2o),e(d_,zN),e(zN,h2o),e(d_,p2o),e(x,_2o),e(x,c_),e(c_,Xle),e(Xle,u2o),e(c_,b2o),e(c_,WN),e(WN,v2o),e(c_,F2o),e(x,T2o),e(x,f_),e(f_,zle),e(zle,M2o),e(f_,E2o),e(f_,QN),e(QN,C2o),e(f_,w2o),e(x,A2o),e(x,m_),e(m_,Wle),e(Wle,y2o),e(m_,L2o),e(m_,HN),e(HN,x2o),e(m_,$2o),e(x,k2o),e(x,g_),e(g_,Qle),e(Qle,S2o),e(g_,R2o),e(g_,UN),e(UN,P2o),e(g_,B2o),e(x,I2o),e(x,h_),e(h_,Hle),e(Hle,N2o),e(h_,q2o),e(h_,JN),e(JN,j2o),e(h_,D2o),e(x,G2o),e(x,p_),e(p_,Ule),e(Ule,O2o),e(p_,V2o),e(p_,YN),e(YN,X2o),e(p_,z2o),e(x,W2o),e(x,__),e(__,Jle),e(Jle,Q2o),e(__,H2o),e(__,KN),e(KN,U2o),e(__,J2o),e(x,Y2o),e(x,u_),e(u_,Yle),e(Yle,K2o),e(u_,Z2o),e(u_,ZN),e(ZN,evo),e(u_,ovo),e(x,rvo),e(x,b_),e(b_,Kle),e(Kle,tvo),e(b_,avo),e(b_,eq),e(eq,nvo),e(b_,svo),e(x,lvo),e(x,v_),e(v_,Zle),e(Zle,ivo),e(v_,dvo),e(v_,oq),e(oq,cvo),e(v_,fvo),e(x,mvo),e(x,F_),e(F_,eie),e(eie,gvo),e(F_,hvo),e(F_,rq),e(rq,pvo),e(F_,_vo),e(x,uvo),e(x,T_),e(T_,oie),e(oie,bvo),e(T_,vvo),e(T_,tq),e(tq,Fvo),e(T_,Tvo),e(x,Mvo),e(x,M_),e(M_,rie),e(rie,Evo),e(M_,Cvo),e(M_,aq),e(aq,wvo),e(M_,Avo),e(x,yvo),e(x,E_),e(E_,tie),e(tie,Lvo),e(E_,xvo),e(E_,nq),e(nq,$vo),e(E_,kvo),e(x,Svo),e(x,C_),e(C_,aie),e(aie,Rvo),e(C_,Pvo),e(C_,sq),e(sq,Bvo),e(C_,Ivo),e(x,Nvo),e(x,w_),e(w_,nie),e(nie,qvo),e(w_,jvo),e(w_,lq),e(lq,Dvo),e(w_,Gvo),e(x,Ovo),e(x,A_),e(A_,sie),e(sie,Vvo),e(A_,Xvo),e(A_,iq),e(iq,zvo),e(A_,Wvo),e(x,Qvo),e(x,y_),e(y_,lie),e(lie,Hvo),e(y_,Uvo),e(y_,dq),e(dq,Jvo),e(y_,Yvo),e(x,Kvo),e(x,L_),e(L_,iie),e(iie,Zvo),e(L_,e3o),e(L_,cq),e(cq,o3o),e(L_,r3o),e(x,t3o),e(x,x_),e(x_,die),e(die,a3o),e(x_,n3o),e(x_,fq),e(fq,s3o),e(x_,l3o),e(x,i3o),e(x,$_),e($_,cie),e(cie,d3o),e($_,c3o),e($_,mq),e(mq,f3o),e($_,m3o),e(x,g3o),e(x,k_),e(k_,fie),e(fie,h3o),e(k_,p3o),e(k_,gq),e(gq,_3o),e(k_,u3o),e(x,b3o),e(x,S_),e(S_,mie),e(mie,v3o),e(S_,F3o),e(S_,hq),e(hq,T3o),e(S_,M3o),e(x,E3o),e(x,R_),e(R_,gie),e(gie,C3o),e(R_,w3o),e(R_,pq),e(pq,A3o),e(R_,y3o),e(x,L3o),e(x,P_),e(P_,hie),e(hie,x3o),e(P_,$3o),e(P_,_q),e(_q,k3o),e(P_,S3o),e(x,R3o),e(x,B_),e(B_,pie),e(pie,P3o),e(B_,B3o),e(B_,uq),e(uq,I3o),e(B_,N3o),e(x,q3o),e(x,I_),e(I_,_ie),e(_ie,j3o),e(I_,D3o),e(I_,bq),e(bq,G3o),e(I_,O3o),e(x,V3o),e(x,N_),e(N_,uie),e(uie,X3o),e(N_,z3o),e(N_,vq),e(vq,W3o),e(N_,Q3o),e(x,H3o),e(x,q_),e(q_,bie),e(bie,U3o),e(q_,J3o),e(q_,Fq),e(Fq,Y3o),e(q_,K3o),e(x,Z3o),e(x,j_),e(j_,vie),e(vie,eFo),e(j_,oFo),e(j_,Tq),e(Tq,rFo),e(j_,tFo),e(x,aFo),e(x,D_),e(D_,Fie),e(Fie,nFo),e(D_,sFo),e(D_,Mq),e(Mq,lFo),e(D_,iFo),e(x,dFo),e(x,G_),e(G_,Tie),e(Tie,cFo),e(G_,fFo),e(G_,Eq),e(Eq,mFo),e(G_,gFo),e(x,hFo),e(x,O_),e(O_,Mie),e(Mie,pFo),e(O_,_Fo),e(O_,Cq),e(Cq,uFo),e(O_,bFo),e(x,vFo),e(x,V_),e(V_,Eie),e(Eie,FFo),e(V_,TFo),e(V_,wq),e(wq,MFo),e(V_,EFo),e(x,CFo),e(x,X_),e(X_,Cie),e(Cie,wFo),e(X_,AFo),e(X_,Aq),e(Aq,yFo),e(X_,LFo),e(x,xFo),e(x,z_),e(z_,wie),e(wie,$Fo),e(z_,kFo),e(z_,yq),e(yq,SFo),e(z_,RFo),e(x,PFo),e(x,W_),e(W_,Aie),e(Aie,BFo),e(W_,IFo),e(W_,Lq),e(Lq,NFo),e(W_,qFo),e(x,jFo),e(x,Q_),e(Q_,yie),e(yie,DFo),e(Q_,GFo),e(Q_,xq),e(xq,OFo),e(Q_,VFo),e(x,XFo),e(x,H_),e(H_,Lie),e(Lie,zFo),e(H_,WFo),e(H_,$q),e($q,QFo),e(H_,HFo),e(x,UFo),e(x,U_),e(U_,xie),e(xie,JFo),e(U_,YFo),e(U_,kq),e(kq,KFo),e(U_,ZFo),e(x,eTo),e(x,J_),e(J_,$ie),e($ie,oTo),e(J_,rTo),e(J_,Sq),e(Sq,tTo),e(J_,aTo),e(x,nTo),e(x,Y_),e(Y_,kie),e(kie,sTo),e(Y_,lTo),e(Y_,Rq),e(Rq,iTo),e(Y_,dTo),e(x,cTo),e(x,K_),e(K_,Sie),e(Sie,fTo),e(K_,mTo),e(K_,Pq),e(Pq,gTo),e(K_,hTo),e(x,pTo),e(x,Z_),e(Z_,Rie),e(Rie,_To),e(Z_,uTo),e(Z_,Bq),e(Bq,bTo),e(Z_,vTo),e(x,FTo),e(x,eu),e(eu,Pie),e(Pie,TTo),e(eu,MTo),e(eu,Iq),e(Iq,ETo),e(eu,CTo),e(x,wTo),e(x,ou),e(ou,Bie),e(Bie,ATo),e(ou,yTo),e(ou,Nq),e(Nq,LTo),e(ou,xTo),e(x,$To),e(x,ru),e(ru,Iie),e(Iie,kTo),e(ru,STo),e(ru,qq),e(qq,RTo),e(ru,PTo),e(x,BTo),e(x,tu),e(tu,Nie),e(Nie,ITo),e(tu,NTo),e(tu,jq),e(jq,qTo),e(tu,jTo),e(Je,DTo),e(Je,au),e(au,GTo),e(au,qie),e(qie,OTo),e(au,VTo),e(au,jie),e(jie,XTo),e(Je,zTo),M(nu,Je,null),b(f,Wqe,u),b(f,xi,u),e(xi,su),e(su,Die),M(my,Die,null),e(xi,WTo),e(xi,Gie),e(Gie,QTo),b(f,Qqe,u),b(f,xo,u),M(gy,xo,null),e(xo,HTo),e(xo,$i),e($i,UTo),e($i,Dq),e(Dq,JTo),e($i,YTo),e($i,Gq),e(Gq,KTo),e($i,ZTo),e(xo,e7o),e(xo,hy),e(hy,o7o),e(hy,Oie),e(Oie,r7o),e(hy,t7o),e(xo,a7o),e(xo,at),M(py,at,null),e(at,n7o),e(at,Vie),e(Vie,s7o),e(at,l7o),e(at,ki),e(ki,i7o),e(ki,Xie),e(Xie,d7o),e(ki,c7o),e(ki,Oq),e(Oq,f7o),e(ki,m7o),e(at,g7o),M(lu,at,null),e(xo,h7o),e(xo,Ye),M(_y,Ye,null),e(Ye,p7o),e(Ye,zie),e(zie,_7o),e(Ye,u7o),e(Ye,xa),e(xa,b7o),e(xa,Wie),e(Wie,v7o),e(xa,F7o),e(xa,Qie),e(Qie,T7o),e(xa,M7o),e(xa,Hie),e(Hie,E7o),e(xa,C7o),e(Ye,w7o),e(Ye,G),e(G,iu),e(iu,Uie),e(Uie,A7o),e(iu,y7o),e(iu,Vq),e(Vq,L7o),e(iu,x7o),e(G,$7o),e(G,du),e(du,Jie),e(Jie,k7o),e(du,S7o),e(du,Xq),e(Xq,R7o),e(du,P7o),e(G,B7o),e(G,cu),e(cu,Yie),e(Yie,I7o),e(cu,N7o),e(cu,zq),e(zq,q7o),e(cu,j7o),e(G,D7o),e(G,fu),e(fu,Kie),e(Kie,G7o),e(fu,O7o),e(fu,Wq),e(Wq,V7o),e(fu,X7o),e(G,z7o),e(G,mu),e(mu,Zie),e(Zie,W7o),e(mu,Q7o),e(mu,Qq),e(Qq,H7o),e(mu,U7o),e(G,J7o),e(G,gu),e(gu,ede),e(ede,Y7o),e(gu,K7o),e(gu,Hq),e(Hq,Z7o),e(gu,eMo),e(G,oMo),e(G,hu),e(hu,ode),e(ode,rMo),e(hu,tMo),e(hu,Uq),e(Uq,aMo),e(hu,nMo),e(G,sMo),e(G,pu),e(pu,rde),e(rde,lMo),e(pu,iMo),e(pu,Jq),e(Jq,dMo),e(pu,cMo),e(G,fMo),e(G,_u),e(_u,tde),e(tde,mMo),e(_u,gMo),e(_u,Yq),e(Yq,hMo),e(_u,pMo),e(G,_Mo),e(G,uu),e(uu,ade),e(ade,uMo),e(uu,bMo),e(uu,Kq),e(Kq,vMo),e(uu,FMo),e(G,TMo),e(G,bu),e(bu,nde),e(nde,MMo),e(bu,EMo),e(bu,Zq),e(Zq,CMo),e(bu,wMo),e(G,AMo),e(G,vu),e(vu,sde),e(sde,yMo),e(vu,LMo),e(vu,ej),e(ej,xMo),e(vu,$Mo),e(G,kMo),e(G,Fu),e(Fu,lde),e(lde,SMo),e(Fu,RMo),e(Fu,oj),e(oj,PMo),e(Fu,BMo),e(G,IMo),e(G,Tu),e(Tu,ide),e(ide,NMo),e(Tu,qMo),e(Tu,rj),e(rj,jMo),e(Tu,DMo),e(G,GMo),e(G,Mu),e(Mu,dde),e(dde,OMo),e(Mu,VMo),e(Mu,tj),e(tj,XMo),e(Mu,zMo),e(G,WMo),e(G,Eu),e(Eu,cde),e(cde,QMo),e(Eu,HMo),e(Eu,aj),e(aj,UMo),e(Eu,JMo),e(G,YMo),e(G,Cu),e(Cu,fde),e(fde,KMo),e(Cu,ZMo),e(Cu,nj),e(nj,eEo),e(Cu,oEo),e(G,rEo),e(G,wu),e(wu,mde),e(mde,tEo),e(wu,aEo),e(wu,sj),e(sj,nEo),e(wu,sEo),e(G,lEo),e(G,Au),e(Au,gde),e(gde,iEo),e(Au,dEo),e(Au,lj),e(lj,cEo),e(Au,fEo),e(G,mEo),e(G,yu),e(yu,hde),e(hde,gEo),e(yu,hEo),e(yu,ij),e(ij,pEo),e(yu,_Eo),e(G,uEo),e(G,Lu),e(Lu,pde),e(pde,bEo),e(Lu,vEo),e(Lu,dj),e(dj,FEo),e(Lu,TEo),e(G,MEo),e(G,xu),e(xu,_de),e(_de,EEo),e(xu,CEo),e(xu,cj),e(cj,wEo),e(xu,AEo),e(G,yEo),e(G,$u),e($u,ude),e(ude,LEo),e($u,xEo),e($u,fj),e(fj,$Eo),e($u,kEo),e(G,SEo),e(G,ku),e(ku,bde),e(bde,REo),e(ku,PEo),e(ku,mj),e(mj,BEo),e(ku,IEo),e(G,NEo),e(G,Su),e(Su,vde),e(vde,qEo),e(Su,jEo),e(Su,gj),e(gj,DEo),e(Su,GEo),e(G,OEo),e(G,Ru),e(Ru,Fde),e(Fde,VEo),e(Ru,XEo),e(Ru,hj),e(hj,zEo),e(Ru,WEo),e(G,QEo),e(G,Pu),e(Pu,Tde),e(Tde,HEo),e(Pu,UEo),e(Pu,pj),e(pj,JEo),e(Pu,YEo),e(G,KEo),e(G,Bu),e(Bu,Mde),e(Mde,ZEo),e(Bu,eCo),e(Bu,_j),e(_j,oCo),e(Bu,rCo),e(G,tCo),e(G,Iu),e(Iu,Ede),e(Ede,aCo),e(Iu,nCo),e(Iu,uj),e(uj,sCo),e(Iu,lCo),e(G,iCo),e(G,Nu),e(Nu,Cde),e(Cde,dCo),e(Nu,cCo),e(Nu,bj),e(bj,fCo),e(Nu,mCo),e(G,gCo),e(G,qu),e(qu,wde),e(wde,hCo),e(qu,pCo),e(qu,vj),e(vj,_Co),e(qu,uCo),e(G,bCo),e(G,ju),e(ju,Ade),e(Ade,vCo),e(ju,FCo),e(ju,Fj),e(Fj,TCo),e(ju,MCo),e(G,ECo),e(G,Du),e(Du,yde),e(yde,CCo),e(Du,wCo),e(Du,Tj),e(Tj,ACo),e(Du,yCo),e(G,LCo),e(G,Gu),e(Gu,Lde),e(Lde,xCo),e(Gu,$Co),e(Gu,Mj),e(Mj,kCo),e(Gu,SCo),e(G,RCo),e(G,Ou),e(Ou,xde),e(xde,PCo),e(Ou,BCo),e(Ou,Ej),e(Ej,ICo),e(Ou,NCo),e(G,qCo),e(G,Vu),e(Vu,$de),e($de,jCo),e(Vu,DCo),e(Vu,Cj),e(Cj,GCo),e(Vu,OCo),e(G,VCo),e(G,Xu),e(Xu,kde),e(kde,XCo),e(Xu,zCo),e(Xu,wj),e(wj,WCo),e(Xu,QCo),e(G,HCo),e(G,zu),e(zu,Sde),e(Sde,UCo),e(zu,JCo),e(zu,Aj),e(Aj,YCo),e(zu,KCo),e(G,ZCo),e(G,Wu),e(Wu,Rde),e(Rde,e5o),e(Wu,o5o),e(Wu,yj),e(yj,r5o),e(Wu,t5o),e(G,a5o),e(G,Qu),e(Qu,Pde),e(Pde,n5o),e(Qu,s5o),e(Qu,Lj),e(Lj,l5o),e(Qu,i5o),e(G,d5o),e(G,Hu),e(Hu,Bde),e(Bde,c5o),e(Hu,f5o),e(Hu,xj),e(xj,m5o),e(Hu,g5o),e(G,h5o),e(G,Uu),e(Uu,Ide),e(Ide,p5o),e(Uu,_5o),e(Uu,$j),e($j,u5o),e(Uu,b5o),e(Ye,v5o),e(Ye,Ju),e(Ju,F5o),e(Ju,Nde),e(Nde,T5o),e(Ju,M5o),e(Ju,qde),e(qde,E5o),e(Ye,C5o),M(Yu,Ye,null),b(f,Hqe,u),b(f,Si,u),e(Si,Ku),e(Ku,jde),M(uy,jde,null),e(Si,w5o),e(Si,Dde),e(Dde,A5o),b(f,Uqe,u),b(f,$o,u),M(by,$o,null),e($o,y5o),e($o,Ri),e(Ri,L5o),e(Ri,kj),e(kj,x5o),e(Ri,$5o),e(Ri,Sj),e(Sj,k5o),e(Ri,S5o),e($o,R5o),e($o,vy),e(vy,P5o),e(vy,Gde),e(Gde,B5o),e(vy,I5o),e($o,N5o),e($o,nt),M(Fy,nt,null),e(nt,q5o),e(nt,Ode),e(Ode,j5o),e(nt,D5o),e(nt,Pi),e(Pi,G5o),e(Pi,Vde),e(Vde,O5o),e(Pi,V5o),e(Pi,Rj),e(Rj,X5o),e(Pi,z5o),e(nt,W5o),M(Zu,nt,null),e($o,Q5o),e($o,Ke),M(Ty,Ke,null),e(Ke,H5o),e(Ke,Xde),e(Xde,U5o),e(Ke,J5o),e(Ke,$a),e($a,Y5o),e($a,zde),e(zde,K5o),e($a,Z5o),e($a,Wde),e(Wde,e0o),e($a,o0o),e($a,Qde),e(Qde,r0o),e($a,t0o),e(Ke,a0o),e(Ke,z),e(z,e4),e(e4,Hde),e(Hde,n0o),e(e4,s0o),e(e4,Pj),e(Pj,l0o),e(e4,i0o),e(z,d0o),e(z,o4),e(o4,Ude),e(Ude,c0o),e(o4,f0o),e(o4,Bj),e(Bj,m0o),e(o4,g0o),e(z,h0o),e(z,r4),e(r4,Jde),e(Jde,p0o),e(r4,_0o),e(r4,Ij),e(Ij,u0o),e(r4,b0o),e(z,v0o),e(z,t4),e(t4,Yde),e(Yde,F0o),e(t4,T0o),e(t4,Nj),e(Nj,M0o),e(t4,E0o),e(z,C0o),e(z,a4),e(a4,Kde),e(Kde,w0o),e(a4,A0o),e(a4,qj),e(qj,y0o),e(a4,L0o),e(z,x0o),e(z,n4),e(n4,Zde),e(Zde,$0o),e(n4,k0o),e(n4,jj),e(jj,S0o),e(n4,R0o),e(z,P0o),e(z,s4),e(s4,ece),e(ece,B0o),e(s4,I0o),e(s4,Dj),e(Dj,N0o),e(s4,q0o),e(z,j0o),e(z,l4),e(l4,oce),e(oce,D0o),e(l4,G0o),e(l4,Gj),e(Gj,O0o),e(l4,V0o),e(z,X0o),e(z,i4),e(i4,rce),e(rce,z0o),e(i4,W0o),e(i4,Oj),e(Oj,Q0o),e(i4,H0o),e(z,U0o),e(z,d4),e(d4,tce),e(tce,J0o),e(d4,Y0o),e(d4,Vj),e(Vj,K0o),e(d4,Z0o),e(z,ewo),e(z,c4),e(c4,ace),e(ace,owo),e(c4,rwo),e(c4,Xj),e(Xj,two),e(c4,awo),e(z,nwo),e(z,f4),e(f4,nce),e(nce,swo),e(f4,lwo),e(f4,zj),e(zj,iwo),e(f4,dwo),e(z,cwo),e(z,m4),e(m4,sce),e(sce,fwo),e(m4,mwo),e(m4,Wj),e(Wj,gwo),e(m4,hwo),e(z,pwo),e(z,g4),e(g4,lce),e(lce,_wo),e(g4,uwo),e(g4,Qj),e(Qj,bwo),e(g4,vwo),e(z,Fwo),e(z,h4),e(h4,ice),e(ice,Two),e(h4,Mwo),e(h4,Hj),e(Hj,Ewo),e(h4,Cwo),e(z,wwo),e(z,p4),e(p4,dce),e(dce,Awo),e(p4,ywo),e(p4,Uj),e(Uj,Lwo),e(p4,xwo),e(z,$wo),e(z,_4),e(_4,cce),e(cce,kwo),e(_4,Swo),e(_4,Jj),e(Jj,Rwo),e(_4,Pwo),e(z,Bwo),e(z,u4),e(u4,fce),e(fce,Iwo),e(u4,Nwo),e(u4,Yj),e(Yj,qwo),e(u4,jwo),e(z,Dwo),e(z,b4),e(b4,mce),e(mce,Gwo),e(b4,Owo),e(b4,Kj),e(Kj,Vwo),e(b4,Xwo),e(z,zwo),e(z,v4),e(v4,gce),e(gce,Wwo),e(v4,Qwo),e(v4,Zj),e(Zj,Hwo),e(v4,Uwo),e(z,Jwo),e(z,F4),e(F4,hce),e(hce,Ywo),e(F4,Kwo),e(F4,eD),e(eD,Zwo),e(F4,e6o),e(z,o6o),e(z,T4),e(T4,pce),e(pce,r6o),e(T4,t6o),e(T4,oD),e(oD,a6o),e(T4,n6o),e(z,s6o),e(z,M4),e(M4,_ce),e(_ce,l6o),e(M4,i6o),e(M4,rD),e(rD,d6o),e(M4,c6o),e(z,f6o),e(z,E4),e(E4,uce),e(uce,m6o),e(E4,g6o),e(E4,tD),e(tD,h6o),e(E4,p6o),e(z,_6o),e(z,C4),e(C4,bce),e(bce,u6o),e(C4,b6o),e(C4,aD),e(aD,v6o),e(C4,F6o),e(z,T6o),e(z,w4),e(w4,vce),e(vce,M6o),e(w4,E6o),e(w4,nD),e(nD,C6o),e(w4,w6o),e(z,A6o),e(z,A4),e(A4,Fce),e(Fce,y6o),e(A4,L6o),e(A4,sD),e(sD,x6o),e(A4,$6o),e(z,k6o),e(z,y4),e(y4,Tce),e(Tce,S6o),e(y4,R6o),e(y4,lD),e(lD,P6o),e(y4,B6o),e(z,I6o),e(z,L4),e(L4,Mce),e(Mce,N6o),e(L4,q6o),e(L4,iD),e(iD,j6o),e(L4,D6o),e(z,G6o),e(z,x4),e(x4,Ece),e(Ece,O6o),e(x4,V6o),e(x4,dD),e(dD,X6o),e(x4,z6o),e(z,W6o),e(z,$4),e($4,Cce),e(Cce,Q6o),e($4,H6o),e($4,cD),e(cD,U6o),e($4,J6o),e(z,Y6o),e(z,k4),e(k4,wce),e(wce,K6o),e(k4,Z6o),e(k4,fD),e(fD,eAo),e(k4,oAo),e(z,rAo),e(z,S4),e(S4,Ace),e(Ace,tAo),e(S4,aAo),e(S4,mD),e(mD,nAo),e(S4,sAo),e(z,lAo),e(z,R4),e(R4,yce),e(yce,iAo),e(R4,dAo),e(R4,gD),e(gD,cAo),e(R4,fAo),e(z,mAo),e(z,P4),e(P4,Lce),e(Lce,gAo),e(P4,hAo),e(P4,hD),e(hD,pAo),e(P4,_Ao),e(z,uAo),e(z,B4),e(B4,xce),e(xce,bAo),e(B4,vAo),e(B4,pD),e(pD,FAo),e(B4,TAo),e(z,MAo),e(z,I4),e(I4,$ce),e($ce,EAo),e(I4,CAo),e(I4,_D),e(_D,wAo),e(I4,AAo),e(z,yAo),e(z,N4),e(N4,kce),e(kce,LAo),e(N4,xAo),e(N4,uD),e(uD,$Ao),e(N4,kAo),e(Ke,SAo),e(Ke,q4),e(q4,RAo),e(q4,Sce),e(Sce,PAo),e(q4,BAo),e(q4,Rce),e(Rce,IAo),e(Ke,NAo),M(j4,Ke,null),b(f,Jqe,u),b(f,Bi,u),e(Bi,D4),e(D4,Pce),M(My,Pce,null),e(Bi,qAo),e(Bi,Bce),e(Bce,jAo),b(f,Yqe,u),b(f,ko,u),M(Ey,ko,null),e(ko,DAo),e(ko,Ii),e(Ii,GAo),e(Ii,bD),e(bD,OAo),e(Ii,VAo),e(Ii,vD),e(vD,XAo),e(Ii,zAo),e(ko,WAo),e(ko,Cy),e(Cy,QAo),e(Cy,Ice),e(Ice,HAo),e(Cy,UAo),e(ko,JAo),e(ko,st),M(wy,st,null),e(st,YAo),e(st,Nce),e(Nce,KAo),e(st,ZAo),e(st,Ni),e(Ni,eyo),e(Ni,qce),e(qce,oyo),e(Ni,ryo),e(Ni,FD),e(FD,tyo),e(Ni,ayo),e(st,nyo),M(G4,st,null),e(ko,syo),e(ko,Ze),M(Ay,Ze,null),e(Ze,lyo),e(Ze,jce),e(jce,iyo),e(Ze,dyo),e(Ze,ka),e(ka,cyo),e(ka,Dce),e(Dce,fyo),e(ka,myo),e(ka,Gce),e(Gce,gyo),e(ka,hyo),e(ka,Oce),e(Oce,pyo),e(ka,_yo),e(Ze,uyo),e(Ze,Q),e(Q,O4),e(O4,Vce),e(Vce,byo),e(O4,vyo),e(O4,TD),e(TD,Fyo),e(O4,Tyo),e(Q,Myo),e(Q,V4),e(V4,Xce),e(Xce,Eyo),e(V4,Cyo),e(V4,MD),e(MD,wyo),e(V4,Ayo),e(Q,yyo),e(Q,X4),e(X4,zce),e(zce,Lyo),e(X4,xyo),e(X4,ED),e(ED,$yo),e(X4,kyo),e(Q,Syo),e(Q,z4),e(z4,Wce),e(Wce,Ryo),e(z4,Pyo),e(z4,CD),e(CD,Byo),e(z4,Iyo),e(Q,Nyo),e(Q,W4),e(W4,Qce),e(Qce,qyo),e(W4,jyo),e(W4,wD),e(wD,Dyo),e(W4,Gyo),e(Q,Oyo),e(Q,Q4),e(Q4,Hce),e(Hce,Vyo),e(Q4,Xyo),e(Q4,AD),e(AD,zyo),e(Q4,Wyo),e(Q,Qyo),e(Q,H4),e(H4,Uce),e(Uce,Hyo),e(H4,Uyo),e(H4,yD),e(yD,Jyo),e(H4,Yyo),e(Q,Kyo),e(Q,U4),e(U4,Jce),e(Jce,Zyo),e(U4,eLo),e(U4,LD),e(LD,oLo),e(U4,rLo),e(Q,tLo),e(Q,J4),e(J4,Yce),e(Yce,aLo),e(J4,nLo),e(J4,xD),e(xD,sLo),e(J4,lLo),e(Q,iLo),e(Q,Y4),e(Y4,Kce),e(Kce,dLo),e(Y4,cLo),e(Y4,$D),e($D,fLo),e(Y4,mLo),e(Q,gLo),e(Q,K4),e(K4,Zce),e(Zce,hLo),e(K4,pLo),e(K4,kD),e(kD,_Lo),e(K4,uLo),e(Q,bLo),e(Q,Z4),e(Z4,efe),e(efe,vLo),e(Z4,FLo),e(Z4,SD),e(SD,TLo),e(Z4,MLo),e(Q,ELo),e(Q,e1),e(e1,ofe),e(ofe,CLo),e(e1,wLo),e(e1,RD),e(RD,ALo),e(e1,yLo),e(Q,LLo),e(Q,o1),e(o1,rfe),e(rfe,xLo),e(o1,$Lo),e(o1,PD),e(PD,kLo),e(o1,SLo),e(Q,RLo),e(Q,r1),e(r1,tfe),e(tfe,PLo),e(r1,BLo),e(r1,BD),e(BD,ILo),e(r1,NLo),e(Q,qLo),e(Q,t1),e(t1,afe),e(afe,jLo),e(t1,DLo),e(t1,ID),e(ID,GLo),e(t1,OLo),e(Q,VLo),e(Q,a1),e(a1,nfe),e(nfe,XLo),e(a1,zLo),e(a1,ND),e(ND,WLo),e(a1,QLo),e(Q,HLo),e(Q,n1),e(n1,sfe),e(sfe,ULo),e(n1,JLo),e(n1,qD),e(qD,YLo),e(n1,KLo),e(Q,ZLo),e(Q,s1),e(s1,lfe),e(lfe,e8o),e(s1,o8o),e(s1,jD),e(jD,r8o),e(s1,t8o),e(Q,a8o),e(Q,l1),e(l1,ife),e(ife,n8o),e(l1,s8o),e(l1,DD),e(DD,l8o),e(l1,i8o),e(Q,d8o),e(Q,i1),e(i1,dfe),e(dfe,c8o),e(i1,f8o),e(i1,GD),e(GD,m8o),e(i1,g8o),e(Q,h8o),e(Q,d1),e(d1,cfe),e(cfe,p8o),e(d1,_8o),e(d1,OD),e(OD,u8o),e(d1,b8o),e(Q,v8o),e(Q,c1),e(c1,ffe),e(ffe,F8o),e(c1,T8o),e(c1,VD),e(VD,M8o),e(c1,E8o),e(Q,C8o),e(Q,f1),e(f1,mfe),e(mfe,w8o),e(f1,A8o),e(f1,XD),e(XD,y8o),e(f1,L8o),e(Q,x8o),e(Q,m1),e(m1,gfe),e(gfe,$8o),e(m1,k8o),e(m1,zD),e(zD,S8o),e(m1,R8o),e(Q,P8o),e(Q,g1),e(g1,hfe),e(hfe,B8o),e(g1,I8o),e(g1,WD),e(WD,N8o),e(g1,q8o),e(Q,j8o),e(Q,h1),e(h1,pfe),e(pfe,D8o),e(h1,G8o),e(h1,QD),e(QD,O8o),e(h1,V8o),e(Q,X8o),e(Q,p1),e(p1,_fe),e(_fe,z8o),e(p1,W8o),e(p1,HD),e(HD,Q8o),e(p1,H8o),e(Q,U8o),e(Q,_1),e(_1,ufe),e(ufe,J8o),e(_1,Y8o),e(_1,UD),e(UD,K8o),e(_1,Z8o),e(Q,e9o),e(Q,u1),e(u1,bfe),e(bfe,o9o),e(u1,r9o),e(u1,JD),e(JD,t9o),e(u1,a9o),e(Q,n9o),e(Q,b1),e(b1,vfe),e(vfe,s9o),e(b1,l9o),e(b1,Ffe),e(Ffe,i9o),e(b1,d9o),e(Q,c9o),e(Q,v1),e(v1,Tfe),e(Tfe,f9o),e(v1,m9o),e(v1,YD),e(YD,g9o),e(v1,h9o),e(Q,p9o),e(Q,F1),e(F1,Mfe),e(Mfe,_9o),e(F1,u9o),e(F1,KD),e(KD,b9o),e(F1,v9o),e(Q,F9o),e(Q,T1),e(T1,Efe),e(Efe,T9o),e(T1,M9o),e(T1,ZD),e(ZD,E9o),e(T1,C9o),e(Q,w9o),e(Q,M1),e(M1,Cfe),e(Cfe,A9o),e(M1,y9o),e(M1,eG),e(eG,L9o),e(M1,x9o),e(Ze,$9o),e(Ze,E1),e(E1,k9o),e(E1,wfe),e(wfe,S9o),e(E1,R9o),e(E1,Afe),e(Afe,P9o),e(Ze,B9o),M(C1,Ze,null),b(f,Kqe,u),b(f,qi,u),e(qi,w1),e(w1,yfe),M(yy,yfe,null),e(qi,I9o),e(qi,Lfe),e(Lfe,N9o),b(f,Zqe,u),b(f,So,u),M(Ly,So,null),e(So,q9o),e(So,ji),e(ji,j9o),e(ji,oG),e(oG,D9o),e(ji,G9o),e(ji,rG),e(rG,O9o),e(ji,V9o),e(So,X9o),e(So,xy),e(xy,z9o),e(xy,xfe),e(xfe,W9o),e(xy,Q9o),e(So,H9o),e(So,lt),M($y,lt,null),e(lt,U9o),e(lt,$fe),e($fe,J9o),e(lt,Y9o),e(lt,Di),e(Di,K9o),e(Di,kfe),e(kfe,Z9o),e(Di,exo),e(Di,tG),e(tG,oxo),e(Di,rxo),e(lt,txo),M(A1,lt,null),e(So,axo),e(So,eo),M(ky,eo,null),e(eo,nxo),e(eo,Sfe),e(Sfe,sxo),e(eo,lxo),e(eo,Sa),e(Sa,ixo),e(Sa,Rfe),e(Rfe,dxo),e(Sa,cxo),e(Sa,Pfe),e(Pfe,fxo),e(Sa,mxo),e(Sa,Bfe),e(Bfe,gxo),e(Sa,hxo),e(eo,pxo),e(eo,_e),e(_e,y1),e(y1,Ife),e(Ife,_xo),e(y1,uxo),e(y1,aG),e(aG,bxo),e(y1,vxo),e(_e,Fxo),e(_e,L1),e(L1,Nfe),e(Nfe,Txo),e(L1,Mxo),e(L1,nG),e(nG,Exo),e(L1,Cxo),e(_e,wxo),e(_e,x1),e(x1,qfe),e(qfe,Axo),e(x1,yxo),e(x1,sG),e(sG,Lxo),e(x1,xxo),e(_e,$xo),e(_e,$1),e($1,jfe),e(jfe,kxo),e($1,Sxo),e($1,lG),e(lG,Rxo),e($1,Pxo),e(_e,Bxo),e(_e,k1),e(k1,Dfe),e(Dfe,Ixo),e(k1,Nxo),e(k1,iG),e(iG,qxo),e(k1,jxo),e(_e,Dxo),e(_e,S1),e(S1,Gfe),e(Gfe,Gxo),e(S1,Oxo),e(S1,dG),e(dG,Vxo),e(S1,Xxo),e(_e,zxo),e(_e,R1),e(R1,Ofe),e(Ofe,Wxo),e(R1,Qxo),e(R1,cG),e(cG,Hxo),e(R1,Uxo),e(_e,Jxo),e(_e,P1),e(P1,Vfe),e(Vfe,Yxo),e(P1,Kxo),e(P1,fG),e(fG,Zxo),e(P1,e$o),e(_e,o$o),e(_e,B1),e(B1,Xfe),e(Xfe,r$o),e(B1,t$o),e(B1,mG),e(mG,a$o),e(B1,n$o),e(_e,s$o),e(_e,I1),e(I1,zfe),e(zfe,l$o),e(I1,i$o),e(I1,gG),e(gG,d$o),e(I1,c$o),e(_e,f$o),e(_e,N1),e(N1,Wfe),e(Wfe,m$o),e(N1,g$o),e(N1,hG),e(hG,h$o),e(N1,p$o),e(_e,_$o),e(_e,q1),e(q1,Qfe),e(Qfe,u$o),e(q1,b$o),e(q1,pG),e(pG,v$o),e(q1,F$o),e(_e,T$o),e(_e,j1),e(j1,Hfe),e(Hfe,M$o),e(j1,E$o),e(j1,_G),e(_G,C$o),e(j1,w$o),e(_e,A$o),e(_e,D1),e(D1,Ufe),e(Ufe,y$o),e(D1,L$o),e(D1,uG),e(uG,x$o),e(D1,$$o),e(_e,k$o),e(_e,G1),e(G1,Jfe),e(Jfe,S$o),e(G1,R$o),e(G1,bG),e(bG,P$o),e(G1,B$o),e(_e,I$o),e(_e,O1),e(O1,Yfe),e(Yfe,N$o),e(O1,q$o),e(O1,vG),e(vG,j$o),e(O1,D$o),e(eo,G$o),e(eo,V1),e(V1,O$o),e(V1,Kfe),e(Kfe,V$o),e(V1,X$o),e(V1,Zfe),e(Zfe,z$o),e(eo,W$o),M(X1,eo,null),b(f,eje,u),b(f,Gi,u),e(Gi,z1),e(z1,eme),M(Sy,eme,null),e(Gi,Q$o),e(Gi,ome),e(ome,H$o),b(f,oje,u),b(f,Ro,u),M(Ry,Ro,null),e(Ro,U$o),e(Ro,Oi),e(Oi,J$o),e(Oi,FG),e(FG,Y$o),e(Oi,K$o),e(Oi,TG),e(TG,Z$o),e(Oi,eko),e(Ro,oko),e(Ro,Py),e(Py,rko),e(Py,rme),e(rme,tko),e(Py,ako),e(Ro,nko),e(Ro,it),M(By,it,null),e(it,sko),e(it,tme),e(tme,lko),e(it,iko),e(it,Vi),e(Vi,dko),e(Vi,ame),e(ame,cko),e(Vi,fko),e(Vi,MG),e(MG,mko),e(Vi,gko),e(it,hko),M(W1,it,null),e(Ro,pko),e(Ro,oo),M(Iy,oo,null),e(oo,_ko),e(oo,nme),e(nme,uko),e(oo,bko),e(oo,Ra),e(Ra,vko),e(Ra,sme),e(sme,Fko),e(Ra,Tko),e(Ra,lme),e(lme,Mko),e(Ra,Eko),e(Ra,ime),e(ime,Cko),e(Ra,wko),e(oo,Ako),e(oo,N),e(N,Q1),e(Q1,dme),e(dme,yko),e(Q1,Lko),e(Q1,EG),e(EG,xko),e(Q1,$ko),e(N,kko),e(N,H1),e(H1,cme),e(cme,Sko),e(H1,Rko),e(H1,CG),e(CG,Pko),e(H1,Bko),e(N,Iko),e(N,U1),e(U1,fme),e(fme,Nko),e(U1,qko),e(U1,wG),e(wG,jko),e(U1,Dko),e(N,Gko),e(N,J1),e(J1,mme),e(mme,Oko),e(J1,Vko),e(J1,AG),e(AG,Xko),e(J1,zko),e(N,Wko),e(N,Y1),e(Y1,gme),e(gme,Qko),e(Y1,Hko),e(Y1,yG),e(yG,Uko),e(Y1,Jko),e(N,Yko),e(N,K1),e(K1,hme),e(hme,Kko),e(K1,Zko),e(K1,LG),e(LG,eSo),e(K1,oSo),e(N,rSo),e(N,Z1),e(Z1,pme),e(pme,tSo),e(Z1,aSo),e(Z1,xG),e(xG,nSo),e(Z1,sSo),e(N,lSo),e(N,eb),e(eb,_me),e(_me,iSo),e(eb,dSo),e(eb,$G),e($G,cSo),e(eb,fSo),e(N,mSo),e(N,ob),e(ob,ume),e(ume,gSo),e(ob,hSo),e(ob,kG),e(kG,pSo),e(ob,_So),e(N,uSo),e(N,rb),e(rb,bme),e(bme,bSo),e(rb,vSo),e(rb,SG),e(SG,FSo),e(rb,TSo),e(N,MSo),e(N,tb),e(tb,vme),e(vme,ESo),e(tb,CSo),e(tb,RG),e(RG,wSo),e(tb,ASo),e(N,ySo),e(N,ab),e(ab,Fme),e(Fme,LSo),e(ab,xSo),e(ab,PG),e(PG,$So),e(ab,kSo),e(N,SSo),e(N,nb),e(nb,Tme),e(Tme,RSo),e(nb,PSo),e(nb,BG),e(BG,BSo),e(nb,ISo),e(N,NSo),e(N,sb),e(sb,Mme),e(Mme,qSo),e(sb,jSo),e(sb,IG),e(IG,DSo),e(sb,GSo),e(N,OSo),e(N,lb),e(lb,Eme),e(Eme,VSo),e(lb,XSo),e(lb,NG),e(NG,zSo),e(lb,WSo),e(N,QSo),e(N,ib),e(ib,Cme),e(Cme,HSo),e(ib,USo),e(ib,qG),e(qG,JSo),e(ib,YSo),e(N,KSo),e(N,db),e(db,wme),e(wme,ZSo),e(db,eRo),e(db,jG),e(jG,oRo),e(db,rRo),e(N,tRo),e(N,cb),e(cb,Ame),e(Ame,aRo),e(cb,nRo),e(cb,DG),e(DG,sRo),e(cb,lRo),e(N,iRo),e(N,fb),e(fb,yme),e(yme,dRo),e(fb,cRo),e(fb,GG),e(GG,fRo),e(fb,mRo),e(N,gRo),e(N,mb),e(mb,Lme),e(Lme,hRo),e(mb,pRo),e(mb,OG),e(OG,_Ro),e(mb,uRo),e(N,bRo),e(N,gb),e(gb,xme),e(xme,vRo),e(gb,FRo),e(gb,VG),e(VG,TRo),e(gb,MRo),e(N,ERo),e(N,hb),e(hb,$me),e($me,CRo),e(hb,wRo),e(hb,XG),e(XG,ARo),e(hb,yRo),e(N,LRo),e(N,pb),e(pb,kme),e(kme,xRo),e(pb,$Ro),e(pb,zG),e(zG,kRo),e(pb,SRo),e(N,RRo),e(N,_b),e(_b,Sme),e(Sme,PRo),e(_b,BRo),e(_b,WG),e(WG,IRo),e(_b,NRo),e(N,qRo),e(N,ub),e(ub,Rme),e(Rme,jRo),e(ub,DRo),e(ub,QG),e(QG,GRo),e(ub,ORo),e(N,VRo),e(N,bb),e(bb,Pme),e(Pme,XRo),e(bb,zRo),e(bb,HG),e(HG,WRo),e(bb,QRo),e(N,HRo),e(N,vb),e(vb,Bme),e(Bme,URo),e(vb,JRo),e(vb,UG),e(UG,YRo),e(vb,KRo),e(N,ZRo),e(N,Fb),e(Fb,Ime),e(Ime,ePo),e(Fb,oPo),e(Fb,JG),e(JG,rPo),e(Fb,tPo),e(N,aPo),e(N,Tb),e(Tb,Nme),e(Nme,nPo),e(Tb,sPo),e(Tb,YG),e(YG,lPo),e(Tb,iPo),e(N,dPo),e(N,Mb),e(Mb,qme),e(qme,cPo),e(Mb,fPo),e(Mb,KG),e(KG,mPo),e(Mb,gPo),e(N,hPo),e(N,Eb),e(Eb,jme),e(jme,pPo),e(Eb,_Po),e(Eb,ZG),e(ZG,uPo),e(Eb,bPo),e(N,vPo),e(N,Cb),e(Cb,Dme),e(Dme,FPo),e(Cb,TPo),e(Cb,eO),e(eO,MPo),e(Cb,EPo),e(N,CPo),e(N,wb),e(wb,Gme),e(Gme,wPo),e(wb,APo),e(wb,oO),e(oO,yPo),e(wb,LPo),e(N,xPo),e(N,Ab),e(Ab,Ome),e(Ome,$Po),e(Ab,kPo),e(Ab,rO),e(rO,SPo),e(Ab,RPo),e(N,PPo),e(N,yb),e(yb,Vme),e(Vme,BPo),e(yb,IPo),e(yb,tO),e(tO,NPo),e(yb,qPo),e(N,jPo),e(N,Lb),e(Lb,Xme),e(Xme,DPo),e(Lb,GPo),e(Lb,aO),e(aO,OPo),e(Lb,VPo),e(N,XPo),e(N,xb),e(xb,zme),e(zme,zPo),e(xb,WPo),e(xb,nO),e(nO,QPo),e(xb,HPo),e(N,UPo),e(N,$b),e($b,Wme),e(Wme,JPo),e($b,YPo),e($b,sO),e(sO,KPo),e($b,ZPo),e(N,eBo),e(N,kb),e(kb,Qme),e(Qme,oBo),e(kb,rBo),e(kb,lO),e(lO,tBo),e(kb,aBo),e(N,nBo),e(N,Sb),e(Sb,Hme),e(Hme,sBo),e(Sb,lBo),e(Sb,iO),e(iO,iBo),e(Sb,dBo),e(N,cBo),e(N,Rb),e(Rb,Ume),e(Ume,fBo),e(Rb,mBo),e(Rb,dO),e(dO,gBo),e(Rb,hBo),e(N,pBo),e(N,Pb),e(Pb,Jme),e(Jme,_Bo),e(Pb,uBo),e(Pb,cO),e(cO,bBo),e(Pb,vBo),e(N,FBo),e(N,Bb),e(Bb,Yme),e(Yme,TBo),e(Bb,MBo),e(Bb,fO),e(fO,EBo),e(Bb,CBo),e(N,wBo),e(N,Ib),e(Ib,Kme),e(Kme,ABo),e(Ib,yBo),e(Ib,mO),e(mO,LBo),e(Ib,xBo),e(N,$Bo),e(N,Nb),e(Nb,Zme),e(Zme,kBo),e(Nb,SBo),e(Nb,gO),e(gO,RBo),e(Nb,PBo),e(N,BBo),e(N,qb),e(qb,ege),e(ege,IBo),e(qb,NBo),e(qb,hO),e(hO,qBo),e(qb,jBo),e(N,DBo),e(N,jb),e(jb,oge),e(oge,GBo),e(jb,OBo),e(jb,pO),e(pO,VBo),e(jb,XBo),e(oo,zBo),e(oo,Db),e(Db,WBo),e(Db,rge),e(rge,QBo),e(Db,HBo),e(Db,tge),e(tge,UBo),e(oo,JBo),M(Gb,oo,null),b(f,rje,u),b(f,Xi,u),e(Xi,Ob),e(Ob,age),M(Ny,age,null),e(Xi,YBo),e(Xi,nge),e(nge,KBo),b(f,tje,u),b(f,Po,u),M(qy,Po,null),e(Po,ZBo),e(Po,zi),e(zi,eIo),e(zi,_O),e(_O,oIo),e(zi,rIo),e(zi,uO),e(uO,tIo),e(zi,aIo),e(Po,nIo),e(Po,jy),e(jy,sIo),e(jy,sge),e(sge,lIo),e(jy,iIo),e(Po,dIo),e(Po,dt),M(Dy,dt,null),e(dt,cIo),e(dt,lge),e(lge,fIo),e(dt,mIo),e(dt,Wi),e(Wi,gIo),e(Wi,ige),e(ige,hIo),e(Wi,pIo),e(Wi,bO),e(bO,_Io),e(Wi,uIo),e(dt,bIo),M(Vb,dt,null),e(Po,vIo),e(Po,ro),M(Gy,ro,null),e(ro,FIo),e(ro,dge),e(dge,TIo),e(ro,MIo),e(ro,Pa),e(Pa,EIo),e(Pa,cge),e(cge,CIo),e(Pa,wIo),e(Pa,fge),e(fge,AIo),e(Pa,yIo),e(Pa,mge),e(mge,LIo),e(Pa,xIo),e(ro,$Io),e(ro,K),e(K,Xb),e(Xb,gge),e(gge,kIo),e(Xb,SIo),e(Xb,vO),e(vO,RIo),e(Xb,PIo),e(K,BIo),e(K,zb),e(zb,hge),e(hge,IIo),e(zb,NIo),e(zb,FO),e(FO,qIo),e(zb,jIo),e(K,DIo),e(K,Wb),e(Wb,pge),e(pge,GIo),e(Wb,OIo),e(Wb,TO),e(TO,VIo),e(Wb,XIo),e(K,zIo),e(K,Qb),e(Qb,_ge),e(_ge,WIo),e(Qb,QIo),e(Qb,MO),e(MO,HIo),e(Qb,UIo),e(K,JIo),e(K,Hb),e(Hb,uge),e(uge,YIo),e(Hb,KIo),e(Hb,EO),e(EO,ZIo),e(Hb,eNo),e(K,oNo),e(K,Ub),e(Ub,bge),e(bge,rNo),e(Ub,tNo),e(Ub,CO),e(CO,aNo),e(Ub,nNo),e(K,sNo),e(K,Jb),e(Jb,vge),e(vge,lNo),e(Jb,iNo),e(Jb,wO),e(wO,dNo),e(Jb,cNo),e(K,fNo),e(K,Yb),e(Yb,Fge),e(Fge,mNo),e(Yb,gNo),e(Yb,AO),e(AO,hNo),e(Yb,pNo),e(K,_No),e(K,Kb),e(Kb,Tge),e(Tge,uNo),e(Kb,bNo),e(Kb,yO),e(yO,vNo),e(Kb,FNo),e(K,TNo),e(K,Zb),e(Zb,Mge),e(Mge,MNo),e(Zb,ENo),e(Zb,LO),e(LO,CNo),e(Zb,wNo),e(K,ANo),e(K,e2),e(e2,Ege),e(Ege,yNo),e(e2,LNo),e(e2,xO),e(xO,xNo),e(e2,$No),e(K,kNo),e(K,o2),e(o2,Cge),e(Cge,SNo),e(o2,RNo),e(o2,$O),e($O,PNo),e(o2,BNo),e(K,INo),e(K,r2),e(r2,wge),e(wge,NNo),e(r2,qNo),e(r2,kO),e(kO,jNo),e(r2,DNo),e(K,GNo),e(K,t2),e(t2,Age),e(Age,ONo),e(t2,VNo),e(t2,SO),e(SO,XNo),e(t2,zNo),e(K,WNo),e(K,a2),e(a2,yge),e(yge,QNo),e(a2,HNo),e(a2,RO),e(RO,UNo),e(a2,JNo),e(K,YNo),e(K,n2),e(n2,Lge),e(Lge,KNo),e(n2,ZNo),e(n2,PO),e(PO,eqo),e(n2,oqo),e(K,rqo),e(K,s2),e(s2,xge),e(xge,tqo),e(s2,aqo),e(s2,BO),e(BO,nqo),e(s2,sqo),e(K,lqo),e(K,l2),e(l2,$ge),e($ge,iqo),e(l2,dqo),e(l2,IO),e(IO,cqo),e(l2,fqo),e(K,mqo),e(K,i2),e(i2,kge),e(kge,gqo),e(i2,hqo),e(i2,NO),e(NO,pqo),e(i2,_qo),e(K,uqo),e(K,d2),e(d2,Sge),e(Sge,bqo),e(d2,vqo),e(d2,qO),e(qO,Fqo),e(d2,Tqo),e(K,Mqo),e(K,c2),e(c2,Rge),e(Rge,Eqo),e(c2,Cqo),e(c2,jO),e(jO,wqo),e(c2,Aqo),e(K,yqo),e(K,f2),e(f2,Pge),e(Pge,Lqo),e(f2,xqo),e(f2,DO),e(DO,$qo),e(f2,kqo),e(K,Sqo),e(K,m2),e(m2,Bge),e(Bge,Rqo),e(m2,Pqo),e(m2,GO),e(GO,Bqo),e(m2,Iqo),e(K,Nqo),e(K,g2),e(g2,Ige),e(Ige,qqo),e(g2,jqo),e(g2,OO),e(OO,Dqo),e(g2,Gqo),e(K,Oqo),e(K,h2),e(h2,Nge),e(Nge,Vqo),e(h2,Xqo),e(h2,VO),e(VO,zqo),e(h2,Wqo),e(K,Qqo),e(K,p2),e(p2,qge),e(qge,Hqo),e(p2,Uqo),e(p2,XO),e(XO,Jqo),e(p2,Yqo),e(K,Kqo),e(K,_2),e(_2,jge),e(jge,Zqo),e(_2,ejo),e(_2,zO),e(zO,ojo),e(_2,rjo),e(K,tjo),e(K,u2),e(u2,Dge),e(Dge,ajo),e(u2,njo),e(u2,WO),e(WO,sjo),e(u2,ljo),e(K,ijo),e(K,b2),e(b2,Gge),e(Gge,djo),e(b2,cjo),e(b2,QO),e(QO,fjo),e(b2,mjo),e(ro,gjo),e(ro,v2),e(v2,hjo),e(v2,Oge),e(Oge,pjo),e(v2,_jo),e(v2,Vge),e(Vge,ujo),e(ro,bjo),M(F2,ro,null),b(f,aje,u),b(f,Qi,u),e(Qi,T2),e(T2,Xge),M(Oy,Xge,null),e(Qi,vjo),e(Qi,zge),e(zge,Fjo),b(f,nje,u),b(f,Bo,u),M(Vy,Bo,null),e(Bo,Tjo),e(Bo,Hi),e(Hi,Mjo),e(Hi,HO),e(HO,Ejo),e(Hi,Cjo),e(Hi,UO),e(UO,wjo),e(Hi,Ajo),e(Bo,yjo),e(Bo,Xy),e(Xy,Ljo),e(Xy,Wge),e(Wge,xjo),e(Xy,$jo),e(Bo,kjo),e(Bo,ct),M(zy,ct,null),e(ct,Sjo),e(ct,Qge),e(Qge,Rjo),e(ct,Pjo),e(ct,Ui),e(Ui,Bjo),e(Ui,Hge),e(Hge,Ijo),e(Ui,Njo),e(Ui,JO),e(JO,qjo),e(Ui,jjo),e(ct,Djo),M(M2,ct,null),e(Bo,Gjo),e(Bo,to),M(Wy,to,null),e(to,Ojo),e(to,Uge),e(Uge,Vjo),e(to,Xjo),e(to,Ba),e(Ba,zjo),e(Ba,Jge),e(Jge,Wjo),e(Ba,Qjo),e(Ba,Yge),e(Yge,Hjo),e(Ba,Ujo),e(Ba,Kge),e(Kge,Jjo),e(Ba,Yjo),e(to,Kjo),e(to,Yr),e(Yr,E2),e(E2,Zge),e(Zge,Zjo),e(E2,eDo),e(E2,YO),e(YO,oDo),e(E2,rDo),e(Yr,tDo),e(Yr,C2),e(C2,ehe),e(ehe,aDo),e(C2,nDo),e(C2,KO),e(KO,sDo),e(C2,lDo),e(Yr,iDo),e(Yr,w2),e(w2,ohe),e(ohe,dDo),e(w2,cDo),e(w2,ZO),e(ZO,fDo),e(w2,mDo),e(Yr,gDo),e(Yr,A2),e(A2,rhe),e(rhe,hDo),e(A2,pDo),e(A2,eV),e(eV,_Do),e(A2,uDo),e(Yr,bDo),e(Yr,y2),e(y2,the),e(the,vDo),e(y2,FDo),e(y2,oV),e(oV,TDo),e(y2,MDo),e(to,EDo),e(to,L2),e(L2,CDo),e(L2,ahe),e(ahe,wDo),e(L2,ADo),e(L2,nhe),e(nhe,yDo),e(to,LDo),M(x2,to,null),b(f,sje,u),b(f,Ji,u),e(Ji,$2),e($2,she),M(Qy,she,null),e(Ji,xDo),e(Ji,lhe),e(lhe,$Do),b(f,lje,u),b(f,Io,u),M(Hy,Io,null),e(Io,kDo),e(Io,Yi),e(Yi,SDo),e(Yi,rV),e(rV,RDo),e(Yi,PDo),e(Yi,tV),e(tV,BDo),e(Yi,IDo),e(Io,NDo),e(Io,Uy),e(Uy,qDo),e(Uy,ihe),e(ihe,jDo),e(Uy,DDo),e(Io,GDo),e(Io,ft),M(Jy,ft,null),e(ft,ODo),e(ft,dhe),e(dhe,VDo),e(ft,XDo),e(ft,Ki),e(Ki,zDo),e(Ki,che),e(che,WDo),e(Ki,QDo),e(Ki,aV),e(aV,HDo),e(Ki,UDo),e(ft,JDo),M(k2,ft,null),e(Io,YDo),e(Io,ao),M(Yy,ao,null),e(ao,KDo),e(ao,fhe),e(fhe,ZDo),e(ao,eGo),e(ao,Ia),e(Ia,oGo),e(Ia,mhe),e(mhe,rGo),e(Ia,tGo),e(Ia,ghe),e(ghe,aGo),e(Ia,nGo),e(Ia,hhe),e(hhe,sGo),e(Ia,lGo),e(ao,iGo),e(ao,H),e(H,S2),e(S2,phe),e(phe,dGo),e(S2,cGo),e(S2,nV),e(nV,fGo),e(S2,mGo),e(H,gGo),e(H,R2),e(R2,_he),e(_he,hGo),e(R2,pGo),e(R2,sV),e(sV,_Go),e(R2,uGo),e(H,bGo),e(H,P2),e(P2,uhe),e(uhe,vGo),e(P2,FGo),e(P2,lV),e(lV,TGo),e(P2,MGo),e(H,EGo),e(H,B2),e(B2,bhe),e(bhe,CGo),e(B2,wGo),e(B2,iV),e(iV,AGo),e(B2,yGo),e(H,LGo),e(H,I2),e(I2,vhe),e(vhe,xGo),e(I2,$Go),e(I2,dV),e(dV,kGo),e(I2,SGo),e(H,RGo),e(H,N2),e(N2,Fhe),e(Fhe,PGo),e(N2,BGo),e(N2,cV),e(cV,IGo),e(N2,NGo),e(H,qGo),e(H,q2),e(q2,The),e(The,jGo),e(q2,DGo),e(q2,fV),e(fV,GGo),e(q2,OGo),e(H,VGo),e(H,j2),e(j2,Mhe),e(Mhe,XGo),e(j2,zGo),e(j2,mV),e(mV,WGo),e(j2,QGo),e(H,HGo),e(H,D2),e(D2,Ehe),e(Ehe,UGo),e(D2,JGo),e(D2,gV),e(gV,YGo),e(D2,KGo),e(H,ZGo),e(H,G2),e(G2,Che),e(Che,eOo),e(G2,oOo),e(G2,hV),e(hV,rOo),e(G2,tOo),e(H,aOo),e(H,O2),e(O2,whe),e(whe,nOo),e(O2,sOo),e(O2,pV),e(pV,lOo),e(O2,iOo),e(H,dOo),e(H,V2),e(V2,Ahe),e(Ahe,cOo),e(V2,fOo),e(V2,_V),e(_V,mOo),e(V2,gOo),e(H,hOo),e(H,X2),e(X2,yhe),e(yhe,pOo),e(X2,_Oo),e(X2,uV),e(uV,uOo),e(X2,bOo),e(H,vOo),e(H,z2),e(z2,Lhe),e(Lhe,FOo),e(z2,TOo),e(z2,bV),e(bV,MOo),e(z2,EOo),e(H,COo),e(H,W2),e(W2,xhe),e(xhe,wOo),e(W2,AOo),e(W2,vV),e(vV,yOo),e(W2,LOo),e(H,xOo),e(H,Q2),e(Q2,$he),e($he,$Oo),e(Q2,kOo),e(Q2,FV),e(FV,SOo),e(Q2,ROo),e(H,POo),e(H,H2),e(H2,khe),e(khe,BOo),e(H2,IOo),e(H2,TV),e(TV,NOo),e(H2,qOo),e(H,jOo),e(H,U2),e(U2,She),e(She,DOo),e(U2,GOo),e(U2,MV),e(MV,OOo),e(U2,VOo),e(H,XOo),e(H,J2),e(J2,Rhe),e(Rhe,zOo),e(J2,WOo),e(J2,EV),e(EV,QOo),e(J2,HOo),e(H,UOo),e(H,Y2),e(Y2,Phe),e(Phe,JOo),e(Y2,YOo),e(Y2,CV),e(CV,KOo),e(Y2,ZOo),e(H,eVo),e(H,K2),e(K2,Bhe),e(Bhe,oVo),e(K2,rVo),e(K2,wV),e(wV,tVo),e(K2,aVo),e(H,nVo),e(H,Z2),e(Z2,Ihe),e(Ihe,sVo),e(Z2,lVo),e(Z2,AV),e(AV,iVo),e(Z2,dVo),e(H,cVo),e(H,ev),e(ev,Nhe),e(Nhe,fVo),e(ev,mVo),e(ev,yV),e(yV,gVo),e(ev,hVo),e(H,pVo),e(H,ov),e(ov,qhe),e(qhe,_Vo),e(ov,uVo),e(ov,LV),e(LV,bVo),e(ov,vVo),e(H,FVo),e(H,rv),e(rv,jhe),e(jhe,TVo),e(rv,MVo),e(rv,xV),e(xV,EVo),e(rv,CVo),e(H,wVo),e(H,tv),e(tv,Dhe),e(Dhe,AVo),e(tv,yVo),e(tv,$V),e($V,LVo),e(tv,xVo),e(H,$Vo),e(H,av),e(av,Ghe),e(Ghe,kVo),e(av,SVo),e(av,kV),e(kV,RVo),e(av,PVo),e(H,BVo),e(H,nv),e(nv,Ohe),e(Ohe,IVo),e(nv,NVo),e(nv,SV),e(SV,qVo),e(nv,jVo),e(H,DVo),e(H,sv),e(sv,Vhe),e(Vhe,GVo),e(sv,OVo),e(sv,RV),e(RV,VVo),e(sv,XVo),e(H,zVo),e(H,lv),e(lv,Xhe),e(Xhe,WVo),e(lv,QVo),e(lv,PV),e(PV,HVo),e(lv,UVo),e(H,JVo),e(H,iv),e(iv,zhe),e(zhe,YVo),e(iv,KVo),e(iv,BV),e(BV,ZVo),e(iv,eXo),e(H,oXo),e(H,dv),e(dv,Whe),e(Whe,rXo),e(dv,tXo),e(dv,IV),e(IV,aXo),e(dv,nXo),e(H,sXo),e(H,cv),e(cv,Qhe),e(Qhe,lXo),e(cv,iXo),e(cv,NV),e(NV,dXo),e(cv,cXo),e(H,fXo),e(H,fv),e(fv,Hhe),e(Hhe,mXo),e(fv,gXo),e(fv,qV),e(qV,hXo),e(fv,pXo),e(ao,_Xo),e(ao,mv),e(mv,uXo),e(mv,Uhe),e(Uhe,bXo),e(mv,vXo),e(mv,Jhe),e(Jhe,FXo),e(ao,TXo),M(gv,ao,null),b(f,ije,u),b(f,Zi,u),e(Zi,hv),e(hv,Yhe),M(Ky,Yhe,null),e(Zi,MXo),e(Zi,Khe),e(Khe,EXo),b(f,dje,u),b(f,No,u),M(Zy,No,null),e(No,CXo),e(No,ed),e(ed,wXo),e(ed,jV),e(jV,AXo),e(ed,yXo),e(ed,DV),e(DV,LXo),e(ed,xXo),e(No,$Xo),e(No,eL),e(eL,kXo),e(eL,Zhe),e(Zhe,SXo),e(eL,RXo),e(No,PXo),e(No,mt),M(oL,mt,null),e(mt,BXo),e(mt,epe),e(epe,IXo),e(mt,NXo),e(mt,od),e(od,qXo),e(od,ope),e(ope,jXo),e(od,DXo),e(od,GV),e(GV,GXo),e(od,OXo),e(mt,VXo),M(pv,mt,null),e(No,XXo),e(No,no),M(rL,no,null),e(no,zXo),e(no,rpe),e(rpe,WXo),e(no,QXo),e(no,Na),e(Na,HXo),e(Na,tpe),e(tpe,UXo),e(Na,JXo),e(Na,ape),e(ape,YXo),e(Na,KXo),e(Na,npe),e(npe,ZXo),e(Na,ezo),e(no,ozo),e(no,V),e(V,_v),e(_v,spe),e(spe,rzo),e(_v,tzo),e(_v,OV),e(OV,azo),e(_v,nzo),e(V,szo),e(V,uv),e(uv,lpe),e(lpe,lzo),e(uv,izo),e(uv,VV),e(VV,dzo),e(uv,czo),e(V,fzo),e(V,bv),e(bv,ipe),e(ipe,mzo),e(bv,gzo),e(bv,XV),e(XV,hzo),e(bv,pzo),e(V,_zo),e(V,vv),e(vv,dpe),e(dpe,uzo),e(vv,bzo),e(vv,zV),e(zV,vzo),e(vv,Fzo),e(V,Tzo),e(V,Fv),e(Fv,cpe),e(cpe,Mzo),e(Fv,Ezo),e(Fv,WV),e(WV,Czo),e(Fv,wzo),e(V,Azo),e(V,Tv),e(Tv,fpe),e(fpe,yzo),e(Tv,Lzo),e(Tv,QV),e(QV,xzo),e(Tv,$zo),e(V,kzo),e(V,Mv),e(Mv,mpe),e(mpe,Szo),e(Mv,Rzo),e(Mv,HV),e(HV,Pzo),e(Mv,Bzo),e(V,Izo),e(V,Ev),e(Ev,gpe),e(gpe,Nzo),e(Ev,qzo),e(Ev,UV),e(UV,jzo),e(Ev,Dzo),e(V,Gzo),e(V,Cv),e(Cv,hpe),e(hpe,Ozo),e(Cv,Vzo),e(Cv,JV),e(JV,Xzo),e(Cv,zzo),e(V,Wzo),e(V,wv),e(wv,ppe),e(ppe,Qzo),e(wv,Hzo),e(wv,YV),e(YV,Uzo),e(wv,Jzo),e(V,Yzo),e(V,Av),e(Av,_pe),e(_pe,Kzo),e(Av,Zzo),e(Av,KV),e(KV,eWo),e(Av,oWo),e(V,rWo),e(V,yv),e(yv,upe),e(upe,tWo),e(yv,aWo),e(yv,ZV),e(ZV,nWo),e(yv,sWo),e(V,lWo),e(V,Lv),e(Lv,bpe),e(bpe,iWo),e(Lv,dWo),e(Lv,eX),e(eX,cWo),e(Lv,fWo),e(V,mWo),e(V,xv),e(xv,vpe),e(vpe,gWo),e(xv,hWo),e(xv,oX),e(oX,pWo),e(xv,_Wo),e(V,uWo),e(V,$v),e($v,Fpe),e(Fpe,bWo),e($v,vWo),e($v,rX),e(rX,FWo),e($v,TWo),e(V,MWo),e(V,kv),e(kv,Tpe),e(Tpe,EWo),e(kv,CWo),e(kv,tX),e(tX,wWo),e(kv,AWo),e(V,yWo),e(V,Sv),e(Sv,Mpe),e(Mpe,LWo),e(Sv,xWo),e(Sv,aX),e(aX,$Wo),e(Sv,kWo),e(V,SWo),e(V,Rv),e(Rv,Epe),e(Epe,RWo),e(Rv,PWo),e(Rv,nX),e(nX,BWo),e(Rv,IWo),e(V,NWo),e(V,Pv),e(Pv,Cpe),e(Cpe,qWo),e(Pv,jWo),e(Pv,sX),e(sX,DWo),e(Pv,GWo),e(V,OWo),e(V,Bv),e(Bv,wpe),e(wpe,VWo),e(Bv,XWo),e(Bv,lX),e(lX,zWo),e(Bv,WWo),e(V,QWo),e(V,Iv),e(Iv,Ape),e(Ape,HWo),e(Iv,UWo),e(Iv,iX),e(iX,JWo),e(Iv,YWo),e(V,KWo),e(V,Nv),e(Nv,ype),e(ype,ZWo),e(Nv,eQo),e(Nv,dX),e(dX,oQo),e(Nv,rQo),e(V,tQo),e(V,qv),e(qv,Lpe),e(Lpe,aQo),e(qv,nQo),e(qv,cX),e(cX,sQo),e(qv,lQo),e(V,iQo),e(V,jv),e(jv,xpe),e(xpe,dQo),e(jv,cQo),e(jv,fX),e(fX,fQo),e(jv,mQo),e(V,gQo),e(V,Dv),e(Dv,$pe),e($pe,hQo),e(Dv,pQo),e(Dv,mX),e(mX,_Qo),e(Dv,uQo),e(V,bQo),e(V,Gv),e(Gv,kpe),e(kpe,vQo),e(Gv,FQo),e(Gv,gX),e(gX,TQo),e(Gv,MQo),e(V,EQo),e(V,Ov),e(Ov,Spe),e(Spe,CQo),e(Ov,wQo),e(Ov,hX),e(hX,AQo),e(Ov,yQo),e(V,LQo),e(V,Vv),e(Vv,Rpe),e(Rpe,xQo),e(Vv,$Qo),e(Vv,pX),e(pX,kQo),e(Vv,SQo),e(V,RQo),e(V,Xv),e(Xv,Ppe),e(Ppe,PQo),e(Xv,BQo),e(Xv,_X),e(_X,IQo),e(Xv,NQo),e(V,qQo),e(V,zv),e(zv,Bpe),e(Bpe,jQo),e(zv,DQo),e(zv,uX),e(uX,GQo),e(zv,OQo),e(V,VQo),e(V,Wv),e(Wv,Ipe),e(Ipe,XQo),e(Wv,zQo),e(Wv,bX),e(bX,WQo),e(Wv,QQo),e(V,HQo),e(V,Qv),e(Qv,Npe),e(Npe,UQo),e(Qv,JQo),e(Qv,vX),e(vX,YQo),e(Qv,KQo),e(V,ZQo),e(V,Hv),e(Hv,qpe),e(qpe,eHo),e(Hv,oHo),e(Hv,FX),e(FX,rHo),e(Hv,tHo),e(V,aHo),e(V,Uv),e(Uv,jpe),e(jpe,nHo),e(Uv,sHo),e(Uv,TX),e(TX,lHo),e(Uv,iHo),e(V,dHo),e(V,Jv),e(Jv,Dpe),e(Dpe,cHo),e(Jv,fHo),e(Jv,MX),e(MX,mHo),e(Jv,gHo),e(V,hHo),e(V,Yv),e(Yv,Gpe),e(Gpe,pHo),e(Yv,_Ho),e(Yv,EX),e(EX,uHo),e(Yv,bHo),e(V,vHo),e(V,Kv),e(Kv,Ope),e(Ope,FHo),e(Kv,THo),e(Kv,CX),e(CX,MHo),e(Kv,EHo),e(V,CHo),e(V,Zv),e(Zv,Vpe),e(Vpe,wHo),e(Zv,AHo),e(Zv,wX),e(wX,yHo),e(Zv,LHo),e(V,xHo),e(V,e3),e(e3,Xpe),e(Xpe,$Ho),e(e3,kHo),e(e3,AX),e(AX,SHo),e(e3,RHo),e(V,PHo),e(V,o3),e(o3,zpe),e(zpe,BHo),e(o3,IHo),e(o3,yX),e(yX,NHo),e(o3,qHo),e(no,jHo),e(no,r3),e(r3,DHo),e(r3,Wpe),e(Wpe,GHo),e(r3,OHo),e(r3,Qpe),e(Qpe,VHo),e(no,XHo),M(t3,no,null),b(f,cje,u),b(f,rd,u),e(rd,a3),e(a3,Hpe),M(tL,Hpe,null),e(rd,zHo),e(rd,Upe),e(Upe,WHo),b(f,fje,u),b(f,qo,u),M(aL,qo,null),e(qo,QHo),e(qo,td),e(td,HHo),e(td,LX),e(LX,UHo),e(td,JHo),e(td,xX),e(xX,YHo),e(td,KHo),e(qo,ZHo),e(qo,nL),e(nL,eUo),e(nL,Jpe),e(Jpe,oUo),e(nL,rUo),e(qo,tUo),e(qo,gt),M(sL,gt,null),e(gt,aUo),e(gt,Ype),e(Ype,nUo),e(gt,sUo),e(gt,ad),e(ad,lUo),e(ad,Kpe),e(Kpe,iUo),e(ad,dUo),e(ad,$X),e($X,cUo),e(ad,fUo),e(gt,mUo),M(n3,gt,null),e(qo,gUo),e(qo,so),M(lL,so,null),e(so,hUo),e(so,Zpe),e(Zpe,pUo),e(so,_Uo),e(so,qa),e(qa,uUo),e(qa,e_e),e(e_e,bUo),e(qa,vUo),e(qa,o_e),e(o_e,FUo),e(qa,TUo),e(qa,r_e),e(r_e,MUo),e(qa,EUo),e(so,CUo),e(so,t_e),e(t_e,s3),e(s3,a_e),e(a_e,wUo),e(s3,AUo),e(s3,kX),e(kX,yUo),e(s3,LUo),e(so,xUo),e(so,l3),e(l3,$Uo),e(l3,n_e),e(n_e,kUo),e(l3,SUo),e(l3,s_e),e(s_e,RUo),e(so,PUo),M(i3,so,null),b(f,mje,u),b(f,nd,u),e(nd,d3),e(d3,l_e),M(iL,l_e,null),e(nd,BUo),e(nd,i_e),e(i_e,IUo),b(f,gje,u),b(f,jo,u),M(dL,jo,null),e(jo,NUo),e(jo,sd),e(sd,qUo),e(sd,SX),e(SX,jUo),e(sd,DUo),e(sd,RX),e(RX,GUo),e(sd,OUo),e(jo,VUo),e(jo,cL),e(cL,XUo),e(cL,d_e),e(d_e,zUo),e(cL,WUo),e(jo,QUo),e(jo,ht),M(fL,ht,null),e(ht,HUo),e(ht,c_e),e(c_e,UUo),e(ht,JUo),e(ht,ld),e(ld,YUo),e(ld,f_e),e(f_e,KUo),e(ld,ZUo),e(ld,PX),e(PX,eJo),e(ld,oJo),e(ht,rJo),M(c3,ht,null),e(jo,tJo),e(jo,lo),M(mL,lo,null),e(lo,aJo),e(lo,m_e),e(m_e,nJo),e(lo,sJo),e(lo,ja),e(ja,lJo),e(ja,g_e),e(g_e,iJo),e(ja,dJo),e(ja,h_e),e(h_e,cJo),e(ja,fJo),e(ja,p_e),e(p_e,mJo),e(ja,gJo),e(lo,hJo),e(lo,Fe),e(Fe,f3),e(f3,__e),e(__e,pJo),e(f3,_Jo),e(f3,BX),e(BX,uJo),e(f3,bJo),e(Fe,vJo),e(Fe,m3),e(m3,u_e),e(u_e,FJo),e(m3,TJo),e(m3,IX),e(IX,MJo),e(m3,EJo),e(Fe,CJo),e(Fe,g3),e(g3,b_e),e(b_e,wJo),e(g3,AJo),e(g3,NX),e(NX,yJo),e(g3,LJo),e(Fe,xJo),e(Fe,h3),e(h3,v_e),e(v_e,$Jo),e(h3,kJo),e(h3,qX),e(qX,SJo),e(h3,RJo),e(Fe,PJo),e(Fe,Is),e(Is,F_e),e(F_e,BJo),e(Is,IJo),e(Is,jX),e(jX,NJo),e(Is,qJo),e(Is,DX),e(DX,jJo),e(Is,DJo),e(Fe,GJo),e(Fe,p3),e(p3,T_e),e(T_e,OJo),e(p3,VJo),e(p3,GX),e(GX,XJo),e(p3,zJo),e(Fe,WJo),e(Fe,pt),e(pt,M_e),e(M_e,QJo),e(pt,HJo),e(pt,OX),e(OX,UJo),e(pt,JJo),e(pt,VX),e(VX,YJo),e(pt,KJo),e(pt,XX),e(XX,ZJo),e(pt,eYo),e(Fe,oYo),e(Fe,_3),e(_3,E_e),e(E_e,rYo),e(_3,tYo),e(_3,zX),e(zX,aYo),e(_3,nYo),e(Fe,sYo),e(Fe,u3),e(u3,C_e),e(C_e,lYo),e(u3,iYo),e(u3,WX),e(WX,dYo),e(u3,cYo),e(Fe,fYo),e(Fe,b3),e(b3,w_e),e(w_e,mYo),e(b3,gYo),e(b3,QX),e(QX,hYo),e(b3,pYo),e(Fe,_Yo),e(Fe,v3),e(v3,A_e),e(A_e,uYo),e(v3,bYo),e(v3,HX),e(HX,vYo),e(v3,FYo),e(Fe,TYo),e(Fe,F3),e(F3,y_e),e(y_e,MYo),e(F3,EYo),e(F3,UX),e(UX,CYo),e(F3,wYo),e(Fe,AYo),e(Fe,T3),e(T3,L_e),e(L_e,yYo),e(T3,LYo),e(T3,JX),e(JX,xYo),e(T3,$Yo),e(Fe,kYo),e(Fe,M3),e(M3,x_e),e(x_e,SYo),e(M3,RYo),e(M3,YX),e(YX,PYo),e(M3,BYo),e(lo,IYo),e(lo,E3),e(E3,NYo),e(E3,$_e),e($_e,qYo),e(E3,jYo),e(E3,k_e),e(k_e,DYo),e(lo,GYo),M(C3,lo,null),b(f,hje,u),b(f,id,u),e(id,w3),e(w3,S_e),M(gL,S_e,null),e(id,OYo),e(id,R_e),e(R_e,VYo),b(f,pje,u),b(f,Do,u),M(hL,Do,null),e(Do,XYo),e(Do,dd),e(dd,zYo),e(dd,KX),e(KX,WYo),e(dd,QYo),e(dd,ZX),e(ZX,HYo),e(dd,UYo),e(Do,JYo),e(Do,pL),e(pL,YYo),e(pL,P_e),e(P_e,KYo),e(pL,ZYo),e(Do,eKo),e(Do,_t),M(_L,_t,null),e(_t,oKo),e(_t,B_e),e(B_e,rKo),e(_t,tKo),e(_t,cd),e(cd,aKo),e(cd,I_e),e(I_e,nKo),e(cd,sKo),e(cd,ez),e(ez,lKo),e(cd,iKo),e(_t,dKo),M(A3,_t,null),e(Do,cKo),e(Do,io),M(uL,io,null),e(io,fKo),e(io,N_e),e(N_e,mKo),e(io,gKo),e(io,Da),e(Da,hKo),e(Da,q_e),e(q_e,pKo),e(Da,_Ko),e(Da,j_e),e(j_e,uKo),e(Da,bKo),e(Da,D_e),e(D_e,vKo),e(Da,FKo),e(io,TKo),e(io,G_e),e(G_e,y3),e(y3,O_e),e(O_e,MKo),e(y3,EKo),e(y3,oz),e(oz,CKo),e(y3,wKo),e(io,AKo),e(io,L3),e(L3,yKo),e(L3,V_e),e(V_e,LKo),e(L3,xKo),e(L3,X_e),e(X_e,$Ko),e(io,kKo),M(x3,io,null),b(f,_je,u),b(f,fd,u),e(fd,$3),e($3,z_e),M(bL,z_e,null),e(fd,SKo),e(fd,W_e),e(W_e,RKo),b(f,uje,u),b(f,Go,u),M(vL,Go,null),e(Go,PKo),e(Go,md),e(md,BKo),e(md,rz),e(rz,IKo),e(md,NKo),e(md,tz),e(tz,qKo),e(md,jKo),e(Go,DKo),e(Go,FL),e(FL,GKo),e(FL,Q_e),e(Q_e,OKo),e(FL,VKo),e(Go,XKo),e(Go,ut),M(TL,ut,null),e(ut,zKo),e(ut,H_e),e(H_e,WKo),e(ut,QKo),e(ut,gd),e(gd,HKo),e(gd,U_e),e(U_e,UKo),e(gd,JKo),e(gd,az),e(az,YKo),e(gd,KKo),e(ut,ZKo),M(k3,ut,null),e(Go,eZo),e(Go,co),M(ML,co,null),e(co,oZo),e(co,J_e),e(J_e,rZo),e(co,tZo),e(co,Ga),e(Ga,aZo),e(Ga,Y_e),e(Y_e,nZo),e(Ga,sZo),e(Ga,K_e),e(K_e,lZo),e(Ga,iZo),e(Ga,Z_e),e(Z_e,dZo),e(Ga,cZo),e(co,fZo),e(co,Se),e(Se,S3),e(S3,eue),e(eue,mZo),e(S3,gZo),e(S3,nz),e(nz,hZo),e(S3,pZo),e(Se,_Zo),e(Se,R3),e(R3,oue),e(oue,uZo),e(R3,bZo),e(R3,sz),e(sz,vZo),e(R3,FZo),e(Se,TZo),e(Se,P3),e(P3,rue),e(rue,MZo),e(P3,EZo),e(P3,lz),e(lz,CZo),e(P3,wZo),e(Se,AZo),e(Se,B3),e(B3,tue),e(tue,yZo),e(B3,LZo),e(B3,iz),e(iz,xZo),e(B3,$Zo),e(Se,kZo),e(Se,I3),e(I3,aue),e(aue,SZo),e(I3,RZo),e(I3,dz),e(dz,PZo),e(I3,BZo),e(Se,IZo),e(Se,N3),e(N3,nue),e(nue,NZo),e(N3,qZo),e(N3,cz),e(cz,jZo),e(N3,DZo),e(Se,GZo),e(Se,q3),e(q3,sue),e(sue,OZo),e(q3,VZo),e(q3,fz),e(fz,XZo),e(q3,zZo),e(Se,WZo),e(Se,j3),e(j3,lue),e(lue,QZo),e(j3,HZo),e(j3,mz),e(mz,UZo),e(j3,JZo),e(Se,YZo),e(Se,D3),e(D3,iue),e(iue,KZo),e(D3,ZZo),e(D3,gz),e(gz,eer),e(D3,oer),e(co,rer),e(co,G3),e(G3,ter),e(G3,due),e(due,aer),e(G3,ner),e(G3,cue),e(cue,ser),e(co,ler),M(O3,co,null),b(f,bje,u),b(f,hd,u),e(hd,V3),e(V3,fue),M(EL,fue,null),e(hd,ier),e(hd,mue),e(mue,der),b(f,vje,u),b(f,Oo,u),M(CL,Oo,null),e(Oo,cer),e(Oo,pd),e(pd,fer),e(pd,hz),e(hz,mer),e(pd,ger),e(pd,pz),e(pz,her),e(pd,per),e(Oo,_er),e(Oo,wL),e(wL,uer),e(wL,gue),e(gue,ber),e(wL,ver),e(Oo,Fer),e(Oo,bt),M(AL,bt,null),e(bt,Ter),e(bt,hue),e(hue,Mer),e(bt,Eer),e(bt,_d),e(_d,Cer),e(_d,pue),e(pue,wer),e(_d,Aer),e(_d,_z),e(_z,yer),e(_d,Ler),e(bt,xer),M(X3,bt,null),e(Oo,$er),e(Oo,fo),M(yL,fo,null),e(fo,ker),e(fo,_ue),e(_ue,Ser),e(fo,Rer),e(fo,Oa),e(Oa,Per),e(Oa,uue),e(uue,Ber),e(Oa,Ier),e(Oa,bue),e(bue,Ner),e(Oa,qer),e(Oa,vue),e(vue,jer),e(Oa,Der),e(fo,Ger),e(fo,Kr),e(Kr,z3),e(z3,Fue),e(Fue,Oer),e(z3,Ver),e(z3,uz),e(uz,Xer),e(z3,zer),e(Kr,Wer),e(Kr,W3),e(W3,Tue),e(Tue,Qer),e(W3,Her),e(W3,bz),e(bz,Uer),e(W3,Jer),e(Kr,Yer),e(Kr,Q3),e(Q3,Mue),e(Mue,Ker),e(Q3,Zer),e(Q3,vz),e(vz,eor),e(Q3,oor),e(Kr,ror),e(Kr,H3),e(H3,Eue),e(Eue,tor),e(H3,aor),e(H3,Fz),e(Fz,nor),e(H3,sor),e(Kr,lor),e(Kr,U3),e(U3,Cue),e(Cue,ior),e(U3,dor),e(U3,Tz),e(Tz,cor),e(U3,mor),e(fo,gor),e(fo,J3),e(J3,hor),e(J3,wue),e(wue,por),e(J3,_or),e(J3,Aue),e(Aue,uor),e(fo,bor),M(Y3,fo,null),b(f,Fje,u),b(f,ud,u),e(ud,K3),e(K3,yue),M(LL,yue,null),e(ud,vor),e(ud,Lue),e(Lue,For),b(f,Tje,u),b(f,Vo,u),M(xL,Vo,null),e(Vo,Tor),e(Vo,bd),e(bd,Mor),e(bd,Mz),e(Mz,Eor),e(bd,Cor),e(bd,Ez),e(Ez,wor),e(bd,Aor),e(Vo,yor),e(Vo,$L),e($L,Lor),e($L,xue),e(xue,xor),e($L,$or),e(Vo,kor),e(Vo,vt),M(kL,vt,null),e(vt,Sor),e(vt,$ue),e($ue,Ror),e(vt,Por),e(vt,vd),e(vd,Bor),e(vd,kue),e(kue,Ior),e(vd,Nor),e(vd,Cz),e(Cz,qor),e(vd,jor),e(vt,Dor),M(Z3,vt,null),e(Vo,Gor),e(Vo,mo),M(SL,mo,null),e(mo,Oor),e(mo,Sue),e(Sue,Vor),e(mo,Xor),e(mo,Va),e(Va,zor),e(Va,Rue),e(Rue,Wor),e(Va,Qor),e(Va,Pue),e(Pue,Hor),e(Va,Uor),e(Va,Bue),e(Bue,Jor),e(Va,Yor),e(mo,Kor),e(mo,Re),e(Re,eF),e(eF,Iue),e(Iue,Zor),e(eF,err),e(eF,wz),e(wz,orr),e(eF,rrr),e(Re,trr),e(Re,oF),e(oF,Nue),e(Nue,arr),e(oF,nrr),e(oF,Az),e(Az,srr),e(oF,lrr),e(Re,irr),e(Re,rF),e(rF,que),e(que,drr),e(rF,crr),e(rF,yz),e(yz,frr),e(rF,mrr),e(Re,grr),e(Re,tF),e(tF,jue),e(jue,hrr),e(tF,prr),e(tF,Lz),e(Lz,_rr),e(tF,urr),e(Re,brr),e(Re,aF),e(aF,Due),e(Due,vrr),e(aF,Frr),e(aF,xz),e(xz,Trr),e(aF,Mrr),e(Re,Err),e(Re,nF),e(nF,Gue),e(Gue,Crr),e(nF,wrr),e(nF,$z),e($z,Arr),e(nF,yrr),e(Re,Lrr),e(Re,sF),e(sF,Oue),e(Oue,xrr),e(sF,$rr),e(sF,kz),e(kz,krr),e(sF,Srr),e(Re,Rrr),e(Re,lF),e(lF,Vue),e(Vue,Prr),e(lF,Brr),e(lF,Sz),e(Sz,Irr),e(lF,Nrr),e(Re,qrr),e(Re,iF),e(iF,Xue),e(Xue,jrr),e(iF,Drr),e(iF,Rz),e(Rz,Grr),e(iF,Orr),e(mo,Vrr),e(mo,dF),e(dF,Xrr),e(dF,zue),e(zue,zrr),e(dF,Wrr),e(dF,Wue),e(Wue,Qrr),e(mo,Hrr),M(cF,mo,null),b(f,Mje,u),b(f,Fd,u),e(Fd,fF),e(fF,Que),M(RL,Que,null),e(Fd,Urr),e(Fd,Hue),e(Hue,Jrr),b(f,Eje,u),b(f,Xo,u),M(PL,Xo,null),e(Xo,Yrr),e(Xo,Td),e(Td,Krr),e(Td,Pz),e(Pz,Zrr),e(Td,etr),e(Td,Bz),e(Bz,otr),e(Td,rtr),e(Xo,ttr),e(Xo,BL),e(BL,atr),e(BL,Uue),e(Uue,ntr),e(BL,str),e(Xo,ltr),e(Xo,Ft),M(IL,Ft,null),e(Ft,itr),e(Ft,Jue),e(Jue,dtr),e(Ft,ctr),e(Ft,Md),e(Md,ftr),e(Md,Yue),e(Yue,mtr),e(Md,gtr),e(Md,Iz),e(Iz,htr),e(Md,ptr),e(Ft,_tr),M(mF,Ft,null),e(Xo,utr),e(Xo,go),M(NL,go,null),e(go,btr),e(go,Kue),e(Kue,vtr),e(go,Ftr),e(go,Xa),e(Xa,Ttr),e(Xa,Zue),e(Zue,Mtr),e(Xa,Etr),e(Xa,e4e),e(e4e,Ctr),e(Xa,wtr),e(Xa,o4e),e(o4e,Atr),e(Xa,ytr),e(go,Ltr),e(go,qL),e(qL,gF),e(gF,r4e),e(r4e,xtr),e(gF,$tr),e(gF,Nz),e(Nz,ktr),e(gF,Str),e(qL,Rtr),e(qL,hF),e(hF,t4e),e(t4e,Ptr),e(hF,Btr),e(hF,qz),e(qz,Itr),e(hF,Ntr),e(go,qtr),e(go,pF),e(pF,jtr),e(pF,a4e),e(a4e,Dtr),e(pF,Gtr),e(pF,n4e),e(n4e,Otr),e(go,Vtr),M(_F,go,null),b(f,Cje,u),b(f,Ed,u),e(Ed,uF),e(uF,s4e),M(jL,s4e,null),e(Ed,Xtr),e(Ed,l4e),e(l4e,ztr),b(f,wje,u),b(f,zo,u),M(DL,zo,null),e(zo,Wtr),e(zo,Cd),e(Cd,Qtr),e(Cd,jz),e(jz,Htr),e(Cd,Utr),e(Cd,Dz),e(Dz,Jtr),e(Cd,Ytr),e(zo,Ktr),e(zo,GL),e(GL,Ztr),e(GL,i4e),e(i4e,ear),e(GL,oar),e(zo,rar),e(zo,Tt),M(OL,Tt,null),e(Tt,tar),e(Tt,d4e),e(d4e,aar),e(Tt,nar),e(Tt,wd),e(wd,sar),e(wd,c4e),e(c4e,lar),e(wd,iar),e(wd,Gz),e(Gz,dar),e(wd,car),e(Tt,far),M(bF,Tt,null),e(zo,mar),e(zo,ho),M(VL,ho,null),e(ho,gar),e(ho,f4e),e(f4e,har),e(ho,par),e(ho,za),e(za,_ar),e(za,m4e),e(m4e,uar),e(za,bar),e(za,g4e),e(g4e,Far),e(za,Tar),e(za,h4e),e(h4e,Mar),e(za,Ear),e(ho,Car),e(ho,Zr),e(Zr,vF),e(vF,p4e),e(p4e,war),e(vF,Aar),e(vF,Oz),e(Oz,yar),e(vF,Lar),e(Zr,xar),e(Zr,FF),e(FF,_4e),e(_4e,$ar),e(FF,kar),e(FF,Vz),e(Vz,Sar),e(FF,Rar),e(Zr,Par),e(Zr,TF),e(TF,u4e),e(u4e,Bar),e(TF,Iar),e(TF,Xz),e(Xz,Nar),e(TF,qar),e(Zr,jar),e(Zr,MF),e(MF,b4e),e(b4e,Dar),e(MF,Gar),e(MF,zz),e(zz,Oar),e(MF,Var),e(Zr,Xar),e(Zr,EF),e(EF,v4e),e(v4e,zar),e(EF,War),e(EF,Wz),e(Wz,Qar),e(EF,Har),e(ho,Uar),e(ho,CF),e(CF,Jar),e(CF,F4e),e(F4e,Yar),e(CF,Kar),e(CF,T4e),e(T4e,Zar),e(ho,enr),M(wF,ho,null),b(f,Aje,u),b(f,Ad,u),e(Ad,AF),e(AF,M4e),M(XL,M4e,null),e(Ad,onr),e(Ad,E4e),e(E4e,rnr),b(f,yje,u),b(f,Wo,u),M(zL,Wo,null),e(Wo,tnr),e(Wo,yd),e(yd,anr),e(yd,Qz),e(Qz,nnr),e(yd,snr),e(yd,Hz),e(Hz,lnr),e(yd,inr),e(Wo,dnr),e(Wo,WL),e(WL,cnr),e(WL,C4e),e(C4e,fnr),e(WL,mnr),e(Wo,gnr),e(Wo,Mt),M(QL,Mt,null),e(Mt,hnr),e(Mt,w4e),e(w4e,pnr),e(Mt,_nr),e(Mt,Ld),e(Ld,unr),e(Ld,A4e),e(A4e,bnr),e(Ld,vnr),e(Ld,Uz),e(Uz,Fnr),e(Ld,Tnr),e(Mt,Mnr),M(yF,Mt,null),e(Wo,Enr),e(Wo,po),M(HL,po,null),e(po,Cnr),e(po,y4e),e(y4e,wnr),e(po,Anr),e(po,Wa),e(Wa,ynr),e(Wa,L4e),e(L4e,Lnr),e(Wa,xnr),e(Wa,x4e),e(x4e,$nr),e(Wa,knr),e(Wa,$4e),e($4e,Snr),e(Wa,Rnr),e(po,Pnr),e(po,xd),e(xd,LF),e(LF,k4e),e(k4e,Bnr),e(LF,Inr),e(LF,Jz),e(Jz,Nnr),e(LF,qnr),e(xd,jnr),e(xd,xF),e(xF,S4e),e(S4e,Dnr),e(xF,Gnr),e(xF,Yz),e(Yz,Onr),e(xF,Vnr),e(xd,Xnr),e(xd,$F),e($F,R4e),e(R4e,znr),e($F,Wnr),e($F,Kz),e(Kz,Qnr),e($F,Hnr),e(po,Unr),e(po,kF),e(kF,Jnr),e(kF,P4e),e(P4e,Ynr),e(kF,Knr),e(kF,B4e),e(B4e,Znr),e(po,esr),M(SF,po,null),b(f,Lje,u),b(f,$d,u),e($d,RF),e(RF,I4e),M(UL,I4e,null),e($d,osr),e($d,N4e),e(N4e,rsr),b(f,xje,u),b(f,Qo,u),M(JL,Qo,null),e(Qo,tsr),e(Qo,kd),e(kd,asr),e(kd,Zz),e(Zz,nsr),e(kd,ssr),e(kd,eW),e(eW,lsr),e(kd,isr),e(Qo,dsr),e(Qo,YL),e(YL,csr),e(YL,q4e),e(q4e,fsr),e(YL,msr),e(Qo,gsr),e(Qo,Et),M(KL,Et,null),e(Et,hsr),e(Et,j4e),e(j4e,psr),e(Et,_sr),e(Et,Sd),e(Sd,usr),e(Sd,D4e),e(D4e,bsr),e(Sd,vsr),e(Sd,oW),e(oW,Fsr),e(Sd,Tsr),e(Et,Msr),M(PF,Et,null),e(Qo,Esr),e(Qo,_o),M(ZL,_o,null),e(_o,Csr),e(_o,G4e),e(G4e,wsr),e(_o,Asr),e(_o,Qa),e(Qa,ysr),e(Qa,O4e),e(O4e,Lsr),e(Qa,xsr),e(Qa,V4e),e(V4e,$sr),e(Qa,ksr),e(Qa,X4e),e(X4e,Ssr),e(Qa,Rsr),e(_o,Psr),e(_o,e8),e(e8,BF),e(BF,z4e),e(z4e,Bsr),e(BF,Isr),e(BF,rW),e(rW,Nsr),e(BF,qsr),e(e8,jsr),e(e8,IF),e(IF,W4e),e(W4e,Dsr),e(IF,Gsr),e(IF,tW),e(tW,Osr),e(IF,Vsr),e(_o,Xsr),e(_o,NF),e(NF,zsr),e(NF,Q4e),e(Q4e,Wsr),e(NF,Qsr),e(NF,H4e),e(H4e,Hsr),e(_o,Usr),M(qF,_o,null),b(f,$je,u),b(f,Rd,u),e(Rd,jF),e(jF,U4e),M(o8,U4e,null),e(Rd,Jsr),e(Rd,J4e),e(J4e,Ysr),b(f,kje,u),b(f,Ho,u),M(r8,Ho,null),e(Ho,Ksr),e(Ho,Pd),e(Pd,Zsr),e(Pd,aW),e(aW,elr),e(Pd,olr),e(Pd,nW),e(nW,rlr),e(Pd,tlr),e(Ho,alr),e(Ho,t8),e(t8,nlr),e(t8,Y4e),e(Y4e,slr),e(t8,llr),e(Ho,ilr),e(Ho,Ct),M(a8,Ct,null),e(Ct,dlr),e(Ct,K4e),e(K4e,clr),e(Ct,flr),e(Ct,Bd),e(Bd,mlr),e(Bd,Z4e),e(Z4e,glr),e(Bd,hlr),e(Bd,sW),e(sW,plr),e(Bd,_lr),e(Ct,ulr),M(DF,Ct,null),e(Ho,blr),e(Ho,uo),M(n8,uo,null),e(uo,vlr),e(uo,e1e),e(e1e,Flr),e(uo,Tlr),e(uo,Ha),e(Ha,Mlr),e(Ha,o1e),e(o1e,Elr),e(Ha,Clr),e(Ha,r1e),e(r1e,wlr),e(Ha,Alr),e(Ha,t1e),e(t1e,ylr),e(Ha,Llr),e(uo,xlr),e(uo,a1e),e(a1e,GF),e(GF,n1e),e(n1e,$lr),e(GF,klr),e(GF,lW),e(lW,Slr),e(GF,Rlr),e(uo,Plr),e(uo,OF),e(OF,Blr),e(OF,s1e),e(s1e,Ilr),e(OF,Nlr),e(OF,l1e),e(l1e,qlr),e(uo,jlr),M(VF,uo,null),b(f,Sje,u),b(f,Id,u),e(Id,XF),e(XF,i1e),M(s8,i1e,null),e(Id,Dlr),e(Id,d1e),e(d1e,Glr),b(f,Rje,u),b(f,Uo,u),M(l8,Uo,null),e(Uo,Olr),e(Uo,Nd),e(Nd,Vlr),e(Nd,iW),e(iW,Xlr),e(Nd,zlr),e(Nd,dW),e(dW,Wlr),e(Nd,Qlr),e(Uo,Hlr),e(Uo,i8),e(i8,Ulr),e(i8,c1e),e(c1e,Jlr),e(i8,Ylr),e(Uo,Klr),e(Uo,wt),M(d8,wt,null),e(wt,Zlr),e(wt,f1e),e(f1e,eir),e(wt,oir),e(wt,qd),e(qd,rir),e(qd,m1e),e(m1e,tir),e(qd,air),e(qd,cW),e(cW,nir),e(qd,sir),e(wt,lir),M(zF,wt,null),e(Uo,iir),e(Uo,bo),M(c8,bo,null),e(bo,dir),e(bo,g1e),e(g1e,cir),e(bo,fir),e(bo,Ua),e(Ua,mir),e(Ua,h1e),e(h1e,gir),e(Ua,hir),e(Ua,p1e),e(p1e,pir),e(Ua,_ir),e(Ua,_1e),e(_1e,uir),e(Ua,bir),e(bo,vir),e(bo,Ja),e(Ja,WF),e(WF,u1e),e(u1e,Fir),e(WF,Tir),e(WF,fW),e(fW,Mir),e(WF,Eir),e(Ja,Cir),e(Ja,QF),e(QF,b1e),e(b1e,wir),e(QF,Air),e(QF,mW),e(mW,yir),e(QF,Lir),e(Ja,xir),e(Ja,HF),e(HF,v1e),e(v1e,$ir),e(HF,kir),e(HF,gW),e(gW,Sir),e(HF,Rir),e(Ja,Pir),e(Ja,UF),e(UF,F1e),e(F1e,Bir),e(UF,Iir),e(UF,hW),e(hW,Nir),e(UF,qir),e(bo,jir),e(bo,JF),e(JF,Dir),e(JF,T1e),e(T1e,Gir),e(JF,Oir),e(JF,M1e),e(M1e,Vir),e(bo,Xir),M(YF,bo,null),b(f,Pje,u),b(f,jd,u),e(jd,KF),e(KF,E1e),M(f8,E1e,null),e(jd,zir),e(jd,C1e),e(C1e,Wir),b(f,Bje,u),b(f,Jo,u),M(m8,Jo,null),e(Jo,Qir),e(Jo,Dd),e(Dd,Hir),e(Dd,pW),e(pW,Uir),e(Dd,Jir),e(Dd,_W),e(_W,Yir),e(Dd,Kir),e(Jo,Zir),e(Jo,g8),e(g8,edr),e(g8,w1e),e(w1e,odr),e(g8,rdr),e(Jo,tdr),e(Jo,At),M(h8,At,null),e(At,adr),e(At,A1e),e(A1e,ndr),e(At,sdr),e(At,Gd),e(Gd,ldr),e(Gd,y1e),e(y1e,idr),e(Gd,ddr),e(Gd,uW),e(uW,cdr),e(Gd,fdr),e(At,mdr),M(ZF,At,null),e(Jo,gdr),e(Jo,vo),M(p8,vo,null),e(vo,hdr),e(vo,L1e),e(L1e,pdr),e(vo,_dr),e(vo,Ya),e(Ya,udr),e(Ya,x1e),e(x1e,bdr),e(Ya,vdr),e(Ya,$1e),e($1e,Fdr),e(Ya,Tdr),e(Ya,k1e),e(k1e,Mdr),e(Ya,Edr),e(vo,Cdr),e(vo,S1e),e(S1e,eT),e(eT,R1e),e(R1e,wdr),e(eT,Adr),e(eT,bW),e(bW,ydr),e(eT,Ldr),e(vo,xdr),e(vo,oT),e(oT,$dr),e(oT,P1e),e(P1e,kdr),e(oT,Sdr),e(oT,B1e),e(B1e,Rdr),e(vo,Pdr),M(rT,vo,null),b(f,Ije,u),b(f,Od,u),e(Od,tT),e(tT,I1e),M(_8,I1e,null),e(Od,Bdr),e(Od,N1e),e(N1e,Idr),b(f,Nje,u),b(f,Yo,u),M(u8,Yo,null),e(Yo,Ndr),e(Yo,Vd),e(Vd,qdr),e(Vd,vW),e(vW,jdr),e(Vd,Ddr),e(Vd,FW),e(FW,Gdr),e(Vd,Odr),e(Yo,Vdr),e(Yo,b8),e(b8,Xdr),e(b8,q1e),e(q1e,zdr),e(b8,Wdr),e(Yo,Qdr),e(Yo,yt),M(v8,yt,null),e(yt,Hdr),e(yt,j1e),e(j1e,Udr),e(yt,Jdr),e(yt,Xd),e(Xd,Ydr),e(Xd,D1e),e(D1e,Kdr),e(Xd,Zdr),e(Xd,TW),e(TW,ecr),e(Xd,ocr),e(yt,rcr),M(aT,yt,null),e(Yo,tcr),e(Yo,wr),M(F8,wr,null),e(wr,acr),e(wr,G1e),e(G1e,ncr),e(wr,scr),e(wr,Ka),e(Ka,lcr),e(Ka,O1e),e(O1e,icr),e(Ka,dcr),e(Ka,V1e),e(V1e,ccr),e(Ka,fcr),e(Ka,X1e),e(X1e,mcr),e(Ka,gcr),e(wr,hcr),e(wr,q),e(q,nT),e(nT,z1e),e(z1e,pcr),e(nT,_cr),e(nT,MW),e(MW,ucr),e(nT,bcr),e(q,vcr),e(q,sT),e(sT,W1e),e(W1e,Fcr),e(sT,Tcr),e(sT,EW),e(EW,Mcr),e(sT,Ecr),e(q,Ccr),e(q,lT),e(lT,Q1e),e(Q1e,wcr),e(lT,Acr),e(lT,CW),e(CW,ycr),e(lT,Lcr),e(q,xcr),e(q,iT),e(iT,H1e),e(H1e,$cr),e(iT,kcr),e(iT,wW),e(wW,Scr),e(iT,Rcr),e(q,Pcr),e(q,dT),e(dT,U1e),e(U1e,Bcr),e(dT,Icr),e(dT,AW),e(AW,Ncr),e(dT,qcr),e(q,jcr),e(q,cT),e(cT,J1e),e(J1e,Dcr),e(cT,Gcr),e(cT,yW),e(yW,Ocr),e(cT,Vcr),e(q,Xcr),e(q,fT),e(fT,Y1e),e(Y1e,zcr),e(fT,Wcr),e(fT,LW),e(LW,Qcr),e(fT,Hcr),e(q,Ucr),e(q,mT),e(mT,K1e),e(K1e,Jcr),e(mT,Ycr),e(mT,xW),e(xW,Kcr),e(mT,Zcr),e(q,efr),e(q,gT),e(gT,Z1e),e(Z1e,ofr),e(gT,rfr),e(gT,$W),e($W,tfr),e(gT,afr),e(q,nfr),e(q,hT),e(hT,ebe),e(ebe,sfr),e(hT,lfr),e(hT,kW),e(kW,ifr),e(hT,dfr),e(q,cfr),e(q,pT),e(pT,obe),e(obe,ffr),e(pT,mfr),e(pT,SW),e(SW,gfr),e(pT,hfr),e(q,pfr),e(q,_T),e(_T,rbe),e(rbe,_fr),e(_T,ufr),e(_T,RW),e(RW,bfr),e(_T,vfr),e(q,Ffr),e(q,uT),e(uT,tbe),e(tbe,Tfr),e(uT,Mfr),e(uT,PW),e(PW,Efr),e(uT,Cfr),e(q,wfr),e(q,bT),e(bT,abe),e(abe,Afr),e(bT,yfr),e(bT,BW),e(BW,Lfr),e(bT,xfr),e(q,$fr),e(q,vT),e(vT,nbe),e(nbe,kfr),e(vT,Sfr),e(vT,IW),e(IW,Rfr),e(vT,Pfr),e(q,Bfr),e(q,FT),e(FT,sbe),e(sbe,Ifr),e(FT,Nfr),e(FT,NW),e(NW,qfr),e(FT,jfr),e(q,Dfr),e(q,TT),e(TT,lbe),e(lbe,Gfr),e(TT,Ofr),e(TT,qW),e(qW,Vfr),e(TT,Xfr),e(q,zfr),e(q,Ns),e(Ns,ibe),e(ibe,Wfr),e(Ns,Qfr),e(Ns,jW),e(jW,Hfr),e(Ns,Ufr),e(Ns,DW),e(DW,Jfr),e(Ns,Yfr),e(q,Kfr),e(q,MT),e(MT,dbe),e(dbe,Zfr),e(MT,emr),e(MT,GW),e(GW,omr),e(MT,rmr),e(q,tmr),e(q,ET),e(ET,cbe),e(cbe,amr),e(ET,nmr),e(ET,OW),e(OW,smr),e(ET,lmr),e(q,imr),e(q,CT),e(CT,fbe),e(fbe,dmr),e(CT,cmr),e(CT,VW),e(VW,fmr),e(CT,mmr),e(q,gmr),e(q,wT),e(wT,mbe),e(mbe,hmr),e(wT,pmr),e(wT,XW),e(XW,_mr),e(wT,umr),e(q,bmr),e(q,AT),e(AT,gbe),e(gbe,vmr),e(AT,Fmr),e(AT,zW),e(zW,Tmr),e(AT,Mmr),e(q,Emr),e(q,yT),e(yT,hbe),e(hbe,Cmr),e(yT,wmr),e(yT,WW),e(WW,Amr),e(yT,ymr),e(q,Lmr),e(q,LT),e(LT,pbe),e(pbe,xmr),e(LT,$mr),e(LT,QW),e(QW,kmr),e(LT,Smr),e(q,Rmr),e(q,xT),e(xT,_be),e(_be,Pmr),e(xT,Bmr),e(xT,HW),e(HW,Imr),e(xT,Nmr),e(q,qmr),e(q,$T),e($T,ube),e(ube,jmr),e($T,Dmr),e($T,UW),e(UW,Gmr),e($T,Omr),e(q,Vmr),e(q,kT),e(kT,bbe),e(bbe,Xmr),e(kT,zmr),e(kT,JW),e(JW,Wmr),e(kT,Qmr),e(q,Hmr),e(q,ST),e(ST,vbe),e(vbe,Umr),e(ST,Jmr),e(ST,YW),e(YW,Ymr),e(ST,Kmr),e(q,Zmr),e(q,RT),e(RT,Fbe),e(Fbe,egr),e(RT,ogr),e(RT,KW),e(KW,rgr),e(RT,tgr),e(q,agr),e(q,PT),e(PT,Tbe),e(Tbe,ngr),e(PT,sgr),e(PT,ZW),e(ZW,lgr),e(PT,igr),e(q,dgr),e(q,BT),e(BT,Mbe),e(Mbe,cgr),e(BT,fgr),e(BT,eQ),e(eQ,mgr),e(BT,ggr),e(q,hgr),e(q,IT),e(IT,Ebe),e(Ebe,pgr),e(IT,_gr),e(IT,oQ),e(oQ,ugr),e(IT,bgr),e(q,vgr),e(q,NT),e(NT,Cbe),e(Cbe,Fgr),e(NT,Tgr),e(NT,rQ),e(rQ,Mgr),e(NT,Egr),e(q,Cgr),e(q,qT),e(qT,wbe),e(wbe,wgr),e(qT,Agr),e(qT,tQ),e(tQ,ygr),e(qT,Lgr),e(q,xgr),e(q,jT),e(jT,Abe),e(Abe,$gr),e(jT,kgr),e(jT,aQ),e(aQ,Sgr),e(jT,Rgr),e(q,Pgr),e(q,DT),e(DT,ybe),e(ybe,Bgr),e(DT,Igr),e(DT,nQ),e(nQ,Ngr),e(DT,qgr),e(q,jgr),e(q,GT),e(GT,Lbe),e(Lbe,Dgr),e(GT,Ggr),e(GT,sQ),e(sQ,Ogr),e(GT,Vgr),e(q,Xgr),e(q,OT),e(OT,xbe),e(xbe,zgr),e(OT,Wgr),e(OT,lQ),e(lQ,Qgr),e(OT,Hgr),e(q,Ugr),e(q,VT),e(VT,$be),e($be,Jgr),e(VT,Ygr),e(VT,iQ),e(iQ,Kgr),e(VT,Zgr),e(q,ehr),e(q,XT),e(XT,kbe),e(kbe,ohr),e(XT,rhr),e(XT,dQ),e(dQ,thr),e(XT,ahr),e(q,nhr),e(q,zT),e(zT,Sbe),e(Sbe,shr),e(zT,lhr),e(zT,cQ),e(cQ,ihr),e(zT,dhr),e(q,chr),e(q,WT),e(WT,Rbe),e(Rbe,fhr),e(WT,mhr),e(WT,fQ),e(fQ,ghr),e(WT,hhr),e(q,phr),e(q,QT),e(QT,Pbe),e(Pbe,_hr),e(QT,uhr),e(QT,mQ),e(mQ,bhr),e(QT,vhr),e(q,Fhr),e(q,HT),e(HT,Bbe),e(Bbe,Thr),e(HT,Mhr),e(HT,gQ),e(gQ,Ehr),e(HT,Chr),e(q,whr),e(q,UT),e(UT,Ibe),e(Ibe,Ahr),e(UT,yhr),e(UT,hQ),e(hQ,Lhr),e(UT,xhr),e(q,$hr),e(q,JT),e(JT,Nbe),e(Nbe,khr),e(JT,Shr),e(JT,pQ),e(pQ,Rhr),e(JT,Phr),e(wr,Bhr),M(YT,wr,null),b(f,qje,u),b(f,zd,u),e(zd,KT),e(KT,qbe),M(T8,qbe,null),e(zd,Ihr),e(zd,jbe),e(jbe,Nhr),b(f,jje,u),b(f,Ko,u),M(M8,Ko,null),e(Ko,qhr),e(Ko,Wd),e(Wd,jhr),e(Wd,_Q),e(_Q,Dhr),e(Wd,Ghr),e(Wd,uQ),e(uQ,Ohr),e(Wd,Vhr),e(Ko,Xhr),e(Ko,E8),e(E8,zhr),e(E8,Dbe),e(Dbe,Whr),e(E8,Qhr),e(Ko,Hhr),e(Ko,Lt),M(C8,Lt,null),e(Lt,Uhr),e(Lt,Gbe),e(Gbe,Jhr),e(Lt,Yhr),e(Lt,Qd),e(Qd,Khr),e(Qd,Obe),e(Obe,Zhr),e(Qd,epr),e(Qd,bQ),e(bQ,opr),e(Qd,rpr),e(Lt,tpr),M(ZT,Lt,null),e(Ko,apr),e(Ko,Ar),M(w8,Ar,null),e(Ar,npr),e(Ar,Vbe),e(Vbe,spr),e(Ar,lpr),e(Ar,Za),e(Za,ipr),e(Za,Xbe),e(Xbe,dpr),e(Za,cpr),e(Za,zbe),e(zbe,fpr),e(Za,mpr),e(Za,Wbe),e(Wbe,gpr),e(Za,hpr),e(Ar,ppr),e(Ar,se),e(se,e7),e(e7,Qbe),e(Qbe,_pr),e(e7,upr),e(e7,vQ),e(vQ,bpr),e(e7,vpr),e(se,Fpr),e(se,o7),e(o7,Hbe),e(Hbe,Tpr),e(o7,Mpr),e(o7,FQ),e(FQ,Epr),e(o7,Cpr),e(se,wpr),e(se,r7),e(r7,Ube),e(Ube,Apr),e(r7,ypr),e(r7,TQ),e(TQ,Lpr),e(r7,xpr),e(se,$pr),e(se,t7),e(t7,Jbe),e(Jbe,kpr),e(t7,Spr),e(t7,MQ),e(MQ,Rpr),e(t7,Ppr),e(se,Bpr),e(se,a7),e(a7,Ybe),e(Ybe,Ipr),e(a7,Npr),e(a7,EQ),e(EQ,qpr),e(a7,jpr),e(se,Dpr),e(se,n7),e(n7,Kbe),e(Kbe,Gpr),e(n7,Opr),e(n7,CQ),e(CQ,Vpr),e(n7,Xpr),e(se,zpr),e(se,s7),e(s7,Zbe),e(Zbe,Wpr),e(s7,Qpr),e(s7,wQ),e(wQ,Hpr),e(s7,Upr),e(se,Jpr),e(se,l7),e(l7,e2e),e(e2e,Ypr),e(l7,Kpr),e(l7,AQ),e(AQ,Zpr),e(l7,e_r),e(se,o_r),e(se,i7),e(i7,o2e),e(o2e,r_r),e(i7,t_r),e(i7,yQ),e(yQ,a_r),e(i7,n_r),e(se,s_r),e(se,d7),e(d7,r2e),e(r2e,l_r),e(d7,i_r),e(d7,LQ),e(LQ,d_r),e(d7,c_r),e(se,f_r),e(se,c7),e(c7,t2e),e(t2e,m_r),e(c7,g_r),e(c7,xQ),e(xQ,h_r),e(c7,p_r),e(se,__r),e(se,f7),e(f7,a2e),e(a2e,u_r),e(f7,b_r),e(f7,$Q),e($Q,v_r),e(f7,F_r),e(se,T_r),e(se,m7),e(m7,n2e),e(n2e,M_r),e(m7,E_r),e(m7,kQ),e(kQ,C_r),e(m7,w_r),e(se,A_r),e(se,g7),e(g7,s2e),e(s2e,y_r),e(g7,L_r),e(g7,SQ),e(SQ,x_r),e(g7,$_r),e(se,k_r),e(se,h7),e(h7,l2e),e(l2e,S_r),e(h7,R_r),e(h7,RQ),e(RQ,P_r),e(h7,B_r),e(se,I_r),e(se,p7),e(p7,i2e),e(i2e,N_r),e(p7,q_r),e(p7,PQ),e(PQ,j_r),e(p7,D_r),e(se,G_r),e(se,_7),e(_7,d2e),e(d2e,O_r),e(_7,V_r),e(_7,BQ),e(BQ,X_r),e(_7,z_r),e(se,W_r),e(se,u7),e(u7,c2e),e(c2e,Q_r),e(u7,H_r),e(u7,IQ),e(IQ,U_r),e(u7,J_r),e(se,Y_r),e(se,b7),e(b7,f2e),e(f2e,K_r),e(b7,Z_r),e(b7,NQ),e(NQ,eur),e(b7,our),e(se,rur),e(se,v7),e(v7,m2e),e(m2e,tur),e(v7,aur),e(v7,qQ),e(qQ,nur),e(v7,sur),e(se,lur),e(se,F7),e(F7,g2e),e(g2e,iur),e(F7,dur),e(F7,jQ),e(jQ,cur),e(F7,fur),e(se,mur),e(se,T7),e(T7,h2e),e(h2e,gur),e(T7,hur),e(T7,DQ),e(DQ,pur),e(T7,_ur),e(se,uur),e(se,M7),e(M7,p2e),e(p2e,bur),e(M7,vur),e(M7,GQ),e(GQ,Fur),e(M7,Tur),e(Ar,Mur),M(E7,Ar,null),b(f,Dje,u),b(f,Hd,u),e(Hd,C7),e(C7,_2e),M(A8,_2e,null),e(Hd,Eur),e(Hd,u2e),e(u2e,Cur),b(f,Gje,u),b(f,Zo,u),M(y8,Zo,null),e(Zo,wur),e(Zo,Ud),e(Ud,Aur),e(Ud,OQ),e(OQ,yur),e(Ud,Lur),e(Ud,VQ),e(VQ,xur),e(Ud,$ur),e(Zo,kur),e(Zo,L8),e(L8,Sur),e(L8,b2e),e(b2e,Rur),e(L8,Pur),e(Zo,Bur),e(Zo,xt),M(x8,xt,null),e(xt,Iur),e(xt,v2e),e(v2e,Nur),e(xt,qur),e(xt,Jd),e(Jd,jur),e(Jd,F2e),e(F2e,Dur),e(Jd,Gur),e(Jd,XQ),e(XQ,Our),e(Jd,Vur),e(xt,Xur),M(w7,xt,null),e(Zo,zur),e(Zo,yr),M($8,yr,null),e(yr,Wur),e(yr,T2e),e(T2e,Qur),e(yr,Hur),e(yr,en),e(en,Uur),e(en,M2e),e(M2e,Jur),e(en,Yur),e(en,E2e),e(E2e,Kur),e(en,Zur),e(en,C2e),e(C2e,e4r),e(en,o4r),e(yr,r4r),e(yr,Te),e(Te,A7),e(A7,w2e),e(w2e,t4r),e(A7,a4r),e(A7,zQ),e(zQ,n4r),e(A7,s4r),e(Te,l4r),e(Te,y7),e(y7,A2e),e(A2e,i4r),e(y7,d4r),e(y7,WQ),e(WQ,c4r),e(y7,f4r),e(Te,m4r),e(Te,L7),e(L7,y2e),e(y2e,g4r),e(L7,h4r),e(L7,QQ),e(QQ,p4r),e(L7,_4r),e(Te,u4r),e(Te,x7),e(x7,L2e),e(L2e,b4r),e(x7,v4r),e(x7,HQ),e(HQ,F4r),e(x7,T4r),e(Te,M4r),e(Te,$7),e($7,x2e),e(x2e,E4r),e($7,C4r),e($7,UQ),e(UQ,w4r),e($7,A4r),e(Te,y4r),e(Te,k7),e(k7,$2e),e($2e,L4r),e(k7,x4r),e(k7,JQ),e(JQ,$4r),e(k7,k4r),e(Te,S4r),e(Te,S7),e(S7,k2e),e(k2e,R4r),e(S7,P4r),e(S7,YQ),e(YQ,B4r),e(S7,I4r),e(Te,N4r),e(Te,R7),e(R7,S2e),e(S2e,q4r),e(R7,j4r),e(R7,KQ),e(KQ,D4r),e(R7,G4r),e(Te,O4r),e(Te,P7),e(P7,R2e),e(R2e,V4r),e(P7,X4r),e(P7,ZQ),e(ZQ,z4r),e(P7,W4r),e(Te,Q4r),e(Te,B7),e(B7,P2e),e(P2e,H4r),e(B7,U4r),e(B7,eH),e(eH,J4r),e(B7,Y4r),e(Te,K4r),e(Te,I7),e(I7,B2e),e(B2e,Z4r),e(I7,e1r),e(I7,oH),e(oH,o1r),e(I7,r1r),e(Te,t1r),e(Te,N7),e(N7,I2e),e(I2e,a1r),e(N7,n1r),e(N7,rH),e(rH,s1r),e(N7,l1r),e(Te,i1r),e(Te,q7),e(q7,N2e),e(N2e,d1r),e(q7,c1r),e(q7,tH),e(tH,f1r),e(q7,m1r),e(yr,g1r),M(j7,yr,null),b(f,Oje,u),b(f,Yd,u),e(Yd,D7),e(D7,q2e),M(k8,q2e,null),e(Yd,h1r),e(Yd,j2e),e(j2e,p1r),b(f,Vje,u),b(f,er,u),M(S8,er,null),e(er,_1r),e(er,Kd),e(Kd,u1r),e(Kd,aH),e(aH,b1r),e(Kd,v1r),e(Kd,nH),e(nH,F1r),e(Kd,T1r),e(er,M1r),e(er,R8),e(R8,E1r),e(R8,D2e),e(D2e,C1r),e(R8,w1r),e(er,A1r),e(er,$t),M(P8,$t,null),e($t,y1r),e($t,G2e),e(G2e,L1r),e($t,x1r),e($t,Zd),e(Zd,$1r),e(Zd,O2e),e(O2e,k1r),e(Zd,S1r),e(Zd,sH),e(sH,R1r),e(Zd,P1r),e($t,B1r),M(G7,$t,null),e(er,I1r),e(er,Lr),M(B8,Lr,null),e(Lr,N1r),e(Lr,V2e),e(V2e,q1r),e(Lr,j1r),e(Lr,on),e(on,D1r),e(on,X2e),e(X2e,G1r),e(on,O1r),e(on,z2e),e(z2e,V1r),e(on,X1r),e(on,W2e),e(W2e,z1r),e(on,W1r),e(Lr,Q1r),e(Lr,rn),e(rn,O7),e(O7,Q2e),e(Q2e,H1r),e(O7,U1r),e(O7,lH),e(lH,J1r),e(O7,Y1r),e(rn,K1r),e(rn,V7),e(V7,H2e),e(H2e,Z1r),e(V7,ebr),e(V7,iH),e(iH,obr),e(V7,rbr),e(rn,tbr),e(rn,X7),e(X7,U2e),e(U2e,abr),e(X7,nbr),e(X7,dH),e(dH,sbr),e(X7,lbr),e(rn,ibr),e(rn,z7),e(z7,J2e),e(J2e,dbr),e(z7,cbr),e(z7,cH),e(cH,fbr),e(z7,mbr),e(Lr,gbr),M(W7,Lr,null),b(f,Xje,u),b(f,ec,u),e(ec,Q7),e(Q7,Y2e),M(I8,Y2e,null),e(ec,hbr),e(ec,K2e),e(K2e,pbr),b(f,zje,u),b(f,or,u),M(N8,or,null),e(or,_br),e(or,oc),e(oc,ubr),e(oc,fH),e(fH,bbr),e(oc,vbr),e(oc,mH),e(mH,Fbr),e(oc,Tbr),e(or,Mbr),e(or,q8),e(q8,Ebr),e(q8,Z2e),e(Z2e,Cbr),e(q8,wbr),e(or,Abr),e(or,kt),M(j8,kt,null),e(kt,ybr),e(kt,eve),e(eve,Lbr),e(kt,xbr),e(kt,rc),e(rc,$br),e(rc,ove),e(ove,kbr),e(rc,Sbr),e(rc,gH),e(gH,Rbr),e(rc,Pbr),e(kt,Bbr),M(H7,kt,null),e(or,Ibr),e(or,xr),M(D8,xr,null),e(xr,Nbr),e(xr,rve),e(rve,qbr),e(xr,jbr),e(xr,tn),e(tn,Dbr),e(tn,tve),e(tve,Gbr),e(tn,Obr),e(tn,ave),e(ave,Vbr),e(tn,Xbr),e(tn,nve),e(nve,zbr),e(tn,Wbr),e(xr,Qbr),e(xr,ie),e(ie,U7),e(U7,sve),e(sve,Hbr),e(U7,Ubr),e(U7,hH),e(hH,Jbr),e(U7,Ybr),e(ie,Kbr),e(ie,J7),e(J7,lve),e(lve,Zbr),e(J7,e2r),e(J7,pH),e(pH,o2r),e(J7,r2r),e(ie,t2r),e(ie,Y7),e(Y7,ive),e(ive,a2r),e(Y7,n2r),e(Y7,_H),e(_H,s2r),e(Y7,l2r),e(ie,i2r),e(ie,K7),e(K7,dve),e(dve,d2r),e(K7,c2r),e(K7,uH),e(uH,f2r),e(K7,m2r),e(ie,g2r),e(ie,Z7),e(Z7,cve),e(cve,h2r),e(Z7,p2r),e(Z7,bH),e(bH,_2r),e(Z7,u2r),e(ie,b2r),e(ie,eM),e(eM,fve),e(fve,v2r),e(eM,F2r),e(eM,vH),e(vH,T2r),e(eM,M2r),e(ie,E2r),e(ie,oM),e(oM,mve),e(mve,C2r),e(oM,w2r),e(oM,FH),e(FH,A2r),e(oM,y2r),e(ie,L2r),e(ie,rM),e(rM,gve),e(gve,x2r),e(rM,$2r),e(rM,TH),e(TH,k2r),e(rM,S2r),e(ie,R2r),e(ie,tM),e(tM,hve),e(hve,P2r),e(tM,B2r),e(tM,MH),e(MH,I2r),e(tM,N2r),e(ie,q2r),e(ie,aM),e(aM,pve),e(pve,j2r),e(aM,D2r),e(aM,EH),e(EH,G2r),e(aM,O2r),e(ie,V2r),e(ie,nM),e(nM,_ve),e(_ve,X2r),e(nM,z2r),e(nM,CH),e(CH,W2r),e(nM,Q2r),e(ie,H2r),e(ie,sM),e(sM,uve),e(uve,U2r),e(sM,J2r),e(sM,wH),e(wH,Y2r),e(sM,K2r),e(ie,Z2r),e(ie,lM),e(lM,bve),e(bve,evr),e(lM,ovr),e(lM,AH),e(AH,rvr),e(lM,tvr),e(ie,avr),e(ie,iM),e(iM,vve),e(vve,nvr),e(iM,svr),e(iM,yH),e(yH,lvr),e(iM,ivr),e(ie,dvr),e(ie,dM),e(dM,Fve),e(Fve,cvr),e(dM,fvr),e(dM,LH),e(LH,mvr),e(dM,gvr),e(ie,hvr),e(ie,cM),e(cM,Tve),e(Tve,pvr),e(cM,_vr),e(cM,xH),e(xH,uvr),e(cM,bvr),e(ie,vvr),e(ie,fM),e(fM,Mve),e(Mve,Fvr),e(fM,Tvr),e(fM,$H),e($H,Mvr),e(fM,Evr),e(ie,Cvr),e(ie,mM),e(mM,Eve),e(Eve,wvr),e(mM,Avr),e(mM,kH),e(kH,yvr),e(mM,Lvr),e(ie,xvr),e(ie,gM),e(gM,Cve),e(Cve,$vr),e(gM,kvr),e(gM,SH),e(SH,Svr),e(gM,Rvr),e(ie,Pvr),e(ie,hM),e(hM,wve),e(wve,Bvr),e(hM,Ivr),e(hM,RH),e(RH,Nvr),e(hM,qvr),e(xr,jvr),M(pM,xr,null),b(f,Wje,u),b(f,tc,u),e(tc,_M),e(_M,Ave),M(G8,Ave,null),e(tc,Dvr),e(tc,yve),e(yve,Gvr),b(f,Qje,u),b(f,rr,u),M(O8,rr,null),e(rr,Ovr),e(rr,ac),e(ac,Vvr),e(ac,PH),e(PH,Xvr),e(ac,zvr),e(ac,BH),e(BH,Wvr),e(ac,Qvr),e(rr,Hvr),e(rr,V8),e(V8,Uvr),e(V8,Lve),e(Lve,Jvr),e(V8,Yvr),e(rr,Kvr),e(rr,St),M(X8,St,null),e(St,Zvr),e(St,xve),e(xve,e3r),e(St,o3r),e(St,nc),e(nc,r3r),e(nc,$ve),e($ve,t3r),e(nc,a3r),e(nc,IH),e(IH,n3r),e(nc,s3r),e(St,l3r),M(uM,St,null),e(rr,i3r),e(rr,$r),M(z8,$r,null),e($r,d3r),e($r,kve),e(kve,c3r),e($r,f3r),e($r,an),e(an,m3r),e(an,Sve),e(Sve,g3r),e(an,h3r),e(an,Rve),e(Rve,p3r),e(an,_3r),e(an,Pve),e(Pve,u3r),e(an,b3r),e($r,v3r),e($r,ye),e(ye,bM),e(bM,Bve),e(Bve,F3r),e(bM,T3r),e(bM,NH),e(NH,M3r),e(bM,E3r),e(ye,C3r),e(ye,vM),e(vM,Ive),e(Ive,w3r),e(vM,A3r),e(vM,qH),e(qH,y3r),e(vM,L3r),e(ye,x3r),e(ye,FM),e(FM,Nve),e(Nve,$3r),e(FM,k3r),e(FM,jH),e(jH,S3r),e(FM,R3r),e(ye,P3r),e(ye,TM),e(TM,qve),e(qve,B3r),e(TM,I3r),e(TM,DH),e(DH,N3r),e(TM,q3r),e(ye,j3r),e(ye,MM),e(MM,jve),e(jve,D3r),e(MM,G3r),e(MM,GH),e(GH,O3r),e(MM,V3r),e(ye,X3r),e(ye,EM),e(EM,Dve),e(Dve,z3r),e(EM,W3r),e(EM,OH),e(OH,Q3r),e(EM,H3r),e(ye,U3r),e(ye,CM),e(CM,Gve),e(Gve,J3r),e(CM,Y3r),e(CM,VH),e(VH,K3r),e(CM,Z3r),e(ye,eFr),e(ye,wM),e(wM,Ove),e(Ove,oFr),e(wM,rFr),e(wM,XH),e(XH,tFr),e(wM,aFr),e(ye,nFr),e(ye,AM),e(AM,Vve),e(Vve,sFr),e(AM,lFr),e(AM,zH),e(zH,iFr),e(AM,dFr),e(ye,cFr),e(ye,yM),e(yM,Xve),e(Xve,fFr),e(yM,mFr),e(yM,WH),e(WH,gFr),e(yM,hFr),e($r,pFr),M(LM,$r,null),b(f,Hje,u),b(f,sc,u),e(sc,xM),e(xM,zve),M(W8,zve,null),e(sc,_Fr),e(sc,Wve),e(Wve,uFr),b(f,Uje,u),b(f,tr,u),M(Q8,tr,null),e(tr,bFr),e(tr,lc),e(lc,vFr),e(lc,QH),e(QH,FFr),e(lc,TFr),e(lc,HH),e(HH,MFr),e(lc,EFr),e(tr,CFr),e(tr,H8),e(H8,wFr),e(H8,Qve),e(Qve,AFr),e(H8,yFr),e(tr,LFr),e(tr,Rt),M(U8,Rt,null),e(Rt,xFr),e(Rt,Hve),e(Hve,$Fr),e(Rt,kFr),e(Rt,ic),e(ic,SFr),e(ic,Uve),e(Uve,RFr),e(ic,PFr),e(ic,UH),e(UH,BFr),e(ic,IFr),e(Rt,NFr),M($M,Rt,null),e(tr,qFr),e(tr,kr),M(J8,kr,null),e(kr,jFr),e(kr,Jve),e(Jve,DFr),e(kr,GFr),e(kr,nn),e(nn,OFr),e(nn,Yve),e(Yve,VFr),e(nn,XFr),e(nn,Kve),e(Kve,zFr),e(nn,WFr),e(nn,Zve),e(Zve,QFr),e(nn,HFr),e(kr,UFr),e(kr,oe),e(oe,kM),e(kM,e3e),e(e3e,JFr),e(kM,YFr),e(kM,JH),e(JH,KFr),e(kM,ZFr),e(oe,eTr),e(oe,SM),e(SM,o3e),e(o3e,oTr),e(SM,rTr),e(SM,YH),e(YH,tTr),e(SM,aTr),e(oe,nTr),e(oe,RM),e(RM,r3e),e(r3e,sTr),e(RM,lTr),e(RM,KH),e(KH,iTr),e(RM,dTr),e(oe,cTr),e(oe,PM),e(PM,t3e),e(t3e,fTr),e(PM,mTr),e(PM,ZH),e(ZH,gTr),e(PM,hTr),e(oe,pTr),e(oe,BM),e(BM,a3e),e(a3e,_Tr),e(BM,uTr),e(BM,eU),e(eU,bTr),e(BM,vTr),e(oe,FTr),e(oe,IM),e(IM,n3e),e(n3e,TTr),e(IM,MTr),e(IM,oU),e(oU,ETr),e(IM,CTr),e(oe,wTr),e(oe,NM),e(NM,s3e),e(s3e,ATr),e(NM,yTr),e(NM,rU),e(rU,LTr),e(NM,xTr),e(oe,$Tr),e(oe,qM),e(qM,l3e),e(l3e,kTr),e(qM,STr),e(qM,tU),e(tU,RTr),e(qM,PTr),e(oe,BTr),e(oe,jM),e(jM,i3e),e(i3e,ITr),e(jM,NTr),e(jM,aU),e(aU,qTr),e(jM,jTr),e(oe,DTr),e(oe,DM),e(DM,d3e),e(d3e,GTr),e(DM,OTr),e(DM,nU),e(nU,VTr),e(DM,XTr),e(oe,zTr),e(oe,GM),e(GM,c3e),e(c3e,WTr),e(GM,QTr),e(GM,sU),e(sU,HTr),e(GM,UTr),e(oe,JTr),e(oe,OM),e(OM,f3e),e(f3e,YTr),e(OM,KTr),e(OM,lU),e(lU,ZTr),e(OM,e7r),e(oe,o7r),e(oe,VM),e(VM,m3e),e(m3e,r7r),e(VM,t7r),e(VM,iU),e(iU,a7r),e(VM,n7r),e(oe,s7r),e(oe,XM),e(XM,g3e),e(g3e,l7r),e(XM,i7r),e(XM,dU),e(dU,d7r),e(XM,c7r),e(oe,f7r),e(oe,zM),e(zM,h3e),e(h3e,m7r),e(zM,g7r),e(zM,cU),e(cU,h7r),e(zM,p7r),e(oe,_7r),e(oe,WM),e(WM,p3e),e(p3e,u7r),e(WM,b7r),e(WM,fU),e(fU,v7r),e(WM,F7r),e(oe,T7r),e(oe,QM),e(QM,_3e),e(_3e,M7r),e(QM,E7r),e(QM,mU),e(mU,C7r),e(QM,w7r),e(oe,A7r),e(oe,HM),e(HM,u3e),e(u3e,y7r),e(HM,L7r),e(HM,gU),e(gU,x7r),e(HM,$7r),e(oe,k7r),e(oe,UM),e(UM,b3e),e(b3e,S7r),e(UM,R7r),e(UM,hU),e(hU,P7r),e(UM,B7r),e(oe,I7r),e(oe,JM),e(JM,v3e),e(v3e,N7r),e(JM,q7r),e(JM,pU),e(pU,j7r),e(JM,D7r),e(oe,G7r),e(oe,YM),e(YM,F3e),e(F3e,O7r),e(YM,V7r),e(YM,_U),e(_U,X7r),e(YM,z7r),e(oe,W7r),e(oe,KM),e(KM,T3e),e(T3e,Q7r),e(KM,H7r),e(KM,uU),e(uU,U7r),e(KM,J7r),e(oe,Y7r),e(oe,ZM),e(ZM,M3e),e(M3e,K7r),e(ZM,Z7r),e(ZM,bU),e(bU,eMr),e(ZM,oMr),e(oe,rMr),e(oe,eE),e(eE,E3e),e(E3e,tMr),e(eE,aMr),e(eE,vU),e(vU,nMr),e(eE,sMr),e(oe,lMr),e(oe,oE),e(oE,C3e),e(C3e,iMr),e(oE,dMr),e(oE,FU),e(FU,cMr),e(oE,fMr),e(oe,mMr),e(oe,rE),e(rE,w3e),e(w3e,gMr),e(rE,hMr),e(rE,TU),e(TU,pMr),e(rE,_Mr),e(kr,uMr),M(tE,kr,null),b(f,Jje,u),b(f,dc,u),e(dc,aE),e(aE,A3e),M(Y8,A3e,null),e(dc,bMr),e(dc,y3e),e(y3e,vMr),b(f,Yje,u),b(f,ar,u),M(K8,ar,null),e(ar,FMr),e(ar,cc),e(cc,TMr),e(cc,MU),e(MU,MMr),e(cc,EMr),e(cc,EU),e(EU,CMr),e(cc,wMr),e(ar,AMr),e(ar,Z8),e(Z8,yMr),e(Z8,L3e),e(L3e,LMr),e(Z8,xMr),e(ar,$Mr),e(ar,Pt),M(e9,Pt,null),e(Pt,kMr),e(Pt,x3e),e(x3e,SMr),e(Pt,RMr),e(Pt,fc),e(fc,PMr),e(fc,$3e),e($3e,BMr),e(fc,IMr),e(fc,CU),e(CU,NMr),e(fc,qMr),e(Pt,jMr),M(nE,Pt,null),e(ar,DMr),e(ar,Sr),M(o9,Sr,null),e(Sr,GMr),e(Sr,k3e),e(k3e,OMr),e(Sr,VMr),e(Sr,sn),e(sn,XMr),e(sn,S3e),e(S3e,zMr),e(sn,WMr),e(sn,R3e),e(R3e,QMr),e(sn,HMr),e(sn,P3e),e(P3e,UMr),e(sn,JMr),e(Sr,YMr),e(Sr,pe),e(pe,sE),e(sE,B3e),e(B3e,KMr),e(sE,ZMr),e(sE,wU),e(wU,eEr),e(sE,oEr),e(pe,rEr),e(pe,lE),e(lE,I3e),e(I3e,tEr),e(lE,aEr),e(lE,AU),e(AU,nEr),e(lE,sEr),e(pe,lEr),e(pe,iE),e(iE,N3e),e(N3e,iEr),e(iE,dEr),e(iE,yU),e(yU,cEr),e(iE,fEr),e(pe,mEr),e(pe,dE),e(dE,q3e),e(q3e,gEr),e(dE,hEr),e(dE,LU),e(LU,pEr),e(dE,_Er),e(pe,uEr),e(pe,cE),e(cE,j3e),e(j3e,bEr),e(cE,vEr),e(cE,xU),e(xU,FEr),e(cE,TEr),e(pe,MEr),e(pe,fE),e(fE,D3e),e(D3e,EEr),e(fE,CEr),e(fE,$U),e($U,wEr),e(fE,AEr),e(pe,yEr),e(pe,mE),e(mE,G3e),e(G3e,LEr),e(mE,xEr),e(mE,kU),e(kU,$Er),e(mE,kEr),e(pe,SEr),e(pe,gE),e(gE,O3e),e(O3e,REr),e(gE,PEr),e(gE,SU),e(SU,BEr),e(gE,IEr),e(pe,NEr),e(pe,hE),e(hE,V3e),e(V3e,qEr),e(hE,jEr),e(hE,RU),e(RU,DEr),e(hE,GEr),e(pe,OEr),e(pe,pE),e(pE,X3e),e(X3e,VEr),e(pE,XEr),e(pE,PU),e(PU,zEr),e(pE,WEr),e(pe,QEr),e(pe,_E),e(_E,z3e),e(z3e,HEr),e(_E,UEr),e(_E,BU),e(BU,JEr),e(_E,YEr),e(pe,KEr),e(pe,uE),e(uE,W3e),e(W3e,ZEr),e(uE,eCr),e(uE,IU),e(IU,oCr),e(uE,rCr),e(pe,tCr),e(pe,bE),e(bE,Q3e),e(Q3e,aCr),e(bE,nCr),e(bE,NU),e(NU,sCr),e(bE,lCr),e(pe,iCr),e(pe,vE),e(vE,H3e),e(H3e,dCr),e(vE,cCr),e(vE,qU),e(qU,fCr),e(vE,mCr),e(pe,gCr),e(pe,FE),e(FE,U3e),e(U3e,hCr),e(FE,pCr),e(FE,jU),e(jU,_Cr),e(FE,uCr),e(pe,bCr),e(pe,TE),e(TE,J3e),e(J3e,vCr),e(TE,FCr),e(TE,DU),e(DU,TCr),e(TE,MCr),e(pe,ECr),e(pe,ME),e(ME,Y3e),e(Y3e,CCr),e(ME,wCr),e(ME,GU),e(GU,ACr),e(ME,yCr),e(Sr,LCr),M(EE,Sr,null),b(f,Kje,u),b(f,mc,u),e(mc,CE),e(CE,K3e),M(r9,K3e,null),e(mc,xCr),e(mc,Z3e),e(Z3e,$Cr),b(f,Zje,u),b(f,nr,u),M(t9,nr,null),e(nr,kCr),e(nr,gc),e(gc,SCr),e(gc,OU),e(OU,RCr),e(gc,PCr),e(gc,VU),e(VU,BCr),e(gc,ICr),e(nr,NCr),e(nr,a9),e(a9,qCr),e(a9,eFe),e(eFe,jCr),e(a9,DCr),e(nr,GCr),e(nr,Bt),M(n9,Bt,null),e(Bt,OCr),e(Bt,oFe),e(oFe,VCr),e(Bt,XCr),e(Bt,hc),e(hc,zCr),e(hc,rFe),e(rFe,WCr),e(hc,QCr),e(hc,XU),e(XU,HCr),e(hc,UCr),e(Bt,JCr),M(wE,Bt,null),e(nr,YCr),e(nr,Rr),M(s9,Rr,null),e(Rr,KCr),e(Rr,tFe),e(tFe,ZCr),e(Rr,e5r),e(Rr,ln),e(ln,o5r),e(ln,aFe),e(aFe,r5r),e(ln,t5r),e(ln,nFe),e(nFe,a5r),e(ln,n5r),e(ln,sFe),e(sFe,s5r),e(ln,l5r),e(Rr,i5r),e(Rr,l9),e(l9,AE),e(AE,lFe),e(lFe,d5r),e(AE,c5r),e(AE,zU),e(zU,f5r),e(AE,m5r),e(l9,g5r),e(l9,yE),e(yE,iFe),e(iFe,h5r),e(yE,p5r),e(yE,WU),e(WU,_5r),e(yE,u5r),e(Rr,b5r),M(LE,Rr,null),b(f,eDe,u),b(f,pc,u),e(pc,xE),e(xE,dFe),M(i9,dFe,null),e(pc,v5r),e(pc,cFe),e(cFe,F5r),b(f,oDe,u),b(f,sr,u),M(d9,sr,null),e(sr,T5r),e(sr,_c),e(_c,M5r),e(_c,QU),e(QU,E5r),e(_c,C5r),e(_c,HU),e(HU,w5r),e(_c,A5r),e(sr,y5r),e(sr,c9),e(c9,L5r),e(c9,fFe),e(fFe,x5r),e(c9,$5r),e(sr,k5r),e(sr,It),M(f9,It,null),e(It,S5r),e(It,mFe),e(mFe,R5r),e(It,P5r),e(It,uc),e(uc,B5r),e(uc,gFe),e(gFe,I5r),e(uc,N5r),e(uc,UU),e(UU,q5r),e(uc,j5r),e(It,D5r),M($E,It,null),e(sr,G5r),e(sr,Pr),M(m9,Pr,null),e(Pr,O5r),e(Pr,hFe),e(hFe,V5r),e(Pr,X5r),e(Pr,dn),e(dn,z5r),e(dn,pFe),e(pFe,W5r),e(dn,Q5r),e(dn,_Fe),e(_Fe,H5r),e(dn,U5r),e(dn,uFe),e(uFe,J5r),e(dn,Y5r),e(Pr,K5r),e(Pr,bFe),e(bFe,kE),e(kE,vFe),e(vFe,Z5r),e(kE,e0r),e(kE,JU),e(JU,o0r),e(kE,r0r),e(Pr,t0r),M(SE,Pr,null),b(f,rDe,u),b(f,bc,u),e(bc,RE),e(RE,FFe),M(g9,FFe,null),e(bc,a0r),e(bc,TFe),e(TFe,n0r),b(f,tDe,u),b(f,lr,u),M(h9,lr,null),e(lr,s0r),e(lr,vc),e(vc,l0r),e(vc,YU),e(YU,i0r),e(vc,d0r),e(vc,KU),e(KU,c0r),e(vc,f0r),e(lr,m0r),e(lr,p9),e(p9,g0r),e(p9,MFe),e(MFe,h0r),e(p9,p0r),e(lr,_0r),e(lr,Nt),M(_9,Nt,null),e(Nt,u0r),e(Nt,EFe),e(EFe,b0r),e(Nt,v0r),e(Nt,Fc),e(Fc,F0r),e(Fc,CFe),e(CFe,T0r),e(Fc,M0r),e(Fc,ZU),e(ZU,E0r),e(Fc,C0r),e(Nt,w0r),M(PE,Nt,null),e(lr,A0r),e(lr,Br),M(u9,Br,null),e(Br,y0r),e(Br,wFe),e(wFe,L0r),e(Br,x0r),e(Br,cn),e(cn,$0r),e(cn,AFe),e(AFe,k0r),e(cn,S0r),e(cn,yFe),e(yFe,R0r),e(cn,P0r),e(cn,LFe),e(LFe,B0r),e(cn,I0r),e(Br,N0r),e(Br,de),e(de,BE),e(BE,xFe),e(xFe,q0r),e(BE,j0r),e(BE,eJ),e(eJ,D0r),e(BE,G0r),e(de,O0r),e(de,IE),e(IE,$Fe),e($Fe,V0r),e(IE,X0r),e(IE,oJ),e(oJ,z0r),e(IE,W0r),e(de,Q0r),e(de,NE),e(NE,kFe),e(kFe,H0r),e(NE,U0r),e(NE,rJ),e(rJ,J0r),e(NE,Y0r),e(de,K0r),e(de,qE),e(qE,SFe),e(SFe,Z0r),e(qE,ewr),e(qE,tJ),e(tJ,owr),e(qE,rwr),e(de,twr),e(de,jE),e(jE,RFe),e(RFe,awr),e(jE,nwr),e(jE,aJ),e(aJ,swr),e(jE,lwr),e(de,iwr),e(de,DE),e(DE,PFe),e(PFe,dwr),e(DE,cwr),e(DE,nJ),e(nJ,fwr),e(DE,mwr),e(de,gwr),e(de,GE),e(GE,BFe),e(BFe,hwr),e(GE,pwr),e(GE,sJ),e(sJ,_wr),e(GE,uwr),e(de,bwr),e(de,OE),e(OE,IFe),e(IFe,vwr),e(OE,Fwr),e(OE,lJ),e(lJ,Twr),e(OE,Mwr),e(de,Ewr),e(de,VE),e(VE,NFe),e(NFe,Cwr),e(VE,wwr),e(VE,iJ),e(iJ,Awr),e(VE,ywr),e(de,Lwr),e(de,XE),e(XE,qFe),e(qFe,xwr),e(XE,$wr),e(XE,dJ),e(dJ,kwr),e(XE,Swr),e(de,Rwr),e(de,zE),e(zE,jFe),e(jFe,Pwr),e(zE,Bwr),e(zE,cJ),e(cJ,Iwr),e(zE,Nwr),e(de,qwr),e(de,WE),e(WE,DFe),e(DFe,jwr),e(WE,Dwr),e(WE,fJ),e(fJ,Gwr),e(WE,Owr),e(de,Vwr),e(de,QE),e(QE,GFe),e(GFe,Xwr),e(QE,zwr),e(QE,mJ),e(mJ,Wwr),e(QE,Qwr),e(de,Hwr),e(de,HE),e(HE,OFe),e(OFe,Uwr),e(HE,Jwr),e(HE,gJ),e(gJ,Ywr),e(HE,Kwr),e(de,Zwr),e(de,UE),e(UE,VFe),e(VFe,e6r),e(UE,o6r),e(UE,hJ),e(hJ,r6r),e(UE,t6r),e(de,a6r),e(de,JE),e(JE,XFe),e(XFe,n6r),e(JE,s6r),e(JE,pJ),e(pJ,l6r),e(JE,i6r),e(de,d6r),e(de,YE),e(YE,zFe),e(zFe,c6r),e(YE,f6r),e(YE,_J),e(_J,m6r),e(YE,g6r),e(de,h6r),e(de,KE),e(KE,WFe),e(WFe,p6r),e(KE,_6r),e(KE,uJ),e(uJ,u6r),e(KE,b6r),e(de,v6r),e(de,ZE),e(ZE,QFe),e(QFe,F6r),e(ZE,T6r),e(ZE,bJ),e(bJ,M6r),e(ZE,E6r),e(de,C6r),e(de,eC),e(eC,HFe),e(HFe,w6r),e(eC,A6r),e(eC,vJ),e(vJ,y6r),e(eC,L6r),e(Br,x6r),M(oC,Br,null),b(f,aDe,u),b(f,Tc,u),e(Tc,rC),e(rC,UFe),M(b9,UFe,null),e(Tc,$6r),e(Tc,JFe),e(JFe,k6r),b(f,nDe,u),b(f,ir,u),M(v9,ir,null),e(ir,S6r),e(ir,Mc),e(Mc,R6r),e(Mc,FJ),e(FJ,P6r),e(Mc,B6r),e(Mc,TJ),e(TJ,I6r),e(Mc,N6r),e(ir,q6r),e(ir,F9),e(F9,j6r),e(F9,YFe),e(YFe,D6r),e(F9,G6r),e(ir,O6r),e(ir,qt),M(T9,qt,null),e(qt,V6r),e(qt,KFe),e(KFe,X6r),e(qt,z6r),e(qt,Ec),e(Ec,W6r),e(Ec,ZFe),e(ZFe,Q6r),e(Ec,H6r),e(Ec,MJ),e(MJ,U6r),e(Ec,J6r),e(qt,Y6r),M(tC,qt,null),e(ir,K6r),e(ir,Ir),M(M9,Ir,null),e(Ir,Z6r),e(Ir,eTe),e(eTe,eAr),e(Ir,oAr),e(Ir,fn),e(fn,rAr),e(fn,oTe),e(oTe,tAr),e(fn,aAr),e(fn,rTe),e(rTe,nAr),e(fn,sAr),e(fn,tTe),e(tTe,lAr),e(fn,iAr),e(Ir,dAr),e(Ir,ce),e(ce,aC),e(aC,aTe),e(aTe,cAr),e(aC,fAr),e(aC,EJ),e(EJ,mAr),e(aC,gAr),e(ce,hAr),e(ce,nC),e(nC,nTe),e(nTe,pAr),e(nC,_Ar),e(nC,CJ),e(CJ,uAr),e(nC,bAr),e(ce,vAr),e(ce,sC),e(sC,sTe),e(sTe,FAr),e(sC,TAr),e(sC,wJ),e(wJ,MAr),e(sC,EAr),e(ce,CAr),e(ce,lC),e(lC,lTe),e(lTe,wAr),e(lC,AAr),e(lC,AJ),e(AJ,yAr),e(lC,LAr),e(ce,xAr),e(ce,iC),e(iC,iTe),e(iTe,$Ar),e(iC,kAr),e(iC,yJ),e(yJ,SAr),e(iC,RAr),e(ce,PAr),e(ce,dC),e(dC,dTe),e(dTe,BAr),e(dC,IAr),e(dC,LJ),e(LJ,NAr),e(dC,qAr),e(ce,jAr),e(ce,cC),e(cC,cTe),e(cTe,DAr),e(cC,GAr),e(cC,xJ),e(xJ,OAr),e(cC,VAr),e(ce,XAr),e(ce,fC),e(fC,fTe),e(fTe,zAr),e(fC,WAr),e(fC,$J),e($J,QAr),e(fC,HAr),e(ce,UAr),e(ce,mC),e(mC,mTe),e(mTe,JAr),e(mC,YAr),e(mC,kJ),e(kJ,KAr),e(mC,ZAr),e(ce,eyr),e(ce,gC),e(gC,gTe),e(gTe,oyr),e(gC,ryr),e(gC,SJ),e(SJ,tyr),e(gC,ayr),e(ce,nyr),e(ce,hC),e(hC,hTe),e(hTe,syr),e(hC,lyr),e(hC,RJ),e(RJ,iyr),e(hC,dyr),e(ce,cyr),e(ce,pC),e(pC,pTe),e(pTe,fyr),e(pC,myr),e(pC,PJ),e(PJ,gyr),e(pC,hyr),e(ce,pyr),e(ce,_C),e(_C,_Te),e(_Te,_yr),e(_C,uyr),e(_C,BJ),e(BJ,byr),e(_C,vyr),e(ce,Fyr),e(ce,uC),e(uC,uTe),e(uTe,Tyr),e(uC,Myr),e(uC,IJ),e(IJ,Eyr),e(uC,Cyr),e(ce,wyr),e(ce,bC),e(bC,bTe),e(bTe,Ayr),e(bC,yyr),e(bC,NJ),e(NJ,Lyr),e(bC,xyr),e(ce,$yr),e(ce,vC),e(vC,vTe),e(vTe,kyr),e(vC,Syr),e(vC,qJ),e(qJ,Ryr),e(vC,Pyr),e(ce,Byr),e(ce,FC),e(FC,FTe),e(FTe,Iyr),e(FC,Nyr),e(FC,jJ),e(jJ,qyr),e(FC,jyr),e(ce,Dyr),e(ce,TC),e(TC,TTe),e(TTe,Gyr),e(TC,Oyr),e(TC,DJ),e(DJ,Vyr),e(TC,Xyr),e(ce,zyr),e(ce,MC),e(MC,MTe),e(MTe,Wyr),e(MC,Qyr),e(MC,GJ),e(GJ,Hyr),e(MC,Uyr),e(ce,Jyr),e(ce,EC),e(EC,ETe),e(ETe,Yyr),e(EC,Kyr),e(EC,OJ),e(OJ,Zyr),e(EC,eLr),e(Ir,oLr),M(CC,Ir,null),b(f,sDe,u),b(f,Cc,u),e(Cc,wC),e(wC,CTe),M(E9,CTe,null),e(Cc,rLr),e(Cc,wTe),e(wTe,tLr),b(f,lDe,u),b(f,dr,u),M(C9,dr,null),e(dr,aLr),e(dr,wc),e(wc,nLr),e(wc,VJ),e(VJ,sLr),e(wc,lLr),e(wc,XJ),e(XJ,iLr),e(wc,dLr),e(dr,cLr),e(dr,w9),e(w9,fLr),e(w9,ATe),e(ATe,mLr),e(w9,gLr),e(dr,hLr),e(dr,jt),M(A9,jt,null),e(jt,pLr),e(jt,yTe),e(yTe,_Lr),e(jt,uLr),e(jt,Ac),e(Ac,bLr),e(Ac,LTe),e(LTe,vLr),e(Ac,FLr),e(Ac,zJ),e(zJ,TLr),e(Ac,MLr),e(jt,ELr),M(AC,jt,null),e(dr,CLr),e(dr,Nr),M(y9,Nr,null),e(Nr,wLr),e(Nr,xTe),e(xTe,ALr),e(Nr,yLr),e(Nr,mn),e(mn,LLr),e(mn,$Te),e($Te,xLr),e(mn,$Lr),e(mn,kTe),e(kTe,kLr),e(mn,SLr),e(mn,STe),e(STe,RLr),e(mn,PLr),e(Nr,BLr),e(Nr,RTe),e(RTe,yC),e(yC,PTe),e(PTe,ILr),e(yC,NLr),e(yC,WJ),e(WJ,qLr),e(yC,jLr),e(Nr,DLr),M(LC,Nr,null),b(f,iDe,u),b(f,yc,u),e(yc,xC),e(xC,BTe),M(L9,BTe,null),e(yc,GLr),e(yc,ITe),e(ITe,OLr),b(f,dDe,u),b(f,cr,u),M(x9,cr,null),e(cr,VLr),e(cr,Lc),e(Lc,XLr),e(Lc,QJ),e(QJ,zLr),e(Lc,WLr),e(Lc,HJ),e(HJ,QLr),e(Lc,HLr),e(cr,ULr),e(cr,$9),e($9,JLr),e($9,NTe),e(NTe,YLr),e($9,KLr),e(cr,ZLr),e(cr,Dt),M(k9,Dt,null),e(Dt,e8r),e(Dt,qTe),e(qTe,o8r),e(Dt,r8r),e(Dt,xc),e(xc,t8r),e(xc,jTe),e(jTe,a8r),e(xc,n8r),e(xc,UJ),e(UJ,s8r),e(xc,l8r),e(Dt,i8r),M($C,Dt,null),e(cr,d8r),e(cr,qr),M(S9,qr,null),e(qr,c8r),e(qr,DTe),e(DTe,f8r),e(qr,m8r),e(qr,gn),e(gn,g8r),e(gn,GTe),e(GTe,h8r),e(gn,p8r),e(gn,OTe),e(OTe,_8r),e(gn,u8r),e(gn,VTe),e(VTe,b8r),e(gn,v8r),e(qr,F8r),e(qr,XTe),e(XTe,kC),e(kC,zTe),e(zTe,T8r),e(kC,M8r),e(kC,JJ),e(JJ,E8r),e(kC,C8r),e(qr,w8r),M(SC,qr,null),b(f,cDe,u),b(f,$c,u),e($c,RC),e(RC,WTe),M(R9,WTe,null),e($c,A8r),e($c,QTe),e(QTe,y8r),b(f,fDe,u),b(f,fr,u),M(P9,fr,null),e(fr,L8r),e(fr,kc),e(kc,x8r),e(kc,YJ),e(YJ,$8r),e(kc,k8r),e(kc,KJ),e(KJ,S8r),e(kc,R8r),e(fr,P8r),e(fr,B9),e(B9,B8r),e(B9,HTe),e(HTe,I8r),e(B9,N8r),e(fr,q8r),e(fr,Gt),M(I9,Gt,null),e(Gt,j8r),e(Gt,UTe),e(UTe,D8r),e(Gt,G8r),e(Gt,Sc),e(Sc,O8r),e(Sc,JTe),e(JTe,V8r),e(Sc,X8r),e(Sc,ZJ),e(ZJ,z8r),e(Sc,W8r),e(Gt,Q8r),M(PC,Gt,null),e(fr,H8r),e(fr,jr),M(N9,jr,null),e(jr,U8r),e(jr,YTe),e(YTe,J8r),e(jr,Y8r),e(jr,hn),e(hn,K8r),e(hn,KTe),e(KTe,Z8r),e(hn,e9r),e(hn,ZTe),e(ZTe,o9r),e(hn,r9r),e(hn,e7e),e(e7e,t9r),e(hn,a9r),e(jr,n9r),e(jr,re),e(re,BC),e(BC,o7e),e(o7e,s9r),e(BC,l9r),e(BC,eY),e(eY,i9r),e(BC,d9r),e(re,c9r),e(re,IC),e(IC,r7e),e(r7e,f9r),e(IC,m9r),e(IC,oY),e(oY,g9r),e(IC,h9r),e(re,p9r),e(re,NC),e(NC,t7e),e(t7e,_9r),e(NC,u9r),e(NC,rY),e(rY,b9r),e(NC,v9r),e(re,F9r),e(re,qC),e(qC,a7e),e(a7e,T9r),e(qC,M9r),e(qC,tY),e(tY,E9r),e(qC,C9r),e(re,w9r),e(re,jC),e(jC,n7e),e(n7e,A9r),e(jC,y9r),e(jC,aY),e(aY,L9r),e(jC,x9r),e(re,$9r),e(re,DC),e(DC,s7e),e(s7e,k9r),e(DC,S9r),e(DC,nY),e(nY,R9r),e(DC,P9r),e(re,B9r),e(re,GC),e(GC,l7e),e(l7e,I9r),e(GC,N9r),e(GC,sY),e(sY,q9r),e(GC,j9r),e(re,D9r),e(re,OC),e(OC,i7e),e(i7e,G9r),e(OC,O9r),e(OC,lY),e(lY,V9r),e(OC,X9r),e(re,z9r),e(re,VC),e(VC,d7e),e(d7e,W9r),e(VC,Q9r),e(VC,iY),e(iY,H9r),e(VC,U9r),e(re,J9r),e(re,XC),e(XC,c7e),e(c7e,Y9r),e(XC,K9r),e(XC,dY),e(dY,Z9r),e(XC,exr),e(re,oxr),e(re,zC),e(zC,f7e),e(f7e,rxr),e(zC,txr),e(zC,cY),e(cY,axr),e(zC,nxr),e(re,sxr),e(re,WC),e(WC,m7e),e(m7e,lxr),e(WC,ixr),e(WC,fY),e(fY,dxr),e(WC,cxr),e(re,fxr),e(re,QC),e(QC,g7e),e(g7e,mxr),e(QC,gxr),e(QC,mY),e(mY,hxr),e(QC,pxr),e(re,_xr),e(re,HC),e(HC,h7e),e(h7e,uxr),e(HC,bxr),e(HC,gY),e(gY,vxr),e(HC,Fxr),e(re,Txr),e(re,UC),e(UC,p7e),e(p7e,Mxr),e(UC,Exr),e(UC,hY),e(hY,Cxr),e(UC,wxr),e(re,Axr),e(re,JC),e(JC,_7e),e(_7e,yxr),e(JC,Lxr),e(JC,pY),e(pY,xxr),e(JC,$xr),e(re,kxr),e(re,YC),e(YC,u7e),e(u7e,Sxr),e(YC,Rxr),e(YC,_Y),e(_Y,Pxr),e(YC,Bxr),e(re,Ixr),e(re,KC),e(KC,b7e),e(b7e,Nxr),e(KC,qxr),e(KC,uY),e(uY,jxr),e(KC,Dxr),e(re,Gxr),e(re,ZC),e(ZC,v7e),e(v7e,Oxr),e(ZC,Vxr),e(ZC,bY),e(bY,Xxr),e(ZC,zxr),e(re,Wxr),e(re,e5),e(e5,F7e),e(F7e,Qxr),e(e5,Hxr),e(e5,vY),e(vY,Uxr),e(e5,Jxr),e(re,Yxr),e(re,o5),e(o5,T7e),e(T7e,Kxr),e(o5,Zxr),e(o5,FY),e(FY,e$r),e(o5,o$r),e(re,r$r),e(re,r5),e(r5,M7e),e(M7e,t$r),e(r5,a$r),e(r5,TY),e(TY,n$r),e(r5,s$r),e(re,l$r),e(re,t5),e(t5,E7e),e(E7e,i$r),e(t5,d$r),e(t5,MY),e(MY,c$r),e(t5,f$r),e(re,m$r),e(re,a5),e(a5,C7e),e(C7e,g$r),e(a5,h$r),e(a5,EY),e(EY,p$r),e(a5,_$r),e(re,u$r),e(re,n5),e(n5,w7e),e(w7e,b$r),e(n5,v$r),e(n5,CY),e(CY,F$r),e(n5,T$r),e(re,M$r),e(re,s5),e(s5,A7e),e(A7e,E$r),e(s5,C$r),e(s5,wY),e(wY,w$r),e(s5,A$r),e(jr,y$r),M(l5,jr,null),b(f,mDe,u),b(f,Rc,u),e(Rc,i5),e(i5,y7e),M(q9,y7e,null),e(Rc,L$r),e(Rc,L7e),e(L7e,x$r),b(f,gDe,u),b(f,mr,u),M(j9,mr,null),e(mr,$$r),e(mr,Pc),e(Pc,k$r),e(Pc,AY),e(AY,S$r),e(Pc,R$r),e(Pc,yY),e(yY,P$r),e(Pc,B$r),e(mr,I$r),e(mr,D9),e(D9,N$r),e(D9,x7e),e(x7e,q$r),e(D9,j$r),e(mr,D$r),e(mr,Ot),M(G9,Ot,null),e(Ot,G$r),e(Ot,$7e),e($7e,O$r),e(Ot,V$r),e(Ot,Bc),e(Bc,X$r),e(Bc,k7e),e(k7e,z$r),e(Bc,W$r),e(Bc,LY),e(LY,Q$r),e(Bc,H$r),e(Ot,U$r),M(d5,Ot,null),e(mr,J$r),e(mr,Dr),M(O9,Dr,null),e(Dr,Y$r),e(Dr,S7e),e(S7e,K$r),e(Dr,Z$r),e(Dr,pn),e(pn,ekr),e(pn,R7e),e(R7e,okr),e(pn,rkr),e(pn,P7e),e(P7e,tkr),e(pn,akr),e(pn,B7e),e(B7e,nkr),e(pn,skr),e(Dr,lkr),e(Dr,Le),e(Le,c5),e(c5,I7e),e(I7e,ikr),e(c5,dkr),e(c5,xY),e(xY,ckr),e(c5,fkr),e(Le,mkr),e(Le,f5),e(f5,N7e),e(N7e,gkr),e(f5,hkr),e(f5,$Y),e($Y,pkr),e(f5,_kr),e(Le,ukr),e(Le,m5),e(m5,q7e),e(q7e,bkr),e(m5,vkr),e(m5,kY),e(kY,Fkr),e(m5,Tkr),e(Le,Mkr),e(Le,g5),e(g5,j7e),e(j7e,Ekr),e(g5,Ckr),e(g5,SY),e(SY,wkr),e(g5,Akr),e(Le,ykr),e(Le,h5),e(h5,D7e),e(D7e,Lkr),e(h5,xkr),e(h5,RY),e(RY,$kr),e(h5,kkr),e(Le,Skr),e(Le,p5),e(p5,G7e),e(G7e,Rkr),e(p5,Pkr),e(p5,PY),e(PY,Bkr),e(p5,Ikr),e(Le,Nkr),e(Le,_5),e(_5,O7e),e(O7e,qkr),e(_5,jkr),e(_5,BY),e(BY,Dkr),e(_5,Gkr),e(Le,Okr),e(Le,u5),e(u5,V7e),e(V7e,Vkr),e(u5,Xkr),e(u5,IY),e(IY,zkr),e(u5,Wkr),e(Le,Qkr),e(Le,b5),e(b5,X7e),e(X7e,Hkr),e(b5,Ukr),e(b5,NY),e(NY,Jkr),e(b5,Ykr),e(Le,Kkr),e(Le,v5),e(v5,z7e),e(z7e,Zkr),e(v5,eSr),e(v5,qY),e(qY,oSr),e(v5,rSr),e(Dr,tSr),M(F5,Dr,null),b(f,hDe,u),b(f,Ic,u),e(Ic,T5),e(T5,W7e),M(V9,W7e,null),e(Ic,aSr),e(Ic,Q7e),e(Q7e,nSr),b(f,pDe,u),b(f,gr,u),M(X9,gr,null),e(gr,sSr),e(gr,Nc),e(Nc,lSr),e(Nc,jY),e(jY,iSr),e(Nc,dSr),e(Nc,DY),e(DY,cSr),e(Nc,fSr),e(gr,mSr),e(gr,z9),e(z9,gSr),e(z9,H7e),e(H7e,hSr),e(z9,pSr),e(gr,_Sr),e(gr,Vt),M(W9,Vt,null),e(Vt,uSr),e(Vt,U7e),e(U7e,bSr),e(Vt,vSr),e(Vt,qc),e(qc,FSr),e(qc,J7e),e(J7e,TSr),e(qc,MSr),e(qc,GY),e(GY,ESr),e(qc,CSr),e(Vt,wSr),M(M5,Vt,null),e(gr,ASr),e(gr,Gr),M(Q9,Gr,null),e(Gr,ySr),e(Gr,Y7e),e(Y7e,LSr),e(Gr,xSr),e(Gr,_n),e(_n,$Sr),e(_n,K7e),e(K7e,kSr),e(_n,SSr),e(_n,Z7e),e(Z7e,RSr),e(_n,PSr),e(_n,eMe),e(eMe,BSr),e(_n,ISr),e(Gr,NSr),e(Gr,Ee),e(Ee,E5),e(E5,oMe),e(oMe,qSr),e(E5,jSr),e(E5,OY),e(OY,DSr),e(E5,GSr),e(Ee,OSr),e(Ee,C5),e(C5,rMe),e(rMe,VSr),e(C5,XSr),e(C5,VY),e(VY,zSr),e(C5,WSr),e(Ee,QSr),e(Ee,w5),e(w5,tMe),e(tMe,HSr),e(w5,USr),e(w5,XY),e(XY,JSr),e(w5,YSr),e(Ee,KSr),e(Ee,A5),e(A5,aMe),e(aMe,ZSr),e(A5,eRr),e(A5,zY),e(zY,oRr),e(A5,rRr),e(Ee,tRr),e(Ee,y5),e(y5,nMe),e(nMe,aRr),e(y5,nRr),e(y5,WY),e(WY,sRr),e(y5,lRr),e(Ee,iRr),e(Ee,L5),e(L5,sMe),e(sMe,dRr),e(L5,cRr),e(L5,QY),e(QY,fRr),e(L5,mRr),e(Ee,gRr),e(Ee,x5),e(x5,lMe),e(lMe,hRr),e(x5,pRr),e(x5,HY),e(HY,_Rr),e(x5,uRr),e(Ee,bRr),e(Ee,$5),e($5,iMe),e(iMe,vRr),e($5,FRr),e($5,UY),e(UY,TRr),e($5,MRr),e(Ee,ERr),e(Ee,k5),e(k5,dMe),e(dMe,CRr),e(k5,wRr),e(k5,JY),e(JY,ARr),e(k5,yRr),e(Ee,LRr),e(Ee,S5),e(S5,cMe),e(cMe,xRr),e(S5,$Rr),e(S5,YY),e(YY,kRr),e(S5,SRr),e(Ee,RRr),e(Ee,R5),e(R5,fMe),e(fMe,PRr),e(R5,BRr),e(R5,KY),e(KY,IRr),e(R5,NRr),e(Ee,qRr),e(Ee,P5),e(P5,mMe),e(mMe,jRr),e(P5,DRr),e(P5,ZY),e(ZY,GRr),e(P5,ORr),e(Gr,VRr),M(B5,Gr,null),b(f,_De,u),b(f,jc,u),e(jc,I5),e(I5,gMe),M(H9,gMe,null),e(jc,XRr),e(jc,hMe),e(hMe,zRr),b(f,uDe,u),b(f,hr,u),M(U9,hr,null),e(hr,WRr),e(hr,Dc),e(Dc,QRr),e(Dc,eK),e(eK,HRr),e(Dc,URr),e(Dc,oK),e(oK,JRr),e(Dc,YRr),e(hr,KRr),e(hr,J9),e(J9,ZRr),e(J9,pMe),e(pMe,ePr),e(J9,oPr),e(hr,rPr),e(hr,Xt),M(Y9,Xt,null),e(Xt,tPr),e(Xt,_Me),e(_Me,aPr),e(Xt,nPr),e(Xt,Gc),e(Gc,sPr),e(Gc,uMe),e(uMe,lPr),e(Gc,iPr),e(Gc,rK),e(rK,dPr),e(Gc,cPr),e(Xt,fPr),M(N5,Xt,null),e(hr,mPr),e(hr,Or),M(K9,Or,null),e(Or,gPr),e(Or,bMe),e(bMe,hPr),e(Or,pPr),e(Or,un),e(un,_Pr),e(un,vMe),e(vMe,uPr),e(un,bPr),e(un,FMe),e(FMe,vPr),e(un,FPr),e(un,TMe),e(TMe,TPr),e(un,MPr),e(Or,EPr),e(Or,xe),e(xe,q5),e(q5,MMe),e(MMe,CPr),e(q5,wPr),e(q5,tK),e(tK,APr),e(q5,yPr),e(xe,LPr),e(xe,j5),e(j5,EMe),e(EMe,xPr),e(j5,$Pr),e(j5,aK),e(aK,kPr),e(j5,SPr),e(xe,RPr),e(xe,D5),e(D5,CMe),e(CMe,PPr),e(D5,BPr),e(D5,nK),e(nK,IPr),e(D5,NPr),e(xe,qPr),e(xe,G5),e(G5,wMe),e(wMe,jPr),e(G5,DPr),e(G5,sK),e(sK,GPr),e(G5,OPr),e(xe,VPr),e(xe,O5),e(O5,AMe),e(AMe,XPr),e(O5,zPr),e(O5,lK),e(lK,WPr),e(O5,QPr),e(xe,HPr),e(xe,V5),e(V5,yMe),e(yMe,UPr),e(V5,JPr),e(V5,iK),e(iK,YPr),e(V5,KPr),e(xe,ZPr),e(xe,X5),e(X5,LMe),e(LMe,eBr),e(X5,oBr),e(X5,dK),e(dK,rBr),e(X5,tBr),e(xe,aBr),e(xe,z5),e(z5,xMe),e(xMe,nBr),e(z5,sBr),e(z5,cK),e(cK,lBr),e(z5,iBr),e(xe,dBr),e(xe,W5),e(W5,$Me),e($Me,cBr),e(W5,fBr),e(W5,fK),e(fK,mBr),e(W5,gBr),e(xe,hBr),e(xe,Q5),e(Q5,kMe),e(kMe,pBr),e(Q5,_Br),e(Q5,mK),e(mK,uBr),e(Q5,bBr),e(Or,vBr),M(H5,Or,null),b(f,bDe,u),b(f,Oc,u),e(Oc,U5),e(U5,SMe),M(Z9,SMe,null),e(Oc,FBr),e(Oc,RMe),e(RMe,TBr),b(f,vDe,u),b(f,pr,u),M(ex,pr,null),e(pr,MBr),e(pr,Vc),e(Vc,EBr),e(Vc,gK),e(gK,CBr),e(Vc,wBr),e(Vc,hK),e(hK,ABr),e(Vc,yBr),e(pr,LBr),e(pr,ox),e(ox,xBr),e(ox,PMe),e(PMe,$Br),e(ox,kBr),e(pr,SBr),e(pr,zt),M(rx,zt,null),e(zt,RBr),e(zt,BMe),e(BMe,PBr),e(zt,BBr),e(zt,Xc),e(Xc,IBr),e(Xc,IMe),e(IMe,NBr),e(Xc,qBr),e(Xc,pK),e(pK,jBr),e(Xc,DBr),e(zt,GBr),M(J5,zt,null),e(pr,OBr),e(pr,Vr),M(tx,Vr,null),e(Vr,VBr),e(Vr,NMe),e(NMe,XBr),e(Vr,zBr),e(Vr,bn),e(bn,WBr),e(bn,qMe),e(qMe,QBr),e(bn,HBr),e(bn,jMe),e(jMe,UBr),e(bn,JBr),e(bn,DMe),e(DMe,YBr),e(bn,KBr),e(Vr,ZBr),e(Vr,Pe),e(Pe,Y5),e(Y5,GMe),e(GMe,eIr),e(Y5,oIr),e(Y5,_K),e(_K,rIr),e(Y5,tIr),e(Pe,aIr),e(Pe,K5),e(K5,OMe),e(OMe,nIr),e(K5,sIr),e(K5,uK),e(uK,lIr),e(K5,iIr),e(Pe,dIr),e(Pe,Z5),e(Z5,VMe),e(VMe,cIr),e(Z5,fIr),e(Z5,bK),e(bK,mIr),e(Z5,gIr),e(Pe,hIr),e(Pe,e0),e(e0,XMe),e(XMe,pIr),e(e0,_Ir),e(e0,vK),e(vK,uIr),e(e0,bIr),e(Pe,vIr),e(Pe,o0),e(o0,zMe),e(zMe,FIr),e(o0,TIr),e(o0,FK),e(FK,MIr),e(o0,EIr),e(Pe,CIr),e(Pe,r0),e(r0,WMe),e(WMe,wIr),e(r0,AIr),e(r0,TK),e(TK,yIr),e(r0,LIr),e(Pe,xIr),e(Pe,t0),e(t0,QMe),e(QMe,$Ir),e(t0,kIr),e(t0,MK),e(MK,SIr),e(t0,RIr),e(Pe,PIr),e(Pe,a0),e(a0,HMe),e(HMe,BIr),e(a0,IIr),e(a0,EK),e(EK,NIr),e(a0,qIr),e(Pe,jIr),e(Pe,n0),e(n0,UMe),e(UMe,DIr),e(n0,GIr),e(n0,CK),e(CK,OIr),e(n0,VIr),e(Vr,XIr),M(s0,Vr,null),b(f,FDe,u),b(f,zc,u),e(zc,l0),e(l0,JMe),M(ax,JMe,null),e(zc,zIr),e(zc,YMe),e(YMe,WIr),b(f,TDe,u),b(f,_r,u),M(nx,_r,null),e(_r,QIr),e(_r,Wc),e(Wc,HIr),e(Wc,wK),e(wK,UIr),e(Wc,JIr),e(Wc,AK),e(AK,YIr),e(Wc,KIr),e(_r,ZIr),e(_r,sx),e(sx,eNr),e(sx,KMe),e(KMe,oNr),e(sx,rNr),e(_r,tNr),e(_r,Wt),M(lx,Wt,null),e(Wt,aNr),e(Wt,ZMe),e(ZMe,nNr),e(Wt,sNr),e(Wt,Qc),e(Qc,lNr),e(Qc,eEe),e(eEe,iNr),e(Qc,dNr),e(Qc,yK),e(yK,cNr),e(Qc,fNr),e(Wt,mNr),M(i0,Wt,null),e(_r,gNr),e(_r,Xr),M(ix,Xr,null),e(Xr,hNr),e(Xr,oEe),e(oEe,pNr),e(Xr,_Nr),e(Xr,vn),e(vn,uNr),e(vn,rEe),e(rEe,bNr),e(vn,vNr),e(vn,tEe),e(tEe,FNr),e(vn,TNr),e(vn,aEe),e(aEe,MNr),e(vn,ENr),e(Xr,CNr),e(Xr,$e),e($e,d0),e(d0,nEe),e(nEe,wNr),e(d0,ANr),e(d0,LK),e(LK,yNr),e(d0,LNr),e($e,xNr),e($e,c0),e(c0,sEe),e(sEe,$Nr),e(c0,kNr),e(c0,xK),e(xK,SNr),e(c0,RNr),e($e,PNr),e($e,f0),e(f0,lEe),e(lEe,BNr),e(f0,INr),e(f0,$K),e($K,NNr),e(f0,qNr),e($e,jNr),e($e,m0),e(m0,iEe),e(iEe,DNr),e(m0,GNr),e(m0,kK),e(kK,ONr),e(m0,VNr),e($e,XNr),e($e,g0),e(g0,dEe),e(dEe,zNr),e(g0,WNr),e(g0,SK),e(SK,QNr),e(g0,HNr),e($e,UNr),e($e,h0),e(h0,cEe),e(cEe,JNr),e(h0,YNr),e(h0,RK),e(RK,KNr),e(h0,ZNr),e($e,eqr),e($e,p0),e(p0,fEe),e(fEe,oqr),e(p0,rqr),e(p0,PK),e(PK,tqr),e(p0,aqr),e($e,nqr),e($e,_0),e(_0,mEe),e(mEe,sqr),e(_0,lqr),e(_0,BK),e(BK,iqr),e(_0,dqr),e($e,cqr),e($e,u0),e(u0,gEe),e(gEe,fqr),e(u0,mqr),e(u0,IK),e(IK,gqr),e(u0,hqr),e($e,pqr),e($e,b0),e(b0,hEe),e(hEe,_qr),e(b0,uqr),e(b0,NK),e(NK,bqr),e(b0,vqr),e(Xr,Fqr),M(v0,Xr,null),b(f,MDe,u),b(f,Hc,u),e(Hc,F0),e(F0,pEe),M(dx,pEe,null),e(Hc,Tqr),e(Hc,_Ee),e(_Ee,Mqr),b(f,EDe,u),b(f,ur,u),M(cx,ur,null),e(ur,Eqr),e(ur,Uc),e(Uc,Cqr),e(Uc,qK),e(qK,wqr),e(Uc,Aqr),e(Uc,jK),e(jK,yqr),e(Uc,Lqr),e(ur,xqr),e(ur,fx),e(fx,$qr),e(fx,uEe),e(uEe,kqr),e(fx,Sqr),e(ur,Rqr),e(ur,Qt),M(mx,Qt,null),e(Qt,Pqr),e(Qt,bEe),e(bEe,Bqr),e(Qt,Iqr),e(Qt,Jc),e(Jc,Nqr),e(Jc,vEe),e(vEe,qqr),e(Jc,jqr),e(Jc,DK),e(DK,Dqr),e(Jc,Gqr),e(Qt,Oqr),M(T0,Qt,null),e(ur,Vqr),e(ur,zr),M(gx,zr,null),e(zr,Xqr),e(zr,FEe),e(FEe,zqr),e(zr,Wqr),e(zr,Fn),e(Fn,Qqr),e(Fn,TEe),e(TEe,Hqr),e(Fn,Uqr),e(Fn,MEe),e(MEe,Jqr),e(Fn,Yqr),e(Fn,EEe),e(EEe,Kqr),e(Fn,Zqr),e(zr,ejr),e(zr,ke),e(ke,M0),e(M0,CEe),e(CEe,ojr),e(M0,rjr),e(M0,GK),e(GK,tjr),e(M0,ajr),e(ke,njr),e(ke,E0),e(E0,wEe),e(wEe,sjr),e(E0,ljr),e(E0,OK),e(OK,ijr),e(E0,djr),e(ke,cjr),e(ke,C0),e(C0,AEe),e(AEe,fjr),e(C0,mjr),e(C0,VK),e(VK,gjr),e(C0,hjr),e(ke,pjr),e(ke,w0),e(w0,yEe),e(yEe,_jr),e(w0,ujr),e(w0,XK),e(XK,bjr),e(w0,vjr),e(ke,Fjr),e(ke,A0),e(A0,LEe),e(LEe,Tjr),e(A0,Mjr),e(A0,zK),e(zK,Ejr),e(A0,Cjr),e(ke,wjr),e(ke,y0),e(y0,xEe),e(xEe,Ajr),e(y0,yjr),e(y0,WK),e(WK,Ljr),e(y0,xjr),e(ke,$jr),e(ke,L0),e(L0,$Ee),e($Ee,kjr),e(L0,Sjr),e(L0,QK),e(QK,Rjr),e(L0,Pjr),e(ke,Bjr),e(ke,x0),e(x0,kEe),e(kEe,Ijr),e(x0,Njr),e(x0,HK),e(HK,qjr),e(x0,jjr),e(ke,Djr),e(ke,$0),e($0,SEe),e(SEe,Gjr),e($0,Ojr),e($0,UK),e(UK,Vjr),e($0,Xjr),e(ke,zjr),e(ke,k0),e(k0,REe),e(REe,Wjr),e(k0,Qjr),e(k0,JK),e(JK,Hjr),e(k0,Ujr),e(zr,Jjr),M(S0,zr,null),b(f,CDe,u),b(f,Yc,u),e(Yc,R0),e(R0,PEe),M(hx,PEe,null),e(Yc,Yjr),e(Yc,BEe),e(BEe,Kjr),b(f,wDe,u),b(f,br,u),M(px,br,null),e(br,Zjr),e(br,Kc),e(Kc,eDr),e(Kc,YK),e(YK,oDr),e(Kc,rDr),e(Kc,KK),e(KK,tDr),e(Kc,aDr),e(br,nDr),e(br,_x),e(_x,sDr),e(_x,IEe),e(IEe,lDr),e(_x,iDr),e(br,dDr),e(br,Ht),M(ux,Ht,null),e(Ht,cDr),e(Ht,NEe),e(NEe,fDr),e(Ht,mDr),e(Ht,Zc),e(Zc,gDr),e(Zc,qEe),e(qEe,hDr),e(Zc,pDr),e(Zc,ZK),e(ZK,_Dr),e(Zc,uDr),e(Ht,bDr),M(P0,Ht,null),e(br,vDr),e(br,Wr),M(bx,Wr,null),e(Wr,FDr),e(Wr,jEe),e(jEe,TDr),e(Wr,MDr),e(Wr,Tn),e(Tn,EDr),e(Tn,DEe),e(DEe,CDr),e(Tn,wDr),e(Tn,GEe),e(GEe,ADr),e(Tn,yDr),e(Tn,OEe),e(OEe,LDr),e(Tn,xDr),e(Wr,$Dr),e(Wr,Ge),e(Ge,B0),e(B0,VEe),e(VEe,kDr),e(B0,SDr),e(B0,eZ),e(eZ,RDr),e(B0,PDr),e(Ge,BDr),e(Ge,I0),e(I0,XEe),e(XEe,IDr),e(I0,NDr),e(I0,oZ),e(oZ,qDr),e(I0,jDr),e(Ge,DDr),e(Ge,N0),e(N0,zEe),e(zEe,GDr),e(N0,ODr),e(N0,rZ),e(rZ,VDr),e(N0,XDr),e(Ge,zDr),e(Ge,q0),e(q0,WEe),e(WEe,WDr),e(q0,QDr),e(q0,tZ),e(tZ,HDr),e(q0,UDr),e(Ge,JDr),e(Ge,j0),e(j0,QEe),e(QEe,YDr),e(j0,KDr),e(j0,aZ),e(aZ,ZDr),e(j0,eGr),e(Ge,oGr),e(Ge,D0),e(D0,HEe),e(HEe,rGr),e(D0,tGr),e(D0,nZ),e(nZ,aGr),e(D0,nGr),e(Ge,sGr),e(Ge,G0),e(G0,UEe),e(UEe,lGr),e(G0,iGr),e(G0,sZ),e(sZ,dGr),e(G0,cGr),e(Ge,fGr),e(Ge,O0),e(O0,JEe),e(JEe,mGr),e(O0,gGr),e(O0,lZ),e(lZ,hGr),e(O0,pGr),e(Wr,_Gr),M(V0,Wr,null),b(f,ADe,u),b(f,ef,u),e(ef,X0),e(X0,YEe),M(vx,YEe,null),e(ef,uGr),e(ef,KEe),e(KEe,bGr),b(f,yDe,u),b(f,vr,u),M(Fx,vr,null),e(vr,vGr),e(vr,of),e(of,FGr),e(of,iZ),e(iZ,TGr),e(of,MGr),e(of,dZ),e(dZ,EGr),e(of,CGr),e(vr,wGr),e(vr,Tx),e(Tx,AGr),e(Tx,ZEe),e(ZEe,yGr),e(Tx,LGr),e(vr,xGr),e(vr,Ut),M(Mx,Ut,null),e(Ut,$Gr),e(Ut,eCe),e(eCe,kGr),e(Ut,SGr),e(Ut,rf),e(rf,RGr),e(rf,oCe),e(oCe,PGr),e(rf,BGr),e(rf,cZ),e(cZ,IGr),e(rf,NGr),e(Ut,qGr),M(z0,Ut,null),e(vr,jGr),e(vr,Qr),M(Ex,Qr,null),e(Qr,DGr),e(Qr,rCe),e(rCe,GGr),e(Qr,OGr),e(Qr,Mn),e(Mn,VGr),e(Mn,tCe),e(tCe,XGr),e(Mn,zGr),e(Mn,aCe),e(aCe,WGr),e(Mn,QGr),e(Mn,nCe),e(nCe,HGr),e(Mn,UGr),e(Qr,JGr),e(Qr,Oe),e(Oe,W0),e(W0,sCe),e(sCe,YGr),e(W0,KGr),e(W0,fZ),e(fZ,ZGr),e(W0,eOr),e(Oe,oOr),e(Oe,Q0),e(Q0,lCe),e(lCe,rOr),e(Q0,tOr),e(Q0,mZ),e(mZ,aOr),e(Q0,nOr),e(Oe,sOr),e(Oe,H0),e(H0,iCe),e(iCe,lOr),e(H0,iOr),e(H0,gZ),e(gZ,dOr),e(H0,cOr),e(Oe,fOr),e(Oe,U0),e(U0,dCe),e(dCe,mOr),e(U0,gOr),e(U0,hZ),e(hZ,hOr),e(U0,pOr),e(Oe,_Or),e(Oe,J0),e(J0,cCe),e(cCe,uOr),e(J0,bOr),e(J0,pZ),e(pZ,vOr),e(J0,FOr),e(Oe,TOr),e(Oe,Y0),e(Y0,fCe),e(fCe,MOr),e(Y0,EOr),e(Y0,_Z),e(_Z,COr),e(Y0,wOr),e(Oe,AOr),e(Oe,K0),e(K0,mCe),e(mCe,yOr),e(K0,LOr),e(K0,uZ),e(uZ,xOr),e(K0,$Or),e(Oe,kOr),e(Oe,Z0),e(Z0,gCe),e(gCe,SOr),e(Z0,ROr),e(Z0,bZ),e(bZ,POr),e(Z0,BOr),e(Qr,IOr),M(ew,Qr,null),b(f,LDe,u),b(f,tf,u),e(tf,ow),e(ow,hCe),M(Cx,hCe,null),e(tf,NOr),e(tf,pCe),e(pCe,qOr),b(f,xDe,u),b(f,Fr,u),M(wx,Fr,null),e(Fr,jOr),e(Fr,af),e(af,DOr),e(af,vZ),e(vZ,GOr),e(af,OOr),e(af,FZ),e(FZ,VOr),e(af,XOr),e(Fr,zOr),e(Fr,Ax),e(Ax,WOr),e(Ax,_Ce),e(_Ce,QOr),e(Ax,HOr),e(Fr,UOr),e(Fr,Jt),M(yx,Jt,null),e(Jt,JOr),e(Jt,uCe),e(uCe,YOr),e(Jt,KOr),e(Jt,nf),e(nf,ZOr),e(nf,bCe),e(bCe,eVr),e(nf,oVr),e(nf,TZ),e(TZ,rVr),e(nf,tVr),e(Jt,aVr),M(rw,Jt,null),e(Fr,nVr),e(Fr,Hr),M(Lx,Hr,null),e(Hr,sVr),e(Hr,vCe),e(vCe,lVr),e(Hr,iVr),e(Hr,En),e(En,dVr),e(En,FCe),e(FCe,cVr),e(En,fVr),e(En,TCe),e(TCe,mVr),e(En,gVr),e(En,MCe),e(MCe,hVr),e(En,pVr),e(Hr,_Vr),e(Hr,ECe),e(ECe,tw),e(tw,CCe),e(CCe,uVr),e(tw,bVr),e(tw,MZ),e(MZ,vVr),e(tw,FVr),e(Hr,TVr),M(aw,Hr,null),b(f,$De,u),b(f,sf,u),e(sf,nw),e(nw,wCe),M(xx,wCe,null),e(sf,MVr),e(sf,ACe),e(ACe,EVr),b(f,kDe,u),b(f,Tr,u),M($x,Tr,null),e(Tr,CVr),e(Tr,lf),e(lf,wVr),e(lf,EZ),e(EZ,AVr),e(lf,yVr),e(lf,CZ),e(CZ,LVr),e(lf,xVr),e(Tr,$Vr),e(Tr,kx),e(kx,kVr),e(kx,yCe),e(yCe,SVr),e(kx,RVr),e(Tr,PVr),e(Tr,Yt),M(Sx,Yt,null),e(Yt,BVr),e(Yt,LCe),e(LCe,IVr),e(Yt,NVr),e(Yt,df),e(df,qVr),e(df,xCe),e(xCe,jVr),e(df,DVr),e(df,wZ),e(wZ,GVr),e(df,OVr),e(Yt,VVr),M(sw,Yt,null),e(Tr,XVr),e(Tr,Ur),M(Rx,Ur,null),e(Ur,zVr),e(Ur,$Ce),e($Ce,WVr),e(Ur,QVr),e(Ur,Cn),e(Cn,HVr),e(Cn,kCe),e(kCe,UVr),e(Cn,JVr),e(Cn,SCe),e(SCe,YVr),e(Cn,KVr),e(Cn,RCe),e(RCe,ZVr),e(Cn,eXr),e(Ur,oXr),e(Ur,Px),e(Px,lw),e(lw,PCe),e(PCe,rXr),e(lw,tXr),e(lw,AZ),e(AZ,aXr),e(lw,nXr),e(Px,sXr),e(Px,iw),e(iw,BCe),e(BCe,lXr),e(iw,iXr),e(iw,yZ),e(yZ,dXr),e(iw,cXr),e(Ur,fXr),M(dw,Ur,null),b(f,SDe,u),b(f,cf,u),e(cf,cw),e(cw,ICe),M(Bx,ICe,null),e(cf,mXr),e(cf,NCe),e(NCe,gXr),b(f,RDe,u),b(f,Mr,u),M(Ix,Mr,null),e(Mr,hXr),e(Mr,ff),e(ff,pXr),e(ff,LZ),e(LZ,_Xr),e(ff,uXr),e(ff,xZ),e(xZ,bXr),e(ff,vXr),e(Mr,FXr),e(Mr,Nx),e(Nx,TXr),e(Nx,qCe),e(qCe,MXr),e(Nx,EXr),e(Mr,CXr),e(Mr,Kt),M(qx,Kt,null),e(Kt,wXr),e(Kt,jCe),e(jCe,AXr),e(Kt,yXr),e(Kt,mf),e(mf,LXr),e(mf,DCe),e(DCe,xXr),e(mf,$Xr),e(mf,$Z),e($Z,kXr),e(mf,SXr),e(Kt,RXr),M(fw,Kt,null),e(Mr,PXr),e(Mr,Jr),M(jx,Jr,null),e(Jr,BXr),e(Jr,GCe),e(GCe,IXr),e(Jr,NXr),e(Jr,wn),e(wn,qXr),e(wn,OCe),e(OCe,jXr),e(wn,DXr),e(wn,VCe),e(VCe,GXr),e(wn,OXr),e(wn,XCe),e(XCe,VXr),e(wn,XXr),e(Jr,zXr),e(Jr,zCe),e(zCe,mw),e(mw,WCe),e(WCe,WXr),e(mw,QXr),e(mw,kZ),e(kZ,HXr),e(mw,UXr),e(Jr,JXr),M(gw,Jr,null),PDe=!0},p(f,[u]){const Dx={};u&2&&(Dx.$$scope={dirty:u,ctx:f}),Tf.$set(Dx);const QCe={};u&2&&(QCe.$$scope={dirty:u,ctx:f}),wg.$set(QCe);const HCe={};u&2&&(HCe.$$scope={dirty:u,ctx:f}),sh.$set(HCe);const UCe={};u&2&&(UCe.$$scope={dirty:u,ctx:f}),qh.$set(UCe);const Gx={};u&2&&(Gx.$$scope={dirty:u,ctx:f}),jh.$set(Gx);const JCe={};u&2&&(JCe.$$scope={dirty:u,ctx:f}),np.$set(JCe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),sp.$set(An);const YCe={};u&2&&(YCe.$$scope={dirty:u,ctx:f}),dp.$set(YCe);const KCe={};u&2&&(KCe.$$scope={dirty:u,ctx:f}),nu.$set(KCe);const ZCe={};u&2&&(ZCe.$$scope={dirty:u,ctx:f}),lu.$set(ZCe);const Ox={};u&2&&(Ox.$$scope={dirty:u,ctx:f}),Yu.$set(Ox);const e5e={};u&2&&(e5e.$$scope={dirty:u,ctx:f}),Zu.$set(e5e);const Vx={};u&2&&(Vx.$$scope={dirty:u,ctx:f}),j4.$set(Vx);const o5e={};u&2&&(o5e.$$scope={dirty:u,ctx:f}),G4.$set(o5e);const Xx={};u&2&&(Xx.$$scope={dirty:u,ctx:f}),C1.$set(Xx);const r5e={};u&2&&(r5e.$$scope={dirty:u,ctx:f}),A1.$set(r5e);const t5e={};u&2&&(t5e.$$scope={dirty:u,ctx:f}),X1.$set(t5e);const a5e={};u&2&&(a5e.$$scope={dirty:u,ctx:f}),W1.$set(a5e);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),Gb.$set(gf);const n5e={};u&2&&(n5e.$$scope={dirty:u,ctx:f}),Vb.$set(n5e);const s5e={};u&2&&(s5e.$$scope={dirty:u,ctx:f}),F2.$set(s5e);const l5e={};u&2&&(l5e.$$scope={dirty:u,ctx:f}),M2.$set(l5e);const zx={};u&2&&(zx.$$scope={dirty:u,ctx:f}),x2.$set(zx);const i5e={};u&2&&(i5e.$$scope={dirty:u,ctx:f}),k2.$set(i5e);const d5e={};u&2&&(d5e.$$scope={dirty:u,ctx:f}),gv.$set(d5e);const c5e={};u&2&&(c5e.$$scope={dirty:u,ctx:f}),pv.$set(c5e);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),t3.$set(et);const Wx={};u&2&&(Wx.$$scope={dirty:u,ctx:f}),n3.$set(Wx);const f5e={};u&2&&(f5e.$$scope={dirty:u,ctx:f}),i3.$set(f5e);const Qx={};u&2&&(Qx.$$scope={dirty:u,ctx:f}),c3.$set(Qx);const m5e={};u&2&&(m5e.$$scope={dirty:u,ctx:f}),C3.$set(m5e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),A3.$set(ot);const g5e={};u&2&&(g5e.$$scope={dirty:u,ctx:f}),x3.$set(g5e);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),k3.$set(hf);const h5e={};u&2&&(h5e.$$scope={dirty:u,ctx:f}),O3.$set(h5e);const p5e={};u&2&&(p5e.$$scope={dirty:u,ctx:f}),X3.$set(p5e);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),Y3.$set(y);const hw={};u&2&&(hw.$$scope={dirty:u,ctx:f}),Z3.$set(hw);const _5e={};u&2&&(_5e.$$scope={dirty:u,ctx:f}),cF.$set(_5e);const u5e={};u&2&&(u5e.$$scope={dirty:u,ctx:f}),mF.$set(u5e);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),_F.$set(pw);const b5e={};u&2&&(b5e.$$scope={dirty:u,ctx:f}),bF.$set(b5e);const v5e={};u&2&&(v5e.$$scope={dirty:u,ctx:f}),wF.$set(v5e);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),yF.$set(_w);const F5e={};u&2&&(F5e.$$scope={dirty:u,ctx:f}),SF.$set(F5e);const T5e={};u&2&&(T5e.$$scope={dirty:u,ctx:f}),PF.$set(T5e);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),qF.$set(uw);const M5e={};u&2&&(M5e.$$scope={dirty:u,ctx:f}),DF.$set(M5e);const E5e={};u&2&&(E5e.$$scope={dirty:u,ctx:f}),VF.$set(E5e);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),zF.$set(bw);const C5e={};u&2&&(C5e.$$scope={dirty:u,ctx:f}),YF.$set(C5e);const w5e={};u&2&&(w5e.$$scope={dirty:u,ctx:f}),ZF.$set(w5e);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),rT.$set(vw);const A5e={};u&2&&(A5e.$$scope={dirty:u,ctx:f}),aT.$set(A5e);const y5e={};u&2&&(y5e.$$scope={dirty:u,ctx:f}),YT.$set(y5e);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),ZT.$set(Fw);const L5e={};u&2&&(L5e.$$scope={dirty:u,ctx:f}),E7.$set(L5e);const x5e={};u&2&&(x5e.$$scope={dirty:u,ctx:f}),w7.$set(x5e);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),j7.$set(Tw);const $5e={};u&2&&($5e.$$scope={dirty:u,ctx:f}),G7.$set($5e);const k5e={};u&2&&(k5e.$$scope={dirty:u,ctx:f}),W7.$set(k5e);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),H7.$set(Mw);const S5e={};u&2&&(S5e.$$scope={dirty:u,ctx:f}),pM.$set(S5e);const R5e={};u&2&&(R5e.$$scope={dirty:u,ctx:f}),uM.$set(R5e);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),LM.$set(Ew);const P5e={};u&2&&(P5e.$$scope={dirty:u,ctx:f}),$M.$set(P5e);const B5e={};u&2&&(B5e.$$scope={dirty:u,ctx:f}),tE.$set(B5e);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),nE.$set(Cw);const I5e={};u&2&&(I5e.$$scope={dirty:u,ctx:f}),EE.$set(I5e);const N5e={};u&2&&(N5e.$$scope={dirty:u,ctx:f}),wE.$set(N5e);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),LE.$set(ww);const q5e={};u&2&&(q5e.$$scope={dirty:u,ctx:f}),$E.$set(q5e);const j5e={};u&2&&(j5e.$$scope={dirty:u,ctx:f}),SE.$set(j5e);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),PE.$set(Aw);const D5e={};u&2&&(D5e.$$scope={dirty:u,ctx:f}),oC.$set(D5e);const G5e={};u&2&&(G5e.$$scope={dirty:u,ctx:f}),tC.$set(G5e);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),CC.$set(yw);const O5e={};u&2&&(O5e.$$scope={dirty:u,ctx:f}),AC.$set(O5e);const V5e={};u&2&&(V5e.$$scope={dirty:u,ctx:f}),LC.$set(V5e);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),$C.$set(Lw);const X5e={};u&2&&(X5e.$$scope={dirty:u,ctx:f}),SC.$set(X5e);const z5e={};u&2&&(z5e.$$scope={dirty:u,ctx:f}),PC.$set(z5e);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),l5.$set(xw);const W5e={};u&2&&(W5e.$$scope={dirty:u,ctx:f}),d5.$set(W5e);const Q5e={};u&2&&(Q5e.$$scope={dirty:u,ctx:f}),F5.$set(Q5e);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),M5.$set($w);const H5e={};u&2&&(H5e.$$scope={dirty:u,ctx:f}),B5.$set(H5e);const U5e={};u&2&&(U5e.$$scope={dirty:u,ctx:f}),N5.$set(U5e);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),H5.$set(kw);const J5e={};u&2&&(J5e.$$scope={dirty:u,ctx:f}),J5.$set(J5e);const Y5e={};u&2&&(Y5e.$$scope={dirty:u,ctx:f}),s0.$set(Y5e);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),i0.$set(Sw);const K5e={};u&2&&(K5e.$$scope={dirty:u,ctx:f}),v0.$set(K5e);const Z5e={};u&2&&(Z5e.$$scope={dirty:u,ctx:f}),T0.$set(Z5e);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),S0.$set(Rw);const e0e={};u&2&&(e0e.$$scope={dirty:u,ctx:f}),P0.$set(e0e);const o0e={};u&2&&(o0e.$$scope={dirty:u,ctx:f}),V0.$set(o0e);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),z0.$set(Pw);const r0e={};u&2&&(r0e.$$scope={dirty:u,ctx:f}),ew.$set(r0e);const t0e={};u&2&&(t0e.$$scope={dirty:u,ctx:f}),rw.$set(t0e);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),aw.$set(Bw);const a0e={};u&2&&(a0e.$$scope={dirty:u,ctx:f}),sw.$set(a0e);const n0e={};u&2&&(n0e.$$scope={dirty:u,ctx:f}),dw.$set(n0e);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),fw.$set(Iw);const s0e={};u&2&&(s0e.$$scope={dirty:u,ctx:f}),gw.$set(s0e)},i(f){PDe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(BA.$$.fragment,f),E(IA.$$.fragment,f),E(Tf.$$.fragment,f),E(NA.$$.fragment,f),E(qA.$$.fragment,f),E(GA.$$.fragment,f),E(wg.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(QA.$$.fragment,f),E(sh.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(ZA.$$.fragment,f),E(qh.$$.fragment,f),E(jh.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ny.$$.fragment,f),E(np.$$.fragment,f),E(sp.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(dp.$$.fragment,f),E(fy.$$.fragment,f),E(nu.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(lu.$$.fragment,f),E(_y.$$.fragment,f),E(Yu.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(Zu.$$.fragment,f),E(Ty.$$.fragment,f),E(j4.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(G4.$$.fragment,f),E(Ay.$$.fragment,f),E(C1.$$.fragment,f),E(yy.$$.fragment,f),E(Ly.$$.fragment,f),E($y.$$.fragment,f),E(A1.$$.fragment,f),E(ky.$$.fragment,f),E(X1.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(W1.$$.fragment,f),E(Iy.$$.fragment,f),E(Gb.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(Vb.$$.fragment,f),E(Gy.$$.fragment,f),E(F2.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(M2.$$.fragment,f),E(Wy.$$.fragment,f),E(x2.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(k2.$$.fragment,f),E(Yy.$$.fragment,f),E(gv.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(oL.$$.fragment,f),E(pv.$$.fragment,f),E(rL.$$.fragment,f),E(t3.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(n3.$$.fragment,f),E(lL.$$.fragment,f),E(i3.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(c3.$$.fragment,f),E(mL.$$.fragment,f),E(C3.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(_L.$$.fragment,f),E(A3.$$.fragment,f),E(uL.$$.fragment,f),E(x3.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(k3.$$.fragment,f),E(ML.$$.fragment,f),E(O3.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(X3.$$.fragment,f),E(yL.$$.fragment,f),E(Y3.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(Z3.$$.fragment,f),E(SL.$$.fragment,f),E(cF.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(mF.$$.fragment,f),E(NL.$$.fragment,f),E(_F.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(bF.$$.fragment,f),E(VL.$$.fragment,f),E(wF.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(yF.$$.fragment,f),E(HL.$$.fragment,f),E(SF.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(PF.$$.fragment,f),E(ZL.$$.fragment,f),E(qF.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(DF.$$.fragment,f),E(n8.$$.fragment,f),E(VF.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(zF.$$.fragment,f),E(c8.$$.fragment,f),E(YF.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(ZF.$$.fragment,f),E(p8.$$.fragment,f),E(rT.$$.fragment,f),E(_8.$$.fragment,f),E(u8.$$.fragment,f),E(v8.$$.fragment,f),E(aT.$$.fragment,f),E(F8.$$.fragment,f),E(YT.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(ZT.$$.fragment,f),E(w8.$$.fragment,f),E(E7.$$.fragment,f),E(A8.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(w7.$$.fragment,f),E($8.$$.fragment,f),E(j7.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(P8.$$.fragment,f),E(G7.$$.fragment,f),E(B8.$$.fragment,f),E(W7.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(H7.$$.fragment,f),E(D8.$$.fragment,f),E(pM.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E(uM.$$.fragment,f),E(z8.$$.fragment,f),E(LM.$$.fragment,f),E(W8.$$.fragment,f),E(Q8.$$.fragment,f),E(U8.$$.fragment,f),E($M.$$.fragment,f),E(J8.$$.fragment,f),E(tE.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(e9.$$.fragment,f),E(nE.$$.fragment,f),E(o9.$$.fragment,f),E(EE.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(wE.$$.fragment,f),E(s9.$$.fragment,f),E(LE.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E($E.$$.fragment,f),E(m9.$$.fragment,f),E(SE.$$.fragment,f),E(g9.$$.fragment,f),E(h9.$$.fragment,f),E(_9.$$.fragment,f),E(PE.$$.fragment,f),E(u9.$$.fragment,f),E(oC.$$.fragment,f),E(b9.$$.fragment,f),E(v9.$$.fragment,f),E(T9.$$.fragment,f),E(tC.$$.fragment,f),E(M9.$$.fragment,f),E(CC.$$.fragment,f),E(E9.$$.fragment,f),E(C9.$$.fragment,f),E(A9.$$.fragment,f),E(AC.$$.fragment,f),E(y9.$$.fragment,f),E(LC.$$.fragment,f),E(L9.$$.fragment,f),E(x9.$$.fragment,f),E(k9.$$.fragment,f),E($C.$$.fragment,f),E(S9.$$.fragment,f),E(SC.$$.fragment,f),E(R9.$$.fragment,f),E(P9.$$.fragment,f),E(I9.$$.fragment,f),E(PC.$$.fragment,f),E(N9.$$.fragment,f),E(l5.$$.fragment,f),E(q9.$$.fragment,f),E(j9.$$.fragment,f),E(G9.$$.fragment,f),E(d5.$$.fragment,f),E(O9.$$.fragment,f),E(F5.$$.fragment,f),E(V9.$$.fragment,f),E(X9.$$.fragment,f),E(W9.$$.fragment,f),E(M5.$$.fragment,f),E(Q9.$$.fragment,f),E(B5.$$.fragment,f),E(H9.$$.fragment,f),E(U9.$$.fragment,f),E(Y9.$$.fragment,f),E(N5.$$.fragment,f),E(K9.$$.fragment,f),E(H5.$$.fragment,f),E(Z9.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(J5.$$.fragment,f),E(tx.$$.fragment,f),E(s0.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(i0.$$.fragment,f),E(ix.$$.fragment,f),E(v0.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(T0.$$.fragment,f),E(gx.$$.fragment,f),E(S0.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(P0.$$.fragment,f),E(bx.$$.fragment,f),E(V0.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(z0.$$.fragment,f),E(Ex.$$.fragment,f),E(ew.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(yx.$$.fragment,f),E(rw.$$.fragment,f),E(Lx.$$.fragment,f),E(aw.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(sw.$$.fragment,f),E(Rx.$$.fragment,f),E(dw.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(fw.$$.fragment,f),E(jx.$$.fragment,f),E(gw.$$.fragment,f),PDe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(BA.$$.fragment,f),C(IA.$$.fragment,f),C(Tf.$$.fragment,f),C(NA.$$.fragment,f),C(qA.$$.fragment,f),C(GA.$$.fragment,f),C(wg.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(QA.$$.fragment,f),C(sh.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(ZA.$$.fragment,f),C(qh.$$.fragment,f),C(jh.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ny.$$.fragment,f),C(np.$$.fragment,f),C(sp.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(dp.$$.fragment,f),C(fy.$$.fragment,f),C(nu.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(lu.$$.fragment,f),C(_y.$$.fragment,f),C(Yu.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(Zu.$$.fragment,f),C(Ty.$$.fragment,f),C(j4.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(G4.$$.fragment,f),C(Ay.$$.fragment,f),C(C1.$$.fragment,f),C(yy.$$.fragment,f),C(Ly.$$.fragment,f),C($y.$$.fragment,f),C(A1.$$.fragment,f),C(ky.$$.fragment,f),C(X1.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(W1.$$.fragment,f),C(Iy.$$.fragment,f),C(Gb.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(Vb.$$.fragment,f),C(Gy.$$.fragment,f),C(F2.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(M2.$$.fragment,f),C(Wy.$$.fragment,f),C(x2.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(k2.$$.fragment,f),C(Yy.$$.fragment,f),C(gv.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(oL.$$.fragment,f),C(pv.$$.fragment,f),C(rL.$$.fragment,f),C(t3.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(n3.$$.fragment,f),C(lL.$$.fragment,f),C(i3.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(c3.$$.fragment,f),C(mL.$$.fragment,f),C(C3.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(_L.$$.fragment,f),C(A3.$$.fragment,f),C(uL.$$.fragment,f),C(x3.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(k3.$$.fragment,f),C(ML.$$.fragment,f),C(O3.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(X3.$$.fragment,f),C(yL.$$.fragment,f),C(Y3.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(Z3.$$.fragment,f),C(SL.$$.fragment,f),C(cF.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(mF.$$.fragment,f),C(NL.$$.fragment,f),C(_F.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(bF.$$.fragment,f),C(VL.$$.fragment,f),C(wF.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(yF.$$.fragment,f),C(HL.$$.fragment,f),C(SF.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(PF.$$.fragment,f),C(ZL.$$.fragment,f),C(qF.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(DF.$$.fragment,f),C(n8.$$.fragment,f),C(VF.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(zF.$$.fragment,f),C(c8.$$.fragment,f),C(YF.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(ZF.$$.fragment,f),C(p8.$$.fragment,f),C(rT.$$.fragment,f),C(_8.$$.fragment,f),C(u8.$$.fragment,f),C(v8.$$.fragment,f),C(aT.$$.fragment,f),C(F8.$$.fragment,f),C(YT.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(ZT.$$.fragment,f),C(w8.$$.fragment,f),C(E7.$$.fragment,f),C(A8.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(w7.$$.fragment,f),C($8.$$.fragment,f),C(j7.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(P8.$$.fragment,f),C(G7.$$.fragment,f),C(B8.$$.fragment,f),C(W7.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(H7.$$.fragment,f),C(D8.$$.fragment,f),C(pM.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C(uM.$$.fragment,f),C(z8.$$.fragment,f),C(LM.$$.fragment,f),C(W8.$$.fragment,f),C(Q8.$$.fragment,f),C(U8.$$.fragment,f),C($M.$$.fragment,f),C(J8.$$.fragment,f),C(tE.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(e9.$$.fragment,f),C(nE.$$.fragment,f),C(o9.$$.fragment,f),C(EE.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(wE.$$.fragment,f),C(s9.$$.fragment,f),C(LE.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C($E.$$.fragment,f),C(m9.$$.fragment,f),C(SE.$$.fragment,f),C(g9.$$.fragment,f),C(h9.$$.fragment,f),C(_9.$$.fragment,f),C(PE.$$.fragment,f),C(u9.$$.fragment,f),C(oC.$$.fragment,f),C(b9.$$.fragment,f),C(v9.$$.fragment,f),C(T9.$$.fragment,f),C(tC.$$.fragment,f),C(M9.$$.fragment,f),C(CC.$$.fragment,f),C(E9.$$.fragment,f),C(C9.$$.fragment,f),C(A9.$$.fragment,f),C(AC.$$.fragment,f),C(y9.$$.fragment,f),C(LC.$$.fragment,f),C(L9.$$.fragment,f),C(x9.$$.fragment,f),C(k9.$$.fragment,f),C($C.$$.fragment,f),C(S9.$$.fragment,f),C(SC.$$.fragment,f),C(R9.$$.fragment,f),C(P9.$$.fragment,f),C(I9.$$.fragment,f),C(PC.$$.fragment,f),C(N9.$$.fragment,f),C(l5.$$.fragment,f),C(q9.$$.fragment,f),C(j9.$$.fragment,f),C(G9.$$.fragment,f),C(d5.$$.fragment,f),C(O9.$$.fragment,f),C(F5.$$.fragment,f),C(V9.$$.fragment,f),C(X9.$$.fragment,f),C(W9.$$.fragment,f),C(M5.$$.fragment,f),C(Q9.$$.fragment,f),C(B5.$$.fragment,f),C(H9.$$.fragment,f),C(U9.$$.fragment,f),C(Y9.$$.fragment,f),C(N5.$$.fragment,f),C(K9.$$.fragment,f),C(H5.$$.fragment,f),C(Z9.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(J5.$$.fragment,f),C(tx.$$.fragment,f),C(s0.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(i0.$$.fragment,f),C(ix.$$.fragment,f),C(v0.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(T0.$$.fragment,f),C(gx.$$.fragment,f),C(S0.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(P0.$$.fragment,f),C(bx.$$.fragment,f),C(V0.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(z0.$$.fragment,f),C(Ex.$$.fragment,f),C(ew.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(yx.$$.fragment,f),C(rw.$$.fragment,f),C(Lx.$$.fragment,f),C(aw.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(sw.$$.fragment,f),C(Rx.$$.fragment,f),C(dw.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(fw.$$.fragment,f),C(jx.$$.fragment,f),C(gw.$$.fragment,f),PDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(_f),f&&t(rt),f&&t(De),f&&t(We),f&&t(bf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(kqe),f&&t(vi),w(BA),f&&t(Sqe),f&&t(kn),f&&t(Rqe),w(IA,f),f&&t(Pqe),f&&t(nk),f&&t(Bqe),w(Tf,f),f&&t(Iqe),f&&t(Fi),w(NA),f&&t(Nqe),f&&t(Co),w(qA),w(GA),w(wg),w(OA),f&&t(qqe),f&&t(Mi),w(VA),f&&t(jqe),f&&t(wo),w(XA),w(QA),w(sh),w(HA),f&&t(Dqe),f&&t(Ei),w(UA),f&&t(Gqe),f&&t(Ao),w(JA),w(ZA),w(qh),w(jh),w(ey),f&&t(Oqe),f&&t(Ci),w(oy),f&&t(Vqe),f&&t(yo),w(ry),w(ny),w(np),w(sp),w(sy),f&&t(Xqe),f&&t(Ai),w(ly),f&&t(zqe),f&&t(Lo),w(iy),w(cy),w(dp),w(fy),w(nu),f&&t(Wqe),f&&t(xi),w(my),f&&t(Qqe),f&&t(xo),w(gy),w(py),w(lu),w(_y),w(Yu),f&&t(Hqe),f&&t(Si),w(uy),f&&t(Uqe),f&&t($o),w(by),w(Fy),w(Zu),w(Ty),w(j4),f&&t(Jqe),f&&t(Bi),w(My),f&&t(Yqe),f&&t(ko),w(Ey),w(wy),w(G4),w(Ay),w(C1),f&&t(Kqe),f&&t(qi),w(yy),f&&t(Zqe),f&&t(So),w(Ly),w($y),w(A1),w(ky),w(X1),f&&t(eje),f&&t(Gi),w(Sy),f&&t(oje),f&&t(Ro),w(Ry),w(By),w(W1),w(Iy),w(Gb),f&&t(rje),f&&t(Xi),w(Ny),f&&t(tje),f&&t(Po),w(qy),w(Dy),w(Vb),w(Gy),w(F2),f&&t(aje),f&&t(Qi),w(Oy),f&&t(nje),f&&t(Bo),w(Vy),w(zy),w(M2),w(Wy),w(x2),f&&t(sje),f&&t(Ji),w(Qy),f&&t(lje),f&&t(Io),w(Hy),w(Jy),w(k2),w(Yy),w(gv),f&&t(ije),f&&t(Zi),w(Ky),f&&t(dje),f&&t(No),w(Zy),w(oL),w(pv),w(rL),w(t3),f&&t(cje),f&&t(rd),w(tL),f&&t(fje),f&&t(qo),w(aL),w(sL),w(n3),w(lL),w(i3),f&&t(mje),f&&t(nd),w(iL),f&&t(gje),f&&t(jo),w(dL),w(fL),w(c3),w(mL),w(C3),f&&t(hje),f&&t(id),w(gL),f&&t(pje),f&&t(Do),w(hL),w(_L),w(A3),w(uL),w(x3),f&&t(_je),f&&t(fd),w(bL),f&&t(uje),f&&t(Go),w(vL),w(TL),w(k3),w(ML),w(O3),f&&t(bje),f&&t(hd),w(EL),f&&t(vje),f&&t(Oo),w(CL),w(AL),w(X3),w(yL),w(Y3),f&&t(Fje),f&&t(ud),w(LL),f&&t(Tje),f&&t(Vo),w(xL),w(kL),w(Z3),w(SL),w(cF),f&&t(Mje),f&&t(Fd),w(RL),f&&t(Eje),f&&t(Xo),w(PL),w(IL),w(mF),w(NL),w(_F),f&&t(Cje),f&&t(Ed),w(jL),f&&t(wje),f&&t(zo),w(DL),w(OL),w(bF),w(VL),w(wF),f&&t(Aje),f&&t(Ad),w(XL),f&&t(yje),f&&t(Wo),w(zL),w(QL),w(yF),w(HL),w(SF),f&&t(Lje),f&&t($d),w(UL),f&&t(xje),f&&t(Qo),w(JL),w(KL),w(PF),w(ZL),w(qF),f&&t($je),f&&t(Rd),w(o8),f&&t(kje),f&&t(Ho),w(r8),w(a8),w(DF),w(n8),w(VF),f&&t(Sje),f&&t(Id),w(s8),f&&t(Rje),f&&t(Uo),w(l8),w(d8),w(zF),w(c8),w(YF),f&&t(Pje),f&&t(jd),w(f8),f&&t(Bje),f&&t(Jo),w(m8),w(h8),w(ZF),w(p8),w(rT),f&&t(Ije),f&&t(Od),w(_8),f&&t(Nje),f&&t(Yo),w(u8),w(v8),w(aT),w(F8),w(YT),f&&t(qje),f&&t(zd),w(T8),f&&t(jje),f&&t(Ko),w(M8),w(C8),w(ZT),w(w8),w(E7),f&&t(Dje),f&&t(Hd),w(A8),f&&t(Gje),f&&t(Zo),w(y8),w(x8),w(w7),w($8),w(j7),f&&t(Oje),f&&t(Yd),w(k8),f&&t(Vje),f&&t(er),w(S8),w(P8),w(G7),w(B8),w(W7),f&&t(Xje),f&&t(ec),w(I8),f&&t(zje),f&&t(or),w(N8),w(j8),w(H7),w(D8),w(pM),f&&t(Wje),f&&t(tc),w(G8),f&&t(Qje),f&&t(rr),w(O8),w(X8),w(uM),w(z8),w(LM),f&&t(Hje),f&&t(sc),w(W8),f&&t(Uje),f&&t(tr),w(Q8),w(U8),w($M),w(J8),w(tE),f&&t(Jje),f&&t(dc),w(Y8),f&&t(Yje),f&&t(ar),w(K8),w(e9),w(nE),w(o9),w(EE),f&&t(Kje),f&&t(mc),w(r9),f&&t(Zje),f&&t(nr),w(t9),w(n9),w(wE),w(s9),w(LE),f&&t(eDe),f&&t(pc),w(i9),f&&t(oDe),f&&t(sr),w(d9),w(f9),w($E),w(m9),w(SE),f&&t(rDe),f&&t(bc),w(g9),f&&t(tDe),f&&t(lr),w(h9),w(_9),w(PE),w(u9),w(oC),f&&t(aDe),f&&t(Tc),w(b9),f&&t(nDe),f&&t(ir),w(v9),w(T9),w(tC),w(M9),w(CC),f&&t(sDe),f&&t(Cc),w(E9),f&&t(lDe),f&&t(dr),w(C9),w(A9),w(AC),w(y9),w(LC),f&&t(iDe),f&&t(yc),w(L9),f&&t(dDe),f&&t(cr),w(x9),w(k9),w($C),w(S9),w(SC),f&&t(cDe),f&&t($c),w(R9),f&&t(fDe),f&&t(fr),w(P9),w(I9),w(PC),w(N9),w(l5),f&&t(mDe),f&&t(Rc),w(q9),f&&t(gDe),f&&t(mr),w(j9),w(G9),w(d5),w(O9),w(F5),f&&t(hDe),f&&t(Ic),w(V9),f&&t(pDe),f&&t(gr),w(X9),w(W9),w(M5),w(Q9),w(B5),f&&t(_De),f&&t(jc),w(H9),f&&t(uDe),f&&t(hr),w(U9),w(Y9),w(N5),w(K9),w(H5),f&&t(bDe),f&&t(Oc),w(Z9),f&&t(vDe),f&&t(pr),w(ex),w(rx),w(J5),w(tx),w(s0),f&&t(FDe),f&&t(zc),w(ax),f&&t(TDe),f&&t(_r),w(nx),w(lx),w(i0),w(ix),w(v0),f&&t(MDe),f&&t(Hc),w(dx),f&&t(EDe),f&&t(ur),w(cx),w(mx),w(T0),w(gx),w(S0),f&&t(CDe),f&&t(Yc),w(hx),f&&t(wDe),f&&t(br),w(px),w(ux),w(P0),w(bx),w(V0),f&&t(ADe),f&&t(ef),w(vx),f&&t(yDe),f&&t(vr),w(Fx),w(Mx),w(z0),w(Ex),w(ew),f&&t(LDe),f&&t(tf),w(Cx),f&&t(xDe),f&&t(Fr),w(wx),w(yx),w(rw),w(Lx),w(aw),f&&t($De),f&&t(sf),w(xx),f&&t(kDe),f&&t(Tr),w($x),w(Sx),w(sw),w(Rx),w(dw),f&&t(SDe),f&&t(cf),w(Bx),f&&t(RDe),f&&t(Mr),w(Ix),w(qx),w(fw),w(jx),w(gw)}}}const QRt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function HRt(L){return Hkt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class oPt extends Xkt{constructor(g){super();zkt(this,g,HRt,WRt,Wkt,{})}}export{oPt as default,QRt as metadata};
