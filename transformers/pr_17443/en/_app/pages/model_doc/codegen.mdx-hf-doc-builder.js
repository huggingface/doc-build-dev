import{S as ti,i as ni,s as ri,e as n,k as p,w as b,t as s,M as ai,c as r,d as t,m as h,a,x as w,h as i,b as c,G as e,g as _,y as $,q as y,o as C,B as T,v as si,L as Pt}from"../../chunks/vendor-hf-doc-builder.js";import{T as vn}from"../../chunks/Tip-hf-doc-builder.js";import{D as Ee}from"../../chunks/Docstring-hf-doc-builder.js";import{C as Lo}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as ne}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as xt}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function ii(G){let d,k,g,f,v;return f=new Lo({props:{code:`from transformers import CodeGenModel, CodeGenConfig

# Initializing a CodeGen 6B configuration
configuration = CodeGenConfig()

# Initializing a model from the configuration
model = CodeGenModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> CodeGenModel, CodeGenConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a CodeGen 6B configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = CodeGenConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = CodeGenModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){d=n("p"),k=s("Example:"),g=p(),b(f.$$.fragment)},l(l){d=r(l,"P",{});var u=a(d);k=i(u,"Example:"),u.forEach(t),g=h(l),w(f.$$.fragment,l)},m(l,u){_(l,d,u),e(d,k),_(l,g,u),$(f,l,u),v=!0},p:Pt,i(l){v||(y(f.$$.fragment,l),v=!0)},o(l){C(f.$$.fragment,l),v=!1},d(l){l&&t(d),l&&t(g),T(f,l)}}}function li(G){let d,k,g,f,v;return f=new Lo({props:{code:`from transformers import CodeGenTokenizer
tokenizer = CodeGenTokenizer.from_pretrained("Salesforce/codegen-350M-mono")
tokenizer("Hello world")['input_ids']
tokenizer(" Hello world")['input_ids']`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> CodeGenTokenizer</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">tokenizer = CodeGenTokenizer.from_pretrained(<span class="hljs-string">&quot;Salesforce/codegen-350M-mono&quot;</span>)</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">tokenizer(<span class="hljs-string">&quot;Hello world&quot;</span>)[<span class="hljs-string">&#x27;input_ids&#x27;</span>]</span>
[15496, 995]
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">tokenizer(<span class="hljs-string">&quot; Hello world&quot;</span>)[<span class="hljs-string">&#x27;input_ids&#x27;</span>]</span>
[18435, 995]`}}),{c(){d=n("p"),k=s("be encoded differently whether it is at the beginning of the sentence (without space) or not:"),g=p(),b(f.$$.fragment)},l(l){d=r(l,"P",{});var u=a(d);k=i(u,"be encoded differently whether it is at the beginning of the sentence (without space) or not:"),u.forEach(t),g=h(l),w(f.$$.fragment,l)},m(l,u){_(l,d,u),e(d,k),_(l,g,u),$(f,l,u),v=!0},p:Pt,i(l){v||(y(f.$$.fragment,l),v=!0)},o(l){C(f.$$.fragment,l),v=!1},d(l){l&&t(d),l&&t(g),T(f,l)}}}function di(G){let d,k,g,f,v;return{c(){d=n("p"),k=s("When used with "),g=n("code"),f=s("is_split_into_words=True"),v=s(", this tokenizer will add a space before each word (even the first one).")},l(l){d=r(l,"P",{});var u=a(d);k=i(u,"When used with "),g=r(u,"CODE",{});var x=a(g);f=i(x,"is_split_into_words=True"),x.forEach(t),v=i(u,", this tokenizer will add a space before each word (even the first one)."),u.forEach(t)},m(l,u){_(l,d,u),e(d,k),e(d,g),e(g,f),e(d,v)},d(l){l&&t(d)}}}function ci(G){let d,k,g,f,v;return f=new Lo({props:{code:`from transformers import CodeGenTokenizerFast
tokenizer = CodeGenTokenizerFast.from_pretrained("Salesforce/codegen-350M-mono")
tokenizer("Hello world")['input_ids']
tokenizer(" Hello world")['input_ids']`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> CodeGenTokenizerFast</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">tokenizer = CodeGenTokenizerFast.from_pretrained(<span class="hljs-string">&quot;Salesforce/codegen-350M-mono&quot;</span>)</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">tokenizer(<span class="hljs-string">&quot;Hello world&quot;</span>)[<span class="hljs-string">&#x27;input_ids&#x27;</span>]</span>
[15496, 995]
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">tokenizer(<span class="hljs-string">&quot; Hello world&quot;</span>)[<span class="hljs-string">&#x27;input_ids&#x27;</span>]</span>
[18435, 995]`}}),{c(){d=n("p"),k=s("be encoded differently whether it is at the beginning of the sentence (without space) or not:"),g=p(),b(f.$$.fragment)},l(l){d=r(l,"P",{});var u=a(d);k=i(u,"be encoded differently whether it is at the beginning of the sentence (without space) or not:"),u.forEach(t),g=h(l),w(f.$$.fragment,l)},m(l,u){_(l,d,u),e(d,k),_(l,g,u),$(f,l,u),v=!0},p:Pt,i(l){v||(y(f.$$.fragment,l),v=!0)},o(l){C(f.$$.fragment,l),v=!1},d(l){l&&t(d),l&&t(g),T(f,l)}}}function pi(G){let d,k,g,f,v,l,u,x;return{c(){d=n("p"),k=s("When used with "),g=n("code"),f=s("is_split_into_words=True"),v=s(", this tokenizer needs to be instantiated with "),l=n("code"),u=s("add_prefix_space=True"),x=s(".")},l(V){d=r(V,"P",{});var F=a(d);k=i(F,"When used with "),g=r(F,"CODE",{});var A=a(g);f=i(A,"is_split_into_words=True"),A.forEach(t),v=i(F,", this tokenizer needs to be instantiated with "),l=r(F,"CODE",{});var N=a(l);u=i(N,"add_prefix_space=True"),N.forEach(t),x=i(F,"."),F.forEach(t)},m(V,F){_(V,d,F),e(d,k),e(d,g),e(g,f),e(d,v),e(d,l),e(l,u),e(d,x)},d(V){V&&t(d)}}}function hi(G){let d,k,g,f,v;return{c(){d=n("p"),k=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=n("code"),f=s("Module"),v=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=r(l,"P",{});var u=a(d);k=i(u,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r(u,"CODE",{});var x=a(g);f=i(x,"Module"),x.forEach(t),v=i(u,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),u.forEach(t)},m(l,u){_(l,d,u),e(d,k),e(d,g),e(g,f),e(d,v)},d(l){l&&t(d)}}}function fi(G){let d,k,g,f,v;return f=new Lo({props:{code:`from transformers import GPT2Tokenizer, CodeGenModel
import torch

tokenizer = GPT2Tokenizer.from_pretrained("Salesforce/codegen-2B-mono")
model = CodeGenModel.from_pretrained("Salesforce/codegen-2B-mono")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, CodeGenModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;Salesforce/codegen-2B-mono&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = CodeGenModel.from_pretrained(<span class="hljs-string">&quot;Salesforce/codegen-2B-mono&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),{c(){d=n("p"),k=s("Example:"),g=p(),b(f.$$.fragment)},l(l){d=r(l,"P",{});var u=a(d);k=i(u,"Example:"),u.forEach(t),g=h(l),w(f.$$.fragment,l)},m(l,u){_(l,d,u),e(d,k),_(l,g,u),$(f,l,u),v=!0},p:Pt,i(l){v||(y(f.$$.fragment,l),v=!0)},o(l){C(f.$$.fragment,l),v=!1},d(l){l&&t(d),l&&t(g),T(f,l)}}}function mi(G){let d,k,g,f,v;return{c(){d=n("p"),k=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=n("code"),f=s("Module"),v=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=r(l,"P",{});var u=a(d);k=i(u,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r(u,"CODE",{});var x=a(g);f=i(x,"Module"),x.forEach(t),v=i(u,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),u.forEach(t)},m(l,u){_(l,d,u),e(d,k),e(d,g),e(g,f),e(d,v)},d(l){l&&t(d)}}}function ui(G){let d,k,g,f,v;return f=new Lo({props:{code:`import torch
from transformers import GPT2Tokenizer, CodeGenForCausalLM

tokenizer = GPT2Tokenizer.from_pretrained("Salesforce/codegen-2B-mono")
model = CodeGenForCausalLM.from_pretrained("Salesforce/codegen-2B-mono")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs, labels=inputs["input_ids"])
loss = outputs.loss
logits = outputs.logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, CodeGenForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;Salesforce/codegen-2B-mono&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = CodeGenForCausalLM.from_pretrained(<span class="hljs-string">&quot;Salesforce/codegen-2B-mono&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, labels=inputs[<span class="hljs-string">&quot;input_ids&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),{c(){d=n("p"),k=s("Example:"),g=p(),b(f.$$.fragment)},l(l){d=r(l,"P",{});var u=a(d);k=i(u,"Example:"),u.forEach(t),g=h(l),w(f.$$.fragment,l)},m(l,u){_(l,d,u),e(d,k),_(l,g,u),$(f,l,u),v=!0},p:Pt,i(l){v||(y(f.$$.fragment,l),v=!0)},o(l){C(f.$$.fragment,l),v=!1},d(l){l&&t(d),l&&t(g),T(f,l)}}}function gi(G){let d,k,g,f,v,l,u,x,V,F,A,N,Ao,xe,kn,Oo,bn,Mt,re,wn,Pe,$n,yn,Ft,ae,Cn,Me,Tn,zn,qt,_o,Gn,jt,vo,Fe,En,qe,xn,Pn,Lt,B,Mn,je,Fn,qn,Le,jn,Ln,At,R,se,So,Ae,An,No,On,Ot,W,Oe,Sn,Se,Nn,In,Dn,ie,Bn,Io,Wn,Hn,Ne,q,Do,Un,Vn,Bo,Rn,Yn,Wo,Jn,Qn,Ho,Xn,Zn,Uo,Kn,er,Ie,Vo,or,tr,Y,ko,Ro,nr,rr,ar,le,Yo,sr,ir,Jo,lr,dr,cr,de,Qo,pr,hr,Xo,fr,mr,ur,De,gr,Zo,_r,vr,St,J,ce,Ko,Be,kr,et,br,Nt,We,It,Q,pe,ot,He,wr,tt,$r,Dt,I,Ue,yr,j,Cr,bo,Tr,zr,Ve,Gr,Er,wo,xr,Pr,$o,Mr,Fr,qr,he,Bt,X,fe,nt,Re,jr,rt,Lr,Wt,z,Ye,Ar,at,Or,Sr,st,Nr,Ir,me,Dr,Je,Br,it,Wr,Hr,Ur,ue,Vr,Qe,Rr,yo,Yr,Jr,Qr,Co,Xe,Ht,Z,ge,lt,Ze,Xr,dt,Zr,Ut,E,Ke,Kr,eo,ea,ct,oa,ta,na,pt,ra,aa,_e,sa,oo,ia,ht,la,da,ca,ve,pa,to,ha,To,fa,ma,Vt,K,ke,ft,no,ua,mt,ga,Rt,D,ro,_a,ao,va,so,ka,ba,wa,O,io,$a,ee,ya,zo,Ca,Ta,ut,za,Ga,Ea,be,xa,we,Yt,oe,$e,gt,lo,Pa,_t,Ma,Jt,L,co,Fa,vt,qa,ja,po,La,ho,Aa,Oa,Sa,S,fo,Na,te,Ia,Go,Da,Ba,kt,Wa,Ha,Ua,ye,Va,Ce,Qt;return l=new ne({}),xe=new ne({}),Ae=new ne({}),Be=new ne({}),We=new Lo({props:{code:`from transformers import AutoModelForCausalLM, AutoTokenizer

checkpoint = "Salesforce/codegen-350M-mono"
model = AutoModelForCausalLM.from_pretrained(checkpoint)
tokenizer = AutoTokenizer.from_pretrained(checkpoint)

text = "def hello_world():"

completion = model.generate(**tokenizer(text, return_tensors="pt"))

print(tokenizer.decode(completion[0]))
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForCausalLM, AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>checkpoint = <span class="hljs-string">&quot;Salesforce/codegen-350M-mono&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(checkpoint)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(checkpoint)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;def hello_world():&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>completion = model.generate(**tokenizer(text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>))

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(tokenizer.decode(completion[<span class="hljs-number">0</span>]))
<span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)

hello_world()`}}),He=new ne({}),Ue=new Ee({props:{name:"class transformers.CodeGenConfig",anchor:"transformers.CodeGenConfig",parameters:[{name:"vocab_size",val:" = 50400"},{name:"n_positions",val:" = 2048"},{name:"n_ctx",val:" = 2048"},{name:"n_embd",val:" = 4096"},{name:"n_layer",val:" = 28"},{name:"n_head",val:" = 16"},{name:"rotary_dim",val:" = 64"},{name:"n_inner",val:" = None"},{name:"activation_function",val:" = 'gelu_new'"},{name:"resid_pdrop",val:" = 0.0"},{name:"embd_pdrop",val:" = 0.0"},{name:"attn_pdrop",val:" = 0.0"},{name:"layer_norm_epsilon",val:" = 1e-05"},{name:"initializer_range",val:" = 0.02"},{name:"scale_attn_weights",val:" = True"},{name:"use_cache",val:" = True"},{name:"bos_token_id",val:" = 50256"},{name:"eos_token_id",val:" = 50256"},{name:"tie_word_embeddings",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.CodeGenConfig.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 50400) &#x2014;
Vocabulary size of the CodeGen model. Defines the number of different tokens that can be represented by the
<code>inputs_ids</code> passed when calling <a href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a>.`,name:"vocab_size"},{anchor:"transformers.CodeGenConfig.n_positions",description:`<strong>n_positions</strong> (<code>int</code>, <em>optional</em>, defaults to 2048) &#x2014;
The maximum sequence length that this model might ever be used with. Typically set this to something large
just in case (e.g., 512 or 1024 or 2048).`,name:"n_positions"},{anchor:"transformers.CodeGenConfig.n_embd",description:`<strong>n_embd</strong> (<code>int</code>, <em>optional</em>, defaults to 4096) &#x2014;
Dimensionality of the embeddings and hidden states.`,name:"n_embd"},{anchor:"transformers.CodeGenConfig.n_layer",description:`<strong>n_layer</strong> (<code>int</code>, <em>optional</em>, defaults to 28) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"n_layer"},{anchor:"transformers.CodeGenConfig.n_head",description:`<strong>n_head</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"n_head"},{anchor:"transformers.CodeGenConfig.rotary_dim",description:`<strong>rotary_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 64) &#x2014;
Number of dimensions in the embedding that Rotary Position Embedding is applied to.`,name:"rotary_dim"},{anchor:"transformers.CodeGenConfig.n_inner",description:`<strong>n_inner</strong> (<code>int</code>, <em>optional</em>, defaults to None) &#x2014;
Dimensionality of the inner feed-forward layers. <code>None</code> will set it to 4 times n_embd`,name:"n_inner"},{anchor:"transformers.CodeGenConfig.activation_function",description:`<strong>activation_function</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;gelu_new&quot;</code>) &#x2014;
Activation function, to be selected in the list <code>[&quot;relu&quot;, &quot;silu&quot;, &quot;gelu&quot;, &quot;tanh&quot;, &quot;gelu_new&quot;]</code>.`,name:"activation_function"},{anchor:"transformers.CodeGenConfig.resid_pdrop",description:`<strong>resid_pdrop</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.`,name:"resid_pdrop"},{anchor:"transformers.CodeGenConfig.embd_pdrop",description:`<strong>embd_pdrop</strong> (<code>int</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the embeddings.`,name:"embd_pdrop"},{anchor:"transformers.CodeGenConfig.attn_pdrop",description:`<strong>attn_pdrop</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the attention.`,name:"attn_pdrop"},{anchor:"transformers.CodeGenConfig.layer_norm_epsilon",description:`<strong>layer_norm_epsilon</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-5) &#x2014;
The epsilon to use in the layer normalization layers.`,name:"layer_norm_epsilon"},{anchor:"transformers.CodeGenConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.CodeGenConfig.scale_attn_weights",description:`<strong>scale_attn_weights</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Scale attention weights by dividing by sqrt(hidden_size).`,name:"scale_attn_weights"},{anchor:"transformers.CodeGenConfig.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the model should return the last key/values attentions (not used by all models).`,name:"use_cache"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/codegen/configuration_codegen.py#L44"}}),he=new xt({props:{anchor:"transformers.CodeGenConfig.example",$$slots:{default:[ii]},$$scope:{ctx:G}}}),Re=new ne({}),Ye=new Ee({props:{name:"class transformers.CodeGenTokenizer",anchor:"transformers.CodeGenTokenizer",parameters:[{name:"vocab_file",val:""},{name:"merges_file",val:""},{name:"errors",val:" = 'replace'"},{name:"unk_token",val:" = '<|endoftext|>'"},{name:"bos_token",val:" = '<|endoftext|>'"},{name:"eos_token",val:" = '<|endoftext|>'"},{name:"pad_token",val:" = None"},{name:"add_prefix_space",val:" = False"},{name:"add_bos_token",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.CodeGenTokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
Path to the vocabulary file.`,name:"vocab_file"},{anchor:"transformers.CodeGenTokenizer.merges_file",description:`<strong>merges_file</strong> (<code>str</code>) &#x2014;
Path to the merges file.`,name:"merges_file"},{anchor:"transformers.CodeGenTokenizer.errors",description:`<strong>errors</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;replace&quot;</code>) &#x2014;
Paradigm to follow when decoding bytes to UTF-8. See
<a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow">bytes.decode</a> for more information.`,name:"errors"},{anchor:"transformers.CodeGenTokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&lt;|endoftext|&gt;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.CodeGenTokenizer.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&lt;|endoftext|&gt;</code>) &#x2014;
The beginning of sequence token.`,name:"bos_token"},{anchor:"transformers.CodeGenTokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&lt;|endoftext|&gt;</code>) &#x2014;
The end of sequence token.`,name:"eos_token"},{anchor:"transformers.CodeGenTokenizer.add_prefix_space",description:`<strong>add_prefix_space</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to add an initial space to the input. This allows to treat the leading word just as any
other word. (CodeGen tokenizer detect beginning of words by the preceding space).`,name:"add_prefix_space"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/codegen/tokenization_codegen.py#L98"}}),me=new xt({props:{anchor:"transformers.CodeGenTokenizer.example",$$slots:{default:[li]},$$scope:{ctx:G}}}),ue=new vn({props:{$$slots:{default:[di]},$$scope:{ctx:G}}}),Xe=new Ee({props:{name:"save_vocabulary",anchor:"transformers.CodeGenTokenizer.save_vocabulary",parameters:[{name:"save_directory",val:": str"},{name:"filename_prefix",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/codegen/tokenization_codegen.py#L282"}}),Ze=new ne({}),Ke=new Ee({props:{name:"class transformers.CodeGenTokenizerFast",anchor:"transformers.CodeGenTokenizerFast",parameters:[{name:"vocab_file",val:" = None"},{name:"merges_file",val:" = None"},{name:"tokenizer_file",val:" = None"},{name:"unk_token",val:" = '<|endoftext|>'"},{name:"bos_token",val:" = '<|endoftext|>'"},{name:"eos_token",val:" = '<|endoftext|>'"},{name:"add_prefix_space",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.CodeGenTokenizerFast.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
Path to the vocabulary file.`,name:"vocab_file"},{anchor:"transformers.CodeGenTokenizerFast.merges_file",description:`<strong>merges_file</strong> (<code>str</code>) &#x2014;
Path to the merges file.`,name:"merges_file"},{anchor:"transformers.CodeGenTokenizerFast.errors",description:`<strong>errors</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;replace&quot;</code>) &#x2014;
Paradigm to follow when decoding bytes to UTF-8. See
<a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow">bytes.decode</a> for more information.`,name:"errors"},{anchor:"transformers.CodeGenTokenizerFast.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&lt;|endoftext|&gt;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.CodeGenTokenizerFast.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&lt;|endoftext|&gt;</code>) &#x2014;
The beginning of sequence token.`,name:"bos_token"},{anchor:"transformers.CodeGenTokenizerFast.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&lt;|endoftext|&gt;</code>) &#x2014;
The end of sequence token.`,name:"eos_token"},{anchor:"transformers.CodeGenTokenizerFast.add_prefix_space",description:`<strong>add_prefix_space</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to add an initial space to the input. This allows to treat the leading word just as any
other word. (CodeGen tokenizer detect beginning of words by the preceding space).`,name:"add_prefix_space"},{anchor:"transformers.CodeGenTokenizerFast.trim_offsets",description:`<strong>trim_offsets</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the post-processing step should trim offsets to avoid including whitespaces.`,name:"trim_offsets"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/codegen/tokenization_codegen_fast.py#L63"}}),_e=new xt({props:{anchor:"transformers.CodeGenTokenizerFast.example",$$slots:{default:[ci]},$$scope:{ctx:G}}}),ve=new vn({props:{$$slots:{default:[pi]},$$scope:{ctx:G}}}),no=new ne({}),ro=new Ee({props:{name:"class transformers.CodeGenModel",anchor:"transformers.CodeGenModel",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.CodeGenModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/codegen/modeling_codegen.py#L425"}}),io=new Ee({props:{name:"forward",anchor:"transformers.CodeGenModel.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.Tensor]]] = None"},{name:"attention_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"position_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"head_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.FloatTensor] = None"},{name:"use_cache",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.CodeGenModel.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Tokenizer">GPT2Tokenizer</a>. See <a href="/docs/transformers/pr_17443/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.CodeGenModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.CodeGenModel.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.CodeGenModel.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.n_positions - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.CodeGenModel.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_attention_heads,)</code> or <code>(n_layer, num_attention_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.CodeGenModel.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_dim)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <em>input_ids</em> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.CodeGenModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.CodeGenModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.CodeGenModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17443/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/codegen/modeling_codegen.py#L448",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17443/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPast"
>transformers.modeling_outputs.BaseModelOutputWithPast</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenConfig"
>CodeGenConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
<p>If <code>past_key_values</code> is used only the last hidden-state of the sequences of shape <code>(batch_size, 1, hidden_size)</code> is output.</p>
</li>
<li>
<p><strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) \u2014 Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and optionally if
<code>config.is_encoder_decoder=True</code> 2 additional tensors of shape <code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and optionally if
<code>config.is_encoder_decoder=True</code> in the cross-attention blocks) that can be used (see <code>past_key_values</code>
input) to speed up sequential decoding.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17443/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPast"
>transformers.modeling_outputs.BaseModelOutputWithPast</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),be=new vn({props:{$$slots:{default:[hi]},$$scope:{ctx:G}}}),we=new xt({props:{anchor:"transformers.CodeGenModel.forward.example",$$slots:{default:[fi]},$$scope:{ctx:G}}}),lo=new ne({}),co=new Ee({props:{name:"class transformers.CodeGenForCausalLM",anchor:"transformers.CodeGenForCausalLM",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.CodeGenForCausalLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/codegen/modeling_codegen.py#L617"}}),fo=new Ee({props:{name:"forward",anchor:"transformers.CodeGenForCausalLM.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.Tensor]]] = None"},{name:"attention_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"position_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"head_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.FloatTensor] = None"},{name:"labels",val:": typing.Optional[torch.LongTensor] = None"},{name:"use_cache",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.CodeGenForCausalLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17443/en/model_doc/gpt2#transformers.GPT2Tokenizer">GPT2Tokenizer</a>. See <a href="/docs/transformers/pr_17443/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17443/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.CodeGenForCausalLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.CodeGenForCausalLM.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.CodeGenForCausalLM.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.n_positions - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.CodeGenForCausalLM.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_attention_heads,)</code> or <code>(n_layer, num_attention_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.CodeGenForCausalLM.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_dim)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <em>input_ids</em> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.CodeGenForCausalLM.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.CodeGenForCausalLM.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.CodeGenForCausalLM.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17443/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.CodeGenForCausalLM.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for language modeling. Note that the labels <strong>are shifted</strong> inside the model, i.e. you can set
<code>labels = input_ids</code> Indices are selected in <code>[-100, 0, ..., config.vocab_size]</code> All labels set to <code>-100</code>
are ignored (masked), the loss is only computed for labels in <code>[0, ..., config.vocab_size]</code>`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/codegen/modeling_codegen.py#L662",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17443/en/main_classes/output#transformers.modeling_outputs.CausalLMOutputWithPast"
>transformers.modeling_outputs.CausalLMOutputWithPast</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenConfig"
>CodeGenConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Language modeling loss (for next-token prediction).</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) \u2014 Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).</p>
</li>
<li>
<p><strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) \u2014 Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>)</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks) that can be used (see
<code>past_key_values</code> input) to speed up sequential decoding.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17443/en/main_classes/output#transformers.modeling_outputs.CausalLMOutputWithPast"
>transformers.modeling_outputs.CausalLMOutputWithPast</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ye=new vn({props:{$$slots:{default:[mi]},$$scope:{ctx:G}}}),Ce=new xt({props:{anchor:"transformers.CodeGenForCausalLM.forward.example",$$slots:{default:[ui]},$$scope:{ctx:G}}}),{c(){d=n("meta"),k=p(),g=n("h1"),f=n("a"),v=n("span"),b(l.$$.fragment),u=p(),x=n("span"),V=s("CodeGen"),F=p(),A=n("h2"),N=n("a"),Ao=n("span"),b(xe.$$.fragment),kn=p(),Oo=n("span"),bn=s("Overview"),Mt=p(),re=n("p"),wn=s("The CodeGen model was proposed in "),Pe=n("a"),$n=s("A Conversational Paradigm for Program Synthesis"),yn=s(" by Erik Nijkamp, Bo Pang, Hiroaki Hayashi, Lifu Tu, Huan Wang, Yingbo Zhou, Silvio Savarese, and Caiming Xiong."),Ft=p(),ae=n("p"),Cn=s("CodeGen is an autoregressive language model for program synthesis trained sequentially on "),Me=n("a"),Tn=s("The Pile"),zn=s(", BigQuery, and BigPython."),qt=p(),_o=n("p"),Gn=s("The abstract from the paper is the following:"),jt=p(),vo=n("p"),Fe=n("em"),En=s("Program synthesis strives to generate a computer program as a solution to a given problem specification. We propose a conversational program synthesis approach via large language models, which addresses the challenges of searching over a vast program space and user intent specification faced in prior approaches. Our new approach casts the process of writing a specification and program as a multi-turn conversation between a user and a system. It treats program synthesis as a sequence prediction problem, in which the specification is expressed in natural language and the desired program is conditionally sampled. We train a family of large language models, called CodeGen, on natural language and programming language data. With weak supervision in the data and the scaling up of data size and model size, conversational capacities emerge from the simple autoregressive language modeling. To study the model behavior on conversational program synthesis, we develop a multi-turn programming benchmark (MTPB), where solving each problem requires multi-step synthesis via multi-turn conversation between the user and the model. Our findings show the emergence of conversational capabilities and the effectiveness of the proposed conversational program synthesis paradigm. In addition, our model CodeGen (with up to 16B parameters trained on TPU-v4) outperforms OpenAI\u2019s Codex on the HumanEval benchmark. We make the training library JaxFormer including checkpoints available as open source contribution: "),qe=n("a"),xn=s("this https URL"),Pn=s("."),Lt=p(),B=n("p"),Mn=s("This model was contributed by "),je=n("a"),Fn=s("Hiroaki Hayashi"),qn=s(`.
The original code can be found `),Le=n("a"),jn=s("here"),Ln=s("."),At=p(),R=n("h2"),se=n("a"),So=n("span"),b(Ae.$$.fragment),An=p(),No=n("span"),On=s("Checkpoint Naming"),Ot=p(),W=n("ul"),Oe=n("li"),Sn=s("CodeGen model "),Se=n("a"),Nn=s("checkpoints"),In=s(" are available on different pre-training data with variable sizes."),Dn=p(),ie=n("li"),Bn=s("The format is: "),Io=n("code"),Wn=s("Salesforce/codegen-{size}-{data}"),Hn=s(", where"),Ne=n("ul"),q=n("li"),Do=n("code"),Un=s("size"),Vn=s(": "),Bo=n("code"),Rn=s("350M"),Yn=s(", "),Wo=n("code"),Jn=s("2B"),Qn=s(", "),Ho=n("code"),Xn=s("6B"),Zn=s(", "),Uo=n("code"),Kn=s("16B"),er=p(),Ie=n("li"),Vo=n("code"),or=s("data"),tr=s(": "),Y=n("ul"),ko=n("li"),Ro=n("code"),nr=s("nl"),rr=s(": Pre-trained on the Pile"),ar=p(),le=n("li"),Yo=n("code"),sr=s("multi"),ir=s(": Initialized with "),Jo=n("code"),lr=s("nl"),dr=s(", then further pre-trained on multiple programming languages data"),cr=p(),de=n("li"),Qo=n("code"),pr=s("mono"),hr=s(": Initialized with "),Xo=n("code"),fr=s("multi"),mr=s(", then further pre-trained on Python data"),ur=p(),De=n("li"),gr=s("For example, "),Zo=n("code"),_r=s("Salesforce/codegen-350M-mono"),vr=s(" offers a 350 million-parameter checkpoint pre-trained sequentially on the Pile, multiple programming languages, and Python."),St=p(),J=n("h2"),ce=n("a"),Ko=n("span"),b(Be.$$.fragment),kr=p(),et=n("span"),br=s("How to use"),Nt=p(),b(We.$$.fragment),It=p(),Q=n("h2"),pe=n("a"),ot=n("span"),b(He.$$.fragment),wr=p(),tt=n("span"),$r=s("CodeGenConfig"),Dt=p(),I=n("div"),b(Ue.$$.fragment),yr=p(),j=n("p"),Cr=s("This is the configuration class to store the configuration of a "),bo=n("a"),Tr=s("CodeGenModel"),zr=s(`. It is used to instantiate a
CodeGen model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the CodeGen
`),Ve=n("a"),Gr=s("Salesforce/codegen-2B-mono"),Er=s(` architecture. Configuration objects
inherit from `),wo=n("a"),xr=s("PretrainedConfig"),Pr=s(` and can be used to control the model outputs. Read the documentation from
`),$o=n("a"),Mr=s("PretrainedConfig"),Fr=s(" for more information."),qr=p(),b(he.$$.fragment),Bt=p(),X=n("h2"),fe=n("a"),nt=n("span"),b(Re.$$.fragment),jr=p(),rt=n("span"),Lr=s("CodeGenTokenizer"),Wt=p(),z=n("div"),b(Ye.$$.fragment),Ar=p(),at=n("p"),Or=s("Construct a CodeGen tokenizer. Based on byte-level Byte-Pair-Encoding."),Sr=p(),st=n("p"),Nr=s("This tokenizer has been trained to treat spaces like parts of the tokens (a bit like sentencepiece) so a word will"),Ir=p(),b(me.$$.fragment),Dr=p(),Je=n("p"),Br=s("You can get around that behavior by passing "),it=n("code"),Wr=s("add_prefix_space=True"),Hr=s(` when instantiating this tokenizer or when you
call it on some text, but since the model was not pretrained this way, it might yield a decrease in performance.`),Ur=p(),b(ue.$$.fragment),Vr=p(),Qe=n("p"),Rr=s("This tokenizer inherits from "),yo=n("a"),Yr=s("PreTrainedTokenizer"),Jr=s(` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),Qr=p(),Co=n("div"),b(Xe.$$.fragment),Ht=p(),Z=n("h2"),ge=n("a"),lt=n("span"),b(Ze.$$.fragment),Xr=p(),dt=n("span"),Zr=s("CodeGenTokenizerFast"),Ut=p(),E=n("div"),b(Ke.$$.fragment),Kr=p(),eo=n("p"),ea=s("Construct a \u201Cfast\u201D CodeGen tokenizer (backed by HuggingFace\u2019s "),ct=n("em"),oa=s("tokenizers"),ta=s(` library). Based on byte-level
Byte-Pair-Encoding.`),na=p(),pt=n("p"),ra=s("This tokenizer has been trained to treat spaces like parts of the tokens (a bit like sentencepiece) so a word will"),aa=p(),b(_e.$$.fragment),sa=p(),oo=n("p"),ia=s("You can get around that behavior by passing "),ht=n("code"),la=s("add_prefix_space=True"),da=s(` when instantiating this tokenizer, but since
the model was not pretrained this way, it might yield a decrease in performance.`),ca=p(),b(ve.$$.fragment),pa=p(),to=n("p"),ha=s("This tokenizer inherits from "),To=n("a"),fa=s("PreTrainedTokenizerFast"),ma=s(` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),Vt=p(),K=n("h2"),ke=n("a"),ft=n("span"),b(no.$$.fragment),ua=p(),mt=n("span"),ga=s("CodeGenModel"),Rt=p(),D=n("div"),b(ro.$$.fragment),_a=p(),ao=n("p"),va=s(`The bare CodeGen Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),so=n("a"),ka=s("torch.nn.Module"),ba=s(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),wa=p(),O=n("div"),b(io.$$.fragment),$a=p(),ee=n("p"),ya=s("The "),zo=n("a"),Ca=s("CodeGenModel"),Ta=s(" forward method, overrides the "),ut=n("code"),za=s("__call__"),Ga=s(" special method."),Ea=p(),b(be.$$.fragment),xa=p(),b(we.$$.fragment),Yt=p(),oe=n("h2"),$e=n("a"),gt=n("span"),b(lo.$$.fragment),Pa=p(),_t=n("span"),Ma=s("CodeGenForCausalLM"),Jt=p(),L=n("div"),b(co.$$.fragment),Fa=p(),vt=n("p"),qa=s("The CodeGen Model transformer with a language modeling head on top."),ja=p(),po=n("p"),La=s("This model is a PyTorch "),ho=n("a"),Aa=s("torch.nn.Module"),Oa=s(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Sa=p(),S=n("div"),b(fo.$$.fragment),Na=p(),te=n("p"),Ia=s("The "),Go=n("a"),Da=s("CodeGenForCausalLM"),Ba=s(" forward method, overrides the "),kt=n("code"),Wa=s("__call__"),Ha=s(" special method."),Ua=p(),b(ye.$$.fragment),Va=p(),b(Ce.$$.fragment),this.h()},l(o){const m=ai('[data-svelte="svelte-1phssyn"]',document.head);d=r(m,"META",{name:!0,content:!0}),m.forEach(t),k=h(o),g=r(o,"H1",{class:!0});var mo=a(g);f=r(mo,"A",{id:!0,class:!0,href:!0});var bt=a(f);v=r(bt,"SPAN",{});var wt=a(v);w(l.$$.fragment,wt),wt.forEach(t),bt.forEach(t),u=h(mo),x=r(mo,"SPAN",{});var $t=a(x);V=i($t,"CodeGen"),$t.forEach(t),mo.forEach(t),F=h(o),A=r(o,"H2",{class:!0});var uo=a(A);N=r(uo,"A",{id:!0,class:!0,href:!0});var yt=a(N);Ao=r(yt,"SPAN",{});var Ct=a(Ao);w(xe.$$.fragment,Ct),Ct.forEach(t),yt.forEach(t),kn=h(uo),Oo=r(uo,"SPAN",{});var Tt=a(Oo);bn=i(Tt,"Overview"),Tt.forEach(t),uo.forEach(t),Mt=h(o),re=r(o,"P",{});var go=a(re);wn=i(go,"The CodeGen model was proposed in "),Pe=r(go,"A",{href:!0,rel:!0});var Ya=a(Pe);$n=i(Ya,"A Conversational Paradigm for Program Synthesis"),Ya.forEach(t),yn=i(go," by Erik Nijkamp, Bo Pang, Hiroaki Hayashi, Lifu Tu, Huan Wang, Yingbo Zhou, Silvio Savarese, and Caiming Xiong."),go.forEach(t),Ft=h(o),ae=r(o,"P",{});var Xt=a(ae);Cn=i(Xt,"CodeGen is an autoregressive language model for program synthesis trained sequentially on "),Me=r(Xt,"A",{href:!0,rel:!0});var Ja=a(Me);Tn=i(Ja,"The Pile"),Ja.forEach(t),zn=i(Xt,", BigQuery, and BigPython."),Xt.forEach(t),qt=h(o),_o=r(o,"P",{});var Qa=a(_o);Gn=i(Qa,"The abstract from the paper is the following:"),Qa.forEach(t),jt=h(o),vo=r(o,"P",{});var Xa=a(vo);Fe=r(Xa,"EM",{});var Zt=a(Fe);En=i(Zt,"Program synthesis strives to generate a computer program as a solution to a given problem specification. We propose a conversational program synthesis approach via large language models, which addresses the challenges of searching over a vast program space and user intent specification faced in prior approaches. Our new approach casts the process of writing a specification and program as a multi-turn conversation between a user and a system. It treats program synthesis as a sequence prediction problem, in which the specification is expressed in natural language and the desired program is conditionally sampled. We train a family of large language models, called CodeGen, on natural language and programming language data. With weak supervision in the data and the scaling up of data size and model size, conversational capacities emerge from the simple autoregressive language modeling. To study the model behavior on conversational program synthesis, we develop a multi-turn programming benchmark (MTPB), where solving each problem requires multi-step synthesis via multi-turn conversation between the user and the model. Our findings show the emergence of conversational capabilities and the effectiveness of the proposed conversational program synthesis paradigm. In addition, our model CodeGen (with up to 16B parameters trained on TPU-v4) outperforms OpenAI\u2019s Codex on the HumanEval benchmark. We make the training library JaxFormer including checkpoints available as open source contribution: "),qe=r(Zt,"A",{href:!0,rel:!0});var Za=a(qe);xn=i(Za,"this https URL"),Za.forEach(t),Pn=i(Zt,"."),Zt.forEach(t),Xa.forEach(t),Lt=h(o),B=r(o,"P",{});var Eo=a(B);Mn=i(Eo,"This model was contributed by "),je=r(Eo,"A",{href:!0,rel:!0});var Ka=a(je);Fn=i(Ka,"Hiroaki Hayashi"),Ka.forEach(t),qn=i(Eo,`.
The original code can be found `),Le=r(Eo,"A",{href:!0,rel:!0});var es=a(Le);jn=i(es,"here"),es.forEach(t),Ln=i(Eo,"."),Eo.forEach(t),At=h(o),R=r(o,"H2",{class:!0});var Kt=a(R);se=r(Kt,"A",{id:!0,class:!0,href:!0});var os=a(se);So=r(os,"SPAN",{});var ts=a(So);w(Ae.$$.fragment,ts),ts.forEach(t),os.forEach(t),An=h(Kt),No=r(Kt,"SPAN",{});var ns=a(No);On=i(ns,"Checkpoint Naming"),ns.forEach(t),Kt.forEach(t),Ot=h(o),W=r(o,"UL",{});var xo=a(W);Oe=r(xo,"LI",{});var en=a(Oe);Sn=i(en,"CodeGen model "),Se=r(en,"A",{href:!0,rel:!0});var rs=a(Se);Nn=i(rs,"checkpoints"),rs.forEach(t),In=i(en," are available on different pre-training data with variable sizes."),en.forEach(t),Dn=h(xo),ie=r(xo,"LI",{});var zt=a(ie);Bn=i(zt,"The format is: "),Io=r(zt,"CODE",{});var as=a(Io);Wn=i(as,"Salesforce/codegen-{size}-{data}"),as.forEach(t),Hn=i(zt,", where"),Ne=r(zt,"UL",{});var on=a(Ne);q=r(on,"LI",{});var H=a(q);Do=r(H,"CODE",{});var ss=a(Do);Un=i(ss,"size"),ss.forEach(t),Vn=i(H,": "),Bo=r(H,"CODE",{});var is=a(Bo);Rn=i(is,"350M"),is.forEach(t),Yn=i(H,", "),Wo=r(H,"CODE",{});var ls=a(Wo);Jn=i(ls,"2B"),ls.forEach(t),Qn=i(H,", "),Ho=r(H,"CODE",{});var ds=a(Ho);Xn=i(ds,"6B"),ds.forEach(t),Zn=i(H,", "),Uo=r(H,"CODE",{});var cs=a(Uo);Kn=i(cs,"16B"),cs.forEach(t),H.forEach(t),er=h(on),Ie=r(on,"LI",{});var tn=a(Ie);Vo=r(tn,"CODE",{});var ps=a(Vo);or=i(ps,"data"),ps.forEach(t),tr=i(tn,": "),Y=r(tn,"UL",{});var Po=a(Y);ko=r(Po,"LI",{});var Ra=a(ko);Ro=r(Ra,"CODE",{});var hs=a(Ro);nr=i(hs,"nl"),hs.forEach(t),rr=i(Ra,": Pre-trained on the Pile"),Ra.forEach(t),ar=h(Po),le=r(Po,"LI",{});var Gt=a(le);Yo=r(Gt,"CODE",{});var fs=a(Yo);sr=i(fs,"multi"),fs.forEach(t),ir=i(Gt,": Initialized with "),Jo=r(Gt,"CODE",{});var ms=a(Jo);lr=i(ms,"nl"),ms.forEach(t),dr=i(Gt,", then further pre-trained on multiple programming languages data"),Gt.forEach(t),cr=h(Po),de=r(Po,"LI",{});var Et=a(de);Qo=r(Et,"CODE",{});var us=a(Qo);pr=i(us,"mono"),us.forEach(t),hr=i(Et,": Initialized with "),Xo=r(Et,"CODE",{});var gs=a(Xo);fr=i(gs,"multi"),gs.forEach(t),mr=i(Et,", then further pre-trained on Python data"),Et.forEach(t),Po.forEach(t),tn.forEach(t),on.forEach(t),zt.forEach(t),ur=h(xo),De=r(xo,"LI",{});var nn=a(De);gr=i(nn,"For example, "),Zo=r(nn,"CODE",{});var _s=a(Zo);_r=i(_s,"Salesforce/codegen-350M-mono"),_s.forEach(t),vr=i(nn," offers a 350 million-parameter checkpoint pre-trained sequentially on the Pile, multiple programming languages, and Python."),nn.forEach(t),xo.forEach(t),St=h(o),J=r(o,"H2",{class:!0});var rn=a(J);ce=r(rn,"A",{id:!0,class:!0,href:!0});var vs=a(ce);Ko=r(vs,"SPAN",{});var ks=a(Ko);w(Be.$$.fragment,ks),ks.forEach(t),vs.forEach(t),kr=h(rn),et=r(rn,"SPAN",{});var bs=a(et);br=i(bs,"How to use"),bs.forEach(t),rn.forEach(t),Nt=h(o),w(We.$$.fragment,o),It=h(o),Q=r(o,"H2",{class:!0});var an=a(Q);pe=r(an,"A",{id:!0,class:!0,href:!0});var ws=a(pe);ot=r(ws,"SPAN",{});var $s=a(ot);w(He.$$.fragment,$s),$s.forEach(t),ws.forEach(t),wr=h(an),tt=r(an,"SPAN",{});var ys=a(tt);$r=i(ys,"CodeGenConfig"),ys.forEach(t),an.forEach(t),Dt=h(o),I=r(o,"DIV",{class:!0});var Mo=a(I);w(Ue.$$.fragment,Mo),yr=h(Mo),j=r(Mo,"P",{});var U=a(j);Cr=i(U,"This is the configuration class to store the configuration of a "),bo=r(U,"A",{href:!0});var Cs=a(bo);Tr=i(Cs,"CodeGenModel"),Cs.forEach(t),zr=i(U,`. It is used to instantiate a
CodeGen model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the CodeGen
`),Ve=r(U,"A",{href:!0,rel:!0});var Ts=a(Ve);Gr=i(Ts,"Salesforce/codegen-2B-mono"),Ts.forEach(t),Er=i(U,` architecture. Configuration objects
inherit from `),wo=r(U,"A",{href:!0});var zs=a(wo);xr=i(zs,"PretrainedConfig"),zs.forEach(t),Pr=i(U,` and can be used to control the model outputs. Read the documentation from
`),$o=r(U,"A",{href:!0});var Gs=a($o);Mr=i(Gs,"PretrainedConfig"),Gs.forEach(t),Fr=i(U," for more information."),U.forEach(t),qr=h(Mo),w(he.$$.fragment,Mo),Mo.forEach(t),Bt=h(o),X=r(o,"H2",{class:!0});var sn=a(X);fe=r(sn,"A",{id:!0,class:!0,href:!0});var Es=a(fe);nt=r(Es,"SPAN",{});var xs=a(nt);w(Re.$$.fragment,xs),xs.forEach(t),Es.forEach(t),jr=h(sn),rt=r(sn,"SPAN",{});var Ps=a(rt);Lr=i(Ps,"CodeGenTokenizer"),Ps.forEach(t),sn.forEach(t),Wt=h(o),z=r(o,"DIV",{class:!0});var P=a(z);w(Ye.$$.fragment,P),Ar=h(P),at=r(P,"P",{});var Ms=a(at);Or=i(Ms,"Construct a CodeGen tokenizer. Based on byte-level Byte-Pair-Encoding."),Ms.forEach(t),Sr=h(P),st=r(P,"P",{});var Fs=a(st);Nr=i(Fs,"This tokenizer has been trained to treat spaces like parts of the tokens (a bit like sentencepiece) so a word will"),Fs.forEach(t),Ir=h(P),w(me.$$.fragment,P),Dr=h(P),Je=r(P,"P",{});var ln=a(Je);Br=i(ln,"You can get around that behavior by passing "),it=r(ln,"CODE",{});var qs=a(it);Wr=i(qs,"add_prefix_space=True"),qs.forEach(t),Hr=i(ln,` when instantiating this tokenizer or when you
call it on some text, but since the model was not pretrained this way, it might yield a decrease in performance.`),ln.forEach(t),Ur=h(P),w(ue.$$.fragment,P),Vr=h(P),Qe=r(P,"P",{});var dn=a(Qe);Rr=i(dn,"This tokenizer inherits from "),yo=r(dn,"A",{href:!0});var js=a(yo);Yr=i(js,"PreTrainedTokenizer"),js.forEach(t),Jr=i(dn,` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),dn.forEach(t),Qr=h(P),Co=r(P,"DIV",{class:!0});var Ls=a(Co);w(Xe.$$.fragment,Ls),Ls.forEach(t),P.forEach(t),Ht=h(o),Z=r(o,"H2",{class:!0});var cn=a(Z);ge=r(cn,"A",{id:!0,class:!0,href:!0});var As=a(ge);lt=r(As,"SPAN",{});var Os=a(lt);w(Ze.$$.fragment,Os),Os.forEach(t),As.forEach(t),Xr=h(cn),dt=r(cn,"SPAN",{});var Ss=a(dt);Zr=i(Ss,"CodeGenTokenizerFast"),Ss.forEach(t),cn.forEach(t),Ut=h(o),E=r(o,"DIV",{class:!0});var M=a(E);w(Ke.$$.fragment,M),Kr=h(M),eo=r(M,"P",{});var pn=a(eo);ea=i(pn,"Construct a \u201Cfast\u201D CodeGen tokenizer (backed by HuggingFace\u2019s "),ct=r(pn,"EM",{});var Ns=a(ct);oa=i(Ns,"tokenizers"),Ns.forEach(t),ta=i(pn,` library). Based on byte-level
Byte-Pair-Encoding.`),pn.forEach(t),na=h(M),pt=r(M,"P",{});var Is=a(pt);ra=i(Is,"This tokenizer has been trained to treat spaces like parts of the tokens (a bit like sentencepiece) so a word will"),Is.forEach(t),aa=h(M),w(_e.$$.fragment,M),sa=h(M),oo=r(M,"P",{});var hn=a(oo);ia=i(hn,"You can get around that behavior by passing "),ht=r(hn,"CODE",{});var Ds=a(ht);la=i(Ds,"add_prefix_space=True"),Ds.forEach(t),da=i(hn,` when instantiating this tokenizer, but since
the model was not pretrained this way, it might yield a decrease in performance.`),hn.forEach(t),ca=h(M),w(ve.$$.fragment,M),pa=h(M),to=r(M,"P",{});var fn=a(to);ha=i(fn,"This tokenizer inherits from "),To=r(fn,"A",{href:!0});var Bs=a(To);fa=i(Bs,"PreTrainedTokenizerFast"),Bs.forEach(t),ma=i(fn,` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),fn.forEach(t),M.forEach(t),Vt=h(o),K=r(o,"H2",{class:!0});var mn=a(K);ke=r(mn,"A",{id:!0,class:!0,href:!0});var Ws=a(ke);ft=r(Ws,"SPAN",{});var Hs=a(ft);w(no.$$.fragment,Hs),Hs.forEach(t),Ws.forEach(t),ua=h(mn),mt=r(mn,"SPAN",{});var Us=a(mt);ga=i(Us,"CodeGenModel"),Us.forEach(t),mn.forEach(t),Rt=h(o),D=r(o,"DIV",{class:!0});var Fo=a(D);w(ro.$$.fragment,Fo),_a=h(Fo),ao=r(Fo,"P",{});var un=a(ao);va=i(un,`The bare CodeGen Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),so=r(un,"A",{href:!0,rel:!0});var Vs=a(so);ka=i(Vs,"torch.nn.Module"),Vs.forEach(t),ba=i(un,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),un.forEach(t),wa=h(Fo),O=r(Fo,"DIV",{class:!0});var Te=a(O);w(io.$$.fragment,Te),$a=h(Te),ee=r(Te,"P",{});var qo=a(ee);ya=i(qo,"The "),zo=r(qo,"A",{href:!0});var Rs=a(zo);Ca=i(Rs,"CodeGenModel"),Rs.forEach(t),Ta=i(qo," forward method, overrides the "),ut=r(qo,"CODE",{});var Ys=a(ut);za=i(Ys,"__call__"),Ys.forEach(t),Ga=i(qo," special method."),qo.forEach(t),Ea=h(Te),w(be.$$.fragment,Te),xa=h(Te),w(we.$$.fragment,Te),Te.forEach(t),Fo.forEach(t),Yt=h(o),oe=r(o,"H2",{class:!0});var gn=a(oe);$e=r(gn,"A",{id:!0,class:!0,href:!0});var Js=a($e);gt=r(Js,"SPAN",{});var Qs=a(gt);w(lo.$$.fragment,Qs),Qs.forEach(t),Js.forEach(t),Pa=h(gn),_t=r(gn,"SPAN",{});var Xs=a(_t);Ma=i(Xs,"CodeGenForCausalLM"),Xs.forEach(t),gn.forEach(t),Jt=h(o),L=r(o,"DIV",{class:!0});var ze=a(L);w(co.$$.fragment,ze),Fa=h(ze),vt=r(ze,"P",{});var Zs=a(vt);qa=i(Zs,"The CodeGen Model transformer with a language modeling head on top."),Zs.forEach(t),ja=h(ze),po=r(ze,"P",{});var _n=a(po);La=i(_n,"This model is a PyTorch "),ho=r(_n,"A",{href:!0,rel:!0});var Ks=a(ho);Aa=i(Ks,"torch.nn.Module"),Ks.forEach(t),Oa=i(_n,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),_n.forEach(t),Sa=h(ze),S=r(ze,"DIV",{class:!0});var Ge=a(S);w(fo.$$.fragment,Ge),Na=h(Ge),te=r(Ge,"P",{});var jo=a(te);Ia=i(jo,"The "),Go=r(jo,"A",{href:!0});var ei=a(Go);Da=i(ei,"CodeGenForCausalLM"),ei.forEach(t),Ba=i(jo," forward method, overrides the "),kt=r(jo,"CODE",{});var oi=a(kt);Wa=i(oi,"__call__"),oi.forEach(t),Ha=i(jo," special method."),jo.forEach(t),Ua=h(Ge),w(ye.$$.fragment,Ge),Va=h(Ge),w(Ce.$$.fragment,Ge),Ge.forEach(t),ze.forEach(t),this.h()},h(){c(d,"name","hf:doc:metadata"),c(d,"content",JSON.stringify(_i)),c(f,"id","codegen"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#codegen"),c(g,"class","relative group"),c(N,"id","overview"),c(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N,"href","#overview"),c(A,"class","relative group"),c(Pe,"href","https://arxiv.org/abs/2203.13474"),c(Pe,"rel","nofollow"),c(Me,"href","https://pile.eleuther.ai/"),c(Me,"rel","nofollow"),c(qe,"href","https://github.com/salesforce/codegen"),c(qe,"rel","nofollow"),c(je,"href","https://huggingface.co/rooa"),c(je,"rel","nofollow"),c(Le,"href","https://github.com/salesforce/codegen"),c(Le,"rel","nofollow"),c(se,"id","checkpoint-naming"),c(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(se,"href","#checkpoint-naming"),c(R,"class","relative group"),c(Se,"href","https://huggingface.co/models?other=codegen"),c(Se,"rel","nofollow"),c(ce,"id","how-to-use"),c(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ce,"href","#how-to-use"),c(J,"class","relative group"),c(pe,"id","transformers.CodeGenConfig"),c(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pe,"href","#transformers.CodeGenConfig"),c(Q,"class","relative group"),c(bo,"href","/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenModel"),c(Ve,"href","https://huggingface.co/Salesforce/codegen-2B-mono"),c(Ve,"rel","nofollow"),c(wo,"href","/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig"),c($o,"href","/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig"),c(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fe,"id","transformers.CodeGenTokenizer"),c(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fe,"href","#transformers.CodeGenTokenizer"),c(X,"class","relative group"),c(yo,"href","/docs/transformers/pr_17443/en/main_classes/tokenizer#transformers.PreTrainedTokenizer"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ge,"id","transformers.CodeGenTokenizerFast"),c(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ge,"href","#transformers.CodeGenTokenizerFast"),c(Z,"class","relative group"),c(To,"href","/docs/transformers/pr_17443/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast"),c(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ke,"id","transformers.CodeGenModel"),c(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ke,"href","#transformers.CodeGenModel"),c(K,"class","relative group"),c(so,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(so,"rel","nofollow"),c(zo,"href","/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenModel"),c(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($e,"id","transformers.CodeGenForCausalLM"),c($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($e,"href","#transformers.CodeGenForCausalLM"),c(oe,"class","relative group"),c(ho,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(ho,"rel","nofollow"),c(Go,"href","/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(o,m){e(document.head,d),_(o,k,m),_(o,g,m),e(g,f),e(f,v),$(l,v,null),e(g,u),e(g,x),e(x,V),_(o,F,m),_(o,A,m),e(A,N),e(N,Ao),$(xe,Ao,null),e(A,kn),e(A,Oo),e(Oo,bn),_(o,Mt,m),_(o,re,m),e(re,wn),e(re,Pe),e(Pe,$n),e(re,yn),_(o,Ft,m),_(o,ae,m),e(ae,Cn),e(ae,Me),e(Me,Tn),e(ae,zn),_(o,qt,m),_(o,_o,m),e(_o,Gn),_(o,jt,m),_(o,vo,m),e(vo,Fe),e(Fe,En),e(Fe,qe),e(qe,xn),e(Fe,Pn),_(o,Lt,m),_(o,B,m),e(B,Mn),e(B,je),e(je,Fn),e(B,qn),e(B,Le),e(Le,jn),e(B,Ln),_(o,At,m),_(o,R,m),e(R,se),e(se,So),$(Ae,So,null),e(R,An),e(R,No),e(No,On),_(o,Ot,m),_(o,W,m),e(W,Oe),e(Oe,Sn),e(Oe,Se),e(Se,Nn),e(Oe,In),e(W,Dn),e(W,ie),e(ie,Bn),e(ie,Io),e(Io,Wn),e(ie,Hn),e(ie,Ne),e(Ne,q),e(q,Do),e(Do,Un),e(q,Vn),e(q,Bo),e(Bo,Rn),e(q,Yn),e(q,Wo),e(Wo,Jn),e(q,Qn),e(q,Ho),e(Ho,Xn),e(q,Zn),e(q,Uo),e(Uo,Kn),e(Ne,er),e(Ne,Ie),e(Ie,Vo),e(Vo,or),e(Ie,tr),e(Ie,Y),e(Y,ko),e(ko,Ro),e(Ro,nr),e(ko,rr),e(Y,ar),e(Y,le),e(le,Yo),e(Yo,sr),e(le,ir),e(le,Jo),e(Jo,lr),e(le,dr),e(Y,cr),e(Y,de),e(de,Qo),e(Qo,pr),e(de,hr),e(de,Xo),e(Xo,fr),e(de,mr),e(W,ur),e(W,De),e(De,gr),e(De,Zo),e(Zo,_r),e(De,vr),_(o,St,m),_(o,J,m),e(J,ce),e(ce,Ko),$(Be,Ko,null),e(J,kr),e(J,et),e(et,br),_(o,Nt,m),$(We,o,m),_(o,It,m),_(o,Q,m),e(Q,pe),e(pe,ot),$(He,ot,null),e(Q,wr),e(Q,tt),e(tt,$r),_(o,Dt,m),_(o,I,m),$(Ue,I,null),e(I,yr),e(I,j),e(j,Cr),e(j,bo),e(bo,Tr),e(j,zr),e(j,Ve),e(Ve,Gr),e(j,Er),e(j,wo),e(wo,xr),e(j,Pr),e(j,$o),e($o,Mr),e(j,Fr),e(I,qr),$(he,I,null),_(o,Bt,m),_(o,X,m),e(X,fe),e(fe,nt),$(Re,nt,null),e(X,jr),e(X,rt),e(rt,Lr),_(o,Wt,m),_(o,z,m),$(Ye,z,null),e(z,Ar),e(z,at),e(at,Or),e(z,Sr),e(z,st),e(st,Nr),e(z,Ir),$(me,z,null),e(z,Dr),e(z,Je),e(Je,Br),e(Je,it),e(it,Wr),e(Je,Hr),e(z,Ur),$(ue,z,null),e(z,Vr),e(z,Qe),e(Qe,Rr),e(Qe,yo),e(yo,Yr),e(Qe,Jr),e(z,Qr),e(z,Co),$(Xe,Co,null),_(o,Ht,m),_(o,Z,m),e(Z,ge),e(ge,lt),$(Ze,lt,null),e(Z,Xr),e(Z,dt),e(dt,Zr),_(o,Ut,m),_(o,E,m),$(Ke,E,null),e(E,Kr),e(E,eo),e(eo,ea),e(eo,ct),e(ct,oa),e(eo,ta),e(E,na),e(E,pt),e(pt,ra),e(E,aa),$(_e,E,null),e(E,sa),e(E,oo),e(oo,ia),e(oo,ht),e(ht,la),e(oo,da),e(E,ca),$(ve,E,null),e(E,pa),e(E,to),e(to,ha),e(to,To),e(To,fa),e(to,ma),_(o,Vt,m),_(o,K,m),e(K,ke),e(ke,ft),$(no,ft,null),e(K,ua),e(K,mt),e(mt,ga),_(o,Rt,m),_(o,D,m),$(ro,D,null),e(D,_a),e(D,ao),e(ao,va),e(ao,so),e(so,ka),e(ao,ba),e(D,wa),e(D,O),$(io,O,null),e(O,$a),e(O,ee),e(ee,ya),e(ee,zo),e(zo,Ca),e(ee,Ta),e(ee,ut),e(ut,za),e(ee,Ga),e(O,Ea),$(be,O,null),e(O,xa),$(we,O,null),_(o,Yt,m),_(o,oe,m),e(oe,$e),e($e,gt),$(lo,gt,null),e(oe,Pa),e(oe,_t),e(_t,Ma),_(o,Jt,m),_(o,L,m),$(co,L,null),e(L,Fa),e(L,vt),e(vt,qa),e(L,ja),e(L,po),e(po,La),e(po,ho),e(ho,Aa),e(po,Oa),e(L,Sa),e(L,S),$(fo,S,null),e(S,Na),e(S,te),e(te,Ia),e(te,Go),e(Go,Da),e(te,Ba),e(te,kt),e(kt,Wa),e(te,Ha),e(S,Ua),$(ye,S,null),e(S,Va),$(Ce,S,null),Qt=!0},p(o,[m]){const mo={};m&2&&(mo.$$scope={dirty:m,ctx:o}),he.$set(mo);const bt={};m&2&&(bt.$$scope={dirty:m,ctx:o}),me.$set(bt);const wt={};m&2&&(wt.$$scope={dirty:m,ctx:o}),ue.$set(wt);const $t={};m&2&&($t.$$scope={dirty:m,ctx:o}),_e.$set($t);const uo={};m&2&&(uo.$$scope={dirty:m,ctx:o}),ve.$set(uo);const yt={};m&2&&(yt.$$scope={dirty:m,ctx:o}),be.$set(yt);const Ct={};m&2&&(Ct.$$scope={dirty:m,ctx:o}),we.$set(Ct);const Tt={};m&2&&(Tt.$$scope={dirty:m,ctx:o}),ye.$set(Tt);const go={};m&2&&(go.$$scope={dirty:m,ctx:o}),Ce.$set(go)},i(o){Qt||(y(l.$$.fragment,o),y(xe.$$.fragment,o),y(Ae.$$.fragment,o),y(Be.$$.fragment,o),y(We.$$.fragment,o),y(He.$$.fragment,o),y(Ue.$$.fragment,o),y(he.$$.fragment,o),y(Re.$$.fragment,o),y(Ye.$$.fragment,o),y(me.$$.fragment,o),y(ue.$$.fragment,o),y(Xe.$$.fragment,o),y(Ze.$$.fragment,o),y(Ke.$$.fragment,o),y(_e.$$.fragment,o),y(ve.$$.fragment,o),y(no.$$.fragment,o),y(ro.$$.fragment,o),y(io.$$.fragment,o),y(be.$$.fragment,o),y(we.$$.fragment,o),y(lo.$$.fragment,o),y(co.$$.fragment,o),y(fo.$$.fragment,o),y(ye.$$.fragment,o),y(Ce.$$.fragment,o),Qt=!0)},o(o){C(l.$$.fragment,o),C(xe.$$.fragment,o),C(Ae.$$.fragment,o),C(Be.$$.fragment,o),C(We.$$.fragment,o),C(He.$$.fragment,o),C(Ue.$$.fragment,o),C(he.$$.fragment,o),C(Re.$$.fragment,o),C(Ye.$$.fragment,o),C(me.$$.fragment,o),C(ue.$$.fragment,o),C(Xe.$$.fragment,o),C(Ze.$$.fragment,o),C(Ke.$$.fragment,o),C(_e.$$.fragment,o),C(ve.$$.fragment,o),C(no.$$.fragment,o),C(ro.$$.fragment,o),C(io.$$.fragment,o),C(be.$$.fragment,o),C(we.$$.fragment,o),C(lo.$$.fragment,o),C(co.$$.fragment,o),C(fo.$$.fragment,o),C(ye.$$.fragment,o),C(Ce.$$.fragment,o),Qt=!1},d(o){t(d),o&&t(k),o&&t(g),T(l),o&&t(F),o&&t(A),T(xe),o&&t(Mt),o&&t(re),o&&t(Ft),o&&t(ae),o&&t(qt),o&&t(_o),o&&t(jt),o&&t(vo),o&&t(Lt),o&&t(B),o&&t(At),o&&t(R),T(Ae),o&&t(Ot),o&&t(W),o&&t(St),o&&t(J),T(Be),o&&t(Nt),T(We,o),o&&t(It),o&&t(Q),T(He),o&&t(Dt),o&&t(I),T(Ue),T(he),o&&t(Bt),o&&t(X),T(Re),o&&t(Wt),o&&t(z),T(Ye),T(me),T(ue),T(Xe),o&&t(Ht),o&&t(Z),T(Ze),o&&t(Ut),o&&t(E),T(Ke),T(_e),T(ve),o&&t(Vt),o&&t(K),T(no),o&&t(Rt),o&&t(D),T(ro),T(io),T(be),T(we),o&&t(Yt),o&&t(oe),T(lo),o&&t(Jt),o&&t(L),T(co),T(fo),T(ye),T(Ce)}}}const _i={local:"codegen",sections:[{local:"overview",title:"Overview"},{local:"checkpoint-naming",title:"Checkpoint Naming"},{local:"how-to-use",title:"How to use"},{local:"transformers.CodeGenConfig",title:"CodeGenConfig"},{local:"transformers.CodeGenTokenizer",title:"CodeGenTokenizer"},{local:"transformers.CodeGenTokenizerFast",title:"CodeGenTokenizerFast"},{local:"transformers.CodeGenModel",title:"CodeGenModel"},{local:"transformers.CodeGenForCausalLM",title:"CodeGenForCausalLM"}],title:"CodeGen"};function vi(G){return si(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ti extends ti{constructor(d){super();ni(this,d,vi,gi,ri,{})}}export{Ti as default,_i as metadata};
