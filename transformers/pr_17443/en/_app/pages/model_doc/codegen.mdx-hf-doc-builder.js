import{S as yn,i as Cn,s as wn,e as a,k as g,w as y,t as i,M as $n,c as r,d as t,m as _,a as s,x as C,h as d,b as l,G as o,g as u,y as w,q as $,o as k,B as T,v as kn,L as It}from"../../chunks/vendor-hf-doc-builder.js";import{T as bn}from"../../chunks/Tip-hf-doc-builder.js";import{D as Ze}from"../../chunks/Docstring-hf-doc-builder.js";import{C as St}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Ke}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Nt}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Tn(P){let c,b,f,h,v;return h=new St({props:{code:`from transformers import CodeGenModel, CodeGenConfig

# Initializing a CodeGen 6B configuration
configuration = CodeGenConfig()

# Initializing a model from the configuration
model = CodeGenModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> CodeGenModel, CodeGenConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a CodeGen 6B configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = CodeGenConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = CodeGenModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){c=a("p"),b=i("Example:"),f=g(),y(h.$$.fragment)},l(n){c=r(n,"P",{});var m=s(c);b=d(m,"Example:"),m.forEach(t),f=_(n),C(h.$$.fragment,n)},m(n,m){u(n,c,m),o(c,b),u(n,f,m),w(h,n,m),v=!0},p:It,i(n){v||($(h.$$.fragment,n),v=!0)},o(n){k(h.$$.fragment,n),v=!1},d(n){n&&t(c),n&&t(f),T(h,n)}}}function Gn(P){let c,b,f,h,v;return{c(){c=a("p"),b=i("Although the recipe for forward pass needs to be defined within this function, one should call the "),f=a("code"),h=i("Module"),v=i(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){c=r(n,"P",{});var m=s(c);b=d(m,"Although the recipe for forward pass needs to be defined within this function, one should call the "),f=r(m,"CODE",{});var x=s(f);h=d(x,"Module"),x.forEach(t),v=d(m,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),m.forEach(t)},m(n,m){u(n,c,m),o(c,b),o(c,f),o(f,h),o(c,v)},d(n){n&&t(c)}}}function Mn(P){let c,b,f,h,v;return h=new St({props:{code:`from transformers import GPT2Tokenizer, CodeGenModel
import torch

tokenizer = GPT2Tokenizer.from_pretrained("Salesforce/codegen-2B-mono")
model = CodeGenModel.from_pretrained("Salesforce/codegen-2B-mono")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, CodeGenModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;Salesforce/codegen-2B-mono&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = CodeGenModel.from_pretrained(<span class="hljs-string">&quot;Salesforce/codegen-2B-mono&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),{c(){c=a("p"),b=i("Example:"),f=g(),y(h.$$.fragment)},l(n){c=r(n,"P",{});var m=s(c);b=d(m,"Example:"),m.forEach(t),f=_(n),C(h.$$.fragment,n)},m(n,m){u(n,c,m),o(c,b),u(n,f,m),w(h,n,m),v=!0},p:It,i(n){v||($(h.$$.fragment,n),v=!0)},o(n){k(h.$$.fragment,n),v=!1},d(n){n&&t(c),n&&t(f),T(h,n)}}}function Pn(P){let c,b,f,h,v;return{c(){c=a("p"),b=i("Although the recipe for forward pass needs to be defined within this function, one should call the "),f=a("code"),h=i("Module"),v=i(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){c=r(n,"P",{});var m=s(c);b=d(m,"Although the recipe for forward pass needs to be defined within this function, one should call the "),f=r(m,"CODE",{});var x=s(f);h=d(x,"Module"),x.forEach(t),v=d(m,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),m.forEach(t)},m(n,m){u(n,c,m),o(c,b),o(c,f),o(f,h),o(c,v)},d(n){n&&t(c)}}}function zn(P){let c,b,f,h,v;return h=new St({props:{code:`import torch
from transformers import GPT2Tokenizer, CodeGenForCausalLM

tokenizer = GPT2Tokenizer.from_pretrained("Salesforce/codegen-2B-mono")
model = CodeGenForCausalLM.from_pretrained("Salesforce/codegen-2B-mono")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs, labels=inputs["input_ids"])
loss = outputs.loss
logits = outputs.logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, CodeGenForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;Salesforce/codegen-2B-mono&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = CodeGenForCausalLM.from_pretrained(<span class="hljs-string">&quot;Salesforce/codegen-2B-mono&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, labels=inputs[<span class="hljs-string">&quot;input_ids&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),{c(){c=a("p"),b=i("Example:"),f=g(),y(h.$$.fragment)},l(n){c=r(n,"P",{});var m=s(c);b=d(m,"Example:"),m.forEach(t),f=_(n),C(h.$$.fragment,n)},m(n,m){u(n,c,m),o(c,b),u(n,f,m),w(h,n,m),v=!0},p:It,i(n){v||($(h.$$.fragment,n),v=!0)},o(n){k(h.$$.fragment,n),v=!1},d(n){n&&t(c),n&&t(f),T(h,n)}}}function En(P){let c,b,f,h,v,n,m,x,To,eo,O,B,Ne,ae,Go,Ie,Mo,oo,D,Po,re,zo,Eo,to,H,xo,se,qo,Fo,no,Ge,Lo,ao,U,Ao,ie,Oo,jo,ro,Me,No,so,R,Io,de,So,Wo,io,L,Bo,le,Do,Ho,ce,Uo,Ro,lo,j,V,Se,pe,Vo,We,Jo,co,q,he,Qo,G,Xo,Pe,Yo,Zo,me,Ko,et,ze,ot,tt,Ee,nt,at,rt,J,po,N,Q,Be,ue,st,De,it,ho,F,fe,dt,ge,lt,_e,ct,pt,ht,z,ve,mt,I,ut,xe,ft,gt,He,_t,vt,bt,X,yt,Y,mo,S,Z,Ue,be,Ct,Re,wt,uo,M,ye,$t,Ve,kt,Tt,Ce,Gt,we,Mt,Pt,zt,E,$e,Et,W,xt,qe,qt,Ft,Je,Lt,At,Ot,K,jt,ee,fo;return n=new Ke({}),ae=new Ke({}),pe=new Ke({}),he=new Ze({props:{name:"class transformers.CodeGenConfig",anchor:"transformers.CodeGenConfig",parameters:[{name:"vocab_size",val:" = 50400"},{name:"n_positions",val:" = 2048"},{name:"n_ctx",val:" = 2048"},{name:"n_embd",val:" = 4096"},{name:"n_layer",val:" = 28"},{name:"n_head",val:" = 16"},{name:"rotary_dim",val:" = 64"},{name:"n_inner",val:" = None"},{name:"activation_function",val:" = 'gelu_new'"},{name:"resid_pdrop",val:" = 0.0"},{name:"embd_pdrop",val:" = 0.0"},{name:"attn_pdrop",val:" = 0.0"},{name:"layer_norm_epsilon",val:" = 1e-05"},{name:"initializer_range",val:" = 0.02"},{name:"scale_attn_weights",val:" = True"},{name:"use_cache",val:" = True"},{name:"bos_token_id",val:" = 50256"},{name:"eos_token_id",val:" = 50256"},{name:"tie_word_embeddings",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.CodeGenConfig.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 50400) &#x2014;
Vocabulary size of the CodeGen model. Defines the number of different tokens that can be represented by the
<code>inputs_ids</code> passed when calling <a href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a>.`,name:"vocab_size"},{anchor:"transformers.CodeGenConfig.n_positions",description:`<strong>n_positions</strong> (<code>int</code>, <em>optional</em>, defaults to 2048) &#x2014;
The maximum sequence length that this model might ever be used with. Typically set this to something large
just in case (e.g., 512 or 1024 or 2048).`,name:"n_positions"},{anchor:"transformers.CodeGenConfig.n_embd",description:`<strong>n_embd</strong> (<code>int</code>, <em>optional</em>, defaults to 4096) &#x2014;
Dimensionality of the embeddings and hidden states.`,name:"n_embd"},{anchor:"transformers.CodeGenConfig.n_layer",description:`<strong>n_layer</strong> (<code>int</code>, <em>optional</em>, defaults to 28) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"n_layer"},{anchor:"transformers.CodeGenConfig.n_head",description:`<strong>n_head</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"n_head"},{anchor:"transformers.CodeGenConfig.rotary_dim",description:`<strong>rotary_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 64) &#x2014;
Number of dimensions in the embedding that Rotary Position Embedding is applied to.`,name:"rotary_dim"},{anchor:"transformers.CodeGenConfig.n_inner",description:`<strong>n_inner</strong> (<code>int</code>, <em>optional</em>, defaults to None) &#x2014;
Dimensionality of the inner feed-forward layers. <code>None</code> will set it to 4 times n_embd`,name:"n_inner"},{anchor:"transformers.CodeGenConfig.activation_function",description:`<strong>activation_function</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;gelu_new&quot;</code>) &#x2014;
Activation function, to be selected in the list <code>[&quot;relu&quot;, &quot;silu&quot;, &quot;gelu&quot;, &quot;tanh&quot;, &quot;gelu_new&quot;]</code>.`,name:"activation_function"},{anchor:"transformers.CodeGenConfig.resid_pdrop",description:`<strong>resid_pdrop</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.`,name:"resid_pdrop"},{anchor:"transformers.CodeGenConfig.embd_pdrop",description:`<strong>embd_pdrop</strong> (<code>int</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the embeddings.`,name:"embd_pdrop"},{anchor:"transformers.CodeGenConfig.attn_pdrop",description:`<strong>attn_pdrop</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the attention.`,name:"attn_pdrop"},{anchor:"transformers.CodeGenConfig.layer_norm_epsilon",description:`<strong>layer_norm_epsilon</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-5) &#x2014;
The epsilon to use in the layer normalization layers.`,name:"layer_norm_epsilon"},{anchor:"transformers.CodeGenConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.CodeGenConfig.scale_attn_weights",description:`<strong>scale_attn_weights</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Scale attention weights by dividing by sqrt(hidden_size).`,name:"scale_attn_weights"},{anchor:"transformers.CodeGenConfig.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the model should return the last key/values attentions (not used by all models).`,name:"use_cache"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/codegen/configuration_codegen.py#L44"}}),J=new Nt({props:{anchor:"transformers.CodeGenConfig.example",$$slots:{default:[Tn]},$$scope:{ctx:P}}}),ue=new Ke({}),fe=new Ze({props:{name:"class transformers.CodeGenModel",anchor:"transformers.CodeGenModel",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.CodeGenModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/codegen/modeling_codegen.py#L467"}}),ve=new Ze({props:{name:"forward",anchor:"transformers.CodeGenModel.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.Tensor]]] = None"},{name:"attention_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"position_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"head_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.FloatTensor] = None"},{name:"use_cache",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.CodeGenModel.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <code>CodeGenTokenizer</code>. See <a href="/docs/transformers/pr_17443/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.CodeGenModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.CodeGenModel.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.CodeGenModel.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.n_positions - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.CodeGenModel.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_attention_heads,)</code> or <code>(n_layer, num_attention_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.CodeGenModel.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_dim)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <em>input_ids</em> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.CodeGenModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.CodeGenModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.CodeGenModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17443/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/codegen/modeling_codegen.py#L524",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17443/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPast"
>transformers.modeling_outputs.BaseModelOutputWithPast</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenConfig"
>CodeGenConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
<p>If <code>past_key_values</code> is used only the last hidden-state of the sequences of shape <code>(batch_size, 1, hidden_size)</code> is output.</p>
</li>
<li>
<p><strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) \u2014 Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and optionally if
<code>config.is_encoder_decoder=True</code> 2 additional tensors of shape <code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and optionally if
<code>config.is_encoder_decoder=True</code> in the cross-attention blocks) that can be used (see <code>past_key_values</code>
input) to speed up sequential decoding.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17443/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPast"
>transformers.modeling_outputs.BaseModelOutputWithPast</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),X=new bn({props:{$$slots:{default:[Gn]},$$scope:{ctx:P}}}),Y=new Nt({props:{anchor:"transformers.CodeGenModel.forward.example",$$slots:{default:[Mn]},$$scope:{ctx:P}}}),be=new Ke({}),ye=new Ze({props:{name:"class transformers.CodeGenForCausalLM",anchor:"transformers.CodeGenForCausalLM",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.CodeGenForCausalLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17443/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/codegen/modeling_codegen.py#L710"}}),$e=new Ze({props:{name:"forward",anchor:"transformers.CodeGenForCausalLM.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.Tensor]]] = None"},{name:"attention_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"position_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"head_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.FloatTensor] = None"},{name:"labels",val:": typing.Optional[torch.LongTensor] = None"},{name:"use_cache",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.CodeGenForCausalLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <code>CodeGenTokenizer</code>. See <a href="/docs/transformers/pr_17443/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17443/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.CodeGenForCausalLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.CodeGenForCausalLM.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.CodeGenForCausalLM.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.n_positions - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.CodeGenForCausalLM.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_attention_heads,)</code> or <code>(n_layer, num_attention_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.CodeGenForCausalLM.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_dim)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <em>input_ids</em> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.CodeGenForCausalLM.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.CodeGenForCausalLM.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.CodeGenForCausalLM.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17443/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.CodeGenForCausalLM.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for language modeling. Note that the labels <strong>are shifted</strong> inside the model, i.e. you can set
<code>labels = input_ids</code> Indices are selected in <code>[-100, 0, ..., config.vocab_size]</code> All labels set to <code>-100</code>
are ignored (masked), the loss is only computed for labels in <code>[0, ..., config.vocab_size]</code>`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/vr_17443/src/transformers/models/codegen/modeling_codegen.py#L779",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17443/en/main_classes/output#transformers.modeling_outputs.CausalLMOutputWithPast"
>transformers.modeling_outputs.CausalLMOutputWithPast</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenConfig"
>CodeGenConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Language modeling loss (for next-token prediction).</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) \u2014 Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).</p>
</li>
<li>
<p><strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) \u2014 Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>)</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks) that can be used (see
<code>past_key_values</code> input) to speed up sequential decoding.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17443/en/main_classes/output#transformers.modeling_outputs.CausalLMOutputWithPast"
>transformers.modeling_outputs.CausalLMOutputWithPast</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),K=new bn({props:{$$slots:{default:[Pn]},$$scope:{ctx:P}}}),ee=new Nt({props:{anchor:"transformers.CodeGenForCausalLM.forward.example",$$slots:{default:[zn]},$$scope:{ctx:P}}}),{c(){c=a("meta"),b=g(),f=a("h1"),h=a("a"),v=a("span"),y(n.$$.fragment),m=g(),x=a("span"),To=i("CodeGen"),eo=g(),O=a("h2"),B=a("a"),Ne=a("span"),y(ae.$$.fragment),Go=g(),Ie=a("span"),Mo=i("Overview"),oo=g(),D=a("p"),Po=i("The CodeGen model was proposed in "),re=a("a"),zo=i("A Conversational Paradigm for Program Synthesis"),Eo=i(" by Erik Nijkamp, Bo Pang, Hiroaki Hayashi, Lifu Tu, Huan Wang, Yingbo Zhou, Silvio Savarese, and Caiming Xiong."),to=g(),H=a("p"),xo=i("CodeGen is an autoregressive language model for program synthesis trained sequentially on "),se=a("a"),qo=i("The Pile"),Fo=i(", BigQuery, and BigPython."),no=g(),Ge=a("p"),Lo=i("The abstract from the paper is the following:"),ao=g(),U=a("p"),Ao=i("Program synthesis strives to generate a computer program as a solution to a given problem specification. We propose a conversational program synthesis approach via large language models, which addresses the challenges of searching over a vast program space and user intent specification faced in prior approaches. Our new approach casts the process of writing a specification and program as a multi-turn conversation between a user and a system. It treats program synthesis as a sequence prediction problem, in which the specification is expressed in natural language and the desired program is conditionally sampled. We train a family of large language models, called CodeGen, on natural language and programming language data. With weak supervision in the data and the scaling up of data size and model size, conversational capacities emerge from the simple autoregressive language modeling. To study the model behavior on conversational program synthesis, we develop a multi-turn programming benchmark (MTPB), where solving each problem requires multi-step synthesis via multi-turn conversation between the user and the model. Our findings show the emergence of conversational capabilities and the effectiveness of the proposed conversational program synthesis paradigm. In addition, our model CodeGen (with up to 16B parameters trained on TPU-v4) outperforms OpenAI\u2019s Codex on the HumanEval benchmark. We make the training library JaxFormer including checkpoints available as open source contribution: "),ie=a("a"),Oo=i("this https URL"),jo=i("."),ro=g(),Me=a("p"),No=i("Tips:"),so=g(),R=a("p"),Io=i("Three types of models are available depending on the pre-training data. Refer to the description "),de=a("a"),So=i("here"),Wo=i("."),io=g(),L=a("p"),Bo=i("This model was contributed by "),le=a("a"),Do=i("Hiroaki Hayashi"),Ho=i(`.
The original code can be found `),ce=a("a"),Uo=i("here"),Ro=i("."),lo=g(),j=a("h2"),V=a("a"),Se=a("span"),y(pe.$$.fragment),Vo=g(),We=a("span"),Jo=i("CodeGenConfig"),co=g(),q=a("div"),y(he.$$.fragment),Qo=g(),G=a("p"),Xo=i("This is the configuration class to store the configuration of a "),Pe=a("a"),Yo=i("CodeGenModel"),Zo=i(`. It is used to instantiate a
CodeGen model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the CodeGen
`),me=a("a"),Ko=i("EleutherAI/gpt-j-6B"),et=i(` architecture. Configuration objects inherit from
`),ze=a("a"),ot=i("PretrainedConfig"),tt=i(" and can be used to control the model outputs. Read the documentation from "),Ee=a("a"),nt=i("PretrainedConfig"),at=i(`
for more information.`),rt=g(),y(J.$$.fragment),po=g(),N=a("h2"),Q=a("a"),Be=a("span"),y(ue.$$.fragment),st=g(),De=a("span"),it=i("CodeGenModel"),ho=g(),F=a("div"),y(fe.$$.fragment),dt=g(),ge=a("p"),lt=i(`The bare CodeGen Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),_e=a("a"),ct=i("torch.nn.Module"),pt=i(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),ht=g(),z=a("div"),y(ve.$$.fragment),mt=g(),I=a("p"),ut=i("The "),xe=a("a"),ft=i("CodeGenModel"),gt=i(" forward method, overrides the "),He=a("code"),_t=i("__call__"),vt=i(" special method."),bt=g(),y(X.$$.fragment),yt=g(),y(Y.$$.fragment),mo=g(),S=a("h2"),Z=a("a"),Ue=a("span"),y(be.$$.fragment),Ct=g(),Re=a("span"),wt=i("CodeGenForCausalLM"),uo=g(),M=a("div"),y(ye.$$.fragment),$t=g(),Ve=a("p"),kt=i("The CodeGen Model transformer with a language modeling head on top."),Tt=g(),Ce=a("p"),Gt=i("This model is a PyTorch "),we=a("a"),Mt=i("torch.nn.Module"),Pt=i(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),zt=g(),E=a("div"),y($e.$$.fragment),Et=g(),W=a("p"),xt=i("The "),qe=a("a"),qt=i("CodeGenForCausalLM"),Ft=i(" forward method, overrides the "),Je=a("code"),Lt=i("__call__"),At=i(" special method."),Ot=g(),y(K.$$.fragment),jt=g(),y(ee.$$.fragment),this.h()},l(e){const p=$n('[data-svelte="svelte-1phssyn"]',document.head);c=r(p,"META",{name:!0,content:!0}),p.forEach(t),b=_(e),f=r(e,"H1",{class:!0});var ke=s(f);h=r(ke,"A",{id:!0,class:!0,href:!0});var Qe=s(h);v=r(Qe,"SPAN",{});var Xe=s(v);C(n.$$.fragment,Xe),Xe.forEach(t),Qe.forEach(t),m=_(ke),x=r(ke,"SPAN",{});var Ye=s(x);To=d(Ye,"CodeGen"),Ye.forEach(t),ke.forEach(t),eo=_(e),O=r(e,"H2",{class:!0});var Te=s(O);B=r(Te,"A",{id:!0,class:!0,href:!0});var Wt=s(B);Ne=r(Wt,"SPAN",{});var Bt=s(Ne);C(ae.$$.fragment,Bt),Bt.forEach(t),Wt.forEach(t),Go=_(Te),Ie=r(Te,"SPAN",{});var Dt=s(Ie);Mo=d(Dt,"Overview"),Dt.forEach(t),Te.forEach(t),oo=_(e),D=r(e,"P",{});var go=s(D);Po=d(go,"The CodeGen model was proposed in "),re=r(go,"A",{href:!0,rel:!0});var Ht=s(re);zo=d(Ht,"A Conversational Paradigm for Program Synthesis"),Ht.forEach(t),Eo=d(go," by Erik Nijkamp, Bo Pang, Hiroaki Hayashi, Lifu Tu, Huan Wang, Yingbo Zhou, Silvio Savarese, and Caiming Xiong."),go.forEach(t),to=_(e),H=r(e,"P",{});var _o=s(H);xo=d(_o,"CodeGen is an autoregressive language model for program synthesis trained sequentially on "),se=r(_o,"A",{href:!0,rel:!0});var Ut=s(se);qo=d(Ut,"The Pile"),Ut.forEach(t),Fo=d(_o,", BigQuery, and BigPython."),_o.forEach(t),no=_(e),Ge=r(e,"P",{});var Rt=s(Ge);Lo=d(Rt,"The abstract from the paper is the following:"),Rt.forEach(t),ao=_(e),U=r(e,"P",{});var vo=s(U);Ao=d(vo,"Program synthesis strives to generate a computer program as a solution to a given problem specification. We propose a conversational program synthesis approach via large language models, which addresses the challenges of searching over a vast program space and user intent specification faced in prior approaches. Our new approach casts the process of writing a specification and program as a multi-turn conversation between a user and a system. It treats program synthesis as a sequence prediction problem, in which the specification is expressed in natural language and the desired program is conditionally sampled. We train a family of large language models, called CodeGen, on natural language and programming language data. With weak supervision in the data and the scaling up of data size and model size, conversational capacities emerge from the simple autoregressive language modeling. To study the model behavior on conversational program synthesis, we develop a multi-turn programming benchmark (MTPB), where solving each problem requires multi-step synthesis via multi-turn conversation between the user and the model. Our findings show the emergence of conversational capabilities and the effectiveness of the proposed conversational program synthesis paradigm. In addition, our model CodeGen (with up to 16B parameters trained on TPU-v4) outperforms OpenAI\u2019s Codex on the HumanEval benchmark. We make the training library JaxFormer including checkpoints available as open source contribution: "),ie=r(vo,"A",{href:!0,rel:!0});var Vt=s(ie);Oo=d(Vt,"this https URL"),Vt.forEach(t),jo=d(vo,"."),vo.forEach(t),ro=_(e),Me=r(e,"P",{});var Jt=s(Me);No=d(Jt,"Tips:"),Jt.forEach(t),so=_(e),R=r(e,"P",{});var bo=s(R);Io=d(bo,"Three types of models are available depending on the pre-training data. Refer to the description "),de=r(bo,"A",{href:!0,rel:!0});var Qt=s(de);So=d(Qt,"here"),Qt.forEach(t),Wo=d(bo,"."),bo.forEach(t),io=_(e),L=r(e,"P",{});var Fe=s(L);Bo=d(Fe,"This model was contributed by "),le=r(Fe,"A",{href:!0,rel:!0});var Xt=s(le);Do=d(Xt,"Hiroaki Hayashi"),Xt.forEach(t),Ho=d(Fe,`.
The original code can be found `),ce=r(Fe,"A",{href:!0,rel:!0});var Yt=s(ce);Uo=d(Yt,"here"),Yt.forEach(t),Ro=d(Fe,"."),Fe.forEach(t),lo=_(e),j=r(e,"H2",{class:!0});var yo=s(j);V=r(yo,"A",{id:!0,class:!0,href:!0});var Zt=s(V);Se=r(Zt,"SPAN",{});var Kt=s(Se);C(pe.$$.fragment,Kt),Kt.forEach(t),Zt.forEach(t),Vo=_(yo),We=r(yo,"SPAN",{});var en=s(We);Jo=d(en,"CodeGenConfig"),en.forEach(t),yo.forEach(t),co=_(e),q=r(e,"DIV",{class:!0});var Le=s(q);C(he.$$.fragment,Le),Qo=_(Le),G=r(Le,"P",{});var A=s(G);Xo=d(A,"This is the configuration class to store the configuration of a "),Pe=r(A,"A",{href:!0});var on=s(Pe);Yo=d(on,"CodeGenModel"),on.forEach(t),Zo=d(A,`. It is used to instantiate a
CodeGen model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the CodeGen
`),me=r(A,"A",{href:!0,rel:!0});var tn=s(me);Ko=d(tn,"EleutherAI/gpt-j-6B"),tn.forEach(t),et=d(A,` architecture. Configuration objects inherit from
`),ze=r(A,"A",{href:!0});var nn=s(ze);ot=d(nn,"PretrainedConfig"),nn.forEach(t),tt=d(A," and can be used to control the model outputs. Read the documentation from "),Ee=r(A,"A",{href:!0});var an=s(Ee);nt=d(an,"PretrainedConfig"),an.forEach(t),at=d(A,`
for more information.`),A.forEach(t),rt=_(Le),C(J.$$.fragment,Le),Le.forEach(t),po=_(e),N=r(e,"H2",{class:!0});var Co=s(N);Q=r(Co,"A",{id:!0,class:!0,href:!0});var rn=s(Q);Be=r(rn,"SPAN",{});var sn=s(Be);C(ue.$$.fragment,sn),sn.forEach(t),rn.forEach(t),st=_(Co),De=r(Co,"SPAN",{});var dn=s(De);it=d(dn,"CodeGenModel"),dn.forEach(t),Co.forEach(t),ho=_(e),F=r(e,"DIV",{class:!0});var Ae=s(F);C(fe.$$.fragment,Ae),dt=_(Ae),ge=r(Ae,"P",{});var wo=s(ge);lt=d(wo,`The bare CodeGen Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),_e=r(wo,"A",{href:!0,rel:!0});var ln=s(_e);ct=d(ln,"torch.nn.Module"),ln.forEach(t),pt=d(wo,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),wo.forEach(t),ht=_(Ae),z=r(Ae,"DIV",{class:!0});var oe=s(z);C(ve.$$.fragment,oe),mt=_(oe),I=r(oe,"P",{});var Oe=s(I);ut=d(Oe,"The "),xe=r(Oe,"A",{href:!0});var cn=s(xe);ft=d(cn,"CodeGenModel"),cn.forEach(t),gt=d(Oe," forward method, overrides the "),He=r(Oe,"CODE",{});var pn=s(He);_t=d(pn,"__call__"),pn.forEach(t),vt=d(Oe," special method."),Oe.forEach(t),bt=_(oe),C(X.$$.fragment,oe),yt=_(oe),C(Y.$$.fragment,oe),oe.forEach(t),Ae.forEach(t),mo=_(e),S=r(e,"H2",{class:!0});var $o=s(S);Z=r($o,"A",{id:!0,class:!0,href:!0});var hn=s(Z);Ue=r(hn,"SPAN",{});var mn=s(Ue);C(be.$$.fragment,mn),mn.forEach(t),hn.forEach(t),Ct=_($o),Re=r($o,"SPAN",{});var un=s(Re);wt=d(un,"CodeGenForCausalLM"),un.forEach(t),$o.forEach(t),uo=_(e),M=r(e,"DIV",{class:!0});var te=s(M);C(ye.$$.fragment,te),$t=_(te),Ve=r(te,"P",{});var fn=s(Ve);kt=d(fn,"The CodeGen Model transformer with a language modeling head on top."),fn.forEach(t),Tt=_(te),Ce=r(te,"P",{});var ko=s(Ce);Gt=d(ko,"This model is a PyTorch "),we=r(ko,"A",{href:!0,rel:!0});var gn=s(we);Mt=d(gn,"torch.nn.Module"),gn.forEach(t),Pt=d(ko,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),ko.forEach(t),zt=_(te),E=r(te,"DIV",{class:!0});var ne=s(E);C($e.$$.fragment,ne),Et=_(ne),W=r(ne,"P",{});var je=s(W);xt=d(je,"The "),qe=r(je,"A",{href:!0});var _n=s(qe);qt=d(_n,"CodeGenForCausalLM"),_n.forEach(t),Ft=d(je," forward method, overrides the "),Je=r(je,"CODE",{});var vn=s(Je);Lt=d(vn,"__call__"),vn.forEach(t),At=d(je," special method."),je.forEach(t),Ot=_(ne),C(K.$$.fragment,ne),jt=_(ne),C(ee.$$.fragment,ne),ne.forEach(t),te.forEach(t),this.h()},h(){l(c,"name","hf:doc:metadata"),l(c,"content",JSON.stringify(xn)),l(h,"id","codegen"),l(h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(h,"href","#codegen"),l(f,"class","relative group"),l(B,"id","overview"),l(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(B,"href","#overview"),l(O,"class","relative group"),l(re,"href","https://arxiv.org/abs/2203.13474"),l(re,"rel","nofollow"),l(se,"href","https://pile.eleuther.ai/"),l(se,"rel","nofollow"),l(ie,"href","https://github.com/salesforce/codegen"),l(ie,"rel","nofollow"),l(de,"href","https://github.com/salesforce/codegen#released-models"),l(de,"rel","nofollow"),l(le,"href","https://huggingface.co/rooa"),l(le,"rel","nofollow"),l(ce,"href","https://github.com/salesforce/codegen"),l(ce,"rel","nofollow"),l(V,"id","transformers.CodeGenConfig"),l(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(V,"href","#transformers.CodeGenConfig"),l(j,"class","relative group"),l(Pe,"href","/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenModel"),l(me,"href","https://huggingface.co/EleutherAI/gpt-j-6B"),l(me,"rel","nofollow"),l(ze,"href","/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig"),l(Ee,"href","/docs/transformers/pr_17443/en/main_classes/configuration#transformers.PretrainedConfig"),l(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Q,"id","transformers.CodeGenModel"),l(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Q,"href","#transformers.CodeGenModel"),l(N,"class","relative group"),l(_e,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(_e,"rel","nofollow"),l(xe,"href","/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenModel"),l(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Z,"id","transformers.CodeGenForCausalLM"),l(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Z,"href","#transformers.CodeGenForCausalLM"),l(S,"class","relative group"),l(we,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(we,"rel","nofollow"),l(qe,"href","/docs/transformers/pr_17443/en/model_doc/codegen#transformers.CodeGenForCausalLM"),l(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,p){o(document.head,c),u(e,b,p),u(e,f,p),o(f,h),o(h,v),w(n,v,null),o(f,m),o(f,x),o(x,To),u(e,eo,p),u(e,O,p),o(O,B),o(B,Ne),w(ae,Ne,null),o(O,Go),o(O,Ie),o(Ie,Mo),u(e,oo,p),u(e,D,p),o(D,Po),o(D,re),o(re,zo),o(D,Eo),u(e,to,p),u(e,H,p),o(H,xo),o(H,se),o(se,qo),o(H,Fo),u(e,no,p),u(e,Ge,p),o(Ge,Lo),u(e,ao,p),u(e,U,p),o(U,Ao),o(U,ie),o(ie,Oo),o(U,jo),u(e,ro,p),u(e,Me,p),o(Me,No),u(e,so,p),u(e,R,p),o(R,Io),o(R,de),o(de,So),o(R,Wo),u(e,io,p),u(e,L,p),o(L,Bo),o(L,le),o(le,Do),o(L,Ho),o(L,ce),o(ce,Uo),o(L,Ro),u(e,lo,p),u(e,j,p),o(j,V),o(V,Se),w(pe,Se,null),o(j,Vo),o(j,We),o(We,Jo),u(e,co,p),u(e,q,p),w(he,q,null),o(q,Qo),o(q,G),o(G,Xo),o(G,Pe),o(Pe,Yo),o(G,Zo),o(G,me),o(me,Ko),o(G,et),o(G,ze),o(ze,ot),o(G,tt),o(G,Ee),o(Ee,nt),o(G,at),o(q,rt),w(J,q,null),u(e,po,p),u(e,N,p),o(N,Q),o(Q,Be),w(ue,Be,null),o(N,st),o(N,De),o(De,it),u(e,ho,p),u(e,F,p),w(fe,F,null),o(F,dt),o(F,ge),o(ge,lt),o(ge,_e),o(_e,ct),o(ge,pt),o(F,ht),o(F,z),w(ve,z,null),o(z,mt),o(z,I),o(I,ut),o(I,xe),o(xe,ft),o(I,gt),o(I,He),o(He,_t),o(I,vt),o(z,bt),w(X,z,null),o(z,yt),w(Y,z,null),u(e,mo,p),u(e,S,p),o(S,Z),o(Z,Ue),w(be,Ue,null),o(S,Ct),o(S,Re),o(Re,wt),u(e,uo,p),u(e,M,p),w(ye,M,null),o(M,$t),o(M,Ve),o(Ve,kt),o(M,Tt),o(M,Ce),o(Ce,Gt),o(Ce,we),o(we,Mt),o(Ce,Pt),o(M,zt),o(M,E),w($e,E,null),o(E,Et),o(E,W),o(W,xt),o(W,qe),o(qe,qt),o(W,Ft),o(W,Je),o(Je,Lt),o(W,At),o(E,Ot),w(K,E,null),o(E,jt),w(ee,E,null),fo=!0},p(e,[p]){const ke={};p&2&&(ke.$$scope={dirty:p,ctx:e}),J.$set(ke);const Qe={};p&2&&(Qe.$$scope={dirty:p,ctx:e}),X.$set(Qe);const Xe={};p&2&&(Xe.$$scope={dirty:p,ctx:e}),Y.$set(Xe);const Ye={};p&2&&(Ye.$$scope={dirty:p,ctx:e}),K.$set(Ye);const Te={};p&2&&(Te.$$scope={dirty:p,ctx:e}),ee.$set(Te)},i(e){fo||($(n.$$.fragment,e),$(ae.$$.fragment,e),$(pe.$$.fragment,e),$(he.$$.fragment,e),$(J.$$.fragment,e),$(ue.$$.fragment,e),$(fe.$$.fragment,e),$(ve.$$.fragment,e),$(X.$$.fragment,e),$(Y.$$.fragment,e),$(be.$$.fragment,e),$(ye.$$.fragment,e),$($e.$$.fragment,e),$(K.$$.fragment,e),$(ee.$$.fragment,e),fo=!0)},o(e){k(n.$$.fragment,e),k(ae.$$.fragment,e),k(pe.$$.fragment,e),k(he.$$.fragment,e),k(J.$$.fragment,e),k(ue.$$.fragment,e),k(fe.$$.fragment,e),k(ve.$$.fragment,e),k(X.$$.fragment,e),k(Y.$$.fragment,e),k(be.$$.fragment,e),k(ye.$$.fragment,e),k($e.$$.fragment,e),k(K.$$.fragment,e),k(ee.$$.fragment,e),fo=!1},d(e){t(c),e&&t(b),e&&t(f),T(n),e&&t(eo),e&&t(O),T(ae),e&&t(oo),e&&t(D),e&&t(to),e&&t(H),e&&t(no),e&&t(Ge),e&&t(ao),e&&t(U),e&&t(ro),e&&t(Me),e&&t(so),e&&t(R),e&&t(io),e&&t(L),e&&t(lo),e&&t(j),T(pe),e&&t(co),e&&t(q),T(he),T(J),e&&t(po),e&&t(N),T(ue),e&&t(ho),e&&t(F),T(fe),T(ve),T(X),T(Y),e&&t(mo),e&&t(S),T(be),e&&t(uo),e&&t(M),T(ye),T($e),T(K),T(ee)}}}const xn={local:"codegen",sections:[{local:"overview",title:"Overview"},{local:"transformers.CodeGenConfig",title:"CodeGenConfig"},{local:"transformers.CodeGenModel",title:"CodeGenModel"},{local:"transformers.CodeGenForCausalLM",title:"CodeGenForCausalLM"}],title:"CodeGen"};function qn(P){return kn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class In extends yn{constructor(c){super();Cn(this,c,qn,En,wn,{})}}export{In as default,xn as metadata};
